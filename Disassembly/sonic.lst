00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            stopZ80		macro
00000000                            		move.w    #$100,($A11100).l
00000000                            		nop
00000000                            		nop
00000000                            		nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            startZ80    macro
00000000                            		move.w    #0,($A11100).l    ; start the Z80
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            waitYM		macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                            		btst    #7,d2
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000 =FFFFFFC4                  VBlankJump	equ $FFFFFFC4
00000000 =FFFFFFCA                  HBlankJump	equ VBlankJump+6
00000000                            ; ===========================================================================
00000000                            loadJumps	macro fromloc
00000000                            
00000000                            		lea	VBlankJump,a0
00000000                            		lea	fromloc,a1
00000000                            	rept 3
00000000                            		move.l	(a1)+,(a0)+
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000        Vectors:	dc.l $FFFE00, EntryPoint
00000008 6000 FFFE                  ErrorTrap:	bra.w	*
0000000C                            
0000000C 0000 0000 0000 0000 0000+  		dc.l AddressError, IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0008 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FFCA 0000 0008 FFFF+  		dc.l HBlankJump, ErrorTrap, VBlankJump, ErrorTrap
00000080 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F4                            ; ===========================================================================
000000F4 4EF9 0000 0000             IntMain:	jmp	V_Int
000000FA 4EF9 0000 0000             			jmp	H_Int
00000100                            ; ===========================================================================
00000100 5345 4741 204D 4547 4120+  Console:		dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 4F57 4152 4920 2020 3230+  Date:			dc.b 'OWARI   2016.NOV' ; Release date
00000120 5975 6E64 6F6E 6720 5A69+  Title_Local:	dc.b 'Yundong Zixingche                               ' ; Domestic name
00000150 5975 6E67 646F 6E67 205A+  Title_Int:		dc.b 'Yungdong Zixingche                              ' ; International name
00000180 474D 2031 3331 3331 3331+  Serial:			dc.b 'GM 13131313-13'   ; Serial/version number
0000018E 0000                       Checksum:		dc.w 0
00000190 4A20 2020 2020 2020 2020+  				dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom			; ROM start
000001A4 0000 0000                  RomEndLoc:		dc.l EndOfRom-1			; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000			; RAM start
000001AC 00FF FFFF                  RamEndLoc:		dc.l $FFFFFF			; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020			; change to $5241E020 to create	SRAM
000001B4 2020 2020                  				dc.l $20202020			; SRAM start
000001B8 2020 2020                  				dc.l $20202020			; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:			dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:			dc.b 'JUE             ' ; Region
00000200                            ; ===========================================================================
00000200                            
00000200                            EntryPoint:
00000200 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
00000206 6600                       		bne.s	PortA_Ok
00000208 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
0000020E                            
0000020E                            PortA_Ok:
0000020E 6600                       		bne.s	PortC_Ok
00000210 4BFA 0000                  		lea	SetupValues(pc),a5
00000214 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000218 4CDD 1F00                  		movem.l	(a5)+,a0-a4
0000021C 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000220 0200 000F                  		andi.b	#$F,d0
00000224 6700                       		beq.s	SkipSecurity
00000226 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
0000022E                            
0000022E                            SkipSecurity:
0000022E 3014                       		move.w	(a4),d0		; check	if VDP works
00000230 7000                       		moveq	#0,d0
00000232 2C40                       		movea.l	d0,a6
00000234 4E66                       		move.l	a6,usp		; set usp to $0
00000236 7217                       		moveq	#$17,d1
00000238                            
00000238                            VDPInitLoop:
00000238 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000023A 3885                       		move.w	d5,(a4)		; move value to	VDP register
0000023C DA47                       		add.w	d7,d5		; next register
0000023E 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000242 289D                       		move.l	(a5)+,(a4)
00000244 3680                       		move.w	d0,(a3)		; clear	the screen
00000246 3287                       		move.w	d7,(a1)		; stop the Z80
00000248 3487                       		move.w	d7,(a2)		; reset	the Z80
0000024A                            
0000024A                            WaitForZ80:
0000024A 0111                       		btst	d0,(a1)		; has the Z80 stopped?
0000024C 66FC                       		bne.s	WaitForZ80	; if not, branch
0000024E 7425                       		moveq	#$25,d2
00000250                            
00000250                            Z80InitLoop:
00000250 10DD                       		move.b	(a5)+,(a0)+
00000252 51CA FFFC                  		dbf	d2,Z80InitLoop
00000256 3480                       		move.w	d0,(a2)
00000258 3280                       		move.w	d0,(a1)		; start	the Z80
0000025A 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025C                            
0000025C                            ClrRAMLoop:
0000025C 2D00                       		move.l	d0,-(a6)
0000025E 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000262 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000264 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
00000266 761F                       		moveq	#$1F,d3
00000268                            
00000268                            ClrCRAMLoop:
00000268 2680                       		move.l	d0,(a3)
0000026A 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
0000026E 289D                       		move.l	(a5)+,(a4)
00000270 7813                       		moveq	#$13,d4
00000272                            
00000272                            ClrVDPStuff:
00000272 2680                       		move.l	d0,(a3)
00000274 51CC FFFC                  		dbf	d4,ClrVDPStuff
00000278 7A03                       		moveq	#3,d5
0000027A                            
0000027A                            PSGInitLoop:
0000027A 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
0000027E 51CD FFFA                  		dbf	d5,PSGInitLoop
00000282 3480                       		move.w	d0,(a2)
00000284 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
00000288 46FC 2700                  		move	#$2700,sr	; set the sr
0000028C                            
0000028C                            PortC_Ok:
0000028C 6000                       		bra.s	GameProgram
0000028E                            ; ===========================================================================
0000028E 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000290 3FFF                       		dc.w $3FFF
00000292 0100                       		dc.w $100
00000294                            
00000294 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
00000298 00A1 1100                  		dc.l $A11100		; Z80 bus request
0000029C 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A0 00C0 0000                  		dc.l $C00000
000002A4 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002A8                            
000002A8 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002AC 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B0 0000 FF00                  		dc.b 0,	0, $FF,	0
000002B4 8137 0001                  		dc.b $81, $37, 0, 1
000002B8 0100 00FF                  		dc.b 1,	0, 0, $FF
000002BC FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C0                            
000002C0 4000 0080                  		dc.l $40000080
000002C4                            
000002C4 AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D0 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002DA D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002E5 ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002EA                            
000002EA 8104                       		dc.w $8104		; value	for VDP	display	mode
000002EC 8F02                       		dc.w $8F02		; value	for VDP	increment
000002EE C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F2 4000 0010                  		dc.l $40000010
000002F6                            
000002F6 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000002FA                            ; ===========================================================================
000002FA                            
000002FA                            GameProgram:
000002FA 4A79 00C0 0004             		tst.w	($C00004).l
00000300 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000306 7E00                       		moveq	#0,d7
00000308 3C3C 3FFF                  		move.w	#$3FFF,d6
0000030C                            
0000030C                            GameClrRAM:
0000030C 2CC7                       		move.l	d7,(a6)+
0000030E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000312                            
00000312 1039 00A1 0001             		move.b	($A10001).l,d0
00000318 0200 00C0                  		andi.b	#$C0,d0
0000031C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000320                            
00000320 41F8 FFC4 43F8 00F4 20D9+  		loadJumps IntMain
0000032E                            		
0000032E 6100 0000                  		bsr.w	VDPSetupGame
00000332 6100 0000                  		bsr.w	InitMegaPCM
00000336 6100 0000                  		bsr.w	JoypadInit
0000033A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Notice Screen
00000340                            
00000340                            MainGameLoop:
00000340 1038 F600                  		move.b	($FFFFF600).w,d0
00000344 0240 007C                  		andi.w	#$7C,d0
00000348 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
0000034C 4E90                       		jsr	(a0)
0000034E 60F0                       		bra.s	MainGameLoop
00000350                            ; ===========================================================================
00000350                            ; ---------------------------------------------------------------------------
00000350                            ; Main game mode array
00000350                            ; ---------------------------------------------------------------------------
00000350                            
00000350                            GameModeArray:
00000350 0000 0000                  		dc.l	NoticeScreen	; Notice Screen ($00)
00000354 0000 0000                  		dc.l	TitleScreen		; Title	Screen ($04)
00000358 0000 0000                  		dc.l	Level			; Demo Mode ($08)
0000035C 0000 0000                  		dc.l	Level			; Normal Level ($0C)
00000360 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
00000364 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
00000368 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
0000036C 0000 0000                  		dc.l	Credits			; Credits ($1C)
00000370 0000 0000                  		dc.l	SegaScreen		; Sega Screen ($20)
00000374                            ; ===========================================================================
00000374                            
00000374                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000894                            		even
00000894                            
00000894                            ; ===========================================================================
00000894                            
00000894                            V_Int:				; XREF: Vectors
00000894 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000898 4A38 F62A                  		tst.b	($FFFFF62A).w
0000089C 6700                       		beq.s	loc_B88
0000089E 3039 00C0 0004             		move.w	($C00004).l,d0
000008A4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000008AE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000008B6 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000008BC 6700                       		beq.s	loc_B42
000008BE 303C 0700                  		move.w	#$700,d0
000008C2                            
000008C2                            loc_B3E:
000008C2 51C8 FFFE                  		dbf	d0,loc_B3E
000008C6                            
000008C6                            loc_B42:
000008C6 1038 F62A                  		move.b	($FFFFF62A).w,d0
000008CA 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
000008D0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000008D6 0240 003E                  		andi.w	#$3E,d0
000008DA 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
000008DE 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
000008E2                            
000008E2                            loc_B5E:				; XREF: loc_B88
000008E2 4EB9 0000 0000             		jsr	sub_71B4C
000008E8                            
000008E8                            loc_B64:				; XREF: loc_D50
000008E8 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
000008EC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000008F0 4E73                       		rte	
000008F2                            ; ===========================================================================
000008F2 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
000008F6 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
000008FA 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
000008FE 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000902 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000906 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
0000090A 0000                       		dc.w loc_E72-off_B6E
0000090C                            ; ===========================================================================
0000090C                            
0000090C                            loc_B88:				; XREF: V_Int; off_B6E
0000090C 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000912 6700                       		beq.s	loc_B9A
00000914 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000091A 6600 FFC6                  		bne.w	loc_B5E
0000091E                            
0000091E                            loc_B9A:
0000091E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000924 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000928 3039 00C0 0004             		move.w	($C00004).l,d0
0000092E 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000934 6700                       		beq.s	loc_BBA
00000936 303C 0700                  		move.w	#$700,d0
0000093A                            
0000093A                            loc_BB6:
0000093A 51C8 FFFE                  		dbf	d0,loc_BB6
0000093E                            
0000093E                            loc_BBA:
0000093E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000944 4A38 F64E                  		tst.b	($FFFFF64E).w
00000948 6600                       		bne.s	loc_BFE
0000094A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000950 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000956 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000095C 3ABC 977F                  		move.w	#$977F,(a5)
00000960 3ABC C000                  		move.w	#$C000,(a5)
00000964 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000096A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000096E 6000                       		bra.s	loc_C22
00000970                            ; ===========================================================================
00000970                            
00000970                            loc_BFE:				; XREF: loc_BC8
00000970 4BF9 00C0 0004             		lea	($C00004).l,a5
00000976 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000097C 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000982 3ABC 977F                  		move.w	#$977F,(a5)
00000986 3ABC C000                  		move.w	#$C000,(a5)
0000098A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000990 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000994                            
00000994                            loc_C22:				; XREF: loc_BC8
00000994 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000998 6000 FF48                  		bra.w	loc_B5E
0000099C                            ; ===========================================================================
0000099C                            
0000099C                            loc_C32:				; XREF: off_B6E
0000099C 6100 0000                  		bsr.w	sub_106E
000009A0                            
000009A0                            loc_C36:				; XREF: off_B6E
000009A0 4A78 F614                  		tst.w	($FFFFF614).w
000009A4 6700 0000                  		beq.w	locret_C42
000009A8 5378 F614                  		subq.w	#1,($FFFFF614).w
000009AC                            
000009AC                            locret_C42:
000009AC 4E75                       		rts	
000009AE                            ; ===========================================================================
000009AE                            
000009AE                            loc_C44:				; XREF: off_B6E
000009AE 6100 0000                  		bsr.w	sub_106E
000009B2 6100 0000                  		bsr.w	sub_6886
000009B6 6100 0000                  		bsr.w	sub_1642
000009BA 4A78 F614                  		tst.w	($FFFFF614).w
000009BE 6700 0000                  		beq.w	locret_C5C
000009C2 5378 F614                  		subq.w	#1,($FFFFF614).w
000009C6                            
000009C6                            locret_C5C:
000009C6 4E75                       		rts	
000009C8                            ; ===========================================================================
000009C8                            
000009C8                            loc_C5E:				; XREF: off_B6E
000009C8 6100 0000                  		bsr.w	sub_106E
000009CC 4E75                       		rts	
000009CE                            ; ===========================================================================
000009CE                            
000009CE                            loc_C64:				; XREF: off_B6E
000009CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
000009D4 6700 0000                  		beq.w	loc_DA6		; if yes, branch
000009D8                            
000009D8                            loc_C6E:				; XREF: off_B6E
000009D8 6100 0000                  		bsr.w	ReadJoypads
000009DC 4A38 F64E                  		tst.b	($FFFFF64E).w
000009E0 6600                       		bne.s	loc_CB0
000009E2 4BF9 00C0 0004             		lea	($C00004).l,a5
000009E8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000009EE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000009F4 3ABC 977F                  		move.w	#$977F,(a5)
000009F8 3ABC C000                  		move.w	#$C000,(a5)
000009FC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A06 6000                       		bra.s	loc_CD4
00000A08                            ; ===========================================================================
00000A08                            
00000A08                            loc_CB0:				; XREF: loc_C76
00000A08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A0E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000A14 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000A1A 3ABC 977F                  		move.w	#$977F,(a5)
00000A1E 3ABC C000                  		move.w	#$C000,(a5)
00000A22 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A28 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A2C                            
00000A2C                            loc_CD4:				; XREF: loc_C76
00000A2C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000A30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A36 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000A3C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000A42 3ABC 977F                  		move.w	#$977F,(a5)
00000A46 3ABC 7C00                  		move.w	#$7C00,(a5)
00000A4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000A50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A5A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000A60 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000A66 3ABC 977F                  		move.w	#$977F,(a5)
00000A6A 3ABC 7800                  		move.w	#$7800,(a5)
00000A6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000A74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000A7E                            
00000A7E                            loc_D50:
00000A7E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000A84 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000A8A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000A90 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000A96 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000A9C 6400                       		bcc.s	Demo_Time
00000A9E 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000AA4 588F                       		addq.l	#4,sp
00000AA6 6000 FE40                  		bra.w	loc_B64
00000AAA                            
00000AAA                            ; ---------------------------------------------------------------------------
00000AAA                            ; Subroutine to	run a demo for an amount of time
00000AAA                            ; ---------------------------------------------------------------------------
00000AAA                            
00000AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000AAA                            
00000AAA                            
00000AAA                            Demo_Time:				; XREF: loc_D50; H_Int
00000AAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000AAE 4EB9 0000 0000             		jsr	AniArt_Load
00000AB4 4EB9 0000 0000             		jsr	HudUpdate
00000ABA 6100 0000                  		bsr.w	sub_165E
00000ABE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000AC2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000AC6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000ACA                            
00000ACA                            Demo_TimeEnd:
00000ACA 4E75                       		rts	
00000ACC                            ; End of function Demo_Time
00000ACC                            
00000ACC                            ; ===========================================================================
00000ACC                            
00000ACC                            loc_DA6:				; XREF: off_B6E
00000ACC 6100 0000                  		bsr.w	ReadJoypads
00000AD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ADC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000AE2 3ABC 977F                  		move.w	#$977F,(a5)
00000AE6 3ABC C000                  		move.w	#$C000,(a5)
00000AEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000AF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AFA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000B00 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000B06 3ABC 977F                  		move.w	#$977F,(a5)
00000B0A 3ABC 7800                  		move.w	#$7800,(a5)
00000B0E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000B14 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B1E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000B24 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000B2A 3ABC 977F                  		move.w	#$977F,(a5)
00000B2E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000B32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000B38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B3C 6100 0000                  		bsr.w	PalCycle_SS
00000B40 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000B46                            
00000B46                            loc_E64:
00000B46 4A78 F614                  		tst.w	($FFFFF614).w
00000B4A 6700 0000                  		beq.w	locret_E70
00000B4E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B52                            
00000B52                            locret_E70:
00000B52 4E75                       		rts	
00000B54                            ; ===========================================================================
00000B54                            
00000B54                            loc_E72:				; XREF: off_B6E
00000B54 6100 0000                  		bsr.w	ReadJoypads
00000B58 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B5C 6600                       		bne.s	loc_EB4
00000B5E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B64 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B6A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B70 3ABC 977F                  		move.w	#$977F,(a5)
00000B74 3ABC C000                  		move.w	#$C000,(a5)
00000B78 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B7E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B82 6000                       		bra.s	loc_ED8
00000B84                            ; ===========================================================================
00000B84                            
00000B84                            loc_EB4:				; XREF: loc_E7A
00000B84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B8A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B90 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000B96 3ABC 977F                  		move.w	#$977F,(a5)
00000B9A 3ABC C000                  		move.w	#$C000,(a5)
00000B9E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BA8                            
00000BA8                            loc_ED8:				; XREF: loc_E7A
00000BA8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BB2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000BB8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000BBE                            
00000BBE                            loc_EEE:
00000BBE 3ABC 977F                  		move.w	#$977F,(a5)
00000BC2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000BC6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000BDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000BE2 3ABC 977F                  		move.w	#$977F,(a5)
00000BE6 3ABC 7800                  		move.w	#$7800,(a5)
00000BEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF4 4A38 F767                  		tst.b	($FFFFF767).w
00000BF8 6700                       		beq.s	loc_F54
00000BFA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C00                            
00000C00                            loc_F54:
00000C00 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C06 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C0C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C12 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C18 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000C1C 4EB9 0000 0000             		jsr	AniArt_Load
00000C22 4EB9 0000 0000             		jsr	HudUpdate
00000C28 6100 0000                  		bsr.w	sub_1642
00000C2C 4E75                       		rts	
00000C2E                            ; ===========================================================================
00000C2E                            
00000C2E                            loc_F8A:				; XREF: off_B6E
00000C2E 6100 0000                  		bsr.w	sub_106E
00000C32 5238 F628                  		addq.b	#1,($FFFFF628).w
00000C36 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000C3C 4E75                       		rts	
00000C3E                            ; ===========================================================================
00000C3E                            
00000C3E                            loc_F9A:				; XREF: off_B6E
00000C3E 6100 0000                  		bsr.w	sub_106E
00000C42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C46 6000 0000                  		bra.w	sub_1642
00000C4A                            ; ===========================================================================
00000C4A                            
00000C4A                            loc_FA6:				; XREF: off_B6E
00000C4A 6100 0000                  		bsr.w	ReadJoypads
00000C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C5A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C60 3ABC 977F                  		move.w	#$977F,(a5)
00000C64 3ABC C000                  		move.w	#$C000,(a5)
00000C68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C72 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C78 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C7E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C84 3ABC 977F                  		move.w	#$977F,(a5)
00000C88 3ABC 7800                  		move.w	#$7800,(a5)
00000C8C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C92 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C96 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C9C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CA2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CA8 3ABC 977F                  		move.w	#$977F,(a5)
00000CAC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CB0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CB6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC0                            
00000CC0                            loc_1060:
00000CC0 4A78 F614                  		tst.w	($FFFFF614).w
00000CC4 6700 0000                  		beq.w	locret_106C
00000CC8 5378 F614                  		subq.w	#1,($FFFFF614).w
00000CCC                            
00000CCC                            locret_106C:
00000CCC 4E75                       		rts	
00000CCE                            
00000CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CCE                            
00000CCE                            
00000CCE                            sub_106E:				; XREF: loc_C32; et al
00000CCE 6100 0000                  		bsr.w	ReadJoypads
00000CD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000CD6 6600                       		bne.s	loc_10B0
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC C000                  		move.w	#$C000,(a5)
00000CF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 6000                       		bra.s	loc_10D4
00000CFE                            ; ===========================================================================
00000CFE                            
00000CFE                            loc_10B0:				; XREF: sub_106E
00000CFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000D10 3ABC 977F                  		move.w	#$977F,(a5)
00000D14 3ABC C000                  		move.w	#$C000,(a5)
00000D18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D22                            
00000D22                            loc_10D4:				; XREF: sub_106E
00000D22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D28 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D2E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D34 3ABC 977F                  		move.w	#$977F,(a5)
00000D38 3ABC 7800                  		move.w	#$7800,(a5)
00000D3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D4C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D52 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D58 3ABC 977F                  		move.w	#$977F,(a5)
00000D5C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D6A 4E75                       		rts	
00000D6C                            ; End of function sub_106E
00000D6C                            
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            ; Subroutine to	move Palettes from the RAM to CRAM
00000D6C                            ; ---------------------------------------------------------------------------
00000D6C                            
00000D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6C                            
00000D6C                            
00000D6C                            H_Int:
00000D6C 46FC 2700                  		move	#$2700,sr
00000D70 4A78 F644                  		tst.w	($FFFFF644).w
00000D74 6700                       		beq.s	locret_119C
00000D76 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000D7C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000D80 43F9 00C0 0000             		lea	($C00000).l,a1
00000D86 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
00000D8A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000D92 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
00000D94 2298                       		move.l	(a0)+,(a1)
00000D96 2298                       		move.l	(a0)+,(a1)
00000D98 2298                       		move.l	(a0)+,(a1)
00000D9A 2298                       		move.l	(a0)+,(a1)
00000D9C 2298                       		move.l	(a0)+,(a1)
00000D9E 2298                       		move.l	(a0)+,(a1)
00000DA0 2298                       		move.l	(a0)+,(a1)
00000DA2 2298                       		move.l	(a0)+,(a1)
00000DA4 2298                       		move.l	(a0)+,(a1)
00000DA6 2298                       		move.l	(a0)+,(a1)
00000DA8 2298                       		move.l	(a0)+,(a1)
00000DAA 2298                       		move.l	(a0)+,(a1)
00000DAC 2298                       		move.l	(a0)+,(a1)
00000DAE 2298                       		move.l	(a0)+,(a1)
00000DB0 2298                       		move.l	(a0)+,(a1)
00000DB2 2298                       		move.l	(a0)+,(a1)
00000DB4 2298                       		move.l	(a0)+,(a1)
00000DB6 2298                       		move.l	(a0)+,(a1)
00000DB8 2298                       		move.l	(a0)+,(a1)
00000DBA 2298                       		move.l	(a0)+,(a1)
00000DBC 2298                       		move.l	(a0)+,(a1)
00000DBE 2298                       		move.l	(a0)+,(a1)
00000DC0 2298                       		move.l	(a0)+,(a1)
00000DC2 2298                       		move.l	(a0)+,(a1)
00000DC4 2298                       		move.l	(a0)+,(a1)
00000DC6 2298                       		move.l	(a0)+,(a1)
00000DC8 2298                       		move.l	(a0)+,(a1)
00000DCA 2298                       		move.l	(a0)+,(a1)
00000DCC 2298                       		move.l	(a0)+,(a1)
00000DCE 2298                       		move.l	(a0)+,(a1)
00000DD0 2298                       		move.l	(a0)+,(a1)
00000DD2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00000DD8 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000DDC 4A38 F64F                  		tst.b	($FFFFF64F).w
00000DE0 6600                       		bne.s	loc_119E
00000DE2                            
00000DE2                            locret_119C:
00000DE2 4E73                       		rte	
00000DE4                            ; ===========================================================================
00000DE4                            
00000DE4                            loc_119E:				; XREF: H_Int
00000DE4 4238 F64F                  		clr.b	($FFFFF64F).w
00000DE8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000DEC 6100 FCBC                  		bsr.w	Demo_Time
00000DF0 4EB9 0000 0000             		jsr	sub_71B4C
00000DF6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DFA 4E73                       		rte	
00000DFC                            ; End of function H_Int
00000DFC                            
00000DFC                            ; ---------------------------------------------------------------------------
00000DFC                            ; Subroutine to	initialise joypads
00000DFC                            ; ---------------------------------------------------------------------------
00000DFC                            
00000DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DFC                            
00000DFC                            
00000DFC                            JoypadInit:				; XREF: GameClrRAM
00000DFC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E04                            
00000E04                            Joypad_WaitZ80:
00000E04 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000E0C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000E0E 7040                       		moveq	#$40,d0
00000E10 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000E16 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000E1C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000E22 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E2A 4E75                       		rts	
00000E2C                            ; End of function JoypadInit
00000E2C                            
00000E2C                            ; ---------------------------------------------------------------------------
00000E2C                            ; Subroutine to	read joypad input, and send it to the RAM
00000E2C                            ; ---------------------------------------------------------------------------
00000E2C                            
00000E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E2C                            
00000E2C                            
00000E2C                            ReadJoypads:
00000E2C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000E30 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000E36 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000E38 5449                       		addq.w	#2,a1		; do the second	joypad
00000E3A                            
00000E3A                            Joypad_Read:
00000E3A 12BC 0000                  		move.b	#0,(a1)
00000E3E 4E71                       		nop	
00000E40 4E71                       		nop	
00000E42 1011                       		move.b	(a1),d0
00000E44 E508                       		lsl.b	#2,d0
00000E46 0200 00C0                  		andi.b	#$C0,d0
00000E4A 12BC 0040                  		move.b	#$40,(a1)
00000E4E 4E71                       		nop	
00000E50 4E71                       		nop	
00000E52 1211                       		move.b	(a1),d1
00000E54 0201 003F                  		andi.b	#$3F,d1
00000E58 8001                       		or.b	d1,d0
00000E5A 4600                       		not.b	d0
00000E5C 1210                       		move.b	(a0),d1
00000E5E B101                       		eor.b	d0,d1
00000E60 10C0                       		move.b	d0,(a0)+
00000E62 C200                       		and.b	d0,d1
00000E64 10C1                       		move.b	d1,(a0)+
00000E66 4E75                       		rts	
00000E68                            ; End of function ReadJoypads
00000E68                            
00000E68                            
00000E68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E68                            
00000E68                            
00000E68                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00000E68 41F9 00C0 0004             		lea	($C00004).l,a0
00000E6E 43F9 00C0 0000             		lea	($C00000).l,a1
00000E74 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000E7A 7E12                       		moveq	#$12,d7
00000E7C                            
00000E7C                            VDP_Loop:
00000E7C 309A                       		move.w	(a2)+,(a0)
00000E7E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00000E82                            
00000E82 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000E88 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00000E8C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00000E92 7000                       		moveq	#0,d0
00000E94 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00000E9E 3E3C 003F                  		move.w	#$3F,d7
00000EA2                            
00000EA2                            VDP_ClrCRAM:
00000EA2 3280                       		move.w	d0,(a1)
00000EA4 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00000EA8                            
00000EA8 42B8 F616                  		clr.l	($FFFFF616).w
00000EAC 42B8 F61A                  		clr.l	($FFFFF61A).w
00000EB0 2F01                       		move.l	d1,-(sp)
00000EB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB8 3ABC 8F01                  		move.w	#$8F01,(a5)
00000EBC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00000EC2 3ABC 9780                  		move.w	#$9780,(a5)
00000EC6 2ABC 4000 0080             		move.l	#$40000080,(a5)
00000ECC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00000ED4                            
00000ED4                            loc_128E:
00000ED4 3215                       		move.w	(a5),d1
00000ED6 0801 0001                  		btst	#1,d1
00000EDA 66F8                       		bne.s	loc_128E
00000EDC                            
00000EDC 3ABC 8F02                  		move.w	#$8F02,(a5)
00000EE0 221F                       		move.l	(sp)+,d1
00000EE2 4E75                       		rts	
00000EE4                            ; End of function VDPSetupGame
00000EE4                            
00000EE4                            ; ===========================================================================
00000EE4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00000EEC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00000EF4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00000EFC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00000F04 9001 9100 9200             		dc.w $9001, $9100, $9200
00000F0A                            
00000F0A                            ; ---------------------------------------------------------------------------
00000F0A                            ; Subroutine to	clear the screen
00000F0A                            ; ---------------------------------------------------------------------------
00000F0A                            
00000F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F0A                            
00000F0A                            
00000F0A                            ClearScreen:
00000F0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F10 3ABC 8F01                  		move.w	#$8F01,(a5)
00000F14 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00000F1A 3ABC 9780                  		move.w	#$9780,(a5)
00000F1E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00000F24 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00000F2C                            
00000F2C                            loc_12E6:
00000F2C 3215                       		move.w	(a5),d1
00000F2E 0801 0001                  		btst	#1,d1
00000F32 66F8                       		bne.s	loc_12E6
00000F34                            
00000F34 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3E 3ABC 8F01                  		move.w	#$8F01,(a5)
00000F42 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00000F48 3ABC 9780                  		move.w	#$9780,(a5)
00000F4C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00000F52 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00000F5A                            
00000F5A                            loc_1314:
00000F5A 3215                       		move.w	(a5),d1
00000F5C 0801 0001                  		btst	#1,d1
00000F60 66F8                       		bne.s	loc_1314
00000F62                            
00000F62 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F66 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00000F6E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00000F76 43F8 F800                  		lea	($FFFFF800).w,a1
00000F7A 7000                       		moveq	#0,d0
00000F7C 323C 00A0                  		move.w	#$A0,d1
00000F80                            
00000F80                            loc_133A:
00000F80 22C0                       		move.l	d0,(a1)+
00000F82 51C9 FFFC                  		dbf	d1,loc_133A
00000F86                            
00000F86 43F8 CC00                  		lea	($FFFFCC00).w,a1
00000F8A 7000                       		moveq	#0,d0
00000F8C 323C 0100                  		move.w	#$100,d1
00000F90                            
00000F90                            loc_134A:
00000F90 22C0                       		move.l	d0,(a1)+
00000F92 51C9 FFFC                  		dbf	d1,loc_134A
00000F96 4E75                       		rts	
00000F98                            ; End of function ClearScreen
00000F98                            
00000F98                            ; ---------------------------------------------------------------------------
00000F98                            ; Subroutine to	load the sound driver
00000F98                            ; ---------------------------------------------------------------------------
00000F98                            
00000F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F98                            
00000F98                            
00000F98                            InitMegaPCM:			; XREF: GameClrRAM; TitleScreen
00000F98 4E71                       		nop
00000F9A 303C 0100                  		move.w	#$100,d0
00000F9E 33C0 00A1 1100             		move.w	d0,($A11100).l
00000FA4 33C0 00A1 1200             		move.w	d0,($A11200).l
00000FAA 41F9 0000 0000             		lea	(MegaPCM).l,a0
00000FB0 43F9 00A0 0000             		lea	($A00000).l,a1
00000FB6 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
00000FBA                            
00000FBA 12D8                       	@Load:	move.b	(a0)+,(a1)+
00000FBC 51C9 FFFC                  		dbf	d1,@Load
00000FC0 7200                       		moveq	#0,d1
00000FC2 33C1 00A1 1200             		move.w	d1,($A11200).l
00000FC8 4E71                       		nop
00000FCA 4E71                       		nop
00000FCC 4E71                       		nop
00000FCE 4E71                       		nop
00000FD0 33C0 00A1 1200             		move.w	d0,($A11200).l
00000FD6 33C1 00A1 1100             		move.w	d1,($A11100).l
00000FDC 4E75                       		rts
00000FDE                            ; End of function InitMegaPCM
00000FDE                            
00000FDE                            ; ---------------------------------------------------------------------------
00000FDE                            ; Subroutine to	play a DAC sample
00000FDE                            ; ---------------------------------------------------------------------------
00000FDE                            ; To use this: 
00000FDE                            ;		moveq	#$FFFFFFXX,d0
00000FDE                            ;		jsr	PlaySample
00000FDE                            ; XX = Sample Number
00000FDE                            ; ---------------------------------------------------------------------------
00000FDE                            
00000FDE                            PlaySample:
00000FDE 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
00000FE6 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
00000FEE 66F6                       	bne.s	@0
00000FF0 13C0 00A0 1FFF             	move.b	d0,$A01FFF
00000FF6 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
00000FFE 4E75                       	rts
00001000                            ; ===========================================================================
00001000                            
00001000                            PlayMusic:
00001000 0C00 0088                  		cmpi.b	#$88,d0
00001004 6700                       		beq.s	PlaySound
00001006 0C00 00A0                  		cmpi.b	#$A0,d0
0000100A 6C00                       		bge.s	PlaySound
0000100C 11C0 FFFC                  		move.b	d0,($FFFFFFFC).w
00001010                            ; ===========================================================================
00001010                            ; ---------------------------------------------------------------------------
00001010                            ; Subroutine to	play a sound or	music track
00001010                            ; ---------------------------------------------------------------------------
00001010                            
00001010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001010                            
00001010                            
00001010                            PlaySound:
00001010 6100                       		bsr.s	Snd_ChkStop
00001012 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001016 4E75                       		rts	
00001018                            ; End of function PlaySound
00001018                            
00001018                            ; ---------------------------------------------------------------------------
00001018                            ; Subroutine to	play a special sound/music (E0-E4)
00001018                            ;
00001018                            ; E0 - Fade out
00001018                            ; E1 - Sega
00001018                            ; E2 - Speed up
00001018                            ; E3 - Normal speed
00001018                            ; E4 - Stop
00001018                            ; ---------------------------------------------------------------------------
00001018                            
00001018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001018                            
00001018                            
00001018                            PlaySound_Special:
00001018 6100                       		bsr.s	Snd_ChkStop
0000101A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000101E 4E75                       		rts	
00001020                            ; End of function PlaySound_Special
00001020                            ; ===========================================================================
00001020                            
00001020                            Snd_ChkStop:
00001020 0C00 00E0                  		cmpi.b	#$E0,d0
00001024 6700                       		beq.s	@clr
00001026 0C00 00E4                  		cmpi.b	#$E4,d0
0000102A 6700                       		beq.s	@clr
0000102C 4E75                       		rts
0000102E                            		
0000102E                            @clr:
0000102E 11FC 0000 FFFC             		move.b	#0,($FFFFFFFC).w
00001034 4E75                       		rts
00001036                            ; ===========================================================================
00001036                            ; ---------------------------------------------------------------------------
00001036                            ; Unused sound/music subroutine
00001036                            ; ---------------------------------------------------------------------------
00001036                            
00001036                            PlaySound_Unk:
00001036 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000103A 4E75                       		rts	
0000103C                            
0000103C                            ; ---------------------------------------------------------------------------
0000103C                            ; Subroutine to	pause the game
0000103C                            ; ---------------------------------------------------------------------------
0000103C                            
0000103C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000103C                            
0000103C                            
0000103C                            PauseGame:				; XREF: Level_MainLoop; et al
0000103C 4E71                       		nop	
0000103E 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001042 6700                       		beq.s	Unpause		; if not, branch
00001044 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001048 6600                       		bne.s	loc_13BE	; if yes, branch
0000104A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001050 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001052                            
00001052                            loc_13BE:
00001052 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001058 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
0000105E                            
0000105E                            loc_13CA:
0000105E 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001064 6100 0000                  		bsr.w	DelayProgram
00001068 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000106C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000106E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001074 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001076 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000107C 4E71                       		nop	
0000107E 6000                       		bra.s	loc_1404
00001080                            ; ===========================================================================
00001080                            
00001080                            Pause_ChkBC:				; XREF: PauseGame
00001080 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001086 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001088 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000108E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001090                            
00001090                            Pause_ChkStart:				; XREF: PauseGame
00001090 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001096 67C6                       		beq.s	loc_13CA	; if not, branch
00001098                            
00001098                            loc_1404:				; XREF: PauseGame
00001098 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000109E                            
0000109E                            Unpause:				; XREF: PauseGame
0000109E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000010A4                            
000010A4                            Pause_DoNothing:			; XREF: PauseGame
000010A4 4E75                       		rts	
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            Pause_SlowMo:				; XREF: PauseGame
000010A6 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000010AC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000010B2 4E75                       		rts	
000010B4                            ; End of function PauseGame
000010B4                            
000010B4                            ; ---------------------------------------------------------------------------
000010B4                            ; Subroutine to	display	patterns via the VDP
000010B4                            ; ---------------------------------------------------------------------------
000010B4                            
000010B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B4                            
000010B4                            
000010B4                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000010B4 4DF9 00C0 0000             		lea	($C00000).l,a6
000010BA 283C 0080 0000             		move.l	#$800000,d4
000010C0                            
000010C0                            loc_142C:
000010C0 2D40 0004                  		move.l	d0,4(a6)
000010C4 3601                       		move.w	d1,d3
000010C6                            
000010C6                            loc_1432:
000010C6 3C99                       		move.w	(a1)+,(a6)
000010C8 51CB FFFC                  		dbf	d3,loc_1432
000010CC D084                       		add.l	d4,d0
000010CE 51CA FFF0                  		dbf	d2,loc_142C
000010D2 4E75                       		rts	
000010D4                            ; End of function ShowVDPGraphics
000010D4                            
000010D4                            ; ---------------------------------------------------------------------------
000010D4                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000010D4                            ; to be issued the next time ProcessDMAQueue is called.
000010D4                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000010D4                            ; by issuing the commands (this subroutine DOES check for overflow)
000010D4                            ; ---------------------------------------------------------------------------
000010D4                            ; In case you wish to use this queue system outside of the spin dash, this is the
000010D4                            ; registers in which it expects data in:
000010D4                            ; d1.l: Address to data (In 68k address space)
000010D4                            ; d2.w: Destination in VRAM
000010D4                            ; d3.w: Length of data
000010D4                            ; ---------------------------------------------------------------------------
000010D4                             
000010D4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000010D4                             
000010D4                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000010D4                            
000010D4                            ; VDP addressses
000010D4 =00C00000                  vdp_data_port:		equ $C00000
000010D4 =00C00004                  vdp_control_port:	equ $C00004
000010D4 =00C00008                  vdp_counter:		equ $C00008
000010D4                            ; Buffer Size Natsumi Credits
000010D4                            ;DMA_Buffer_Start	equ $FFFFA512-2	; the start address of DMA buffer for uncompressed art
000010D4                            ;DMA_Buffer_End		equ $FFFFA912-4	; the end address of DMA buffer for uncompressed art
000010D4                            ; Buffer Size S1 Default
000010D4 =FFFFC800                  DMA_Buffer_Start	equ $FFFFC800	; the start address of DMA buffer for uncompressed art
000010D4 =FFFFC8FC                  DMA_Buffer_End		equ $FFFFC8FC	; the end address of DMA buffer for uncompressed art
000010D4                            
000010D4                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
000010D4                            ProcessDMAQueue:
000010D4 4BF9 00C0 0004             		lea	VDP_Control_Port,a5
000010DA 43F8 C800                  		lea	DMA_Buffer_Start.w,a1
000010DE                            ; loc_14B6:
000010DE                            ProcessDMAQueue_Loop:
000010DE 3019                       		move.w	(a1)+,d0
000010E0 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
000010E2                            		; issue a set of VDP commands...
000010E2 3A80                       		move.w	d0,(a5)		; transfer length
000010E4 3A99                       		move.w	(a1)+,(a5)	; transfer length
000010E6 3A99                       		move.w	(a1)+,(a5)	; source address
000010E8 3A99                       		move.w	(a1)+,(a5)	; source address
000010EA 3A99                       		move.w	(a1)+,(a5)	; source address
000010EC 3A99                       		move.w	(a1)+,(a5)	; destination
000010EE 3A99                       		move.w	(a1)+,(a5)	; destination
000010F0 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000010F4 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000010F6                            ; loc_14CE:
000010F6                            ProcessDMAQueue_Done:
000010F6 31FC 0000 C800             		move.w	#0,DMA_Buffer_Start.w
000010FC 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End.w
00001104 4E75                       		rts
00001106                            		
00001106                            QueueDMATransfer:
00001106 2278 C8FC                  		movea.l	DMA_Buffer_End.w,a1
0000110A B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
0000110E 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001110                             
00001110                            		; piece together some VDP commands and store them for later...
00001110 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001114 1003                       		move.b	d3,d0
00001116 32C0                       		move.w	d0,(a1)+ ; store command
00001118                             
00001118 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
0000111C E04B                       		lsr.w	#8,d3
0000111E 1003                       		move.b	d3,d0
00001120 32C0                       		move.w	d0,(a1)+ ; store command
00001122                             
00001122 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001126 E289                       		lsr.l	#1,d1
00001128 1001                       		move.b	d1,d0
0000112A 32C0                       		move.w	d0,(a1)+ ; store command
0000112C                             
0000112C 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001130 E089                       		lsr.l	#8,d1
00001132 1001                       		move.b	d1,d0
00001134 32C0                       		move.w	d0,(a1)+ ; store command
00001136                             
00001136 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $01FE0000
0000113A E089                       		lsr.l	#8,d1
0000113C 1001                       		move.b	d1,d0
0000113E 32C0                       		move.w	d0,(a1)+ ; store command
00001140                             
00001140 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00001146 E58A                       		lsl.l	#2,d2
00001148 E44A                       		lsr.w	#2,d2
0000114A 4842                       		swap	d2
0000114C 0082 4000 0080             		or.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001152 22C2                       		move.l	d2,(a1)+ ; store command
00001154                             
00001154 21C9 C8FC                  		move.l	a1,DMA_Buffer_End.w ; set the next free slot address
00001158 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
0000115C 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000115E 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001162                            ; return_14AA:
00001162                            QueueDMATransfer_Done:
00001162 4E75                       		rts
00001164                            		
00001164                            
00001164 4278 C800                  		clr.w	DMA_Buffer_Start			; clear start of the DMA queue
00001168 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End	; reset address pointer of DMA queue
00001170                            ; End of function ProcessDMAQueue
00001170                            
00001170                            ; ===============================================================
00001170                            ; ---------------------------------------------------------------
00001170                            ; COMPER Decompressor
00001170                            ; ---------------------------------------------------------------
00001170                            ; INPUT:
00001170                            ;       a0      - Source Offset
00001170                            ;       a1      - Destination Offset
00001170                            ; ---------------------------------------------------------------
00001170                             
00001170                            CompDec
00001170                             
00001170                            @newblock
00001170 3018                               move.w  (a0)+,d0                ; fetch description field
00001172 760F                               moveq   #15,d3                  ; set bits counter to 16
00001174                             
00001174                            @mainloop
00001174 D040                               add.w   d0,d0                   ; roll description field
00001176 6500                               bcs.s   @flag                   ; if a flag issued, branch
00001178 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
0000117A 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
0000117E 60F0                               bra.s   @newblock               ; start a new block
00001180                             
00001180                            ; ---------------------------------------------------------------
00001180 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001182 1218                               move.b  (a0)+,d1                ; load displacement
00001184 D241                               add.w   d1,d1
00001186 7400                               moveq   #0,d2                   ; init copy count
00001188 1418                               move.b  (a0)+,d2                ; load copy length
0000118A 6700                               beq.s   @end                    ; if zero, branch
0000118C 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001190                             
00001190 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001192 51CA FFFC                          dbf     d2,@loop                ; repeat
00001196 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
0000119A 60D4                               bra.s   @newblock               ; start a new block
0000119C                             
0000119C 4E75                       @end    rts
0000119E                            
0000119E                            ; ==============================================================================
0000119E                            ; ------------------------------------------------------------------------------
0000119E                            ; Nemesis decompression routine
0000119E                            ; ------------------------------------------------------------------------------
0000119E                            ; Optimized by vladikcomper
0000119E                            ; ------------------------------------------------------------------------------
0000119E                             
0000119E                            NemDec_RAM:
0000119E 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000011A2 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
000011A6 6000                               bra.s   NemDec_Main
000011A8                             
000011A8                            ; ------------------------------------------------------------------------------
000011A8                            NemDec:
000011A8 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000011AC 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
000011B2 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
000011B6                             
000011B6                            NemDec_Main:
000011B6 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
000011BA 3418                               move.w  (a0)+,d2                ; get number of patterns
000011BC 6A00                               bpl.s   @0                      ; are we in Mode 0?
000011BE 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
000011C2 E74A                       @0      lsl.w   #3,d2
000011C4 3A42                               movea.w d2,a5
000011C6 7607                               moveq   #7,d3
000011C8 7400                               moveq   #0,d2
000011CA 7800                               moveq   #0,d4
000011CC 6100 0000                          bsr.w   NemDec4
000011D0 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
000011D2 E145                               asl.w   #8,d5                   ; shift up by a byte
000011D4 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
000011D6 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
000011DA 6100                               bsr.s   NemDec2
000011DC 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
000011E0 4E75                               rts
000011E2                             
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            ; Part of the Nemesis decompressor, processes the actual compressed data
000011E2                            ; ---------------------------------------------------------------------------
000011E2                             
000011E2                            NemDec2:
000011E2 3E06                               move.w  d6,d7
000011E4 5147                               subq.w  #8,d7                   ; get shift value
000011E6 3205                               move.w  d5,d1
000011E8 EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000011EA 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000011EE 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000011F0 0241 00FF                          andi.w  #$FF,d1
000011F4 D241                               add.w   d1,d1
000011F6 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000011FA 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000011FE 6400                               bcc.s   @0                      ; if not, branch
00001200 5046                               addq.w  #8,d6
00001202 E145                               asl.w   #8,d5
00001204 1A18                               move.b  (a0)+,d5                ; read next byte
00001206 1231 1001                  @0      move.b  1(a1,d1.w),d1
0000120A 3001                               move.w  d1,d0
0000120C 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00001210 0240 00F0                          andi.w  #$F0,d0
00001214                             
00001214                            NemDec_GetRepeatCount:
00001214 E848                               lsr.w   #4,d0                   ; get repeat count
00001216                             
00001216                            NemDec_WritePixel:
00001216 E98C                               lsl.l   #4,d4                   ; shift up by a nybble
00001218 8801                               or.b    d1,d4                   ; write pixel
0000121A 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
0000121E 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
00001220                            ; ---------------------------------------------------------------------------
00001220                             
00001220                            NemDec3:
00001220 7800                               moveq   #0,d4                   ; reset row
00001222 7607                               moveq   #7,d3                   ; reset nybble counter
00001224                             
00001224                            NemDec_WritePixelLoop:
00001224 51C8 FFF0                          dbf     d0,NemDec_WritePixel
00001228 60B8                               bra.s   NemDec2
0000122A                            ; ---------------------------------------------------------------------------
0000122A                             
0000122A                            NemDec_InlineData:
0000122A 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
0000122C 0C46 0009                          cmpi.w  #9,d6
00001230 6400                               bcc.s   @0
00001232 5046                               addq.w  #8,d6
00001234 E145                               asl.w   #8,d5
00001236 1A18                               move.b  (a0)+,d5
00001238 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
0000123A 3205                               move.w  d5,d1
0000123C EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
0000123E 3001                               move.w  d1,d0
00001240 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00001244 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
00001248 0C46 0009                          cmpi.w  #9,d6
0000124C 64C6                               bcc.s   NemDec_GetRepeatCount
0000124E 5046                               addq.w  #8,d6
00001250 E145                               asl.w   #8,d5
00001252 1A18                               move.b  (a0)+,d5
00001254 60BE                               bra.s   NemDec_GetRepeatCount
00001256                             
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutines to output decompressed entry
00001256                            ; Selected depending on current decompression mode
00001256                            ; ---------------------------------------------------------------------------
00001256                             
00001256                            NemDec_WriteRowToVDP:
00001256                            loc_1502:
00001256 2884                               move.l  d4,(a4)                 ; write 8-pixel row
00001258 534D                               subq.w  #1,a5
0000125A 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
0000125C 66C2                               bne.s   NemDec3                 ; if not, branch
0000125E 4E75                               rts
00001260                            ; ---------------------------------------------------------------------------
00001260                             
00001260                            NemDec_WriteRowToVDP_XOR:
00001260 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001262 2882                               move.l  d2,(a4)                 ; and write the result
00001264 534D                               subq.w  #1,a5
00001266 380D                               move.w  a5,d4
00001268 66B6                               bne.s   NemDec3
0000126A 4E75                               rts
0000126C                            ; ---------------------------------------------------------------------------
0000126C                             
0000126C                            NemDec_WriteRowToRAM:
0000126C 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
0000126E 534D                               subq.w  #1,a5
00001270 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001272 66AC                               bne.s   NemDec3                 ; if not, branch
00001274 4E75                               rts
00001276                            ; ---------------------------------------------------------------------------
00001276                             
00001276                            NemDec_WriteRowToRAM_XOR:
00001276 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001278 28C2                               move.l  d2,(a4)+                ; and write the result
0000127A 534D                               subq.w  #1,a5
0000127C 380D                               move.w  a5,d4
0000127E 66A0                               bne.s   NemDec3
00001280 4E75                               rts
00001282                             
00001282                            ; ---------------------------------------------------------------------------
00001282                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001282                            ; ---------------------------------------------------------------------------
00001282                             
00001282                            NemDec4:
00001282 1018                               move.b  (a0)+,d0                ; read first byte
00001284                             
00001284                            @ChkEnd:
00001284 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
00001288 6600                               bne.s   @NewPalIndex            ; if not, branch
0000128A 4E75                               rts
0000128C                            ; ---------------------------------------------------------------------------
0000128C                             
0000128C                            @NewPalIndex:
0000128C 3E00                               move.w  d0,d7
0000128E                             
0000128E                            @ItemLoop:
0000128E 1018                               move.b  (a0)+,d0                ; read next byte
00001290 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001292 1200                               move.b  d0,d1
00001294 0247 000F                          andi.w  #$F,d7                  ; get palette index
00001298 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
0000129C 8E41                               or.w    d1,d7                   ; combine the two
0000129E 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
000012A2 1200                               move.b  d0,d1
000012A4 E149                               lsl.w   #8,d1
000012A6 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
000012A8 7208                               moveq   #8,d1
000012AA 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
000012AC 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
000012AE 1018                               move.b  (a0)+,d0                ; get code
000012B0 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
000012B2 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
000012B6 60D6                               bra.s   @ItemLoop               ; repeat
000012B8                            ; ---------------------------------------------------------------------------
000012B8                             
000012B8                            @ItemShortCode:
000012B8 1018                               move.b  (a0)+,d0                ; get code
000012BA E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
000012BC D040                               add.w   d0,d0                   ; get index into code table
000012BE 7A01                               moveq   #1,d5
000012C0 E36D                               lsl.w   d1,d5
000012C2 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
000012C4 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
000012C8                             
000012C8                            @ItemShortCodeLoop:
000012C8 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
000012CA 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
000012CE 60BE                               bra.s   @ItemLoop
000012D0                            
000012D0                            ; ---------------------------------------------------------------------------
000012D0                            ; Subroutine to	load pattern load cues
000012D0                            ; ---------------------------------------------------------------------------
000012D0                            
000012D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D0                            
000012D0                            
000012D0                            LoadPLC:
000012D0 48E7 0060                  		movem.l	a1-a2,-(sp)
000012D4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000012DA D040                       		add.w	d0,d0
000012DC 3031 0000                  		move.w	(a1,d0.w),d0
000012E0 43F1 0000                  		lea	(a1,d0.w),a1
000012E4 45F8 F680                  		lea	($FFFFF680).w,a2
000012E8                            
000012E8                            loc_1598:
000012E8 4A92                       		tst.l	(a2)
000012EA 6700                       		beq.s	loc_15A0
000012EC 5C4A                       		addq.w	#6,a2
000012EE 60F8                       		bra.s	loc_1598
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            loc_15A0:				; XREF: LoadPLC
000012F0 3019                       		move.w	(a1)+,d0
000012F2 6B00                       		bmi.s	loc_15AC
000012F4                            
000012F4                            loc_15A4:
000012F4 24D9                       		move.l	(a1)+,(a2)+
000012F6 34D9                       		move.w	(a1)+,(a2)+
000012F8 51C8 FFFA                  		dbf	d0,loc_15A4
000012FC                            
000012FC                            loc_15AC:
000012FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001300 4E75                       		rts	
00001302                            ; End of function LoadPLC
00001302                            
00001302                            
00001302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001302                            
00001302                            
00001302                            LoadPLC2:
00001302 48E7 0060                  		movem.l	a1-a2,-(sp)
00001306 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000130C D040                       		add.w	d0,d0
0000130E 3031 0000                  		move.w	(a1,d0.w),d0
00001312 43F1 0000                  		lea	(a1,d0.w),a1
00001316 6100                       		bsr.s	ClearPLC
00001318 45F8 F680                  		lea	($FFFFF680).w,a2
0000131C 3019                       		move.w	(a1)+,d0
0000131E 6B00                       		bmi.s	loc_15D8
00001320                            
00001320                            loc_15D0:
00001320 24D9                       		move.l	(a1)+,(a2)+
00001322 34D9                       		move.w	(a1)+,(a2)+
00001324 51C8 FFFA                  		dbf	d0,loc_15D0
00001328                            
00001328                            loc_15D8:
00001328 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000132C 4E75                       		rts	
0000132E                            ; End of function LoadPLC2
0000132E                            
0000132E                            ; ---------------------------------------------------------------------------
0000132E                            ; Subroutine to	clear the pattern load cues
0000132E                            ; ---------------------------------------------------------------------------
0000132E                            
0000132E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000132E                            
0000132E                            
0000132E                            ClearPLC:				; XREF: LoadPLC2
0000132E 45F8 F680                  		lea	($FFFFF680).w,a2
00001332 701F                       		moveq	#$1F,d0
00001334                            
00001334                            ClearPLC_Loop:
00001334 429A                       		clr.l	(a2)+
00001336 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000133A 4E75                       		rts	
0000133C                            ; End of function ClearPLC
0000133C                            
0000133C                            ; ---------------------------------------------------------------------------
0000133C                            ; Subroutine to	use graphics listed in a pattern load cue
0000133C                            ; ---------------------------------------------------------------------------
0000133C                            
0000133C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000133C                            
0000133C                            
0000133C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000133C 4AB8 F680                  		tst.l	($FFFFF680).w
00001340 6700                       		beq.s	locret_1640
00001342 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001346 6600                       		bne.s	locret_1640
00001348 2078 F680                  		movea.l	($FFFFF680).w,a0
0000134C 47F9 0000 1256             		lea	(loc_1502).l,a3
00001352 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001356 3418                       		move.w	(a0)+,d2
00001358 6A00                       		bpl.s	loc_160E
0000135A D6FC 000A                  		adda.w	#$A,a3
0000135E                            
0000135E                            loc_160E:
0000135E 0242 7FFF                  		andi.w	#$7FFF,d2
00001362 6100 FF1E                  		bsr.w	NemDec4
00001366 1A18                       		move.b	(a0)+,d5
00001368 E145                       		asl.w	#8,d5
0000136A 1A18                       		move.b	(a0)+,d5
0000136C 7C10                       		moveq	#$10,d6
0000136E 7000                       		moveq	#0,d0
00001370 21C8 F680                  		move.l	a0,($FFFFF680).w
00001374 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001378 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000137C 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001380 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001384 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001388 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000138C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001390                            
00001390                            locret_1640:
00001390 4E75                       		rts	
00001392                            ; End of function RunPLC_RAM
00001392                            
00001392                            
00001392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001392                            
00001392                            
00001392                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001392 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001396 6700 0000                  		beq.w	locret_16DA
0000139A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000013A0 7000                       		moveq	#0,d0
000013A2 3038 F684                  		move.w	($FFFFF684).w,d0
000013A6 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000013AC 6000                       		bra.s	loc_1676
000013AE                            ; End of function sub_1642
000013AE                            
000013AE                            
000013AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013AE                            
000013AE                            
000013AE                            sub_165E:				; XREF: Demo_Time
000013AE 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000013B2 6700                       		beq.s	locret_16DA
000013B4 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000013BA 7000                       		moveq	#0,d0
000013BC 3038 F684                  		move.w	($FFFFF684).w,d0
000013C0 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000013C6                            
000013C6                            loc_1676:				; XREF: sub_1642
000013C6 49F9 00C0 0004             		lea	($C00004).l,a4
000013CC E588                       		lsl.l	#2,d0
000013CE E448                       		lsr.w	#2,d0
000013D0 0040 4000                  		ori.w	#$4000,d0
000013D4 4840                       		swap	d0
000013D6 2880                       		move.l	d0,(a4)
000013D8 594C                       		subq.w	#4,a4
000013DA 2078 F680                  		movea.l	($FFFFF680).w,a0
000013DE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000013E2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000013E6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000013EA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000013EE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000013F2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000013F6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000013FA                            
000013FA                            loc_16AA:				; XREF: sub_165E
000013FA 3A7C 0008                  		movea.w	#8,a5
000013FE 6100 FE20                  		bsr.w	NemDec3
00001402 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001406 6700                       		beq.s	loc_16DC
00001408 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000140C 66EC                       		bne.s	loc_16AA
0000140E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001412 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001416 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000141A 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000141E 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001422 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001426 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000142A                            
0000142A                            locret_16DA:				; XREF: sub_1642
0000142A 4E75                       		rts	
0000142C                            ; ===========================================================================
0000142C                            
0000142C                            loc_16DC:				; XREF: sub_165E
0000142C 41F8 F680                  		lea	($FFFFF680).w,a0
00001430 7015                       		moveq	#$15,d0
00001432                            
00001432                            loc_16E2:				; XREF: sub_165E
00001432 20E8 0006                  		move.l	6(a0),(a0)+
00001436 51C8 FFFA                  		dbf	d0,loc_16E2
0000143A 4E75                       		rts	
0000143C                            ; End of function sub_165E
0000143C                            
0000143C                            ; ---------------------------------------------------------------------------
0000143C                            ; Subroutine to	execute	the pattern load cue
0000143C                            ; ---------------------------------------------------------------------------
0000143C                            
0000143C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000143C                            
0000143C                            
0000143C                            RunPLC_ROM:
0000143C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001442 D040                       		add.w	d0,d0
00001444 3031 0000                  		move.w	(a1,d0.w),d0
00001448 43F1 0000                  		lea	(a1,d0.w),a1
0000144C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000144E                            
0000144E                            RunPLC_Loop:
0000144E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001450 7000                       		moveq	#0,d0
00001452 3019                       		move.w	(a1)+,d0	; get VRAM address
00001454 E588                       		lsl.l	#2,d0		; divide address by $20
00001456 E448                       		lsr.w	#2,d0
00001458 0040 4000                  		ori.w	#$4000,d0
0000145C 4840                       		swap	d0
0000145E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001464 6100 FD42                  		bsr.w	NemDec		; decompress
00001468 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000146C 4E75                       		rts	
0000146E                            ; End of function RunPLC_ROM
0000146E                            
0000146E                            ; ---------------------------------------------------------------------------
0000146E                            ; Enigma decompression algorithm
0000146E                            ; ---------------------------------------------------------------------------
0000146E                            
0000146E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000146E                            
0000146E                            
0000146E                            EniDec:
0000146E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001472 3640                       		movea.w	d0,a3
00001474 1018                       		move.b	(a0)+,d0
00001476 4880                       		ext.w	d0
00001478 3A40                       		movea.w	d0,a5
0000147A 1818                       		move.b	(a0)+,d4
0000147C E70C                       		lsl.b	#3,d4
0000147E 3458                       		movea.w	(a0)+,a2
00001480 D4CB                       		adda.w	a3,a2
00001482 3858                       		movea.w	(a0)+,a4
00001484 D8CB                       		adda.w	a3,a4
00001486 1A18                       		move.b	(a0)+,d5
00001488 E145                       		asl.w	#8,d5
0000148A 1A18                       		move.b	(a0)+,d5
0000148C 7C10                       		moveq	#$10,d6
0000148E                            
0000148E                            loc_173E:				; XREF: loc_1768
0000148E 7007                       		moveq	#7,d0
00001490 3E06                       		move.w	d6,d7
00001492 9E40                       		sub.w	d0,d7
00001494 3205                       		move.w	d5,d1
00001496 EE69                       		lsr.w	d7,d1
00001498 0241 007F                  		andi.w	#$7F,d1
0000149C 3401                       		move.w	d1,d2
0000149E 0C41 0040                  		cmpi.w	#$40,d1
000014A2 6400                       		bcc.s	loc_1758
000014A4 7006                       		moveq	#6,d0
000014A6 E24A                       		lsr.w	#1,d2
000014A8                            
000014A8                            loc_1758:
000014A8 6100 0000                  		bsr.w	sub_188C
000014AC 0242 000F                  		andi.w	#$F,d2
000014B0 E849                       		lsr.w	#4,d1
000014B2 D241                       		add.w	d1,d1
000014B4 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000014B8                            ; End of function EniDec
000014B8                            
000014B8                            ; ===========================================================================
000014B8                            
000014B8                            loc_1768:				; XREF: loc_17B4
000014B8 32CA                       		move.w	a2,(a1)+
000014BA 524A                       		addq.w	#1,a2
000014BC 51CA FFFA                  		dbf	d2,loc_1768
000014C0 60CC                       		bra.s	loc_173E
000014C2                            ; ===========================================================================
000014C2                            
000014C2                            loc_1772:				; XREF: loc_17B4
000014C2 32CC                       		move.w	a4,(a1)+
000014C4 51CA FFFC                  		dbf	d2,loc_1772
000014C8 60C4                       		bra.s	loc_173E
000014CA                            ; ===========================================================================
000014CA                            
000014CA                            loc_177A:				; XREF: loc_17B4
000014CA 6100 0000                  		bsr.w	loc_17DC
000014CE                            
000014CE                            loc_177E:
000014CE 32C1                       		move.w	d1,(a1)+
000014D0 51CA FFFC                  		dbf	d2,loc_177E
000014D4 60B8                       		bra.s	loc_173E
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_1786:				; XREF: loc_17B4
000014D6 6100 0000                  		bsr.w	loc_17DC
000014DA                            
000014DA                            loc_178A:
000014DA 32C1                       		move.w	d1,(a1)+
000014DC 5241                       		addq.w	#1,d1
000014DE 51CA FFFA                  		dbf	d2,loc_178A
000014E2 60AA                       		bra.s	loc_173E
000014E4                            ; ===========================================================================
000014E4                            
000014E4                            loc_1794:				; XREF: loc_17B4
000014E4 6100 0000                  		bsr.w	loc_17DC
000014E8                            
000014E8                            loc_1798:
000014E8 32C1                       		move.w	d1,(a1)+
000014EA 5341                       		subq.w	#1,d1
000014EC 51CA FFFA                  		dbf	d2,loc_1798
000014F0 609C                       		bra.s	loc_173E
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            loc_17A2:				; XREF: loc_17B4
000014F2 0C42 000F                  		cmpi.w	#$F,d2
000014F6 6700                       		beq.s	loc_17C4
000014F8                            
000014F8                            loc_17A8:
000014F8 6100 0000                  		bsr.w	loc_17DC
000014FC 32C1                       		move.w	d1,(a1)+
000014FE 51CA FFF8                  		dbf	d2,loc_17A8
00001502 608A                       		bra.s	loc_173E
00001504                            ; ===========================================================================
00001504                            
00001504                            loc_17B4:				; XREF: EniDec
00001504 60B2                       		bra.s	loc_1768
00001506                            ; ===========================================================================
00001506 60B0                       		bra.s	loc_1768
00001508                            ; ===========================================================================
00001508 60B8                       		bra.s	loc_1772
0000150A                            ; ===========================================================================
0000150A 60B6                       		bra.s	loc_1772
0000150C                            ; ===========================================================================
0000150C 60BC                       		bra.s	loc_177A
0000150E                            ; ===========================================================================
0000150E 60C6                       		bra.s	loc_1786
00001510                            ; ===========================================================================
00001510 60D2                       		bra.s	loc_1794
00001512                            ; ===========================================================================
00001512 60DE                       		bra.s	loc_17A2
00001514                            ; ===========================================================================
00001514                            
00001514                            loc_17C4:				; XREF: loc_17A2
00001514 5348                       		subq.w	#1,a0
00001516 0C46 0010                  		cmpi.w	#$10,d6
0000151A 6600                       		bne.s	loc_17CE
0000151C 5348                       		subq.w	#1,a0
0000151E                            
0000151E                            loc_17CE:
0000151E 3008                       		move.w	a0,d0
00001520 E248                       		lsr.w	#1,d0
00001522 6400                       		bcc.s	loc_17D6
00001524 5248                       		addq.w	#1,a0
00001526                            
00001526                            loc_17D6:
00001526 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000152A 4E75                       		rts	
0000152C                            ; ===========================================================================
0000152C                            
0000152C                            loc_17DC:				; XREF: loc_17A2
0000152C 360B                       		move.w	a3,d3
0000152E 1204                       		move.b	d4,d1
00001530 D201                       		add.b	d1,d1
00001532 6400                       		bcc.s	loc_17EE
00001534 5346                       		subq.w	#1,d6
00001536 0D05                       		btst	d6,d5
00001538 6700                       		beq.s	loc_17EE
0000153A 0043 8000                  		ori.w	#-$8000,d3
0000153E                            
0000153E                            loc_17EE:
0000153E D201                       		add.b	d1,d1
00001540 6400                       		bcc.s	loc_17FC
00001542 5346                       		subq.w	#1,d6
00001544 0D05                       		btst	d6,d5
00001546 6700                       		beq.s	loc_17FC
00001548 0643 4000                  		addi.w	#$4000,d3
0000154C                            
0000154C                            loc_17FC:
0000154C D201                       		add.b	d1,d1
0000154E 6400                       		bcc.s	loc_180A
00001550 5346                       		subq.w	#1,d6
00001552 0D05                       		btst	d6,d5
00001554 6700                       		beq.s	loc_180A
00001556 0643 2000                  		addi.w	#$2000,d3
0000155A                            
0000155A                            loc_180A:
0000155A D201                       		add.b	d1,d1
0000155C 6400                       		bcc.s	loc_1818
0000155E 5346                       		subq.w	#1,d6
00001560 0D05                       		btst	d6,d5
00001562 6700                       		beq.s	loc_1818
00001564 0043 1000                  		ori.w	#$1000,d3
00001568                            
00001568                            loc_1818:
00001568 D201                       		add.b	d1,d1
0000156A 6400                       		bcc.s	loc_1826
0000156C 5346                       		subq.w	#1,d6
0000156E 0D05                       		btst	d6,d5
00001570 6700                       		beq.s	loc_1826
00001572 0043 0800                  		ori.w	#$800,d3
00001576                            
00001576                            loc_1826:
00001576 3205                       		move.w	d5,d1
00001578 3E06                       		move.w	d6,d7
0000157A 9E4D                       		sub.w	a5,d7
0000157C 6400                       		bcc.s	loc_1856
0000157E 3C07                       		move.w	d7,d6
00001580 0646 0010                  		addi.w	#$10,d6
00001584 4447                       		neg.w	d7
00001586 EF69                       		lsl.w	d7,d1
00001588 1A10                       		move.b	(a0),d5
0000158A EF3D                       		rol.b	d7,d5
0000158C DE47                       		add.w	d7,d7
0000158E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001592 D245                       		add.w	d5,d1
00001594                            
00001594                            loc_1844:				; XREF: loc_1868
00001594 300D                       		move.w	a5,d0
00001596 D040                       		add.w	d0,d0
00001598 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000159C D243                       		add.w	d3,d1
0000159E 1A18                       		move.b	(a0)+,d5
000015A0 E14D                       		lsl.w	#8,d5
000015A2 1A18                       		move.b	(a0)+,d5
000015A4 4E75                       		rts	
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_1856:				; XREF: loc_1826
000015A6 6700                       		beq.s	loc_1868
000015A8 EE69                       		lsr.w	d7,d1
000015AA 300D                       		move.w	a5,d0
000015AC D040                       		add.w	d0,d0
000015AE C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000015B2 D243                       		add.w	d3,d1
000015B4 300D                       		move.w	a5,d0
000015B6 6000                       		bra.s	sub_188C
000015B8                            ; ===========================================================================
000015B8                            
000015B8                            loc_1868:				; XREF: loc_1856
000015B8 7C10                       		moveq	#$10,d6
000015BA                            
000015BA                            loc_186A:
000015BA 60D8                       		bra.s	loc_1844
000015BC                            ; ===========================================================================
000015BC 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000015D2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000015DC                            
000015DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DC                            
000015DC                            
000015DC                            sub_188C:				; XREF: EniDec
000015DC 9C40                       		sub.w	d0,d6
000015DE 0C46 0009                  		cmpi.w	#9,d6
000015E2 6400                       		bcc.s	locret_189A
000015E4 5046                       		addq.w	#8,d6
000015E6 E145                       		asl.w	#8,d5
000015E8 1A18                       		move.b	(a0)+,d5
000015EA                            
000015EA                            locret_189A:
000015EA 4E75                       		rts	
000015EC                            ; End of function sub_188C
000015EC                            
000015EC                            ; ===========================================================================
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Kosinski decompression routine
000015EC                            ;
000015EC                            ; Created by vladikcomper
000015EC                            ; Special thanks to flamewing and MarkeyJester
000015EC                            ; ---------------------------------------------------------------------------
000015EC                             
000015EC                            _Kos_RunBitStream macro
000015EC                                    dbf     d2,@skip\@
000015EC                                    moveq   #7,d2
000015EC                                    move.b  d1,d0
000015EC                                    swap    d3
000015EC                                    bpl.s   @skip\@
000015EC                                    move.b  (a0)+,d0                        ; get desc. bitfield
000015EC                                    move.b  (a0)+,d1                        ;
000015EC                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000015EC                                    move.b  (a4,d1.w),d1                    ;
000015EC                            @skip\@
000015EC                                    endm
000015EC                            ; ---------------------------------------------------------------------------
000015EC                             
000015EC                            KosDec:
000015EC 7E07                               moveq   #7,d7
000015EE 7000                               moveq   #0,d0
000015F0 7200                               moveq   #0,d1
000015F2 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000015F6 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000015F8 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000015FA 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000015FE 1234 1000                          move.b  (a4,d1.w),d1                    ;
00001602 7407                               moveq   #7,d2                           ; set repeat count to 8
00001604 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
00001606 4243                               clr.w   d3                              ;
00001608 6000                               bra.s   KosDec_FetchNewCode
0000160A                             
0000160A                            KosDec_FetchCodeLoop:
0000160A                                    ; code 1 (Uncompressed byte)
0000160A 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001622 12D8                               move.b  (a0)+,(a1)+
00001624                             
00001624                            KosDec_FetchNewCode:
00001624 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001626 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
00001628                             
00001628                                    ; codes 00 and 01
00001628 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001640 7800                               moveq   #0,d4                           ; d4 will contain copy count
00001642 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001644 6500                               bcs.s   KosDec_Code_01
00001646                             
00001646                                    ; code 00 (Dictionary ref. short)
00001646 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000165E D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001660 D944                               addx.w  d4,d4
00001662 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000167A D000                               add.b   d0,d0                           ; get a bit from the bitstream
0000167C D944                               addx.w  d4,d4
0000167E 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001696 7AFF                               moveq   #-1,d5
00001698 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
0000169A                             
0000169A                            KosDec_StreamCopy:
0000169A 47F1 5000                          lea     (a1,d5),a3
0000169E 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
000016A0                             
000016A0                            KosDec_copy:
000016A0 12DB                               move.b  (a3)+,(a1)+
000016A2 51CC FFFC                          dbf     d4,KosDec_copy
000016A6 6000 FF7C                          bra.w   KosDec_FetchNewCode
000016AA                            ; ---------------------------------------------------------------------------
000016AA                            KosDec_Code_01:
000016AA                                    ; code 01 (Dictionary ref. long / special)
000016AA 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000016C2 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
000016C4 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
000016C6 7AFF                               moveq   #-1,d5
000016C8 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
000016CA EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
000016CC 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
000016CE C847                               and.w   d7,d4                           ; d4 = %00000CCC
000016D0 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
000016D2                             
000016D2                                    ; special mode (extended counter)
000016D2 1818                               move.b  (a0)+,d4                        ; read cnt
000016D4 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
000016D6 5304                               subq.b  #1,d4
000016D8 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
000016DC                             
000016DC 47F1 5000                          lea     (a1,d5),a3
000016E0 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
000016E2 3C04                               move.w  d4,d6
000016E4 4646                               not.w   d6
000016E6 CC47                               and.w   d7,d6
000016E8 DC46                               add.w   d6,d6
000016EA E64C                               lsr.w   #3,d4
000016EC 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000016F0                             
000016F0                            KosDec_largecopy:
000016F0                                    rept 8
000016F0                                    move.b  (a3)+,(a1)+
000016F0 12DB 12DB 12DB 12DB 12DB+          endr
00001700 51CC FFEE                          dbf     d4,KosDec_largecopy
00001704 6000 FF1E                          bra.w   KosDec_FetchNewCode
00001708                             
00001708                            KosDec_Quit:
00001708 4E75                               rts
0000170A                             
0000170A                            ; ---------------------------------------------------------------------------
0000170A                            ; A look-up table to invert bits order in desc. field bytes
0000170A                            ; ---------------------------------------------------------------------------
0000170A                             
0000170A                            KosDec_ByteMap:
0000170A 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000171A 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000172A 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000173A 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
0000174A 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
0000175A 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
0000176A 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
0000177A 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
0000178A 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
0000179A 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
000017AA 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
000017BA 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
000017CA 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
000017DA 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
000017EA 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
000017FA 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
0000180A                             
0000180A                            ; ===========================================================================
0000180A                            
0000180A                            ; ---------------------------------------------------------------------------
0000180A                            ; Palette cycling routine loading subroutine
0000180A                            ; ---------------------------------------------------------------------------
0000180A                            
0000180A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180A                            
0000180A                            
0000180A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000180A 7400                       		moveq	#0,d2
0000180C 7000                       		moveq	#0,d0
0000180E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001812 D040                       		add.w	d0,d0		; multiply by 2
00001814 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001818 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000181C                            ; End of function PalCycle_Load
0000181C                            
0000181C                            ; ===========================================================================
0000181C                            ; ---------------------------------------------------------------------------
0000181C                            ; Palette cycling routines
0000181C                            ; ---------------------------------------------------------------------------
0000181C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000181E 0000                       		dc.w PalCycle_LZ-PalCycle
00001820 0000                       		dc.w PalCycle_MZ-PalCycle
00001822 0000                       		dc.w PalCycle_SLZ-PalCycle
00001824 0000                       		dc.w PalCycle_SYZ-PalCycle
00001826 0000                       		dc.w PalCycle_SBZ-PalCycle
00001828 0000                       		dc.w PalCycle_GHZ-PalCycle
0000182A                            
0000182A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000182A                            
0000182A                            
0000182A                            PalCycle_Title:				; XREF: TitleScreen
0000182A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001830 6000                       		bra.s	loc_196A
00001832                            ; ===========================================================================
00001832                            
00001832                            PalCycle_GHZ:				; XREF: PalCycle
00001832 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001838                            
00001838                            loc_196A:				; XREF: PalCycle_Title
00001838 5378 F634                  		subq.w	#1,($FFFFF634).w
0000183C 6A00                       		bpl.s	locret_1990
0000183E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001844 3038 F632                  		move.w	($FFFFF632).w,d0
00001848 5278 F632                  		addq.w	#1,($FFFFF632).w
0000184C 0240 0003                  		andi.w	#3,d0
00001850 E748                       		lsl.w	#3,d0
00001852 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001856 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000185A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000185E                            
0000185E                            locret_1990:
0000185E 4E75                       		rts	
00001860                            ; End of function PalCycle_Title
00001860                            
00001860                            
00001860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001860                            
00001860                            
00001860                            PalCycle_LZ:				; XREF: PalCycle
00001860 5378 F634                  		subq.w	#1,($FFFFF634).w
00001864 6A00                       		bpl.s	PalCycle_3LZ
00001866 31FC 0007 F634             		move.w	#7,($FFFFF634).w
0000186C 3038 F632                  		move.w	($FFFFF632).w,d0
00001870 5240                       		addq.w	#1,d0
00001872 0C40 0006                  		cmpi.w	#6,d0
00001876 6500                       		bcs.s	PalCycle_2LZ
00001878 7000                       		moveq	#0,d0
0000187A                            
0000187A                            PalCycle_2LZ:
0000187A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000187E 3200                       		move.w	d0,d1
00001880 D241                       		add.w	d1,d1
00001882 D041                       		add.w	d1,d0
00001884 D040                       		add.w	d0,d0
00001886 41F9 0000 0000             		lea	(Pal_LZCyc).l,a0
0000188C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001890 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001894 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
0000189A                            
0000189A                            PalCycle_3LZ:
0000189A 4E75                       		rts	
0000189C                            ; End of function PalCycle_SLZ
0000189C                            
0000189C                            ; ===========================================================================
0000189C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
000018A4                            ; ===========================================================================
000018A4                            
000018A4                            PalCycle_MZ:				; XREF: PalCycle
000018A4 4E75                       		rts	
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            PalCycle_SLZ:				; XREF: PalCycle
000018A6 5378 F634                  		subq.w	#1,($FFFFF634).w
000018AA 6A00                       		bpl.s	locret_1A80
000018AC 31FC 0007 F634             		move.w	#7,($FFFFF634).w
000018B2 3038 F632                  		move.w	($FFFFF632).w,d0
000018B6 5240                       		addq.w	#1,d0
000018B8 0C40 0006                  		cmpi.w	#6,d0
000018BC 6500                       		bcs.s	loc_1A60
000018BE 7000                       		moveq	#0,d0
000018C0                            
000018C0                            loc_1A60:
000018C0 31C0 F632                  		move.w	d0,($FFFFF632).w
000018C4 3200                       		move.w	d0,d1
000018C6 D241                       		add.w	d1,d1
000018C8 D041                       		add.w	d1,d0
000018CA D040                       		add.w	d0,d0
000018CC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
000018D2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000018D6 32B0 0000                  		move.w	(a0,d0.w),(a1)
000018DA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
000018E0                            
000018E0                            locret_1A80:
000018E0 4E75                       		rts	
000018E2                            ; End of function PalCycle_SLZ
000018E2                            
000018E2                            
000018E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018E2                            
000018E2                            
000018E2                            PalCycle_SYZ:				; XREF: PalCycle
000018E2 5378 F634                  		subq.w	#1,($FFFFF634).w
000018E6 6A00                       		bpl.s	locret_1AC6
000018E8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000018EE 3038 F632                  		move.w	($FFFFF632).w,d0
000018F2 5278 F632                  		addq.w	#1,($FFFFF632).w
000018F6 0240 0003                  		andi.w	#3,d0
000018FA E548                       		lsl.w	#2,d0
000018FC 3200                       		move.w	d0,d1
000018FE D040                       		add.w	d0,d0
00001900 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001906 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
0000190A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000190E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001912 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001918 43F8 FB76                  		lea	($FFFFFB76).w,a1
0000191C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001920 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001926                            
00001926                            locret_1AC6:
00001926 4E75                       		rts	
00001928                            ; End of function PalCycle_SYZ
00001928                            
00001928                            
00001928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001928                            
00001928                            
00001928                            PalCycle_SBZ:				; XREF: PalCycle
00001928 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
0000192E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001932 6700                       		beq.s	loc_1ADA
00001934 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
0000193A                            
0000193A                            loc_1ADA:
0000193A 43F8 F650                  		lea	($FFFFF650).w,a1
0000193E 321A                       		move.w	(a2)+,d1
00001940                            
00001940                            loc_1AE0:
00001940 5311                       		subq.b	#1,(a1)
00001942 6B00                       		bmi.s	loc_1AEA
00001944 5489                       		addq.l	#2,a1
00001946 5C8A                       		addq.l	#6,a2
00001948 6000                       		bra.s	loc_1B06
0000194A                            ; ===========================================================================
0000194A                            
0000194A                            loc_1AEA:				; XREF: PalCycle_SBZ
0000194A 12DA                       		move.b	(a2)+,(a1)+
0000194C 1011                       		move.b	(a1),d0
0000194E 5200                       		addq.b	#1,d0
00001950 B01A                       		cmp.b	(a2)+,d0
00001952 6500                       		bcs.s	loc_1AF6
00001954 7000                       		moveq	#0,d0
00001956                            
00001956                            loc_1AF6:
00001956 12C0                       		move.b	d0,(a1)+
00001958 0240 000F                  		andi.w	#$F,d0
0000195C D040                       		add.w	d0,d0
0000195E 305A                       		movea.w	(a2)+,a0
00001960 365A                       		movea.w	(a2)+,a3
00001962 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001966                            
00001966                            loc_1B06:				; XREF: PalCycle_SBZ
00001966 51C9 FFD8                  		dbf	d1,loc_1AE0
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1B64
00001970 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001976 31FC 0001 F634             		move.w	#1,($FFFFF634).w
0000197C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001980 6700                       		beq.s	loc_1B2E
00001982 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001988 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000198E                            
0000198E                            loc_1B2E:
0000198E 72FF                       		moveq	#-1,d1
00001990 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001994 6700                       		beq.s	loc_1B38
00001996 4441                       		neg.w	d1
00001998                            
00001998                            loc_1B38:
00001998 3038 F632                  		move.w	($FFFFF632).w,d0
0000199C 0240 0003                  		andi.w	#3,d0
000019A0 D041                       		add.w	d1,d0
000019A2 0C40 0003                  		cmpi.w	#3,d0
000019A6 6500                       		bcs.s	loc_1B52
000019A8 3200                       		move.w	d0,d1
000019AA 7000                       		moveq	#0,d0
000019AC 4A41                       		tst.w	d1
000019AE 6A00                       		bpl.s	loc_1B52
000019B0 7002                       		moveq	#2,d0
000019B2                            
000019B2                            loc_1B52:
000019B2 31C0 F632                  		move.w	d0,($FFFFF632).w
000019B6 D040                       		add.w	d0,d0
000019B8 43F8 FB58                  		lea	($FFFFFB58).w,a1
000019BC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019C4                            
000019C4                            locret_1B64:
000019C4 4E75                       		rts	
000019C6                            ; End of function PalCycle_SBZ
000019C6                            
000019C6                            ; ===========================================================================
000019C6                            Pal_TitleCyc:	incbin	Palette\c_title.bin
000019E6                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001A06                            Pal_LZCyc:	incbin	Palette\c_lz.bin
00001A2A                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001A4A                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001A5C                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001A6E                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001AD6                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001AFA                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001B1A                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001B2A                            
00001B2A                            Pal_SBZCycList:
00001B2A                            	include "_inc\SBZ Palette script 1.asm"
00001B2A                            ; ---------------------------------------------------------------------------
00001B2A                            ; Scrap Brain Zone 1 pallet cycling script
00001B2A                            ; ---------------------------------------------------------------------------
00001B2A 0008                       	dc.w 8			; number of entries - 1
00001B2C 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001B2E 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001B30 FB50                       	dc.w $FB50		; RAM address
00001B32 0D08                       	dc.b $D, 8
00001B34 0000                       	dc.w Pal_SBZCyc2
00001B36 FB52                       	dc.w $FB52
00001B38 0E08                       	dc.b $E, 8
00001B3A 0000                       	dc.w Pal_SBZCyc3
00001B3C FB6E                       	dc.w $FB6E
00001B3E 0B08                       	dc.b $B, 8
00001B40 0000                       	dc.w Pal_SBZCyc5
00001B42 FB70                       	dc.w $FB70
00001B44 0708                       	dc.b 7,	8
00001B46 0000                       	dc.w Pal_SBZCyc6
00001B48 FB72                       	dc.w $FB72
00001B4A 1C10                       	dc.b $1C, $10
00001B4C 0000                       	dc.w Pal_SBZCyc7
00001B4E FB7E                       	dc.w $FB7E
00001B50 0303                       	dc.b 3,	3
00001B52 0000                       	dc.w Pal_SBZCyc8
00001B54 FB78                       	dc.w $FB78
00001B56 0303                       	dc.b 3,	3
00001B58 0000                       	dc.w Pal_SBZCyc8+2
00001B5A FB7A                       	dc.w $FB7A
00001B5C 0303                       	dc.b 3,	3
00001B5E 0000                       	dc.w Pal_SBZCyc8+4
00001B60 FB7C                       	dc.w $FB7C
00001B62                            	even
00001B62                            	even
00001B62                            
00001B62                            Pal_SBZCycList2:
00001B62                            	include "_inc\SBZ Palette script 2.asm"
00001B62                            ; ---------------------------------------------------------------------------
00001B62                            ; Scrap Brain Zone 2 pallet cycling script
00001B62                            ; ---------------------------------------------------------------------------
00001B62 0006                       	dc.w 6
00001B64 0708                       	dc.b 7,	8
00001B66 0000                       	dc.w Pal_SBZCyc1
00001B68 FB50                       	dc.w $FB50
00001B6A 0D08                       	dc.b $D, 8
00001B6C 0000                       	dc.w Pal_SBZCyc2
00001B6E FB52                       	dc.w $FB52
00001B70 0908                       	dc.b 9,	8
00001B72 0000                       	dc.w Pal_SBZCyc9
00001B74 FB70                       	dc.w $FB70
00001B76 0708                       	dc.b 7,	8
00001B78 0000                       	dc.w Pal_SBZCyc6
00001B7A FB72                       	dc.w $FB72
00001B7C 0303                       	dc.b 3,	3
00001B7E 0000                       	dc.w Pal_SBZCyc8
00001B80 FB78                       	dc.w $FB78
00001B82 0303                       	dc.b 3,	3
00001B84 0000                       	dc.w Pal_SBZCyc8+2
00001B86 FB7A                       	dc.w $FB7A
00001B88 0303                       	dc.b 3,	3
00001B8A 0000                       	dc.w Pal_SBZCyc8+4
00001B8C FB7C                       	dc.w $FB7C
00001B8E                            	even
00001B8E                            	even
00001B8E                            
00001B8E                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001B9E                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001BAE                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001BBE                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001BCA                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001BDA                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001BEA                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001C0A                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001C14                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001C24                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001C30                            ; ---------------------------------------------------------------------------
00001C30                            ; Subroutine to	fade out and fade in
00001C30                            ; ---------------------------------------------------------------------------
00001C30                            
00001C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C30                            
00001C30                            
00001C30                            Pal_FadeTo:
00001C30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001C36                            
00001C36                            Pal_FadeTo2:
00001C36 7000                       		moveq	#0,d0
00001C38 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001C3C 1038 F626                  		move.b	($FFFFF626).w,d0
00001C40 D0C0                       		adda.w	d0,a0
00001C42 7200                       		moveq	#0,d1
00001C44 1038 F627                  		move.b	($FFFFF627).w,d0
00001C48                            
00001C48                            Pal_ToBlack:
00001C48 30C1                       		move.w	d1,(a0)+
00001C4A 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill Palette with $000	(black)
00001C4E 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001C50 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001C52                            
00001C52                            loc_1DCE:
00001C52 6100 F6E8                  		bsr.w	RunPLC_RAM
00001C56 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001C5C 6100 0000                  		bsr.w	DelayProgram
00001C60 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001C64 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001C66 6100                       		bsr.s	Pal_FadeIn
00001C68 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001C6A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001C6C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001C72 6000 0000                  		bra	DelayProgram				; MJ: ''
00001C76                            
00001C76                            ; End of function Pal_FadeTo
00001C76                            
00001C76                            ; ---------------------------------------------------------------------------
00001C76                            ; Palette fade-in subroutine
00001C76                            ; ---------------------------------------------------------------------------
00001C76                            
00001C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C76                            
00001C76                            
00001C76                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001C76 7000                       		moveq	#0,d0
00001C78 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001C7C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001C80 1038 F626                  		move.b	($FFFFF626).w,d0
00001C84 D0C0                       		adda.w	d0,a0
00001C86 D2C0                       		adda.w	d0,a1
00001C88 1038 F627                  		move.b	($FFFFF627).w,d0
00001C8C                            
00001C8C                            loc_1DFA:
00001C8C 6100                       		bsr.s	Pal_AddColor
00001C8E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001C92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001C98 6600                       		bne.s	locret_1E24
00001C9A 7000                       		moveq	#0,d0
00001C9C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001CA0 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001CA4 1038 F626                  		move.b	($FFFFF626).w,d0
00001CA8 D0C0                       		adda.w	d0,a0
00001CAA D2C0                       		adda.w	d0,a1
00001CAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001CB0                            
00001CB0                            loc_1E1E:
00001CB0 6100                       		bsr.s	Pal_AddColor
00001CB2 51C8 FFFC                  		dbf	d0,loc_1E1E
00001CB6                            
00001CB6                            locret_1E24:
00001CB6 4E75                       		rts	
00001CB8                            ; End of function Pal_FadeIn
00001CB8                            
00001CB8                            
00001CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB8                            
00001CB8                            
00001CB8                            Pal_AddColor:				; XREF: Pal_FadeIn
00001CB8 1A11                       		move.b	(a1),d5					; MJ: load blue
00001CBA 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001CBC 1401                       		move.b	d1,d2					; MJ: load red
00001CBE E809                       		lsr.b	#$04,d1					; MJ: get only green
00001CC0 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001CC4 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001CC6 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001CC8 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001CCC 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001CD0                            
00001CD0                            FCI_NoBlue:
00001CD0 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001CD2 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001CD6 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001CDA                            
00001CDA                            FCI_NoGreen:
00001CDA B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001CDC 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001CE0 5403                       		addq.b	#$02,d3					; MJ: increase red
00001CE2                            
00001CE2                            FCI_NoRed:
00001CE2 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001CE4 4E75                       		rts						; MJ: return
00001CE6                            
00001CE6                            ; End of function Pal_AddColor
00001CE6                            
00001CE6                            
00001CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE6                            
00001CE6                            
00001CE6                            Pal_FadeFrom:
00001CE6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001CEC 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001CEE 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001CF0                            
00001CF0                            loc_1E5C:
00001CF0 6100 F64A                  		bsr.w	RunPLC_RAM
00001CF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001CFA 6100 0000                  		bsr.w	DelayProgram
00001CFE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001D02 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00001D04 6100                       		bsr.s	Pal_FadeOut
00001D06 51CC FFE8                  		dbf	d4,loc_1E5C
00001D0A 4E75                       		rts	
00001D0C                            ; End of function Pal_FadeFrom
00001D0C                            
00001D0C                            ; ---------------------------------------------------------------------------
00001D0C                            ; Palette fade-out subroutine
00001D0C                            ; ---------------------------------------------------------------------------
00001D0C                            
00001D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D0C                            
00001D0C                            
00001D0C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001D0C 7000                       		moveq	#0,d0
00001D0E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D12 1038 F626                  		move.b	($FFFFF626).w,d0
00001D16 D0C0                       		adda.w	d0,a0
00001D18 1038 F627                  		move.b	($FFFFF627).w,d0
00001D1C                            
00001D1C                            loc_1E82:
00001D1C 6100                       		bsr.s	Pal_DecColor
00001D1E 51C8 FFFC                  		dbf	d0,loc_1E82
00001D22                            
00001D22 7000                       		moveq	#0,d0
00001D24 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D28 1038 F626                  		move.b	($FFFFF626).w,d0
00001D2C D0C0                       		adda.w	d0,a0
00001D2E 1038 F627                  		move.b	($FFFFF627).w,d0
00001D32                            
00001D32                            loc_1E98:
00001D32 6100                       		bsr.s	Pal_DecColor
00001D34 51C8 FFFC                  		dbf	d0,loc_1E98
00001D38 4E75                       		rts	
00001D3A                            ; End of function Pal_FadeOut
00001D3A                            
00001D3A                            
00001D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3A                            
00001D3A                            
00001D3A                            Pal_DecColor:				; XREF: Pal_FadeOut
00001D3A 3A10                       		move.w	(a0),d5					; MJ: load colour
00001D3C 3205                       		move.w	d5,d1					; MJ: copy to d1
00001D3E 1401                       		move.b	d1,d2					; MJ: load green and red
00001D40 1601                       		move.b	d1,d3					; MJ: load red
00001D42 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00001D46 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
00001D4A 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00001D4E                            
00001D4E                            FCO_NoBlue:
00001D4E 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00001D52 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00001D56 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
00001D5A                            
00001D5A                            FCO_NoGreen:
00001D5A 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
00001D5E 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00001D62 5505                       		subq.b	#$02,d5					; MJ: decrease red
00001D64                            
00001D64                            FCO_NoRed:
00001D64 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00001D66 4E75                       		rts						; MJ: return
00001D68                            
00001D68                            ; End of function Pal_DecColor
00001D68                            
00001D68                            ; ---------------------------------------------------------------------------
00001D68                            ; Subroutine to	fill the Palette	with white (special stage)
00001D68                            ; ---------------------------------------------------------------------------
00001D68                            
00001D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D68                            
00001D68                            
00001D68                            Pal_MakeWhite:				; XREF: SpecialStage
00001D68 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D6E 7000                       		moveq	#0,d0
00001D70 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D74 1038 F626                  		move.b	($FFFFF626).w,d0
00001D78 D0C0                       		adda.w	d0,a0
00001D7A 323C 0EEE                  		move.w	#$EEE,d1
00001D7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001D82                            
00001D82                            PalWhite_Loop:
00001D82 30C1                       		move.w	d1,(a0)+
00001D84 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001D88 383C 0015                  		move.w	#$15,d4
00001D8C                            
00001D8C                            loc_1EF4:
00001D8C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D92 6100 0000                  		bsr.w	DelayProgram
00001D96 6100                       		bsr.s	Pal_WhiteToBlack
00001D98 6100 F5A2                  		bsr.w	RunPLC_RAM
00001D9C 51CC FFEE                  		dbf	d4,loc_1EF4
00001DA0 4E75                       		rts	
00001DA2                            ; End of function Pal_MakeWhite
00001DA2                            
00001DA2                            
00001DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA2                            
00001DA2                            
00001DA2                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001DA2 7000                       		moveq	#0,d0
00001DA4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DA8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DAC 1038 F626                  		move.b	($FFFFF626).w,d0
00001DB0 D0C0                       		adda.w	d0,a0
00001DB2 D2C0                       		adda.w	d0,a1
00001DB4 1038 F627                  		move.b	($FFFFF627).w,d0
00001DB8                            
00001DB8                            loc_1F20:
00001DB8 6100                       		bsr.s	Pal_DecColor2
00001DBA 51C8 FFFC                  		dbf	d0,loc_1F20
00001DBE                            
00001DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DC4 6600                       		bne.s	locret_1F4A
00001DC6 7000                       		moveq	#0,d0
00001DC8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DCC 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001DD0 1038 F626                  		move.b	($FFFFF626).w,d0
00001DD4 D0C0                       		adda.w	d0,a0
00001DD6 D2C0                       		adda.w	d0,a1
00001DD8 1038 F627                  		move.b	($FFFFF627).w,d0
00001DDC                            
00001DDC                            loc_1F44:
00001DDC 6100                       		bsr.s	Pal_DecColor2
00001DDE 51C8 FFFC                  		dbf	d0,loc_1F44
00001DE2                            
00001DE2                            locret_1F4A:
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_WhiteToBlack
00001DE4                            
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001DE4 3419                       		move.w	(a1)+,d2
00001DE6 3610                       		move.w	(a0),d3
00001DE8 B642                       		cmp.w	d2,d3
00001DEA 6700                       		beq.s	loc_1F78
00001DEC 3203                       		move.w	d3,d1
00001DEE 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001DF2 6500                       		bcs.s	loc_1F64
00001DF4 B242                       		cmp.w	d2,d1
00001DF6 6500                       		bcs.s	loc_1F64
00001DF8 30C1                       		move.w	d1,(a0)+
00001DFA 4E75                       		rts	
00001DFC                            ; ===========================================================================
00001DFC                            
00001DFC                            loc_1F64:				; XREF: Pal_DecColor2
00001DFC 3203                       		move.w	d3,d1
00001DFE 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001E02 6500                       		bcs.s	loc_1F74
00001E04 B242                       		cmp.w	d2,d1
00001E06 6500                       		bcs.s	loc_1F74
00001E08 30C1                       		move.w	d1,(a0)+
00001E0A 4E75                       		rts	
00001E0C                            ; ===========================================================================
00001E0C                            
00001E0C                            loc_1F74:				; XREF: loc_1F64
00001E0C 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E0E 4E75                       		rts	
00001E10                            ; ===========================================================================
00001E10                            
00001E10                            loc_1F78:				; XREF: Pal_DecColor2
00001E10 5448                       		addq.w	#2,a0
00001E12 4E75                       		rts	
00001E14                            ; End of function Pal_DecColor2
00001E14                            
00001E14                            ; ---------------------------------------------------------------------------
00001E14                            ; Subroutine to	make a white flash when	you enter a special stage
00001E14                            ; ---------------------------------------------------------------------------
00001E14                            
00001E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E14                            
00001E14                            
00001E14                            Pal_MakeFlash:				; XREF: SpecialStage
00001E14 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E1A 383C 0015                  		move.w	#$15,d4
00001E1E                            
00001E1E                            loc_1F86:
00001E1E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E24 6100 0000                  		bsr.w	DelayProgram
00001E28 6100                       		bsr.s	Pal_ToWhite
00001E2A 6100 F510                  		bsr.w	RunPLC_RAM
00001E2E 51CC FFEE                  		dbf	d4,loc_1F86
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_MakeFlash
00001E34                            
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001E34 7000                       		moveq	#0,d0
00001E36 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E3A 1038 F626                  		move.b	($FFFFF626).w,d0
00001E3E D0C0                       		adda.w	d0,a0
00001E40 1038 F627                  		move.b	($FFFFF627).w,d0
00001E44                            
00001E44                            loc_1FAC:
00001E44 6100                       		bsr.s	Pal_AddColor2
00001E46 51C8 FFFC                  		dbf	d0,loc_1FAC
00001E4A 7000                       		moveq	#0,d0
00001E4C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E50 1038 F626                  		move.b	($FFFFF626).w,d0
00001E54 D0C0                       		adda.w	d0,a0
00001E56 1038 F627                  		move.b	($FFFFF627).w,d0
00001E5A                            
00001E5A                            loc_1FC2:
00001E5A 6100                       		bsr.s	Pal_AddColor2
00001E5C 51C8 FFFC                  		dbf	d0,loc_1FC2
00001E60 4E75                       		rts	
00001E62                            ; End of function Pal_ToWhite
00001E62                            
00001E62                            
00001E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E62                            
00001E62                            
00001E62                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001E62 3410                       		move.w	(a0),d2
00001E64 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001E68 6700                       		beq.s	loc_2006
00001E6A 3202                       		move.w	d2,d1
00001E6C 0241 000E                  		andi.w	#$E,d1
00001E70 0C41 000E                  		cmpi.w	#$E,d1
00001E74 6700                       		beq.s	loc_1FE2
00001E76 5458                       		addq.w	#2,(a0)+	; increase red value
00001E78 4E75                       		rts	
00001E7A                            ; ===========================================================================
00001E7A                            
00001E7A                            loc_1FE2:				; XREF: Pal_AddColor2
00001E7A 3202                       		move.w	d2,d1
00001E7C 0241 00E0                  		andi.w	#$E0,d1
00001E80 0C41 00E0                  		cmpi.w	#$E0,d1
00001E84 6700                       		beq.s	loc_1FF4
00001E86 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001E8A 4E75                       		rts	
00001E8C                            ; ===========================================================================
00001E8C                            
00001E8C                            loc_1FF4:				; XREF: loc_1FE2
00001E8C 3202                       		move.w	d2,d1
00001E8E 0241 0E00                  		andi.w	#$E00,d1
00001E92 0C41 0E00                  		cmpi.w	#$E00,d1
00001E96 6700                       		beq.s	loc_2006
00001E98 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001E9C 4E75                       		rts	
00001E9E                            ; ===========================================================================
00001E9E                            
00001E9E                            loc_2006:				; XREF: Pal_AddColor2
00001E9E 5448                       		addq.w	#2,a0
00001EA0 4E75                       		rts	
00001EA2                            ; End of function Pal_AddColor2
00001EA2                            
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2                            ; Palette cycling routine - Sega	logo
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2                            
00001EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA2                            
00001EA2                            
00001EA2                            PalCycle_Sega:				; XREF: SegaScreen
00001EA2 4A38 F635                  		tst.b	($FFFFF635).w
00001EA6 6600                       		bne.s	loc_206A
00001EA8 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001EAC 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001EB2 7205                       		moveq	#5,d1
00001EB4 3038 F632                  		move.w	($FFFFF632).w,d0
00001EB8                            
00001EB8                            loc_2020:
00001EB8 6A00                       		bpl.s	loc_202A
00001EBA 5448                       		addq.w	#2,a0
00001EBC 5341                       		subq.w	#1,d1
00001EBE 5440                       		addq.w	#2,d0
00001EC0 60F6                       		bra.s	loc_2020
00001EC2                            ; ===========================================================================
00001EC2                            
00001EC2                            loc_202A:				; XREF: PalCycle_Sega
00001EC2 3400                       		move.w	d0,d2
00001EC4 0242 001E                  		andi.w	#$1E,d2
00001EC8 6600                       		bne.s	loc_2034
00001ECA 5440                       		addq.w	#2,d0
00001ECC                            
00001ECC                            loc_2034:
00001ECC 0C40 0060                  		cmpi.w	#$60,d0
00001ED0 6400                       		bcc.s	loc_203E
00001ED2 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001ED6                            
00001ED6                            loc_203E:
00001ED6 5440                       		addq.w	#2,d0
00001ED8 51C9 FFE8                  		dbf	d1,loc_202A
00001EDC 3038 F632                  		move.w	($FFFFF632).w,d0
00001EE0 5440                       		addq.w	#2,d0
00001EE2 3400                       		move.w	d0,d2
00001EE4 0242 001E                  		andi.w	#$1E,d2
00001EE8 6600                       		bne.s	loc_2054
00001EEA 5440                       		addq.w	#2,d0
00001EEC                            
00001EEC                            loc_2054:
00001EEC 0C40 0064                  		cmpi.w	#$64,d0
00001EF0 6D00                       		blt.s	loc_2062
00001EF2 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00001EF8 70F4                       		moveq	#-$C,d0
00001EFA                            
00001EFA                            loc_2062:
00001EFA 31C0 F632                  		move.w	d0,($FFFFF632).w
00001EFE 7001                       		moveq	#1,d0
00001F00 4E75                       		rts	
00001F02                            ; ===========================================================================
00001F02                            
00001F02                            loc_206A:				; XREF: loc_202A
00001F02 5338 F634                  		subq.b	#1,($FFFFF634).w
00001F06 6A00                       		bpl.s	loc_20BC
00001F08 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00001F0E 3038 F632                  		move.w	($FFFFF632).w,d0
00001F12 0640 000C                  		addi.w	#$C,d0
00001F16 0C40 0030                  		cmpi.w	#$30,d0
00001F1A 6500                       		bcs.s	loc_2088
00001F1C 7000                       		moveq	#0,d0
00001F1E 4E75                       		rts	
00001F20                            ; ===========================================================================
00001F20                            
00001F20                            loc_2088:				; XREF: loc_206A
00001F20 31C0 F632                  		move.w	d0,($FFFFF632).w
00001F24 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00001F2A 41F0 0000                  		lea	(a0,d0.w),a0
00001F2E 43F8 FB04                  		lea	($FFFFFB04).w,a1
00001F32 22D8                       		move.l	(a0)+,(a1)+
00001F34 22D8                       		move.l	(a0)+,(a1)+
00001F36 3298                       		move.w	(a0)+,(a1)
00001F38 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001F3C 7000                       		moveq	#0,d0
00001F3E 722C                       		moveq	#$2C,d1
00001F40                            
00001F40                            loc_20A8:
00001F40 3400                       		move.w	d0,d2
00001F42 0242 001E                  		andi.w	#$1E,d2
00001F46 6600                       		bne.s	loc_20B2
00001F48 5440                       		addq.w	#2,d0
00001F4A                            
00001F4A                            loc_20B2:
00001F4A 3390 0000                  		move.w	(a0),(a1,d0.w)
00001F4E 5440                       		addq.w	#2,d0
00001F50 51C9 FFEE                  		dbf	d1,loc_20A8
00001F54                            
00001F54                            loc_20BC:
00001F54 7001                       		moveq	#1,d0
00001F56 4E75                       		rts	
00001F58                            ; End of function PalCycle_Sega
00001F58                            
00001F58                            ; ===========================================================================
00001F58                            
00001F58                            Pal_Sega1:	incbin	Palette\sega1.bin
00001F64                            Pal_Sega2:	incbin	Palette\sega2.bin
00001F94                            
00001F94                            ; ---------------------------------------------------------------------------
00001F94                            ; Subroutines to load Palettes
00001F94                            ; ---------------------------------------------------------------------------
00001F94                            
00001F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F94                            
00001F94                            
00001F94                            PalLoad1:
00001F94 43F9 0000 0000             		lea	(PalPointers).l,a1
00001F9A E748                       		lsl.w	#3,d0
00001F9C D2C0                       		adda.w	d0,a1
00001F9E 2459                       		movea.l	(a1)+,a2
00001FA0 3659                       		movea.w	(a1)+,a3
00001FA2 D6FC 0080                  		adda.w	#$80,a3
00001FA6 3E19                       		move.w	(a1)+,d7
00001FA8                            
00001FA8                            loc_2110:
00001FA8 26DA                       		move.l	(a2)+,(a3)+
00001FAA 51CF FFFC                  		dbf	d7,loc_2110
00001FAE 4E75                       		rts	
00001FB0                            ; End of function PalLoad1
00001FB0                            
00001FB0                            
00001FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB0                            
00001FB0                            
00001FB0                            PalLoad2:
00001FB0 43F9 0000 0000             		lea	(PalPointers).l,a1
00001FB6 E748                       		lsl.w	#3,d0
00001FB8 D2C0                       		adda.w	d0,a1
00001FBA 2459                       		movea.l	(a1)+,a2
00001FBC 3659                       		movea.w	(a1)+,a3
00001FBE 3E19                       		move.w	(a1)+,d7
00001FC0                            
00001FC0                            loc_2128:
00001FC0 26DA                       		move.l	(a2)+,(a3)+
00001FC2 51CF FFFC                  		dbf	d7,loc_2128
00001FC6 4E75                       		rts	
00001FC8                            ; End of function PalLoad2
00001FC8                            
00001FC8                            ; ---------------------------------------------------------------------------
00001FC8                            ; Underwater Palette loading subroutine
00001FC8                            ; ---------------------------------------------------------------------------
00001FC8                            
00001FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FC8                            
00001FC8                            
00001FC8                            PalLoad3_Water:
00001FC8 43F9 0000 0000             		lea	(PalPointers).l,a1
00001FCE E748                       		lsl.w	#3,d0
00001FD0 D2C0                       		adda.w	d0,a1
00001FD2 2459                       		movea.l	(a1)+,a2
00001FD4 3659                       		movea.w	(a1)+,a3
00001FD6 96FC 0080                  		suba.w	#$80,a3
00001FDA 3E19                       		move.w	(a1)+,d7
00001FDC                            
00001FDC                            loc_2144:
00001FDC 26DA                       		move.l	(a2)+,(a3)+
00001FDE 51CF FFFC                  		dbf	d7,loc_2144
00001FE2 4E75                       		rts	
00001FE4                            ; End of function PalLoad3_Water
00001FE4                            
00001FE4                            
00001FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE4                            
00001FE4                            
00001FE4                            PalLoad4_Water:
00001FE4 43F9 0000 0000             		lea	(PalPointers).l,a1
00001FEA E748                       		lsl.w	#3,d0
00001FEC D2C0                       		adda.w	d0,a1
00001FEE 2459                       		movea.l	(a1)+,a2
00001FF0 3659                       		movea.w	(a1)+,a3
00001FF2 96FC 0100                  		suba.w	#$100,a3
00001FF6 3E19                       		move.w	(a1)+,d7
00001FF8                            
00001FF8                            loc_2160:
00001FF8 26DA                       		move.l	(a2)+,(a3)+
00001FFA 51CF FFFC                  		dbf	d7,loc_2160
00001FFE 4E75                       		rts	
00002000                            ; End of function PalLoad4_Water
00002000                            
00002000                            ; ===========================================================================
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Palette pointers
00002000                            ; ---------------------------------------------------------------------------
00002000                            PalPointers:
00002000                            	include "_inc\Palette pointers.asm"
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Pallet pointers
00002000                            ; ---------------------------------------------------------------------------
00002000 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002004 FB00                       	dc.w $FB00		; RAM address
00002006 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002008 0000 0000                  	dc.l Pal_Title
0000200C FB00                       	dc.w $FB00
0000200E 001F                       	dc.w $1F
00002010 0000 0000                  	dc.l Pal_LevelSel
00002014 FB00                       	dc.w $FB00
00002016 001F                       	dc.w $1F
00002018 0000 0000                  	dc.l Pal_Sonic
0000201C FB00                       	dc.w $FB00
0000201E 0007                       	dc.w 7
00002020 0000 0000                  	dc.l Pal_GHZ
00002024 FB20                       	dc.w $FB20
00002026 0017                       	dc.w $17
00002028 0000 0000                  	dc.l Pal_LZ
0000202C FB20                       	dc.w $FB20
0000202E 0017                       	dc.w $17
00002030 0000 0000                  	dc.l Pal_MZ
00002034 FB20                       	dc.w $FB20
00002036 0017                       	dc.w $17
00002038 0000 0000                  	dc.l Pal_SLZ
0000203C FB20                       	dc.w $FB20
0000203E 0017                       	dc.w $17
00002040 0000 0000                  	dc.l Pal_SYZ
00002044 FB20                       	dc.w $FB20
00002046 0017                       	dc.w $17
00002048 0000 0000                  	dc.l Pal_SBZ1
0000204C FB20                       	dc.w $FB20
0000204E 0017                       	dc.w $17
00002050 0000 0000                  	dc.l Pal_Special
00002054 FB00                       	dc.w $FB00
00002056 001F                       	dc.w $1F
00002058 0000 0000                  	dc.l Pal_LZWater
0000205C FB00                       	dc.w $FB00
0000205E 001F                       	dc.w $1F
00002060 0000 0000                  	dc.l Pal_SBZ3
00002064 FB20                       	dc.w $FB20
00002066 0017                       	dc.w $17
00002068 0000 0000                  	dc.l Pal_SBZ3Water
0000206C FB00                       	dc.w $FB00
0000206E 001F                       	dc.w $1F
00002070 0000 0000                  	dc.l Pal_SBZ2
00002074 FB20                       	dc.w $FB20
00002076 0017                       	dc.w $17
00002078 0000 0000                  	dc.l Pal_LZSonWater
0000207C FB00                       	dc.w $FB00
0000207E 0007                       	dc.w 7
00002080 0000 0000                  	dc.l Pal_SBZ3SonWat
00002084 FB00                       	dc.w $FB00
00002086 0007                       	dc.w 7
00002088 0000 0000                  	dc.l Pal_SpeResult
0000208C FB00                       	dc.w $FB00
0000208E 001F                       	dc.w $1F
00002090 0000 0000                  	dc.l Pal_SpeContinue
00002094 FB00                       	dc.w $FB00
00002096 000F                       	dc.w $F
00002098 0000 0000                  	dc.l Pal_Ending
0000209C FB00                       	dc.w $FB00
0000209E 001F                       	dc.w $1F
000020A0 0000 0000                  	dc.l Pal_Notice
000020A4 FB20                       	dc.w $FB20
000020A6 0017                       	dc.w $17
000020A6 0017                       	dc.w $17
000020A8                            
000020A8                            ; ---------------------------------------------------------------------------
000020A8                            ; Palette data
000020A8                            ; ---------------------------------------------------------------------------
000020A8                            Pal_SegaBG:	incbin	Palette\sega_bg.bin
00002128                            Pal_Title:	incbin	Palette\title.bin
000021A8                            Pal_LevelSel:	incbin	Palette\levelsel.bin
00002228                            Pal_Sonic:	incbin	Palette\sonic.bin
00002248                            Pal_GHZ:	incbin	Palette\ghz.bin
000022A8                            Pal_LZ:		incbin	Palette\lz.bin
00002308                            Pal_LZWater:	incbin	Palette\lz_uw.bin	; LZ underwater Palettes
00002388                            Pal_MZ:		incbin	Palette\mz.bin
000023E8                            Pal_SLZ:	incbin	Palette\slz.bin
00002448                            Pal_SYZ:	incbin	Palette\syz.bin
000024A8                            Pal_SBZ1:	incbin	Palette\sbz_act1.bin	; SBZ act 1 Palettes
00002508                            Pal_SBZ2:	incbin	Palette\sbz_act2.bin	; SBZ act 2 & Final Zone Palettes
00002568                            Pal_Special:	incbin	Palette\special.bin	; special stage Palettes
000025E8                            Pal_SBZ3:	incbin	Palette\sbz_act3.bin	; SBZ act 3 Palettes
00002648                            Pal_SBZ3Water:	incbin	Palette\sbz_a3uw.bin	; SBZ act 3 (underwater) Palettes
000026C8                            Pal_LZSonWater:	incbin	Palette\son_lzuw.bin	; Sonic (underwater in LZ) Palette
000026E8                            Pal_SBZ3SonWat:	incbin	Palette\son_sbzu.bin	; Sonic (underwater in SBZ act 3) Palette
00002708                            Pal_SpeResult:	incbin	Palette\ssresult.bin	; special stage results screen Palettes
00002788                            Pal_SpeContinue:incbin	Palette\sscontin.bin	; special stage results screen continue Palette
000027C8                            Pal_Ending:	incbin	Palette\ending.bin	; ending sequence Palettes
00002848                            
00002848                            ; ---------------------------------------------------------------------------
00002848                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002848                            ; ---------------------------------------------------------------------------
00002848                            
00002848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002848                            
00002848                            
00002848                            DelayProgram:				; XREF: PauseGame
00002848 46FC 2300                  		move	#$2300,sr
0000284C                            
0000284C                            loc_29AC:
0000284C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002850 66FA                       		bne.s	loc_29AC
00002852 4E75                       		rts	
00002854                            ; End of function DelayProgram
00002854                            
00002854                            ; ---------------------------------------------------------------------------
00002854                            ; Subroutine to	generate a pseudo-random number	in d0
00002854                            ; ---------------------------------------------------------------------------
00002854                            
00002854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002854                            
00002854                            
00002854                            RandomNumber:
00002854 2238 F636                  		move.l	($FFFFF636).w,d1
00002858 6600                       		bne.s	loc_29C0
0000285A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002860                            
00002860                            loc_29C0:
00002860 2001                       		move.l	d1,d0
00002862 E581                       		asl.l	#2,d1
00002864 D280                       		add.l	d0,d1
00002866 E781                       		asl.l	#3,d1
00002868 D280                       		add.l	d0,d1
0000286A 3001                       		move.w	d1,d0
0000286C 4841                       		swap	d1
0000286E D041                       		add.w	d1,d0
00002870 3200                       		move.w	d0,d1
00002872 4841                       		swap	d1
00002874 21C1 F636                  		move.l	d1,($FFFFF636).w
00002878 4E75                       		rts	
0000287A                            ; End of function RandomNumber
0000287A                            
0000287A                            
0000287A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000287A                            
0000287A                            
0000287A                            CalcSine:				; XREF: SS_BGAnimate; et al
0000287A 0240 00FF                  		andi.w	#$FF,d0
0000287E D040                       		add.w	d0,d0
00002880 0640 0080                  		addi.w	#$80,d0
00002884 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002888 0440 0080                  		subi.w	#$80,d0
0000288C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002890 4E75                       		rts	
00002892                            ; End of function CalcSine
00002892                            
00002892                            ; ===========================================================================
00002892                            
00002892                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002B12                            
00002B12                            ; ===========================================================================
00002B12 48E7 6000                  		movem.l	d1-d2,-(sp)
00002B16 3200                       		move.w	d0,d1
00002B18 4841                       		swap	d1
00002B1A 7000                       		moveq	#0,d0
00002B1C 3200                       		move.w	d0,d1
00002B1E 7407                       		moveq	#7,d2
00002B20                            
00002B20                            loc_2C80:
00002B20 E599                       		rol.l	#2,d1
00002B22 D040                       		add.w	d0,d0
00002B24 5240                       		addq.w	#1,d0
00002B26 9240                       		sub.w	d0,d1
00002B28 6400                       		bcc.s	loc_2C9A
00002B2A D240                       		add.w	d0,d1
00002B2C 5340                       		subq.w	#1,d0
00002B2E 51CA FFF0                  		dbf	d2,loc_2C80
00002B32 E248                       		lsr.w	#1,d0
00002B34 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002B38 4E75                       		rts	
00002B3A                            ; ===========================================================================
00002B3A                            
00002B3A                            loc_2C9A:
00002B3A 5240                       		addq.w	#1,d0
00002B3C 51CA FFE2                  		dbf	d2,loc_2C80
00002B40 E248                       		lsr.w	#1,d0
00002B42 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002B46 4E75                       		rts	
00002B48                            
00002B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B48                            
00002B48                            
00002B48                            CalcAngle:
00002B48 48E7 1800                  		movem.l	d3-d4,-(sp)
00002B4C 7600                       		moveq	#0,d3
00002B4E 7800                       		moveq	#0,d4
00002B50 3601                       		move.w	d1,d3
00002B52 3802                       		move.w	d2,d4
00002B54 8843                       		or.w	d3,d4
00002B56 6700                       		beq.s	loc_2D04
00002B58 3802                       		move.w	d2,d4
00002B5A 4A43                       		tst.w	d3
00002B5C 6A00 0000                  		bpl.w	loc_2CC2
00002B60 4443                       		neg.w	d3
00002B62                            
00002B62                            loc_2CC2:
00002B62 4A44                       		tst.w	d4
00002B64 6A00 0000                  		bpl.w	loc_2CCA
00002B68 4444                       		neg.w	d4
00002B6A                            
00002B6A                            loc_2CCA:
00002B6A B843                       		cmp.w	d3,d4
00002B6C 6400 0000                  		bcc.w	loc_2CDC
00002B70 E18C                       		lsl.l	#8,d4
00002B72 88C3                       		divu.w	d3,d4
00002B74 7000                       		moveq	#0,d0
00002B76 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002B7A 6000                       		bra.s	loc_2CE6
00002B7C                            ; ===========================================================================
00002B7C                            
00002B7C                            loc_2CDC:				; XREF: CalcAngle
00002B7C E18B                       		lsl.l	#8,d3
00002B7E 86C4                       		divu.w	d4,d3
00002B80 7040                       		moveq	#$40,d0
00002B82 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002B86                            
00002B86                            loc_2CE6:
00002B86 4A41                       		tst.w	d1
00002B88 6A00 0000                  		bpl.w	loc_2CF2
00002B8C 4440                       		neg.w	d0
00002B8E 0640 0080                  		addi.w	#$80,d0
00002B92                            
00002B92                            loc_2CF2:
00002B92 4A42                       		tst.w	d2
00002B94 6A00 0000                  		bpl.w	loc_2CFE
00002B98 4440                       		neg.w	d0
00002B9A 0640 0100                  		addi.w	#$100,d0
00002B9E                            
00002B9E                            loc_2CFE:
00002B9E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002BA2 4E75                       		rts	
00002BA4                            ; ===========================================================================
00002BA4                            
00002BA4                            loc_2D04:				; XREF: CalcAngle
00002BA4 303C 0040                  		move.w	#$40,d0
00002BA8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002BAC 4E75                       		rts	
00002BAE                            ; End of function CalcAngle
00002BAE                            
00002BAE                            ; ===========================================================================
00002BAE                            
00002BAE                            Angle_Data:	incbin	misc\angles.bin
00002CB0                            
00002CB0                            NoticeScreen: include	"_notice\code.asm"
00002CB0                            
00002CB0                            ;NoticeScreen:				; XREF: GameModeArray
00002CB0 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
00002CB4 4EB8 1018                      jsr    PlaySound_Special.w      ; play music ID
00002CB8 4EB8 1CE6                      jsr    Pal_FadeFrom.w           ; fade palette out
00002CBC 46FC 2700                      move   #$2700,sr                ; disable interrupts
00002CC0 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002CC4 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
00002CC8 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
00002CCE 4EB8 132E                      jsr    ClearPLC.w               ; clear pattern load cues
00002CD2 4EB8 0F0A                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
00002CD6 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
00002CDC 41F9 0000 0000                 lea    Map_Notice.l,a0           ; load compressed mappings address
00002CE2 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
00002CE6 4EB8 146E                      jsr    EniDec.w                 ; decompress and dump
00002CEA 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
00002CF0 7227                           moveq  #$28-$01,d1              ; set map box draw width
00002CF2 741D                           moveq  #$1E-$01,d2              ; set map box draw height
00002CF4 6100 E3BE                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
00002CF8 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
00002CFE 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
00002D04 41F9 0000 0000                 lea    Art_Notice.l,a0            ; load compressed art address
00002D0A 4EB8 11A8                      jsr    NemDec.w                 ; decompress and dump to VDP memory
00002D0E 41F9 0000 0000                 lea    Pal_Notice.l,a0         ; load palette address
00002D14 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
00002D18 700F                           moveq  #$F,d0                   ; set repeat times
00002D1A                            
00002D1A                            
00002D1A                            NoticeScreen_PalLoop:
00002D1A 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
00002D1C 22D8                           move.l (a0)+,(a1)+              ; ''
00002D1E 51C8 FFFA                      dbf    d0,NoticeScreen_PalLoop    ; repeat until done
00002D22 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002D26 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
00002D2A 3C80                           move.w d0,(a6)                  ; save to VDP
00002D2C 4EB8 1C30                      jsr    Pal_FadeTo               ; fade palette in
00002D30                            ;	move.b	#$E1,d0
00002D30                            ;	bsr.w	PlaySound_Special ; play "Notice"	sound
00002D30                            
00002D30                            Notice_MainLoop:
00002D30 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00002D36 4EB8 2848                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
00002D3A 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
00002D3E 6B00                           bmi.s  Notice_GotoTitle           ; if so, branch
00002D40 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00002D46 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
00002D4A 66E4                           bne.s  Notice_MainLoop            ; if not, branch
00002D4C                            
00002D4C                            Notice_GotoTitle:
00002D4C 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00002D52 4E75                       		rts	
00002D54                            ; ---------------------------------------------------------------------------
00002D54                            Art_Notice:		incbin	"_notice\Art.bin"		; rename to your needs
0000430C                            			even
0000430C                            Map_Notice:		incbin	"_notice\Map.bin"		; rename to your needs
000043AE 00                         			even
000043AE                            Pal_Notice:		incbin	"_notice\Palette.bin"		; rename to your needs
0000442E                            			even
0000442E                            			even
0000442E                            
0000442E                            ; ===========================================================================
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            ; Sega screen
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            
0000442E                            SegaScreen:				; XREF: GameModeArray
0000442E 103C 00E4                  		move.b	#$E4,d0
00004432 6100 CBE4                  		bsr.w	PlaySound_Special ; stop music
00004436 6100 CEF6                  		bsr.w	ClearPLC
0000443A 6100 D8AA                  		bsr.w	Pal_FadeFrom
0000443E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004444 3CBC 8004                  		move.w	#$8004,(a6)
00004448 3CBC 8230                  		move.w	#$8230,(a6)
0000444C 3CBC 8407                  		move.w	#$8407,(a6)
00004450 3CBC 8700                  		move.w	#$8700,(a6)
00004454 3CBC 8B00                  		move.w	#$8B00,(a6)
00004458 4238 F64E                  		clr.b	($FFFFF64E).w
0000445C 46FC 2700                  		move	#$2700,sr
00004460 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004464 0200 00BF                  		andi.b	#$BF,d0
00004468 33C0 00C0 0004             		move.w	d0,($C00004).l
0000446E 6100 CA9A                  		bsr.w	ClearScreen
00004472 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000447C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004482 6100 CD24                  		bsr.w	NemDec
00004486 43F9 00FF 0000             		lea	($FF0000).l,a1
0000448C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004492 303C 0000                  		move.w	#0,d0
00004496 6100 CFD6                  		bsr.w	EniDec
0000449A 43F9 00FF 0000             		lea	($FF0000).l,a1
000044A0 203C 6510 0003             		move.l	#$65100003,d0
000044A6 7217                       		moveq	#$17,d1
000044A8 7407                       		moveq	#7,d2
000044AA 6100 CC08                  		bsr.w	ShowVDPGraphics
000044AE 43F9 00FF 0180             		lea	($FF0180).l,a1
000044B4 203C 4000 0003             		move.l	#$40000003,d0
000044BA 7227                       		moveq	#$27,d1
000044BC 741B                       		moveq	#$1B,d2
000044BE 6100 CBF4                  		bsr.w	ShowVDPGraphics
000044C2 7000                       		moveq	#0,d0
000044C4 6100 DAEA                  		bsr.w	PalLoad2	; load Sega logo Palette
000044C8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000044CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000044D4 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000044DA 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000044E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000044E4 0000 0040                  		ori.b	#$40,d0
000044E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000044EE                            
000044EE                            Sega_WaitPalette:
000044EE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000044F4 6100 E352                  		bsr.w	DelayProgram
000044F8 6100 D9A8                  		bsr.w	PalCycle_Sega
000044FC 66F0                       		bne.s	Sega_WaitPalette
000044FE                            
000044FE                            		;move.b	#$E1,d0
000044FE                            		;bsr.w	PlaySound_Special ; play "SEGA"	sound
000044FE                            		
000044FE 708C                       		moveq	#$FFFFFF8C,d0
00004500 4EB8 0FDE                  		jsr	PlaySample
00004504                            		
00004504 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000450A 6100 E33C                  		bsr.w	DelayProgram
0000450E 31FC 00E0 F614             		move.w	#$E0,($FFFFF614).w
00004514                            
00004514                            Sega_WaitEnd:
00004514 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000451A 6100 E32C                  		bsr.w	DelayProgram
0000451E 4A78 F614                  		tst.w	($FFFFF614).w
00004522 6700                       		beq.s	Sega_GotoTitle
00004524 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000452A 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000452C                            
0000452C                            Sega_GotoTitle:
0000452C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00004532                            	;	rts	
00004532                            	;	jmp	Owarisoft
00004532                            ; ===========================================================================
00004532                            
00004532                            ; ---------------------------------------------------------------------------
00004532                            ; Title	screen
00004532                            ; ---------------------------------------------------------------------------
00004532                            
00004532                            TitleScreen:				; XREF: GameModeArray
00004532 103C 00E4                  		move.b	#$E4,d0
00004536 6100 CAE0                  		bsr.w	PlaySound_Special ; stop music
0000453A 6100 CDF2                  		bsr.w	ClearPLC
0000453E 6100 D7A6                  		bsr.w	Pal_FadeFrom
00004542 46FC 2700                  		move	#$2700,sr
00004546 6100 CA50                  		bsr.w	InitMegaPCM
0000454A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004550 3CBC 8004                  		move.w	#$8004,(a6)
00004554 3CBC 8230                  		move.w	#$8230,(a6)
00004558 3CBC 8407                  		move.w	#$8407,(a6)
0000455C 3CBC 9001                  		move.w	#$9001,(a6)
00004560 3CBC 9200                  		move.w	#$9200,(a6)
00004564 3CBC 8B03                  		move.w	#$8B03,(a6)
00004568 3CBC 8720                  		move.w	#$8720,(a6)
0000456C 4238 F64E                  		clr.b	($FFFFF64E).w
00004570 6100 C998                  		bsr.w	ClearScreen
00004574 43F8 D000                  		lea	($FFFFD000).w,a1
00004578 7000                       		moveq	#0,d0
0000457A 323C 07FF                  		move.w	#$7FF,d1
0000457E                            
0000457E                            Title_ClrObjRam:
0000457E 22C0                       		move.l	d0,(a1)+
00004580 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00004584                            
00004584 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000458E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00004594 6100 CC12                  		bsr.w	NemDec
00004598 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000045A2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000045A8 6100 CBFE                  		bsr.w	NemDec
000045AC 43F9 00FF 0000             		lea	($FF0000).l,a1
000045B2 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000045B8 303C 0000                  		move.w	#0,d0
000045BC 6100 CEB0                  		bsr.w	EniDec
000045C0 43F9 00FF 0000             		lea	($FF0000).l,a1
000045C6 203C 4000 0003             		move.l	#$40000003,d0
000045CC 7227                       		moveq	#$27,d1
000045CE 741B                       		moveq	#$1B,d2
000045D0 6100 CAE2                  		bsr.w	ShowVDPGraphics
000045D4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000045D8 7000                       		moveq	#0,d0
000045DA 323C 001F                  		move.w	#$1F,d1
000045DE                            
000045DE                            Title_ClrPalette:
000045DE 22C0                       		move.l	d0,(a1)+
000045E0 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
000045E4                            
000045E4 7003                       		moveq	#3,d0		; load Sonic's Palette
000045E6 6100 D9AC                  		bsr.w	PalLoad1
000045EA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000045F0 4EB9 0000 0000             		jsr	ObjectsLoad
000045F6 4EB9 0000 0000             		jsr	BuildSprites
000045FC 6100 D632                  		bsr.w	Pal_FadeTo
00004600 46FC 2700                  		move	#$2700,sr
00004604 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000460E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004614 6100 CB92                  		bsr.w	NemDec
00004618 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00004622 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004628 6100 CB7E                  		bsr.w	NemDec
0000462C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00004636 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000463C 6100 CB6A                  		bsr.w	NemDec
00004640 4DF9 00C0 0000             		lea	($C00000).l,a6
00004646 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000464E 4BF9 0000 0374             		lea	(Art_Text).l,a5
00004654 323C 028F                  		move.w	#$28F,d1
00004658                            
00004658                            Title_LoadText:
00004658 3C9D                       		move.w	(a5)+,(a6)
0000465A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000465E                            
0000465E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00004664 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000466A 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00004670 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00004676 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000467C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
00004682 6100 0000                  		bsr.w	LevelSizeLoad
00004686 6100 0000                  		bsr.w	DeformBgLayer
0000468A 43F8 B000                  		lea	($FFFFB000).w,a1
0000468E 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	TS 16x16 mappings
00004694 303C 0000                  		move.w	#0,d0
00004698 6100 CDD4                  		bsr.w	EniDec
0000469C 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
000046A2 43F9 00FF 0000             		lea	($FF0000).l,a1
000046A8 6100 CF42                  		bsr.w	KosDec
000046AC 6100 0000                  		bsr.w	LevelLayoutLoad
000046B0 6100 D634                  		bsr.w	Pal_FadeFrom
000046B4 46FC 2700                  		move	#$2700,sr
000046B8 6100 C850                  		bsr.w	ClearScreen
000046BC 4BF9 00C0 0004             		lea	($C00004).l,a5
000046C2 4DF9 00C0 0000             		lea	($C00000).l,a6
000046C8 47F8 F708                  		lea	($FFFFF708).w,a3
000046CC 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000046D0 343C 6000                  		move.w	#$6000,d2
000046D4 6100 0000                  		bsr.w	LoadTilesFromStart2
000046D8 43F9 00FF 0000             		lea	($FF0000).l,a1
000046DE 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000046E4 303C 0000                  		move.w	#0,d0
000046E8 6100 CD84                  		bsr.w	EniDec
000046EC 43F9 00FF 0000             		lea	($FF0000).l,a1
000046F2 203C 4206 0003             		move.l	#$42060003,d0
000046F8 7221                       		moveq	#$21,d1
000046FA 7415                       		moveq	#$15,d2
000046FC 6100 C9B6                  		bsr.w	ShowVDPGraphics
00004700 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000470A 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load TZ patterns
00004710 6100 CA96                  		bsr.w	NemDec
00004714 7001                       		moveq	#1,d0		; load title screen Palette
00004716 6100 D87C                  		bsr.w	PalLoad1
0000471A 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000471E 6100 C8F8                  		bsr.w	PlaySound_Special
00004722 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004728 31FC 0654 F614             		move.w	#$654,($FFFFF614).w ; run title	screen for $178	frames
0000472E 43F8 D080                  		lea	($FFFFD080).w,a1
00004732 7000                       		moveq	#0,d0
00004734 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00004738                            
00004738                            Title_ClrObjRam2:
00004738 22C0                       		move.l	d0,(a1)+
0000473A 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000473E                            
0000473E 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004744                            
00004744 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000474A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004750 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004756 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000475C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004762 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004768 4EB9 0000 0000             		jsr	ObjectsLoad
0000476E 6100 0000                  		bsr.w	DeformBgLayer
00004772 4EB9 0000 0000             		jsr	BuildSprites
00004778 7000                       		moveq	#0,d0
0000477A 6100 CB86                  		bsr.w	LoadPLC2
0000477E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004784 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000478A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000478E 0000 0040                  		ori.b	#$40,d0
00004792 33C0 00C0 0004             		move.w	d0,($C00004).l
00004798 6100 D496                  		bsr.w	Pal_FadeTo
0000479C                            
0000479C                            loc_317C:
0000479C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000047A2 6100 E0A4                  		bsr.w	DelayProgram
000047A6 4EB9 0000 0000             		jsr	ObjectsLoad
000047AC 6100 0000                  		bsr.w	DeformBgLayer
000047B0 4EB9 0000 0000             		jsr	BuildSprites
000047B6 6100 D072                  		bsr.w	PalCycle_Title
000047BA 6100 CB80                  		bsr.w	RunPLC_RAM
000047BE 3038 D008                  		move.w	($FFFFD008).w,d0
000047C2 5440                       		addq.w	#2,d0
000047C4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000047C8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000047CC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000047CE 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000047D4 4E75                       		rts	
000047D6                            ; ===========================================================================
000047D6                            
000047D6                            Title_ChkRegion:
000047D6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000047DA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000047DC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000047E2 6000                       		bra.s	Title_EnterCheat
000047E4                            ; ===========================================================================
000047E4                            
000047E4                            Title_RegionJ:				; XREF: Title_ChkRegion
000047E4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000047EA                            
000047EA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000047EA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000047EE D0C0                       		adda.w	d0,a0
000047F0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000047F4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000047F8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000047FA 6600                       		bne.s	loc_3210	; if not, branch
000047FC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00004800 4A00                       		tst.b	d0
00004802 6600                       		bne.s	Title_CountC
00004804 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004808 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000480C E249                       		lsr.w	#1,d1
0000480E 0241 0003                  		andi.w	#3,d1
00004812 6700                       		beq.s	Title_PlayRing
00004814 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004818 6A00                       		bpl.s	Title_PlayRing
0000481A 7201                       		moveq	#1,d1
0000481C 1181 1001                  		move.b	d1,1(a0,d1.w)
00004820                            
00004820                            Title_PlayRing:
00004820 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004826 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
0000482E 103C 00BF                  		move.b	#$BF,d0		; play continue sound when code is entered
00004832 6100 C7E4                  		bsr.w	PlaySound_Special
00004836 6000                       		bra.s	Title_CountC
00004838                            ; ===========================================================================
00004838                            
00004838                            loc_3210:				; XREF: Title_EnterCheat
00004838 4A00                       		tst.b	d0
0000483A 6700                       		beq.s	Title_CountC
0000483C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004842 6700                       		beq.s	Title_CountC
00004844 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000484A                            
0000484A                            Title_CountC:
0000484A 1038 F605                  		move.b	($FFFFF605).w,d0
0000484E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00004852 6700                       		beq.s	loc_3230	; if not, branch
00004854 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00004858                            
00004858                            loc_3230:
00004858 4A78 F614                  		tst.w	($FFFFF614).w
0000485C 6700 0000                  		beq.w	Demo
00004860 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00004866 6700 FF34                  		beq.w	loc_317C	; if not, branch
0000486A                            
0000486A                            Title_ChkLevSel:
0000486A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000486E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004872 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00004878 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000487C 7000                       		moveq	#$00,d0				; clear d0
0000487E 11C0 FF32                  		move.b	d0,($FFFFFF32).w		; clear background strip 1 draw flags
00004882 11C0 FF34                  		move.b	d0,($FFFFFF34).w		; clear background strip 2 draw flags
00004886 11C0 FF30                  		move.b	d0,($FFFFFF30).w		; clear foreground strip draw flag
0000488A 7002                       		moveq	#2,d0
0000488C 6100 D722                  		bsr.w	PalLoad2	; load level select Palette
00004890 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004894 7000                       		moveq	#0,d0
00004896 323C 00DF                  		move.w	#$DF,d1
0000489A                            
0000489A                            Title_ClrScroll:
0000489A 22C0                       		move.l	d0,(a1)+
0000489C 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000048A0                            
000048A0 21C0 F616                  		move.l	d0,($FFFFF616).w
000048A4 46FC 2700                  		move	#$2700,sr
000048A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000048AE 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000048B8 323C 03FF                  		move.w	#$3FF,d1
000048BC                            
000048BC                            Title_ClrVram:
000048BC 2C80                       		move.l	d0,(a6)
000048BE 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000048C2                            
000048C2 6100 0000                  		bsr.w	LevSelTextLoad
000048C6                            
000048C6                            ; ---------------------------------------------------------------------------
000048C6                            ; Level	Select
000048C6                            ; ---------------------------------------------------------------------------
000048C6                            
000048C6                            LevelSelect:
000048C6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000048CC 6100 DF7A                  		bsr.w	DelayProgram
000048D0 6100 0000                  		bsr.w	LevSelControls
000048D4 6100 CA66                  		bsr.w	RunPLC_RAM
000048D8 4AB8 F680                  		tst.l	($FFFFF680).w
000048DC 66E8                       		bne.s	LevelSelect
000048DE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000048E4 67E0                       		beq.s	LevelSelect	; if not, branch
000048E6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000048EA 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000048EE 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000048F0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000048F4 0640 0080                  		addi.w	#$80,d0
000048F8                            	;	tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000048F8                            	;	beq.s	LevSel_NoCheat	; if not, branch
000048F8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000048FC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000048FE 0C40 0080                  		cmpi.w	#$80,d0		; is sound $9E being played?
00004902 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004904                            
00004904                            LevSel_NoCheat:
00004904 0C40 0097                  		cmpi.w	#$97,d0		; is sound $80-$94 being played?
00004908 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
0000490A 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000490E 65B6                       		bcs.s	LevelSelect	; if yes, branch
00004910                            
00004910                            LevSel_PlaySnd:
00004910 6100 C706                  		bsr.w	PlaySound_Special
00004914 60B0                       		bra.s	LevelSelect
00004916                            ; ===========================================================================
00004916                            
00004916                            LevSel_Ending:				; XREF: LevelSelect
00004916 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000491C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004922 4E75                       		rts	
00004924                            ; ===========================================================================
00004924                            
00004924                            LevSel_Credits:				; XREF: LevelSelect
00004924 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000492A 103C 0091                  		move.b	#$91,d0
0000492E 6100 C6E8                  		bsr.w	PlaySound_Special ; play credits music
00004932 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004938 4E75                       		rts	
0000493A                            ; ===========================================================================
0000493A                            
0000493A                            LevSel_Level_SS:			; XREF: LevelSelect
0000493A D040                       		add.w	d0,d0
0000493C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004940 6B00 FF84                  		bmi.w	LevelSelect
00004944 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004948 6600                       		bne.s	LevSel_Level	; if not, branch
0000494A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004950 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004954 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
0000495A 7000                       		moveq	#0,d0
0000495C 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004960 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004964 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004968 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000496C 4E75                       		rts	
0000496E                            ; ===========================================================================
0000496E                            
0000496E                            LevSel_Level:				; XREF: LevSel_Level_SS
0000496E 0240 3FFF                  		andi.w	#$3FFF,d0
00004972 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004976                            
00004976                            PlayLevel:				; XREF: ROM:00003246j ...
00004976 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000497C 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004982 7000                       		moveq	#0,d0
00004984 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004988 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000498C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004990 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004994 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004998 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000499C 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000049A0 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000049A4 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000049A8 103C 00E0                  		move.b	#$E0,d0
000049AC 6100 C66A                  		bsr.w	PlaySound_Special ; fade out music
000049B0 4E75                       		rts	
000049B2                            ; ===========================================================================
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            ; Level	select - level pointers
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            LSelectPointers:
000049B2                            		incbin	misc\ls_point.bin
000049DC                            		even
000049DC                            ; ---------------------------------------------------------------------------
000049DC                            ; Level	select codes
000049DC                            ; ---------------------------------------------------------------------------
000049DC                            LevelSelectCode_J:
000049DC                            		incbin	misc\ls_jcode.bin
000049E2                            		even
000049E2                            
000049E2                            LevelSelectCode_US:
000049E2                            		incbin	misc\ls_ucode.bin
000049E8                            		even
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            ; Demo mode
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            
000049E8                            Demo:					; XREF: TitleScreen
000049E8 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000049EE                            
000049EE                            loc_33B6:				; XREF: loc_33E4
000049EE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000049F4 6100 DE52                  		bsr.w	DelayProgram
000049F8 6100 0000                  		bsr.w	DeformBgLayer
000049FC 6100 CE0C                  		bsr.w	PalCycle_Load
00004A00 6100 C93A                  		bsr.w	RunPLC_RAM
00004A04 3038 D008                  		move.w	($FFFFD008).w,d0
00004A08 5440                       		addq.w	#2,d0
00004A0A 31C0 D008                  		move.w	d0,($FFFFD008).w
00004A0E 0C40 1C00                  		cmpi.w	#$1C00,d0
00004A12 6500                       		bcs.s	loc_33E4
00004A14 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004A1A 4E75                       		rts	
00004A1C                            ; ===========================================================================
00004A1C                            
00004A1C                            loc_33E4:				; XREF: Demo
00004A1C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00004A22 6600 FE46                  		bne.w	Title_ChkLevSel	; if yes, branch
00004A26 4A78 F614                  		tst.w	($FFFFF614).w
00004A2A 6600 FFC2                  		bne.w	loc_33B6
00004A2E 103C 00E0                  		move.b	#$E0,d0
00004A32 6100 C5E4                  		bsr.w	PlaySound_Special ; fade out music
00004A36 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004A3A 0240 0007                  		andi.w	#7,d0
00004A3E D040                       		add.w	d0,d0
00004A40 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004A44 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004A48 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004A4C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004A52 6500                       		bcs.s	loc_3422	; if yes, branch
00004A54 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004A5A                            
00004A5A                            loc_3422:
00004A5A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004A60 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004A66 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004A6A 6600                       		bne.s	Demo_Level	; if not, branch
00004A6C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004A72 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004A76 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004A7A                            
00004A7A                            Demo_Level:
00004A7A 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004A80 7000                       		moveq	#0,d0
00004A82 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004A86 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004A8A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004A8E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004A92 4E75                       		rts	
00004A94                            ; ===========================================================================
00004A94                            ; ---------------------------------------------------------------------------
00004A94                            ; Levels used in demos
00004A94                            ; ---------------------------------------------------------------------------
00004A94                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004A9C                            		even
00004A9C                            
00004A9C                            ; ---------------------------------------------------------------------------
00004A9C                            ; Subroutine to	change what you're selecting in the level select
00004A9C                            ; ---------------------------------------------------------------------------
00004A9C                            
00004A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A9C                            
00004A9C                            
00004A9C                            LevSelControls:				; XREF: LevelSelect
00004A9C 1238 F605                  		move.b	($FFFFF605).w,d1
00004AA0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004AA4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004AA6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004AAA 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004AAC                            
00004AAC                            LevSel_UpDown:
00004AAC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004AB2 1238 F604                  		move.b	($FFFFF604).w,d1
00004AB6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004ABA 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004ABC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004AC0 0801 0000                  		btst	#0,d1		; is up	pressed?
00004AC4 6700                       		beq.s	LevSel_Down	; if not, branch
00004AC6 5340                       		subq.w	#1,d0		; move up 1 selection
00004AC8 6400                       		bcc.s	LevSel_Down
00004ACA 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004ACC                            
00004ACC                            LevSel_Down:
00004ACC 0801 0001                  		btst	#1,d1		; is down pressed?
00004AD0 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004AD2 5240                       		addq.w	#1,d0		; move down 1 selection
00004AD4 0C40 0015                  		cmpi.w	#$15,d0
00004AD8 6500                       		bcs.s	LevSel_Refresh
00004ADA 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004ADC                            
00004ADC                            LevSel_Refresh:
00004ADC 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004AE0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004AE4 4E75                       		rts	
00004AE6                            ; ===========================================================================
00004AE6                            
00004AE6                            LevSel_SndTest:				; XREF: LevSelControls
00004AE6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004AEC 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004AEE 1238 F605                  		move.b	($FFFFF605).w,d1
00004AF2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00004AF6 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004AF8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004AFC 0801 0002                  		btst	#2,d1		; is left pressed?
00004B00 6700                       		beq.s	LevSel_Right	; if not, branch
00004B02 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004B04 6400                       		bcc.s	LevSel_Right
00004B06 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004B08                            
00004B08                            LevSel_Right:
00004B08 0801 0003                  		btst	#3,d1		; is right pressed?
00004B0C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004B0E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004B10 0C40 0050                  		cmpi.w	#$50,d0
00004B14 6500                       		bcs.s	LevSel_Refresh2
00004B16 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004B18                            
00004B18                            LevSel_Refresh2:
00004B18 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004B1C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004B20                            
00004B20                            LevSel_NoMove:
00004B20 4E75                       		rts	
00004B22                            ; End of function LevSelControls
00004B22                            
00004B22                            ; ---------------------------------------------------------------------------
00004B22                            ; Subroutine to load level select text
00004B22                            ; ---------------------------------------------------------------------------
00004B22                            
00004B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B22                            
00004B22                            
00004B22                            LevSelTextLoad:				; XREF: TitleScreen
00004B22 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004B28 4DF9 00C0 0000             		lea	($C00000).l,a6
00004B2E 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004B34 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004B38 7214                       		moveq	#$14,d1		; number of lines of text
00004B3A                            
00004B3A                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004B3A 2D44 0004                  		move.l	d4,4(a6)
00004B3E 6100 0000                  		bsr.w	LevSel_ChgLine
00004B42 0684 0080 0000             		addi.l	#$800000,d4
00004B48 51C9 FFF0                  		dbf	d1,loc_34FE
00004B4C 7000                       		moveq	#0,d0
00004B4E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004B52 3200                       		move.w	d0,d1
00004B54 283C 6210 0003             		move.l	#$62100003,d4
00004B5A EF48                       		lsl.w	#7,d0
00004B5C 4840                       		swap	d0
00004B5E D880                       		add.l	d0,d4
00004B60 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004B66 E749                       		lsl.w	#3,d1
00004B68 3001                       		move.w	d1,d0
00004B6A D241                       		add.w	d1,d1
00004B6C D240                       		add.w	d0,d1
00004B6E D2C1                       		adda.w	d1,a1
00004B70 363C C680                  		move.w	#$C680,d3
00004B74 2D44 0004                  		move.l	d4,4(a6)
00004B78 6100 0000                  		bsr.w	LevSel_ChgLine
00004B7C 363C E680                  		move.w	#$E680,d3
00004B80 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004B86 6600                       		bne.s	loc_3550
00004B88 363C C680                  		move.w	#$C680,d3
00004B8C                            
00004B8C                            loc_3550:
00004B8C 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004B96 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004B9A 0640 0080                  		addi.w	#$80,d0
00004B9E 1400                       		move.b	d0,d2
00004BA0 E808                       		lsr.b	#4,d0
00004BA2 6100 0000                  		bsr.w	LevSel_ChgSnd
00004BA6 1002                       		move.b	d2,d0
00004BA8 6100 0000                  		bsr.w	LevSel_ChgSnd
00004BAC 4E75                       		rts	
00004BAE                            ; End of function LevSelTextLoad
00004BAE                            
00004BAE                            
00004BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BAE                            
00004BAE                            
00004BAE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004BAE 0240 000F                  		andi.w	#$F,d0
00004BB2 0C00 000A                  		cmpi.b	#$A,d0
00004BB6 6500                       		bcs.s	loc_3580
00004BB8 5E00                       		addi.b	#7,d0
00004BBA                            
00004BBA                            loc_3580:
00004BBA D043                       		add.w	d3,d0
00004BBC 3C80                       		move.w	d0,(a6)
00004BBE 4E75                       		rts	
00004BC0                            ; End of function LevSel_ChgSnd
00004BC0                            
00004BC0                            
00004BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BC0                            
00004BC0                            
00004BC0                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004BC0 7417                       		moveq	#$17,d2		; number of characters per line
00004BC2                            
00004BC2                            loc_3588:
00004BC2 7000                       		moveq	#0,d0
00004BC4 1019                       		move.b	(a1)+,d0
00004BC6 6A00                       		bpl.s	loc_3598
00004BC8 3CBC 0000                  		move.w	#0,(a6)
00004BCC 51CA FFF4                  		dbf	d2,loc_3588
00004BD0 4E75                       		rts	
00004BD2                            ; ===========================================================================
00004BD2                            
00004BD2                            loc_3598:				; XREF: LevSel_ChgLine
00004BD2 D043                       		add.w	d3,d0
00004BD4 3C80                       		move.w	d0,(a6)
00004BD6 51CA FFEA                  		dbf	d2,loc_3588
00004BDA 4E75                       		rts	
00004BDC                            ; End of function LevSel_ChgLine
00004BDC                            
00004BDC                            ; ===========================================================================
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            ; Level	select menu text
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            LevelMenuText:	incbin	misc\menutext.bin
00004DD4                            		even
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            ; Music	playlist
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            MusicList_Levels:
00004DD4 8383 8383                  		dc.b $83, $83, $83, $83
00004DD8 8282 8286                  		dc.b $82, $82, $82, $86
00004DDC 8197 8197                  		dc.b $81, $97, $81, $97
00004DE0 8484 8484                  		dc.b $84, $84, $84, $84
00004DE4 8585 8585                  		dc.b $85, $85, $85, $85
00004DE8 8686 8D86                  		dc.b $86, $86, $8D, $86
00004DEC                            		even
00004DEC                            MusicList_SpecialStages:
00004DEC 8989 8989 8989             		dc.b $89, $89, $89, $89, $89, $89
00004DF2                            		even
00004DF2                            MusicList_Credits:
00004DF2 9191                       		dc.b $91, $91
00004DF4                            		even
00004DF4                            MusicList_Endings:
00004DF4 8B8B                       		dc.b $8B, $8B
00004DF6                            		even
00004DF6                            MusicList_Bosses:
00004DF6 8C8C 8C8C 8C8C             		dc.b $8C, $8C, $8C, $8C, $8C, $8C
00004DFC                            		even
00004DFC                            ; ===========================================================================
00004DFC                            
00004DFC                            TitleCard_ArtArray:
00004DFC 0000 0000                  		dc.l Nem_TitleCard_Tutorial
00004E00 0000 0000                  		dc.l Nem_TitleCard_FuckedUp
00004E04 0000 0000                  		dc.l Nem_TitleCard_Dzien
00004E08 0000 0000                  		dc.l Nem_TitleCard_Appendicitis
00004E0C 0000 0000                  		dc.l Nem_TitleCard_Teeth
00004E10 0000 0000                  		dc.l Nem_TitleCard_Hell
00004E14                            
00004E14                            ; ---------------------------------------------------------------------------
00004E14                            ; Level
00004E14                            ; ---------------------------------------------------------------------------
00004E14                            
00004E14                            Level:					; XREF: GameModeArray
00004E14 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00004E1A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004E1E 6B00                       		bmi.s	loc_37B6
00004E20 103C 00E0                  		move.b	#$E0,d0
00004E24 6100 C1F2                  		bsr.w	PlaySound_Special ; fade out music
00004E28                            
00004E28                            loc_37B6:
00004E28 6100 C504                  		bsr.w	ClearPLC
00004E2C 6100 CEB8                  		bsr.w	Pal_FadeFrom
00004E30 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004E34 6B00                       		bmi.s	Level_ClrRam
00004E36 46FC 2700                  		move	#$2700,sr
00004E3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E4A 6100 C35C                  		bsr.w	NemDec
00004E4E 23FC 75A0 0002 00C0 0004   		move.l	#$75A00002,($C00004).l
00004E58                            		
00004E58 41F9 0000 0000             		lea	(Nem_TitleCard_Hell).l,a0
00004E5E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w
00004E64 6700                       		beq.s	@IsSBZ3Final
00004E66 41F9 0000 0000             		lea	(Nem_TitleCard_Final).l,a0
00004E6C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w
00004E72 6700                       		beq.s	@IsSBZ3Final
00004E74 7000                       		moveq	#0,d0
00004E76 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E7A D040                       		add.w	d0,d0
00004E7C D040                       		add.w	d0,d0
00004E7E 43F9 0000 4DFC             		lea	(TitleCard_ArtArray).l,a1
00004E84 2071 0000                  		movea.l	(a1,d0.w),a0
00004E88                            		
00004E88                            	@IsSBZ3Final:
00004E88 6100 C31E                  		bsr.w	NemDec
00004E8C 46FC 2300                  		move	#$2300,sr
00004E90 7000                       		moveq	#0,d0
00004E92 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E96 E948                       		lsl.w	#4,d0
00004E98 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004E9E 45F2 0000                  		lea	(a2,d0.w),a2
00004EA2 7000                       		moveq	#0,d0
00004EA4 1012                       		move.b	(a2),d0
00004EA6 6700                       		beq.s	loc_37FC
00004EA8 6100 C426                  		bsr.w	LoadPLC		; load level patterns
00004EAC                            
00004EAC                            loc_37FC:
00004EAC 7001                       		moveq	#1,d0
00004EAE 6100 C420                  		bsr.w	LoadPLC		; load standard	patterns
00004EB2                            
00004EB2                            Level_ClrRam:
00004EB2 43F8 D000                  		lea	($FFFFD000).w,a1
00004EB6 7000                       		moveq	#0,d0
00004EB8 323C 07FF                  		move.w	#$7FF,d1
00004EBC                            
00004EBC                            Level_ClrObjRam:
00004EBC 22C0                       		move.l	d0,(a1)+
00004EBE 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004EC2                            
00004EC2 43F8 F628                  		lea	($FFFFF628).w,a1
00004EC6 7000                       		moveq	#0,d0
00004EC8 323C 0015                  		move.w	#$15,d1
00004ECC                            
00004ECC                            Level_ClrVars:
00004ECC 22C0                       		move.l	d0,(a1)+
00004ECE 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004ED2                            
00004ED2 43F8 F700                  		lea	($FFFFF700).w,a1
00004ED6 7000                       		moveq	#0,d0
00004ED8 323C 003F                  		move.w	#$3F,d1
00004EDC                            
00004EDC                            Level_ClrVars2:
00004EDC 22C0                       		move.l	d0,(a1)+
00004EDE 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004EE2                            
00004EE2 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004EE6 7000                       		moveq	#0,d0
00004EE8 323C 0047                  		move.w	#$47,d1
00004EEC                            
00004EEC                            Level_ClrVars3:
00004EEC 22C0                       		move.l	d0,(a1)+
00004EEE 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004EF2                            
00004EF2 46FC 2700                  		move	#$2700,sr
00004EF6 6100 C012                  		bsr.w	ClearScreen
00004EFA 4DF9 00C0 0004             		lea	($C00004).l,a6
00004F00 3CBC 8B03                  		move.w	#$8B03,(a6)
00004F04 3CBC 8230                  		move.w	#$8230,(a6)
00004F08 3CBC 8407                  		move.w	#$8407,(a6)
00004F0C 3CBC 857C                  		move.w	#$857C,(a6)
00004F10 3CBC 9001                  		move.w	#$9001,(a6)
00004F14 3CBC 8004                  		move.w	#$8004,(a6)
00004F18 3CBC 8720                  		move.w	#$8720,(a6)
00004F1C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004F22 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004F26                            		
00004F26 4278 C800                  		clr.w	($FFFFC800).w
00004F2A 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00004F32                            		
00004F32 11FC 0000 FFBC             		move.b	#0,($FFFFFFBC).w				; Clear sonic drowned flag
00004F38                            		
00004F38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004F3E 6600                       		bne.s	Level_LoadPal	; if not, branch
00004F40 3CBC 8014                  		move.w	#$8014,(a6)
00004F44 7000                       		moveq	#0,d0
00004F46 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004F4A D040                       		add.w	d0,d0
00004F4C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004F52 3031 0000                  		move.w	(a1,d0.w),d0
00004F56 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00004F5A 31C0 F648                  		move.w	d0,($FFFFF648).w
00004F5E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00004F62 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00004F66 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00004F6A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00004F70                            
00004F70                            Level_LoadPal:
00004F70 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004F76 46FC 2300                  		move	#$2300,sr
00004F7A 7003                       		moveq	#3,d0
00004F7C 6100 D032                  		bsr.w	PalLoad2	; load Sonic's Palette line
00004F80 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004F86 6600                       		bne.s	Level_GetBgm	; if not, branch
00004F88 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
00004F8A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004F90 6600                       		bne.s	Level_WaterPal	; if not, branch
00004F92 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
00004F94                            
00004F94                            Level_WaterPal:
00004F94 6100 D032                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
00004F98 4A38 FE30                  		tst.b	($FFFFFE30).w
00004F9C 6700                       		beq.s	Level_GetBgm
00004F9E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004FA4                            
00004FA4                            Level_GetBgm:
00004FA4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004FA8 6B00 0000                  		bmi.w	loc_3946
00004FAC                            		
00004FAC 7000                       		moveq	#0,d0
00004FAE 3238 FE10                  		move.w	($FFFFFE10).w,d1
00004FB2 E419                       		ror.b	#2,d1
00004FB4 EC49                       		lsr.w	#6,d1
00004FB6 43F9 0000 4DD4             		lea	(MusicList_Levels).l,a1
00004FBC 1031 1000                  		move.b	(a1,d1.w),d0		; get d0-th entry from the playlist
00004FC0 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
00004FC4 4EB9 0000 0000             		jsr	CtrlLevelMusic
00004FCA                            		
00004FCA 11FC 0034 D080             		move.b	#$34,($FFFFD080).w 	; load title	card object
00004FD0                            
00004FD0                            Level_TtlCard:
00004FD0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004FD6 6100 D870                  		bsr.w	DelayProgram
00004FDA 4EB9 0000 0000             		jsr	ObjectsLoad
00004FE0 4EB9 0000 0000             		jsr	BuildSprites
00004FE6 6100 C354                  		bsr.w	RunPLC_RAM
00004FEA 3038 D108                  		move.w	($FFFFD108).w,d0
00004FEE B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004FF2 66DC                       		bne.s	Level_TtlCard	; if not, branch
00004FF4 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00004FF8 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00004FFA 4EB9 0000 0000             		jsr	Hud_Base
00005000                            
00005000                            loc_3946:
00005000 7003                       		moveq	#3,d0
00005002 6100 CF90                  		bsr.w	PalLoad1	; load Sonic's Palette line
00005006 6100 0000                  		bsr.w	LevelSizeLoad
0000500A 6100 0000                  		bsr.w	DeformBgLayer
0000500E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005014 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
00005018 6100 0000                  		bsr.w	LoadTilesFromStart
0000501C 4EB9 0000 0000             		jsr	FloorLog_Unk
00005022 6100 0000                  		bsr.w	ColIndexLoad
00005026 6100 0000                  		bsr.w	LZWaterEffects
0000502A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005030 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005034 6B00                       		bmi.s	Level_ChkDebug
00005036 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000503C                            
0000503C                            Level_ChkDebug:
0000503C 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005040 6700                       		beq.s	Level_ChkWater	; if not, branch
00005042 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005048 6700                       		beq.s	Level_ChkWater	; if not, branch
0000504A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005050                            
00005050                            Level_ChkWater:
00005050 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00005056 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000505C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005062 6600                       		bne.s	Level_LoadObj	; if not, branch
00005064 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000506A 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00005070 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00005076 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000507C                            
0000507C                            Level_LoadObj:
0000507C 4EB9 0000 0000             		jsr	ObjPosLoad
00005082 4EB9 0000 0000             		jsr	ObjectsLoad
00005088 4EB9 0000 0000             		jsr	BuildSprites
0000508E 7000                       		moveq	#0,d0
00005090 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00005094 6600                       		bne.s	loc_39E8	; if yes, branch
00005096 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
0000509A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000509E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000050A2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000050A6                            
000050A6                            loc_39E8:
000050A6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000050AA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000050AE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000050B2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000050B6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000050BA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000050BE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000050C2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000050C6 6100 0000                  		bsr.w	OscillateNumInit
000050CA 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000050D0 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000050D6 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000050DC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000050E2 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000050E8 7000                       		moveq	#0,d0
000050EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000050EE E548                       		lsl.w	#2,d0
000050F0 2271 0000                  		movea.l	(a1,d0.w),a1
000050F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000050F8 6A00                       		bpl.s	Level_Demo	; if yes, branch
000050FA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00005100 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005104 5340                       		subq.w	#1,d0
00005106 E548                       		lsl.w	#2,d0
00005108 2271 0000                  		movea.l	(a1,d0.w),a1
0000510C                            
0000510C                            Level_Demo:
0000510C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00005112 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00005116 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000511C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005120 6A00                       		bpl.s	Level_ChkWaterPal
00005122 31FC 021C F614             		move.w	#540,($FFFFF614).w
00005128 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000512E 6600                       		bne.s	Level_ChkWaterPal
00005130 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00005136                            
00005136                            Level_ChkWaterPal:
00005136 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000513C 6600                       		bne.s	Level_Delay	; if not, branch
0000513E 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
00005140 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00005146 6600                       		bne.s	Level_WaterPal2	; if not, branch
00005148 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
0000514A                            
0000514A                            Level_WaterPal2:
0000514A 6100 CE98                  		bsr.w	PalLoad4_Water
0000514E                            
0000514E                            Level_Delay:
0000514E 323C 0003                  		move.w	#3,d1
00005152                            
00005152                            Level_DelayLoop:
00005152 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005158 6100 D6EE                  		bsr.w	DelayProgram
0000515C 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00005160                            
00005160 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005166 6100 CACE                  		bsr.w	Pal_FadeTo2
0000516A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000516E 6B00                       		bmi.s	Level_ClrCardArt
00005170 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00005174 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00005178 5838 D124                  		addq.b	#4,($FFFFD124).w
0000517C 5838 D164                  		addq.b	#4,($FFFFD164).w
00005180 6000                       		bra.s	Level_StartGame
00005182                            ; ===========================================================================
00005182                            
00005182                            Level_ClrCardArt:
00005182 7002                       		moveq	#2,d0
00005184 4EB9 0000 12D0             		jsr	(LoadPLC).l	; load explosion patterns
0000518A 7000                       		moveq	#0,d0
0000518C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005190 0640 0015                  		addi.w	#$15,d0
00005194 4EB9 0000 12D0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000519A                            
0000519A                            Level_StartGame:
0000519A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000051A0                            
000051A0                            ; ---------------------------------------------------------------------------
000051A0                            ; Main level loop (when	all title card and loading sequences are finished)
000051A0                            ; ---------------------------------------------------------------------------
000051A0                            
000051A0                            Level_MainLoop:
000051A0 6100 BE9A                  		bsr.w	PauseGame
000051A4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000051AA 6100 D69C                  		bsr.w	DelayProgram
000051AE 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000051B2 6100 0000                  		bsr.w	MoveSonicInDemo
000051B6 6100 0000                  		bsr.w	LZWaterEffects
000051BA 4EB9 0000 0000             		jsr	ObjectsLoad
000051C0 4A78 FE08                  		tst.w	($FFFFFE08).w
000051C4 6600                       		bne.s	loc_3B10
000051C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051CC 6400                       		bcc.s	loc_3B14
000051CE                            
000051CE                            loc_3B10:
000051CE 6100 0000                  		bsr.w	DeformBgLayer
000051D2                            
000051D2                            loc_3B14:
000051D2 4EB9 0000 0000             		jsr	BuildSprites
000051D8 4EB9 0000 0000             		jsr	ObjPosLoad
000051DE 6100 C62A                  		bsr.w	PalCycle_Load
000051E2 6100 C158                  		bsr.w	RunPLC_RAM
000051E6 6100 0000                  		bsr.w	OscillateNumDo
000051EA 6100 0000                  		bsr.w	ChangeRingFrame
000051EE 6100 0000                  		bsr.w	SignpostArtLoad
000051F2 4EB9 0000 0000             		jsr	CtrlLevelMusic
000051F8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000051FE 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00005200 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00005204 6600 FC0E                  		bne.w	Level		; if yes, branch
00005208 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000520E 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00005212 4E75                       		rts	
00005214                            ; ===========================================================================
00005214                            
00005214                            Level_ChkDemo:				; XREF: Level_MainLoop
00005214 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005218 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000521A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000521E 6700                       		beq.s	Level_EndDemo	; if not, branch
00005220 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00005226 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000522A 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00005230 4E75                       		rts	
00005232                            ; ===========================================================================
00005232                            
00005232                            Level_EndDemo:				; XREF: Level_ChkDemo
00005232 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00005238 6600                       		bne.s	loc_3B88	; if not, branch
0000523A 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00005240 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005244 6A00                       		bpl.s	loc_3B88	; if yes, branch
00005246 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000524C                            
0000524C                            loc_3B88:
0000524C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00005252 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005258 4278 F794                  		clr.w	($FFFFF794).w
0000525C                            
0000525C                            loc_3B98:
0000525C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005262 6100 D5E4                  		bsr.w	DelayProgram
00005266 6100 0000                  		bsr.w	MoveSonicInDemo
0000526A 4EB9 0000 0000             		jsr	ObjectsLoad
00005270 4EB9 0000 0000             		jsr	BuildSprites
00005276 4EB9 0000 0000             		jsr	ObjPosLoad
0000527C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005280 6A00                       		bpl.s	loc_3BC8
00005282 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005288 6100 CA82                  		bsr.w	Pal_FadeOut
0000528C                            
0000528C                            loc_3BC8:
0000528C 4A78 F614                  		tst.w	($FFFFF614).w
00005290 66CA                       		bne.s	loc_3B98
00005292 4E75                       		rts	
00005294                            ; ===========================================================================
00005294                            ; ---------------------------------------------------------------------------
00005294                            ; Subroutine to	do special water effects in Labyrinth Zone
00005294                            ; ---------------------------------------------------------------------------
00005294                            
00005294                            LZWaterEffects:				; XREF: Level
00005294 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000529A 6600                       		bne.s	locret_3C28	; if not, branch
0000529C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052A2 6400                       		bcc.s	LZMoveWater
000052A4                            	;	bsr.w	LZWindTunnels
000052A4                            	;	bsr.w	LZWaterSlides
000052A4 6100 0000                  		bsr.w	LZDynamicWater
000052A8                            
000052A8                            LZMoveWater:
000052A8 4238 F64E                  		clr.b	($FFFFF64E).w
000052AC 7000                       		moveq	#0,d0
000052AE 1038 FE60                  		move.b	($FFFFFE60).w,d0
000052B2 E248                       		lsr.w	#1,d0
000052B4 D078 F648                  		add.w	($FFFFF648).w,d0
000052B8 31C0 F646                  		move.w	d0,($FFFFF646).w
000052BC 3038 F646                  		move.w	($FFFFF646).w,d0
000052C0 9078 F704                  		sub.w	($FFFFF704).w,d0
000052C4 6400                       		bcc.s	loc_3C1A
000052C6 4A40                       		tst.w	d0
000052C8 6A00                       		bpl.s	loc_3C1A
000052CA 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000052D0 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000052D6                            
000052D6                            loc_3C1A:
000052D6 0C40 00DF                  		cmpi.w	#$DF,d0
000052DA 6500                       		bcs.s	loc_3C24
000052DC 303C 00DF                  		move.w	#$DF,d0
000052E0                            
000052E0                            loc_3C24:
000052E0 11C0 F625                  		move.b	d0,($FFFFF625).w
000052E4                            
000052E4                            locret_3C28:
000052E4 4E75                       		rts	
000052E6                            ; ===========================================================================
000052E6                            ; ---------------------------------------------------------------------------
000052E6                            ; Labyrinth default water heights
000052E6                            ; ---------------------------------------------------------------------------
000052E6                            WaterHeight:	incbin	misc\lz_heigh.bin
000052EE                            		even
000052EE                            ; ===========================================================================
000052EE                            
000052EE                            ; ---------------------------------------------------------------------------
000052EE                            ; Labyrinth dynamic water routines
000052EE                            ; ---------------------------------------------------------------------------
000052EE                            
000052EE                            LZDynamicWater:				; XREF: LZWaterEffects
000052EE 7000                       		moveq	#0,d0
000052F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000052F4 D040                       		add.w	d0,d0
000052F6 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000052FA 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000052FE 7200                       		moveq	#0,d1
00005300 1238 F64C                  		move.b	($FFFFF64C).w,d1
00005304 3038 F64A                  		move.w	($FFFFF64A).w,d0
00005308 9078 F648                  		sub.w	($FFFFF648).w,d0
0000530C 6700                       		beq.s	locret_3C5A
0000530E 6400                       		bcc.s	loc_3C56
00005310 4441                       		neg.w	d1
00005312                            
00005312                            loc_3C56:
00005312 D378 F648                  		add.w	d1,($FFFFF648).w
00005316                            
00005316                            locret_3C5A:
00005316 4E75                       		rts	
00005318                            ; ===========================================================================
00005318 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000531A 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000531C 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000531E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00005320                            ; ===========================================================================
00005320                            
00005320                            DynWater_LZ1:				; XREF: DynWater_Index
00005320 3038 F700                  		move.w	($FFFFF700).w,d0
00005324 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005328 6600                       		bne.s	loc_3CD0
0000532A 323C 00B8                  		move.w	#$B8,d1
0000532E 0C40 0600                  		cmpi.w	#$600,d0
00005332 6500                       		bcs.s	loc_3CB4
00005334 323C 0108                  		move.w	#$108,d1
00005338 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000533E 6500                       		bcs.s	loc_3CBA
00005340 0C40 0C00                  		cmpi.w	#$C00,d0
00005344 6500                       		bcs.s	loc_3CB4
00005346 323C 0318                  		move.w	#$318,d1
0000534A 0C40 1080                  		cmpi.w	#$1080,d0
0000534E 6500                       		bcs.s	loc_3CB4
00005350 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00005356 323C 05C8                  		move.w	#$5C8,d1
0000535A 0C40 1380                  		cmpi.w	#$1380,d0
0000535E 6500                       		bcs.s	loc_3CB4
00005360 323C 03A8                  		move.w	#$3A8,d1
00005364 B278 F648                  		cmp.w	($FFFFF648).w,d1
00005368 6600                       		bne.s	loc_3CB4
0000536A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00005370                            
00005370                            loc_3CB4:
00005370 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005374 4E75                       		rts	
00005376                            ; ===========================================================================
00005376                            
00005376                            loc_3CBA:				; XREF: DynWater_LZ1
00005376 0C40 0C80                  		cmpi.w	#$C80,d0
0000537A 65F4                       		bcs.s	loc_3CB4
0000537C 323C 00E8                  		move.w	#$E8,d1
00005380 0C40 1500                  		cmpi.w	#$1500,d0
00005384 65EA                       		bcs.s	loc_3CB4
00005386 323C 0108                  		move.w	#$108,d1
0000538A 60E4                       		bra.s	loc_3CB4
0000538C                            ; ===========================================================================
0000538C                            
0000538C                            loc_3CD0:				; XREF: DynWater_LZ1
0000538C 5302                       		subq.b	#1,d2
0000538E 6600                       		bne.s	locret_3CF4
00005390 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00005396 6400                       		bcc.s	locret_3CF4
00005398 323C 03A8                  		move.w	#$3A8,d1
0000539C 0C40 1300                  		cmpi.w	#$1300,d0
000053A0 6500                       		bcs.s	loc_3CF0
000053A2 323C 0108                  		move.w	#$108,d1
000053A6 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000053AC                            
000053AC                            loc_3CF0:
000053AC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000053B0                            
000053B0                            locret_3CF4:
000053B0 4E75                       		rts	
000053B2                            ; ===========================================================================
000053B2                            
000053B2                            DynWater_LZ2:				; XREF: DynWater_Index
000053B2 3038 F700                  		move.w	($FFFFF700).w,d0
000053B6 323C 0328                  		move.w	#$328,d1
000053BA 0C40 0500                  		cmpi.w	#$500,d0
000053BE 6500                       		bcs.s	loc_3D12
000053C0 323C 03C8                  		move.w	#$3C8,d1
000053C4 0C40 0B00                  		cmpi.w	#$B00,d0
000053C8 6500                       		bcs.s	loc_3D12
000053CA 323C 0428                  		move.w	#$428,d1
000053CE                            
000053CE                            loc_3D12:
000053CE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000053D2 4E75                       		rts	
000053D4                            ; ===========================================================================
000053D4                            
000053D4                            DynWater_LZ3:				; XREF: DynWater_Index
000053D4 3038 F700                  		move.w	($FFFFF700).w,d0
000053D8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000053DC 6600                       		bne.s	loc_3D5E
000053DE 323C 0900                  		move.w	#$900,d1
000053E2 0C40 0600                  		cmpi.w	#$600,d0
000053E6 6500                       		bcs.s	loc_3D54
000053E8 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000053EE 6500                       		bcs.s	loc_3D54
000053F0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000053F6 6400                       		bcc.s	loc_3D54
000053F8 323C 04C8                  		move.w	#$4C8,d1
000053FC 21FC 0000 0000 A400        		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
00005404 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000540A 303C 00B7                  		move.w	#$B7,d0
0000540E 6100 BC08                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00005412                            
00005412                            loc_3D54:
00005412 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005416 31C1 F648                  		move.w	d1,($FFFFF648).w
0000541A 4E75                       		rts	
0000541C                            ; ===========================================================================
0000541C                            
0000541C                            loc_3D5E:				; XREF: DynWater_LZ3
0000541C 5302                       		subq.b	#1,d2
0000541E 6600                       		bne.s	loc_3DA8
00005420 323C 04C8                  		move.w	#$4C8,d1
00005424 0C40 0770                  		cmpi.w	#$770,d0
00005428 6500                       		bcs.s	loc_3DA2
0000542A 323C 0308                  		move.w	#$308,d1
0000542E 0C40 1400                  		cmpi.w	#$1400,d0
00005432 6500                       		bcs.s	loc_3DA2
00005434 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000543A 6700                       		beq.s	loc_3D8E
0000543C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00005442 6400                       		bcc.s	loc_3D8E
00005444 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000544A 6400                       		bcc.s	loc_3DA2
0000544C                            
0000544C                            loc_3D8E:
0000544C 323C 0508                  		move.w	#$508,d1
00005450 31C1 F648                  		move.w	d1,($FFFFF648).w
00005454 0C40 1770                  		cmpi.w	#$1770,d0
00005458 6500                       		bcs.s	loc_3DA2
0000545A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005460                            
00005460                            loc_3DA2:
00005460 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005464 4E75                       		rts	
00005466                            ; ===========================================================================
00005466                            
00005466                            loc_3DA8:
00005466 5302                       		subq.b	#1,d2
00005468 6600                       		bne.s	loc_3DD2
0000546A 323C 0508                  		move.w	#$508,d1
0000546E 0C40 1860                  		cmpi.w	#$1860,d0
00005472 6500                       		bcs.s	loc_3DCC
00005474 323C 0188                  		move.w	#$188,d1
00005478 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000547C 6400                       		bcc.s	loc_3DC6
0000547E B278 F648                  		cmp.w	($FFFFF648).w,d1
00005482 6600                       		bne.s	loc_3DCC
00005484                            
00005484                            loc_3DC6:
00005484 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000548A                            
0000548A                            loc_3DCC:
0000548A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000548E 4E75                       		rts	
00005490                            ; ===========================================================================
00005490                            
00005490                            loc_3DD2:
00005490 5302                       		subq.b	#1,d2
00005492 6600                       		bne.s	loc_3E0E
00005494 323C 0188                  		move.w	#$188,d1
00005498 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000549C 6500                       		bcs.s	loc_3E04
0000549E 323C 0900                  		move.w	#$900,d1
000054A2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000054A6 6500                       		bcs.s	loc_3E04
000054A8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000054AE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000054B4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000054BA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000054C0 4E75                       		rts	
000054C2                            ; ===========================================================================
000054C2                            
000054C2                            loc_3E04:
000054C2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000054C6 31C1 F648                  		move.w	d1,($FFFFF648).w
000054CA 4E75                       		rts	
000054CC                            ; ===========================================================================
000054CC                            
000054CC                            loc_3E0E:
000054CC 0C40 1E00                  		cmpi.w	#$1E00,d0
000054D0 6500                       		bcs.s	locret_3E1A
000054D2 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000054D8                            
000054D8                            locret_3E1A:
000054D8 4E75                       		rts	
000054DA                            ; ===========================================================================
000054DA                            
000054DA                            DynWater_SBZ3:				; XREF: DynWater_Index
000054DA 323C 0228                  		move.w	#$228,d1
000054DE 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000054E4 6500                       		bcs.s	loc_3E2C
000054E6 323C 04C8                  		move.w	#$4C8,d1
000054EA                            
000054EA                            loc_3E2C:
000054EA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000054EE 4E75                       		rts
000054F0                            
000054F0                            ; ---------------------------------------------------------------------------
000054F0                            ; Labyrinth Zone "wind tunnels"	subroutine
000054F0                            ; ---------------------------------------------------------------------------
000054F0                            
000054F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000054F0                            
000054F0                            
000054F0                            LZWindTunnels:				; XREF: LZWaterEffects
000054F0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000054F4 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000054F8 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000054FE 7000                       		moveq	#0,d0
00005500 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005504 E748                       		lsl.w	#3,d0
00005506 D4C0                       		adda.w	d0,a2
00005508 7200                       		moveq	#0,d1
0000550A 4A38 FE11                  		tst.b	($FFFFFE11).w
0000550E 6600                       		bne.s	loc_3E56
00005510 7201                       		moveq	#1,d1
00005512 514A                       		subq.w	#8,a2
00005514                            
00005514                            loc_3E56:
00005514 43F8 D000                  		lea	($FFFFD000).w,a1
00005518                            
00005518                            LZWind_Loop:
00005518 3029 0008                  		move.w	8(a1),d0
0000551C B052                       		cmp.w	(a2),d0
0000551E 6500 0000                  		bcs.w	loc_3EF4
00005522 B06A 0004                  		cmp.w	4(a2),d0
00005526 6400 0000                  		bcc.w	loc_3EF4
0000552A 3429 000C                  		move.w	$C(a1),d2
0000552E B46A 0002                  		cmp.w	2(a2),d2
00005532 6500                       		bcs.s	loc_3EF4
00005534 B46A 0006                  		cmp.w	6(a2),d2
00005538 6400                       		bcc.s	loc_3EF4
0000553A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000553E 0200 003F                  		andi.b	#$3F,d0
00005542 6600                       		bne.s	loc_3E90
00005544 303C 00D0                  		move.w	#$D0,d0
00005548 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000554E                            
0000554E                            loc_3E90:
0000554E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00005552 6600 0000                  		bne.w	locret_3F0A
00005556 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000555C 6400                       		bcc.s	loc_3F06
0000555E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00005564 0440 0080                  		subi.w	#$80,d0
00005568 B052                       		cmp.w	(a2),d0
0000556A 6400                       		bcc.s	LZWind_Move
0000556C 7002                       		moveq	#2,d0
0000556E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00005574 6600                       		bne.s	loc_3EBA
00005576 4440                       		neg.w	d0
00005578                            
00005578                            loc_3EBA:
00005578 D169 000C                  		add.w	d0,$C(a1)
0000557C                            
0000557C                            LZWind_Move:
0000557C 5869 0008                  		addq.w	#4,8(a1)
00005580 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00005586 337C 0000 0012             		move.w	#0,$12(a1)
0000558C 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00005592 08E9 0001 0022             		bset	#1,$22(a1)
00005598 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000559E 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000055A0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000055A4                            
000055A4                            LZWind_MoveDown:
000055A4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000055AA 6700                       		beq.s	locret_3EF2	; if not, branch
000055AC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000055B0                            
000055B0                            locret_3EF2:
000055B0 4E75                       		rts	
000055B2                            ; ===========================================================================
000055B2                            
000055B2                            loc_3EF4:				; XREF: LZWindTunnels
000055B2 504A                       		addq.w	#8,a2
000055B4 51C9 FF62                  		dbf	d1,LZWind_Loop
000055B8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000055BC 6700                       		beq.s	locret_3F0A
000055BE 137C 0000 001C             		move.b	#0,$1C(a1)
000055C4                            
000055C4                            loc_3F06:
000055C4 4238 F7C7                  		clr.b	($FFFFF7C7).w
000055C8                            
000055C8                            locret_3F0A:
000055C8 4E75                       		rts	
000055CA                            ; End of function LZWindTunnels
000055CA                            
000055CA                            ; ===========================================================================
000055CA 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000055D2 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000055E4 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000055F2                            					; XREF: LZWindTunnels
000055F2                            		even
000055F2                            
000055F2                            ; ---------------------------------------------------------------------------
000055F2                            ; Labyrinth Zone water slide subroutine
000055F2                            ; ---------------------------------------------------------------------------
000055F2                            
000055F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000055F2                            
000055F2                            
000055F2                            LZWaterSlides:				; XREF: LZWaterEffects
000055F2 43F8 D000                  		lea	($FFFFD000).w,a1
000055F6 0829 0001 0022             		btst	#1,$22(a1)
000055FC 6600                       		bne.s	loc_3F6A
000055FE 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
00005602 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
00005606 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0000560A E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0000560C EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0000560E 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
00005612 D041                       		add.w	d1,d0					; MJ: add together
00005614 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
00005618 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
0000561C 45FA 0000                  		lea	Slide_Chunks(pc),a2
00005620 7200                       		moveq	#$00,d1					; MJ: clear d2
00005622 6000 0000                  		bra	LZLoadChunk				; MJ: continue
00005626                            
00005626                            LZFindChunk:
00005626 B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
00005628 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
0000562C 5241                       		addq.w	#$01,d1					; MJ: increase counter
0000562E                            
0000562E                            LZLoadChunk:
0000562E 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
00005630 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
00005632                            
00005632                            loc_3F6A:
00005632 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00005636 6700                       		beq.s	locret_3F7A
00005638 337C 0005 003E             		move.w	#5,$3E(a1)
0000563E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00005642                            
00005642                            locret_3F7A:
00005642 4E75                       		rts	
00005644                            ; ===========================================================================
00005644                            
00005644                            LZSlide_Move:				; XREF: LZWaterSlides
00005644 0C41 0003                  		cmpi.w	#3,d1
00005648 6400                       		bcc.s	loc_3F84
0000564A 4E71                       		nop	
0000564C                            
0000564C                            loc_3F84:
0000564C 08A9 0000 0022             		bclr	#0,$22(a1)
00005652 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005656 1340 0014                  		move.b	d0,$14(a1)
0000565A 6A00                       		bpl.s	loc_3F9A
0000565C 08E9 0000 0022             		bset	#0,$22(a1)
00005662                            
00005662                            loc_3F9A:
00005662 4229 0015                  		clr.b	$15(a1)
00005666 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000566C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00005672 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005676 0200 001F                  		andi.b	#$1F,d0
0000567A 6600                       		bne.s	locret_3FBE
0000567C 303C 00D0                  		move.w	#$D0,d0
00005680 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play water sound
00005686                            
00005686                            locret_3FBE:
00005686 4E75                       		rts	
00005688                            ; End of function LZWaterSlides
00005688                            
00005688                            ; ===========================================================================
00005688                            ; ---------------------------------------------------------------------------
00005688 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
0000568C FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
00005690 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
00005694 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
00005698 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
0000569C 17                         		dc.b	$17
0000569D 00                         		dc.b	$00					; MJ: End marker
0000569E                            		even
0000569E                            ; ---------------------------------------------------------------------------
0000569E 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
000056A2 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
000056A6 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
000056AA F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
000056AE F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
000056B2 F5                         		dc.b	$F5
000056B4 00                         		even
000056B4                            ; ---------------------------------------------------------------------------
000056B4                            ; ===========================================================================
000056B4                            ; ---------------------------------------------------------------------------
000056B4                            ; Subroutine to	move Sonic in demo mode
000056B4                            ; ---------------------------------------------------------------------------
000056B4                            
000056B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B4                            
000056B4                            
000056B4                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000056B4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000056B8 6600                       		bne.s	MoveDemo_On	; if yes, branch
000056BA 4E75                       		rts	
000056BC                            ; ===========================================================================
000056BC                            
000056BC                            ; This is an unused subroutine for recording a demo
000056BC                            
000056BC                            MoveDemo_Record:
000056BC 43F9 0008 0000             		lea	($80000).l,a1
000056C2 3038 F790                  		move.w	($FFFFF790).w,d0
000056C6 D2C0                       		adda.w	d0,a1
000056C8 1038 F604                  		move.b	($FFFFF604).w,d0
000056CC B011                       		cmp.b	(a1),d0
000056CE 6600                       		bne.s	loc_3FFA
000056D0 5229 0001                  		addq.b	#1,1(a1)
000056D4 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000056DA 6700                       		beq.s	loc_3FFA
000056DC 4E75                       		rts	
000056DE                            ; ===========================================================================
000056DE                            
000056DE                            loc_3FFA:				; XREF: MoveDemo_Record
000056DE 1340 0002                  		move.b	d0,2(a1)
000056E2 137C 0000 0003             		move.b	#0,3(a1)
000056E8 5478 F790                  		addq.w	#2,($FFFFF790).w
000056EC 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000056F2 4E75                       		rts	
000056F4                            ; ===========================================================================
000056F4                            
000056F4                            MoveDemo_On:				; XREF: MoveSonicInDemo
000056F4 4A38 F604                  		tst.b	($FFFFF604).w
000056F8 6A00                       		bpl.s	loc_4022
000056FA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000056FE 6B00                       		bmi.s	loc_4022
00005700 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00005706                            
00005706                            loc_4022:
00005706 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000570C 7000                       		moveq	#0,d0
0000570E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005712 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00005718 6600                       		bne.s	loc_4038
0000571A 7006                       		moveq	#6,d0
0000571C                            
0000571C                            loc_4038:
0000571C E548                       		lsl.w	#2,d0
0000571E 2271 0000                  		movea.l	(a1,d0.w),a1
00005722 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005726 6A00                       		bpl.s	loc_4056
00005728 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000572E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005732 5340                       		subq.w	#1,d0
00005734 E548                       		lsl.w	#2,d0
00005736 2271 0000                  		movea.l	(a1,d0.w),a1
0000573A                            
0000573A                            loc_4056:
0000573A 3038 F790                  		move.w	($FFFFF790).w,d0
0000573E D2C0                       		adda.w	d0,a1
00005740 1011                       		move.b	(a1),d0
00005742 41F8 F604                  		lea	($FFFFF604).w,a0
00005746 1200                       		move.b	d0,d1
00005748 1428 FFFE                  		move.b	-2(a0),d2
0000574C B500                       		eor.b	d2,d0
0000574E 10C1                       		move.b	d1,(a0)+
00005750 C001                       		and.b	d1,d0
00005752 10C0                       		move.b	d0,(a0)+
00005754 5338 F792                  		subq.b	#1,($FFFFF792).w
00005758 6400                       		bcc.s	locret_407E
0000575A 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005760 5478 F790                  		addq.w	#2,($FFFFF790).w
00005764                            
00005764                            locret_407E:
00005764 4E75                       		rts	
00005766                            ; End of function MoveSonicInDemo
00005766                            
00005766                            ; ===========================================================================
00005766                            ; ---------------------------------------------------------------------------
00005766                            ; Demo sequence	pointers
00005766                            ; ---------------------------------------------------------------------------
00005766                            Demo_Index:
00005766                            	include "_inc\Demo pointers for intro.asm"
00005766                            ; ---------------------------------------------------------------------------
00005766                            ; Demo sequence	pointers
00005766                            ; ---------------------------------------------------------------------------
00005766 0000 0000                  	dc.l Demo_GHZ
0000576A 0000 0000                  	dc.l Demo_GHZ
0000576E 0000 0000                  	dc.l Demo_MZ
00005772 0000 0000                  	dc.l Demo_MZ
00005776 0000 0000                  	dc.l Demo_SYZ
0000577A 0000 0000                  	dc.l Demo_SYZ
0000577E 0000 0000                  	dc.l Demo_SS
00005782 0000 0000                  	dc.l Demo_SS
00005782 0000 0000                  	dc.l Demo_SS
00005786                            
00005786                            Demo_EndIndex:
00005786                            	include "_inc\Demo pointers for ending.asm"
00005786                            ; ---------------------------------------------------------------------------
00005786                            ; Demo (ending) sequence pointers
00005786                            ; ---------------------------------------------------------------------------
00005786 0000 0000                  	dc.l Demo_EndGHZ1
0000578A 0000 0000                  	dc.l Demo_EndMZ
0000578E 0000 0000                  	dc.l Demo_EndSYZ
00005792 0000 0000                  	dc.l Demo_EndLZ
00005796 0000 0000                  	dc.l Demo_EndSLZ
0000579A 0000 0000                  	dc.l Demo_EndSBZ1
0000579E 0000 0000                  	dc.l Demo_EndSBZ2
000057A2 0000 0000                  	dc.l Demo_EndGHZ2
000057A2 0000 0000                  	dc.l Demo_EndGHZ2
000057A6                            
000057A6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000057B6 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000057C6 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000057D6                            		even
000057D6                            
000057D6                            ; ---------------------------------------------------------------------------
000057D6                            ; Collision index loading subroutine
000057D6                            ; ---------------------------------------------------------------------------
000057D6                            
000057D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057D6                            
000057D6                            
000057D6                            ColIndexLoad:				; XREF: Level
000057D6 7000                       		moveq	#0,d0
000057D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000057DC E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
000057DE 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
000057E4 5840                       		add.w	#$04,d0					; MJ: increase to next location
000057E6 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
000057EC 4E75                       		rts	
000057EE                            ; End of function ColIndexLoad
000057EE                            
000057EE                            ; ===========================================================================
000057EE                            ; ---------------------------------------------------------------------------
000057EE                            ; Collision index pointers
000057EE                            ; ---------------------------------------------------------------------------
000057EE                            ColPointers:
000057EE                            	include "_inc\Collision index pointers.asm"
000057EE                            ; ---------------------------------------------------------------------------
000057EE                            ; Collision index pointers
000057EE                            ; ---------------------------------------------------------------------------
000057EE 0000 0000                  	dc.l Col_GHZ_1
000057F2 0000 0000                  	dc.l Col_GHZ_2
000057F6 0000 0000                  	dc.l Col_LZ_1
000057FA 0000 0000                  	dc.l Col_LZ_2
000057FE 0000 0000                  	dc.l Col_MZ_1
00005802 0000 0000                  	dc.l Col_MZ_2
00005806 0000 0000                  	dc.l Col_SLZ_1
0000580A 0000 0000                  	dc.l Col_SLZ_2
0000580E 0000 0000                  	dc.l Col_SYZ_1
00005812 0000 0000                  	dc.l Col_SYZ_2
00005816 0000 0000                  	dc.l Col_SBZ_1
0000581A 0000 0000                  	dc.l Col_SBZ_2
0000581A 0000 0000                  	dc.l Col_SBZ_2
0000581E                            
0000581E                            ; ---------------------------------------------------------------------------
0000581E                            ; Oscillating number subroutine
0000581E                            ; ---------------------------------------------------------------------------
0000581E                            
0000581E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000581E                            
0000581E                            
0000581E                            OscillateNumInit:			; XREF: Level
0000581E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005822 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005828 7220                       		moveq	#$20,d1
0000582A                            
0000582A                            Osc_Loop:
0000582A 32DA                       		move.w	(a2)+,(a1)+
0000582C 51C9 FFFC                  		dbf	d1,Osc_Loop
00005830 4E75                       		rts	
00005832                            ; End of function OscillateNumInit
00005832                            
00005832                            ; ===========================================================================
00005832 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005836 0000 0080                  		dc.w 0,	$80
0000583A 0000 0080                  		dc.w 0,	$80
0000583E 0000 0080                  		dc.w 0,	$80
00005842 0000 0080                  		dc.w 0,	$80
00005846 0000 0080                  		dc.w 0,	$80
0000584A 0000 0080                  		dc.w 0,	$80
0000584E 0000 0080                  		dc.w 0,	$80
00005852 0000 0080                  		dc.w 0,	$80
00005856 0000 50F0                  		dc.w 0,	$50F0
0000585A 011E 2080                  		dc.w $11E, $2080
0000585E 00B4 3080                  		dc.w $B4, $3080
00005862 010E 5080                  		dc.w $10E, $5080
00005866 01C2 7080                  		dc.w $1C2, $7080
0000586A 0276 0080                  		dc.w $276, $80
0000586E 0000 0080                  		dc.w 0,	$80
00005872 0000                       		dc.w 0
00005874                            		even
00005874                            
00005874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005874                            
00005874                            
00005874                            OscillateNumDo:				; XREF: Level
00005874 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000587A 6400                       		bcc.s	locret_41C4
0000587C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005880 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005886 3619                       		move.w	(a1)+,d3
00005888 720F                       		moveq	#$F,d1
0000588A                            
0000588A                            loc_4184:
0000588A 341A                       		move.w	(a2)+,d2
0000588C 381A                       		move.w	(a2)+,d4
0000588E 0303                       		btst	d1,d3
00005890 6600                       		bne.s	loc_41A4
00005892 3029 0002                  		move.w	2(a1),d0
00005896 D042                       		add.w	d2,d0
00005898 3340 0002                  		move.w	d0,2(a1)
0000589C D151                       		add.w	d0,0(a1)
0000589E B811                       		cmp.b	0(a1),d4
000058A0 6200                       		bhi.s	loc_41BA
000058A2 03C3                       		bset	d1,d3
000058A4 6000                       		bra.s	loc_41BA
000058A6                            ; ===========================================================================
000058A6                            
000058A6                            loc_41A4:				; XREF: OscillateNumDo
000058A6 3029 0002                  		move.w	2(a1),d0
000058AA 9042                       		sub.w	d2,d0
000058AC 3340 0002                  		move.w	d0,2(a1)
000058B0 D151                       		add.w	d0,0(a1)
000058B2 B811                       		cmp.b	0(a1),d4
000058B4 6300                       		bls.s	loc_41BA
000058B6 0383                       		bclr	d1,d3
000058B8                            
000058B8                            loc_41BA:
000058B8 5849                       		addq.w	#4,a1
000058BA 51C9 FFCE                  		dbf	d1,loc_4184
000058BE 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000058C2                            
000058C2                            locret_41C4:
000058C2 4E75                       		rts	
000058C4                            ; End of function OscillateNumDo
000058C4                            
000058C4                            ; ===========================================================================
000058C4 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000058C8 0002 0018                  		dc.w 2,	$18
000058CC 0002 0020                  		dc.w 2,	$20
000058D0 0002 0030                  		dc.w 2,	$30
000058D4 0004 0020                  		dc.w 4,	$20
000058D8 0008 0008                  		dc.w 8,	8
000058DC 0008 0040                  		dc.w 8,	$40
000058E0 0004 0040                  		dc.w 4,	$40
000058E4 0002 0050                  		dc.w 2,	$50
000058E8 0002 0050                  		dc.w 2,	$50
000058EC 0002 0020                  		dc.w 2,	$20
000058F0 0003 0030                  		dc.w 3,	$30
000058F4 0005 0050                  		dc.w 5,	$50
000058F8 0007 0070                  		dc.w 7,	$70
000058FC 0002 0010                  		dc.w 2,	$10
00005900 0002 0010                  		dc.w 2,	$10
00005904                            		even
00005904                            
00005904                            ; ---------------------------------------------------------------------------
00005904                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005904                            ; ---------------------------------------------------------------------------
00005904                            
00005904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005904                            
00005904                            
00005904                            ChangeRingFrame:			; XREF: Level
00005904 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005908 6A00                       		bpl.s	loc_421C
0000590A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005910 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005914 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000591A                            
0000591A                            loc_421C:
0000591A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000591E 6A00                       		bpl.s	loc_4232
00005920 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005926 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000592A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005930                            
00005930                            loc_4232:
00005930 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005934 6A00                       		bpl.s	loc_4250
00005936 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000593C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005940 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005946 6500                       		bcs.s	loc_4250
00005948 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000594E                            
0000594E                            loc_4250:
0000594E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005952 6700                       		beq.s	locret_4272
00005954 7000                       		moveq	#0,d0
00005956 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000595A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000595E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005962 EF58                       		rol.w	#7,d0
00005964 0240 0003                  		andi.w	#3,d0
00005968 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000596C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005970                            
00005970                            locret_4272:
00005970 4E75                       		rts	
00005972                            ; End of function ChangeRingFrame
00005972                            
00005972                            ; ---------------------------------------------------------------------------
00005972                            ; End-of-act signpost pattern loading subroutine
00005972                            ; ---------------------------------------------------------------------------
00005972                            
00005972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005972                            
00005972                            
00005972                            SignpostArtLoad:			; XREF: Level
00005972 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005976 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000597A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005980 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005982 3038 F700                  		move.w	($FFFFF700).w,d0
00005986 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000598A 0441 0100                  		subi.w	#$100,d1
0000598E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005990 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005992 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005996 6700                       		beq.s	Signpost_Exit
00005998 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000599C 6700                       		beq.s	Signpost_Exit
0000599E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000059A2 7012                       		moveq	#$12,d0
000059A4 6000 B95C                  		bra.w	LoadPLC2	; load signpost	patterns
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            Signpost_Exit:
000059A8 4E75                       		rts	
000059AA                            ; End of function SignpostArtLoad
000059AA                            
000059AA                            ; ===========================================================================
000059AA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005A2A                            Demo_MZ:	incbin	demodata\i_mz.bin
00005B5A                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005BDA                            Demo_SS:	incbin	demodata\i_ss.bin
00005CDA                            ; ===========================================================================
00005CDA                            
00005CDA                            ; ---------------------------------------------------------------------------
00005CDA                            ; Special Stage
00005CDA                            ; ---------------------------------------------------------------------------
00005CDA                            
00005CDA                            SpecialStage:				; XREF: GameModeArray
00005CDA 303C 00CA                  		move.w	#$CA,d0
00005CDE 6100 B338                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005CE2 6100 C130                  		bsr.w	Pal_MakeFlash
00005CE6 46FC 2700                  		move	#$2700,sr
00005CEA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CF0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005CF4 3CBC 8004                  		move.w	#$8004,(a6)
00005CF8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005CFE 3CBC 9011                  		move.w	#$9011,(a6)
00005D02 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005D06 0200 00BF                  		andi.b	#$BF,d0
00005D0A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005D10 6100 B1F8                  		bsr.w	ClearScreen
00005D14 46FC 2300                  		move	#$2300,sr
00005D18 4BF9 00C0 0004             		lea	($C00004).l,a5
00005D1E 3ABC 8F01                  		move.w	#$8F01,(a5)
00005D22 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005D28 3ABC 9780                  		move.w	#$9780,(a5)
00005D2C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005D32 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005D3A                            
00005D3A                            loc_463C:
00005D3A 3215                       		move.w	(a5),d1
00005D3C 0801 0001                  		btst	#1,d1
00005D40 66F8                       		bne.s	loc_463C
00005D42 3ABC 8F02                  		move.w	#$8F02,(a5)
00005D46 6100 0000                  		bsr.w	SS_BGLoad
00005D4A 7014                       		moveq	#$14,d0
00005D4C 6100 B6EE                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005D50 43F8 D000                  		lea	($FFFFD000).w,a1
00005D54 7000                       		moveq	#0,d0
00005D56 323C 07FF                  		move.w	#$7FF,d1
00005D5A                            
00005D5A                            SS_ClrObjRam:
00005D5A 22C0                       		move.l	d0,(a1)+
00005D5C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005D60                            
00005D60 43F8 F700                  		lea	($FFFFF700).w,a1
00005D64 7000                       		moveq	#0,d0
00005D66 323C 003F                  		move.w	#$3F,d1
00005D6A                            
00005D6A                            SS_ClrRam:
00005D6A 22C0                       		move.l	d0,(a1)+
00005D6C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00005D70                            
00005D70 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005D74 7000                       		moveq	#0,d0
00005D76 323C 0027                  		move.w	#$27,d1
00005D7A                            
00005D7A                            SS_ClrRam2:
00005D7A 22C0                       		move.l	d0,(a1)+
00005D7C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005D80                            
00005D80 43F8 AA00                  		lea	($FFFFAA00).w,a1
00005D84 7000                       		moveq	#0,d0
00005D86 323C 007F                  		move.w	#$7F,d1
00005D8A                            
00005D8A                            SS_ClrNemRam:
00005D8A 22C0                       		move.l	d0,(a1)+
00005D8C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005D90                            
00005D90 4238 F64E                  		clr.b	($FFFFF64E).w
00005D94 4278 FE02                  		clr.w	($FFFFFE02).w
00005D98 700A                       		moveq	#$A,d0
00005D9A 6100 C1F8                  		bsr.w	PalLoad1	; load special stage Palette
00005D9E 4EB9 0000 0000             		jsr	SS_Load
00005DA4 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00005DAC 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00005DB4 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005DBA 6100 0000                  		bsr.w	PalCycle_SS
00005DBE 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005DC2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00005DC8                            		
00005DC8 7000                       		moveq	#0,d0
00005DCA 1038 FE16                  		move.b	($FFFFFE16).w,d0
00005DCE 4A00                       		tst.b	d0
00005DD0 6700                       		beq.s	SS_Num_Not_Zero
00005DD2 103C 0006                  		move.b	#6,d0
00005DD6                            
00005DD6                            SS_Num_Not_Zero:
00005DD6 5340                       		subq.w	#1,d0
00005DD8                            
00005DD8 43F9 0000 4DEC             		lea	(MusicList_SpecialStages).l,a1 ; load Music Playlist for Special Stages
00005DDE 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00005DE2 6100 B22C                  		bsr.w	PlaySound	; play special stage BG	music
00005DE6                            		
00005DE6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005DEC 43F9 0000 5766             		lea	(Demo_Index).l,a1
00005DF2 7006                       		moveq	#6,d0
00005DF4 E548                       		lsl.w	#2,d0
00005DF6 2271 0000                  		movea.l	(a1,d0.w),a1
00005DFA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005E00 5338 F792                  		subq.b	#1,($FFFFF792).w
00005E04 4278 FE20                  		clr.w	($FFFFFE20).w
00005E08 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005E0C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005E12 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005E18 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005E1C 6700                       		beq.s	SS_NoDebug	; if not, branch
00005E1E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005E24 6700                       		beq.s	SS_NoDebug	; if not, branch
00005E26 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005E2C                            
00005E2C                            SS_NoDebug:
00005E2C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005E30 0000 0040                  		ori.b	#$40,d0
00005E34 33C0 00C0 0004             		move.w	d0,($C00004).l
00005E3A 6100 BF2C                  		bsr.w	Pal_MakeWhite
00005E3E                            
00005E3E                            ; ---------------------------------------------------------------------------
00005E3E                            ; Main Special Stage loop
00005E3E                            ; ---------------------------------------------------------------------------
00005E3E                            
00005E3E                            SS_MainLoop:
00005E3E 6100 B1FC                  		bsr.w	PauseGame
00005E42 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005E48 6100 C9FE                  		bsr.w	DelayProgram
00005E4C 6100 F866                  		bsr.w	MoveSonicInDemo
00005E50 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005E56 4EB9 0000 0000             		jsr	ObjectsLoad
00005E5C 4EB9 0000 0000             		jsr	BuildSprites
00005E62 4EB9 0000 0000             		jsr	SS_ShowLayout
00005E68 6100 0000                  		bsr.w	SS_BGAnimate
00005E6C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005E70 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005E72 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005E76 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005E7A                            
00005E7A                            SS_ChkEnd:
00005E7A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00005E80 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005E84                            
00005E84 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005E88 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00005E8C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005E92 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00005E98 6500                       		bcs.s	SS_End		; if not, branch
00005E9A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00005E9E                            
00005E9E                            SS_End:
00005E9E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00005EA4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005EAA 4278 F794                  		clr.w	($FFFFF794).w
00005EAE                            
00005EAE                            SS_EndLoop:
00005EAE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005EB4 6100 C992                  		bsr.w	DelayProgram
00005EB8 6100 F7FA                  		bsr.w	MoveSonicInDemo
00005EBC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005EC2 4EB9 0000 0000             		jsr	ObjectsLoad
00005EC8 4EB9 0000 0000             		jsr	BuildSprites
00005ECE 4EB9 0000 0000             		jsr	SS_ShowLayout
00005ED4 6100 0000                  		bsr.w	SS_BGAnimate
00005ED8 5378 F794                  		subq.w	#1,($FFFFF794).w
00005EDC 6A00                       		bpl.s	loc_47D4
00005EDE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005EE4 6100 BF4E                  		bsr.w	Pal_ToWhite
00005EE8                            
00005EE8                            loc_47D4:
00005EE8 4A78 F614                  		tst.w	($FFFFF614).w
00005EEC 66C0                       		bne.s	SS_EndLoop
00005EEE                            
00005EEE 46FC 2700                  		move	#$2700,sr
00005EF2 4DF9 00C0 0004             		lea	($C00004).l,a6
00005EF8 3CBC 8230                  		move.w	#$8230,(a6)
00005EFC 3CBC 8407                  		move.w	#$8407,(a6)
00005F00 3CBC 9001                  		move.w	#$9001,(a6)
00005F04 6100 B004                  		bsr.w	ClearScreen
00005F08 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005F12 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005F18 6100 B28E                  		bsr.w	NemDec
00005F1C 4EB9 0000 0000             		jsr	Hud_Base
00005F22 4278 C800                  		clr.w	($FFFFC800).w
00005F26 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005F2E 46FC 2300                  		move	#$2300,sr
00005F32 7011                       		moveq	#$11,d0
00005F34 6100 C07A                  		bsr.w	PalLoad2	; load results screen Palette
00005F38 7000                       		moveq	#0,d0
00005F3A 6100 B3C6                  		bsr.w	LoadPLC2
00005F3E 701B                       		moveq	#$1B,d0
00005F40 6100 B38E                  		bsr.w	LoadPLC		; load results screen patterns
00005F44 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005F4A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005F50 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005F54 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005F58 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00005F5C 303C 008E                  		move.w	#$8E,d0
00005F60 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005F66 43F8 D000                  		lea	($FFFFD000).w,a1
00005F6A 7000                       		moveq	#0,d0
00005F6C 323C 07FF                  		move.w	#$7FF,d1
00005F70                            
00005F70                            SS_EndClrObjRam:
00005F70 22C0                       		move.l	d0,(a1)+
00005F72 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005F76                            
00005F76 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00005F7C                            
00005F7C                            SS_NormalExit:
00005F7C 6100 B0BE                  		bsr.w	PauseGame
00005F80 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005F86 6100 C8C0                  		bsr.w	DelayProgram
00005F8A 4EB9 0000 0000             		jsr	ObjectsLoad
00005F90 4EB9 0000 0000             		jsr	BuildSprites
00005F96 6100 B3A4                  		bsr.w	RunPLC_RAM
00005F9A 4A78 FE02                  		tst.w	($FFFFFE02).w
00005F9E 67DC                       		beq.s	SS_NormalExit
00005FA0 4AB8 F680                  		tst.l	($FFFFF680).w
00005FA4 66D6                       		bne.s	SS_NormalExit
00005FA6 303C 00CA                  		move.w	#$CA,d0
00005FAA 6100 B06C                  		bsr.w	PlaySound_Special ; play special stage exit sound
00005FAE 6100 BE64                  		bsr.w	Pal_MakeFlash
00005FB2 4E75                       		rts	
00005FB4                            ; ===========================================================================
00005FB4                            
00005FB4                            SS_ToSegaScreen:
00005FB4 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00005FBA 4E75                       		rts
00005FBC                            
00005FBC                            ; ---------------------------------------------------------------------------
00005FBC                            ; Special stage	background loading subroutine
00005FBC                            ; ---------------------------------------------------------------------------
00005FBC                            
00005FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005FBC                            
00005FBC                            
00005FBC                            SS_BGLoad:				; XREF: SpecialStage
00005FBC 43F9 00FF 0000             		lea	($FF0000).l,a1
00005FC2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005FC8 303C 4051                  		move.w	#$4051,d0
00005FCC 6100 B4A0                  		bsr.w	EniDec
00005FD0 263C 5000 0001             		move.l	#$50000001,d3
00005FD6 45F9 00FF 0080             		lea	($FF0080).l,a2
00005FDC 7E06                       		moveq	#6,d7
00005FDE                            
00005FDE                            loc_48BE:
00005FDE 2003                       		move.l	d3,d0
00005FE0 7C03                       		moveq	#3,d6
00005FE2 7800                       		moveq	#0,d4
00005FE4 0C47 0003                  		cmpi.w	#3,d7
00005FE8 6400                       		bcc.s	loc_48CC
00005FEA 7801                       		moveq	#1,d4
00005FEC                            
00005FEC                            loc_48CC:
00005FEC 7A07                       		moveq	#7,d5
00005FEE                            
00005FEE                            loc_48CE:
00005FEE 224A                       		movea.l	a2,a1
00005FF0 0A04 0001                  		eori.b	#1,d4
00005FF4 6600                       		bne.s	loc_48E2
00005FF6 0C47 0006                  		cmpi.w	#6,d7
00005FFA 6600                       		bne.s	loc_48F2
00005FFC 43F9 00FF 0000             		lea	($FF0000).l,a1
00006002                            
00006002                            loc_48E2:
00006002 48E7 F800                  		movem.l	d0-d4,-(sp)
00006006 7207                       		moveq	#7,d1
00006008 7407                       		moveq	#7,d2
0000600A 6100 B0A8                  		bsr.w	ShowVDPGraphics
0000600E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00006012                            
00006012                            loc_48F2:
00006012 0680 0010 0000             		addi.l	#$100000,d0
00006018 51CD FFD4                  		dbf	d5,loc_48CE
0000601C 0680 0380 0000             		addi.l	#$3800000,d0
00006022 0A04 0001                  		eori.b	#1,d4
00006026 51CE FFC4                  		dbf	d6,loc_48CC
0000602A 0683 1000 0000             		addi.l	#$10000000,d3
00006030 6A00                       		bpl.s	loc_491C
00006032 4843                       		swap	d3
00006034 0683 0000 C000             		addi.l	#$C000,d3
0000603A 4843                       		swap	d3
0000603C                            
0000603C                            loc_491C:
0000603C D4FC 0080                  		adda.w	#$80,a2
00006040 51CF FF9C                  		dbf	d7,loc_48BE
00006044 43F9 00FF 0000             		lea	($FF0000).l,a1
0000604A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00006050 303C 4000                  		move.w	#$4000,d0
00006054 6100 B418                  		bsr.w	EniDec
00006058 43F9 00FF 0000             		lea	($FF0000).l,a1
0000605E 203C 4000 0003             		move.l	#$40000003,d0
00006064 723F                       		moveq	#$3F,d1
00006066 741F                       		moveq	#$1F,d2
00006068 6100 B04A                  		bsr.w	ShowVDPGraphics
0000606C 43F9 00FF 0000             		lea	($FF0000).l,a1
00006072 203C 5000 0003             		move.l	#$50000003,d0
00006078 723F                       		moveq	#$3F,d1
0000607A 743F                       		moveq	#$3F,d2
0000607C 6100 B036                  		bsr.w	ShowVDPGraphics
00006080 4E75                       		rts	
00006082                            ; End of function SS_BGLoad
00006082                            
00006082                            ; ---------------------------------------------------------------------------
00006082                            ; Palette cycling routine - special stage
00006082                            ; ---------------------------------------------------------------------------
00006082                            
00006082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006082                            
00006082                            
00006082                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00006082 4A78 F63A                  		tst.w	($FFFFF63A).w
00006086 6600                       		bne.s	locret_49E6
00006088 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000608C 6A00                       		bpl.s	locret_49E6
0000608E 4DF9 00C0 0004             		lea	($C00004).l,a6
00006094 3038 F79A                  		move.w	($FFFFF79A).w,d0
00006098 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000609C 0240 001F                  		andi.w	#$1F,d0
000060A0 E548                       		lsl.w	#2,d0
000060A2 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000060A8 D0C0                       		adda.w	d0,a0
000060AA 1018                       		move.b	(a0)+,d0
000060AC 6A00                       		bpl.s	loc_4992
000060AE 303C 01FF                  		move.w	#$1FF,d0
000060B2                            
000060B2                            loc_4992:
000060B2 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000060B6 7000                       		moveq	#0,d0
000060B8 1018                       		move.b	(a0)+,d0
000060BA 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000060BE 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000060C4 43F1 0000                  		lea	(a1,d0.w),a1
000060C8 303C 8200                  		move.w	#-$7E00,d0
000060CC 1019                       		move.b	(a1)+,d0
000060CE 3C80                       		move.w	d0,(a6)
000060D0 11D1 F616                  		move.b	(a1),($FFFFF616).w
000060D4 303C 8400                  		move.w	#-$7C00,d0
000060D8 1018                       		move.b	(a0)+,d0
000060DA 3C80                       		move.w	d0,(a6)
000060DC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000060E6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000060EE 7000                       		moveq	#0,d0
000060F0 1018                       		move.b	(a0)+,d0
000060F2 6B00                       		bmi.s	loc_49E8
000060F4 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000060FA D2C0                       		adda.w	d0,a1
000060FC 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00006100 24D9                       		move.l	(a1)+,(a2)+
00006102 24D9                       		move.l	(a1)+,(a2)+
00006104 24D9                       		move.l	(a1)+,(a2)+
00006106                            
00006106                            locret_49E6:
00006106 4E75                       		rts	
00006108                            ; ===========================================================================
00006108                            
00006108                            loc_49E8:				; XREF: PalCycle_SS
00006108 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000610C 0C40 008A                  		cmpi.w	#$8A,d0
00006110 6500                       		bcs.s	loc_49F4
00006112 5241                       		addq.w	#1,d1
00006114                            
00006114                            loc_49F4:
00006114 C2FC 002A                  		mulu.w	#$2A,d1
00006118 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000611E D2C1                       		adda.w	d1,a1
00006120 0240 007F                  		andi.w	#$7F,d0
00006124 0880 0000                  		bclr	#0,d0
00006128 6700                       		beq.s	loc_4A18
0000612A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000612E 24D1                       		move.l	(a1),(a2)+
00006130 24E9 0004                  		move.l	4(a1),(a2)+
00006134 24E9 0008                  		move.l	8(a1),(a2)+
00006138                            
00006138                            loc_4A18:
00006138 D2FC 000C                  		adda.w	#$C,a1
0000613C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00006140 0C40 000A                  		cmpi.w	#$A,d0
00006144 6500                       		bcs.s	loc_4A2E
00006146 0440 000A                  		subi.w	#$A,d0
0000614A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000614E                            
0000614E                            loc_4A2E:
0000614E 3200                       		move.w	d0,d1
00006150 D040                       		add.w	d0,d0
00006152 D041                       		add.w	d1,d0
00006154 D2C0                       		adda.w	d0,a1
00006156 24D9                       		move.l	(a1)+,(a2)+
00006158 34D9                       		move.w	(a1)+,(a2)+
0000615A 4E75                       		rts	
0000615C                            ; End of function PalCycle_SS
0000615C                            
0000615C                            ; ===========================================================================
0000615C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000616C                            					; XREF: PalCycle_SS
0000616C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000617C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000618C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000619C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000061AC 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000061BC 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000061CC FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000061DC                            		even
000061DC 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000061EA                            					; XREF: PalCycle_SS
000061EA                            		even
000061EA                            
000061EA                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
00006232                            		even
00006232                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
00006304                            		even
00006304                            
00006304                            ; ---------------------------------------------------------------------------
00006304                            ; Subroutine to	make the special stage background animated
00006304                            ; ---------------------------------------------------------------------------
00006304                            
00006304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006304                            
00006304                            
00006304                            SS_BGAnimate:				; XREF: SpecialStage
00006304 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00006308 6600                       		bne.s	loc_4BF6
0000630A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00006310 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006316                            
00006316                            loc_4BF6:
00006316 0C40 0008                  		cmpi.w	#8,d0
0000631A 6400                       		bcc.s	loc_4C4E
0000631C 0C40 0006                  		cmpi.w	#6,d0
00006320 6600                       		bne.s	loc_4C10
00006322 5278 F718                  		addq.w	#1,($FFFFF718).w
00006326 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000632A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006330                            
00006330                            loc_4C10:
00006330 7000                       		moveq	#0,d0
00006332 3038 F708                  		move.w	($FFFFF708).w,d0
00006336 4440                       		neg.w	d0
00006338 4840                       		swap	d0
0000633A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00006340 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006344 7609                       		moveq	#9,d3
00006346                            
00006346                            loc_4C26:
00006346 302B 0002                  		move.w	2(a3),d0
0000634A 6100 C52E                  		bsr.w	CalcSine
0000634E 7400                       		moveq	#0,d2
00006350 1419                       		move.b	(a1)+,d2
00006352 C1C2                       		muls.w	d2,d0
00006354 E080                       		asr.l	#8,d0
00006356 36C0                       		move.w	d0,(a3)+
00006358 1419                       		move.b	(a1)+,d2
0000635A 4882                       		ext.w	d2
0000635C D55B                       		add.w	d2,(a3)+
0000635E 51CB FFE6                  		dbf	d3,loc_4C26
00006362 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006366 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000636C 6000                       		bra.s	loc_4C7E
0000636E                            ; ===========================================================================
0000636E                            
0000636E                            loc_4C4E:				; XREF: SS_BGAnimate
0000636E 0C40 000C                  		cmpi.w	#$C,d0
00006372 6600                       		bne.s	loc_4C74
00006374 5378 F718                  		subq.w	#1,($FFFFF718).w
00006378 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000637C 243C 0001 8000             		move.l	#$18000,d2
00006382 7206                       		moveq	#6,d1
00006384                            
00006384                            loc_4C64:
00006384 2013                       		move.l	(a3),d0
00006386 9082                       		sub.l	d2,d0
00006388 26C0                       		move.l	d0,(a3)+
0000638A 0482 0000 2000             		subi.l	#$2000,d2
00006390 51C9 FFF2                  		dbf	d1,loc_4C64
00006394                            
00006394                            loc_4C74:
00006394 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006398 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000639E                            
0000639E                            loc_4C7E:
0000639E 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063A2 3038 F718                  		move.w	($FFFFF718).w,d0
000063A6 4440                       		neg.w	d0
000063A8 4840                       		swap	d0
000063AA 7600                       		moveq	#0,d3
000063AC 161A                       		move.b	(a2)+,d3
000063AE 3438 F70C                  		move.w	($FFFFF70C).w,d2
000063B2 4442                       		neg.w	d2
000063B4 0242 00FF                  		andi.w	#$FF,d2
000063B8 E54A                       		lsl.w	#2,d2
000063BA                            
000063BA                            loc_4C9A:
000063BA 301B                       		move.w	(a3)+,d0
000063BC 544B                       		addq.w	#2,a3
000063BE 7200                       		moveq	#0,d1
000063C0 121A                       		move.b	(a2)+,d1
000063C2 5341                       		subq.w	#1,d1
000063C4                            
000063C4                            loc_4CA4:
000063C4 2380 2000                  		move.l	d0,(a1,d2.w)
000063C8 5842                       		addq.w	#4,d2
000063CA 0242 03FC                  		andi.w	#$3FC,d2
000063CE 51C9 FFF4                  		dbf	d1,loc_4CA4
000063D2 51CB FFE6                  		dbf	d3,loc_4C9A
000063D6 4E75                       		rts	
000063D8                            ; End of function SS_BGAnimate
000063D8                            
000063D8                            ; ===========================================================================
000063D8 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000063E4                            		even
000063E4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000063EC                            		even
000063EC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00006400                            		even
00006400                            					; XREF: SS_BGAnimate
00006400                            ; ===========================================================================
00006400                            
00006400                            ; ---------------------------------------------------------------------------
00006400                            ; Continue screen
00006400                            ; ---------------------------------------------------------------------------
00006400                            
00006400                            ContinueScreen:				; XREF: GameModeArray
00006400 6100 B8E4                  		bsr.w	Pal_FadeFrom
00006404 46FC 2700                  		move	#$2700,sr
00006408 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000640C 0200 00BF                  		andi.b	#$BF,d0
00006410 33C0 00C0 0004             		move.w	d0,($C00004).l
00006416 4DF9 00C0 0004             		lea	($C00004).l,a6
0000641C 3CBC 8004                  		move.w	#$8004,(a6)
00006420 3CBC 8700                  		move.w	#$8700,(a6)
00006424 6100 AAE4                  		bsr.w	ClearScreen
00006428 43F8 D000                  		lea	($FFFFD000).w,a1
0000642C 7000                       		moveq	#0,d0
0000642E 323C 07FF                  		move.w	#$7FF,d1
00006432                            
00006432                            Cont_ClrObjRam:
00006432 22C0                       		move.l	d0,(a1)+
00006434 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00006438                            
00006438 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00006442 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00006448 6100 AD5E                  		bsr.w	NemDec
0000644C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00006456 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000645C 6100 AD4A                  		bsr.w	NemDec
00006460 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000646A 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00006470 6100 AD36                  		bsr.w	NemDec
00006474 720A                       		moveq	#10,d1
00006476 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000647C 7012                       		moveq	#$12,d0
0000647E 6100 BB14                  		bsr.w	PalLoad1	; load continue	screen Palette
00006482 103C 0090                  		move.b	#$90,d0
00006486 6100 AB88                  		bsr.w	PlaySound	; play continue	music
0000648A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00006490 42B8 F700                  		clr.l	($FFFFF700).w
00006494 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000649C 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000064A2 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000064A8 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000064AE 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000064B4 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000064BA 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000064C0 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000064C6 4EB9 0000 0000             		jsr	ObjectsLoad
000064CC 4EB9 0000 0000             		jsr	BuildSprites
000064D2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000064D6 0000 0040                  		ori.b	#$40,d0
000064DA 33C0 00C0 0004             		move.w	d0,($C00004).l
000064E0 6100 B74E                  		bsr.w	Pal_FadeTo
000064E4                            
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            ; Continue screen main loop
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            
000064E4                            Cont_MainLoop:
000064E4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000064EA 6100 C35C                  		bsr.w	DelayProgram
000064EE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000064F4 6400                       		bcc.s	loc_4DF2
000064F6 46FC 2700                  		move	#$2700,sr
000064FA 3238 F614                  		move.w	($FFFFF614).w,d1
000064FE 82FC 003C                  		divu.w	#$3C,d1
00006502 0281 0000 000F             		andi.l	#$F,d1
00006508 4EB9 0000 0000             		jsr	ContScrCounter
0000650E 46FC 2300                  		move	#$2300,sr
00006512                            
00006512                            loc_4DF2:
00006512 4EB9 0000 0000             		jsr	ObjectsLoad
00006518 4EB9 0000 0000             		jsr	BuildSprites
0000651E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00006524 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00006526 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000652C 64B6                       		bcc.s	Cont_MainLoop
0000652E 4A78 F614                  		tst.w	($FFFFF614).w
00006532 6600 FFB0                  		bne.w	Cont_MainLoop
00006536 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
0000653C 4E75                       		rts	
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000653E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006544 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
0000654A 7000                       		moveq	#0,d0
0000654C 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00006550 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006554 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006558 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000655C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00006560 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00006564 4E75                       		rts	
00006566                            ; ===========================================================================
00006566                            
00006566                            ; ---------------------------------------------------------------------------
00006566                            ; Object 80 - Continue screen elements
00006566                            ; ---------------------------------------------------------------------------
00006566                            
00006566                            Obj80:					; XREF: Obj_Index
00006566 7000                       		moveq	#0,d0
00006568 1028 0024                  		move.b	$24(a0),d0
0000656C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00006570 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00006574                            ; ===========================================================================
00006574 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00006576 0000                       		dc.w Obj80_Display-Obj80_Index
00006578 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000657A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000657C                            ; ===========================================================================
0000657C                            
0000657C                            Obj80_Main:				; XREF: Obj80_Index
0000657C 5428 0024                  		addq.b	#2,$24(a0)
00006580 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006588 317C 8500 0002             		move.w	#$8500,2(a0)
0000658E 117C 0000 0001             		move.b	#0,1(a0)
00006594 117C 003C 0019             		move.b	#$3C,$19(a0)
0000659A 317C 0120 0008             		move.w	#$120,8(a0)
000065A0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000065A6 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
000065AA 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000065B0                            
000065B0                            Obj80_Display:				; XREF: Obj80_Index
000065B0 4EF9 0000 0000             		jmp	DisplaySprite
000065B6                            ; ===========================================================================
000065B6                            Obj80_MiniSonicPos:
000065B6 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000065C8 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000065D4 2248                       		movea.l	a0,a1
000065D6 45F9 0000 65B6             		lea	(Obj80_MiniSonicPos).l,a2
000065DC 7200                       		moveq	#0,d1
000065DE 1238 FE18                  		move.b	($FFFFFE18).w,d1
000065E2 5501                       		subq.b	#2,d1
000065E4 6400                       		bcc.s	loc_4EC4
000065E6 4EF9 0000 0000             		jmp	DeleteObject
000065EC                            ; ===========================================================================
000065EC                            
000065EC                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000065EC 7601                       		moveq	#1,d3
000065EE 0C01 000E                  		cmpi.b	#$E,d1
000065F2 6500                       		bcs.s	loc_4ED0
000065F4 7600                       		moveq	#0,d3
000065F6 720E                       		moveq	#$E,d1
000065F8                            
000065F8                            loc_4ED0:
000065F8 1401                       		move.b	d1,d2
000065FA 0202 0001                  		andi.b	#1,d2
000065FE                            
000065FE                            Obj80_MiniSonLoop:
000065FE 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00006602 335A 0008                  		move.w	(a2)+,8(a1)
00006606 4A02                       		tst.b	d2
00006608 6700                       		beq.s	loc_4EEA
0000660A 0469 000A 0008             		subi.w	#$A,8(a1)
00006610                            
00006610                            loc_4EEA:
00006610 337C 00D0 000A             		move.w	#$D0,$A(a1)
00006616 137C 0006 001A             		move.b	#6,$1A(a1)
0000661C 137C 0006 0024             		move.b	#6,$24(a1)
00006622 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000662A 337C 8551 0002             		move.w	#$8551,2(a1)
00006630 137C 0000 0001             		move.b	#0,1(a1)
00006636 43E9 0040                  		lea	$40(a1),a1
0000663A 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000663E 43E9 FFC0                  		lea	-$40(a1),a1
00006642 1343 0028                  		move.b	d3,$28(a1)
00006646                            
00006646                            Obj80_ChkType:				; XREF: Obj80_Index
00006646 4A28 0028                  		tst.b	$28(a0)
0000664A 6700                       		beq.s	loc_4F40
0000664C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006652 6500                       		bcs.s	loc_4F40
00006654 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006658 0200 0001                  		andi.b	#1,d0
0000665C 6600                       		bne.s	loc_4F40
0000665E 4A78 D010                  		tst.w	($FFFFD010).w
00006662 6600                       		bne.s	Obj80_Delete
00006664 4E75                       		rts	
00006666                            ; ===========================================================================
00006666                            
00006666                            loc_4F40:				; XREF: Obj80_ChkType
00006666 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000666A 0200 000F                  		andi.b	#$F,d0
0000666E 6600                       		bne.s	Obj80_Display2
00006670 0868 0000 001A             		bchg	#0,$1A(a0)
00006676                            
00006676                            Obj80_Display2:
00006676 4EF9 0000 0000             		jmp	DisplaySprite
0000667C                            ; ===========================================================================
0000667C                            
0000667C                            Obj80_Delete:				; XREF: Obj80_ChkType
0000667C 4EF9 0000 0000             		jmp	DeleteObject
00006682                            ; ===========================================================================
00006682                            
00006682                            ; ---------------------------------------------------------------------------
00006682                            ; Object 81 - Sonic on the continue screen
00006682                            ; ---------------------------------------------------------------------------
00006682                            
00006682                            Obj81:					; XREF: Obj_Index
00006682 7000                       		moveq	#0,d0
00006684 1028 0024                  		move.b	$24(a0),d0
00006688 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000668C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00006690 4EF9 0000 0000             		jmp	DisplaySprite
00006696                            ; ===========================================================================
00006696 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00006698 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000669A 0000                       		dc.w Obj81_Animate-Obj81_Index
0000669C 0000                       		dc.w Obj81_Run-Obj81_Index
0000669E                            ; ===========================================================================
0000669E                            
0000669E                            Obj81_Main:				; XREF: Obj81_Index
0000669E 5428 0024                  		addq.b	#2,$24(a0)
000066A2 317C 00A0 0008             		move.w	#$A0,8(a0)
000066A8 317C 00C0 000C             		move.w	#$C0,$C(a0)
000066AE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000066B6 317C 0780 0002             		move.w	#$780,2(a0)
000066BC 117C 0004 0001             		move.b	#4,1(a0)
000066C2 117C 0002 0018             		move.b	#2,$18(a0)
000066C8 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000066CE 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000066D4                            
000066D4                            Obj81_ChkLand:				; XREF: Obj81_Index
000066D4 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000066DA 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000066DC 5428 0024                  		addq.b	#2,$24(a0)
000066E0 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000066E4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000066EC 317C 8500 0002             		move.w	#$8500,2(a0)
000066F2 117C 0000 001C             		move.b	#0,$1C(a0)
000066F8 6000                       		bra.s	Obj81_Animate
000066FA                            ; ===========================================================================
000066FA                            
000066FA                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000066FA 4EB9 0000 0000             		jsr	SpeedToPos
00006700 4EB9 0000 0000             		jsr	Sonic_Animate
00006706 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000670C                            ; ===========================================================================
0000670C                            
0000670C                            Obj81_Animate:				; XREF: Obj81_Index
0000670C 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00006710 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00006712 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00006718 4EF9 0000 0000             		jmp	AnimateSprite
0000671E                            ; ===========================================================================
0000671E                            
0000671E                            Obj81_GetUp:				; XREF: Obj81_Animate
0000671E 5428 0024                  		addq.b	#2,$24(a0)
00006722 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000672A 317C 0780 0002             		move.w	#$780,2(a0)
00006730 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00006736 4268 0014                  		clr.w	$14(a0)
0000673A 5168 000C                  		subq.w	#8,$C(a0)
0000673E 103C 00E0                  		move.b	#$E0,d0
00006742 6100 A8D4                  		bsr.w	PlaySound_Special ; fade out music
00006746                            
00006746                            Obj81_Run:				; XREF: Obj81_Index
00006746 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000674C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000674E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00006754 6000                       		bra.s	Obj81_ShowRun
00006756                            ; ===========================================================================
00006756                            
00006756                            Obj81_AddSpeed:				; XREF: Obj81_Run
00006756 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000675C                            
0000675C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000675C 4EB9 0000 0000             		jsr	SpeedToPos
00006762 4EB9 0000 0000             		jsr	Sonic_Animate
00006768 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000676E                            ; ===========================================================================
0000676E                            Ani_obj81:
0000676E                            	include "_anim\obj81.asm"
0000676E                            ; ---------------------------------------------------------------------------
0000676E                            ; Animation script - Sonic on the continue screen
0000676E                            ; ---------------------------------------------------------------------------
0000676E 0000                       		dc.w byte_504A-Ani_obj81
00006770 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000677C 00                         		even
0000677C 00                         		even
0000677C                            
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            ; Sprite mappings - Continue screen
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            Map_obj80:
0000677C                            	include "_maps\obj80.asm"
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            ; Sprite mappings - Continue screen
0000677C                            ; ---------------------------------------------------------------------------
0000677C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006780 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006784 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006788 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000678C 0B                         byte_5066:	dc.b $B
0000678D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006792 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006797 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000679C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000067A1 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000067A6 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000067AB F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000067B0 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000067B5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000067BA 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000067BF 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000067C4 03                         byte_509E:	dc.b 3
000067C5 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000067CA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000067CF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000067D4 03                         byte_50AE:	dc.b 3
000067D5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000067DA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000067DF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000067E4 03                         byte_50BE:	dc.b 3
000067E5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000067EA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000067EF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000067F4 02                         byte_50CE:	dc.b 2
000067F5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000067FA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000067FF 01                         byte_50D9:	dc.b 1
00006800 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006805 01                         byte_50DF:	dc.b 1
00006806 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000680C 00                         		even
0000680C 00                         		even
0000680C                            
0000680C                            ; ===========================================================================
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            ; Ending sequence in Green Hill	Zone
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            
0000680C                            EndingSequence:				; XREF: GameModeArray
0000680C 103C 00E4                  		move.b	#$E4,d0
00006810 6100 A806                  		bsr.w	PlaySound_Special ; stop music
00006814 6100 B4D0                  		bsr.w	Pal_FadeFrom
00006818 43F8 D000                  		lea	($FFFFD000).w,a1
0000681C 7000                       		moveq	#0,d0
0000681E 323C 07FF                  		move.w	#$7FF,d1
00006822                            
00006822                            End_ClrObjRam:
00006822 22C0                       		move.l	d0,(a1)+
00006824 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006828                            
00006828 43F8 F628                  		lea	($FFFFF628).w,a1
0000682C 7000                       		moveq	#0,d0
0000682E 323C 0015                  		move.w	#$15,d1
00006832                            
00006832                            End_ClrRam:
00006832 22C0                       		move.l	d0,(a1)+
00006834 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006838                            
00006838 43F8 F700                  		lea	($FFFFF700).w,a1
0000683C 7000                       		moveq	#0,d0
0000683E 323C 003F                  		move.w	#$3F,d1
00006842                            
00006842                            End_ClrRam2:
00006842 22C0                       		move.l	d0,(a1)+
00006844 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006848                            
00006848 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000684C 7000                       		moveq	#0,d0
0000684E 323C 0047                  		move.w	#$47,d1
00006852                            
00006852                            End_ClrRam3:
00006852 22C0                       		move.l	d0,(a1)+
00006854 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006858                            
00006858 46FC 2700                  		move	#$2700,sr
0000685C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006860 0200 00BF                  		andi.b	#$BF,d0
00006864 33C0 00C0 0004             		move.w	d0,($C00004).l
0000686A 6100 A69E                  		bsr.w	ClearScreen
0000686E 4DF9 00C0 0004             		lea	($C00004).l,a6
00006874 3CBC 8B03                  		move.w	#$8B03,(a6)
00006878 3CBC 8230                  		move.w	#$8230,(a6)
0000687C 3CBC 8407                  		move.w	#$8407,(a6)
00006880 3CBC 857C                  		move.w	#$857C,(a6)
00006884 3CBC 9001                  		move.w	#$9001,(a6)
00006888 3CBC 8004                  		move.w	#$8004,(a6)
0000688C 3CBC 8720                  		move.w	#$8720,(a6)
00006890 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006896 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000689A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000068A0 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000068A6 11FC 0000 FFFD             		move.b	#0,($FFFFFFFD).w	; puts a 0 in this flag
000068AC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000068B2 6700                       		beq.s	End_LoadData	; if yes, branch
000068B4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000068BA 11FC 0001 FFFD             		move.b	#1,($FFFFFFFD).w	; puts a 1 in this flag
000068C0                            
000068C0                            End_LoadData:
000068C0 701C                       		moveq	#$1C,d0
000068C2 6100 AB78                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000068C6 4EB9 0000 0000             		jsr	Hud_Base
000068CC 6100 0000                  		bsr.w	LevelSizeLoad
000068D0 6100 0000                  		bsr.w	DeformBgLayer
000068D4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000068DA 6100 0000                  		bsr.w	MainLoadBlockLoad
000068DE 6100 0000                  		bsr.w	LoadTilesFromStart
000068E2                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000068E2 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
000068EA 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
000068F2 46FC 2300                  		move	#$2300,sr
000068F6 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000068FC 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006900 6100 ACEA                  		bsr.w	KosDec
00006904 7003                       		moveq	#3,d0
00006906 6100 B68C                  		bsr.w	PalLoad1	; load Sonic's Palette
0000690A 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
0000690E 43F9 0000 4DF4             		lea	(MusicList_Endings).l,a1 ; load Music Playlist for Endings
00006914 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006918 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000691E 6700                       		beq.s	End_LoadSonic	; if not, branch
00006920 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006926                            
00006926                            End_LoadSonic:
00006926 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000692C 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00006932                            	;	move.b	#1,($FFFFF7CC).w ; lock	controls
00006932                            	;	move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00006932                            	;	move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006932                            	;	move.b	#$21,($FFFFD040).w ; load HUD object
00006932 4EB9 0000 0000             		jsr	ObjPosLoad
00006938 4EB9 0000 0000             		jsr	ObjectsLoad
0000693E 4EB9 0000 0000             		jsr	BuildSprites
00006944 7000                       		moveq	#0,d0
00006946 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000694A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000694E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006952 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006956 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000695A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000695E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006962 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006966 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000696A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000696E 6100 EEAE                  		bsr.w	OscillateNumInit
00006972 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006978 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000697E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006984 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000698A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006990 6100 BEB6                  		bsr.w	DelayProgram
00006994 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006998 0000 0040                  		ori.b	#$40,d0
0000699C 33C0 00C0 0004             		move.w	d0,($C00004).l
000069A2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000069A8 6100 B286                  		bsr.w	Pal_FadeTo
000069AC                            
000069AC                            ; ---------------------------------------------------------------------------
000069AC                            ; Main ending sequence loop
000069AC                            ; ---------------------------------------------------------------------------
000069AC                            
000069AC                            End_MainLoop:
000069AC 6100 A68E                  		bsr.w	PauseGame
000069B0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000069B6 6100 BE90                  		bsr.w	DelayProgram
000069BA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000069BE                            	;	bsr.w	End_MoveSonic
000069BE 4EB9 0000 0000             		jsr	ObjectsLoad
000069C4 6100 0000                  		bsr.w	DeformBgLayer
000069C8 4EB9 0000 0000             		jsr	BuildSprites
000069CE 4EB9 0000 0000             		jsr	ObjPosLoad
000069D4 6100 AE34                  		bsr.w	PalCycle_Load
000069D8 6100 EE9A                  		bsr.w	OscillateNumDo
000069DC 6100 EF26                  		bsr.w	ChangeRingFrame
000069E0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000069E6 6700                       		beq.s	loc_52DA	; if yes, branch
000069E8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000069EE 4240                       		clr.w	d0
000069F0 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
000069F4 43F9 0000 4DF2             		lea	(MusicList_Credits).l,a1	; load Music Playlist for credits
000069FA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000069FE                            
000069FE 6100 A618                  		bsr.w	PlaySound_Special ; play credits music
00006A02 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006A08 4E75                       		rts
00006A0A                            ; ===========================================================================
00006A0A                            
00006A0A                            loc_52DA:
00006A0A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006A0E 6700 FF9C                  		beq.w	End_MainLoop	; if not, branch
00006A12                            
00006A12 4278 FE02                  		clr.w	($FFFFFE02).w
00006A16 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006A1C 4278 F794                  		clr.w	($FFFFF794).w
00006A20                            
00006A20                            End_AllEmlds:				; XREF: loc_5334
00006A20 6100 A61A                  		bsr.w	PauseGame
00006A24 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006A2A 6100 BE1C                  		bsr.w	DelayProgram
00006A2E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006A32                            	;	bsr.w	End_MoveSonic
00006A32 4EB9 0000 0000             		jsr	ObjectsLoad
00006A38 6100 0000                  		bsr.w	DeformBgLayer
00006A3C 4EB9 0000 0000             		jsr	BuildSprites
00006A42 4EB9 0000 0000             		jsr	ObjPosLoad
00006A48 6100 EE2A                  		bsr.w	OscillateNumDo
00006A4C 6100 EEB6                  		bsr.w	ChangeRingFrame
00006A50 5378 F794                  		subq.w	#1,($FFFFF794).w
00006A54 6A00                       		bpl.s	loc_5334
00006A56 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006A5C 6100 B3D6                  		bsr.w	Pal_ToWhite
00006A60                            
00006A60                            loc_5334:
00006A60 4A78 FE02                  		tst.w	($FFFFFE02).w
00006A64 6700 FFBA                  		beq.w	End_AllEmlds
00006A68 4278 FE02                  		clr.w	($FFFFFE02).w
00006A6C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006A72 4BF9 00C0 0004             		lea	($C00004).l,a5
00006A78 4DF9 00C0 0000             		lea	($C00000).l,a6
00006A7E 47F8 F700                  		lea	($FFFFF700).w,a3
00006A82 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006A86 343C 4000                  		move.w	#$4000,d2
00006A8A 6100 0000                  		bsr.w	LoadTilesFromStart2
00006A8E 7013                       		moveq	#$13,d0
00006A90 6100 B502                  		bsr.w	PalLoad1	; load ending Palette
00006A94 6100 B2D2                  		bsr.w	Pal_MakeWhite
00006A98 6000 FF12                  		bra.w	End_MainLoop
00006A9C                            
00006A9C                            ; ---------------------------------------------------------------------------
00006A9C                            ; Subroutine controlling Sonic on the ending sequence
00006A9C                            ; ---------------------------------------------------------------------------
00006A9C                            
00006A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9C                            
00006A9C                            
00006A9C                            End_MoveSonic:				; XREF: End_MainLoop
00006A9C 4E75                       		rts
00006A9E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006AA2 6600                       		bne.s	End_MoveSonic2
00006AA4 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00006AAA 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00006AAC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006AB0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006AB6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00006ABC 4E75                       		rts	
00006ABE                            ; ===========================================================================
00006ABE                            
00006ABE                            End_MoveSonic2:				; XREF: End_MoveSonic
00006ABE 5500                       		subq.b	#2,d0
00006AC0 6600                       		bne.s	End_MoveSonic3
00006AC2 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00006AC8 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00006ACA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006ACE 7000                       		moveq	#0,d0
00006AD0 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006AD4 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006AD8 31C0 D014                  		move.w	d0,($FFFFD014).w
00006ADC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006AE2 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006AE8                            	;	move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006AE8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006AEE 4E75                       		rts	
00006AF0                            ; ===========================================================================
00006AF0                            
00006AF0                            End_MoveSonic3:				; XREF: End_MoveSonic
00006AF0 5500                       		subq.b	#2,d0
00006AF2 6600                       		bne.s	End_MoveSonExit
00006AF4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006AF8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006AFE                            	;	move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006AFE 4278 D024                  		clr.w	($FFFFD024).w
00006B02                            
00006B02                            End_MoveSonExit:
00006B02 4E75                       		rts	
00006B04                            ; End of function End_MoveSonic
00006B04                            
00006B04                            ; ===========================================================================
00006B04                            ; ---------------------------------------------------------------------------
00006B04                            ; Object 87 - Sonic on ending sequence
00006B04                            ; ---------------------------------------------------------------------------
00006B04                            
00006B04                            Obj87:					; XREF: Obj_Index
00006B04 7000                       		moveq	#0,d0
00006B06 1028 0025                  		move.b	$25(a0),d0
00006B0A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006B0E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006B12 4EF9 0000 0000             		jmp	DisplaySprite
00006B18                            ; ===========================================================================
00006B18 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006B1C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006B20 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006B24 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006B28 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006B2C                            ; ===========================================================================
00006B2C                            
00006B2C                            Obj87_Main:				; XREF: Obj87_Index
00006B2C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B32 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006B34 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006B3A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006B40 4E75                       		rts	
00006B42                            ; ===========================================================================
00006B42                            
00006B42                            Obj87_Main2:				; XREF: Obj87_Main
00006B42 5428 0025                  		addq.b	#2,$25(a0)
00006B46 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006B4E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006B54 117C 0004 0001             		move.b	#4,1(a0)
00006B5A 4228 0022                  		clr.b	$22(a0)
00006B5E 117C 0002 0018             		move.b	#2,$18(a0)
00006B64 117C 0000 001A             		move.b	#0,$1A(a0)
00006B6A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006B70                            
00006B70                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006B70 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006B74 6600                       		bne.s	Obj87_Wait
00006B76 5428 0025                  		addq.b	#2,$25(a0)
00006B7A 317C 0001 001C             		move.w	#1,$1C(a0)
00006B80 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006B86                            
00006B86                            Obj87_Wait:
00006B86 4E75                       		rts	
00006B88                            ; ===========================================================================
00006B88                            
00006B88                            Obj87_LookUp:				; XREF: Obj87_Index
00006B88 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006B90 6600                       		bne.s	locret_5480
00006B92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006B98 317C 005A 0030             		move.w	#$5A,$30(a0)
00006B9E 5428 0025                  		addq.b	#2,$25(a0)
00006BA2                            
00006BA2                            locret_5480:
00006BA2 4E75                       		rts	
00006BA4                            ; ===========================================================================
00006BA4                            
00006BA4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006BA4 5368 0030                  		subq.w	#1,$30(a0)
00006BA8 6600                       		bne.s	Obj87_Wait2
00006BAA 43F8 D400                  		lea	($FFFFD400).w,a1
00006BAE 323C 00FF                  		move.w	#$FF,d1
00006BB2                            
00006BB2                            Obj87_ClrLoop:
00006BB2 4299                       		clr.l	(a1)+
00006BB4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006BB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006BBE 5428 0025                  		addq.b	#2,$25(a0)
00006BC2 117C 0001 001C             		move.b	#1,$1C(a0)
00006BC8 317C 003C 0030             		move.w	#$3C,$30(a0)
00006BCE                            
00006BCE                            Obj87_Wait2:
00006BCE 4E75                       		rts	
00006BD0                            ; ===========================================================================
00006BD0                            
00006BD0                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006BD0 5368 0030                  		subq.w	#1,$30(a0)
00006BD4 6600                       		bne.s	Obj87_Wait3
00006BD6 5428 0025                  		addq.b	#2,$25(a0)
00006BDA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006BE0 117C 0002 001C             		move.b	#2,$1C(a0)
00006BE6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006BEC                            
00006BEC                            Obj87_Wait3:
00006BEC 4E75                       		rts	
00006BEE                            ; ===========================================================================
00006BEE                            
00006BEE                            Obj87_Animate:				; XREF: Obj87_Index
00006BEE 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006BF4 4EF9 0000 0000             		jmp	AnimateSprite
00006BFA                            ; ===========================================================================
00006BFA                            
00006BFA                            Obj87_Leap:				; XREF: Obj87_Index
00006BFA 5368 0030                  		subq.w	#1,$30(a0)
00006BFE 6600                       		bne.s	Obj87_Wait4
00006C00 5428 0025                  		addq.b	#2,$25(a0)
00006C04 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006C0C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006C12 117C 0004 0001             		move.b	#4,1(a0)
00006C18 4228 0022                  		clr.b	$22(a0)
00006C1C 117C 0002 0018             		move.b	#2,$18(a0)
00006C22 117C 0005 001A             		move.b	#5,$1A(a0)
00006C28 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "leaping"	animation
00006C2E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006C34 60B8                       		bra.s	Obj87_Animate
00006C36                            ; ===========================================================================
00006C36                            
00006C36                            Obj87_Wait4:				; XREF: Obj87_Leap
00006C36 4E75                       		rts	
00006C38                            ; ===========================================================================
00006C38                            Ani_obj87:
00006C38                            	include "_anim\obj87.asm"
00006C38                            ; ---------------------------------------------------------------------------
00006C38                            ; Animation script - Sonic on the ending sequence
00006C38                            ; ---------------------------------------------------------------------------
00006C38 0000                       		dc.w byte_551C-Ani_obj87
00006C3A 0000                       		dc.w byte_552A-Ani_obj87
00006C3C 0000                       		dc.w byte_5534-Ani_obj87
00006C3E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006C4C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006C56 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006C5E                            		even
00006C5E                            		even
00006C5E                            
00006C5E                            ; ===========================================================================
00006C5E                            ; ---------------------------------------------------------------------------
00006C5E                            ; Object 88 - chaos emeralds on	the ending sequence
00006C5E                            ; ---------------------------------------------------------------------------
00006C5E                            
00006C5E                            Obj88:					; XREF: Obj_Index
00006C5E 7000                       		moveq	#0,d0
00006C60 1028 0024                  		move.b	$24(a0),d0
00006C64 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006C68 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006C6C 4EF9 0000 0000             		jmp	DisplaySprite
00006C72                            ; ===========================================================================
00006C72 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006C74 0000                       		dc.w Obj88_Move-Obj88_Index
00006C76                            ; ===========================================================================
00006C76                            
00006C76                            Obj88_Main:				; XREF: Obj88_Index
00006C76 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006C7C 6700                       		beq.s	Obj88_Main2
00006C7E 588F                       		addq.l	#4,sp
00006C80 4E75                       		rts	
00006C82                            ; ===========================================================================
00006C82                            
00006C82                            Obj88_Main2:				; XREF: Obj88_Main
00006C82 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006C88 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006C8E 2248                       		movea.l	a0,a1
00006C90 7600                       		moveq	#0,d3
00006C92 7401                       		moveq	#1,d2
00006C94 7205                       		moveq	#5,d1
00006C96                            
00006C96                            Obj88_MainLoop:
00006C96 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006C9A 5429 0024                  		addq.b	#2,$24(a1)
00006C9E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006CA6 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006CAC 137C 0004 0001             		move.b	#4,1(a1)
00006CB2 137C 0001 0018             		move.b	#1,$18(a1)
00006CB8 3368 0008 0038             		move.w	8(a0),$38(a1)
00006CBE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006CC4 1342 001C                  		move.b	d2,$1C(a1)
00006CC8 1342 001A                  		move.b	d2,$1A(a1)
00006CCC 5202                       		addq.b	#1,d2
00006CCE 1343 0026                  		move.b	d3,$26(a1)
00006CD2 0603 002A                  		addi.b	#$2A,d3
00006CD6 43E9 0040                  		lea	$40(a1),a1
00006CDA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006CDE                            
00006CDE                            Obj88_Move:				; XREF: Obj88_Index
00006CDE 3028 003E                  		move.w	$3E(a0),d0
00006CE2 D168 0026                  		add.w	d0,$26(a0)
00006CE6 1028 0026                  		move.b	$26(a0),d0
00006CEA 4EB9 0000 287A             		jsr	(CalcSine).l
00006CF0 7800                       		moveq	#0,d4
00006CF2 1828 003C                  		move.b	$3C(a0),d4
00006CF6 C3C4                       		muls.w	d4,d1
00006CF8 E081                       		asr.l	#8,d1
00006CFA C1C4                       		muls.w	d4,d0
00006CFC E080                       		asr.l	#8,d0
00006CFE D268 0038                  		add.w	$38(a0),d1
00006D02 D068 003A                  		add.w	$3A(a0),d0
00006D06 3141 0008                  		move.w	d1,8(a0)
00006D0A 3140 000C                  		move.w	d0,$C(a0)
00006D0E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006D14 6700                       		beq.s	loc_55FA
00006D16 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006D1C                            
00006D1C                            loc_55FA:
00006D1C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006D22 6700                       		beq.s	loc_5608
00006D24 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006D2A                            
00006D2A                            loc_5608:
00006D2A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00006D30 6700                       		beq.s	locret_5614
00006D32 5368 003A                  		subq.w	#1,$3A(a0)
00006D36                            
00006D36                            locret_5614:
00006D36 4E75                       		rts	
00006D38                            ; ===========================================================================
00006D38                            ; ---------------------------------------------------------------------------
00006D38                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006D38                            ; ---------------------------------------------------------------------------
00006D38                            
00006D38                            Obj89:					; XREF: Obj_Index
00006D38 7000                       		moveq	#0,d0
00006D3A 1028 0024                  		move.b	$24(a0),d0
00006D3E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00006D42 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006D46                            ; ===========================================================================
00006D46 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006D48 0000                       		dc.w Obj89_Move-Obj89_Index
00006D4A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006D4C                            ; ===========================================================================
00006D4C                            
00006D4C                            Obj89_Main:				; XREF: Obj89_Index
00006D4C 5428 0024                  		addq.b	#2,$24(a0)
00006D50 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006D56 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006D5C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00006D64 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006D6A 117C 0000 0001             		move.b	#0,1(a0)
00006D70 117C 0000 0018             		move.b	#0,$18(a0)
00006D76                            
00006D76                            Obj89_Move:				; XREF: Obj89_Index
00006D76 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00006D7C 6700                       		beq.s	Obj89_Delay	; if yes, branch
00006D7E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00006D84 4EB9 0000 0000             		jsr	DisplaySprite
00006D8A                            ; ===========================================================================
00006D8A                            
00006D8A                            Obj89_Delay:				; XREF: Obj89_Move
00006D8A 5428 0024                  		addq.b	#2,$24(a0)
00006D8E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00006D94                            
00006D94                            Obj89_GotoCredits:			; XREF: Obj89_Index
00006D94 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006D98 6A00                       		bpl.s	Obj89_Display
00006D9A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00006DA0                            
00006DA0                            Obj89_Display:
00006DA0 4EB9 0000 0000             		jsr	DisplaySprite
00006DA6                            ; ===========================================================================
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            ; Sprite mappings - Sonic on the ending	sequence
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            Map_obj87:
00006DA6                            	include "_maps\obj87.asm"
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            ; Sprite mappings - Sonic on the ending	sequence
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00006DAA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00006DAE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00006DB2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00006DB6 02                         byte_5690:	dc.b 2
00006DB7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006DBC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006DC1 03                         byte_569B:	dc.b 3
00006DC2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006DC7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006DCC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006DD1 02                         byte_56AB:	dc.b 2
00006DD2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006DD7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006DDC 02                         byte_56B6:	dc.b 2
00006DDD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006DE2 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006DE7 02                         byte_56C1:	dc.b 2
00006DE8 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006DED FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006DF2 03                         byte_56CC:	dc.b 3
00006DF3 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006DF8 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006DFD 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006E02 07                         byte_56DC:	dc.b 7
00006E03 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006E08 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006E0D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006E12 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006E17 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006E1C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006E21 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006E26 18                         byte_5700:	dc.b $18
00006E27 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006E2C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006E31 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006E36 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006E3B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006E40 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006E45 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006E4A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006E4F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006E54 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006E59 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006E5E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006E63 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006E68 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006E6D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006E72 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006E77 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006E7C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006E81 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006E86 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006E8B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006E90 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006E95 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006E9A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006EA0 00                         		even
00006EA0 00                         		even
00006EA0                            
00006EA0                            ; ---------------------------------------------------------------------------
00006EA0                            ; Sprite mappings - chaos emeralds on the ending sequence
00006EA0                            ; ---------------------------------------------------------------------------
00006EA0                            Map_obj88:
00006EA0                            	include "_maps\obj88.asm"
00006EA0                            ; ---------------------------------------------------------------------------
00006EA0                            ; Sprite mappings - chaos emeralds on the ending sequence
00006EA0                            ; ---------------------------------------------------------------------------
00006EA0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00006EA4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00006EA8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00006EAC 0000                       		dc.w byte_57AC-Map_obj88
00006EAE 01                         byte_5788:	dc.b 1
00006EAF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00006EB4 01                         byte_578E:	dc.b 1
00006EB5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00006EBA 01                         byte_5794:	dc.b 1
00006EBB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00006EC0 01                         byte_579A:	dc.b 1
00006EC1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006EC6 01                         byte_57A0:	dc.b 1
00006EC7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00006ECC 01                         byte_57A6:	dc.b 1
00006ECD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00006ED2 01                         byte_57AC:	dc.b 1
00006ED3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006ED8                            		even
00006ED8                            		even
00006ED8                            
00006ED8                            ; ---------------------------------------------------------------------------
00006ED8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006ED8                            ; ---------------------------------------------------------------------------
00006ED8                            Map_obj89:
00006ED8                            	include "_maps\obj89.asm"
00006ED8                            ; ---------------------------------------------------------------------------
00006ED8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006ED8                            ; ---------------------------------------------------------------------------
00006ED8 0000                       		dc.w byte_57B4-Map_obj89
00006EDA 03                         byte_57B4:	dc.b 3
00006EDB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006EE0 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006EE5 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006EEA                            		even
00006EEA                            		even
00006EEA                            
00006EEA                            ; ===========================================================================
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA                            ; Credits ending sequence
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA                            
00006EEA                            Credits:				; XREF: GameModeArray
00006EEA 6100 A442                  		bsr.w	ClearPLC
00006EEE 6100 ADF6                  		bsr.w	Pal_FadeFrom
00006EF2 4DF9 00C0 0004             		lea	($C00004).l,a6
00006EF8 3CBC 8004                  		move.w	#$8004,(a6)
00006EFC 3CBC 8230                  		move.w	#$8230,(a6)
00006F00 3CBC 8407                  		move.w	#$8407,(a6)
00006F04 3CBC 9001                  		move.w	#$9001,(a6)
00006F08 3CBC 9200                  		move.w	#$9200,(a6)
00006F0C 3CBC 8B03                  		move.w	#$8B03,(a6)
00006F10 3CBC 8720                  		move.w	#$8720,(a6)
00006F14 4238 F64E                  		clr.b	($FFFFF64E).w
00006F18 6100 9FF0                  		bsr.w	ClearScreen
00006F1C 43F8 D000                  		lea	($FFFFD000).w,a1
00006F20 7000                       		moveq	#0,d0
00006F22 323C 07FF                  		move.w	#$7FF,d1
00006F26                            
00006F26                            Cred_ClrObjRam:
00006F26 22C0                       		move.l	d0,(a1)+
00006F28 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006F2C                            
00006F2C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006F36 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006F3C 6100 A26A                  		bsr.w	NemDec
00006F40 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006F44 7000                       		moveq	#0,d0
00006F46 323C 001F                  		move.w	#$1F,d1
00006F4A                            
00006F4A                            Cred_ClrPalette:
00006F4A 22C0                       		move.l	d0,(a1)+
00006F4C 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
00006F50                            
00006F50 7003                       		moveq	#3,d0
00006F52 6100 B040                  		bsr.w	PalLoad1	; load Sonic's Palette
00006F56 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006F5C 4EB9 0000 0000             		jsr	ObjectsLoad
00006F62 4EB9 0000 0000             		jsr	BuildSprites
00006F68 6100 0000                  		bsr.w	EndingDemoLoad
00006F6C 7000                       		moveq	#0,d0
00006F6E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F72 E948                       		lsl.w	#4,d0
00006F74 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00006F7A 45F2 0000                  		lea	(a2,d0.w),a2
00006F7E 7000                       		moveq	#0,d0
00006F80 1012                       		move.b	(a2),d0
00006F82 6700                       		beq.s	loc_5862
00006F84 6100 A34A                  		bsr.w	LoadPLC		; load level patterns
00006F88                            
00006F88                            loc_5862:
00006F88 7001                       		moveq	#1,d0
00006F8A 6100 A344                  		bsr.w	LoadPLC		; load standard	level patterns
00006F8E 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00006F94 6100 AC9A                  		bsr.w	Pal_FadeTo
00006F98                            
00006F98                            Cred_WaitLoop:
00006F98 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006F9E 6100 B8A8                  		bsr.w	DelayProgram
00006FA2 6100 A398                  		bsr.w	RunPLC_RAM
00006FA6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00006FAA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00006FAC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00006FB0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00006FB2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00006FB8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00006FBC 4E75                       		rts	
00006FBE                            
00006FBE                            ; ---------------------------------------------------------------------------
00006FBE                            ; Ending sequence demo loading subroutine
00006FBE                            ; ---------------------------------------------------------------------------
00006FBE                            
00006FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FBE                            
00006FBE                            
00006FBE                            EndingDemoLoad:				; XREF: Credits
00006FBE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006FC2 0240 000F                  		andi.w	#$F,d0
00006FC6 D040                       		add.w	d0,d0
00006FC8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00006FCC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00006FD0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00006FD4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006FDA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006FDC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006FE2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006FE8 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00006FEE 7000                       		moveq	#0,d0
00006FF0 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00006FF4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006FF8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006FFC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00007000 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00007004 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000700A 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000700C 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00007012 45F8 FE30                  		lea	($FFFFFE30).w,a2
00007016 303C 0008                  		move.w	#8,d0
0000701A                            
0000701A                            EndDemo_LampLoad:
0000701A 24D9                       		move.l	(a1)+,(a2)+
0000701C 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00007020                            
00007020                            EndDemo_Exit:
00007020 4E75                       		rts	
00007022                            ; End of function EndingDemoLoad
00007022                            
00007022                            ; ===========================================================================
00007022                            ; ---------------------------------------------------------------------------
00007022                            ; Levels used in the end sequence demos
00007022                            ; ---------------------------------------------------------------------------
00007022                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00007032                            
00007032                            ; ---------------------------------------------------------------------------
00007032                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00007032                            ; ---------------------------------------------------------------------------
00007032                            EndDemo_LampVar:
00007032 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00007034 0A00 062C 000D             		dc.w $A00, $62C, $D
0000703A 0000 0000                  		dc.l 0
0000703E 0000                       		dc.b 0,	0
00007040 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00007054 0101                       		dc.b 1,	1
00007056                            ; ===========================================================================
00007056                            ; ---------------------------------------------------------------------------
00007056                            ; "TRY AGAIN" and "END"	screens
00007056                            ; ---------------------------------------------------------------------------
00007056                            
00007056                            TryAgainEnd:				; XREF: Credits
00007056 6100 A2D6                  		bsr.w	ClearPLC
0000705A 6100 AC8A                  		bsr.w	Pal_FadeFrom
0000705E 4DF9 00C0 0004             		lea	($C00004).l,a6
00007064 3CBC 8004                  		move.w	#$8004,(a6)
00007068 3CBC 8230                  		move.w	#$8230,(a6)
0000706C 3CBC 8407                  		move.w	#$8407,(a6)
00007070 3CBC 9001                  		move.w	#$9001,(a6)
00007074 3CBC 9200                  		move.w	#$9200,(a6)
00007078 3CBC 8B03                  		move.w	#$8B03,(a6)
0000707C 3CBC 8720                  		move.w	#$8720,(a6)
00007080 4238 F64E                  		clr.b	($FFFFF64E).w
00007084 6100 9E84                  		bsr.w	ClearScreen
00007088 43F8 D000                  		lea	($FFFFD000).w,a1
0000708C 7000                       		moveq	#0,d0
0000708E 323C 07FF                  		move.w	#$7FF,d1
00007092                            
00007092                            TryAg_ClrObjRam:
00007092 22C0                       		move.l	d0,(a1)+
00007094 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00007098                            
00007098 701D                       		moveq	#$1D,d0
0000709A 6100 A3A0                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000709E 43F8 FB80                  		lea	($FFFFFB80).w,a1
000070A2 7000                       		moveq	#0,d0
000070A4 323C 001F                  		move.w	#$1F,d1
000070A8                            
000070A8                            TryAg_ClrPalette:
000070A8 22C0                       		move.l	d0,(a1)+
000070AA 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
000070AE                            
000070AE 7013                       		moveq	#$13,d0
000070B0 6100 AEE2                  		bsr.w	PalLoad1	; load ending Palette
000070B4 4278 FBC0                  		clr.w	($FFFFFBC0).w
000070B8 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000070BE 4EB9 0000 0000             		jsr	ObjectsLoad
000070C4 4EB9 0000 0000             		jsr	BuildSprites
000070CA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000070D0 6100 AB5E                  		bsr.w	Pal_FadeTo
000070D4                            
000070D4                            ; ---------------------------------------------------------------------------
000070D4                            ; "TRY AGAIN" and "END"	screen main loop
000070D4                            ; ---------------------------------------------------------------------------
000070D4                            TryAg_MainLoop:
000070D4 6100 9F66                  		bsr.w	PauseGame
000070D8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000070DE 6100 B768                  		bsr.w	DelayProgram
000070E2 4EB9 0000 0000             		jsr	ObjectsLoad
000070E8 4EB9 0000 0000             		jsr	BuildSprites
000070EE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000070F4 6600                       		bne.s	TryAg_Exit	; if yes, branch
000070F6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000070FA 6700                       		beq.s	TryAg_Exit	; if yes, branch
000070FC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00007102 67D0                       		beq.s	TryAg_MainLoop
00007104                            
00007104                            TryAg_Exit:
00007104 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
0000710A 4E75                       		rts	
0000710C                            
0000710C                            ; ===========================================================================
0000710C                            ; ---------------------------------------------------------------------------
0000710C                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000710C                            ; ---------------------------------------------------------------------------
0000710C                            
0000710C                            Obj8B:					; XREF: Obj_Index
0000710C 7000                       		moveq	#0,d0
0000710E 1028 0024                  		move.b	$24(a0),d0
00007112 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00007116 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000711A 4EF9 0000 0000             		jmp	DisplaySprite
00007120                            ; ===========================================================================
00007120 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00007122 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00007124 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00007126 0000                       		dc.w loc_5A8E-Obj8B_Index
00007128                            ; ===========================================================================
00007128                            
00007128                            Obj8B_Main:				; XREF: Obj8B_Index
00007128 5428 0024                  		addq.b	#2,$24(a0)
0000712C 317C 0120 0008             		move.w	#$120,8(a0)
00007132 317C 00F4 000A             		move.w	#$F4,$A(a0)
00007138 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00007140 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007146 117C 0000 0001             		move.b	#0,1(a0)
0000714C 117C 0002 0018             		move.b	#2,$18(a0)
00007152 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00007158 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000715E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00007160 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00007166 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000716C 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00007172 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00007178                            
00007178                            Obj8B_Animate:				; XREF: Obj8B_Index
00007178 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000717E 4EF9 0000 0000             		jmp	AnimateSprite
00007184                            ; ===========================================================================
00007184                            
00007184                            Obj8B_Juggle:				; XREF: Obj8B_Index
00007184 5428 0024                  		addq.b	#2,$24(a0)
00007188 7002                       		moveq	#2,d0
0000718A 0828 0000 001C             		btst	#0,$1C(a0)
00007190 6700                       		beq.s	loc_5A6A
00007192 4440                       		neg.w	d0
00007194                            
00007194                            loc_5A6A:
00007194 43F8 D800                  		lea	($FFFFD800).w,a1
00007198 7205                       		moveq	#5,d1
0000719A                            
0000719A                            loc_5A70:
0000719A 1340 003E                  		move.b	d0,$3E(a1)
0000719E 3400                       		move.w	d0,d2
000071A0 E742                       		asl.w	#3,d2
000071A2 D529 0026                  		add.b	d2,$26(a1)
000071A6 43E9 0040                  		lea	$40(a1),a1
000071AA 51C9 FFEE                  		dbf	d1,loc_5A70
000071AE 5228 001A                  		addq.b	#1,$1A(a0)
000071B2 317C 0070 0030             		move.w	#112,$30(a0)
000071B8                            
000071B8                            loc_5A8E:				; XREF: Obj8B_Index
000071B8 5368 0030                  		subq.w	#1,$30(a0)
000071BC 6A00                       		bpl.s	locret_5AA0
000071BE 0868 0000 001C             		bchg	#0,$1C(a0)
000071C4 117C 0002 0024             		move.b	#2,$24(a0)
000071CA                            
000071CA                            locret_5AA0:
000071CA 4E75                       		rts	
000071CC                            ; ===========================================================================
000071CC                            Ani_obj8B:
000071CC                            	include "_anim\obj8B.asm"
000071CC                            ; ---------------------------------------------------------------------------
000071CC                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000071CC                            ; ---------------------------------------------------------------------------
000071CC 0000                       		dc.w byte_5AA8-Ani_obj8B
000071CE 0000                       		dc.w byte_5AAC-Ani_obj8B
000071D0 0000                       		dc.w byte_5AB0-Ani_obj8B
000071D2 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000071D6 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000071DA 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000071EC                            		even
000071EC                            		even
000071EC                            
000071EC                            ; ===========================================================================
000071EC                            ; ---------------------------------------------------------------------------
000071EC                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000071EC                            ; ---------------------------------------------------------------------------
000071EC                            
000071EC                            Obj8C:					; XREF: Obj_Index
000071EC 7000                       		moveq	#0,d0
000071EE 1028 0024                  		move.b	$24(a0),d0
000071F2 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000071F6 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000071FA 4EF9 0000 0000             		jmp	DisplaySprite
00007200                            ; ===========================================================================
00007200 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00007202 0000                       		dc.w Obj8C_Move-Obj8C_Index
00007204                            ; ===========================================================================
00007204                            
00007204                            Obj8C_Main:				; XREF: Obj8C_Index
00007204 2248                       		movea.l	a0,a1
00007206 7400                       		moveq	#0,d2
00007208 7600                       		moveq	#0,d3
0000720A 7205                       		moveq	#5,d1
0000720C 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00007210                            
00007210                            Obj8C_MakeEms:				; XREF: loc_5B42
00007210 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00007214 5429 0024                  		addq.b	#2,$24(a1)
00007218 237C 0000 6EA0 0004        		move.l	#Map_obj88,4(a1)
00007220 337C 03C5 0002             		move.w	#$3C5,2(a1)
00007226 137C 0000 0001             		move.b	#0,1(a1)
0000722C 137C 0001 0018             		move.b	#1,$18(a1)
00007232 337C 0104 0008             		move.w	#$104,8(a1)
00007238 337C 0120 0038             		move.w	#$120,$38(a1)
0000723E 337C 00EC 000A             		move.w	#$EC,$A(a1)
00007244 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000724A 137C 001C 003C             		move.b	#$1C,$3C(a1)
00007250 47F8 FE58                  		lea	($FFFFFE58).w,a3
00007254                            
00007254                            Obj8C_ChkEms:
00007254 7000                       		moveq	#0,d0
00007256 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000725A 5340                       		subq.w	#1,d0
0000725C 6500                       		bcs.s	loc_5B42
0000725E                            
0000725E                            Obj8C_ChkEmLoop:
0000725E B433 0000                  		cmp.b	(a3,d0.w),d2
00007262 6600                       		bne.s	loc_5B3E
00007264 5202                       		addq.b	#1,d2
00007266 60EC                       		bra.s	Obj8C_ChkEms
00007268                            ; ===========================================================================
00007268                            
00007268                            loc_5B3E:
00007268 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000726C                            
0000726C                            loc_5B42:
0000726C 1342 001A                  		move.b	d2,$1A(a1)
00007270 5229 001A                  		addq.b	#1,$1A(a1)
00007274 5202                       		addq.b	#1,d2
00007276 137C 0080 0026             		move.b	#$80,$26(a1)
0000727C 1343 001E                  		move.b	d3,$1E(a1)
00007280 1343 001F                  		move.b	d3,$1F(a1)
00007284 0643 000A                  		addi.w	#$A,d3
00007288 43E9 0040                  		lea	$40(a1),a1
0000728C 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00007290                            
00007290                            Obj8C_Move:				; XREF: Obj8C_Index
00007290 4A68 003E                  		tst.w	$3E(a0)
00007294 6700                       		beq.s	locret_5BBA
00007296 4A28 001E                  		tst.b	$1E(a0)
0000729A 6700                       		beq.s	loc_5B78
0000729C 5328 001E                  		subq.b	#1,$1E(a0)
000072A0 6600                       		bne.s	loc_5B80
000072A2                            
000072A2                            loc_5B78:
000072A2 3028 003E                  		move.w	$3E(a0),d0
000072A6 D168 0026                  		add.w	d0,$26(a0)
000072AA                            
000072AA                            loc_5B80:
000072AA 1028 0026                  		move.b	$26(a0),d0
000072AE 6700                       		beq.s	loc_5B8C
000072B0 0C00 0080                  		cmpi.b	#$80,d0
000072B4 6600                       		bne.s	loc_5B96
000072B6                            
000072B6                            loc_5B8C:
000072B6 4268 003E                  		clr.w	$3E(a0)
000072BA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000072C0                            
000072C0                            loc_5B96:
000072C0 4EB9 0000 287A             		jsr	(CalcSine).l
000072C6 7800                       		moveq	#0,d4
000072C8 1828 003C                  		move.b	$3C(a0),d4
000072CC C3C4                       		muls.w	d4,d1
000072CE E081                       		asr.l	#8,d1
000072D0 C1C4                       		muls.w	d4,d0
000072D2 E080                       		asr.l	#8,d0
000072D4 D268 0038                  		add.w	$38(a0),d1
000072D8 D068 003A                  		add.w	$3A(a0),d0
000072DC 3141 0008                  		move.w	d1,8(a0)
000072E0 3140 000A                  		move.w	d0,$A(a0)
000072E4                            
000072E4                            locret_5BBA:
000072E4 4E75                       		rts	
000072E6                            ; ===========================================================================
000072E6                            ; ---------------------------------------------------------------------------
000072E6                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000072E6                            ; ---------------------------------------------------------------------------
000072E6                            Map_obj8B:
000072E6                            	include "_maps\obj8B.asm"
000072E6                            ; ---------------------------------------------------------------------------
000072E6                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000072E6                            ; ---------------------------------------------------------------------------
000072E6 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000072EA 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000072EE 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000072F2 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000072F6 08                         byte_5BCC:	dc.b 8
000072F7 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000072FC F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00007301 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00007306 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000730B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00007310 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007315 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000731A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000731F 08                         byte_5BF5:	dc.b 8
00007320 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00007325 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000732A E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000732F F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00007334 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007339 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000733E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007343 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007348 08                         byte_5C1E:	dc.b 8
00007349 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000734E F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00007353 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00007358 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000735D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00007362 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007367 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000736C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007371 08                         byte_5C47:	dc.b 8
00007372 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00007377 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000737C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00007381 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00007386 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000738B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007390 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007395 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000739A 0C                         byte_5C70:	dc.b $C
0000739B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000073A0 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000073A5 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000073AA 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000073AF ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000073B4 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000073B9 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000073BE 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000073C3 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000073C8 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000073CD 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000073D2 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000073D7 0A                         byte_5CAD:	dc.b $A
000073D8 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000073DD DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000073E2 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000073E7 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000073EC DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000073F1 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000073F6 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000073FB 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00007400 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00007405 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000740A 0A                         byte_5CE0:	dc.b $A
0000740B C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00007410 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00007415 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000741A C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000741F E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00007424 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00007429 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000742E 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00007433 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00007438 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000743D 0C                         byte_5D13:	dc.b $C
0000743E F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00007443 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00007448 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000744D 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00007452 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00007457 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000745C 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00007461 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00007466 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000746B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00007470 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00007475 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000747A                            		even
0000747A                            		even
0000747A                            
0000747A                            ; ---------------------------------------------------------------------------
0000747A                            ; Ending sequence demos
0000747A                            ; ---------------------------------------------------------------------------
0000747A                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000074A8                            		even
000074A8                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000074E8                            		even
000074E8                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00007518                            		even
00007518                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00007548                            		even
00007548                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00007568                            		even
00007568                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00007588                            		even
00007588                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000075B8                            		even
000075B8                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000075E8                            		even
000075E8                            
000075E8                            ; ---------------------------------------------------------------------------
000075E8                            ; Subroutine to	load level boundaries and start	locations
000075E8                            ; ---------------------------------------------------------------------------
000075E8                            
000075E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E8                            
000075E8                            
000075E8                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000075E8 7000                       		moveq	#0,d0
000075EA 11C0 F740                  		move.b	d0,($FFFFF740).w
000075EE 11C0 F741                  		move.b	d0,($FFFFF741).w
000075F2 11C0 F746                  		move.b	d0,($FFFFF746).w
000075F6 11C0 F748                  		move.b	d0,($FFFFF748).w
000075FA 11C0 F742                  		move.b	d0,($FFFFF742).w
000075FE 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007602 ED08                       		lsl.b	#6,d0
00007604 E848                       		lsr.w	#4,d0
00007606 3200                       		move.w	d0,d1
00007608 D040                       		add.w	d0,d0
0000760A D041                       		add.w	d1,d0
0000760C 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00007610 3018                       		move.w	(a0)+,d0
00007612 31C0 F730                  		move.w	d0,($FFFFF730).w
00007616 2018                       		move.l	(a0)+,d0
00007618 21C0 F728                  		move.l	d0,($FFFFF728).w
0000761C 21C0 F720                  		move.l	d0,($FFFFF720).w
00007620 2018                       		move.l	(a0)+,d0
00007622 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00007626 21C0 F724                  		move.l	d0,($FFFFF724).w
0000762A 3038 F728                  		move.w	($FFFFF728).w,d0
0000762E 0640 0240                  		addi.w	#$240,d0
00007632 31C0 F732                  		move.w	d0,($FFFFF732).w
00007636 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000763C 3018                       		move.w	(a0)+,d0
0000763E 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00007642 6000 0000                  		bra.w	LevSz_ChkLamp
00007646                            ; ===========================================================================
00007646                            ; ---------------------------------------------------------------------------
00007646                            ; Level size array and ending start location array
00007646                            ; ---------------------------------------------------------------------------
00007646                            ; ---------------------------------------------------------------------------
00007646                            ; Level size array
00007646                            ; FORMAT:
00007646                            ; dc.w 4, left x boundary, right x boundary, upper y boundary, lower y boundary, $60
00007646                            ; Set the lower y boundary to $FF00 for vertical wrapping
00007646                            ; ---------------------------------------------------------------------------
00007646                            
00007646                            LevelSizeArray:
00007646                            		; GHZ
00007646 0004 0000 24BF 0000 0300+  		dc.w 4,     0, $24BF,     0, $0300, $60
00007652 0004 0000 1EBF 0000 0300+  		dc.w 4,     0, $1EBF,     0, $0300, $60
0000765E 0004 0000 2960 0000 0300+  		dc.w 4,     0, $2960,     0, $0300, $60
0000766A 0004 0000 2ABF 0000 0300+  		dc.w 4,     0, $2ABF,     0, $0300, $60
00007676                            		
00007676                            		;LZ
00007676 0004 0000 1FBF 0000 0640+  		dc.w 4,     0, $1FBF,     0, $0640, $60
00007682 0004 0000 1FBF 0000 0640+  		dc.w 4,     0, $1FBF,     0, $0640, $60
0000768E 0004 0000 2000 0000 06C0+  		dc.w 4,     0, $2000,     0, $06C0, $60
0000769A 0004 0000 3EC0 0000 0720+  		dc.w 4,     0, $3EC0,     0, $0720, $60
000076A6                            		
000076A6                            		; MZ
000076A6 0004 0000 24BF 0000 0300+  		dc.w 4,     0, $24BF,     0, $0300, $60
000076B2 0004 0000 1EBF 0000 0300+  		dc.w 4,     0, $1EBF,     0, $0300, $60
000076BE 0004 0000 2960 0000 0300+  		dc.w 4,     0, $2960,     0, $0300, $60
000076CA 0004 0000 2ABF 0000 0300+  		dc.w 4,     0, $2ABF,     0, $0300, $60
000076D6                            		
000076D6                            		; SLZ
000076D6 0004 0000 1FBF 0000 0640+  		dc.w 4,     0, $1FBF,     0, $0640, $60
000076E2 0004 0000 1FBF 0000 0640+  		dc.w 4,     0, $1FBF,     0, $0640, $60
000076EE 0004 0000 2000 0000 06C0+  		dc.w 4,     0, $2000,     0, $06C0, $60
000076FA 0004 0000 3EC0 0000 0720+  		dc.w 4,     0, $3EC0,     0, $0720, $60
00007706                            		
00007706                            		; SYZ
00007706 0004 0000 22C0 0000 0420+  		dc.w 4,     0, $22C0,     0, $0420, $60
00007712 0004 0000 28C0 0000 0520+  		dc.w 4,     0, $28C0,     0, $0520, $60
0000771E 0004 0000 2C00 0000 0620+  		dc.w 4,     0, $2C00,     0, $0620, $60
0000772A 0004 0000 2EC0 0000 0620+  		dc.w 4,     0, $2EC0,     0, $0620, $60
00007736                            		
00007736                            		; SBZ
00007736 0004 0000 21C0 0000 0720+  		dc.w 4,     0, $21C0,     0, $0720, $60
00007742 0004 0000 1E40 0000 0800+  		dc.w 4,     0, $1E40,     0, $0800, $60
0000774E 0004 2080 2460 0510 0510+  		dc.w 4, $2080, $2460, $0510, $0510, $60
0000775A 0004 0000 3EC0 0000 0720+  		dc.w 4,     0, $3EC0,     0, $0720, $60
00007766                            		
00007766                            		; Ending
00007766 0004 0000 0500 0110 0110+  		dc.w 4,     0, $0500, $0110, $0110, $60
00007772 0004 0000 0DC0 0110 0110+  		dc.w 4,     0, $0DC0, $0110, $0110, $60
0000777E 0004 0000 2FFF 0000 0320+  		dc.w 4,     0, $2FFF,     0, $0320, $60
0000778A 0004 0000 2FFF 0000 0320+  		dc.w 4,     0, $2FFF,     0, $0320, $60
00007796                            
00007796                            EndingStLocArray:
00007796                            		incbin	misc\sloc_end.bin
000077B6                            		even
000077B6                            
000077B6                            ; ===========================================================================
000077B6                            
000077B6                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000077B6 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000077BA 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000077BC 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000077C2 3238 D008                  		move.w	($FFFFD008).w,d1
000077C6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000077CA 6000                       		bra.s	loc_60D0
000077CC                            ; ===========================================================================
000077CC                            
000077CC                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000077CC 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077D0 ED08                       		lsl.b	#6,d0
000077D2 E848                       		lsr.w	#4,d0
000077D4 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
000077DA 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
000077DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000077E2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000077E4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000077E8 5340                       		subq.w	#1,d0
000077EA E548                       		lsl.w	#2,d0
000077EC 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000077F0                            
000077F0                            LevSz_SonicPos:
000077F0 7200                       		moveq	#0,d1
000077F2 3219                       		move.w	(a1)+,d1
000077F4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000077F8 7000                       		moveq	#0,d0
000077FA 3011                       		move.w	(a1),d0
000077FC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007800 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
00007804 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
00007808 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
0000780C 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00007810 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00007814 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00007818 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
0000781C 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00007820                            
00007820                            loc_60D0:				; XREF: LevSz_ChkLamp
00007820 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00007824 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00007828 743F                       		moveq	#63,d2				; begin a 64-step loop
0000782A                            @looppoint:
0000782A 34C1                       		move.w	d1,(a2)+			; fill in X
0000782C 34C0                       		move.w	d0,(a2)+			; fill in Y
0000782E 51CA FFFA                  		dbf	d2,@looppoint		; loop
00007832 0441 00A0                  		subi.w	#$A0,d1
00007836 6400                       		bcc.s	loc_60D8
00007838 7200                       		moveq	#0,d1
0000783A                            
0000783A                            loc_60D8:
0000783A 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000783E B242                       		cmp.w	d2,d1
00007840 6500                       		bcs.s	loc_60E2
00007842 3202                       		move.w	d2,d1
00007844                            
00007844                            loc_60E2:
00007844 31C1 F700                  		move.w	d1,($FFFFF700).w
00007848 0440 0060                  		subi.w	#$60,d0
0000784C 6400                       		bcc.s	loc_60EE
0000784E 7000                       		moveq	#0,d0
00007850                            
00007850                            loc_60EE:
00007850 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007854 6D00                       		blt.s	loc_60F8
00007856 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000785A                            
0000785A                            loc_60F8:
0000785A 31C0 F704                  		move.w	d0,($FFFFF704).w
0000785E 6100 0000                  		bsr.w	BgScrollSpeed
00007862 7000                       		moveq	#0,d0
00007864 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007868 E508                       		lsl.b	#2,d0
0000786A 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007870 6000 0000                  		bra.w	LevSz_Unk
00007874                            
00007874                            ; ===========================================================================
00007874                            ; ---------------------------------------------------------------------------
00007874                            ; MJ: Sonic start location array
00007874                            ; ---------------------------------------------------------------------------
00007874                            
00007874                            StartLocArray:	incbin	startpos\ghz1.bin
00007878                            		incbin	startpos\ghz2.bin
0000787C                            		incbin	startpos\ghz3.bin
00007880                            		incbin	startpos\ghz4.bin
00007884                            		incbin	startpos\lz1.bin
00007888                            		incbin	startpos\lz2.bin
0000788C                            		incbin	startpos\lz3.bin
00007890                            		incbin	startpos\lz4.bin
00007894                            		incbin	startpos\mz1.bin
00007898                            		incbin	startpos\mz2.bin
0000789C                            		incbin	startpos\mz3.bin
000078A0                            		incbin	startpos\mz4.bin
000078A4                            		incbin	startpos\slz1.bin
000078A8                            		incbin	startpos\slz2.bin
000078AC                            		incbin	startpos\slz3.bin
000078B0                            		incbin	startpos\slz4.bin
000078B4                            		incbin	startpos\syz1.bin
000078B8                            		incbin	startpos\syz2.bin
000078BC                            		incbin	startpos\syz3.bin
000078C0                            		incbin	startpos\syz4.bin
000078C4                            		incbin	startpos\sbz1.bin
000078C8                            		incbin	startpos\sbz2.bin
000078CC                            		incbin	startpos\sbz3.bin
000078D0                            		incbin	startpos\sbz4.bin
000078D4                            		incbin	startpos\end1.bin
000078D8                            		incbin	startpos\end2.bin
000078DC                            		incbin	startpos\end3.bin
000078E0                            		incbin	startpos\end4.bin
000078E4                            		even
000078E4                            
000078E4                            ; ===========================================================================
000078E4                            ; ---------------------------------------------------------------------------
000078E4                            ; Which	256x256	tiles contain loops or roll-tunnels
000078E4                            ; ---------------------------------------------------------------------------
000078E4                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000078E4                            ; loop,	loop, tunnel, tunnel
000078E4                            ; ---------------------------------------------------------------------------
000078E4                            LoopTileNums:	incbin	misc\loopnums.bin
00007900                            		even
00007900                            
00007900                            ; ===========================================================================
00007900                            
00007900                            LevSz_Unk:				; XREF: LevelSizeLoad
00007900 7000                       		moveq	#0,d0
00007902 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007906 E748                       		lsl.w	#3,d0
00007908 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000790C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007910 24D9                       		move.l	(a1)+,(a2)+
00007912 24D9                       		move.l	(a1)+,(a2)+
00007914 4E75                       		rts	
00007916                            ; End of function LevelSizeLoad
00007916                            
00007916                            ; ===========================================================================
00007916 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000791E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007926 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000792E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007936 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000793E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007946 0070 0100 0100 0100        		dc.l $700100, $1000100
0000794E                            
0000794E                            ; ---------------------------------------------------------------------------
0000794E                            ; Subroutine to	set scroll speed of some backgrounds
0000794E                            ; ---------------------------------------------------------------------------
0000794E                            
0000794E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000794E                            
0000794E                            
0000794E                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000794E 4A38 FE30                  		tst.b	($FFFFFE30).w
00007952 6600                       		bne.s	loc_6206
00007954 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007958 31C0 F714                  		move.w	d0,($FFFFF714).w
0000795C 31C1 F708                  		move.w	d1,($FFFFF708).w
00007960 31C1 F710                  		move.w	d1,($FFFFF710).w
00007964 31C1 F718                  		move.w	d1,($FFFFF718).w
00007968                            
00007968                            loc_6206:
00007968 7400                       		moveq	#0,d2
0000796A 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000796E D442                       		add.w	d2,d2
00007970 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007974 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007978                            ; End of function BgScrollSpeed
00007978                            
00007978                            ; ===========================================================================
00007978 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000797C 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007980 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007984 0000                       		dc.w BgScroll_End-BgScroll_Index
00007986                            ; ===========================================================================
00007986                            
00007986                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007986 6000 0000                  		bra.w	Deform_GHZ
0000798A                            ; ===========================================================================
0000798A                            
0000798A                            BgScroll_LZ:				; XREF: BgScroll_Index
0000798A E280                       		asr.l	#1,d0
0000798C 0640 00C0                  		addi.w	#$C0,d0
00007990 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007994 4E75                       		rts		
00007996                            ; ===========================================================================
00007996                            
00007996                            BgScroll_MZ:				; XREF: BgScroll_Index
00007996 4E75                       		rts	
00007998                            ; ===========================================================================
00007998                            
00007998                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007998 E280                       		asr.l	#1,d0
0000799A 0640 00C0                  		addi.w	#$C0,d0
0000799E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000079A2 4E75                       		rts	
000079A4                            ; ===========================================================================
000079A4                            
000079A4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000079A4 E980                       		asl.l	#4,d0
000079A6 2400                       		move.l	d0,d2
000079A8 E380                       		asl.l	#1,d0
000079AA D082                       		add.l	d2,d0
000079AC E080                       		asr.l	#8,d0
000079AE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000079B2 31C0 F714                  		move.w	d0,($FFFFF714).w
000079B6 4E75                       		rts	
000079B8                            ; ===========================================================================
000079B8                            
000079B8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000079B8 E980                       		asl.l	#4,d0
000079BA E380                       		asl.l	#1,d0
000079BC E080                       		asr.l	#8,d0
000079BE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000079C2 4E75                       		rts	
000079C4                            ; ===========================================================================
000079C4                            
000079C4                            BgScroll_End:				; XREF: BgScroll_Index
000079C4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000079CA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000079D0 4E75                       		rts	
000079D2                            ; ===========================================================================
000079D2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000079D8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000079DE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000079E4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000079EA 4E75                       		rts
000079EC                            
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            ; Background layer deformation subroutines
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            
000079EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EC                            
000079EC                            
000079EC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000079EC 4A38 F744                  		tst.b	($FFFFF744).w
000079F0 6700                       		beq.s	loc_628E
000079F2 4E75                       		rts	
000079F4                            ; ===========================================================================
000079F4                            
000079F4                            loc_628E:
000079F4 4278 F754                  		clr.w	($FFFFF754).w
000079F8 4278 F756                  		clr.w	($FFFFF756).w
000079FC 4278 F758                  		clr.w	($FFFFF758).w
00007A00 4278 F75A                  		clr.w	($FFFFF75A).w
00007A04 6100 0000                  		bsr.w	ScrollHoriz
00007A08 6100 0000                  		bsr.w	ScrollVertical
00007A0C 6100 0000                  		bsr.w	DynScrResizeLoad
00007A10 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007A16 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007A1C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007A22 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007A28 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007A2E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007A34 7000                       		moveq	#0,d0
00007A36 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007A3A D040                       		add.w	d0,d0
00007A3C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007A40 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007A44                            ; End of function DeformBgLayer
00007A44                            
00007A44                            ; ===========================================================================
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            ; Offset index for background layer deformation	code
00007A44                            ; ---------------------------------------------------------------------------
00007A44 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007A48 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007A4C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007A50 0000                       		dc.w Deform_GHZ-Deform_Index
00007A52                            ; ---------------------------------------------------------------------------
00007A52                            ; Green	Hill Zone background layer deformation code
00007A52                            ; ---------------------------------------------------------------------------
00007A52                            
00007A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A52                            
00007A52                            
00007A52                            Deform_GHZ:				; XREF: Deform_Index
00007A52 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007A56 48C4                       		ext.l	d4
00007A58 EB84                       		asl.l	#5,d4
00007A5A 2204                       		move.l	d4,d1
00007A5C E384                       		asl.l	#1,d4
00007A5E D881                       		add.l	d1,d4
00007A60 7A00                       		moveq	#0,d5
00007A62 6100 0000                  		bsr.w	ScrollBlock1
00007A66 6100 0000                  		bsr.w	ScrollBlock4
00007A6A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007A6E 3038 F704                  		move.w	($FFFFF704).w,d0
00007A72 0240 07FF                  		andi.w	#$7FF,d0
00007A76 EA48                       		lsr.w	#5,d0
00007A78 4440                       		neg.w	d0
00007A7A 0640 0026                  		addi.w	#$26,d0
00007A7E 31C0 F714                  		move.w	d0,($FFFFF714).w
00007A82 3800                       		move.w	d0,d4
00007A84 6100 0000                  		bsr.w	ScrollBlock3
00007A88 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007A8E 323C 006F                  		move.w	#$6F,d1
00007A92 9244                       		sub.w	d4,d1
00007A94 3038 F700                  		move.w	($FFFFF700).w,d0
00007A98 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007A9E 6600                       		bne.s	loc_633C
00007AA0 7000                       		moveq	#0,d0
00007AA2                            
00007AA2                            loc_633C:
00007AA2 4440                       		neg.w	d0
00007AA4 4840                       		swap	d0
00007AA6 3038 F708                  		move.w	($FFFFF708).w,d0
00007AAA 4440                       		neg.w	d0
00007AAC                            
00007AAC                            loc_6346:
00007AAC 22C0                       		move.l	d0,(a1)+
00007AAE 51C9 FFFC                  		dbf	d1,loc_6346
00007AB2 323C 0027                  		move.w	#$27,d1
00007AB6 3038 F710                  		move.w	($FFFFF710).w,d0
00007ABA 4440                       		neg.w	d0
00007ABC                            
00007ABC                            loc_6356:
00007ABC 22C0                       		move.l	d0,(a1)+
00007ABE 51C9 FFFC                  		dbf	d1,loc_6356
00007AC2 3038 F710                  		move.w	($FFFFF710).w,d0
00007AC6 0640 0000                  		addi.w	#0,d0
00007ACA 3438 F700                  		move.w	($FFFFF700).w,d2
00007ACE 0642 FE00                  		addi.w	#-$200,d2
00007AD2 9440                       		sub.w	d0,d2
00007AD4 48C2                       		ext.l	d2
00007AD6 E182                       		asl.l	#8,d2
00007AD8 85FC 0068                  		divs.w	#$68,d2
00007ADC 48C2                       		ext.l	d2
00007ADE E182                       		asl.l	#8,d2
00007AE0 7600                       		moveq	#0,d3
00007AE2 3600                       		move.w	d0,d3
00007AE4 323C 0047                  		move.w	#$47,d1
00007AE8 D244                       		add.w	d4,d1
00007AEA                            
00007AEA                            loc_6384:
00007AEA 3003                       		move.w	d3,d0
00007AEC 4440                       		neg.w	d0
00007AEE 22C0                       		move.l	d0,(a1)+
00007AF0 4843                       		swap	d3
00007AF2 D682                       		add.l	d2,d3
00007AF4 4843                       		swap	d3
00007AF6 51C9 FFF2                  		dbf	d1,loc_6384
00007AFA 4E75                       		rts	
00007AFC                            ; End of function Deform_GHZ
00007AFC                            
00007AFC                            ; ---------------------------------------------------------------------------
00007AFC                            ; Labyrinth Zone background layer deformation code
00007AFC                            ; ---------------------------------------------------------------------------
00007AFC                            
00007AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AFC                            
00007AFC                            
00007AFC                            Deform_LZ:				; XREF: Deform_Index
00007AFC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007B00 48C4                       		ext.l	d4
00007B02 EF84                       		asl.l	#7,d4
00007B04 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007B08 48C5                       		ext.l	d5
00007B0A EF85                       		asl.l	#7,d5
00007B0C 6100 0000                  		bsr.w	ScrollBlock2
00007B10 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007B16 6100 0000                  		bsr.w	Deform_SLZ_2
00007B1A 45F8 A800                  		lea	($FFFFA800).w,a2
00007B1E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007B22 3400                       		move.w	d0,d2
00007B24 0440 00C0                  		subi.w	#$C0,d0
00007B28 0240 03F0                  		andi.w	#$3F0,d0
00007B2C E648                       		lsr.w	#3,d0
00007B2E 45F2 0000                  		lea	(a2,d0.w),a2
00007B32 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007B36 323C 000E                  		move.w	#$E,d1
00007B3A 3038 F700                  		move.w	($FFFFF700).w,d0
00007B3E 4440                       		neg.w	d0
00007B40 4840                       		swap	d0
00007B42 0242 000F                  		andi.w	#$F,d2
00007B46 D442                       		add.w	d2,d2
00007B48 301A                       		move.w	(a2)+,d0
00007B4A 4EFB 2000                  		jmp	Deform_3LZ(pc,d2.w)
00007B4E                            ; ===========================================================================
00007B4E                            
00007B4E                            Deform_2LZ:				; XREF: Deform_SLZ
00007B4E 301A                       		move.w	(a2)+,d0
00007B50                            
00007B50                            Deform_3LZ:
00007B50 22C0                       		move.l	d0,(a1)+
00007B52 22C0                       		move.l	d0,(a1)+
00007B54 22C0                       		move.l	d0,(a1)+
00007B56 22C0                       		move.l	d0,(a1)+
00007B58 22C0                       		move.l	d0,(a1)+
00007B5A 22C0                       		move.l	d0,(a1)+
00007B5C 22C0                       		move.l	d0,(a1)+
00007B5E 22C0                       		move.l	d0,(a1)+
00007B60 22C0                       		move.l	d0,(a1)+
00007B62 22C0                       		move.l	d0,(a1)+
00007B64 22C0                       		move.l	d0,(a1)+
00007B66 22C0                       		move.l	d0,(a1)+
00007B68 22C0                       		move.l	d0,(a1)+
00007B6A 22C0                       		move.l	d0,(a1)+
00007B6C 22C0                       		move.l	d0,(a1)+
00007B6E 22C0                       		move.l	d0,(a1)+
00007B70 51C9 FFDC                  		dbf	d1,Deform_2LZ
00007B74 4E75                       		rts	
00007B76                            ; End of function Deform_LZ
00007B76                            
00007B76                            ; ---------------------------------------------------------------------------
00007B76                            ; Marble Zone background layer deformation code
00007B76                            ; ---------------------------------------------------------------------------
00007B76                            
00007B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B76                            
00007B76                            
00007B76                            Deform_MZ:				; XREF: Deform_Index
00007B76 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007B7A 48C4                       		ext.l	d4
00007B7C ED84                       		asl.l	#6,d4
00007B7E 2204                       		move.l	d4,d1
00007B80 E384                       		asl.l	#1,d4
00007B82 D881                       		add.l	d1,d4
00007B84 7A00                       		moveq	#0,d5
00007B86 6100 0000                  		bsr.w	ScrollBlock1
00007B8A 303C 0200                  		move.w	#$200,d0
00007B8E 3238 F704                  		move.w	($FFFFF704).w,d1
00007B92 0441 01C8                  		subi.w	#$1C8,d1
00007B96 6500                       		bcs.s	loc_6402
00007B98 3401                       		move.w	d1,d2
00007B9A D241                       		add.w	d1,d1
00007B9C D242                       		add.w	d2,d1
00007B9E E441                       		asr.w	#2,d1
00007BA0 D041                       		add.w	d1,d0
00007BA2                            
00007BA2                            loc_6402:
00007BA2 31C0 F714                  		move.w	d0,($FFFFF714).w
00007BA6 6100 0000                  		bsr.w	ScrollBlock3
00007BAA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007BB0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007BB4 323C 00DF                  		move.w	#$DF,d1
00007BB8 3038 F700                  		move.w	($FFFFF700).w,d0
00007BBC 4440                       		neg.w	d0
00007BBE 4840                       		swap	d0
00007BC0 3038 F708                  		move.w	($FFFFF708).w,d0
00007BC4 4440                       		neg.w	d0
00007BC6                            
00007BC6                            loc_6426:
00007BC6 22C0                       		move.l	d0,(a1)+
00007BC8 51C9 FFFC                  		dbf	d1,loc_6426
00007BCC 4E75                       		rts	
00007BCE                            ; End of function Deform_MZ
00007BCE                            
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            ; Star Light Zone background layer deformation code
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            
00007BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BCE                            
00007BCE                            
00007BCE                            Deform_SLZ:				; XREF: Deform_Index
00007BCE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007BD2 48C4                       		ext.l	d4
00007BD4 EF84                       		asl.l	#7,d4
00007BD6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007BDA 48C5                       		ext.l	d5
00007BDC EF85                       		asl.l	#7,d5
00007BDE 6100 0000                  		bsr.w	ScrollBlock2
00007BE2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007BE8 6100 0000                  		bsr.w	Deform_SLZ_2
00007BEC 45F8 A800                  		lea	($FFFFA800).w,a2
00007BF0 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007BF4 3400                       		move.w	d0,d2
00007BF6 0440 00C0                  		subi.w	#$C0,d0
00007BFA 0240 03F0                  		andi.w	#$3F0,d0
00007BFE E648                       		lsr.w	#3,d0
00007C00 45F2 0000                  		lea	(a2,d0.w),a2
00007C04 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007C08 323C 000E                  		move.w	#$E,d1
00007C0C 3038 F700                  		move.w	($FFFFF700).w,d0
00007C10 4440                       		neg.w	d0
00007C12 4840                       		swap	d0
00007C14 0242 000F                  		andi.w	#$F,d2
00007C18 D442                       		add.w	d2,d2
00007C1A 301A                       		move.w	(a2)+,d0
00007C1C 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007C20                            ; ===========================================================================
00007C20                            
00007C20                            loc_6480:				; XREF: Deform_SLZ
00007C20 301A                       		move.w	(a2)+,d0
00007C22                            
00007C22                            loc_6482:
00007C22 22C0                       		move.l	d0,(a1)+
00007C24 22C0                       		move.l	d0,(a1)+
00007C26 22C0                       		move.l	d0,(a1)+
00007C28 22C0                       		move.l	d0,(a1)+
00007C2A 22C0                       		move.l	d0,(a1)+
00007C2C 22C0                       		move.l	d0,(a1)+
00007C2E 22C0                       		move.l	d0,(a1)+
00007C30 22C0                       		move.l	d0,(a1)+
00007C32 22C0                       		move.l	d0,(a1)+
00007C34 22C0                       		move.l	d0,(a1)+
00007C36 22C0                       		move.l	d0,(a1)+
00007C38 22C0                       		move.l	d0,(a1)+
00007C3A 22C0                       		move.l	d0,(a1)+
00007C3C 22C0                       		move.l	d0,(a1)+
00007C3E 22C0                       		move.l	d0,(a1)+
00007C40 22C0                       		move.l	d0,(a1)+
00007C42 51C9 FFDC                  		dbf	d1,loc_6480
00007C46 4E75                       		rts	
00007C48                            ; End of function Deform_SLZ
00007C48                            
00007C48                            
00007C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C48                            
00007C48                            
00007C48                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007C48 43F8 A800                  		lea	($FFFFA800).w,a1
00007C4C 3438 F700                  		move.w	($FFFFF700).w,d2
00007C50 4442                       		neg.w	d2
00007C52 3002                       		move.w	d2,d0
00007C54 E640                       		asr.w	#3,d0
00007C56 9042                       		sub.w	d2,d0
00007C58 48C0                       		ext.l	d0
00007C5A E980                       		asl.l	#4,d0
00007C5C 81FC 001C                  		divs.w	#$1C,d0
00007C60 48C0                       		ext.l	d0
00007C62 E980                       		asl.l	#4,d0
00007C64 E180                       		asl.l	#8,d0
00007C66 7600                       		moveq	#0,d3
00007C68 3602                       		move.w	d2,d3
00007C6A 323C 001B                  		move.w	#$1B,d1
00007C6E                            
00007C6E                            loc_64CE:
00007C6E 32C3                       		move.w	d3,(a1)+
00007C70 4843                       		swap	d3
00007C72 D680                       		add.l	d0,d3
00007C74 4843                       		swap	d3
00007C76 51C9 FFF6                  		dbf	d1,loc_64CE
00007C7A 3002                       		move.w	d2,d0
00007C7C E640                       		asr.w	#3,d0
00007C7E 323C 0004                  		move.w	#4,d1
00007C82                            
00007C82                            loc_64E2:
00007C82 32C0                       		move.w	d0,(a1)+
00007C84 51C9 FFFC                  		dbf	d1,loc_64E2
00007C88 3002                       		move.w	d2,d0
00007C8A E440                       		asr.w	#2,d0
00007C8C 323C 0004                  		move.w	#4,d1
00007C90                            
00007C90                            loc_64F0:
00007C90 32C0                       		move.w	d0,(a1)+
00007C92 51C9 FFFC                  		dbf	d1,loc_64F0
00007C96 3002                       		move.w	d2,d0
00007C98 E240                       		asr.w	#1,d0
00007C9A 323C 001D                  		move.w	#$1D,d1
00007C9E                            
00007C9E                            loc_64FE:
00007C9E 32C0                       		move.w	d0,(a1)+
00007CA0 51C9 FFFC                  		dbf	d1,loc_64FE
00007CA4 4E75                       		rts	
00007CA6                            ; End of function Deform_SLZ_2
00007CA6                            
00007CA6                            ; ---------------------------------------------------------------------------
00007CA6                            ; Spring Yard Zone background layer deformation	code
00007CA6                            ; ---------------------------------------------------------------------------
00007CA6                            
00007CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CA6                            
00007CA6                            
00007CA6                            Deform_SYZ:				; XREF: Deform_Index
00007CA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007CAA 48C4                       		ext.l	d4
00007CAC ED84                       		asl.l	#6,d4
00007CAE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007CB2 48C5                       		ext.l	d5
00007CB4 E985                       		asl.l	#4,d5
00007CB6 2205                       		move.l	d5,d1
00007CB8 E385                       		asl.l	#1,d5
00007CBA DA81                       		add.l	d1,d5
00007CBC 6100 0000                  		bsr.w	ScrollBlock1
00007CC0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007CC6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007CCA 323C 00DF                  		move.w	#$DF,d1
00007CCE 3038 F700                  		move.w	($FFFFF700).w,d0
00007CD2 4440                       		neg.w	d0
00007CD4 4840                       		swap	d0
00007CD6 3038 F708                  		move.w	($FFFFF708).w,d0
00007CDA 4440                       		neg.w	d0
00007CDC                            
00007CDC                            loc_653C:
00007CDC 22C0                       		move.l	d0,(a1)+
00007CDE 51C9 FFFC                  		dbf	d1,loc_653C
00007CE2 4E75                       		rts	
00007CE4                            ; End of function Deform_SYZ
00007CE4                            
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            ; Scrap	Brain Zone background layer deformation	code
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            
00007CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE4                            
00007CE4                            
00007CE4                            Deform_SBZ:				; XREF: Deform_Index
00007CE4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007CE8 48C4                       		ext.l	d4
00007CEA ED84                       		asl.l	#6,d4
00007CEC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007CF0 48C5                       		ext.l	d5
00007CF2 E985                       		asl.l	#4,d5
00007CF4 E385                       		asl.l	#1,d5
00007CF6 6100 0000                  		bsr.w	ScrollBlock1
00007CFA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D00 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D04 323C 00DF                  		move.w	#$DF,d1
00007D08 3038 F700                  		move.w	($FFFFF700).w,d0
00007D0C 4440                       		neg.w	d0
00007D0E 4840                       		swap	d0
00007D10 3038 F708                  		move.w	($FFFFF708).w,d0
00007D14 4440                       		neg.w	d0
00007D16                            
00007D16                            loc_6576:
00007D16 22C0                       		move.l	d0,(a1)+
00007D18 51C9 FFFC                  		dbf	d1,loc_6576
00007D1C 4E75                       		rts	
00007D1E                            ; End of function Deform_SBZ
00007D1E                            
00007D1E                            ; ---------------------------------------------------------------------------
00007D1E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007D1E                            ; ---------------------------------------------------------------------------
00007D1E                            
00007D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D1E                            
00007D1E                            
00007D1E                            ScrollHoriz:				; XREF: DeformBgLayer
00007D1E 3838 F700                  		move.w	($FFFFF700).w,d4
00007D22 6100                       		bsr.s	ScrollHoriz2
00007D24 3038 F700                  		move.w	($FFFFF700).w,d0
00007D28 0240 0010                  		andi.w	#$10,d0
00007D2C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007D30 B300                       		eor.b	d1,d0
00007D32 6600                       		bne.s	locret_65B0
00007D34 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007D3A 3038 F700                  		move.w	($FFFFF700).w,d0
00007D3E 9044                       		sub.w	d4,d0
00007D40 6A00                       		bpl.s	loc_65AA
00007D42 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007D48 4E75                       		rts	
00007D4A                            ; ===========================================================================
00007D4A                            
00007D4A                            loc_65AA:
00007D4A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007D50                            
00007D50                            locret_65B0:
00007D50 4E75                       		rts	
00007D52                            ; End of function ScrollHoriz
00007D52                            
00007D52                            
00007D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D52                            
00007D52                            
00007D52                            ScrollHoriz2:				; XREF: ScrollHoriz
00007D52 3038 D008                  		move.w	($FFFFD008).w,d0
00007D56 9078 F700                  		sub.w	($FFFFF700).w,d0
00007D5A 0440 0090                  		subi.w	#$90,d0
00007D5E 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007D60 0440 0010                  		subi.w	#$10,d0
00007D64 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
00007D66 4278 F73A                  		clr.w	($FFFFF73A).w
00007D6A 4E75                       		rts
00007D6C                            ; ===========================================================================
00007D6C                            
00007D6C                            loc_65CC:
00007D6C 0C40 0010                  		cmpi.w	#$10,d0
00007D70 6500                       		bcs.s	loc_65D6
00007D72 303C 0010                  		move.w	#$10,d0
00007D76                            
00007D76                            loc_65D6:
00007D76 D078 F700                  		add.w	($FFFFF700).w,d0
00007D7A B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007D7E 6D00                       		blt.s	loc_65E4
00007D80 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007D84                            
00007D84                            loc_65E4:
00007D84 3200                       		move.w	d0,d1
00007D86 9278 F700                  		sub.w	($FFFFF700).w,d1
00007D8A E141                       		asl.w	#8,d1
00007D8C 31C0 F700                  		move.w	d0,($FFFFF700).w
00007D90 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007D94 4E75                       		rts	
00007D96                            ; ===========================================================================
00007D96                            
00007D96                            loc_65F6:
00007D96 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
00007D9A 6400                       		bcc.s	Left_NoMax				; if not, branch
00007D9C 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
00007DA0                            
00007DA0                            Left_NoMax:
00007DA0 D078 F700                  		add.w	($FFFFF700).w,d0
00007DA4 B078 F728                  		cmp.w	($FFFFF728).w,d0
00007DA8 6EDA                       		bgt.s	loc_65E4
00007DAA 3038 F728                  		move.w	($FFFFF728).w,d0
00007DAE 60D4                       		bra.s	loc_65E4
00007DB0                            ; End of function ScrollHoriz2
00007DB0                            
00007DB0                            ; ===========================================================================
00007DB0 4A40                       		tst.w	d0
00007DB2 6A00                       		bpl.s	loc_6610
00007DB4 303C FFFE                  		move.w	#-2,d0
00007DB8 60DC                       		bra.s	loc_65F6
00007DBA                            ; ===========================================================================
00007DBA                            
00007DBA                            loc_6610:
00007DBA 303C 0002                  		move.w	#2,d0
00007DBE 60AC                       		bra.s	loc_65CC
00007DC0                            
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            ; Subroutine to	scroll the level vertically as Sonic moves
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            
00007DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC0                            
00007DC0                            
00007DC0                            ScrollVertical:				; XREF: DeformBgLayer
00007DC0 7200                       		moveq	#0,d1
00007DC2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007DC6 9078 F704                  		sub.w	($FFFFF704).w,d0
00007DCA 0838 0002 D022             		btst	#2,($FFFFD022).w
00007DD0 6700                       		beq.s	loc_662A
00007DD2 5B40                       		subq.w	#5,d0
00007DD4                            
00007DD4                            loc_662A:
00007DD4 0838 0001 D022             		btst	#1,($FFFFD022).w
00007DDA 6700                       		beq.s	loc_664A
00007DDC 0640 0020                  		addi.w	#$20,d0
00007DE0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007DE4 6500                       		bcs.s	loc_6696
00007DE6 0440 0040                  		subi.w	#$40,d0
00007DEA 6400                       		bcc.s	loc_6696
00007DEC 4A38 F75C                  		tst.b	($FFFFF75C).w
00007DF0 6600                       		bne.s	loc_66A8
00007DF2 6000                       		bra.s	loc_6656
00007DF4                            ; ===========================================================================
00007DF4                            
00007DF4                            loc_664A:
00007DF4 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007DF8 6600                       		bne.s	loc_665C
00007DFA 4A38 F75C                  		tst.b	($FFFFF75C).w
00007DFE 6600                       		bne.s	loc_66A8
00007E00                            
00007E00                            loc_6656:
00007E00 4278 F73C                  		clr.w	($FFFFF73C).w
00007E04 4E75                       		rts	
00007E06                            ; ===========================================================================
00007E06                            
00007E06                            loc_665C:
00007E06 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007E0C 6600                       		bne.s	loc_6684
00007E0E 3238 D014                  		move.w	($FFFFD014).w,d1
00007E12 6A00                       		bpl.s	loc_666C
00007E14 4441                       		neg.w	d1
00007E16                            
00007E16                            loc_666C:
00007E16 0C41 0800                  		cmpi.w	#$800,d1
00007E1A 6400                       		bcc.s	loc_6696
00007E1C 323C 0600                  		move.w	#$600,d1
00007E20 0C40 0006                  		cmpi.w	#6,d0
00007E24 6E00                       		bgt.s	loc_66F6
00007E26 0C40 FFFA                  		cmpi.w	#-6,d0
00007E2A 6D00                       		blt.s	loc_66C0
00007E2C 6000                       		bra.s	loc_66AE
00007E2E                            ; ===========================================================================
00007E2E                            
00007E2E                            loc_6684:
00007E2E 323C 0200                  		move.w	#$200,d1
00007E32 0C40 0002                  		cmpi.w	#2,d0
00007E36 6E00                       		bgt.s	loc_66F6
00007E38 0C40 FFFE                  		cmpi.w	#-2,d0
00007E3C 6D00                       		blt.s	loc_66C0
00007E3E 6000                       		bra.s	loc_66AE
00007E40                            ; ===========================================================================
00007E40                            
00007E40                            loc_6696:
00007E40 323C 1000                  		move.w	#$1000,d1
00007E44 0C40 0010                  		cmpi.w	#$10,d0
00007E48 6E00                       		bgt.s	loc_66F6
00007E4A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007E4E 6D00                       		blt.s	loc_66C0
00007E50 6000                       		bra.s	loc_66AE
00007E52                            ; ===========================================================================
00007E52                            
00007E52                            loc_66A8:
00007E52 7000                       		moveq	#0,d0
00007E54 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007E58                            
00007E58                            loc_66AE:
00007E58 7200                       		moveq	#0,d1
00007E5A 3200                       		move.w	d0,d1
00007E5C D278 F704                  		add.w	($FFFFF704).w,d1
00007E60 4A40                       		tst.w	d0
00007E62 6A00 0000                  		bpl.w	loc_6700
00007E66 6000 0000                  		bra.w	loc_66CC
00007E6A                            ; ===========================================================================
00007E6A                            
00007E6A                            loc_66C0:
00007E6A 4441                       		neg.w	d1
00007E6C 48C1                       		ext.l	d1
00007E6E E181                       		asl.l	#8,d1
00007E70 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007E74 4841                       		swap	d1
00007E76                            
00007E76                            loc_66CC:
00007E76 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007E7A 6E00                       		bgt.s	loc_6724
00007E7C 0C41 FF00                  		cmpi.w	#-$100,d1
00007E80 6E00                       		bgt.s	loc_66F0
00007E82 0241 07FF                  		andi.w	#$7FF,d1
00007E86 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007E8C 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007E92 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007E98 6000                       		bra.s	loc_6724
00007E9A                            ; ===========================================================================
00007E9A                            
00007E9A                            loc_66F0:
00007E9A 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007E9E 6000                       		bra.s	loc_6724
00007EA0                            ; ===========================================================================
00007EA0                            
00007EA0                            loc_66F6:
00007EA0 48C1                       		ext.l	d1
00007EA2 E181                       		asl.l	#8,d1
00007EA4 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007EA8 4841                       		swap	d1
00007EAA                            
00007EAA                            loc_6700:
00007EAA B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007EAE 6D00                       		blt.s	loc_6724
00007EB0 0441 0800                  		subi.w	#$800,d1
00007EB4 6500                       		bcs.s	loc_6720
00007EB6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007EBC 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007EC2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007EC8 6000                       		bra.s	loc_6724
00007ECA                            ; ===========================================================================
00007ECA                            
00007ECA                            loc_6720:
00007ECA 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007ECE                            
00007ECE                            loc_6724:
00007ECE 3838 F704                  		move.w	($FFFFF704).w,d4
00007ED2 4841                       		swap	d1
00007ED4 2601                       		move.l	d1,d3
00007ED6 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007EDA E09B                       		ror.l	#8,d3
00007EDC 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007EE0 21C1 F704                  		move.l	d1,($FFFFF704).w
00007EE4 3038 F704                  		move.w	($FFFFF704).w,d0
00007EE8 0240 0010                  		andi.w	#$10,d0
00007EEC 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007EF0 B300                       		eor.b	d1,d0
00007EF2 6600                       		bne.s	locret_6766
00007EF4 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007EFA 3038 F704                  		move.w	($FFFFF704).w,d0
00007EFE 9044                       		sub.w	d4,d0
00007F00 6A00                       		bpl.s	loc_6760
00007F02 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007F08 4E75                       		rts	
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            loc_6760:
00007F0A 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007F10                            
00007F10                            locret_6766:
00007F10 4E75                       		rts	
00007F12                            ; End of function ScrollVertical
00007F12                            
00007F12                            
00007F12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F12                            
00007F12                            
00007F12                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00007F12 2438 F708                  		move.l	($FFFFF708).w,d2
00007F16 2002                       		move.l	d2,d0
00007F18 D084                       		add.l	d4,d0
00007F1A 21C0 F708                  		move.l	d0,($FFFFF708).w
00007F1E 2200                       		move.l	d0,d1
00007F20 4841                       		swap	d1
00007F22 0241 0010                  		andi.w	#$10,d1
00007F26 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007F2A B701                       		eor.b	d3,d1
00007F2C 6600                       		bne.s	loc_679C
00007F2E 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007F34 9082                       		sub.l	d2,d0
00007F36 6A00                       		bpl.s	loc_6796
00007F38 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007F3E 6000                       		bra.s	loc_679C
00007F40                            ; ===========================================================================
00007F40                            
00007F40                            loc_6796:
00007F40 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007F46                            
00007F46                            loc_679C:
00007F46 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007F4A 2003                       		move.l	d3,d0
00007F4C D085                       		add.l	d5,d0
00007F4E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007F52 2200                       		move.l	d0,d1
00007F54 4841                       		swap	d1
00007F56 0241 0010                  		andi.w	#$10,d1
00007F5A 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007F5E B501                       		eor.b	d2,d1
00007F60 6600                       		bne.s	locret_67D0
00007F62 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007F68 9083                       		sub.l	d3,d0
00007F6A 6A00                       		bpl.s	loc_67CA
00007F6C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007F72 4E75                       		rts	
00007F74                            ; ===========================================================================
00007F74                            
00007F74                            loc_67CA:
00007F74 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007F7A                            
00007F7A                            locret_67D0:
00007F7A 4E75                       		rts	
00007F7C                            ; End of function ScrollBlock1
00007F7C                            
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            ScrollBlock2:				; XREF: Deform_SLZ
00007F7C 2438 F708                  		move.l	($FFFFF708).w,d2
00007F80 2002                       		move.l	d2,d0
00007F82 D084                       		add.l	d4,d0
00007F84 21C0 F708                  		move.l	d0,($FFFFF708).w
00007F88 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007F8C 2003                       		move.l	d3,d0
00007F8E D085                       		add.l	d5,d0
00007F90 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007F94 2200                       		move.l	d0,d1
00007F96 4841                       		swap	d1
00007F98 0241 0010                  		andi.w	#$10,d1
00007F9C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007FA0 B501                       		eor.b	d2,d1
00007FA2 6600                       		bne.s	locret_6812
00007FA4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007FAA 9083                       		sub.l	d3,d0
00007FAC 6A00                       		bpl.s	loc_680C
00007FAE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007FB4 4E75                       		rts	
00007FB6                            ; ===========================================================================
00007FB6                            
00007FB6                            loc_680C:
00007FB6 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007FBC                            
00007FBC                            locret_6812:
00007FBC 4E75                       		rts	
00007FBE                            ; End of function ScrollBlock2
00007FBE                            
00007FBE                            
00007FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FBE                            
00007FBE                            
00007FBE                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007FBE 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007FC2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007FC6 3200                       		move.w	d0,d1
00007FC8 0241 0010                  		andi.w	#$10,d1
00007FCC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007FD0 B501                       		eor.b	d2,d1
00007FD2 6600                       		bne.s	locret_6842
00007FD4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007FDA 9043                       		sub.w	d3,d0
00007FDC 6A00                       		bpl.s	loc_683C
00007FDE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007FE4 4E75                       		rts	
00007FE6                            ; ===========================================================================
00007FE6                            
00007FE6                            loc_683C:
00007FE6 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007FEC                            
00007FEC                            locret_6842:
00007FEC 4E75                       		rts	
00007FEE                            ; End of function ScrollBlock3
00007FEE                            
00007FEE                            
00007FEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FEE                            
00007FEE                            
00007FEE                            ScrollBlock4:				; XREF: Deform_GHZ
00007FEE 3438 F710                  		move.w	($FFFFF710).w,d2
00007FF2 3638 F714                  		move.w	($FFFFF714).w,d3
00007FF6 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007FFA 48C0                       		ext.l	d0
00007FFC EF80                       		asl.l	#7,d0
00007FFE D1B8 F710                  		add.l	d0,($FFFFF710).w
00008002 3038 F710                  		move.w	($FFFFF710).w,d0
00008006 0240 0010                  		andi.w	#$10,d0
0000800A 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000800E B300                       		eor.b	d1,d0
00008010 6600                       		bne.s	locret_6884
00008012 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00008018 3038 F710                  		move.w	($FFFFF710).w,d0
0000801C 9042                       		sub.w	d2,d0
0000801E 6A00                       		bpl.s	loc_687E
00008020 08F8 0002 F758             		bset	#2,($FFFFF758).w
00008026 6000                       		bra.s	locret_6884
00008028                            ; ===========================================================================
00008028                            
00008028                            loc_687E:
00008028 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000802E                            
0000802E                            locret_6884:
0000802E 4E75                       		rts	
00008030                            ; End of function ScrollBlock4
00008030                            
00008030                            
00008030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008030                            
00008030                            
00008030                            sub_6886:				; XREF: loc_C44
00008030 4BF9 00C0 0004             		lea	($C00004).l,a5
00008036 4DF9 00C0 0000             		lea	($C00000).l,a6
0000803C 45F8 F756                  		lea	($FFFFF756).w,a2
00008040 47F8 F708                  		lea	($FFFFF708).w,a3
00008044 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008048 343C 6000                  		move.w	#$6000,d2
0000804C 6100 0000                  		bsr.w	sub_6954
00008050 45F8 F758                  		lea	($FFFFF758).w,a2
00008054 47F8 F710                  		lea	($FFFFF710).w,a3
00008058 6000 0000                  		bra.w	sub_69F4
0000805C                            ; End of function sub_6886
0000805C                            
0000805C                            ; ---------------------------------------------------------------------------
0000805C                            ; Subroutine to	display	correct	tiles as you move
0000805C                            ; ---------------------------------------------------------------------------
0000805C                            
0000805C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000805C                            
0000805C                            
0000805C                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000805C 4BF9 00C0 0004             		lea	($C00004).l,a5
00008062 4DF9 00C0 0000             		lea	($C00000).l,a6
00008068 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000806C 47F8 FF18                  		lea	($FFFFFF18).w,a3
00008070 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008074 343C 6000                  		move.w	#$6000,d2
00008078 6100 0000                  		bsr.w	sub_6954
0000807C 45F8 FF34                  		lea	($FFFFFF34).w,a2
00008080 47F8 FF20                  		lea	($FFFFFF20).w,a3
00008084 6100 0000                  		bsr.w	sub_69F4
00008088 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000808C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00008090 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008094 343C 4000                  		move.w	#$4000,d2
00008098 4A12                       		tst.b	(a2)
0000809A 6700                       		beq.s	locret_6952
0000809C 0892 0000                  		bclr	#0,(a2)
000080A0 6700                       		beq.s	loc_6908
000080A2 78F0                       		moveq	#-$10,d4
000080A4 7AF0                       		moveq	#-$10,d5
000080A6 6100 0000                  		bsr.w	sub_6C20
000080AA 78F0                       		moveq	#-$10,d4
000080AC 7AF0                       		moveq	#-$10,d5
000080AE 6100 0000                  		bsr.w	sub_6AD8
000080B2                            
000080B2                            loc_6908:
000080B2 0892 0001                  		bclr	#1,(a2)
000080B6 6700                       		beq.s	loc_6922
000080B8 383C 00E0                  		move.w	#$E0,d4
000080BC 7AF0                       		moveq	#-$10,d5
000080BE 6100 0000                  		bsr.w	sub_6C20
000080C2 383C 00E0                  		move.w	#$E0,d4
000080C6 7AF0                       		moveq	#-$10,d5
000080C8 6100 0000                  		bsr.w	sub_6AD8
000080CC                            
000080CC                            loc_6922:
000080CC 0892 0002                  		bclr	#2,(a2)
000080D0 6700                       		beq.s	loc_6938
000080D2 78F0                       		moveq	#-$10,d4
000080D4 7AF0                       		moveq	#-$10,d5
000080D6 6100 0000                  		bsr.w	sub_6C20
000080DA 78F0                       		moveq	#-$10,d4
000080DC 7AF0                       		moveq	#-$10,d5
000080DE 6100 0000                  		bsr.w	sub_6B04
000080E2                            
000080E2                            loc_6938:
000080E2 0892 0003                  		bclr	#3,(a2)
000080E6 6700                       		beq.s	locret_6952
000080E8 78F0                       		moveq	#-$10,d4
000080EA 3A3C 0140                  		move.w	#$140,d5
000080EE 6100 0000                  		bsr.w	sub_6C20
000080F2 78F0                       		moveq	#-$10,d4
000080F4 3A3C 0140                  		move.w	#$140,d5
000080F8 6100 0000                  		bsr.w	sub_6B04
000080FC                            
000080FC                            locret_6952:
000080FC 4E75                       		rts	
000080FE                            ; End of function LoadTilesAsYouMove
000080FE                            
000080FE                            
000080FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080FE                            
000080FE                            
000080FE                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000080FE 4A12                       		tst.b	(a2)
00008100 6700 0000                  		beq.w	locret_69F2
00008104 0892 0000                  		bclr	#0,(a2)
00008108 6700                       		beq.s	loc_6972
0000810A 78F0                       		moveq	#-$10,d4
0000810C 7AF0                       		moveq	#-$10,d5
0000810E 6100 0000                  		bsr.w	sub_6C20
00008112 78F0                       		moveq	#-$10,d4
00008114 7AF0                       		moveq	#-$10,d5
00008116 7C1F                       		moveq	#$1F,d6
00008118 6100 0000                  		bsr.w	sub_6ADA
0000811C                            
0000811C                            loc_6972:
0000811C 0892 0001                  		bclr	#1,(a2)
00008120 6700                       		beq.s	loc_698E
00008122 383C 00E0                  		move.w	#$E0,d4
00008126 7AF0                       		moveq	#-$10,d5
00008128 6100 0000                  		bsr.w	sub_6C20
0000812C 383C 00E0                  		move.w	#$E0,d4
00008130 7AF0                       		moveq	#-$10,d5
00008132 7C1F                       		moveq	#$1F,d6
00008134 6100 0000                  		bsr.w	sub_6ADA
00008138                            
00008138                            loc_698E:
00008138 0892 0002                  		bclr	#2,(a2)
0000813C 6700                       		beq.s	loc_69BE
0000813E 78F0                       		moveq	#-$10,d4
00008140 7AF0                       		moveq	#-$10,d5
00008142 6100 0000                  		bsr.w	sub_6C20
00008146 78F0                       		moveq	#-$10,d4
00008148 7AF0                       		moveq	#-$10,d5
0000814A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000814E 322B 0004                  		move.w	4(a3),d1
00008152 0241 FFF0                  		andi.w	#-$10,d1
00008156 9C41                       		sub.w	d1,d6
00008158 6D00                       		blt.s	loc_69BE
0000815A E84E                       		lsr.w	#4,d6
0000815C 0C46 000F                  		cmpi.w	#$F,d6
00008160 6500                       		bcs.s	loc_69BA
00008162 7C0F                       		moveq	#$F,d6
00008164                            
00008164                            loc_69BA:
00008164 6100 0000                  		bsr.w	sub_6B06
00008168                            
00008168                            loc_69BE:
00008168 0892 0003                  		bclr	#3,(a2)
0000816C 6700                       		beq.s	locret_69F2
0000816E 78F0                       		moveq	#-$10,d4
00008170 3A3C 0140                  		move.w	#$140,d5
00008174 6100 0000                  		bsr.w	sub_6C20
00008178 78F0                       		moveq	#-$10,d4
0000817A 3A3C 0140                  		move.w	#$140,d5
0000817E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008182 322B 0004                  		move.w	4(a3),d1
00008186 0241 FFF0                  		andi.w	#-$10,d1
0000818A 9C41                       		sub.w	d1,d6
0000818C 6D00                       		blt.s	locret_69F2
0000818E E84E                       		lsr.w	#4,d6
00008190 0C46 000F                  		cmpi.w	#$F,d6
00008194 6500                       		bcs.s	loc_69EE
00008196 7C0F                       		moveq	#$F,d6
00008198                            
00008198                            loc_69EE:
00008198 6100 0000                  		bsr.w	sub_6B06
0000819C                            
0000819C                            locret_69F2:
0000819C 4E75                       		rts	
0000819E                            ; End of function sub_6954
0000819E                            
0000819E                            
0000819E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000819E                            
0000819E                            
0000819E                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000819E 4A12                       		tst.b	(a2)
000081A0 6700 0000                  		beq.w	locret_6A80
000081A4 0892 0002                  		bclr	#2,(a2)
000081A8 6700                       		beq.s	loc_6A3E
000081AA 0C53 0010                  		cmpi.w	#$10,(a3)
000081AE 6500                       		bcs.s	loc_6A3E
000081B0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000081B4 322B 0004                  		move.w	4(a3),d1
000081B8 0241 FFF0                  		andi.w	#-$10,d1
000081BC 9841                       		sub.w	d1,d4
000081BE 3F04                       		move.w	d4,-(sp)
000081C0 7AF0                       		moveq	#-$10,d5
000081C2 6100 0000                  		bsr.w	sub_6C20
000081C6 381F                       		move.w	(sp)+,d4
000081C8 7AF0                       		moveq	#-$10,d5
000081CA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000081CE 322B 0004                  		move.w	4(a3),d1
000081D2 0241 FFF0                  		andi.w	#-$10,d1
000081D6 9C41                       		sub.w	d1,d6
000081D8 6D00                       		blt.s	loc_6A3E
000081DA E84E                       		lsr.w	#4,d6
000081DC 0446 000E                  		subi.w	#$E,d6
000081E0 6400                       		bcc.s	loc_6A3E
000081E2 4446                       		neg.w	d6
000081E4 6100 0000                  		bsr.w	sub_6B06
000081E8                            
000081E8                            loc_6A3E:
000081E8 0892 0003                  		bclr	#3,(a2)
000081EC 6700                       		beq.s	locret_6A80
000081EE 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000081F2 322B 0004                  		move.w	4(a3),d1
000081F6 0241 FFF0                  		andi.w	#-$10,d1
000081FA 9841                       		sub.w	d1,d4
000081FC 3F04                       		move.w	d4,-(sp)
000081FE 3A3C 0140                  		move.w	#$140,d5
00008202 6100 0000                  		bsr.w	sub_6C20
00008206 381F                       		move.w	(sp)+,d4
00008208 3A3C 0140                  		move.w	#$140,d5
0000820C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008210 322B 0004                  		move.w	4(a3),d1
00008214 0241 FFF0                  		andi.w	#-$10,d1
00008218 9C41                       		sub.w	d1,d6
0000821A 6D00                       		blt.s	locret_6A80
0000821C E84E                       		lsr.w	#4,d6
0000821E 0446 000E                  		subi.w	#$E,d6
00008222 6400                       		bcc.s	locret_6A80
00008224 4446                       		neg.w	d6
00008226 6100 0000                  		bsr.w	sub_6B06
0000822A                            
0000822A                            locret_6A80:
0000822A 4E75                       		rts	
0000822C                            ; End of function sub_69F4
0000822C                            
0000822C                            ; ===========================================================================
0000822C 4A12                       		tst.b	(a2)
0000822E 6700                       		beq.s	locret_6AD6
00008230 0892 0002                  		bclr	#2,(a2)
00008234 6700                       		beq.s	loc_6AAC
00008236 383C 00D0                  		move.w	#$D0,d4
0000823A 322B 0004                  		move.w	4(a3),d1
0000823E 0241 FFF0                  		andi.w	#-$10,d1
00008242 9841                       		sub.w	d1,d4
00008244 3F04                       		move.w	d4,-(sp)
00008246 7AF0                       		moveq	#-$10,d5
00008248 6100 0000                  		bsr.w	sub_6C3C
0000824C 381F                       		move.w	(sp)+,d4
0000824E 7AF0                       		moveq	#-$10,d5
00008250 7C02                       		moveq	#2,d6
00008252 6100 0000                  		bsr.w	sub_6B06
00008256                            
00008256                            loc_6AAC:
00008256 0892 0003                  		bclr	#3,(a2)
0000825A 6700                       		beq.s	locret_6AD6
0000825C 383C 00D0                  		move.w	#$D0,d4
00008260 322B 0004                  		move.w	4(a3),d1
00008264 0241 FFF0                  		andi.w	#-$10,d1
00008268 9841                       		sub.w	d1,d4
0000826A 3F04                       		move.w	d4,-(sp)
0000826C 3A3C 0140                  		move.w	#$140,d5
00008270 6100 0000                  		bsr.w	sub_6C3C
00008274 381F                       		move.w	(sp)+,d4
00008276 3A3C 0140                  		move.w	#$140,d5
0000827A 7C02                       		moveq	#2,d6
0000827C 6100 0000                  		bsr.w	sub_6B06
00008280                            
00008280                            locret_6AD6:
00008280 4E75                       		rts	
00008282                            
00008282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008282                            
00008282                            
00008282                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00008282 7C15                       		moveq	#$15,d6
00008284                            ; End of function sub_6AD8
00008284                            
00008284                            
00008284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008284                            
00008284                            
00008284                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00008284 2E3C 0080 0000             		move.l	#$800000,d7
0000828A 2200                       		move.l	d0,d1
0000828C                            
0000828C                            loc_6AE2:
0000828C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008290 6100 0000                  		bsr.w	sub_6BD6
00008294 2001                       		move.l	d1,d0
00008296 6100 0000                  		bsr.w	sub_6B32
0000829A 5801                       		addq.b	#4,d1
0000829C 0201 007F                  		andi.b	#$7F,d1
000082A0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000082A4 0645 0010                  		addi.w	#$10,d5
000082A8 51CE FFE2                  		dbf	d6,loc_6AE2
000082AC 4E75                       		rts	
000082AE                            ; End of function sub_6ADA
000082AE                            
000082AE                            
000082AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082AE                            
000082AE                            
000082AE                            sub_6B04:				; XREF: LoadTilesAsYouMove
000082AE 7C0F                       		moveq	#$F,d6
000082B0                            ; End of function sub_6B04
000082B0                            
000082B0                            
000082B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B0                            ; main draw section
000082B0                            
000082B0                            sub_6B06:
000082B0 2E3C 0080 0000             		move.l	#$800000,d7
000082B6 2200                       		move.l	d0,d1
000082B8                            
000082B8                            loc_6B0E:
000082B8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000082BC 6100 0000                  		bsr.w	sub_6BD6
000082C0 2001                       		move.l	d1,d0
000082C2 6100 0000                  		bsr.w	sub_6B32
000082C6 0641 0100                  		addi.w	#$100,d1
000082CA 0241 0FFF                  		andi.w	#$FFF,d1
000082CE 4CDF 0030                  		movem.l	(sp)+,d4-d5
000082D2 0644 0010                  		addi.w	#$10,d4
000082D6 51CE FFE0                  		dbf	d6,loc_6B0E
000082DA 4E75                       		rts	
000082DC                            ; End of function sub_6B06
000082DC                            
000082DC                            
000082DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082DC                            
000082DC                            
000082DC                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000082DC 8042                       		or.w	d2,d0
000082DE 4840                       		swap	d0
000082E0 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
000082E4 6600                       		bne.s	loc_6B6E
000082E6 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
000082EA 6600                       		bne.s	loc_6B4E
000082EC 2A80                       		move.l	d0,(a5)
000082EE 2C99                       		move.l	(a1)+,(a6)
000082F0 D087                       		add.l	d7,d0
000082F2 2A80                       		move.l	d0,(a5)
000082F4 2C99                       		move.l	(a1)+,(a6)
000082F6 4E75                       		rts	
000082F8                            ; ===========================================================================
000082F8                            
000082F8                            loc_6B4E:
000082F8 2A80                       		move.l	d0,(a5)
000082FA 2819                       		move.l	(a1)+,d4
000082FC 0A84 0800 0800             		eori.l	#$8000800,d4
00008302 4844                       		swap	d4
00008304 2C84                       		move.l	d4,(a6)
00008306 D087                       		add.l	d7,d0
00008308 2A80                       		move.l	d0,(a5)
0000830A 2819                       		move.l	(a1)+,d4
0000830C 0A84 0800 0800             		eori.l	#$8000800,d4
00008312 4844                       		swap	d4
00008314 2C84                       		move.l	d4,(a6)
00008316 4E75                       		rts	
00008318                            ; ===========================================================================
00008318                            
00008318                            loc_6B6E:
00008318 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
0000831C 6600                       		bne.s	loc_6B90
0000831E 2A80                       		move.l	d0,(a5)
00008320 2A19                       		move.l	(a1)+,d5
00008322 2819                       		move.l	(a1)+,d4
00008324 0A84 1000 1000             		eori.l	#$10001000,d4
0000832A 2C84                       		move.l	d4,(a6)
0000832C D087                       		add.l	d7,d0
0000832E 2A80                       		move.l	d0,(a5)
00008330 0A85 1000 1000             		eori.l	#$10001000,d5
00008336 2C85                       		move.l	d5,(a6)
00008338 4E75                       		rts	
0000833A                            ; ===========================================================================
0000833A                            
0000833A                            loc_6B90:
0000833A 2A80                       		move.l	d0,(a5)
0000833C 2A19                       		move.l	(a1)+,d5
0000833E 2819                       		move.l	(a1)+,d4
00008340 0A84 1800 1800             		eori.l	#$18001800,d4
00008346 4844                       		swap	d4
00008348 2C84                       		move.l	d4,(a6)
0000834A D087                       		add.l	d7,d0
0000834C 2A80                       		move.l	d0,(a5)
0000834E 0A85 1800 1800             		eori.l	#$18001800,d5
00008354 4845                       		swap	d5
00008356 2C85                       		move.l	d5,(a6)
00008358 4E75                       		rts	
0000835A                            ; End of function sub_6B32
0000835A                            
0000835A                            ; ===========================================================================
0000835A 4E75                       		rts	
0000835C                            ; ===========================================================================
0000835C 2A80                       		move.l	d0,(a5)
0000835E 3A3C 2000                  		move.w	#$2000,d5
00008362 3819                       		move.w	(a1)+,d4
00008364 D845                       		add.w	d5,d4
00008366 3C84                       		move.w	d4,(a6)
00008368 3819                       		move.w	(a1)+,d4
0000836A D845                       		add.w	d5,d4
0000836C 3C84                       		move.w	d4,(a6)
0000836E D087                       		add.l	d7,d0
00008370 2A80                       		move.l	d0,(a5)
00008372 3819                       		move.w	(a1)+,d4
00008374 D845                       		add.w	d5,d4
00008376 3C84                       		move.w	d4,(a6)
00008378 3819                       		move.w	(a1)+,d4
0000837A D845                       		add.w	d5,d4
0000837C 3C84                       		move.w	d4,(a6)
0000837E 4E75                       		rts	
00008380                            
00008380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008380                            ; Reading from layout
00008380                            
00008380                            sub_6BD6:
00008380 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
00008384 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
00008388 DA53                       		add.w	(a3),d5					; MJ: load X position to d5
0000838A 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
0000838C 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
00008390 E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
00008392 3005                       		move.w	d5,d0					; MJ: copy to d0
00008394 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
00008396 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
0000839A E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
0000839C D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
0000839E 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
000083A0 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
000083A4 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
000083A8 EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
000083AA 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
000083AE 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
000083B2 D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
000083B4 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
000083B6 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
000083B8 3610                       		move.w	(a0),d3
000083BA 0243 03FF                  		andi.w	#$3FF,d3
000083BE E74B                       		lsl.w	#3,d3
000083C0 D2C3                       		adda.w	d3,a1
000083C2                            
000083C2                            locret_6C1E:
000083C2 4E75                       		rts	
000083C4                            ; End of function sub_6BD6
000083C4                            
000083C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C4                            ; getting VRam location
000083C4                            
000083C4                            sub_6C20:
000083C4 D86B 0004                  		add.w	4(a3),d4
000083C8 DA53                       		add.w	(a3),d5
000083CA 0244 00F0                  		andi.w	#$F0,d4
000083CE 0245 01F0                  		andi.w	#$1F0,d5
000083D2 E94C                       		lsl.w	#4,d4
000083D4 E44D                       		lsr.w	#2,d5
000083D6 D845                       		add.w	d5,d4
000083D8 7003                       		moveq	#3,d0
000083DA 4840                       		swap	d0
000083DC 3004                       		move.w	d4,d0
000083DE 4E75                       		rts	
000083E0                            ; End of function sub_6C20
000083E0                            
000083E0                            
000083E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083E0                            ; not used
000083E0                            
000083E0                            
000083E0                            sub_6C3C:
000083E0 D86B 0004                  		add.w	4(a3),d4
000083E4 DA53                       		add.w	(a3),d5
000083E6 0244 00F0                  		andi.w	#$F0,d4
000083EA 0245 01F0                  		andi.w	#$1F0,d5
000083EE E94C                       		lsl.w	#4,d4
000083F0 E44D                       		lsr.w	#2,d5
000083F2 D845                       		add.w	d5,d4
000083F4 7002                       		moveq	#2,d0
000083F6 4840                       		swap	d0
000083F8 3004                       		move.w	d4,d0
000083FA 4E75                       		rts	
000083FC                            ; End of function sub_6C3C
000083FC                            
000083FC                            ; ---------------------------------------------------------------------------
000083FC                            ; Subroutine to	load tiles as soon as the level	appears
000083FC                            ; ---------------------------------------------------------------------------
000083FC                            
000083FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083FC                            
000083FC                            
000083FC                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000083FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00008402 4DF9 00C0 0000             		lea	($C00000).l,a6
00008408 47F8 F700                  		lea	($FFFFF700).w,a3
0000840C 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008410 343C 4000                  		move.w	#$4000,d2
00008414 6100                       		bsr.s	LoadTilesFromStart2
00008416 47F8 F708                  		lea	($FFFFF708).w,a3
0000841A 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
0000841E 343C 6000                  		move.w	#$6000,d2
00008422                            ; End of function LoadTilesFromStart
00008422                            
00008422                            
00008422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008422                            
00008422                            
00008422                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00008422 78F0                       		moveq	#-$10,d4
00008424 7C0F                       		moveq	#$F,d6
00008426                            
00008426                            loc_6C82:
00008426 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000842A 7A00                       		moveq	#0,d5
0000842C 3204                       		move.w	d4,d1
0000842E 6100 FF94                  		bsr.w	sub_6C20
00008432 3801                       		move.w	d1,d4
00008434 7A00                       		moveq	#0,d5
00008436 7C1F                       		moveq	#$1F,d6
00008438 6100 FE4A                  		bsr.w	sub_6ADA
0000843C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008440 0644 0010                  		addi.w	#$10,d4
00008444 51CE FFE0                  		dbf	d6,loc_6C82
00008448 4E75                       		rts	
0000844A                            ; End of function LoadTilesFromStart2
0000844A                            
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            ; Main Load Block loading subroutine
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            
0000844A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000844A                            
0000844A                            
0000844A                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000844A 7000                       		moveq	#0,d0
0000844C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008450 E948                       		lsl.w	#4,d0
00008452 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00008458 45F2 0000                  		lea	(a2,d0.w),a2
0000845C 2F0A                       		move.l	a2,-(sp)
0000845E 588A                       		addq.l	#4,a2
00008460 205A                       		movea.l	(a2)+,a0
00008462 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00008466 303C 0000                  		move.w	#0,d0
0000846A 6100 9002                  		bsr.w	EniDec
0000846E 205A                       		movea.l	(a2)+,a0
00008470 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00008476 6100 9174                  		bsr.w	KosDec
0000847A 6100 0000                  		bsr.w	LevelLayoutLoad
0000847E 301A                       		move.w	(a2)+,d0
00008480 3012                       		move.w	(a2),d0
00008482 0240 00FF                  		andi.w	#$FF,d0
00008486 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000848C 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000848E 700C                       		moveq	#$C,d0		; use SB3 Palette
00008490                            
00008490                            MLB_ChkSBZPal:
00008490 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00008496 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00008498 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000849E 6600                       		bne.s	MLB_NormalPal	; if not, branch
000084A0                            
000084A0                            MLB_UsePal0E:
000084A0 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
000084A2                            
000084A2                            MLB_NormalPal:
000084A2 6100 9AF0                  		bsr.w	PalLoad1	; load Palette (based on	d0)
000084A6 245F                       		movea.l	(sp)+,a2
000084A8 584A                       		addq.w	#4,a2
000084AA 7000                       		moveq	#0,d0
000084AC 1012                       		move.b	(a2),d0
000084AE 6700                       		beq.s	locret_6D10
000084B0 6100 8E1E                  		bsr.w	LoadPLC		; load pattern load cues
000084B4                            
000084B4                            locret_6D10:
000084B4 4E75                       		rts	
000084B6                            ; End of function MainLoadBlockLoad
000084B6                            
000084B6                            ; ---------------------------------------------------------------------------
000084B6                            ; Level	layout loading subroutine
000084B6                            ; ---------------------------------------------------------------------------
000084B6                            
000084B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084B6                            ; This method now releases free ram space from A408 - A7FF
000084B6                            
000084B6                            LevelLayoutLoad:
000084B6 3038 FE10                  		move.w	($FFFFFE10).w,d0
000084BA ED08                       		lsl.b	#6,d0
000084BC E848                       		lsr.w	#4,d0
000084BE 3400                       		move.w	d0,d2
000084C0 D040                       		add.w	d0,d0
000084C2 D042                       		add.w	d2,d0
000084C4 43F9 0000 0000             		lea	(Level_Index).l,a1
000084CA 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
000084CE 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
000084D2 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
000084D6 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
000084DA 4E75                       		rts						; MJ: Return
000084DC                            
000084DC                            ; End of function LevelLayoutLoad2
000084DC                            
000084DC                            ; ---------------------------------------------------------------------------
000084DC                            ; Dynamic screen resize	loading	subroutine
000084DC                            ; ---------------------------------------------------------------------------
000084DC                            
000084DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084DC                            
000084DC                            
000084DC                            DynScrResizeLoad:			; XREF: DeformBgLayer
000084DC 7000                       		moveq	#0,d0
000084DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000084E2 D040                       		add.w	d0,d0
000084E4 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000084E8 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000084EC 7202                       		moveq	#2,d1
000084EE 3038 F726                  		move.w	($FFFFF726).w,d0
000084F2 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000084F6 6700                       		beq.s	locret_6DAA
000084F8 6400                       		bcc.s	loc_6DAC
000084FA 4441                       		neg.w	d1
000084FC 3038 F704                  		move.w	($FFFFF704).w,d0
00008500 B078 F726                  		cmp.w	($FFFFF726).w,d0
00008504 6300                       		bls.s	loc_6DA0
00008506 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000850A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00008510                            
00008510                            loc_6DA0:
00008510 D378 F72E                  		add.w	d1,($FFFFF72E).w
00008514 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000851A                            
0000851A                            locret_6DAA:
0000851A 4E75                       		rts	
0000851C                            ; ===========================================================================
0000851C                            
0000851C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000851C 3038 F704                  		move.w	($FFFFF704).w,d0
00008520 5040                       		addq.w	#8,d0
00008522 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00008526 6500                       		bcs.s	loc_6DC4
00008528 0838 0001 D022             		btst	#1,($FFFFD022).w
0000852E 6700                       		beq.s	loc_6DC4
00008530 D241                       		add.w	d1,d1
00008532 D241                       		add.w	d1,d1
00008534                            
00008534                            loc_6DC4:
00008534 D378 F72E                  		add.w	d1,($FFFFF72E).w
00008538 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000853E 4E75                       		rts	
00008540                            ; End of function DynScrResizeLoad
00008540                            
00008540                            ; ===========================================================================
00008540                            ; ---------------------------------------------------------------------------
00008540                            ; Offset index for dynamic screen resizing
00008540                            ; ---------------------------------------------------------------------------
00008540 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00008544 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00008548 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000854C 0000                       		dc.w Resize_Ending-Resize_Index
0000854E                            ; ===========================================================================
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            ; Green	Hill Zone dynamic screen resizing
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            
0000854E                            Resize_GHZ:				; XREF: Resize_Index
0000854E 7000                       		moveq	#0,d0
00008550 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008554 D040                       		add.w	d0,d0
00008556 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000855A 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000855E                            ; ===========================================================================
0000855E 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00008560 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00008562 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00008564                            ; ===========================================================================
00008564                            
00008564                            Resize_GHZ1:
00008564 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000856A 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00008570 6500                       		bcs.s	locret_6E08	; if not, branch
00008572 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00008578                            
00008578                            locret_6E08:
00008578 4E75                       		rts	
0000857A                            ; ===========================================================================
0000857A                            
0000857A                            Resize_GHZ2:
0000857A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008580 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00008586 6500                       		bcs.s	locret_6E3A
00008588 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000858E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00008594 6500                       		bcs.s	locret_6E3A
00008596 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000859C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000085A2 6500                       		bcs.s	locret_6E3A
000085A4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000085AA                            
000085AA                            locret_6E3A:
000085AA 4E75                       		rts	
000085AC                            ; ===========================================================================
000085AC                            
000085AC                            Resize_GHZ3:
000085AC 7000                       		moveq	#0,d0
000085AE 1038 F742                  		move.b	($FFFFF742).w,d0
000085B2 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000085B6 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000085BA                            ; ===========================================================================
000085BA 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000085BC 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000085BE 0000                       		dc.w Resize_GHZ3end-off_6E4A
000085C0                            ; ===========================================================================
000085C0                            
000085C0                            Resize_GHZ3main:
000085C0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000085C6 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000085CC 6500                       		bcs.s	locret_6E96
000085CE 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000085D4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000085DA 6500                       		bcs.s	locret_6E96
000085DC 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000085E2 6500                       		bcs.s	loc_6E98
000085E4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000085EA 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000085F0 6400                       		bcc.s	loc_6E8E
000085F2 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000085F8 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000085FE                            
000085FE                            loc_6E8E:
000085FE 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008604 6400                       		bcc.s	loc_6E98
00008606                            
00008606                            locret_6E96:
00008606 4E75                       		rts	
00008608                            ; ===========================================================================
00008608                            
00008608                            loc_6E98:
00008608 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000860E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008612 4E75                       		rts	
00008614                            ; ===========================================================================
00008614                            
00008614                            Resize_GHZ3boss:
00008614 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000861A 6400                       		bcc.s	loc_6EB0
0000861C 5538 F742                  		subq.b	#2,($FFFFF742).w
00008620                            
00008620                            loc_6EB0:
00008620 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00008626 6500                       		bcs.s	locret_6EE8
00008628 6100 0000                  		bsr.w	SingleObjLoad
0000862C 6600                       		bne.s	loc_6ED0
0000862E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00008632 337C 2A60 0008             		move.w	#$2A60,8(a1)
00008638 337C 0280 000C             		move.w	#$280,$C(a1)
0000863E                            
0000863E                            loc_6ED0:
0000863E 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008644 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000864A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000864E 7011                       		moveq	#$11,d0
00008650 6000 8C7E                  		bra.w	LoadPLC		; load boss patterns
00008654                            ; ===========================================================================
00008654                            
00008654                            locret_6EE8:
00008654 4E75                       		rts	
00008656                            ; ===========================================================================
00008656                            
00008656                            Resize_GHZ3end:
00008656 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000865C 4E75                       		rts	
0000865E                            ; ===========================================================================
0000865E                            ; ---------------------------------------------------------------------------
0000865E                            ; Labyrinth Zone dynamic screen	resizing
0000865E                            ; ---------------------------------------------------------------------------
0000865E                            
0000865E                            Resize_lz:				; XREF: Resize_Index
0000865E 7000                       		moveq	#0,d0
00008660 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008664 D040                       		add.w	d0,d0
00008666 303B 0000                  		move.w	Resize_lzx(pc,d0.w),d0
0000866A 4EFB 0000                  		jmp	Resize_lzx(pc,d0.w)
0000866E                            ; ===========================================================================
0000866E 0000                       Resize_lzx:	dc.w Resize_lz12-Resize_lzx
00008670 0000                       		dc.w Resize_lz12-Resize_lzx
00008672 0000                       		dc.w Resize_lz3-Resize_lzx
00008674 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008676                            ; ===========================================================================
00008676                            
00008676                            Resize_lz12:
00008676 4E75                       		rts	
00008678                            ; ===========================================================================
00008678                            
00008678                            Resize_lz3:
00008678 7000                       		moveq	#0,d0
0000867A 1038 F742                  		move.b	($FFFFF742).w,d0
0000867E 303B 0000                  		move.w	lz_7118(pc,d0.w),d0
00008682 4EFB 0000                  		jmp	lz_7118(pc,d0.w)
00008686                            ; ===========================================================================
00008686 0000                       lz_7118:	dc.w Resize_lz3main-lz_7118
00008688 0000                       		dc.w Resize_lz3boss-lz_7118
0000868A 0000                       		dc.w Resize_lz3end-lz_7118
0000868C                            ; ===========================================================================
0000868C                            
0000868C                            Resize_lz3main:
0000868C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008692 6500                       		bcs.s	lz_7130
00008694 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000869A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000869E                            
0000869E                            lz_7130:
0000869E 4E75                       		rts	
000086A0                            ; ===========================================================================
000086A0                            
000086A0                            Resize_lz3boss:
000086A0 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000086A6 6500                       		bcs.s	lz_715C
000086A8 6100 0000                  		bsr.w	SingleObjLoad
000086AC 6600                       		bne.s	lz_7144
000086AE 12BC 0077                  		move.b	#$77,(a1)	; load LZ boss	object
000086B2                            
000086B2                            lz_7144:
000086B2 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000086B8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000086BE 5438 F742                  		addq.b	#2,($FFFFF742).w
000086C2 7011                       		moveq	#$11,d0
000086C4 6000 8C0A                  		bra.w	LoadPLC		; load boss patterns
000086C8                            ; ===========================================================================
000086C8                            
000086C8                            lz_715C:
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            Resize_lz3end:
000086CA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000086D0 4E75                       		rts
000086D2                            ; ===========================================================================
000086D2                            
000086D2                            Resize_SBZ3:
000086D2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000086D8 6500                       		bcs.s	locret_6F8C
000086DA 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000086E0 6400                       		bcc.s	locret_6F8C	; if not, branch
000086E2 4238 FE30                  		clr.b	($FFFFFE30).w
000086E6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000086EC 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000086F2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000086F8                            
000086F8                            locret_6F8C:
000086F8 4E75                       		rts	
000086FA                            ; ===========================================================================
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            ; Marble Zone dynamic screen resizing
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            
000086FA                            Resize_MZ:				; XREF: Resize_Index
000086FA 7000                       		moveq	#0,d0
000086FC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008700 D040                       		add.w	d0,d0
00008702 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008706 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000870A                            ; ===========================================================================
0000870A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000870C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000870E 0000                       		dc.w Resize_MZ3-Resize_MZx
00008710                            ; ===========================================================================
00008710                            
00008710                            Resize_MZ1:
00008710 7000                       		moveq	#0,d0
00008712 1038 F742                  		move.b	($FFFFF742).w,d0
00008716 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000871A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000871E                            ; ===========================================================================
0000871E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00008720 0000                       		dc.w loc_6FEA-off_6FB2
00008722 0000                       		dc.w loc_702E-off_6FB2
00008724 0000                       		dc.w loc_7050-off_6FB2
00008726                            ; ===========================================================================
00008726                            
00008726                            loc_6FBA:
00008726 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000872C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008732 6500                       		bcs.s	locret_6FE8
00008734 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000873A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008740 6500                       		bcs.s	locret_6FE8
00008742 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008748 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000874E 6500                       		bcs.s	locret_6FE8
00008750 5438 F742                  		addq.b	#2,($FFFFF742).w
00008754                            
00008754                            locret_6FE8:
00008754 4E75                       		rts	
00008756                            ; ===========================================================================
00008756                            
00008756                            loc_6FEA:
00008756 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000875C 6400                       		bcc.s	loc_6FF8
0000875E 5538 F742                  		subq.b	#2,($FFFFF742).w
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            loc_6FF8:
00008764 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000876A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008770 6400                       		bcc.s	locret_702C
00008772 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008778 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000877E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008784 6400                       		bcc.s	locret_702C
00008786 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000878C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008792 6500                       		bcs.s	locret_702C
00008794 5438 F742                  		addq.b	#2,($FFFFF742).w
00008798                            
00008798                            locret_702C:
00008798 4E75                       		rts	
0000879A                            ; ===========================================================================
0000879A                            
0000879A                            loc_702E:
0000879A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000087A0 6400                       		bcc.s	loc_703C
000087A2 5538 F742                  		subq.b	#2,($FFFFF742).w
000087A6 4E75                       		rts	
000087A8                            ; ===========================================================================
000087A8                            
000087A8                            loc_703C:
000087A8 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000087AE 6500                       		bcs.s	locret_704E
000087B0 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000087B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000087BA                            
000087BA                            locret_704E:
000087BA 4E75                       		rts	
000087BC                            ; ===========================================================================
000087BC                            
000087BC                            loc_7050:
000087BC 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000087C2 6500                       		bcs.s	locret_7072
000087C4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000087CA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000087D0 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000087D6 6500                       		bcs.s	locret_7072
000087D8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000087DE                            
000087DE                            locret_7072:
000087DE 4E75                       		rts	
000087E0                            ; ===========================================================================
000087E0                            
000087E0                            Resize_MZ2:
000087E0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000087E6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000087EC 6500                       		bcs.s	locret_7088
000087EE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000087F4                            
000087F4                            locret_7088:
000087F4 4E75                       		rts	
000087F6                            ; ===========================================================================
000087F6                            
000087F6                            Resize_MZ3:
000087F6 7000                       		moveq	#0,d0
000087F8 1038 F742                  		move.b	($FFFFF742).w,d0
000087FC 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008800 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008804                            ; ===========================================================================
00008804 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008806 0000                       		dc.w Resize_MZ3end-off_7098
00008808                            ; ===========================================================================
00008808                            
00008808                            Resize_MZ3boss:
00008808 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000880E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008814 6500                       		bcs.s	locret_70E8
00008816 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000881C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008822 6500                       		bcs.s	locret_70E8
00008824 6100 0000                  		bsr.w	SingleObjLoad
00008828 6600                       		bne.s	loc_70D0
0000882A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000882E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008834 337C 022C 000C             		move.w	#$22C,$C(a1)
0000883A                            
0000883A                            loc_70D0:
0000883A 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008840 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008846 5438 F742                  		addq.b	#2,($FFFFF742).w
0000884A 7011                       		moveq	#$11,d0
0000884C 6000 8A82                  		bra.w	LoadPLC		; load boss patterns
00008850                            ; ===========================================================================
00008850                            
00008850                            locret_70E8:
00008850 4E75                       		rts	
00008852                            ; ===========================================================================
00008852                            
00008852                            Resize_MZ3end:
00008852 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008858 4E75                       		rts	
0000885A                            ; ===========================================================================
0000885A                            ; ---------------------------------------------------------------------------
0000885A                            ; Star Light Zone dynamic screen resizing
0000885A                            ; ---------------------------------------------------------------------------
0000885A                            
0000885A                            Resize_SLZ:				; XREF: Resize_Index
0000885A 7000                       		moveq	#0,d0
0000885C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008860 D040                       		add.w	d0,d0
00008862 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008866 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000886A                            ; ===========================================================================
0000886A 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000886C 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000886E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008870                            ; ===========================================================================
00008870                            
00008870                            Resize_SLZ12:
00008870 4E75                       		rts	
00008872                            ; ===========================================================================
00008872                            
00008872                            Resize_SLZ3:
00008872 7000                       		moveq	#0,d0
00008874 1038 F742                  		move.b	($FFFFF742).w,d0
00008878 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000887C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008880                            ; ===========================================================================
00008880 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008882 0000                       		dc.w Resize_SLZ3boss-off_7118
00008884 0000                       		dc.w Resize_SLZ3end-off_7118
00008886                            ; ===========================================================================
00008886                            
00008886                            Resize_SLZ3main:
00008886 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000888C 6500                       		bcs.s	locret_7130
0000888E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008894 5438 F742                  		addq.b	#2,($FFFFF742).w
00008898                            
00008898                            locret_7130:
00008898 4E75                       		rts	
0000889A                            ; ===========================================================================
0000889A                            
0000889A                            Resize_SLZ3boss:
0000889A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000088A0 6500                       		bcs.s	locret_715C
000088A2 6100 0000                  		bsr.w	SingleObjLoad
000088A6 6600                       		bne.s	loc_7144
000088A8 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000088AC                            
000088AC                            loc_7144:
000088AC 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000088B2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000088B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000088BC 7011                       		moveq	#$11,d0
000088BE 6000 8A10                  		bra.w	LoadPLC		; load boss patterns
000088C2                            ; ===========================================================================
000088C2                            
000088C2                            locret_715C:
000088C2 4E75                       		rts	
000088C4                            ; ===========================================================================
000088C4                            
000088C4                            Resize_SLZ3end:
000088C4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000088CA 4E75                       		rts
000088CC 4E75                       		rts
000088CE                            ; ===========================================================================
000088CE                            ; ---------------------------------------------------------------------------
000088CE                            ; Spring Yard Zone dynamic screen resizing
000088CE                            ; ---------------------------------------------------------------------------
000088CE                            
000088CE                            Resize_SYZ:				; XREF: Resize_Index
000088CE 7000                       		moveq	#0,d0
000088D0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000088D4 D040                       		add.w	d0,d0
000088D6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000088DA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000088DE                            ; ===========================================================================
000088DE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000088E0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000088E2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000088E4                            ; ===========================================================================
000088E4                            
000088E4                            Resize_SYZ1:
000088E4 4E75                       		rts	
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            Resize_SYZ2:
000088E6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000088EC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000088F2 6500                       		bcs.s	locret_71A2
000088F4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000088FA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008900 6500                       		bcs.s	locret_71A2
00008902 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008908                            
00008908                            locret_71A2:
00008908 4E75                       		rts	
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            Resize_SYZ3:
0000890A 7000                       		moveq	#0,d0
0000890C 1038 F742                  		move.b	($FFFFF742).w,d0
00008910 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008914 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008918                            ; ===========================================================================
00008918 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000891A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000891C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000891E                            ; ===========================================================================
0000891E                            
0000891E                            Resize_SYZ3main:
0000891E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008924 6500                       		bcs.s	locret_71CE
00008926 6100 0000                  		bsr.w	SingleObjLoad
0000892A 6600                       		bne.s	locret_71CE
0000892C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008930 5438 F742                  		addq.b	#2,($FFFFF742).w
00008934                            
00008934                            locret_71CE:
00008934 4E75                       		rts	
00008936                            ; ===========================================================================
00008936                            
00008936                            Resize_SYZ3boss:
00008936 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000893C 6500                       		bcs.s	locret_7200
0000893E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008944 6100 0000                  		bsr.w	SingleObjLoad
00008948 6600                       		bne.s	loc_71EC
0000894A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000894E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008952                            
00008952                            loc_71EC:
00008952 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008958 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000895E 7011                       		moveq	#$11,d0
00008960 6000 896E                  		bra.w	LoadPLC		; load boss patterns
00008964                            ; ===========================================================================
00008964                            
00008964                            locret_7200:
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            Resize_SYZ3end:
00008966 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000896C 4E75                       		rts	
0000896E                            ; ===========================================================================
0000896E                            ; ---------------------------------------------------------------------------
0000896E                            ; Scrap	Brain Zone dynamic screen resizing
0000896E                            ; ---------------------------------------------------------------------------
0000896E                            
0000896E                            Resize_SBZ:				; XREF: Resize_Index
0000896E 7000                       		moveq	#0,d0
00008970 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008974 D040                       		add.w	d0,d0
00008976 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000897A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000897E                            ; ===========================================================================
0000897E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008980 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008982 0000                       		dc.w Resize_FZ-Resize_SBZx
00008984                            ; ===========================================================================
00008984                            
00008984                            Resize_SBZ1:
00008984 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000898A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008990 6500                       		bcs.s	locret_7242
00008992 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008998 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000899E 6500                       		bcs.s	locret_7242
000089A0 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000089A6                            
000089A6                            locret_7242:
000089A6 4E75                       		rts	
000089A8                            ; ===========================================================================
000089A8                            
000089A8                            Resize_SBZ2:
000089A8 7000                       		moveq	#0,d0
000089AA 1038 F742                  		move.b	($FFFFF742).w,d0
000089AE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000089B2 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000089B6                            ; ===========================================================================
000089B6 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000089B8 0000                       		dc.w Resize_SBZ2boss-off_7252
000089BA 0000                       		dc.w Resize_SBZ2boss2-off_7252
000089BC 0000                       		dc.w Resize_SBZ2end-off_7252
000089BE                            ; ===========================================================================
000089BE                            
000089BE                            Resize_SBZ2main:
000089BE 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000089C4 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000089CA 6500                       		bcs.s	locret_727A
000089CC 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000089D2 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000089D8 6500                       		bcs.s	locret_727A
000089DA 5438 F742                  		addq.b	#2,($FFFFF742).w
000089DE                            
000089DE                            locret_727A:
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            Resize_SBZ2boss:
000089E0 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000089E6 6500                       		bcs.s	locret_7298
000089E8 6100 0000                  		bsr.w	SingleObjLoad
000089EC 6600                       		bne.s	locret_7298
000089EE 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000089F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000089F6 701E                       		moveq	#$1E,d0
000089F8 6000 88D6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            locret_7298:
000089FC 4E75                       		rts	
000089FE                            ; ===========================================================================
000089FE                            
000089FE                            Resize_SBZ2boss2:
000089FE 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008A04 6500                       		bcs.s	loc_72B6
00008A06 6100 0000                  		bsr.w	SingleObjLoad
00008A0A 6600                       		bne.s	loc_72B0
00008A0C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008A10 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A14                            
00008A14                            loc_72B0:
00008A14 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008A1A                            
00008A1A                            loc_72B6:
00008A1A 6000                       		bra.s	loc_72C2
00008A1C                            ; ===========================================================================
00008A1C                            
00008A1C                            Resize_SBZ2end:
00008A1C 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008A22 6500                       		bcs.s	loc_72C2
00008A24 4E75                       		rts	
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            loc_72C2:
00008A26 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008A2C 4E75                       		rts	
00008A2E                            ; ===========================================================================
00008A2E                            
00008A2E                            Resize_FZ:
00008A2E 7000                       		moveq	#0,d0
00008A30 1038 F742                  		move.b	($FFFFF742).w,d0
00008A34 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008A38 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008A3C                            ; ===========================================================================
00008A3C 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008A40 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008A44 0000                       		dc.w Resize_FZend2-off_72D8
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            Resize_FZmain:
00008A46 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008A4C 6500                       		bcs.s	loc_72F4
00008A4E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A52 701F                       		moveq	#$1F,d0
00008A54 6100 887A                  		bsr.w	LoadPLC		; load FZ boss patterns
00008A58                            
00008A58                            loc_72F4:
00008A58 60CC                       		bra.s	loc_72C2
00008A5A                            ; ===========================================================================
00008A5A                            
00008A5A                            Resize_FZboss:
00008A5A 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008A60 6500                       		bcs.s	loc_7312
00008A62 6100 0000                  		bsr.w	SingleObjLoad
00008A66 6600                       		bne.s	loc_7312
00008A68 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008A6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A70 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008A76                            
00008A76                            loc_7312:
00008A76 60AE                       		bra.s	loc_72C2
00008A78                            ; ===========================================================================
00008A78                            
00008A78                            Resize_FZend:
00008A78 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008A7E 6500                       		bcs.s	loc_7320
00008A80 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A84                            
00008A84                            loc_7320:
00008A84 60A0                       		bra.s	loc_72C2
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            locret_7322:
00008A86 4E75                       		rts	
00008A88                            ; ===========================================================================
00008A88                            
00008A88                            Resize_FZend2:
00008A88 609C                       		bra.s	loc_72C2
00008A8A                            ; ===========================================================================
00008A8A                            ; ---------------------------------------------------------------------------
00008A8A                            ; Ending sequence dynamic screen resizing (empty)
00008A8A                            ; ---------------------------------------------------------------------------
00008A8A                            
00008A8A                            Resize_Ending:				; XREF: Resize_Index
00008A8A 4E75                       		rts	
00008A8C                            ; ===========================================================================
00008A8C                            ; ---------------------------------------------------------------------------
00008A8C                            ; Object 11 - GHZ bridge
00008A8C                            ; ---------------------------------------------------------------------------
00008A8C                            
00008A8C                            Obj11:					; XREF: Obj_Index
00008A8C 7000                       		moveq	#0,d0
00008A8E 1028 0024                  		move.b	$24(a0),d0
00008A92 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008A96 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008A9A                            ; ===========================================================================
00008A9A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008A9E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008AA2 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            Obj11_Main:				; XREF: Obj11_Index
00008AA6 5428 0024                  		addq.b	#2,$24(a0)
00008AAA 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008AB2 317C 438E 0002             		move.w	#$438E,2(a0)
00008AB8 117C 0004 0001             		move.b	#4,1(a0)
00008ABE 117C 0003 0018             		move.b	#3,$18(a0)
00008AC4 117C 0080 0019             		move.b	#$80,$19(a0)
00008ACA 3428 000C                  		move.w	$C(a0),d2
00008ACE 3628 0008                  		move.w	8(a0),d3
00008AD2 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008AD4 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008AD8 7200                       		moveq	#0,d1
00008ADA 1212                       		move.b	(a2),d1		; copy a2 to d1
00008ADC 14FC 0000                  		move.b	#0,(a2)+
00008AE0 3001                       		move.w	d1,d0
00008AE2 E248                       		lsr.w	#1,d0
00008AE4 E948                       		lsl.w	#4,d0
00008AE6 9640                       		sub.w	d0,d3
00008AE8 5501                       		subq.b	#2,d1
00008AEA 6500                       		bcs.s	Obj11_Action
00008AEC                            
00008AEC                            Obj11_MakeBdg:
00008AEC 6100 0000                  		bsr.w	SingleObjLoad
00008AF0 6600                       		bne.s	Obj11_Action
00008AF2 5228 0028                  		addq.b	#1,$28(a0)
00008AF6 B668 0008                  		cmp.w	8(a0),d3
00008AFA 6600                       		bne.s	loc_73B8
00008AFC 0643 0010                  		addi.w	#$10,d3
00008B00 3142 000C                  		move.w	d2,$C(a0)
00008B04 3142 003C                  		move.w	d2,$3C(a0)
00008B08 3A08                       		move.w	a0,d5
00008B0A 0445 D000                  		subi.w	#-$3000,d5
00008B0E EC4D                       		lsr.w	#6,d5
00008B10 0245 007F                  		andi.w	#$7F,d5
00008B14 14C5                       		move.b	d5,(a2)+
00008B16 5228 0028                  		addq.b	#1,$28(a0)
00008B1A                            
00008B1A                            loc_73B8:				; XREF: ROM:00007398j
00008B1A 3A09                       		move.w	a1,d5
00008B1C 0445 D000                  		subi.w	#-$3000,d5
00008B20 EC4D                       		lsr.w	#6,d5
00008B22 0245 007F                  		andi.w	#$7F,d5
00008B26 14C5                       		move.b	d5,(a2)+
00008B28 137C 000A 0024             		move.b	#$A,$24(a1)
00008B2E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008B30 3342 000C                  		move.w	d2,$C(a1)
00008B34 3342 003C                  		move.w	d2,$3C(a1)
00008B38 3343 0008                  		move.w	d3,8(a1)
00008B3C 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008B44 337C 438E 0002             		move.w	#$438E,2(a1)
00008B4A 137C 0004 0001             		move.b	#4,1(a1)
00008B50 137C 0003 0018             		move.b	#3,$18(a1)
00008B56 137C 0008 0019             		move.b	#8,$19(a1)
00008B5C 0643 0010                  		addi.w	#$10,d3
00008B60 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008B64                            
00008B64                            Obj11_Action:				; XREF: Obj11_Index
00008B64 6100                       		bsr.s	Obj11_Solid
00008B66 4A28 003E                  		tst.b	$3E(a0)
00008B6A 6700                       		beq.s	Obj11_Display
00008B6C 5928 003E                  		subq.b	#4,$3E(a0)
00008B70 6100 0000                  		bsr.w	Obj11_Bend
00008B74                            
00008B74                            Obj11_Display:
00008B74 6100 0000                  		bsr.w	DisplaySprite
00008B78 6000 0000                  		bra.w	Obj11_ChkDel
00008B7C                            
00008B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B7C                            
00008B7C                            
00008B7C                            Obj11_Solid:				; XREF: Obj11_Action
00008B7C 7200                       		moveq	#0,d1
00008B7E 1228 0028                  		move.b	$28(a0),d1
00008B82 E749                       		lsl.w	#3,d1
00008B84 3401                       		move.w	d1,d2
00008B86 5041                       		addq.w	#8,d1
00008B88 D442                       		add.w	d2,d2
00008B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00008B8E 4A69 0012                  		tst.w	$12(a1)
00008B92 6B00 0000                  		bmi.w	locret_751E
00008B96 3029 0008                  		move.w	8(a1),d0
00008B9A 9068 0008                  		sub.w	8(a0),d0
00008B9E D041                       		add.w	d1,d0
00008BA0 6B00 0000                  		bmi.w	locret_751E
00008BA4 B042                       		cmp.w	d2,d0
00008BA6 6400 0000                  		bcc.w	locret_751E
00008BAA 6000                       		bra.s	Platform2
00008BAC                            ; End of function Obj11_Solid
00008BAC                            
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            ; Platform subroutine
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            
00008BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BAC                            
00008BAC                            
00008BAC                            PlatformObject:
00008BAC 43F8 D000                  		lea	($FFFFD000).w,a1
00008BB0 4A69 0012                  		tst.w	$12(a1)
00008BB4 6B00 0000                  		bmi.w	locret_751E
00008BB8 3029 0008                  		move.w	8(a1),d0
00008BBC 9068 0008                  		sub.w	8(a0),d0
00008BC0 D041                       		add.w	d1,d0
00008BC2 6B00 0000                  		bmi.w	locret_751E
00008BC6 D241                       		add.w	d1,d1
00008BC8 B041                       		cmp.w	d1,d0
00008BCA 6400 0000                  		bcc.w	locret_751E
00008BCE                            
00008BCE                            Platform2:
00008BCE 3028 000C                  		move.w	$C(a0),d0
00008BD2 5140                       		subq.w	#8,d0
00008BD4                            
00008BD4                            Platform3:
00008BD4 3429 000C                  		move.w	$C(a1),d2
00008BD8 1229 0016                  		move.b	$16(a1),d1
00008BDC 4881                       		ext.w	d1
00008BDE D242                       		add.w	d2,d1
00008BE0 5841                       		addq.w	#4,d1
00008BE2 9041                       		sub.w	d1,d0
00008BE4 6200 0000                  		bhi.w	locret_751E
00008BE8 0C40 FFF0                  		cmpi.w	#-$10,d0
00008BEC 6500 0000                  		bcs.w	locret_751E
00008BF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008BF4 6B00 0000                  		bmi.w	locret_751E
00008BF8 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008BFE 6400 0000                  		bcc.w	locret_751E
00008C02 D440                       		add.w	d0,d2
00008C04 5642                       		addq.w	#3,d2
00008C06 3342 000C                  		move.w	d2,$C(a1)
00008C0A 5428 0024                  		addq.b	#2,$24(a0)
00008C0E                            
00008C0E                            loc_74AE:
00008C0E 0829 0003 0022             		btst	#3,$22(a1)
00008C14 6700                       		beq.s	loc_74DC
00008C16 7000                       		moveq	#0,d0
00008C18 1029 003D                  		move.b	$3D(a1),d0
00008C1C ED48                       		lsl.w	#6,d0
00008C1E 0680 00FF D000             		addi.l	#$FFD000,d0
00008C24 2440                       		movea.l	d0,a2
00008C26 08AA 0003 0022             		bclr	#3,$22(a2)
00008C2C 422A 0025                  		clr.b	$25(a2)
00008C30 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008C36 6600                       		bne.s	loc_74DC
00008C38 552A 0024                  		subq.b	#2,$24(a2)
00008C3C                            
00008C3C                            loc_74DC:
00008C3C 3008                       		move.w	a0,d0
00008C3E 0440 D000                  		subi.w	#-$3000,d0
00008C42 EC48                       		lsr.w	#6,d0
00008C44 0240 007F                  		andi.w	#$7F,d0
00008C48 1340 003D                  		move.b	d0,$3D(a1)
00008C4C 137C 0000 0026             		move.b	#0,$26(a1)
00008C52 337C 0000 0012             		move.w	#0,$12(a1)
00008C58 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008C5E 0829 0001 0022             		btst	#1,$22(a1)
00008C64 6700                       		beq.s	loc_7512
00008C66 2F08                       		move.l	a0,-(sp)
00008C68 2049                       		movea.l	a1,a0
00008C6A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008C70 205F                       		movea.l	(sp)+,a0
00008C72                            
00008C72                            loc_7512:
00008C72 08E9 0003 0022             		bset	#3,$22(a1)
00008C78 08E8 0003 0022             		bset	#3,$22(a0)
00008C7E                            
00008C7E                            locret_751E:
00008C7E 4E75                       		rts	
00008C80                            ; End of function PlatformObject
00008C80                            
00008C80                            ; ---------------------------------------------------------------------------
00008C80                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008C80                            ; ---------------------------------------------------------------------------
00008C80                            
00008C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C80                            
00008C80                            
00008C80                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008C80 43F8 D000                  		lea	($FFFFD000).w,a1
00008C84 4A69 0012                  		tst.w	$12(a1)
00008C88 6B00 FFF4                  		bmi.w	locret_751E
00008C8C 3029 0008                  		move.w	8(a1),d0
00008C90 9068 0008                  		sub.w	8(a0),d0
00008C94 D041                       		add.w	d1,d0
00008C96 6BE6                       		bmi.s	locret_751E
00008C98 D241                       		add.w	d1,d1
00008C9A B041                       		cmp.w	d1,d0
00008C9C 64E0                       		bcc.s	locret_751E
00008C9E 0828 0000 0001             		btst	#0,1(a0)
00008CA4 6700                       		beq.s	loc_754A
00008CA6 4640                       		not.w	d0
00008CA8 D041                       		add.w	d1,d0
00008CAA                            
00008CAA                            loc_754A:
00008CAA E248                       		lsr.w	#1,d0
00008CAC 7600                       		moveq	#0,d3
00008CAE 1632 0000                  		move.b	(a2,d0.w),d3
00008CB2 3028 000C                  		move.w	$C(a0),d0
00008CB6 9043                       		sub.w	d3,d0
00008CB8 6000 FF1A                  		bra.w	Platform3
00008CBC                            ; End of function SlopeObject
00008CBC                            
00008CBC                            
00008CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CBC                            
00008CBC                            
00008CBC                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008CBC 43F8 D000                  		lea	($FFFFD000).w,a1
00008CC0 4A69 0012                  		tst.w	$12(a1)
00008CC4 6B00 FFB8                  		bmi.w	locret_751E
00008CC8 3029 0008                  		move.w	8(a1),d0
00008CCC 9068 0008                  		sub.w	8(a0),d0
00008CD0 D041                       		add.w	d1,d0
00008CD2 6B00 FFAA                  		bmi.w	locret_751E
00008CD6 D241                       		add.w	d1,d1
00008CD8 B041                       		cmp.w	d1,d0
00008CDA 6400 FFA2                  		bcc.w	locret_751E
00008CDE 3028 000C                  		move.w	$C(a0),d0
00008CE2 9043                       		sub.w	d3,d0
00008CE4 6000 FEEE                  		bra.w	Platform3
00008CE8                            ; End of function Obj15_Solid
00008CE8                            
00008CE8                            ; ===========================================================================
00008CE8                            
00008CE8                            Obj11_Action2:				; XREF: Obj11_Index
00008CE8 6100                       		bsr.s	Obj11_WalkOff
00008CEA 6100 0000                  		bsr.w	DisplaySprite
00008CEE 6000 0000                  		bra.w	Obj11_ChkDel
00008CF2                            
00008CF2                            ; ---------------------------------------------------------------------------
00008CF2                            ; Subroutine allowing Sonic to walk off a bridge
00008CF2                            ; ---------------------------------------------------------------------------
00008CF2                            
00008CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF2                            
00008CF2                            
00008CF2                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008CF2 7200                       		moveq	#0,d1
00008CF4 1228 0028                  		move.b	$28(a0),d1
00008CF8 E749                       		lsl.w	#3,d1
00008CFA 3401                       		move.w	d1,d2
00008CFC 5041                       		addq.w	#8,d1
00008CFE 6100                       		bsr.s	ExitPlatform2
00008D00 6400                       		bcc.s	locret_75BE
00008D02 E848                       		lsr.w	#4,d0
00008D04 1140 003F                  		move.b	d0,$3F(a0)
00008D08 1028 003E                  		move.b	$3E(a0),d0
00008D0C 0C00 0040                  		cmpi.b	#$40,d0
00008D10 6700                       		beq.s	loc_75B6
00008D12 5828 003E                  		addq.b	#4,$3E(a0)
00008D16                            
00008D16                            loc_75B6:
00008D16 6100 0000                  		bsr.w	Obj11_Bend
00008D1A 6100 0000                  		bsr.w	Obj11_MoveSonic
00008D1E                            
00008D1E                            locret_75BE:
00008D1E 4E75                       		rts	
00008D20                            ; End of function Obj11_WalkOff
00008D20                            
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            
00008D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D20                            
00008D20                            
00008D20                            ExitPlatform:
00008D20 3401                       		move.w	d1,d2
00008D22                            
00008D22                            ExitPlatform2:
00008D22 D442                       		add.w	d2,d2
00008D24 43F8 D000                  		lea	($FFFFD000).w,a1
00008D28 0829 0001 0022             		btst	#1,$22(a1)
00008D2E 6600                       		bne.s	loc_75E0
00008D30 3029 0008                  		move.w	8(a1),d0
00008D34 9068 0008                  		sub.w	8(a0),d0
00008D38 D041                       		add.w	d1,d0
00008D3A 6B00                       		bmi.s	loc_75E0
00008D3C B042                       		cmp.w	d2,d0
00008D3E 6500                       		bcs.s	locret_75F2
00008D40                            
00008D40                            loc_75E0:
00008D40 08A9 0003 0022             		bclr	#3,$22(a1)
00008D46 117C 0002 0024             		move.b	#2,$24(a0)
00008D4C 08A8 0003 0022             		bclr	#3,$22(a0)
00008D52                            
00008D52                            locret_75F2:
00008D52 4E75                       		rts	
00008D54                            ; End of function ExitPlatform
00008D54                            
00008D54                            
00008D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D54                            
00008D54                            
00008D54                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008D54 7000                       		moveq	#0,d0
00008D56 1028 003F                  		move.b	$3F(a0),d0
00008D5A 1030 0029                  		move.b	$29(a0,d0.w),d0
00008D5E ED48                       		lsl.w	#6,d0
00008D60 0680 00FF D000             		addi.l	#$FFD000,d0
00008D66 2440                       		movea.l	d0,a2
00008D68 43F8 D000                  		lea	($FFFFD000).w,a1
00008D6C 302A 000C                  		move.w	$C(a2),d0
00008D70 5140                       		subq.w	#8,d0
00008D72 7200                       		moveq	#0,d1
00008D74 1229 0016                  		move.b	$16(a1),d1
00008D78 9041                       		sub.w	d1,d0
00008D7A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00008D7E 4E75                       		rts	
00008D80                            ; End of function Obj11_MoveSonic
00008D80                            
00008D80                            
00008D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D80                            
00008D80                            
00008D80                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00008D80 1028 003E                  		move.b	$3E(a0),d0
00008D84 6100 9AF4                  		bsr.w	CalcSine
00008D88 3800                       		move.w	d0,d4
00008D8A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008D90 7000                       		moveq	#0,d0
00008D92 1028 0028                  		move.b	$28(a0),d0
00008D96 E948                       		lsl.w	#4,d0
00008D98 7600                       		moveq	#0,d3
00008D9A 1628 003F                  		move.b	$3F(a0),d3
00008D9E 3403                       		move.w	d3,d2
00008DA0 D640                       		add.w	d0,d3
00008DA2 7A00                       		moveq	#0,d5
00008DA4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008DAA 1A35 3000                  		move.b	(a5,d3.w),d5
00008DAE 0243 000F                  		andi.w	#$F,d3
00008DB2 E94B                       		lsl.w	#4,d3
00008DB4 47F4 3000                  		lea	(a4,d3.w),a3
00008DB8 45E8 0029                  		lea	$29(a0),a2
00008DBC                            
00008DBC                            loc_765C:
00008DBC 7000                       		moveq	#0,d0
00008DBE 101A                       		move.b	(a2)+,d0
00008DC0 ED48                       		lsl.w	#6,d0
00008DC2 0680 00FF D000             		addi.l	#$FFD000,d0
00008DC8 2240                       		movea.l	d0,a1
00008DCA 7000                       		moveq	#0,d0
00008DCC 101B                       		move.b	(a3)+,d0
00008DCE 5240                       		addq.w	#1,d0
00008DD0 C0C5                       		mulu.w	d5,d0
00008DD2 C0C4                       		mulu.w	d4,d0
00008DD4 4840                       		swap	d0
00008DD6 D069 003C                  		add.w	$3C(a1),d0
00008DDA 3340 000C                  		move.w	d0,$C(a1)
00008DDE 51CA FFDC                  		dbf	d2,loc_765C
00008DE2 7000                       		moveq	#0,d0
00008DE4 1028 0028                  		move.b	$28(a0),d0
00008DE8 7600                       		moveq	#0,d3
00008DEA 1628 003F                  		move.b	$3F(a0),d3
00008DEE 5203                       		addq.b	#1,d3
00008DF0 9600                       		sub.b	d0,d3
00008DF2 4403                       		neg.b	d3
00008DF4 6B00                       		bmi.s	locret_76CA
00008DF6 3403                       		move.w	d3,d2
00008DF8 E94B                       		lsl.w	#4,d3
00008DFA 47F4 3000                  		lea	(a4,d3.w),a3
00008DFE D6C2                       		adda.w	d2,a3
00008E00 5342                       		subq.w	#1,d2
00008E02 6500                       		bcs.s	locret_76CA
00008E04                            
00008E04                            loc_76A4:
00008E04 7000                       		moveq	#0,d0
00008E06 101A                       		move.b	(a2)+,d0
00008E08 ED48                       		lsl.w	#6,d0
00008E0A 0680 00FF D000             		addi.l	#$FFD000,d0
00008E10 2240                       		movea.l	d0,a1
00008E12 7000                       		moveq	#0,d0
00008E14 1023                       		move.b	-(a3),d0
00008E16 5240                       		addq.w	#1,d0
00008E18 C0C5                       		mulu.w	d5,d0
00008E1A C0C4                       		mulu.w	d4,d0
00008E1C 4840                       		swap	d0
00008E1E D069 003C                  		add.w	$3C(a1),d0
00008E22 3340 000C                  		move.w	d0,$C(a1)
00008E26 51CA FFDC                  		dbf	d2,loc_76A4
00008E2A                            
00008E2A                            locret_76CA:
00008E2A 4E75                       		rts	
00008E2C                            ; End of function Obj11_Bend
00008E2C                            
00008E2C                            ; ===========================================================================
00008E2C                            ; ---------------------------------------------------------------------------
00008E2C                            ; GHZ bridge-bending data
00008E2C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008E2C                            ; ---------------------------------------------------------------------------
00008E2C                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008F3C                            		even
00008F3C                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000903C                            		even
0000903C                            
0000903C                            ; ===========================================================================
0000903C                            
0000903C                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000903C 3028 0008                  		move.w	8(a0),d0
00009040 0240 FF80                  		andi.w	#$FF80,d0
00009044 3238 F700                  		move.w	($FFFFF700).w,d1
00009048 0441 0080                  		subi.w	#$80,d1
0000904C 0241 FF80                  		andi.w	#$FF80,d1
00009050 9041                       		sub.w	d1,d0
00009052 0C40 0280                  		cmpi.w	#$280,d0
00009056 6200 0000                  		bhi.w	Obj11_DelAll
0000905A 4E75                       		rts	
0000905C                            ; ===========================================================================
0000905C                            
0000905C                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000905C 7400                       		moveq	#0,d2
0000905E 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00009062 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009064 5302                       		subq.b	#1,d2		; subtract 1
00009066 6500                       		bcs.s	Obj11_Delete
00009068                            
00009068                            Obj11_DelLoop:
00009068 7000                       		moveq	#0,d0
0000906A 101A                       		move.b	(a2)+,d0
0000906C ED48                       		lsl.w	#6,d0
0000906E 0680 00FF D000             		addi.l	#$FFD000,d0
00009074 2240                       		movea.l	d0,a1
00009076 B048                       		cmp.w	a0,d0
00009078 6700                       		beq.s	loc_791E
0000907A 6100 0000                  		bsr.w	DeleteObject2
0000907E                            
0000907E                            loc_791E:
0000907E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00009082                            
00009082                            Obj11_Delete:
00009082 6100 0000                  		bsr.w	DeleteObject
00009086 4E75                       		rts	
00009088                            ; ===========================================================================
00009088                            
00009088                            Obj11_Delete2:				; XREF: Obj11_Index
00009088 6100 0000                  		bsr.w	DeleteObject
0000908C 4E75                       		rts	
0000908E                            ; ===========================================================================
0000908E                            
0000908E                            Obj11_Display2:				; XREF: Obj11_Index
0000908E 6100 0000                  		bsr.w	DisplaySprite
00009092 4E75                       		rts	
00009094                            ; ===========================================================================
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Sprite mappings - GHZ	bridge
00009094                            ; ---------------------------------------------------------------------------
00009094                            Map_obj11:
00009094                            	include "_maps\obj11.asm"
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Sprite mappings - GHZ	bridge
00009094                            ; ---------------------------------------------------------------------------
00009094 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00009098 0000                       		dc.w byte_794B-Map_obj11
0000909A 01                         byte_793A:	dc.b 1
0000909B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000090A0 02                         byte_7940:	dc.b 2
000090A1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000090A6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000090AB 01                         byte_794B:	dc.b 1
000090AC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000090B2 00                         		even
000090B2 00                         		even
000090B2                            
000090B2                            ; ===========================================================================
000090B2                            ; ---------------------------------------------------------------------------
000090B2                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000090B2                            ;	    - spiked ball on a chain (SBZ)
000090B2                            ; ---------------------------------------------------------------------------
000090B2                            
000090B2                            Obj15:					; XREF: Obj_Index
000090B2 7000                       		moveq	#0,d0
000090B4 1028 0024                  		move.b	$24(a0),d0
000090B8 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000090BC 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000090C0                            ; ===========================================================================
000090C0 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000090C4 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000090C8 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000090CC 0000                       		dc.w Obj15_Action-Obj15_Index
000090CE                            ; ===========================================================================
000090CE                            
000090CE                            Obj15_Main:				; XREF: Obj15_Index
000090CE 5428 0024                  		addq.b	#2,$24(a0)
000090D2 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000090DA 317C 4380 0002             		move.w	#$4380,2(a0)
000090E0 117C 0004 0001             		move.b	#4,1(a0)
000090E6 117C 0003 0018             		move.b	#3,$18(a0)
000090EC 117C 0018 0019             		move.b	#$18,$19(a0)
000090F2 117C 0008 0016             		move.b	#8,$16(a0)
000090F8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000090FE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00009104 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000910A 6600                       		bne.s	Obj15_NotSLZ
0000910C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00009114 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000911A 117C 0020 0019             		move.b	#$20,$19(a0)
00009120 117C 0010 0016             		move.b	#$10,$16(a0)
00009126 117C 0099 0020             		move.b	#$99,$20(a0)
0000912C                            
0000912C                            Obj15_NotSLZ:
0000912C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009132 6600                       		bne.s	Obj15_SetLength
00009134 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000913C 317C 0391 0002             		move.w	#$391,2(a0)
00009142 117C 0018 0019             		move.b	#$18,$19(a0)
00009148 117C 0018 0016             		move.b	#$18,$16(a0)
0000914E 117C 0086 0020             		move.b	#$86,$20(a0)
00009154 117C 000C 0024             		move.b	#$C,$24(a0)
0000915A                            
0000915A                            Obj15_SetLength:
0000915A 1810                       		move.b	0(a0),d4
0000915C 7200                       		moveq	#0,d1
0000915E 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00009162 1212                       		move.b	(a2),d1		; move a2 to d1
00009164 3F01                       		move.w	d1,-(sp)
00009166 0241 000F                  		andi.w	#$F,d1
0000916A 14FC 0000                  		move.b	#0,(a2)+
0000916E 3601                       		move.w	d1,d3
00009170 E94B                       		lsl.w	#4,d3
00009172 5003                       		addq.b	#8,d3
00009174 1143 003C                  		move.b	d3,$3C(a0)
00009178 5103                       		subq.b	#8,d3
0000917A 4A28 001A                  		tst.b	$1A(a0)
0000917E 6700                       		beq.s	Obj15_MakeChain
00009180 5003                       		addq.b	#8,d3
00009182 5341                       		subq.w	#1,d1
00009184                            
00009184                            Obj15_MakeChain:
00009184 6100 0000                  		bsr.w	SingleObjLoad
00009188 6600                       		bne.s	loc_7A92
0000918A 5228 0028                  		addq.b	#1,$28(a0)
0000918E 3A09                       		move.w	a1,d5
00009190 0445 D000                  		subi.w	#-$3000,d5
00009194 EC4D                       		lsr.w	#6,d5
00009196 0245 007F                  		andi.w	#$7F,d5
0000919A 14C5                       		move.b	d5,(a2)+
0000919C 137C 000A 0024             		move.b	#$A,$24(a1)
000091A2 1284                       		move.b	d4,0(a1)	; load swinging	object
000091A4 2368 0004 0004             		move.l	4(a0),4(a1)
000091AA 3368 0002 0002             		move.w	2(a0),2(a1)
000091B0 08A9 0006 0002             		bclr	#6,2(a1)
000091B6 137C 0004 0001             		move.b	#4,1(a1)
000091BC 137C 0004 0018             		move.b	#4,$18(a1)
000091C2 137C 0008 0019             		move.b	#8,$19(a1)
000091C8 137C 0001 001A             		move.b	#1,$1A(a1)
000091CE 1343 003C                  		move.b	d3,$3C(a1)
000091D2 0403 0010                  		subi.b	#$10,d3
000091D6 6400                       		bcc.s	loc_7A8E
000091D8 137C 0002 001A             		move.b	#2,$1A(a1)
000091DE 137C 0003 0018             		move.b	#3,$18(a1)
000091E4 08E9 0006 0002             		bset	#6,2(a1)
000091EA                            
000091EA                            loc_7A8E:
000091EA 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000091EE                            
000091EE                            loc_7A92:
000091EE 3A08                       		move.w	a0,d5
000091F0 0445 D000                  		subi.w	#-$3000,d5
000091F4 EC4D                       		lsr.w	#6,d5
000091F6 0245 007F                  		andi.w	#$7F,d5
000091FA 14C5                       		move.b	d5,(a2)+
000091FC 317C 4080 0026             		move.w	#$4080,$26(a0)
00009202 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009208 321F                       		move.w	(sp)+,d1
0000920A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000920E 6700                       		beq.s	loc_7AD4	; if not, branch
00009210 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00009218 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000921E 117C 0001 001A             		move.b	#1,$1A(a0)
00009224 117C 0002 0018             		move.b	#2,$18(a0)
0000922A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00009230                            
00009230                            loc_7AD4:
00009230 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00009236 6700                       		beq.s	Obj15_Action	; if yes, branch
00009238                            
00009238                            Obj15_SetSolid:				; XREF: Obj15_Index
00009238 7200                       		moveq	#0,d1
0000923A 1228 0019                  		move.b	$19(a0),d1
0000923E 7600                       		moveq	#0,d3
00009240 1628 0016                  		move.b	$16(a0),d3
00009244 6100 FA76                  		bsr.w	Obj15_Solid
00009248                            
00009248                            Obj15_Action:				; XREF: Obj15_Index
00009248 6100 0000                  		bsr.w	Obj15_Move
0000924C 6100 0000                  		bsr.w	DisplaySprite
00009250 6000 0000                  		bra.w	Obj15_ChkDel
00009254                            ; ===========================================================================
00009254                            
00009254                            Obj15_Action2:				; XREF: Obj15_Index
00009254 7200                       		moveq	#0,d1
00009256 1228 0019                  		move.b	$19(a0),d1
0000925A 6100 FAC4                  		bsr.w	ExitPlatform
0000925E 3F28 0008                  		move.w	8(a0),-(sp)
00009262 6100 0000                  		bsr.w	Obj15_Move
00009266 341F                       		move.w	(sp)+,d2
00009268 7600                       		moveq	#0,d3
0000926A 1628 0016                  		move.b	$16(a0),d3
0000926E 5203                       		addq.b	#1,d3
00009270 6100 0000                  		bsr.w	MvSonicOnPtfm
00009274 6100 0000                  		bsr.w	DisplaySprite
00009278 6000 0000                  		bra.w	Obj15_ChkDel
0000927C                            
0000927C 4E75                       		rts
0000927E                            
0000927E                            ; ---------------------------------------------------------------------------
0000927E                            ; Subroutine to	change Sonic's position with a platform
0000927E                            ; ---------------------------------------------------------------------------
0000927E                            
0000927E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000927E                            
0000927E                            
0000927E                            MvSonicOnPtfm:
0000927E 43F8 D000                  		lea	($FFFFD000).w,a1
00009282 3028 000C                  		move.w	$C(a0),d0
00009286 9043                       		sub.w	d3,d0
00009288 6000                       		bra.s	MvSonic2
0000928A                            ; End of function MvSonicOnPtfm
0000928A                            
0000928A                            ; ---------------------------------------------------------------------------
0000928A                            ; Subroutine to	change Sonic's position with a platform
0000928A                            ; ---------------------------------------------------------------------------
0000928A                            
0000928A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000928A                            
0000928A                            
0000928A                            MvSonicOnPtfm2:
0000928A 43F8 D000                  		lea	($FFFFD000).w,a1
0000928E 3028 000C                  		move.w	$C(a0),d0
00009292 0440 0009                  		subi.w	#9,d0
00009296                            
00009296                            MvSonic2:
00009296 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000929A 6B00                       		bmi.s	locret_7B62
0000929C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000092A2 6400                       		bcc.s	locret_7B62
000092A4 4A78 FE08                  		tst.w	($FFFFFE08).w
000092A8 6600                       		bne.s	locret_7B62
000092AA 7200                       		moveq	#0,d1
000092AC 1229 0016                  		move.b	$16(a1),d1
000092B0 9041                       		sub.w	d1,d0
000092B2 3340 000C                  		move.w	d0,$C(a1)
000092B6 9468 0008                  		sub.w	8(a0),d2
000092BA 9569 0008                  		sub.w	d2,8(a1)
000092BE                            
000092BE                            locret_7B62:
000092BE 4E75                       		rts	
000092C0                            ; End of function MvSonicOnPtfm2
000092C0                            
000092C0                            
000092C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092C0                            
000092C0                            
000092C0                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000092C0 1038 FE78                  		move.b	($FFFFFE78).w,d0
000092C4 323C 0080                  		move.w	#$80,d1
000092C8 0828 0000 0022             		btst	#0,$22(a0)
000092CE 6700                       		beq.s	loc_7B78
000092D0 4440                       		neg.w	d0
000092D2 D041                       		add.w	d1,d0
000092D4                            
000092D4                            loc_7B78:
000092D4 6000                       		bra.s	Obj15_Move2
000092D6                            ; End of function Obj15_Move
000092D6                            
000092D6                            
000092D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092D6                            
000092D6                            
000092D6                            Obj48_Move:				; XREF: Obj48_Display2
000092D6 4A28 003D                  		tst.b	$3D(a0)
000092DA 6600                       		bne.s	loc_7B9C
000092DC 3028 003E                  		move.w	$3E(a0),d0
000092E0 5040                       		addq.w	#8,d0
000092E2 3140 003E                  		move.w	d0,$3E(a0)
000092E6 D168 0026                  		add.w	d0,$26(a0)
000092EA 0C40 0200                  		cmpi.w	#$200,d0
000092EE 6600                       		bne.s	loc_7BB6
000092F0 117C 0001 003D             		move.b	#1,$3D(a0)
000092F6 6000                       		bra.s	loc_7BB6
000092F8                            ; ===========================================================================
000092F8                            
000092F8                            loc_7B9C:
000092F8 3028 003E                  		move.w	$3E(a0),d0
000092FC 5140                       		subq.w	#8,d0
000092FE 3140 003E                  		move.w	d0,$3E(a0)
00009302 D168 0026                  		add.w	d0,$26(a0)
00009306 0C40 FE00                  		cmpi.w	#-$200,d0
0000930A 6600                       		bne.s	loc_7BB6
0000930C 117C 0000 003D             		move.b	#0,$3D(a0)
00009312                            
00009312                            loc_7BB6:
00009312 1028 0026                  		move.b	$26(a0),d0
00009316                            ; End of function Obj48_Move
00009316                            
00009316                            
00009316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009316                            
00009316                            
00009316                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00009316 6100 9562                  		bsr.w	CalcSine
0000931A 3428 0038                  		move.w	$38(a0),d2
0000931E 3628 003A                  		move.w	$3A(a0),d3
00009322 45E8 0028                  		lea	$28(a0),a2
00009326 7C00                       		moveq	#0,d6
00009328 1C1A                       		move.b	(a2)+,d6
0000932A                            
0000932A                            loc_7BCE:
0000932A 7800                       		moveq	#0,d4
0000932C 181A                       		move.b	(a2)+,d4
0000932E ED4C                       		lsl.w	#6,d4
00009330 0684 00FF D000             		addi.l	#$FFD000,d4
00009336 2244                       		movea.l	d4,a1
00009338 7800                       		moveq	#0,d4
0000933A 1829 003C                  		move.b	$3C(a1),d4
0000933E 2A04                       		move.l	d4,d5
00009340 C9C0                       		muls.w	d0,d4
00009342 E084                       		asr.l	#8,d4
00009344 CBC1                       		muls.w	d1,d5
00009346 E085                       		asr.l	#8,d5
00009348 D842                       		add.w	d2,d4
0000934A DA43                       		add.w	d3,d5
0000934C 3344 000C                  		move.w	d4,$C(a1)
00009350 3345 0008                  		move.w	d5,8(a1)
00009354 51CE FFD4                  		dbf	d6,loc_7BCE
00009358 4E75                       		rts	
0000935A                            ; End of function Obj15_Move2
0000935A                            
0000935A                            ; ===========================================================================
0000935A                            
0000935A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000935A 3028 003A                  		move.w	$3A(a0),d0
0000935E 0240 FF80                  		andi.w	#$FF80,d0
00009362 3238 F700                  		move.w	($FFFFF700).w,d1
00009366 0441 0080                  		subi.w	#$80,d1
0000936A 0241 FF80                  		andi.w	#$FF80,d1
0000936E 9041                       		sub.w	d1,d0
00009370 0C40 0280                  		cmpi.w	#$280,d0
00009374 6200 0000                  		bhi.w	Obj15_DelAll
00009378 4E75                       		rts	
0000937A                            ; ===========================================================================
0000937A                            
0000937A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000937A 7400                       		moveq	#0,d2
0000937C 45E8 0028                  		lea	$28(a0),a2
00009380 141A                       		move.b	(a2)+,d2
00009382                            
00009382                            Obj15_DelLoop:
00009382 7000                       		moveq	#0,d0
00009384 101A                       		move.b	(a2)+,d0
00009386 ED48                       		lsl.w	#6,d0
00009388 0680 00FF D000             		addi.l	#$FFD000,d0
0000938E 2240                       		movea.l	d0,a1
00009390 6100 0000                  		bsr.w	DeleteObject2
00009394 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00009398 4E75                       		rts	
0000939A                            ; ===========================================================================
0000939A                            
0000939A                            Obj15_Delete:				; XREF: Obj15_Index
0000939A 6100 0000                  		bsr.w	DeleteObject
0000939E 4E75                       		rts	
000093A0                            ; ===========================================================================
000093A0                            
000093A0                            Obj15_Display:				; XREF: Obj15_Index
000093A0 6000 0000                  		bra.w	DisplaySprite
000093A4                            ; ===========================================================================
000093A4                            ; ---------------------------------------------------------------------------
000093A4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000093A4                            ; ---------------------------------------------------------------------------
000093A4                            Map_obj15:
000093A4                            	include "_maps\obj15ghz.asm"
000093A4                            ; ---------------------------------------------------------------------------
000093A4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000093A4                            ; ---------------------------------------------------------------------------
000093A4 0000                       		dc.w byte_7C4E-Map_obj15
000093A6 0000                       		dc.w byte_7C59-Map_obj15
000093A8 0000                       		dc.w byte_7C5F-Map_obj15
000093AA 02                         byte_7C4E:	dc.b 2
000093AB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000093B0 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000093B5 01                         byte_7C59:	dc.b 1
000093B6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000093BB 01                         byte_7C5F:	dc.b 1
000093BC F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000093C2 00                         		even
000093C2 00                         		even
000093C2                            
000093C2                            ; ---------------------------------------------------------------------------
000093C2                            ; Sprite mappings - SLZ	swinging platforms
000093C2                            ; ---------------------------------------------------------------------------
000093C2                            Map_obj15a:
000093C2                            	include "_maps\obj15slz.asm"
000093C2                            ; ---------------------------------------------------------------------------
000093C2                            ; Sprite mappings - SLZ	swinging platforms
000093C2                            ; ---------------------------------------------------------------------------
000093C2 0000                       		dc.w byte_7C6C-Map_obj15a
000093C4 0000                       		dc.w byte_7C95-Map_obj15a
000093C6 0000                       		dc.w byte_7C9B-Map_obj15a
000093C8 08                         byte_7C6C:	dc.b 8
000093C9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000093CE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000093D3 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000093D8 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000093DD 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000093E2 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000093E7 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000093EC 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000093F1 01                         byte_7C95:	dc.b 1
000093F2 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000093F7 01                         byte_7C9B:	dc.b 1
000093F8 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000093FE 00                         		even
000093FE 00                         		even
000093FE                            
000093FE                            ; ===========================================================================
000093FE                            ; ---------------------------------------------------------------------------
000093FE                            ; Object 17 - helix of spikes on a pole	(GHZ)
000093FE                            ; ---------------------------------------------------------------------------
000093FE                            
000093FE                            Obj17:					; XREF: Obj_Index
000093FE 7000                       		moveq	#0,d0
00009400 1028 0024                  		move.b	$24(a0),d0
00009404 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00009408 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000940C                            ; ===========================================================================
0000940C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000940E 0000                       		dc.w Obj17_Action-Obj17_Index
00009410 0000                       		dc.w Obj17_Action-Obj17_Index
00009412 0000                       		dc.w Obj17_Delete-Obj17_Index
00009414 0000                       		dc.w Obj17_Display-Obj17_Index
00009416                            ; ===========================================================================
00009416                            
00009416                            Obj17_Main:				; XREF: Obj17_Index
00009416 5428 0024                  		addq.b	#2,$24(a0)
0000941A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00009422 317C 4398 0002             		move.w	#$4398,2(a0)
00009428 117C 0007 0022             		move.b	#7,$22(a0)
0000942E 117C 0004 0001             		move.b	#4,1(a0)
00009434 117C 0003 0018             		move.b	#3,$18(a0)
0000943A 117C 0008 0019             		move.b	#8,$19(a0)
00009440 3428 000C                  		move.w	$C(a0),d2
00009444 3628 0008                  		move.w	8(a0),d3
00009448 1810                       		move.b	0(a0),d4
0000944A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000944E 7200                       		moveq	#0,d1
00009450 1212                       		move.b	(a2),d1		; move a2 to d1
00009452 14FC 0000                  		move.b	#0,(a2)+
00009456 3001                       		move.w	d1,d0
00009458 E248                       		lsr.w	#1,d0
0000945A E948                       		lsl.w	#4,d0
0000945C 9640                       		sub.w	d0,d3
0000945E 5501                       		subq.b	#2,d1
00009460 6500                       		bcs.s	Obj17_Action
00009462 7C00                       		moveq	#0,d6
00009464                            
00009464                            Obj17_MakeHelix:
00009464 6100 0000                  		bsr.w	SingleObjLoad
00009468 6600                       		bne.s	Obj17_Action
0000946A 5228 0028                  		addq.b	#1,$28(a0)
0000946E 3A09                       		move.w	a1,d5
00009470 0445 D000                  		subi.w	#$D000,d5
00009474 EC4D                       		lsr.w	#6,d5
00009476 0245 007F                  		andi.w	#$7F,d5
0000947A 14C5                       		move.b	d5,(a2)+
0000947C 137C 0008 0024             		move.b	#8,$24(a1)
00009482 1284                       		move.b	d4,0(a1)
00009484 3342 000C                  		move.w	d2,$C(a1)
00009488 3343 0008                  		move.w	d3,8(a1)
0000948C 2368 0004 0004             		move.l	4(a0),4(a1)
00009492 337C 4398 0002             		move.w	#$4398,2(a1)
00009498 137C 0004 0001             		move.b	#4,1(a1)
0000949E 137C 0003 0018             		move.b	#3,$18(a1)
000094A4 137C 0008 0019             		move.b	#8,$19(a1)
000094AA 1346 003E                  		move.b	d6,$3E(a1)
000094AE 5206                       		addq.b	#1,d6
000094B0 0206 0007                  		andi.b	#7,d6
000094B4 0643 0010                  		addi.w	#$10,d3
000094B8 B668 0008                  		cmp.w	8(a0),d3
000094BC 6600                       		bne.s	loc_7D78
000094BE 1146 003E                  		move.b	d6,$3E(a0)
000094C2 5206                       		addq.b	#1,d6
000094C4 0206 0007                  		andi.b	#7,d6
000094C8 0643 0010                  		addi.w	#$10,d3
000094CC 5228 0028                  		addq.b	#1,$28(a0)
000094D0                            
000094D0                            loc_7D78:
000094D0 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000094D4                            
000094D4                            Obj17_Action:				; XREF: Obj17_Index
000094D4 6100 0000                  		bsr.w	Obj17_RotateSpikes
000094D8 6100 0000                  		bsr.w	DisplaySprite
000094DC 6000 0000                  		bra.w	Obj17_ChkDel
000094E0                            
000094E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094E0                            
000094E0                            
000094E0                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000094E0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000094E4 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000094EA D028 003E                  		add.b	$3E(a0),d0
000094EE 0200 0007                  		andi.b	#7,d0
000094F2 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000094F6 6600                       		bne.s	locret_7DA6
000094F8 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000094FE                            
000094FE                            locret_7DA6:
000094FE 4E75                       		rts	
00009500                            ; End of function Obj17_RotateSpikes
00009500                            
00009500                            ; ===========================================================================
00009500                            
00009500                            Obj17_ChkDel:				; XREF: Obj17_Action
00009500 3028 0008                  		move.w	8(a0),d0
00009504 0240 FF80                  		andi.w	#$FF80,d0
00009508 3238 F700                  		move.w	($FFFFF700).w,d1
0000950C 0441 0080                  		subi.w	#$80,d1
00009510 0241 FF80                  		andi.w	#$FF80,d1
00009514 9041                       		sub.w	d1,d0
00009516 0C40 0280                  		cmpi.w	#$280,d0
0000951A 6200 0000                  		bhi.w	Obj17_DelAll
0000951E 4E75                       		rts	
00009520                            ; ===========================================================================
00009520                            
00009520                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00009520 7400                       		moveq	#0,d2
00009522 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00009526 141A                       		move.b	(a2)+,d2	; move a2 to d2
00009528 5502                       		subq.b	#2,d2
0000952A 6500                       		bcs.s	Obj17_Delete
0000952C                            
0000952C                            Obj17_DelLoop:
0000952C 7000                       		moveq	#0,d0
0000952E 101A                       		move.b	(a2)+,d0
00009530 ED48                       		lsl.w	#6,d0
00009532 0680 00FF D000             		addi.l	#$FFD000,d0
00009538 2240                       		movea.l	d0,a1
0000953A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000953E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00009542                            
00009542                            Obj17_Delete:				; XREF: Obj17_Index
00009542 6100 0000                  		bsr.w	DeleteObject
00009546 4E75                       		rts	
00009548                            ; ===========================================================================
00009548                            
00009548                            Obj17_Display:				; XREF: Obj17_Index
00009548 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000954C 6000 0000                  		bra.w	DisplaySprite
00009550                            ; ===========================================================================
00009550                            ; ---------------------------------------------------------------------------
00009550                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009550                            ; ---------------------------------------------------------------------------
00009550                            Map_obj17:
00009550                            	include "_maps\obj17.asm"
00009550                            ; ---------------------------------------------------------------------------
00009550                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009550                            ; ---------------------------------------------------------------------------
00009550 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00009554 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00009558 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000955C 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00009560 01                         byte_7E08:	dc.b 1
00009561 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00009566 01                         byte_7E0E:	dc.b 1
00009567 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000956C 01                         byte_7E14:	dc.b 1
0000956D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00009572 01                         byte_7E1A:	dc.b 1
00009573 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00009578 01                         byte_7E20:	dc.b 1
00009579 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000957E 01                         byte_7E26:	dc.b 1
0000957F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00009584 01                         byte_7E2C:	dc.b 1
00009585 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000958A                            		even
0000958A                            		even
0000958A                            
0000958A                            ; ===========================================================================
0000958A                            ; ---------------------------------------------------------------------------
0000958A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000958A                            ; ---------------------------------------------------------------------------
0000958A                            
0000958A                            Obj18:					; XREF: Obj_Index
0000958A 7000                       		moveq	#0,d0
0000958C 1028 0024                  		move.b	$24(a0),d0
00009590 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00009594 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00009598                            ; ===========================================================================
00009598 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000959A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000959C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000959E 0000                       		dc.w Obj18_Delete-Obj18_Index
000095A0 0000                       		dc.w Obj18_Action-Obj18_Index
000095A2                            ; ===========================================================================
000095A2                            
000095A2                            Obj18_Main:				; XREF: Obj18_Index
000095A2 5428 0024                  		addq.b	#2,$24(a0)
000095A6 317C 4000 0002             		move.w	#$4000,2(a0)
000095AC 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000095B4 117C 0020 0019             		move.b	#$20,$19(a0)
000095BA 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000095C0 6600                       		bne.s	Obj18_NotSYZ
000095C2 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000095CA 117C 0020 0019             		move.b	#$20,$19(a0)
000095D0                            
000095D0                            Obj18_NotSYZ:
000095D0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000095D6 6600                       		bne.s	Obj18_NotSLZ
000095D8 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000095E0 117C 0020 0019             		move.b	#$20,$19(a0)
000095E6 317C 4000 0002             		move.w	#$4000,2(a0)
000095EC 117C 0003 0028             		move.b	#3,$28(a0)
000095F2                            
000095F2                            Obj18_NotSLZ:
000095F2 117C 0004 0001             		move.b	#4,1(a0)
000095F8 117C 0004 0018             		move.b	#4,$18(a0)
000095FE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00009604 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000960A 3168 0008 0032             		move.w	8(a0),$32(a0)
00009610 317C 0080 0026             		move.w	#$80,$26(a0)
00009616 7200                       		moveq	#0,d1
00009618 1028 0028                  		move.b	$28(a0),d0
0000961C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009620 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00009622 5201                       		addq.b	#1,d1		; use frame #1
00009624 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000962A                            
0000962A                            Obj18_SetFrame:
0000962A 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000962E                            
0000962E                            Obj18_Solid:				; XREF: Obj18_Index
0000962E 4A28 0038                  		tst.b	$38(a0)
00009632 6700                       		beq.s	loc_7EE0
00009634 5928 0038                  		subq.b	#4,$38(a0)
00009638                            
00009638                            loc_7EE0:
00009638 7200                       		moveq	#0,d1
0000963A 1228 0019                  		move.b	$19(a0),d1
0000963E 6100 F56C                  		bsr.w	PlatformObject
00009642                            
00009642                            Obj18_Action:				; XREF: Obj18_Index
00009642 6100 0000                  		bsr.w	Obj18_Move
00009646 6100 0000                  		bsr.w	Obj18_Nudge
0000964A 6100 0000                  		bsr.w	DisplaySprite
0000964E 6000 0000                  		bra.w	Obj18_ChkDel
00009652                            ; ===========================================================================
00009652                            
00009652                            Obj18_Action2:				; XREF: Obj18_Index
00009652 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009658 6700                       		beq.s	loc_7F06
0000965A 5828 0038                  		addq.b	#4,$38(a0)
0000965E                            
0000965E                            loc_7F06:
0000965E 7200                       		moveq	#0,d1
00009660 1228 0019                  		move.b	$19(a0),d1
00009664 6100 F6BA                  		bsr.w	ExitPlatform
00009668 3F28 0008                  		move.w	8(a0),-(sp)
0000966C 6100 0000                  		bsr.w	Obj18_Move
00009670 6100 0000                  		bsr.w	Obj18_Nudge
00009674 341F                       		move.w	(sp)+,d2
00009676 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000967A 6100 0000                  		bsr.w	DisplaySprite
0000967E 6000 0000                  		bra.w	Obj18_ChkDel
00009682                            
00009682 4E75                       		rts
00009684                            
00009684                            ; ---------------------------------------------------------------------------
00009684                            ; Subroutine to	move platform slightly when you	stand on it
00009684                            ; ---------------------------------------------------------------------------
00009684                            
00009684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009684                            
00009684                            
00009684                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009684 1028 0038                  		move.b	$38(a0),d0
00009688 6100 91F0                  		bsr.w	CalcSine
0000968C 323C 0400                  		move.w	#$400,d1
00009690 C1C1                       		muls.w	d1,d0
00009692 4840                       		swap	d0
00009694 D068 002C                  		add.w	$2C(a0),d0
00009698 3140 000C                  		move.w	d0,$C(a0)
0000969C 4E75                       		rts	
0000969E                            ; End of function Obj18_Nudge
0000969E                            
0000969E                            ; ---------------------------------------------------------------------------
0000969E                            ; Subroutine to	move platforms
0000969E                            ; ---------------------------------------------------------------------------
0000969E                            
0000969E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000969E                            
0000969E                            
0000969E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000969E 7000                       		moveq	#0,d0
000096A0 1028 0028                  		move.b	$28(a0),d0
000096A4 0240 000F                  		andi.w	#$F,d0
000096A8 D040                       		add.w	d0,d0
000096AA 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000096AE 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000096B2                            ; End of function Obj18_Move
000096B2                            
000096B2                            ; ===========================================================================
000096B2 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000096B6 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000096BA 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000096BE 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000096C2 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000096C6 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000096CA 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            Obj18_Type00:
000096CC 4E75                       		rts			; platform 00 doesn't move
000096CE                            ; ===========================================================================
000096CE                            
000096CE                            Obj18_Type05:
000096CE 3028 0032                  		move.w	$32(a0),d0
000096D2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000096D6 4401                       		neg.b	d1		; reverse platform-motion
000096D8 0601 0040                  		addi.b	#$40,d1
000096DC 6000                       		bra.s	Obj18_01_Move
000096DE                            ; ===========================================================================
000096DE                            
000096DE                            Obj18_Type01:
000096DE 3028 0032                  		move.w	$32(a0),d0
000096E2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000096E6 0401 0040                  		subi.b	#$40,d1
000096EA                            
000096EA                            Obj18_01_Move:
000096EA 4881                       		ext.w	d1
000096EC D041                       		add.w	d1,d0
000096EE 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000096F2 6000 0000                  		bra.w	Obj18_ChgMotion
000096F6                            ; ===========================================================================
000096F6                            
000096F6                            Obj18_Type0C:
000096F6 3028 0034                  		move.w	$34(a0),d0
000096FA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000096FE 4401                       		neg.b	d1		; reverse platform-motion
00009700 0601 0030                  		addi.b	#$30,d1
00009704 6000                       		bra.s	Obj18_02_Move
00009706                            ; ===========================================================================
00009706                            
00009706                            Obj18_Type0B:
00009706 3028 0034                  		move.w	$34(a0),d0
0000970A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000970E 0401 0030                  		subi.b	#$30,d1
00009712 6000                       		bra.s	Obj18_02_Move
00009714                            ; ===========================================================================
00009714                            
00009714                            Obj18_Type06:
00009714 3028 0034                  		move.w	$34(a0),d0
00009718 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000971C 4401                       		neg.b	d1		; reverse platform-motion
0000971E 0601 0040                  		addi.b	#$40,d1
00009722 6000                       		bra.s	Obj18_02_Move
00009724                            ; ===========================================================================
00009724                            
00009724                            Obj18_Type02:
00009724 3028 0034                  		move.w	$34(a0),d0
00009728 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000972C 0401 0040                  		subi.b	#$40,d1
00009730                            
00009730                            Obj18_02_Move:
00009730 4881                       		ext.w	d1
00009732 D041                       		add.w	d1,d0
00009734 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009738 6000 0000                  		bra.w	Obj18_ChgMotion
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            Obj18_Type03:
0000973C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009740 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009742 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009748 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000974A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009750                            
00009750                            Obj18_03_NoMove:
00009750 4E75                       		rts	
00009752                            ; ===========================================================================
00009752                            
00009752                            Obj18_03_Wait:
00009752 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009756 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009758 317C 0020 003A             		move.w	#32,$3A(a0)
0000975E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009762 4E75                       		rts	
00009764                            ; ===========================================================================
00009764                            
00009764                            Obj18_Type04:
00009764 4A68 003A                  		tst.w	$3A(a0)
00009768 6700                       		beq.s	loc_8048
0000976A 5368 003A                  		subq.w	#1,$3A(a0)
0000976E 6600                       		bne.s	loc_8048
00009770 0828 0003 0022             		btst	#3,$22(a0)
00009776 6700                       		beq.s	loc_8042
00009778 08E9 0001 0022             		bset	#1,$22(a1)
0000977E 08A9 0003 0022             		bclr	#3,$22(a1)
00009784 137C 0002 0024             		move.b	#2,$24(a1)
0000978A 08A8 0003 0022             		bclr	#3,$22(a0)
00009790 4228 0025                  		clr.b	$25(a0)
00009794 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000979A                            
0000979A                            loc_8042:
0000979A 117C 0008 0024             		move.b	#8,$24(a0)
000097A0                            
000097A0                            loc_8048:
000097A0 2628 002C                  		move.l	$2C(a0),d3
000097A4 3028 0012                  		move.w	$12(a0),d0
000097A8 48C0                       		ext.l	d0
000097AA E180                       		asl.l	#8,d0
000097AC D680                       		add.l	d0,d3
000097AE 2143 002C                  		move.l	d3,$2C(a0)
000097B2 0668 0038 0012             		addi.w	#$38,$12(a0)
000097B8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097BC 0640 00E0                  		addi.w	#$E0,d0
000097C0 B068 002C                  		cmp.w	$2C(a0),d0
000097C4 6400                       		bcc.s	locret_8074
000097C6 117C 0006 0024             		move.b	#6,$24(a0)
000097CC                            
000097CC                            locret_8074:
000097CC 4E75                       		rts	
000097CE                            ; ===========================================================================
000097CE                            
000097CE                            Obj18_Type07:
000097CE 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000097D2 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000097D4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000097D8 7000                       		moveq	#0,d0
000097DA 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000097DE E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000097E0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000097E4 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000097E6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000097EC                            
000097EC                            Obj18_07_NoMove:
000097EC 4E75                       		rts	
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            Obj18_07_Wait:
000097EE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000097F2 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000097F4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000097F8 4E75                       		rts	
000097FA                            ; ===========================================================================
000097FA                            
000097FA                            Obj18_Type08:
000097FA 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000097FE 3028 0034                  		move.w	$34(a0),d0
00009802 0440 0200                  		subi.w	#$200,d0
00009806 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000980A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000980C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009810                            
00009810                            Obj18_08_NoStop:
00009810 4E75                       		rts	
00009812                            ; ===========================================================================
00009812                            
00009812                            Obj18_Type0A:
00009812 3028 0034                  		move.w	$34(a0),d0
00009816 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000981A 0401 0040                  		subi.b	#$40,d1
0000981E 4881                       		ext.w	d1
00009820 E241                       		asr.w	#1,d1
00009822 D041                       		add.w	d1,d0
00009824 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009828                            
00009828                            Obj18_ChgMotion:
00009828 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000982E 4E75                       		rts	
00009830                            ; ===========================================================================
00009830                            
00009830                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009830 3028 0032                  		move.w	$32(a0),d0
00009834 0240 FF80                  		andi.w	#$FF80,d0
00009838 3238 F700                  		move.w	($FFFFF700).w,d1
0000983C 0441 0080                  		subi.w	#$80,d1
00009840 0241 FF80                  		andi.w	#$FF80,d1
00009844 9041                       		sub.w	d1,d0
00009846 0C40 0280                  		cmpi.w	#$280,d0
0000984A 6200                       		bhi.s	Obj18_Delete
0000984C 4E75                       		rts	
0000984E                            ; ===========================================================================
0000984E                            
0000984E                            Obj18_Delete:				; XREF: Obj18_Index
0000984E 6000 0000                  		bra.w	DeleteObject
00009852                            ; ===========================================================================
00009852                            ; ---------------------------------------------------------------------------
00009852                            ; Sprite mappings - unused
00009852                            ; ---------------------------------------------------------------------------
00009852                            Map_obj18x:
00009852                            	include "_maps\obj18x.asm"
00009852                            ; ---------------------------------------------------------------------------
00009852                            ; Sprite mappings - unused
00009852                            ; ---------------------------------------------------------------------------
00009852 0000                       		dc.w byte_80FE-Map_obj18x
00009854 0000                       		dc.w byte_8109-Map_obj18x
00009856 02                         byte_80FE:	dc.b 2
00009857 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000985C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009861 0A                         byte_8109:	dc.b $A
00009862 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009867 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000986C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009871 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009876 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000987B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009880 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009885 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000988A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000988F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009894                            		even
00009894                            		even
00009894                            
00009894                            ; ---------------------------------------------------------------------------
00009894                            ; Sprite mappings - GHZ	platforms
00009894                            ; ---------------------------------------------------------------------------
00009894                            Map_obj18:
00009894                            	include "_maps\obj18ghz.asm"
00009894                            ; ---------------------------------------------------------------------------
00009894                            ; Sprite mappings - GHZ	platforms
00009894                            ; ---------------------------------------------------------------------------
00009894 0000                       		dc.w byte_8140-Map_obj18
00009896 0000                       		dc.w byte_8155-Map_obj18
00009898 04                         byte_8140:	dc.b 4
00009899 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000989E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000098A3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000098A8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000098AD 0A                         byte_8155:	dc.b $A
000098AE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000098B3 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000098B8 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000098BD 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000098C2 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000098C7 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000098CC 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000098D1 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000098D6 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000098DB 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000098E0                            		even
000098E0                            		even
000098E0                            
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            ; Sprite mappings - SYZ	platforms
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            Map_obj18a:
000098E0                            	include "_maps\obj18syz.asm"
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            ; Sprite mappings - SYZ	platforms
000098E0                            ; ---------------------------------------------------------------------------
000098E0 0000                       		dc.w byte_818A-Map_obj18a
000098E2 03                         byte_818A:	dc.b 3
000098E3 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000098E8 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000098ED F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000098F2                            		even
000098F2                            		even
000098F2                            
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - SLZ	platforms
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj18b:
000098F2                            	include "_maps\obj18slz.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - SLZ	platforms
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_819C-Map_obj18b
000098F4 02                         byte_819C:	dc.b 2
000098F5 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000098FA F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009900 00                         		even
00009900 00                         		even
00009900                            
00009900                            ; ===========================================================================
00009900                            ; ---------------------------------------------------------------------------
00009900                            ; Object 19 - blank
00009900                            ; ---------------------------------------------------------------------------
00009900                            
00009900                            Obj19:					; XREF: Obj_Index
00009900 4E75                       		rts	
00009902                            ; ===========================================================================
00009902                            ; ---------------------------------------------------------------------------
00009902                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009902                            ; ---------------------------------------------------------------------------
00009902                            Map_obj48:
00009902                            	include "_maps\obj48.asm"
00009902                            ; ---------------------------------------------------------------------------
00009902                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009902                            ; ---------------------------------------------------------------------------
00009902 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009906 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000990A 06                         byte_81B2:	dc.b 6
0000990B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009910 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009915 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000991A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000991F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009924 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009929 04                         byte_81D1:	dc.b 4
0000992A E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000992F E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009934 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009939 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000993E 04                         byte_81E6:	dc.b 4
0000993F E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009944 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009949 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000994E 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009953 04                         byte_81FB:	dc.b 4
00009954 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009959 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000995E 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009963 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009968                            		even
00009968                            		even
00009968                            
00009968                            ; ===========================================================================
00009968                            ; ---------------------------------------------------------------------------
00009968                            ; Object 1A - GHZ collapsing ledge
00009968                            ; ---------------------------------------------------------------------------
00009968                            
00009968                            Obj1A:					; XREF: Obj_Index
00009968 7000                       		moveq	#0,d0
0000996A 1028 0024                  		move.b	$24(a0),d0
0000996E 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009972 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009976                            ; ===========================================================================
00009976 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000997A 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000997E 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009982                            ; ===========================================================================
00009982                            
00009982                            Obj1A_Main:				; XREF: Obj1A_Index
00009982 5428 0024                  		addq.b	#2,$24(a0)
00009986 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000998E 317C 4000 0002             		move.w	#$4000,2(a0)
00009994 0028 0004 0001             		ori.b	#4,1(a0)
0000999A 117C 0004 0018             		move.b	#4,$18(a0)
000099A0 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000099A6 117C 0064 0019             		move.b	#$64,$19(a0)
000099AC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000099B2 117C 0038 0016             		move.b	#$38,$16(a0)
000099B8 08E8 0004 0001             		bset	#4,1(a0)
000099BE                            
000099BE                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000099BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000099C2 6700                       		beq.s	Obj1A_Slope	; if not, branch
000099C4 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000099C8 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000099CC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000099D0                            
000099D0                            Obj1A_Slope:
000099D0 323C 0030                  		move.w	#$30,d1
000099D4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000099DA 6100 F2A4                  		bsr.w	SlopeObject
000099DE 6000 0000                  		bra.w	MarkObjGone
000099E2                            ; ===========================================================================
000099E2                            
000099E2                            Obj1A_Touch:				; XREF: Obj1A_Index
000099E2 4A28 0038                  		tst.b	$38(a0)
000099E6 6700 0000                  		beq.w	loc_847A
000099EA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000099F0 5328 0038                  		subq.b	#1,$38(a0)
000099F4                            
000099F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099F4                            
000099F4                            
000099F4                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000099F4 323C 0030                  		move.w	#$30,d1
000099F8 6100 F326                  		bsr.w	ExitPlatform
000099FC 323C 0030                  		move.w	#$30,d1
00009A00 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009A06 3428 0008                  		move.w	8(a0),d2
00009A0A 6100 0000                  		bsr.w	SlopeObject2
00009A0E 6000 0000                  		bra.w	MarkObjGone
00009A12                            ; End of function Obj1A_WalkOff
00009A12                            
00009A12                            ; ===========================================================================
00009A12                            
00009A12                            Obj1A_Display:				; XREF: Obj1A_Index
00009A12 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009A16 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009A18 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009A1C 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009A20 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009A24 6000 0000                  		bra.w	DisplaySprite
00009A28                            ; ===========================================================================
00009A28                            
00009A28                            loc_82D0:				; XREF: Obj1A_Display
00009A28 5328 0038                  		subq.b	#1,$38(a0)
00009A2C 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009A30 43F8 D000                  		lea	($FFFFD000).w,a1
00009A34 0829 0003 0022             		btst	#3,$22(a1)
00009A3A 6700                       		beq.s	loc_82FC
00009A3C 4A28 0038                  		tst.b	$38(a0)
00009A40 6600                       		bne.s	locret_8308
00009A42 08A9 0003 0022             		bclr	#3,$22(a1)
00009A48 08A9 0005 0022             		bclr	#5,$22(a1)
00009A4E 137C 0001 001D             		move.b	#1,$1D(a1)
00009A54                            
00009A54                            loc_82FC:
00009A54 117C 0000 003A             		move.b	#0,$3A(a0)
00009A5A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009A60                            
00009A60                            locret_8308:
00009A60 4E75                       		rts	
00009A62                            ; ===========================================================================
00009A62                            
00009A62                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009A62 6100 0000                  		bsr.w	ObjectFall
00009A66 6100 0000                  		bsr.w	DisplaySprite
00009A6A 4A28 0001                  		tst.b	1(a0)
00009A6E 6A00                       		bpl.s	Obj1A_Delete
00009A70 4E75                       		rts	
00009A72                            ; ===========================================================================
00009A72                            
00009A72                            Obj1A_Delete:				; XREF: Obj1A_Index
00009A72 6100 0000                  		bsr.w	DeleteObject
00009A76 4E75                       		rts	
00009A78                            ; ===========================================================================
00009A78                            ; ---------------------------------------------------------------------------
00009A78                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009A78                            ; ---------------------------------------------------------------------------
00009A78                            
00009A78                            Obj53:					; XREF: Obj_Index
00009A78 7000                       		moveq	#0,d0
00009A7A 1028 0024                  		move.b	$24(a0),d0
00009A7E 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009A82 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009A86                            ; ===========================================================================
00009A86 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009A8A 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009A8E 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009A92                            ; ===========================================================================
00009A92                            
00009A92                            Obj53_Main:				; XREF: Obj53_Index
00009A92 5428 0024                  		addq.b	#2,$24(a0)
00009A96 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009A9E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009AA4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009AAA 6600                       		bne.s	Obj53_NotSLZ
00009AAC 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009AB2 5428 001A                  		addq.b	#2,$1A(a0)
00009AB6                            
00009AB6                            Obj53_NotSLZ:
00009AB6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009ABC 6600                       		bne.s	Obj53_NotSBZ
00009ABE 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009AC4                            
00009AC4                            Obj53_NotSBZ:
00009AC4 0028 0004 0001             		ori.b	#4,1(a0)
00009ACA 117C 0004 0018             		move.b	#4,$18(a0)
00009AD0 117C 0007 0038             		move.b	#7,$38(a0)
00009AD6 117C 0044 0019             		move.b	#$44,$19(a0)
00009ADC                            
00009ADC                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009ADC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009AE0 6700                       		beq.s	Obj53_Solid	; if not, branch
00009AE2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009AE6 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009AEA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009AEE                            
00009AEE                            Obj53_Solid:
00009AEE 323C 0020                  		move.w	#$20,d1
00009AF2 6100 F0B8                  		bsr.w	PlatformObject
00009AF6 4A28 0028                  		tst.b	$28(a0)
00009AFA 6A00                       		bpl.s	Obj53_MarkAsGone
00009AFC 0829 0003 0022             		btst	#3,$22(a1)
00009B02 6700                       		beq.s	Obj53_MarkAsGone
00009B04 08A8 0000 0001             		bclr	#0,1(a0)
00009B0A 3029 0008                  		move.w	8(a1),d0
00009B0E 9068 0008                  		sub.w	8(a0),d0
00009B12 6400                       		bcc.s	Obj53_MarkAsGone
00009B14 08E8 0000 0001             		bset	#0,1(a0)
00009B1A                            
00009B1A                            Obj53_MarkAsGone:
00009B1A 6000 0000                  		bra.w	MarkObjGone
00009B1E                            ; ===========================================================================
00009B1E                            
00009B1E                            Obj53_Touch:				; XREF: Obj53_Index
00009B1E 4A28 0038                  		tst.b	$38(a0)
00009B22 6700 0000                  		beq.w	loc_8458
00009B26 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009B2C 5328 0038                  		subq.b	#1,$38(a0)
00009B30                            
00009B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B30                            
00009B30                            
00009B30                            Obj53_WalkOff:				; XREF: Obj53_Index
00009B30 323C 0020                  		move.w	#$20,d1
00009B34 6100 F1EA                  		bsr.w	ExitPlatform
00009B38 3428 0008                  		move.w	8(a0),d2
00009B3C 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009B40 6000 0000                  		bra.w	MarkObjGone
00009B44                            ; End of function Obj53_WalkOff
00009B44                            
00009B44                            ; ===========================================================================
00009B44                            
00009B44                            Obj53_Display:				; XREF: Obj53_Index
00009B44 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009B48 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009B4A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009B4E 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009B52 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009B56 6000 0000                  		bra.w	DisplaySprite
00009B5A                            ; ===========================================================================
00009B5A                            
00009B5A                            loc_8402:
00009B5A 5328 0038                  		subq.b	#1,$38(a0)
00009B5E 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009B62 43F8 D000                  		lea	($FFFFD000).w,a1
00009B66 0829 0003 0022             		btst	#3,$22(a1)
00009B6C 6700                       		beq.s	loc_842E
00009B6E 4A28 0038                  		tst.b	$38(a0)
00009B72 6600                       		bne.s	locret_843A
00009B74 08A9 0003 0022             		bclr	#3,$22(a1)
00009B7A 08A9 0005 0022             		bclr	#5,$22(a1)
00009B80 137C 0001 001D             		move.b	#1,$1D(a1)
00009B86                            
00009B86                            loc_842E:
00009B86 117C 0000 003A             		move.b	#0,$3A(a0)
00009B8C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009B92                            
00009B92                            locret_843A:
00009B92 4E75                       		rts	
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            Obj53_TimeZero:				; XREF: Obj53_Display
00009B94 6100 0000                  		bsr.w	ObjectFall
00009B98 6100 0000                  		bsr.w	DisplaySprite
00009B9C 4A28 0001                  		tst.b	1(a0)
00009BA0 6A00                       		bpl.s	Obj53_Delete
00009BA2 4E75                       		rts	
00009BA4                            ; ===========================================================================
00009BA4                            
00009BA4                            Obj53_Delete:				; XREF: Obj53_Index
00009BA4 6100 0000                  		bsr.w	DeleteObject
00009BA8 4E75                       		rts	
00009BAA                            ; ===========================================================================
00009BAA                            
00009BAA                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009BAA 117C 0000 003A             		move.b	#0,$3A(a0)
00009BB0                            
00009BB0                            loc_8458:				; XREF: Obj53_Touch
00009BB0 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009BB6 0828 0000 0028             		btst	#0,$28(a0)
00009BBC 6700                       		beq.s	loc_846C
00009BBE 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009BC4                            
00009BC4                            loc_846C:
00009BC4 7207                       		moveq	#7,d1
00009BC6 5228 001A                  		addq.b	#1,$1A(a0)
00009BCA 6000                       		bra.s	loc_8486
00009BCC                            ; ===========================================================================
00009BCC                            
00009BCC                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009BCC 117C 0000 003A             		move.b	#0,$3A(a0)
00009BD2                            
00009BD2                            loc_847A:				; XREF: Obj1A_Touch
00009BD2 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009BD8 7218                       		moveq	#$18,d1
00009BDA 5428 001A                  		addq.b	#2,$1A(a0)
00009BDE                            
00009BDE                            loc_8486:				; XREF: Obj53_Collapse
00009BDE 7000                       		moveq	#0,d0
00009BE0 1028 001A                  		move.b	$1A(a0),d0
00009BE4 D040                       		add.w	d0,d0
00009BE6 2668 0004                  		movea.l	4(a0),a3
00009BEA D6F3 0000                  		adda.w	(a3,d0.w),a3
00009BEE 524B                       		addq.w	#1,a3
00009BF0 08E8 0005 0001             		bset	#5,1(a0)
00009BF6 1810                       		move.b	0(a0),d4
00009BF8 1A28 0001                  		move.b	1(a0),d5
00009BFC 2248                       		movea.l	a0,a1
00009BFE 6000                       		bra.s	loc_84B2
00009C00                            ; ===========================================================================
00009C00                            
00009C00                            loc_84AA:
00009C00 6100 0000                  		bsr.w	SingleObjLoad
00009C04 6600                       		bne.s	loc_84F2
00009C06 5A4B                       		addq.w	#5,a3
00009C08                            
00009C08                            loc_84B2:
00009C08 137C 0006 0024             		move.b	#6,$24(a1)
00009C0E 1284                       		move.b	d4,0(a1)
00009C10 234B 0004                  		move.l	a3,4(a1)
00009C14 1345 0001                  		move.b	d5,1(a1)
00009C18 3368 0008 0008             		move.w	8(a0),8(a1)
00009C1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C24 3368 0002 0002             		move.w	2(a0),2(a1)
00009C2A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009C30 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009C36 135C 0038                  		move.b	(a4)+,$38(a1)
00009C3A B3C8                       		cmpa.l	a0,a1
00009C3C 6400                       		bcc.s	loc_84EE
00009C3E 6100 0000                  		bsr.w	DisplaySprite2
00009C42                            
00009C42                            loc_84EE:
00009C42 51C9 FFBC                  		dbf	d1,loc_84AA
00009C46                            
00009C46                            loc_84F2:
00009C46 6100 0000                  		bsr.w	DisplaySprite
00009C4A 303C 00B9                  		move.w	#$B9,d0
00009C4E 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009C54                            ; ===========================================================================
00009C54                            ; ---------------------------------------------------------------------------
00009C54                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009C54                            ; ---------------------------------------------------------------------------
00009C54 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009C64 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009C6E 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009C76 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009C7E                            
00009C7E                            ; ---------------------------------------------------------------------------
00009C7E                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009C7E                            ; ---------------------------------------------------------------------------
00009C7E                            
00009C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C7E                            
00009C7E                            
00009C7E                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009C7E 43F8 D000                  		lea	($FFFFD000).w,a1
00009C82 0829 0003 0022             		btst	#3,$22(a1)
00009C88 6700                       		beq.s	locret_856E
00009C8A 3029 0008                  		move.w	8(a1),d0
00009C8E 9068 0008                  		sub.w	8(a0),d0
00009C92 D041                       		add.w	d1,d0
00009C94 E248                       		lsr.w	#1,d0
00009C96 0828 0000 0001             		btst	#0,1(a0)
00009C9C 6700                       		beq.s	loc_854E
00009C9E 4640                       		not.w	d0
00009CA0 D041                       		add.w	d1,d0
00009CA2                            
00009CA2                            loc_854E:
00009CA2 7200                       		moveq	#0,d1
00009CA4 1232 0000                  		move.b	(a2,d0.w),d1
00009CA8 3028 000C                  		move.w	$C(a0),d0
00009CAC 9041                       		sub.w	d1,d0
00009CAE 7200                       		moveq	#0,d1
00009CB0 1229 0016                  		move.b	$16(a1),d1
00009CB4 9041                       		sub.w	d1,d0
00009CB6 3340 000C                  		move.w	d0,$C(a1)
00009CBA 9468 0008                  		sub.w	8(a0),d2
00009CBE 9569 0008                  		sub.w	d2,8(a1)
00009CC2                            
00009CC2                            locret_856E:
00009CC2 4E75                       		rts	
00009CC4                            ; End of function SlopeObject2
00009CC4                            
00009CC4                            ; ===========================================================================
00009CC4                            ; ---------------------------------------------------------------------------
00009CC4                            ; Collision data for GHZ collapsing ledge
00009CC4                            ; ---------------------------------------------------------------------------
00009CC4                            Obj1A_SlopeData:
00009CC4                            		incbin	misc\ghzledge.bin
00009CF4                            		even
00009CF4                            
00009CF4                            ; ---------------------------------------------------------------------------
00009CF4                            ; Sprite mappings - GHZ	collapsing ledge
00009CF4                            ; ---------------------------------------------------------------------------
00009CF4                            Map_obj1A:
00009CF4                            	include "_maps\obj1A.asm"
00009CF4                            ; ---------------------------------------------------------------------------
00009CF4                            ; Sprite mappings - GHZ	collapsing ledge
00009CF4                            ; ---------------------------------------------------------------------------
00009CF4 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009CF8 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009CFC 10                         byte_85A8:	dc.b $10
00009CFD C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009D02 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009D07 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009D0C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009D11 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D16 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009D1B F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009D20 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009D25 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D2A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009D2F 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D34 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D39 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D3E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009D43 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D48 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D4D 10                         byte_85F9:	dc.b $10
00009D4E C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009D53 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009D58 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009D5D E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009D62 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D67 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009D6C F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009D71 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009D76 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D7B F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009D80 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D85 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D8A 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D8F 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009D94 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D99 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D9E 19                         byte_864A:	dc.b $19
00009D9F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009DA4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009DA9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009DAE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009DB3 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009DB8 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009DBD E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009DC2 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009DC7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DCC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DD1 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009DD6 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009DDB F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009DE0 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009DE5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DEA F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DEF 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009DF4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009DF9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DFE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E03 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E08 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009E0D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E12 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E17 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E1C 19                         byte_86C8:	dc.b $19
00009E1D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009E22 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E27 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E2C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E31 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E36 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E3B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E40 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E45 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E4A D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E4F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E54 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E59 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E5E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E63 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E68 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E6D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009E72 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009E77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E7C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E81 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E86 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E8B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E90 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E95 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E9A                            		even
00009E9A                            		even
00009E9A                            
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            Map_obj53:
00009E9A                            	include "_maps\obj53.asm"
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00009E9E 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00009EA2 04                         byte_874E:	dc.b 4
00009EA3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009EA8 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009EAD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009EB2 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009EB7 08                         byte_8763:	dc.b 8
00009EB8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009EBD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009EC2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009EC7 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009ECC 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009ED1 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009ED6 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009EDB 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009EE0 04                         byte_878C:	dc.b 4
00009EE1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009EE6 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009EEB F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009EF0 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009EF5 08                         byte_87A1:	dc.b 8
00009EF6 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009EFB F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009F00 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009F05 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009F0A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009F0F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009F14 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009F19 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009F1E                            		even
00009F1E                            		even
00009F1E                            
00009F1E                            ; ===========================================================================
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            
00009F1E                            Obj1C:					; XREF: Obj_Index
00009F1E 7000                       		moveq	#0,d0
00009F20 1028 0024                  		move.b	$24(a0),d0
00009F24 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009F28 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009F2C                            ; ===========================================================================
00009F2C 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009F2E 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009F30                            ; ===========================================================================
00009F30                            
00009F30                            Obj1C_Main:				; XREF: Obj1C_Index
00009F30 5428 0024                  		addq.b	#2,$24(a0)
00009F34 7000                       		moveq	#0,d0
00009F36 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009F3A C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009F3E 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009F42 2159 0004                  		move.l	(a1)+,4(a0)
00009F46 3159 0002                  		move.w	(a1)+,2(a0)
00009F4A 0028 0004 0001             		ori.b	#4,1(a0)
00009F50 1159 001A                  		move.b	(a1)+,$1A(a0)
00009F54 1159 0019                  		move.b	(a1)+,$19(a0)
00009F58 1159 0018                  		move.b	(a1)+,$18(a0)
00009F5C 1159 0020                  		move.b	(a1)+,$20(a0)
00009F60                            
00009F60                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009F60 3028 0008                  		move.w	8(a0),d0
00009F64 0240 FF80                  		andi.w	#$FF80,d0
00009F68 3238 F700                  		move.w	($FFFFF700).w,d1
00009F6C 0441 0080                  		subi.w	#$80,d1
00009F70 0241 FF80                  		andi.w	#$FF80,d1
00009F74 9041                       		sub.w	d1,d0
00009F76 0C40 0280                  		cmpi.w	#$280,d0
00009F7A 6200 0000                  		bhi.w	DeleteObject
00009F7E 6000 0000                  		bra.w	DisplaySprite
00009F82                            ; ===========================================================================
00009F82                            ; ---------------------------------------------------------------------------
00009F82                            ; Variables for	object $1C are stored in an array
00009F82                            ; ---------------------------------------------------------------------------
00009F82 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009F86 44D8                       		dc.w $44D8		; VRAM setting
00009F88 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009F8C 0000 0000                  		dc.l Map_obj1C
00009F90 44D8                       		dc.w $44D8
00009F92 0008 0200                  		dc.b 0,	8, 2, 0
00009F96 0000 0000                  		dc.l Map_obj1C
00009F9A 44D8                       		dc.w $44D8
00009F9C 0008 0200                  		dc.b 0,	8, 2, 0
00009FA0 0000 9094                  		dc.l Map_obj11
00009FA4 438E                       		dc.w $438E
00009FA6 0110 0100                  		dc.b 1,	$10, 1,	0
00009FAA                            ; ---------------------------------------------------------------------------
00009FAA                            ; Sprite mappings - SLZ	lava thrower
00009FAA                            ; ---------------------------------------------------------------------------
00009FAA                            Map_obj1C:
00009FAA                            	include "_maps\obj1C.asm"
00009FAA                            ; ---------------------------------------------------------------------------
00009FAA                            ; Sprite mappings - SLZ	lava thrower
00009FAA                            ; ---------------------------------------------------------------------------
00009FAA 0000                       		dc.w byte_8858-Map_obj1C
00009FAC 01                         byte_8858:	dc.b 1
00009FAD F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009FB2                            		even
00009FB2                            		even
00009FB2                            
00009FB2                            ; ===========================================================================
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            ; Object 1D - switch that activates when Sonic touches it
00009FB2                            ; (this	is not used anywhere in	the game)
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            
00009FB2                            Obj1D:					; XREF: Obj_Index
00009FB2 7000                       		moveq	#0,d0
00009FB4 1028 0024                  		move.b	$24(a0),d0
00009FB8 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009FBC 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009FC0                            ; ===========================================================================
00009FC0 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009FC2 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009FC4 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009FC6                            ; ===========================================================================
00009FC6                            
00009FC6                            Obj1D_Main:				; XREF: Obj1D_Index
00009FC6 5428 0024                  		addq.b	#2,$24(a0)
00009FCA 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009FD2 317C 4000 0002             		move.w	#$4000,2(a0)
00009FD8 117C 0004 0001             		move.b	#4,1(a0)
00009FDE 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009FE4 117C 0010 0019             		move.b	#$10,$19(a0)
00009FEA 117C 0005 0018             		move.b	#5,$18(a0)
00009FF0                            
00009FF0                            Obj1D_Action:				; XREF: Obj1D_Index
00009FF0 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009FF6 323C 0010                  		move.w	#$10,d1
00009FFA 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009FFE 6700                       		beq.s	Obj1D_ChkDel
0000A000 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A004 7001                       		moveq	#1,d0
0000A006 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A00A                            
0000A00A                            Obj1D_ChkDel:
0000A00A 6100 0000                  		bsr.w	DisplaySprite
0000A00E 3028 0008                  		move.w	8(a0),d0
0000A012 0240 FF80                  		andi.w	#$FF80,d0
0000A016 3238 F700                  		move.w	($FFFFF700).w,d1
0000A01A 0441 0080                  		subi.w	#$80,d1
0000A01E 0241 FF80                  		andi.w	#$FF80,d1
0000A022 9041                       		sub.w	d1,d0
0000A024 0C40 0280                  		cmpi.w	#$280,d0
0000A028 6200 0000                  		bhi.w	Obj1D_Delete
0000A02C 4E75                       		rts	
0000A02E                            ; ===========================================================================
0000A02E                            
0000A02E                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A02E 6100 0000                  		bsr.w	DeleteObject
0000A032 4E75                       		rts	
0000A034                            ; ---------------------------------------------------------------------------
0000A034                            ; Subroutine to	check if Sonic touches the object
0000A034                            ; ---------------------------------------------------------------------------
0000A034                            
0000A034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A034                            
0000A034                            
0000A034                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A034 43F8 D000                  		lea	($FFFFD000).w,a1
0000A038 3029 0008                  		move.w	8(a1),d0
0000A03C 9068 0008                  		sub.w	8(a0),d0
0000A040 D041                       		add.w	d1,d0
0000A042 6B00                       		bmi.s	loc_8918
0000A044 D241                       		add.w	d1,d1
0000A046 B041                       		cmp.w	d1,d0
0000A048 6400                       		bcc.s	loc_8918
0000A04A 3429 000C                  		move.w	$C(a1),d2
0000A04E 1229 0016                  		move.b	$16(a1),d1
0000A052 4881                       		ext.w	d1
0000A054 D242                       		add.w	d2,d1
0000A056 3028 000C                  		move.w	$C(a0),d0
0000A05A 0440 0010                  		subi.w	#$10,d0
0000A05E 9041                       		sub.w	d1,d0
0000A060 6200                       		bhi.s	loc_8918
0000A062 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A066 6500                       		bcs.s	loc_8918
0000A068 70FF                       		moveq	#-1,d0
0000A06A 4E75                       		rts	
0000A06C                            ; ===========================================================================
0000A06C                            
0000A06C                            loc_8918:
0000A06C 7000                       		moveq	#0,d0
0000A06E 4E75                       		rts	
0000A070                            ; End of function Obj1D_ChkTouch
0000A070                            
0000A070                            ; ===========================================================================
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            ; Sprite mappings - object 1D
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            Map_obj1D:
0000A070                            	include "_maps\obj1D.asm"
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            ; Sprite mappings - object 1D
0000A070                            ; ---------------------------------------------------------------------------
0000A070 0000                       		dc.w byte_891E-Map_obj1D
0000A072 04                         byte_891E:	dc.b 4
0000A073 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A078 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A07D E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A082 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A088 00                         		even
0000A088 00                         		even
0000A088                            
0000A088                            ; ===========================================================================
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            ; Object 2A - doors (SBZ)
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            
0000A088                            Obj2A:					; XREF: Obj_Index
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	$24(a0),d0
0000A08E 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A096                            ; ===========================================================================
0000A096 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A098 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A09A                            ; ===========================================================================
0000A09A                            
0000A09A                            Obj2A_Main:				; XREF: Obj2A_Index
0000A09A 5428 0024                  		addq.b	#2,$24(a0)
0000A09E 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A0A6 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A0AC 0028 0004 0001             		ori.b	#4,1(a0)
0000A0B2 117C 0008 0019             		move.b	#8,$19(a0)
0000A0B8 117C 0004 0018             		move.b	#4,$18(a0)
0000A0BE                            
0000A0BE                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A0BE 323C 0040                  		move.w	#$40,d1
0000A0C2 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A0C6 3038 D008                  		move.w	($FFFFD008).w,d0
0000A0CA D041                       		add.w	d1,d0
0000A0CC B068 0008                  		cmp.w	8(a0),d0
0000A0D0 6500                       		bcs.s	Obj2A_Animate
0000A0D2 9041                       		sub.w	d1,d0
0000A0D4 9041                       		sub.w	d1,d0
0000A0D6 B068 0008                  		cmp.w	8(a0),d0
0000A0DA 6400                       		bcc.s	Obj2A_Animate
0000A0DC D041                       		add.w	d1,d0
0000A0DE B068 0008                  		cmp.w	8(a0),d0
0000A0E2 6400                       		bcc.s	loc_899A
0000A0E4 0828 0000 0022             		btst	#0,$22(a0)
0000A0EA 6600                       		bne.s	Obj2A_Animate
0000A0EC 6000                       		bra.s	Obj2A_Open
0000A0EE                            ; ===========================================================================
0000A0EE                            
0000A0EE                            loc_899A:				; XREF: Obj2A_OpenShut
0000A0EE 0828 0000 0022             		btst	#0,$22(a0)
0000A0F4 6700                       		beq.s	Obj2A_Animate
0000A0F6                            
0000A0F6                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A0F6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A0FC                            
0000A0FC                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A0FC 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A102 6100 0000                  		bsr.w	AnimateSprite
0000A106 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A10A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A10C 323C 0011                  		move.w	#$11,d1
0000A110 343C 0020                  		move.w	#$20,d2
0000A114 3602                       		move.w	d2,d3
0000A116 5243                       		addq.w	#1,d3
0000A118 3828 0008                  		move.w	8(a0),d4
0000A11C 6100 0000                  		bsr.w	SolidObject
0000A120                            
0000A120                            Obj2A_MarkAsUsed:
0000A120 6000 0000                  		bra.w	MarkObjGone
0000A124                            ; ===========================================================================
0000A124                            Ani_obj2A:
0000A124                            	include "_anim\obj2A.asm"
0000A124                            ; ---------------------------------------------------------------------------
0000A124                            ; Animation script - doors (SBZ)
0000A124                            ; ---------------------------------------------------------------------------
0000A124 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A126 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A128 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A134 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A140                            		even
0000A140                            		even
0000A140                            
0000A140                            ; ---------------------------------------------------------------------------
0000A140                            ; Sprite mappings - doors (SBZ)
0000A140                            ; ---------------------------------------------------------------------------
0000A140                            Map_obj2A:
0000A140                            	include "_maps\obj2A.asm"
0000A140                            ; ---------------------------------------------------------------------------
0000A140                            ; Sprite mappings - doors (SBZ)
0000A140                            ; ---------------------------------------------------------------------------
0000A140 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A144 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A148 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A14C 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A150 0000                       		dc.w byte_8A56-Map_obj2A
0000A152 02                         byte_89FE:	dc.b 2
0000A153 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A158 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A15D 02                         byte_8A09:	dc.b 2
0000A15E DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A163 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A168 02                         byte_8A14:	dc.b 2
0000A169 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A16E 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A173 02                         byte_8A1F:	dc.b 2
0000A174 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A179 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A17E 02                         byte_8A2A:	dc.b 2
0000A17F D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A184 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A189 02                         byte_8A35:	dc.b 2
0000A18A CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A18F 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A194 02                         byte_8A40:	dc.b 2
0000A195 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A19A 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A19F 02                         byte_8A4B:	dc.b 2
0000A1A0 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A1A5 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A1AA 02                         byte_8A56:	dc.b 2
0000A1AB C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A1B0 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A1B6 00                         		even
0000A1B6 00                         		even
0000A1B6                            
0000A1B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1B6                            
0000A1B6                            
0000A1B6                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A1B6 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A1BA 6700                       		beq.s	loc_8AA8
0000A1BC 6B00 0000                  		bmi.w	loc_8AC4
0000A1C0 4A40                       		tst.w	d0
0000A1C2 6700 0000                  		beq.w	loc_8A92
0000A1C6 6B00                       		bmi.s	loc_8A7C
0000A1C8 4A69 0010                  		tst.w	$10(a1)
0000A1CC 6B00                       		bmi.s	loc_8A92
0000A1CE 6000                       		bra.s	loc_8A82
0000A1D0                            ; ===========================================================================
0000A1D0                            
0000A1D0                            loc_8A7C:
0000A1D0 4A69 0010                  		tst.w	$10(a1)
0000A1D4 6A00                       		bpl.s	loc_8A92
0000A1D6                            
0000A1D6                            loc_8A82:
0000A1D6 9169 0008                  		sub.w	d0,8(a1)
0000A1DA 337C 0000 0014             		move.w	#0,$14(a1)
0000A1E0 337C 0000 0010             		move.w	#0,$10(a1)
0000A1E6                            
0000A1E6                            loc_8A92:
0000A1E6 0829 0001 0022             		btst	#1,$22(a1)
0000A1EC 6600                       		bne.s	loc_8AB6
0000A1EE 08E9 0005 0022             		bset	#5,$22(a1)
0000A1F4 08E8 0005 0022             		bset	#5,$22(a0)
0000A1FA 4E75                       		rts	
0000A1FC                            ; ===========================================================================
0000A1FC                            
0000A1FC                            loc_8AA8:
0000A1FC 0828 0005 0022             		btst	#5,$22(a0)
0000A202 6700                       		beq.s	locret_8AC2
0000A204 337C 0001 001C             		move.w	#1,$1C(a1)
0000A20A                            
0000A20A                            loc_8AB6:
0000A20A 08A8 0005 0022             		bclr	#5,$22(a0)
0000A210 08A9 0005 0022             		bclr	#5,$22(a1)
0000A216                            
0000A216                            locret_8AC2:
0000A216 4E75                       		rts	
0000A218                            ; ===========================================================================
0000A218                            
0000A218                            loc_8AC4:
0000A218 4A69 0012                  		tst.w	$12(a1)
0000A21C 6A00                       		bpl.s	locret_8AD8
0000A21E 4A43                       		tst.w	d3
0000A220 6A00                       		bpl.s	locret_8AD8
0000A222 9769 000C                  		sub.w	d3,$C(a1)
0000A226 337C 0000 0012             		move.w	#0,$12(a1)
0000A22C                            
0000A22C                            locret_8AD8:
0000A22C 4E75                       		rts	
0000A22E                            ; End of function Obj44_SolidWall
0000A22E                            
0000A22E                            
0000A22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A22E                            
0000A22E                            
0000A22E                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A22E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A232 3029 0008                  		move.w	8(a1),d0
0000A236 9068 0008                  		sub.w	8(a0),d0
0000A23A D041                       		add.w	d1,d0
0000A23C 6B00                       		bmi.s	loc_8B48
0000A23E 3601                       		move.w	d1,d3
0000A240 D643                       		add.w	d3,d3
0000A242 B043                       		cmp.w	d3,d0
0000A244 6200                       		bhi.s	loc_8B48
0000A246 1629 0016                  		move.b	$16(a1),d3
0000A24A 4883                       		ext.w	d3
0000A24C D443                       		add.w	d3,d2
0000A24E 3629 000C                  		move.w	$C(a1),d3
0000A252 9668 000C                  		sub.w	$C(a0),d3
0000A256 D642                       		add.w	d2,d3
0000A258 6B00                       		bmi.s	loc_8B48
0000A25A 3802                       		move.w	d2,d4
0000A25C D844                       		add.w	d4,d4
0000A25E B644                       		cmp.w	d4,d3
0000A260 6400                       		bcc.s	loc_8B48
0000A262 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A266 6B00                       		bmi.s	loc_8B48
0000A268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A26E 6400                       		bcc.s	loc_8B48
0000A270 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A274 6600                       		bne.s	loc_8B48
0000A276 3A00                       		move.w	d0,d5
0000A278 B240                       		cmp.w	d0,d1
0000A27A 6400                       		bcc.s	loc_8B30
0000A27C D241                       		add.w	d1,d1
0000A27E 9041                       		sub.w	d1,d0
0000A280 3A00                       		move.w	d0,d5
0000A282 4445                       		neg.w	d5
0000A284                            
0000A284                            loc_8B30:
0000A284 3203                       		move.w	d3,d1
0000A286 B443                       		cmp.w	d3,d2
0000A288 6400                       		bcc.s	loc_8B3C
0000A28A 9644                       		sub.w	d4,d3
0000A28C 3203                       		move.w	d3,d1
0000A28E 4441                       		neg.w	d1
0000A290                            
0000A290                            loc_8B3C:
0000A290 BA41                       		cmp.w	d1,d5
0000A292 6200                       		bhi.s	loc_8B44
0000A294 7801                       		moveq	#1,d4
0000A296 4E75                       		rts	
0000A298                            ; ===========================================================================
0000A298                            
0000A298                            loc_8B44:
0000A298 78FF                       		moveq	#-1,d4
0000A29A 4E75                       		rts	
0000A29C                            ; ===========================================================================
0000A29C                            
0000A29C                            loc_8B48:
0000A29C 7800                       		moveq	#0,d4
0000A29E 4E75                       		rts	
0000A2A0                            ; End of function Obj44_SolidWall2
0000A2A0                            
0000A2A0                            ; ===========================================================================
0000A2A0                            ; ---------------------------------------------------------------------------
0000A2A0                            ; Object 1E - Ball Hog enemy (SBZ)
0000A2A0                            ; ---------------------------------------------------------------------------
0000A2A0                            
0000A2A0                            Obj1E:					; XREF: Obj_Index
0000A2A0 7000                       		moveq	#0,d0
0000A2A2 1028 0024                  		move.b	$24(a0),d0
0000A2A6 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A2AA 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A2AE                            ; ===========================================================================
0000A2AE 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A2B0 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A2B2                            ; ===========================================================================
0000A2B2                            
0000A2B2                            Obj1E_Main:				; XREF: Obj1E_Index
0000A2B2 117C 0013 0016             		move.b	#$13,$16(a0)
0000A2B8 117C 0008 0017             		move.b	#8,$17(a0)
0000A2BE 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A2C6 317C 2302 0002             		move.w	#$2302,2(a0)
0000A2CC 117C 0004 0001             		move.b	#4,1(a0)
0000A2D2 117C 0004 0018             		move.b	#4,$18(a0)
0000A2D8 117C 0005 0020             		move.b	#5,$20(a0)
0000A2DE 117C 000C 0019             		move.b	#$C,$19(a0)
0000A2E4 6100 0000                  		bsr.w	ObjectFall
0000A2E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2EE 4A41                       		tst.w	d1
0000A2F0 6A00                       		bpl.s	locret_8BAC
0000A2F2 D368 000C                  		add.w	d1,$C(a0)
0000A2F6 317C 0000 0012             		move.w	#0,$12(a0)
0000A2FC 5428 0024                  		addq.b	#2,$24(a0)
0000A300                            
0000A300                            locret_8BAC:
0000A300 4E75                       		rts	
0000A302                            ; ===========================================================================
0000A302                            
0000A302                            Obj1E_Action:				; XREF: Obj1E_Index
0000A302 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A308 6100 0000                  		bsr.w	AnimateSprite
0000A30C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A312 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A314 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A318 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A31A 6000                       		bra.s	Obj1E_MarkAsGone
0000A31C                            ; ===========================================================================
0000A31C                            
0000A31C                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A31C 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A320                            
0000A320                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A320 6000 0000                  		bra.w	MarkObjGone
0000A324                            ; ===========================================================================
0000A324                            
0000A324                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A324 117C 0001 0032             		move.b	#1,$32(a0)
0000A32A 6100 0000                  		bsr.w	SingleObjLoad
0000A32E 6600                       		bne.s	loc_8C1A
0000A330 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A334 3368 0008 0008             		move.w	8(a0),8(a1)
0000A33A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A340 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A346 337C 0000 0012             		move.w	#0,$12(a1)
0000A34C 70FC                       		moveq	#-4,d0
0000A34E 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A354 6700                       		beq.s	loc_8C0A	; if not, branch
0000A356 4440                       		neg.w	d0
0000A358 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A35C                            
0000A35C                            loc_8C0A:
0000A35C D169 0008                  		add.w	d0,8(a1)
0000A360 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A366 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A36C                            
0000A36C                            loc_8C1A:
0000A36C 60B2                       		bra.s	Obj1E_MarkAsGone
0000A36E                            ; ===========================================================================
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E                            
0000A36E                            Obj20:					; XREF: Obj_Index
0000A36E 7000                       		moveq	#0,d0
0000A370 1028 0024                  		move.b	$24(a0),d0
0000A374 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A378 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A37C                            ; ===========================================================================
0000A37C 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A37E 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A380                            ; ===========================================================================
0000A380                            
0000A380                            Obj20_Main:				; XREF: Obj20_Index
0000A380 5428 0024                  		addq.b	#2,$24(a0)
0000A384 117C 0007 0016             		move.b	#7,$16(a0)
0000A38A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A392 317C 2302 0002             		move.w	#$2302,2(a0)
0000A398 117C 0004 0001             		move.b	#4,1(a0)
0000A39E 117C 0003 0018             		move.b	#3,$18(a0)
0000A3A4 117C 0087 0020             		move.b	#$87,$20(a0)
0000A3AA 117C 0008 0019             		move.b	#8,$19(a0)
0000A3B0 7000                       		moveq	#0,d0
0000A3B2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A3B6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A3BA 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A3BE 117C 0004 001A             		move.b	#4,$1A(a0)
0000A3C4                            
0000A3C4                            Obj20_Bounce:				; XREF: Obj20_Index
0000A3C4 4EB9 0000 0000             		jsr	ObjectFall
0000A3CA 4A68 0012                  		tst.w	$12(a0)
0000A3CE 6B00                       		bmi.s	Obj20_ChkExplode
0000A3D0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3D6 4A41                       		tst.w	d1
0000A3D8 6A00                       		bpl.s	Obj20_ChkExplode
0000A3DA D368 000C                  		add.w	d1,$C(a0)
0000A3DE 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A3E4 4A03                       		tst.b	d3
0000A3E6 6700                       		beq.s	Obj20_ChkExplode
0000A3E8 6B00                       		bmi.s	loc_8CA4
0000A3EA 4A68 0010                  		tst.w	$10(a0)
0000A3EE 6A00                       		bpl.s	Obj20_ChkExplode
0000A3F0 4468 0010                  		neg.w	$10(a0)
0000A3F4 6000                       		bra.s	Obj20_ChkExplode
0000A3F6                            ; ===========================================================================
0000A3F6                            
0000A3F6                            loc_8CA4:				; XREF: Obj20_Bounce
0000A3F6 4A68 0010                  		tst.w	$10(a0)
0000A3FA 6B00                       		bmi.s	Obj20_ChkExplode
0000A3FC 4468 0010                  		neg.w	$10(a0)
0000A400                            
0000A400                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A400 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A404 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A406 10BC 0024                  		move.b	#$24,0(a0)
0000A40A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A40E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A414 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A418                            ; ===========================================================================
0000A418                            
0000A418                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A418 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A41C 6A00                       		bpl.s	Obj20_Display
0000A41E 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A424 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A42A                            
0000A42A                            Obj20_Display:
0000A42A 6100 0000                  		bsr.w	DisplaySprite
0000A42E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A432 0640 00E0                  		addi.w	#$E0,d0
0000A436 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A43A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A43E 4E75                       		rts	
0000A440                            ; ===========================================================================
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Object 24 - explosion	from a destroyed monitor
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            
0000A440                            Obj24:					; XREF: Obj_Index
0000A440 7000                       		moveq	#0,d0
0000A442 1028 0024                  		move.b	$24(a0),d0
0000A446 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A44A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A44E                            ; ===========================================================================
0000A44E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A450 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A452                            ; ===========================================================================
0000A452                            
0000A452                            Obj24_Main:				; XREF: Obj24_Index
0000A452 5428 0024                  		addq.b	#2,$24(a0)
0000A456 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A45E 317C 041C 0002             		move.w	#$41C,2(a0)
0000A464 117C 0004 0001             		move.b	#4,1(a0)
0000A46A 117C 0001 0018             		move.b	#1,$18(a0)
0000A470 117C 0000 0020             		move.b	#0,$20(a0)
0000A476 117C 000C 0019             		move.b	#$C,$19(a0)
0000A47C 117C 0009 001E             		move.b	#9,$1E(a0)
0000A482 117C 0000 001A             		move.b	#0,$1A(a0)
0000A488 303C 00A5                  		move.w	#$A5,d0
0000A48C 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A492                            
0000A492                            Obj24_Animate:				; XREF: Obj24_Index
0000A492 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A496 6A00                       		bpl.s	Obj24_Display
0000A498 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A49E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A4A2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A4A8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A4AC                            
0000A4AC                            Obj24_Display:
0000A4AC 6000 0000                  		bra.w	DisplaySprite
0000A4B0                            ; ===========================================================================
0000A4B0                            ; ---------------------------------------------------------------------------
0000A4B0                            ; Object 27 - explosion	from a destroyed enemy
0000A4B0                            ; ---------------------------------------------------------------------------
0000A4B0                            
0000A4B0                            Obj27:					; XREF: Obj_Index
0000A4B0 7000                       		moveq	#0,d0
0000A4B2 1028 0024                  		move.b	$24(a0),d0
0000A4B6 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A4BA 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A4BE                            ; ===========================================================================
0000A4BE 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A4C0 0000                       		dc.w Obj27_Main-Obj27_Index
0000A4C2 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A4C4                            ; ===========================================================================
0000A4C4                            
0000A4C4                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A4C4 5428 0024                  		addq.b	#2,$24(a0)
0000A4C8 6100 0000                  		bsr.w	SingleObjLoad
0000A4CC 6600                       		bne.s	Obj27_Main
0000A4CE 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A4D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A4D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A4DE 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A4E4                            
0000A4E4                            Obj27_Main:				; XREF: Obj27_Index
0000A4E4 5428 0024                  		addq.b	#2,$24(a0)
0000A4E8 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A4F0 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A4F6 117C 0004 0001             		move.b	#4,1(a0)
0000A4FC 117C 0001 0018             		move.b	#1,$18(a0)
0000A502 117C 0000 0020             		move.b	#0,$20(a0)
0000A508 117C 000C 0019             		move.b	#$C,$19(a0)
0000A50E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A514 117C 0000 001A             		move.b	#0,$1A(a0)
0000A51A 303C 00C1                  		move.w	#$C1,d0
0000A51E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A524                            
0000A524                            Obj27_Animate:				; XREF: Obj27_Index
0000A524 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A528 6A00                       		bpl.s	Obj27_Display
0000A52A 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A530 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A534 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A53A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A53E                            
0000A53E                            Obj27_Display:
0000A53E 6000 0000                  		bra.w	DisplaySprite
0000A542                            ; ===========================================================================
0000A542                            ; ---------------------------------------------------------------------------
0000A542                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A542                            ; ---------------------------------------------------------------------------
0000A542                            
0000A542                            Obj3F:					; XREF: Obj_Index
0000A542 7000                       		moveq	#0,d0
0000A544 1028 0024                  		move.b	$24(a0),d0
0000A548 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A54C 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A550                            ; ===========================================================================
0000A550 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A552 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            Obj3F_Main:				; XREF: Obj3F_Index
0000A554 5428 0024                  		addq.b	#2,$24(a0)
0000A558 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A560 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A566 117C 0004 0001             		move.b	#4,1(a0)
0000A56C 117C 0001 0018             		move.b	#1,$18(a0)
0000A572 117C 0000 0020             		move.b	#0,$20(a0)
0000A578 117C 000C 0019             		move.b	#$C,$19(a0)
0000A57E 117C 0007 001E             		move.b	#7,$1E(a0)
0000A584 117C 0000 001A             		move.b	#0,$1A(a0)
0000A58A 303C 00C4                  		move.w	#$C4,d0
0000A58E 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A594                            ; ===========================================================================
0000A594                            Ani_obj1E:
0000A594                            	include "_anim\obj1E.asm"
0000A594                            ; ---------------------------------------------------------------------------
0000A594                            ; Animation script - doors (SBZ)
0000A594                            ; ---------------------------------------------------------------------------
0000A594 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A596 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A5AE 00                         		even
0000A5AE 00                         		even
0000A5AE                            
0000A5AE                            ; ---------------------------------------------------------------------------
0000A5AE                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A5AE                            ; ---------------------------------------------------------------------------
0000A5AE                            Map_obj1E:
0000A5AE                            	include "_maps\obj1E.asm"
0000A5AE                            ; ---------------------------------------------------------------------------
0000A5AE                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A5AE                            ; ---------------------------------------------------------------------------
0000A5AE 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A5B2 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A5B6 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A5BA 02                         byte_8E6E:	dc.b 2
0000A5BB EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A5C0 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A5C5 02                         byte_8E79:	dc.b 2
0000A5C6 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A5CB FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A5D0 02                         byte_8E84:	dc.b 2
0000A5D1 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A5D6 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A5DB 02                         byte_8E8F:	dc.b 2
0000A5DC E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A5E1 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A5E6 01                         byte_8E9A:	dc.b 1
0000A5E7 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A5EC 01                         byte_8EA0:	dc.b 1
0000A5ED F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A5F2                            		even
0000A5F2                            		even
0000A5F2                            
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2                            ; Sprite mappings - explosion
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2                            Map_obj24:
0000A5F2                            	include "_maps\obj24.asm"
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2                            ; Sprite mappings - explosion
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A5F6 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A5FA 01                         byte_8EAE:	dc.b 1
0000A5FB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A600 01                         byte_8EB4:	dc.b 1
0000A601 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A606 01                         byte_8EBA:	dc.b 1
0000A607 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A60C 01                         byte_8EC0:	dc.b 1
0000A60D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A612                            		even
0000A612                            		even
0000A612                            
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            ; Sprite mappings - explosion
0000A612                            ; ---------------------------------------------------------------------------
0000A612 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A616 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A61A 0000                       		dc.w byte_8EF7-Map_obj27
0000A61C 01                         byte_8ED0:	dc.b 1
0000A61D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A622 01                         byte_8ED6:	dc.b 1
0000A623 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A628 01                         byte_8EDC:	dc.b 1
0000A629 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A62E 04                         byte_8EE2:	dc.b 4
0000A62F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A634 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A639 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A63E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A643 04                         byte_8EF7:	dc.b 4
0000A644 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A649 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A64E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A653 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A658                            		even
0000A658                            ; ---------------------------------------------------------------------------
0000A658                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A658                            ; ---------------------------------------------------------------------------
0000A658 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A65A 0000                       		dc.w byte_8F16-Map_obj3F
0000A65C 0000                       		dc.w byte_8F1C-Map_obj3F
0000A65E FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A660 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A662 01                         byte_8F16:	dc.b 1
0000A663 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A668 01                         byte_8F1C:	dc.b 1
0000A669 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A66E                            		even
0000A66E                            ; ===========================================================================
0000A66E                            ; ---------------------------------------------------------------------------
0000A66E                            ; Object 28 - animals
0000A66E                            ; ---------------------------------------------------------------------------
0000A66E                            
0000A66E                            Obj28:					; XREF: Obj_Index
0000A66E 7000                       		moveq	#0,d0
0000A670 1028 0024                  		move.b	$24(a0),d0
0000A674 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A678 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A67C                            ; ===========================================================================
0000A67C 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A680 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A684 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A688 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A68C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A690 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A694 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A698 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A69C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A6A0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A6A4 0000                       		dc.w loc_92D6-Obj28_Index
0000A6A6                            
0000A6A6 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A6B2                            
0000A6B2 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A6B6 0000 0000                  		dc.l Map_obj28
0000A6BA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A6BE 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A6C2 FE80 FD00                  		dc.w $FE80, $FD00
0000A6C6 0000 0000                  		dc.l Map_obj28
0000A6CA FEC0 FE80                  		dc.w $FEC0, $FE80
0000A6CE 0000 0000                  		dc.l Map_obj28a
0000A6D2 FE40 FD00                  		dc.w $FE40, $FD00
0000A6D6 0000 0000                  		dc.l Map_obj28b
0000A6DA FD00 FC00                  		dc.w $FD00, $FC00
0000A6DE 0000 0000                  		dc.l Map_obj28a
0000A6E2 FD80 FC80                  		dc.w $FD80, $FC80
0000A6E6 0000 0000                  		dc.l Map_obj28b
0000A6EA                            
0000A6EA FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A6FA FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A70A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A716                            
0000A716 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A72A 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A73E 0000 0000                  		dc.l Map_obj28b
0000A742                            
0000A742 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A754 0565 05B3                  		dc.w $565, $5B3
0000A758                            ; ===========================================================================
0000A758                            
0000A758                            Obj28_Ending:				; XREF: Obj28_Index
0000A758 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A75C 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A760 7000                       		moveq	#0,d0
0000A762 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A766 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A768 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A76C 0440 0014                  		subi.w	#$14,d0
0000A770 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A776 D040                       		add.w	d0,d0
0000A778 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A77E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A782 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A788 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A78E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A794 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A79A 117C 000C 0016             		move.b	#$C,$16(a0)
0000A7A0 117C 0004 0001             		move.b	#4,1(a0)
0000A7A6 08E8 0000 0001             		bset	#0,1(a0)
0000A7AC 117C 0006 0018             		move.b	#6,$18(a0)
0000A7B2 117C 0008 0019             		move.b	#8,$19(a0)
0000A7B8 117C 0007 001E             		move.b	#7,$1E(a0)
0000A7BE 6000 0000                  		bra.w	DisplaySprite
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A7C2 5428 0024                  		addq.b	#2,$24(a0)
0000A7C6 6100 808C                  		bsr.w	RandomNumber
0000A7CA 0240 0001                  		andi.w	#1,d0
0000A7CE 7200                       		moveq	#0,d1
0000A7D0 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A7D4 D241                       		add.w	d1,d1
0000A7D6 D240                       		add.w	d0,d1
0000A7D8 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A7DC 1031 1000                  		move.b	(a1,d1.w),d0
0000A7E0 1140 0030                  		move.b	d0,$30(a0)
0000A7E4 E748                       		lsl.w	#3,d0
0000A7E6 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A7EA D2C0                       		adda.w	d0,a1
0000A7EC 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A7F0 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A7F4 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A7F8 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A7FE 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A804 6700                       		beq.s	loc_90C0	; if yes, branch
0000A806 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A80C                            
0000A80C                            loc_90C0:
0000A80C 117C 000C 0016             		move.b	#$C,$16(a0)
0000A812 117C 0004 0001             		move.b	#4,1(a0)
0000A818 08E8 0000 0001             		bset	#0,1(a0)
0000A81E 117C 0006 0018             		move.b	#6,$18(a0)
0000A824 117C 0008 0019             		move.b	#8,$19(a0)
0000A82A 117C 0007 001E             		move.b	#7,$1E(a0)
0000A830 117C 0002 001A             		move.b	#2,$1A(a0)
0000A836 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A83C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A840 6600                       		bne.s	loc_911C
0000A842 6100 0000                  		bsr.w	SingleObjLoad
0000A846 6600                       		bne.s	Obj28_Display
0000A848 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A84C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A852 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A858 3028 003E                  		move.w	$3E(a0),d0
0000A85C E248                       		lsr.w	#1,d0
0000A85E 1340 001A                  		move.b	d0,$1A(a1)
0000A862                            
0000A862                            Obj28_Display:
0000A862 6000 0000                  		bra.w	DisplaySprite
0000A866                            ; ===========================================================================
0000A866                            
0000A866                            loc_911C:
0000A866 117C 0012 0024             		move.b	#$12,$24(a0)
0000A86C 4268 0010                  		clr.w	$10(a0)
0000A870 6000 0000                  		bra.w	DisplaySprite
0000A874                            ; ===========================================================================
0000A874                            
0000A874                            loc_912A:				; XREF: Obj28_Index
0000A874 4A28 0001                  		tst.b	1(a0)
0000A878 6A00 0000                  		bpl.w	DeleteObject
0000A87C 6100 0000                  		bsr.w	ObjectFall
0000A880 4A68 0012                  		tst.w	$12(a0)
0000A884 6B00                       		bmi.s	loc_9180
0000A886 4EB9 0000 0000             		jsr	ObjHitFloor
0000A88C 4A41                       		tst.w	d1
0000A88E 6A00                       		bpl.s	loc_9180
0000A890 D368 000C                  		add.w	d1,$C(a0)
0000A894 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A89A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A8A0 117C 0001 001A             		move.b	#1,$1A(a0)
0000A8A6 1028 0030                  		move.b	$30(a0),d0
0000A8AA D000                       		add.b	d0,d0
0000A8AC 5800                       		addq.b	#4,d0
0000A8AE 1140 0024                  		move.b	d0,$24(a0)
0000A8B2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A8B6 6700                       		beq.s	loc_9180
0000A8B8 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A8BE 6700                       		beq.s	loc_9180
0000A8C0 4468 0010                  		neg.w	$10(a0)
0000A8C4 0868 0000 0001             		bchg	#0,1(a0)
0000A8CA                            
0000A8CA                            loc_9180:
0000A8CA 6000 0000                  		bra.w	DisplaySprite
0000A8CE                            ; ===========================================================================
0000A8CE                            
0000A8CE                            loc_9184:				; XREF: Obj28_Index
0000A8CE 6100 0000                  		bsr.w	ObjectFall
0000A8D2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A8D8 4A68 0012                  		tst.w	$12(a0)
0000A8DC 6B00                       		bmi.s	loc_91AE
0000A8DE 117C 0000 001A             		move.b	#0,$1A(a0)
0000A8E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8EA 4A41                       		tst.w	d1
0000A8EC 6A00                       		bpl.s	loc_91AE
0000A8EE D368 000C                  		add.w	d1,$C(a0)
0000A8F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A8F8                            
0000A8F8                            loc_91AE:
0000A8F8 4A28 0028                  		tst.b	$28(a0)
0000A8FC 6600                       		bne.s	loc_9224
0000A8FE 4A28 0001                  		tst.b	1(a0)
0000A902 6A00 0000                  		bpl.w	DeleteObject
0000A906 6000 0000                  		bra.w	DisplaySprite
0000A90A                            ; ===========================================================================
0000A90A                            
0000A90A                            loc_91C0:				; XREF: Obj28_Index
0000A90A 6100 0000                  		bsr.w	SpeedToPos
0000A90E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A914 4A68 0012                  		tst.w	$12(a0)
0000A918 6B00                       		bmi.s	loc_91FC
0000A91A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A920 4A41                       		tst.w	d1
0000A922 6A00                       		bpl.s	loc_91FC
0000A924 D368 000C                  		add.w	d1,$C(a0)
0000A928 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A92E 4A28 0028                  		tst.b	$28(a0)
0000A932 6700                       		beq.s	loc_91FC
0000A934 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A93A 6700                       		beq.s	loc_91FC
0000A93C 4468 0010                  		neg.w	$10(a0)
0000A940 0868 0000 0001             		bchg	#0,1(a0)
0000A946                            
0000A946                            loc_91FC:
0000A946 5328 001E                  		subq.b	#1,$1E(a0)
0000A94A 6A00                       		bpl.s	loc_9212
0000A94C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A952 5228 001A                  		addq.b	#1,$1A(a0)
0000A956 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A95C                            
0000A95C                            loc_9212:
0000A95C 4A28 0028                  		tst.b	$28(a0)
0000A960 6600                       		bne.s	loc_9224
0000A962 4A28 0001                  		tst.b	1(a0)
0000A966 6A00 0000                  		bpl.w	DeleteObject
0000A96A 6000 0000                  		bra.w	DisplaySprite
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            loc_9224:				; XREF: Obj28_Index
0000A96E 3028 0008                  		move.w	8(a0),d0
0000A972 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A976 6500                       		bcs.s	loc_923C
0000A978 0440 0180                  		subi.w	#$180,d0
0000A97C 6A00                       		bpl.s	loc_923C
0000A97E 4A28 0001                  		tst.b	1(a0)
0000A982 6A00 0000                  		bpl.w	DeleteObject
0000A986                            
0000A986                            loc_923C:
0000A986 6000 0000                  		bra.w	DisplaySprite
0000A98A                            ; ===========================================================================
0000A98A                            
0000A98A                            loc_9240:				; XREF: Obj28_Index
0000A98A 4A28 0001                  		tst.b	1(a0)
0000A98E 6A00 0000                  		bpl.w	DeleteObject
0000A992 5368 0036                  		subq.w	#1,$36(a0)
0000A996 6600 0000                  		bne.w	loc_925C
0000A99A 117C 0002 0024             		move.b	#2,$24(a0)
0000A9A0 117C 0003 0018             		move.b	#3,$18(a0)
0000A9A6                            
0000A9A6                            loc_925C:
0000A9A6 6000 0000                  		bra.w	DisplaySprite
0000A9AA                            ; ===========================================================================
0000A9AA                            
0000A9AA                            loc_9260:				; XREF: Obj28_Index
0000A9AA 6100 0000                  		bsr.w	sub_9404
0000A9AE 6400                       		bcc.s	loc_927C
0000A9B0 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A9B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A9BC 117C 000E 0024             		move.b	#$E,$24(a0)
0000A9C2 6000 FF46                  		bra.w	loc_91C0
0000A9C6                            ; ===========================================================================
0000A9C6                            
0000A9C6                            loc_927C:
0000A9C6 6000 FFA6                  		bra.w	loc_9224
0000A9CA                            ; ===========================================================================
0000A9CA                            
0000A9CA                            loc_9280:				; XREF: Obj28_Index
0000A9CA 6100 0000                  		bsr.w	sub_9404
0000A9CE 6A00                       		bpl.s	loc_92B6
0000A9D0 4268 0010                  		clr.w	$10(a0)
0000A9D4 4268 0032                  		clr.w	$32(a0)
0000A9D8 6100 0000                  		bsr.w	SpeedToPos
0000A9DC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A9E2 6100 0000                  		bsr.w	loc_93C4
0000A9E6 6100 0000                  		bsr.w	loc_93EC
0000A9EA 5328 001E                  		subq.b	#1,$1E(a0)
0000A9EE 6A00                       		bpl.s	loc_92B6
0000A9F0 117C 0001 001E             		move.b	#1,$1E(a0)
0000A9F6 5228 001A                  		addq.b	#1,$1A(a0)
0000A9FA 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AA00                            
0000AA00                            loc_92B6:
0000AA00 6000 FF6C                  		bra.w	loc_9224
0000AA04                            ; ===========================================================================
0000AA04                            
0000AA04                            loc_92BA:				; XREF: Obj28_Index
0000AA04 6100 0000                  		bsr.w	sub_9404
0000AA08 6A00                       		bpl.s	loc_9310
0000AA0A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AA10 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AA16 117C 0004 0024             		move.b	#4,$24(a0)
0000AA1C 6000 FEB0                  		bra.w	loc_9184
0000AA20                            ; ===========================================================================
0000AA20                            
0000AA20                            loc_92D6:				; XREF: Obj28_Index
0000AA20 6100 0000                  		bsr.w	ObjectFall
0000AA24 117C 0001 001A             		move.b	#1,$1A(a0)
0000AA2A 4A68 0012                  		tst.w	$12(a0)
0000AA2E 6B00                       		bmi.s	loc_9310
0000AA30 117C 0000 001A             		move.b	#0,$1A(a0)
0000AA36 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA3C 4A41                       		tst.w	d1
0000AA3E 6A00                       		bpl.s	loc_9310
0000AA40 4628 0029                  		not.b	$29(a0)
0000AA44 6600                       		bne.s	loc_9306
0000AA46 4468 0010                  		neg.w	$10(a0)
0000AA4A 0868 0000 0001             		bchg	#0,1(a0)
0000AA50                            
0000AA50                            loc_9306:
0000AA50 D368 000C                  		add.w	d1,$C(a0)
0000AA54 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AA5A                            
0000AA5A                            loc_9310:
0000AA5A 6000 FF12                  		bra.w	loc_9224
0000AA5E                            ; ===========================================================================
0000AA5E                            
0000AA5E                            loc_9314:				; XREF: Obj28_Index
0000AA5E 6100 0000                  		bsr.w	sub_9404
0000AA62 6A00                       		bpl.s	loc_932E
0000AA64 4268 0010                  		clr.w	$10(a0)
0000AA68 4268 0032                  		clr.w	$32(a0)
0000AA6C 6100 0000                  		bsr.w	ObjectFall
0000AA70 6100 0000                  		bsr.w	loc_93C4
0000AA74 6100 0000                  		bsr.w	loc_93EC
0000AA78                            
0000AA78                            loc_932E:
0000AA78 6000 FEF4                  		bra.w	loc_9224
0000AA7C                            ; ===========================================================================
0000AA7C                            
0000AA7C                            loc_9332:				; XREF: Obj28_Index
0000AA7C 6100 0000                  		bsr.w	sub_9404
0000AA80 6A00                       		bpl.s	loc_936C
0000AA82 6100 0000                  		bsr.w	ObjectFall
0000AA86 117C 0001 001A             		move.b	#1,$1A(a0)
0000AA8C 4A68 0012                  		tst.w	$12(a0)
0000AA90 6B00                       		bmi.s	loc_936C
0000AA92 117C 0000 001A             		move.b	#0,$1A(a0)
0000AA98 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA9E 4A41                       		tst.w	d1
0000AAA0 6A00                       		bpl.s	loc_936C
0000AAA2 4468 0010                  		neg.w	$10(a0)
0000AAA6 0868 0000 0001             		bchg	#0,1(a0)
0000AAAC D368 000C                  		add.w	d1,$C(a0)
0000AAB0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AAB6                            
0000AAB6                            loc_936C:
0000AAB6 6000 FEB6                  		bra.w	loc_9224
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            loc_9370:				; XREF: Obj28_Index
0000AABA 6100 0000                  		bsr.w	sub_9404
0000AABE 6A00                       		bpl.s	loc_93C0
0000AAC0 6100 0000                  		bsr.w	SpeedToPos
0000AAC4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AACA 4A68 0012                  		tst.w	$12(a0)
0000AACE 6B00                       		bmi.s	loc_93AA
0000AAD0 4EB9 0000 0000             		jsr	ObjHitFloor
0000AAD6 4A41                       		tst.w	d1
0000AAD8 6A00                       		bpl.s	loc_93AA
0000AADA 4628 0029                  		not.b	$29(a0)
0000AADE 6600                       		bne.s	loc_93A0
0000AAE0 4468 0010                  		neg.w	$10(a0)
0000AAE4 0868 0000 0001             		bchg	#0,1(a0)
0000AAEA                            
0000AAEA                            loc_93A0:
0000AAEA D368 000C                  		add.w	d1,$C(a0)
0000AAEE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AAF4                            
0000AAF4                            loc_93AA:
0000AAF4 5328 001E                  		subq.b	#1,$1E(a0)
0000AAF8 6A00                       		bpl.s	loc_93C0
0000AAFA 117C 0001 001E             		move.b	#1,$1E(a0)
0000AB00 5228 001A                  		addq.b	#1,$1A(a0)
0000AB04 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AB0A                            
0000AB0A                            loc_93C0:
0000AB0A 6000 FE62                  		bra.w	loc_9224
0000AB0E                            ; ===========================================================================
0000AB0E                            
0000AB0E                            loc_93C4:
0000AB0E 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB14 4A68 0012                  		tst.w	$12(a0)
0000AB18 6B00                       		bmi.s	locret_93EA
0000AB1A 117C 0000 001A             		move.b	#0,$1A(a0)
0000AB20 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB26 4A41                       		tst.w	d1
0000AB28 6A00                       		bpl.s	locret_93EA
0000AB2A D368 000C                  		add.w	d1,$C(a0)
0000AB2E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB34                            
0000AB34                            locret_93EA:
0000AB34 4E75                       		rts	
0000AB36                            ; ===========================================================================
0000AB36                            
0000AB36                            loc_93EC:
0000AB36 08E8 0000 0001             		bset	#0,1(a0)
0000AB3C 3028 0008                  		move.w	8(a0),d0
0000AB40 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AB44 6400                       		bcc.s	locret_9402
0000AB46 08A8 0000 0001             		bclr	#0,1(a0)
0000AB4C                            
0000AB4C                            locret_9402:
0000AB4C 4E75                       		rts	
0000AB4E                            
0000AB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB4E                            
0000AB4E                            
0000AB4E                            sub_9404:
0000AB4E 3038 D008                  		move.w	($FFFFD008).w,d0
0000AB52 9068 0008                  		sub.w	8(a0),d0
0000AB56 0440 00B8                  		subi.w	#$B8,d0
0000AB5A 4E75                       		rts	
0000AB5C                            ; End of function sub_9404
0000AB5C                            
0000AB5C                            ; ===========================================================================
0000AB5C                            ; ---------------------------------------------------------------------------
0000AB5C                            ; Object 29 - points that appear when you destroy something
0000AB5C                            ; ---------------------------------------------------------------------------
0000AB5C                            
0000AB5C                            Obj29:					; XREF: Obj_Index
0000AB5C 7000                       		moveq	#0,d0
0000AB5E 1028 0024                  		move.b	$24(a0),d0
0000AB62 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000AB66 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000AB6A 6000 0000                  		bra.w	DisplaySprite
0000AB6E                            ; ===========================================================================
0000AB6E 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AB70 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            Obj29_Main:				; XREF: Obj29_Index
0000AB72 5428 0024                  		addq.b	#2,$24(a0)
0000AB76 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AB7E 317C 2797 0002             		move.w	#$2797,2(a0)
0000AB84 117C 0004 0001             		move.b	#4,1(a0)
0000AB8A 117C 0001 0018             		move.b	#1,$18(a0)
0000AB90 117C 0008 0019             		move.b	#8,$19(a0)
0000AB96 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AB9C                            
0000AB9C                            Obj29_Slower:				; XREF: Obj29_Index
0000AB9C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000ABA0 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000ABA4 6100 0000                  		bsr.w	SpeedToPos
0000ABA8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000ABAE 4E75                       		rts	
0000ABB0                            ; ===========================================================================
0000ABB0                            ; ---------------------------------------------------------------------------
0000ABB0                            ; Sprite mappings - animals
0000ABB0                            ; ---------------------------------------------------------------------------
0000ABB0                            Map_obj28:
0000ABB0                            	include "_maps\obj28.asm"
0000ABB0                            ; ---------------------------------------------------------------------------
0000ABB0                            ; Sprite mappings - animals
0000ABB0                            ; ---------------------------------------------------------------------------
0000ABB0 0000                       		dc.w byte_9472-Map_obj28
0000ABB2 0000                       		dc.w byte_9478-Map_obj28
0000ABB4 0000                       		dc.w byte_946C-Map_obj28
0000ABB6 01                         byte_946C:	dc.b 1
0000ABB7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ABBC 01                         byte_9472:	dc.b 1
0000ABBD F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000ABC2 01                         byte_9478:	dc.b 1
0000ABC3 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000ABC8                            		even
0000ABC8                            		even
0000ABC8                            
0000ABC8                            Map_obj28a:
0000ABC8                            	include "_maps\obj28a.asm"
0000ABC8                            ; ---------------------------------------------------------------------------
0000ABC8                            ; Sprite mappings - animals
0000ABC8                            ; ---------------------------------------------------------------------------
0000ABC8 0000                       		dc.w byte_948A-Map_obj28a
0000ABCA 0000                       		dc.w byte_9490-Map_obj28a
0000ABCC 0000                       		dc.w byte_9484-Map_obj28a
0000ABCE 01                         byte_9484:	dc.b 1
0000ABCF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ABD4 01                         byte_948A:	dc.b 1
0000ABD5 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000ABDA 01                         byte_9490:	dc.b 1
0000ABDB FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000ABE0                            		even
0000ABE0                            		even
0000ABE0                            
0000ABE0                            Map_obj28b:
0000ABE0                            	include "_maps\obj28b.asm"
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0                            ; Sprite mappings - animals
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0 0000                       		dc.w byte_94A2-Map_obj28b
0000ABE2 0000                       		dc.w byte_94A8-Map_obj28b
0000ABE4 0000                       		dc.w byte_949C-Map_obj28b
0000ABE6 01                         byte_949C:	dc.b 1
0000ABE7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ABEC 01                         byte_94A2:	dc.b 1
0000ABED FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000ABF2 01                         byte_94A8:	dc.b 1
0000ABF3 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000ABF8                            		even
0000ABF8                            		even
0000ABF8                            
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            ; Sprite mappings - points that	appear when you	destroy	something
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            Map_obj29:
0000ABF8                            	include "_maps\obj29.asm"
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            ; Sprite mappings - points that	appear when you	destroy	something
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000ABFC 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AC00 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AC04 0000                       		dc.w byte_94E5-Map_obj29
0000AC06 01                         byte_94BC:	dc.b 1
0000AC07 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AC0C 01                         byte_94C2:	dc.b 1
0000AC0D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AC12 01                         byte_94C8:	dc.b 1
0000AC13 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AC18 01                         byte_94CE:	dc.b 1
0000AC19 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AC1E 01                         byte_94D4:	dc.b 1
0000AC1F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AC24 02                         byte_94DA:	dc.b 2
0000AC25 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AC2A FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AC2F 02                         byte_94E5:	dc.b 2
0000AC30 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AC35 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AC3A                            		even
0000AC3A                            		even
0000AC3A                            
0000AC3A                            ; ===========================================================================
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            
0000AC3A                            Obj1F:					; XREF: Obj_Index
0000AC3A 7000                       		moveq	#0,d0
0000AC3C 1028 0024                  		move.b	$24(a0),d0
0000AC40 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AC44 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AC48                            ; ===========================================================================
0000AC48 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AC4A 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AC4C 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AC4E 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AC50 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AC52                            ; ===========================================================================
0000AC52                            
0000AC52                            Obj1F_Main:				; XREF: Obj1F_Index
0000AC52 117C 0010 0016             		move.b	#$10,$16(a0)
0000AC58 117C 0008 0017             		move.b	#8,$17(a0)
0000AC5E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AC66 317C 0400 0002             		move.w	#$400,2(a0)
0000AC6C 117C 0004 0001             		move.b	#4,1(a0)
0000AC72 117C 0003 0018             		move.b	#3,$18(a0)
0000AC78 117C 0006 0020             		move.b	#6,$20(a0)
0000AC7E 117C 0015 0019             		move.b	#$15,$19(a0)
0000AC84 6100 0000                  		bsr.w	ObjectFall
0000AC88 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC8E 4A41                       		tst.w	d1
0000AC90 6A00                       		bpl.s	locret_955A
0000AC92 D368 000C                  		add.w	d1,$C(a0)
0000AC96 1143 0026                  		move.b	d3,$26(a0)
0000AC9A 317C 0000 0012             		move.w	#0,$12(a0)
0000ACA0 5428 0024                  		addq.b	#2,$24(a0)
0000ACA4                            
0000ACA4                            locret_955A:
0000ACA4 4E75                       		rts	
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            Obj1F_Action:				; XREF: Obj1F_Index
0000ACA6 7000                       		moveq	#0,d0
0000ACA8 1028 0025                  		move.b	$25(a0),d0
0000ACAC 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000ACB0 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000ACB4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000ACBA 6100 0000                  		bsr.w	AnimateSprite
0000ACBE 6000 0000                  		bra.w	MarkObjGone
0000ACC2                            ; ===========================================================================
0000ACC2 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000ACC4 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000ACC6                            ; ===========================================================================
0000ACC6                            
0000ACC6                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000ACC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000ACCA 6A00                       		bpl.s	locret_95B6
0000ACCC 4A28 0001                  		tst.b	1(a0)
0000ACD0 6A00                       		bpl.s	Obj1F_Move
0000ACD2 0868 0001 0032             		bchg	#1,$32(a0)
0000ACD8 6600                       		bne.s	Obj1F_MakeFire
0000ACDA                            
0000ACDA                            Obj1F_Move:
0000ACDA 5428 0025                  		addq.b	#2,$25(a0)
0000ACDE 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000ACE4 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000ACEA 6100 0000                  		bsr.w	Obj1F_SetAni
0000ACEE 5600                       		addq.b	#3,d0
0000ACF0 1140 001C                  		move.b	d0,$1C(a0)
0000ACF4 0868 0000 0022             		bchg	#0,$22(a0)
0000ACFA 6600                       		bne.s	locret_95B6
0000ACFC 4468 0010                  		neg.w	$10(a0)		; change direction
0000AD00                            
0000AD00                            locret_95B6:
0000AD00 4E75                       		rts	
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AD02 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AD08 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AD0E 6100 0000                  		bsr.w	SingleObjLoad
0000AD12 6600                       		bne.s	Obj1F_MakeFire2
0000AD14 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AD18 137C 0006 0024             		move.b	#6,$24(a1)
0000AD1E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD24 0469 0010 0008             		subi.w	#$10,8(a1)
0000AD2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD30 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AD36                            
0000AD36                            Obj1F_MakeFire2:
0000AD36 6100 0000                  		bsr.w	SingleObjLoad
0000AD3A 6600                       		bne.s	locret_9618
0000AD3C 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AD40 137C 0006 0024             		move.b	#6,$24(a1)
0000AD46 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD4C 0669 0010 0008             		addi.w	#$10,8(a1)
0000AD52 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD58 337C 0100 0010             		move.w	#$100,$10(a1)
0000AD5E                            
0000AD5E                            locret_9618:
0000AD5E 4E75                       		rts	
0000AD60                            ; ===========================================================================
0000AD60                            
0000AD60                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000AD60 5368 0030                  		subq.w	#1,$30(a0)
0000AD64 6B00                       		bmi.s	loc_966E
0000AD66 6100 0000                  		bsr.w	SpeedToPos
0000AD6A 0868 0000 0032             		bchg	#0,$32(a0)
0000AD70 6600                       		bne.s	loc_9654
0000AD72 3628 0008                  		move.w	8(a0),d3
0000AD76 0643 0010                  		addi.w	#$10,d3
0000AD7A 0828 0000 0022             		btst	#0,$22(a0)
0000AD80 6700                       		beq.s	loc_9640
0000AD82 0443 0020                  		subi.w	#$20,d3
0000AD86                            
0000AD86                            loc_9640:
0000AD86 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AD8C 0C41 FFF8                  		cmpi.w	#-8,d1
0000AD90 6D00                       		blt.s	loc_966E
0000AD92 0C41 000C                  		cmpi.w	#$C,d1
0000AD96 6C00                       		bge.s	loc_966E
0000AD98 4E75                       		rts	
0000AD9A                            ; ===========================================================================
0000AD9A                            
0000AD9A                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000AD9A 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADA0 D368 000C                  		add.w	d1,$C(a0)
0000ADA4 1143 0026                  		move.b	d3,$26(a0)
0000ADA8 6100 0000                  		bsr.w	Obj1F_SetAni
0000ADAC 5600                       		addq.b	#3,d0
0000ADAE 1140 001C                  		move.b	d0,$1C(a0)
0000ADB2 4E75                       		rts	
0000ADB4                            ; ===========================================================================
0000ADB4                            
0000ADB4                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000ADB4 5528 0025                  		subq.b	#2,$25(a0)
0000ADB8 317C 003B 0030             		move.w	#59,$30(a0)
0000ADBE 317C 0000 0010             		move.w	#0,$10(a0)
0000ADC4 6100 0000                  		bsr.w	Obj1F_SetAni
0000ADC8 1140 001C                  		move.b	d0,$1C(a0)
0000ADCC 4E75                       		rts	
0000ADCE                            ; ---------------------------------------------------------------------------
0000ADCE                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000ADCE                            ; ---------------------------------------------------------------------------
0000ADCE                            
0000ADCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADCE                            
0000ADCE                            
0000ADCE                            Obj1F_SetAni:				; XREF: loc_966E
0000ADCE 7000                       		moveq	#0,d0
0000ADD0 1628 0026                  		move.b	$26(a0),d3
0000ADD4 6B00                       		bmi.s	loc_96A4
0000ADD6 0C03 0006                  		cmpi.b	#6,d3
0000ADDA 6500                       		bcs.s	locret_96A2
0000ADDC 7001                       		moveq	#1,d0
0000ADDE 0828 0000 0022             		btst	#0,$22(a0)
0000ADE4 6600                       		bne.s	locret_96A2
0000ADE6 7002                       		moveq	#2,d0
0000ADE8                            
0000ADE8                            locret_96A2:
0000ADE8 4E75                       		rts	
0000ADEA                            ; ===========================================================================
0000ADEA                            
0000ADEA                            loc_96A4:				; XREF: Obj1F_SetAni
0000ADEA 0C03 00FA                  		cmpi.b	#-6,d3
0000ADEE 6200                       		bhi.s	locret_96B6
0000ADF0 7002                       		moveq	#2,d0
0000ADF2 0828 0000 0022             		btst	#0,$22(a0)
0000ADF8 6600                       		bne.s	locret_96B6
0000ADFA 7001                       		moveq	#1,d0
0000ADFC                            
0000ADFC                            locret_96B6:
0000ADFC 4E75                       		rts	
0000ADFE                            ; End of function Obj1F_SetAni
0000ADFE                            
0000ADFE                            ; ===========================================================================
0000ADFE                            
0000ADFE                            Obj1F_Delete:				; XREF: Obj1F_Index
0000ADFE 6100 0000                  		bsr.w	DeleteObject
0000AE02 4E75                       		rts	
0000AE04                            ; ===========================================================================
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04                            ; Sub-object - missile that the	Crabmeat throws
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04                            
0000AE04                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000AE04 5428 0024                  		addq.b	#2,$24(a0)
0000AE08 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AE10 317C 0400 0002             		move.w	#$400,2(a0)
0000AE16 117C 0004 0001             		move.b	#4,1(a0)
0000AE1C 117C 0003 0018             		move.b	#3,$18(a0)
0000AE22 117C 0087 0020             		move.b	#$87,$20(a0)
0000AE28 117C 0008 0019             		move.b	#8,$19(a0)
0000AE2E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE34 117C 0007 001C             		move.b	#7,$1C(a0)
0000AE3A                            
0000AE3A                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AE3A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AE40 6100 0000                  		bsr.w	AnimateSprite
0000AE44 6100 0000                  		bsr.w	ObjectFall
0000AE48 6100 0000                  		bsr.w	DisplaySprite
0000AE4C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AE50 0640 00E0                  		addi.w	#$E0,d0
0000AE54 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AE58 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AE5A 4E75                       		rts	
0000AE5C                            ; ===========================================================================
0000AE5C                            
0000AE5C                            Obj1F_Delete2:
0000AE5C 6000 0000                  		bra.w	DeleteObject
0000AE60                            ; ===========================================================================
0000AE60                            Ani_obj1F:
0000AE60                            	include "_anim\obj1F.asm"
0000AE60                            ; ---------------------------------------------------------------------------
0000AE60                            ; Animation script - Crabmeat enemy
0000AE60                            ; ---------------------------------------------------------------------------
0000AE60 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AE66 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AE6C 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AE70 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AE74 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AE78 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AE7C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AE82 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AE88 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AE8E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AE92 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AE96                            		even
0000AE96                            		even
0000AE96                            
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96                            Map_obj1F:
0000AE96                            	include "_maps\obj1F.asm"
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AE96                            ; ---------------------------------------------------------------------------
0000AE96 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AE9A 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AE9E 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AEA2 0000                       		dc.w byte_97D7-Map_obj1F
0000AEA4 04                         byte_975E:	dc.b 4
0000AEA5 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AEAA F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AEAF 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AEB4 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AEB9 04                         byte_9773:	dc.b 4
0000AEBA F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AEBF F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AEC4 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AEC9 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AECE 04                         byte_9788:	dc.b 4
0000AECF EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AED4 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AED9 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AEDE FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AEE3 04                         byte_979D:	dc.b 4
0000AEE4 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AEE9 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AEEE FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AEF3 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AEF8 06                         byte_97B2:	dc.b 6
0000AEF9 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AEFE F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AF03 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AF08 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AF0D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AF12 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AF17 01                         byte_97D1:	dc.b 1
0000AF18 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AF1D 01                         byte_97D7:	dc.b 1
0000AF1E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AF24 00                         		even
0000AF24 00                         		even
0000AF24                            
0000AF24                            ; ===========================================================================
0000AF24                            ; ---------------------------------------------------------------------------
0000AF24                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AF24                            ; ---------------------------------------------------------------------------
0000AF24                            
0000AF24                            Obj22:					; XREF: Obj_Index
0000AF24 7000                       		moveq	#0,d0
0000AF26 1028 0024                  		move.b	$24(a0),d0
0000AF2A 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AF2E 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AF32                            ; ===========================================================================
0000AF32 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AF34 0000                       		dc.w Obj22_Action-Obj22_Index
0000AF36 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AF38                            ; ===========================================================================
0000AF38                            
0000AF38                            Obj22_Main:				; XREF: Obj22_Index
0000AF38 5428 0024                  		addq.b	#2,$24(a0)
0000AF3C 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AF44 317C 0444 0002             		move.w	#$444,2(a0)
0000AF4A 117C 0004 0001             		move.b	#4,1(a0)
0000AF50 117C 0003 0018             		move.b	#3,$18(a0)
0000AF56 117C 0008 0020             		move.b	#8,$20(a0)
0000AF5C 117C 0018 0019             		move.b	#$18,$19(a0)
0000AF62                            
0000AF62                            Obj22_Action:				; XREF: Obj22_Index
0000AF62 7000                       		moveq	#0,d0
0000AF64 1028 0025                  		move.b	$25(a0),d0
0000AF68 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AF6C 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AF70 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AF76 6100 0000                  		bsr.w	AnimateSprite
0000AF7A 6000 0000                  		bra.w	MarkObjGone
0000AF7E                            ; ===========================================================================
0000AF7E 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AF80 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AF82                            ; ===========================================================================
0000AF82                            
0000AF82                            Obj22_Move:				; XREF: Obj22_Index2
0000AF82 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF86 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AF88 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AF8E 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AF90 5428 0025                  		addq.b	#2,$25(a0)
0000AF94 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AF9A 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000AFA0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000AFA6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AFAC 6600                       		bne.s	locret_986C	; if not, branch
0000AFAE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AFB2                            
0000AFB2                            locret_986C:
0000AFB2 4E75                       		rts	
0000AFB4                            ; ===========================================================================
0000AFB4                            
0000AFB4                            Obj22_Fire:				; XREF: Obj22_Move
0000AFB4 6100 0000                  		bsr.w	SingleObjLoad
0000AFB8 6600                       		bne.s	locret_98D0
0000AFBA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000AFBE 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFCA 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000AFD0 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000AFD6 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000AFDC 303C 0018                  		move.w	#$18,d0
0000AFE0 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AFE6 6600                       		bne.s	loc_98AA	; if not, branch
0000AFE8 4440                       		neg.w	d0
0000AFEA 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000AFEE                            
0000AFEE                            loc_98AA:
0000AFEE D169 0008                  		add.w	d0,8(a1)
0000AFF2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000AFF8 337C 000E 0032             		move.w	#$E,$32(a1)
0000AFFE 2348 003C                  		move.l	a0,$3C(a1)
0000B002 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B008 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B00E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B014                            
0000B014                            locret_98D0:
0000B014 4E75                       		rts	
0000B016                            ; ===========================================================================
0000B016                            
0000B016                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B016 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B01A 6B00                       		bmi.s	Obj22_ChgDir
0000B01C 6100 0000                  		bsr.w	SpeedToPos
0000B020 4A28 0034                  		tst.b	$34(a0)
0000B024 6600                       		bne.s	locret_992A
0000B026 3038 D008                  		move.w	($FFFFD008).w,d0
0000B02A 9068 0008                  		sub.w	8(a0),d0
0000B02E 6A00                       		bpl.s	Obj22_SetNrSonic
0000B030 4440                       		neg.w	d0
0000B032                            
0000B032                            Obj22_SetNrSonic:
0000B032 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B036 6400                       		bcc.s	locret_992A	; if not, branch
0000B038 4A28 0001                  		tst.b	1(a0)
0000B03C 6A00                       		bpl.s	locret_992A
0000B03E 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B044 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B04A 6000                       		bra.s	Obj22_Stop
0000B04C                            ; ===========================================================================
0000B04C                            
0000B04C                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B04C 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B052 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B058 317C 003B 0032             		move.w	#59,$32(a0)
0000B05E                            
0000B05E                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B05E 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B062 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B068 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B06E                            
0000B06E                            locret_992A:
0000B06E 4E75                       		rts	
0000B070                            ; ===========================================================================
0000B070                            
0000B070                            Obj22_Delete:				; XREF: Obj22_Index
0000B070 6100 0000                  		bsr.w	DeleteObject
0000B074 4E75                       		rts	
0000B076                            ; ===========================================================================
0000B076                            ; ---------------------------------------------------------------------------
0000B076                            ; Object 23 - missile that Buzz	Bomber throws
0000B076                            ; ---------------------------------------------------------------------------
0000B076                            
0000B076                            Obj23:					; XREF: Obj_Index
0000B076 7000                       		moveq	#0,d0
0000B078 1028 0024                  		move.b	$24(a0),d0
0000B07C 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B080 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B084                            ; ===========================================================================
0000B084 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B086 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B088 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B08A 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B08C 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            Obj23_Main:				; XREF: Obj23_Index
0000B08E 5368 0032                  		subq.w	#1,$32(a0)
0000B092 6A00                       		bpl.s	Obj23_ChkCancel
0000B094 5428 0024                  		addq.b	#2,$24(a0)
0000B098 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B0A0 317C 2444 0002             		move.w	#$2444,2(a0)
0000B0A6 117C 0004 0001             		move.b	#4,1(a0)
0000B0AC 117C 0003 0018             		move.b	#3,$18(a0)
0000B0B2 117C 0008 0019             		move.b	#8,$19(a0)
0000B0B8 0228 0003 0022             		andi.b	#3,$22(a0)
0000B0BE 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B0C2 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B0C4 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B0CA 117C 0087 0020             		move.b	#$87,$20(a0)
0000B0D0 117C 0001 001C             		move.b	#1,$1C(a0)
0000B0D6 6000                       		bra.s	Obj23_Animate2
0000B0D8                            ; ===========================================================================
0000B0D8                            
0000B0D8                            Obj23_Animate:				; XREF: Obj23_Index
0000B0D8 6100                       		bsr.s	Obj23_ChkCancel
0000B0DA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B0E0 6100 0000                  		bsr.w	AnimateSprite
0000B0E4 6000 0000                  		bra.w	DisplaySprite
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B0E8                            ; destroyed, and if it has, then cancel	the missile
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            
0000B0E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0E8                            
0000B0E8                            
0000B0E8                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B0E8 2268 003C                  		movea.l	$3C(a0),a1
0000B0EC 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B0F0 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B0F2 4E75                       		rts	
0000B0F4                            ; End of function Obj23_ChkCancel
0000B0F4                            
0000B0F4                            ; ===========================================================================
0000B0F4                            
0000B0F4                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B0F4 0828 0007 0022             		btst	#7,$22(a0)
0000B0FA 6600                       		bne.s	Obj23_Explode
0000B0FC 117C 0087 0020             		move.b	#$87,$20(a0)
0000B102 117C 0001 001C             		move.b	#1,$1C(a0)
0000B108 6100 0000                  		bsr.w	SpeedToPos
0000B10C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B112 6100 0000                  		bsr.w	AnimateSprite
0000B116 6100 0000                  		bsr.w	DisplaySprite
0000B11A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B11E 0640 00E0                  		addi.w	#$E0,d0
0000B122 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B126 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B128 4E75                       		rts	
0000B12A                            ; ===========================================================================
0000B12A                            
0000B12A                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B12A 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B12E 117C 0000 0024             		move.b	#0,$24(a0)
0000B134 6000 F30A                  		bra.w	Obj24
0000B138                            ; ===========================================================================
0000B138                            
0000B138                            Obj23_Delete:				; XREF: Obj23_Index
0000B138 6100 0000                  		bsr.w	DeleteObject
0000B13C 4E75                       		rts	
0000B13E                            ; ===========================================================================
0000B13E                            
0000B13E                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B13E 4A28 0001                  		tst.b	1(a0)
0000B142 6AF4                       		bpl.s	Obj23_Delete
0000B144 6100 0000                  		bsr.w	SpeedToPos
0000B148                            
0000B148                            Obj23_Animate2:				; XREF: Obj23_Main
0000B148 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B14E 6100 0000                  		bsr.w	AnimateSprite
0000B152 6100 0000                  		bsr.w	DisplaySprite
0000B156 4E75                       		rts	
0000B158                            ; ===========================================================================
0000B158                            Ani_obj22:
0000B158                            	include "_anim\obj22.asm"
0000B158                            ; ---------------------------------------------------------------------------
0000B158                            ; Animation script - Buzz Bomber enemy
0000B158                            ; ---------------------------------------------------------------------------
0000B158 0000                       		dc.w byte_9A1E-Ani_obj22
0000B15A 0000                       		dc.w byte_9A22-Ani_obj22
0000B15C 0000                       		dc.w byte_9A26-Ani_obj22
0000B15E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B162 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B166 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B16A                            		even
0000B16A                            		even
0000B16A                            
0000B16A                            Ani_obj23:
0000B16A                            	include "_anim\obj23.asm"
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            ; Animation script - missile that Buzz Bomber throws
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A 0000                       		dc.w byte_9A2E-Ani_obj23
0000B16C 0000                       		dc.w byte_9A32-Ani_obj23
0000B16E 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B172 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B176                            		even
0000B176                            		even
0000B176                            
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            ; Sprite mappings - Buzz Bomber	enemy
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            Map_obj22:
0000B176                            	include "_maps\obj22.asm"
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            ; Sprite mappings - Buzz Bomber	enemy
0000B176                            ; ---------------------------------------------------------------------------
0000B176 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B17A 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B17E 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B182 06                         byte_9A42:	dc.b 6
0000B183 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B188 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B18D 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B192 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B197 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B19C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B1A1 06                         byte_9A61:	dc.b 6
0000B1A2 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B1A7 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B1AC 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B1B1 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B1B6 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B1BB F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B1C0 07                         byte_9A80:	dc.b 7
0000B1C1 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B1C6 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B1CB F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B1D0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B1D5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B1DA F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B1DF F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B1E4 07                         byte_9AA4:	dc.b 7
0000B1E5 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B1EA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B1EF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B1F4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B1F9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B1FE F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B203 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B208 06                         byte_9AC8:	dc.b 6
0000B209 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B20E 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B213 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B218 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B21D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B222 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B227 04                         byte_9AE7:	dc.b 4
0000B228 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B22D 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B232 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B237 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B23C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B241 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B246                            		even
0000B246                            		even
0000B246                            
0000B246                            ; ---------------------------------------------------------------------------
0000B246                            ; Sprite mappings - missile that Buzz Bomber throws
0000B246                            ; ---------------------------------------------------------------------------
0000B246                            Map_obj23:
0000B246                            	include "_maps\obj23.asm"
0000B246                            ; ---------------------------------------------------------------------------
0000B246                            ; Sprite mappings - missile that Buzz Bomber throws
0000B246                            ; ---------------------------------------------------------------------------
0000B246 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B24A 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B24E 01                         byte_9B0E:	dc.b 1
0000B24F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B254 01                         byte_9B14:	dc.b 1
0000B255 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B25A 01                         byte_9B1A:	dc.b 1
0000B25B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B260 01                         byte_9B20:	dc.b 1
0000B261 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B266                            		even
0000B266                            		even
0000B266                            
0000B266                            ; ===========================================================================
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            ; Object 25 - rings
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            
0000B266                            Obj25:					; XREF: Obj_Index
0000B266 7000                       		moveq	#0,d0
0000B268 1028 0024                  		move.b	$24(a0),d0
0000B26C 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B270 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B274                            ; ===========================================================================
0000B274 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B276 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B278 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B27A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B27C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B27E                            ; ---------------------------------------------------------------------------
0000B27E                            ; Distances between rings (format: horizontal, vertical)
0000B27E                            ; ---------------------------------------------------------------------------
0000B27E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B280 1800                       		dc.b $18, 0		; horizontal normal
0000B282 2000                       		dc.b $20, 0		; horizontal wide
0000B284 0010                       		dc.b 0,	$10		; vertical tight
0000B286 0018                       		dc.b 0,	$18		; vertical normal
0000B288 0020                       		dc.b 0,	$20		; vertical wide
0000B28A 1010                       		dc.b $10, $10		; diagonal
0000B28C 1818                       		dc.b $18, $18
0000B28E 2020                       		dc.b $20, $20
0000B290 F010                       		dc.b $F0, $10
0000B292 E818                       		dc.b $E8, $18
0000B294 E020                       		dc.b $E0, $20
0000B296 1008                       		dc.b $10, 8
0000B298 1810                       		dc.b $18, $10
0000B29A F008                       		dc.b $F0, 8
0000B29C E810                       		dc.b $E8, $10
0000B29E                            ; ===========================================================================
0000B29E                            
0000B29E                            Obj25_Main:				; XREF: Obj25_Index
0000B29E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B2A2 7000                       		moveq	#0,d0
0000B2A4 1028 0023                  		move.b	$23(a0),d0
0000B2A8 45F2 0002                  		lea	2(a2,d0.w),a2
0000B2AC 1812                       		move.b	(a2),d4
0000B2AE 1228 0028                  		move.b	$28(a0),d1
0000B2B2 1001                       		move.b	d1,d0
0000B2B4 0241 0007                  		andi.w	#7,d1
0000B2B8 0C41 0007                  		cmpi.w	#7,d1
0000B2BC 6600                       		bne.s	loc_9B80
0000B2BE 7206                       		moveq	#6,d1
0000B2C0                            
0000B2C0                            loc_9B80:
0000B2C0 4841                       		swap	d1
0000B2C2 323C 0000                  		move.w	#0,d1
0000B2C6 E808                       		lsr.b	#4,d0
0000B2C8 D040                       		add.w	d0,d0
0000B2CA 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B2CE 4885                       		ext.w	d5
0000B2D0 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B2D4 4886                       		ext.w	d6
0000B2D6 2248                       		movea.l	a0,a1
0000B2D8 3428 0008                  		move.w	8(a0),d2
0000B2DC 3628 000C                  		move.w	$C(a0),d3
0000B2E0 E20C                       		lsr.b	#1,d4
0000B2E2 6500                       		bcs.s	loc_9C02
0000B2E4 0892 0007                  		bclr	#7,(a2)
0000B2E8 6000                       		bra.s	loc_9BBA
0000B2EA                            ; ===========================================================================
0000B2EA                            
0000B2EA                            Obj25_MakeRings:
0000B2EA 4841                       		swap	d1
0000B2EC E20C                       		lsr.b	#1,d4
0000B2EE 6500                       		bcs.s	loc_9C02
0000B2F0 0892 0007                  		bclr	#7,(a2)
0000B2F4 6100 0000                  		bsr.w	SingleObjLoad
0000B2F8 6600                       		bne.s	loc_9C0E
0000B2FA                            
0000B2FA                            loc_9BBA:				; XREF: Obj25_Main
0000B2FA 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B2FE 5429 0024                  		addq.b	#2,$24(a1)
0000B302 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B306 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B30C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B310 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B318 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B31E 137C 0004 0001             		move.b	#4,1(a1)
0000B324 137C 0002 0018             		move.b	#2,$18(a1)
0000B32A 137C 0047 0020             		move.b	#$47,$20(a1)
0000B330 137C 0008 0019             		move.b	#8,$19(a1)
0000B336 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B33C 1341 0034                  		move.b	d1,$34(a1)
0000B340                            
0000B340                            loc_9C02:
0000B340 5241                       		addq.w	#1,d1
0000B342 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B344 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B346 4841                       		swap	d1
0000B348 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B34C                            
0000B34C                            loc_9C0E:
0000B34C 0812 0000                  		btst	#0,(a2)
0000B350 6600 0000                  		bne.w	DeleteObject
0000B354                            
0000B354                            Obj25_Animate:				; XREF: Obj25_Index
0000B354 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B35A 6100 0000                  		bsr.w	DisplaySprite
0000B35E 3028 0032                  		move.w	$32(a0),d0
0000B362 0240 FF80                  		andi.w	#$FF80,d0
0000B366 3238 F700                  		move.w	($FFFFF700).w,d1
0000B36A 0441 0080                  		subi.w	#$80,d1
0000B36E 0241 FF80                  		andi.w	#$FF80,d1
0000B372 9041                       		sub.w	d1,d0
0000B374 0C40 0280                  		cmpi.w	#$280,d0
0000B378 6200                       		bhi.s	Obj25_Delete
0000B37A 4E75                       		rts	
0000B37C                            ; ===========================================================================
0000B37C                            
0000B37C                            Obj25_Collect:				; XREF: Obj25_Index
0000B37C 5428 0024                  		addq.b	#2,$24(a0)
0000B380 117C 0000 0020             		move.b	#0,$20(a0)
0000B386 117C 0001 0018             		move.b	#1,$18(a0)
0000B38C 6100 0000                  		bsr.w	CollectRing
0000B390 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B394 7000                       		moveq	#0,d0
0000B396 1028 0023                  		move.b	$23(a0),d0
0000B39A 1228 0034                  		move.b	$34(a0),d1
0000B39E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B3A2                            
0000B3A2                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B3A2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B3A8 6100 0000                  		bsr.w	AnimateSprite
0000B3AC 6000 0000                  		bra.w	DisplaySprite
0000B3B0                            ; ===========================================================================
0000B3B0                            
0000B3B0                            Obj25_Delete:				; XREF: Obj25_Index
0000B3B0 6000 0000                  		bra.w	DeleteObject
0000B3B4                            
0000B3B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3B4                            
0000B3B4                            
0000B3B4                            CollectRing:				; XREF: Obj25_Collect
0000B3B4 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B3B8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B3BE 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B3C2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B3C8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B3CA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B3D0 6700                       		beq.s	loc_9CA4
0000B3D2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B3D8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B3DA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B3E0 6600                       		bne.s	Obj25_PlaySnd
0000B3E2                            
0000B3E2                            loc_9CA4:
0000B3E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B3E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B3EA 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B3EE                            
0000B3EE                            Obj25_PlaySnd:
0000B3EE 4EF9 0000 1018             		jmp	(PlaySound_Special).l
0000B3F4                            ; End of function CollectRing
0000B3F4                            
0000B3F4                            ; ===========================================================================
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4                            
0000B3F4                            Obj37:					; XREF: Obj_Index
0000B3F4 7000                       		moveq	#0,d0
0000B3F6 1028 0024                  		move.b	$24(a0),d0
0000B3FA 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B3FE 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B402                            ; ===========================================================================
0000B402 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B404 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B406 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B408 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B40A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B40C                            ; ===========================================================================
0000B40C                            
0000B40C                            Obj37_CountRings:			; XREF: Obj37_Index
0000B40C 2248                       		movea.l	a0,a1
0000B40E 7A00                       		moveq	#0,d5
0000B410 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B414 7020                       		moveq	#32,d0
0000B416 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B418 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B41A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B41C                            
0000B41C                            loc_9CDE:
0000B41C 5345                       		subq.w	#1,d5
0000B41E 383C 0288                  		move.w	#$288,d4
0000B422 6000                       		bra.s	Obj37_MakeRings
0000B424                            ; ===========================================================================
0000B424                            
0000B424                            Obj37_Loop:
0000B424 6100 0000                  		bsr.w	SingleObjLoad
0000B428 6600 0000                  		bne.w	Obj37_ResetCounter
0000B42C                            
0000B42C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B42C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B430 5429 0024                  		addq.b	#2,$24(a1)
0000B434 137C 0008 0016             		move.b	#8,$16(a1)
0000B43A 137C 0008 0017             		move.b	#8,$17(a1)
0000B440 3368 0008 0008             		move.w	8(a0),8(a1)
0000B446 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B44C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B454 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B45A 137C 0004 0001             		move.b	#4,1(a1)
0000B460 137C 0003 0018             		move.b	#3,$18(a1)
0000B466 137C 0047 0020             		move.b	#$47,$20(a1)
0000B46C 137C 0008 0019             		move.b	#8,$19(a1)
0000B472 4A44                       		tst.w	d4
0000B474 6B00                       		bmi.s	loc_9D62
0000B476 3004                       		move.w	d4,d0
0000B478 4EB8 287A                  		jsr	CalcSine
0000B47C 3404                       		move.w	d4,d2
0000B47E E04A                       		lsr.w	#8,d2
0000B480 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B484 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B486 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B48A BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B48E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B490 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B492 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B494                            
0000B494                            @skiphalvingvel:
0000B494 E560                       		asl.w	d2,d0
0000B496 E561                       		asl.w	d2,d1
0000B498 3400                       		move.w	d0,d2
0000B49A 3601                       		move.w	d1,d3
0000B49C 0604 0010                  		addi.b	#$10,d4
0000B4A0 6400                       		bcc.s	loc_9D62
0000B4A2 0444 0080                  		subi.w	#$80,d4
0000B4A6 6400                       		bcc.s	loc_9D62
0000B4A8 383C 0288                  		move.w	#$288,d4
0000B4AC                            
0000B4AC                            loc_9D62:
0000B4AC 3342 0010                  		move.w	d2,$10(a1)
0000B4B0 3343 0012                  		move.w	d3,$12(a1)
0000B4B4 4442                       		neg.w	d2
0000B4B6 4444                       		neg.w	d4
0000B4B8 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B4BC                            
0000B4BC                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B4BC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B4C2 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B4C8 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B4CE 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B4D0 1140 001F                          move.b  d0,$1F(a0)       ; Move d0 to new timer
0000B4D4 11C0 FEC6                          move.b  d0,($FFFFFEC6).w      ; Move d0 to old timer (for animated purposes)
0000B4D8 303C 00C6                  		move.w	#$C6,d0
0000B4DC 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B4E2                            
0000B4E2                            Obj37_Bounce:				; XREF: Obj37_Index
0000B4E2 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B4E8 6100 0000                  		bsr.w	SpeedToPos
0000B4EC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4F2 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B4F6 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B4F8 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B4FC BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B500 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B502 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B508                            
0000B508                            @skipbounceslow:
0000B508 6B00                       		bmi.s	Obj37_ChkDel
0000B50A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B50E D007                       		add.b	d7,d0
0000B510 0200 0003                  		andi.b	#3,d0
0000B514 6600                       		bne.s	Obj37_ChkDel
0000B516 4EB9 0000 0000             		jsr	ObjHitFloor
0000B51C 4A41                       		tst.w	d1
0000B51E 6A00                       		bpl.s	Obj37_ChkDel
0000B520 D368 000C                  		add.w	d1,$C(a0)
0000B524 3028 0012                  		move.w	$12(a0),d0
0000B528 E440                       		asr.w	#2,d0
0000B52A 9168 0012                  		sub.w	d0,$12(a0)
0000B52E 4468 0012                  		neg.w	$12(a0)
0000B532                            
0000B532                            Obj37_ChkDel:
0000B532 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B536 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B53A 0C78 FF00 F72C                     cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B540 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B544 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B548 0640 00E0                  		addi.w	#$E0,d0
0000B54C B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000B550 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000B552                            ;Mercury Lost Rings Flash
0000B552 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000B558 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000B55C 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000B562 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000B566 4E75                       		rts
0000B568                            ;end Lost Rings Flash
0000B568                            ; ===========================================================================
0000B568                            
0000B568                            Obj37_Collect:				; XREF: Obj37_Index
0000B568 5428 0024                  		addq.b	#2,$24(a0)
0000B56C 117C 0000 0020             		move.b	#0,$20(a0)
0000B572 117C 0001 0018             		move.b	#1,$18(a0)
0000B578 6100 FE3A                  		bsr.w	CollectRing
0000B57C                            
0000B57C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B57C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B582 6100 0000                  		bsr.w	AnimateSprite
0000B586 6000 0000                  		bra.w	DisplaySprite
0000B58A                            ; ===========================================================================
0000B58A                            
0000B58A                            Obj37_Delete:				; XREF: Obj37_Index
0000B58A 6000 0000                  		bra.w	DeleteObject
0000B58E                            ; ===========================================================================
0000B58E                            ; ---------------------------------------------------------------------------
0000B58E                            ; Object 4B - giant ring for entry to special stage
0000B58E                            ; ---------------------------------------------------------------------------
0000B58E                            
0000B58E                            Obj4B:					; XREF: Obj_Index
0000B58E 7000                       		moveq	#0,d0
0000B590 1028 0024                  		move.b	$24(a0),d0
0000B594 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B598 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B59C                            ; ===========================================================================
0000B59C 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B59E 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B5A0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B5A2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B5A4                            ; ===========================================================================
0000B5A4                            
0000B5A4                            Obj4B_Main:				; XREF: Obj4B_Index
0000B5A4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B5AC 317C 2400 0002             		move.w	#$2400,2(a0)
0000B5B2 0028 0004 0001             		ori.b	#4,1(a0)
0000B5B8 117C 0040 0019             		move.b	#$40,$19(a0)
0000B5BE 4A28 0001                  		tst.b	1(a0)
0000B5C2 6A00                       		bpl.s	Obj4B_Animate
0000B5C4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B5CA 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B5CE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B5D4 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B5D6 4E75                       		rts	
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B5D8 5428 0024                  		addq.b	#2,$24(a0)
0000B5DC 117C 0002 0018             		move.b	#2,$18(a0)
0000B5E2 117C 0052 0020             		move.b	#$52,$20(a0)
0000B5E8 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B5EE                            
0000B5EE                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B5EE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B5F4 3028 0008                  		move.w	8(a0),d0
0000B5F8 0240 FF80                  		andi.w	#$FF80,d0
0000B5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B600 0441 0080                  		subi.w	#$80,d1
0000B604 0241 FF80                  		andi.w	#$FF80,d1
0000B608 9041                       		sub.w	d1,d0
0000B60A 0C40 0280                  		cmpi.w	#$280,d0
0000B60E 6200 0000                  		bhi.w	DeleteObject
0000B612 6000 0000                  		bra.w	DisplaySprite
0000B616                            ; ===========================================================================
0000B616                            
0000B616                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B616 5528 0024                  		subq.b	#2,$24(a0)
0000B61A 117C 0000 0020             		move.b	#0,$20(a0)
0000B620 6100 0000                  		bsr.w	SingleObjLoad
0000B624 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B628 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B62C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B632 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B638 2348 003C                  		move.l	a0,$3C(a1)
0000B63C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B640 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B644 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B646 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B64C                            
0000B64C                            Obj4B_PlaySnd:
0000B64C 303C 00C3                  		move.w	#$C3,d0
0000B650 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B656 6096                       		bra.s	Obj4B_Animate
0000B658                            ; ===========================================================================
0000B658                            
0000B658                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B658 6000 0000                  		bra.w	DeleteObject
0000B65C                            ; ===========================================================================
0000B65C                            ; ---------------------------------------------------------------------------
0000B65C                            ; Object 7C - flash effect when	you collect the	giant ring
0000B65C                            ; ---------------------------------------------------------------------------
0000B65C                            
0000B65C                            Obj7C:					; XREF: Obj_Index
0000B65C 7000                       		moveq	#0,d0
0000B65E 1028 0024                  		move.b	$24(a0),d0
0000B662 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B666 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B66A                            ; ===========================================================================
0000B66A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B66C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B66E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            Obj7C_Main:				; XREF: Obj7C_Index
0000B670 5428 0024                  		addq.b	#2,$24(a0)
0000B674 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B67C 317C 2462 0002             		move.w	#$2462,2(a0)
0000B682 0028 0004 0001             		ori.b	#4,1(a0)
0000B688 117C 0000 0018             		move.b	#0,$18(a0)
0000B68E 117C 0020 0019             		move.b	#$20,$19(a0)
0000B694 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B69A                            
0000B69A                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B69A 6100                       		bsr.s	Obj7C_Collect
0000B69C 3028 0008                  		move.w	8(a0),d0
0000B6A0 0240 FF80                  		andi.w	#$FF80,d0
0000B6A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B6A8 0441 0080                  		subi.w	#$80,d1
0000B6AC 0241 FF80                  		andi.w	#$FF80,d1
0000B6B0 9041                       		sub.w	d1,d0
0000B6B2 0C40 0280                  		cmpi.w	#$280,d0
0000B6B6 6200 0000                  		bhi.w	DeleteObject
0000B6BA 6000 0000                  		bra.w	DisplaySprite
0000B6BE                            
0000B6BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6BE                            
0000B6BE                            
0000B6BE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B6BE 5328 001E                  		subq.b	#1,$1E(a0)
0000B6C2 6A00                       		bpl.s	locret_9F76
0000B6C4 117C 0001 001E             		move.b	#1,$1E(a0)
0000B6CA 5228 001A                  		addq.b	#1,$1A(a0)
0000B6CE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B6D4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B6D6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B6DC 6600                       		bne.s	locret_9F76	; if not, branch
0000B6DE 2268 003C                  		movea.l	$3C(a0),a1
0000B6E2 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B6E8 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B6EE 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B6F4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B6F8 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B6FC                            
0000B6FC                            locret_9F76:
0000B6FC 4E75                       		rts	
0000B6FE                            ; ===========================================================================
0000B6FE                            
0000B6FE                            Obj7C_End:				; XREF: Obj7C_Collect
0000B6FE 5428 0024                  		addq.b	#2,$24(a0)
0000B702 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B708 588F                       		addq.l	#4,sp
0000B70A 4E75                       		rts	
0000B70C                            ; End of function Obj7C_Collect
0000B70C                            
0000B70C                            ; ===========================================================================
0000B70C                            
0000B70C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B70C 6000 0000                  		bra.w	DeleteObject
0000B710                            ; ===========================================================================
0000B710                            Ani_obj25:
0000B710                            	include "_anim\obj25.asm"
0000B710                            ; ---------------------------------------------------------------------------
0000B710                            ; Animation script - ring
0000B710                            ; ---------------------------------------------------------------------------
0000B710 0000                       		dc.w byte_9F8C-Ani_obj25
0000B712 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B718                            		even
0000B718                            		even
0000B718                            
0000B718                            ; ---------------------------------------------------------------------------
0000B718                            ; Sprite mappings - rings
0000B718                            ; ---------------------------------------------------------------------------
0000B718                            Map_obj25:
0000B718                            	include "_maps\obj25.asm"
0000B718                            ; ---------------------------------------------------------------------------
0000B718                            ; Sprite mappings - rings
0000B718                            ; ---------------------------------------------------------------------------
0000B718 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B71C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B720 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B724 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B728 01                         byte_9FA2:	dc.b 1
0000B729 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B72E 01                         byte_9FA8:	dc.b 1
0000B72F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B734 01                         byte_9FAE:	dc.b 1
0000B735 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B73A 01                         byte_9FB4:	dc.b 1
0000B73B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B740 01                         byte_9FBA:	dc.b 1
0000B741 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B746 01                         byte_9FC0:	dc.b 1
0000B747 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B74C 01                         byte_9FC6:	dc.b 1
0000B74D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B752 01                         byte_9FCC:	dc.b 1
0000B753 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B758                            		even
0000B758                            		even
0000B758                            
0000B758                            ; ---------------------------------------------------------------------------
0000B758                            ; Sprite mappings - giant ring
0000B758                            ; ---------------------------------------------------------------------------
0000B758                            Map_obj4B:
0000B758                            	include "_maps\obj4B.asm"
0000B758                            ; ---------------------------------------------------------------------------
0000B758                            ; Sprite mappings - giant ring
0000B758                            ; ---------------------------------------------------------------------------
0000B758 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B75C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B760 0A                         byte_9FDA:	dc.b $A
0000B761 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B766 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B76B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B770 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B775 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B77A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B77F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B784 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B789 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B78E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B793 08                         byte_A00D:	dc.b 8
0000B794 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B799 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B79E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B7A3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B7A8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B7AD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B7B2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B7B7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B7BC 04                         byte_A036:	dc.b 4
0000B7BD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B7C2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B7C7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B7CC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B7D1 08                         byte_A04B:	dc.b 8
0000B7D2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B7D7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B7DC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B7E1 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B7E6 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B7EB 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B7F0 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B7F5 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B7FA                            		even
0000B7FA                            		even
0000B7FA                            
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            ; Sprite mappings - flash effect when you collect the giant ring
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            Map_obj7C:
0000B7FA                            	include "_maps\obj7C.asm"
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            ; Sprite mappings - flash effect when you collect the giant ring
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B7FE 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B802 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B806 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B80A 02                         byte_A084:	dc.b 2
0000B80B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B810 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B815 04                         byte_A08F:	dc.b 4
0000B816 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B81B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B820 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B825 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B82A 04                         byte_A0A4:	dc.b 4
0000B82B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B830 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B835 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B83A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B83F 04                         byte_A0B9:	dc.b 4
0000B840 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B845 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B84A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B84F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B854 04                         byte_A0CE:	dc.b 4
0000B855 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B85A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B85F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B864 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B869 04                         byte_A0E3:	dc.b 4
0000B86A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B86F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B874 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B879 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B87E 02                         byte_A0F8:	dc.b 2
0000B87F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B884 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B889 04                         byte_A103:	dc.b 4
0000B88A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B88F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B894 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B899 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B89E                            		even
0000B89E                            		even
0000B89E                            
0000B89E                            ; ===========================================================================
0000B89E                            ; ---------------------------------------------------------------------------
0000B89E                            ; Object 26 - monitors
0000B89E                            ; ---------------------------------------------------------------------------
0000B89E                            
0000B89E                            Obj26:					; XREF: Obj_Index
0000B89E 7000                       		moveq	#0,d0
0000B8A0 1028 0024                  		move.b	$24(a0),d0
0000B8A4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B8A8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B8AC                            ; ===========================================================================
0000B8AC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B8AE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B8B0 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B8B2 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B8B4 0000                       		dc.w Obj26_Display-Obj26_Index
0000B8B6                            ; ===========================================================================
0000B8B6                            
0000B8B6                            Obj26_Main:				; XREF: Obj26_Index
0000B8B6 5428 0024                  		addq.b	#2,$24(a0)
0000B8BA 117C 000E 0016             		move.b	#$E,$16(a0)
0000B8C0 117C 000E 0017             		move.b	#$E,$17(a0)
0000B8C6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B8CE 317C 0680 0002             		move.w	#$680,2(a0)
0000B8D4 117C 0004 0001             		move.b	#4,1(a0)
0000B8DA 117C 0003 0018             		move.b	#3,$18(a0)
0000B8E0 117C 000F 0019             		move.b	#$F,$19(a0)
0000B8E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B8EA 7000                       		moveq	#0,d0
0000B8EC 1028 0023                  		move.b	$23(a0),d0
0000B8F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B8F6 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B8FC 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B8FE 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B904 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B90A 4E75                       		rts	
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B90C 117C 0046 0020             		move.b	#$46,$20(a0)
0000B912 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B918                            
0000B918                            Obj26_Solid:				; XREF: Obj26_Index
0000B918 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B91C 6700                       		beq.s	loc_A1EC	; if not, branch
0000B91E 5500                       		subq.b	#2,d0
0000B920 6600                       		bne.s	Obj26_Fall
0000B922 7200                       		moveq	#0,d1
0000B924 1228 0019                  		move.b	$19(a0),d1
0000B928 0641 000B                  		addi.w	#$B,d1
0000B92C 6100 D3F2                  		bsr.w	ExitPlatform
0000B930 0829 0003 0022             		btst	#3,$22(a1)
0000B936 6600 0000                  		bne.w	loc_A1BC
0000B93A 4228 0025                  		clr.b	$25(a0)
0000B93E 6000 0000                  		bra.w	Obj26_Animate
0000B942                            ; ===========================================================================
0000B942                            
0000B942                            loc_A1BC:				; XREF: Obj26_Solid
0000B942 363C 0010                  		move.w	#$10,d3
0000B946 3428 0008                  		move.w	8(a0),d2
0000B94A 6100 D932                  		bsr.w	MvSonicOnPtfm
0000B94E 6000 0000                  		bra.w	Obj26_Animate
0000B952                            ; ===========================================================================
0000B952                            
0000B952                            Obj26_Fall:				; XREF: Obj26_Solid
0000B952 6100 0000                  		bsr.w	ObjectFall
0000B956 4EB9 0000 0000             		jsr	ObjHitFloor
0000B95C 4A41                       		tst.w	d1
0000B95E 6A00 0000                  		bpl.w	Obj26_Animate
0000B962 D368 000C                  		add.w	d1,$C(a0)
0000B966 4268 0012                  		clr.w	$12(a0)
0000B96A 4228 0025                  		clr.b	$25(a0)
0000B96E 6000 0000                  		bra.w	Obj26_Animate
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            loc_A1EC:				; XREF: Obj26_Solid
0000B972 323C 001A                  		move.w	#$1A,d1
0000B976 343C 000F                  		move.w	#$F,d2
0000B97A 6100 0000                  		bsr.w	Obj26_SolidSides
0000B97E 6700 0000                  		beq.w	loc_A25C
0000B982 4A29 003A                  		tst.b	$3A(a1)
0000B986 6600                       		bne.s	loc_A25C
0000B988 4A41                       		tst.w	d1
0000B98A 6A00                       		bpl.s	loc_A220
0000B98C 9769 000C                  		sub.w	d3,$C(a1)
0000B990 6100 D27C                  		bsr.w	loc_74AE
0000B994 117C 0002 0025             		move.b	#2,$25(a0)
0000B99A 6000 0000                  		bra.w	Obj26_Animate
0000B99E                            ; ===========================================================================
0000B99E                            
0000B99E                            loc_A220:
0000B99E 4A40                       		tst.w	d0
0000B9A0 6700 0000                  		beq.w	loc_A246
0000B9A4 6B00                       		bmi.s	loc_A230
0000B9A6 4A69 0010                  		tst.w	$10(a1)
0000B9AA 6B00                       		bmi.s	loc_A246
0000B9AC 6000                       		bra.s	loc_A236
0000B9AE                            ; ===========================================================================
0000B9AE                            
0000B9AE                            loc_A230:
0000B9AE 4A69 0010                  		tst.w	$10(a1)
0000B9B2 6A00                       		bpl.s	loc_A246
0000B9B4                            
0000B9B4                            loc_A236:
0000B9B4 9169 0008                  		sub.w	d0,8(a1)
0000B9B8 337C 0000 0014             		move.w	#0,$14(a1)
0000B9BE 337C 0000 0010             		move.w	#0,$10(a1)
0000B9C4                            
0000B9C4                            loc_A246:
0000B9C4 0829 0001 0022             		btst	#1,$22(a1)
0000B9CA 6600                       		bne.s	loc_A26A
0000B9CC 08E9 0005 0022             		bset	#5,$22(a1)
0000B9D2 08E8 0005 0022             		bset	#5,$22(a0)
0000B9D8 6000                       		bra.s	Obj26_Animate
0000B9DA                            ; ===========================================================================
0000B9DA                            
0000B9DA                            loc_A25C:
0000B9DA 0828 0005 0022             		btst	#5,$22(a0)
0000B9E0 6700                       		beq.s	Obj26_Animate
0000B9E2 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B9E8 6700                       		beq.s	loc_A26A
0000B9EA 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B9F0 6700                       		beq.s	loc_A26A
0000B9F2 337C 0001 001C             		move.w	#1,$1C(a1)
0000B9F8                            
0000B9F8                            loc_A26A:
0000B9F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000B9FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000BA04                            
0000BA04                            Obj26_Animate:				; XREF: Obj26_Index
0000BA04 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BA0A 6100 0000                  		bsr.w	AnimateSprite
0000BA0E                            
0000BA0E                            Obj26_Display:				; XREF: Obj26_Index
0000BA0E 6100 0000                  		bsr.w	DisplaySprite
0000BA12 3028 0008                  		move.w	8(a0),d0
0000BA16 0240 FF80                  		andi.w	#$FF80,d0
0000BA1A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA1E 0441 0080                  		subi.w	#$80,d1
0000BA22 0241 FF80                  		andi.w	#$FF80,d1
0000BA26 9041                       		sub.w	d1,d0
0000BA28 0C40 0280                  		cmpi.w	#$280,d0
0000BA2C 6200 0000                  		bhi.w	DeleteObject
0000BA30 4E75                       		rts	
0000BA32                            ; ===========================================================================
0000BA32                            
0000BA32                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BA32 5428 0024                  		addq.b	#2,$24(a0)
0000BA36 117C 0000 0020             		move.b	#0,$20(a0)
0000BA3C 6100 0000                  		bsr.w	SingleObjLoad
0000BA40 6600                       		bne.s	Obj26_Explode
0000BA42 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BA46 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BA52 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BA58                            
0000BA58                            Obj26_Explode:
0000BA58 6100 0000                  		bsr.w	SingleObjLoad
0000BA5C 6600                       		bne.s	Obj26_SetBroken
0000BA5E 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BA62 5429 0024                  		addq.b	#2,$24(a1)
0000BA66 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BA72                            
0000BA72                            Obj26_SetBroken:
0000BA72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BA76 7000                       		moveq	#0,d0
0000BA78 1028 0023                  		move.b	$23(a0),d0
0000BA7C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BA82 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BA88 6000 0000                  		bra.w	DisplaySprite
0000BA8C                            ; ===========================================================================
0000BA8C                            ; ---------------------------------------------------------------------------
0000BA8C                            ; Object 2E - contents of monitors
0000BA8C                            ; ---------------------------------------------------------------------------
0000BA8C                            
0000BA8C                            Obj2E:					; XREF: Obj_Index
0000BA8C 7000                       		moveq	#0,d0
0000BA8E 1028 0024                  		move.b	$24(a0),d0
0000BA92 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BA96 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BA9A 6000 0000                  		bra.w	DisplaySprite
0000BA9E                            ; ===========================================================================
0000BA9E 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BAA0 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BAA2 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BAA4                            ; ===========================================================================
0000BAA4                            
0000BAA4                            Obj2E_Main:				; XREF: Obj2E_Index
0000BAA4 5428 0024                  		addq.b	#2,$24(a0)
0000BAA8 317C 0680 0002             		move.w	#$680,2(a0)
0000BAAE 117C 0024 0001             		move.b	#$24,1(a0)
0000BAB4 117C 0003 0018             		move.b	#3,$18(a0)
0000BABA 117C 0008 0019             		move.b	#8,$19(a0)
0000BAC0 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BAC6 7000                       		moveq	#0,d0
0000BAC8 1028 001C                  		move.b	$1C(a0),d0
0000BACC 5400                       		addq.b	#2,d0
0000BACE 1140 001A                  		move.b	d0,$1A(a0)
0000BAD2 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BAD8 D000                       		add.b	d0,d0
0000BADA D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BADE 5249                       		addq.w	#1,a1
0000BAE0 2149 0004                  		move.l	a1,4(a0)
0000BAE4                            
0000BAE4                            Obj2E_Move:				; XREF: Obj2E_Index
0000BAE4 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000BAE8 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000BAEC 6100 0000                  		bsr.w	SpeedToPos
0000BAF0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000BAF6 4E75                       		rts	
0000BAF8                            ; ===========================================================================
0000BAF8                            
0000BAF8                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000BAF8 5428 0024                          addq.b    #2,$24(a0)
0000BAFC 317C 001D 001E                     move.w    #29,$1E(a0)
0000BB02 1028 001C                          move.b    $1C(a0),d0
0000BB06 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000BB0A 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000BB0C 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000BB0E 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000BB10 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000BB14 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000BB1A 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000BB1C 4E75                               rts ; The Eggman monitor now does something!
0000BB1E                            ; ===========================================================================
0000BB1E                            
0000BB1E                            Obj2E_ChkSonic:
0000BB1E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BB22 6600                       		bne.s	Obj2E_ChkShoes
0000BB24                            
0000BB24                            ExtraLife:
0000BB24 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BB28 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BB2C 303C 0088                  		move.w	#$88,d0
0000BB30 4EF9 0000 1010             		jmp	(PlaySound).l	; play extra life music
0000BB36                            ; ===========================================================================
0000BB36                            
0000BB36                            Obj2E_ChkShoes:
0000BB36 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BB3A 6600                       		bne.s	Obj2E_ChkShield
0000BB3C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BB42                            
0000BB42 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; am I already speed shoe'd?
0000BB46 6600                       		bne.s	Obj2E_NoShoes	; if so, branch
0000BB48 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000BB4E                            		
0000BB4E                            Obj2E_NoShoes:
0000BB4E 4E75                       		rts
0000BB50                            ; ===========================================================================
0000BB50                            
0000BB50                            Obj2E_ChkShield:
0000BB50 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BB54 6600                       		bne.s	Obj2E_ChkInvinc
0000BB56 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BB5C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BB62 303C 00AF                  		move.w	#$AF,d0
0000BB66 4EF9 0000 1010             		jmp	(PlaySound).l	; play shield sound
0000BB6C                            ; ===========================================================================
0000BB6C                            
0000BB6C                            Obj2E_ChkInvinc:
0000BB6C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BB70 6600 0000                  		bne.w	Obj2E_ChkRings
0000BB74 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BB7A                            
0000BB7A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; am I already invincible?
0000BB7E 6600                       		bne.s	Obj2E_NoInv		; if so, branch
0000BB80                            
0000BB80 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BB86                            
0000BB86 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BB8C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BB92 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BB98 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BB9E 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BBA4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BBAA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BBB0 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BBB6                            		
0000BBB6                            Obj2E_NoInv:
0000BBB6 4E75                       		rts	
0000BBB8                            ; ===========================================================================
0000BBB8                            
0000BBB8                            Obj2E_ChkRings:
0000BBB8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BBBC 6600                       		bne.s	Obj2E_ChkS
0000BBBE 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BBC4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BBCA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BBD0 6500                       		bcs.s	Obj2E_RingSound
0000BBD2 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BBD8 6700 FF4A                  		beq.w	ExtraLife
0000BBDC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BBE2 6500                       		bcs.s	Obj2E_RingSound
0000BBE4 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BBEA 6700 FF38                  		beq.w	ExtraLife
0000BBEE                            
0000BBEE                            Obj2E_RingSound:
0000BBEE 303C 00B5                  		move.w	#$B5,d0
0000BBF2 4EF9 0000 1010             		jmp	(PlaySound).l	; play ring sound
0000BBF8                            ; ===========================================================================
0000BBF8                            
0000BBF8                            Obj2E_ChkS:
0000BBF8 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000BBFC 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code
0000BC00 4E71                       		nop
0000BC02                            
0000BC02                            Obj2E_ChkGoggles:	
0000BC02 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000BC06 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000BC0A 4E71                       		nop
0000BC0C                            
0000BC0C                            Obj2E_ChkEnd:
0000BC0C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BC0E                            ; ===========================================================================
0000BC0E                            
0000BC0E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BC0E 5368 001E                  		subq.w	#1,$1E(a0)
0000BC12 6B00 0000                  		bmi.w	DeleteObject
0000BC16 4E75                       		rts	
0000BC18                            ; ---------------------------------------------------------------------------
0000BC18                            ; Subroutine to	make the sides of a monitor solid
0000BC18                            ; ---------------------------------------------------------------------------
0000BC18                            
0000BC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC18                            
0000BC18                            
0000BC18                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BC18 43F8 D000                  		lea	($FFFFD000).w,a1
0000BC1C 3029 0008                  		move.w	8(a1),d0
0000BC20 9068 0008                  		sub.w	8(a0),d0
0000BC24 D041                       		add.w	d1,d0
0000BC26 6B00                       		bmi.s	loc_A4E6
0000BC28 3601                       		move.w	d1,d3
0000BC2A D643                       		add.w	d3,d3
0000BC2C B043                       		cmp.w	d3,d0
0000BC2E 6200                       		bhi.s	loc_A4E6
0000BC30 1629 0016                  		move.b	$16(a1),d3
0000BC34 4883                       		ext.w	d3
0000BC36 D443                       		add.w	d3,d2
0000BC38 3629 000C                  		move.w	$C(a1),d3
0000BC3C 9668 000C                  		sub.w	$C(a0),d3
0000BC40 D642                       		add.w	d2,d3
0000BC42 6B00                       		bmi.s	loc_A4E6
0000BC44 D442                       		add.w	d2,d2
0000BC46 B642                       		cmp.w	d2,d3
0000BC48 6400                       		bcc.s	loc_A4E6
0000BC4A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BC4E 6B00                       		bmi.s	loc_A4E6
0000BC50 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BC56 6400                       		bcc.s	loc_A4E6
0000BC58 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BC5C 6600                       		bne.s	loc_A4E6
0000BC5E B240                       		cmp.w	d0,d1
0000BC60 6400                       		bcc.s	loc_A4DC
0000BC62 D241                       		add.w	d1,d1
0000BC64 9041                       		sub.w	d1,d0
0000BC66                            
0000BC66                            loc_A4DC:
0000BC66 0C43 0010                  		cmpi.w	#$10,d3
0000BC6A 6500                       		bcs.s	loc_A4EA
0000BC6C                            
0000BC6C                            loc_A4E2:
0000BC6C 7201                       		moveq	#1,d1
0000BC6E 4E75                       		rts	
0000BC70                            ; ===========================================================================
0000BC70                            
0000BC70                            loc_A4E6:
0000BC70 7200                       		moveq	#0,d1
0000BC72 4E75                       		rts	
0000BC74                            ; ===========================================================================
0000BC74                            
0000BC74                            loc_A4EA:
0000BC74 7200                       		moveq	#0,d1
0000BC76 1228 0019                  		move.b	$19(a0),d1
0000BC7A 5841                       		addq.w	#4,d1
0000BC7C 3401                       		move.w	d1,d2
0000BC7E D442                       		add.w	d2,d2
0000BC80 D269 0008                  		add.w	8(a1),d1
0000BC84 9268 0008                  		sub.w	8(a0),d1
0000BC88 6BE2                       		bmi.s	loc_A4E2
0000BC8A B242                       		cmp.w	d2,d1
0000BC8C 64DE                       		bcc.s	loc_A4E2
0000BC8E 72FF                       		moveq	#-1,d1
0000BC90 4E75                       		rts	
0000BC92                            ; End of function Obj26_SolidSides
0000BC92                            
0000BC92                            ; ===========================================================================
0000BC92                            Ani_obj26:
0000BC92                            	include "_anim\obj26.asm"
0000BC92                            ; ---------------------------------------------------------------------------
0000BC92                            ; Animation script - monitors
0000BC92                            ; ---------------------------------------------------------------------------
0000BC92 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000BC98 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000BC9E 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000BCA4 0000                       		dc.w byte_A582-Ani_obj26
0000BCA6 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000BCAC 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000BCB8 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000BCC4 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000BCD0 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000BCDC 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000BCE8 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000BCF4 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BD00 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BD0C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BD14                            		even
0000BD14                            		even
0000BD14                            
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14                            ; Sprite mappings - monitors
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14                            Map_obj26:
0000BD14                            	include "_maps\obj26.asm"
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14                            ; Sprite mappings - monitors
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000BD18 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000BD1C 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000BD20 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000BD24 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000BD28 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000BD2C 01                         byte_A5A2:	dc.b 1			; static monitor
0000BD2D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD32 02                         byte_A5A8:	dc.b 2			; static monitor
0000BD33 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000BD38 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD3D 02                         byte_A5B3:	dc.b 2			; static monitor
0000BD3E F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000BD43 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD48 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000BD49 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000BD4E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD53 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000BD54 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000BD59 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD5E 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000BD5F F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000BD64 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD69 02                         byte_A5DF:	dc.b 2			; shield monitor
0000BD6A F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000BD6F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD74 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000BD75 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000BD7A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD7F 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000BD80 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000BD85 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD8A 02                         byte_A600:	dc.b 2			; 'S' monitor
0000BD8B F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000BD90 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BD95 02                         byte_A60B:	dc.b 2			; goggles monitor
0000BD96 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000BD9B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BDA0 01                         byte_A616:	dc.b 1			; broken monitor
0000BDA1 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000BDA6                            		even
0000BDA6                            		even
0000BDA6                            
0000BDA6                            ; ===========================================================================
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6                            ; Object 0E - Sonic on the title screen
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6                            
0000BDA6                            Obj0E:					; XREF: Obj_Index
0000BDA6 7000                       		moveq	#0,d0
0000BDA8 1028 0024                  		move.b	$24(a0),d0
0000BDAC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000BDB0 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000BDB4                            ; ===========================================================================
0000BDB4 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000BDB6 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000BDB8 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000BDBA 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000BDBC                            ; ===========================================================================
0000BDBC                            
0000BDBC                            Obj0E_Main:				; XREF: Obj0E_Index
0000BDBC 5428 0024                  		addq.b	#2,$24(a0)
0000BDC0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000BDC6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000BDCC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000BDD4 317C 2300 0002             		move.w	#$2300,2(a0)
0000BDDA 117C 0001 0018             		move.b	#1,$18(a0)
0000BDE0 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000BDE6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000BDEC 6100 0000                  		bsr.w	AnimateSprite
0000BDF0                            
0000BDF0                            Obj0E_Delay:				; XREF: Obj0E_Index
0000BDF0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000BDF4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000BDF6 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000BDFA 6000 0000                  		bra.w	DisplaySprite
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000BDFE 4E75                       		rts	
0000BE00                            ; ===========================================================================
0000BE00                            
0000BE00                            Obj0E_Move:				; XREF: Obj0E_Index
0000BE00 5168 000A                  		subq.w	#8,$A(a0)
0000BE04 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000BE0A 6600                       		bne.s	Obj0E_Display
0000BE0C 5428 0024                  		addq.b	#2,$24(a0)
0000BE10                            
0000BE10                            Obj0E_Display:
0000BE10 6000 0000                  		bra.w	DisplaySprite
0000BE14                            ; ===========================================================================
0000BE14 4E75                       		rts	
0000BE16                            ; ===========================================================================
0000BE16                            
0000BE16                            Obj0E_Animate:				; XREF: Obj0E_Index
0000BE16 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000BE1C 6100 0000                  		bsr.w	AnimateSprite
0000BE20 6000 0000                  		bra.w	DisplaySprite
0000BE24                            ; ===========================================================================
0000BE24 4E75                       		rts	
0000BE26                            ; ===========================================================================
0000BE26                            ; ---------------------------------------------------------------------------
0000BE26                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000BE26                            ; ---------------------------------------------------------------------------
0000BE26                            
0000BE26                            Obj0F:					; XREF: Obj_Index
0000BE26 7000                       		moveq	#0,d0
0000BE28 1028 0024                  		move.b	$24(a0),d0
0000BE2C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000BE30 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000BE34 6000 0000                  		bra.w	DisplaySprite
0000BE38                            ; ===========================================================================
0000BE38 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000BE3A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000BE3C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000BE3E                            ; ===========================================================================
0000BE3E                            
0000BE3E                            Obj0F_Main:				; XREF: Obj0F_Index
0000BE3E 5428 0024                  		addq.b	#2,$24(a0)
0000BE42 317C 00D0 0008             		move.w	#$D0,8(a0)
0000BE48 317C 0130 000A             		move.w	#$130,$A(a0)
0000BE4E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000BE56 317C 0200 0002             		move.w	#$200,2(a0)
0000BE5C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000BE62 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000BE64 5428 0024                  		addq.b	#2,$24(a0)
0000BE68 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000BE6E 6600                       		bne.s	locret_A6F8	; if not, branch
0000BE70 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000BE76 317C 0170 0008             		move.w	#$170,8(a0)
0000BE7C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000BE82                            
0000BE82                            locret_A6F8:				; XREF: Obj0F_Index
0000BE82 4E75                       		rts	
0000BE84                            ; ===========================================================================
0000BE84                            
0000BE84                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000BE84 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000BE8A 6000 0000                  		bra.w	AnimateSprite
0000BE8E                            ; ===========================================================================
0000BE8E                            Ani_obj0E:
0000BE8E                            	include "_anim\obj0E.asm"
0000BE8E                            ; ---------------------------------------------------------------------------
0000BE8E                            ; Animation script - Sonic on the title screen
0000BE8E                            ; ---------------------------------------------------------------------------
0000BE8E 0000                       		dc.w byte_A706-Ani_obj0E
0000BE90 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000BE9C                            		even
0000BE9C                            		even
0000BE9C                            
0000BE9C                            Ani_obj0F:
0000BE9C                            	include "_anim\obj0F.asm"
0000BE9C                            ; ---------------------------------------------------------------------------
0000BE9C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000BE9C                            ; ---------------------------------------------------------------------------
0000BE9C 0000                       		dc.w byte_A714-Ani_obj0F
0000BE9E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000BEA2                            		even
0000BEA2                            		even
0000BEA2                            
0000BEA2                            ; ---------------------------------------------------------------------------
0000BEA2                            ; Subroutine to	animate	a sprite using an animation script
0000BEA2                            ; ---------------------------------------------------------------------------
0000BEA2                            
0000BEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEA2                            
0000BEA2                            
0000BEA2                            AnimateSprite:
0000BEA2 7000                       		moveq	#0,d0
0000BEA4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000BEA8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000BEAC 6700                       		beq.s	Anim_Run	; if not, branch
0000BEAE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000BEB2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BEB8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000BEBE                            
0000BEBE                            Anim_Run:
0000BEBE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000BEC2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000BEC4 D040                       		add.w	d0,d0
0000BEC6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000BECA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000BECE 7200                       		moveq	#0,d1
0000BED0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000BED4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000BED8 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000BEDA                            
0000BEDA                            Anim_Next:
0000BEDA 1200                       		move.b	d0,d1
0000BEDC 0200 001F                  		andi.b	#$1F,d0
0000BEE0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000BEE4 1028 0022                  		move.b	$22(a0),d0
0000BEE8 E719                       		rol.b	#3,d1
0000BEEA B101                       		eor.b	d0,d1
0000BEEC 0201 0003                  		andi.b	#3,d1
0000BEF0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000BEF6 8328 0001                  		or.b	d1,1(a0)
0000BEFA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000BEFE                            
0000BEFE                            Anim_Wait:
0000BEFE 4E75                       		rts	
0000BF00                            ; ===========================================================================
0000BF00                            
0000BF00                            Anim_End_FF:
0000BF00 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000BF02 6600                       		bne.s	Anim_End_FE	; if not, branch
0000BF04 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000BF0A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000BF0E 60CA                       		bra.s	Anim_Next
0000BF10                            ; ===========================================================================
0000BF10                            
0000BF10                            Anim_End_FE:
0000BF10 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000BF12 6600                       		bne.s	Anim_End_FD	; if not, branch
0000BF14 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000BF18 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000BF1C 9200                       		sub.b	d0,d1
0000BF1E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000BF22 60B6                       		bra.s	Anim_Next
0000BF24                            ; ===========================================================================
0000BF24                            
0000BF24                            Anim_End_FD:
0000BF24 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000BF26 6600                       		bne.s	Anim_End_FC	; if not, branch
0000BF28 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000BF2E                            
0000BF2E                            Anim_End_FC:
0000BF2E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000BF30 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BF32 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BF36                            
0000BF36                            Anim_End_FB:
0000BF36 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BF38 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BF3A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BF40 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BF44                            
0000BF44                            Anim_End_FA:
0000BF44 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BF46 6600                       		bne.s	Anim_End	; if not, branch
0000BF48 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BF4C                            
0000BF4C                            Anim_End:
0000BF4C 4E75                       		rts	
0000BF4E                            ; End of function AnimateSprite
0000BF4E                            
0000BF4E                            ; ===========================================================================
0000BF4E                            ; ---------------------------------------------------------------------------
0000BF4E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BF4E                            ; ---------------------------------------------------------------------------
0000BF4E                            Map_obj0F:
0000BF4E                            	include "_maps\obj0F.asm"
0000BF4E                            ; ---------------------------------------------------------------------------
0000BF4E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BF4E                            ; ---------------------------------------------------------------------------
0000BF4E 0000                       		dc.w byte_A7CD-Map_obj0F
0000BF50 0000                       		dc.w byte_A7CC-Map_obj0F
0000BF52 0000                       		dc.w byte_A7EB-Map_obj0F
0000BF54 0000                       		dc.w byte_A882-Map_obj0F
0000BF56 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BF57 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BF5C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BF61 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BF66 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BF6B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BF70 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BF75 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BF76 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF7B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF80 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF85 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF8A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF8F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF94 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF99 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BF9E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BFA3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BFA8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFAD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFB2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFB7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFBC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFC1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFC6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFCB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFD0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFD5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BFDA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFDF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFE4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFE9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFEE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFF3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFF8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BFFD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C002 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C007 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C00C 01                         byte_A882:	dc.b 1			; "TM"
0000C00D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C012                            		even
0000C012                            		even
0000C012                            
0000C012                            ; ---------------------------------------------------------------------------
0000C012                            ; Sprite mappings - Sonic on the title screen
0000C012                            ; ---------------------------------------------------------------------------
0000C012                            Map_obj0E:
0000C012                            	include "_maps\obj0E.asm"
0000C012                            ; ---------------------------------------------------------------------------
0000C012                            ; Sprite mappings - Sonic on the title screen
0000C012                            ; ---------------------------------------------------------------------------
0000C012 0000                       		dc.w byte_A898-Map_obj0E
0000C014 0000                       		dc.w byte_A8CB-Map_obj0E
0000C016 0000                       		dc.w byte_A917-Map_obj0E
0000C018 0000                       		dc.w byte_A96D-Map_obj0E
0000C01A 0000                       		dc.w byte_A9AF-Map_obj0E
0000C01C 0000                       		dc.w byte_A9E7-Map_obj0E
0000C01E 0000                       		dc.w byte_AA47-Map_obj0E
0000C020 0000                       		dc.w byte_AAB1-Map_obj0E
0000C022 0A                         byte_A898:	dc.b $A
0000C023 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C028 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C02D 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C032 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C037 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C03C 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C041 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C046 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C04B 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C050 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C055 0F                         byte_A8CB:	dc.b $F
0000C056 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C05B 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C060 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C065 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C06A 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C06F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C074 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C079 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C07E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C083 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C088 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C08D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C092 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C097 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C09C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C0A1 11                         byte_A917:	dc.b $11
0000C0A2 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C0A7 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C0AC 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C0B1 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C0B6 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C0BB 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C0C0 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C0C5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C0CA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C0CF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C0D4 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C0D9 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C0DE 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C0E3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C0E8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C0ED 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C0F2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C0F7 0D                         byte_A96D:	dc.b $D
0000C0F8 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C0FD 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C102 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C107 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C10C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C111 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C116 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C11B 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C120 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C125 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C12A 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C12F 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C134 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C139 0B                         byte_A9AF:	dc.b $B
0000C13A 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C13F 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C144 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C149 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C14E 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C153 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C158 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C15D 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C162 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C167 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C16C 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C171 13                         byte_A9E7:	dc.b $13
0000C172 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C177 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C17C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C181 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C186 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C18B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C190 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C195 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C19A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C19F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C1A4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C1A9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C1AE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C1B3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C1B8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C1BD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C1C2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C1C7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C1CC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C1D1 15                         byte_AA47:	dc.b $15
0000C1D2 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C1D7 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C1DC 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C1E1 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C1E6 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C1EB 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C1F0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C1F5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C1FA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C1FF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C204 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C209 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C20E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C213 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C218 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C21D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C222 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C227 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C22C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C231 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C236 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C23B 16                         byte_AAB1:	dc.b $16
0000C23C 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C241 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C246 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C24B 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C250 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C255 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C25A 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C25F 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C264 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C269 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C26E 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C273 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C278 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C27D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C282 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C287 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C28C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C291 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C296 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C29B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C2A0 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C2A5 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C2AA                            		even
0000C2AA                            		even
0000C2AA                            
0000C2AA                            ; ===========================================================================
0000C2AA                            ; ---------------------------------------------------------------------------
0000C2AA                            ; Object 2B - Chopper enemy (GHZ)
0000C2AA                            ; ---------------------------------------------------------------------------
0000C2AA                            
0000C2AA                            Obj2B:					; XREF: Obj_Index
0000C2AA 7000                       		moveq	#0,d0
0000C2AC 1028 0024                  		move.b	$24(a0),d0
0000C2B0 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C2B4 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C2B8 6000 0000                  		bra.w	MarkObjGone
0000C2BC                            ; ===========================================================================
0000C2BC 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C2BE 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C2C0                            ; ===========================================================================
0000C2C0                            
0000C2C0                            Obj2B_Main:				; XREF: Obj2B_Index
0000C2C0 5428 0024                  		addq.b	#2,$24(a0)
0000C2C4 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C2CC 317C 047B 0002             		move.w	#$47B,2(a0)
0000C2D2 117C 0004 0001             		move.b	#4,1(a0)
0000C2D8 117C 0004 0018             		move.b	#4,$18(a0)
0000C2DE 117C 0009 0020             		move.b	#9,$20(a0)
0000C2E4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C2EA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C2F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C2F6                            
0000C2F6                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C2F6 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C2FC 6100 FBA4                  		bsr.w	AnimateSprite
0000C300 6100 0000                  		bsr.w	SpeedToPos
0000C304 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C30A 3028 0030                  		move.w	$30(a0),d0
0000C30E B068 000C                  		cmp.w	$C(a0),d0
0000C312 6400                       		bcc.s	Obj2B_ChgAni
0000C314 3140 000C                  		move.w	d0,$C(a0)
0000C318 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C31E                            
0000C31E                            Obj2B_ChgAni:
0000C31E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C324 0440 00C0                  		subi.w	#$C0,d0
0000C328 B068 000C                  		cmp.w	$C(a0),d0
0000C32C 6400                       		bcc.s	locret_ABB6
0000C32E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C334 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C338 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C33A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C340                            
0000C340                            locret_ABB6:
0000C340 4E75                       		rts	
0000C342                            ; ===========================================================================
0000C342                            Ani_obj2B:
0000C342                            	include "_anim\obj2B.asm"
0000C342                            ; ---------------------------------------------------------------------------
0000C342                            ; Animation script - Chopper enemy
0000C342                            ; ---------------------------------------------------------------------------
0000C342 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C344 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C346 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C348 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C34C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C350 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C354 00                         		even
0000C354 00                         		even
0000C354                            
0000C354                            ; ---------------------------------------------------------------------------
0000C354                            ; Sprite mappings - Chopper enemy (GHZ)
0000C354                            ; ---------------------------------------------------------------------------
0000C354                            Map_obj2B:
0000C354                            	include "_maps\obj2B.asm"
0000C354                            ; ---------------------------------------------------------------------------
0000C354                            ; Sprite mappings - Chopper enemy (GHZ)
0000C354                            ; ---------------------------------------------------------------------------
0000C354 0000                       		dc.w byte_ABCE-Map_obj2B
0000C356 0000                       		dc.w byte_ABD4-Map_obj2B
0000C358 01                         byte_ABCE:	dc.b 1
0000C359 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C35E 01                         byte_ABD4:	dc.b 1
0000C35F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C364                            		even
0000C364                            		even
0000C364                            
0000C364                            ; ===========================================================================
0000C364                            ; ---------------------------------------------------------------------------
0000C364                            ; Object 2C - Jaws enemy (LZ)
0000C364                            ; ---------------------------------------------------------------------------
0000C364                            
0000C364                            Obj2C:					; XREF: Obj_Index
0000C364 7000                       		moveq	#0,d0
0000C366 1028 0024                  		move.b	$24(a0),d0
0000C36A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C36E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C372                            ; ===========================================================================
0000C372 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C374 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C376                            ; ===========================================================================
0000C376                            
0000C376                            Obj2C_Main:				; XREF: Obj2C_Index
0000C376 5428 0024                  		addq.b	#2,$24(a0)
0000C37A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C382 317C 2486 0002             		move.w	#$2486,2(a0)
0000C388 0028 0004 0001             		ori.b	#4,1(a0)
0000C38E 117C 000A 0020             		move.b	#$A,$20(a0)
0000C394 117C 0004 0018             		move.b	#4,$18(a0)
0000C39A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C3A0 7000                       		moveq	#0,d0
0000C3A2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C3A6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C3A8 5340                       		subq.w	#1,d0
0000C3AA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C3AE 3140 0032                  		move.w	d0,$32(a0)
0000C3B2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C3B8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C3BE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C3C0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C3C4                            
0000C3C4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C3C4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C3C8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C3CA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C3D0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C3D4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C3DA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C3E0                            
0000C3E0                            Obj2C_Animate:
0000C3E0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C3E6 6100 FABA                  		bsr.w	AnimateSprite
0000C3EA 6100 0000                  		bsr.w	SpeedToPos
0000C3EE 6000 0000                  		bra.w	MarkObjGone
0000C3F2                            ; ===========================================================================
0000C3F2                            Ani_obj2C:
0000C3F2                            	include "_anim\obj2C.asm"
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2                            ; Animation script - Jaws enemy
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C3F4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C3FA                            		even
0000C3FA                            		even
0000C3FA                            
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Sprite mappings - Jaws enemy (LZ)
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            Map_obj2C:
0000C3FA                            	include "_maps\obj2C.asm"
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Sprite mappings - Jaws enemy (LZ)
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA 0000                       		dc.w byte_AC78-Map_obj2C
0000C3FC 0000                       		dc.w byte_AC83-Map_obj2C
0000C3FE 0000                       		dc.w byte_AC8E-Map_obj2C
0000C400 0000                       		dc.w byte_AC99-Map_obj2C
0000C402 02                         byte_AC78:	dc.b 2
0000C403 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C408 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C40D 02                         byte_AC83:	dc.b 2
0000C40E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C413 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C418 02                         byte_AC8E:	dc.b 2
0000C419 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C41E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C423 02                         byte_AC99:	dc.b 2
0000C424 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C429 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C42E                            		even
0000C42E                            		even
0000C42E                            
0000C42E                            ; ===========================================================================
0000C42E                            ; ---------------------------------------------------------------------------
0000C42E                            ; Object 2D - Burrobot enemy (LZ)
0000C42E                            ; ---------------------------------------------------------------------------
0000C42E                            
0000C42E                            Obj2D:					; XREF: Obj_Index
0000C42E 7000                       		moveq	#0,d0
0000C430 1028 0024                  		move.b	$24(a0),d0
0000C434 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C438 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C43C                            ; ===========================================================================
0000C43C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C43E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C440                            ; ===========================================================================
0000C440                            
0000C440                            Obj2D_Main:				; XREF: Obj2D_Index
0000C440 5428 0024                  		addq.b	#2,$24(a0)
0000C444 117C 0013 0016             		move.b	#$13,$16(a0)
0000C44A 117C 0008 0017             		move.b	#8,$17(a0)
0000C450 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C458 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C45E 0028 0004 0001             		ori.b	#4,1(a0)
0000C464 117C 0004 0018             		move.b	#4,$18(a0)
0000C46A 117C 0005 0020             		move.b	#5,$20(a0)
0000C470 117C 000C 0019             		move.b	#$C,$19(a0)
0000C476 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C47A 117C 0002 001C             		move.b	#2,$1C(a0)
0000C480                            
0000C480                            Obj2D_Action:				; XREF: Obj2D_Index
0000C480 7000                       		moveq	#0,d0
0000C482 1028 0025                  		move.b	$25(a0),d0
0000C486 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C48A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C48E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C494 6100 FA0C                  		bsr.w	AnimateSprite
0000C498 6000 0000                  		bra.w	MarkObjGone
0000C49C                            ; ===========================================================================
0000C49C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C49E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C4A0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C4A2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C4A4 5368 0030                  		subq.w	#1,$30(a0)
0000C4A8 6A00                       		bpl.s	locret_AD42
0000C4AA 5428 0025                  		addq.b	#2,$25(a0)
0000C4AE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C4B4 317C 0080 0010             		move.w	#$80,$10(a0)
0000C4BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000C4C0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C4C6 6700                       		beq.s	locret_AD42
0000C4C8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C4CC                            
0000C4CC                            locret_AD42:
0000C4CC 4E75                       		rts	
0000C4CE                            ; ===========================================================================
0000C4CE                            
0000C4CE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C4CE 5368 0030                  		subq.w	#1,$30(a0)
0000C4D2 6B00                       		bmi.s	loc_AD84
0000C4D4 6100 0000                  		bsr.w	SpeedToPos
0000C4D8 0868 0000 0032             		bchg	#0,$32(a0)
0000C4DE 6600                       		bne.s	loc_AD78
0000C4E0 3628 0008                  		move.w	8(a0),d3
0000C4E4 0643 000C                  		addi.w	#$C,d3
0000C4E8 0828 0000 0022             		btst	#0,$22(a0)
0000C4EE 6600                       		bne.s	loc_AD6A
0000C4F0 0443 0018                  		subi.w	#$18,d3
0000C4F4                            
0000C4F4                            loc_AD6A:
0000C4F4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C4FA 0C41 000C                  		cmpi.w	#$C,d1
0000C4FE 6C00                       		bge.s	loc_AD84
0000C500 4E75                       		rts	
0000C502                            ; ===========================================================================
0000C502                            
0000C502                            loc_AD78:				; XREF: Obj2D_Move
0000C502 4EB9 0000 0000             		jsr	ObjHitFloor
0000C508 D368 000C                  		add.w	d1,$C(a0)
0000C50C 4E75                       		rts	
0000C50E                            ; ===========================================================================
0000C50E                            
0000C50E                            loc_AD84:				; XREF: Obj2D_Move
0000C50E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C514 6700                       		beq.s	loc_ADA4
0000C516 5528 0025                  		subq.b	#2,$25(a0)
0000C51A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C520 317C 0000 0010             		move.w	#0,$10(a0)
0000C526 117C 0000 001C             		move.b	#0,$1C(a0)
0000C52C 4E75                       		rts	
0000C52E                            ; ===========================================================================
0000C52E                            
0000C52E                            loc_ADA4:
0000C52E 5428 0025                  		addq.b	#2,$25(a0)
0000C532 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C538 117C 0002 001C             		move.b	#2,$1C(a0)
0000C53E 4E75                       		rts	
0000C540                            ; ===========================================================================
0000C540                            
0000C540                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C540 6100 0000                  		bsr.w	SpeedToPos
0000C544 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C54A 6B00                       		bmi.s	locret_ADF0
0000C54C 117C 0003 001C             		move.b	#3,$1C(a0)
0000C552 4EB9 0000 0000             		jsr	ObjHitFloor
0000C558 4A41                       		tst.w	d1
0000C55A 6A00                       		bpl.s	locret_ADF0
0000C55C D368 000C                  		add.w	d1,$C(a0)
0000C560 317C 0000 0012             		move.w	#0,$12(a0)
0000C566 117C 0001 001C             		move.b	#1,$1C(a0)
0000C56C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C572 5528 0025                  		subq.b	#2,$25(a0)
0000C576 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C57A                            
0000C57A                            locret_ADF0:
0000C57A 4E75                       		rts	
0000C57C                            ; ===========================================================================
0000C57C                            
0000C57C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C57C 343C 0060                  		move.w	#$60,d2
0000C580 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C584 6400                       		bcc.s	locret_AE20
0000C586 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C58A 9068 000C                  		sub.w	$C(a0),d0
0000C58E 6400                       		bcc.s	locret_AE20
0000C590 0C40 FF80                  		cmpi.w	#-$80,d0
0000C594 6500                       		bcs.s	locret_AE20
0000C596 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C59A 6600                       		bne.s	locret_AE20
0000C59C 5528 0025                  		subq.b	#2,$25(a0)
0000C5A0 3141 0010                  		move.w	d1,$10(a0)
0000C5A4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C5AA                            
0000C5AA                            locret_AE20:
0000C5AA 4E75                       		rts	
0000C5AC                            
0000C5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5AC                            
0000C5AC                            
0000C5AC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C5AC 323C 0080                  		move.w	#$80,d1
0000C5B0 08E8 0000 0022             		bset	#0,$22(a0)
0000C5B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C5BA 9068 0008                  		sub.w	8(a0),d0
0000C5BE 6400                       		bcc.s	loc_AE40
0000C5C0 4440                       		neg.w	d0
0000C5C2 4441                       		neg.w	d1
0000C5C4 08A8 0000 0022             		bclr	#0,$22(a0)
0000C5CA                            
0000C5CA                            loc_AE40:
0000C5CA B042                       		cmp.w	d2,d0
0000C5CC 4E75                       		rts	
0000C5CE                            ; End of function Obj2D_ChkSonic2
0000C5CE                            
0000C5CE                            ; ===========================================================================
0000C5CE                            Ani_obj2D:
0000C5CE                            	include "_anim\obj2D.asm"
0000C5CE                            ; ---------------------------------------------------------------------------
0000C5CE                            ; Animation script - Burrobot enemy
0000C5CE                            ; ---------------------------------------------------------------------------
0000C5CE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C5D0 0000                       		dc.w byte_AE50-Ani_obj2D
0000C5D2 0000                       		dc.w byte_AE54-Ani_obj2D
0000C5D4 0000                       		dc.w byte_AE58-Ani_obj2D
0000C5D6 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C5DA 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C5DE 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C5E2 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C5E6 00                         		even
0000C5E6 00                         		even
0000C5E6                            
0000C5E6                            ; ---------------------------------------------------------------------------
0000C5E6                            ; Sprite mappings - Burrobot enemy (LZ)
0000C5E6                            ; ---------------------------------------------------------------------------
0000C5E6                            Map_obj2D:
0000C5E6                            	include "_maps\obj2D.asm"
0000C5E6                            ; ---------------------------------------------------------------------------
0000C5E6                            ; Sprite mappings - Burrobot enemy (LZ)
0000C5E6                            ; ---------------------------------------------------------------------------
0000C5E6 0000                       		dc.w byte_AE6A-Map_obj2D
0000C5E8 0000                       		dc.w byte_AE75-Map_obj2D
0000C5EA 0000                       		dc.w byte_AE80-Map_obj2D
0000C5EC 0000                       		dc.w byte_AE8B-Map_obj2D
0000C5EE 0000                       		dc.w byte_AE96-Map_obj2D
0000C5F0 0000                       		dc.w byte_AEA1-Map_obj2D
0000C5F2 0000                       		dc.w byte_AEAC-Map_obj2D
0000C5F4 02                         byte_AE6A:	dc.b 2
0000C5F5 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C5FA 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C5FF 02                         byte_AE75:	dc.b 2
0000C600 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C605 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C60A 02                         byte_AE80:	dc.b 2
0000C60B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C610 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C615 02                         byte_AE8B:	dc.b 2
0000C616 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C61B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C620 02                         byte_AE96:	dc.b 2
0000C621 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C626 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C62B 02                         byte_AEA1:	dc.b 2
0000C62C F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C631 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C636 02                         byte_AEAC:	dc.b 2
0000C637 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C63C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C642 00                         		even
0000C642 00                         		even
0000C642                            
0000C642                            ; ===========================================================================
0000C642                            ; ---------------------------------------------------------------------------
0000C642                            ; Object 2F - large moving platforms (MZ)
0000C642                            ; ---------------------------------------------------------------------------
0000C642                            
0000C642                            Obj2F:					; XREF: Obj_Index
0000C642 7000                       		moveq	#0,d0
0000C644 1028 0024                  		move.b	$24(a0),d0
0000C648 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C64C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C650                            ; ===========================================================================
0000C650 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C652 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C654                            
0000C654 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C656 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C658 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C65A 0140                       		dc.b 1,	$40
0000C65C 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C65E 0220                       		dc.b 2,	$20
0000C660                            ; ===========================================================================
0000C660                            
0000C660                            Obj2F_Main:				; XREF: Obj2F_Index
0000C660 5428 0024                  		addq.b	#2,$24(a0)
0000C664 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C66C 317C C000 0002             		move.w	#$C000,2(a0)
0000C672 117C 0004 0001             		move.b	#4,1(a0)
0000C678 117C 0005 0018             		move.b	#5,$18(a0)
0000C67E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C684 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C68A 7000                       		moveq	#0,d0
0000C68C 1028 0028                  		move.b	$28(a0),d0
0000C690 E448                       		lsr.w	#2,d0
0000C692 0240 001C                  		andi.w	#$1C,d0
0000C696 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C69A 3019                       		move.w	(a1)+,d0
0000C69C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C6A0 214A 0030                  		move.l	a2,$30(a0)
0000C6A4 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C6A8 1151 0019                  		move.b	(a1),$19(a0)
0000C6AC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C6B2 117C 0040 0016             		move.b	#$40,$16(a0)
0000C6B8 08E8 0004 0001             		bset	#4,1(a0)
0000C6BE                            
0000C6BE                            Obj2F_Action:				; XREF: Obj2F_Index
0000C6BE 6100 0000                  		bsr.w	Obj2F_Types
0000C6C2 4A28 0025                  		tst.b	$25(a0)
0000C6C6 6700                       		beq.s	Obj2F_Solid
0000C6C8 7200                       		moveq	#0,d1
0000C6CA 1228 0019                  		move.b	$19(a0),d1
0000C6CE 0641 000B                  		addi.w	#$B,d1
0000C6D2 6100 C64C                  		bsr.w	ExitPlatform
0000C6D6 0829 0003 0022             		btst	#3,$22(a1)
0000C6DC 6600 0000                  		bne.w	Obj2F_Slope
0000C6E0 4228 0025                  		clr.b	$25(a0)
0000C6E4 6000                       		bra.s	Obj2F_Display
0000C6E6                            ; ===========================================================================
0000C6E6                            
0000C6E6                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C6E6 7200                       		moveq	#0,d1
0000C6E8 1228 0019                  		move.b	$19(a0),d1
0000C6EC 0641 000B                  		addi.w	#$B,d1
0000C6F0 2468 0030                  		movea.l	$30(a0),a2
0000C6F4 3428 0008                  		move.w	8(a0),d2
0000C6F8 6100 D584                  		bsr.w	SlopeObject2
0000C6FC 6000                       		bra.s	Obj2F_Display
0000C6FE                            ; ===========================================================================
0000C6FE                            
0000C6FE                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C6FE 7200                       		moveq	#0,d1
0000C700 1228 0019                  		move.b	$19(a0),d1
0000C704 0641 000B                  		addi.w	#$B,d1
0000C708 343C 0020                  		move.w	#$20,d2
0000C70C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C712 6600                       		bne.s	loc_AF8E
0000C714 343C 0030                  		move.w	#$30,d2
0000C718                            
0000C718                            loc_AF8E:
0000C718 2468 0030                  		movea.l	$30(a0),a2
0000C71C 6100 0000                  		bsr.w	SolidObject2F
0000C720                            
0000C720                            Obj2F_Display:				; XREF: Obj2F_Action
0000C720 6100 0000                  		bsr.w	DisplaySprite
0000C724 6000 0000                  		bra.w	Obj2F_ChkDel
0000C728                            
0000C728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C728                            
0000C728                            
0000C728                            Obj2F_Types:				; XREF: Obj2F_Action
0000C728 7000                       		moveq	#0,d0
0000C72A 1028 0028                  		move.b	$28(a0),d0
0000C72E 0240 0007                  		andi.w	#7,d0
0000C732 D040                       		add.w	d0,d0
0000C734 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C738 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C73C                            ; End of function Obj2F_Types
0000C73C                            
0000C73C                            ; ===========================================================================
0000C73C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C73E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C740 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C742 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C744 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C746 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C748                            ; ===========================================================================
0000C748                            
0000C748                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C748 4E75                       		rts			; type 00 platform doesn't move
0000C74A                            ; ===========================================================================
0000C74A                            
0000C74A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C74A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C74E 323C 0020                  		move.w	#$20,d1
0000C752 6000                       		bra.s	Obj2F_Move
0000C754                            ; ===========================================================================
0000C754                            
0000C754                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C754 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C758 323C 0030                  		move.w	#$30,d1
0000C75C 6000                       		bra.s	Obj2F_Move
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C75E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C762 323C 0040                  		move.w	#$40,d1
0000C766 6000                       		bra.s	Obj2F_Move
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C768 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C76C 323C 0060                  		move.w	#$60,d1
0000C770                            
0000C770                            Obj2F_Move:
0000C770 0828 0003 0028             		btst	#3,$28(a0)
0000C776 6700                       		beq.s	loc_AFF2
0000C778 4440                       		neg.w	d0
0000C77A D041                       		add.w	d1,d0
0000C77C                            
0000C77C                            loc_AFF2:
0000C77C 3228 002C                  		move.w	$2C(a0),d1
0000C780 9240                       		sub.w	d0,d1
0000C782 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C786 4E75                       		rts	
0000C788                            ; ===========================================================================
0000C788                            
0000C788                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C788 1028 0034                  		move.b	$34(a0),d0
0000C78C 4A28 0025                  		tst.b	$25(a0)
0000C790 6600                       		bne.s	loc_B010
0000C792 5500                       		subq.b	#2,d0
0000C794 6400                       		bcc.s	loc_B01C
0000C796 7000                       		moveq	#0,d0
0000C798 6000                       		bra.s	loc_B01C
0000C79A                            ; ===========================================================================
0000C79A                            
0000C79A                            loc_B010:
0000C79A 5800                       		addq.b	#4,d0
0000C79C 0C00 0040                  		cmpi.b	#$40,d0
0000C7A0 6500                       		bcs.s	loc_B01C
0000C7A2 103C 0040                  		move.b	#$40,d0
0000C7A6                            
0000C7A6                            loc_B01C:
0000C7A6 1140 0034                  		move.b	d0,$34(a0)
0000C7AA 4EB9 0000 287A             		jsr	(CalcSine).l
0000C7B0 E848                       		lsr.w	#4,d0
0000C7B2 3200                       		move.w	d0,d1
0000C7B4 D068 002C                  		add.w	$2C(a0),d0
0000C7B8 3140 000C                  		move.w	d0,$C(a0)
0000C7BC 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C7C2 6600                       		bne.s	loc_B07A
0000C7C4 4A28 0035                  		tst.b	$35(a0)
0000C7C8 6600                       		bne.s	loc_B07A
0000C7CA 117C 0001 0035             		move.b	#1,$35(a0)
0000C7D0 6100 0000                  		bsr.w	SingleObjLoad2
0000C7D4 6600                       		bne.s	loc_B07A
0000C7D6 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C7DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C7E0 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C7E6 5069 002C                  		addq.w	#8,$2C(a1)
0000C7EA 5769 002C                  		subq.w	#3,$2C(a1)
0000C7EE 0469 0040 0008             		subi.w	#$40,8(a1)
0000C7F4 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C7FA 2348 0038                  		move.l	a0,$38(a1)
0000C7FE 2448                       		movea.l	a0,a2
0000C800 6100                       		bsr.s	sub_B09C
0000C802                            
0000C802                            loc_B07A:
0000C802 7400                       		moveq	#0,d2
0000C804 45E8 0036                  		lea	$36(a0),a2
0000C808 141A                       		move.b	(a2)+,d2
0000C80A 5302                       		subq.b	#1,d2
0000C80C 6500                       		bcs.s	locret_B09A
0000C80E                            
0000C80E                            loc_B086:
0000C80E 7000                       		moveq	#0,d0
0000C810 101A                       		move.b	(a2)+,d0
0000C812 ED48                       		lsl.w	#6,d0
0000C814 0640 D000                  		addi.w	#-$3000,d0
0000C818 3240                       		movea.w	d0,a1
0000C81A 3341 003C                  		move.w	d1,$3C(a1)
0000C81E 51CA FFEE                  		dbf	d2,loc_B086
0000C822                            
0000C822                            locret_B09A:
0000C822 4E75                       		rts	
0000C824                            
0000C824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C824                            
0000C824                            
0000C824                            sub_B09C:
0000C824 45EA 0036                  		lea	$36(a2),a2
0000C828 7000                       		moveq	#0,d0
0000C82A 1012                       		move.b	(a2),d0
0000C82C 5212                       		addq.b	#1,(a2)
0000C82E 45F2 0001                  		lea	1(a2,d0.w),a2
0000C832 3009                       		move.w	a1,d0
0000C834 0440 D000                  		subi.w	#-$3000,d0
0000C838 EC48                       		lsr.w	#6,d0
0000C83A 0240 007F                  		andi.w	#$7F,d0
0000C83E 1480                       		move.b	d0,(a2)
0000C840 4E75                       		rts	
0000C842                            ; End of function sub_B09C
0000C842                            
0000C842                            ; ===========================================================================
0000C842                            
0000C842                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C842 4A28 0035                  		tst.b	$35(a0)
0000C846 6700                       		beq.s	loc_B0C6
0000C848 4A28 0001                  		tst.b	1(a0)
0000C84C 6A00                       		bpl.s	Obj2F_DelFlames
0000C84E                            
0000C84E                            loc_B0C6:
0000C84E 3028 002A                  		move.w	$2A(a0),d0
0000C852 0240 FF80                  		andi.w	#$FF80,d0
0000C856 3238 F700                  		move.w	($FFFFF700).w,d1
0000C85A 0441 0080                  		subi.w	#$80,d1
0000C85E 0241 FF80                  		andi.w	#$FF80,d1
0000C862 9041                       		sub.w	d1,d0
0000C864 0C40 0280                  		cmpi.w	#$280,d0
0000C868 6200 0000                  		bhi.w	DeleteObject
0000C86C 4E75                       		rts	
0000C86E                            ; ===========================================================================
0000C86E                            
0000C86E                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C86E 7400                       		moveq	#0,d2
0000C870                            
0000C870                            loc_B0E8:
0000C870 45E8 0036                  		lea	$36(a0),a2
0000C874 1412                       		move.b	(a2),d2
0000C876 421A                       		clr.b	(a2)+
0000C878 5302                       		subq.b	#1,d2
0000C87A 6500                       		bcs.s	locret_B116
0000C87C                            
0000C87C                            loc_B0F4:
0000C87C 7000                       		moveq	#0,d0
0000C87E 1012                       		move.b	(a2),d0
0000C880 421A                       		clr.b	(a2)+
0000C882 ED48                       		lsl.w	#6,d0
0000C884 0640 D000                  		addi.w	#-$3000,d0
0000C888 3240                       		movea.w	d0,a1
0000C88A 6100 0000                  		bsr.w	DeleteObject2
0000C88E 51CA FFEC                  		dbf	d2,loc_B0F4
0000C892 117C 0000 0035             		move.b	#0,$35(a0)
0000C898 117C 0000 0034             		move.b	#0,$34(a0)
0000C89E                            
0000C89E                            locret_B116:
0000C89E 4E75                       		rts	
0000C8A0                            ; ===========================================================================
0000C8A0                            ; ---------------------------------------------------------------------------
0000C8A0                            ; Collision data for large moving platforms (MZ)
0000C8A0                            ; ---------------------------------------------------------------------------
0000C8A0                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C8EC                            		even
0000C8EC                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C918                            		even
0000C918                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C964                            		even
0000C964                            ; ===========================================================================
0000C964                            ; ---------------------------------------------------------------------------
0000C964                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C964                            ; (appears when	you walk on sinking platforms)
0000C964                            ; ---------------------------------------------------------------------------
0000C964                            
0000C964                            Obj35:					; XREF: Obj_Index
0000C964 7000                       		moveq	#0,d0
0000C966 1028 0024                  		move.b	$24(a0),d0
0000C96A 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C96E 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C972                            ; ===========================================================================
0000C972 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C974 0000                       		dc.w loc_B238-Obj35_Index
0000C976 0000                       		dc.w Obj35_Move-Obj35_Index
0000C978                            ; ===========================================================================
0000C978                            
0000C978                            Obj35_Main:				; XREF: Obj35_Index
0000C978 5428 0024                  		addq.b	#2,$24(a0)
0000C97C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C984 317C 0345 0002             		move.w	#$345,2(a0)
0000C98A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C990 117C 0004 0001             		move.b	#4,1(a0)
0000C996 117C 0001 0018             		move.b	#1,$18(a0)
0000C99C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C9A2 117C 0008 0019             		move.b	#8,$19(a0)
0000C9A8 303C 00C8                  		move.w	#$C8,d0
0000C9AC 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play flame sound
0000C9B2 4A28 0028                  		tst.b	$28(a0)
0000C9B6 6700                       		beq.s	loc_B238
0000C9B8 5428 0024                  		addq.b	#2,$24(a0)
0000C9BC 6000 0000                  		bra.w	Obj35_Move
0000C9C0                            ; ===========================================================================
0000C9C0                            
0000C9C0                            loc_B238:				; XREF: Obj35_Index
0000C9C0 2268 0030                  		movea.l	$30(a0),a1
0000C9C4 3228 0008                  		move.w	8(a0),d1
0000C9C8 9268 002A                  		sub.w	$2A(a0),d1
0000C9CC 0641 000C                  		addi.w	#$C,d1
0000C9D0 3001                       		move.w	d1,d0
0000C9D2 E248                       		lsr.w	#1,d0
0000C9D4 1031 0000                  		move.b	(a1,d0.w),d0
0000C9D8 4440                       		neg.w	d0
0000C9DA D068 002C                  		add.w	$2C(a0),d0
0000C9DE 3400                       		move.w	d0,d2
0000C9E0 D068 003C                  		add.w	$3C(a0),d0
0000C9E4 3140 000C                  		move.w	d0,$C(a0)
0000C9E8 0C41 0084                  		cmpi.w	#$84,d1
0000C9EC 6400                       		bcc.s	loc_B2B0
0000C9EE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9F6 0C41 0080                  		cmpi.w	#$80,d1
0000C9FA 6400                       		bcc.s	loc_B2B0
0000C9FC 2028 0008                  		move.l	8(a0),d0
0000CA00 0680 0008 0000             		addi.l	#$80000,d0
0000CA06 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CA0C 6600                       		bne.s	loc_B2B0
0000CA0E 6100 0000                  		bsr.w	SingleObjLoad2
0000CA12 6600                       		bne.s	loc_B2B0
0000CA14 12BC 0035                  		move.b	#$35,0(a1)
0000CA18 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA1E 3342 002C                  		move.w	d2,$2C(a1)
0000CA22 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CA28 137C 0001 0028             		move.b	#1,$28(a1)
0000CA2E 2468 0038                  		movea.l	$38(a0),a2
0000CA32 6100 FDF0                  		bsr.w	sub_B09C
0000CA36                            
0000CA36                            loc_B2B0:
0000CA36 6000                       		bra.s	Obj35_Animate
0000CA38                            ; ===========================================================================
0000CA38                            
0000CA38                            Obj35_Move:				; XREF: Obj35_Index
0000CA38 3028 002C                  		move.w	$2C(a0),d0
0000CA3C D068 003C                  		add.w	$3C(a0),d0
0000CA40 3140 000C                  		move.w	d0,$C(a0)
0000CA44                            
0000CA44                            Obj35_Animate:				; XREF: loc_B238
0000CA44 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CA4A 6100 F456                  		bsr.w	AnimateSprite
0000CA4E 6000 0000                  		bra.w	DisplaySprite
0000CA52                            ; ===========================================================================
0000CA52                            Ani_obj35:
0000CA52                            	include "_anim\obj35.asm"
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52                            ; Animation script - fireball that sits on the	floor (MZ)
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52 0000                       		dc.w byte_B2CE-Ani_obj35
0000CA54 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CA5A                            		even
0000CA5A                            		even
0000CA5A                            
0000CA5A                            ; ---------------------------------------------------------------------------
0000CA5A                            ; Sprite mappings - large moving platforms (MZ)
0000CA5A                            ; ---------------------------------------------------------------------------
0000CA5A                            Map_obj2F:
0000CA5A                            	include "_maps\obj2F.asm"
0000CA5A                            ; ---------------------------------------------------------------------------
0000CA5A                            ; Sprite mappings - large moving platforms (MZ)
0000CA5A                            ; ---------------------------------------------------------------------------
0000CA5A 0000                       		dc.w byte_B2DA-Map_obj2F
0000CA5C 0000                       		dc.w byte_B31C-Map_obj2F
0000CA5E 0000                       		dc.w byte_B34F-Map_obj2F
0000CA60 0D                         byte_B2DA:	dc.b $D
0000CA61 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CA66 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CA6B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CA70 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CA75 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CA7A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CA7F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CA84 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CA89 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CA8E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CA93 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CA98 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CA9D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CAA2 0A                         byte_B31C:	dc.b $A
0000CAA3 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CAA8 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CAAD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CAB2 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CAB7 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CABC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CAC1 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CAC6 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CACB C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CAD0 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CAD5 06                         byte_B34F:	dc.b 6
0000CAD6 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CADB F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CAE0 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CAE5 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CAEA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CAEF 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CAF4                            		even
0000CAF4                            		even
0000CAF4                            
0000CAF4                            ; ---------------------------------------------------------------------------
0000CAF4                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CAF4                            ; ---------------------------------------------------------------------------
0000CAF4                            Map_obj14:
0000CAF4                            	include "_maps\obj14.asm"
0000CAF4                            ; ---------------------------------------------------------------------------
0000CAF4                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CAF4                            ; ---------------------------------------------------------------------------
0000CAF4 0000                       		dc.w byte_B37A-Map_obj14
0000CAF6 0000                       		dc.w byte_B380-Map_obj14
0000CAF8 0000                       		dc.w byte_B386-Map_obj14
0000CAFA 0000                       		dc.w byte_B38C-Map_obj14
0000CAFC 0000                       		dc.w byte_B392-Map_obj14
0000CAFE 0000                       		dc.w byte_B398-Map_obj14
0000CB00 01                         byte_B37A:	dc.b 1
0000CB01 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CB06 01                         byte_B380:	dc.b 1
0000CB07 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CB0C 01                         byte_B386:	dc.b 1
0000CB0D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CB12 01                         byte_B38C:	dc.b 1
0000CB13 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CB18 01                         byte_B392:	dc.b 1
0000CB19 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CB1E 01                         byte_B398:	dc.b 1
0000CB1F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CB24                            		even
0000CB24                            		even
0000CB24                            
0000CB24                            ; ===========================================================================
0000CB24                            ; ---------------------------------------------------------------------------
0000CB24                            ; Object 30 - large green glassy blocks	(MZ)
0000CB24                            ; ---------------------------------------------------------------------------
0000CB24                            
0000CB24                            Obj30:					; XREF: Obj_Index
0000CB24 7000                       		moveq	#0,d0
0000CB26 1028 0024                  		move.b	$24(a0),d0
0000CB2A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CB2E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CB32 3028 0008                  		move.w	8(a0),d0
0000CB36 0240 FF80                  		andi.w	#$FF80,d0
0000CB3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB3E 0441 0080                  		subi.w	#$80,d1
0000CB42 0241 FF80                  		andi.w	#$FF80,d1
0000CB46 9041                       		sub.w	d1,d0
0000CB48 0C40 0280                  		cmpi.w	#$280,d0
0000CB4C 6200 0000                  		bhi.w	Obj30_Delete
0000CB50 6000 0000                  		bra.w	DisplaySprite
0000CB54                            ; ===========================================================================
0000CB54                            
0000CB54                            Obj30_Delete:
0000CB54 6000 0000                  		bra.w	DeleteObject
0000CB58                            ; ===========================================================================
0000CB58 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CB5A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CB5C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CB5E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CB60 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CB62                            
0000CB62 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CB65 0400 01                    		dc.b 4,	0, 1
0000CB68 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CB6B 0800 01                    		dc.b 8,	0, 1
0000CB6E                            ; ===========================================================================
0000CB6E                            
0000CB6E                            Obj30_Main:				; XREF: Obj30_Index
0000CB6E 45F9 0000 CB62             		lea	(Obj30_Vars1).l,a2
0000CB74 7201                       		moveq	#1,d1
0000CB76 117C 0048 0016             		move.b	#$48,$16(a0)
0000CB7C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CB82 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CB84 45F9 0000 CB68             		lea	(Obj30_Vars2).l,a2
0000CB8A 7201                       		moveq	#1,d1
0000CB8C 117C 0038 0016             		move.b	#$38,$16(a0)
0000CB92                            
0000CB92                            loc_B40C:
0000CB92 2248                       		movea.l	a0,a1
0000CB94 6000                       		bra.s	Obj30_Load	; load main object
0000CB96                            ; ===========================================================================
0000CB96                            
0000CB96                            Obj30_Loop:
0000CB96 6100 0000                  		bsr.w	SingleObjLoad2
0000CB9A 6600                       		bne.s	loc_B480
0000CB9C                            
0000CB9C                            Obj30_Load:				; XREF: Obj30_Main
0000CB9C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CBA0 12BC 0030                  		move.b	#$30,0(a1)
0000CBA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000CBAA 101A                       		move.b	(a2)+,d0
0000CBAC 4880                       		ext.w	d0
0000CBAE D068 000C                  		add.w	$C(a0),d0
0000CBB2 3340 000C                  		move.w	d0,$C(a1)
0000CBB6 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CBBE 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CBC4 137C 0004 0001             		move.b	#4,1(a1)
0000CBCA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CBD0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CBD6 137C 0020 0019             		move.b	#$20,$19(a1)
0000CBDC 137C 0004 0018             		move.b	#4,$18(a1)
0000CBE2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CBE6 2348 003C                  		move.l	a0,$3C(a1)
0000CBEA 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CBEE                            
0000CBEE 137C 0010 0019             		move.b	#$10,$19(a1)
0000CBF4 137C 0003 0018             		move.b	#3,$18(a1)
0000CBFA 5029 0028                  		addq.b	#8,$28(a1)
0000CBFE 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CC04                            
0000CC04                            loc_B480:
0000CC04 317C 0090 0032             		move.w	#$90,$32(a0)
0000CC0A 08E8 0004 0001             		bset	#4,1(a0)
0000CC10                            
0000CC10                            Obj30_Block012:				; XREF: Obj30_Index
0000CC10 6100 0000                  		bsr.w	Obj30_Types
0000CC14 323C 002B                  		move.w	#$2B,d1
0000CC18 343C 0048                  		move.w	#$48,d2
0000CC1C 363C 0049                  		move.w	#$49,d3
0000CC20 3828 0008                  		move.w	8(a0),d4
0000CC24 6000 0000                  		bra.w	SolidObject
0000CC28                            ; ===========================================================================
0000CC28                            
0000CC28                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CC28 2268 003C                  		movea.l	$3C(a0),a1
0000CC2C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CC32 6000 0000                  		bra.w	Obj30_Types
0000CC36                            ; ===========================================================================
0000CC36                            
0000CC36                            Obj30_Block34:				; XREF: Obj30_Index
0000CC36 6100 0000                  		bsr.w	Obj30_Types
0000CC3A 323C 002B                  		move.w	#$2B,d1
0000CC3E 343C 0038                  		move.w	#$38,d2
0000CC42 363C 0039                  		move.w	#$39,d3
0000CC46 3828 0008                  		move.w	8(a0),d4
0000CC4A 6000 0000                  		bra.w	SolidObject
0000CC4E                            ; ===========================================================================
0000CC4E                            
0000CC4E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CC4E 2268 003C                  		movea.l	$3C(a0),a1
0000CC52 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CC58 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CC5E 6000 0002                  		bra.w	*+4
0000CC62                            
0000CC62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC62                            
0000CC62                            
0000CC62                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CC62 7000                       		moveq	#0,d0
0000CC64 1028 0028                  		move.b	$28(a0),d0
0000CC68 0240 0007                  		andi.w	#7,d0
0000CC6C D040                       		add.w	d0,d0
0000CC6E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CC72 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CC76                            ; End of function Obj30_Types
0000CC76                            
0000CC76                            ; ===========================================================================
0000CC76 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CC78 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CC7A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CC7C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CC7E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CC80                            ; ===========================================================================
0000CC80                            
0000CC80                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CC80 4E75                       		rts	
0000CC82                            ; ===========================================================================
0000CC82                            
0000CC82                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CC82 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CC86 323C 0040                  		move.w	#$40,d1
0000CC8A 6000                       		bra.s	loc_B514
0000CC8C                            ; ===========================================================================
0000CC8C                            
0000CC8C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CC8C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CC90 323C 0040                  		move.w	#$40,d1
0000CC94 4440                       		neg.w	d0
0000CC96 D041                       		add.w	d1,d0
0000CC98                            
0000CC98                            loc_B514:				; XREF: Obj30_Type01
0000CC98 0828 0003 0028             		btst	#3,$28(a0)
0000CC9E 6700                       		beq.s	loc_B526
0000CCA0 4440                       		neg.w	d0
0000CCA2 D041                       		add.w	d1,d0
0000CCA4 E208                       		lsr.b	#1,d0
0000CCA6 0640 0020                  		addi.w	#$20,d0
0000CCAA                            
0000CCAA                            loc_B526:
0000CCAA 6000 0000                  		bra.w	loc_B5EE
0000CCAE                            ; ===========================================================================
0000CCAE                            
0000CCAE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000CCAE 0828 0003 0028             		btst	#3,$28(a0)
0000CCB4 6700                       		beq.s	loc_B53E
0000CCB6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CCBA 0440 0010                  		subi.w	#$10,d0
0000CCBE 6000 0000                  		bra.w	loc_B5EE
0000CCC2                            ; ===========================================================================
0000CCC2                            
0000CCC2                            loc_B53E:
0000CCC2 0828 0003 0022             		btst	#3,$22(a0)
0000CCC8 6600                       		bne.s	loc_B54E
0000CCCA 08A8 0000 0034             		bclr	#0,$34(a0)
0000CCD0 6000                       		bra.s	loc_B582
0000CCD2                            ; ===========================================================================
0000CCD2                            
0000CCD2                            loc_B54E:
0000CCD2 4A28 0034                  		tst.b	$34(a0)
0000CCD6 6600                       		bne.s	loc_B582
0000CCD8 117C 0001 0034             		move.b	#1,$34(a0)
0000CCDE 08E8 0000 0035             		bset	#0,$35(a0)
0000CCE4 6700                       		beq.s	loc_B582
0000CCE6 08E8 0007 0034             		bset	#7,$34(a0)
0000CCEC 317C 0010 0036             		move.w	#$10,$36(a0)
0000CCF2 117C 000A 0038             		move.b	#$A,$38(a0)
0000CCF8 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CCFE 6600                       		bne.s	loc_B582
0000CD00 317C 0040 0036             		move.w	#$40,$36(a0)
0000CD06                            
0000CD06                            loc_B582:
0000CD06 4A28 0034                  		tst.b	$34(a0)
0000CD0A 6A00                       		bpl.s	loc_B5AA
0000CD0C 4A28 0038                  		tst.b	$38(a0)
0000CD10 6700                       		beq.s	loc_B594
0000CD12 5328 0038                  		subq.b	#1,$38(a0)
0000CD16 6600                       		bne.s	loc_B5AA
0000CD18                            
0000CD18                            loc_B594:
0000CD18 4A68 0032                  		tst.w	$32(a0)
0000CD1C 6700                       		beq.s	loc_B5A4
0000CD1E 5368 0032                  		subq.w	#1,$32(a0)
0000CD22 5368 0036                  		subq.w	#1,$36(a0)
0000CD26 6600                       		bne.s	loc_B5AA
0000CD28                            
0000CD28                            loc_B5A4:
0000CD28 08A8 0007 0034             		bclr	#7,$34(a0)
0000CD2E                            
0000CD2E                            loc_B5AA:
0000CD2E 3028 0032                  		move.w	$32(a0),d0
0000CD32 6000                       		bra.s	loc_B5EE
0000CD34                            ; ===========================================================================
0000CD34                            
0000CD34                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CD34 0828 0003 0028             		btst	#3,$28(a0)
0000CD3A 6700                       		beq.s	Obj30_ChkSwitch
0000CD3C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CD40 0440 0010                  		subi.w	#$10,d0
0000CD44 6000                       		bra.s	loc_B5EE
0000CD46                            ; ===========================================================================
0000CD46                            
0000CD46                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CD46 4A28 0034                  		tst.b	$34(a0)
0000CD4A 6600                       		bne.s	loc_B5E0
0000CD4C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CD50 7000                       		moveq	#0,d0
0000CD52 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CD56 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CD58 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CD5C 6700                       		beq.s	loc_B5EA	; if not, branch
0000CD5E 117C 0001 0034             		move.b	#1,$34(a0)
0000CD64                            
0000CD64                            loc_B5E0:
0000CD64 4A68 0032                  		tst.w	$32(a0)
0000CD68 6700                       		beq.s	loc_B5EA
0000CD6A 5568 0032                  		subq.w	#2,$32(a0)
0000CD6E                            
0000CD6E                            loc_B5EA:
0000CD6E 3028 0032                  		move.w	$32(a0),d0
0000CD72                            
0000CD72                            loc_B5EE:
0000CD72 3228 0030                  		move.w	$30(a0),d1
0000CD76 9240                       		sub.w	d0,d1
0000CD78 3141 000C                  		move.w	d1,$C(a0)
0000CD7C 4E75                       		rts	
0000CD7E                            ; ===========================================================================
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            Map_obj30:
0000CD7E                            	include "_maps\obj30.asm"
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CD7E                            ; ---------------------------------------------------------------------------
0000CD7E 0000                       		dc.w byte_B600-Map_obj30
0000CD80 0000                       		dc.w byte_B63D-Map_obj30
0000CD82 0000                       		dc.w byte_B648-Map_obj30
0000CD84 0C                         byte_B600:	dc.b $C
0000CD85 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000CD8A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000CD8F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000CD94 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000CD99 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000CD9E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000CDA3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000CDA8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000CDAD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000CDB2 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000CDB7 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000CDBC 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000CDC1 02                         byte_B63D:	dc.b 2
0000CDC2 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000CDC7 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000CDCC 0A                         byte_B648:	dc.b $A
0000CDCD C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000CDD2 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000CDD7 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000CDDC D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000CDE1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000CDE6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000CDEB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000CDF0 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000CDF5 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000CDFA 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000CE00 00                         		even
0000CE00 00                         		even
0000CE00                            
0000CE00                            ; ===========================================================================
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            ; Object 31 - stomping metal blocks on chains (MZ)
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            
0000CE00                            Obj31:					; XREF: Obj_Index
0000CE00 7000                       		moveq	#0,d0
0000CE02 1028 0024                  		move.b	$24(a0),d0
0000CE06 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000CE0A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000CE0E                            ; ===========================================================================
0000CE0E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000CE10 0000                       		dc.w loc_B798-Obj31_Index
0000CE12 0000                       		dc.w loc_B7FE-Obj31_Index
0000CE14 0000                       		dc.w Obj31_Display2-Obj31_Index
0000CE16 0000                       		dc.w loc_B7E2-Obj31_Index
0000CE18                            
0000CE18 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000CE1A 0100                       		dc.b 1,	0
0000CE1C                            
0000CE1C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000CE1F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000CE22 08CC 03                    		dc.b 8,	$CC, 3
0000CE25 06F0 02                    		dc.b 6,	$F0, 2
0000CE28                            
0000CE28 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000CE2C 5000 7800                  		dc.w $5000, $7800
0000CE30 3800 5800                  		dc.w $3800, $5800
0000CE34 B800                       		dc.w $B800
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            Obj31_Main:				; XREF: Obj31_Index
0000CE36 7000                       		moveq	#0,d0
0000CE38 1028 0028                  		move.b	$28(a0),d0
0000CE3C 6A00                       		bpl.s	loc_B6CE
0000CE3E 0240 007F                  		andi.w	#$7F,d0
0000CE42 D040                       		add.w	d0,d0
0000CE44 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000CE48 115A 003A                  		move.b	(a2)+,$3A(a0)
0000CE4C 101A                       		move.b	(a2)+,d0
0000CE4E 1140 0028                  		move.b	d0,$28(a0)
0000CE52                            
0000CE52                            loc_B6CE:
0000CE52 0200 000F                  		andi.b	#$F,d0
0000CE56 D040                       		add.w	d0,d0
0000CE58 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000CE5C 4A40                       		tst.w	d0
0000CE5E 6600                       		bne.s	loc_B6E0
0000CE60 3142 0032                  		move.w	d2,$32(a0)
0000CE64                            
0000CE64                            loc_B6E0:
0000CE64 45F9 0000 CE1C             		lea	(Obj31_Var).l,a2
0000CE6A 2248                       		movea.l	a0,a1
0000CE6C 7203                       		moveq	#3,d1
0000CE6E 6000                       		bra.s	Obj31_MakeStomper
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            Obj31_Loop:
0000CE70 6100 0000                  		bsr.w	SingleObjLoad2
0000CE74 6600 0000                  		bne.w	Obj31_SetSize
0000CE78                            
0000CE78                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000CE78 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE7C 12BC 0031                  		move.b	#$31,0(a1)
0000CE80 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE86 101A                       		move.b	(a2)+,d0
0000CE88 4880                       		ext.w	d0
0000CE8A D068 000C                  		add.w	$C(a0),d0
0000CE8E 3340 000C                  		move.w	d0,$C(a1)
0000CE92 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000CE9A 337C 0300 0002             		move.w	#$300,2(a1)
0000CEA0 137C 0004 0001             		move.b	#4,1(a1)
0000CEA6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CEAC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CEB2 137C 0010 0019             		move.b	#$10,$19(a1)
0000CEB8 3342 0034                  		move.w	d2,$34(a1)
0000CEBC 137C 0004 0018             		move.b	#4,$18(a1)
0000CEC2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CEC6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000CECC 6600                       		bne.s	loc_B76A
0000CECE 5341                       		subq.w	#1,d1
0000CED0 1028 0028                  		move.b	$28(a0),d0
0000CED4 0240 00F0                  		andi.w	#$F0,d0
0000CED8 0C40 0020                  		cmpi.w	#$20,d0
0000CEDC 679A                       		beq.s	Obj31_MakeStomper
0000CEDE 137C 0038 0019             		move.b	#$38,$19(a1)
0000CEE4 137C 0090 0020             		move.b	#$90,$20(a1)
0000CEEA 5241                       		addq.w	#1,d1
0000CEEC                            
0000CEEC                            loc_B76A:
0000CEEC 2348 003C                  		move.l	a0,$3C(a1)
0000CEF0 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CEF4                            
0000CEF4 137C 0003 0018             		move.b	#3,$18(a1)
0000CEFA                            
0000CEFA                            Obj31_SetSize:
0000CEFA 7000                       		moveq	#0,d0
0000CEFC 1028 0028                  		move.b	$28(a0),d0
0000CF00 E648                       		lsr.w	#3,d0
0000CF02 0200 000E                  		andi.b	#$E,d0
0000CF06 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CF0A 115A 0019                  		move.b	(a2)+,$19(a0)
0000CF0E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CF12 6000                       		bra.s	loc_B798
0000CF14                            ; ===========================================================================
0000CF14 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CF16 3009                       		dc.b $30, 9
0000CF18 100A                       		dc.b $10, $A
0000CF1A                            ; ===========================================================================
0000CF1A                            
0000CF1A                            loc_B798:				; XREF: Obj31_Index
0000CF1A 6100 0000                  		bsr.w	Obj31_Types
0000CF1E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CF24 7200                       		moveq	#0,d1
0000CF26 1228 0019                  		move.b	$19(a0),d1
0000CF2A 0641 000B                  		addi.w	#$B,d1
0000CF2E 343C 000C                  		move.w	#$C,d2
0000CF32 363C 000D                  		move.w	#$D,d3
0000CF36 3828 0008                  		move.w	8(a0),d4
0000CF3A 6100 0000                  		bsr.w	SolidObject
0000CF3E 0828 0003 0022             		btst	#3,$22(a0)
0000CF44 6700                       		beq.s	Obj31_Display
0000CF46 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CF4C 6400                       		bcc.s	Obj31_Display
0000CF4E 2448                       		movea.l	a0,a2
0000CF50 41F8 D000                  		lea	($FFFFD000).w,a0
0000CF54 4EB9 0000 0000             		jsr	KillSonic
0000CF5A 204A                       		movea.l	a2,a0
0000CF5C                            
0000CF5C                            Obj31_Display:
0000CF5C 6100 0000                  		bsr.w	DisplaySprite
0000CF60 6000 0000                  		bra.w	Obj31_ChkDel
0000CF64                            ; ===========================================================================
0000CF64                            
0000CF64                            loc_B7E2:				; XREF: Obj31_Index
0000CF64 117C 0080 0016             		move.b	#$80,$16(a0)
0000CF6A 08E8 0004 0001             		bset	#4,1(a0)
0000CF70 2268 003C                  		movea.l	$3C(a0),a1
0000CF74 1029 0032                  		move.b	$32(a1),d0
0000CF78 EA08                       		lsr.b	#5,d0
0000CF7A 5600                       		addq.b	#3,d0
0000CF7C 1140 001A                  		move.b	d0,$1A(a0)
0000CF80                            
0000CF80                            loc_B7FE:				; XREF: Obj31_Index
0000CF80 2268 003C                  		movea.l	$3C(a0),a1
0000CF84 7000                       		moveq	#0,d0
0000CF86 1029 0032                  		move.b	$32(a1),d0
0000CF8A D068 0030                  		add.w	$30(a0),d0
0000CF8E 3140 000C                  		move.w	d0,$C(a0)
0000CF92                            
0000CF92                            Obj31_Display2:				; XREF: Obj31_Index
0000CF92 6100 0000                  		bsr.w	DisplaySprite
0000CF96                            
0000CF96                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CF96 3028 0008                  		move.w	8(a0),d0
0000CF9A 0240 FF80                  		andi.w	#$FF80,d0
0000CF9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFA2 0441 0080                  		subi.w	#$80,d1
0000CFA6 0241 FF80                  		andi.w	#$FF80,d1
0000CFAA 9041                       		sub.w	d1,d0
0000CFAC 0C40 0280                  		cmpi.w	#$280,d0
0000CFB0 6200 0000                  		bhi.w	DeleteObject
0000CFB4 4E75                       		rts	
0000CFB6                            ; ===========================================================================
0000CFB6                            
0000CFB6                            Obj31_Types:				; XREF: loc_B798
0000CFB6 1028 0028                  		move.b	$28(a0),d0
0000CFBA 0240 000F                  		andi.w	#$F,d0
0000CFBE D040                       		add.w	d0,d0
0000CFC0 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CFC4 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CFC8                            ; ===========================================================================
0000CFC8 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CFCA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CFCC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CFCE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CFD0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CFD2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CFD4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CFD6                            ; ===========================================================================
0000CFD6                            
0000CFD6                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CFD6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CFDA 7000                       		moveq	#0,d0
0000CFDC 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CFE0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CFE4 6700                       		beq.s	loc_B8A8	; if not, branch
0000CFE6 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CFEA 6A00                       		bpl.s	loc_B872
0000CFEC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CFF2 6700                       		beq.s	loc_B8A0
0000CFF4                            
0000CFF4                            loc_B872:
0000CFF4 4A68 0032                  		tst.w	$32(a0)
0000CFF8 6700                       		beq.s	loc_B8A0
0000CFFA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFFE 0200 000F                  		andi.b	#$F,d0
0000D002 6600                       		bne.s	loc_B892
0000D004 4A28 0001                  		tst.b	1(a0)
0000D008 6A00                       		bpl.s	loc_B892
0000D00A 303C 00C7                  		move.w	#$C7,d0
0000D00E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D014                            
0000D014                            loc_B892:
0000D014 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D01A 6400                       		bcc.s	Obj31_Restart
0000D01C 317C 0000 0032             		move.w	#0,$32(a0)
0000D022                            
0000D022                            loc_B8A0:
0000D022 317C 0000 0012             		move.w	#0,$12(a0)
0000D028 6000                       		bra.s	Obj31_Restart
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            loc_B8A8:				; XREF: Obj31_Type00
0000D02A 3228 0034                  		move.w	$34(a0),d1
0000D02E B268 0032                  		cmp.w	$32(a0),d1
0000D032 6700                       		beq.s	Obj31_Restart
0000D034 3028 0012                  		move.w	$12(a0),d0
0000D038 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D03E D168 0032                  		add.w	d0,$32(a0)
0000D042 B268 0032                  		cmp.w	$32(a0),d1
0000D046 6200                       		bhi.s	Obj31_Restart
0000D048 3141 0032                  		move.w	d1,$32(a0)
0000D04C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D052 4A28 0001                  		tst.b	1(a0)
0000D056 6A00                       		bpl.s	Obj31_Restart
0000D058 303C 00BD                  		move.w	#$BD,d0
0000D05C 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D062                            
0000D062                            Obj31_Restart:
0000D062 7000                       		moveq	#0,d0
0000D064 1028 0032                  		move.b	$32(a0),d0
0000D068 D068 0030                  		add.w	$30(a0),d0
0000D06C 3140 000C                  		move.w	d0,$C(a0)
0000D070 4E75                       		rts	
0000D072                            ; ===========================================================================
0000D072                            
0000D072                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D072 4A68 0036                  		tst.w	$36(a0)
0000D076 6700                       		beq.s	loc_B938
0000D078 4A68 0038                  		tst.w	$38(a0)
0000D07C 6700                       		beq.s	loc_B902
0000D07E 5368 0038                  		subq.w	#1,$38(a0)
0000D082 6000                       		bra.s	loc_B97C
0000D084                            ; ===========================================================================
0000D084                            
0000D084                            loc_B902:
0000D084 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D088 0200 000F                  		andi.b	#$F,d0
0000D08C 6600                       		bne.s	loc_B91C
0000D08E 4A28 0001                  		tst.b	1(a0)
0000D092 6A00                       		bpl.s	loc_B91C
0000D094 303C 00C7                  		move.w	#$C7,d0
0000D098 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D09E                            
0000D09E                            loc_B91C:
0000D09E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D0A4 6400                       		bcc.s	loc_B97C
0000D0A6 317C 0000 0032             		move.w	#0,$32(a0)
0000D0AC 317C 0000 0012             		move.w	#0,$12(a0)
0000D0B2 317C 0000 0036             		move.w	#0,$36(a0)
0000D0B8 6000                       		bra.s	loc_B97C
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            loc_B938:				; XREF: Obj31_Type01
0000D0BA 3228 0034                  		move.w	$34(a0),d1
0000D0BE B268 0032                  		cmp.w	$32(a0),d1
0000D0C2 6700                       		beq.s	loc_B97C
0000D0C4 3028 0012                  		move.w	$12(a0),d0
0000D0C8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D0CE D168 0032                  		add.w	d0,$32(a0)
0000D0D2 B268 0032                  		cmp.w	$32(a0),d1
0000D0D6 6200                       		bhi.s	loc_B97C
0000D0D8 3141 0032                  		move.w	d1,$32(a0)
0000D0DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D0E2 317C 0001 0036             		move.w	#1,$36(a0)
0000D0E8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D0EE 4A28 0001                  		tst.b	1(a0)
0000D0F2 6A00                       		bpl.s	loc_B97C
0000D0F4 303C 00BD                  		move.w	#$BD,d0
0000D0F8 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D0FE                            
0000D0FE                            loc_B97C:
0000D0FE 6000 FF62                  		bra.w	Obj31_Restart
0000D102                            ; ===========================================================================
0000D102                            
0000D102                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D102 3038 D008                  		move.w	($FFFFD008).w,d0
0000D106 9068 0008                  		sub.w	8(a0),d0
0000D10A 6400                       		bcc.s	loc_B98C
0000D10C 4440                       		neg.w	d0
0000D10E                            
0000D10E                            loc_B98C:
0000D10E 0C40 0090                  		cmpi.w	#$90,d0
0000D112 6400                       		bcc.s	loc_B996
0000D114 5228 0028                  		addq.b	#1,$28(a0)
0000D118                            
0000D118                            loc_B996:
0000D118 6000 FF48                  		bra.w	Obj31_Restart
0000D11C                            ; ===========================================================================
0000D11C                            ; ---------------------------------------------------------------------------
0000D11C                            ; Object 45 - spiked metal block from beta version (MZ)
0000D11C                            ; ---------------------------------------------------------------------------
0000D11C                            
0000D11C                            Obj45:					; XREF: Obj_Index
0000D11C 7000                       		moveq	#0,d0
0000D11E 1028 0024                  		move.b	$24(a0),d0
0000D122 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D126 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D12A                            ; ===========================================================================
0000D12A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D12C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D12E 0000                       		dc.w loc_BA8E-Obj45_Index
0000D130 0000                       		dc.w Obj45_Display-Obj45_Index
0000D132 0000                       		dc.w loc_BA7A-Obj45_Index
0000D134                            
0000D134 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D137 04E4 01                    		dc.b	4, $E4,	  1
0000D13A 0834 03                    		dc.b	8, $34,	  3
0000D13D 0628 02                    		dc.b	6, $28,	  2
0000D140                            
0000D140 3800                       word_B9BE:	dc.w $3800
0000D142 A000                       		dc.w -$6000
0000D144 5000                       		dc.w $5000
0000D146                            ; ===========================================================================
0000D146                            
0000D146                            Obj45_Main:				; XREF: Obj45_Index
0000D146 7000                       		moveq	#0,d0
0000D148 1028 0028                  		move.b	$28(a0),d0
0000D14C D040                       		add.w	d0,d0
0000D14E 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D152 45F9 0000 D134             		lea	(Obj45_Var).l,a2
0000D158 2248                       		movea.l	a0,a1
0000D15A 7203                       		moveq	#3,d1
0000D15C 6000                       		bra.s	Obj45_Load
0000D15E                            ; ===========================================================================
0000D15E                            
0000D15E                            Obj45_Loop:
0000D15E 6100 0000                  		bsr.w	SingleObjLoad2
0000D162 6600                       		bne.s	loc_BA52
0000D164                            
0000D164                            Obj45_Load:				; XREF: Obj45_Main
0000D164 135A 0024                  		move.b	(a2)+,$24(a1)
0000D168 12BC 0045                  		move.b	#$45,0(a1)
0000D16C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D172 101A                       		move.b	(a2)+,d0
0000D174 4880                       		ext.w	d0
0000D176 D068 0008                  		add.w	8(a0),d0
0000D17A 3340 0008                  		move.w	d0,8(a1)
0000D17E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D186 337C 0300 0002             		move.w	#$300,2(a1)
0000D18C 137C 0004 0001             		move.b	#4,1(a1)
0000D192 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D198 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D19E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D1A4 137C 0020 0019             		move.b	#$20,$19(a1)
0000D1AA 3342 0034                  		move.w	d2,$34(a1)
0000D1AE 137C 0004 0018             		move.b	#4,$18(a1)
0000D1B4 0C12 0001                  		cmpi.b	#1,(a2)
0000D1B8 6600                       		bne.s	loc_BA40
0000D1BA 137C 0091 0020             		move.b	#$91,$20(a1)
0000D1C0                            
0000D1C0                            loc_BA40:
0000D1C0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D1C4 2348 003C                  		move.l	a0,$3C(a1)
0000D1C8 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D1CC                            
0000D1CC 137C 0003 0018             		move.b	#3,$18(a1)
0000D1D2                            
0000D1D2                            loc_BA52:
0000D1D2 117C 0010 0019             		move.b	#$10,$19(a0)
0000D1D8                            
0000D1D8                            Obj45_Solid:				; XREF: Obj45_Index
0000D1D8 3F28 0008                  		move.w	8(a0),-(sp)
0000D1DC 6100 0000                  		bsr.w	Obj45_Move
0000D1E0 323C 0017                  		move.w	#$17,d1
0000D1E4 343C 0020                  		move.w	#$20,d2
0000D1E8 363C 0020                  		move.w	#$20,d3
0000D1EC 381F                       		move.w	(sp)+,d4
0000D1EE 6100 0000                  		bsr.w	SolidObject
0000D1F2 6100 0000                  		bsr.w	DisplaySprite
0000D1F6 6000 0000                  		bra.w	Obj45_ChkDel
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            loc_BA7A:				; XREF: Obj45_Index
0000D1FA 2268 003C                  		movea.l	$3C(a0),a1
0000D1FE 1029 0032                  		move.b	$32(a1),d0
0000D202 0600 0010                  		addi.b	#$10,d0
0000D206 EA08                       		lsr.b	#5,d0
0000D208 5600                       		addq.b	#3,d0
0000D20A 1140 001A                  		move.b	d0,$1A(a0)
0000D20E                            
0000D20E                            loc_BA8E:				; XREF: Obj45_Index
0000D20E 2268 003C                  		movea.l	$3C(a0),a1
0000D212 7000                       		moveq	#0,d0
0000D214 1029 0032                  		move.b	$32(a1),d0
0000D218 4440                       		neg.w	d0
0000D21A D068 0030                  		add.w	$30(a0),d0
0000D21E 3140 0008                  		move.w	d0,8(a0)
0000D222                            
0000D222                            Obj45_Display:				; XREF: Obj45_Index
0000D222 6100 0000                  		bsr.w	DisplaySprite
0000D226                            
0000D226                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D226 3028 003A                  		move.w	$3A(a0),d0
0000D22A 0240 FF80                  		andi.w	#$FF80,d0
0000D22E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D232 0441 0080                  		subi.w	#$80,d1
0000D236 0241 FF80                  		andi.w	#$FF80,d1
0000D23A 9041                       		sub.w	d1,d0
0000D23C 0C40 0280                  		cmpi.w	#$280,d0
0000D240 6200 0000                  		bhi.w	DeleteObject
0000D244 4E75                       		rts	
0000D246                            
0000D246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D246                            
0000D246                            
0000D246                            Obj45_Move:				; XREF: Obj45_Solid
0000D246 7000                       		moveq	#0,d0
0000D248 1028 0028                  		move.b	$28(a0),d0
0000D24C D040                       		add.w	d0,d0
0000D24E 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D252 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D256                            ; End of function Obj45_Move
0000D256                            
0000D256                            ; ===========================================================================
0000D256 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D258 0000                       		dc.w loc_BADA-off_BAD6
0000D25A                            ; ===========================================================================
0000D25A                            
0000D25A                            loc_BADA:				; XREF: off_BAD6
0000D25A 4A68 0036                  		tst.w	$36(a0)
0000D25E 6700                       		beq.s	loc_BB08
0000D260 4A68 0038                  		tst.w	$38(a0)
0000D264 6700                       		beq.s	loc_BAEC
0000D266 5368 0038                  		subq.w	#1,$38(a0)
0000D26A 6000                       		bra.s	loc_BB3C
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            loc_BAEC:
0000D26C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D272 6400                       		bcc.s	loc_BB3C
0000D274 317C 0000 0032             		move.w	#0,$32(a0)
0000D27A 317C 0000 0010             		move.w	#0,$10(a0)
0000D280 317C 0000 0036             		move.w	#0,$36(a0)
0000D286 6000                       		bra.s	loc_BB3C
0000D288                            ; ===========================================================================
0000D288                            
0000D288                            loc_BB08:				; XREF: loc_BADA
0000D288 3228 0034                  		move.w	$34(a0),d1
0000D28C B268 0032                  		cmp.w	$32(a0),d1
0000D290 6700                       		beq.s	loc_BB3C
0000D292 3028 0010                  		move.w	$10(a0),d0
0000D296 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D29C D168 0032                  		add.w	d0,$32(a0)
0000D2A0 B268 0032                  		cmp.w	$32(a0),d1
0000D2A4 6200                       		bhi.s	loc_BB3C
0000D2A6 3141 0032                  		move.w	d1,$32(a0)
0000D2AA 317C 0000 0010             		move.w	#0,$10(a0)
0000D2B0 317C 0001 0036             		move.w	#1,$36(a0)
0000D2B6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D2BC                            
0000D2BC                            loc_BB3C:
0000D2BC 7000                       		moveq	#0,d0
0000D2BE 1028 0032                  		move.b	$32(a0),d0
0000D2C2 4440                       		neg.w	d0
0000D2C4 D068 0030                  		add.w	$30(a0),d0
0000D2C8 3140 0008                  		move.w	d0,8(a0)
0000D2CC 4E75                       		rts	
0000D2CE                            ; ===========================================================================
0000D2CE                            ; ---------------------------------------------------------------------------
0000D2CE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D2CE                            ; ---------------------------------------------------------------------------
0000D2CE                            Map_obj31:
0000D2CE                            	include "_maps\obj31.asm"
0000D2CE                            ; ---------------------------------------------------------------------------
0000D2CE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D2CE                            ; ---------------------------------------------------------------------------
0000D2CE 0000                       		dc.w byte_BB64-Map_obj31
0000D2D0 0000                       		dc.w byte_BB7E-Map_obj31
0000D2D2 0000                       		dc.w byte_BB98-Map_obj31
0000D2D4 0000                       		dc.w byte_BB9E-Map_obj31
0000D2D6 0000                       		dc.w byte_BBA9-Map_obj31
0000D2D8 0000                       		dc.w byte_BBBE-Map_obj31
0000D2DA 0000                       		dc.w byte_BBDD-Map_obj31
0000D2DC 0000                       		dc.w byte_BC06-Map_obj31
0000D2DE 0000                       		dc.w byte_BC06-Map_obj31
0000D2E0 0000                       		dc.w byte_BC39-Map_obj31
0000D2E2 0000                       		dc.w byte_BC53-Map_obj31
0000D2E4 05                         byte_BB64:	dc.b 5
0000D2E5 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D2EA F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D2EF EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D2F4 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D2F9 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D2FE 05                         byte_BB7E:	dc.b 5
0000D2FF F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D304 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D309 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D30E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D313 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D318 01                         byte_BB98:	dc.b 1
0000D319 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D31E 02                         byte_BB9E:	dc.b 2
0000D31F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D324 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D329 04                         byte_BBA9:	dc.b 4
0000D32A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D32F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D334 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D339 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D33E 06                         byte_BBBE:	dc.b 6
0000D33F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D344 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D349 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D34E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D353 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D358 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D35D 08                         byte_BBDD:	dc.b 8
0000D35E A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D363 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D368 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D36D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D372 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D377 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D37C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D381 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D386 0A                         byte_BC06:	dc.b $A
0000D387 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D38C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D391 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D396 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D39B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D3A0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D3A5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D3AA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D3AF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D3B4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D3B9 05                         byte_BC39:	dc.b 5
0000D3BA F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D3BF F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D3C4 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D3C9 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D3CE EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D3D3 01                         byte_BC53:	dc.b 1
0000D3D4 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D3DA 00                         		even
0000D3DA 00                         		even
0000D3DA                            
0000D3DA                            ; ---------------------------------------------------------------------------
0000D3DA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D3DA                            ; ---------------------------------------------------------------------------
0000D3DA                            Map_obj45:
0000D3DA                            	include "_maps\obj45.asm"
0000D3DA                            ; ---------------------------------------------------------------------------
0000D3DA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D3DA                            ; ---------------------------------------------------------------------------
0000D3DA 0000                       		dc.w byte_BC6C-Map_obj45
0000D3DC 0000                       		dc.w byte_BC7C-Map_obj45
0000D3DE 0000                       		dc.w byte_BC8C-Map_obj45
0000D3E0 0000                       		dc.w byte_BC92-Map_obj45
0000D3E2 0000                       		dc.w byte_BC9D-Map_obj45
0000D3E4 0000                       		dc.w byte_BCB2-Map_obj45
0000D3E6 0000                       		dc.w byte_BCD1-Map_obj45
0000D3E8 0000                       		dc.w byte_BCFA-Map_obj45
0000D3EA 0000                       		dc.w byte_BCFA-Map_obj45
0000D3EC 03                         byte_BC6C:	dc.b 3
0000D3ED E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D3F2 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D3F7 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D3FC 03                         byte_BC7C:	dc.b 3
0000D3FD E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D402 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D407 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D40C 01                         byte_BC8C:	dc.b 1
0000D40D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D412 02                         byte_BC92:	dc.b 2
0000D413 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D418 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D41D 04                         byte_BC9D:	dc.b 4
0000D41E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D423 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D428 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D42D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D432 06                         byte_BCB2:	dc.b 6
0000D433 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D438 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D43D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D442 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D447 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D44C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D451 08                         byte_BCD1:	dc.b 8
0000D452 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D457 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D45C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D461 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D466 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D46B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D470 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D475 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D47A 08                         byte_BCFA:	dc.b 8
0000D47B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D480 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D485 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D48A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D48F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D494 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D499 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D49E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D4A3 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D4A8 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D4AE 00                         		even
0000D4AE 00                         		even
0000D4AE                            
0000D4AE                            ; ===========================================================================
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D4AE                            ; ---------------------------------------------------------------------------
0000D4AE                            
0000D4AE                            Obj32:					; XREF: Obj_Index
0000D4AE 7000                       		moveq	#0,d0
0000D4B0 1028 0024                  		move.b	$24(a0),d0
0000D4B4 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D4B8 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D4BC                            ; ===========================================================================
0000D4BC 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D4BE 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D4C0                            ; ===========================================================================
0000D4C0                            
0000D4C0                            Obj32_Main:				; XREF: Obj32_Index
0000D4C0 5428 0024                  		addq.b	#2,$24(a0)
0000D4C4 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D4CC 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D4D2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D4D8 6700                       		beq.s	loc_BD60
0000D4DA 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D4E0                            
0000D4E0                            loc_BD60:
0000D4E0 117C 0004 0001             		move.b	#4,1(a0)
0000D4E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000D4EC 117C 0004 0018             		move.b	#4,$18(a0)
0000D4F2 5668 000C                  		addq.w	#3,$C(a0)
0000D4F6                            
0000D4F6                            Obj32_Pressed:				; XREF: Obj32_Index
0000D4F6 4A28 0001                  		tst.b	1(a0)
0000D4FA 6A00                       		bpl.s	Obj32_Display
0000D4FC 323C 001B                  		move.w	#$1B,d1
0000D500 343C 0005                  		move.w	#5,d2
0000D504 363C 0005                  		move.w	#5,d3
0000D508 3828 0008                  		move.w	8(a0),d4
0000D50C 6100 0000                  		bsr.w	SolidObject
0000D510 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D516 1028 0028                  		move.b	$28(a0),d0
0000D51A 0240 000F                  		andi.w	#$F,d0
0000D51E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D522 47F3 0000                  		lea	(a3,d0.w),a3
0000D526 7600                       		moveq	#0,d3
0000D528 0828 0006 0028             		btst	#6,$28(a0)
0000D52E 6700                       		beq.s	loc_BDB2
0000D530 7607                       		moveq	#7,d3
0000D532                            
0000D532                            loc_BDB2:
0000D532 4A28 0028                  		tst.b	$28(a0)
0000D536 6A00                       		bpl.s	loc_BDBE
0000D538 6100 0000                  		bsr.w	Obj32_MZBlock
0000D53C 6600                       		bne.s	loc_BDC8
0000D53E                            
0000D53E                            loc_BDBE:
0000D53E 4A28 0025                  		tst.b	$25(a0)
0000D542 6600                       		bne.s	loc_BDC8
0000D544 0793                       		bclr	d3,(a3)
0000D546 6000                       		bra.s	loc_BDDE
0000D548                            ; ===========================================================================
0000D548                            
0000D548                            loc_BDC8:
0000D548 4A13                       		tst.b	(a3)
0000D54A 6600                       		bne.s	loc_BDD6
0000D54C 303C 00CD                  		move.w	#$CD,d0
0000D550 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play switch sound
0000D556                            
0000D556                            loc_BDD6:
0000D556 07D3                       		bset	d3,(a3)
0000D558 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D55E                            
0000D55E                            loc_BDDE:
0000D55E 0828 0005 0028             		btst	#5,$28(a0)
0000D564 6700                       		beq.s	Obj32_Display
0000D566 5328 001E                  		subq.b	#1,$1E(a0)
0000D56A 6A00                       		bpl.s	Obj32_Display
0000D56C 117C 0007 001E             		move.b	#7,$1E(a0)
0000D572 0868 0001 001A             		bchg	#1,$1A(a0)
0000D578                            
0000D578                            Obj32_Display:
0000D578 6100 0000                  		bsr.w	DisplaySprite
0000D57C 3028 0008                  		move.w	8(a0),d0
0000D580 0240 FF80                  		andi.w	#$FF80,d0
0000D584 3238 F700                  		move.w	($FFFFF700).w,d1
0000D588 0441 0080                  		subi.w	#$80,d1
0000D58C 0241 FF80                  		andi.w	#$FF80,d1
0000D590 9041                       		sub.w	d1,d0
0000D592 0C40 0280                  		cmpi.w	#$280,d0
0000D596 6200 0000                  		bhi.w	Obj32_Delete
0000D59A 4E75                       		rts	
0000D59C                            ; ===========================================================================
0000D59C                            
0000D59C                            Obj32_Delete:
0000D59C 6100 0000                  		bsr.w	DeleteObject
0000D5A0 4E75                       		rts	
0000D5A2                            
0000D5A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5A2                            
0000D5A2                            
0000D5A2                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D5A2 3F03                       		move.w	d3,-(sp)
0000D5A4 3428 0008                  		move.w	8(a0),d2
0000D5A8 3628 000C                  		move.w	$C(a0),d3
0000D5AC 0442 0010                  		subi.w	#$10,d2
0000D5B0 5143                       		subq.w	#8,d3
0000D5B2 383C 0020                  		move.w	#$20,d4
0000D5B6 3A3C 0010                  		move.w	#$10,d5
0000D5BA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D5BE 3C3C 005F                  		move.w	#$5F,d6
0000D5C2                            
0000D5C2                            Obj32_MZLoop:
0000D5C2 4A29 0001                  		tst.b	1(a1)
0000D5C6 6A00                       		bpl.s	loc_BE4E
0000D5C8 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D5CC 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D5CE                            
0000D5CE                            loc_BE4E:
0000D5CE 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D5D2 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D5D6                            
0000D5D6 361F                       		move.w	(sp)+,d3
0000D5D8 7000                       		moveq	#0,d0
0000D5DA                            
0000D5DA                            locret_BE5A:
0000D5DA 4E75                       		rts	
0000D5DC                            ; ===========================================================================
0000D5DC 1010                       Obj32_MZData:	dc.b $10, $10
0000D5DE                            ; ===========================================================================
0000D5DE                            
0000D5DE                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D5DE 7001                       		moveq	#1,d0
0000D5E0 0240 003F                  		andi.w	#$3F,d0
0000D5E4 D040                       		add.w	d0,d0
0000D5E6 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D5EA 121A                       		move.b	(a2)+,d1
0000D5EC 4881                       		ext.w	d1
0000D5EE 3029 0008                  		move.w	8(a1),d0
0000D5F2 9041                       		sub.w	d1,d0
0000D5F4 9042                       		sub.w	d2,d0
0000D5F6 6400                       		bcc.s	loc_BE80
0000D5F8 D241                       		add.w	d1,d1
0000D5FA D041                       		add.w	d1,d0
0000D5FC 6500                       		bcs.s	loc_BE84
0000D5FE 60CE                       		bra.s	loc_BE4E
0000D600                            ; ===========================================================================
0000D600                            
0000D600                            loc_BE80:
0000D600 B044                       		cmp.w	d4,d0
0000D602 62CA                       		bhi.s	loc_BE4E
0000D604                            
0000D604                            loc_BE84:
0000D604 121A                       		move.b	(a2)+,d1
0000D606 4881                       		ext.w	d1
0000D608 3029 000C                  		move.w	$C(a1),d0
0000D60C 9041                       		sub.w	d1,d0
0000D60E 9043                       		sub.w	d3,d0
0000D610 6400                       		bcc.s	loc_BE9A
0000D612 D241                       		add.w	d1,d1
0000D614 D041                       		add.w	d1,d0
0000D616 6500                       		bcs.s	loc_BE9E
0000D618 60B4                       		bra.s	loc_BE4E
0000D61A                            ; ===========================================================================
0000D61A                            
0000D61A                            loc_BE9A:
0000D61A B045                       		cmp.w	d5,d0
0000D61C 62B0                       		bhi.s	loc_BE4E
0000D61E                            
0000D61E                            loc_BE9E:
0000D61E 361F                       		move.w	(sp)+,d3
0000D620 7001                       		moveq	#1,d0
0000D622 4E75                       		rts	
0000D624                            ; End of function Obj32_MZBlock
0000D624                            
0000D624                            ; ===========================================================================
0000D624                            ; ---------------------------------------------------------------------------
0000D624                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D624                            ; ---------------------------------------------------------------------------
0000D624                            Map_obj32:
0000D624                            	include "_maps\obj32.asm"
0000D624                            ; ---------------------------------------------------------------------------
0000D624                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D624                            ; ---------------------------------------------------------------------------
0000D624 0000                       		dc.w byte_BEAC-Map_obj32
0000D626 0000                       		dc.w byte_BEB7-Map_obj32
0000D628 0000                       		dc.w byte_BEC2-Map_obj32
0000D62A 0000                       		dc.w byte_BEB7-Map_obj32
0000D62C 02                         byte_BEAC:	dc.b 2
0000D62D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D632 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D637 02                         byte_BEB7:	dc.b 2
0000D638 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D63D F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D642 02                         byte_BEC2:	dc.b 2
0000D643 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D648 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D64D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D652                            		even
0000D652                            		even
0000D652                            
0000D652                            ; ===========================================================================
0000D652                            ; ---------------------------------------------------------------------------
0000D652                            ; Object 33 - pushable blocks (MZ, LZ)
0000D652                            ; ---------------------------------------------------------------------------
0000D652                            
0000D652                            Obj33:					; XREF: Obj_Index
0000D652 7000                       		moveq	#0,d0
0000D654 1028 0024                  		move.b	$24(a0),d0
0000D658 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D65C 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D660                            ; ===========================================================================
0000D660 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D662 0000                       		dc.w loc_BF6E-Obj33_Index
0000D664 0000                       		dc.w loc_C02C-Obj33_Index
0000D666                            
0000D666 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D668 4001                       		dc.b $40, 1
0000D66A                            ; ===========================================================================
0000D66A                            
0000D66A                            Obj33_Main:				; XREF: Obj33_Index
0000D66A 5428 0024                  		addq.b	#2,$24(a0)
0000D66E 117C 000F 0016             		move.b	#$F,$16(a0)
0000D674 117C 000F 0017             		move.b	#$F,$17(a0)
0000D67A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D682 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D688 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D68E 6600                       		bne.s	loc_BF16
0000D690 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D696                            
0000D696                            loc_BF16:
0000D696 117C 0004 0001             		move.b	#4,1(a0)
0000D69C 117C 0003 0018             		move.b	#3,$18(a0)
0000D6A2 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D6A8 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D6AE 7000                       		moveq	#0,d0
0000D6B0 1028 0028                  		move.b	$28(a0),d0
0000D6B4 D040                       		add.w	d0,d0
0000D6B6 0240 000E                  		andi.w	#$E,d0
0000D6BA 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D6BE 115A 0019                  		move.b	(a2)+,$19(a0)
0000D6C2 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D6C6 4A28 0028                  		tst.b	$28(a0)
0000D6CA 6700                       		beq.s	Obj33_ChkGone
0000D6CC 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D6D2                            
0000D6D2                            Obj33_ChkGone:
0000D6D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D6D6 7000                       		moveq	#0,d0
0000D6D8 1028 0023                  		move.b	$23(a0),d0
0000D6DC 6700                       		beq.s	loc_BF6E
0000D6DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D6E4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D6EA 6600 0000                  		bne.w	DeleteObject
0000D6EE                            
0000D6EE                            loc_BF6E:				; XREF: Obj33_Index
0000D6EE 4A28 0032                  		tst.b	$32(a0)
0000D6F2 6600 0000                  		bne.w	loc_C046
0000D6F6 7200                       		moveq	#0,d1
0000D6F8 1228 0019                  		move.b	$19(a0),d1
0000D6FC 0641 000B                  		addi.w	#$B,d1
0000D700 343C 0010                  		move.w	#$10,d2
0000D704 363C 0011                  		move.w	#$11,d3
0000D708 3828 0008                  		move.w	8(a0),d4
0000D70C 6100 0000                  		bsr.w	loc_C186
0000D710 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D716 6600                       		bne.s	loc_BFC6	; if not, branch
0000D718 08A8 0007 0028             		bclr	#7,$28(a0)
0000D71E 3028 0008                  		move.w	8(a0),d0
0000D722 0C40 0A20                  		cmpi.w	#$A20,d0
0000D726 6500                       		bcs.s	loc_BFC6
0000D728 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D72C 6400                       		bcc.s	loc_BFC6
0000D72E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D732 0440 001C                  		subi.w	#$1C,d0
0000D736 3140 000C                  		move.w	d0,$C(a0)
0000D73A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D740 08E8 0007 0028             		bset	#7,$28(a0)
0000D746                            
0000D746                            loc_BFC6:
0000D746 3028 0008                  		move.w	8(a0),d0
0000D74A 0240 FF80                  		andi.w	#$FF80,d0
0000D74E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D752 0441 0080                  		subi.w	#$80,d1
0000D756 0241 FF80                  		andi.w	#$FF80,d1
0000D75A 9041                       		sub.w	d1,d0
0000D75C 0C40 0280                  		cmpi.w	#$280,d0
0000D760 6200                       		bhi.s	loc_BFE6
0000D762 6000 0000                  		bra.w	DisplaySprite
0000D766                            ; ===========================================================================
0000D766                            
0000D766                            loc_BFE6:
0000D766 3028 0034                  		move.w	$34(a0),d0
0000D76A 0240 FF80                  		andi.w	#$FF80,d0
0000D76E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D772 0441 0080                  		subi.w	#$80,d1
0000D776 0241 FF80                  		andi.w	#$FF80,d1
0000D77A 9041                       		sub.w	d1,d0
0000D77C 0C40 0280                  		cmpi.w	#$280,d0
0000D780 6200                       		bhi.s	loc_C016
0000D782 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D788 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D78E 117C 0004 0024             		move.b	#4,$24(a0)
0000D794 6000                       		bra.s	loc_C02C
0000D796                            ; ===========================================================================
0000D796                            
0000D796                            loc_C016:
0000D796 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D79A 7000                       		moveq	#0,d0
0000D79C 1028 0023                  		move.b	$23(a0),d0
0000D7A0 6700                       		beq.s	loc_C028
0000D7A2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D7A8                            
0000D7A8                            loc_C028:
0000D7A8 6000 0000                  		bra.w	DeleteObject
0000D7AC                            ; ===========================================================================
0000D7AC                            
0000D7AC                            loc_C02C:				; XREF: Obj33_Index
0000D7AC 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D7B0 6700                       		beq.s	locret_C044
0000D7B2 117C 0002 0024             		move.b	#2,$24(a0)
0000D7B8 4228 0032                  		clr.b	$32(a0)
0000D7BC 4268 0010                  		clr.w	$10(a0)
0000D7C0 4268 0012                  		clr.w	$12(a0)
0000D7C4                            
0000D7C4                            locret_C044:
0000D7C4 4E75                       		rts	
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            loc_C046:				; XREF: loc_BF6E
0000D7C6 3F28 0008                  		move.w	8(a0),-(sp)
0000D7CA 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D7D0 6400                       		bcc.s	loc_C056
0000D7D2 6100 0000                  		bsr.w	SpeedToPos
0000D7D6                            
0000D7D6                            loc_C056:
0000D7D6 0828 0001 0022             		btst	#1,$22(a0)
0000D7DC 6700                       		beq.s	loc_C0A0
0000D7DE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D7E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000D7EA 4A41                       		tst.w	d1
0000D7EC 6A00 0000                  		bpl.w	loc_C09E
0000D7F0 D368 000C                  		add.w	d1,$C(a0)
0000D7F4 4268 0012                  		clr.w	$12(a0)
0000D7F8 08A8 0001 0022             		bclr	#1,$22(a0)
0000D7FE 3011                       		move.w	(a1),d0
0000D800 0240 03FF                  		andi.w	#$3FF,d0
0000D804 0C40 016A                  		cmpi.w	#$16A,d0
0000D808 6500                       		bcs.s	loc_C09E
0000D80A 3028 0030                  		move.w	$30(a0),d0
0000D80E E640                       		asr.w	#3,d0
0000D810 3140 0010                  		move.w	d0,$10(a0)
0000D814 117C 0001 0032             		move.b	#1,$32(a0)
0000D81A 4268 000E                  		clr.w	$E(a0)
0000D81E                            
0000D81E                            loc_C09E:
0000D81E 6000                       		bra.s	loc_C0E6
0000D820                            ; ===========================================================================
0000D820                            
0000D820                            loc_C0A0:
0000D820 4A68 0010                  		tst.w	$10(a0)
0000D824 6700 0000                  		beq.w	loc_C0D6
0000D828 6B00                       		bmi.s	loc_C0BC
0000D82A 7600                       		moveq	#0,d3
0000D82C 1628 0019                  		move.b	$19(a0),d3
0000D830 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D836 4A41                       		tst.w	d1		; has block touched a wall?
0000D838 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D83A 6000                       		bra.s	loc_C0E6
0000D83C                            ; ===========================================================================
0000D83C                            
0000D83C                            loc_C0BC:
0000D83C 7600                       		moveq	#0,d3
0000D83E 1628 0019                  		move.b	$19(a0),d3
0000D842 4643                       		not.w	d3
0000D844 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D84A 4A41                       		tst.w	d1		; has block touched a wall?
0000D84C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D84E 6000                       		bra.s	loc_C0E6
0000D850                            ; ===========================================================================
0000D850                            
0000D850                            Obj33_StopPush:
0000D850 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D854 6000                       		bra.s	loc_C0E6
0000D856                            ; ===========================================================================
0000D856                            
0000D856                            loc_C0D6:
0000D856 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D85E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D864 6400                       		bcc.s	loc_C104
0000D866                            
0000D866                            loc_C0E6:
0000D866 7200                       		moveq	#0,d1
0000D868 1228 0019                  		move.b	$19(a0),d1
0000D86C 0641 000B                  		addi.w	#$B,d1
0000D870 343C 0010                  		move.w	#$10,d2
0000D874 363C 0011                  		move.w	#$11,d3
0000D878 381F                       		move.w	(sp)+,d4
0000D87A 6100 0000                  		bsr.w	loc_C186
0000D87E 6100                       		bsr.s	Obj33_ChkLava
0000D880 6000 FEC4                  		bra.w	loc_BFC6
0000D884                            ; ===========================================================================
0000D884                            
0000D884                            loc_C104:
0000D884 381F                       		move.w	(sp)+,d4
0000D886 43F8 D000                  		lea	($FFFFD000).w,a1
0000D88A 08A9 0003 0022             		bclr	#3,$22(a1)
0000D890 08A8 0003 0022             		bclr	#3,$22(a0)
0000D896 6000 FECE                  		bra.w	loc_BFE6
0000D89A                            ; ===========================================================================
0000D89A                            
0000D89A                            Obj33_ChkLava:
0000D89A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D8A0 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D8A2 343C FFE0                  		move.w	#-$20,d2
0000D8A6 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D8AC 6700                       		beq.s	Obj33_LoadLava
0000D8AE 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D8B4 6700                       		beq.s	Obj33_LoadLava
0000D8B6 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D8BC 6700                       		beq.s	Obj33_LoadLava
0000D8BE 4E75                       		rts	
0000D8C0                            ; ===========================================================================
0000D8C0                            
0000D8C0                            Obj33_ChkLava2:
0000D8C0 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D8C6 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D8C8 343C 0020                  		move.w	#$20,d2
0000D8CC 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D8D2 6700                       		beq.s	Obj33_LoadLava
0000D8D4 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D8DA 6700                       		beq.s	Obj33_LoadLava
0000D8DC                            
0000D8DC                            Obj33_NoLava:
0000D8DC 4E75                       		rts	
0000D8DE                            ; ===========================================================================
0000D8DE                            
0000D8DE                            Obj33_LoadLava:
0000D8DE 6100 0000                  		bsr.w	SingleObjLoad
0000D8E2 6600                       		bne.s	locret_C184
0000D8E4 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D8E8 3368 0008 0008             		move.w	8(a0),8(a1)
0000D8EE D569 0008                  		add.w	d2,8(a1)
0000D8F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D8F8 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D8FE 2348 003C                  		move.l	a0,$3C(a1)
0000D902                            
0000D902                            locret_C184:
0000D902 4E75                       		rts	
0000D904                            ; ===========================================================================
0000D904                            
0000D904                            loc_C186:				; XREF: loc_BF6E
0000D904 1028 0025                  		move.b	$25(a0),d0
0000D908 6700 0000                  		beq.w	loc_C218
0000D90C 5500                       		subq.b	#2,d0
0000D90E 6600                       		bne.s	loc_C1AA
0000D910 6100 B40E                  		bsr.w	ExitPlatform
0000D914 0829 0003 0022             		btst	#3,$22(a1)
0000D91A 6600                       		bne.s	loc_C1A4
0000D91C 4228 0025                  		clr.b	$25(a0)
0000D920 4E75                       		rts	
0000D922                            ; ===========================================================================
0000D922                            
0000D922                            loc_C1A4:
0000D922 3404                       		move.w	d4,d2
0000D924 6000 B958                  		bra.w	MvSonicOnPtfm
0000D928                            ; ===========================================================================
0000D928                            
0000D928                            loc_C1AA:
0000D928 5500                       		subq.b	#2,d0
0000D92A 6600                       		bne.s	loc_C1F2
0000D92C 6100 0000                  		bsr.w	SpeedToPos
0000D930 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D936 4EB9 0000 0000             		jsr	ObjHitFloor
0000D93C 4A41                       		tst.w	d1
0000D93E 6A00 0000                  		bpl.w	locret_C1F0
0000D942 D368 000C                  		add.w	d1,$C(a0)
0000D946 4268 0012                  		clr.w	$12(a0)
0000D94A 4228 0025                  		clr.b	$25(a0)
0000D94E 3011                       		move.w	(a1),d0
0000D950 0240 03FF                  		andi.w	#$3FF,d0
0000D954 0C40 016A                  		cmpi.w	#$16A,d0
0000D958 6500                       		bcs.s	locret_C1F0
0000D95A 3028 0030                  		move.w	$30(a0),d0
0000D95E E640                       		asr.w	#3,d0
0000D960 3140 0010                  		move.w	d0,$10(a0)
0000D964 117C 0001 0032             		move.b	#1,$32(a0)
0000D96A 4268 000E                  		clr.w	$E(a0)
0000D96E                            
0000D96E                            locret_C1F0:
0000D96E 4E75                       		rts	
0000D970                            ; ===========================================================================
0000D970                            
0000D970                            loc_C1F2:
0000D970 6100 0000                  		bsr.w	SpeedToPos
0000D974 3028 0008                  		move.w	8(a0),d0
0000D978 0240 000C                  		andi.w	#$C,d0
0000D97C 6600 0000                  		bne.w	locret_C2E4
0000D980 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D986 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D98C 4268 0010                  		clr.w	$10(a0)
0000D990 5528 0025                  		subq.b	#2,$25(a0)
0000D994 4E75                       		rts	
0000D996                            ; ===========================================================================
0000D996                            
0000D996                            loc_C218:
0000D996 6100 0000                  		bsr.w	loc_FAC8
0000D99A 4A44                       		tst.w	d4
0000D99C 6700 0000                  		beq.w	locret_C2E4
0000D9A0 6B00 0000                  		bmi.w	locret_C2E4
0000D9A4 4A28 0032                  		tst.b	$32(a0)
0000D9A8 6700                       		beq.s	loc_C230
0000D9AA 6000 0000                  		bra.w	locret_C2E4
0000D9AE                            ; ===========================================================================
0000D9AE                            
0000D9AE                            loc_C230:
0000D9AE 4A40                       		tst.w	d0
0000D9B0 6700 0000                  		beq.w	locret_C2E4
0000D9B4 6B00                       		bmi.s	loc_C268
0000D9B6 0829 0000 0022             		btst	#0,$22(a1)
0000D9BC 6600 0000                  		bne.w	locret_C2E4
0000D9C0 3F00                       		move.w	d0,-(sp)
0000D9C2 7600                       		moveq	#0,d3
0000D9C4 1628 0019                  		move.b	$19(a0),d3
0000D9C8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D9CE 301F                       		move.w	(sp)+,d0
0000D9D0 4A41                       		tst.w	d1
0000D9D2 6B00 0000                  		bmi.w	locret_C2E4
0000D9D6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D9DE 7001                       		moveq	#1,d0
0000D9E0 323C 0040                  		move.w	#$40,d1
0000D9E4 6000                       		bra.s	loc_C294
0000D9E6                            ; ===========================================================================
0000D9E6                            
0000D9E6                            loc_C268:
0000D9E6 0829 0000 0022             		btst	#0,$22(a1)
0000D9EC 6700                       		beq.s	locret_C2E4
0000D9EE 3F00                       		move.w	d0,-(sp)
0000D9F0 7600                       		moveq	#0,d3
0000D9F2 1628 0019                  		move.b	$19(a0),d3
0000D9F6 4643                       		not.w	d3
0000D9F8 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D9FE 301F                       		move.w	(sp)+,d0
0000DA00 4A41                       		tst.w	d1
0000DA02 6B00                       		bmi.s	locret_C2E4
0000DA04 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DA0C 70FF                       		moveq	#-1,d0
0000DA0E 323C FFC0                  		move.w	#-$40,d1
0000DA12                            
0000DA12                            loc_C294:
0000DA12 43F8 D000                  		lea	($FFFFD000).w,a1
0000DA16 D169 0008                  		add.w	d0,8(a1)
0000DA1A 3341 0014                  		move.w	d1,$14(a1)
0000DA1E 337C 0000 0010             		move.w	#0,$10(a1)
0000DA24 3F00                       		move.w	d0,-(sp)
0000DA26 303C 00A7                  		move.w	#$A7,d0
0000DA2A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DA30 301F                       		move.w	(sp)+,d0
0000DA32 4A28 0028                  		tst.b	$28(a0)
0000DA36 6B00                       		bmi.s	locret_C2E4
0000DA38 3F00                       		move.w	d0,-(sp)
0000DA3A 4EB9 0000 0000             		jsr	ObjHitFloor
0000DA40 301F                       		move.w	(sp)+,d0
0000DA42 0C41 0004                  		cmpi.w	#4,d1
0000DA46 6F00                       		ble.s	loc_C2E0
0000DA48 317C 0400 0010             		move.w	#$400,$10(a0)
0000DA4E 4A40                       		tst.w	d0
0000DA50 6A00                       		bpl.s	loc_C2D8
0000DA52 4468 0010                  		neg.w	$10(a0)
0000DA56                            
0000DA56                            loc_C2D8:
0000DA56 117C 0006 0025             		move.b	#6,$25(a0)
0000DA5C 6000                       		bra.s	locret_C2E4
0000DA5E                            ; ===========================================================================
0000DA5E                            
0000DA5E                            loc_C2E0:
0000DA5E D368 000C                  		add.w	d1,$C(a0)
0000DA62                            
0000DA62                            locret_C2E4:
0000DA62 4E75                       		rts	
0000DA64                            ; ===========================================================================
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64                            Map_obj33:
0000DA64                            	include "_maps\obj33.asm"
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64 0000                       		dc.w byte_C2EA-Map_obj33
0000DA66 0000                       		dc.w byte_C2F0-Map_obj33
0000DA68 01                         byte_C2EA:	dc.b 1
0000DA69 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DA6E 04                         byte_C2F0:	dc.b 4
0000DA6F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DA74 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DA79 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DA7E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DA84 00                         		even
0000DA84 00                         		even
0000DA84                            
0000DA84                            ; ===========================================================================
0000DA84                            ; ---------------------------------------------------------------------------
0000DA84                            ; Object 34 - zone title cards
0000DA84                            ; ---------------------------------------------------------------------------
0000DA84                            
0000DA84                            Obj34:					; XREF: Obj_Index
0000DA84 7000                       		moveq	#0,d0
0000DA86 1028 0024                  		move.b	$24(a0),d0
0000DA8A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DA8E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DA92                            ; ===========================================================================
0000DA92 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DA94 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DA96 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DA98 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DA9A                            ; ===========================================================================
0000DA9A                            
0000DA9A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DA9A 2248                       		movea.l	a0,a1
0000DA9C 7000                       		moveq	#0,d0
0000DA9E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w
0000DAA4 6600                       		bne.s	@NotFinal
0000DAA6 7006                       		moveq	#6,d0
0000DAA8                            		
0000DAA8                            	@NotFinal:
0000DAA8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000DAAE E948                       		lsl.w	#4,d0
0000DAB0 D6C0                       		adda.w	d0,a3
0000DAB2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DAB8 7203                       		moveq	#3,d1
0000DABA                            
0000DABA                            Obj34_Loop:
0000DABA 12BC 0034                  		move.b	#$34,0(a1)
0000DABE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DAC2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DAC6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DACA 335A 000A                  		move.w	(a2)+,$A(a1)
0000DACE 135A 0024                  		move.b	(a2)+,$24(a1)
0000DAD2 101A                       		move.b	(a2)+,d0
0000DAD4 6600                       		bne.s	Obj34_ActNumber
0000DAD6 1002                       		move.b	d2,d0
0000DAD8                            
0000DAD8                            Obj34_ActNumber:
0000DAD8 0C00 000A                  		cmpi.b	#$A,d0
0000DADC 6700                       		beq.s	Obj34_Oval
0000DADE 0C00 0007                  		cmpi.b	#7,d0
0000DAE2 6600                       		bne.s	Obj34_MakeSprite
0000DAE4 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000DAE8 0C00 0002                  		cmpi.b	#2,d0
0000DAEC 6D00                       		blt.s	Obj34_MakeSprite
0000DAEE 103C 0001                  		move.b	#1,d0
0000DAF2 6000                       		bra.s	Obj34_MakeSprite
0000DAF4                            		
0000DAF4                            Obj34_Oval:
0000DAF4 103C 0002                  		move.b	#2,d0
0000DAF8                            
0000DAF8                            Obj34_MakeSprite:
0000DAF8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DAFC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DB04 337C 8580 0002             		move.w	#$8580,2(a1)
0000DB0A 0C41 0001                  		cmpi.w	#1,d1
0000DB0E 6F00                       		ble.s	@NotText
0000DB10 237C 0000 0000 0004        		move.l	#Map_obj34_Hell,4(a1)
0000DB18 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w
0000DB1E 6700                       		beq.s	@IsSBZ3Final
0000DB20 237C 0000 0000 0004        		move.l	#Map_obj34_Final,4(a1)
0000DB28 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w
0000DB2E 6700                       		beq.s	@IsSBZ3Final
0000DB30 6100 0000                  		bsr.w	Obj34_GetMappings
0000DB34                            		
0000DB34                            	@IsSBZ3Final:
0000DB34 337C 85AD 0002             		move.w	#$85AD,2(a1)
0000DB3A                            		
0000DB3A                            	@NotText:
0000DB3A 137C 0078 0019             		move.b	#$78,$19(a1)
0000DB40 137C 0000 0001             		move.b	#0,1(a1)
0000DB46 137C 0000 0018             		move.b	#0,$18(a1)
0000DB4C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DB52 43E9 0040                  		lea	$40(a1),a1	; next object
0000DB56 51C9 FF62                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DB5A                            
0000DB5A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DB5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB5C 3028 0030                  		move.w	$30(a0),d0
0000DB60 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DB64 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DB66 6C00                       		bge.s	Obj34_Move
0000DB68 4441                       		neg.w	d1
0000DB6A                            
0000DB6A                            Obj34_Move:
0000DB6A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB6E                            
0000DB6E                            loc_C3C8:
0000DB6E 3028 0008                  		move.w	8(a0),d0
0000DB72 6B00                       		bmi.s	locret_C3D8
0000DB74 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB78 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DB7A                            		
0000DB7A                            Obj34_Display:
0000DB7A 6000 0000                  		bra.w	DisplaySprite
0000DB7E                            ; ===========================================================================
0000DB7E                            
0000DB7E                            locret_C3D8:
0000DB7E 4E75                       		rts	
0000DB80                            ; ===========================================================================
0000DB80                            
0000DB80                            Obj34_Wait:				; XREF: Obj34_Index
0000DB80 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DB84 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DB86 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DB8A 6000 FFEE                  		bra.w	Obj34_Display
0000DB8E                            ; ===========================================================================
0000DB8E                            
0000DB8E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DB8E 4A28 0001                  		tst.b	1(a0)
0000DB92 6A00                       		bpl.s	Obj34_ChangeArt
0000DB94 7220                       		moveq	#$20,d1
0000DB96 3028 0032                  		move.w	$32(a0),d0
0000DB9A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DB9E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DBA0 6C00                       		bge.s	Obj34_Move2
0000DBA2 4441                       		neg.w	d1
0000DBA4                            
0000DBA4                            Obj34_Move2:
0000DBA4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DBA8 3028 0008                  		move.w	8(a0),d0
0000DBAC 6B00                       		bmi.s	locret_C412
0000DBAE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DBB2 6400                       		bcc.s	locret_C412	; if yes, branch
0000DBB4 6000 FFC4                  		bra.w	Obj34_Display
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            locret_C412:
0000DBB8 4E75                       		rts	
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DBBA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DBC0 6600                       		bne.s	Obj34_Delete
0000DBC2 7002                       		moveq	#2,d0
0000DBC4 4EB9 0000 12D0             		jsr	(LoadPLC).l	; load explosion patterns
0000DBCA 7000                       		moveq	#0,d0
0000DBCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DBD0 0640 0015                  		addi.w	#$15,d0
0000DBD4 4EB9 0000 12D0             		jsr	(LoadPLC).l	; load animal patterns
0000DBDA                            
0000DBDA                            Obj34_Delete:
0000DBDA 6000 0000                  		bra.w	DeleteObject
0000DBDE                            ; ===========================================================================
0000DBDE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000DBE0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000DBE2 00E4                       		dc.w $E4
0000DBE4 0201                       		dc.b 2,	1
0000DBE6 00EA                       		dc.w $EA
0000DBE8 0207                       		dc.b 2,	7
0000DBEA 00E0                       		dc.w $E0
0000DBEC 020A                       		dc.b 2,	$A
0000DBEE                            ; ---------------------------------------------------------------------------
0000DBEE                            ; Title	card configuration data
0000DBEE                            ; Format:
0000DBEE                            ; 4 bytes per item (YYYY XXXX)
0000DBEE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DBEE                            ; ---------------------------------------------------------------------------
0000DBEE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000DBFE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000DC0E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000DC1E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000DC2E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000DC3E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000DC4E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000DC5E                            ; ===========================================================================
0000DC5E                            Obj34_MappingArray:
0000DC5E 0000 0000                  		dc.l Map_obj34_Tutorial
0000DC62 0000 0000                  		dc.l Map_obj34_FuckedUp
0000DC66 0000 0000                  		dc.l Map_obj34_Dzien
0000DC6A 0000 0000                  		dc.l Map_obj34_Appendicitis
0000DC6E 0000 0000                  		dc.l Map_obj34_Teeth
0000DC72 0000 0000                  		dc.l Map_obj34_Hell
0000DC76                            ; ===========================================================================
0000DC76                            Obj34_GetMappings:
0000DC76 7000                       		moveq	#0,d0
0000DC78 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DC7C D040                       		add.w	d0,d0
0000DC7E D040                       		add.w	d0,d0
0000DC80 237B 00DC 0004             		move.l	Obj34_MappingArray(pc,d0.w),4(a1)
0000DC86 4E75                       		rts
0000DC88                            ; ===========================================================================
0000DC88                            Map_obj34_Tutorial:
0000DC88                            		include "_maps/Title Cards/obj34_tutorial.asm"
0000DC88                            ; --------------------------------------------------------------------------------
0000DC88                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DC88                            ; --------------------------------------------------------------------------------
0000DC88                            
0000DC88                            SME_RxGWg:	
0000DC88 0000 0000                  		dc.w SME_RxGWg_4-SME_RxGWg, SME_RxGWg_2D-SME_RxGWg	
0000DC8C 08                         SME_RxGWg_4:	dc.b 8	
0000DC8D FB05 001A D4               		dc.b $FB, 5, 0, $1A, $D4	
0000DC92 FB05 001E E4               		dc.b $FB, 5, 0, $1E, $E4	
0000DC97 FB05 001A F4               		dc.b $FB, 5, 0, $1A, $F4	
0000DC9C FB05 0012 04               		dc.b $FB, 5, 0, $12, 4	
0000DCA1 FB05 0016 14               		dc.b $FB, 5, 0, $16, $14	
0000DCA6 FB01 0008 24               		dc.b $FB, 1, 0, 8, $24	
0000DCAB FB05 0000 2C               		dc.b $FB, 5, 0, 0, $2C	
0000DCB0 FB05 000A 3C               		dc.b $FB, 5, 0, $A, $3C	
0000DCB5 06                         SME_RxGWg_2D:	dc.b 6	
0000DCB6 F805 0012 CC               		dc.b $F8, 5, 0, $12, $CC	
0000DCBB F805 0004 DC               		dc.b $F8, 5, 0, 4, $DC	
0000DCC0 F805 000E EC               		dc.b $F8, 5, 0, $E, $EC	
0000DCC5 F805 000E FC               		dc.b $F8, 5, 0, $E, $FC	
0000DCCA F805 0022 0C               		dc.b $F8, 5, 0, $22, $C	
0000DCCF F805 0026 BC               		dc.b $F8, 5, 0, $26, $BC	
0000DCD4                            		even
0000DCD4                            		even
0000DCD4                            Map_obj34_FuckedUp:
0000DCD4                            		include "_maps/Title Cards/obj34_fuckedup.asm"
0000DCD4                            ; --------------------------------------------------------------------------------
0000DCD4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DCD4                            ; --------------------------------------------------------------------------------
0000DCD4                            
0000DCD4                            SME_wgR6z:	
0000DCD4 0000 0000                  		dc.w SME_wgR6z_4-SME_wgR6z, SME_wgR6z_78-SME_wgR6z	
0000DCD8 17                         SME_wgR6z_4:	dc.b $17	
0000DCD9 EA05 001E 84               		dc.b $EA, 5, 0, $1E, $84	
0000DCDE EA05 0010 94               		dc.b $EA, 5, 0, $10, $94	
0000DCE3 EA05 0026 B4               		dc.b $EA, 5, 0, $26, $B4	
0000DCE8 EA05 0010 C4               		dc.b $EA, 5, 0, $10, $C4	
0000DCED EA01 0014 D4               		dc.b $EA, 1, 0, $14, $D4	
0000DCF2 EA05 002A DC               		dc.b $EA, 5, 0, $2A, $DC	
0000DCF7 EA05 0026 FC               		dc.b $EA, 5, 0, $26, $FC	
0000DCFC EA05 001E 0C               		dc.b $EA, 5, 0, $1E, $C	
0000DD01 EA05 001A 1C               		dc.b $EA, 5, 0, $1A, $1C	
0000DD06 EA05 0032 3C               		dc.b $EA, 5, 0, $32, $3C	
0000DD0B EA05 001E 4C               		dc.b $EA, 5, 0, $1E, $4C	
0000DD10 EA05 002E 5C               		dc.b $EA, 5, 0, $2E, $5C	
0000DD15 FB05 000C 90               		dc.b $FB, 5, 0, $C, $90	
0000DD1A FB05 002E A0               		dc.b $FB, 5, 0, $2E, $A0	
0000DD1F FB05 0000 B0               		dc.b $FB, 5, 0, 0, $B0	
0000DD24 FB05 0016 C0               		dc.b $FB, 5, 0, $16, $C0	
0000DD29 FB05 0008 D0               		dc.b $FB, 5, 0, 8, $D0	
0000DD2E FB05 0004 E0               		dc.b $FB, 5, 0, 4, $E0	
0000DD33 FB05 002E 00               		dc.b $FB, 5, 0, $2E, 0	
0000DD38 FB05 0022 10               		dc.b $FB, 5, 0, $22, $10	
0000DD3D FB05 001A 30               		dc.b $FB, 5, 0, $1A, $30	
0000DD42 FB05 001E 40               		dc.b $FB, 5, 0, $1E, $40	
0000DD47 FB05 003A 4F               		dc.b $FB, 5, 0, $3A, $4F	
0000DD4C 06                         SME_wgR6z_78:	dc.b 6	
0000DD4D F805 001E CC               		dc.b $F8, 5, 0, $1E, $CC	
0000DD52 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
0000DD57 F805 001A EC               		dc.b $F8, 5, 0, $1A, $EC	
0000DD5C F805 001A FC               		dc.b $F8, 5, 0, $1A, $FC	
0000DD61 F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000DD66 F805 0036 BC               		dc.b $F8, 5, 0, $36, $BC	
0000DD6C 00                         		even
0000DD6C 00                         		even
0000DD6C                            Map_obj34_Dzien:
0000DD6C                            		include "_maps/Title Cards/obj34_dzien.asm"
0000DD6C                            ; --------------------------------------------------------------------------------
0000DD6C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DD6C                            ; --------------------------------------------------------------------------------
0000DD6C                            
0000DD6C                            SME_ccLno:	
0000DD6C 0000 0000                  		dc.w SME_ccLno_4-SME_ccLno, SME_ccLno_3C-SME_ccLno	
0000DD70 0B                         SME_ccLno_4:	dc.b $B	
0000DD71 F805 0004 A4               		dc.b $F8, 5, 0, 4, $A4	
0000DD76 F805 0022 B4               		dc.b $F8, 5, 0, $22, $B4	
0000DD7B F801 0010 C4               		dc.b $F8, 1, 0, $10, $C4	
0000DD80 F805 0008 CC               		dc.b $F8, 5, 0, 8, $CC	
0000DD85 F805 0012 DC               		dc.b $F8, 5, 0, $12, $DC	
0000DD8A F805 0004 FC               		dc.b $F8, 5, 0, 4, $FC	
0000DD8F F805 0000 1C               		dc.b $F8, 5, 0, 0, $1C	
0000DD94 F805 001E 3C               		dc.b $F8, 5, 0, $1E, $3C	
0000DD99 F805 0016 0C               		dc.b $F8, 5, 0, $16, $C	
0000DD9E F805 001A 2C               		dc.b $F8, 5, 0, $1A, $2C	
0000DDA3 EF00 002A DF               		dc.b $EF, 0, 0, $2A, $DF	
0000DDA8 06                         SME_ccLno_3C:	dc.b 6	
0000DDA9 F805 0026 BC               		dc.b $F8, 5, 0, $26, $BC	
0000DDAE F805 0016 CC               		dc.b $F8, 5, 0, $16, $CC	
0000DDB3 F805 000C DC               		dc.b $F8, 5, 0, $C, $DC	
0000DDB8 F805 0012 EC               		dc.b $F8, 5, 0, $12, $EC	
0000DDBD F805 0012 FC               		dc.b $F8, 5, 0, $12, $FC	
0000DDC2 F805 001E 0C               		dc.b $F8, 5, 0, $1E, $C	
0000DDC8 00                         		even
0000DDC8 00                         		even
0000DDC8                            Map_obj34_Appendicitis:
0000DDC8                            		include "_maps/Title Cards/obj34_appendicitis.asm"
0000DDC8                            ; --------------------------------------------------------------------------------
0000DDC8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DDC8                            ; --------------------------------------------------------------------------------
0000DDC8                            
0000DDC8                            SME_yrJK4:	
0000DDC8 0000 0000                  		dc.w SME_yrJK4_4-SME_yrJK4, SME_yrJK4_78-SME_yrJK4	
0000DDCC 17                         SME_yrJK4_4:	dc.b $17	
0000DDCD EA01 0014 94               		dc.b $EA, 1, 0, $14, $94	
0000DDD2 EA05 002A AC               		dc.b $EA, 5, 0, $2A, $AC	
0000DDD7 EA05 0010 BC               		dc.b $EA, 5, 0, $10, $BC	
0000DDDC EA01 0014 CC               		dc.b $EA, 1, 0, $14, $CC	
0000DDE1 EA05 001A D4               		dc.b $EA, 5, 0, $1A, $D4	
0000DDE6 EA05 0016 E4               		dc.b $EA, 5, 0, $16, $E4	
0000DDEB EA01 0014 04               		dc.b $EA, 1, 0, $14, 4	
0000DDF0 EA05 0010 1C               		dc.b $EA, 5, 0, $10, $1C	
0000DDF5 EA05 0000 2C               		dc.b $EA, 5, 0, 0, $2C	
0000DDFA EA05 002E 3C               		dc.b $EA, 5, 0, $2E, $3C	
0000DDFF EA05 000C 4C               		dc.b $EA, 5, 0, $C, $4C	
0000DE04 FB05 0000 A4               		dc.b $FB, 5, 0, 0, $A4	
0000DE09 FB05 0022 B4               		dc.b $FB, 5, 0, $22, $B4	
0000DE0E FB05 0022 C4               		dc.b $FB, 5, 0, $22, $C4	
0000DE13 FB05 000C D4               		dc.b $FB, 5, 0, $C, $D4	
0000DE18 FB05 001A E4               		dc.b $FB, 5, 0, $1A, $E4	
0000DE1D FB05 0008 F4               		dc.b $FB, 5, 0, 8, $F4	
0000DE22 FB01 0014 04               		dc.b $FB, 1, 0, $14, 4	
0000DE27 FB05 0004 0C               		dc.b $FB, 5, 0, 4, $C	
0000DE2C FB01 0014 1C               		dc.b $FB, 1, 0, $14, $1C	
0000DE31 FB05 002A 24               		dc.b $FB, 5, 0, $2A, $24	
0000DE36 FB01 0014 34               		dc.b $FB, 1, 0, $14, $34	
0000DE3B FB05 0026 3C               		dc.b $FB, 5, 0, $26, $3C	
0000DE40 06                         SME_yrJK4_78:	dc.b 6	
0000DE41 F805 001E CC               		dc.b $F8, 5, 0, $1E, $CC	
0000DE46 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
0000DE4B F805 001A EC               		dc.b $F8, 5, 0, $1A, $EC	
0000DE50 F805 001A FC               		dc.b $F8, 5, 0, $1A, $FC	
0000DE55 F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000DE5A F805 0036 BC               		dc.b $F8, 5, 0, $36, $BC	
0000DE60 00                         		even
0000DE60 00                         		even
0000DE60                            Map_obj34_Teeth:
0000DE60                            		include "_maps/Title Cards/obj34_teeth.asm"
0000DE60                            ; --------------------------------------------------------------------------------
0000DE60                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DE60                            ; --------------------------------------------------------------------------------
0000DE60                            
0000DE60                            SME_zX1Nj:	
0000DE60 0000 0000                  		dc.w SME_zX1Nj_4-SME_zX1Nj, SME_zX1Nj_55-SME_zX1Nj	
0000DE64 10                         SME_zX1Nj_4:	dc.b $10	
0000DE65 EA05 0010 A4               		dc.b $EA, 5, 0, $10, $A4	
0000DE6A EA05 0024 B4               		dc.b $EA, 5, 0, $24, $B4	
0000DE6F EA05 001C D4               		dc.b $EA, 5, 0, $1C, $D4	
0000DE74 EA05 0000 E4               		dc.b $EA, 5, 0, 0, $E4	
0000DE79 EA05 0000 F4               		dc.b $EA, 5, 0, 0, $F4	
0000DE7E EA05 001C 04               		dc.b $EA, 5, 0, $1C, 4	
0000DE83 EA05 0008 14               		dc.b $EA, 5, 0, 8, $14	
0000DE88 EA05 0004 34               		dc.b $EA, 5, 0, 4, $34	
0000DE8D EA05 0000 44               		dc.b $EA, 5, 0, 0, $44	
0000DE92 EA05 0000 54               		dc.b $EA, 5, 0, 0, $54	
0000DE97 EA05 000C 64               		dc.b $EA, 5, 0, $C, $64	
0000DE9C FB05 0004 E4               		dc.b $FB, 5, 0, 4, $E4	
0000DEA1 FB05 0020 F4               		dc.b $FB, 5, 0, $20, $F4	
0000DEA6 FB05 0014 04               		dc.b $FB, 5, 0, $14, 4	
0000DEAB FB05 0014 14               		dc.b $FB, 5, 0, $14, $14	
0000DEB0 FB05 0024 24               		dc.b $FB, 5, 0, $24, $24	
0000DEB5 06                         SME_zX1Nj_55:	dc.b 6	
0000DEB6 F805 0018 CC               		dc.b $F8, 5, 0, $18, $CC	
0000DEBB F805 0008 DC               		dc.b $F8, 5, 0, 8, $DC	
0000DEC0 F805 0014 EC               		dc.b $F8, 5, 0, $14, $EC	
0000DEC5 F805 0014 FC               		dc.b $F8, 5, 0, $14, $FC	
0000DECA F805 0024 0C               		dc.b $F8, 5, 0, $24, $C	
0000DECF F805 0028 BC               		dc.b $F8, 5, 0, $28, $BC	
0000DED4                            		even
0000DED4                            		even
0000DED4                            Map_obj34_Hell:
0000DED4                            		include "_maps/Title Cards/obj34_hell.asm"
0000DED4                            ; --------------------------------------------------------------------------------
0000DED4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DED4                            ; --------------------------------------------------------------------------------
0000DED4                            
0000DED4                            SME_MYeYc:	
0000DED4 0000 0000                  		dc.w SME_MYeYc_4-SME_MYeYc, SME_MYeYc_50-SME_MYeYc	
0000DED8 0F                         SME_MYeYc_4:	dc.b $F	
0000DED9 EA05 001E 9C               		dc.b $EA, 5, 0, $1E, $9C	
0000DEDE EA05 0012 AC               		dc.b $EA, 5, 0, $12, $AC	
0000DEE3 EA05 001A BC               		dc.b $EA, 5, 0, $1A, $BC	
0000DEE8 EA05 0016 D4               		dc.b $EA, 5, 0, $16, $D4	
0000DEED EA05 0000 E4               		dc.b $EA, 5, 0, 0, $E4	
0000DEF2 EA00 0025 CC               		dc.b $EA, 0, 0, $25, $CC	
0000DEF7 EA01 0008 04               		dc.b $EA, 1, 0, 8, 4	
0000DEFC EA05 000E 0C               		dc.b $EA, 5, 0, $E, $C	
0000DF01 EA05 0004 2C               		dc.b $EA, 5, 0, 4, $2C	
0000DF06 EA05 0000 3C               		dc.b $EA, 5, 0, 0, $3C	
0000DF0B EA05 000A 4C               		dc.b $EA, 5, 0, $A, $4C	
0000DF10 EA05 000A 5C               		dc.b $EA, 5, 0, $A, $5C	
0000DF15 FB05 000E FC               		dc.b $FB, 5, 0, $E, $FC	
0000DF1A FB05 0012 0C               		dc.b $FB, 5, 0, $12, $C	
0000DF1F FB05 0026 1B               		dc.b $FB, 5, 0, $26, $1B	
0000DF24 06                         SME_MYeYc_50:	dc.b 6	
0000DF25 F805 0012 CC               		dc.b $F8, 5, 0, $12, $CC	
0000DF2A F805 0004 DC               		dc.b $F8, 5, 0, 4, $DC	
0000DF2F F805 000E EC               		dc.b $F8, 5, 0, $E, $EC	
0000DF34 F805 000E FC               		dc.b $F8, 5, 0, $E, $FC	
0000DF39 F805 001E 0C               		dc.b $F8, 5, 0, $1E, $C	
0000DF3E F805 0022 BC               		dc.b $F8, 5, 0, $22, $BC	
0000DF44 00                         		even
0000DF44 00                         		even
0000DF44                            Map_obj34_Final:
0000DF44                            		include "_maps/Title Cards/obj34_final.asm"
0000DF44                            ; --------------------------------------------------------------------------------
0000DF44                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DF44                            ; --------------------------------------------------------------------------------
0000DF44                            
0000DF44                            SME_WV43X:	
0000DF44 0000 0000                  		dc.w SME_WV43X_4-SME_WV43X, SME_WV43X_1E-SME_WV43X	
0000DF48 05                         SME_WV43X_4:	dc.b 5	
0000DF49 F805 0004 D8               		dc.b $F8, 5, 0, 4, $D8	
0000DF4E F801 000C E8               		dc.b $F8, 1, 0, $C, $E8	
0000DF53 F805 0012 F0               		dc.b $F8, 5, 0, $12, $F0	
0000DF58 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000DF5D F805 000E 10               		dc.b $F8, 5, 0, $E, $10	
0000DF62 06                         SME_WV43X_1E:	dc.b 6	
0000DF63 F805 0016 CC               		dc.b $F8, 5, 0, $16, $CC	
0000DF68 F805 0008 DC               		dc.b $F8, 5, 0, 8, $DC	
0000DF6D F805 0012 EC               		dc.b $F8, 5, 0, $12, $EC	
0000DF72 F805 0012 FC               		dc.b $F8, 5, 0, $12, $FC	
0000DF77 F805 001A 0C               		dc.b $F8, 5, 0, $1A, $C	
0000DF7C F805 001E BC               		dc.b $F8, 5, 0, $1E, $BC	
0000DF82 00                         		even
0000DF82 00                         		even
0000DF82                            ; ===========================================================================
0000DF82                            ; ---------------------------------------------------------------------------
0000DF82                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DF82                            ; ---------------------------------------------------------------------------
0000DF82                            
0000DF82                            Obj39:					; XREF: Obj_Index
0000DF82 7000                       		moveq	#0,d0
0000DF84 1028 0024                  		move.b	$24(a0),d0
0000DF88 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DF8C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DF90                            ; ===========================================================================
0000DF90 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DF92 0000                       		dc.w loc_C50C-Obj39_Index
0000DF94 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DF96                            ; ===========================================================================
0000DF96                            
0000DF96                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DF96 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DF9A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DF9C 4E75                       		rts	
0000DF9E                            ; ===========================================================================
0000DF9E                            
0000DF9E                            Obj39_Main:
0000DF9E 5428 0024                  		addq.b	#2,$24(a0)
0000DFA2 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DFA8 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DFAE 6700                       		beq.s	loc_C4EC	; if not, branch
0000DFB0 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DFB6                            
0000DFB6                            loc_C4EC:
0000DFB6 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DFBC 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DFC4 317C 855E 0002             		move.w	#$855E,2(a0)
0000DFCA 117C 0000 0001             		move.b	#0,1(a0)
0000DFD0 117C 0000 0018             		move.b	#0,$18(a0)
0000DFD6                            
0000DFD6                            loc_C50C:				; XREF: Obj39_Index
0000DFD6 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFD8 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DFDE 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DFE0 6500                       		bcs.s	Obj39_Move
0000DFE2 4441                       		neg.w	d1
0000DFE4                            
0000DFE4                            Obj39_Move:
0000DFE4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DFE8 6000 0000                  		bra.w	DisplaySprite
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            Obj39_SetWait:				; XREF: Obj39_Main
0000DFEC 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DFF2 5428 0024                  		addq.b	#2,$24(a0)
0000DFF6 4E75                       		rts	
0000DFF8                            ; ===========================================================================
0000DFF8                            
0000DFF8                            Obj39_Wait:				; XREF: Obj39_Index
0000DFF8 1038 F605                  		move.b	($FFFFF605).w,d0
0000DFFC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000E000 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000E002 0828 0000 001A             		btst	#0,$1A(a0)
0000E008 6600                       		bne.s	Obj39_Display
0000E00A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000E00E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000E010 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E014 6000 0000                  		bra.w	DisplaySprite
0000E018                            ; ===========================================================================
0000E018                            
0000E018                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000E018 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000E01C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000E01E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000E024 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000E028 6600                       		bne.s	Obj39_Display	; if yes, branch
0000E02A 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set mode to 0 (Sega screen)
0000E030 6000                       		bra.s	Obj39_Display
0000E032                            ; ===========================================================================
0000E032                            
0000E032                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000E032 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E038                            
0000E038                            Obj39_Display:				; XREF: Obj39_ChgMode
0000E038 6000 0000                  		bra.w	DisplaySprite
0000E03C                            ; ===========================================================================
0000E03C                            ; ---------------------------------------------------------------------------
0000E03C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E03C                            ; ---------------------------------------------------------------------------
0000E03C                            
0000E03C                            Obj3A:					; XREF: Obj_Index
0000E03C 7000                       		moveq	#0,d0
0000E03E 1028 0024                  		move.b	$24(a0),d0
0000E042 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000E046 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000E04A                            ; ===========================================================================
0000E04A                            Obj3A_Index:	
0000E04A 0000                       		dc.w Obj3A_ChkPLC-Obj3A_Index
0000E04C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000E04E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E050 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000E052 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E054 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000E056 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000E058 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000E05A 0000                       		dc.w loc_C766-Obj3A_Index
0000E05C                            ; ===========================================================================
0000E05C                            
0000E05C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000E05C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E060 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000E062 4E75                       		rts	
0000E064                            ; ===========================================================================
0000E064                            
0000E064                            Obj3A_Main:
0000E064 2248                       		movea.l	a0,a1
0000E066 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000E06C 7206                       		moveq	#6,d1
0000E06E                            
0000E06E                            Obj3A_Loop:
0000E06E 12BC 003A                  		move.b	#$3A,0(a1)
0000E072 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000E076 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000E07A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E07E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E082 135A 0024                  		move.b	(a2)+,$24(a1)
0000E086 101A                       		move.b	(a2)+,d0
0000E088 0C00 0006                  		cmpi.b	#6,d0
0000E08C 6600                       		bne.s	loc_C5CA
0000E08E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000E092                            
0000E092                            loc_C5CA:
0000E092 1340 001A                  		move.b	d0,$1A(a1)
0000E096 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000E09E 337C 8580 0002             		move.w	#$8580,2(a1)
0000E0A4 0C41 0005                  		cmpi.w	#5,d1
0000E0A8 6D00                       		blt.s	@NotText
0000E0AA 337C 85AD 0002             		move.w	#$85AD,2(a1)
0000E0B0                            		
0000E0B0                            	@NotText:
0000E0B0 137C 0000 0001             		move.b	#0,1(a1)
0000E0B6 43E9 0040                  		lea	$40(a1),a1
0000E0BA 51C9 FFB2                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000E0BE                            
0000E0BE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000E0BE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E0C0 3028 0030                  		move.w	$30(a0),d0
0000E0C4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E0C8 6700                       		beq.s	loc_C61A	; if yes, branch
0000E0CA 6C00                       		bge.s	Obj3A_Move
0000E0CC 4441                       		neg.w	d1
0000E0CE                            
0000E0CE                            Obj3A_Move:
0000E0CE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E0D2                            
0000E0D2                            loc_C5FE:				; XREF: loc_C61A
0000E0D2 3028 0008                  		move.w	8(a0),d0
0000E0D6 6B00                       		bmi.s	locret_C60E
0000E0D8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E0DC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E0DE 6000 0000                  		bra.w	DisplaySprite
0000E0E2                            ; ===========================================================================
0000E0E2                            
0000E0E2                            locret_C60E:
0000E0E2 4E75                       		rts	
0000E0E4                            ; ===========================================================================
0000E0E4                            
0000E0E4                            loc_C610:				; XREF: loc_C61A
0000E0E4 117C 000E 0024             		move.b	#$E,$24(a0)
0000E0EA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000E0EE                            ; ===========================================================================
0000E0EE                            
0000E0EE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000E0EE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E0F4 67EE                       		beq.s	loc_C610
0000E0F6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E0FC 66D4                       		bne.s	loc_C5FE
0000E0FE 5428 0024                  		addq.b	#2,$24(a0)
0000E102 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E108                            
0000E108                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E108 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E10C 6600                       		bne.s	Obj3A_Display
0000E10E 5428 0024                  		addq.b	#2,$24(a0)
0000E112                            
0000E112                            Obj3A_Display:
0000E112 6000 0000                  		bra.w	DisplaySprite
0000E116                            ; ===========================================================================
0000E116                            
0000E116                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E116 6100 0000                  		bsr.w	DisplaySprite
0000E11A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E120 7000                       		moveq	#0,d0
0000E122 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E126 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E128 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E12C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E132                            
0000E132                            Obj3A_RingBonus:
0000E132 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E136 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E138 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E13C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E142                            
0000E142                            Obj3A_ChkBonus:
0000E142 4A40                       		tst.w	d0		; is there any bonus?
0000E144 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E146 303C 00C5                  		move.w	#$C5,d0
0000E14A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E150 5428 0024                  		addq.b	#2,$24(a0)
0000E154 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E15A 6600                       		bne.s	Obj3A_SetDelay
0000E15C 5828 0024                  		addq.b	#4,$24(a0)
0000E160                            
0000E160                            Obj3A_SetDelay:
0000E160 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E166                            
0000E166                            locret_C692:
0000E166 4E75                       		rts	
0000E168                            ; ===========================================================================
0000E168                            
0000E168                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E168 4EB9 0000 0000             		jsr	AddPoints
0000E16E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E172 0200 0003                  		andi.b	#3,d0
0000E176 66EE                       		bne.s	locret_C692
0000E178 303C 00CD                  		move.w	#$CD,d0
0000E17C 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E182                            ; ===========================================================================
0000E182                            
0000E182                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E182 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E186 0240 0007                  		andi.w	#7,d0
0000E18A E748                       		lsl.w	#3,d0
0000E18C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000E190 0241 0003                  		andi.w	#3,d1
0000E194 D241                       		add.w	d1,d1
0000E196 D041                       		add.w	d1,d0
0000E198 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E19C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E1A0 4A40                       		tst.w	d0
0000E1A2 6600                       		bne.s	Obj3A_ChkSS
0000E1A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E1AA 6000                       		bra.s	Obj3A_Display2
0000E1AC                            ; ===========================================================================
0000E1AC                            
0000E1AC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E1AC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E1B0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E1B4 6700                       		beq.s	loc_C6EA	; if not, branch
0000E1B6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E1BC 6000                       		bra.s	Obj3A_Display2
0000E1BE                            ; ===========================================================================
0000E1BE                            
0000E1BE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000E1BE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E1C4                            
0000E1C4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E1C4 6000 0000                  		bra.w	DisplaySprite
0000E1C8                            ; ===========================================================================
0000E1C8                            ; ---------------------------------------------------------------------------
0000E1C8                            ; Level	order array
0000E1C8                            ; ---------------------------------------------------------------------------
0000E1C8                            LevelOrder:
0000E1C8 0200 0000                  		dc.w $0200, $0000 	;GHZ1 -> MZ
0000E1CC 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E1D0 0101 0102                  		dc.w $0101, $0102 	;LZ1 -> LZ2 -> LZ3
0000E1D4 0300 0502                  		dc.w $0300, $0502 	;LZ3 -> SLZ1 or if act 4 -> FZ
0000E1D8 0201 0400                  		dc.w $0201, $0400 	;MZ1 -> MZ2 -> SYZ 
0000E1DC 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E1E0 0301 0302                  		dc.w $0301, $0302 	;SLZ1 -> SLZ2 -> SLZ3
0000E1E4 0500 0000                  		dc.w $0500, $0000 	;SLZ3 -> SYZ1
0000E1E8 0401 0402                  		dc.w $0401, $0402 	;SYZ1 -> SYZ2 -> SYZ3
0000E1EC 0100 0000                  		dc.w $0100, $0000 	;SYZ3 -> LZ1?
0000E1F0 0501 0103                  		dc.w $0501, $0103 	;SBZ1 -> SBZ2 -> LZ4
0000E1F4                            		even
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E1F4 7220                       		moveq	#$20,d1		; set horizontal speed
0000E1F6 3028 0032                  		move.w	$32(a0),d0
0000E1FA B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E1FE 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E200 6C00                       		bge.s	Obj3A_Move2
0000E202 4441                       		neg.w	d1
0000E204                            
0000E204                            Obj3A_Move2:
0000E204 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E208 3028 0008                  		move.w	8(a0),d0
0000E20C 6B00                       		bmi.s	locret_C748
0000E20E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E212 6400                       		bcc.s	locret_C748	; if yes, branch
0000E214 6000 0000                  		bra.w	DisplaySprite
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            locret_C748:
0000E218 4E75                       		rts	
0000E21A                            ; ===========================================================================
0000E21A                            
0000E21A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E21A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E220 6600 0000                  		bne.w	DeleteObject
0000E224 5428 0024                  		addq.b	#2,$24(a0)
0000E228 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E22C 303C 008D                  		move.w	#$8D,d0
0000E230 4EF9 0000 1010             		jmp	(PlaySound).l	; play FZ music
0000E236                            ; ===========================================================================
0000E236                            
0000E236                            loc_C766:				; XREF: Obj3A_Index
0000E236 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E23A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E240 6700 0000                  		beq.w	DeleteObject
0000E244 4E75                       		rts	
0000E246                            ; ===========================================================================
0000E246 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E24C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E24E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E254 0201                       		dc.b 2,	1
0000E256 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000E25C 0206                       		dc.b 2,	6
0000E25E 0520 0120 00EC             		dc.w $520, $120, $EC
0000E264 0202                       		dc.b 2,	2
0000E266 0540 0120 00FC             		dc.w $540, $120, $FC
0000E26C 0203                       		dc.b 2,	3
0000E26E 0560 0120 010C             		dc.w $560, $120, $10C
0000E274 0204                       		dc.b 2,	4
0000E276 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E27C 0205                       		dc.b 2,	5
0000E27E                            ; ===========================================================================
0000E27E                            ; ---------------------------------------------------------------------------
0000E27E                            ; Object 7E - special stage results screen
0000E27E                            ; ---------------------------------------------------------------------------
0000E27E                            
0000E27E                            Obj7E:					; XREF: Obj_Index
0000E27E 7000                       		moveq	#0,d0
0000E280 1028 0024                  		move.b	$24(a0),d0
0000E284 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E288 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E28C                            ; ===========================================================================
0000E28C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E28E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E290 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E292 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E294 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E296 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E298 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E29A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E29C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E29E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E2A0 0000                       		dc.w loc_C91A-Obj7E_Index
0000E2A2                            ; ===========================================================================
0000E2A2                            
0000E2A2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E2A2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E2A6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E2A8 4E75                       		rts	
0000E2AA                            ; ===========================================================================
0000E2AA                            
0000E2AA                            Obj7E_Main:
0000E2AA 2248                       		movea.l	a0,a1
0000E2AC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E2B2 7203                       		moveq	#3,d1
0000E2B4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E2BA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E2BC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E2BE                            
0000E2BE                            Obj7E_Loop:
0000E2BE 12BC 007E                  		move.b	#$7E,0(a1)
0000E2C2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E2C6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E2CA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E2CE 135A 0024                  		move.b	(a2)+,$24(a1)
0000E2D2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E2D6 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E2DE 337C 8580 0002             		move.w	#$8580,2(a1)
0000E2E4 137C 0000 0001             		move.b	#0,1(a1)
0000E2EA 43E9 0040                  		lea	$40(a1),a1
0000E2EE 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E2F2                            
0000E2F2 7007                       		moveq	#7,d0
0000E2F4 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E2F8 6700                       		beq.s	loc_C842
0000E2FA 7000                       		moveq	#0,d0
0000E2FC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E300 6600                       		bne.s	loc_C842	; if not, branch
0000E302 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E304 317C 0018 0008             		move.w	#$18,8(a0)
0000E30A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E310                            
0000E310                            loc_C842:
0000E310 1140 001A                  		move.b	d0,$1A(a0)
0000E314                            
0000E314                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E314 7210                       		moveq	#$10,d1		; set horizontal speed
0000E316 3028 0030                  		move.w	$30(a0),d0
0000E31A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E31E 6700                       		beq.s	loc_C86C	; if yes, branch
0000E320 6C00                       		bge.s	Obj7E_Move
0000E322 4441                       		neg.w	d1
0000E324                            
0000E324                            Obj7E_Move:
0000E324 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E328                            
0000E328                            loc_C85A:				; XREF: loc_C86C
0000E328 3028 0008                  		move.w	8(a0),d0
0000E32C 6B00                       		bmi.s	locret_C86A
0000E32E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E332 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E334 6000 0000                  		bra.w	DisplaySprite
0000E338                            ; ===========================================================================
0000E338                            
0000E338                            locret_C86A:
0000E338 4E75                       		rts	
0000E33A                            ; ===========================================================================
0000E33A                            
0000E33A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E33A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E340 66E6                       		bne.s	loc_C85A
0000E342 5428 0024                  		addq.b	#2,$24(a0)
0000E346 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E34C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E352                            
0000E352                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E352 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E356 6600                       		bne.s	Obj7E_Display
0000E358 5428 0024                  		addq.b	#2,$24(a0)
0000E35C                            
0000E35C                            Obj7E_Display:
0000E35C 6000 0000                  		bra.w	DisplaySprite
0000E360                            ; ===========================================================================
0000E360                            
0000E360                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E360 6100 0000                  		bsr.w	DisplaySprite
0000E364 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E36A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E36E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E370 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E376 700A                       		moveq	#10,d0		; add 10 to score
0000E378 4EB9 0000 0000             		jsr	AddPoints
0000E37E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E382 0200 0003                  		andi.b	#3,d0
0000E386 6600                       		bne.s	locret_C8EA
0000E388 303C 00CD                  		move.w	#$CD,d0
0000E38C 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E392                            ; ===========================================================================
0000E392                            
0000E392                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E392 303C 00C5                  		move.w	#$C5,d0
0000E396 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E39C 5428 0024                  		addq.b	#2,$24(a0)
0000E3A0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E3A6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E3AC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E3AE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E3B4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E3B8                            
0000E3B8                            locret_C8EA:
0000E3B8 4E75                       		rts	
0000E3BA                            ; ===========================================================================
0000E3BA                            
0000E3BA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E3BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E3C0 6000 0000                  		bra.w	DisplaySprite
0000E3C4                            ; ===========================================================================
0000E3C4                            
0000E3C4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E3C4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E3CA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E3D0 303C 00BF                  		move.w	#$BF,d0
0000E3D4 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play continues music
0000E3DA 5428 0024                  		addq.b	#2,$24(a0)
0000E3DE 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E3E4 6000 0000                  		bra.w	DisplaySprite
0000E3E8                            ; ===========================================================================
0000E3E8                            
0000E3E8                            loc_C91A:				; XREF: Obj7E_Index
0000E3E8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E3EC 0200 000F                  		andi.b	#$F,d0
0000E3F0 6600                       		bne.s	Obj7E_Display2
0000E3F2 0868 0000 001A             		bchg	#0,$1A(a0)
0000E3F8                            
0000E3F8                            Obj7E_Display2:
0000E3F8 6000 0000                  		bra.w	DisplaySprite
0000E3FC                            ; ===========================================================================
0000E3FC 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E402 0200                       		dc.b 2,	0		; rountine number, frame number
0000E404 0320 0120 0118             		dc.w $320, $120, $118
0000E40A 0201                       		dc.b 2,	1
0000E40C 0360 0120 0128             		dc.w $360, $120, $128
0000E412 0202                       		dc.b 2,	2
0000E414 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E41A 0203                       		dc.b 2,	3
0000E41C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E422 0206                       		dc.b 2,	6
0000E424                            ; ===========================================================================
0000E424                            ; ---------------------------------------------------------------------------
0000E424                            ; Object 7F - chaos emeralds from the special stage results screen
0000E424                            ; ---------------------------------------------------------------------------
0000E424                            
0000E424                            Obj7F:					; XREF: Obj_Index
0000E424 7000                       		moveq	#0,d0
0000E426 1028 0024                  		move.b	$24(a0),d0
0000E42A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E42E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E432                            ; ===========================================================================
0000E432 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E434 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E436                            
0000E436                            ; ---------------------------------------------------------------------------
0000E436                            ; X-axis positions for chaos emeralds
0000E436                            ; ---------------------------------------------------------------------------
0000E436 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E442                            ; ===========================================================================
0000E442                            
0000E442                            Obj7F_Main:				; XREF: Obj7F_Index
0000E442 2248                       		movea.l	a0,a1
0000E444 45F9 0000 E436             		lea	(Obj7F_PosData).l,a2
0000E44A 7400                       		moveq	#0,d2
0000E44C 7200                       		moveq	#0,d1
0000E44E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E452 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E454 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E458                            
0000E458                            Obj7F_Loop:
0000E458 12BC 007F                  		move.b	#$7F,0(a1)
0000E45C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E460 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E466 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E46A 1633 2000                  		move.b	(a3,d2.w),d3
0000E46E 1343 001A                  		move.b	d3,$1A(a1)
0000E472 1343 001C                  		move.b	d3,$1C(a1)
0000E476 5202                       		addq.b	#1,d2
0000E478 5429 0024                  		addq.b	#2,$24(a1)
0000E47C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E484 337C 8541 0002             		move.w	#$8541,2(a1)
0000E48A 137C 0000 0001             		move.b	#0,1(a1)
0000E490 43E9 0040                  		lea	$40(a1),a1	; next object
0000E494 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E498                            
0000E498                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E498 1028 001A                  		move.b	$1A(a0),d0
0000E49C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E4A2 0C00 0006                  		cmpi.b	#6,d0
0000E4A6 6600                       		bne.s	Obj7F_Display
0000E4A8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E4AE                            
0000E4AE                            Obj7F_Display:
0000E4AE 6000 0000                  		bra.w	DisplaySprite
0000E4B2                            ; ===========================================================================
0000E4B2                            ; ---------------------------------------------------------------------------
0000E4B2                            ; Sprite mappings - zone title cards
0000E4B2                            ; ---------------------------------------------------------------------------
0000E4B2                            Map_obj34:	
0000E4B2                            	include "_maps\obj34_title_card.asm"
0000E4B2                            ; --------------------------------------------------------------------------------
0000E4B2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E4B2                            ; --------------------------------------------------------------------------------
0000E4B2                            
0000E4B2                            SME_D3SvB:	
0000E4B2 0000                       		dc.w SME_D3SvB_13-SME_D3SvB	
0000E4B4 0000 0000                  		dc.w SME_D3SvB_1E-SME_D3SvB, SME_D3SvB_29-SME_D3SvB	
0000E4B8 02                         SME_D3SvB_13:	dc.b 2	
0000E4B9 040C 0000 EC               		dc.b 4, $C, 0, 0, $EC	
0000E4BE F406 0007 08               		dc.b $F4, 6, 0, 7, 8	
0000E4C3 02                         SME_D3SvB_1E:	dc.b 2	
0000E4C4 040C 0000 EC               		dc.b 4, $C, 0, 0, $EC	
0000E4C9 F406 000D 08               		dc.b $F4, 6, 0, $D, 8	
0000E4CE 0D                         SME_D3SvB_29:	dc.b $D	
0000E4CF E40C 001D F4               		dc.b $E4, $C, 0, $1D, $F4	
0000E4D4 E402 0021 14               		dc.b $E4, 2, 0, $21, $14	
0000E4D9 EC04 0024 EC               		dc.b $EC, 4, 0, $24, $EC	
0000E4DE F405 0026 E4               		dc.b $F4, 5, 0, $26, $E4	
0000E4E3 140C 181D EC               		dc.b $14, $C, $18, $1D, $EC	
0000E4E8 0402 1821 E4               		dc.b 4, 2, $18, $21, $E4	
0000E4ED 0C04 1824 04               		dc.b $C, 4, $18, $24, 4	
0000E4F2 FC05 1826 0C               		dc.b $FC, 5, $18, $26, $C	
0000E4F7 EC08 002A FC               		dc.b $EC, 8, 0, $2A, $FC	
0000E4FC F40C 0029 F4               		dc.b $F4, $C, 0, $29, $F4	
0000E501 FC08 0029 F4               		dc.b $FC, 8, 0, $29, $F4	
0000E506 040C 0029 EC               		dc.b 4, $C, 0, $29, $EC	
0000E50B 0C08 0029 EC               		dc.b $C, 8, 0, $29, $EC	
0000E510                            		even
0000E510                            		even
0000E510                            ; ---------------------------------------------------------------------------
0000E510                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E510                            ; ---------------------------------------------------------------------------
0000E510                            Map_obj39:
0000E510                            	include "_maps\obj39.asm"
0000E510                            ; ---------------------------------------------------------------------------
0000E510                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E510                            ; ---------------------------------------------------------------------------
0000E510 0000                       		dc.w byte_CBAC-Map_obj39
0000E512 0000                       		dc.w byte_CBB7-Map_obj39
0000E514 0000                       		dc.w byte_CBC2-Map_obj39
0000E516 0000                       		dc.w byte_CBCD-Map_obj39
0000E518 02                         byte_CBAC:	dc.b 2
0000E519 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E51E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E523 02                         byte_CBB7:	dc.b 2
0000E524 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E529 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E52E 02                         byte_CBC2:	dc.b 2
0000E52F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E534 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E539 02                         byte_CBCD:	dc.b 2
0000E53A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E53F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E544                            		even
0000E544                            		even
0000E544                            
0000E544                            ; ---------------------------------------------------------------------------
0000E544                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E544                            ; ---------------------------------------------------------------------------
0000E544                            Map_obj3A:	
0000E544                            	include "_maps\obj3A_passed.asm"
0000E544                            ; --------------------------------------------------------------------------------
0000E544                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E544                            ; --------------------------------------------------------------------------------
0000E544                            
0000E544                            SME_4mFb8:	
0000E544 0000 0000                  		dc.w SME_4mFb8_10-SME_4mFb8, SME_4mFb8_3E-SME_4mFb8	
0000E548 0000 0000                  		dc.w SME_4mFb8_58-SME_4mFb8, SME_4mFb8_68-SME_4mFb8	
0000E54C 0000 0000                  		dc.w SME_4mFb8_78-SME_4mFb8, SME_4mFb8_88-SME_4mFb8	
0000E550 0000 0000                  		dc.w SME_4mFb8_CA-SME_4mFb8, SME_4mFb8_D5-SME_4mFb8	
0000E554 09                         SME_4mFb8_10:	dc.b 9	
0000E555 F805 000E B4               		dc.b $F8, 5, 0, $E, $B4	
0000E55A F805 0016 C4               		dc.b $F8, 5, 0, $16, $C4	
0000E55F F805 0022 D4               		dc.b $F8, 5, 0, $22, $D4	
0000E564 F805 0000 E4               		dc.b $F8, 5, 0, 0, $E4	
0000E569 F805 001A F4               		dc.b $F8, 5, 0, $1A, $F4	
0000E56E F805 0000 24               		dc.b $F8, 5, 0, 0, $24	
0000E573 F805 0012 34               		dc.b $F8, 5, 0, $12, $34	
0000E578 F805 001E 44               		dc.b $F8, 5, 0, $1E, $44	
0000E57D F805 0026 13               		dc.b $F8, 5, 0, $26, $13	
0000E582 05                         SME_4mFb8_3E:	dc.b 5	
0000E583 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	
0000E588 F801 000C F0               		dc.b $F8, 1, 0, $C, $F0	
0000E58D F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000E592 F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
0000E597 F805 001E 18               		dc.b $F8, 5, 0, $1E, $18	
0000E59C 03                         SME_4mFb8_58:	dc.b 3	
0000E59D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0	
0000E5A2 F809 0164 18               		dc.b $F8, 9, 1, $64, $18	
0000E5A7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30	
0000E5AC 03                         SME_4mFb8_68:	dc.b 3	
0000E5AD F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0	
0000E5B2 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0, $28	
0000E5B7 F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E5BC 03                         SME_4mFb8_78:	dc.b 3	
0000E5BD F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0	
0000E5C2 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8, $28	
0000E5C7 F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E5CC 0D                         SME_4mFb8_88:	dc.b $D	
0000E5CD E40C 001D F4               		dc.b $E4, $C, 0, $1D, $F4	
0000E5D2 E402 0021 14               		dc.b $E4, 2, 0, $21, $14	
0000E5D7 EC04 0024 EC               		dc.b $EC, 4, 0, $24, $EC	
0000E5DC F405 0026 E4               		dc.b $F4, 5, 0, $26, $E4	
0000E5E1 140C 181D EC               		dc.b $14, $C, $18, $1D, $EC	
0000E5E6 0402 1821 E4               		dc.b 4, 2, $18, $21, $E4	
0000E5EB 0C04 1824 04               		dc.b $C, 4, $18, $24, 4	
0000E5F0 FC05 1826 0C               		dc.b $FC, 5, $18, $26, $C	
0000E5F5 EC08 002A FC               		dc.b $EC, 8, 0, $2A, $FC	
0000E5FA F40C 0029 F4               		dc.b $F4, $C, 0, $29, $F4	
0000E5FF FC08 0029 F4               		dc.b $FC, 8, 0, $29, $F4	
0000E604 040C 0029 EC               		dc.b 4, $C, 0, $29, $EC	
0000E609 0C08 0029 EC               		dc.b $C, 8, 0, $29, $EC	
0000E60E 02                         SME_4mFb8_CA:	dc.b 2	
0000E60F 040C 0000 EC               		dc.b 4, $C, 0, 0, $EC	
0000E614 F406 0007 08               		dc.b $F4, 6, 0, 7, 8	
0000E619 02                         SME_4mFb8_D5:	dc.b 2	
0000E61A 040C 0000 EC               		dc.b 4, $C, 0, 0, $EC	
0000E61F F406 000D 08               		dc.b $F4, 6, 0, $D, 8	
0000E624                            		even
0000E624                            		even
0000E624                            ; ---------------------------------------------------------------------------
0000E624                            ; Sprite mappings - special stage results screen
0000E624                            ; ---------------------------------------------------------------------------
0000E624                            Map_obj7E:	
0000E624 0000                       		dc.w byte_CCAC-Map_obj7E
0000E626 0000                       		dc.w byte_CCEE-Map_obj7E
0000E628 0000                       		dc.w byte_CD0D-Map_obj7E
0000E62A 0000                       		dc.w byte_CB47-Map_obj7E
0000E62C 0000                       		dc.w byte_CD31-Map_obj7E
0000E62E 0000                       		dc.w byte_CD46-Map_obj7E
0000E630 0000                       		dc.w byte_CD5B-Map_obj7E
0000E632 0000                       		dc.w byte_CD6B-Map_obj7E
0000E634 0000                       		dc.w byte_CDA8-Map_obj7E
0000E636 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E637 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E63C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E641 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E646 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E64B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E650 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E655 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E65A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E65F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E664 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E669 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E66E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E673 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E678 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E679 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E67E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E683 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E688 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E68D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E692 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E697 07                         byte_CD0D:	dc.b 7
0000E698 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E69D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E6A2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E6A7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E6AC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E6B1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E6B6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E6BB 04                         byte_CD31:	dc.b 4
0000E6BC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E6C1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E6C6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E6CB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E6D0 04                         byte_CD46:	dc.b 4
0000E6D1 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E6D6 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E6DB F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E6E0 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E6E5 03                         byte_CD5B:	dc.b 3
0000E6E6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E6EB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E6F0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E6F5 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E6F6 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E6FB F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E700 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E705 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E70A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E70F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E714 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E719 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E71E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E723 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E728 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E72D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E732 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E733 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E738 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E73D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E742 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E747 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E74C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E751 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E756 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E75B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E760 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E765 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E76A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E76F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E774 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E779 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E77E                            		even
0000E77E 0D                         byte_CB47:	dc.b $D			; Oval
0000E77F E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E784 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E789 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E78E F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E793 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E798 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E79D 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E7A2 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E7A7 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E7AC F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E7B1 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E7B6 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E7BB 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E7C0 00                         		dc.b 0
0000E7C1                            ; ---------------------------------------------------------------------------
0000E7C1                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E7C1                            ; ---------------------------------------------------------------------------
0000E7C1                            Map_obj7F:
0000E7C1                            	include "_maps\obj7F.asm"
0000E7C1                            ; ---------------------------------------------------------------------------
0000E7C1                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E7C1                            ; ---------------------------------------------------------------------------
0000E7C1 0000                       		dc.w byte_CE02-Map_obj7F
0000E7C3 0000                       		dc.w byte_CE08-Map_obj7F
0000E7C5 0000                       		dc.w byte_CE0E-Map_obj7F
0000E7C7 0000                       		dc.w byte_CE14-Map_obj7F
0000E7C9 0000                       		dc.w byte_CE1A-Map_obj7F
0000E7CB 0000                       		dc.w byte_CE20-Map_obj7F
0000E7CD 0000                       		dc.w byte_CE26-Map_obj7F
0000E7CF 01                         byte_CE02:	dc.b 1
0000E7D0 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E7D5 01                         byte_CE08:	dc.b 1
0000E7D6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E7DB 01                         byte_CE0E:	dc.b 1
0000E7DC F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E7E1 01                         byte_CE14:	dc.b 1
0000E7E2 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E7E7 01                         byte_CE1A:	dc.b 1
0000E7E8 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E7ED 01                         byte_CE20:	dc.b 1
0000E7EE F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E7F3 00                         byte_CE26:	dc.b 0			; Blank frame
0000E7F4                            		even
0000E7F4                            		even
0000E7F4                            
0000E7F4                            ; ===========================================================================
0000E7F4                            ; ---------------------------------------------------------------------------
0000E7F4                            ; Object 36 - spikes
0000E7F4                            ; ---------------------------------------------------------------------------
0000E7F4                            
0000E7F4                            Obj36:					; XREF: Obj_Index
0000E7F4 7000                       		moveq	#0,d0
0000E7F6 1028 0024                  		move.b	$24(a0),d0
0000E7FA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E7FE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E802                            ; ===========================================================================
0000E802 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E804 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E806                            
0000E806 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E808 0110                       		dc.b 1,	$10
0000E80A 0204                       		dc.b 2,	4
0000E80C 031C                       		dc.b 3,	$1C
0000E80E 0440                       		dc.b 4,	$40
0000E810 0510                       		dc.b 5,	$10
0000E812                            ; ===========================================================================
0000E812                            
0000E812                            Obj36_Main:				; XREF: Obj36_Index
0000E812 5428 0024                  		addq.b	#2,$24(a0)
0000E816 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E81E 317C 051B 0002             		move.w	#$51B,2(a0)
0000E824 0028 0004 0001             		ori.b	#4,1(a0)
0000E82A 117C 0004 0018             		move.b	#4,$18(a0)
0000E830 1028 0028                  		move.b	$28(a0),d0
0000E834 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E83A 0240 00F0                  		andi.w	#$F0,d0
0000E83E 43F9 0000 E806             		lea	(Obj36_Var).l,a1
0000E844 E648                       		lsr.w	#3,d0
0000E846 D2C0                       		adda.w	d0,a1
0000E848 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E84C 1159 0019                  		move.b	(a1)+,$19(a0)
0000E850 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E856 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E85C                            
0000E85C                            Obj36_Solid:				; XREF: Obj36_Index
0000E85C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E860 343C 0004                  		move.w	#4,d2
0000E864 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E86A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E86C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E872 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E874 343C 0014                  		move.w	#$14,d2
0000E878                            
0000E878                            ; Spikes types $1x and $5x face	sideways
0000E878                            
0000E878                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E878 323C 001B                  		move.w	#$1B,d1
0000E87C 3602                       		move.w	d2,d3
0000E87E 5243                       		addq.w	#1,d3
0000E880 3828 0008                  		move.w	8(a0),d4
0000E884 6100 0000                  		bsr.w	SolidObject
0000E888 0828 0003 0022             		btst	#3,$22(a0)
0000E88E 6600                       		bne.s	Obj36_Display
0000E890 0C44 0001                  		cmpi.w	#1,d4
0000E894 6700                       		beq.s	Obj36_Hurt
0000E896 6000                       		bra.s	Obj36_Display
0000E898                            ; ===========================================================================
0000E898                            
0000E898                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E898                            
0000E898                            Obj36_Upright:				; XREF: Obj36_Solid
0000E898 7200                       		moveq	#0,d1
0000E89A 1228 0019                  		move.b	$19(a0),d1
0000E89E 0641 000B                  		addi.w	#$B,d1
0000E8A2 343C 0010                  		move.w	#$10,d2
0000E8A6 363C 0011                  		move.w	#$11,d3
0000E8AA 3828 0008                  		move.w	8(a0),d4
0000E8AE 6100 0000                  		bsr.w	SolidObject
0000E8B2 0828 0003 0022             		btst	#3,$22(a0)
0000E8B8 6600                       		bne.s	Obj36_Hurt
0000E8BA 4A44                       		tst.w	d4
0000E8BC 6A00                       		bpl.s	Obj36_Display
0000E8BE                            
0000E8BE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E8BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E8C2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E8C4 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000E8C8 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000E8CA 2F08                       		move.l	a0,-(sp)
0000E8CC 2448                       		movea.l	a0,a2
0000E8CE 41F8 D000                  		lea	($FFFFD000).w,a0
0000E8D2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E8D8 6400                       		bcc.s	loc_CF20
0000E8DA 2628 000C                  		move.l	$C(a0),d3
0000E8DE 3028 0012                  		move.w	$12(a0),d0
0000E8E2 48C0                       		ext.l	d0
0000E8E4 E180                       		asl.l	#8,d0
0000E8E6 9680                       		sub.l	d0,d3
0000E8E8 2143 000C                  		move.l	d3,$C(a0)
0000E8EC 4EB9 0000 0000             		jsr	HurtSonic
0000E8F2                            
0000E8F2                            loc_CF20:
0000E8F2 205F                       		movea.l	(sp)+,a0
0000E8F4                            
0000E8F4                            Obj36_Display:
0000E8F4 6100 0000                  		bsr.w	DisplaySprite
0000E8F8 3028 0030                  		move.w	$30(a0),d0
0000E8FC 0240 FF80                  		andi.w	#$FF80,d0
0000E900 3238 F700                  		move.w	($FFFFF700).w,d1
0000E904 0441 0080                  		subi.w	#$80,d1
0000E908 0241 FF80                  		andi.w	#$FF80,d1
0000E90C 9041                       		sub.w	d1,d0
0000E90E 0C40 0280                  		cmpi.w	#$280,d0
0000E912 6200 0000                  		bhi.w	DeleteObject
0000E916 4E75                       		rts	
0000E918                            ; ===========================================================================
0000E918                            
0000E918                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E918 7000                       		moveq	#0,d0
0000E91A 1028 0028                  		move.b	$28(a0),d0
0000E91E D040                       		add.w	d0,d0
0000E920 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E924 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E928                            ; ===========================================================================
0000E928 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E92A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E92C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E92E                            ; ===========================================================================
0000E92E                            
0000E92E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E92E 4E75                       		rts			; don't move the object
0000E930                            ; ===========================================================================
0000E930                            
0000E930                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E930 6100 0000                  		bsr.w	Obj36_Wait
0000E934 7000                       		moveq	#0,d0
0000E936 1028 0034                  		move.b	$34(a0),d0
0000E93A D068 0032                  		add.w	$32(a0),d0
0000E93E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E942 4E75                       		rts	
0000E944                            ; ===========================================================================
0000E944                            
0000E944                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E944 6100 0000                  		bsr.w	Obj36_Wait
0000E948 7000                       		moveq	#0,d0
0000E94A 1028 0034                  		move.b	$34(a0),d0
0000E94E D068 0030                  		add.w	$30(a0),d0
0000E952 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E956 4E75                       		rts	
0000E958                            ; ===========================================================================
0000E958                            
0000E958                            Obj36_Wait:
0000E958 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E95C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E95E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E962 6600                       		bne.s	locret_CFE6
0000E964 4A28 0001                  		tst.b	1(a0)
0000E968 6A00                       		bpl.s	locret_CFE6
0000E96A 303C 00B6                  		move.w	#$B6,d0
0000E96E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E974 6000                       		bra.s	locret_CFE6
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            loc_CFA4:
0000E976 4A68 0036                  		tst.w	$36(a0)
0000E97A 6700                       		beq.s	loc_CFC6
0000E97C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E982 6400                       		bcc.s	locret_CFE6
0000E984 317C 0000 0034             		move.w	#0,$34(a0)
0000E98A 317C 0000 0036             		move.w	#0,$36(a0)
0000E990 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E996 6000                       		bra.s	locret_CFE6
0000E998                            ; ===========================================================================
0000E998                            
0000E998                            loc_CFC6:
0000E998 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E99E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E9A4 6500                       		bcs.s	locret_CFE6
0000E9A6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E9AC 317C 0001 0036             		move.w	#1,$36(a0)
0000E9B2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E9B8                            
0000E9B8                            locret_CFE6:
0000E9B8 4E75                       		rts	
0000E9BA                            ; ===========================================================================
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Sprite mappings - spikes
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            Map_obj36:
0000E9BA                            	include "_maps\obj36.asm"
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Sprite mappings - spikes
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA 0000                       		dc.w byte_CFF4-Map_obj36
0000E9BC 0000                       		dc.w byte_D004-Map_obj36
0000E9BE 0000                       		dc.w byte_D014-Map_obj36
0000E9C0 0000                       		dc.w byte_D01A-Map_obj36
0000E9C2 0000                       		dc.w byte_D02A-Map_obj36
0000E9C4 0000                       		dc.w byte_D049-Map_obj36
0000E9C6 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E9C7 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E9CC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E9D1 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E9D6 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E9D7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E9DC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E9E1 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E9E6 01                         byte_D014:	dc.b 1			; 1 spike
0000E9E7 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E9EC 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E9ED F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E9F2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E9F7 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E9FC 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E9FD F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EA02 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EA07 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EA0C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EA11 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EA16 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EA1B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EA1C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EA22 00                         		even
0000EA22 00                         		even
0000EA22                            
0000EA22                            ; ===========================================================================
0000EA22                            ; ---------------------------------------------------------------------------
0000EA22                            ; Object 3B - purple rock (GHZ)
0000EA22                            ; ---------------------------------------------------------------------------
0000EA22                            
0000EA22                            Obj3B:					; XREF: Obj_Index
0000EA22 7000                       		moveq	#0,d0
0000EA24 1028 0024                  		move.b	$24(a0),d0
0000EA28 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EA2C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EA30                            ; ===========================================================================
0000EA30 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EA32 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EA34                            ; ===========================================================================
0000EA34                            
0000EA34                            Obj3B_Main:				; XREF: Obj3B_Index
0000EA34 5428 0024                  		addq.b	#2,$24(a0)
0000EA38 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EA40 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EA46 117C 0004 0001             		move.b	#4,1(a0)
0000EA4C 117C 0013 0019             		move.b	#$13,$19(a0)
0000EA52 117C 0004 0018             		move.b	#4,$18(a0)
0000EA58                            
0000EA58                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EA58 323C 001B                  		move.w	#$1B,d1
0000EA5C 343C 0010                  		move.w	#$10,d2
0000EA60 363C 0010                  		move.w	#$10,d3
0000EA64 3828 0008                  		move.w	8(a0),d4
0000EA68 6100 0000                  		bsr.w	SolidObject
0000EA6C 6100 0000                  		bsr.w	DisplaySprite
0000EA70 3028 0008                  		move.w	8(a0),d0
0000EA74 0240 FF80                  		andi.w	#$FF80,d0
0000EA78 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA7C 0441 0080                  		subi.w	#$80,d1
0000EA80 0241 FF80                  		andi.w	#$FF80,d1
0000EA84 9041                       		sub.w	d1,d0
0000EA86 0C40 0280                  		cmpi.w	#$280,d0
0000EA8A 6200 0000                  		bhi.w	DeleteObject
0000EA8E 4E75                       		rts	
0000EA90                            ; ===========================================================================
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            ; Object 49 - waterfall	sound effect (GHZ)
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            
0000EA90                            Obj49:					; XREF: Obj_Index
0000EA90 7000                       		moveq	#0,d0
0000EA92 1028 0024                  		move.b	$24(a0),d0
0000EA96 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EA9A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EA9E                            ; ===========================================================================
0000EA9E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EAA0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EAA2                            ; ===========================================================================
0000EAA2                            
0000EAA2                            Obj49_Main:				; XREF: Obj49_Index
0000EAA2 5428 0024                  		addq.b	#2,$24(a0)
0000EAA6 117C 0004 0001             		move.b	#4,1(a0)
0000EAAC                            
0000EAAC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EAAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EAB0 0200 003F                  		andi.b	#$3F,d0
0000EAB4 6600                       		bne.s	Obj49_ChkDel
0000EAB6 303C 00D0                  		move.w	#$D0,d0
0000EABA 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EAC0                            
0000EAC0                            Obj49_ChkDel:
0000EAC0 3028 0008                  		move.w	8(a0),d0
0000EAC4 0240 FF80                  		andi.w	#$FF80,d0
0000EAC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EACC 0441 0080                  		subi.w	#$80,d1
0000EAD0 0241 FF80                  		andi.w	#$FF80,d1
0000EAD4 9041                       		sub.w	d1,d0
0000EAD6 0C40 0280                  		cmpi.w	#$280,d0
0000EADA 6200 0000                  		bhi.w	DeleteObject
0000EADE 4E75                       		rts	
0000EAE0                            ; ===========================================================================
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0                            ; Sprite mappings - purple rock	(GHZ)
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0                            Map_obj3B:
0000EAE0                            	include "_maps\obj3B.asm"
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0                            ; Sprite mappings - purple rock	(GHZ)
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0 0000                       		dc.w byte_D110-Map_obj3B
0000EAE2 02                         byte_D110:	dc.b 2
0000EAE3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EAE8 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EAEE 00                         		even
0000EAEE 00                         		even
0000EAEE                            
0000EAEE                            ; ===========================================================================
0000EAEE                            ; ---------------------------------------------------------------------------
0000EAEE                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EAEE                            ; ---------------------------------------------------------------------------
0000EAEE                            
0000EAEE                            Obj3C:					; XREF: Obj_Index
0000EAEE 7000                       		moveq	#0,d0
0000EAF0 1028 0024                  		move.b	$24(a0),d0
0000EAF4 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000EAF8 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000EAFC 6000 0000                  		bra.w	MarkObjGone
0000EB00                            ; ===========================================================================
0000EB00 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000EB02 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000EB04 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000EB06                            ; ===========================================================================
0000EB06                            
0000EB06                            Obj3C_Main:				; XREF: Obj3C_Index
0000EB06 5428 0024                  		addq.b	#2,$24(a0)
0000EB0A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000EB12 317C 450F 0002             		move.w	#$450F,2(a0)
0000EB18 117C 0004 0001             		move.b	#4,1(a0)
0000EB1E 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB24 117C 0004 0018             		move.b	#4,$18(a0)
0000EB2A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000EB30                            
0000EB30                            Obj3C_Solid:				; XREF: Obj3C_Index
0000EB30 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000EB36 323C 001B                  		move.w	#$1B,d1
0000EB3A 343C 0020                  		move.w	#$20,d2
0000EB3E 363C 0020                  		move.w	#$20,d3
0000EB42 3828 0008                  		move.w	8(a0),d4
0000EB46 6100 0000                  		bsr.w	SolidObject
0000EB4A 0828 0005 0022             		btst	#5,$22(a0)
0000EB50 6600                       		bne.s	Obj3C_ChkRoll
0000EB52                            
0000EB52                            locret_D180:
0000EB52 4E75                       		rts	
0000EB54                            ; ===========================================================================
0000EB54                            
0000EB54                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000EB54                            	;	cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000EB54                            	;	bne.s	locret_D180	; if not, branch
0000EB54 3028 0030                  		move.w	$30(a0),d0
0000EB58 6A00                       		bpl.s	Obj3C_ChkSpeed
0000EB5A 4440                       		neg.w	d0
0000EB5C                            
0000EB5C                            Obj3C_ChkSpeed:
0000EB5C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EB60 65F0                       		bcs.s	locret_D180	; if not, branch
0000EB62 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000EB68 5869 0008                  		addq.w	#4,8(a1)
0000EB6C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000EB72 3028 0008                  		move.w	8(a0),d0
0000EB76 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000EB7A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000EB7C 5169 0008                  		subq.w	#8,8(a1)
0000EB80 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000EB86                            
0000EB86                            Obj3C_Smash:
0000EB86 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000EB8C 08A8 0005 0022             		bclr	#5,$22(a0)
0000EB92 08A9 0005 0022             		bclr	#5,$22(a1)
0000EB98 7207                       		moveq	#7,d1		; load 8 fragments
0000EB9A 343C 0070                  		move.w	#$70,d2
0000EB9E 6100                       		bsr.s	SmashObject
0000EBA0                            
0000EBA0                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000EBA0 6100 0000                  		bsr.w	SpeedToPos
0000EBA4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000EBAA 6100 0000                  		bsr.w	DisplaySprite
0000EBAE 4A28 0001                  		tst.b	1(a0)
0000EBB2 6A00 0000                  		bpl.w	DeleteObject
0000EBB6 4E75                       		rts	
0000EBB8                            
0000EBB8                            ; ---------------------------------------------------------------------------
0000EBB8                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000EBB8                            ; ---------------------------------------------------------------------------
0000EBB8                            
0000EBB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBB8                            
0000EBB8                            
0000EBB8                            SmashObject:				; XREF: Obj3C_Smash
0000EBB8 7000                       		moveq	#0,d0
0000EBBA 1028 001A                  		move.b	$1A(a0),d0
0000EBBE D040                       		add.w	d0,d0
0000EBC0 2668 0004                  		movea.l	4(a0),a3
0000EBC4 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000EBC8 524B                       		addq.w	#1,a3
0000EBCA 08E8 0005 0001             		bset	#5,1(a0)
0000EBD0 1810                       		move.b	0(a0),d4
0000EBD2 1A28 0001                  		move.b	1(a0),d5
0000EBD6 2248                       		movea.l	a0,a1
0000EBD8 6000                       		bra.s	Smash_LoadFrag
0000EBDA                            ; ===========================================================================
0000EBDA                            
0000EBDA                            Smash_Loop:
0000EBDA 6100 0000                  		bsr.w	SingleObjLoad
0000EBDE 6600                       		bne.s	Smash_PlaySnd
0000EBE0 5A4B                       		addq.w	#5,a3
0000EBE2                            
0000EBE2                            Smash_LoadFrag:				; XREF: SmashObject
0000EBE2 137C 0004 0024             		move.b	#4,$24(a1)
0000EBE8 1284                       		move.b	d4,0(a1)
0000EBEA 234B 0004                  		move.l	a3,4(a1)
0000EBEE 1345 0001                  		move.b	d5,1(a1)
0000EBF2 3368 0008 0008             		move.w	8(a0),8(a1)
0000EBF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EBFE 3368 0002 0002             		move.w	2(a0),2(a1)
0000EC04 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000EC0A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000EC10 335C 0010                  		move.w	(a4)+,$10(a1)
0000EC14 335C 0012                  		move.w	(a4)+,$12(a1)
0000EC18 B3C8                       		cmpa.l	a0,a1
0000EC1A 6400                       		bcc.s	loc_D268
0000EC1C 2F08                       		move.l	a0,-(sp)
0000EC1E 2049                       		movea.l	a1,a0
0000EC20 6100 0000                  		bsr.w	SpeedToPos
0000EC24 D568 0012                  		add.w	d2,$12(a0)
0000EC28 205F                       		movea.l	(sp)+,a0
0000EC2A 6100 0000                  		bsr.w	DisplaySprite2
0000EC2E                            
0000EC2E                            loc_D268:
0000EC2E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000EC32                            
0000EC32                            Smash_PlaySnd:
0000EC32 303C 00CB                  		move.w	#$CB,d0
0000EC36 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play smashing sound
0000EC3C                            ; End of function SmashObject
0000EC3C                            
0000EC3C                            ; ===========================================================================
0000EC3C                            ; Smashed block	fragment speeds
0000EC3C                            ;
0000EC3C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000EC40 0600 FF00                  		dc.w $600, $FF00
0000EC44 0600 0100                  		dc.w $600, $100
0000EC48 0400 0500                  		dc.w $400, $500
0000EC4C 0600 FA00                  		dc.w $600, $FA00
0000EC50 0800 FE00                  		dc.w $800, $FE00
0000EC54 0800 0200                  		dc.w $800, $200
0000EC58 0600 0600                  		dc.w $600, $600
0000EC5C                            
0000EC5C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000EC60 F800 FE00                  		dc.w $F800, $FE00
0000EC64 F800 0200                  		dc.w $F800, $200
0000EC68 FA00 0600                  		dc.w $FA00, $600
0000EC6C FC00 FB00                  		dc.w $FC00, $FB00
0000EC70 FA00 FF00                  		dc.w $FA00, $FF00
0000EC74 FA00 0100                  		dc.w $FA00, $100
0000EC78 FC00 0500                  		dc.w $FC00, $500
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            Map_obj3C:
0000EC7C                            	include "_maps\obj3C.asm"
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C 0000                       		dc.w byte_D2BC-Map_obj3C
0000EC7E 0000                       		dc.w byte_D2E5-Map_obj3C
0000EC80 0000                       		dc.w byte_D30E-Map_obj3C
0000EC82 08                         byte_D2BC:	dc.b 8
0000EC83 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000EC88 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000EC8D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000EC92 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000EC97 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EC9C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000ECA1 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000ECA6 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000ECAB 08                         byte_D2E5:	dc.b 8
0000ECAC E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000ECB1 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000ECB6 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000ECBB 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000ECC0 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000ECC5 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000ECCA 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000ECCF 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000ECD4 08                         byte_D30E:	dc.b 8
0000ECD5 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000ECDA F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000ECDF 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000ECE4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000ECE9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000ECEE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000ECF3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000ECF8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000ECFE 00                         		even
0000ECFE 00                         		even
0000ECFE                            
0000ECFE                            ; ---------------------------------------------------------------------------
0000ECFE                            ; Object code loading subroutine
0000ECFE                            ; ---------------------------------------------------------------------------
0000ECFE                            
0000ECFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECFE                            
0000ECFE                            
0000ECFE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000ECFE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000ED02 7E7F                       		moveq	#$7F,d7
0000ED04 7000                       		moveq	#0,d0
0000ED06 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ED0C 6400                       		bcc.s	loc_D362
0000ED0E                            
0000ED0E                            loc_D348:
0000ED0E 1010                       		move.b	(a0),d0		; load object number from RAM
0000ED10 6700                       		beq.s	loc_D358
0000ED12 D040                       		add.w	d0,d0
0000ED14 D040                       		add.w	d0,d0
0000ED16 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000ED1A 4E91                       		jsr	(a1)		; run the object's code
0000ED1C 7000                       		moveq	#0,d0
0000ED1E                            
0000ED1E                            loc_D358:
0000ED1E 41E8 0040                  		lea	$40(a0),a0	; next object
0000ED22 51CF FFEA                  		dbf	d7,loc_D348
0000ED26 4E75                       		rts	
0000ED28                            ; ===========================================================================
0000ED28                            
0000ED28                            loc_D362:
0000ED28 0C38 000A D024                     cmpi.b  #$A,($FFFFD024).w		      ; Has Sonic drowned?
0000ED2E 67DE                               beq.s   loc_D348                        ; If so, run objects a little longer
0000ED30 7E1F                       		moveq	#$1F,d7
0000ED32 61DA                       		bsr.s	loc_D348
0000ED34 7E5F                       		moveq	#$5F,d7
0000ED36                            
0000ED36                            loc_D368:
0000ED36 7000                       		moveq	#0,d0
0000ED38 1010                       		move.b	(a0),d0
0000ED3A 6700                       		beq.s	loc_D378
0000ED3C 4A28 0001                  		tst.b	1(a0)
0000ED40 6A00                       		bpl.s	loc_D378
0000ED42 6100 0000                  		bsr.w	DisplaySprite
0000ED46                            
0000ED46                            loc_D378:
0000ED46 41E8 0040                  		lea	$40(a0),a0
0000ED4A                            
0000ED4A                            loc_D37C:
0000ED4A 51CF FFEA                  		dbf	d7,loc_D368
0000ED4E 4E75                       		rts	
0000ED50                            ; End of function ObjectsLoad
0000ED50                            
0000ED50                            ; ===========================================================================
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            ; Object pointers
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            Obj_Index:
0000ED50                            	include "_inc\Object pointers.asm"
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            ; Object pointers
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
0000ED60 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000ED70 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000ED80 0000 0000 0000 BDA6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000ED90 0000 8A8C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EDA0 0000 90B2 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EDB0 0000 9900 0000 9968 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EDC0 0000 9FB2 0000 A2A0 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EDD0 0000 0000 0000 AF24 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EDE0 0000 B266 0000 B89E 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EDF0 0000 AB5C 0000 A088 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EE00 0000 C42E 0000 BA8C 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EE10 0000 CE00 0000 D4AE 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EE20 0000 C964 0000 E7F4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EE30 0000 DF82 0000 E03C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000EE40 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000EE50 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000EE60 0000 D11C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000EE70 0000 EA90 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000EE80 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000EE90 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000EEA0 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000EEB0 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000EEC0 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000EED0 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000EEE0 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000EEF0 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000EF00 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000EF10 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000EF20 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000EF30 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000EF40 0000 0000 0000 E27E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000EF50 0000 6682 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000EF60 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000EF70 0000 6D38 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EF70 0000 6D38 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EF80                            
0000EF80                            ; ---------------------------------------------------------------------------
0000EF80                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000EF80                            ; ---------------------------------------------------------------------------
0000EF80                            
0000EF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF80                            
0000EF80                            
0000EF80                            ObjectFall:
0000EF80 3028 0010                  		move.w	$10(a0),d0
0000EF84 48C0                       		ext.l	d0
0000EF86 E188                       		lsl.l	#8,d0
0000EF88 D1A8 0008                  		add.l	d0,8(a0)
0000EF8C 3028 0012                  		move.w	$12(a0),d0
0000EF90 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000EF96 48C0                       		ext.l	d0
0000EF98 E188                       		lsl.l	#8,d0
0000EF9A D1A8 000C                  		add.l	d0,$C(a0)
0000EF9E 4E75                       		rts	
0000EFA0                            ; End of function ObjectFall
0000EFA0                            
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0                            ; Subroutine translating object	speed to update	object position
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0                            
0000EFA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFA0                            
0000EFA0                            
0000EFA0                            SpeedToPos:
0000EFA0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000EFA4 48C0                       		ext.l	d0
0000EFA6 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000EFA8 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000EFAC 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000EFB0 48C0                       		ext.l	d0
0000EFB2 E188                       		lsl.l	#8,d0		; multiply by $100
0000EFB4 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000EFB8 4E75                       		rts	
0000EFBA                            ; End of function SpeedToPos
0000EFBA                            
0000EFBA                            ; ---------------------------------------------------------------------------
0000EFBA                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000EFBA                            ; ---------------------------------------------------------------------------
0000EFBA                            
0000EFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFBA                            
0000EFBA                            
0000EFBA                            DisplaySprite:
0000EFBA 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000EFBE 3028 0018                  		move.w	$18(a0),d0
0000EFC2 E248                       		lsr.w	#1,d0
0000EFC4 0240 0380                  		andi.w	#$380,d0
0000EFC8 D2C0                       		adda.w	d0,a1
0000EFCA 0C51 007E                  		cmpi.w	#$7E,(a1)
0000EFCE 6400                       		bcc.s	locret_D620
0000EFD0 5451                       		addq.w	#2,(a1)
0000EFD2 D2D1                       		adda.w	(a1),a1
0000EFD4 3288                       		move.w	a0,(a1)
0000EFD6                            
0000EFD6                            locret_D620:
0000EFD6 4E75                       		rts	
0000EFD8                            ; End of function DisplaySprite
0000EFD8                            
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            
0000EFD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFD8                            
0000EFD8                            
0000EFD8                            DisplaySprite2:
0000EFD8 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000EFDC 3029 0018                  		move.w	$18(a1),d0
0000EFE0 E248                       		lsr.w	#1,d0
0000EFE2 0240 0380                  		andi.w	#$380,d0
0000EFE6 D4C0                       		adda.w	d0,a2
0000EFE8 0C52 007E                  		cmpi.w	#$7E,(a2)
0000EFEC 6400                       		bcc.s	locret_D63E
0000EFEE 5452                       		addq.w	#2,(a2)
0000EFF0 D4D2                       		adda.w	(a2),a2
0000EFF2 3489                       		move.w	a1,(a2)
0000EFF4                            
0000EFF4                            locret_D63E:
0000EFF4 4E75                       		rts	
0000EFF6                            ; End of function DisplaySprite2
0000EFF6                            
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6                            ; Subroutine to	delete an object
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6                            
0000EFF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFF6                            
0000EFF6                            
0000EFF6                            DeleteObject:
0000EFF6 2248                       		movea.l	a0,a1
0000EFF8                            
0000EFF8                            DeleteObject2:
0000EFF8 7200                       		moveq	#0,d1
0000EFFA 700F                       		moveq	#$F,d0
0000EFFC                            
0000EFFC                            loc_D646:
0000EFFC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000EFFE 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F002 4E75                       		rts	
0000F004                            ; End of function DeleteObject
0000F004                            
0000F004                            ; ===========================================================================
0000F004 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F008 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F00C 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F010 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F014                            ; ---------------------------------------------------------------------------
0000F014                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F014                            ; ---------------------------------------------------------------------------
0000F014                            
0000F014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F014                            
0000F014                            
0000F014                            BuildSprites:				; XREF: TitleScreen; et al
0000F014 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000F018 7A00                       		moveq	#0,d5
0000F01A 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000F01E 7E07                       		moveq	#7,d7
0000F020                            
0000F020                            loc_D66A:
0000F020 4A54                       		tst.w	(a4)
0000F022 6700 0000                  		beq.w	loc_D72E
0000F026 7C02                       		moveq	#2,d6
0000F028                            
0000F028                            loc_D672:
0000F028 3074 6000                  		movea.w	(a4,d6.w),a0
0000F02C 4A10                       		tst.b	(a0)
0000F02E 6700 0000                  		beq.w	loc_D726
0000F032 08A8 0007 0001             		bclr	#7,1(a0)
0000F038 1028 0001                  		move.b	1(a0),d0
0000F03C 1800                       		move.b	d0,d4
0000F03E 0240 000C                  		andi.w	#$C,d0
0000F042 6700                       		beq.s	loc_D6DE
0000F044 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F048 7000                       		moveq	#0,d0
0000F04A 1028 0019                  		move.b	$19(a0),d0
0000F04E 3628 0008                  		move.w	8(a0),d3
0000F052 9651                       		sub.w	(a1),d3
0000F054 3203                       		move.w	d3,d1
0000F056 D240                       		add.w	d0,d1
0000F058 6B00 0000                  		bmi.w	loc_D726
0000F05C 3203                       		move.w	d3,d1
0000F05E 9240                       		sub.w	d0,d1
0000F060 0C41 0140                  		cmpi.w	#$140,d1
0000F064 6C00                       		bge.s	loc_D726
0000F066 0643 0080                  		addi.w	#$80,d3
0000F06A 0804 0004                  		btst	#4,d4
0000F06E 6700                       		beq.s	loc_D6E8
0000F070 7000                       		moveq	#0,d0
0000F072 1028 0016                  		move.b	$16(a0),d0
0000F076 3428 000C                  		move.w	$C(a0),d2
0000F07A 9469 0004                  		sub.w	4(a1),d2
0000F07E 3202                       		move.w	d2,d1
0000F080 D240                       		add.w	d0,d1
0000F082 6B00                       		bmi.s	loc_D726
0000F084 3202                       		move.w	d2,d1
0000F086 9240                       		sub.w	d0,d1
0000F088 0C41 00E0                  		cmpi.w	#$E0,d1
0000F08C 6C00                       		bge.s	loc_D726
0000F08E 0642 0080                  		addi.w	#$80,d2
0000F092 6000                       		bra.s	loc_D700
0000F094                            ; ===========================================================================
0000F094                            
0000F094                            loc_D6DE:
0000F094 3428 000A                  		move.w	$A(a0),d2
0000F098 3628 0008                  		move.w	8(a0),d3
0000F09C 6000                       		bra.s	loc_D700
0000F09E                            ; ===========================================================================
0000F09E                            
0000F09E                            loc_D6E8:
0000F09E 3428 000C                  		move.w	$C(a0),d2
0000F0A2 9469 0004                  		sub.w	4(a1),d2
0000F0A6 0642 0080                  		addi.w	#$80,d2
0000F0AA 0C42 0060                  		cmpi.w	#$60,d2
0000F0AE 6500                       		bcs.s	loc_D726
0000F0B0 0C42 0180                  		cmpi.w	#$180,d2
0000F0B4 6400                       		bcc.s	loc_D726
0000F0B6                            
0000F0B6                            loc_D700:
0000F0B6 2268 0004                  		movea.l	4(a0),a1
0000F0BA 7200                       		moveq	#0,d1
0000F0BC 0804 0005                  		btst	#5,d4
0000F0C0 6600                       		bne.s	loc_D71C
0000F0C2 1228 001A                  		move.b	$1A(a0),d1
0000F0C6 D201                       		add.b	d1,d1
0000F0C8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F0CC 1219                       		move.b	(a1)+,d1
0000F0CE 5301                       		subq.b	#1,d1
0000F0D0 6B00                       		bmi.s	loc_D720
0000F0D2                            
0000F0D2                            loc_D71C:
0000F0D2 6100 0000                  		bsr.w	sub_D750
0000F0D6                            
0000F0D6                            loc_D720:
0000F0D6 08E8 0007 0001             		bset	#7,1(a0)
0000F0DC                            
0000F0DC                            loc_D726:
0000F0DC 5446                       		addq.w	#2,d6
0000F0DE 5554                       		subq.w	#2,(a4)
0000F0E0 6600 FF46                  		bne.w	loc_D672
0000F0E4                            
0000F0E4                            loc_D72E:
0000F0E4 49EC 0080                  		lea	$80(a4),a4
0000F0E8 51CF FF36                  		dbf	d7,loc_D66A
0000F0EC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F0F0 0C05 0050                  		cmpi.b	#$50,d5
0000F0F4 6700                       		beq.s	loc_D748
0000F0F6 24BC 0000 0000             		move.l	#0,(a2)
0000F0FC 4E75                       		rts	
0000F0FE                            ; ===========================================================================
0000F0FE                            
0000F0FE                            loc_D748:
0000F0FE 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F104 4E75                       		rts	
0000F106                            ; End of function BuildSprites
0000F106                            
0000F106                            
0000F106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F106                            
0000F106                            
0000F106                            sub_D750:				; XREF: BuildSprites
0000F106 3668 0002                  		movea.w	2(a0),a3
0000F10A 0804 0000                  		btst	#0,d4
0000F10E 6600                       		bne.s	loc_D796
0000F110 0804 0001                  		btst	#1,d4
0000F114 6600 0000                  		bne.w	loc_D7E4
0000F118                            ; End of function sub_D750
0000F118                            
0000F118                            
0000F118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F118                            
0000F118                            
0000F118                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F118 0C05 0050                  		cmpi.b	#$50,d5
0000F11C 6700                       		beq.s	locret_D794
0000F11E 1019                       		move.b	(a1)+,d0
0000F120 4880                       		ext.w	d0
0000F122 D042                       		add.w	d2,d0
0000F124 34C0                       		move.w	d0,(a2)+
0000F126 14D9                       		move.b	(a1)+,(a2)+
0000F128 5205                       		addq.b	#1,d5
0000F12A 14C5                       		move.b	d5,(a2)+
0000F12C 1019                       		move.b	(a1)+,d0
0000F12E E148                       		lsl.w	#8,d0
0000F130 1019                       		move.b	(a1)+,d0
0000F132 D04B                       		add.w	a3,d0
0000F134 34C0                       		move.w	d0,(a2)+
0000F136 1019                       		move.b	(a1)+,d0
0000F138 4880                       		ext.w	d0
0000F13A D043                       		add.w	d3,d0
0000F13C 0240 01FF                  		andi.w	#$1FF,d0
0000F140 6600                       		bne.s	loc_D78E
0000F142 5240                       		addq.w	#1,d0
0000F144                            
0000F144                            loc_D78E:
0000F144 34C0                       		move.w	d0,(a2)+
0000F146 51C9 FFD0                  		dbf	d1,sub_D762
0000F14A                            
0000F14A                            locret_D794:
0000F14A 4E75                       		rts	
0000F14C                            ; End of function sub_D762
0000F14C                            
0000F14C                            ; ===========================================================================
0000F14C                            
0000F14C                            loc_D796:
0000F14C 0804 0001                  		btst	#1,d4
0000F150 6600 0000                  		bne.w	loc_D82A
0000F154                            
0000F154                            loc_D79E:
0000F154 0C05 0050                  		cmpi.b	#$50,d5
0000F158 6700                       		beq.s	locret_D7E2
0000F15A 1019                       		move.b	(a1)+,d0
0000F15C 4880                       		ext.w	d0
0000F15E D042                       		add.w	d2,d0
0000F160 34C0                       		move.w	d0,(a2)+
0000F162 1819                       		move.b	(a1)+,d4
0000F164 14C4                       		move.b	d4,(a2)+
0000F166 5205                       		addq.b	#1,d5
0000F168 14C5                       		move.b	d5,(a2)+
0000F16A 1019                       		move.b	(a1)+,d0
0000F16C E148                       		lsl.w	#8,d0
0000F16E 1019                       		move.b	(a1)+,d0
0000F170 D04B                       		add.w	a3,d0
0000F172 0A40 0800                  		eori.w	#$800,d0
0000F176 34C0                       		move.w	d0,(a2)+
0000F178 1019                       		move.b	(a1)+,d0
0000F17A 4880                       		ext.w	d0
0000F17C 4440                       		neg.w	d0
0000F17E D804                       		add.b	d4,d4
0000F180 0244 0018                  		andi.w	#$18,d4
0000F184 5044                       		addq.w	#8,d4
0000F186 9044                       		sub.w	d4,d0
0000F188 D043                       		add.w	d3,d0
0000F18A 0240 01FF                  		andi.w	#$1FF,d0
0000F18E 6600                       		bne.s	loc_D7DC
0000F190 5240                       		addq.w	#1,d0
0000F192                            
0000F192                            loc_D7DC:
0000F192 34C0                       		move.w	d0,(a2)+
0000F194 51C9 FFBE                  		dbf	d1,loc_D79E
0000F198                            
0000F198                            locret_D7E2:
0000F198 4E75                       		rts	
0000F19A                            ; ===========================================================================
0000F19A                            
0000F19A                            loc_D7E4:				; XREF: sub_D750
0000F19A 0C05 0050                  		cmpi.b	#$50,d5
0000F19E 6700                       		beq.s	locret_D828
0000F1A0 1019                       		move.b	(a1)+,d0
0000F1A2 1811                       		move.b	(a1),d4
0000F1A4 4880                       		ext.w	d0
0000F1A6 4440                       		neg.w	d0
0000F1A8 E70C                       		lsl.b	#3,d4
0000F1AA 0244 0018                  		andi.w	#$18,d4
0000F1AE 5044                       		addq.w	#8,d4
0000F1B0 9044                       		sub.w	d4,d0
0000F1B2 D042                       		add.w	d2,d0
0000F1B4 34C0                       		move.w	d0,(a2)+
0000F1B6 14D9                       		move.b	(a1)+,(a2)+
0000F1B8 5205                       		addq.b	#1,d5
0000F1BA 14C5                       		move.b	d5,(a2)+
0000F1BC 1019                       		move.b	(a1)+,d0
0000F1BE E148                       		lsl.w	#8,d0
0000F1C0 1019                       		move.b	(a1)+,d0
0000F1C2 D04B                       		add.w	a3,d0
0000F1C4 0A40 1000                  		eori.w	#$1000,d0
0000F1C8 34C0                       		move.w	d0,(a2)+
0000F1CA 1019                       		move.b	(a1)+,d0
0000F1CC 4880                       		ext.w	d0
0000F1CE D043                       		add.w	d3,d0
0000F1D0 0240 01FF                  		andi.w	#$1FF,d0
0000F1D4 6600                       		bne.s	loc_D822
0000F1D6 5240                       		addq.w	#1,d0
0000F1D8                            
0000F1D8                            loc_D822:
0000F1D8 34C0                       		move.w	d0,(a2)+
0000F1DA 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F1DE                            
0000F1DE                            locret_D828:
0000F1DE 4E75                       		rts	
0000F1E0                            ; ===========================================================================
0000F1E0                            
0000F1E0                            loc_D82A:
0000F1E0 0C05 0050                  		cmpi.b	#$50,d5
0000F1E4 6700                       		beq.s	locret_D87C
0000F1E6 1019                       		move.b	(a1)+,d0
0000F1E8 1811                       		move.b	(a1),d4
0000F1EA 4880                       		ext.w	d0
0000F1EC 4440                       		neg.w	d0
0000F1EE E70C                       		lsl.b	#3,d4
0000F1F0 0244 0018                  		andi.w	#$18,d4
0000F1F4 5044                       		addq.w	#8,d4
0000F1F6 9044                       		sub.w	d4,d0
0000F1F8 D042                       		add.w	d2,d0
0000F1FA 34C0                       		move.w	d0,(a2)+
0000F1FC 1819                       		move.b	(a1)+,d4
0000F1FE 14C4                       		move.b	d4,(a2)+
0000F200 5205                       		addq.b	#1,d5
0000F202 14C5                       		move.b	d5,(a2)+
0000F204 1019                       		move.b	(a1)+,d0
0000F206 E148                       		lsl.w	#8,d0
0000F208 1019                       		move.b	(a1)+,d0
0000F20A D04B                       		add.w	a3,d0
0000F20C 0A40 1800                  		eori.w	#$1800,d0
0000F210 34C0                       		move.w	d0,(a2)+
0000F212 1019                       		move.b	(a1)+,d0
0000F214 4880                       		ext.w	d0
0000F216 4440                       		neg.w	d0
0000F218 D804                       		add.b	d4,d4
0000F21A 0244 0018                  		andi.w	#$18,d4
0000F21E 5044                       		addq.w	#8,d4
0000F220 9044                       		sub.w	d4,d0
0000F222 D043                       		add.w	d3,d0
0000F224 0240 01FF                  		andi.w	#$1FF,d0
0000F228 6600                       		bne.s	loc_D876
0000F22A 5240                       		addq.w	#1,d0
0000F22C                            
0000F22C                            loc_D876:
0000F22C 34C0                       		move.w	d0,(a2)+
0000F22E 51C9 FFB0                  		dbf	d1,loc_D82A
0000F232                            
0000F232                            locret_D87C:
0000F232 4E75                       		rts	
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            ; Subroutine to	check if an object is on the screen
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            
0000F234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F234                            
0000F234                            
0000F234                            ChkObjOnScreen:
0000F234 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F238 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F23C 6B00                       		bmi.s	NotOnScreen
0000F23E 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F242 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F244                            
0000F244 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F248 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F24C 6B00                       		bmi.s	NotOnScreen
0000F24E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F252 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F254                            
0000F254 7000                       		moveq	#0,d0		; set flag to 0
0000F256 4E75                       		rts	
0000F258                            ; ===========================================================================
0000F258                            
0000F258                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F258 7001                       		moveq	#1,d0		; set flag to 1
0000F25A 4E75                       		rts	
0000F25C                            ; End of function ChkObjOnScreen
0000F25C                            
0000F25C                            
0000F25C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F25C                            
0000F25C                            
0000F25C                            ChkObjOnScreen2:
0000F25C 7200                       		moveq	#0,d1
0000F25E 1228 0019                  		move.b	$19(a0),d1
0000F262 3028 0008                  		move.w	8(a0),d0
0000F266 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F26A D041                       		add.w	d1,d0
0000F26C 6B00                       		bmi.s	NotOnScreen2
0000F26E D241                       		add.w	d1,d1
0000F270 9041                       		sub.w	d1,d0
0000F272 0C40 0140                  		cmpi.w	#320,d0
0000F276 6C00                       		bge.s	NotOnScreen2
0000F278                            
0000F278 3228 000C                  		move.w	$C(a0),d1
0000F27C 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F280 6B00                       		bmi.s	NotOnScreen2
0000F282 0C41 00E0                  		cmpi.w	#224,d1
0000F286 6C00                       		bge.s	NotOnScreen2
0000F288                            
0000F288 7000                       		moveq	#0,d0
0000F28A 4E75                       		rts	
0000F28C                            ; ===========================================================================
0000F28C                            
0000F28C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F28C 7001                       		moveq	#1,d0
0000F28E 4E75                       		rts	
0000F290                            ; End of function ChkObjOnScreen2
0000F290                            
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            ; Subroutine to	load a level's objects
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            
0000F290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F290                            
0000F290                            
0000F290                            ObjPosLoad:				; XREF: Level; et al
0000F290 7000                       		moveq	#0,d0
0000F292 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000F296 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F29A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F29E                            ; End of function ObjPosLoad
0000F29E                            
0000F29E                            ; ===========================================================================
0000F29E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F2A0 0000                       		dc.w OPL_Next-OPL_Index
0000F2A2                            ; ===========================================================================
0000F2A2                            
0000F2A2                            OPL_Main:				; XREF: OPL_Index
0000F2A2 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000F2A6 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000F2AA ED08                       		lsl.b	#6,d0
0000F2AC E848                       		lsr.w	#4,d0
0000F2AE 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F2B4 2248                       		movea.l	a0,a1
0000F2B6 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F2BA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F2BE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F2C2 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F2C6 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F2CA 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F2CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2D2 34FC 0101                  		move.w	#$101,(a2)+
0000F2D6 303C 005E                  		move.w	#$5E,d0
0000F2DA                            
0000F2DA                            OPL_ClrList:
0000F2DA 429A                       		clr.l	(a2)+
0000F2DC 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F2E0                            
0000F2E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2E4 7400                       		moveq	#0,d2
0000F2E6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F2EA 0446 0080                  		subi.w	#$80,d6
0000F2EE 6400                       		bcc.s	loc_D93C
0000F2F0 7C00                       		moveq	#0,d6
0000F2F2                            
0000F2F2                            loc_D93C:
0000F2F2 0246 FF80                  		andi.w	#$FF80,d6
0000F2F6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F2FA                            
0000F2FA                            loc_D944:
0000F2FA BC50                       		cmp.w	(a0),d6
0000F2FC 6300                       		bls.s	loc_D956
0000F2FE 4A28 0004                  		tst.b	4(a0)
0000F302 6A00                       		bpl.s	loc_D952
0000F304 1412                       		move.b	(a2),d2
0000F306 5212                       		addq.b	#1,(a2)
0000F308                            
0000F308                            loc_D952:
0000F308 5C48                       		addq.w	#6,a0
0000F30A 60EE                       		bra.s	loc_D944
0000F30C                            ; ===========================================================================
0000F30C                            
0000F30C                            loc_D956:
0000F30C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F310 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F314 0446 0080                  		subi.w	#$80,d6
0000F318 6500                       		bcs.s	loc_D976
0000F31A                            
0000F31A                            loc_D964:
0000F31A BC50                       		cmp.w	(a0),d6
0000F31C 6300                       		bls.s	loc_D976
0000F31E 4A28 0004                  		tst.b	4(a0)
0000F322 6A00                       		bpl.s	loc_D972
0000F324 522A 0001                  		addq.b	#1,1(a2)
0000F328                            
0000F328                            loc_D972:
0000F328 5C48                       		addq.w	#6,a0
0000F32A 60EE                       		bra.s	loc_D964
0000F32C                            ; ===========================================================================
0000F32C                            
0000F32C                            loc_D976:
0000F32C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F330 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F336                            
0000F336                            OPL_Next:				; XREF: OPL_Index
0000F336 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F33A 7400                       		moveq	#0,d2
0000F33C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F340 0246 FF80                  		andi.w	#$FF80,d6
0000F344 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F348 6700 0000                  		beq.w	locret_DA3A
0000F34C 6C00                       		bge.s	loc_D9F6
0000F34E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F352 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F356 0446 0080                  		subi.w	#$80,d6
0000F35A 6500                       		bcs.s	loc_D9D2
0000F35C                            
0000F35C                            loc_D9A6:
0000F35C BC68 FFFA                  		cmp.w	-6(a0),d6
0000F360 6C00                       		bge.s	loc_D9D2
0000F362 5D48                       		subq.w	#6,a0
0000F364 4A28 0004                  		tst.b	4(a0)
0000F368 6A00                       		bpl.s	loc_D9BC
0000F36A 532A 0001                  		subq.b	#1,1(a2)
0000F36E 142A 0001                  		move.b	1(a2),d2
0000F372                            
0000F372                            loc_D9BC:
0000F372 6100 0000                  		bsr.w	loc_DA3C
0000F376 6600                       		bne.s	loc_D9C6
0000F378 5D48                       		subq.w	#6,a0
0000F37A 60E0                       		bra.s	loc_D9A6
0000F37C                            ; ===========================================================================
0000F37C                            
0000F37C                            loc_D9C6:
0000F37C 4A28 0004                  		tst.b	4(a0)
0000F380 6A00                       		bpl.s	loc_D9D0
0000F382 522A 0001                  		addq.b	#1,1(a2)
0000F386                            
0000F386                            loc_D9D0:
0000F386 5C48                       		addq.w	#6,a0
0000F388                            
0000F388                            loc_D9D2:
0000F388 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F38C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F390 0646 0300                  		addi.w	#$300,d6
0000F394                            
0000F394                            loc_D9DE:
0000F394 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F398 6E00                       		bgt.s	loc_D9F0
0000F39A 4A28 FFFE                  		tst.b	-2(a0)
0000F39E 6A00                       		bpl.s	loc_D9EC
0000F3A0 5312                       		subq.b	#1,(a2)
0000F3A2                            
0000F3A2                            loc_D9EC:
0000F3A2 5D48                       		subq.w	#6,a0
0000F3A4 60EE                       		bra.s	loc_D9DE
0000F3A6                            ; ===========================================================================
0000F3A6                            
0000F3A6                            loc_D9F0:
0000F3A6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F3AA 4E75                       		rts	
0000F3AC                            ; ===========================================================================
0000F3AC                            
0000F3AC                            loc_D9F6:
0000F3AC 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F3B0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F3B4 0646 0280                  		addi.w	#$280,d6
0000F3B8                            
0000F3B8                            loc_DA02:
0000F3B8 BC50                       		cmp.w	(a0),d6
0000F3BA 6300                       		bls.s	loc_DA16
0000F3BC 4A28 0004                  		tst.b	4(a0)
0000F3C0 6A00                       		bpl.s	loc_DA10
0000F3C2 1412                       		move.b	(a2),d2
0000F3C4 5212                       		addq.b	#1,(a2)
0000F3C6                            
0000F3C6                            loc_DA10:
0000F3C6 6100 0000                  		bsr.w	loc_DA3C
0000F3CA 67EC                       		beq.s	loc_DA02
0000F3CC 4A28 0004                  		tst.b	$04(a0)			; MJ: was this object a remember state?
0000F3D0 6A00                       		bpl.s	loc_DA16		; MJ: if not, branch
0000F3D2 5312                       		subq.b	#$01,(a2)		; MJ: move right counter back
0000F3D4                            
0000F3D4                            loc_DA16:
0000F3D4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F3D8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F3DC 0446 0300                  		subi.w	#$300,d6
0000F3E0 6500                       		bcs.s	loc_DA36
0000F3E2                            
0000F3E2                            loc_DA24:
0000F3E2 BC50                       		cmp.w	(a0),d6
0000F3E4 6300                       		bls.s	loc_DA36
0000F3E6 4A28 0004                  		tst.b	4(a0)
0000F3EA 6A00                       		bpl.s	loc_DA32
0000F3EC 522A 0001                  		addq.b	#1,1(a2)
0000F3F0                            
0000F3F0                            loc_DA32:
0000F3F0 5C48                       		addq.w	#6,a0
0000F3F2 60EE                       		bra.s	loc_DA24
0000F3F4                            ; ===========================================================================
0000F3F4                            
0000F3F4                            loc_DA36:
0000F3F4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F3F8                            
0000F3F8                            locret_DA3A:
0000F3F8 4E75                       		rts	
0000F3FA                            ; ===========================================================================
0000F3FA                            
0000F3FA                            loc_DA3C:
0000F3FA 4A28 0004                  		tst.b	4(a0)
0000F3FE 6A00                       		bpl.s	OPL_MakeItem
0000F400 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000F406 6700                       		beq.s	OPL_MakeItem
0000F408 5C48                       		addq.w	#6,a0
0000F40A 7000                       		moveq	#0,d0
0000F40C 4E75                       		rts	
0000F40E                            ; ===========================================================================
0000F40E                            
0000F40E                            OPL_MakeItem:
0000F40E 6100 0000                  		bsr.w	SingleObjLoad
0000F412 6600                       		bne.s	locret_DA8A
0000F414 3358 0008                  		move.w	(a0)+,8(a1)
0000F418 3018                       		move.w	(a0)+,d0
0000F41A 3200                       		move.w	d0,d1
0000F41C 0240 0FFF                  		andi.w	#$FFF,d0
0000F420 3340 000C                  		move.w	d0,$C(a1)
0000F424 E559                       		rol.w	#2,d1
0000F426 0201 0003                  		andi.b	#3,d1
0000F42A 1341 0001                  		move.b	d1,1(a1)
0000F42E 1341 0022                  		move.b	d1,$22(a1)
0000F432 1018                       		move.b	(a0)+,d0
0000F434 6A00                       		bpl.s	loc_DA80
0000F436 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)		; MJ: set as removed
0000F43C 0200 007F                  		andi.b	#$7F,d0
0000F440 1342 0023                  		move.b	d2,$23(a1)
0000F444                            
0000F444                            loc_DA80:
0000F444 1280                       		move.b	d0,0(a1)
0000F446 1358 0028                  		move.b	(a0)+,$28(a1)
0000F44A 7000                       		moveq	#0,d0
0000F44C                            
0000F44C                            locret_DA8A:
0000F44C 4E75                       		rts	
0000F44E                            ; ---------------------------------------------------------------------------
0000F44E                            ; Single object	loading	subroutine
0000F44E                            ; ---------------------------------------------------------------------------
0000F44E                            
0000F44E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F44E                            
0000F44E                            
0000F44E                            SingleObjLoad:
0000F44E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F452 303C 005F                  		move.w	#$5F,d0
0000F456                            
0000F456                            loc_DA94:
0000F456 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F458 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F45A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F45E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F462                            
0000F462                            locret_DAA0:
0000F462 4E75                       		rts	
0000F464                            ; End of function SingleObjLoad
0000F464                            
0000F464                            
0000F464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F464                            
0000F464                            
0000F464                            SingleObjLoad2:
0000F464 2248                       		movea.l	a0,a1
0000F466 303C F000                  		move.w	#-$1000,d0
0000F46A 9048                       		sub.w	a0,d0
0000F46C EC48                       		lsr.w	#6,d0
0000F46E 5340                       		subq.w	#1,d0
0000F470 6500                       		bcs.s	locret_DABC
0000F472                            
0000F472                            loc_DAB0:
0000F472 4A11                       		tst.b	(a1)
0000F474 6700                       		beq.s	locret_DABC
0000F476 43E9 0040                  		lea	$40(a1),a1
0000F47A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F47E                            
0000F47E                            locret_DABC:
0000F47E 4E75                       		rts	
0000F480                            ; End of function SingleObjLoad2
0000F480                            
0000F480                            ; ===========================================================================
0000F480                            ; ---------------------------------------------------------------------------
0000F480                            ; Object 41 - springs
0000F480                            ; ---------------------------------------------------------------------------
0000F480                            
0000F480                            Obj41:					; XREF: Obj_Index
0000F480 7000                       		moveq	#0,d0
0000F482 1028 0024                  		move.b	$24(a0),d0
0000F486 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F48A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F48E 6100 FB2A                  		bsr.w	DisplaySprite
0000F492 3028 0008                  		move.w	8(a0),d0
0000F496 0240 FF80                  		andi.w	#$FF80,d0
0000F49A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F49E 0441 0080                  		subi.w	#$80,d1
0000F4A2 0241 FF80                  		andi.w	#$FF80,d1
0000F4A6 9041                       		sub.w	d1,d0
0000F4A8 0C40 0280                  		cmpi.w	#$280,d0
0000F4AC 6200 FB48                  		bhi.w	DeleteObject
0000F4B0 4E75                       		rts	
0000F4B2                            ; ===========================================================================
0000F4B2 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F4B4 0000                       		dc.w Obj41_Up-Obj41_Index
0000F4B6 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F4B8 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F4BA 0000                       		dc.w Obj41_LR-Obj41_Index
0000F4BC 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F4BE 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F4C0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F4C2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F4C4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F4C6                            
0000F4C6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F4C8 F600                       		dc.w -$A00		; power	of yellow spring
0000F4CA                            ; ===========================================================================
0000F4CA                            
0000F4CA                            Obj41_Main:				; XREF: Obj41_Index
0000F4CA 5428 0024                  		addq.b	#2,$24(a0)
0000F4CE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F4D6 317C 0523 0002             		move.w	#$523,2(a0)
0000F4DC 0028 0004 0001             		ori.b	#4,1(a0)
0000F4E2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4E8 117C 0004 0018             		move.b	#4,$18(a0)
0000F4EE 1028 0028                  		move.b	$28(a0),d0
0000F4F2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F4F6 6700                       		beq.s	loc_DB54	; if not, branch
0000F4F8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F4FE 117C 0001 001C             		move.b	#1,$1C(a0)
0000F504 117C 0003 001A             		move.b	#3,$1A(a0)
0000F50A 317C 0533 0002             		move.w	#$533,2(a0)
0000F510 117C 0008 0019             		move.b	#8,$19(a0)
0000F516                            
0000F516                            loc_DB54:
0000F516 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F51A 6700                       		beq.s	loc_DB66	; if not, branch
0000F51C 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F522 08E8 0001 0022             		bset	#1,$22(a0)
0000F528                            
0000F528                            loc_DB66:
0000F528 0800 0001                  		btst	#1,d0
0000F52C 6700                       		beq.s	loc_DB72
0000F52E 08E8 0005 0002             		bset	#5,2(a0)
0000F534                            
0000F534                            loc_DB72:
0000F534 0240 000F                  		andi.w	#$F,d0
0000F538 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F53E 4E75                       		rts	
0000F540                            ; ===========================================================================
0000F540                            
0000F540                            Obj41_Up:				; XREF: Obj41_Index
0000F540 323C 001B                  		move.w	#$1B,d1
0000F544 343C 0008                  		move.w	#8,d2
0000F548 363C 0010                  		move.w	#$10,d3
0000F54C 3828 0008                  		move.w	8(a0),d4
0000F550 6100 0000                  		bsr.w	SolidObject
0000F554 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F558 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F55A 4E75                       		rts	
0000F55C                            ; ===========================================================================
0000F55C                            
0000F55C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F55C 5428 0024                  		addq.b	#2,$24(a0)
0000F560 5069 000C                  		addq.w	#8,$C(a1)
0000F564 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F56A 08E9 0001 0022             		bset	#1,$22(a1)
0000F570 08A9 0003 0022             		bclr	#3,$22(a1)
0000F576 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F57C 137C 0002 0024             		move.b	#2,$24(a1)
0000F582 08A8 0003 0022             		bclr	#3,$22(a0)
0000F588 4228 0025                  		clr.b	$25(a0)
0000F58C 303C 00CC                  		move.w	#$CC,d0
0000F590 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play spring sound
0000F596                            
0000F596                            Obj41_AniUp:				; XREF: Obj41_Index
0000F596 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F59C 6000 C904                  		bra.w	AnimateSprite
0000F5A0                            ; ===========================================================================
0000F5A0                            
0000F5A0                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F5A0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F5A6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F5AA 4E75                       		rts	
0000F5AC                            ; ===========================================================================
0000F5AC                            
0000F5AC                            Obj41_LR:				; XREF: Obj41_Index
0000F5AC 323C 0013                  		move.w	#$13,d1
0000F5B0 343C 000E                  		move.w	#$E,d2
0000F5B4 363C 000F                  		move.w	#$F,d3
0000F5B8 3828 0008                  		move.w	8(a0),d4
0000F5BC 6100 0000                  		bsr.w	SolidObject
0000F5C0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F5C6 6600                       		bne.s	loc_DC0C
0000F5C8 117C 0008 0024             		move.b	#8,$24(a0)
0000F5CE                            
0000F5CE                            loc_DC0C:
0000F5CE 0828 0005 0022             		btst	#5,$22(a0)
0000F5D4 6600                       		bne.s	Obj41_BounceLR
0000F5D6 4E75                       		rts	
0000F5D8                            ; ===========================================================================
0000F5D8                            
0000F5D8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F5D8 5428 0024                  		addq.b	#2,$24(a0)
0000F5DC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F5E2 5069 0008                  		addq.w	#8,8(a1)
0000F5E6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F5EC 6600                       		bne.s	loc_DC36	; if yes, branch
0000F5EE 0469 0010 0008             		subi.w	#$10,8(a1)
0000F5F4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F5F8                            		
0000F5F8                            loc_DC36:
0000F5F8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F5FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F604 0869 0000 0022             		bchg	#0,$22(a1)
0000F60A 0829 0002 0022             		btst	#2,$22(a1)
0000F610 6600                       		bne.s	loc_DC56
0000F612 103C 0000                  		move.b	#0,d0
0000F616 4A29 0039                  		tst.b	$39(a1)
0000F61A 6700                       		beq.s	@not_crawling
0000F61C 4E71                       		nop
0000F61E 103C 000A                  		move.b	#$0A,d0 	; use crawling animation
0000F622                            		
0000F622                            @not_crawling:
0000F622 1340 001C                  		move.b	d0,$1C(a1)
0000F626                            
0000F626                            loc_DC56:
0000F626 08A8 0005 0022             		bclr	#5,$22(a0)
0000F62C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F632 303C 00CC                  		move.w	#$CC,d0
0000F636 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play spring sound
0000F63C                            
0000F63C                            Obj41_AniLR:				; XREF: Obj41_Index
0000F63C 31FC 0000 C904             		move.w	#0,($FFFFC904).w	; clear screen delay counter
0000F642 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F648 6000 C858                  		bra.w	AnimateSprite
0000F64C                            ; ===========================================================================
0000F64C                            
0000F64C                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F64C 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F652 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F656 4E75                       		rts	
0000F658                            ; ===========================================================================
0000F658                            
0000F658                            Obj41_Dwn:				; XREF: Obj41_Index
0000F658 323C 001B                  		move.w	#$1B,d1
0000F65C 343C 0008                  		move.w	#8,d2
0000F660 363C 0010                  		move.w	#$10,d3
0000F664 3828 0008                  		move.w	8(a0),d4
0000F668 6100 0000                  		bsr.w	SolidObject
0000F66C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F672 6600                       		bne.s	loc_DCA4
0000F674 117C 000E 0024             		move.b	#$E,$24(a0)
0000F67A                            
0000F67A                            loc_DCA4:
0000F67A 4A28 0025                  		tst.b	$25(a0)
0000F67E 6600                       		bne.s	locret_DCAE
0000F680 4A44                       		tst.w	d4
0000F682 6B00                       		bmi.s	Obj41_BounceDwn
0000F684                            
0000F684                            locret_DCAE:
0000F684 4E75                       		rts	
0000F686                            ; ===========================================================================
0000F686                            
0000F686                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F686 5428 0024                  		addq.b	#2,$24(a0)
0000F68A 5169 000C                  		subq.w	#8,$C(a1)
0000F68E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F694 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F698 08E9 0001 0022             		bset	#1,$22(a1)
0000F69E 08A9 0003 0022             		bclr	#3,$22(a1)
0000F6A4 137C 0002 0024             		move.b	#2,$24(a1)
0000F6AA 08A8 0003 0022             		bclr	#3,$22(a0)
0000F6B0 4228 0025                  		clr.b	$25(a0)
0000F6B4 303C 00CC                  		move.w	#$CC,d0
0000F6B8 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play spring sound
0000F6BE                            
0000F6BE                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F6BE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F6C4 6000 C7DC                  		bra.w	AnimateSprite
0000F6C8                            ; ===========================================================================
0000F6C8                            
0000F6C8                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F6C8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F6CE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F6D2 4E75                       		rts	
0000F6D4                            ; ===========================================================================
0000F6D4                            Ani_obj41:
0000F6D4                            	include "_anim\obj41.asm"
0000F6D4                            ; ---------------------------------------------------------------------------
0000F6D4                            ; Animation script - springs
0000F6D4                            ; ---------------------------------------------------------------------------
0000F6D4 0000                       		dc.w byte_DD02-Ani_obj41
0000F6D6 0000                       		dc.w byte_DD0E-Ani_obj41
0000F6D8 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F6E4 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F6F0                            		even
0000F6F0                            		even
0000F6F0                            
0000F6F0                            ; ---------------------------------------------------------------------------
0000F6F0                            ; Sprite mappings - springs
0000F6F0                            ; ---------------------------------------------------------------------------
0000F6F0                            Map_obj41:
0000F6F0                            	include "_maps\obj41.asm"
0000F6F0                            ; ---------------------------------------------------------------------------
0000F6F0                            ; Sprite mappings - springs
0000F6F0                            ; ---------------------------------------------------------------------------
0000F6F0 0000                       		dc.w byte_DD26-Map_obj41
0000F6F2 0000                       		dc.w byte_DD31-Map_obj41
0000F6F4 0000                       		dc.w byte_DD37-Map_obj41
0000F6F6 0000                       		dc.w byte_DD47-Map_obj41
0000F6F8 0000                       		dc.w byte_DD4D-Map_obj41
0000F6FA 0000                       		dc.w byte_DD53-Map_obj41
0000F6FC 02                         byte_DD26:	dc.b 2
0000F6FD F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F702 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F707 01                         byte_DD31:	dc.b 1
0000F708 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F70D 03                         byte_DD37:	dc.b 3
0000F70E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F713 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F718 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F71D 01                         byte_DD47:	dc.b 1
0000F71E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F723 01                         byte_DD4D:	dc.b 1
0000F724 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F729 04                         byte_DD53:	dc.b 4
0000F72A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F72F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F734 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F739 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F73E                            		even
0000F73E                            		even
0000F73E                            
0000F73E                            ; ===========================================================================
0000F73E                            ; ---------------------------------------------------------------------------
0000F73E                            ; Object 42 - Newtron enemy (GHZ)
0000F73E                            ; ---------------------------------------------------------------------------
0000F73E                            
0000F73E                            Obj42:					; XREF: Obj_Index
0000F73E 7000                       		moveq	#0,d0
0000F740 1028 0024                  		move.b	$24(a0),d0
0000F744 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F748 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F74C                            ; ===========================================================================
0000F74C 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F74E 0000                       		dc.w Obj42_Action-Obj42_Index
0000F750 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F752                            ; ===========================================================================
0000F752                            
0000F752                            Obj42_Main:				; XREF: Obj42_Index
0000F752 5428 0024                  		addq.b	#2,$24(a0)
0000F756 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F75E 317C 049B 0002             		move.w	#$49B,2(a0)
0000F764 117C 0004 0001             		move.b	#4,1(a0)
0000F76A 117C 0004 0018             		move.b	#4,$18(a0)
0000F770 117C 0014 0019             		move.b	#$14,$19(a0)
0000F776 117C 0010 0016             		move.b	#$10,$16(a0)
0000F77C 117C 0008 0017             		move.b	#8,$17(a0)
0000F782                            
0000F782                            Obj42_Action:				; XREF: Obj42_Index
0000F782 7000                       		moveq	#0,d0
0000F784 1028 0025                  		move.b	$25(a0),d0
0000F788 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F78C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F790 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F796 6100 C70A                  		bsr.w	AnimateSprite
0000F79A 6000 0000                  		bra.w	MarkObjGone
0000F79E                            ; ===========================================================================
0000F79E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F7A0 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F7A2 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F7A4 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F7A6 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F7A8                            ; ===========================================================================
0000F7A8                            
0000F7A8                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F7A8 08E8 0000 0022             		bset	#0,$22(a0)
0000F7AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7B2 9068 0008                  		sub.w	8(a0),d0
0000F7B6 6400                       		bcc.s	loc_DDEA
0000F7B8 4440                       		neg.w	d0
0000F7BA 08A8 0000 0022             		bclr	#0,$22(a0)
0000F7C0                            
0000F7C0                            loc_DDEA:
0000F7C0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F7C4 6400                       		bcc.s	locret_DE12	; if not, branch
0000F7C6 5428 0025                  		addq.b	#2,$25(a0)
0000F7CA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F7D0 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F7D4 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F7D6 317C 249B 0002             		move.w	#$249B,2(a0)
0000F7DC 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F7E2 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F7E8                            
0000F7E8                            locret_DE12:
0000F7E8 4E75                       		rts	
0000F7EA                            ; ===========================================================================
0000F7EA                            
0000F7EA                            Obj42_Type00:				; XREF: Obj42_Index2
0000F7EA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F7F0 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F7F2 08E8 0000 0022             		bset	#0,$22(a0)
0000F7F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7FC 9068 0008                  		sub.w	8(a0),d0
0000F800 6400                       		bcc.s	locret_DE32
0000F802 08A8 0000 0022             		bclr	#0,$22(a0)
0000F808                            
0000F808                            locret_DE32:
0000F808 4E75                       		rts	
0000F80A                            ; ===========================================================================
0000F80A                            
0000F80A                            Obj42_Fall:				; XREF: Obj42_Type00
0000F80A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F810 6600                       		bne.s	loc_DE42
0000F812 117C 000C 0020             		move.b	#$C,$20(a0)
0000F818                            
0000F818                            loc_DE42:
0000F818 6100 F766                  		bsr.w	ObjectFall
0000F81C 6100 0000                  		bsr.w	ObjHitFloor
0000F820 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F822 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F824 D368 000C                  		add.w	d1,$C(a0)
0000F828 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F82E 5428 0025                  		addq.b	#2,$25(a0)
0000F832 117C 0002 001C             		move.b	#2,$1C(a0)
0000F838 0828 0005 0002             		btst	#5,2(a0)
0000F83E 6700                       		beq.s	Obj42_Move
0000F840 5228 001C                  		addq.b	#1,$1C(a0)
0000F844                            
0000F844                            Obj42_Move:
0000F844 117C 000D 0020             		move.b	#$D,$20(a0)
0000F84A 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F850 0828 0000 0022             		btst	#0,$22(a0)
0000F856 6600                       		bne.s	locret_DE86
0000F858 4468 0010                  		neg.w	$10(a0)
0000F85C                            
0000F85C                            locret_DE86:
0000F85C 4E75                       		rts	
0000F85E                            ; ===========================================================================
0000F85E                            
0000F85E                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F85E 6100 F740                  		bsr.w	SpeedToPos
0000F862 6100 0000                  		bsr.w	ObjHitFloor
0000F866 0C41 FFF8                  		cmpi.w	#-8,d1
0000F86A 6D00                       		blt.s	loc_DEA2
0000F86C 0C41 000C                  		cmpi.w	#$C,d1
0000F870 6C00                       		bge.s	loc_DEA2
0000F872 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F876 4E75                       		rts	
0000F878                            ; ===========================================================================
0000F878                            
0000F878                            loc_DEA2:
0000F878 5428 0025                  		addq.b	#2,$25(a0)
0000F87C 4E75                       		rts	
0000F87E                            ; ===========================================================================
0000F87E                            
0000F87E                            Obj42_Speed:				; XREF: Obj42_Index2
0000F87E 6100 F720                  		bsr.w	SpeedToPos
0000F882 4E75                       		rts	
0000F884                            ; ===========================================================================
0000F884                            
0000F884                            Obj42_Type01:				; XREF: Obj42_Index2
0000F884 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F88A 6600                       		bne.s	Obj42_FireMissile
0000F88C 117C 000C 0020             		move.b	#$C,$20(a0)
0000F892                            
0000F892                            Obj42_FireMissile:
0000F892 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F898 6600                       		bne.s	locret_DF14
0000F89A 4A28 0032                  		tst.b	$32(a0)
0000F89E 6600                       		bne.s	locret_DF14
0000F8A0 117C 0001 0032             		move.b	#1,$32(a0)
0000F8A6 6100 FBA6                  		bsr.w	SingleObjLoad
0000F8AA 6600                       		bne.s	locret_DF14
0000F8AC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F8B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8BC 5169 000C                  		subq.w	#8,$C(a1)
0000F8C0 337C 0200 0010             		move.w	#$200,$10(a1)
0000F8C6 303C 0014                  		move.w	#$14,d0
0000F8CA 0828 0000 0022             		btst	#0,$22(a0)
0000F8D0 6600                       		bne.s	loc_DF04
0000F8D2 4440                       		neg.w	d0
0000F8D4 4469 0010                  		neg.w	$10(a1)
0000F8D8                            
0000F8D8                            loc_DF04:
0000F8D8 D169 0008                  		add.w	d0,8(a1)
0000F8DC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F8E2 137C 0001 0028             		move.b	#1,$28(a1)
0000F8E8                            
0000F8E8                            locret_DF14:
0000F8E8 4E75                       		rts	
0000F8EA                            ; ===========================================================================
0000F8EA                            
0000F8EA                            Obj42_Delete:				; XREF: Obj42_Index
0000F8EA 6000 F70A                  		bra.w	DeleteObject
0000F8EE                            ; ===========================================================================
0000F8EE                            Ani_obj42:
0000F8EE                            	include "_anim\obj42.asm"
0000F8EE                            ; ---------------------------------------------------------------------------
0000F8EE                            ; Animation script - Newtron enemy
0000F8EE                            ; ---------------------------------------------------------------------------
0000F8EE 0000                       		dc.w byte_DF24-Ani_obj42
0000F8F0 0000                       		dc.w byte_DF28-Ani_obj42
0000F8F2 0000                       		dc.w byte_DF30-Ani_obj42
0000F8F4 0000                       		dc.w byte_DF34-Ani_obj42
0000F8F6 0000                       		dc.w byte_DF38-Ani_obj42
0000F8F8 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F8FC 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F904 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F908 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F90C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F916                            		even
0000F916                            		even
0000F916                            
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Sprite mappings - Newtron enemy (GHZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            Map_obj42:
0000F916                            	include "_maps\obj42.asm"
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Sprite mappings - Newtron enemy (GHZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F91A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F91E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F922 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F926 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F92A 0000                       		dc.w byte_DFF8-Map_obj42
0000F92C 03                         byte_DF58:	dc.b 3
0000F92D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F932 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F937 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F93C 03                         byte_DF68:	dc.b 3
0000F93D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F942 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F947 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F94C 03                         byte_DF78:	dc.b 3
0000F94D EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F952 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F957 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F95C 04                         byte_DF88:	dc.b 4
0000F95D EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F962 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F967 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F96C 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F971 03                         byte_DF9D:	dc.b 3
0000F972 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F977 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F97C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F981 02                         byte_DFAD:	dc.b 2
0000F982 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F987 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F98C 03                         byte_DFB8:	dc.b 3
0000F98D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F992 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F997 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F99C 03                         byte_DFC8:	dc.b 3
0000F99D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9A2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9A7 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F9AC 03                         byte_DFD8:	dc.b 3
0000F9AD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9B2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9B7 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F9BC 03                         byte_DFE8:	dc.b 3
0000F9BD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F9C2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F9C7 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F9CC 00                         byte_DFF8:	dc.b 0
0000F9CE 00                         		even
0000F9CE 00                         		even
0000F9CE                            
0000F9CE                            ; ===========================================================================
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE                            ; Object 43 - Roller enemy (SYZ)
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE                            
0000F9CE                            Obj43:					; XREF: Obj_Index
0000F9CE 7000                       		moveq	#0,d0
0000F9D0 1028 0024                  		move.b	$24(a0),d0
0000F9D4 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F9D8 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F9DC                            ; ===========================================================================
0000F9DC 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F9DE 0000                       		dc.w Obj43_Action-Obj43_Index
0000F9E0                            ; ===========================================================================
0000F9E0                            
0000F9E0                            Obj43_Main:				; XREF: Obj43_Index
0000F9E0 117C 000E 0016             		move.b	#$E,$16(a0)
0000F9E6 117C 0008 0017             		move.b	#8,$17(a0)
0000F9EC 6100 F592                  		bsr.w	ObjectFall
0000F9F0 6100 0000                  		bsr.w	ObjHitFloor
0000F9F4 4A41                       		tst.w	d1
0000F9F6 6A00                       		bpl.s	locret_E052
0000F9F8 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F9FC 317C 0000 0012             		move.w	#0,$12(a0)
0000FA02 5428 0024                  		addq.b	#2,$24(a0)
0000FA06 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FA0E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FA14 117C 0004 0001             		move.b	#4,1(a0)
0000FA1A 117C 0004 0018             		move.b	#4,$18(a0)
0000FA20 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA26                            
0000FA26                            locret_E052:
0000FA26 4E75                       		rts	
0000FA28                            ; ===========================================================================
0000FA28                            
0000FA28                            Obj43_Action:				; XREF: Obj43_Index
0000FA28 7000                       		moveq	#0,d0
0000FA2A 1028 0025                  		move.b	$25(a0),d0
0000FA2E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FA32 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FA36 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FA3C 6100 C464                  		bsr.w	AnimateSprite
0000FA40 3028 0008                  		move.w	8(a0),d0
0000FA44 0240 FF80                  		andi.w	#$FF80,d0
0000FA48 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA4C 0441 0080                  		subi.w	#$80,d1
0000FA50 0241 FF80                  		andi.w	#$FF80,d1
0000FA54 9041                       		sub.w	d1,d0
0000FA56 0C40 0280                  		cmpi.w	#$280,d0
0000FA5A 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FA5E 6000 F55A                  		bra.w	DisplaySprite
0000FA62                            ; ===========================================================================
0000FA62                            
0000FA62                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FA62 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FA66 7000                       		moveq	#0,d0
0000FA68 1028 0023                  		move.b	$23(a0),d0
0000FA6C 6700                       		beq.s	Obj43_Delete
0000FA6E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FA74                            
0000FA74                            Obj43_Delete:
0000FA74 6000 F580                  		bra.w	DeleteObject
0000FA78                            ; ===========================================================================
0000FA78 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FA7A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FA7C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FA7E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FA80                            ; ===========================================================================
0000FA80                            
0000FA80                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FA80 3038 D008                  		move.w	($FFFFD008).w,d0
0000FA84 0440 0100                  		subi.w	#$100,d0
0000FA88 6500                       		bcs.s	loc_E0D2
0000FA8A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FA8E 6500                       		bcs.s	loc_E0D2
0000FA90 5828 0025                  		addq.b	#4,$25(a0)
0000FA94 117C 0002 001C             		move.b	#2,$1C(a0)
0000FA9A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FAA0 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FAA6                            
0000FAA6                            loc_E0D2:
0000FAA6 588F                       		addq.l	#4,sp
0000FAA8 4E75                       		rts	
0000FAAA                            ; ===========================================================================
0000FAAA                            
0000FAAA                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FAAA 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FAB0 6700                       		beq.s	loc_E0F8
0000FAB2 5368 0030                  		subq.w	#1,$30(a0)
0000FAB6 6A00                       		bpl.s	locret_E0F6
0000FAB8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FABE 317C 0700 0010             		move.w	#$700,$10(a0)
0000FAC4 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FACA                            
0000FACA                            locret_E0F6:
0000FACA 4E75                       		rts	
0000FACC                            ; ===========================================================================
0000FACC                            
0000FACC                            loc_E0F8:
0000FACC 5428 0025                  		addq.b	#2,$25(a0)
0000FAD0 4E75                       		rts	
0000FAD2                            ; ===========================================================================
0000FAD2                            
0000FAD2                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FAD2 6100 0000                  		bsr.w	Obj43_Stop
0000FAD6 6100 F4C8                  		bsr.w	SpeedToPos
0000FADA 6100 0000                  		bsr.w	ObjHitFloor
0000FADE 0C41 FFF8                  		cmpi.w	#-8,d1
0000FAE2 6D00                       		blt.s	Obj43_Jump
0000FAE4 0C41 000C                  		cmpi.w	#$C,d1
0000FAE8 6C00                       		bge.s	Obj43_Jump
0000FAEA D368 000C                  		add.w	d1,$C(a0)
0000FAEE 4E75                       		rts	
0000FAF0                            ; ===========================================================================
0000FAF0                            
0000FAF0                            Obj43_Jump:
0000FAF0 5428 0025                  		addq.b	#2,$25(a0)
0000FAF4 08E8 0000 0032             		bset	#0,$32(a0)
0000FAFA 6700                       		beq.s	locret_E12E
0000FAFC 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FB02                            
0000FB02                            locret_E12E:
0000FB02 4E75                       		rts	
0000FB04                            ; ===========================================================================
0000FB04                            
0000FB04                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FB04 6100 F47A                  		bsr.w	ObjectFall
0000FB08 4A68 0012                  		tst.w	$12(a0)
0000FB0C 6B00                       		bmi.s	locret_E150
0000FB0E 6100 0000                  		bsr.w	ObjHitFloor
0000FB12 4A41                       		tst.w	d1
0000FB14 6A00                       		bpl.s	locret_E150
0000FB16 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FB1A 5528 0025                  		subq.b	#2,$25(a0)
0000FB1E 317C 0000 0012             		move.w	#0,$12(a0)
0000FB24                            
0000FB24                            locret_E150:
0000FB24 4E75                       		rts	
0000FB26                            
0000FB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB26                            
0000FB26                            
0000FB26                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FB26 4A28 0032                  		tst.b	$32(a0)
0000FB2A 6B00                       		bmi.s	locret_E188
0000FB2C 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB30 0440 0030                  		subi.w	#$30,d0
0000FB34 9068 0008                  		sub.w	8(a0),d0
0000FB38 6400                       		bcc.s	locret_E188
0000FB3A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FB40 117C 000E 0020             		move.b	#$E,$20(a0)
0000FB46 4268 0010                  		clr.w	$10(a0)
0000FB4A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FB50 117C 0002 0025             		move.b	#2,$25(a0)
0000FB56 08E8 0007 0032             		bset	#7,$32(a0)
0000FB5C                            
0000FB5C                            locret_E188:
0000FB5C 4E75                       		rts	
0000FB5E                            ; End of function Obj43_Stop
0000FB5E                            
0000FB5E                            ; ===========================================================================
0000FB5E                            Ani_obj43:
0000FB5E                            	include "_anim\obj43.asm"
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            ; Animation script - Roller enemy
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E 0000                       		dc.w byte_E190-Ani_obj43
0000FB60 0000                       		dc.w byte_E196-Ani_obj43
0000FB62 0000                       		dc.w byte_E19C-Ani_obj43
0000FB64 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FB6A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FB70 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FB76 00                         		even
0000FB76 00                         		even
0000FB76                            
0000FB76                            ; ---------------------------------------------------------------------------
0000FB76                            ; Sprite mappings - Roller enemy (SYZ)
0000FB76                            ; ---------------------------------------------------------------------------
0000FB76                            Map_obj43:
0000FB76                            	include "_maps\obj43.asm"
0000FB76                            ; ---------------------------------------------------------------------------
0000FB76                            ; Sprite mappings - Roller enemy (SYZ)
0000FB76                            ; ---------------------------------------------------------------------------
0000FB76 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FB7A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FB7E 0000                       		dc.w byte_E1CE-Map_obj43
0000FB80 02                         byte_E1AC:	dc.b 2
0000FB81 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FB86 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FB8B 02                         byte_E1B7:	dc.b 2
0000FB8C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FB91 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FB96 01                         byte_E1C2:	dc.b 1
0000FB97 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FB9C 01                         byte_E1C8:	dc.b 1
0000FB9D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FBA2 01                         byte_E1CE:	dc.b 1
0000FBA3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FBA8                            		even
0000FBA8                            		even
0000FBA8                            
0000FBA8                            ; ===========================================================================
0000FBA8                            ; ---------------------------------------------------------------------------
0000FBA8                            ; Object 44 - walls (GHZ)
0000FBA8                            ; ---------------------------------------------------------------------------
0000FBA8                            
0000FBA8                            Obj44:					; XREF: Obj_Index
0000FBA8 7000                       		moveq	#0,d0
0000FBAA 1028 0024                  		move.b	$24(a0),d0
0000FBAE 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FBB2 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FBB6                            ; ===========================================================================
0000FBB6 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FBB8 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FBBA 0000                       		dc.w Obj44_Display-Obj44_Index
0000FBBC                            ; ===========================================================================
0000FBBC                            
0000FBBC                            Obj44_Main:				; XREF: Obj44_Index
0000FBBC 5428 0024                  		addq.b	#2,$24(a0)
0000FBC0 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FBC8 317C 434C 0002             		move.w	#$434C,2(a0)
0000FBCE 0028 0004 0001             		ori.b	#4,1(a0)
0000FBD4 117C 0008 0019             		move.b	#8,$19(a0)
0000FBDA 117C 0006 0018             		move.b	#6,$18(a0)
0000FBE0 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FBE6 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FBEC 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FBEE 5428 0024                  		addq.b	#2,$24(a0)
0000FBF2 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FBF4                            ; ===========================================================================
0000FBF4                            
0000FBF4                            Obj44_Solid:				; XREF: Obj44_Index
0000FBF4 323C 0013                  		move.w	#$13,d1
0000FBF8 343C 0028                  		move.w	#$28,d2
0000FBFC 6100 A5B8                  		bsr.w	Obj44_SolidWall
0000FC00                            
0000FC00                            Obj44_Display:				; XREF: Obj44_Index
0000FC00 6100 F3B8                  		bsr.w	DisplaySprite
0000FC04 3028 0008                  		move.w	8(a0),d0
0000FC08 0240 FF80                  		andi.w	#$FF80,d0
0000FC0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC10 0441 0080                  		subi.w	#$80,d1
0000FC14 0241 FF80                  		andi.w	#$FF80,d1
0000FC18 9041                       		sub.w	d1,d0
0000FC1A 0C40 0280                  		cmpi.w	#$280,d0
0000FC1E 6200 F3D6                  		bhi.w	DeleteObject
0000FC22 4E75                       		rts	
0000FC24                            ; ===========================================================================
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24                            ; Sprite mappings - walls (GHZ)
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24                            Map_obj44:
0000FC24                            	include "_maps\obj44.asm"
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24                            ; Sprite mappings - walls (GHZ)
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24 0000                       		dc.w byte_E256-Map_obj44
0000FC26 0000                       		dc.w byte_E26B-Map_obj44
0000FC28 0000                       		dc.w byte_E280-Map_obj44
0000FC2A 04                         byte_E256:	dc.b 4
0000FC2B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FC30 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC35 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FC3A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FC3F 04                         byte_E26B:	dc.b 4
0000FC40 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FC45 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC4A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FC4F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FC54 04                         byte_E280:	dc.b 4
0000FC55 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FC5A F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FC5F 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FC64 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FC6A 00                         		even
0000FC6A 00                         		even
0000FC6A                            
0000FC6A                            ; ===========================================================================
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A                            
0000FC6A                            Obj13:					; XREF: Obj_Index
0000FC6A 7000                       		moveq	#0,d0
0000FC6C 1028 0024                  		move.b	$24(a0),d0
0000FC70 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FC74 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FC78 6000 0000                  		bra.w	Obj14_ChkDel
0000FC7C                            ; ===========================================================================
0000FC7C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FC7E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FC80                            ; ---------------------------------------------------------------------------
0000FC80                            ;
0000FC80                            ; Lava ball production rates
0000FC80                            ;
0000FC80 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FC86                            ; ===========================================================================
0000FC86                            
0000FC86                            Obj13_Main:				; XREF: Obj13_Index
0000FC86 5428 0024                  		addq.b	#2,$24(a0)
0000FC8A 1028 0028                  		move.b	$28(a0),d0
0000FC8E E848                       		lsr.w	#4,d0
0000FC90 0240 000F                  		andi.w	#$F,d0
0000FC94 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FC9A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FCA0 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FCA6                            
0000FCA6                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FCA6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FCAA 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FCAC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FCB2 6100 F580                  		bsr.w	ChkObjOnScreen
0000FCB6 6600                       		bne.s	locret_E302
0000FCB8 6100 F794                  		bsr.w	SingleObjLoad
0000FCBC 6600                       		bne.s	locret_E302
0000FCBE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FCC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCCE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FCD4                            
0000FCD4                            locret_E302:
0000FCD4 4E75                       		rts	
0000FCD6                            ; ===========================================================================
0000FCD6                            ; ---------------------------------------------------------------------------
0000FCD6                            ; Object 14 - lava balls (MZ, SLZ)
0000FCD6                            ; ---------------------------------------------------------------------------
0000FCD6                            
0000FCD6                            Obj14:					; XREF: Obj_Index
0000FCD6 7000                       		moveq	#0,d0
0000FCD8 1028 0024                  		move.b	$24(a0),d0
0000FCDC 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FCE0 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FCE4 6000 F2D4                  		bra.w	DisplaySprite
0000FCE8                            ; ===========================================================================
0000FCE8 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FCEA 0000                       		dc.w Obj14_Action-Obj14_Index
0000FCEC 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FCEE                            
0000FCEE FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FCF8 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FD00                            ; ===========================================================================
0000FD00                            
0000FD00                            Obj14_Main:				; XREF: Obj14_Index
0000FD00 5428 0024                  		addq.b	#2,$24(a0)
0000FD04 117C 0008 0016             		move.b	#8,$16(a0)
0000FD0A 117C 0008 0017             		move.b	#8,$17(a0)
0000FD10 217C 0000 CAF4 0004        		move.l	#Map_obj14,4(a0)
0000FD18 317C 0345 0002             		move.w	#$345,2(a0)
0000FD1E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FD24 6600                       		bne.s	loc_E35A
0000FD26 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FD2C                            
0000FD2C                            loc_E35A:
0000FD2C 117C 0004 0001             		move.b	#4,1(a0)
0000FD32 117C 0003 0018             		move.b	#3,$18(a0)
0000FD38 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FD3E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FD44 4A28 0029                  		tst.b	$29(a0)
0000FD48 6700                       		beq.s	Obj14_SetSpeed
0000FD4A 5428 0018                  		addq.b	#2,$18(a0)
0000FD4E                            
0000FD4E                            Obj14_SetSpeed:
0000FD4E 7000                       		moveq	#0,d0
0000FD50 1028 0028                  		move.b	$28(a0),d0
0000FD54 D040                       		add.w	d0,d0
0000FD56 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FD5C 117C 0008 0019             		move.b	#8,$19(a0)
0000FD62 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FD68 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FD6A 117C 0010 0019             		move.b	#$10,$19(a0)
0000FD70 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FD76 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FD7C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FD82                            
0000FD82                            Obj14_PlaySnd:
0000FD82 303C 00AE                  		move.w	#$AE,d0
0000FD86 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FD8C                            
0000FD8C                            Obj14_Action:				; XREF: Obj14_Index
0000FD8C 7000                       		moveq	#0,d0
0000FD8E 1028 0028                  		move.b	$28(a0),d0
0000FD92 D040                       		add.w	d0,d0
0000FD94 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FD98 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FD9C 6100 F202                  		bsr.w	SpeedToPos
0000FDA0 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FDA6 6100 C0FA                  		bsr.w	AnimateSprite
0000FDAA                            
0000FDAA                            Obj14_ChkDel:				; XREF: Obj13
0000FDAA 3028 0008                  		move.w	8(a0),d0
0000FDAE 0240 FF80                  		andi.w	#$FF80,d0
0000FDB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDB6 0441 0080                  		subi.w	#$80,d1
0000FDBA 0241 FF80                  		andi.w	#$FF80,d1
0000FDBE 9041                       		sub.w	d1,d0
0000FDC0 0C40 0280                  		cmpi.w	#$280,d0
0000FDC4 6200 F230                  		bhi.w	DeleteObject
0000FDC8 4E75                       		rts	
0000FDCA                            ; ===========================================================================
0000FDCA 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FDCE 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FDD2 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FDD6 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FDDA 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FDDC                            ; ===========================================================================
0000FDDC                            ; lavaball types 00-03 fly up and fall back down
0000FDDC                            
0000FDDC                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FDDC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FDE2 3028 0030                  		move.w	$30(a0),d0
0000FDE6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FDEA 6400                       		bcc.s	loc_E41E	; if not, branch
0000FDEC 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FDF0                            
0000FDF0                            loc_E41E:
0000FDF0 08A8 0001 0022             		bclr	#1,$22(a0)
0000FDF6 4A68 0012                  		tst.w	$12(a0)
0000FDFA 6A00                       		bpl.s	locret_E430
0000FDFC 08E8 0001 0022             		bset	#1,$22(a0)
0000FE02                            
0000FE02                            locret_E430:
0000FE02 4E75                       		rts	
0000FE04                            ; ===========================================================================
0000FE04                            ; lavaball type	04 flies up until it hits the ceiling
0000FE04                            
0000FE04                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FE04 08E8 0001 0022             		bset	#1,$22(a0)
0000FE0A 6100 0000                  		bsr.w	ObjHitCeiling
0000FE0E 4A41                       		tst.w	d1
0000FE10 6A00                       		bpl.s	locret_E452
0000FE12 117C 0008 0028             		move.b	#8,$28(a0)
0000FE18 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE1E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FE24                            
0000FE24                            locret_E452:
0000FE24 4E75                       		rts	
0000FE26                            ; ===========================================================================
0000FE26                            ; lavaball type	05 falls down until it hits the	floor
0000FE26                            
0000FE26                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FE26 08A8 0001 0022             		bclr	#1,$22(a0)
0000FE2C 6100 0000                  		bsr.w	ObjHitFloor
0000FE30 4A41                       		tst.w	d1
0000FE32 6A00                       		bpl.s	locret_E474
0000FE34 117C 0008 0028             		move.b	#8,$28(a0)
0000FE3A 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE40 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FE46                            
0000FE46                            locret_E474:
0000FE46 4E75                       		rts	
0000FE48                            ; ===========================================================================
0000FE48                            ; lavaball types 06-07 move sideways
0000FE48                            
0000FE48                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FE48 08E8 0000 0022             		bset	#0,$22(a0)
0000FE4E 76F8                       		moveq	#-8,d3
0000FE50 6100 0000                  		bsr.w	ObjHitWallLeft
0000FE54 4A41                       		tst.w	d1
0000FE56 6A00                       		bpl.s	locret_E498
0000FE58 117C 0008 0028             		move.b	#8,$28(a0)
0000FE5E 117C 0003 001C             		move.b	#3,$1C(a0)
0000FE64 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FE6A                            
0000FE6A                            locret_E498:
0000FE6A 4E75                       		rts	
0000FE6C                            ; ===========================================================================
0000FE6C                            
0000FE6C                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FE6C 08A8 0000 0022             		bclr	#0,$22(a0)
0000FE72 7608                       		moveq	#8,d3
0000FE74 6100 0000                  		bsr.w	ObjHitWallRight
0000FE78 4A41                       		tst.w	d1
0000FE7A 6A00                       		bpl.s	locret_E4BC
0000FE7C 117C 0008 0028             		move.b	#8,$28(a0)
0000FE82 117C 0003 001C             		move.b	#3,$1C(a0)
0000FE88 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FE8E                            
0000FE8E                            locret_E4BC:
0000FE8E 4E75                       		rts	
0000FE90                            ; ===========================================================================
0000FE90                            
0000FE90                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FE90 4E75                       		rts	
0000FE92                            ; ===========================================================================
0000FE92                            
0000FE92                            Obj14_Delete:				; XREF: Obj14_Index
0000FE92 6000 F162                  		bra.w	DeleteObject
0000FE96                            ; ===========================================================================
0000FE96                            Ani_obj14:
0000FE96                            	include "_anim\obj14.asm"
0000FE96                            ; ---------------------------------------------------------------------------
0000FE96                            ; Animation script - lava balls
0000FE96                            ; ---------------------------------------------------------------------------
0000FE96 0000                       		dc.w byte_E4CC-Ani_obj14
0000FE98 0000                       		dc.w byte_E4D2-Ani_obj14
0000FE9A 0000                       		dc.w byte_E4D6-Ani_obj14
0000FE9C 0000                       		dc.w byte_E4DC-Ani_obj14
0000FE9E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FEA4 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FEA8 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FEAE 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FEB2                            		even
0000FEB2                            		even
0000FEB2                            
0000FEB2                            ; ===========================================================================
0000FEB2                            ; ---------------------------------------------------------------------------
0000FEB2                            ; Object 6D - flame thrower (SBZ)
0000FEB2                            ; ---------------------------------------------------------------------------
0000FEB2                            
0000FEB2                            Obj6D:					; XREF: Obj_Index
0000FEB2 7000                       		moveq	#0,d0
0000FEB4 1028 0024                  		move.b	$24(a0),d0
0000FEB8 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FEBC 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FEC0                            ; ===========================================================================
0000FEC0 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FEC2 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            Obj6D_Main:				; XREF: Obj6D_Index
0000FEC4 5428 0024                  		addq.b	#2,$24(a0)
0000FEC8 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FED0 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FED6 0028 0004 0001             		ori.b	#4,1(a0)
0000FEDC 117C 0001 0018             		move.b	#1,$18(a0)
0000FEE2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FEE8 117C 000C 0019             		move.b	#$C,$19(a0)
0000FEEE 1028 0028                  		move.b	$28(a0),d0
0000FEF2 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FEF6 D040                       		add.w	d0,d0		; multiply by 2
0000FEF8 3140 0030                  		move.w	d0,$30(a0)
0000FEFC 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FF00 1028 0028                  		move.b	$28(a0),d0
0000FF04 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FF08 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FF0A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FF0E 117C 000A 0036             		move.b	#$A,$36(a0)
0000FF14 0828 0001 0022             		btst	#1,$22(a0)
0000FF1A 6700                       		beq.s	Obj6D_Action
0000FF1C 117C 0002 001C             		move.b	#2,$1C(a0)
0000FF22 117C 0015 0036             		move.b	#$15,$36(a0)
0000FF28                            
0000FF28                            Obj6D_Action:				; XREF: Obj6D_Index
0000FF28 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FF2C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FF2E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FF34 0868 0000 001C             		bchg	#0,$1C(a0)
0000FF3A 6700                       		beq.s	loc_E57A
0000FF3C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FF42 303C 00B3                  		move.w	#$B3,d0
0000FF46 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play flame sound
0000FF4C                            
0000FF4C                            loc_E57A:
0000FF4C 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FF52 6100 BF4E                  		bsr.w	AnimateSprite
0000FF56 117C 0000 0020             		move.b	#0,$20(a0)
0000FF5C 1028 0036                  		move.b	$36(a0),d0
0000FF60 B028 001A                  		cmp.b	$1A(a0),d0
0000FF64 6600                       		bne.s	Obj6D_ChkDel
0000FF66 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FF6C                            
0000FF6C                            Obj6D_ChkDel:
0000FF6C 3028 0008                  		move.w	8(a0),d0
0000FF70 0240 FF80                  		andi.w	#$FF80,d0
0000FF74 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF78 0441 0080                  		subi.w	#$80,d1
0000FF7C 0241 FF80                  		andi.w	#$FF80,d1
0000FF80 9041                       		sub.w	d1,d0
0000FF82 0C40 0280                  		cmpi.w	#$280,d0
0000FF86 6200 F06E                  		bhi.w	DeleteObject
0000FF8A 6000 F02E                  		bra.w	DisplaySprite
0000FF8E                            ; ===========================================================================
0000FF8E                            Ani_obj6D:
0000FF8E                            	include "_anim\obj6D.asm"
0000FF8E                            ; ---------------------------------------------------------------------------
0000FF8E                            ; Animation script - flamethrower (SBZ)
0000FF8E                            ; ---------------------------------------------------------------------------
0000FF8E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FF90 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FF92 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FF94 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FF96 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FFA4 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FFAE 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FFBC 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FFC6                            		even
0000FFC6                            		even
0000FFC6                            
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6                            ; Sprite mappings - flame thrower (SBZ)
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6                            Map_obj6D:
0000FFC6                            	include "_maps\obj6D.asm"
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6                            ; Sprite mappings - flame thrower (SBZ)
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FFCA 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FFCE 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FFD2 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FFD6 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FFDA 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FFDE 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FFE2 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FFE6 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FFEA 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FFEE 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FFF2 01                         byte_E620:	dc.b 1
0000FFF3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FFF8 02                         byte_E626:	dc.b 2
0000FFF9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFFE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010003 02                         byte_E631:	dc.b 2
00010004 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010009 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001000E 03                         byte_E63C:	dc.b 3
0001000F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010014 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010019 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001001E 03                         byte_E64C:	dc.b 3
0001001F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010024 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010029 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001002E 04                         byte_E65C:	dc.b 4
0001002F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010034 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010039 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001003E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010043 04                         byte_E671:	dc.b 4
00010044 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010049 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001004E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010053 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010058 05                         byte_E686:	dc.b 5
00010059 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001005E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010063 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010068 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001006D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010072 05                         byte_E6A0:	dc.b 5
00010073 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010078 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001007D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010082 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010087 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001008C 06                         byte_E6BA:	dc.b 6
0001008D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010092 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010097 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001009C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000100A1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100A6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100AB 06                         byte_E6D9:	dc.b 6
000100AC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000100B1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000100B6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000100BB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000100C0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100C5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100CA 01                         byte_E6F8:	dc.b 1
000100CB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000100D0 02                         byte_E6FE:	dc.b 2
000100D1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000100D6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100DB 02                         byte_E709:	dc.b 2
000100DC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000100E1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100E6 03                         byte_E714:	dc.b 3
000100E7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000100EC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000100F1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100F6 03                         byte_E724:	dc.b 3
000100F7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000100FC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010101 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010106 04                         byte_E734:	dc.b 4
00010107 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001010C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010111 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010116 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001011B 04                         byte_E749:	dc.b 4
0001011C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010121 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010126 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001012B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010130 05                         byte_E75E:	dc.b 5
00010131 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010136 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001013B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010140 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010145 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001014A 05                         byte_E778:	dc.b 5
0001014B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010150 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010155 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001015A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001015F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010164 06                         byte_E792:	dc.b 6
00010165 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001016A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001016F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010174 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010179 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001017E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010183 06                         byte_E7B1:	dc.b 6
00010184 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010189 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001018E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010193 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010198 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001019D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101A2                            		even
000101A2                            		even
000101A2                            
000101A2                            ; ===========================================================================
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            
000101A2                            Obj46:					; XREF: Obj_Index
000101A2 7000                       		moveq	#0,d0
000101A4 1028 0024                  		move.b	$24(a0),d0
000101A8 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000101AC 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000101B0                            ; ===========================================================================
000101B0 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000101B2 0000                       		dc.w Obj46_Action-Obj46_Index
000101B4                            ; ===========================================================================
000101B4                            
000101B4                            Obj46_Main:				; XREF: Obj46_Index
000101B4 5428 0024                  		addq.b	#2,$24(a0)
000101B8 117C 000F 0016             		move.b	#$F,$16(a0)
000101BE 117C 000F 0017             		move.b	#$F,$17(a0)
000101C4 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
000101CC 317C 4000 0002             		move.w	#$4000,2(a0)
000101D2 117C 0004 0001             		move.b	#4,1(a0)
000101D8 117C 0003 0018             		move.b	#3,$18(a0)
000101DE 117C 0010 0019             		move.b	#$10,$19(a0)
000101E4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000101EA 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000101F0                            
000101F0                            Obj46_Action:				; XREF: Obj46_Index
000101F0 4A28 0001                  		tst.b	1(a0)
000101F4 6A00                       		bpl.s	Obj46_ChkDel
000101F6 7000                       		moveq	#0,d0
000101F8 1028 0028                  		move.b	$28(a0),d0	; get object type
000101FC 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010200 D040                       		add.w	d0,d0
00010202 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00010206 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0001020A 323C 001B                  		move.w	#$1B,d1
0001020E 343C 0010                  		move.w	#$10,d2
00010212 363C 0011                  		move.w	#$11,d3
00010216 3828 0008                  		move.w	8(a0),d4
0001021A 6100 0000                  		bsr.w	SolidObject
0001021E                            
0001021E                            Obj46_ChkDel:
0001021E 6100 ED9A                  		bsr.w	DisplaySprite
00010222 3028 0008                  		move.w	8(a0),d0
00010226 0240 FF80                  		andi.w	#$FF80,d0
0001022A 3238 F700                  		move.w	($FFFFF700).w,d1
0001022E 0441 0080                  		subi.w	#$80,d1
00010232 0241 FF80                  		andi.w	#$FF80,d1
00010236 9041                       		sub.w	d1,d0
00010238 0C40 0280                  		cmpi.w	#$280,d0
0001023C 6200 EDB8                  		bhi.w	DeleteObject
00010240 4E75                       		rts	
00010242                            ; ===========================================================================
00010242 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00010244 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00010246 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00010248 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0001024A 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0001024C                            ; ===========================================================================
0001024C                            
0001024C                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0001024C 4E75                       		rts	
0001024E                            ; ===========================================================================
0001024E                            
0001024E                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0001024E 3038 D008                  		move.w	($FFFFD008).w,d0
00010252 9068 0008                  		sub.w	8(a0),d0
00010256 6400                       		bcc.s	loc_E888
00010258 4440                       		neg.w	d0
0001025A                            
0001025A                            loc_E888:
0001025A 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0001025E 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010260 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00010266                            
00010266                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00010266 7000                       		moveq	#0,d0
00010268 1038 FE74                  		move.b	($FFFFFE74).w,d0
0001026C 0828 0003 0028             		btst	#3,$28(a0)
00010272 6700                       		beq.s	loc_E8A8
00010274 4440                       		neg.w	d0
00010276 0640 0010                  		addi.w	#$10,d0
0001027A                            
0001027A                            loc_E8A8:
0001027A 3228 0030                  		move.w	$30(a0),d1
0001027E 9240                       		sub.w	d0,d1
00010280 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00010284 4E75                       		rts	
00010286                            ; ===========================================================================
00010286                            
00010286                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00010286 6100 ED18                  		bsr.w	SpeedToPos
0001028A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010290 6100 0000                  		bsr.w	ObjHitFloor
00010294 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010296 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0001029A D368 000C                  		add.w	d1,$C(a0)
0001029E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000102A2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000102A8 117C 0004 0028             		move.b	#4,$28(a0)
000102AE 3011                       		move.w	(a1),d0
000102B0 0240 03FF                  		andi.w	#$3FF,d0
000102B4 0C40 02E8                  		cmpi.w	#$2E8,d0
000102B8 6400                       		bcc.s	locret_E8EE
000102BA 117C 0000 0028             		move.b	#0,$28(a0)
000102C0                            
000102C0                            locret_E8EE:
000102C0 4E75                       		rts	
000102C2                            ; ===========================================================================
000102C2                            
000102C2                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000102C2 7000                       		moveq	#0,d0
000102C4 1038 FE70                  		move.b	($FFFFFE70).w,d0
000102C8 E648                       		lsr.w	#3,d0
000102CA 3228 0030                  		move.w	$30(a0),d1
000102CE 9240                       		sub.w	d0,d1
000102D0 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000102D4 4E75                       		rts	
000102D6                            ; ===========================================================================
000102D6                            ; ---------------------------------------------------------------------------
000102D6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000102D6                            ; ---------------------------------------------------------------------------
000102D6                            Map_obj46:
000102D6                            	include "_maps\obj46.asm"
000102D6                            ; ---------------------------------------------------------------------------
000102D6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000102D6                            ; ---------------------------------------------------------------------------
000102D6 0000                       		dc.w byte_E906-Map_obj46
000102D8 01                         byte_E906:	dc.b 1
000102D9 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000102DE                            		even
000102DE                            		even
000102DE                            
000102DE                            ; ===========================================================================
000102DE                            ; ---------------------------------------------------------------------------
000102DE                            ; Object 12 - lamp (SYZ)
000102DE                            ; ---------------------------------------------------------------------------
000102DE                            
000102DE                            Obj12:					; XREF: Obj_Index
000102DE 7000                       		moveq	#0,d0
000102E0 1028 0024                  		move.b	$24(a0),d0
000102E4 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000102E8 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000102EC                            ; ===========================================================================
000102EC 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000102EE 0000                       		dc.w Obj12_Animate-Obj12_Index
000102F0                            ; ===========================================================================
000102F0                            
000102F0                            Obj12_Main:				; XREF: Obj12_Index
000102F0 5428 0024                  		addq.b	#2,$24(a0)
000102F4 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000102FC 317C 0000 0002             		move.w	#0,2(a0)
00010302 117C 0004 0001             		move.b	#4,1(a0)
00010308 117C 0010 0019             		move.b	#$10,$19(a0)
0001030E 117C 0006 0018             		move.b	#6,$18(a0)
00010314                            
00010314                            Obj12_Animate:				; XREF: Obj12_Index
00010314 5328 001E                  		subq.b	#1,$1E(a0)
00010318 6A00                       		bpl.s	Obj12_ChkDel
0001031A 117C 0007 001E             		move.b	#7,$1E(a0)
00010320 5228 001A                  		addq.b	#1,$1A(a0)
00010324 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001032A 6500                       		bcs.s	Obj12_ChkDel
0001032C 117C 0000 001A             		move.b	#0,$1A(a0)
00010332                            
00010332                            Obj12_ChkDel:
00010332 3028 0008                  		move.w	8(a0),d0
00010336 0240 FF80                  		andi.w	#$FF80,d0
0001033A 3238 F700                  		move.w	($FFFFF700).w,d1
0001033E 0441 0080                  		subi.w	#$80,d1
00010342 0241 FF80                  		andi.w	#$FF80,d1
00010346 9041                       		sub.w	d1,d0
00010348 0C40 0280                  		cmpi.w	#$280,d0
0001034C 6200 ECA8                  		bhi.w	DeleteObject
00010350 6000 EC68                  		bra.w	DisplaySprite
00010354                            ; ===========================================================================
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Sprite mappings - lamp (SYZ)
00010354                            ; ---------------------------------------------------------------------------
00010354                            Map_obj12:
00010354                            	include "_maps\obj12.asm"
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Sprite mappings - lamp (SYZ)
00010354                            ; ---------------------------------------------------------------------------
00010354 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010358 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0001035C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010360 02                         byte_E98E:	dc.b 2
00010361 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00010366 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001036B 02                         byte_E999:	dc.b 2
0001036C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010371 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00010376 02                         byte_E9A4:	dc.b 2
00010377 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0001037C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010381 02                         byte_E9AF:	dc.b 2
00010382 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00010387 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0001038C 02                         byte_E9BA:	dc.b 2
0001038D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010392 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00010397 02                         byte_E9C5:	dc.b 2
00010398 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0001039D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000103A2                            		even
000103A2                            		even
000103A2                            
000103A2                            ; ===========================================================================
000103A2                            ; ---------------------------------------------------------------------------
000103A2                            ; Object 47 - pinball bumper (SYZ)
000103A2                            ; ---------------------------------------------------------------------------
000103A2                            
000103A2                            Obj47:					; XREF: Obj_Index
000103A2 7000                       		moveq	#0,d0
000103A4 1028 0024                  		move.b	$24(a0),d0
000103A8 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000103AC 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000103B0                            ; ===========================================================================
000103B0 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000103B2 0000                       		dc.w Obj47_Hit-Obj47_Index
000103B4                            ; ===========================================================================
000103B4                            
000103B4                            Obj47_Main:				; XREF: Obj47_Index
000103B4 5428 0024                  		addq.b	#2,$24(a0)
000103B8 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000103C0 317C 0380 0002             		move.w	#$380,2(a0)
000103C6 117C 0004 0001             		move.b	#4,1(a0)
000103CC 117C 0010 0019             		move.b	#$10,$19(a0)
000103D2 117C 0001 0018             		move.b	#1,$18(a0)
000103D8 117C 00D7 0020             		move.b	#$D7,$20(a0)
000103DE                            
000103DE                            Obj47_Hit:				; XREF: Obj47_Index
000103DE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000103E2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000103E6 4228 0021                  		clr.b	$21(a0)
000103EA 43F8 D000                  		lea	($FFFFD000).w,a1
000103EE 3228 0008                  		move.w	8(a0),d1
000103F2 3428 000C                  		move.w	$C(a0),d2
000103F6 9269 0008                  		sub.w	8(a1),d1
000103FA 9469 000C                  		sub.w	$C(a1),d2
000103FE 4EB9 0000 2B48             		jsr	(CalcAngle).l
00010404 4EB9 0000 287A             		jsr	(CalcSine).l
0001040A C3FC F900                  		muls.w	#-$700,d1
0001040E E081                       		asr.l	#8,d1
00010410 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00010414 C1FC F900                  		muls.w	#-$700,d0
00010418 E080                       		asr.l	#8,d0
0001041A 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0001041E 08E9 0001 0022             		bset	#1,$22(a1)
00010424 08A9 0004 0022             		bclr	#4,$22(a1)
0001042A 08A9 0005 0022             		bclr	#5,$22(a1)
00010430 4229 003C                  		clr.b	$3C(a1)
00010434 117C 0001 001C             		move.b	#1,$1C(a0)
0001043A 303C 00B4                  		move.w	#$B4,d0
0001043E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play bumper sound
00010444 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010448 7000                       		moveq	#0,d0
0001044A 1028 0023                  		move.b	$23(a0),d0
0001044E 6700                       		beq.s	Obj47_Score
00010450 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
00010456 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010458 5232 0002                  		addq.b	#1,2(a2,d0.w)
0001045C                            
0001045C                            Obj47_Score:
0001045C 7001                       		moveq	#1,d0
0001045E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010464 6100 EFE8                  		bsr.w	SingleObjLoad
00010468 6600                       		bne.s	Obj47_Display
0001046A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001046E 3368 0008 0008             		move.w	8(a0),8(a1)
00010474 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001047A 137C 0004 001A             		move.b	#4,$1A(a1)
00010480                            
00010480                            Obj47_Display:
00010480 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00010486 6100 BA1A                  		bsr.w	AnimateSprite
0001048A 3028 0008                  		move.w	8(a0),d0
0001048E 0240 FF80                  		andi.w	#$FF80,d0
00010492 3238 F700                  		move.w	($FFFFF700).w,d1
00010496 0441 0080                  		subi.w	#$80,d1
0001049A 0241 FF80                  		andi.w	#$FF80,d1
0001049E 9041                       		sub.w	d1,d0
000104A0 0C40 0280                  		cmpi.w	#$280,d0
000104A4 6200                       		bhi.s	Obj47_ChkHit
000104A6 6000 EB12                  		bra.w	DisplaySprite
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj47_ChkHit:				; XREF: Obj47_Display
000104AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104AE 7000                       		moveq	#0,d0
000104B0 1028 0023                  		move.b	$23(a0),d0
000104B4 6700                       		beq.s	Obj47_Delete
000104B6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104BC                            
000104BC                            Obj47_Delete:
000104BC 6000 EB38                  		bra.w	DeleteObject
000104C0                            ; ===========================================================================
000104C0                            Ani_obj47:
000104C0                            	include "_anim\obj47.asm"
000104C0                            ; ---------------------------------------------------------------------------
000104C0                            ; Animation script - flamethrower (SBZ)
000104C0                            ; ---------------------------------------------------------------------------
000104C0 0000                       		dc.w byte_EAF4-Ani_obj47
000104C2 0000                       		dc.w byte_EAF8-Ani_obj47
000104C4 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000104C8 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000104D0                            		even
000104D0                            		even
000104D0                            
000104D0                            ; ---------------------------------------------------------------------------
000104D0                            ; Sprite mappings - pinball bumper (SYZ)
000104D0                            ; ---------------------------------------------------------------------------
000104D0                            Map_obj47:
000104D0                            	include "_maps\obj47.asm"
000104D0                            ; ---------------------------------------------------------------------------
000104D0                            ; Sprite mappings - pinball bumper (SYZ)
000104D0                            ; ---------------------------------------------------------------------------
000104D0 0000                       		dc.w byte_EB06-Map_obj47
000104D2 0000                       		dc.w byte_EB11-Map_obj47
000104D4 0000                       		dc.w byte_EB1C-Map_obj47
000104D6 02                         byte_EB06:	dc.b 2
000104D7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000104DC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000104E1 02                         byte_EB11:	dc.b 2
000104E2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000104E7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000104EC 02                         byte_EB1C:	dc.b 2
000104ED F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000104F2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000104F8 00                         		even
000104F8 00                         		even
000104F8                            
000104F8                            ; ===========================================================================
000104F8                            ; ---------------------------------------------------------------------------
000104F8                            ; Object 0D - signpost at the end of a level
000104F8                            ; ---------------------------------------------------------------------------
000104F8                            
000104F8                            Obj0D:					; XREF: Obj_Index
000104F8 7000                       		moveq	#0,d0
000104FA 1028 0024                  		move.b	$24(a0),d0
000104FE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00010502 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00010506 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0001050C 6100 B994                  		bsr.w	AnimateSprite
00010510 6100 EAA8                  		bsr.w	DisplaySprite
00010514 3028 0008                  		move.w	8(a0),d0
00010518 0240 FF80                  		andi.w	#$FF80,d0
0001051C 3238 F700                  		move.w	($FFFFF700).w,d1
00010520 0441 0080                  		subi.w	#$80,d1
00010524 0241 FF80                  		andi.w	#$FF80,d1
00010528 9041                       		sub.w	d1,d0
0001052A 0C40 0280                  		cmpi.w	#$280,d0
0001052E 6200 EAC6                  		bhi.w	DeleteObject
00010532 4E75                       		rts	
00010534                            ; ===========================================================================
00010534 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00010536 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00010538 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0001053A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0001053C 0000                       		dc.w locret_ED1A-Obj0D_Index
0001053E                            ; ===========================================================================
0001053E                            
0001053E                            Obj0D_Main:				; XREF: Obj0D_Index
0001053E 5428 0024                  		addq.b	#2,$24(a0)
00010542 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0001054A 317C 0680 0002             		move.w	#$680,2(a0)
00010550 117C 0004 0001             		move.b	#4,1(a0)
00010556 117C 0018 0019             		move.b	#$18,$19(a0)
0001055C 117C 0004 0018             		move.b	#4,$18(a0)
00010562                            
00010562                            Obj0D_Touch:				; XREF: Obj0D_Index
00010562 3038 D008                  		move.w	($FFFFD008).w,d0
00010566 9068 0008                  		sub.w	8(a0),d0
0001056A 6500                       		bcs.s	locret_EBBA
0001056C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010570 6400                       		bcc.s	locret_EBBA	; if not, branch
00010572 303C 00CF                  		move.w	#$CF,d0
00010576 4EB9 0000 1010             		jsr	(PlaySound).l	; play signpost	sound
0001057C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010580 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00010586 5428 0024                  		addq.b	#2,$24(a0)
0001058A                            
0001058A                            locret_EBBA:
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            Obj0D_Spin:				; XREF: Obj0D_Index
0001058C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010590 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010592 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00010598 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0001059C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000105A2 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000105A4 5428 0024                  		addq.b	#2,$24(a0)
000105A8                            
000105A8                            Obj0D_Sparkle:
000105A8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000105AC 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000105AE 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000105B4 7000                       		moveq	#0,d0
000105B6 1028 0034                  		move.b	$34(a0),d0
000105BA 5428 0034                  		addq.b	#2,$34(a0)
000105BE 0228 000E 0034             		andi.b	#$E,$34(a0)
000105C4 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000105C8 6100 EE84                  		bsr.w	SingleObjLoad
000105CC 6600                       		bne.s	locret_EC42
000105CE 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000105D2 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000105D8 101A                       		move.b	(a2)+,d0
000105DA 4880                       		ext.w	d0
000105DC D068 0008                  		add.w	8(a0),d0
000105E0 3340 0008                  		move.w	d0,8(a1)
000105E4 101A                       		move.b	(a2)+,d0
000105E6 4880                       		ext.w	d0
000105E8 D068 000C                  		add.w	$C(a0),d0
000105EC 3340 000C                  		move.w	d0,$C(a1)
000105F0 237C 0000 B718 0004        		move.l	#Map_obj25,4(a1)
000105F8 337C 27B2 0002             		move.w	#$27B2,2(a1)
000105FE 137C 0004 0001             		move.b	#4,1(a1)
00010604 137C 0002 0018             		move.b	#2,$18(a1)
0001060A 137C 0008 0019             		move.b	#8,$19(a1)
00010610                            
00010610                            locret_EC42:
00010610 4E75                       		rts	
00010612                            ; ===========================================================================
00010612 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010614 0808                       		dc.b	8,   8
00010616 F000                       		dc.b -$10,   0
00010618 18F8                       		dc.b  $18,  -8
0001061A 00F8                       		dc.b	0,  -8
0001061C 1000                       		dc.b  $10,   0
0001061E E808                       		dc.b -$18,   8
00010620 1810                       		dc.b  $18, $10
00010622                            ; ===========================================================================
00010622                            
00010622                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010622 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010626 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0001062A 0838 0001 D022             		btst	#1,($FFFFD022).w
00010630 6600                       		bne.s	loc_EC70
00010632 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00010638 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001063E                            
0001063E                            loc_EC70:
0001063E 4A38 D000                  		tst.b	($FFFFD000).w
00010642 6700                       		beq.s	loc_EC86
00010644 3038 D008                  		move.w	($FFFFD008).w,d0
00010648 3238 F72A                  		move.w	($FFFFF72A).w,d1
0001064C 0641 0128                  		addi.w	#$128,d1
00010650 B041                       		cmp.w	d1,d0
00010652 6500                       		bcs.s	locret_ECEE
00010654                            
00010654                            loc_EC86:
00010654 5428 0024                  		addq.b	#2,$24(a0)
00010658                            
00010658                            ; ---------------------------------------------------------------------------
00010658                            ; Subroutine to	set up bonuses at the end of an	act
00010658                            ; ---------------------------------------------------------------------------
00010658                            
00010658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010658                            
00010658                            
00010658                            GotThroughAct:				; XREF: Obj3E_EndAct
00010658 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0001065C 6600                       		bne.s	locret_ECEE
0001065E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010664 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00010668 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001066C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010672 7010                       		moveq	#$10,d0
00010674 4EB9 0000 1302             		jsr	(LoadPLC2).l	; load title card patterns
0001067A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010680 7000                       		moveq	#0,d0
00010682 1038 FE23                  		move.b	($FFFFFE23).w,d0
00010686 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0001068A 7200                       		moveq	#0,d1
0001068C 1238 FE24                  		move.b	($FFFFFE24).w,d1
00010690 D041                       		add.w	d1,d0		; add up your time
00010692 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010696 7214                       		moveq	#$14,d1
00010698 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0001069A 6500                       		bcs.s	loc_ECD0	; if not, branch
0001069C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001069E                            
0001069E                            loc_ECD0:
0001069E D040                       		add.w	d0,d0
000106A0 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000106A6 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000106AA C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000106AE 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000106B2 303C 008E                  		move.w	#$8E,d0
000106B6 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000106BC                            
000106BC                            locret_ECEE:
000106BC 4E75                       		rts	
000106BE                            ; End of function GotThroughAct
000106BE                            
000106BE                            ; ===========================================================================
000106BE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000106D2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000106E8                            ; ===========================================================================
000106E8                            
000106E8                            locret_ED1A:				; XREF: Obj0D_Index
000106E8 4E75                       		rts	
000106EA                            ; ===========================================================================
000106EA                            Ani_obj0D:
000106EA                            	include "_anim\obj0D.asm"
000106EA                            ; ---------------------------------------------------------------------------
000106EA                            ; Animation script - signpost
000106EA                            ; ---------------------------------------------------------------------------
000106EA 0000                       		dc.w byte_ED24-Ani_obj0D
000106EC 0000                       		dc.w byte_ED28-Ani_obj0D
000106EE 0000                       		dc.w byte_ED2E-Ani_obj0D
000106F0 0000                       		dc.w byte_ED34-Ani_obj0D
000106F2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000106F6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000106FC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00010702 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00010706 00                         		even
00010706 00                         		even
00010706                            
00010706                            ; ---------------------------------------------------------------------------
00010706                            ; Sprite mappings - signpost
00010706                            ; ---------------------------------------------------------------------------
00010706                            Map_obj0D:
00010706                            	include "_maps\obj0D.asm"
00010706                            ; ---------------------------------------------------------------------------
00010706                            ; Sprite mappings - signpost
00010706                            ; ---------------------------------------------------------------------------
00010706 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0001070A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0001070E 0000                       		dc.w byte_ED73-Map_obj0D
00010710 03                         byte_ED42:	dc.b 3
00010711 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00010716 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0001071B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010720 02                         byte_ED52:	dc.b 2
00010721 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00010726 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001072B 02                         byte_ED5D:	dc.b 2
0001072C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010731 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010736 02                         byte_ED68:	dc.b 2
00010737 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0001073C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010741 03                         byte_ED73:	dc.b 3
00010742 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00010747 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0001074C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010752 00                         		even
00010752 00                         		even
00010752                            
00010752                            ; ===========================================================================
00010752                            ; ---------------------------------------------------------------------------
00010752                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010752                            ; ---------------------------------------------------------------------------
00010752                            
00010752                            Obj4C:					; XREF: Obj_Index
00010752 7000                       		moveq	#0,d0
00010754 1028 0024                  		move.b	$24(a0),d0
00010758 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0001075C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010760 6000 0000                  		bra.w	Obj4D_ChkDel
00010764                            ; ===========================================================================
00010764 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00010766 0000                       		dc.w loc_EDCC-Obj4C_Index
00010768 0000                       		dc.w loc_EE3E-Obj4C_Index
0001076A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0001076C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0001076E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010770                            ; ===========================================================================
00010770                            
00010770                            Obj4C_Main:				; XREF: Obj4C_Index
00010770 5428 0024                  		addq.b	#2,$24(a0)
00010774 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0001077C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00010782 117C 0004 0001             		move.b	#4,1(a0)
00010788 117C 0001 0018             		move.b	#1,$18(a0)
0001078E 117C 0038 0019             		move.b	#$38,$19(a0)
00010794 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0001079A                            
0001079A                            loc_EDCC:				; XREF: Obj4C_Index
0001079A 5368 0032                  		subq.w	#1,$32(a0)
0001079E 6A00                       		bpl.s	locret_EDF0
000107A0 3168 0034 0032             		move.w	$34(a0),$32(a0)
000107A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000107AA 3228 000C                  		move.w	$C(a0),d1
000107AE B041                       		cmp.w	d1,d0
000107B0 6400                       		bcc.s	locret_EDF0
000107B2 0441 0170                  		subi.w	#$170,d1
000107B6 B041                       		cmp.w	d1,d0
000107B8 6500                       		bcs.s	locret_EDF0
000107BA 5428 0024                  		addq.b	#2,$24(a0)
000107BE                            
000107BE                            locret_EDF0:
000107BE 4E75                       		rts	
000107C0                            ; ===========================================================================
000107C0                            
000107C0                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000107C0 5428 0024                  		addq.b	#2,$24(a0)
000107C4 6100 EC9E                  		bsr.w	SingleObjLoad2
000107C8 6600                       		bne.s	loc_EE18
000107CA 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000107CE 3368 0008 0008             		move.w	8(a0),8(a1)
000107D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107DA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000107E0 2348 003C                  		move.l	a0,$3C(a1)
000107E4                            
000107E4                            loc_EE18:
000107E4 117C 0001 001C             		move.b	#1,$1C(a0)
000107EA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000107EE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000107F0 117C 0004 001C             		move.b	#4,$1C(a0)
000107F6 6000                       		bra.s	Obj4C_Display
000107F8                            ; ===========================================================================
000107F8                            
000107F8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000107F8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000107FC 08E9 0001 0022             		bset	#1,$22(a1)
00010802 337C FA80 0012             		move.w	#-$580,$12(a1)
00010808 6000                       		bra.s	Obj4C_Display
0001080A                            ; ===========================================================================
0001080A                            
0001080A                            loc_EE3E:				; XREF: Obj4C_Index
0001080A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001080E 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010810 5428 0024                  		addq.b	#2,$24(a0)
00010814 4E75                       		rts	
00010816                            ; ===========================================================================
00010816                            
00010816                            Obj4C_Display:				; XREF: Obj4C_Index
00010816 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001081C 6100 B684                  		bsr.w	AnimateSprite
00010820 6100 E798                  		bsr.w	DisplaySprite
00010824 4E75                       		rts	
00010826                            ; ===========================================================================
00010826                            
00010826                            Obj4C_Delete:				; XREF: Obj4C_Index
00010826 117C 0000 001C             		move.b	#0,$1C(a0)
0001082C 117C 0002 0024             		move.b	#2,$24(a0)
00010832 4A28 0028                  		tst.b	$28(a0)
00010836 6700 E7BE                  		beq.w	DeleteObject
0001083A 4E75                       		rts	
0001083C                            ; ===========================================================================
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            ; Object 4D - lava geyser / lavafall (MZ)
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            
0001083C                            Obj4D:					; XREF: Obj_Index
0001083C 7000                       		moveq	#0,d0
0001083E 1028 0024                  		move.b	$24(a0),d0
00010842 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010846 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001084A 6000 E76E                  		bra.w	DisplaySprite
0001084E                            ; ===========================================================================
0001084E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010850 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010852 0000                       		dc.w loc_EFFC-Obj4D_Index
00010854 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010856                            
00010856 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001085A                            ; ===========================================================================
0001085A                            
0001085A                            Obj4D_Main:				; XREF: Obj4D_Index
0001085A 5428 0024                  		addq.b	#2,$24(a0)
0001085E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010864 4A28 0028                  		tst.b	$28(a0)
00010868 6700                       		beq.s	loc_EEA4
0001086A 0468 0250 000C             		subi.w	#$250,$C(a0)
00010870                            
00010870                            loc_EEA4:
00010870 7000                       		moveq	#0,d0
00010872 1028 0028                  		move.b	$28(a0),d0
00010876 D040                       		add.w	d0,d0
00010878 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0001087E 2248                       		movea.l	a0,a1
00010880 7201                       		moveq	#1,d1
00010882 6100                       		bsr.s	Obj4D_MakeLava
00010884 6000                       		bra.s	loc_EF10
00010886                            ; ===========================================================================
00010886                            
00010886                            Obj4D_Loop:
00010886 6100 EBDC                  		bsr.w	SingleObjLoad2
0001088A 6600                       		bne.s	loc_EF0A
0001088C                            
0001088C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0001088C 12BC 004D                  		move.b	#$4D,0(a1)
00010890 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010898 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001089E 137C 0004 0001             		move.b	#4,1(a1)
000108A4 137C 0020 0019             		move.b	#$20,$19(a1)
000108AA 3368 0008 0008             		move.w	8(a0),8(a1)
000108B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000108BC 137C 0001 0018             		move.b	#1,$18(a1)
000108C2 137C 0005 001C             		move.b	#5,$1C(a1)
000108C8 4A28 0028                  		tst.b	$28(a0)
000108CC 6700                       		beq.s	loc_EF0A
000108CE 137C 0002 001C             		move.b	#2,$1C(a1)
000108D4                            
000108D4                            loc_EF0A:
000108D4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000108D8 4E75                       		rts	
000108DA                            ; ===========================================================================
000108DA                            
000108DA                            loc_EF10:				; XREF: Obj4D_Main
000108DA 0669 0060 000C             		addi.w	#$60,$C(a1)
000108E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
000108E6 0669 0060 0030             		addi.w	#$60,$30(a1)
000108EC 137C 0093 0020             		move.b	#$93,$20(a1)
000108F2 137C 0080 0016             		move.b	#$80,$16(a1)
000108F8 08E9 0004 0001             		bset	#4,1(a1)
000108FE 5829 0024                  		addq.b	#4,$24(a1)
00010902 2348 003C                  		move.l	a0,$3C(a1)
00010906 4A28 0028                  		tst.b	$28(a0)
0001090A 6700                       		beq.s	Obj4D_PlaySnd
0001090C 7200                       		moveq	#0,d1
0001090E 6100 FF76                  		bsr.w	Obj4D_Loop
00010912 5429 0024                  		addq.b	#2,$24(a1)
00010916 08E9 0004 0002             		bset	#4,2(a1)
0001091C 0669 0100 000C             		addi.w	#$100,$C(a1)
00010922 137C 0000 0018             		move.b	#0,$18(a1)
00010928 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001092E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010934 117C 0000 0028             		move.b	#0,$28(a0)
0001093A                            
0001093A                            Obj4D_PlaySnd:
0001093A 303C 00C8                  		move.w	#$C8,d0
0001093E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play flame sound
00010944                            
00010944                            Obj4D_Action:				; XREF: Obj4D_Index
00010944 7000                       		moveq	#0,d0
00010946 1028 0028                  		move.b	$28(a0),d0
0001094A D040                       		add.w	d0,d0
0001094C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010950 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010954 6100 E64A                  		bsr.w	SpeedToPos
00010958 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001095E 6100 B542                  		bsr.w	AnimateSprite
00010962                            
00010962                            Obj4D_ChkDel:				; XREF: Obj4C
00010962 3028 0008                  		move.w	8(a0),d0
00010966 0240 FF80                  		andi.w	#$FF80,d0
0001096A 3238 F700                  		move.w	($FFFFF700).w,d1
0001096E 0441 0080                  		subi.w	#$80,d1
00010972 0241 FF80                  		andi.w	#$FF80,d1
00010976 9041                       		sub.w	d1,d0
00010978 0C40 0280                  		cmpi.w	#$280,d0
0001097C 6200 E678                  		bhi.w	DeleteObject
00010980 4E75                       		rts	
00010982                            ; ===========================================================================
00010982 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010984 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010986                            ; ===========================================================================
00010986                            
00010986                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010986 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0001098C 3028 0030                  		move.w	$30(a0),d0
00010990 B068 000C                  		cmp.w	$C(a0),d0
00010994 6400                       		bcc.s	locret_EFDA
00010996 5828 0024                  		addq.b	#4,$24(a0)
0001099A 2268 003C                  		movea.l	$3C(a0),a1
0001099E 137C 0003 001C             		move.b	#3,$1C(a1)
000109A4                            
000109A4                            locret_EFDA:
000109A4 4E75                       		rts	
000109A6                            ; ===========================================================================
000109A6                            
000109A6                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000109A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000109AC 3028 0030                  		move.w	$30(a0),d0
000109B0 B068 000C                  		cmp.w	$C(a0),d0
000109B4 6400                       		bcc.s	locret_EFFA
000109B6 5828 0024                  		addq.b	#4,$24(a0)
000109BA 2268 003C                  		movea.l	$3C(a0),a1
000109BE 137C 0001 001C             		move.b	#1,$1C(a1)
000109C4                            
000109C4                            locret_EFFA:
000109C4 4E75                       		rts	
000109C6                            ; ===========================================================================
000109C6                            
000109C6                            loc_EFFC:				; XREF: Obj4D_Index
000109C6 2268 003C                  		movea.l	$3C(a0),a1
000109CA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000109D0 6700 0000                  		beq.w	Obj4D_Delete
000109D4 3029 000C                  		move.w	$C(a1),d0
000109D8 0640 0060                  		addi.w	#$60,d0
000109DC 3140 000C                  		move.w	d0,$C(a0)
000109E0 9068 0030                  		sub.w	$30(a0),d0
000109E4 4440                       		neg.w	d0
000109E6 7208                       		moveq	#8,d1
000109E8 0C40 0040                  		cmpi.w	#$40,d0
000109EC 6C00                       		bge.s	loc_F026
000109EE 720B                       		moveq	#$B,d1
000109F0                            
000109F0                            loc_F026:
000109F0 0C40 0080                  		cmpi.w	#$80,d0
000109F4 6F00                       		ble.s	loc_F02E
000109F6 720E                       		moveq	#$E,d1
000109F8                            
000109F8                            loc_F02E:
000109F8 5328 001E                  		subq.b	#1,$1E(a0)
000109FC 6A00                       		bpl.s	loc_F04C
000109FE 117C 0007 001E             		move.b	#7,$1E(a0)
00010A04 5228 001B                  		addq.b	#1,$1B(a0)
00010A08 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010A0E 6500                       		bcs.s	loc_F04C
00010A10 117C 0000 001B             		move.b	#0,$1B(a0)
00010A16                            
00010A16                            loc_F04C:
00010A16 1028 001B                  		move.b	$1B(a0),d0
00010A1A D001                       		add.b	d1,d0
00010A1C 1140 001A                  		move.b	d0,$1A(a0)
00010A20 6000 FF40                  		bra.w	Obj4D_ChkDel
00010A24                            ; ===========================================================================
00010A24                            
00010A24                            Obj4D_Delete:				; XREF: Obj4D_Index
00010A24 6000 E5D0                  		bra.w	DeleteObject
00010A28                            ; ===========================================================================
00010A28                            ; ---------------------------------------------------------------------------
00010A28                            ; Object 4E - advancing	wall of	lava (MZ)
00010A28                            ; ---------------------------------------------------------------------------
00010A28                            
00010A28                            Obj4E:					; XREF: Obj_Index
00010A28 7000                       		moveq	#0,d0
00010A2A 1028 0024                  		move.b	$24(a0),d0
00010A2E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010A32 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010A36                            ; ===========================================================================
00010A36 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010A38 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010A3A 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010A3C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010A3E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj4E_Main:				; XREF: Obj4E_Index
00010A40 5828 0024                  		addq.b	#4,$24(a0)
00010A44 2248                       		movea.l	a0,a1
00010A46 7201                       		moveq	#1,d1
00010A48 6000                       		bra.s	Obj4E_Main2
00010A4A                            ; ===========================================================================
00010A4A                            
00010A4A                            Obj4E_Loop:
00010A4A 6100 EA18                  		bsr.w	SingleObjLoad2
00010A4E 6600                       		bne.s	loc_F0C8
00010A50                            
00010A50                            Obj4E_Main2:				; XREF: Obj4E_Main
00010A50 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010A54 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010A5C 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010A62 137C 0004 0001             		move.b	#4,1(a1)
00010A68 137C 0050 0019             		move.b	#$50,$19(a1)
00010A6E 3368 0008 0008             		move.w	8(a0),8(a1)
00010A74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010A7A 137C 0001 0018             		move.b	#1,$18(a1)
00010A80 137C 0000 001C             		move.b	#0,$1C(a1)
00010A86 137C 0094 0020             		move.b	#$94,$20(a1)
00010A8C 2348 003C                  		move.l	a0,$3C(a1)
00010A90                            
00010A90                            loc_F0C8:
00010A90 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010A94                            
00010A94 5C29 0024                  		addq.b	#6,$24(a1)
00010A98 137C 0004 001A             		move.b	#4,$1A(a1)
00010A9E                            
00010A9E                            Obj4E_Action:				; XREF: Obj4E_Index
00010A9E 3038 D008                  		move.w	($FFFFD008).w,d0
00010AA2 9068 0008                  		sub.w	8(a0),d0
00010AA6 6400                       		bcc.s	Obj4E_ChkSonic
00010AA8 4440                       		neg.w	d0
00010AAA                            
00010AAA                            Obj4E_ChkSonic:
00010AAA 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010AAE 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010AB0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010AB4 9068 000C                  		sub.w	$C(a0),d0
00010AB8 6400                       		bcc.s	loc_F0F4
00010ABA 4440                       		neg.w	d0
00010ABC                            
00010ABC                            loc_F0F4:
00010ABC 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010AC0 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010AC2 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010AC8 6000                       		bra.s	Obj4E_Solid
00010ACA                            ; ===========================================================================
00010ACA                            
00010ACA                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010ACA 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010ACE 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010AD0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010AD6 5528 0024                  		subq.b	#2,$24(a0)
00010ADA                            
00010ADA                            Obj4E_Solid:				; XREF: Obj4E_Index
00010ADA 323C 002B                  		move.w	#$2B,d1
00010ADE 343C 0018                  		move.w	#$18,d2
00010AE2 3602                       		move.w	d2,d3
00010AE4 5243                       		addq.w	#1,d3
00010AE6 3828 0008                  		move.w	8(a0),d4
00010AEA 1028 0024                  		move.b	$24(a0),d0
00010AEE 3F00                       		move.w	d0,-(sp)
00010AF0 6100 0000                  		bsr.w	SolidObject
00010AF4 301F                       		move.w	(sp)+,d0
00010AF6 1140 0024                  		move.b	d0,$24(a0)
00010AFA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010B00 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010B02 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010B06 4228 0036                  		clr.b	$36(a0)
00010B0A                            
00010B0A                            Obj4E_Animate:
00010B0A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010B10 6100 B390                  		bsr.w	AnimateSprite
00010B14 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010B1A 6400                       		bcc.s	Obj4E_ChkDel
00010B1C 6100 E482                  		bsr.w	SpeedToPos
00010B20                            
00010B20                            Obj4E_ChkDel:
00010B20 6100 E498                  		bsr.w	DisplaySprite
00010B24 4A28 0036                  		tst.b	$36(a0)
00010B28 6600                       		bne.s	locret_F17E
00010B2A 3028 0008                  		move.w	8(a0),d0
00010B2E 0240 FF80                  		andi.w	#$FF80,d0
00010B32 3238 F700                  		move.w	($FFFFF700).w,d1
00010B36 0441 0080                  		subi.w	#$80,d1
00010B3A 0241 FF80                  		andi.w	#$FF80,d1
00010B3E 9041                       		sub.w	d1,d0
00010B40 0C40 0280                  		cmpi.w	#$280,d0
00010B44 6200                       		bhi.s	Obj4E_ChkGone
00010B46                            
00010B46                            locret_F17E:
00010B46 4E75                       		rts	
00010B48                            ; ===========================================================================
00010B48                            
00010B48                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010B48 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B4C 7000                       		moveq	#0,d0
00010B4E 1028 0023                  		move.b	$23(a0),d0
00010B52 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B58 117C 0008 0024             		move.b	#8,$24(a0)
00010B5E 4E75                       		rts	
00010B60                            ; ===========================================================================
00010B60                            
00010B60                            Obj4E_Move2:				; XREF: Obj4E_Index
00010B60 2268 003C                  		movea.l	$3C(a0),a1
00010B64 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010B6A 6700                       		beq.s	Obj4E_Delete
00010B6C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010B72 0468 0080 0008             		subi.w	#$80,8(a0)
00010B78 6000 E440                  		bra.w	DisplaySprite
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            Obj4E_Delete:				; XREF: Obj4E_Index
00010B7C 6000 E478                  		bra.w	DeleteObject
00010B80                            ; ===========================================================================
00010B80                            ; ---------------------------------------------------------------------------
00010B80                            ; Object 54 - invisible	lava tag (MZ)
00010B80                            ; ---------------------------------------------------------------------------
00010B80                            
00010B80                            Obj54:					; XREF: Obj_Index
00010B80 7000                       		moveq	#0,d0
00010B82 1028 0024                  		move.b	$24(a0),d0
00010B86 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010B8A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010B8E                            ; ===========================================================================
00010B8E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010B90 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010B92                            
00010B92 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010B96                            ; ===========================================================================
00010B96                            
00010B96                            Obj54_Main:				; XREF: Obj54_Index
00010B96 5428 0024                  		addq.b	#2,$24(a0)
00010B9A 7000                       		moveq	#0,d0
00010B9C 1028 0028                  		move.b	$28(a0),d0
00010BA0 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010BA6 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010BAE 117C 0084 0001             		move.b	#$84,1(a0)
00010BB4                            
00010BB4                            Obj54_ChkDel:				; XREF: Obj54_Index
00010BB4 3028 0008                  		move.w	8(a0),d0
00010BB8 0240 FF80                  		andi.w	#$FF80,d0
00010BBC 3238 F700                  		move.w	($FFFFF700).w,d1
00010BC0 0441 0080                  		subi.w	#$80,d1
00010BC4 0241 FF80                  		andi.w	#$FF80,d1
00010BC8 9041                       		sub.w	d1,d0
00010BCA 6B00 E42A                  		bmi.w	DeleteObject
00010BCE 0C40 0280                  		cmpi.w	#$280,d0
00010BD2 6200 E422                  		bhi.w	DeleteObject
00010BD6 4E75                       		rts	
00010BD8                            ; ===========================================================================
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            ; Sprite mappings - invisible lava tag (MZ)
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            Map_obj54:
00010BD8                            	include "_maps\obj54.asm"
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            ; Sprite mappings - invisible lava tag (MZ)
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8 0000                       		dc.w byte_F212-Map_obj54
00010BDA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010BDC 00                         		even
00010BDC 00                         		even
00010BDC                            
00010BDC                            Ani_obj4C:
00010BDC                            	include "_anim\obj4C.asm"
00010BDC                            ; ---------------------------------------------------------------------------
00010BDC                            ; Animation script - geyser of lava (MZ)
00010BDC                            ; ---------------------------------------------------------------------------
00010BDC 0000                       		dc.w byte_F220-Ani_obj4C
00010BDE 0000                       		dc.w byte_F22A-Ani_obj4C
00010BE0 0000                       		dc.w byte_F22E-Ani_obj4C
00010BE2 0000                       		dc.w byte_F232-Ani_obj4C
00010BE4 0000                       		dc.w byte_F23A-Ani_obj4C
00010BE6 0000                       		dc.w byte_F23E-Ani_obj4C
00010BE8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010BF2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010BF6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010BFA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010C02 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010C06 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010C0A                            		even
00010C0A                            		even
00010C0A                            
00010C0A                            Ani_obj4E:
00010C0A                            	include "_anim\obj4E.asm"
00010C0A                            ; ---------------------------------------------------------------------------
00010C0A                            ; Animation script - advancing wall of lava (MZ)
00010C0A                            ; ---------------------------------------------------------------------------
00010C0A 0000                       		dc.w byte_F244-Ani_obj4E
00010C0C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010C12                            		even
00010C12                            		even
00010C12                            
00010C12                            ; ---------------------------------------------------------------------------
00010C12                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010C12                            ; ---------------------------------------------------------------------------
00010C12                            Map_obj4C:
00010C12                            	include "_maps\obj4C.asm"
00010C12                            ; ---------------------------------------------------------------------------
00010C12                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010C12                            ; ---------------------------------------------------------------------------
00010C12 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010C16 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010C1A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010C1E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010C22 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010C26 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010C2A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010C2E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010C32 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010C36 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010C3A 02                         byte_F272:	dc.b 2
00010C3B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010C40 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010C45 02                         byte_F27D:	dc.b 2
00010C46 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010C4B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010C50 04                         byte_F288:	dc.b 4
00010C51 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010C56 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010C5B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010C60 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010C65 04                         byte_F29D:	dc.b 4
00010C66 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010C6B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010C70 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010C75 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010C7A 06                         byte_F2B2:	dc.b 6
00010C7B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010C80 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010C85 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010C8A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010C8F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010C94 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010C99 06                         byte_F2D1:	dc.b 6
00010C9A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010C9F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010CA4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010CA9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010CAE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010CB3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010CB8 02                         byte_F2F0:	dc.b 2
00010CB9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010CBE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010CC3 02                         byte_F2FB:	dc.b 2
00010CC4 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010CC9 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010CCE 0A                         byte_F306:	dc.b $A
00010CCF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CD4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CD9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CDE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CE3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CE8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CED F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010CF2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010CF7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010CFC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010D01 0A                         byte_F339:	dc.b $A
00010D02 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D07 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D0C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D11 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D16 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D1B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D20 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D25 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D2A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D2F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D34 0A                         byte_F36C:	dc.b $A
00010D35 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D3A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D3F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D44 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D49 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010D4E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D53 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010D58 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010D5D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010D62 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010D67 06                         byte_F39F:	dc.b 6
00010D68 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010D6D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010D72 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010D77 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010D7C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010D81 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010D86 06                         byte_F3BE:	dc.b 6
00010D87 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D8C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D91 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D96 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D9B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010DA0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010DA5 06                         byte_F3DD:	dc.b 6
00010DA6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010DAB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010DB0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010DB5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010DBA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010DBF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010DC4 10                         byte_F3FC:	dc.b $10
00010DC5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DCA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010DCF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010DD4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010DD9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010DDE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010DE3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010DE8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010DED 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010DF2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010DF7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010DFC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010E01 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010E06 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010E0B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010E10 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010E15 10                         byte_F44D:	dc.b $10
00010E16 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E1B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E20 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E25 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E2A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010E2F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010E34 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010E39 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010E3E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010E43 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010E48 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010E4D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010E52 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010E57 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010E5C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010E61 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010E66 10                         byte_F49E:	dc.b $10
00010E67 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010E6C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010E71 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010E76 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010E7B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010E80 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010E85 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010E8A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010E8F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010E94 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010E99 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010E9E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010EA3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010EA8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010EAD 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010EB2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010EB7 06                         byte_F4EF:	dc.b 6
00010EB8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010EBD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010EC2 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010EC7 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010ECC D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010ED1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010ED6 06                         byte_F50E:	dc.b 6
00010ED7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010EDC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010EE1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010EE6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010EEB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010EF0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010EF5 00                         byte_F52D:	dc.b 0
00010EF6                            		even
00010EF6                            		even
00010EF6                            
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            ; Sprite mappings - advancing wall of lava (MZ)
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            Map_obj4E:
00010EF6                            	include "_maps\obj4E.asm"
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            ; Sprite mappings - advancing wall of lava (MZ)
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6 0000                       		dc.w byte_F538-Map_obj4E
00010EF8 0000                       		dc.w byte_F566-Map_obj4E
00010EFA 0000                       		dc.w byte_F594-Map_obj4E
00010EFC 0000                       		dc.w byte_F5C2-Map_obj4E
00010EFE 0000                       		dc.w byte_F5F0-Map_obj4E
00010F00 09                         byte_F538:	dc.b 9
00010F01 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010F06 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010F0B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F10 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F15 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F1A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F1F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F24 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F29 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F2E 09                         byte_F566:	dc.b 9
00010F2F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010F34 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010F39 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F3E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F43 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F48 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F4D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F52 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F57 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F5C 09                         byte_F594:	dc.b 9
00010F5D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010F62 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010F67 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F6C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F71 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F76 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F7B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F80 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F85 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F8A 09                         byte_F5C2:	dc.b 9
00010F8B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010F90 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010F95 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F9A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F9F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010FA4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010FA9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010FAE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010FB3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010FB8 08                         byte_F5F0:	dc.b 8
00010FB9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010FBE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010FC3 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010FC8 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010FCD E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010FD2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010FD7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010FDC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010FE2 00                         		even
00010FE2 00                         		even
00010FE2                            
00010FE2                            ; ===========================================================================
00010FE2                            ; ---------------------------------------------------------------------------
00010FE2                            ; Object 40 - Moto Bug enemy (GHZ)
00010FE2                            ; ---------------------------------------------------------------------------
00010FE2                            
00010FE2                            Obj40:					; XREF: Obj_Index
00010FE2 7000                       		moveq	#0,d0
00010FE4 1028 0024                  		move.b	$24(a0),d0
00010FE8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010FEC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010FF0                            ; ===========================================================================
00010FF0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010FF2 0000                       		dc.w Obj40_Action-Obj40_Index
00010FF4 0000                       		dc.w Obj40_Animate-Obj40_Index
00010FF6 0000                       		dc.w Obj40_Delete-Obj40_Index
00010FF8                            ; ===========================================================================
00010FF8                            
00010FF8                            Obj40_Main:				; XREF: Obj40_Index
00010FF8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00011000 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011006 117C 0004 0001             		move.b	#4,1(a0)
0001100C 117C 0004 0018             		move.b	#4,$18(a0)
00011012 117C 0014 0019             		move.b	#$14,$19(a0)
00011018 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0001101C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001101E 117C 000E 0016             		move.b	#$E,$16(a0)
00011024 117C 0008 0017             		move.b	#8,$17(a0)
0001102A 117C 000C 0020             		move.b	#$C,$20(a0)
00011030 6100 DF4E                  		bsr.w	ObjectFall
00011034 4EB9 0000 0000             		jsr	ObjHitFloor
0001103A 4A41                       		tst.w	d1
0001103C 6A00                       		bpl.s	locret_F68A
0001103E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011042 317C 0000 0012             		move.w	#0,$12(a0)
00011048 5428 0024                  		addq.b	#2,$24(a0)
0001104C 0868 0000 0022             		bchg	#0,$22(a0)
00011052                            
00011052                            locret_F68A:
00011052 4E75                       		rts	
00011054                            ; ===========================================================================
00011054                            
00011054                            Obj40_SetSmoke:				; XREF: Obj40_Main
00011054 5828 0024                  		addq.b	#4,$24(a0)
00011058 6000 0000                  		bra.w	Obj40_Animate
0001105C                            ; ===========================================================================
0001105C                            
0001105C                            Obj40_Action:				; XREF: Obj40_Index
0001105C 7000                       		moveq	#0,d0
0001105E 1028 0025                  		move.b	$25(a0),d0
00011062 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00011066 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001106A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011070 6100 AE30                  		bsr.w	AnimateSprite
00011074                            
00011074                            ; ---------------------------------------------------------------------------
00011074                            ; Routine to mark an enemy/monitor/ring	as destroyed
00011074                            ; ---------------------------------------------------------------------------
00011074                            
00011074                            MarkObjGone:
00011074 3028 0008                  		move.w	8(a0),d0
00011078 0240 FF80                  		andi.w	#$FF80,d0
0001107C 3238 F700                  		move.w	($FFFFF700).w,d1
00011080 0441 0080                  		subi.w	#$80,d1
00011084 0241 FF80                  		andi.w	#$FF80,d1
00011088 9041                       		sub.w	d1,d0
0001108A 0C40 0280                  		cmpi.w	#$280,d0
0001108E 6200 0000                  		bhi.w	Mark_ChkGone
00011092 6000 DF26                  		bra.w	DisplaySprite
00011096                            ; ===========================================================================
00011096                            
00011096                            Mark_ChkGone:
00011096 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001109A 7000                       		moveq	#0,d0
0001109C 1028 0023                  		move.b	$23(a0),d0
000110A0 6700                       		beq.s	Mark_Delete
000110A2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000110A8                            
000110A8                            Mark_Delete:
000110A8 6000 DF4C                  		bra.w	DeleteObject
000110AC                            
000110AC                            ; ===========================================================================
000110AC 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000110AE 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000110B0                            ; ===========================================================================
000110B0                            
000110B0                            Obj40_Move:				; XREF: Obj40_Index2
000110B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000110B4 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000110B6 5428 0025                  		addq.b	#2,$25(a0)
000110BA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000110C0 117C 0001 001C             		move.b	#1,$1C(a0)
000110C6 0868 0000 0022             		bchg	#0,$22(a0)
000110CC 6600                       		bne.s	locret_F70A
000110CE 4468 0010                  		neg.w	$10(a0)		; change direction
000110D2                            
000110D2                            locret_F70A:
000110D2 4E75                       		rts	
000110D4                            ; ===========================================================================
000110D4                            
000110D4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000110D4 6100 DECA                  		bsr.w	SpeedToPos
000110D8 4EB9 0000 0000             		jsr	ObjHitFloor
000110DE 0C41 FFF8                  		cmpi.w	#-8,d1
000110E2 6D00                       		blt.s	Obj40_Pause
000110E4 0C41 000C                  		cmpi.w	#$C,d1
000110E8 6C00                       		bge.s	Obj40_Pause
000110EA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000110EE 5328 0033                  		subq.b	#1,$33(a0)
000110F2 6A00                       		bpl.s	locret_F756
000110F4 117C 000F 0033             		move.b	#$F,$33(a0)
000110FA 6100 E352                  		bsr.w	SingleObjLoad
000110FE 6600                       		bne.s	locret_F756
00011100 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011104 3368 0008 0008             		move.w	8(a0),8(a1)
0001110A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011110 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011116 137C 0002 001C             		move.b	#2,$1C(a1)
0001111C                            
0001111C                            locret_F756:
0001111C 4E75                       		rts	
0001111E                            ; ===========================================================================
0001111E                            
0001111E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001111E 5528 0025                  		subq.b	#2,$25(a0)
00011122 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011128 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001112E 117C 0000 001C             		move.b	#0,$1C(a0)
00011134 4E75                       		rts	
00011136                            ; ===========================================================================
00011136                            
00011136                            Obj40_Animate:				; XREF: Obj40_Index
00011136 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001113C 6100 AD64                  		bsr.w	AnimateSprite
00011140 6000 DE78                  		bra.w	DisplaySprite
00011144                            ; ===========================================================================
00011144                            
00011144                            Obj40_Delete:				; XREF: Obj40_Index
00011144 6000 DEB0                  		bra.w	DeleteObject
00011148                            ; ===========================================================================
00011148                            Ani_obj40:
00011148                            	include "_anim\obj40.asm"
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Animation script - Motobug enemy
00011148                            ; ---------------------------------------------------------------------------
00011148 0000                       		dc.w byte_F788-Ani_obj40
0001114A 0000                       		dc.w byte_F78C-Ani_obj40
0001114C 0000                       		dc.w byte_F792-Ani_obj40
0001114E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011152 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011158 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011166                            		even
00011166                            		even
00011166                            
00011166                            ; ---------------------------------------------------------------------------
00011166                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011166                            ; ---------------------------------------------------------------------------
00011166                            Map_obj40:
00011166                            	include "_maps\obj40.asm"
00011166                            ; ---------------------------------------------------------------------------
00011166                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011166                            ; ---------------------------------------------------------------------------
00011166 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001116A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001116E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011172 0000                       		dc.w byte_F804-Map_obj40
00011174 04                         byte_F7AE:	dc.b 4
00011175 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001117A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0001117F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011184 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00011189 04                         byte_F7C3:	dc.b 4
0001118A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0001118F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00011194 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00011199 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0001119E 05                         byte_F7D8:	dc.b 5
0001119F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000111A4 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000111A9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000111AE 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000111B3 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000111B8 01                         byte_F7F2:	dc.b 1
000111B9 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000111BE 01                         byte_F7F8:	dc.b 1
000111BF FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000111C4 01                         byte_F7FE:	dc.b 1
000111C5 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000111CA 00                         byte_F804:	dc.b 0
000111CC 00                         		even
000111CC 00                         		even
000111CC                            
000111CC                            ; ===========================================================================
000111CC                            ; ---------------------------------------------------------------------------
000111CC                            ; Object 4F - blank
000111CC                            ; ---------------------------------------------------------------------------
000111CC                            
000111CC                            Obj4F:					; XREF: Obj_Index
000111CC 4E75                       		rts	
000111CE                            
000111CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000111CE                            
000111CE                            
000111CE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000111CE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000111D2 D047                       		add.w	d7,d0
000111D4 0240 0003                  		andi.w	#3,d0
000111D8 6600                       		bne.s	loc_F836
000111DA 7600                       		moveq	#0,d3
000111DC 1628 0019                  		move.b	$19(a0),d3
000111E0 4A68 0010                  		tst.w	$10(a0)
000111E4 6B00                       		bmi.s	loc_F82C
000111E6 6100 0000                  		bsr.w	ObjHitWallRight
000111EA 4A41                       		tst.w	d1
000111EC 6A00                       		bpl.s	loc_F836
000111EE                            
000111EE                            loc_F828:
000111EE 7001                       		moveq	#1,d0
000111F0 4E75                       		rts	
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            loc_F82C:
000111F2 4643                       		not.w	d3
000111F4 6100 0000                  		bsr.w	ObjHitWallLeft
000111F8 4A41                       		tst.w	d1
000111FA 6BF2                       		bmi.s	loc_F828
000111FC                            
000111FC                            loc_F836:
000111FC 7000                       		moveq	#0,d0
000111FE 4E75                       		rts	
00011200                            ; End of function Obj50_ChkWall
00011200                            
00011200                            ; ===========================================================================
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Object 50 - Yadrin enemy (SYZ)
00011200                            ; ---------------------------------------------------------------------------
00011200                            
00011200                            Obj50:					; XREF: Obj_Index
00011200 7000                       		moveq	#0,d0
00011202 1028 0024                  		move.b	$24(a0),d0
00011206 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001120A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001120E                            ; ===========================================================================
0001120E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00011210 0000                       		dc.w Obj50_Action-Obj50_Index
00011212                            ; ===========================================================================
00011212                            
00011212                            Obj50_Main:				; XREF: Obj50_Index
00011212 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001121A 317C 247B 0002             		move.w	#$247B,2(a0)
00011220 117C 0004 0001             		move.b	#4,1(a0)
00011226 117C 0004 0018             		move.b	#4,$18(a0)
0001122C 117C 0014 0019             		move.b	#$14,$19(a0)
00011232 117C 0011 0016             		move.b	#$11,$16(a0)
00011238 117C 0008 0017             		move.b	#8,$17(a0)
0001123E 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011244 6100 DD3A                  		bsr.w	ObjectFall
00011248 6100 0000                  		bsr.w	ObjHitFloor
0001124C 4A41                       		tst.w	d1
0001124E 6A00                       		bpl.s	locret_F89E
00011250 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011254 317C 0000 0012             		move.w	#0,$12(a0)
0001125A 5428 0024                  		addq.b	#2,$24(a0)
0001125E 0868 0000 0022             		bchg	#0,$22(a0)
00011264                            
00011264                            locret_F89E:
00011264 4E75                       		rts	
00011266                            ; ===========================================================================
00011266                            
00011266                            Obj50_Action:				; XREF: Obj50_Index
00011266 7000                       		moveq	#0,d0
00011268 1028 0025                  		move.b	$25(a0),d0
0001126C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011270 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011274 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001127A 6100 AC26                  		bsr.w	AnimateSprite
0001127E 6000 FDF4                  		bra.w	MarkObjGone
00011282                            ; ===========================================================================
00011282 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011284 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011286                            ; ===========================================================================
00011286                            
00011286                            Obj50_Move:				; XREF: Obj50_Index2
00011286 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001128A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001128C 5428 0025                  		addq.b	#2,$25(a0)
00011290 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00011296 117C 0001 001C             		move.b	#1,$1C(a0)
0001129C 0868 0000 0022             		bchg	#0,$22(a0)
000112A2 6600                       		bne.s	locret_F8E2
000112A4 4468 0010                  		neg.w	$10(a0)		; change direction
000112A8                            
000112A8                            locret_F8E2:
000112A8 4E75                       		rts	
000112AA                            ; ===========================================================================
000112AA                            
000112AA                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000112AA 6100 DCF4                  		bsr.w	SpeedToPos
000112AE 6100 0000                  		bsr.w	ObjHitFloor
000112B2 0C41 FFF8                  		cmpi.w	#-8,d1
000112B6 6D00                       		blt.s	Obj50_Pause
000112B8 0C41 000C                  		cmpi.w	#$C,d1
000112BC 6C00                       		bge.s	Obj50_Pause
000112BE D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000112C2 6100 FF0A                  		bsr.w	Obj50_ChkWall
000112C6 6600                       		bne.s	Obj50_Pause
000112C8 4E75                       		rts	
000112CA                            ; ===========================================================================
000112CA                            
000112CA                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000112CA 5528 0025                  		subq.b	#2,$25(a0)
000112CE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000112D4 317C 0000 0010             		move.w	#0,$10(a0)
000112DA 117C 0000 001C             		move.b	#0,$1C(a0)
000112E0 4E75                       		rts	
000112E2                            ; ===========================================================================
000112E2                            Ani_obj50:
000112E2                            	include "_anim\obj50.asm"
000112E2                            ; ---------------------------------------------------------------------------
000112E2                            ; Animation script - Yadrin enemy
000112E2                            ; ---------------------------------------------------------------------------
000112E2 0000                       		dc.w byte_F920-Ani_obj50
000112E4 0000                       		dc.w byte_F924-Ani_obj50
000112E6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000112EA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000112F4                            		even
000112F4                            		even
000112F4                            
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            ; Sprite mappings - Yadrin enemy (SYZ)
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            Map_obj50:
000112F4                            	include "_maps\obj50.asm"
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            ; Sprite mappings - Yadrin enemy (SYZ)
000112F4                            ; ---------------------------------------------------------------------------
000112F4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000112F8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000112FC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00011300 05                         byte_F93A:	dc.b 5
00011301 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011306 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001130B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011310 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011315 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001131A 05                         byte_F954:	dc.b 5
0001131B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011320 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011325 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001132A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001132F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011334 05                         byte_F96E:	dc.b 5
00011335 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001133A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001133F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011344 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011349 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001134E 05                         byte_F988:	dc.b 5
0001134F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011354 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011359 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001135E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011363 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011368 05                         byte_F9A2:	dc.b 5
00011369 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001136E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011373 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011378 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001137D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011382 05                         byte_F9BC:	dc.b 5
00011383 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011388 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001138D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011392 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011397 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001139C                            		even
0001139C                            		even
0001139C                            
0001139C                            ; ---------------------------------------------------------------------------
0001139C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001139C                            ;
0001139C                            ; variables:
0001139C                            ; d1 = width
0001139C                            ; d2 = height /	2 (when	jumping)
0001139C                            ; d3 = height /	2 (when	walking)
0001139C                            ; d4 = x-axis position
0001139C                            ; ---------------------------------------------------------------------------
0001139C                            
0001139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001139C                            
0001139C                            
0001139C                            SolidObject:
0001139C 4A28 0025                  		tst.b	$25(a0)
000113A0 6700 0000                  		beq.w	loc_FAC8
000113A4 3401                       		move.w	d1,d2
000113A6 D442                       		add.w	d2,d2
000113A8 43F8 D000                  		lea	($FFFFD000).w,a1
000113AC 0829 0001 0022             		btst	#1,$22(a1)
000113B2 6600                       		bne.s	loc_F9FE
000113B4 3029 0008                  		move.w	8(a1),d0
000113B8 9068 0008                  		sub.w	8(a0),d0
000113BC D041                       		add.w	d1,d0
000113BE 6B00                       		bmi.s	loc_F9FE
000113C0 B042                       		cmp.w	d2,d0
000113C2 6500                       		bcs.s	loc_FA12
000113C4                            
000113C4                            loc_F9FE:
000113C4 08A9 0003 0022             		bclr	#3,$22(a1)
000113CA 08A8 0003 0022             		bclr	#3,$22(a0)
000113D0 4228 0025                  		clr.b	$25(a0)
000113D4 7800                       		moveq	#0,d4
000113D6 4E75                       		rts	
000113D8                            ; ===========================================================================
000113D8                            
000113D8                            loc_FA12:
000113D8 3404                       		move.w	d4,d2
000113DA 4EB9 0000 927E             		jsr	MvSonicOnPtfm
000113E0 7800                       		moveq	#0,d4
000113E2 4E75                       		rts	
000113E4                            ; ===========================================================================
000113E4                            
000113E4                            SolidObject71:				; XREF: Obj71_Solid
000113E4 4A28 0025                  		tst.b	$25(a0)
000113E8 6700 0000                  		beq.w	loc_FAD0
000113EC 3401                       		move.w	d1,d2
000113EE D442                       		add.w	d2,d2
000113F0 43F8 D000                  		lea	($FFFFD000).w,a1
000113F4 0829 0001 0022             		btst	#1,$22(a1)
000113FA 6600                       		bne.s	loc_FA44
000113FC 3029 0008                  		move.w	8(a1),d0
00011400 9068 0008                  		sub.w	8(a0),d0
00011404 D041                       		add.w	d1,d0
00011406 6B00                       		bmi.s	loc_FA44
00011408 B042                       		cmp.w	d2,d0
0001140A 6500                       		bcs.s	loc_FA58
0001140C                            
0001140C                            loc_FA44:
0001140C 08A9 0003 0022             		bclr	#3,$22(a1)
00011412 08A8 0003 0022             		bclr	#3,$22(a0)
00011418 4228 0025                  		clr.b	$25(a0)
0001141C 7800                       		moveq	#0,d4
0001141E 4E75                       		rts	
00011420                            ; ===========================================================================
00011420                            
00011420                            loc_FA58:
00011420 3404                       		move.w	d4,d2
00011422 4EB9 0000 927E             		jsr	MvSonicOnPtfm
00011428 7800                       		moveq	#0,d4
0001142A 4E75                       		rts	
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            SolidObject2F:				; XREF: Obj2F_Solid
0001142C 43F8 D000                  		lea	($FFFFD000).w,a1
00011430 4A28 0001                  		tst.b	1(a0)
00011434 6A00 0000                  		bpl.w	loc_FB92
00011438 3029 0008                  		move.w	8(a1),d0
0001143C 9068 0008                  		sub.w	8(a0),d0
00011440 D041                       		add.w	d1,d0
00011442 6B00 0000                  		bmi.w	loc_FB92
00011446 3601                       		move.w	d1,d3
00011448 D643                       		add.w	d3,d3
0001144A B043                       		cmp.w	d3,d0
0001144C 6200 0000                  		bhi.w	loc_FB92
00011450 3A00                       		move.w	d0,d5
00011452 0828 0000 0001             		btst	#0,1(a0)
00011458 6700                       		beq.s	loc_FA94
0001145A 4645                       		not.w	d5
0001145C DA43                       		add.w	d3,d5
0001145E                            
0001145E                            loc_FA94:
0001145E E24D                       		lsr.w	#1,d5
00011460 7600                       		moveq	#0,d3
00011462 1632 5000                  		move.b	(a2,d5.w),d3
00011466 9612                       		sub.b	(a2),d3
00011468 3A28 000C                  		move.w	$C(a0),d5
0001146C 9A43                       		sub.w	d3,d5
0001146E 1629 0016                  		move.b	$16(a1),d3
00011472 4883                       		ext.w	d3
00011474 D443                       		add.w	d3,d2
00011476 3629 000C                  		move.w	$C(a1),d3
0001147A 9645                       		sub.w	d5,d3
0001147C 5843                       		addq.w	#4,d3
0001147E D642                       		add.w	d2,d3
00011480 6B00 0000                  		bmi.w	loc_FB92
00011484 3802                       		move.w	d2,d4
00011486 D844                       		add.w	d4,d4
00011488 B644                       		cmp.w	d4,d3
0001148A 6400 0000                  		bcc.w	loc_FB92
0001148E 6000 0000                  		bra.w	loc_FB0E
00011492                            ; ===========================================================================
00011492                            
00011492                            loc_FAC8:
00011492 4A28 0001                  		tst.b	1(a0)
00011496 6A00 0000                  		bpl.w	loc_FB92
0001149A                            
0001149A                            loc_FAD0:
0001149A 43F8 D000                  		lea	($FFFFD000).w,a1
0001149E 3029 0008                  		move.w	8(a1),d0
000114A2 9068 0008                  		sub.w	8(a0),d0
000114A6 D041                       		add.w	d1,d0
000114A8 6B00 0000                  		bmi.w	loc_FB92
000114AC 3601                       		move.w	d1,d3
000114AE D643                       		add.w	d3,d3
000114B0 B043                       		cmp.w	d3,d0
000114B2 6200 0000                  		bhi.w	loc_FB92
000114B6 1629 0016                  		move.b	$16(a1),d3
000114BA 4883                       		ext.w	d3
000114BC D443                       		add.w	d3,d2
000114BE 3629 000C                  		move.w	$C(a1),d3
000114C2 9668 000C                  		sub.w	$C(a0),d3
000114C6 5843                       		addq.w	#4,d3
000114C8 D642                       		add.w	d2,d3
000114CA 6B00 0000                  		bmi.w	loc_FB92
000114CE 3802                       		move.w	d2,d4
000114D0 D844                       		add.w	d4,d4
000114D2 B644                       		cmp.w	d4,d3
000114D4 6400 0000                  		bcc.w	loc_FB92
000114D8                            
000114D8                            loc_FB0E:
000114D8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000114DC 6B00 0000                  		bmi.w	loc_FB92
000114E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000114E6 6400 0000                  		bcc.w	loc_FB92
000114EA 4A78 FE08                  		tst.w	($FFFFFE08).w
000114EE 6600 0000                  		bne.w	loc_FBAC
000114F2 3A00                       		move.w	d0,d5
000114F4 B240                       		cmp.w	d0,d1
000114F6 6400                       		bcc.s	loc_FB36
000114F8 D241                       		add.w	d1,d1
000114FA 9041                       		sub.w	d1,d0
000114FC 3A00                       		move.w	d0,d5
000114FE 4445                       		neg.w	d5
00011500                            
00011500                            loc_FB36:
00011500 3203                       		move.w	d3,d1
00011502 B443                       		cmp.w	d3,d2
00011504 6400                       		bcc.s	loc_FB44
00011506 5943                       		subq.w	#4,d3
00011508 9644                       		sub.w	d4,d3
0001150A 3203                       		move.w	d3,d1
0001150C 4441                       		neg.w	d1
0001150E                            
0001150E                            loc_FB44:
0001150E BA41                       		cmp.w	d1,d5
00011510 6200 0000                  		bhi.w	loc_FBB0
00011514 0C41 0004                  		cmpi.w	#4,d1
00011518 6300                       		bls.s	loc_FB8C
0001151A 4A40                       		tst.w	d0
0001151C 6700                       		beq.s	loc_FB70
0001151E 6B00                       		bmi.s	loc_FB5E
00011520 4A69 0010                  		tst.w	$10(a1)
00011524 6B00                       		bmi.s	loc_FB70
00011526 6000                       		bra.s	loc_FB64
00011528                            ; ===========================================================================
00011528                            
00011528                            loc_FB5E:
00011528 4A69 0010                  		tst.w	$10(a1)
0001152C 6A00                       		bpl.s	loc_FB70
0001152E                            
0001152E                            loc_FB64:
0001152E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00011534 337C 0000 0010             		move.w	#0,$10(a1)
0001153A                            
0001153A                            loc_FB70:
0001153A 9169 0008                  		sub.w	d0,8(a1)
0001153E 0829 0001 0022             		btst	#1,$22(a1)
00011544 6600                       		bne.s	loc_FB8C
00011546 08E9 0005 0022             		bset	#5,$22(a1)
0001154C 08E8 0005 0022             		bset	#5,$22(a0)
00011552 7801                       		moveq	#1,d4
00011554 4E75                       		rts	
00011556                            ; ===========================================================================
00011556                            
00011556                            loc_FB8C:
00011556 6100                       		bsr.s	loc_FBA0
00011558 7801                       		moveq	#1,d4
0001155A 4E75                       		rts	
0001155C                            ; ===========================================================================
0001155C                            
0001155C                            loc_FB92:
0001155C 0828 0005 0022             		btst	#5,$22(a0)
00011562 6700                       		beq.s	loc_FBAC
00011564 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001156A 6700                       		beq.s	loc_FBA0
0001156C 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011572 6700                       		beq.s	loc_FBA0
00011574 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001157A 6700                       		beq.s	loc_FBA0
0001157C 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011582                            
00011582                            loc_FBA0:
00011582 08A8 0005 0022             		bclr	#5,$22(a0)
00011588 08A9 0005 0022             		bclr	#5,$22(a1)
0001158E                            
0001158E                            loc_FBAC:
0001158E 7800                       		moveq	#0,d4
00011590 4E75                       		rts	
00011592                            ; ===========================================================================
00011592                            
00011592                            loc_FBB0:
00011592 4A43                       		tst.w	d3
00011594 6B00                       		bmi.s	loc_FBBC
00011596 0C43 0010                  		cmpi.w	#$10,d3
0001159A 6500                       		bcs.s	loc_FBEE
0001159C 60BE                       		bra.s	loc_FB92
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            loc_FBBC:
0001159E 4A69 0012                  		tst.w	$12(a1)
000115A2 6700                       		beq.s	loc_FBD6
000115A4 6A00                       		bpl.s	loc_FBD2
000115A6 4A43                       		tst.w	d3
000115A8 6A00                       		bpl.s	loc_FBD2
000115AA 9769 000C                  		sub.w	d3,$C(a1)
000115AE 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000115B4                            
000115B4                            loc_FBD2:
000115B4 78FF                       		moveq	#-1,d4
000115B6 4E75                       		rts	
000115B8                            ; ===========================================================================
000115B8                            
000115B8                            loc_FBD6:
000115B8 0829 0001 0022             		btst	#1,$22(a1)
000115BE 66F4                       		bne.s	loc_FBD2
000115C0 2F08                       		move.l	a0,-(sp)
000115C2 2049                       		movea.l	a1,a0
000115C4 4EB9 0000 0000             		jsr	KillSonic
000115CA 205F                       		movea.l	(sp)+,a0
000115CC 78FF                       		moveq	#-1,d4
000115CE 4E75                       		rts	
000115D0                            ; ===========================================================================
000115D0                            
000115D0                            loc_FBEE:
000115D0 5943                       		subq.w	#4,d3
000115D2 7200                       		moveq	#0,d1
000115D4 1228 0019                  		move.b	$19(a0),d1
000115D8 3401                       		move.w	d1,d2
000115DA D442                       		add.w	d2,d2
000115DC D269 0008                  		add.w	8(a1),d1
000115E0 9268 0008                  		sub.w	8(a0),d1
000115E4 6B00                       		bmi.s	loc_FC28
000115E6 B242                       		cmp.w	d2,d1
000115E8 6400                       		bcc.s	loc_FC28
000115EA 4A69 0012                  		tst.w	$12(a1)
000115EE 6B00                       		bmi.s	loc_FC28
000115F0 9769 000C                  		sub.w	d3,$C(a1)
000115F4 5369 000C                  		subq.w	#1,$C(a1)
000115F8 6100                       		bsr.s	sub_FC2C
000115FA 117C 0002 0025             		move.b	#2,$25(a0)
00011600 08E8 0003 0022             		bset	#3,$22(a0)
00011606 78FF                       		moveq	#-1,d4
00011608 4E75                       		rts	
0001160A                            ; ===========================================================================
0001160A                            
0001160A                            loc_FC28:
0001160A 7800                       		moveq	#0,d4
0001160C 4E75                       		rts	
0001160E                            ; End of function SolidObject
0001160E                            
0001160E                            
0001160E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001160E                            
0001160E                            
0001160E                            sub_FC2C:				; XREF: SolidObject
0001160E 0829 0003 0022             		btst	#3,$22(a1)
00011614 6700                       		beq.s	loc_FC4E
00011616 7000                       		moveq	#0,d0
00011618 1029 003D                  		move.b	$3D(a1),d0
0001161C ED48                       		lsl.w	#6,d0
0001161E 0680 00FF D000             		addi.l	#$FFD000,d0
00011624 2440                       		movea.l	d0,a2
00011626 08AA 0003 0022             		bclr	#3,$22(a2)
0001162C 422A 0025                  		clr.b	$25(a2)
00011630                            
00011630                            loc_FC4E:
00011630 3008                       		move.w	a0,d0
00011632 0440 D000                  		subi.w	#-$3000,d0
00011636 EC48                       		lsr.w	#6,d0
00011638 0240 007F                  		andi.w	#$7F,d0
0001163C 1340 003D                  		move.b	d0,$3D(a1)
00011640 137C 0000 0026             		move.b	#0,$26(a1)
00011646 337C 0000 0012             		move.w	#0,$12(a1)
0001164C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00011652 0829 0001 0022             		btst	#1,$22(a1)
00011658 6700                       		beq.s	loc_FC84
0001165A 2F08                       		move.l	a0,-(sp)
0001165C 2049                       		movea.l	a1,a0
0001165E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011664 205F                       		movea.l	(sp)+,a0
00011666                            
00011666                            loc_FC84:
00011666 08E9 0003 0022             		bset	#3,$22(a1)
0001166C 08E8 0003 0022             		bset	#3,$22(a0)
00011672 4E75                       		rts	
00011674                            ; End of function sub_FC2C
00011674                            
00011674                            ; ===========================================================================
00011674                            ; ---------------------------------------------------------------------------
00011674                            ; Object 51 - smashable	green block (MZ)
00011674                            ; ---------------------------------------------------------------------------
00011674                            
00011674                            Obj51:					; XREF: Obj_Index
00011674 7000                       		moveq	#0,d0
00011676 1028 0024                  		move.b	$24(a0),d0
0001167A 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001167E 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00011682 6000 F9F0                  		bra.w	MarkObjGone
00011686                            ; ===========================================================================
00011686 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011688 0000                       		dc.w Obj51_Solid-Obj51_Index
0001168A 0000                       		dc.w Obj51_Display-Obj51_Index
0001168C                            ; ===========================================================================
0001168C                            
0001168C                            Obj51_Main:				; XREF: Obj51_Index
0001168C 5428 0024                  		addq.b	#2,$24(a0)
00011690 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00011698 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001169E 117C 0004 0001             		move.b	#4,1(a0)
000116A4 117C 0010 0019             		move.b	#$10,$19(a0)
000116AA 117C 0004 0018             		move.b	#4,$18(a0)
000116B0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000116B6                            
000116B6                            Obj51_Solid:				; XREF: Obj51_Index
000116B6 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000116BC 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000116C2 323C 001B                  		move.w	#$1B,d1
000116C6 343C 0010                  		move.w	#$10,d2
000116CA 363C 0011                  		move.w	#$11,d3
000116CE 3828 0008                  		move.w	8(a0),d4
000116D2 6100 FCC8                  		bsr.w	SolidObject
000116D6 0828 0003 0022             		btst	#3,$22(a0)
000116DC 6600                       		bne.s	Obj51_Smash
000116DE                            
000116DE                            locret_FCFC:
000116DE 4E75                       		rts	
000116E0                            ; ===========================================================================
000116E0                            
000116E0                            Obj51_Smash:				; XREF: Obj51_Solid
000116E0                            	;	cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000116E0                            	;	bne.s	locret_FCFC	; if not, branch
000116E0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000116E6 08E9 0002 0022             		bset	#2,$22(a1)
000116EC 137C 000E 0016             		move.b	#$E,$16(a1)
000116F2 137C 0007 0017             		move.b	#7,$17(a1)
000116F8 137C 0002 001C             		move.b	#2,$1C(a1)
000116FE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011704 08E9 0001 0022             		bset	#1,$22(a1)
0001170A 08A9 0003 0022             		bclr	#3,$22(a1)
00011710 137C 0002 0024             		move.b	#2,$24(a1)
00011716 08A8 0003 0022             		bclr	#3,$22(a0)
0001171C 4228 0025                  		clr.b	$25(a0)
00011720 117C 0001 001A             		move.b	#1,$1A(a0)
00011726 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001172C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001172E 343C 0038                  		move.w	#$38,d2
00011732 6100 D484                  		bsr.w	SmashObject
00011736 6100 DD16                  		bsr.w	SingleObjLoad
0001173A 6600                       		bne.s	Obj51_Display
0001173C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011740 3368 0008 0008             		move.w	8(a0),8(a1)
00011746 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001174C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011750 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011754 0C42 0006                  		cmpi.w	#6,d2
00011758 6500                       		bcs.s	Obj51_Bonus
0001175A 7406                       		moveq	#6,d2
0001175C                            
0001175C                            Obj51_Bonus:
0001175C 7000                       		moveq	#0,d0
0001175E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011762 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011768 6500                       		bcs.s	loc_FD98	; if not, branch
0001176A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001176E 740A                       		moveq	#10,d2
00011770                            
00011770                            loc_FD98:
00011770 4EB9 0000 0000             		jsr	AddPoints
00011776 E24A                       		lsr.w	#1,d2
00011778 1342 001A                  		move.b	d2,$1A(a1)
0001177C                            
0001177C                            Obj51_Display:				; XREF: Obj51_Index
0001177C 6100 D822                  		bsr.w	SpeedToPos
00011780 0668 0038 0012             		addi.w	#$38,$12(a0)
00011786 6100 D832                  		bsr.w	DisplaySprite
0001178A 4A28 0001                  		tst.b	1(a0)
0001178E 6A00 D866                  		bpl.w	DeleteObject
00011792 4E75                       		rts	
00011794                            ; ===========================================================================
00011794 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00011798 FF00 FF00                  		dc.w $FF00, $FF00
0001179C 0200 FE00                  		dc.w $200, $FE00
000117A0 0100 FF00                  		dc.w $100, $FF00
000117A4                            
000117A4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000117AC                            ; ---------------------------------------------------------------------------
000117AC                            ; Sprite mappings - smashable green block (MZ)
000117AC                            ; ---------------------------------------------------------------------------
000117AC                            Map_obj51:
000117AC                            	include "_maps\obj51.asm"
000117AC                            ; ---------------------------------------------------------------------------
000117AC                            ; Sprite mappings - smashable green block (MZ)
000117AC                            ; ---------------------------------------------------------------------------
000117AC 0000                       		dc.w byte_FDD8-Map_obj51
000117AE 0000                       		dc.w byte_FDE3-Map_obj51
000117B0 02                         byte_FDD8:	dc.b 2
000117B1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000117B6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000117BB 04                         byte_FDE3:	dc.b 4
000117BC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000117C1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000117C6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000117CB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000117D0                            		even
000117D0                            		even
000117D0                            
000117D0                            ; ===========================================================================
000117D0                            ; ---------------------------------------------------------------------------
000117D0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000117D0                            ; ---------------------------------------------------------------------------
000117D0                            
000117D0                            Obj52:					; XREF: Obj_Index
000117D0 7000                       		moveq	#0,d0
000117D2 1028 0024                  		move.b	$24(a0),d0
000117D6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000117DA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000117DE                            ; ===========================================================================
000117DE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000117E0 0000                       		dc.w Obj52_Platform-Obj52_Index
000117E2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000117E4                            
000117E4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000117E6 2001                       		dc.b $20, 1
000117E8 2002                       		dc.b $20, 2
000117EA 4003                       		dc.b $40, 3
000117EC 3004                       		dc.b $30, 4
000117EE                            ; ===========================================================================
000117EE                            
000117EE                            Obj52_Main:				; XREF: Obj52_Index
000117EE 5428 0024                  		addq.b	#2,$24(a0)
000117F2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000117FA 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011800 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011806 6600                       		bne.s	loc_FE44
00011808 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011810 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011816 117C 0007 0016             		move.b	#7,$16(a0)
0001181C                            
0001181C                            loc_FE44:
0001181C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011822 6600                       		bne.s	loc_FE60
00011824 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001182A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011830 6700                       		beq.s	loc_FE60	; if yes, branch
00011832 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011838                            
00011838                            loc_FE60:
00011838 117C 0004 0001             		move.b	#4,1(a0)
0001183E 7000                       		moveq	#0,d0
00011840 1028 0028                  		move.b	$28(a0),d0
00011844 E648                       		lsr.w	#3,d0
00011846 0240 001E                  		andi.w	#$1E,d0
0001184A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001184E 115A 0019                  		move.b	(a2)+,$19(a0)
00011852 115A 001A                  		move.b	(a2)+,$1A(a0)
00011856 117C 0004 0018             		move.b	#4,$18(a0)
0001185C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011862 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011868 0228 000F 0028             		andi.b	#$F,$28(a0)
0001186E                            
0001186E                            Obj52_Platform:				; XREF: Obj52_Index
0001186E 6100 0000                  		bsr.w	Obj52_Move
00011872 7200                       		moveq	#0,d1
00011874 1228 0019                  		move.b	$19(a0),d1
00011878 4EB9 0000 8BAC             		jsr	(PlatformObject).l
0001187E 6000                       		bra.s	Obj52_ChkDel
00011880                            ; ===========================================================================
00011880                            
00011880                            Obj52_StandOn:				; XREF: Obj52_Index
00011880 7200                       		moveq	#0,d1
00011882 1228 0019                  		move.b	$19(a0),d1
00011886 4EB9 0000 8D20             		jsr	(ExitPlatform).l
0001188C 3F28 0008                  		move.w	8(a0),-(sp)
00011890 6100 0000                  		bsr.w	Obj52_Move
00011894 341F                       		move.w	(sp)+,d2
00011896 4EB9 0000 928A             		jsr	(MvSonicOnPtfm2).l
0001189C                            
0001189C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001189C 3028 0030                  		move.w	$30(a0),d0
000118A0 0240 FF80                  		andi.w	#$FF80,d0
000118A4 3238 F700                  		move.w	($FFFFF700).w,d1
000118A8 0441 0080                  		subi.w	#$80,d1
000118AC 0241 FF80                  		andi.w	#$FF80,d1
000118B0 9041                       		sub.w	d1,d0
000118B2 0C40 0280                  		cmpi.w	#$280,d0
000118B6 6200 D73E                  		bhi.w	DeleteObject
000118BA 6000 D6FE                  		bra.w	DisplaySprite
000118BE                            ; ===========================================================================
000118BE                            
000118BE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000118BE 7000                       		moveq	#0,d0
000118C0 1028 0028                  		move.b	$28(a0),d0
000118C4 0240 000F                  		andi.w	#$F,d0
000118C8 D040                       		add.w	d0,d0
000118CA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000118CE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000118D2                            ; ===========================================================================
000118D2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000118D6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000118DA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000118DE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000118E2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000118E6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000118E8                            ; ===========================================================================
000118E8                            
000118E8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000118E8 4E75                       		rts	
000118EA                            ; ===========================================================================
000118EA                            
000118EA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000118EA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000118EE 323C 0060                  		move.w	#$60,d1
000118F2 0828 0000 0022             		btst	#0,$22(a0)
000118F8 6700                       		beq.s	loc_FF26
000118FA 4440                       		neg.w	d0
000118FC D041                       		add.w	d1,d0
000118FE                            
000118FE                            loc_FF26:
000118FE 3228 0030                  		move.w	$30(a0),d1
00011902 9240                       		sub.w	d0,d1
00011904 3141 0008                  		move.w	d1,8(a0)
00011908 4E75                       		rts	
0001190A                            ; ===========================================================================
0001190A                            
0001190A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001190A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011910 6600                       		bne.s	Obj52_02_Wait
00011912 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011916                            
00011916                            Obj52_02_Wait:
00011916 4E75                       		rts	
00011918                            ; ===========================================================================
00011918                            
00011918                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011918 7600                       		moveq	#0,d3
0001191A 1628 0019                  		move.b	$19(a0),d3
0001191E 6100 0000                  		bsr.w	ObjHitWallRight
00011922 4A41                       		tst.w	d1		; has the platform hit a wall?
00011924 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011926 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001192A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011930 4E75                       		rts	
00011932                            ; ===========================================================================
00011932                            
00011932                            Obj52_03_End:
00011932 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011936 4E75                       		rts	
00011938                            ; ===========================================================================
00011938                            
00011938                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011938 7600                       		moveq	#0,d3
0001193A 1628 0019                  		move.b	$19(a0),d3
0001193E 6100 0000                  		bsr.w	ObjHitWallRight
00011942 4A41                       		tst.w	d1		; has the platform hit a wall?
00011944 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011946 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001194A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011950 4E75                       		rts	
00011952                            ; ===========================================================================
00011952                            
00011952                            Obj52_05_End:
00011952 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011956 4E75                       		rts	
00011958                            ; ===========================================================================
00011958                            
00011958                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011958 6100 D646                  		bsr.w	SpeedToPos
0001195C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011962 6100 0000                  		bsr.w	ObjHitFloor
00011966 4A41                       		tst.w	d1		; has platform hit the floor?
00011968 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001196C D368 000C                  		add.w	d1,$C(a0)
00011970 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011974 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011978                            
00011978                            locret_FFA0:
00011978 4E75                       		rts	
0001197A                            ; ===========================================================================
0001197A                            
0001197A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001197A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001197E 6700                       		beq.s	Obj52_07_ChkDel
00011980 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011984                            
00011984                            Obj52_07_ChkDel:
00011984 588F                       		addq.l	#4,sp
00011986 3028 0030                  		move.w	$30(a0),d0
0001198A 0240 FF80                  		andi.w	#$FF80,d0
0001198E 3238 F700                  		move.w	($FFFFF700).w,d1
00011992 0441 0080                  		subi.w	#$80,d1
00011996 0241 FF80                  		andi.w	#$FF80,d1
0001199A 9041                       		sub.w	d1,d0
0001199C 0C40 0280                  		cmpi.w	#$280,d0
000119A0 6200 D654                  		bhi.w	DeleteObject
000119A4 4E75                       		rts	
000119A6                            ; ===========================================================================
000119A6                            
000119A6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000119A6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000119AA 323C 0080                  		move.w	#$80,d1
000119AE 0828 0000 0022             		btst	#0,$22(a0)
000119B4 6700                       		beq.s	loc_FFE2
000119B6 4440                       		neg.w	d0
000119B8 D041                       		add.w	d1,d0
000119BA                            
000119BA                            loc_FFE2:
000119BA 3228 0032                  		move.w	$32(a0),d1
000119BE 9240                       		sub.w	d0,d1
000119C0 3141 000C                  		move.w	d1,$C(a0)
000119C4 4E75                       		rts	
000119C6                            ; ===========================================================================
000119C6                            
000119C6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000119C6 7600                       		moveq	#0,d3
000119C8 1628 0019                  		move.b	$19(a0),d3
000119CC D643                       		add.w	d3,d3
000119CE 7208                       		moveq	#8,d1
000119D0 0828 0000 0022             		btst	#0,$22(a0)
000119D6 6700                       		beq.s	loc_10004
000119D8 4441                       		neg.w	d1
000119DA 4443                       		neg.w	d3
000119DC                            
000119DC                            loc_10004:
000119DC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000119E0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000119E2 3028 0008                  		move.w	8(a0),d0
000119E6 9068 0030                  		sub.w	$30(a0),d0
000119EA B043                       		cmp.w	d3,d0
000119EC 6700                       		beq.s	Obj52_0A_Wait
000119EE D368 0008                  		add.w	d1,8(a0)	; move platform
000119F2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000119F8 4E75                       		rts	
000119FA                            ; ===========================================================================
000119FA                            
000119FA                            Obj52_0A_Wait:
000119FA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000119FE 6600                       		bne.s	locret_1002E	; if time remains, branch
00011A00 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011A06                            
00011A06                            locret_1002E:
00011A06 4E75                       		rts	
00011A08                            ; ===========================================================================
00011A08                            
00011A08                            Obj52_0A_Back:
00011A08 3028 0008                  		move.w	8(a0),d0
00011A0C 9068 0030                  		sub.w	$30(a0),d0
00011A10 6700                       		beq.s	Obj52_0A_Reset
00011A12 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011A16 4E75                       		rts	
00011A18                            ; ===========================================================================
00011A18                            
00011A18                            Obj52_0A_Reset:
00011A18 4268 0036                  		clr.w	$36(a0)
00011A1C 5328 0028                  		subq.b	#1,$28(a0)
00011A20 4E75                       		rts	
00011A22                            ; ===========================================================================
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            Map_obj52:
00011A22                            	include "_maps\obj52mz.asm"
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011A22                            ; ---------------------------------------------------------------------------
00011A22 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011A26 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011A2A 0000                       		dc.w byte_1008F-Map_obj52
00011A2C 01                         byte_10054:	dc.b 1
00011A2D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011A32 02                         byte_1005A:	dc.b 2
00011A33 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011A38 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011A3D 04                         byte_10065:	dc.b 4
00011A3E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011A43 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011A48 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011A4D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011A52 04                         byte_1007A:	dc.b 4
00011A53 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011A58 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011A5D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011A62 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011A67 03                         byte_1008F:	dc.b 3
00011A68 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011A6D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011A72 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011A78 00                         		even
00011A78 00                         		even
00011A78                            
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            ; Sprite mappings - moving block (LZ)
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            Map_obj52a:
00011A78                            	include "_maps\obj52lz.asm"
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            ; Sprite mappings - moving block (LZ)
00011A78                            ; ---------------------------------------------------------------------------
00011A78 0000                       		dc.w byte_100A2-Map_obj52a
00011A7A 01                         byte_100A2:	dc.b 1
00011A7B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011A80                            		even
00011A80                            		even
00011A80                            
00011A80                            ; ===========================================================================
00011A80                            ; ---------------------------------------------------------------------------
00011A80                            ; Object 55 - Basaran enemy (MZ)
00011A80                            ; ---------------------------------------------------------------------------
00011A80                            
00011A80                            Obj55:					; XREF: Obj_Index
00011A80 7000                       		moveq	#0,d0
00011A82 1028 0024                  		move.b	$24(a0),d0
00011A86 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011A8A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011A8E                            ; ===========================================================================
00011A8E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011A90 0000                       		dc.w Obj55_Action-Obj55_Index
00011A92                            ; ===========================================================================
00011A92                            
00011A92                            Obj55_Main:				; XREF: Obj55_Index
00011A92 5428 0024                  		addq.b	#2,$24(a0)
00011A96 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011A9E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011AA4 117C 0004 0001             		move.b	#4,1(a0)
00011AAA 117C 000C 0016             		move.b	#$C,$16(a0)
00011AB0 117C 0002 0018             		move.b	#2,$18(a0)
00011AB6 117C 000B 0020             		move.b	#$B,$20(a0)
00011ABC 117C 0010 0019             		move.b	#$10,$19(a0)
00011AC2                            
00011AC2                            Obj55_Action:				; XREF: Obj55_Index
00011AC2 7000                       		moveq	#0,d0
00011AC4 1028 0025                  		move.b	$25(a0),d0
00011AC8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011ACC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011AD0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011AD6 6100 A3CA                  		bsr.w	AnimateSprite
00011ADA 6000 F598                  		bra.w	MarkObjGone
00011ADE                            ; ===========================================================================
00011ADE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011AE0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011AE2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011AE4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011AE6                            ; ===========================================================================
00011AE6                            
00011AE6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011AE6 343C 0080                  		move.w	#$80,d2
00011AEA 6100 0000                  		bsr.w	Obj55_ChkSonic
00011AEE 6400                       		bcc.s	Obj55_NoDrop
00011AF0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011AF4 3140 0036                  		move.w	d0,$36(a0)
00011AF8 9068 000C                  		sub.w	$C(a0),d0
00011AFC 6500                       		bcs.s	Obj55_NoDrop
00011AFE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011B02 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011B04 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011B08 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011B0A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011B0E D007                       		add.b	d7,d0
00011B10 0200 0007                  		andi.b	#7,d0
00011B14 6600                       		bne.s	Obj55_NoDrop
00011B16 117C 0001 001C             		move.b	#1,$1C(a0)
00011B1C 5428 0025                  		addq.b	#2,$25(a0)
00011B20                            
00011B20                            Obj55_NoDrop:
00011B20 4E75                       		rts	
00011B22                            ; ===========================================================================
00011B22                            
00011B22                            Obj55_DropFly:				; XREF: Obj55_Index2
00011B22 6100 D47C                  		bsr.w	SpeedToPos
00011B26 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011B2C 343C 0080                  		move.w	#$80,d2
00011B30 6100 0000                  		bsr.w	Obj55_ChkSonic
00011B34 3028 0036                  		move.w	$36(a0),d0
00011B38 9068 000C                  		sub.w	$C(a0),d0
00011B3C 6500                       		bcs.s	Obj55_ChkDel
00011B3E 0C40 0010                  		cmpi.w	#$10,d0
00011B42 6400                       		bcc.s	locret_10180
00011B44 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011B48 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011B4E 117C 0002 001C             		move.b	#2,$1C(a0)
00011B54 5428 0025                  		addq.b	#2,$25(a0)
00011B58                            
00011B58                            locret_10180:
00011B58 4E75                       		rts	
00011B5A                            ; ===========================================================================
00011B5A                            
00011B5A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011B5A 4A28 0001                  		tst.b	1(a0)
00011B5E 6A00 D496                  		bpl.w	DeleteObject
00011B62 4E75                       		rts	
00011B64                            ; ===========================================================================
00011B64                            
00011B64                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011B64 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011B68 0200 000F                  		andi.b	#$F,d0
00011B6C 6600                       		bne.s	loc_101A0
00011B6E 303C 00C0                  		move.w	#$C0,d0
00011B72 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play flapping sound
00011B78                            
00011B78                            loc_101A0:
00011B78 6100 D426                  		bsr.w	SpeedToPos
00011B7C 3038 D008                  		move.w	($FFFFD008).w,d0
00011B80 9068 0008                  		sub.w	8(a0),d0
00011B84 6400                       		bcc.s	loc_101B0
00011B86 4440                       		neg.w	d0
00011B88                            
00011B88                            loc_101B0:
00011B88 0C40 0080                  		cmpi.w	#$80,d0
00011B8C 6500                       		bcs.s	locret_101C6
00011B8E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011B92 D007                       		add.b	d7,d0
00011B94 0200 0007                  		andi.b	#7,d0
00011B98 6600                       		bne.s	locret_101C6
00011B9A 5428 0025                  		addq.b	#2,$25(a0)
00011B9E                            
00011B9E                            locret_101C6:
00011B9E 4E75                       		rts	
00011BA0                            ; ===========================================================================
00011BA0                            
00011BA0                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011BA0 6100 D3FE                  		bsr.w	SpeedToPos
00011BA4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011BAA 6100 0000                  		bsr.w	ObjHitCeiling
00011BAE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011BB0 6A00                       		bpl.s	locret_101F4	; if not, branch
00011BB2 9368 000C                  		sub.w	d1,$C(a0)
00011BB6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011BBC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011BC0 4268 0012                  		clr.w	$12(a0)
00011BC4 4228 001C                  		clr.b	$1C(a0)
00011BC8 4228 0025                  		clr.b	$25(a0)
00011BCC                            
00011BCC                            locret_101F4:
00011BCC 4E75                       		rts	
00011BCE                            ; ===========================================================================
00011BCE                            
00011BCE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011BCE 323C 0100                  		move.w	#$100,d1
00011BD2 08E8 0000 0022             		bset	#0,$22(a0)
00011BD8 3038 D008                  		move.w	($FFFFD008).w,d0
00011BDC 9068 0008                  		sub.w	8(a0),d0
00011BE0 6400                       		bcc.s	loc_10214
00011BE2 4440                       		neg.w	d0
00011BE4 4441                       		neg.w	d1
00011BE6 08A8 0000 0022             		bclr	#0,$22(a0)
00011BEC                            
00011BEC                            loc_10214:
00011BEC B042                       		cmp.w	d2,d0
00011BEE 4E75                       		rts	
00011BF0                            ; ===========================================================================
00011BF0 6100 D3AE                  		bsr.w	SpeedToPos
00011BF4 6100 D3C4                  		bsr.w	DisplaySprite
00011BF8 4A28 0001                  		tst.b	1(a0)
00011BFC 6A00 D3F8                  		bpl.w	DeleteObject
00011C00 4E75                       		rts	
00011C02                            ; ===========================================================================
00011C02                            Ani_obj55:
00011C02                            	include "_anim\obj55.asm"
00011C02                            ; ---------------------------------------------------------------------------
00011C02                            ; Animation script - Basaran enemy
00011C02                            ; ---------------------------------------------------------------------------
00011C02 0000                       		dc.w byte_10230-Ani_obj55
00011C04 0000                       		dc.w byte_10234-Ani_obj55
00011C06 0000                       		dc.w byte_10238-Ani_obj55
00011C08 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011C0C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011C10 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011C16                            		even
00011C16                            		even
00011C16                            
00011C16                            ; ---------------------------------------------------------------------------
00011C16                            ; Sprite mappings - Basaran enemy (MZ)
00011C16                            ; ---------------------------------------------------------------------------
00011C16                            Map_obj55:
00011C16                            	include "_maps\obj55.asm"
00011C16                            ; ---------------------------------------------------------------------------
00011C16                            ; Sprite mappings - Basaran enemy (MZ)
00011C16                            ; ---------------------------------------------------------------------------
00011C16 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011C1A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011C1E 01                         byte_10246:	dc.b 1
00011C1F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011C24 03                         byte_1024C:	dc.b 3
00011C25 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011C2A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011C2F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011C34 04                         byte_1025C:	dc.b 4
00011C35 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011C3A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011C3F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011C44 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011C49 04                         byte_10271:	dc.b 4
00011C4A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011C4F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011C54 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011C59 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011C5E                            		even
00011C5E                            		even
00011C5E                            
00011C5E                            ; ===========================================================================
00011C5E                            ; ---------------------------------------------------------------------------
00011C5E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011C5E                            ; ---------------------------------------------------------------------------
00011C5E                            
00011C5E                            Obj56:					; XREF: Obj_Index
00011C5E 7000                       		moveq	#0,d0
00011C60 1028 0024                  		move.b	$24(a0),d0
00011C64 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011C68 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011C6C                            ; ===========================================================================
00011C6C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011C6E 0000                       		dc.w Obj56_Action-Obj56_Index
00011C70                            
00011C70 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011C72 2020                       		dc.b  $20, $20
00011C74 1020                       		dc.b  $10, $20
00011C76 201A                       		dc.b  $20, $1A
00011C78 1027                       		dc.b  $10, $27
00011C7A 1010                       		dc.b  $10, $10
00011C7C 0820                       		dc.b	8, $20
00011C7E 4010                       		dc.b  $40, $10
00011C80                            ; ===========================================================================
00011C80                            
00011C80                            Obj56_Main:				; XREF: Obj56_Index
00011C80 5428 0024                  		addq.b	#2,$24(a0)
00011C84 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011C8C 317C 4000 0002             		move.w	#$4000,2(a0)
00011C92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C98 6600                       		bne.s	loc_102C8
00011C9A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011CA0                            
00011CA0                            loc_102C8:
00011CA0 117C 0004 0001             		move.b	#4,1(a0)
00011CA6 117C 0003 0018             		move.b	#3,$18(a0)
00011CAC 7000                       		moveq	#0,d0
00011CAE 1028 0028                  		move.b	$28(a0),d0
00011CB2 E648                       		lsr.w	#3,d0
00011CB4 0240 000E                  		andi.w	#$E,d0
00011CB8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011CBC 115A 0019                  		move.b	(a2)+,$19(a0)
00011CC0 1152 0016                  		move.b	(a2),$16(a0)
00011CC4 E248                       		lsr.w	#1,d0
00011CC6 1140 001A                  		move.b	d0,$1A(a0)
00011CCA 3168 0008 0034             		move.w	8(a0),$34(a0)
00011CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CD6 7000                       		moveq	#0,d0
00011CD8 1012                       		move.b	(a2),d0
00011CDA D040                       		add.w	d0,d0
00011CDC 3140 003A                  		move.w	d0,$3A(a0)
00011CE0 7000                       		moveq	#0,d0
00011CE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011CE8 6700                       		beq.s	loc_10332
00011CEA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011CEE 0240 000F                  		andi.w	#$F,d0
00011CF2 5140                       		subq.w	#8,d0
00011CF4 6500                       		bcs.s	loc_10332
00011CF6 E548                       		lsl.w	#2,d0
00011CF8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011CFC 45F2 0000                  		lea	(a2,d0.w),a2
00011D00 4A52                       		tst.w	(a2)
00011D02 6A00                       		bpl.s	loc_10332
00011D04 0868 0000 0022             		bchg	#0,$22(a0)
00011D0A                            
00011D0A                            loc_10332:
00011D0A 1028 0028                  		move.b	$28(a0),d0
00011D0E 6A00                       		bpl.s	Obj56_Action
00011D10 0200 000F                  		andi.b	#$F,d0
00011D14 1140 003C                  		move.b	d0,$3C(a0)
00011D18 117C 0005 0028             		move.b	#5,$28(a0)
00011D1E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011D24 6600                       		bne.s	Obj56_ChkGone
00011D26 117C 000C 0028             		move.b	#$C,$28(a0)
00011D2C 317C 0080 003A             		move.w	#$80,$3A(a0)
00011D32                            
00011D32                            Obj56_ChkGone:
00011D32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011D36 7000                       		moveq	#0,d0
00011D38 1028 0023                  		move.b	$23(a0),d0
00011D3C 6700                       		beq.s	Obj56_Action
00011D3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011D44 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011D4A 6700                       		beq.s	Obj56_Action
00011D4C 5228 0028                  		addq.b	#1,$28(a0)
00011D50 4268 003A                  		clr.w	$3A(a0)
00011D54                            
00011D54                            Obj56_Action:				; XREF: Obj56_Index
00011D54 3F28 0008                  		move.w	8(a0),-(sp)
00011D58 7000                       		moveq	#0,d0
00011D5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D5E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011D62 D040                       		add.w	d0,d0
00011D64 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011D68 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011D6C 381F                       		move.w	(sp)+,d4
00011D6E 4A28 0001                  		tst.b	1(a0)
00011D72 6A00                       		bpl.s	Obj56_ChkDel
00011D74 7200                       		moveq	#0,d1
00011D76 1228 0019                  		move.b	$19(a0),d1
00011D7A 0641 000B                  		addi.w	#$B,d1
00011D7E 7400                       		moveq	#0,d2
00011D80 1428 0016                  		move.b	$16(a0),d2
00011D84 3602                       		move.w	d2,d3
00011D86 5243                       		addq.w	#1,d3
00011D88 6100 F612                  		bsr.w	SolidObject
00011D8C                            
00011D8C                            Obj56_ChkDel:
00011D8C 3028 0034                  		move.w	$34(a0),d0
00011D90 0240 FF80                  		andi.w	#$FF80,d0
00011D94 3238 F700                  		move.w	($FFFFF700).w,d1
00011D98 0441 0080                  		subi.w	#$80,d1
00011D9C 0241 FF80                  		andi.w	#$FF80,d1
00011DA0 9041                       		sub.w	d1,d0
00011DA2 0C40 0280                  		cmpi.w	#$280,d0
00011DA6 6200 D24E                  		bhi.w	DeleteObject
00011DAA 6000 D20E                  		bra.w	DisplaySprite
00011DAE                            ; ===========================================================================
00011DAE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011DB2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011DB6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011DBA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011DBE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011DC2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011DC6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011DCA                            ; ===========================================================================
00011DCA                            
00011DCA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011DCA 4E75                       		rts	
00011DCC                            ; ===========================================================================
00011DCC                            
00011DCC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011DCC 323C 0040                  		move.w	#$40,d1
00011DD0 7000                       		moveq	#0,d0
00011DD2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011DD6 6000                       		bra.s	Obj56_Move_LR
00011DD8                            ; ===========================================================================
00011DD8                            
00011DD8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011DD8 323C 0080                  		move.w	#$80,d1
00011DDC 7000                       		moveq	#0,d0
00011DDE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011DE2                            
00011DE2                            Obj56_Move_LR:
00011DE2 0828 0000 0022             		btst	#0,$22(a0)
00011DE8 6700                       		beq.s	loc_10416
00011DEA 4440                       		neg.w	d0
00011DEC D041                       		add.w	d1,d0
00011DEE                            
00011DEE                            loc_10416:
00011DEE 3228 0034                  		move.w	$34(a0),d1
00011DF2 9240                       		sub.w	d0,d1
00011DF4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011DF8 4E75                       		rts	
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011DFA 323C 0040                  		move.w	#$40,d1
00011DFE 7000                       		moveq	#0,d0
00011E00 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011E04 6000                       		bra.s	Obj56_Move_UD
00011E06                            ; ===========================================================================
00011E06                            
00011E06                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011E06 323C 0080                  		move.w	#$80,d1
00011E0A 7000                       		moveq	#0,d0
00011E0C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011E10                            
00011E10                            Obj56_Move_UD:
00011E10 0828 0000 0022             		btst	#0,$22(a0)
00011E16 6700                       		beq.s	loc_10444
00011E18 4440                       		neg.w	d0
00011E1A D041                       		add.w	d1,d0
00011E1C                            
00011E1C                            loc_10444:
00011E1C 3228 0030                  		move.w	$30(a0),d1
00011E20 9240                       		sub.w	d0,d1
00011E22 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011E26 4E75                       		rts	
00011E28                            ; ===========================================================================
00011E28                            
00011E28                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011E28 4A28 0038                  		tst.b	$38(a0)
00011E2C 6600                       		bne.s	loc_104A4
00011E2E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011E34 6600                       		bne.s	loc_1047A	; if not, branch
00011E36 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011E3C 6600                       		bne.s	loc_1047A
00011E3E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011E42 3038 D008                  		move.w	($FFFFD008).w,d0
00011E46 B068 0008                  		cmp.w	8(a0),d0
00011E4A 6400                       		bcc.s	loc_1047A
00011E4C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011E52                            
00011E52                            loc_1047A:
00011E52 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E56 7000                       		moveq	#0,d0
00011E58 1028 003C                  		move.b	$3C(a0),d0
00011E5C 0832 0000 0000             		btst	#0,(a2,d0.w)
00011E62 6700                       		beq.s	loc_104AE
00011E64 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011E6A 6600                       		bne.s	loc_1049E	; if not, branch
00011E6C 0C00 0003                  		cmpi.b	#3,d0
00011E70 6600                       		bne.s	loc_1049E
00011E72 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011E76                            
00011E76                            loc_1049E:
00011E76 117C 0001 0038             		move.b	#1,$38(a0)
00011E7C                            
00011E7C                            loc_104A4:
00011E7C 4A68 003A                  		tst.w	$3A(a0)
00011E80 6700                       		beq.s	loc_104C8
00011E82 5568 003A                  		subq.w	#2,$3A(a0)
00011E86                            
00011E86                            loc_104AE:
00011E86 3028 003A                  		move.w	$3A(a0),d0
00011E8A 0828 0000 0022             		btst	#0,$22(a0)
00011E90 6700                       		beq.s	loc_104BC
00011E92 4440                       		neg.w	d0
00011E94                            
00011E94                            loc_104BC:
00011E94 3228 0030                  		move.w	$30(a0),d1
00011E98 D240                       		add.w	d0,d1
00011E9A 3141 000C                  		move.w	d1,$C(a0)
00011E9E 4E75                       		rts	
00011EA0                            ; ===========================================================================
00011EA0                            
00011EA0                            loc_104C8:
00011EA0 5228 0028                  		addq.b	#1,$28(a0)
00011EA4 4228 0038                  		clr.b	$38(a0)
00011EA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011EAC 7000                       		moveq	#0,d0
00011EAE 1028 0023                  		move.b	$23(a0),d0
00011EB2 67D2                       		beq.s	loc_104AE
00011EB4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011EBA 60CA                       		bra.s	loc_104AE
00011EBC                            ; ===========================================================================
00011EBC                            
00011EBC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011EBC 4A28 0038                  		tst.b	$38(a0)
00011EC0 6600                       		bne.s	loc_10500
00011EC2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EC6 7000                       		moveq	#0,d0
00011EC8 1028 003C                  		move.b	$3C(a0),d0
00011ECC 4A32 0000                  		tst.b	(a2,d0.w)
00011ED0 6A00                       		bpl.s	loc_10512
00011ED2 117C 0001 0038             		move.b	#1,$38(a0)
00011ED8                            
00011ED8                            loc_10500:
00011ED8 7000                       		moveq	#0,d0
00011EDA 1028 0016                  		move.b	$16(a0),d0
00011EDE D040                       		add.w	d0,d0
00011EE0 B068 003A                  		cmp.w	$3A(a0),d0
00011EE4 6700                       		beq.s	loc_1052C
00011EE6 5468 003A                  		addq.w	#2,$3A(a0)
00011EEA                            
00011EEA                            loc_10512:
00011EEA 3028 003A                  		move.w	$3A(a0),d0
00011EEE 0828 0000 0022             		btst	#0,$22(a0)
00011EF4 6700                       		beq.s	loc_10520
00011EF6 4440                       		neg.w	d0
00011EF8                            
00011EF8                            loc_10520:
00011EF8 3228 0030                  		move.w	$30(a0),d1
00011EFC D240                       		add.w	d0,d1
00011EFE 3141 000C                  		move.w	d1,$C(a0)
00011F02 4E75                       		rts	
00011F04                            ; ===========================================================================
00011F04                            
00011F04                            loc_1052C:
00011F04 5328 0028                  		subq.b	#1,$28(a0)
00011F08 4228 0038                  		clr.b	$38(a0)
00011F0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011F10 7000                       		moveq	#0,d0
00011F12 1028 0023                  		move.b	$23(a0),d0
00011F16 67D2                       		beq.s	loc_10512
00011F18 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011F1E 60CA                       		bra.s	loc_10512
00011F20                            ; ===========================================================================
00011F20                            
00011F20                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011F20 4A28 0038                  		tst.b	$38(a0)
00011F24 6600                       		bne.s	loc_1055E
00011F26 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011F2A 6700                       		beq.s	locret_10578
00011F2C 117C 0001 0038             		move.b	#1,$38(a0)
00011F32 4268 003A                  		clr.w	$3A(a0)
00011F36                            
00011F36                            loc_1055E:
00011F36 5268 0008                  		addq.w	#1,8(a0)
00011F3A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011F40 5268 003A                  		addq.w	#1,$3A(a0)
00011F44 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011F4A 6600                       		bne.s	locret_10578
00011F4C 4228 0028                  		clr.b	$28(a0)
00011F50                            
00011F50                            locret_10578:
00011F50 4E75                       		rts	
00011F52                            ; ===========================================================================
00011F52                            
00011F52                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011F52 4A28 0038                  		tst.b	$38(a0)
00011F56 6600                       		bne.s	loc_10598
00011F58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F5C 7000                       		moveq	#0,d0
00011F5E 1028 003C                  		move.b	$3C(a0),d0
00011F62 0832 0000 0000             		btst	#0,(a2,d0.w)
00011F68 6700                       		beq.s	loc_105A2
00011F6A 117C 0001 0038             		move.b	#1,$38(a0)
00011F70                            
00011F70                            loc_10598:
00011F70 4A68 003A                  		tst.w	$3A(a0)
00011F74 6700                       		beq.s	loc_105C0
00011F76 5568 003A                  		subq.w	#2,$3A(a0)
00011F7A                            
00011F7A                            loc_105A2:
00011F7A 3028 003A                  		move.w	$3A(a0),d0
00011F7E 0828 0000 0022             		btst	#0,$22(a0)
00011F84 6700                       		beq.s	loc_105B4
00011F86 4440                       		neg.w	d0
00011F88 0640 0080                  		addi.w	#$80,d0
00011F8C                            
00011F8C                            loc_105B4:
00011F8C 3228 0034                  		move.w	$34(a0),d1
00011F90 D240                       		add.w	d0,d1
00011F92 3141 0008                  		move.w	d1,8(a0)
00011F96 4E75                       		rts	
00011F98                            ; ===========================================================================
00011F98                            
00011F98                            loc_105C0:
00011F98 5228 0028                  		addq.b	#1,$28(a0)
00011F9C 4228 0038                  		clr.b	$38(a0)
00011FA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011FA4 7000                       		moveq	#0,d0
00011FA6 1028 0023                  		move.b	$23(a0),d0
00011FAA 67CE                       		beq.s	loc_105A2
00011FAC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011FB2 60C6                       		bra.s	loc_105A2
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011FB4 4A28 0038                  		tst.b	$38(a0)
00011FB8 6600                       		bne.s	loc_105F8
00011FBA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011FBE 7000                       		moveq	#0,d0
00011FC0 1028 003C                  		move.b	$3C(a0),d0
00011FC4 4A32 0000                  		tst.b	(a2,d0.w)
00011FC8 6A00                       		bpl.s	loc_10606
00011FCA 117C 0001 0038             		move.b	#1,$38(a0)
00011FD0                            
00011FD0                            loc_105F8:
00011FD0 303C 0080                  		move.w	#$80,d0
00011FD4 B068 003A                  		cmp.w	$3A(a0),d0
00011FD8 6700                       		beq.s	loc_10624
00011FDA 5468 003A                  		addq.w	#2,$3A(a0)
00011FDE                            
00011FDE                            loc_10606:
00011FDE 3028 003A                  		move.w	$3A(a0),d0
00011FE2 0828 0000 0022             		btst	#0,$22(a0)
00011FE8 6700                       		beq.s	loc_10618
00011FEA 4440                       		neg.w	d0
00011FEC 0640 0080                  		addi.w	#$80,d0
00011FF0                            
00011FF0                            loc_10618:
00011FF0 3228 0034                  		move.w	$34(a0),d1
00011FF4 D240                       		add.w	d0,d1
00011FF6 3141 0008                  		move.w	d1,8(a0)
00011FFA 4E75                       		rts	
00011FFC                            ; ===========================================================================
00011FFC                            
00011FFC                            loc_10624:
00011FFC 5328 0028                  		subq.b	#1,$28(a0)
00012000 4228 0038                  		clr.b	$38(a0)
00012004 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012008 7000                       		moveq	#0,d0
0001200A 1028 0023                  		move.b	$23(a0),d0
0001200E 67CE                       		beq.s	loc_10606
00012010 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012016 60C6                       		bra.s	loc_10606
00012018                            ; ===========================================================================
00012018                            
00012018                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00012018 323C 0010                  		move.w	#$10,d1
0001201C 7000                       		moveq	#0,d0
0001201E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00012022 E248                       		lsr.w	#1,d0
00012024 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00012028 6000                       		bra.s	Obj56_Move_Sqr
0001202A                            ; ===========================================================================
0001202A                            
0001202A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001202A 323C 0030                  		move.w	#$30,d1
0001202E 7000                       		moveq	#0,d0
00012030 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00012034 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00012038 6000                       		bra.s	Obj56_Move_Sqr
0001203A                            ; ===========================================================================
0001203A                            
0001203A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001203A 323C 0050                  		move.w	#$50,d1
0001203E 7000                       		moveq	#0,d0
00012040 1038 FE90                  		move.b	($FFFFFE90).w,d0
00012044 3638 FE92                  		move.w	($FFFFFE92).w,d3
00012048 6000                       		bra.s	Obj56_Move_Sqr
0001204A                            ; ===========================================================================
0001204A                            
0001204A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001204A 323C 0070                  		move.w	#$70,d1
0001204E 7000                       		moveq	#0,d0
00012050 1038 FE94                  		move.b	($FFFFFE94).w,d0
00012054 3638 FE96                  		move.w	($FFFFFE96).w,d3
00012058                            
00012058                            Obj56_Move_Sqr:
00012058 4A43                       		tst.w	d3
0001205A 6600                       		bne.s	loc_1068E
0001205C 5228 0022                  		addq.b	#1,$22(a0)
00012060 0228 0003 0022             		andi.b	#3,$22(a0)
00012066                            
00012066                            loc_1068E:
00012066 1428 0022                  		move.b	$22(a0),d2
0001206A 0202 0003                  		andi.b	#3,d2
0001206E 6600                       		bne.s	loc_106AE
00012070 9041                       		sub.w	d1,d0
00012072 D068 0034                  		add.w	$34(a0),d0
00012076 3140 0008                  		move.w	d0,8(a0)
0001207A 4441                       		neg.w	d1
0001207C D268 0030                  		add.w	$30(a0),d1
00012080 3141 000C                  		move.w	d1,$C(a0)
00012084 4E75                       		rts	
00012086                            ; ===========================================================================
00012086                            
00012086                            loc_106AE:
00012086 5302                       		subq.b	#1,d2
00012088 6600                       		bne.s	loc_106CC
0001208A 5341                       		subq.w	#1,d1
0001208C 9041                       		sub.w	d1,d0
0001208E 4440                       		neg.w	d0
00012090 D068 0030                  		add.w	$30(a0),d0
00012094 3140 000C                  		move.w	d0,$C(a0)
00012098 5241                       		addq.w	#1,d1
0001209A D268 0034                  		add.w	$34(a0),d1
0001209E 3141 0008                  		move.w	d1,8(a0)
000120A2 4E75                       		rts	
000120A4                            ; ===========================================================================
000120A4                            
000120A4                            loc_106CC:
000120A4 5302                       		subq.b	#1,d2
000120A6 6600                       		bne.s	loc_106EA
000120A8 5341                       		subq.w	#1,d1
000120AA 9041                       		sub.w	d1,d0
000120AC 4440                       		neg.w	d0
000120AE D068 0034                  		add.w	$34(a0),d0
000120B2 3140 0008                  		move.w	d0,8(a0)
000120B6 5241                       		addq.w	#1,d1
000120B8 D268 0030                  		add.w	$30(a0),d1
000120BC 3141 000C                  		move.w	d1,$C(a0)
000120C0 4E75                       		rts	
000120C2                            ; ===========================================================================
000120C2                            
000120C2                            loc_106EA:
000120C2 9041                       		sub.w	d1,d0
000120C4 D068 0030                  		add.w	$30(a0),d0
000120C8 3140 000C                  		move.w	d0,$C(a0)
000120CC 4441                       		neg.w	d1
000120CE D268 0034                  		add.w	$34(a0),d1
000120D2 3141 0008                  		move.w	d1,8(a0)
000120D6 4E75                       		rts	
000120D8                            ; ===========================================================================
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            Map_obj56:
000120D8                            	include "_maps\obj56.asm"
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000120D8                            ; ---------------------------------------------------------------------------
000120D8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000120DC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000120E0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000120E4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000120E8 01                         byte_10710:	dc.b 1
000120E9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000120EE 04                         byte_10716:	dc.b 4
000120EF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000120F4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000120F9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000120FE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012103 02                         byte_1072B:	dc.b 2
00012104 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012109 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001210E 04                         byte_10736:	dc.b 4
0001210F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012114 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012119 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001211E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012123 03                         byte_1074B:	dc.b 3
00012124 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012129 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001212E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012133 01                         byte_1075B:	dc.b 1
00012134 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012139 02                         byte_10761:	dc.b 2
0001213A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001213F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012144 04                         byte_1076C:	dc.b 4
00012145 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001214A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001214F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012154 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001215A 00                         		even
0001215A 00                         		even
0001215A                            
0001215A                            ; ===========================================================================
0001215A                            ; ---------------------------------------------------------------------------
0001215A                            ; Object 57 - spiked balls (SYZ, LZ)
0001215A                            ; ---------------------------------------------------------------------------
0001215A                            
0001215A                            Obj57:					; XREF: Obj_Index
0001215A 7000                       		moveq	#0,d0
0001215C 1028 0024                  		move.b	$24(a0),d0
00012160 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012164 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012168                            ; ===========================================================================
00012168 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001216A 0000                       		dc.w Obj57_Move-Obj57_Index
0001216C 0000                       		dc.w Obj57_Display-Obj57_Index
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            Obj57_Main:				; XREF: Obj57_Index
0001216E 5428 0024                  		addq.b	#2,$24(a0)
00012172 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001217A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012180 117C 0004 0001             		move.b	#4,1(a0)
00012186 117C 0004 0018             		move.b	#4,$18(a0)
0001218C 117C 0008 0019             		move.b	#8,$19(a0)
00012192 3168 0008 003A             		move.w	8(a0),$3A(a0)
00012198 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001219E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000121A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000121AA 6600                       		bne.s	loc_107E8
000121AC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000121B2 317C 0310 0002             		move.w	#$310,2(a0)
000121B8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000121C0                            
000121C0                            loc_107E8:
000121C0 1228 0028                  		move.b	$28(a0),d1	; get object type
000121C4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000121C8 4881                       		ext.w	d1
000121CA E741                       		asl.w	#3,d1		; multiply by 8
000121CC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000121D0 1028 0022                  		move.b	$22(a0),d0
000121D4 E418                       		ror.b	#2,d0
000121D6 0200 00C0                  		andi.b	#-$40,d0
000121DA 1140 0026                  		move.b	d0,$26(a0)
000121DE 45E8 0029                  		lea	$29(a0),a2
000121E2 1228 0028                  		move.b	$28(a0),d1	; get object type
000121E6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000121EA 14FC 0000                  		move.b	#0,(a2)+
000121EE 3601                       		move.w	d1,d3
000121F0 E94B                       		lsl.w	#4,d3
000121F2 1143 003C                  		move.b	d3,$3C(a0)
000121F6 5341                       		subq.w	#1,d1		; set chain length (type-1)
000121F8 6500                       		bcs.s	loc_10894
000121FA 0828 0003 0028             		btst	#3,$28(a0)
00012200 6700                       		beq.s	Obj57_MakeChain
00012202 5341                       		subq.w	#1,d1
00012204 6500                       		bcs.s	loc_10894
00012206                            
00012206                            Obj57_MakeChain:
00012206 6100 D246                  		bsr.w	SingleObjLoad
0001220A 6600                       		bne.s	loc_10894
0001220C 5228 0029                  		addq.b	#1,$29(a0)
00012210 3A09                       		move.w	a1,d5
00012212 0445 D000                  		subi.w	#-$3000,d5
00012216 EC4D                       		lsr.w	#6,d5
00012218 0245 007F                  		andi.w	#$7F,d5
0001221C 14C5                       		move.b	d5,(a2)+
0001221E 137C 0004 0024             		move.b	#4,$24(a1)
00012224 1290                       		move.b	0(a0),0(a1)
00012226 2368 0004 0004             		move.l	4(a0),4(a1)
0001222C 3368 0002 0002             		move.w	2(a0),2(a1)
00012232 1368 0001 0001             		move.b	1(a0),1(a1)
00012238 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001223E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012244 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001224A 0403 0010                  		subi.b	#$10,d3
0001224E 1343 003C                  		move.b	d3,$3C(a1)
00012252 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012258 6600                       		bne.s	loc_10890
0001225A 4A03                       		tst.b	d3
0001225C 6600                       		bne.s	loc_10890
0001225E 137C 0002 001A             		move.b	#2,$1A(a1)
00012264                            
00012264                            loc_10890:
00012264 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012268                            
00012268                            loc_10894:
00012268 3A08                       		move.w	a0,d5
0001226A 0445 D000                  		subi.w	#-$3000,d5
0001226E EC4D                       		lsr.w	#6,d5
00012270 0245 007F                  		andi.w	#$7F,d5
00012274 14C5                       		move.b	d5,(a2)+
00012276 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001227C 6600                       		bne.s	Obj57_Move
0001227E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012284 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001228A                            
0001228A                            Obj57_Move:				; XREF: Obj57_Index
0001228A 6100 0000                  		bsr.w	Obj57_MoveSub
0001228E 6000 0000                  		bra.w	Obj57_ChkDel
00012292                            ; ===========================================================================
00012292                            
00012292                            Obj57_MoveSub:				; XREF: Obj57_Move
00012292 3028 003E                  		move.w	$3E(a0),d0
00012296 D168 0026                  		add.w	d0,$26(a0)
0001229A 1028 0026                  		move.b	$26(a0),d0
0001229E 4EB9 0000 287A             		jsr	(CalcSine).l
000122A4 3428 0038                  		move.w	$38(a0),d2
000122A8 3628 003A                  		move.w	$3A(a0),d3
000122AC 45E8 0029                  		lea	$29(a0),a2
000122B0 7C00                       		moveq	#0,d6
000122B2 1C1A                       		move.b	(a2)+,d6
000122B4                            
000122B4                            Obj57_MoveLoop:
000122B4 7800                       		moveq	#0,d4
000122B6 181A                       		move.b	(a2)+,d4
000122B8 ED4C                       		lsl.w	#6,d4
000122BA 0684 00FF D000             		addi.l	#$FFD000,d4
000122C0 2244                       		movea.l	d4,a1
000122C2 7800                       		moveq	#0,d4
000122C4 1829 003C                  		move.b	$3C(a1),d4
000122C8 2A04                       		move.l	d4,d5
000122CA C9C0                       		muls.w	d0,d4
000122CC E084                       		asr.l	#8,d4
000122CE CBC1                       		muls.w	d1,d5
000122D0 E085                       		asr.l	#8,d5
000122D2 D842                       		add.w	d2,d4
000122D4 DA43                       		add.w	d3,d5
000122D6 3344 000C                  		move.w	d4,$C(a1)
000122DA 3345 0008                  		move.w	d5,8(a1)
000122DE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000122E2 4E75                       		rts	
000122E4                            ; ===========================================================================
000122E4                            
000122E4                            Obj57_ChkDel:				; XREF: Obj57_Move
000122E4 3028 003A                  		move.w	$3A(a0),d0
000122E8 0240 FF80                  		andi.w	#$FF80,d0
000122EC 3238 F700                  		move.w	($FFFFF700).w,d1
000122F0 0441 0080                  		subi.w	#$80,d1
000122F4 0241 FF80                  		andi.w	#$FF80,d1
000122F8 9041                       		sub.w	d1,d0
000122FA 0C40 0280                  		cmpi.w	#$280,d0
000122FE 6200 0000                  		bhi.w	Obj57_Delete
00012302 6000 CCB6                  		bra.w	DisplaySprite
00012306                            ; ===========================================================================
00012306                            
00012306                            Obj57_Delete:				; XREF: Obj57_ChkDel
00012306 7400                       		moveq	#0,d2
00012308 45E8 0029                  		lea	$29(a0),a2
0001230C 141A                       		move.b	(a2)+,d2
0001230E                            
0001230E                            Obj57_DelLoop:
0001230E 7000                       		moveq	#0,d0
00012310 101A                       		move.b	(a2)+,d0
00012312 ED48                       		lsl.w	#6,d0
00012314 0680 00FF D000             		addi.l	#$FFD000,d0
0001231A 2240                       		movea.l	d0,a1
0001231C 6100 CCDA                  		bsr.w	DeleteObject2
00012320 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012324                            
00012324 4E75                       		rts	
00012326                            ; ===========================================================================
00012326                            
00012326                            Obj57_Display:				; XREF: Obj57_Index
00012326 6000 CC92                  		bra.w	DisplaySprite
0001232A                            ; ===========================================================================
0001232A                            ; ---------------------------------------------------------------------------
0001232A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001232A                            ; ---------------------------------------------------------------------------
0001232A                            Map_obj57:
0001232A                            	include "_maps\obj57syz.asm"
0001232A                            ; ---------------------------------------------------------------------------
0001232A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001232A                            ; ---------------------------------------------------------------------------
0001232A 0000                       		dc.w byte_10958-Map_obj57
0001232C 01                         byte_10958:	dc.b 1
0001232D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012332                            		even
00012332                            		even
00012332                            
00012332                            ; ---------------------------------------------------------------------------
00012332                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012332                            ; ---------------------------------------------------------------------------
00012332                            Map_obj57a:
00012332                            	include "_maps\obj57lz.asm"
00012332                            ; ---------------------------------------------------------------------------
00012332                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012332                            ; ---------------------------------------------------------------------------
00012332 0000                       		dc.w byte_10964-Map_obj57a
00012334 0000                       		dc.w byte_1096A-Map_obj57a
00012336 0000                       		dc.w byte_10970-Map_obj57a
00012338 01                         byte_10964:	dc.b 1
00012339 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001233E 01                         byte_1096A:	dc.b 1
0001233F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012344 01                         byte_10970:	dc.b 1
00012345 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001234A                            		even
0001234A                            		even
0001234A                            
0001234A                            ; ===========================================================================
0001234A                            ; ---------------------------------------------------------------------------
0001234A                            ; Object 58 - giant spiked balls (SYZ)
0001234A                            ; ---------------------------------------------------------------------------
0001234A                            
0001234A                            Obj58:					; XREF: Obj_Index
0001234A 7000                       		moveq	#0,d0
0001234C 1028 0024                  		move.b	$24(a0),d0
00012350 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00012354 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012358                            ; ===========================================================================
00012358 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001235A 0000                       		dc.w Obj58_Move-Obj58_Index
0001235C                            ; ===========================================================================
0001235C                            
0001235C                            Obj58_Main:				; XREF: Obj58_Index
0001235C 5428 0024                  		addq.b	#2,$24(a0)
00012360 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012368 317C 0396 0002             		move.w	#$396,2(a0)
0001236E 117C 0004 0001             		move.b	#4,1(a0)
00012374 117C 0004 0018             		move.b	#4,$18(a0)
0001237A 117C 0018 0019             		move.b	#$18,$19(a0)
00012380 3168 0008 003A             		move.w	8(a0),$3A(a0)
00012386 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001238C 117C 0086 0020             		move.b	#$86,$20(a0)
00012392 1228 0028                  		move.b	$28(a0),d1	; get object type
00012396 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001239A 4881                       		ext.w	d1
0001239C E741                       		asl.w	#3,d1		; multiply by 8
0001239E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000123A2 1028 0022                  		move.b	$22(a0),d0
000123A6 E418                       		ror.b	#2,d0
000123A8 0200 00C0                  		andi.b	#$C0,d0
000123AC 1140 0026                  		move.b	d0,$26(a0)
000123B0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000123B6                            
000123B6                            Obj58_Move:				; XREF: Obj58_Index
000123B6 7000                       		moveq	#0,d0
000123B8 1028 0028                  		move.b	$28(a0),d0	; get object type
000123BC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000123C0 D040                       		add.w	d0,d0
000123C2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000123C6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000123CA 3028 003A                  		move.w	$3A(a0),d0
000123CE 0240 FF80                  		andi.w	#$FF80,d0
000123D2 3238 F700                  		move.w	($FFFFF700).w,d1
000123D6 0441 0080                  		subi.w	#$80,d1
000123DA 0241 FF80                  		andi.w	#$FF80,d1
000123DE 9041                       		sub.w	d1,d0
000123E0 0C40 0280                  		cmpi.w	#$280,d0
000123E4 6200 CC10                  		bhi.w	DeleteObject
000123E8 6000 CBD0                  		bra.w	DisplaySprite
000123EC                            ; ===========================================================================
000123EC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000123EE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000123F0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000123F2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000123F4 4E75                       		rts	
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000123F6 323C 0060                  		move.w	#$60,d1
000123FA 7000                       		moveq	#0,d0
000123FC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012400 0828 0000 0022             		btst	#0,$22(a0)
00012406 6700                       		beq.s	loc_10A38
00012408 4440                       		neg.w	d0
0001240A D041                       		add.w	d1,d0
0001240C                            
0001240C                            loc_10A38:
0001240C 3228 003A                  		move.w	$3A(a0),d1
00012410 9240                       		sub.w	d0,d1
00012412 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00012416 4E75                       		rts	
00012418                            ; ===========================================================================
00012418                            
00012418                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012418 323C 0060                  		move.w	#$60,d1
0001241C 7000                       		moveq	#0,d0
0001241E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012422 0828 0000 0022             		btst	#0,$22(a0)
00012428 6700                       		beq.s	loc_10A5C
0001242A 4440                       		neg.w	d0
0001242C 0640 0080                  		addi.w	#$80,d0
00012430                            
00012430                            loc_10A5C:
00012430 3228 0038                  		move.w	$38(a0),d1
00012434 9240                       		sub.w	d0,d1
00012436 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001243A 4E75                       		rts	
0001243C                            ; ===========================================================================
0001243C                            
0001243C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001243C 3028 003E                  		move.w	$3E(a0),d0
00012440 D168 0026                  		add.w	d0,$26(a0)
00012444 1028 0026                  		move.b	$26(a0),d0
00012448 4EB9 0000 287A             		jsr	(CalcSine).l
0001244E 3428 0038                  		move.w	$38(a0),d2
00012452 3628 003A                  		move.w	$3A(a0),d3
00012456 7800                       		moveq	#0,d4
00012458 1828 003C                  		move.b	$3C(a0),d4
0001245C 2A04                       		move.l	d4,d5
0001245E C9C0                       		muls.w	d0,d4
00012460 E084                       		asr.l	#8,d4
00012462 CBC1                       		muls.w	d1,d5
00012464 E085                       		asr.l	#8,d5
00012466 D842                       		add.w	d2,d4
00012468 DA43                       		add.w	d3,d5
0001246A 3144 000C                  		move.w	d4,$C(a0)
0001246E 3145 0008                  		move.w	d5,8(a0)
00012472 4E75                       		rts	
00012474                            ; ===========================================================================
00012474                            ; ---------------------------------------------------------------------------
00012474                            ; Sprite mappings - SBZ	spiked ball on a chain
00012474                            ; ---------------------------------------------------------------------------
00012474                            Map_obj15b:
00012474                            	include "_maps\obj15sbz.asm"
00012474                            ; ---------------------------------------------------------------------------
00012474                            ; Sprite mappings - spiked ball on a chain (SBZ)
00012474                            ; ---------------------------------------------------------------------------
00012474 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012478 0000                       		dc.w byte_10AC6-Map_obj15b
0001247A 05                         byte_10AA6:	dc.b 5
0001247B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012480 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00012485 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001248A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001248F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00012494 01                         byte_10AC0:	dc.b 1
00012495 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001249A 02                         byte_10AC6:	dc.b 2
0001249B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000124A0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000124A6 00                         		even
000124A6 00                         		even
000124A6                            
000124A6                            ; ===========================================================================
000124A6                            ; ---------------------------------------------------------------------------
000124A6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000124A6                            ; ---------------------------------------------------------------------------
000124A6                            
000124A6                            Obj59:					; XREF: Obj_Index
000124A6 7000                       		moveq	#0,d0
000124A8 1028 0024                  		move.b	$24(a0),d0
000124AC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000124B0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000124B4 3028 0032                  		move.w	$32(a0),d0
000124B8 0240 FF80                  		andi.w	#$FF80,d0
000124BC 3238 F700                  		move.w	($FFFFF700).w,d1
000124C0 0441 0080                  		subi.w	#$80,d1
000124C4 0241 FF80                  		andi.w	#$FF80,d1
000124C8 9041                       		sub.w	d1,d0
000124CA 0C40 0280                  		cmpi.w	#$280,d0
000124CE 6200 CB26                  		bhi.w	DeleteObject
000124D2 6000 CAE6                  		bra.w	DisplaySprite
000124D6                            ; ===========================================================================
000124D6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000124D8 0000                       		dc.w Obj59_Platform-Obj59_Index
000124DA 0000                       		dc.w Obj59_Action-Obj59_Index
000124DC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000124DE                            
000124DE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000124E0                            
000124E0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000124E2 2001                       		dc.b $20, 1
000124E4 3401                       		dc.b $34, 1
000124E6 1003                       		dc.b $10, 3
000124E8 2003                       		dc.b $20, 3
000124EA 3403                       		dc.b $34, 3
000124EC 1401                       		dc.b $14, 1
000124EE 2401                       		dc.b $24, 1
000124F0 2C01                       		dc.b $2C, 1
000124F2 1403                       		dc.b $14, 3
000124F4 2403                       		dc.b $24, 3
000124F6 2C03                       		dc.b $2C, 3
000124F8 2005                       		dc.b $20, 5
000124FA 2007                       		dc.b $20, 7
000124FC 3009                       		dc.b $30, 9
000124FE                            ; ===========================================================================
000124FE                            
000124FE                            Obj59_Main:				; XREF: Obj59_Index
000124FE 5428 0024                  		addq.b	#2,$24(a0)
00012502 7000                       		moveq	#0,d0
00012504 1028 0028                  		move.b	$28(a0),d0
00012508 6A00                       		bpl.s	Obj59_Main2
0001250A 5828 0024                  		addq.b	#4,$24(a0)
0001250E 0240 007F                  		andi.w	#$7F,d0
00012512 C0FC 0006                  		mulu.w	#6,d0
00012516 3140 003C                  		move.w	d0,$3C(a0)
0001251A 3140 003E                  		move.w	d0,$3E(a0)
0001251E 588F                       		addq.l	#4,sp
00012520 4E75                       		rts	
00012522                            ; ===========================================================================
00012522                            
00012522                            Obj59_Main2:
00012522 E648                       		lsr.w	#3,d0
00012524 0240 001E                  		andi.w	#$1E,d0
00012528 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001252C 115A 0019                  		move.b	(a2)+,$19(a0)
00012530 115A 001A                  		move.b	(a2)+,$1A(a0)
00012534 7000                       		moveq	#0,d0
00012536 1028 0028                  		move.b	$28(a0),d0
0001253A D040                       		add.w	d0,d0
0001253C 0240 001E                  		andi.w	#$1E,d0
00012540 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012544 101A                       		move.b	(a2)+,d0
00012546 E548                       		lsl.w	#2,d0
00012548 3140 003C                  		move.w	d0,$3C(a0)
0001254C 115A 0028                  		move.b	(a2)+,$28(a0)
00012550 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00012558 317C 4000 0002             		move.w	#$4000,2(a0)
0001255E 117C 0004 0001             		move.b	#4,1(a0)
00012564 117C 0004 0018             		move.b	#4,$18(a0)
0001256A 3168 0008 0032             		move.w	8(a0),$32(a0)
00012570 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012576                            
00012576                            Obj59_Platform:				; XREF: Obj59_Index
00012576 7200                       		moveq	#0,d1
00012578 1228 0019                  		move.b	$19(a0),d1
0001257C 4EB9 0000 8BAC             		jsr	(PlatformObject).l
00012582 6000 0000                  		bra.w	Obj59_Types
00012586                            ; ===========================================================================
00012586                            
00012586                            Obj59_Action:				; XREF: Obj59_Index
00012586 7200                       		moveq	#0,d1
00012588 1228 0019                  		move.b	$19(a0),d1
0001258C 4EB9 0000 8D20             		jsr	(ExitPlatform).l
00012592 3F28 0008                  		move.w	8(a0),-(sp)
00012596 6100 0000                  		bsr.w	Obj59_Types
0001259A 341F                       		move.w	(sp)+,d2
0001259C 4A10                       		tst.b	0(a0)
0001259E 6700                       		beq.s	locret_10BD4
000125A0 4EF9 0000 928A             		jmp	(MvSonicOnPtfm2).l
000125A6                            ; ===========================================================================
000125A6                            
000125A6                            locret_10BD4:
000125A6 4E75                       		rts	
000125A8                            ; ===========================================================================
000125A8                            
000125A8                            Obj59_Types:
000125A8 7000                       		moveq	#0,d0
000125AA 1028 0028                  		move.b	$28(a0),d0
000125AE 0240 000F                  		andi.w	#$F,d0
000125B2 D040                       		add.w	d0,d0
000125B4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000125B8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000125BC                            ; ===========================================================================
000125BC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125C0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125C4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125C8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000125CC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000125D0                            ; ===========================================================================
000125D0                            
000125D0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000125D0 4E75                       		rts	
000125D2                            ; ===========================================================================
000125D2                            
000125D2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000125D2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000125D8 6600                       		bne.s	locret_10C0C
000125DA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000125DE                            
000125DE                            locret_10C0C:
000125DE 4E75                       		rts	
000125E0                            ; ===========================================================================
000125E0                            
000125E0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000125E0 6100 0000                  		bsr.w	Obj59_Move
000125E4 3028 0034                  		move.w	$34(a0),d0
000125E8 4440                       		neg.w	d0
000125EA D068 0030                  		add.w	$30(a0),d0
000125EE 3140 000C                  		move.w	d0,$C(a0)
000125F2 4E75                       		rts	
000125F4                            ; ===========================================================================
000125F4                            
000125F4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000125F4 6100 0000                  		bsr.w	Obj59_Move
000125F8 3028 0034                  		move.w	$34(a0),d0
000125FC D068 0030                  		add.w	$30(a0),d0
00012600 3140 000C                  		move.w	d0,$C(a0)
00012604 4E75                       		rts	
00012606                            ; ===========================================================================
00012606                            
00012606                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00012606 6100 0000                  		bsr.w	Obj59_Move
0001260A 3028 0034                  		move.w	$34(a0),d0
0001260E E240                       		asr.w	#1,d0
00012610 4440                       		neg.w	d0
00012612 D068 0030                  		add.w	$30(a0),d0
00012616 3140 000C                  		move.w	d0,$C(a0)
0001261A 3028 0034                  		move.w	$34(a0),d0
0001261E D068 0032                  		add.w	$32(a0),d0
00012622 3140 0008                  		move.w	d0,8(a0)
00012626 4E75                       		rts	
00012628                            ; ===========================================================================
00012628                            
00012628                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012628 6100 0000                  		bsr.w	Obj59_Move
0001262C 3028 0034                  		move.w	$34(a0),d0
00012630 E240                       		asr.w	#1,d0
00012632 D068 0030                  		add.w	$30(a0),d0
00012636 3140 000C                  		move.w	d0,$C(a0)
0001263A 3028 0034                  		move.w	$34(a0),d0
0001263E 4440                       		neg.w	d0
00012640 D068 0032                  		add.w	$32(a0),d0
00012644 3140 0008                  		move.w	d0,8(a0)
00012648 4E75                       		rts	
0001264A                            ; ===========================================================================
0001264A                            
0001264A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001264A 6100 0000                  		bsr.w	Obj59_Move
0001264E 3028 0034                  		move.w	$34(a0),d0
00012652 4440                       		neg.w	d0
00012654 D068 0030                  		add.w	$30(a0),d0
00012658 3140 000C                  		move.w	d0,$C(a0)
0001265C 4A28 0028                  		tst.b	$28(a0)
00012660 6700 0000                  		beq.w	loc_10C94
00012664 4E75                       		rts	
00012666                            ; ===========================================================================
00012666                            
00012666                            loc_10C94:
00012666 0828 0003 0022             		btst	#3,$22(a0)
0001266C 6700                       		beq.s	Obj59_Delete
0001266E 08E9 0001 0022             		bset	#1,$22(a1)
00012674 08A9 0003 0022             		bclr	#3,$22(a1)
0001267A 137C 0002 0024             		move.b	#2,$24(a1)
00012680                            
00012680                            Obj59_Delete:
00012680 6000 C974                  		bra.w	DeleteObject
00012684                            
00012684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012684                            
00012684                            
00012684                            Obj59_Move:				; XREF: Obj59_Type02; et al
00012684 3028 0038                  		move.w	$38(a0),d0
00012688 4A28 003A                  		tst.b	$3A(a0)
0001268C 6600                       		bne.s	loc_10CC8
0001268E 0C40 0800                  		cmpi.w	#$800,d0
00012692 6400                       		bcc.s	loc_10CD0
00012694 0640 0010                  		addi.w	#$10,d0
00012698 6000                       		bra.s	loc_10CD0
0001269A                            ; ===========================================================================
0001269A                            
0001269A                            loc_10CC8:
0001269A 4A40                       		tst.w	d0
0001269C 6700                       		beq.s	loc_10CD0
0001269E 0440 0010                  		subi.w	#$10,d0
000126A2                            
000126A2                            loc_10CD0:
000126A2 3140 0038                  		move.w	d0,$38(a0)
000126A6 48C0                       		ext.l	d0
000126A8 E180                       		asl.l	#8,d0
000126AA D0A8 0034                  		add.l	$34(a0),d0
000126AE 2140 0034                  		move.l	d0,$34(a0)
000126B2 4840                       		swap	d0
000126B4 3428 003C                  		move.w	$3C(a0),d2
000126B8 B042                       		cmp.w	d2,d0
000126BA 6300                       		bls.s	loc_10CF0
000126BC 117C 0001 003A             		move.b	#1,$3A(a0)
000126C2                            
000126C2                            loc_10CF0:
000126C2 D442                       		add.w	d2,d2
000126C4 B042                       		cmp.w	d2,d0
000126C6 6600                       		bne.s	locret_10CFA
000126C8 4228 0028                  		clr.b	$28(a0)
000126CC                            
000126CC                            locret_10CFA:
000126CC 4E75                       		rts	
000126CE                            ; End of function Obj59_Move
000126CE                            
000126CE                            ; ===========================================================================
000126CE                            
000126CE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000126CE 5368 003C                  		subq.w	#1,$3C(a0)
000126D2 6600                       		bne.s	Obj59_ChkDel
000126D4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000126DA 6100 CD72                  		bsr.w	SingleObjLoad
000126DE 6600                       		bne.s	Obj59_ChkDel
000126E0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000126E4 3368 0008 0008             		move.w	8(a0),8(a1)
000126EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126F0 137C 000E 0028             		move.b	#$E,$28(a1)
000126F6                            
000126F6                            Obj59_ChkDel:
000126F6 588F                       		addq.l	#4,sp
000126F8 3028 0008                  		move.w	8(a0),d0
000126FC 0240 FF80                  		andi.w	#$FF80,d0
00012700 3238 F700                  		move.w	($FFFFF700).w,d1
00012704 0441 0080                  		subi.w	#$80,d1
00012708 0241 FF80                  		andi.w	#$FF80,d1
0001270C 9041                       		sub.w	d1,d0
0001270E 0C40 0280                  		cmpi.w	#$280,d0
00012712 6200 C8E2                  		bhi.w	DeleteObject
00012716 4E75                       		rts	
00012718                            ; ===========================================================================
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012718                            ; ---------------------------------------------------------------------------
00012718                            Map_obj59:
00012718                            	include "_maps\obj59.asm"
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012718                            ; ---------------------------------------------------------------------------
00012718 0000                       		dc.w byte_10D4A-Map_obj59
0001271A 03                         byte_10D4A:	dc.b 3
0001271B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012720 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012725 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001272A                            		even
0001272A                            		even
0001272A                            
0001272A                            ; ===========================================================================
0001272A                            ; ---------------------------------------------------------------------------
0001272A                            ; Object 5A - platforms	moving in circles (SLZ)
0001272A                            ; ---------------------------------------------------------------------------
0001272A                            
0001272A                            Obj5A:					; XREF: Obj_Index
0001272A 7000                       		moveq	#0,d0
0001272C 1028 0024                  		move.b	$24(a0),d0
00012730 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012734 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012738 3028 0032                  		move.w	$32(a0),d0
0001273C 0240 FF80                  		andi.w	#$FF80,d0
00012740 3238 F700                  		move.w	($FFFFF700).w,d1
00012744 0441 0080                  		subi.w	#$80,d1
00012748 0241 FF80                  		andi.w	#$FF80,d1
0001274C 9041                       		sub.w	d1,d0
0001274E 0C40 0280                  		cmpi.w	#$280,d0
00012752 6200 C8A2                  		bhi.w	DeleteObject
00012756 6000 C862                  		bra.w	DisplaySprite
0001275A                            ; ===========================================================================
0001275A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001275C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001275E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012760                            ; ===========================================================================
00012760                            
00012760                            Obj5A_Main:				; XREF: Obj5A_Index
00012760 5428 0024                  		addq.b	#2,$24(a0)
00012764 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001276C 317C 4000 0002             		move.w	#$4000,2(a0)
00012772 117C 0004 0001             		move.b	#4,1(a0)
00012778 117C 0004 0018             		move.b	#4,$18(a0)
0001277E 117C 0018 0019             		move.b	#$18,$19(a0)
00012784 3168 0008 0032             		move.w	8(a0),$32(a0)
0001278A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012790                            
00012790                            Obj5A_Platform:				; XREF: Obj5A_Index
00012790 7200                       		moveq	#0,d1
00012792 1228 0019                  		move.b	$19(a0),d1
00012796 4EB9 0000 8BAC             		jsr	(PlatformObject).l
0001279C 6000 0000                  		bra.w	Obj5A_Types
000127A0                            ; ===========================================================================
000127A0                            
000127A0                            Obj5A_Action:				; XREF: Obj5A_Index
000127A0 7200                       		moveq	#0,d1
000127A2 1228 0019                  		move.b	$19(a0),d1
000127A6 4EB9 0000 8D20             		jsr	(ExitPlatform).l
000127AC 3F28 0008                  		move.w	8(a0),-(sp)
000127B0 6100 0000                  		bsr.w	Obj5A_Types
000127B4 341F                       		move.w	(sp)+,d2
000127B6 4EF9 0000 928A             		jmp	(MvSonicOnPtfm2).l
000127BC                            ; ===========================================================================
000127BC                            
000127BC                            Obj5A_Types:
000127BC 7000                       		moveq	#0,d0
000127BE 1028 0028                  		move.b	$28(a0),d0
000127C2 0240 000C                  		andi.w	#$C,d0
000127C6 E248                       		lsr.w	#1,d0
000127C8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000127CC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000127D0                            ; ===========================================================================
000127D0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000127D2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000127D4                            ; ===========================================================================
000127D4                            
000127D4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000127D4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000127D8 0401 0050                  		subi.b	#$50,d1
000127DC 4881                       		ext.w	d1
000127DE 1438 FE84                  		move.b	($FFFFFE84).w,d2
000127E2 0402 0050                  		subi.b	#$50,d2
000127E6 4882                       		ext.w	d2
000127E8 0828 0000 0028             		btst	#0,$28(a0)
000127EE 6700                       		beq.s	loc_10E24
000127F0 4441                       		neg.w	d1
000127F2 4442                       		neg.w	d2
000127F4                            
000127F4                            loc_10E24:
000127F4 0828 0001 0028             		btst	#1,$28(a0)
000127FA 6700                       		beq.s	loc_10E30
000127FC 4441                       		neg.w	d1
000127FE C342                       		exg	d1,d2
00012800                            
00012800                            loc_10E30:
00012800 D268 0032                  		add.w	$32(a0),d1
00012804 3141 0008                  		move.w	d1,8(a0)
00012808 D468 0030                  		add.w	$30(a0),d2
0001280C 3142 000C                  		move.w	d2,$C(a0)
00012810 4E75                       		rts	
00012812                            ; ===========================================================================
00012812                            
00012812                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012812 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012816 0401 0050                  		subi.b	#$50,d1
0001281A 4881                       		ext.w	d1
0001281C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012820 0402 0050                  		subi.b	#$50,d2
00012824 4882                       		ext.w	d2
00012826 0828 0000 0028             		btst	#0,$28(a0)
0001282C 6700                       		beq.s	loc_10E62
0001282E 4441                       		neg.w	d1
00012830 4442                       		neg.w	d2
00012832                            
00012832                            loc_10E62:
00012832 0828 0001 0028             		btst	#1,$28(a0)
00012838 6700                       		beq.s	loc_10E6E
0001283A 4441                       		neg.w	d1
0001283C C342                       		exg	d1,d2
0001283E                            
0001283E                            loc_10E6E:
0001283E 4441                       		neg.w	d1
00012840 D268 0032                  		add.w	$32(a0),d1
00012844 3141 0008                  		move.w	d1,8(a0)
00012848 D468 0030                  		add.w	$30(a0),d2
0001284C 3142 000C                  		move.w	d2,$C(a0)
00012850 4E75                       		rts	
00012852                            ; ===========================================================================
00012852                            ; ---------------------------------------------------------------------------
00012852                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012852                            ; ---------------------------------------------------------------------------
00012852                            Map_obj5A:
00012852                            	include "_maps\obj5A.asm"
00012852                            ; ---------------------------------------------------------------------------
00012852                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012852                            ; ---------------------------------------------------------------------------
00012852 0000                       		dc.w byte_10E84-Map_obj5A
00012854 02                         byte_10E84:	dc.b 2
00012855 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001285A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012860 00                         		even
00012860 00                         		even
00012860                            
00012860                            ; ===========================================================================
00012860                            ; ---------------------------------------------------------------------------
00012860                            ; Object 5B - blocks that form a staircase (SLZ)
00012860                            ; ---------------------------------------------------------------------------
00012860                            
00012860                            Obj5B:					; XREF: Obj_Index
00012860 7000                       		moveq	#0,d0
00012862 1028 0024                  		move.b	$24(a0),d0
00012866 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001286A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001286E 3028 0030                  		move.w	$30(a0),d0
00012872 0240 FF80                  		andi.w	#$FF80,d0
00012876 3238 F700                  		move.w	($FFFFF700).w,d1
0001287A 0441 0080                  		subi.w	#$80,d1
0001287E 0241 FF80                  		andi.w	#$FF80,d1
00012882 9041                       		sub.w	d1,d0
00012884 0C40 0280                  		cmpi.w	#$280,d0
00012888 6200 C76C                  		bhi.w	DeleteObject
0001288C 6000 C72C                  		bra.w	DisplaySprite
00012890                            ; ===========================================================================
00012890 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012892 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012894 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj5B_Main:				; XREF: Obj5B_Index
00012896 5428 0024                  		addq.b	#2,$24(a0)
0001289A 7638                       		moveq	#$38,d3
0001289C 7801                       		moveq	#1,d4
0001289E 0828 0000 0022             		btst	#0,$22(a0)
000128A4 6700                       		beq.s	loc_10EDA
000128A6 763B                       		moveq	#$3B,d3
000128A8 78FF                       		moveq	#-1,d4
000128AA                            
000128AA                            loc_10EDA:
000128AA 3428 0008                  		move.w	8(a0),d2
000128AE 2248                       		movea.l	a0,a1
000128B0 7203                       		moveq	#3,d1
000128B2 6000                       		bra.s	Obj5B_MakeBlocks
000128B4                            ; ===========================================================================
000128B4                            
000128B4                            Obj5B_Loop:
000128B4 6100 CBAE                  		bsr.w	SingleObjLoad2
000128B8 6600 0000                  		bne.w	Obj5B_Move
000128BC 137C 0004 0024             		move.b	#4,$24(a1)
000128C2                            
000128C2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000128C2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000128C6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000128CE 337C 4000 0002             		move.w	#$4000,2(a1)
000128D4 137C 0004 0001             		move.b	#4,1(a1)
000128DA 137C 0003 0018             		move.b	#3,$18(a1)
000128E0 137C 0010 0019             		move.b	#$10,$19(a1)
000128E6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000128EC 3342 0008                  		move.w	d2,8(a1)
000128F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000128F6 3368 0008 0030             		move.w	8(a0),$30(a1)
000128FC 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012902 0642 0020                  		addi.w	#$20,d2
00012906 1343 0037                  		move.b	d3,$37(a1)
0001290A 2348 003C                  		move.l	a0,$3C(a1)
0001290E D604                       		add.b	d4,d3
00012910 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012914                            
00012914                            Obj5B_Move:				; XREF: Obj5B_Index
00012914 7000                       		moveq	#0,d0
00012916 1028 0028                  		move.b	$28(a0),d0
0001291A 0240 0007                  		andi.w	#7,d0
0001291E D040                       		add.w	d0,d0
00012920 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012924 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012928                            
00012928                            Obj5B_Solid:				; XREF: Obj5B_Index
00012928 2468 003C                  		movea.l	$3C(a0),a2
0001292C 7000                       		moveq	#0,d0
0001292E 1028 0037                  		move.b	$37(a0),d0
00012932 1032 0000                  		move.b	(a2,d0.w),d0
00012936 D068 0032                  		add.w	$32(a0),d0
0001293A 3140 000C                  		move.w	d0,$C(a0)
0001293E 7200                       		moveq	#0,d1
00012940 1228 0019                  		move.b	$19(a0),d1
00012944 0641 000B                  		addi.w	#$B,d1
00012948 343C 0010                  		move.w	#$10,d2
0001294C 363C 0011                  		move.w	#$11,d3
00012950 3828 0008                  		move.w	8(a0),d4
00012954 6100 EA46                  		bsr.w	SolidObject
00012958 4A04                       		tst.b	d4
0001295A 6A00                       		bpl.s	loc_10F92
0001295C 1544 0036                  		move.b	d4,$36(a2)
00012960                            
00012960                            loc_10F92:
00012960 0828 0003 0022             		btst	#3,$22(a0)
00012966 6700                       		beq.s	locret_10FA0
00012968 157C 0001 0036             		move.b	#1,$36(a2)
0001296E                            
0001296E                            locret_10FA0:
0001296E 4E75                       		rts	
00012970                            ; ===========================================================================
00012970 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012972 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012974 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012976 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012978                            ; ===========================================================================
00012978                            
00012978                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012978 4A68 0034                  		tst.w	$34(a0)
0001297C 6600                       		bne.s	loc_10FC0
0001297E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012984 6600                       		bne.s	locret_10FBE
00012986 317C 001E 0034             		move.w	#$1E,$34(a0)
0001298C                            
0001298C                            locret_10FBE:
0001298C 4E75                       		rts	
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            loc_10FC0:
0001298E 5368 0034                  		subq.w	#1,$34(a0)
00012992 66F8                       		bne.s	locret_10FBE
00012994 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012998 4E75                       		rts	
0001299A                            ; ===========================================================================
0001299A                            
0001299A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001299A 4A68 0034                  		tst.w	$34(a0)
0001299E 6600                       		bne.s	loc_10FE0
000129A0 4A28 0036                  		tst.b	$36(a0)
000129A4 6A00                       		bpl.s	locret_10FDE
000129A6 317C 003C 0034             		move.w	#$3C,$34(a0)
000129AC                            
000129AC                            locret_10FDE:
000129AC 4E75                       		rts	
000129AE                            ; ===========================================================================
000129AE                            
000129AE                            loc_10FE0:
000129AE 5368 0034                  		subq.w	#1,$34(a0)
000129B2 6600                       		bne.s	loc_10FEC
000129B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000129B8 4E75                       		rts	
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            loc_10FEC:
000129BA 43E8 0038                  		lea	$38(a0),a1
000129BE 3028 0034                  		move.w	$34(a0),d0
000129C2 E408                       		lsr.b	#2,d0
000129C4 0200 0001                  		andi.b	#1,d0
000129C8 12C0                       		move.b	d0,(a1)+
000129CA 0A00 0001                  		eori.b	#1,d0
000129CE 12C0                       		move.b	d0,(a1)+
000129D0 0A00 0001                  		eori.b	#1,d0
000129D4 12C0                       		move.b	d0,(a1)+
000129D6 0A00 0001                  		eori.b	#1,d0
000129DA 12C0                       		move.b	d0,(a1)+
000129DC 4E75                       		rts	
000129DE                            ; ===========================================================================
000129DE                            
000129DE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000129DE 43E8 0038                  		lea	$38(a0),a1
000129E2 0C11 0080                  		cmpi.b	#$80,(a1)
000129E6 6700                       		beq.s	locret_11038
000129E8 5211                       		addq.b	#1,(a1)
000129EA 7200                       		moveq	#0,d1
000129EC 1219                       		move.b	(a1)+,d1
000129EE 4841                       		swap	d1
000129F0 E289                       		lsr.l	#1,d1
000129F2 2401                       		move.l	d1,d2
000129F4 E289                       		lsr.l	#1,d1
000129F6 2601                       		move.l	d1,d3
000129F8 D682                       		add.l	d2,d3
000129FA 4841                       		swap	d1
000129FC 4842                       		swap	d2
000129FE 4843                       		swap	d3
00012A00 12C3                       		move.b	d3,(a1)+
00012A02 12C2                       		move.b	d2,(a1)+
00012A04 12C1                       		move.b	d1,(a1)+
00012A06                            
00012A06                            locret_11038:
00012A06 4E75                       		rts	
00012A08 4E75                       		rts	
00012A0A                            ; ===========================================================================
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A                            Map_obj5B:
00012A0A                            	include "_maps\obj5B.asm"
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A 0000                       		dc.w byte_1103E-Map_obj5B
00012A0C 01                         byte_1103E:	dc.b 1
00012A0D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012A12                            		even
00012A12                            		even
00012A12                            
00012A12                            ; ===========================================================================
00012A12                            ; ---------------------------------------------------------------------------
00012A12                            ; Object 5C - metal girders in foreground (SLZ)
00012A12                            ; ---------------------------------------------------------------------------
00012A12                            
00012A12                            Obj5C:					; XREF: Obj_Index
00012A12 7000                       		moveq	#0,d0
00012A14 1028 0024                  		move.b	$24(a0),d0
00012A18 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012A1C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012A20                            ; ===========================================================================
00012A20 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012A22 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012A24                            ; ===========================================================================
00012A24                            
00012A24                            Obj5C_Main:				; XREF: Obj5C_Index
00012A24 5428 0024                  		addq.b	#2,$24(a0)
00012A28 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012A30 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012A36 117C 0010 0019             		move.b	#$10,$19(a0)
00012A3C                            
00012A3C                            Obj5C_Display:				; XREF: Obj5C_Index
00012A3C 2238 F700                  		move.l	($FFFFF700).w,d1
00012A40 D281                       		add.l	d1,d1
00012A42 4841                       		swap	d1
00012A44 4441                       		neg.w	d1
00012A46 3141 0008                  		move.w	d1,8(a0)
00012A4A 2238 F704                  		move.l	($FFFFF704).w,d1
00012A4E D281                       		add.l	d1,d1
00012A50 4841                       		swap	d1
00012A52 0241 003F                  		andi.w	#$3F,d1
00012A56 4441                       		neg.w	d1
00012A58 0641 0100                  		addi.w	#$100,d1
00012A5C 3141 000A                  		move.w	d1,$A(a0)
00012A60 6000 C558                  		bra.w	DisplaySprite
00012A64                            ; ===========================================================================
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            Map_obj5C:
00012A64                            	include "_maps\obj5C.asm"
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012A64                            ; ---------------------------------------------------------------------------
00012A64 0000                       		dc.w byte_11098-Map_obj5C
00012A66 09                         byte_11098:	dc.b 9
00012A67 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012A6C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012A71 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012A76 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012A7B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012A80 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012A85 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012A8A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012A8F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012A94                            		even
00012A94                            		even
00012A94                            
00012A94                            ; ===========================================================================
00012A94                            ; ---------------------------------------------------------------------------
00012A94                            ; Object 1B - water surface (LZ)
00012A94                            ; ---------------------------------------------------------------------------
00012A94                            
00012A94                            Obj1B:					; XREF: Obj_Index
00012A94 7000                       		moveq	#0,d0
00012A96 1028 0024                  		move.b	$24(a0),d0
00012A9A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012A9E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012AA2                            ; ===========================================================================
00012AA2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012AA4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012AA6                            ; ===========================================================================
00012AA6                            
00012AA6                            Obj1B_Main:				; XREF: Obj1B_Index
00012AA6 5428 0024                  		addq.b	#2,$24(a0)
00012AAA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012AB2 317C C300 0002             		move.w	#$C300,2(a0)
00012AB8 117C 0004 0001             		move.b	#4,1(a0)
00012ABE 117C 0080 0019             		move.b	#$80,$19(a0)
00012AC4 3168 0008 0030             		move.w	8(a0),$30(a0)
00012ACA                            
00012ACA                            Obj1B_Action:				; XREF: Obj1B_Index
00012ACA 3238 F700                  		move.w	($FFFFF700).w,d1
00012ACE 0241 FFE0                  		andi.w	#$FFE0,d1
00012AD2 D268 0030                  		add.w	$30(a0),d1
00012AD6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012ADC 6700                       		beq.s	loc_11114
00012ADE 0641 0020                  		addi.w	#$20,d1
00012AE2                            
00012AE2                            loc_11114:
00012AE2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012AE6 3238 F646                  		move.w	($FFFFF646).w,d1
00012AEA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012AEE 4A28 0032                  		tst.b	$32(a0)
00012AF2 6600                       		bne.s	Obj1B_Animate
00012AF4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012AFA 6700                       		beq.s	loc_1114A	; if not, branch
00012AFC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012B00 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012B06 6000                       		bra.s	Obj1B_Display
00012B08                            ; ===========================================================================
00012B08                            
00012B08                            Obj1B_Animate:				; XREF: loc_11114
00012B08 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012B0C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012B0E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012B14 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012B18                            
00012B18                            loc_1114A:				; XREF: loc_11114
00012B18 5328 001E                  		subq.b	#1,$1E(a0)
00012B1C 6A00                       		bpl.s	Obj1B_Display
00012B1E 117C 0007 001E             		move.b	#7,$1E(a0)
00012B24 5228 001A                  		addq.b	#1,$1A(a0)
00012B28 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012B2E 6500                       		bcs.s	Obj1B_Display
00012B30 117C 0000 001A             		move.b	#0,$1A(a0)
00012B36                            
00012B36                            Obj1B_Display:
00012B36 6000 C482                  		bra.w	DisplaySprite
00012B3A                            ; ===========================================================================
00012B3A                            ; ---------------------------------------------------------------------------
00012B3A                            ; Sprite mappings - water surface (LZ)
00012B3A                            ; ---------------------------------------------------------------------------
00012B3A                            Map_obj1B:
00012B3A                            	include "_maps\obj1B.asm"
00012B3A                            ; ---------------------------------------------------------------------------
00012B3A                            ; Sprite mappings - water surface (LZ)
00012B3A                            ; ---------------------------------------------------------------------------
00012B3A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012B3E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012B42 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012B46 03                         byte_11178:	dc.b 3
00012B47 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012B4C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012B51 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012B56 03                         byte_11188:	dc.b 3
00012B57 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012B5C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012B61 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012B66 03                         byte_11198:	dc.b 3
00012B67 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012B6C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012B71 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B76 06                         byte_111A8:	dc.b 6
00012B77 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012B7C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012B81 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012B86 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012B8B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012B90 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012B95 06                         byte_111C7:	dc.b 6
00012B96 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012B9B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012BA0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012BA5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012BAA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012BAF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012BB4 06                         byte_111E6:	dc.b 6
00012BB5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012BBA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012BBF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012BC4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012BC9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012BCE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012BD4 00                         		even
00012BD4 00                         		even
00012BD4                            
00012BD4                            ; ===========================================================================
00012BD4                            ; ---------------------------------------------------------------------------
00012BD4                            ; Object 0B - pole that	breaks (LZ)
00012BD4                            ; ---------------------------------------------------------------------------
00012BD4                            
00012BD4                            Obj0B:					; XREF: Obj_Index
00012BD4 7000                       		moveq	#0,d0
00012BD6 1028 0024                  		move.b	$24(a0),d0
00012BDA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012BDE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012BE2                            ; ===========================================================================
00012BE2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012BE4 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012BE6 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012BE8                            ; ===========================================================================
00012BE8                            
00012BE8                            Obj0B_Main:				; XREF: Obj0B_Index
00012BE8 5428 0024                  		addq.b	#2,$24(a0)
00012BEC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012BF4 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012BFA 117C 0004 0001             		move.b	#4,1(a0)
00012C00 117C 0008 0019             		move.b	#8,$19(a0)
00012C06 117C 0004 0018             		move.b	#4,$18(a0)
00012C0C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012C12 7000                       		moveq	#0,d0
00012C14 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C18 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012C1C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012C20                            
00012C20                            Obj0B_Action:				; XREF: Obj0B_Index
00012C20 4A28 0032                  		tst.b	$32(a0)
00012C24 6700                       		beq.s	Obj0B_Grab
00012C26 4A68 0030                  		tst.w	$30(a0)
00012C2A 6700                       		beq.s	Obj0B_MoveUp
00012C2C 5368 0030                  		subq.w	#1,$30(a0)
00012C30 6600                       		bne.s	Obj0B_MoveUp
00012C32 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012C38 6000                       		bra.s	Obj0B_Release
00012C3A                            ; ===========================================================================
00012C3A                            
00012C3A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012C3A 43F8 D000                  		lea	($FFFFD000).w,a1
00012C3E 3028 000C                  		move.w	$C(a0),d0
00012C42 0440 0018                  		subi.w	#$18,d0
00012C46 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012C4C 6700                       		beq.s	Obj0B_MoveDown
00012C4E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012C52 B069 000C                  		cmp.w	$C(a1),d0
00012C56 6500                       		bcs.s	Obj0B_MoveDown
00012C58 3340 000C                  		move.w	d0,$C(a1)
00012C5C                            
00012C5C                            Obj0B_MoveDown:
00012C5C 0640 0024                  		addi.w	#$24,d0
00012C60 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012C66 6700                       		beq.s	Obj0B_LetGo
00012C68 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012C6C B069 000C                  		cmp.w	$C(a1),d0
00012C70 6400                       		bcc.s	Obj0B_LetGo
00012C72 3340 000C                  		move.w	d0,$C(a1)
00012C76                            
00012C76                            Obj0B_LetGo:
00012C76 1038 F603                  		move.b	($FFFFF603).w,d0
00012C7A 0240 0070                  		andi.w	#$70,d0
00012C7E 6700                       		beq.s	Obj0B_Display
00012C80                            
00012C80                            Obj0B_Release:				; XREF: Obj0B_Action
00012C80 4228 0020                  		clr.b	$20(a0)
00012C84 5428 0024                  		addq.b	#2,$24(a0)
00012C88 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012C8C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012C90 4228 0032                  		clr.b	$32(a0)
00012C94 6000                       		bra.s	Obj0B_Display
00012C96                            ; ===========================================================================
00012C96                            
00012C96                            Obj0B_Grab:				; XREF: Obj0B_Action
00012C96 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012C9A 6700                       		beq.s	Obj0B_Display	; if not, branch
00012C9C 43F8 D000                  		lea	($FFFFD000).w,a1
00012CA0 3028 0008                  		move.w	8(a0),d0
00012CA4 0640 0014                  		addi.w	#$14,d0
00012CA8 B069 0008                  		cmp.w	8(a1),d0
00012CAC 6400                       		bcc.s	Obj0B_Display
00012CAE 4228 0021                  		clr.b	$21(a0)
00012CB2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012CB8 6400                       		bcc.s	Obj0B_Display
00012CBA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012CBE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012CC2 3028 0008                  		move.w	8(a0),d0
00012CC6 0640 0014                  		addi.w	#$14,d0
00012CCA 3340 0008                  		move.w	d0,8(a1)
00012CCE 08A9 0000 0022             		bclr	#0,$22(a1)
00012CD4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012CDA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012CE0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012CE6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012CEC                            
00012CEC                            Obj0B_Display:				; XREF: Obj0B_Index
00012CEC 6000 E386                  		bra.w	MarkObjGone
00012CF0                            ; ===========================================================================
00012CF0                            ; ---------------------------------------------------------------------------
00012CF0                            ; Sprite mappings - pole that breaks (LZ)
00012CF0                            ; ---------------------------------------------------------------------------
00012CF0                            Map_obj0B:
00012CF0                            	include "_maps\obj0B.asm"
00012CF0                            ; ---------------------------------------------------------------------------
00012CF0                            ; Sprite mappings - pole that breaks (LZ)
00012CF0                            ; ---------------------------------------------------------------------------
00012CF0 0000                       		dc.w byte_11326-Map_obj0B
00012CF2 0000                       		dc.w byte_11331-Map_obj0B
00012CF4 02                         byte_11326:	dc.b 2			; normal pole
00012CF5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012CFA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012CFF 04                         byte_11331:	dc.b 4			; broken pole
00012D00 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012D05 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012D0A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012D0F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012D14                            		even
00012D14                            		even
00012D14                            
00012D14                            ; ===========================================================================
00012D14                            ; ---------------------------------------------------------------------------
00012D14                            ; Object 0C - flapping door (LZ)
00012D14                            ; ---------------------------------------------------------------------------
00012D14                            
00012D14                            Obj0C:					; XREF: Obj_Index
00012D14 7000                       		moveq	#0,d0
00012D16 1028 0024                  		move.b	$24(a0),d0
00012D1A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012D1E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012D22                            ; ===========================================================================
00012D22 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012D24 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            Obj0C_Main:				; XREF: Obj0C_Index
00012D26 5428 0024                  		addq.b	#2,$24(a0)
00012D2A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012D32 317C 4328 0002             		move.w	#$4328,2(a0)
00012D38 0028 0004 0001             		ori.b	#4,1(a0)
00012D3E 117C 0028 0019             		move.b	#$28,$19(a0)
00012D44 7000                       		moveq	#0,d0
00012D46 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D4A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012D4E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012D52                            
00012D52                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012D52 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012D56 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012D58 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012D5E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012D64 4A28 0001                  		tst.b	1(a0)
00012D68 6A00                       		bpl.s	Obj0C_Solid
00012D6A 303C 00BB                  		move.w	#$BB,d0
00012D6E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play door sound
00012D74                            
00012D74                            Obj0C_Solid:
00012D74 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012D7A 6100 9126                  		bsr.w	AnimateSprite
00012D7E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012D82 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012D86 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012D88 3038 D008                  		move.w	($FFFFD008).w,d0
00012D8C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012D90 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012D92 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012D98 323C 0013                  		move.w	#$13,d1
00012D9C 343C 0020                  		move.w	#$20,d2
00012DA0 3602                       		move.w	d2,d3
00012DA2 5243                       		addq.w	#1,d3
00012DA4 3828 0008                  		move.w	8(a0),d4
00012DA8 6100 E5F2                  		bsr.w	SolidObject	; make the door	solid
00012DAC                            
00012DAC                            Obj0C_Display:
00012DAC 6000 E2C6                  		bra.w	MarkObjGone
00012DB0                            ; ===========================================================================
00012DB0                            Ani_obj0C:
00012DB0                            	include "_anim\obj0C.asm"
00012DB0                            ; ---------------------------------------------------------------------------
00012DB0                            ; Animation script - flapping door (LZ)
00012DB0                            ; ---------------------------------------------------------------------------
00012DB0 0000                       		dc.w byte_113E6-Ani_obj0C
00012DB2 0000                       		dc.w byte_113EC-Ani_obj0C
00012DB4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012DBA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012DC0                            		even
00012DC0                            		even
00012DC0                            
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            ; Sprite mappings - flapping door (LZ)
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            Map_obj0C:
00012DC0                            	include "_maps\obj0C.asm"
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            ; Sprite mappings - flapping door (LZ)
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0 0000                       		dc.w byte_113F8-Map_obj0C
00012DC2 0000                       		dc.w byte_11403-Map_obj0C
00012DC4 0000                       		dc.w byte_1140E-Map_obj0C
00012DC6 02                         byte_113F8:	dc.b 2
00012DC7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012DCC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012DD1 02                         byte_11403:	dc.b 2
00012DD2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012DD7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012DDC 02                         byte_1140E:	dc.b 2
00012DDD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012DE2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012DE8 00                         		even
00012DE8 00                         		even
00012DE8                            
00012DE8                            ; ===========================================================================
00012DE8                            ; ---------------------------------------------------------------------------
00012DE8                            ; Object 71 - invisible	solid blocks
00012DE8                            ; ---------------------------------------------------------------------------
00012DE8                            
00012DE8                            Obj71:					; XREF: Obj_Index
00012DE8 7000                       		moveq	#0,d0
00012DEA 1028 0024                  		move.b	$24(a0),d0
00012DEE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012DF2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012DF6                            ; ===========================================================================
00012DF6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012DF8 0000                       		dc.w Obj71_Solid-Obj71_Index
00012DFA                            ; ===========================================================================
00012DFA                            
00012DFA                            Obj71_Main:				; XREF: Obj71_Index
00012DFA 5428 0024                  		addq.b	#2,$24(a0)
00012DFE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012E06 317C 8680 0002             		move.w	#$8680,2(a0)
00012E0C 0028 0004 0001             		ori.b	#4,1(a0)
00012E12 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E16 1200                       		move.b	d0,d1
00012E18 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012E1C 0640 0010                  		addi.w	#$10,d0
00012E20 E248                       		lsr.w	#1,d0
00012E22 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012E26 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012E2A 5241                       		addq.w	#1,d1
00012E2C E749                       		lsl.w	#3,d1
00012E2E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012E32                            
00012E32                            Obj71_Solid:				; XREF: Obj71_Index
00012E32 6100 C400                  		bsr.w	ChkObjOnScreen
00012E36 6600                       		bne.s	Obj71_ChkDel
00012E38 7200                       		moveq	#0,d1
00012E3A 1228 0019                  		move.b	$19(a0),d1
00012E3E 0641 000B                  		addi.w	#$B,d1
00012E42 7400                       		moveq	#0,d2
00012E44 1428 0016                  		move.b	$16(a0),d2
00012E48 3602                       		move.w	d2,d3
00012E4A 5243                       		addq.w	#1,d3
00012E4C 3828 0008                  		move.w	8(a0),d4
00012E50 6100 E592                  		bsr.w	SolidObject71
00012E54                            
00012E54                            Obj71_ChkDel:
00012E54 3028 0008                  		move.w	8(a0),d0
00012E58 0240 FF80                  		andi.w	#$FF80,d0
00012E5C 3238 F700                  		move.w	($FFFFF700).w,d1
00012E60 0441 0080                  		subi.w	#$80,d1
00012E64 0241 FF80                  		andi.w	#$FF80,d1
00012E68 9041                       		sub.w	d1,d0
00012E6A 0C40 0280                  		cmpi.w	#$280,d0
00012E6E 6200                       		bhi.s	Obj71_Delete
00012E70 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012E74 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012E76 4EFA C142                  		jmp	DisplaySprite	; if yes, display the object
00012E7A                            ; ===========================================================================
00012E7A                            
00012E7A                            Obj71_NoDisplay:
00012E7A 4E75                       		rts	
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            Obj71_Delete:
00012E7C 4EFA C178                  		jmp	DeleteObject
00012E80                            ; ===========================================================================
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Sprite mappings - invisible solid blocks
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            Map_obj71:
00012E80                            	include "_maps\obj71.asm"
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Sprite mappings - invisible solid blocks
00012E80                            ; ---------------------------------------------------------------------------
00012E80 0000                       		dc.w byte_114BC-Map_obj71
00012E82 0000                       		dc.w byte_114D1-Map_obj71
00012E84 0000                       		dc.w byte_114E6-Map_obj71
00012E86 04                         byte_114BC:	dc.b 4
00012E87 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012E8C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012E91 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012E96 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012E9B 04                         byte_114D1:	dc.b 4
00012E9C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012EA1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012EA6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012EAB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012EB0 04                         byte_114E6:	dc.b 4
00012EB1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012EB6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012EBB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012EC0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012EC6 00                         		even
00012EC6 00                         		even
00012EC6                            
00012EC6                            ; ===========================================================================
00012EC6                            ; ---------------------------------------------------------------------------
00012EC6                            ; Object 5D - fans (SLZ)
00012EC6                            ; ---------------------------------------------------------------------------
00012EC6                            
00012EC6                            Obj5D:					; XREF: Obj_Index
00012EC6 7000                       		moveq	#0,d0
00012EC8 1028 0024                  		move.b	$24(a0),d0
00012ECC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012ED0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012ED4                            ; ===========================================================================
00012ED4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012ED6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012ED8                            ; ===========================================================================
00012ED8                            
00012ED8                            Obj5D_Main:				; XREF: Obj5D_Index
00012ED8 5428 0024                  		addq.b	#2,$24(a0)
00012EDC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012EE4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012EEA 0028 0004 0001             		ori.b	#4,1(a0)
00012EF0 117C 0010 0019             		move.b	#$10,$19(a0)
00012EF6 117C 0004 0018             		move.b	#4,$18(a0)
00012EFC                            
00012EFC                            Obj5D_Delay:				; XREF: Obj5D_Index
00012EFC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012F02 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012F04 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012F08 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012F0A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012F10 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012F16 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012F18 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012F1E                            
00012F1E                            Obj5D_Blow:
00012F1E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012F22 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012F26 43F8 D000                  		lea	($FFFFD000).w,a1
00012F2A 3029 0008                  		move.w	8(a1),d0
00012F2E 9068 0008                  		sub.w	8(a0),d0
00012F32 0828 0000 0022             		btst	#0,$22(a0)
00012F38 6600                       		bne.s	Obj5D_ChkSonic
00012F3A 4440                       		neg.w	d0
00012F3C                            
00012F3C                            Obj5D_ChkSonic:
00012F3C 0640 0050                  		addi.w	#$50,d0
00012F40 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012F44 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012F46 3229 000C                  		move.w	$C(a1),d1
00012F4A 0641 0060                  		addi.w	#$60,d1
00012F4E 9268 000C                  		sub.w	$C(a0),d1
00012F52 6500                       		bcs.s	Obj5D_Animate
00012F54 0C41 0070                  		cmpi.w	#$70,d1
00012F58 6400                       		bcc.s	Obj5D_Animate
00012F5A 0440 0050                  		subi.w	#$50,d0
00012F5E 6400                       		bcc.s	loc_1159A
00012F60 4640                       		not.w	d0
00012F62 D040                       		add.w	d0,d0
00012F64                            
00012F64                            loc_1159A:
00012F64 0640 0060                  		addi.w	#$60,d0
00012F68 0828 0000 0022             		btst	#0,$22(a0)
00012F6E 6600                       		bne.s	loc_115A8
00012F70 4440                       		neg.w	d0
00012F72                            
00012F72                            loc_115A8:
00012F72 4400                       		neg.b	d0
00012F74 E840                       		asr.w	#4,d0
00012F76 0828 0000 0028             		btst	#0,$28(a0)
00012F7C 6700                       		beq.s	Obj5D_MoveSonic
00012F7E 4440                       		neg.w	d0
00012F80                            
00012F80                            Obj5D_MoveSonic:
00012F80 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012F84                            
00012F84                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012F84 5328 001E                  		subq.b	#1,$1E(a0)
00012F88 6A00                       		bpl.s	Obj5D_ChkDel
00012F8A 117C 0000 001E             		move.b	#0,$1E(a0)
00012F90 5228 001B                  		addq.b	#1,$1B(a0)
00012F94 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012F9A 6500                       		bcs.s	loc_115D8
00012F9C 117C 0000 001B             		move.b	#0,$1B(a0)
00012FA2                            
00012FA2                            loc_115D8:
00012FA2 7000                       		moveq	#0,d0
00012FA4 0828 0000 0028             		btst	#0,$28(a0)
00012FAA 6700                       		beq.s	loc_115E4
00012FAC 7002                       		moveq	#2,d0
00012FAE                            
00012FAE                            loc_115E4:
00012FAE D028 001B                  		add.b	$1B(a0),d0
00012FB2 1140 001A                  		move.b	d0,$1A(a0)
00012FB6                            
00012FB6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012FB6 6100 C002                  		bsr.w	DisplaySprite
00012FBA 3028 0008                  		move.w	8(a0),d0
00012FBE 0240 FF80                  		andi.w	#$FF80,d0
00012FC2 3238 F700                  		move.w	($FFFFF700).w,d1
00012FC6 0441 0080                  		subi.w	#$80,d1
00012FCA 0241 FF80                  		andi.w	#$FF80,d1
00012FCE 9041                       		sub.w	d1,d0
00012FD0 0C40 0280                  		cmpi.w	#$280,d0
00012FD4 6200 C020                  		bhi.w	DeleteObject
00012FD8 4E75                       		rts	
00012FDA                            ; ===========================================================================
00012FDA                            ; ---------------------------------------------------------------------------
00012FDA                            ; Sprite mappings - fans (SLZ)
00012FDA                            ; ---------------------------------------------------------------------------
00012FDA                            Map_obj5D:
00012FDA                            	include "_maps\obj5D.asm"
00012FDA                            ; ---------------------------------------------------------------------------
00012FDA                            ; Sprite mappings - fans (SLZ)
00012FDA                            ; ---------------------------------------------------------------------------
00012FDA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012FDE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012FE2 0000                       		dc.w byte_1161A-Map_obj5D
00012FE4 02                         byte_1161A:	dc.b 2
00012FE5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012FEA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012FEF 02                         byte_11625:	dc.b 2
00012FF0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012FF5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012FFA 02                         byte_11630:	dc.b 2
00012FFB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013000 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013006 00                         		even
00013006 00                         		even
00013006                            
00013006                            ; ===========================================================================
00013006                            ; ---------------------------------------------------------------------------
00013006                            ; Object 5E - seesaws (SLZ)
00013006                            ; ---------------------------------------------------------------------------
00013006                            
00013006                            Obj5E:					; XREF: Obj_Index
00013006 7000                       		moveq	#0,d0
00013008 1028 0024                  		move.b	$24(a0),d0
0001300C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00013010 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00013014 3028 0030                  		move.w	$30(a0),d0
00013018 0240 FF80                  		andi.w	#$FF80,d0
0001301C 3238 F700                  		move.w	($FFFFF700).w,d1
00013020 0441 0080                  		subi.w	#$80,d1
00013024 0241 FF80                  		andi.w	#$FF80,d1
00013028 9041                       		sub.w	d1,d0
0001302A 6B00 BFCA                  		bmi.w	DeleteObject
0001302E 0C40 0280                  		cmpi.w	#$280,d0
00013032 6200 BFC2                  		bhi.w	DeleteObject
00013036 6000 BF82                  		bra.w	DisplaySprite
0001303A                            ; ===========================================================================
0001303A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001303C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001303E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013040 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00013042 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00013044 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00013046                            ; ===========================================================================
00013046                            
00013046                            Obj5E_Main:				; XREF: Obj5E_Index
00013046 5428 0024                  		addq.b	#2,$24(a0)
0001304A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00013052 317C 0374 0002             		move.w	#$374,2(a0)
00013058 0028 0004 0001             		ori.b	#4,1(a0)
0001305E 117C 0004 0018             		move.b	#4,$18(a0)
00013064 117C 0030 0019             		move.b	#$30,$19(a0)
0001306A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013070 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00013074 6600                       		bne.s	loc_116D2	; if not, branch
00013076 6100 C3EC                  		bsr.w	SingleObjLoad2
0001307A 6600                       		bne.s	loc_116D2
0001307C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013080 5C29 0024                  		addq.b	#6,$24(a1)
00013084 3368 0008 0008             		move.w	8(a0),8(a1)
0001308A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013090 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013096 2348 003C                  		move.l	a0,$3C(a1)
0001309A                            
0001309A                            loc_116D2:
0001309A 0828 0000 0022             		btst	#0,$22(a0)
000130A0 6700                       		beq.s	loc_116E0
000130A2 117C 0002 001A             		move.b	#2,$1A(a0)
000130A8                            
000130A8                            loc_116E0:
000130A8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000130AE                            
000130AE                            Obj5E_Slope:				; XREF: Obj5E_Index
000130AE 1228 003A                  		move.b	$3A(a0),d1
000130B2 6100 0000                  		bsr.w	loc_11766
000130B6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000130BC 0828 0000 001A             		btst	#0,$1A(a0)
000130C2 6700                       		beq.s	loc_11702
000130C4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000130CA                            
000130CA                            loc_11702:
000130CA 43F8 D000                  		lea	($FFFFD000).w,a1
000130CE 3169 0012 0038             		move.w	$12(a1),$38(a0)
000130D4 323C 0030                  		move.w	#$30,d1
000130D8 4EB9 0000 8C80             		jsr	(SlopeObject).l
000130DE 4E75                       		rts	
000130E0                            ; ===========================================================================
000130E0                            
000130E0                            Obj5E_Slope2:				; XREF: Obj5E_Index
000130E0 6100 0000                  		bsr.w	loc_1174A
000130E4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000130EA 0828 0000 001A             		btst	#0,$1A(a0)
000130F0 6700                       		beq.s	loc_11730
000130F2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000130F8                            
000130F8                            loc_11730:
000130F8 323C 0030                  		move.w	#$30,d1
000130FC 4EB9 0000 8D20             		jsr	(ExitPlatform).l
00013102 323C 0030                  		move.w	#$30,d1
00013106 3428 0008                  		move.w	8(a0),d2
0001310A 4EB9 0000 9C7E             		jsr	SlopeObject2
00013110 4E75                       		rts	
00013112                            ; ===========================================================================
00013112                            
00013112                            loc_1174A:				; XREF: Obj5E_Slope2
00013112 7202                       		moveq	#2,d1
00013114 43F8 D000                  		lea	($FFFFD000).w,a1
00013118 3028 0008                  		move.w	8(a0),d0
0001311C 9069 0008                  		sub.w	8(a1),d0
00013120 6400                       		bcc.s	loc_1175E
00013122 4440                       		neg.w	d0
00013124 7200                       		moveq	#0,d1
00013126                            
00013126                            loc_1175E:
00013126 0C40 0008                  		cmpi.w	#8,d0
0001312A 6400                       		bcc.s	loc_11766
0001312C 7201                       		moveq	#1,d1
0001312E                            
0001312E                            loc_11766:
0001312E 1028 001A                  		move.b	$1A(a0),d0
00013132 B001                       		cmp.b	d1,d0
00013134 6700                       		beq.s	locret_11790
00013136 6400                       		bcc.s	loc_11772
00013138 5400                       		addq.b	#2,d0
0001313A                            
0001313A                            loc_11772:
0001313A 5300                       		subq.b	#1,d0
0001313C 1140 001A                  		move.b	d0,$1A(a0)
00013140 1141 003A                  		move.b	d1,$3A(a0)
00013144 08A8 0000 0001             		bclr	#0,1(a0)
0001314A 0828 0001 001A             		btst	#1,$1A(a0)
00013150 6700                       		beq.s	locret_11790
00013152 08E8 0000 0001             		bset	#0,1(a0)
00013158                            
00013158                            locret_11790:
00013158 4E75                       		rts	
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001315A 5428 0024                  		addq.b	#2,$24(a0)
0001315E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00013166 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001316C 0028 0004 0001             		ori.b	#4,1(a0)
00013172 117C 0004 0018             		move.b	#4,$18(a0)
00013178 117C 008B 0020             		move.b	#$8B,$20(a0)
0001317E 117C 000C 0019             		move.b	#$C,$19(a0)
00013184 3168 0008 0030             		move.w	8(a0),$30(a0)
0001318A 0668 0028 0008             		addi.w	#$28,8(a0)
00013190 3168 000C 0034             		move.w	$C(a0),$34(a0)
00013196 117C 0001 001A             		move.b	#1,$1A(a0)
0001319C 0828 0000 0022             		btst	#0,$22(a0)
000131A2 6700                       		beq.s	Obj5E_MoveSpike
000131A4 0468 0050 0008             		subi.w	#$50,8(a0)
000131AA 117C 0002 003A             		move.b	#2,$3A(a0)
000131B0                            
000131B0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000131B0 2268 003C                  		movea.l	$3C(a0),a1
000131B4 7000                       		moveq	#0,d0
000131B6 1028 003A                  		move.b	$3A(a0),d0
000131BA 9029 003A                  		sub.b	$3A(a1),d0
000131BE 6700                       		beq.s	loc_1183E
000131C0 6400                       		bcc.s	loc_117FC
000131C2 4400                       		neg.b	d0
000131C4                            
000131C4                            loc_117FC:
000131C4 323C F7E8                  		move.w	#-$818,d1
000131C8 343C FEEC                  		move.w	#-$114,d2
000131CC 0C00 0001                  		cmpi.b	#1,d0
000131D0 6700                       		beq.s	loc_11822
000131D2 323C F510                  		move.w	#-$AF0,d1
000131D6 343C FF34                  		move.w	#-$CC,d2
000131DA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000131E0 6D00                       		blt.s	loc_11822
000131E2 323C F200                  		move.w	#-$E00,d1
000131E6 343C FF60                  		move.w	#-$A0,d2
000131EA                            
000131EA                            loc_11822:
000131EA 3141 0012                  		move.w	d1,$12(a0)
000131EE 3142 0010                  		move.w	d2,$10(a0)
000131F2 3028 0008                  		move.w	8(a0),d0
000131F6 9068 0030                  		sub.w	$30(a0),d0
000131FA 6400                       		bcc.s	loc_11838
000131FC 4468 0010                  		neg.w	$10(a0)
00013200                            
00013200                            loc_11838:
00013200 5428 0024                  		addq.b	#2,$24(a0)
00013204 6000                       		bra.s	Obj5E_SpikeFall
00013206                            ; ===========================================================================
00013206                            
00013206                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013206 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001320C 7000                       		moveq	#0,d0
0001320E 1029 001A                  		move.b	$1A(a1),d0
00013212 343C 0028                  		move.w	#$28,d2
00013216 3228 0008                  		move.w	8(a0),d1
0001321A 9268 0030                  		sub.w	$30(a0),d1
0001321E 6400                       		bcc.s	loc_1185C
00013220 4442                       		neg.w	d2
00013222 5440                       		addq.w	#2,d0
00013224                            
00013224                            loc_1185C:
00013224 D040                       		add.w	d0,d0
00013226 3228 0034                  		move.w	$34(a0),d1
0001322A D272 0000                  		add.w	(a2,d0.w),d1
0001322E 3141 000C                  		move.w	d1,$C(a0)
00013232 D468 0030                  		add.w	$30(a0),d2
00013236 3142 0008                  		move.w	d2,8(a0)
0001323A 4268 000E                  		clr.w	$E(a0)
0001323E 4268 000A                  		clr.w	$A(a0)
00013242 4E75                       		rts	
00013244                            ; ===========================================================================
00013244                            
00013244                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00013244 4A68 0012                  		tst.w	$12(a0)
00013248 6A00                       		bpl.s	loc_1189A
0001324A 6100 BD34                  		bsr.w	ObjectFall
0001324E 3028 0034                  		move.w	$34(a0),d0
00013252 0440 002F                  		subi.w	#$2F,d0
00013256 B068 000C                  		cmp.w	$C(a0),d0
0001325A 6E00                       		bgt.s	locret_11898
0001325C 6100 BD22                  		bsr.w	ObjectFall
00013260                            
00013260                            locret_11898:
00013260 4E75                       		rts	
00013262                            ; ===========================================================================
00013262                            
00013262                            loc_1189A:				; XREF: Obj5E_SpikeFall
00013262 6100 BD1C                  		bsr.w	ObjectFall
00013266 2268 003C                  		movea.l	$3C(a0),a1
0001326A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013270 7000                       		moveq	#0,d0
00013272 1029 001A                  		move.b	$1A(a1),d0
00013276 3228 0008                  		move.w	8(a0),d1
0001327A 9268 0030                  		sub.w	$30(a0),d1
0001327E 6400                       		bcc.s	loc_118BA
00013280 5440                       		addq.w	#2,d0
00013282                            
00013282                            loc_118BA:
00013282 D040                       		add.w	d0,d0
00013284 3228 0034                  		move.w	$34(a0),d1
00013288 D272 0000                  		add.w	(a2,d0.w),d1
0001328C B268 000C                  		cmp.w	$C(a0),d1
00013290 6E00                       		bgt.s	locret_11938
00013292 2268 003C                  		movea.l	$3C(a0),a1
00013296 7202                       		moveq	#2,d1
00013298 4A68 0010                  		tst.w	$10(a0)
0001329C 6B00                       		bmi.s	Obj5E_Spring
0001329E 7200                       		moveq	#0,d1
000132A0                            
000132A0                            Obj5E_Spring:
000132A0 1341 003A                  		move.b	d1,$3A(a1)
000132A4 1141 003A                  		move.b	d1,$3A(a0)
000132A8 B229 001A                  		cmp.b	$1A(a1),d1
000132AC 6700                       		beq.s	loc_1192C
000132AE 08A9 0003 0022             		bclr	#3,$22(a1)
000132B4 6700                       		beq.s	loc_1192C
000132B6 4229 0025                  		clr.b	$25(a1)
000132BA 137C 0002 0024             		move.b	#2,$24(a1)
000132C0 45F8 D000                  		lea	($FFFFD000).w,a2
000132C4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000132CA 446A 0012                  		neg.w	$12(a2)
000132CE 08EA 0001 0022             		bset	#1,$22(a2)
000132D4 08AA 0003 0022             		bclr	#3,$22(a2)
000132DA 422A 003C                  		clr.b	$3C(a2)
000132DE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000132E4 157C 0002 0024             		move.b	#2,$24(a2)
000132EA 303C 00CC                  		move.w	#$CC,d0
000132EE 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play spring sound
000132F4                            
000132F4                            loc_1192C:
000132F4 4268 0010                  		clr.w	$10(a0)
000132F8 4268 0012                  		clr.w	$12(a0)
000132FC 5528 0024                  		subq.b	#2,$24(a0)
00013300                            
00013300                            locret_11938:
00013300 4E75                       		rts	
00013302                            ; ===========================================================================
00013302 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001330C                            
0001330C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001333C                            		even
0001333C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001336C                            		even
0001336C                            ; ---------------------------------------------------------------------------
0001336C                            ; Sprite mappings - seesaws (SLZ)
0001336C                            ; ---------------------------------------------------------------------------
0001336C                            Map_obj5E:
0001336C                            	include "_maps\obj5E.asm"
0001336C                            ; ---------------------------------------------------------------------------
0001336C                            ; Sprite mappings - seesaws (SLZ)
0001336C                            ; ---------------------------------------------------------------------------
0001336C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013370 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013374 07                         byte_119AC:	dc.b 7
00013375 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001337A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001337F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013384 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013389 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001338E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013393 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013398 04                         byte_119D0:	dc.b 4
00013399 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001339E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000133A3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000133A8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000133AE 00                         		even
000133AE 00                         		even
000133AE                            
000133AE                            ; ---------------------------------------------------------------------------
000133AE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000133AE                            ; ---------------------------------------------------------------------------
000133AE                            Map_obj5Ea:
000133AE                            	include "_maps\obj5Eballs.asm"
000133AE                            ; ---------------------------------------------------------------------------
000133AE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000133AE                            ; ---------------------------------------------------------------------------
000133AE 0000                       		dc.w byte_119EA-Map_obj5Ea
000133B0 0000                       		dc.w byte_119F0-Map_obj5Ea
000133B2 01                         byte_119EA:	dc.b 1
000133B3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000133B8 01                         byte_119F0:	dc.b 1
000133B9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000133BE                            		even
000133BE                            		even
000133BE                            
000133BE                            ; ===========================================================================
000133BE                            ; ---------------------------------------------------------------------------
000133BE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000133BE                            ; ---------------------------------------------------------------------------
000133BE                            
000133BE                            Obj5F:					; XREF: Obj_Index
000133BE 7000                       		moveq	#0,d0
000133C0 1028 0024                  		move.b	$24(a0),d0
000133C4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000133C8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000133CC                            ; ===========================================================================
000133CC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000133CE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000133D0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000133D2 0000                       		dc.w Obj5F_End-Obj5F_Index
000133D4                            ; ===========================================================================
000133D4                            
000133D4                            Obj5F_Main:				; XREF: Obj5F_Index
000133D4 5428 0024                  		addq.b	#2,$24(a0)
000133D8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000133E0 317C 0400 0002             		move.w	#$400,2(a0)
000133E6 0028 0004 0001             		ori.b	#4,1(a0)
000133EC 117C 0003 0018             		move.b	#3,$18(a0)
000133F2 117C 000C 0019             		move.b	#$C,$19(a0)
000133F8 1028 0028                  		move.b	$28(a0),d0
000133FC 6700                       		beq.s	loc_11A3C
000133FE 1140 0024                  		move.b	d0,$24(a0)
00013402 4E75                       		rts	
00013404                            ; ===========================================================================
00013404                            
00013404                            loc_11A3C:
00013404 117C 009A 0020             		move.b	#$9A,$20(a0)
0001340A 0868 0000 0022             		bchg	#0,$22(a0)
00013410                            
00013410                            Obj5F_Action:				; XREF: Obj5F_Index
00013410 7000                       		moveq	#0,d0
00013412 1028 0025                  		move.b	$25(a0),d0
00013416 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001341A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001341E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013424 6100 8A7C                  		bsr.w	AnimateSprite
00013428 6000 DC4A                  		bra.w	MarkObjGone
0001342C                            ; ===========================================================================
0001342C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001342E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00013430 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00013432                            ; ===========================================================================
00013432                            
00013432                            Obj5F_Walk:				; XREF: Obj5F_Index2
00013432 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013436 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001343A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001343C 5428 0025                  		addq.b	#2,$25(a0)
00013440 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00013446 317C 0010 0010             		move.w	#$10,$10(a0)
0001344C 117C 0001 001C             		move.b	#1,$1C(a0)
00013452 0868 0000 0022             		bchg	#0,$22(a0)
00013458 6700                       		beq.s	locret_11A96
0001345A 4468 0010                  		neg.w	$10(a0)		; change direction
0001345E                            
0001345E                            locret_11A96:
0001345E 4E75                       		rts	
00013460                            ; ===========================================================================
00013460                            
00013460                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013460 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013464 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013468 6B00                       		bmi.s	loc_11AA8
0001346A 6100 BB34                  		bsr.w	SpeedToPos
0001346E 4E75                       		rts	
00013470                            ; ===========================================================================
00013470                            
00013470                            loc_11AA8:
00013470 5528 0025                  		subq.b	#2,$25(a0)
00013474 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001347A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001347E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00013484 4E75                       		rts	
00013486                            ; ===========================================================================
00013486                            
00013486                            Obj5F_Explode:				; XREF: Obj5F_Index2
00013486 5368 0030                  		subq.w	#1,$30(a0)
0001348A 6A00                       		bpl.s	locret_11AD0
0001348C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013490 117C 0000 0024             		move.b	#0,$24(a0)
00013496                            
00013496                            locret_11AD0:
00013496 4E75                       		rts	
00013498                            ; ===========================================================================
00013498                            
00013498                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013498 3038 D008                  		move.w	($FFFFD008).w,d0
0001349C 9068 0008                  		sub.w	8(a0),d0
000134A0 6400                       		bcc.s	loc_11ADE
000134A2 4440                       		neg.w	d0
000134A4                            
000134A4                            loc_11ADE:
000134A4 0C40 0060                  		cmpi.w	#$60,d0
000134A8 6400                       		bcc.s	locret_11B5E
000134AA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000134AE 9068 000C                  		sub.w	$C(a0),d0
000134B2 6400                       		bcc.s	Obj5F_MakeFuse
000134B4 4440                       		neg.w	d0
000134B6                            
000134B6                            Obj5F_MakeFuse:
000134B6 0C40 0060                  		cmpi.w	#$60,d0
000134BA 6400                       		bcc.s	locret_11B5E
000134BC 4A78 FE08                  		tst.w	($FFFFFE08).w
000134C0 6600                       		bne.s	locret_11B5E
000134C2 117C 0004 0025             		move.b	#4,$25(a0)
000134C8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000134CE 4268 0010                  		clr.w	$10(a0)
000134D2 117C 0002 001C             		move.b	#2,$1C(a0)
000134D8 6100 BF8A                  		bsr.w	SingleObjLoad2
000134DC 6600                       		bne.s	locret_11B5E
000134DE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000134E2 3368 0008 0008             		move.w	8(a0),8(a1)
000134E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134EE 3368 000C 0034             		move.w	$C(a0),$34(a1)
000134F4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000134FA 137C 0004 0028             		move.b	#4,$28(a1)
00013500 137C 0003 001C             		move.b	#3,$1C(a1)
00013506 337C 0010 0012             		move.w	#$10,$12(a1)
0001350C 0828 0001 0022             		btst	#1,$22(a0)
00013512 6700                       		beq.s	loc_11B54
00013514 4469 0012                  		neg.w	$12(a1)
00013518                            
00013518                            loc_11B54:
00013518 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001351E 2348 003C                  		move.l	a0,$3C(a1)
00013522                            
00013522                            locret_11B5E:
00013522 4E75                       		rts	
00013524                            ; ===========================================================================
00013524                            
00013524                            Obj5F_Display:				; XREF: Obj5F_Index
00013524 6100                       		bsr.s	loc_11B70
00013526 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001352C 6100 8974                  		bsr.w	AnimateSprite
00013530 6000 DB42                  		bra.w	MarkObjGone
00013534                            ; ===========================================================================
00013534                            
00013534                            loc_11B70:
00013534 5368 0030                  		subq.w	#1,$30(a0)
00013538 6B00                       		bmi.s	loc_11B7C
0001353A 6100 BA64                  		bsr.w	SpeedToPos
0001353E 4E75                       		rts	
00013540                            ; ===========================================================================
00013540                            
00013540                            loc_11B7C:
00013540 4268 0030                  		clr.w	$30(a0)
00013544 4228 0024                  		clr.b	$24(a0)
00013548 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001354E 7203                       		moveq	#3,d1
00013550 2248                       		movea.l	a0,a1
00013552 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013558 6000                       		bra.s	Obj5F_MakeShrap
0001355A                            ; ===========================================================================
0001355A                            
0001355A                            Obj5F_Loop:
0001355A 6100 BF08                  		bsr.w	SingleObjLoad2
0001355E 6600                       		bne.s	loc_11BCE
00013560                            
00013560                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013560 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00013564 3368 0008 0008             		move.w	8(a0),8(a1)
0001356A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013570 137C 0006 0028             		move.b	#6,$28(a1)
00013576 137C 0004 001C             		move.b	#4,$1C(a1)
0001357C 335A 0010                  		move.w	(a2)+,$10(a1)
00013580 335A 0012                  		move.w	(a2)+,$12(a1)
00013584 137C 0098 0020             		move.b	#$98,$20(a1)
0001358A 08E9 0007 0001             		bset	#7,1(a1)
00013590                            
00013590                            loc_11BCE:
00013590 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00013594                            
00013594 117C 0006 0024             		move.b	#6,$24(a0)
0001359A                            
0001359A                            Obj5F_End:				; XREF: Obj5F_Index
0001359A 6100 BA04                  		bsr.w	SpeedToPos
0001359E 0668 0018 0012             		addi.w	#$18,$12(a0)
000135A4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000135AA 6100 88F6                  		bsr.w	AnimateSprite
000135AE 4A28 0001                  		tst.b	1(a0)
000135B2 6A00 BA42                  		bpl.w	DeleteObject
000135B6 6000 BA02                  		bra.w	DisplaySprite
000135BA                            ; ===========================================================================
000135BA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000135CA                            
000135CA                            Ani_obj5F:
000135CA                            	include "_anim\obj5F.asm"
000135CA                            ; ---------------------------------------------------------------------------
000135CA                            ; Animation script - Bomb enemy
000135CA                            ; ---------------------------------------------------------------------------
000135CA 0000                       		dc.w byte_11C12-Ani_obj5F
000135CC 0000                       		dc.w byte_11C16-Ani_obj5F
000135CE 0000                       		dc.w byte_11C1C-Ani_obj5F
000135D0 0000                       		dc.w byte_11C20-Ani_obj5F
000135D2 0000                       		dc.w byte_11C24-Ani_obj5F
000135D4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000135D8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000135DE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000135E2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000135E6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000135EA                            		even
000135EA                            		even
000135EA                            
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            Map_obj5F:
000135EA                            	include "_maps\obj5F.asm"
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000135EA                            ; ---------------------------------------------------------------------------
000135EA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000135EE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000135F2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000135F6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000135FA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000135FE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013602 03                         byte_11C40:	dc.b 3
00013603 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013608 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001360D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013612 03                         byte_11C50:	dc.b 3
00013613 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013618 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001361D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013622 03                         byte_11C60:	dc.b 3
00013623 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013628 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001362D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013632 03                         byte_11C70:	dc.b 3
00013633 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013638 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001363D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013642 03                         byte_11C80:	dc.b 3
00013643 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013648 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001364D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013652 03                         byte_11C90:	dc.b 3
00013653 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013658 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001365D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013662 02                         byte_11CA0:	dc.b 2
00013663 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013668 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001366D 02                         byte_11CAB:	dc.b 2
0001366E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013673 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013678 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013679 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001367E 01                         byte_11CBC:	dc.b 1			; fuse
0001367F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013684 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00013685 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001368A 01                         byte_11CC8:	dc.b 1			; fireball
0001368B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013690                            		even
00013690                            		even
00013690                            
00013690                            ; ===========================================================================
00013690                            ; ---------------------------------------------------------------------------
00013690                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013690                            ; ---------------------------------------------------------------------------
00013690                            
00013690                            Obj60:					; XREF: Obj_Index
00013690 7000                       		moveq	#0,d0
00013692 1028 0024                  		move.b	$24(a0),d0
00013696 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001369A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001369E                            ; ===========================================================================
0001369E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000136A0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000136A2 0000                       		dc.w Obj60_Display-Obj60_Index
000136A4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000136A6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000136A8                            ; ===========================================================================
000136A8                            
000136A8                            Obj60_Main:				; XREF: Obj60_Index
000136A8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000136B0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000136B6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000136BC 6700                       		beq.s	loc_11D02
000136BE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000136C4                            
000136C4                            loc_11D02:
000136C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000136CA 6600                       		bne.s	loc_11D10
000136CC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000136D2                            
000136D2                            loc_11D10:
000136D2 0028 0004 0001             		ori.b	#4,1(a0)
000136D8 117C 0004 0018             		move.b	#4,$18(a0)
000136DE 117C 000B 0020             		move.b	#$B,$20(a0)
000136E4 117C 000C 0019             		move.b	#$C,$19(a0)
000136EA 7400                       		moveq	#0,d2
000136EC 45E8 0037                  		lea	$37(a0),a2
000136F0 264A                       		movea.l	a2,a3
000136F2 524A                       		addq.w	#1,a2
000136F4 7203                       		moveq	#3,d1
000136F6                            
000136F6                            Obj60_MakeOrbs:
000136F6 6100 BD6C                  		bsr.w	SingleObjLoad2
000136FA 6600                       		bne.s	loc_11D90
000136FC 5213                       		addq.b	#1,(a3)
000136FE 3A09                       		move.w	a1,d5
00013700 0445 D000                  		subi.w	#-$3000,d5
00013704 EC4D                       		lsr.w	#6,d5
00013706 0245 007F                  		andi.w	#$7F,d5
0001370A 14C5                       		move.b	d5,(a2)+
0001370C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001370E 137C 0006 0024             		move.b	#6,$24(a1)
00013714 2368 0004 0004             		move.l	4(a0),4(a1)
0001371A 3368 0002 0002             		move.w	2(a0),2(a1)
00013720 0029 0004 0001             		ori.b	#4,1(a1)
00013726 137C 0004 0018             		move.b	#4,$18(a1)
0001372C 137C 0008 0019             		move.b	#8,$19(a1)
00013732 137C 0003 001A             		move.b	#3,$1A(a1)
00013738 137C 0098 0020             		move.b	#$98,$20(a1)
0001373E 1342 0026                  		move.b	d2,$26(a1)
00013742 0602 0040                  		addi.b	#$40,d2
00013746 2348 003C                  		move.l	a0,$3C(a1)
0001374A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001374E                            
0001374E                            loc_11D90:
0001374E 7001                       		moveq	#1,d0
00013750 0828 0000 0022             		btst	#0,$22(a0)
00013756 6700                       		beq.s	Obj60_Move
00013758 4440                       		neg.w	d0
0001375A                            
0001375A                            Obj60_Move:
0001375A 1140 0036                  		move.b	d0,$36(a0)
0001375E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00013764 5428 0024                  		addq.b	#2,$24(a0)
00013768 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001376E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00013774 6700                       		beq.s	locret_11DBC	; if not, branch
00013776 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001377A                            
0001377A                            locret_11DBC:
0001377A 4E75                       		rts	
0001377C                            ; ===========================================================================
0001377C                            
0001377C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001377C 3038 D008                  		move.w	($FFFFD008).w,d0
00013780 9068 0008                  		sub.w	8(a0),d0
00013784 6400                       		bcc.s	loc_11DCA
00013786 4440                       		neg.w	d0
00013788                            
00013788                            loc_11DCA:
00013788 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001378C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001378E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013792 9068 000C                  		sub.w	$C(a0),d0
00013796 6400                       		bcc.s	loc_11DDC
00013798 4440                       		neg.w	d0
0001379A                            
0001379A                            loc_11DDC:
0001379A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001379E 6400                       		bcc.s	Obj60_Animate	; if not, branch
000137A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000137A4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000137A6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000137AC                            
000137AC                            Obj60_Animate:
000137AC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000137B2 6100 86EE                  		bsr.w	AnimateSprite
000137B6 6000 0000                  		bra.w	Obj60_ChkDel
000137BA                            ; ===========================================================================
000137BA                            
000137BA                            Obj60_Display:				; XREF: Obj60_Index
000137BA 6100 B7E4                  		bsr.w	SpeedToPos
000137BE                            
000137BE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000137BE 3028 0008                  		move.w	8(a0),d0
000137C2 0240 FF80                  		andi.w	#$FF80,d0
000137C6 3238 F700                  		move.w	($FFFFF700).w,d1
000137CA 0441 0080                  		subi.w	#$80,d1
000137CE 0241 FF80                  		andi.w	#$FF80,d1
000137D2 9041                       		sub.w	d1,d0
000137D4 0C40 0280                  		cmpi.w	#$280,d0
000137D8 6200 0000                  		bhi.w	Obj60_ChkGone
000137DC 6000 B7DC                  		bra.w	DisplaySprite
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000137E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000137E4 7000                       		moveq	#0,d0
000137E6 1028 0023                  		move.b	$23(a0),d0
000137EA 6700                       		beq.s	loc_11E34
000137EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000137F2                            
000137F2                            loc_11E34:
000137F2 45E8 0037                  		lea	$37(a0),a2
000137F6 7400                       		moveq	#0,d2
000137F8 141A                       		move.b	(a2)+,d2
000137FA 5342                       		subq.w	#1,d2
000137FC 6500                       		bcs.s	Obj60_Delete
000137FE                            
000137FE                            loc_11E40:
000137FE 7000                       		moveq	#0,d0
00013800 101A                       		move.b	(a2)+,d0
00013802 ED48                       		lsl.w	#6,d0
00013804 0680 00FF D000             		addi.l	#$FFD000,d0
0001380A 2240                       		movea.l	d0,a1
0001380C 6100 B7EA                  		bsr.w	DeleteObject2
00013810 51CA FFEC                  		dbf	d2,loc_11E40
00013814                            
00013814                            Obj60_Delete:
00013814 6000 B7E0                  		bra.w	DeleteObject
00013818                            ; ===========================================================================
00013818                            
00013818                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013818 2268 003C                  		movea.l	$3C(a0),a1
0001381C 0C11 0060                  		cmpi.b	#$60,0(a1)
00013820 6600 B7D4                  		bne.w	DeleteObject
00013824 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001382A 6600                       		bne.s	Obj60_Circle
0001382C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00013832 6600                       		bne.s	Obj60_Circle
00013834 5428 0024                  		addq.b	#2,$24(a0)
00013838 5329 0037                  		subq.b	#1,$37(a1)
0001383C 6600                       		bne.s	Obj60_FireOrb
0001383E 5429 0024                  		addq.b	#2,$24(a1)
00013842                            
00013842                            Obj60_FireOrb:
00013842 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013848 0829 0000 0022             		btst	#0,$22(a1)
0001384E 6700                       		beq.s	Obj60_Display2
00013850 4468 0010                  		neg.w	$10(a0)
00013854                            
00013854                            Obj60_Display2:
00013854 6000 B764                  		bra.w	DisplaySprite
00013858                            ; ===========================================================================
00013858                            
00013858                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00013858 1028 0026                  		move.b	$26(a0),d0
0001385C 4EB9 0000 287A             		jsr	(CalcSine).l
00013862 E841                       		asr.w	#4,d1
00013864 D269 0008                  		add.w	8(a1),d1
00013868 3141 0008                  		move.w	d1,8(a0)
0001386C E840                       		asr.w	#4,d0
0001386E D069 000C                  		add.w	$C(a1),d0
00013872 3140 000C                  		move.w	d0,$C(a0)
00013876 1029 0036                  		move.b	$36(a1),d0
0001387A D128 0026                  		add.b	d0,$26(a0)
0001387E 6000 B73A                  		bra.w	DisplaySprite
00013882                            ; ===========================================================================
00013882                            
00013882                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013882 6100 B71C                  		bsr.w	SpeedToPos
00013886 4A28 0001                  		tst.b	1(a0)
0001388A 6A00 B76A                  		bpl.w	DeleteObject
0001388E 6000 B72A                  		bra.w	DisplaySprite
00013892                            ; ===========================================================================
00013892                            Ani_obj60:
00013892                            	include "_anim\obj60.asm"
00013892                            ; ---------------------------------------------------------------------------
00013892                            ; Animation script - Orbinaut enemy
00013892                            ; ---------------------------------------------------------------------------
00013892 0000                       		dc.w byte_11EDA-Ani_obj60
00013894 0000                       		dc.w byte_11EDE-Ani_obj60
00013896 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001389A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000138A0                            		even
000138A0                            		even
000138A0                            
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            Map_obj60:
000138A0                            	include "_maps\obj60.asm"
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000138A0                            ; ---------------------------------------------------------------------------
000138A0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000138A4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000138A8 01                         byte_11EEC:	dc.b 1
000138A9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000138AE 01                         byte_11EF2:	dc.b 1
000138AF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000138B4 01                         byte_11EF8:	dc.b 1
000138B5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000138BA 01                         byte_11EFE:	dc.b 1
000138BB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000138C0                            		even
000138C0                            		even
000138C0                            
000138C0                            ; ===========================================================================
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Object 16 - harpoon (LZ)
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            
000138C0                            Obj16:					; XREF: Obj_Index
000138C0 7000                       		moveq	#0,d0
000138C2 1028 0024                  		move.b	$24(a0),d0
000138C6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000138CA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000138CE                            ; ===========================================================================
000138CE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000138D0 0000                       		dc.w Obj16_Move-Obj16_Index
000138D2 0000                       		dc.w Obj16_Wait-Obj16_Index
000138D4                            ; ===========================================================================
000138D4                            
000138D4                            Obj16_Main:				; XREF: Obj16_Index
000138D4 5428 0024                  		addq.b	#2,$24(a0)
000138D8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000138E0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000138E6 0028 0004 0001             		ori.b	#4,1(a0)
000138EC 117C 0004 0018             		move.b	#4,$18(a0)
000138F2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000138F8 117C 0014 0019             		move.b	#$14,$19(a0)
000138FE 317C 003C 0030             		move.w	#60,$30(a0)
00013904                            
00013904                            Obj16_Move:				; XREF: Obj16_Index
00013904 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001390A 6100 8596                  		bsr.w	AnimateSprite
0001390E 7000                       		moveq	#0,d0
00013910 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013914 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001391A 6000 D758                  		bra.w	MarkObjGone
0001391E                            ; ===========================================================================
0001391E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013924                            ; ===========================================================================
00013924                            
00013924                            Obj16_Wait:				; XREF: Obj16_Index
00013924 5368 0030                  		subq.w	#1,$30(a0)
00013928 6A00                       		bpl.s	Obj16_ChkDel
0001392A 317C 003C 0030             		move.w	#60,$30(a0)
00013930 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013934 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001393A                            
0001393A                            Obj16_ChkDel:
0001393A 6000 D738                  		bra.w	MarkObjGone
0001393E                            ; ===========================================================================
0001393E                            Ani_obj16:
0001393E                            	include "_anim\obj16.asm"
0001393E                            ; ---------------------------------------------------------------------------
0001393E                            ; Animation script - harpoon (LZ)
0001393E                            ; ---------------------------------------------------------------------------
0001393E 0000                       		dc.w byte_11F8A-Ani_obj16
00013940 0000                       		dc.w byte_11F8E-Ani_obj16
00013942 0000                       		dc.w byte_11F92-Ani_obj16
00013944 0000                       		dc.w byte_11F96-Ani_obj16
00013946 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001394A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001394E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013952 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013956                            		even
00013956                            		even
00013956                            
00013956                            ; ---------------------------------------------------------------------------
00013956                            ; Sprite mappings - harpoon (LZ)
00013956                            ; ---------------------------------------------------------------------------
00013956                            Map_obj16:
00013956                            	include "_maps\obj16.asm"
00013956                            ; ---------------------------------------------------------------------------
00013956                            ; Sprite mappings - harpoon (LZ)
00013956                            ; ---------------------------------------------------------------------------
00013956 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001395A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001395E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013962 01                         byte_11FA6:	dc.b 1
00013963 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013968 01                         byte_11FAC:	dc.b 1
00013969 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001396E 02                         byte_11FB2:	dc.b 2
0001396F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013974 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013979 01                         byte_11FBD:	dc.b 1
0001397A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001397F 01                         byte_11FC3:	dc.b 1
00013980 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013985 02                         byte_11FC9:	dc.b 2
00013986 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001398B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013990                            		even
00013990                            		even
00013990                            
00013990                            ; ===========================================================================
00013990                            ; ---------------------------------------------------------------------------
00013990                            ; Object 61 - blocks (LZ)
00013990                            ; ---------------------------------------------------------------------------
00013990                            
00013990                            Obj61:					; XREF: Obj_Index
00013990 7000                       		moveq	#0,d0
00013992 1028 0024                  		move.b	$24(a0),d0
00013996 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001399A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001399E                            ; ===========================================================================
0001399E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000139A0 0000                       		dc.w Obj61_Action-Obj61_Index
000139A2                            
000139A2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000139A4 200C                       		dc.b $20, $C
000139A6 1010                       		dc.b $10, $10
000139A8 1010                       		dc.b $10, $10
000139AA                            ; ===========================================================================
000139AA                            
000139AA                            Obj61_Main:				; XREF: Obj61_Index
000139AA 5428 0024                  		addq.b	#2,$24(a0)
000139AE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000139B6 317C 43E6 0002             		move.w	#$43E6,2(a0)
000139BC 117C 0004 0001             		move.b	#4,1(a0)
000139C2 117C 0003 0018             		move.b	#3,$18(a0)
000139C8 7000                       		moveq	#0,d0
000139CA 1028 0028                  		move.b	$28(a0),d0
000139CE E648                       		lsr.w	#3,d0
000139D0 0240 000E                  		andi.w	#$E,d0
000139D4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000139D8 115A 0019                  		move.b	(a2)+,$19(a0)
000139DC 1152 0016                  		move.b	(a2),$16(a0)
000139E0 E248                       		lsr.w	#1,d0
000139E2 1140 001A                  		move.b	d0,$1A(a0)
000139E6 3168 0008 0034             		move.w	8(a0),$34(a0)
000139EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000139F2 1028 0028                  		move.b	$28(a0),d0
000139F6 0200 000F                  		andi.b	#$F,d0
000139FA 6700                       		beq.s	Obj61_Action
000139FC 0C00 0007                  		cmpi.b	#7,d0
00013A00 6700                       		beq.s	Obj61_Action
00013A02 117C 0001 0038             		move.b	#1,$38(a0)
00013A08                            
00013A08                            Obj61_Action:				; XREF: Obj61_Index
00013A08 3F28 0008                  		move.w	8(a0),-(sp)
00013A0C 7000                       		moveq	#0,d0
00013A0E 1028 0028                  		move.b	$28(a0),d0
00013A12 0240 000F                  		andi.w	#$F,d0
00013A16 D040                       		add.w	d0,d0
00013A18 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013A1C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013A20 381F                       		move.w	(sp)+,d4
00013A22 4A28 0001                  		tst.b	1(a0)
00013A26 6A00                       		bpl.s	Obj61_ChkDel
00013A28 7200                       		moveq	#0,d1
00013A2A 1228 0019                  		move.b	$19(a0),d1
00013A2E 0641 000B                  		addi.w	#$B,d1
00013A32 7400                       		moveq	#0,d2
00013A34 1428 0016                  		move.b	$16(a0),d2
00013A38 3602                       		move.w	d2,d3
00013A3A 5243                       		addq.w	#1,d3
00013A3C 6100 D95E                  		bsr.w	SolidObject
00013A40 1144 003F                  		move.b	d4,$3F(a0)
00013A44 6100 0000                  		bsr.w	loc_12180
00013A48                            
00013A48                            Obj61_ChkDel:
00013A48 3028 0034                  		move.w	$34(a0),d0
00013A4C 0240 FF80                  		andi.w	#$FF80,d0
00013A50 3238 F700                  		move.w	($FFFFF700).w,d1
00013A54 0441 0080                  		subi.w	#$80,d1
00013A58 0241 FF80                  		andi.w	#$FF80,d1
00013A5C 9041                       		sub.w	d1,d0
00013A5E 0C40 0280                  		cmpi.w	#$280,d0
00013A62 6200 B592                  		bhi.w	DeleteObject
00013A66 6000 B552                  		bra.w	DisplaySprite
00013A6A                            ; ===========================================================================
00013A6A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A6E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A72 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013A76 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013A7A                            ; ===========================================================================
00013A7A                            
00013A7A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013A7A 4E75                       		rts	
00013A7C                            ; ===========================================================================
00013A7C                            
00013A7C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013A7C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013A80 6600                       		bne.s	loc_120D6	; if yes, branch
00013A82 0828 0003 0022             		btst	#3,$22(a0)
00013A88 6700                       		beq.s	locret_120D4
00013A8A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013A90                            
00013A90                            locret_120D4:
00013A90 4E75                       		rts	
00013A92                            ; ===========================================================================
00013A92                            
00013A92                            loc_120D6:
00013A92 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013A96 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013A98 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013A9C 4228 0038                  		clr.b	$38(a0)
00013AA0 4E75                       		rts	
00013AA2                            ; ===========================================================================
00013AA2                            
00013AA2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013AA2 6100 B4FC                  		bsr.w	SpeedToPos
00013AA6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013AAA 6100 0000                  		bsr.w	ObjHitFloor
00013AAE 4A41                       		tst.w	d1
00013AB0 6A00 0000                  		bpl.w	locret_12106
00013AB4 5241                       		addq.w	#1,d1
00013AB6 D368 000C                  		add.w	d1,$C(a0)
00013ABA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013ABE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013AC2                            
00013AC2                            locret_12106:
00013AC2 4E75                       		rts	
00013AC4                            ; ===========================================================================
00013AC4                            
00013AC4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013AC4 6100 B4DA                  		bsr.w	SpeedToPos
00013AC8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013ACC 6100 0000                  		bsr.w	ObjHitCeiling
00013AD0 4A41                       		tst.w	d1
00013AD2 6A00 0000                  		bpl.w	locret_12126
00013AD6 9368 000C                  		sub.w	d1,$C(a0)
00013ADA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013ADE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013AE2                            
00013AE2                            locret_12126:
00013AE2 4E75                       		rts	
00013AE4                            ; ===========================================================================
00013AE4                            
00013AE4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013AE4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013AEA 6600                       		bne.s	locret_12138	; if not, branch
00013AEC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013AF0 4228 0038                  		clr.b	$38(a0)
00013AF4                            
00013AF4                            locret_12138:
00013AF4 4E75                       		rts	
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013AF6 3038 F646                  		move.w	($FFFFF646).w,d0
00013AFA 9068 000C                  		sub.w	$C(a0),d0
00013AFE 6700                       		beq.s	locret_1217E
00013B00 6400                       		bcc.s	loc_12162
00013B02 0C40 FFFE                  		cmpi.w	#-2,d0
00013B06 6C00                       		bge.s	loc_1214E
00013B08 70FE                       		moveq	#-2,d0
00013B0A                            
00013B0A                            loc_1214E:
00013B0A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013B0E 6100 0000                  		bsr.w	ObjHitCeiling
00013B12 4A41                       		tst.w	d1
00013B14 6A00 0000                  		bpl.w	locret_12160
00013B18 9368 000C                  		sub.w	d1,$C(a0)
00013B1C                            
00013B1C                            locret_12160:
00013B1C 4E75                       		rts	
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            loc_12162:				; XREF: Obj61_Type07
00013B1E 0C40 0002                  		cmpi.w	#2,d0
00013B22 6F00                       		ble.s	loc_1216A
00013B24 7002                       		moveq	#2,d0
00013B26                            
00013B26                            loc_1216A:
00013B26 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013B2A 6100 0000                  		bsr.w	ObjHitFloor
00013B2E 4A41                       		tst.w	d1
00013B30 6A00 0000                  		bpl.w	locret_1217E
00013B34 5241                       		addq.w	#1,d1
00013B36 D368 000C                  		add.w	d1,$C(a0)
00013B3A                            
00013B3A                            locret_1217E:
00013B3A 4E75                       		rts	
00013B3C                            ; ===========================================================================
00013B3C                            
00013B3C                            loc_12180:				; XREF: Obj61_Action
00013B3C 4A28 0038                  		tst.b	$38(a0)
00013B40 6700                       		beq.s	locret_121C0
00013B42 0828 0003 0022             		btst	#3,$22(a0)
00013B48 6600                       		bne.s	loc_1219A
00013B4A 4A28 003E                  		tst.b	$3E(a0)
00013B4E 6700                       		beq.s	locret_121C0
00013B50 5928 003E                  		subq.b	#4,$3E(a0)
00013B54 6000                       		bra.s	loc_121A6
00013B56                            ; ===========================================================================
00013B56                            
00013B56                            loc_1219A:
00013B56 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013B5C 6700                       		beq.s	locret_121C0
00013B5E 5828 003E                  		addq.b	#4,$3E(a0)
00013B62                            
00013B62                            loc_121A6:
00013B62 1028 003E                  		move.b	$3E(a0),d0
00013B66 4EB9 0000 287A             		jsr	(CalcSine).l
00013B6C 323C 0400                  		move.w	#$400,d1
00013B70 C1C1                       		muls.w	d1,d0
00013B72 4840                       		swap	d0
00013B74 D068 0030                  		add.w	$30(a0),d0
00013B78 3140 000C                  		move.w	d0,$C(a0)
00013B7C                            
00013B7C                            locret_121C0:
00013B7C 4E75                       		rts	
00013B7E                            ; ===========================================================================
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            ; Sprite mappings - blocks (LZ)
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            Map_obj61:
00013B7E                            	include "_maps\obj61.asm"
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            ; Sprite mappings - blocks (LZ)
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013B82 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013B86 01                         byte_121CA:	dc.b 1
00013B87 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013B8C 02                         byte_121D0:	dc.b 2
00013B8D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013B92 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013B97 01                         byte_121DB:	dc.b 1
00013B98 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013B9D 01                         byte_121E1:	dc.b 1
00013B9E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013BA4 00                         		even
00013BA4 00                         		even
00013BA4                            
00013BA4                            ; ===========================================================================
00013BA4                            ; ---------------------------------------------------------------------------
00013BA4                            ; Object 62 - gargoyle head (LZ)
00013BA4                            ; ---------------------------------------------------------------------------
00013BA4                            
00013BA4                            Obj62:					; XREF: Obj_Index
00013BA4 7000                       		moveq	#0,d0
00013BA6 1028 0024                  		move.b	$24(a0),d0
00013BAA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013BAE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013BB2 6000 D4C0                  		bra.w	MarkObjGone
00013BB6                            ; ===========================================================================
00013BB6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013BB8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013BBA 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013BBC 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013BBE                            
00013BBE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013BC6                            ; ===========================================================================
00013BC6                            
00013BC6                            Obj62_Main:				; XREF: Obj62_Index
00013BC6 5428 0024                  		addq.b	#2,$24(a0)
00013BCA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BD2 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013BD8 0028 0004 0001             		ori.b	#4,1(a0)
00013BDE 117C 0003 0018             		move.b	#3,$18(a0)
00013BE4 117C 0010 0019             		move.b	#$10,$19(a0)
00013BEA 1028 0028                  		move.b	$28(a0),d0	; get object type
00013BEE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013BF2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013BF8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013BFE 0228 000F 0028             		andi.b	#$F,$28(a0)
00013C04                            
00013C04                            Obj62_MakeFire:				; XREF: Obj62_Index
00013C04 5328 001E                  		subq.b	#1,$1E(a0)
00013C08 6600                       		bne.s	Obj62_NoFire
00013C0A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013C10 6100 B622                  		bsr.w	ChkObjOnScreen
00013C14 6600                       		bne.s	Obj62_NoFire
00013C16 6100 B836                  		bsr.w	SingleObjLoad
00013C1A 6600                       		bne.s	Obj62_NoFire
00013C1C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013C20 5829 0024                  		addq.b	#4,$24(a1)
00013C24 3368 0008 0008             		move.w	8(a0),8(a1)
00013C2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013C30 1368 0001 0001             		move.b	1(a0),1(a1)
00013C36 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013C3C                            
00013C3C                            Obj62_NoFire:
00013C3C 4E75                       		rts	
00013C3E                            ; ===========================================================================
00013C3E                            
00013C3E                            Obj62_FireBall:				; XREF: Obj62_Index
00013C3E 5428 0024                  		addq.b	#2,$24(a0)
00013C42 117C 0008 0016             		move.b	#8,$16(a0)
00013C48 117C 0008 0017             		move.b	#8,$17(a0)
00013C4E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013C56 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013C5C 0028 0004 0001             		ori.b	#4,1(a0)
00013C62 117C 0004 0018             		move.b	#4,$18(a0)
00013C68 117C 0098 0020             		move.b	#$98,$20(a0)
00013C6E 117C 0008 0019             		move.b	#8,$19(a0)
00013C74 117C 0002 001A             		move.b	#2,$1A(a0)
00013C7A 5068 000C                  		addq.w	#8,$C(a0)
00013C7E 317C 0200 0010             		move.w	#$200,$10(a0)
00013C84 0828 0000 0022             		btst	#0,$22(a0)
00013C8A 6600                       		bne.s	Obj62_Sound
00013C8C 4468 0010                  		neg.w	$10(a0)
00013C90                            
00013C90                            Obj62_Sound:
00013C90 303C 00AE                  		move.w	#$AE,d0
00013C94 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013C9A                            
00013C9A                            Obj62_AniFire:				; XREF: Obj62_Index
00013C9A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013C9E 0200 0007                  		andi.b	#7,d0
00013CA2 6600                       		bne.s	Obj62_StopFire
00013CA4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013CAA                            
00013CAA                            Obj62_StopFire:
00013CAA 6100 B2F4                  		bsr.w	SpeedToPos
00013CAE 0828 0000 0022             		btst	#0,$22(a0)
00013CB4 6600                       		bne.s	Obj62_StopFire2
00013CB6 76F8                       		moveq	#-8,d3
00013CB8 6100 0000                  		bsr.w	ObjHitWallLeft
00013CBC 4A41                       		tst.w	d1
00013CBE 6B00 B336                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013CC2 4E75                       		rts	
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            Obj62_StopFire2:
00013CC4 7608                       		moveq	#8,d3
00013CC6 6100 0000                  		bsr.w	ObjHitWallRight
00013CCA 4A41                       		tst.w	d1
00013CCC 6B00 B328                  		bmi.w	DeleteObject
00013CD0 4E75                       		rts	
00013CD2                            ; ===========================================================================
00013CD2                            ; ---------------------------------------------------------------------------
00013CD2                            ; Sprite mappings - gargoyle head (LZ)
00013CD2                            ; ---------------------------------------------------------------------------
00013CD2                            Map_obj62:
00013CD2                            	include "_maps\obj62.asm"
00013CD2                            ; ---------------------------------------------------------------------------
00013CD2                            ; Sprite mappings - gargoyle head (LZ)
00013CD2                            ; ---------------------------------------------------------------------------
00013CD2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013CD6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013CDA 03                         byte_12320:	dc.b 3
00013CDB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013CE0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013CE5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013CEA 01                         byte_12330:	dc.b 1
00013CEB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013CF0 01                         byte_12336:	dc.b 1
00013CF1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013CF6                            		even
00013CF6                            		even
00013CF6                            
00013CF6                            ; ===========================================================================
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6                            
00013CF6                            Obj63:					; XREF: Obj_Index
00013CF6 7000                       		moveq	#0,d0
00013CF8 1028 0024                  		move.b	$24(a0),d0
00013CFC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013D00 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013D04 3028 0030                  		move.w	$30(a0),d0
00013D08 0240 FF80                  		andi.w	#$FF80,d0
00013D0C 3238 F700                  		move.w	($FFFFF700).w,d1
00013D10 0441 0080                  		subi.w	#$80,d1
00013D14 0241 FF80                  		andi.w	#$FF80,d1
00013D18 9041                       		sub.w	d1,d0
00013D1A 0C40 0280                  		cmpi.w	#$280,d0
00013D1E 6200                       		bhi.s	loc_1236A
00013D20                            
00013D20                            Obj63_Display:				; XREF: loc_1236A
00013D20 6000 B298                  		bra.w	DisplaySprite
00013D24                            ; ===========================================================================
00013D24                            
00013D24                            loc_1236A:				; XREF: Obj63
00013D24 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013D2A 6600                       		bne.s	loc_12378
00013D2C 0C40 FF80                  		cmpi.w	#-$80,d0
00013D30 64EE                       		bcc.s	Obj63_Display
00013D32                            
00013D32                            loc_12378:
00013D32 1028 002F                  		move.b	$2F(a0),d0
00013D36 6A00 B2BE                  		bpl.w	DeleteObject
00013D3A 0240 007F                  		andi.w	#$7F,d0
00013D3E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013D42 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013D48 6000 B2AC                  		bra.w	DeleteObject
00013D4C                            ; ===========================================================================
00013D4C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013D4E 0000                       		dc.w loc_124B2-Obj63_Index
00013D50 0000                       		dc.w loc_124C2-Obj63_Index
00013D52 0000                       		dc.w loc_124DE-Obj63_Index
00013D54                            ; ===========================================================================
00013D54                            
00013D54                            Obj63_Main:				; XREF: Obj63_Index
00013D54 1028 0028                  		move.b	$28(a0),d0
00013D58 6B00 0000                  		bmi.w	loc_12460
00013D5C 5428 0024                  		addq.b	#2,$24(a0)
00013D60 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013D68 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013D6E 0028 0004 0001             		ori.b	#4,1(a0)
00013D74 117C 0010 0019             		move.b	#$10,$19(a0)
00013D7A 117C 0004 0018             		move.b	#4,$18(a0)
00013D80 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013D86 6600                       		bne.s	loc_123E2
00013D88 5828 0024                  		addq.b	#4,$24(a0)
00013D8C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013D92 117C 0001 0018             		move.b	#1,$18(a0)
00013D98 6000 0000                  		bra.w	loc_124DE
00013D9C                            ; ===========================================================================
00013D9C                            
00013D9C                            loc_123E2:
00013D9C 117C 0004 001A             		move.b	#4,$1A(a0)
00013DA2 7000                       		moveq	#0,d0
00013DA4 1028 0028                  		move.b	$28(a0),d0
00013DA8 3200                       		move.w	d0,d1
00013DAA E648                       		lsr.w	#3,d0
00013DAC 0240 001E                  		andi.w	#$1E,d0
00013DB0 45FA 0000                  		lea	Obj63_Data(pc),a2
00013DB4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DB8 315A 0038                  		move.w	(a2)+,$38(a0)
00013DBC 315A 0030                  		move.w	(a2)+,$30(a0)
00013DC0 214A 003C                  		move.l	a2,$3C(a0)
00013DC4 0241 000F                  		andi.w	#$F,d1
00013DC8 E549                       		lsl.w	#2,d1
00013DCA 1141 0038                  		move.b	d1,$38(a0)
00013DCE 117C 0004 003A             		move.b	#4,$3A(a0)
00013DD4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013DD8 6700                       		beq.s	loc_1244C
00013DDA 117C 0001 003B             		move.b	#1,$3B(a0)
00013DE0 4428 003A                  		neg.b	$3A(a0)
00013DE4 7200                       		moveq	#0,d1
00013DE6 1228 0038                  		move.b	$38(a0),d1
00013DEA D228 003A                  		add.b	$3A(a0),d1
00013DEE B228 0039                  		cmp.b	$39(a0),d1
00013DF2 6500                       		bcs.s	loc_12448
00013DF4 1001                       		move.b	d1,d0
00013DF6 7200                       		moveq	#0,d1
00013DF8 4A00                       		tst.b	d0
00013DFA 6A00                       		bpl.s	loc_12448
00013DFC 1228 0039                  		move.b	$39(a0),d1
00013E00 5901                       		subq.b	#4,d1
00013E02                            
00013E02                            loc_12448:
00013E02 1141 0038                  		move.b	d1,$38(a0)
00013E06                            
00013E06                            loc_1244C:
00013E06 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013E0C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013E12 6100 0000                  		bsr.w	Obj63_ChangeDir
00013E16 6000 0000                  		bra.w	loc_124B2
00013E1A                            ; ===========================================================================
00013E1A                            
00013E1A                            loc_12460:				; XREF: Obj63_Main
00013E1A 1140 002F                  		move.b	d0,$2F(a0)
00013E1E 0240 007F                  		andi.w	#$7F,d0
00013E22 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013E26 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013E2C 6600 B1C8                  		bne.w	DeleteObject
00013E30 D040                       		add.w	d0,d0
00013E32 0240 001E                  		andi.w	#$1E,d0
00013E36 0640 0070                  		addi.w	#$70,d0
00013E3A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013E40 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013E44 321A                       		move.w	(a2)+,d1
00013E46 2248                       		movea.l	a0,a1
00013E48 6000                       		bra.s	Obj63_MakePtfms
00013E4A                            ; ===========================================================================
00013E4A                            
00013E4A                            Obj63_Loop:
00013E4A 6100 B602                  		bsr.w	SingleObjLoad
00013E4E 6600                       		bne.s	loc_124AA
00013E50                            
00013E50                            Obj63_MakePtfms:			; XREF: loc_12460
00013E50 12BC 0063                  		move.b	#$63,0(a1)
00013E54 335A 0008                  		move.w	(a2)+,8(a1)
00013E58 335A 000C                  		move.w	(a2)+,$C(a1)
00013E5C 301A                       		move.w	(a2)+,d0
00013E5E 1340 0028                  		move.b	d0,$28(a1)
00013E62                            
00013E62                            loc_124AA:
00013E62 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013E66                            
00013E66 588F                       		addq.l	#4,sp
00013E68 4E75                       		rts	
00013E6A                            ; ===========================================================================
00013E6A                            
00013E6A                            loc_124B2:				; XREF: Obj63_Index
00013E6A 7200                       		moveq	#0,d1
00013E6C 1228 0019                  		move.b	$19(a0),d1
00013E70 4EB9 0000 8BAC             		jsr	(PlatformObject).l
00013E76 6000 0000                  		bra.w	sub_12502
00013E7A                            ; ===========================================================================
00013E7A                            
00013E7A                            loc_124C2:				; XREF: Obj63_Index
00013E7A 7200                       		moveq	#0,d1
00013E7C 1228 0019                  		move.b	$19(a0),d1
00013E80 4EB9 0000 8D20             		jsr	(ExitPlatform).l
00013E86 3F28 0008                  		move.w	8(a0),-(sp)
00013E8A 6100 0000                  		bsr.w	sub_12502
00013E8E 341F                       		move.w	(sp)+,d2
00013E90 4EF9 0000 928A             		jmp	(MvSonicOnPtfm2).l
00013E96                            ; ===========================================================================
00013E96                            
00013E96                            loc_124DE:				; XREF: Obj63_Index
00013E96 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E9A 0240 0003                  		andi.w	#3,d0
00013E9E 6600                       		bne.s	loc_124FC
00013EA0 7201                       		moveq	#1,d1
00013EA2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013EA6 6700                       		beq.s	loc_124F2
00013EA8 4401                       		neg.b	d1
00013EAA                            
00013EAA                            loc_124F2:
00013EAA D328 001A                  		add.b	d1,$1A(a0)
00013EAE 0228 0003 001A             		andi.b	#3,$1A(a0)
00013EB4                            
00013EB4                            loc_124FC:
00013EB4 588F                       		addq.l	#4,sp
00013EB6 6000 D1BC                  		bra.w	MarkObjGone
00013EBA                            
00013EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBA                            
00013EBA                            
00013EBA                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013EBA 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013EBE 6700                       		beq.s	loc_12520
00013EC0 4A28 003B                  		tst.b	$3B(a0)
00013EC4 6600                       		bne.s	loc_12520
00013EC6 117C 0001 003B             		move.b	#1,$3B(a0)
00013ECC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013ED2 4428 003A                  		neg.b	$3A(a0)
00013ED6 6000                       		bra.s	loc_12534
00013ED8                            ; ===========================================================================
00013ED8                            
00013ED8                            loc_12520:
00013ED8 3028 0008                  		move.w	8(a0),d0
00013EDC B068 0034                  		cmp.w	$34(a0),d0
00013EE0 6600                       		bne.s	loc_1256A
00013EE2 3028 000C                  		move.w	$C(a0),d0
00013EE6 B068 0036                  		cmp.w	$36(a0),d0
00013EEA 6600                       		bne.s	loc_1256A
00013EEC                            
00013EEC                            loc_12534:
00013EEC 7200                       		moveq	#0,d1
00013EEE 1228 0038                  		move.b	$38(a0),d1
00013EF2 D228 003A                  		add.b	$3A(a0),d1
00013EF6 B228 0039                  		cmp.b	$39(a0),d1
00013EFA 6500                       		bcs.s	loc_12552
00013EFC 1001                       		move.b	d1,d0
00013EFE 7200                       		moveq	#0,d1
00013F00 4A00                       		tst.b	d0
00013F02 6A00                       		bpl.s	loc_12552
00013F04 1228 0039                  		move.b	$39(a0),d1
00013F08 5901                       		subq.b	#4,d1
00013F0A                            
00013F0A                            loc_12552:
00013F0A 1141 0038                  		move.b	d1,$38(a0)
00013F0E 2268 003C                  		movea.l	$3C(a0),a1
00013F12 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013F18 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013F1E 6100 0000                  		bsr.w	Obj63_ChangeDir
00013F22                            
00013F22                            loc_1256A:
00013F22 6100 B07C                  		bsr.w	SpeedToPos
00013F26 4E75                       		rts	
00013F28                            ; End of function sub_12502
00013F28                            
00013F28                            
00013F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F28                            
00013F28                            
00013F28                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013F28 7000                       		moveq	#0,d0
00013F2A 343C FF00                  		move.w	#-$100,d2
00013F2E 3028 0008                  		move.w	8(a0),d0
00013F32 9068 0034                  		sub.w	$34(a0),d0
00013F36 6400                       		bcc.s	loc_12584
00013F38 4440                       		neg.w	d0
00013F3A 4442                       		neg.w	d2
00013F3C                            
00013F3C                            loc_12584:
00013F3C 7200                       		moveq	#0,d1
00013F3E 363C FF00                  		move.w	#-$100,d3
00013F42 3228 000C                  		move.w	$C(a0),d1
00013F46 9268 0036                  		sub.w	$36(a0),d1
00013F4A 6400                       		bcc.s	loc_12598
00013F4C 4441                       		neg.w	d1
00013F4E 4443                       		neg.w	d3
00013F50                            
00013F50                            loc_12598:
00013F50 B240                       		cmp.w	d0,d1
00013F52 6500                       		bcs.s	loc_125C2
00013F54 3028 0008                  		move.w	8(a0),d0
00013F58 9068 0034                  		sub.w	$34(a0),d0
00013F5C 6700                       		beq.s	loc_125AE
00013F5E 48C0                       		ext.l	d0
00013F60 E180                       		asl.l	#8,d0
00013F62 81C1                       		divs.w	d1,d0
00013F64 4440                       		neg.w	d0
00013F66                            
00013F66                            loc_125AE:
00013F66 3140 0010                  		move.w	d0,$10(a0)
00013F6A 3143 0012                  		move.w	d3,$12(a0)
00013F6E 4840                       		swap	d0
00013F70 3140 000A                  		move.w	d0,$A(a0)
00013F74 4268 000E                  		clr.w	$E(a0)
00013F78 4E75                       		rts	
00013F7A                            ; ===========================================================================
00013F7A                            
00013F7A                            loc_125C2:				; XREF: Obj63_ChangeDir
00013F7A 3228 000C                  		move.w	$C(a0),d1
00013F7E 9268 0036                  		sub.w	$36(a0),d1
00013F82 6700                       		beq.s	loc_125D4
00013F84 48C1                       		ext.l	d1
00013F86 E181                       		asl.l	#8,d1
00013F88 83C0                       		divs.w	d0,d1
00013F8A 4441                       		neg.w	d1
00013F8C                            
00013F8C                            loc_125D4:
00013F8C 3141 0012                  		move.w	d1,$12(a0)
00013F90 3142 0010                  		move.w	d2,$10(a0)
00013F94 4841                       		swap	d1
00013F96 3141 000E                  		move.w	d1,$E(a0)
00013F9A 4268 000A                  		clr.w	$A(a0)
00013F9E 4E75                       		rts	
00013FA0                            ; End of function Obj63_ChangeDir
00013FA0                            
00013FA0                            ; ===========================================================================
00013FA0 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013FA2 0000                       		dc.w word_12610-Obj63_Data
00013FA4 0000                       		dc.w word_12628-Obj63_Data
00013FA6 0000                       		dc.w word_1263C-Obj63_Data
00013FA8 0000                       		dc.w word_12650-Obj63_Data
00013FAA 0000                       		dc.w word_12668-Obj63_Data
00013FAC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013FBC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013FC8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013FD8 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013FE0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013FF4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014008 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014020 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014034                            
00014034                            ; ---------------------------------------------------------------------------
00014034                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014034                            ; ---------------------------------------------------------------------------
00014034                            Map_obj63:
00014034                            	include "_maps\obj63.asm"
00014034                            ; ---------------------------------------------------------------------------
00014034                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014034                            ; ---------------------------------------------------------------------------
00014034 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00014038 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001403C 0000                       		dc.w byte_1269E-Map_obj63
0001403E 01                         byte_12686:	dc.b 1
0001403F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014044 01                         byte_1268C:	dc.b 1
00014045 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001404A 01                         byte_12692:	dc.b 1
0001404B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014050 01                         byte_12698:	dc.b 1
00014051 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014056 01                         byte_1269E:	dc.b 1
00014057 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001405C                            		even
0001405C                            		even
0001405C                            
0001405C                            ; ===========================================================================
0001405C                            ; ---------------------------------------------------------------------------
0001405C                            ; Object 64 - bubbles (LZ)
0001405C                            ; ---------------------------------------------------------------------------
0001405C                            
0001405C                            Obj64:					; XREF: Obj_Index
0001405C 7000                       		moveq	#0,d0
0001405E 1028 0024                  		move.b	$24(a0),d0
00014062 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00014066 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001406A                            ; ===========================================================================
0001406A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001406C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001406E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014070 0000                       		dc.w Obj64_Display2-Obj64_Index
00014072 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014074 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00014076                            ; ===========================================================================
00014076                            
00014076                            Obj64_Main:				; XREF: Obj64_Index
00014076 5428 0024                  		addq.b	#2,$24(a0)
0001407A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014082 317C 8348 0002             		move.w	#$8348,2(a0)
00014088 117C 0084 0001             		move.b	#$84,1(a0)
0001408E 117C 0010 0019             		move.b	#$10,$19(a0)
00014094 117C 0001 0018             		move.b	#1,$18(a0)
0001409A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001409E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000140A0 5028 0024                  		addq.b	#8,$24(a0)
000140A4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000140A8 1140 0032                  		move.b	d0,$32(a0)
000140AC 1140 0033                  		move.b	d0,$33(a0)
000140B0 117C 0006 001C             		move.b	#6,$1C(a0)
000140B6 6000 0000                  		bra.w	Obj64_BblMaker
000140BA                            ; ===========================================================================
000140BA                            
000140BA                            Obj64_Bubble:				; XREF: Obj64_Main
000140BA 1140 001C                  		move.b	d0,$1C(a0)
000140BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000140C4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000140CA 4EB9 0000 2854             		jsr	(RandomNumber).l
000140D0 1140 0026                  		move.b	d0,$26(a0)
000140D4                            
000140D4                            Obj64_Animate:				; XREF: Obj64_Index
000140D4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000140DA 4EB9 0000 BEA2             		jsr	AnimateSprite
000140E0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000140E6 6600                       		bne.s	Obj64_ChkWater
000140E8 117C 0001 002E             		move.b	#1,$2E(a0)
000140EE                            
000140EE                            Obj64_ChkWater:				; XREF: Obj64_Index
000140EE 3038 F646                  		move.w	($FFFFF646).w,d0
000140F2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000140F6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000140F8                            
000140F8                            Obj64_Burst:				; XREF: Obj64_Wobble
000140F8 117C 0006 0024             		move.b	#6,$24(a0)
000140FE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014102 6000 0000                  		bra.w	Obj64_Display2
00014106                            ; ===========================================================================
00014106                            
00014106                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00014106 1028 0026                  		move.b	$26(a0),d0
0001410A 5228 0026                  		addq.b	#1,$26(a0)
0001410E 0240 007F                  		andi.w	#$7F,d0
00014112 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014118 1031 0000                  		move.b	(a1,d0.w),d0
0001411C 4880                       		ext.w	d0
0001411E D068 0030                  		add.w	$30(a0),d0
00014122 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00014126 4A28 002E                  		tst.b	$2E(a0)
0001412A 6700                       		beq.s	Obj64_Display
0001412C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00014130 6700                       		beq.s	Obj64_Display	; if not, branch
00014132                            
00014132 6100 0000                  		bsr.w	StopDrowning	; cancel countdown music
00014136 303C 00AD                  		move.w	#$AD,d0
0001413A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00014140 43F8 D000                  		lea	($FFFFD000).w,a1
00014144 4269 0010                  		clr.w	$10(a1)
00014148 4269 0012                  		clr.w	$12(a1)
0001414C 4269 0014                  		clr.w	$14(a1)
00014150 137C 0015 001C             		move.b	#$15,$1C(a1)
00014156 337C 0023 003E             		move.w	#$23,$3E(a1)
0001415C 137C 0000 003C             		move.b	#0,$3C(a1)
00014162 08A9 0005 0022             		bclr	#5,$22(a1)
00014168 08A9 0004 0022             		bclr	#4,$22(a1)
0001416E 0829 0002 0022             		btst	#2,$22(a1)
00014174 6700 FF82                  		beq.w	Obj64_Burst
00014178 08A9 0002 0022             		bclr	#2,$22(a1)
0001417E 137C 0013 0016             		move.b	#$13,$16(a1)
00014184 137C 0009 0017             		move.b	#9,$17(a1)
0001418A 5B69 000C                  		subq.w	#5,$C(a1)
0001418E 6000 FF68                  		bra.w	Obj64_Burst
00014192                            ; ===========================================================================
00014192                            
00014192                            Obj64_Display:				; XREF: Obj64_Wobble
00014192 6100 AE0C                  		bsr.w	SpeedToPos
00014196 4A28 0001                  		tst.b	1(a0)
0001419A 6A00                       		bpl.s	Obj64_Delete
0001419C 4EFA AE1C                  		jmp	DisplaySprite
000141A0                            ; ===========================================================================
000141A0                            
000141A0                            Obj64_Delete:
000141A0 4EFA AE54                  		jmp	DeleteObject
000141A4                            ; ===========================================================================
000141A4                            
000141A4                            Obj64_Display2:				; XREF: Obj64_Index
000141A4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000141AA 4EB9 0000 BEA2             		jsr	AnimateSprite
000141B0 4A28 0001                  		tst.b	1(a0)
000141B4 6A00                       		bpl.s	Obj64_Delete2
000141B6 4EFA AE02                  		jmp	DisplaySprite
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            Obj64_Delete2:
000141BA 4EFA AE3A                  		jmp	DeleteObject
000141BE                            ; ===========================================================================
000141BE                            
000141BE                            Obj64_Delete3:				; XREF: Obj64_Index
000141BE 6000 AE36                  		bra.w	DeleteObject
000141C2                            ; ===========================================================================
000141C2                            
000141C2                            Obj64_BblMaker:				; XREF: Obj64_Index
000141C2 4A68 0036                  		tst.w	$36(a0)
000141C6 6600                       		bne.s	loc_12874
000141C8 3038 F646                  		move.w	($FFFFF646).w,d0
000141CC B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000141D0 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000141D4 4A28 0001                  		tst.b	1(a0)
000141D8 6A00 0000                  		bpl.w	Obj64_ChkDel
000141DC 5368 0038                  		subq.w	#1,$38(a0)
000141E0 6A00 0000                  		bpl.w	loc_12914
000141E4 317C 0001 0036             		move.w	#1,$36(a0)
000141EA                            
000141EA                            loc_1283A:
000141EA 4EB9 0000 2854             		jsr	(RandomNumber).l
000141F0 3200                       		move.w	d0,d1
000141F2 0240 0007                  		andi.w	#7,d0
000141F6 0C40 0006                  		cmpi.w	#6,d0
000141FA 64EE                       		bcc.s	loc_1283A
000141FC                            
000141FC 1140 0034                  		move.b	d0,$34(a0)
00014200 0241 000C                  		andi.w	#$C,d1
00014204 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001420A D2C1                       		adda.w	d1,a1
0001420C 2149 003C                  		move.l	a1,$3C(a0)
00014210 5328 0032                  		subq.b	#1,$32(a0)
00014214 6A00                       		bpl.s	loc_12872
00014216 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001421C 08E8 0007 0036             		bset	#7,$36(a0)
00014222                            
00014222                            loc_12872:
00014222 6000                       		bra.s	loc_1287C
00014224                            ; ===========================================================================
00014224                            
00014224                            loc_12874:				; XREF: Obj64_BblMaker
00014224 5368 0038                  		subq.w	#1,$38(a0)
00014228 6A00 0000                  		bpl.w	loc_12914
0001422C                            
0001422C                            loc_1287C:
0001422C 4EB9 0000 2854             		jsr	(RandomNumber).l
00014232 0240 001F                  		andi.w	#$1F,d0
00014236 3140 0038                  		move.w	d0,$38(a0)
0001423A 6100 B212                  		bsr.w	SingleObjLoad
0001423E 6600                       		bne.s	loc_128F8
00014240 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014244 3368 0008 0008             		move.w	8(a0),8(a1)
0001424A 4EB9 0000 2854             		jsr	(RandomNumber).l
00014250 0240 000F                  		andi.w	#$F,d0
00014254 5140                       		subq.w	#8,d0
00014256 D169 0008                  		add.w	d0,8(a1)
0001425A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014260 7000                       		moveq	#0,d0
00014262 1028 0034                  		move.b	$34(a0),d0
00014266 2468 003C                  		movea.l	$3C(a0),a2
0001426A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014270 0828 0007 0036             		btst	#7,$36(a0)
00014276 6700                       		beq.s	loc_128F8
00014278 4EB9 0000 2854             		jsr	(RandomNumber).l
0001427E 0240 0003                  		andi.w	#3,d0
00014282 6600                       		bne.s	loc_128E4
00014284 08E8 0006 0036             		bset	#6,$36(a0)
0001428A 6600                       		bne.s	loc_128F8
0001428C 137C 0002 0028             		move.b	#2,$28(a1)
00014292                            
00014292                            loc_128E4:
00014292 4A28 0034                  		tst.b	$34(a0)
00014296 6600                       		bne.s	loc_128F8
00014298 08E8 0006 0036             		bset	#6,$36(a0)
0001429E 6600                       		bne.s	loc_128F8
000142A0 137C 0002 0028             		move.b	#2,$28(a1)
000142A6                            
000142A6                            loc_128F8:
000142A6 5328 0034                  		subq.b	#1,$34(a0)
000142AA 6A00                       		bpl.s	loc_12914
000142AC 4EB9 0000 2854             		jsr	(RandomNumber).l
000142B2 0240 007F                  		andi.w	#$7F,d0
000142B6 0640 0080                  		addi.w	#$80,d0
000142BA D168 0038                  		add.w	d0,$38(a0)
000142BE 4268 0036                  		clr.w	$36(a0)
000142C2                            
000142C2                            loc_12914:
000142C2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142C8 4EB9 0000 BEA2             		jsr	AnimateSprite
000142CE                            
000142CE                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000142CE 3028 0008                  		move.w	8(a0),d0
000142D2 0240 FF80                  		andi.w	#$FF80,d0
000142D6 3238 F700                  		move.w	($FFFFF700).w,d1
000142DA 0441 0080                  		subi.w	#$80,d1
000142DE 0241 FF80                  		andi.w	#$FF80,d1
000142E2 9041                       		sub.w	d1,d0
000142E4 0C40 0280                  		cmpi.w	#$280,d0
000142E8 6200 AD0C                  		bhi.w	DeleteObject
000142EC 3038 F646                  		move.w	($FFFFF646).w,d0
000142F0 B068 000C                  		cmp.w	$C(a0),d0
000142F4 6500 ACC4                  		bcs.w	DisplaySprite
000142F8 4E75                       		rts	
000142FA                            ; ===========================================================================
000142FA                            ; bubble production sequence
000142FA                            
000142FA                            ; 0 = small bubble, 1 =	large bubble
000142FA                            
000142FA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001430C                            
0001430C                            ; ===========================================================================
0001430C                            
0001430C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001430C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014310 6B00                       		bmi.s	loc_12998
00014312 43F8 D000                  		lea	($FFFFD000).w,a1
00014316 3029 0008                  		move.w	8(a1),d0
0001431A 3228 0008                  		move.w	8(a0),d1
0001431E 0441 0010                  		subi.w	#$10,d1
00014322 B240                       		cmp.w	d0,d1
00014324 6400                       		bcc.s	loc_12998
00014326 0641 0020                  		addi.w	#$20,d1
0001432A B240                       		cmp.w	d0,d1
0001432C 6500                       		bcs.s	loc_12998
0001432E 3029 000C                  		move.w	$C(a1),d0
00014332 3228 000C                  		move.w	$C(a0),d1
00014336 B240                       		cmp.w	d0,d1
00014338 6400                       		bcc.s	loc_12998
0001433A 0641 0010                  		addi.w	#$10,d1
0001433E B240                       		cmp.w	d0,d1
00014340 6500                       		bcs.s	loc_12998
00014342 7001                       		moveq	#1,d0
00014344 4E75                       		rts	
00014346                            ; ===========================================================================
00014346                            
00014346                            loc_12998:
00014346 7000                       		moveq	#0,d0
00014348 4E75                       		rts	
0001434A                            ; ===========================================================================
0001434A                            Ani_obj64:
0001434A                            	include "_anim\obj64.asm"
0001434A                            ; ---------------------------------------------------------------------------
0001434A                            ; Animation script - bubbles (LZ)
0001434A                            ; ---------------------------------------------------------------------------
0001434A 0000                       		dc.w byte_129AA-Ani_obj64
0001434C 0000                       		dc.w byte_129B0-Ani_obj64
0001434E 0000                       		dc.w byte_129B6-Ani_obj64
00014350 0000                       		dc.w byte_129BE-Ani_obj64
00014352 0000                       		dc.w byte_129BE-Ani_obj64
00014354 0000                       		dc.w byte_129C0-Ani_obj64
00014356 0000                       		dc.w byte_129C6-Ani_obj64
00014358 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001435E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00014364 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001436C 04FC                       byte_129BE:	dc.b 4,	$FC
0001436E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00014374 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001437A 00                         		even
0001437A 00                         		even
0001437A                            
0001437A                            ; ---------------------------------------------------------------------------
0001437A                            ; Sprite mappings - bubbles (LZ)
0001437A                            ; ---------------------------------------------------------------------------
0001437A                            Map_obj64:
0001437A                            	include "_maps\obj64.asm"
0001437A                            ; ---------------------------------------------------------------------------
0001437A                            ; Sprite mappings - bubbles (LZ)
0001437A                            ; ---------------------------------------------------------------------------
0001437A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001437E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00014382 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00014386 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001438A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001438E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00014392 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00014396 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001439A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001439E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000143A2 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000143A6 0000                       		dc.w byte_12A9C-Map_obj64
000143A8 01                         byte_129FA:	dc.b 1
000143A9 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000143AE 01                         byte_12A00:	dc.b 1
000143AF FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000143B4 01                         byte_12A06:	dc.b 1
000143B5 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000143BA 01                         byte_12A0C:	dc.b 1
000143BB F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000143C0 01                         byte_12A12:	dc.b 1
000143C1 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000143C6 01                         byte_12A18:	dc.b 1
000143C7 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000143CC 01                         byte_12A1E:	dc.b 1
000143CD F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000143D2 04                         byte_12A24:	dc.b 4
000143D3 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000143D8 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000143DD 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000143E2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000143E7 04                         byte_12A39:	dc.b 4
000143E8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000143ED F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000143F2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000143F7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000143FC 01                         byte_12A4E:	dc.b 1
000143FD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00014402 01                         byte_12A54:	dc.b 1
00014403 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014408 01                         byte_12A5A:	dc.b 1
00014409 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001440E 01                         byte_12A60:	dc.b 1
0001440F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014414 01                         byte_12A66:	dc.b 1
00014415 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001441A 01                         byte_12A6C:	dc.b 1
0001441B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014420 01                         byte_12A72:	dc.b 1
00014421 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014426 01                         byte_12A78:	dc.b 1
00014427 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001442C 01                         byte_12A7E:	dc.b 1
0001442D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014432 01                         byte_12A84:	dc.b 1
00014433 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014438 01                         byte_12A8A:	dc.b 1
00014439 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001443E 01                         byte_12A90:	dc.b 1
0001443F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014444 01                         byte_12A96:	dc.b 1
00014445 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001444A 00                         byte_12A9C:	dc.b 0
0001444C 00                         		even
0001444C 00                         		even
0001444C                            
0001444C                            ; ===========================================================================
0001444C                            ; ---------------------------------------------------------------------------
0001444C                            ; Object 65 - waterfalls (LZ)
0001444C                            ; ---------------------------------------------------------------------------
0001444C                            
0001444C                            Obj65:					; XREF: Obj_Index
0001444C 7000                       		moveq	#0,d0
0001444E 1028 0024                  		move.b	$24(a0),d0
00014452 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00014456 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001445A                            ; ===========================================================================
0001445A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001445C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001445E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014460 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014462 0000                       		dc.w loc_12B36-Obj65_Index
00014464                            ; ===========================================================================
00014464                            
00014464                            Obj65_Main:				; XREF: Obj65_Index
00014464 5828 0024                  		addq.b	#4,$24(a0)
00014468 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014470 317C 4259 0002             		move.w	#$4259,2(a0)
00014476 0028 0004 0001             		ori.b	#4,1(a0)
0001447C 117C 0018 0019             		move.b	#$18,$19(a0)
00014482 117C 0001 0018             		move.b	#1,$18(a0)
00014488 1028 0028                  		move.b	$28(a0),d0	; get object type
0001448C 6A00                       		bpl.s	loc_12AE6
0001448E 08E8 0007 0002             		bset	#7,2(a0)
00014494                            
00014494                            loc_12AE6:
00014494 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00014498 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001449C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000144A0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000144A2 4228 0018                  		clr.b	$18(a0)
000144A6 5528 0024                  		subq.b	#2,$24(a0)
000144AA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000144B0 6700                       		beq.s	loc_12B0A	; if not, branch
000144B2 117C 0006 0024             		move.b	#6,$24(a0)
000144B8                            
000144B8                            loc_12B0A:
000144B8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144BE 6700                       		beq.s	Obj65_Animate	; if not, branch
000144C0 117C 0008 0024             		move.b	#8,$24(a0)
000144C6                            
000144C6                            Obj65_Animate:				; XREF: Obj65_Index
000144C6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144CC 4EB9 0000 BEA2             		jsr	AnimateSprite
000144D2                            
000144D2                            Obj65_ChkDel:				; XREF: Obj65_Index
000144D2 6000 CBA0                  		bra.w	MarkObjGone
000144D6                            ; ===========================================================================
000144D6                            
000144D6                            Obj65_FixHeight:			; XREF: Obj65_Index
000144D6 3038 F646                  		move.w	($FFFFF646).w,d0
000144DA 0440 0010                  		subi.w	#$10,d0
000144DE 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000144E2 60E2                       		bra.s	Obj65_Animate
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            loc_12B36:				; XREF: Obj65_Index
000144E4 08A8 0007 0002             		bclr	#7,2(a0)
000144EA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000144F0 6600                       		bne.s	Obj65_Animate2
000144F2 08E8 0007 0002             		bset	#7,2(a0)
000144F8                            
000144F8                            Obj65_Animate2:
000144F8 60CC                       		bra.s	Obj65_Animate
000144FA                            ; ===========================================================================
000144FA                            Ani_obj65:
000144FA                            	include "_anim\obj65.asm"
000144FA                            ; ---------------------------------------------------------------------------
000144FA                            ; Animation script - waterfall (LZ)
000144FA                            ; ---------------------------------------------------------------------------
000144FA 0000                       		dc.w byte_12B4E-Ani_obj65
000144FC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014502 00                         		even
00014502 00                         		even
00014502                            
00014502                            ; ---------------------------------------------------------------------------
00014502                            ; Sprite mappings - waterfalls (LZ)
00014502                            ; ---------------------------------------------------------------------------
00014502                            Map_obj65:
00014502                            	include "_maps\obj65.asm"
00014502                            ; ---------------------------------------------------------------------------
00014502                            ; Sprite mappings - waterfalls (LZ)
00014502                            ; ---------------------------------------------------------------------------
00014502 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00014506 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001450A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001450E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014512 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00014516 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001451A 01                         byte_12B6C:	dc.b 1
0001451B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014520 02                         byte_12B72:	dc.b 2
00014521 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014526 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001452B 02                         byte_12B7D:	dc.b 2
0001452C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014531 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014536 01                         byte_12B88:	dc.b 1
00014537 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001453C 02                         byte_12B8E:	dc.b 2
0001453D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014542 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014547 01                         byte_12B99:	dc.b 1
00014548 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001454D 01                         byte_12B9F:	dc.b 1
0001454E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014553 01                         byte_12BA5:	dc.b 1
00014554 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014559 02                         byte_12BAB:	dc.b 2
0001455A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001455F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014564 02                         byte_12BB6:	dc.b 2
00014565 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001456A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001456F 02                         byte_12BC1:	dc.b 2
00014570 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014575 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001457A 02                         byte_12BCC:	dc.b 2
0001457B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014580 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014586 00                         		even
00014586 00                         		even
00014586                            
00014586                            SpinDash_dust:
00014586                            	include "_inc\spindash_dust.asm"
00014586                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014586 7000                       		moveq	#0,d0
00014588 1028 0024                  		move.b	$24(a0),d0
0001458C 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014590 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014594                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014594 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014596 0000                       		dc loc_1DD90-off_1DD2E; 1
00014598 0000                       		dc loc_1DE46-off_1DD2E; 2
0001459A 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001459C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001459C                            
0001459C                            loc_1DD36:				; DATA XREF: h+6DBA?o
0001459C 5428 0024                  		addq.b	#2,$24(a0)
000145A0 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
000145A8 0028 0004 0001             		or.b	#4,1(a0)
000145AE 117C 0001 0018             		move.b	#1,$18(a0)
000145B4 117C 0010 0019             		move.b	#$10,$19(a0)
000145BA 317C 07A0 0002             		move	#$7A0,2(a0)
000145C0 317C D000 003E             		move	#-$3000,$3E(a0)
000145C6 317C F400 003C             		move	#$F400,$3C(a0)
000145CC B0FC D1C0                  		cmp	#-$2E40,a0
000145D0 6700                       		beq.s	loc_1DD8C
000145D2 117C 0001 0034             		move.b	#1,$34(a0)
000145D8                            ;		cmp	#2,($FFFFFF70).w
000145D8                            ;		beq.s	loc_1DD8C
000145D8                            ;		move	#$48C,2(a0)
000145D8                            ;		move	#-$4FC0,$3E(a0)
000145D8                            ;		move	#-$6E80,$3C(a0)
000145D8                            
000145D8                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000145D8                            ;		bsr.w	sub_16D6E
000145D8                            
000145D8                            loc_1DD90:				; DATA XREF: h+6DBA?o
000145D8 3468 003E                  		movea.w	$3E(a0),a2
000145DC 7000                       		moveq	#0,d0
000145DE 1028 001C                  		move.b	$1C(a0),d0
000145E2 D040                       		add	d0,d0
000145E4 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000145E8 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000145EC                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000145EC 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000145EE 0000                       		dc loc_1DDAC-off_1DDA4; 1
000145F0 0000                       		dc loc_1DDCC-off_1DDA4; 2
000145F2 0000                       		dc loc_1DE20-off_1DDA4; 3
000145F4                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000145F4                            
000145F4                            loc_1DDAC:				; DATA XREF: h+6E30?o
000145F4 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000145FA 4A28 001D                  		tst.b	$1D(a0)
000145FE 6600                       		bne.s	loc_1DE28
00014600 316A 0008 0008             		move	8(a2),8(a0)
00014606 117C 0000 0022             		move.b	#0,$22(a0)
0001460C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014612 6000                       		bra.s	loc_1DE28
00014614                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014614                            
00014614                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014614                            ;		cmp.b	#$C,$28(a2)
00014614                            ;		bcs.s	loc_1DE3E
00014614 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001461A 6400                       		bcc.s	loc_1DE3E
0001461C 4A2A 0039                  		tst.b	$39(a2)
00014620 6700                       		beq.s	loc_1DE3E
00014622 316A 0008 0008             		move	8(a2),8(a0)
00014628 316A 000C 000C             		move	$C(a2),$C(a0)
0001462E 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014634 0228 0001 0022             		and.b	#1,$22(a0)
0001463A 4A28 0034                  		tst.b	$34(a0)
0001463E 6700                       		beq.s	loc_1DE06
00014640 5968 000C                  		sub	#4,$C(a0)
00014644                            
00014644                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014644 4A28 001D                  		tst.b	$1D(a0)
00014648 6600                       		bne.s	loc_1DE28
0001464A 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014650 4A6A 0002                  		tst	2(a2)
00014654 6A00                       		bpl.s	loc_1DE28
00014656 0068 8000 0002             		or	#-$8000,2(a0)
0001465C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001465C                            
0001465C                            loc_1DE20:				; DATA XREF: h+6E30?o
0001465C                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001465C 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014662 4EB9 0000 BEA2             		jsr	AnimateSprite
00014668 6100 0000                  		bsr.w	loc_1DEE4
0001466C 4EFA A94C                  		jmp	DisplaySprite
00014670                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014670                            
00014670                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014670 117C 0000 001C             		move.b	#0,$1C(a0)
00014676 4E75                       		rts	
00014678                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014678                            
00014678                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014678 6000 A97C                  		bra.w	DeleteObject
0001467C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001467C                            
0001467C                            
0001467C                            
0001467C                            loc_1DE4A:
0001467C 3468 003E                  	movea.w	$3E(a0),a2
00014680 7210                       	moveq	#$10,d1
00014682 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014688 6700                       	beq.s	loc_1DE64
0001468A 7206                       	moveq	#$6,d1
0001468C 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014692 6700                       	beq.s	loc_1DE64
00014694 117C 0002 0024             	move.b	#2,$24(a0)
0001469A 117C 0000 0032             	move.b	#0,$32(a0)
000146A0 4E75                       	rts
000146A2                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146A2                            
000146A2                            loc_1DE64:				; CODE XREF: h+6EE0?j
000146A2 5328 0032                  		subq.b	#1,$32(a0)
000146A6 6A00                       		bpl.s	loc_1DEE0
000146A8 117C 0003 0032             		move.b	#3,$32(a0)
000146AE 4EBA AD9E                  		jsr	SingleObjLoad
000146B2 6600                       		bne.s	loc_1DEE0
000146B4 1290                       		move.b	0(a0),0(a1)
000146B6 336A 0008 0008             		move	8(a2),8(a1)
000146BC 336A 000C 000C             		move	$C(a2),$C(a1)
000146C2 4A28 0034                  		tst.b	$34(a0)
000146C6 6700                       		beq.s	loc_1DE9A
000146C8 5941                       		sub	#4,d1
000146CA                            
000146CA                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000146CA D369 000C                  		add	d1,$C(a1)
000146CE 137C 0000 0022             		move.b	#0,$22(a1)
000146D4 137C 0003 001C             		move.b	#3,$1C(a1)
000146DA 5429 0024                  		addq.b	#2,$24(a1)
000146DE 2368 0004 0004             		move.l	4(a0),4(a1)
000146E4 1368 0001 0001             		move.b	1(a0),1(a1)
000146EA 137C 0001 0018             		move.b	#1,$18(a1)
000146F0 137C 0004 0019             		move.b	#4,$19(a1)
000146F6 3368 0002 0002             		move	2(a0),2(a1)
000146FC 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014702 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014708 4A6A 0002                  		tst	2(a2)
0001470C 6A00                       		bpl.s	loc_1DEE0
0001470E 0069 8000 0002             		or	#-$8000,2(a1)
00014714                            
00014714                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014714 6100                       		bsr.s	loc_1DEE4
00014716 4E75                       		rts	
00014718                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014718                            
00014718                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014718 7000                       		moveq	#0,d0
0001471A 1028 001A                  		move.b	$1A(a0),d0
0001471E B028 0030                  		cmp.b	$30(a0),d0
00014722 6700 0000                  		beq.w	locret_1DF36
00014726 1140 0030                  		move.b	d0,$30(a0)
0001472A 45F9 0000 0000             		lea	(off_1E074).l,a2
00014730 D040                       		add	d0,d0
00014732 D4F2 0000                  		add	(a2,d0.w),a2
00014736 3A1A                       		move	(a2)+,d5
00014738 5345                       		subq	#1,d5
0001473A 6B00 0000                  		bmi.w	locret_1DF36
0001473E 3828 003C                  		move $3C(a0),d4
00014742                            
00014742                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014742 7200                       		moveq	#0,d1
00014744 321A                       		move	(a2)+,d1
00014746 3601                       		move	d1,d3
00014748 E04B                       		lsr.w	#8,d3
0001474A 0243 00F0                  		and	#$F0,d3	; 'Ã°'
0001474E 0643 0010                  		add	#$10,d3
00014752 0241 0FFF                  		and	#$FFF,d1
00014756 EB89                       		lsl.l	#5,d1
00014758 0681 0000 0000             		add.l	#Art_Dust,d1
0001475E 3404                       		move	d4,d2
00014760 D843                       		add	d3,d4
00014762 D843                       		add	d3,d4
00014764 4EB9 0000 1106             		jsr	(QueueDMATransfer).l
0001476A 51CD FFD6                  		dbf	d5,loc_1DF0A
0001476E 4E75                           rts
00014770                            
00014770                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014770 4E75                       		rts	
00014772                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014772 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014774 0000                       		dc byte_1DF43-off_1DF38; 1
00014776 0000                       		dc byte_1DF4F-off_1DF38; 2
00014778 0000                       		dc byte_1DF58-off_1DF38; 3
0001477A 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001477D 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014789 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014792 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014798                            ; -------------------------------------------------------------------------------
00014798                            ; Unknown Sprite Mappings
00014798                            ; -------------------------------------------------------------------------------
00014798                            MapUnc_1DF5E:
00014798 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001479A 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001479C 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001479E 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000147A0 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000147A2 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000147A4 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000147A6 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000147A8 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000147AA 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000147AC 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000147AE 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000147B0 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000147B2 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000147B4 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000147B6 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000147B8 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000147BA 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000147BC 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000147BE 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000147C0 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000147C2 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000147C4 00                         word_1DF8A:	dc.b 0
000147C5 01                         word_1DF8C:	dc.b 1
000147C6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000147CB 01                         word_1DF96:	dc.b 1
000147CC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000147D1 01                         word_1DFA0:	dc.b 1
000147D2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000147D7 01                         word_1DFAA:	dc.b 1
000147D8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000147DD 01                         word_1DFB4:	dc.b 1
000147DE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000147E3 01                         word_1DFBE:	dc.b 1
000147E4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000147E9 01                         word_1DFC8:	dc.b 1
000147EA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000147EF 01                         word_1DFD2:	dc.b 1
000147F0 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000147F5 01                         word_1DFDC:	dc.b 1
000147F6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000147FB 01                         word_1DFE6:	dc.b 1
000147FC 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014801 01                         word_1DFF0:	dc.b 1
00014802 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014807 01                         word_1DFFA:	dc.b 1
00014808 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001480D 02                         word_1E004:	dc.b 2
0001480E F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014813 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014818 02                         word_1E016:	dc.b 2
00014819 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001481E 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014823 02                         word_1E028:	dc.b 2
00014824 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014829 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001482E 02                         word_1E03A:	dc.b 2
0001482F F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014834 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014839 01                         word_1E04C:	dc.b 1
0001483A F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001483F 01                         word_1E056:	dc.b 1
00014840 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014845 01                         word_1E060:	dc.b 1
00014846 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001484B 01                         word_1E06A:	dc.b 1
0001484C F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014851 00                         	dc.b 0
00014852 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014854 0000                       	dc word_1E0A2-off_1E074; 1
00014856 0000                       	dc word_1E0A6-off_1E074; 2
00014858 0000                       	dc word_1E0AA-off_1E074; 3
0001485A 0000                       	dc word_1E0AE-off_1E074; 4
0001485C 0000                       	dc word_1E0B2-off_1E074; 5
0001485E 0000                       	dc word_1E0B6-off_1E074; 6
00014860 0000                       	dc word_1E0BA-off_1E074; 7
00014862 0000                       	dc word_1E0BE-off_1E074; 8
00014864 0000                       	dc word_1E0C2-off_1E074; 9
00014866 0000                       	dc word_1E0C6-off_1E074; 10
00014868 0000                       	dc word_1E0CA-off_1E074; 11
0001486A 0000                       	dc word_1E0CE-off_1E074; 12
0001486C 0000                       	dc word_1E0D2-off_1E074; 13
0001486E 0000                       	dc word_1E0D8-off_1E074; 14
00014870 0000                       	dc word_1E0DE-off_1E074; 15
00014872 0000                       	dc word_1E0E4-off_1E074; 16
00014874 0000                       	dc word_1E0EA-off_1E074; 17
00014876 0000                       	dc word_1E0EA-off_1E074; 18
00014878 0000                       	dc word_1E0EA-off_1E074; 19
0001487A 0000                       	dc word_1E0EA-off_1E074; 20
0001487C 0000                       	dc word_1E0EC-off_1E074; 21
0001487E 0000                       word_1E0A0:	dc 0
00014880 0001                       word_1E0A2:	dc 1
00014882 7000                       	dc $7000
00014884 0001                       word_1E0A6:	dc 1
00014886 F008                       	dc $F008
00014888 0001                       word_1E0AA:	dc 1
0001488A F018                       	dc $F018
0001488C 0001                       word_1E0AE:	dc 1
0001488E F028                       	dc $F028
00014890 0001                       word_1E0B2:	dc 1
00014892 F038                       	dc $F038
00014894 0001                       word_1E0B6:	dc 1
00014896 F048                       	dc $F048
00014898 0001                       word_1E0BA:	dc 1
0001489A 7058                       	dc $7058
0001489C 0001                       word_1E0BE:	dc 1
0001489E 7060                       	dc $7060
000148A0 0001                       word_1E0C2:	dc 1
000148A2 7068                       	dc $7068
000148A4 0001                       word_1E0C6:	dc 1
000148A6 7070                       	dc $7070
000148A8 0001                       word_1E0CA:	dc 1
000148AA 7078                       	dc $7078
000148AC 0001                       word_1E0CE:	dc 1
000148AE 7080                       	dc $7080
000148B0 0002                       word_1E0D2:	dc 2
000148B2 1088                       	dc $1088
000148B4 708A                       	dc $708A
000148B6 0002                       word_1E0D8:	dc 2
000148B8 3092                       	dc $3092
000148BA 7096                       	dc $7096
000148BC 0002                       word_1E0DE:	dc 2
000148BE 509E                       	dc $509E
000148C0 70A4                       	dc $70A4
000148C2 0002                       word_1E0E4:	dc 2
000148C4 50AC                       	dc $50AC
000148C6 70B2                       	dc $70B2
000148C8 0000                       word_1E0EA:	dc 0
000148CA 0001                       word_1E0EC:	dc 1
000148CC F0BA                       	dc $F0BA
000148CE                            	even
000148CE                            	even
000148CE                            
000148CE                            ; ===========================================================================
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; Object 01 - Sonic
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; ===========================================================================
000148CE =00000039                  crawling								= $39			; CRAWLING IN MY SKIN!
000148CE =0000003A                  biting									= $3A
000148CE                            ; ===========================================================================
000148CE                            Obj01_PhysicsTable:
000148CE 0600 000C 0080             		dc.w $600,   $C,  $80			; Normal
000148D4 0300 0006 0040             		dc.w $300,    6,  $40			; Underwater
000148DA 0C00 0018 0080             		dc.w $C00,  $18,  $80			; Speed shoes
000148E0 0600 000C 0080             		dc.w $600,   $C,  $80			; Speed shoes underwater
000148E6 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling
000148EC 0060 000C 0012             		dc.w  $60,   $C,  $12			; Crawling underwater
000148F2 0180 0030 0048             		dc.w $180,  $30,  $48			; Crawling with speed shoes
000148F8 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling with speed shoes underwater
000148FE                            ; ===========================================================================
000148FE                            ; Get physics for Sonic
000148FE                            ; ===========================================================================
000148FE                            Obj01_GetPhysics:
000148FE 7000                       		moveq	#0,d0
00014900 1028 0039                  		move.b	crawling(a0),d0
00014904 E300                       		asl.b	#1,d0
00014906 8038 FE2E                  		or.b	($FFFFFE2E).w,d0
0001490A E300                       		asl.b	#1,d0
0001490C 0828 0006 0022             		btst	#6,$22(a0)
00014912 6700                       		beq.s	@not_underwater
00014914 0000 0001                  		or.b	#1,d0
00014918                            		
00014918                            @not_underwater:
00014918 C0FC 0006                  		mulu.w	#6,d0
0001491C 43FB 00B0                  		lea	Obj01_PhysicsTable(pc,d0.w),a1
00014920 31D9 F760                  		move.w	(a1)+,($FFFFF760).w
00014924 31D9 F762                  		move.w	(a1)+,($FFFFF762).w
00014928 31D1 F764                  		move.w	(a1),($FFFFF764).w
0001492C 4E75                       		rts
0001492E                            ; ===========================================================================
0001492E                            ; Apply speed cap for Sonic
0001492E                            ; ===========================================================================
0001492E                            Obj01_ApplySpeedCap:
0001492E 3228 0014                  		move.w	$14(a0),d1
00014932 4A41                       		tst.w	d1
00014934 6A00                       		bpl.s	@not_negative
00014936 4441                       		neg.w	d1
00014938                            		
00014938                            @not_negative:
00014938 3438 F760                  		move.w	($FFFFF760).w,d2
0001493C B242                       		cmp.w	d2,d1
0001493E 6F00                       		ble.s	@no_cap
00014940 9278 F762                  		sub.w	($FFFFF762).w,d1
00014944 4A68 0014                  		tst.w	$14(a0)
00014948 6A00                       		bpl.s	@not_negative2
0001494A 4441                       		neg.w	d1
0001494C                            		
0001494C                            @not_negative2:
0001494C 3141 0014                  		move.w	d1,$14(a0)
00014950                            		
00014950                            @no_cap:
00014950 4E75                       		rts
00014952                            ; ===========================================================================
00014952                            
00014952                            Obj01:					; XREF: Obj_Index
00014952 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014956 6700                       		beq.s	Obj01_Normal	; if not, branch
00014958 4EF9 0000 0000             		jmp	DebugMode
0001495E                            ; ===========================================================================
0001495E                            
0001495E                            Obj01_Normal:
0001495E 7000                       		moveq	#0,d0
00014960 1028 0024                  		move.b	$24(a0),d0
00014964 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014968 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001496C                            ; ===========================================================================
0001496C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001496E 0000                       		dc.w Obj01_Control-Obj01_Index
00014970 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014972 0000                       		dc.w Obj01_Death-Obj01_Index
00014974 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014976 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014978                            ; ===========================================================================
00014978                            
00014978                            Obj01_Main:				; XREF: Obj01_Index
00014978 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
0001497E 5428 0024                  		addq.b	#2,$24(a0)
00014982 117C 0013 0016             		move.b	#$13,$16(a0)
00014988 117C 0009 0017             		move.b	#9,$17(a0)
0001498E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014996 317C 0780 0002             		move.w	#$780,2(a0)
0001499C 117C 0002 0018             		move.b	#2,$18(a0)
000149A2 117C 0018 0019             		move.b	#$18,$19(a0)
000149A8 117C 0004 0001             		move.b	#4,1(a0)
000149AE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000149B4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000149BA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000149C0 11FC 0005 D1C0             		move.b	#5,($FFFFD1C0).w
000149C6                            
000149C6                            Obj01_Control:				; XREF: Obj01_Index
000149C6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000149CA 6700                       		beq.s	loc_12C58	; if not, branch
000149CC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000149D2 6700                       		beq.s	loc_12C58	; if not, branch
000149D4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000149DA 4238 F7CC                  		clr.b	($FFFFF7CC).w
000149DE 4E75                       		rts	
000149E0                            ; ===========================================================================
000149E0                            
000149E0                            loc_12C58:
000149E0 6100 FF1C                  		bsr.w	Obj01_GetPhysics
000149E4 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000149E8 6600                       		bne.s	loc_12C64	; if yes, branch
000149EA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000149F0                            
000149F0                            loc_12C64:
000149F0 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000149F6 6600                       		bne.s	loc_12C7E	; if yes, branch
000149F8 6100 0000                  		bsr.w	Obj01_DoModes
000149FC                            
000149FC                            loc_12C7E:
000149FC 4A28 0039                  		tst.b	crawling(a0)
00014A00 6600                       		bne.s	@no_bite
00014A02 4A28 003A                  		tst.b	biting(a0)
00014A06 6600                       		bne.s	@chk_bite
00014A08 0838 0006 F602             		btst	#6,($FFFFF602).w
00014A0E 6700                       		beq.s	@no_bite
00014A10 4A38 FFBD                  		tst.b	($FFFFFFBD).w
00014A14 6600                       		bne.s	@chk_bite
00014A16 08A8 0005 0022             		bclr	#5,$22(a0)
00014A1C 117C 000D 003A             		move.b	#13,biting(a0)
00014A22 11FC 0001 FFBD             		move.b	#1,($FFFFFFBD).w
00014A28                            
00014A28                            @chk_bite:
00014A28 4A28 003A                  		tst.b	biting(a0)
00014A2C 6700                       		beq.s	@no_dec
00014A2E 117C 0009 001C             		move.b	#9,$1C(a0) ; Use "biting" animation
00014A34 5328 003A                  		subq.b	#1,biting(a0)
00014A38 6000                       		bra.s	@no_dec
00014A3A                            		
00014A3A                            @no_bite:
00014A3A 11FC 0000 FFBD             		move.b	#0,($FFFFFFBD).w
00014A40 117C 0000 003A             		move.b	#0,biting(a0)
00014A46                            		
00014A46                            @no_dec:
00014A46 6100                       		bsr.s	Sonic_Display
00014A48 6100 0000                  		bsr.w	Sonic_RecordPos
00014A4C 6100 0000                  		bsr.w	Sonic_Water
00014A50 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014A56 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014A5C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014A60 6700                       		beq.s	loc_12CA6
00014A62 4A28 001C                  		tst.b	$1C(a0)
00014A66 6600                       		bne.s	loc_12CA6
00014A68 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014A6E                            
00014A6E                            loc_12CA6:
00014A6E 6100 0000                  		bsr.w	Sonic_Animate
00014A72 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014A76 6B00                       		bmi.s	loc_12CB6
00014A78 4EB9 0000 0000             		jsr	TouchResponse
00014A7E                            
00014A7E                            loc_12CB6:
00014A7E 6000 0000                  		bra.w	LoadSonicDynPLC
00014A82                            ; ===========================================================================
00014A82                            
00014A82                            Obj01_DoModes:
00014A82 7000                       		moveq	#0,d0
00014A84 1028 0022                  		move.b	$22(a0),d0
00014A88 0240 0006                  		andi.w	#6,d0
00014A8C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014A90 4EFB 1000                  		jmp	Obj01_Modes(pc,d1.w)
00014A94                            ; ===========================================================================
00014A94                            
00014A94 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014A96 0000                       		dc.w Obj01_MdAir-Obj01_Modes
00014A98 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014A9A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            Sonic_Display:				; XREF: loc_12C7E
00014A9C 3028 0030                  		move.w	$30(a0),d0
00014AA0 6700                       		beq.s	Obj01_Display
00014AA2 5368 0030                  		subq.w	#1,$30(a0)
00014AA6 E648                       		lsr.w	#3,d0
00014AA8 6400                       		bcc.s	Obj01_ChkInvin
00014AAA                            
00014AAA                            Obj01_Display:
00014AAA 4EBA A50E                  		jsr	DisplaySprite
00014AAE                            
00014AAE                            Obj01_ChkInvin:
00014AAE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AB2 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014AB4 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014AB8 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014ABA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014ABE 6600                       		bne.b	Obj01_ChkShoes
00014AC0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014AC6                            
00014AC6                            Obj01_ChkShoes:
00014AC6 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014ACA 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014ACC 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014AD0 6700                       		beq.s	Obj01_ExitChk
00014AD2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014AD6 6600                       		bne.s	Obj01_ExitChk
00014AD8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014ADE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014AE4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014AEA 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            Obj01_ExitChk:
00014AF0 4E75                       		rts
00014AF2                            
00014AF2                            ; ---------------------------------------------------------------------------
00014AF2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014AF2                            ; ---------------------------------------------------------------------------
00014AF2                            
00014AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AF2                            
00014AF2                            
00014AF2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014AF2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014AF6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014AFA 43F1 0000                  		lea	(a1,d0.w),a1
00014AFE 32E8 0008                  		move.w	8(a0),(a1)+
00014B02 32E8 000C                  		move.w	$C(a0),(a1)+
00014B06 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014B0A 4E75                       		rts	
00014B0C                            ; End of function Sonic_RecordPos
00014B0C                            
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C                            ; Subroutine for Sonic when he's underwater
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C                            
00014B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B0C                            
00014B0C                            
00014B0C                            Sonic_Water:				; XREF: loc_12C7E
00014B0C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014B12 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014B14                            
00014B14                            locret_12D80:
00014B14 4E75                       		rts	
00014B16                            ; ===========================================================================
00014B16                            
00014B16                            Obj01_InWater:
00014B16 3038 F646                  		move.w	($FFFFF646).w,d0
00014B1A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014B1E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014B20 08E8 0006 0022             		bset	#6,$22(a0)
00014B26 66EC                       		bne.s	locret_12D80
00014B28 6100 0000                  		bsr.w	StopDrowning
00014B2C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014B32 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014B38 E0E8 0010                  		asr	$10(a0)
00014B3C E0E8 0012                  		asr	$12(a0)
00014B40 E0E8 0012                  		asr	$12(a0)
00014B44 67CE                       		beq.s	locret_12D80
00014B46 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014B4C 303C 00AA                  		move.w	#$AA,d0
00014B50 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play splash sound
00014B56                            ; ===========================================================================
00014B56                            
00014B56                            Obj01_OutWater:
00014B56 08A8 0006 0022             		bclr	#6,$22(a0)
00014B5C 67B6                       		beq.s	locret_12D80
00014B5E 6100 0000                  		bsr.w	StopDrowning
00014B62 E1E8 0012                  		asl	$12(a0)
00014B66 6700 FFAC                  		beq.w	locret_12D80
00014B6A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014B70 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014B76 6E00                       		bgt.s	loc_12E0E
00014B78 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014B7E                            
00014B7E                            loc_12E0E:
00014B7E 303C 00AA                  		move.w	#$AA,d0
00014B82 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play splash sound
00014B88                            ; End of function Sonic_Water
00014B88                            
00014B88                            ; ===========================================================================
00014B88                            ; ---------------------------------------------------------------------------
00014B88                            ; Modes	for controlling	Sonic
00014B88                            ; ---------------------------------------------------------------------------
00014B88                            
00014B88                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014B88 6100 0000                  		bsr.w	Sonic_Jump
00014B8C 4A28 0039                  		tst.b	crawling(a0)
00014B90 6600                       		bne.s	@is_crawling
00014B92 6100 0000                  		bsr.w	Sonic_SlopeResist
00014B96                            		
00014B96                            @is_crawling:
00014B96 6100 0000                  		bsr.w	Sonic_Move
00014B9A 6100 0000                  		bsr.w	Sonic_LevelBound
00014B9E 4EBA A400                  		jsr	SpeedToPos
00014BA2 6100 0000                  		bsr.w	Sonic_AnglePos
00014BA6 4A28 0039                  		tst.b	crawling(a0)
00014BAA 6600                       		bne.s	@is_crawling2
00014BAC 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014BB0                            		
00014BB0                            @is_crawling2:
00014BB0 4A68 003E                  		tst.w	$3E(a0)
00014BB4 6700                       		beq.s	@no_movelock
00014BB6 5368 003E                  		subq.w	#1,$3E(a0)
00014BBA                            		
00014BBA                            @no_movelock:
00014BBA 103C 0000                  		move.b	#0,d0
00014BBE 0838 0001 F602             		btst	#1,($FFFFF602).w
00014BC4 6700                       		beq.s	@not_crawling
00014BC6 6100 FD66                  		bsr.w	Obj01_ApplySpeedCap
00014BCA 103C 0001                  		move.b	#1,d0
00014BCE                            		
00014BCE                            @not_crawling:
00014BCE 1140 0039                  		move.b	d0,crawling(a0)
00014BD2 4E75                       		rts	
00014BD4                            ; ===========================================================================
00014BD4                            
00014BD4                            Obj01_MdAir:				; XREF: Obj01_Modes
00014BD4 117C 0000 0039             		move.b	#0,crawling(a0)
00014BDA 6100 0000                  		bsr.w	Sonic_JumpHeight
00014BDE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014BE2 6100 0000                  		bsr.w	Sonic_LevelBound
00014BE6 4EBA A398                  		jsr	ObjectFall
00014BEA 0828 0006 0022             		btst	#6,$22(a0)
00014BF0 6700                       		beq.s	loc_12E5C
00014BF2 0468 0028 0012             		subi.w	#$28,$12(a0)
00014BF8                            
00014BF8                            loc_12E5C:
00014BF8 6100 0000                  		bsr.w	Sonic_JumpAngle
00014BFC 6100 0000                  		bsr.w	Sonic_Floor
00014C00 4E75                       		rts	
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014C02 4E75                       		rts					; Nothing to see here
00014C04                            ; ===========================================================================
00014C04                            
00014C04                            Obj01_MdJump:				; XREF: Obj01_Modes
00014C04 117C 0000 0039             		move.b	#0,crawling(a0)
00014C0A 6100 0000                  		bsr.w	Sonic_JumpHeight
00014C0E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014C12 6100 0000                  		bsr.w	Sonic_LevelBound
00014C16 6100 0000                  		bsr.w 	Sonic_JumpAnimate
00014C1A 4EBA A364                  		jsr	ObjectFall
00014C1E 0828 0006 0022             		btst	#6,$22(a0)
00014C24 6700                       		beq.s	loc_12EA6
00014C26 0468 0028 0012             		subi.w	#$28,$12(a0)
00014C2C                            
00014C2C                            loc_12EA6:
00014C2C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014C30 6100 0000                  		bsr.w	Sonic_Floor
00014C34 4E75                       		rts	
00014C36                            ; ---------------------------------------------------------------------------
00014C36                            ; Subroutine to	make Sonic walk/run
00014C36                            ; ---------------------------------------------------------------------------
00014C36                            
00014C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C36                            
00014C36                            
00014C36                            Sonic_Move:				; XREF: Obj01_MdNormal
00014C36 3C38 F760                  		move.w	($FFFFF760).w,d6
00014C3A 3A38 F762                  		move.w	($FFFFF762).w,d5
00014C3E 3838 F764                  		move.w	($FFFFF764).w,d4
00014C42 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014C46 6600 0000                  		bne.w	loc_12FEE
00014C4A 4A68 003E                  		tst.w	$3E(a0)
00014C4E 6600 0000                  		bne.w	Obj01_ResetScr
00014C52 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014C58 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014C5A 6100 0000                  		bsr.w	Sonic_MoveLeft
00014C5E                            
00014C5E                            Obj01_NotLeft:
00014C5E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014C64 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014C66 6100 0000                  		bsr.w	Sonic_MoveRight
00014C6A                            
00014C6A                            Obj01_NotRight:
00014C6A 1028 0026                  		move.b	$26(a0),d0
00014C6E 0600 0020                  		addi.b	#$20,d0
00014C72 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014C76 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014C7A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014C7E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014C82 08A8 0005 0022             		bclr	#5,$22(a0)
00014C88 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014C8E 0828 0003 0022             		btst	#3,$22(a0)
00014C94 6700                       		beq.s	Sonic_Balance
00014C96 7000                       		moveq	#0,d0
00014C98 1028 003D                  		move.b	$3D(a0),d0
00014C9C ED48                       		lsl.w	#6,d0
00014C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00014CA2 43F1 0000                  		lea	(a1,d0.w),a1
00014CA6 4A29 0022                  		tst.b	$22(a1)
00014CAA 6B00                       		bmi.s	Sonic_LookUp
00014CAC 7200                       		moveq	#0,d1
00014CAE 1229 0019                  		move.b	$19(a1),d1
00014CB2 3401                       		move.w	d1,d2
00014CB4 D442                       		add.w	d2,d2
00014CB6 5942                       		subq.w	#4,d2
00014CB8 D268 0008                  		add.w	8(a0),d1
00014CBC 9269 0008                  		sub.w	8(a1),d1
00014CC0 0C41 0004                  		cmpi.w	#4,d1
00014CC4 6D00                       		blt.s	loc_12F6A
00014CC6 B242                       		cmp.w	d2,d1
00014CC8 6C00                       		bge.s	loc_12F5A
00014CCA 6000                       		bra.s	Sonic_LookUp
00014CCC                            ; ===========================================================================
00014CCC                            
00014CCC                            Sonic_Balance:
00014CCC 4EB9 0000 0000             		jsr	ObjHitFloor
00014CD2 0C41 000C                  		cmpi.w	#$C,d1
00014CD6 6D00                       		blt.s	Sonic_LookUp
00014CD8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014CDE 6600                       		bne.s	loc_12F62
00014CE0                            
00014CE0                            loc_12F5A:
00014CE0 08A8 0000 0022             		bclr	#0,$22(a0)
00014CE6 6000                       		bra.s	loc_12F70
00014CE8                            ; ===========================================================================
00014CE8                            
00014CE8                            loc_12F62:
00014CE8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014CEE 6600                       		bne.s	Sonic_LookUp
00014CF0                            
00014CF0                            loc_12F6A:
00014CF0 08E8 0000 0022             		bset	#0,$22(a0)
00014CF6                            
00014CF6                            loc_12F70:
00014CF6 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014CFC 6000                       		bra.s	Obj01_ResetScr
00014CFE                            ; ===========================================================================
00014CFE                            
00014CFE                            Sonic_LookUp:
00014CFE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014D04 6700                       		beq.s	Sonic_Duck	; if not, branch
00014D06 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014D0C 5238 C903                  		addq.b	#1,($FFFFC903).w
00014D10 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014D16 6500                       		bcs.s	Obj01_ResetScr_Part2
00014D18 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014D1E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014D24 6700                       		beq.s	loc_12FC2
00014D26 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014D2A 6000                       		bra.s	loc_12FC2
00014D2C                            ; ===========================================================================
00014D2C                            
00014D2C                            Sonic_Duck:
00014D2C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014D32 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014D34 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014D3A 5238 C903                  		addq.b	#1,($FFFFC903).w
00014D3E 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014D44 6500                       		bcs.s	Obj01_ResetScr_Part2
00014D46 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014D4C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014D52 6700                       		beq.s	loc_12FC2
00014D54 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014D58 6000                       		bra.s	loc_12FC2
00014D5A                            ; ===========================================================================
00014D5A                            
00014D5A                            Obj01_ResetScr:
00014D5A 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00014D60                            		
00014D60                            Obj01_ResetScr_Part2:
00014D60 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014D66 6700                       		beq.s	loc_12FC2	; if yes, branch
00014D68 6400                       		bcc.s	loc_12FBE
00014D6A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014D6E                            
00014D6E                            loc_12FBE:
00014D6E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014D72                            
00014D72                            loc_12FC2:
00014D72 1038 F602                  		move.b	($FFFFF602).w,d0
00014D76 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014D7A 6600                       		bne.s	loc_12FEE	; if yes, branch
00014D7C 3028 0014                  		move.w	$14(a0),d0
00014D80 6700                       		beq.s	loc_12FEE
00014D82 6B00                       		bmi.s	loc_12FE2
00014D84 9045                       		sub.w	d5,d0
00014D86 6400                       		bcc.s	loc_12FDC
00014D88 303C 0000                  		move.w	#0,d0
00014D8C                            
00014D8C                            loc_12FDC:
00014D8C 3140 0014                  		move.w	d0,$14(a0)
00014D90 6000                       		bra.s	loc_12FEE
00014D92                            ; ===========================================================================
00014D92                            
00014D92                            loc_12FE2:
00014D92 D045                       		add.w	d5,d0
00014D94 6400                       		bcc.s	loc_12FEA
00014D96 303C 0000                  		move.w	#0,d0
00014D9A                            
00014D9A                            loc_12FEA:
00014D9A 3140 0014                  		move.w	d0,$14(a0)
00014D9E                            
00014D9E                            loc_12FEE:
00014D9E 1028 0026                  		move.b	$26(a0),d0
00014DA2 4EB9 0000 287A             		jsr	(CalcSine).l
00014DA8 C3E8 0014                  		muls.w	$14(a0),d1
00014DAC E081                       		asr.l	#8,d1
00014DAE 3141 0010                  		move.w	d1,$10(a0)
00014DB2 C1E8 0014                  		muls.w	$14(a0),d0
00014DB6 E080                       		asr.l	#8,d0
00014DB8 3140 0012                  		move.w	d0,$12(a0)
00014DBC                            
00014DBC                            loc_1300C:
00014DBC 1028 0026                  		move.b	$26(a0),d0
00014DC0 0600 0040                  		addi.b	#$40,d0
00014DC4 6B00                       		bmi.s	locret_1307C
00014DC6 123C 0040                  		move.b	#$40,d1
00014DCA 4A68 0014                  		tst.w	$14(a0)
00014DCE 6700                       		beq.s	locret_1307C
00014DD0 6B00                       		bmi.s	loc_13024
00014DD2 4441                       		neg.w	d1
00014DD4                            
00014DD4                            loc_13024:
00014DD4 1028 0026                  		move.b	$26(a0),d0
00014DD8 D001                       		add.b	d1,d0
00014DDA 3F00                       		move.w	d0,-(sp)
00014DDC 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014DE0 301F                       		move.w	(sp)+,d0
00014DE2 4A41                       		tst.w	d1
00014DE4 6A00                       		bpl.s	locret_1307C
00014DE6 E141                       		asl.w	#8,d1
00014DE8 0600 0020                  		addi.b	#$20,d0
00014DEC 0200 00C0                  		andi.b	#$C0,d0
00014DF0 6700                       		beq.s	loc_13078
00014DF2 0C00 0040                  		cmpi.b	#$40,d0
00014DF6 6700                       		beq.s	loc_13066
00014DF8 0C00 0080                  		cmpi.b	#$80,d0
00014DFC 6700                       		beq.s	loc_13060
00014DFE D368 0010                  		add.w	d1,$10(a0)
00014E02 08E8 0005 0022             		bset	#5,$22(a0)
00014E08 317C 0000 0014             		move.w	#0,$14(a0)
00014E0E 4E75                       		rts	
00014E10                            ; ===========================================================================
00014E10                            
00014E10                            loc_13060:
00014E10 9368 0012                  		sub.w	d1,$12(a0)
00014E14 4E75                       		rts	
00014E16                            ; ===========================================================================
00014E16                            
00014E16                            loc_13066:
00014E16 9368 0010                  		sub.w	d1,$10(a0)
00014E1A 08E8 0005 0022             		bset	#5,$22(a0)
00014E20 317C 0000 0014             		move.w	#0,$14(a0)
00014E26 4E75                       		rts	
00014E28                            ; ===========================================================================
00014E28                            
00014E28                            loc_13078:
00014E28 D368 0012                  		add.w	d1,$12(a0)
00014E2C                            
00014E2C                            locret_1307C:
00014E2C 4E75                       		rts	
00014E2E                            ; End of function Sonic_Move
00014E2E                            
00014E2E                            
00014E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E2E                            
00014E2E                            
00014E2E                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014E2E 3028 0014                  		move.w	$14(a0),d0
00014E32 6700                       		beq.s	loc_13086
00014E34 6A00                       		bpl.s	loc_130B2
00014E36                            
00014E36                            loc_13086:
00014E36 08E8 0000 0022             		bset	#0,$22(a0)
00014E3C 6600                       		bne.s	loc_1309A
00014E3E 08A8 0005 0022             		bclr	#5,$22(a0)
00014E44 117C 0001 001D             		move.b	#1,$1D(a0)
00014E4A                            
00014E4A                            loc_1309A:
00014E4A 9045                       		sub.w	d5,d0
00014E4C 3206                       		move.w	d6,d1
00014E4E 4441                       		neg.w	d1
00014E50 B041                       		cmp.w	d1,d0
00014E52 6E00                       		bgt.s	loc_130A6
00014E54 D045                       		add.w	d5,d0
00014E56 B041                       		cmp.w	d1,d0
00014E58 6F00                       		ble.s	loc_130A6
00014E5A 3001                       		move.w	d1,d0
00014E5C                            
00014E5C                            loc_130A6:
00014E5C 3140 0014                  		move.w	d0,$14(a0)
00014E60 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014E66 4E75                       		rts
00014E68                            ; ===========================================================================
00014E68                            
00014E68                            loc_130B2:				; XREF: Sonic_MoveLeft
00014E68 9044                       		sub.w	d4,d0
00014E6A 6400                       		bcc.s	loc_130BA
00014E6C 303C FF80                  		move.w	#-$80,d0
00014E70                            
00014E70                            loc_130BA:
00014E70 3140 0014                  		move.w	d0,$14(a0)
00014E74 1028 0026                  		move.b	$26(a0),d0
00014E78 0600 0020                  		addi.b	#$20,d0
00014E7C 0200 00C0                  		andi.b	#$C0,d0
00014E80 6600                       		bne.s	locret_130E8
00014E82 0C40 0400                  		cmpi.w	#$400,d0
00014E86 6D00                       		blt.s	locret_130E8
00014E88 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014E8E 08A8 0000 0022             		bclr	#0,$22(a0)
00014E94 303C 00A4                  		move.w	#$A4,d0
00014E98 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play stopping sound
00014E9E                            
00014E9E                            locret_130E8:
00014E9E 4E75                       		rts	
00014EA0                            ; End of function Sonic_MoveLeft
00014EA0                            
00014EA0                            
00014EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EA0                            
00014EA0                            
00014EA0                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00014EA0 3028 0014                  		move.w	$14(a0),d0
00014EA4 6B00                       		bmi.s	loc_13118
00014EA6 08A8 0000 0022             		bclr	#0,$22(a0)
00014EAC 6700                       		beq.s	loc_13104
00014EAE 08A8 0005 0022             		bclr	#5,$22(a0)
00014EB4 117C 0001 001D             		move.b	#1,$1D(a0)
00014EBA                            
00014EBA                            loc_13104:
00014EBA D045                       		add.w	d5,d0
00014EBC B046                       		cmp.w	d6,d0
00014EBE 6D00                       		blt.s	loc_1310C
00014EC0 9045                       		sub.w	d5,d0
00014EC2 B046                       		cmp.w	d6,d0
00014EC4 6C00                       		bge.s	loc_1310C
00014EC6 3006                       		move.w	d6,d0
00014EC8                            
00014EC8                            loc_1310C:
00014EC8 3140 0014                  		move.w	d0,$14(a0)
00014ECC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014ED2 4E75                       		rts
00014ED4                            ; ===========================================================================
00014ED4                            
00014ED4                            loc_13118:				; XREF: Sonic_MoveRight
00014ED4 D044                       		add.w	d4,d0
00014ED6 6400                       		bcc.s	loc_13120
00014ED8 303C 0080                  		move.w	#$80,d0
00014EDC                            
00014EDC                            loc_13120:
00014EDC 3140 0014                  		move.w	d0,$14(a0)
00014EE0 1028 0026                  		move.b	$26(a0),d0
00014EE4 0600 0020                  		addi.b	#$20,d0
00014EE8 0200 00C0                  		andi.b	#$C0,d0
00014EEC 6600                       		bne.s	locret_1314E
00014EEE 0C40 FC00                  		cmpi.w	#-$400,d0
00014EF2 6E00                       		bgt.s	locret_1314E
00014EF4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014EFA 08E8 0000 0022             		bset	#0,$22(a0)
00014F00 303C 00A4                  		move.w	#$A4,d0
00014F04 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play stopping sound
00014F0A                            
00014F0A                            locret_1314E:
00014F0A 4E75                       		rts	
00014F0C                            ; End of function Sonic_MoveRight
00014F0C                            
00014F0C                            ; ---------------------------------------------------------------------------
00014F0C                            ; Subroutine to	change Sonic's speed as he rolls
00014F0C                            ; ---------------------------------------------------------------------------
00014F0C                            
00014F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F0C                            
00014F0C                            
00014F0C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014F0C 4E75                       		rts
00014F0E                            ; End of function Sonic_RollSpeed
00014F0E                            
00014F0E                            
00014F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F0E                            
00014F0E                            
00014F0E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014F0E 4E75                       		rts	
00014F10                            ; End of function Sonic_RollLeft
00014F10                            
00014F10                            
00014F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F10                            
00014F10                            
00014F10                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014F10 4E75                       		rts	
00014F12                            ; End of function Sonic_RollRight
00014F12                            
00014F12                            ; ---------------------------------------------------------------------------
00014F12                            ; Subroutine to	change Sonic's direction while jumping
00014F12                            ; ---------------------------------------------------------------------------
00014F12                            
00014F12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F12                            
00014F12                            
00014F12                            Sonic_ChgJumpDir:		; XREF: Obj01_MdAir; Obj01_MdJump
00014F12 3C38 F760                  		move.w	($FFFFF760).w,d6
00014F16 3A38 F762                  		move.w	($FFFFF762).w,d5
00014F1A E345                       		asl.w	#1,d5
00014F1C 0828 0004 0022             		btst	#4,$22(a0)	
00014F22 6600                       		bne.s	Obj01_ResetScr2	
00014F24 3028 0010                  		move.w	$10(a0),d0	
00014F28 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00014F2E 6700                       		beq.s	loc_13278; if not, branch	
00014F30 08E8 0000 0022             		bset	#0,$22(a0)	
00014F36 9045                       		sub.w	d5,d0	
00014F38 3206                       		move.w	d6,d1	
00014F3A 4441                       		neg.w	d1	
00014F3C B041                       		cmp.w	d1,d0	
00014F3E 6E00                       		bgt.s	loc_13278	
00014F40 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00014F42 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00014F44 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00014F46 3001                       		move.w	d1,d0
00014F48                            
00014F48                            loc_13278:
00014F48 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00014F4E 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00014F50 08A8 0000 0022             		bclr	#0,$22(a0)	
00014F56 D045                       		add.w	d5,d0	
00014F58 B046                       		cmp.w	d6,d0	
00014F5A 6D00                       		blt.s	Obj01_JumpMove
00014F5C 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00014F5E B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00014F60 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00014F62 3006                       		move.w	d6,d0
00014F64                            
00014F64                            Obj01_JumpMove:
00014F64 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014F68                            
00014F68                            Obj01_ResetScr2:
00014F68 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014F6E 6700                       		beq.s	loc_132A4	; if yes, branch
00014F70 6400                       		bcc.s	loc_132A0
00014F72 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014F76                            
00014F76                            loc_132A0:
00014F76 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014F7A                            
00014F7A                            loc_132A4:
00014F7A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014F80 6500                       		bcs.s	locret_132D2	; if yes, branch
00014F82 3028 0010                  		move.w	$10(a0),d0
00014F86 3200                       		move.w	d0,d1
00014F88 EA41                       		asr.w	#5,d1
00014F8A 6700                       		beq.s	locret_132D2
00014F8C 6B00                       		bmi.s	loc_132C6
00014F8E 9041                       		sub.w	d1,d0
00014F90 6400                       		bcc.s	loc_132C0
00014F92 303C 0000                  		move.w	#0,d0
00014F96                            
00014F96                            loc_132C0:
00014F96 3140 0010                  		move.w	d0,$10(a0)
00014F9A 4E75                       		rts	
00014F9C                            ; ===========================================================================
00014F9C                            
00014F9C                            loc_132C6:
00014F9C 9041                       		sub.w	d1,d0
00014F9E 6500                       		bcs.s	loc_132CE
00014FA0 303C 0000                  		move.w	#0,d0
00014FA4                            
00014FA4                            loc_132CE:
00014FA4 3140 0010                  		move.w	d0,$10(a0)
00014FA8                            
00014FA8                            locret_132D2:
00014FA8 4E75                       		rts	
00014FAA                            ; End of function Sonic_ChgJumpDir
00014FAA                            
00014FAA                            ; ===========================================================================
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            ; Unused subroutine to squash Sonic
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            sonic_squash:
00014FAA 1028 0026                  		move.b	$26(a0),d0
00014FAE 0600 0020                  		addi.b	#$20,d0
00014FB2 0200 00C0                  		andi.b	#$C0,d0
00014FB6 6600                       		bne.s	locret_13302
00014FB8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014FBC 4A41                       		tst.w	d1
00014FBE 6A00                       		bpl.s	locret_13302
00014FC0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00014FC6 317C 0000 0010             		move.w	#0,$10(a0)
00014FCC 317C 0000 0012             		move.w	#0,$12(a0)
00014FD2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014FD8                            
00014FD8                            locret_13302:
00014FD8 4E75                       		rts	
00014FDA                            ; ---------------------------------------------------------------------------
00014FDA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014FDA                            ; ---------------------------------------------------------------------------
00014FDA                            
00014FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FDA                            
00014FDA                            
00014FDA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014FDA 2228 0008                  		move.l	8(a0),d1
00014FDE 3028 0010                  		move.w	$10(a0),d0
00014FE2 48C0                       		ext.l	d0
00014FE4 E180                       		asl.l	#8,d0
00014FE6 D280                       		add.l	d0,d1
00014FE8 4841                       		swap	d1
00014FEA 3038 F728                  		move.w	($FFFFF728).w,d0
00014FEE 0640 0010                  		addi.w	#$10,d0
00014FF2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014FF4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014FF6 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014FFA 0640 0128                  		addi.w	#$128,d0
00014FFE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00015002 6600                       		bne.s	loc_13332
00015004 0640 0040                  		addi.w	#$40,d0
00015008                            
00015008                            loc_13332:
00015008 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001500A 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001500C                            
0001500C                            loc_13336:
0001500C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015010 0640 00E0                  		addi.w	#$E0,d0
00015014 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00015018 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001501A 4E75                       		rts	
0001501C                            ; ===========================================================================
0001501C                            
0001501C                            Boundary_Bottom:
0001501C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00015022 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00015026 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001502C 6500 0000                  		bcs.w	KillSonic
00015030 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00015034 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001503A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00015040 4E75                       		rts	
00015042                            ; ===========================================================================
00015042                            
00015042                            Boundary_Sides:
00015042 3140 0008                  		move.w	d0,8(a0)
00015046 317C 0000 000A             		move.w	#0,$A(a0)
0001504C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00015052 317C 0000 0014             		move.w	#0,$14(a0)
00015058 60B2                       		bra.s	loc_13336
0001505A                            ; End of function Sonic_LevelBound
0001505A                            
0001505A                            ; ---------------------------------------------------------------------------
0001505A                            ; Subroutine allowing Sonic to jump
0001505A                            ; ---------------------------------------------------------------------------
0001505A                            
0001505A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001505A                            
0001505A                            
0001505A                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001505A 1038 F603                  		move.b	($FFFFF603).w,d0
0001505E 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
00015062 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015066 7000                       		moveq	#0,d0
00015068 1028 0026                  		move.b	$26(a0),d0
0001506C 0600 0080                  		addi.b	#$80,d0
00015070 6100 0000                  		bsr.w	sub_14D48
00015074 0C41 0006                  		cmpi.w	#6,d1
00015078 6D00 0000                  		blt.w	locret_1348E
0001507C 343C 0680                  		move.w	#$680,d2
00015080 0828 0006 0022             		btst	#6,$22(a0)
00015086 6700                       		beq.s	loc_1341C
00015088 343C 0380                  		move.w	#$380,d2
0001508C                            
0001508C                            loc_1341C:
0001508C 7000                       		moveq	#0,d0
0001508E 1028 0026                  		move.b	$26(a0),d0
00015092 0400 0040                  		subi.b	#$40,d0
00015096 4EB9 0000 287A             		jsr	(CalcSine).l
0001509C C3C2                       		muls.w	d2,d1
0001509E E081                       		asr.l	#8,d1
000150A0 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000150A4 C1C2                       		muls.w	d2,d0
000150A6 E080                       		asr.l	#8,d0
000150A8 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000150AC 08E8 0001 0022             		bset	#1,$22(a0)
000150B2 08A8 0005 0022             		bclr	#5,$22(a0)
000150B8 588F                       		addq.l	#4,sp
000150BA 117C 0001 003C             		move.b	#1,$3C(a0)
000150C0 4228 0038                  		clr.b	$38(a0)
000150C4 303C 00A0                  		move.w	#$A0,d0
000150C8 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play jumping sound
000150CE 117C 0013 0016             		move.b	#$13,$16(a0)
000150D4 117C 0009 0017             		move.b	#9,$17(a0)
000150DA 0828 0002 0022             		btst	#2,$22(a0)
000150E0 6600                       		bne.s	loc_13490
000150E2 117C 000E 0016             		move.b	#$E,$16(a0)
000150E8 117C 0007 0017             		move.b	#7,$17(a0)
000150EE 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "jumping"	animation
000150F4 08E8 0002 0022             		bset	#2,$22(a0)
000150FA 5A68 000C                  		addq.w	#5,$C(a0)
000150FE                            
000150FE                            locret_1348E:
000150FE 4E75                       		rts	
00015100                            ; ===========================================================================
00015100                            
00015100                            loc_13490:
00015100 08E8 0004 0022             		bset	#4,$22(a0)
00015106 4E75                       		rts	
00015108                            ; End of function Sonic_Jump
00015108                            
00015108                            
00015108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015108                            
00015108                            
00015108                            Sonic_JumpAnimate:
00015108 103C 0020                  		move.b #$20,d0 ;animation down
0001510C 4A68 0012                  		tst.w $12(a0)
00015110 6A00                       		bpl.s @positive
00015112 103C 001F                  		move.b #$1F,d0 ;animation up
00015116                            
00015116                            @positive:
00015116 1140 001C                  		move.b d0,$1C(a0)
0001511A 4E75                       		rts
0001511C                            
0001511C                            Sonic_JumpHeight:			; XREF: Obj01_MdAir; Obj01_MdJump
0001511C 4A28 003C                  		tst.b	$3C(a0)
00015120 6700                       		beq.s	loc_134C4
00015122 323C FC00                  		move.w	#-$400,d1
00015126 0828 0006 0022             		btst	#6,$22(a0)
0001512C 6700                       		beq.s	loc_134AE
0001512E 323C FE00                  		move.w	#-$200,d1
00015132                            
00015132                            loc_134AE:
00015132 B268 0012                  		cmp.w	$12(a0),d1
00015136 6F00                       		ble.s	locret_134C2
00015138 1038 F602                  		move.b	($FFFFF602).w,d0
0001513C 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
00015140 6600                       		bne.s	locret_134C2	; if yes, branch
00015142 3141 0012                  		move.w	d1,$12(a0)
00015146                            
00015146                            locret_134C2:
00015146 4E75                       		rts	
00015148                            ; ===========================================================================
00015148                            
00015148                            loc_134C4:
00015148 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
0001514E 6C00                       		bge.s	locret_134D2
00015150 317C F040 0012             		move.w	#-$FC0,$12(a0)
00015156                            
00015156                            locret_134D2:
00015156 4E75                       		rts	
00015158                            ; End of function Sonic_JumpHeight
00015158                            
00015158                            ; ---------------------------------------------------------------------------
00015158                            ; Subroutine to	slow Sonic walking up a	slope
00015158                            ; ---------------------------------------------------------------------------
00015158                            
00015158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015158                            
00015158                            
00015158                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00015158 1028 0026                  		move.b	$26(a0),d0
0001515C 0600 0060                  		addi.b	#$60,d0
00015160 0C00 00C0                  		cmpi.b	#$C0,d0
00015164 6400                       		bcc.s	locret_13508
00015166 1028 0026                  		move.b	$26(a0),d0
0001516A 4EB9 0000 287A             		jsr	(CalcSine).l
00015170 C1FC 0020                  		muls.w	#$20,d0
00015174 E080                       		asr.l	#8,d0
00015176 4A68 0014                  		tst.w	$14(a0)
0001517A 6700                       		beq.s	locret_13508
0001517C 6B00                       		bmi.s	loc_13504
0001517E 4A40                       		tst.w	d0
00015180 6700                       		beq.s	locret_13502
00015182 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00015186                            
00015186                            locret_13502:
00015186 4E75                       		rts	
00015188                            ; ===========================================================================
00015188                            
00015188                            loc_13504:
00015188 D168 0014                  		add.w	d0,$14(a0)
0001518C                            
0001518C                            locret_13508:
0001518C 4E75                       		rts	
0001518E                            ; End of function Sonic_SlopeResist
0001518E                            
0001518E                            ; ---------------------------------------------------------------------------
0001518E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001518E                            ; ---------------------------------------------------------------------------
0001518E                            
0001518E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001518E                            
0001518E                            
0001518E                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001518E 4E75                       		rts	
00015190                            ; End of function Sonic_RollRepel
00015190                            
00015190                            ; ---------------------------------------------------------------------------
00015190                            ; Subroutine to	push Sonic down	a slope
00015190                            ; ---------------------------------------------------------------------------
00015190                            
00015190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015190                            
00015190                            
00015190                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00015190 4E71                       		nop	
00015192 4A28 0038                  		tst.b	$38(a0)
00015196 6600                       		bne.s	locret_13580
00015198 4A68 003E                  		tst.w	$3E(a0)
0001519C 6600                       		bne.s	locret_13580
0001519E 1028 0026                  		move.b	$26(a0),d0
000151A2 0600 0020                  		addi.b	#$20,d0
000151A6 0200 00C0                  		andi.b	#$C0,d0
000151AA 6700                       		beq.s	locret_13580
000151AC 3028 0014                  		move.w	$14(a0),d0
000151B0 6A00                       		bpl.s	loc_1356A
000151B2 4440                       		neg.w	d0
000151B4                            
000151B4                            loc_1356A:
000151B4 0C40 0280                  		cmpi.w	#$280,d0
000151B8 6400                       		bcc.s	locret_13580
000151BA 4268 0014                  		clr.w	$14(a0)
000151BE 08E8 0001 0022             		bset	#1,$22(a0)
000151C4 317C 001E 003E             		move.w	#$1E,$3E(a0)
000151CA                            
000151CA                            locret_13580:
000151CA 4E75                       		rts	
000151CC                            ; ===========================================================================
000151CC                            
000151CC                            loc_13582:
000151CC 4E75                       		rts	
000151CE                            ; End of function Sonic_SlopeRepel
000151CE                            
000151CE                            ; ---------------------------------------------------------------------------
000151CE                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000151CE                            ; ---------------------------------------------------------------------------
000151CE                            
000151CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151CE                            
000151CE                            
000151CE                            Sonic_JumpAngle:			; XREF: Obj01_MdAir; Obj01_MdJump
000151CE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000151D2 6700                       		beq.s	locret_135A2	; if already 0,	branch
000151D4 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000151D6                            
000151D6 5400                       		addq.b	#2,d0		; increase angle
000151D8 6400                       		bcc.s	loc_13596
000151DA 7000                       		moveq	#0,d0
000151DC                            
000151DC                            loc_13596:
000151DC 6000                       		bra.s	loc_1359E
000151DE                            ; ===========================================================================
000151DE                            
000151DE                            loc_13598:
000151DE 5500                       		subq.b	#2,d0		; decrease angle
000151E0 6400                       		bcc.s	loc_1359E
000151E2 7000                       		moveq	#0,d0
000151E4                            
000151E4                            loc_1359E:
000151E4 1140 0026                  		move.b	d0,$26(a0)
000151E8                            
000151E8                            locret_135A2:
000151E8 4E75                       		rts	
000151EA                            ; End of function Sonic_JumpAngle
000151EA                            
000151EA                            ; ---------------------------------------------------------------------------
000151EA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000151EA                            ; ---------------------------------------------------------------------------
000151EA                            
000151EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151EA                            
000151EA                            
000151EA                            Sonic_Floor:				; XREF: Obj01_MdAir; Obj01_MdJump
000151EA 3228 0010                  		move.w	$10(a0),d1
000151EE 3428 0012                  		move.w	$12(a0),d2
000151F2 4EB9 0000 2B48             		jsr	(CalcAngle).l
000151F8 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000151FC 0400 0020                  		subi.b	#$20,d0
00015200 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015204 0200 00C0                  		andi.b	#$C0,d0
00015208 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001520C 0C00 0040                  		cmpi.b	#$40,d0
00015210 6700 0000                  		beq.w	loc_13680
00015214 0C00 0080                  		cmpi.b	#$80,d0
00015218 6700 0000                  		beq.w	loc_136E2
0001521C 0C00 00C0                  		cmpi.b	#-$40,d0
00015220 6700 0000                  		beq.w	loc_1373E
00015224 6100 0000                  		bsr.w	Sonic_HitWall
00015228 4A41                       		tst.w	d1
0001522A 6A00                       		bpl.s	loc_135F0
0001522C 9368 0008                  		sub.w	d1,8(a0)
00015230 317C 0000 0010             		move.w	#0,$10(a0)
00015236                            
00015236                            loc_135F0:
00015236 6100 0000                  		bsr.w	sub_14EB4
0001523A 4A41                       		tst.w	d1
0001523C 6A00                       		bpl.s	loc_13602
0001523E D368 0008                  		add.w	d1,8(a0)
00015242 317C 0000 0010             		move.w	#0,$10(a0)
00015248                            
00015248                            loc_13602:
00015248 6100 0000                  		bsr.w	Sonic_HitFloor
0001524C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015250 4A41                       		tst.w	d1
00015252 6A00                       		bpl.s	locret_1367E
00015254 1428 0012                  		move.b	$12(a0),d2
00015258 5002                       		addq.b	#8,d2
0001525A 4402                       		neg.b	d2
0001525C B202                       		cmp.b	d2,d1
0001525E 6C00                       		bge.s	loc_1361E
00015260 B002                       		cmp.b	d2,d0
00015262 6D00                       		blt.s	locret_1367E
00015264                            
00015264                            loc_1361E:
00015264 D368 000C                  		add.w	d1,$C(a0)
00015268 1143 0026                  		move.b	d3,$26(a0)
0001526C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015270 117C 0000 001C             		move.b	#0,$1C(a0)
00015276 1003                       		move.b	d3,d0
00015278 0600 0020                  		addi.b	#$20,d0
0001527C 0200 0040                  		andi.b	#$40,d0
00015280 6600                       		bne.s	loc_1365C
00015282 1003                       		move.b	d3,d0
00015284 0600 0010                  		addi.b	#$10,d0
00015288 0200 0020                  		andi.b	#$20,d0
0001528C 6700                       		beq.s	loc_1364E
0001528E E0E8 0012                  		asr	$12(a0)
00015292 6000                       		bra.s	loc_13670
00015294                            ; ===========================================================================
00015294                            
00015294                            loc_1364E:
00015294 317C 0000 0012             		move.w	#0,$12(a0)
0001529A 3168 0010 0014             		move.w	$10(a0),$14(a0)
000152A0 4E75                       		rts	
000152A2                            ; ===========================================================================
000152A2                            
000152A2                            loc_1365C:
000152A2 317C 0000 0010             		move.w	#0,$10(a0)
000152A8 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000152AE 6F00                       		ble.s	loc_13670
000152B0 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000152B6                            
000152B6                            loc_13670:
000152B6 3168 0012 0014             		move.w	$12(a0),$14(a0)
000152BC 4A03                       		tst.b	d3
000152BE 6A00                       		bpl.s	locret_1367E
000152C0 4468 0014                  		neg.w	$14(a0)
000152C4                            
000152C4                            locret_1367E:
000152C4 4E75                       		rts	
000152C6                            ; ===========================================================================
000152C6                            
000152C6                            loc_13680:
000152C6 6100 0000                  		bsr.w	Sonic_HitWall
000152CA 4A41                       		tst.w	d1
000152CC 6A00                       		bpl.s	loc_1369A
000152CE 9368 0008                  		sub.w	d1,8(a0)
000152D2 317C 0000 0010             		move.w	#0,$10(a0)
000152D8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000152DE 4E75                       		rts	
000152E0                            ; ===========================================================================
000152E0                            
000152E0                            loc_1369A:
000152E0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000152E4 4A41                       		tst.w	d1
000152E6 6A00                       		bpl.s	loc_136B4
000152E8 9368 000C                  		sub.w	d1,$C(a0)
000152EC 4A68 0012                  		tst.w	$12(a0)
000152F0 6A00                       		bpl.s	locret_136B2
000152F2 317C 0000 0012             		move.w	#0,$12(a0)
000152F8                            
000152F8                            locret_136B2:
000152F8 4E75                       		rts	
000152FA                            ; ===========================================================================
000152FA                            
000152FA                            loc_136B4:
000152FA 4A68 0012                  		tst.w	$12(a0)
000152FE 6B00                       		bmi.s	locret_136E0
00015300 6100 0000                  		bsr.w	Sonic_HitFloor
00015304 4A41                       		tst.w	d1
00015306 6A00                       		bpl.s	locret_136E0
00015308 D368 000C                  		add.w	d1,$C(a0)
0001530C 1143 0026                  		move.b	d3,$26(a0)
00015310 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015314 117C 0000 001C             		move.b	#0,$1C(a0)
0001531A 317C 0000 0012             		move.w	#0,$12(a0)
00015320 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015326                            
00015326                            locret_136E0:
00015326 4E75                       		rts	
00015328                            ; ===========================================================================
00015328                            
00015328                            loc_136E2:
00015328 6100 0000                  		bsr.w	Sonic_HitWall
0001532C 4A41                       		tst.w	d1
0001532E 6A00                       		bpl.s	loc_136F4
00015330 9368 0008                  		sub.w	d1,8(a0)
00015334 317C 0000 0010             		move.w	#0,$10(a0)
0001533A                            
0001533A                            loc_136F4:
0001533A 6100 0000                  		bsr.w	sub_14EB4
0001533E 4A41                       		tst.w	d1
00015340 6A00                       		bpl.s	loc_13706
00015342 D368 0008                  		add.w	d1,8(a0)
00015346 317C 0000 0010             		move.w	#0,$10(a0)
0001534C                            
0001534C                            loc_13706:
0001534C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015350 4A41                       		tst.w	d1
00015352 6A00                       		bpl.s	locret_1373C
00015354 9368 000C                  		sub.w	d1,$C(a0)
00015358 1003                       		move.b	d3,d0
0001535A 0600 0020                  		addi.b	#$20,d0
0001535E 0200 0040                  		andi.b	#$40,d0
00015362 6600                       		bne.s	loc_13726
00015364 317C 0000 0012             		move.w	#0,$12(a0)
0001536A 4E75                       		rts	
0001536C                            ; ===========================================================================
0001536C                            
0001536C                            loc_13726:
0001536C 1143 0026                  		move.b	d3,$26(a0)
00015370 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015374 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001537A 4A03                       		tst.b	d3
0001537C 6A00                       		bpl.s	locret_1373C
0001537E 4468 0014                  		neg.w	$14(a0)
00015382                            
00015382                            locret_1373C:
00015382 4E75                       		rts	
00015384                            ; ===========================================================================
00015384                            
00015384                            loc_1373E:
00015384 6100 0000                  		bsr.w	sub_14EB4
00015388 4A41                       		tst.w	d1
0001538A 6A00                       		bpl.s	loc_13758
0001538C D368 0008                  		add.w	d1,8(a0)
00015390 317C 0000 0010             		move.w	#0,$10(a0)
00015396 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001539C 4E75                       		rts	
0001539E                            ; ===========================================================================
0001539E                            
0001539E                            loc_13758:
0001539E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000153A2 4A41                       		tst.w	d1
000153A4 6A00                       		bpl.s	loc_13772
000153A6 9368 000C                  		sub.w	d1,$C(a0)
000153AA 4A68 0012                  		tst.w	$12(a0)
000153AE 6A00                       		bpl.s	locret_13770
000153B0 317C 0000 0012             		move.w	#0,$12(a0)
000153B6                            
000153B6                            locret_13770:
000153B6 4E75                       		rts	
000153B8                            ; ===========================================================================
000153B8                            
000153B8                            loc_13772:
000153B8 4A68 0012                  		tst.w	$12(a0)
000153BC 6B00                       		bmi.s	locret_1379E
000153BE 6100 0000                  		bsr.w	Sonic_HitFloor
000153C2 4A41                       		tst.w	d1
000153C4 6A00                       		bpl.s	locret_1379E
000153C6 D368 000C                  		add.w	d1,$C(a0)
000153CA 1143 0026                  		move.b	d3,$26(a0)
000153CE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000153D2 117C 0000 001C             		move.b	#0,$1C(a0)
000153D8 317C 0000 0012             		move.w	#0,$12(a0)
000153DE 3168 0010 0014             		move.w	$10(a0),$14(a0)
000153E4                            
000153E4                            locret_1379E:
000153E4 4E75                       		rts	
000153E6                            ; End of function Sonic_Floor
000153E6                            
000153E6                            ; ---------------------------------------------------------------------------
000153E6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000153E6                            ; ---------------------------------------------------------------------------
000153E6                            
000153E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153E6                            
000153E6                            
000153E6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000153E6 0828 0004 0022             		btst	#4,$22(a0)
000153EC 6700                       		beq.s	loc_137AE
000153EE 4E71                       		nop	
000153F0 4E71                       		nop	
000153F2 4E71                       		nop	
000153F4                            
000153F4                            loc_137AE:
000153F4 08A8 0005 0022             		bclr	#5,$22(a0)
000153FA 08A8 0001 0022             		bclr	#1,$22(a0)
00015400 08A8 0004 0022             		bclr	#4,$22(a0)
00015406 0828 0002 0022             		btst	#2,$22(a0)
0001540C 6700                       		beq.s	loc_137E4
0001540E 08A8 0002 0022             		bclr	#2,$22(a0)
00015414 117C 0013 0016             		move.b	#$13,$16(a0)
0001541A 117C 0009 0017             		move.b	#9,$17(a0)
00015420 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00015426 5B68 000C                  		subq.w	#5,$C(a0)
0001542A                            
0001542A                            loc_137E4:
0001542A 117C 0000 003C             		move.b	#0,$3C(a0)
00015430 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015436 4E75                       		rts	
00015438                            ; End of function Sonic_ResetOnFloor
00015438                            
00015438                            ; ===========================================================================
00015438                            ; ---------------------------------------------------------------------------
00015438                            ; Sonic	when he	gets hurt
00015438                            ; ---------------------------------------------------------------------------
00015438                            
00015438                            Obj01_Hurt:				; XREF: Obj01_Index
00015438 4EBA 9B66                  		jsr	SpeedToPos
0001543C 0668 0030 0012             		addi.w	#$30,$12(a0)
00015442 0828 0006 0022             		btst	#6,$22(a0)
00015448 6700                       		beq.s	loc_1380C
0001544A 0468 0020 0012             		subi.w	#$20,$12(a0)
00015450                            
00015450                            loc_1380C:
00015450 6100 0000                  		bsr.w	Sonic_HurtStop
00015454 6100 FB84                  		bsr.w	Sonic_LevelBound
00015458 6100 F698                  		bsr.w	Sonic_RecordPos
0001545C 6100 0000                  		bsr.w	Sonic_Animate
00015460 6100 0000                  		bsr.w	LoadSonicDynPLC
00015464 4EFA 9B54                  		jmp	DisplaySprite
00015468                            
00015468                            ; ---------------------------------------------------------------------------
00015468                            ; Subroutine to	stop Sonic falling after he's been hurt
00015468                            ; ---------------------------------------------------------------------------
00015468                            
00015468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015468                            
00015468                            
00015468                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015468 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001546C 0640 00E0                  		addi.w	#$E0,d0
00015470 B068 000C                  		cmp.w	$C(a0),d0
00015474 6500 0000                  		bcs.w	KillSonic
00015478 6100 FD70                  		bsr.w	Sonic_Floor
0001547C 0828 0001 0022             		btst	#1,$22(a0)
00015482 6600                       		bne.s	locret_13860
00015484 7000                       		moveq	#0,d0
00015486 3140 0012                  		move.w	d0,$12(a0)
0001548A 3140 0010                  		move.w	d0,$10(a0)
0001548E 3140 0014                  		move.w	d0,$14(a0)
00015492 117C 0000 001C             		move.b	#0,$1C(a0)
00015498 5528 0024                  		subq.b	#2,$24(a0)
0001549C 317C 0078 0030             		move.w	#$78,$30(a0)
000154A2                            
000154A2                            locret_13860:
000154A2 4E75                       		rts	
000154A4                            ; End of function Sonic_HurtStop
000154A4                            
000154A4                            ; ===========================================================================
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            ; Sonic	when he	dies
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            
000154A4                            Obj01_Death:				; XREF: Obj01_Index
000154A4 6100 0000                  		bsr.w	GameOver
000154A8 4EBA 9AD6                  		jsr	ObjectFall
000154AC 6100 F644                  		bsr.w	Sonic_RecordPos
000154B0 6100 0000                  		bsr.w	Sonic_Animate
000154B4 6100 0000                  		bsr.w	LoadSonicDynPLC
000154B8 4EFA 9B00                  		jmp	DisplaySprite
000154BC                            
000154BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BC                            
000154BC                            
000154BC                            GameOver:				; XREF: Obj01_Death
000154BC 3038 F704                  		move.w	($FFFFF704).w,d0
000154C0 0640 0100                  		addi.w	#$100,d0
000154C4 B068 000C                  		cmp.w	$C(a0),d0
000154C8 6A00 0000                  		bpl.w	locret_13900
000154CC 317C FFC8 0012             		move.w	#-$38,$12(a0)
000154D2 5428 0024                  		addq.b	#2,$24(a0)
000154D6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000154DA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000154DE 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000154E2 6600                       		bne.s	loc_138D4
000154E4 317C 0000 003A             		move.w	#0,$3A(a0)
000154EA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000154F0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000154F6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000154FC 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015500                            
00015500                            loc_138C2:
00015500 303C 008F                  		move.w	#$8F,d0
00015504 4EB9 0000 1010             		jsr	(PlaySound).l	; play game over music
0001550A 7003                       		moveq	#3,d0
0001550C 4EF9 0000 12D0             		jmp	(LoadPLC).l	; load game over patterns
00015512                            ; ===========================================================================
00015512                            
00015512                            loc_138D4:
00015512 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00015518 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001551C 6700                       		beq.s	locret_13900	; if not, branch
0001551E 317C 0000 003A             		move.w	#0,$3A(a0)
00015524 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001552A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015530 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015536 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001553C 60C2                       		bra.s	loc_138C2
0001553E                            ; ===========================================================================
0001553E                            
0001553E                            locret_13900:
0001553E 4E75                       		rts	
00015540                            ; End of function GameOver
00015540                            
00015540                            ; ===========================================================================
00015540                            ; ---------------------------------------------------------------------------
00015540                            ; Sonic	when the level is restarted
00015540                            ; ---------------------------------------------------------------------------
00015540                            
00015540                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015540 4A68 003A                  		tst.w	$3A(a0)
00015544 6700                       		beq.s	locret_13914
00015546 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001554A 6600                       		bne.s	locret_13914
0001554C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015552                            
00015552                            locret_13914:
00015552 4E75                       		rts	
00015554                            
00015554                            ; ---------------------------------------------------------------------------
00015554                            ; Sonic when he's drowning
00015554                            ; ---------------------------------------------------------------------------
00015554                             
00015554                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015554                             
00015554                             
00015554                            Sonic_Drowned:
00015554 6100 9A4A                          bsr.w   SpeedToPos              ; Make Sonic able to move
00015558 0668 0010 0012                     addi.w  #$10,$12(a0)          ; Apply gravity
0001555E 6100 F592                          bsr.w   Sonic_RecordPos    ; Record position
00015562 6100                               bsr.s   Sonic_Animate           ; Animate Sonic
00015564 6100 0000                          bsr.w   LoadSonicDynPLC           ; Load Sonic's DPLCs
00015568 6000 9A50                          bra.w   DisplaySprite           ; And finally, display Sonic
0001556C                            
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            ; Subroutine to	animate	Sonic's sprites
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            
0001556C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556C                            
0001556C                            
0001556C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001556C 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015572 7000                       		moveq	#0,d0
00015574 1028 001C                  		move.b	$1C(a0),d0
00015578 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001557C 6700                       		beq.s	SAnim_Do	; if not, branch
0001557E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015582 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00015588 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001558E                            
0001558E                            SAnim_Do:
0001558E D040                       		add.w	d0,d0
00015590 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015594 1011                       		move.b	(a1),d0
00015596 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00015598 1228 0022                  		move.b	$22(a0),d1
0001559C 0201 0001                  		andi.b	#1,d1
000155A0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000155A6 8328 0001                  		or.b	d1,1(a0)
000155AA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000155AE 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000155B0 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000155B4                            
000155B4                            SAnim_Do2:
000155B4 7200                       		moveq	#0,d1
000155B6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000155BA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000155BE 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000155C0                            
000155C0                            SAnim_Next:
000155C0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000155C4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000155C8                            
000155C8                            SAnim_Delay:
000155C8 4E75                       		rts	
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            SAnim_End_FF:
000155CA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000155CC 6600                       		bne.s	SAnim_End_FE	; if not, branch
000155CE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000155D4 1029 0001                  		move.b	1(a1),d0	; read sprite number
000155D8 60E6                       		bra.s	SAnim_Next
000155DA                            ; ===========================================================================
000155DA                            
000155DA                            SAnim_End_FE:
000155DA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000155DC 6600                       		bne.s	SAnim_End_FD	; if not, branch
000155DE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000155E2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000155E6 9200                       		sub.b	d0,d1
000155E8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000155EC 60D2                       		bra.s	SAnim_Next
000155EE                            ; ===========================================================================
000155EE                            
000155EE                            SAnim_End_FD:
000155EE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000155F0 6600                       		bne.s	SAnim_End	; if not, branch
000155F2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000155F8                            
000155F8                            SAnim_End:
000155F8 4E75                       		rts	
000155FA                            ; ===========================================================================
000155FA                            
000155FA                            SAnim_WalkRun:				; XREF: SAnim_Do
000155FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000155FE 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015600 5200                       		addq.b	#1,d0		; is animation walking/running?
00015602 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00015606 7200                       		moveq	#0,d1
00015608 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001560C 1428 0022                  		move.b	$22(a0),d2
00015610 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015614 6600                       		bne.s	loc_13A70	; if yes, branch
00015616 4600                       		not.b	d0		; reverse angle
00015618                            
00015618                            loc_13A70:
00015618 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001561C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001561E 7203                       		moveq	#3,d1
00015620                            
00015620                            loc_13A78:
00015620 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015626 B302                       		eor.b	d1,d2
00015628 8528 0001                  		or.b	d2,1(a0)
0001562C 0828 0005 0022             		btst	#5,$22(a0)
00015632 6600 0000                  		bne.w	SAnim_Push
00015636 E808                       		lsr.b	#4,d0		; divide angle by $10
00015638 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001563C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015640 6A00                       		bpl.s	loc_13A9C
00015642 4442                       		neg.w	d2
00015644                            
00015644                            loc_13A9C:
00015644 43F9 0000 0000             		lea		(SonAni_Crawl).l,a1 ; use crawling animation
0001564A 4A28 0039                  		tst.b	crawling(a0)
0001564E 6600                       		bne.s	loc_13AB4
00015650 43F9 0000 0000             		lea		(SonAni_Run).l,a1 ; use	running	animation
00015656 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001565A 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001565C 43F9 0000 0000             		lea		(SonAni_Walk).l,a1 ; use walking animation
00015662 1200                       		move.b	d0,d1
00015664 E209                       		lsr.b	#1,d1
00015666 D001                       		add.b	d1,d0
00015668                            
00015668                            loc_13AB4:
00015668 D000                       		add.b	d0,d0
0001566A 1600                       		move.b	d0,d3
0001566C 4442                       		neg.w	d2
0001566E 0642 0800                  		addi.w	#$800,d2
00015672 6A00                       		bpl.s	loc_13AC2
00015674 7400                       		moveq	#0,d2
00015676                            
00015676                            loc_13AC2:
00015676 E04A                       		lsr.w	#8,d2
00015678 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001567C 6100 FF36                  		bsr.w	SAnim_Do2
00015680 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015684 4E75                       		rts	
00015686                            ; ===========================================================================
00015686                            
00015686                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015686 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015688 6600                       		bne.s	SAnim_Push	; if not, branch
0001568A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001568E 6A00                       		bpl.s	loc_13ADE
00015690 4442                       		neg.w	d2
00015692                            
00015692                            loc_13ADE:
00015692                            	;	lea	(SonAni_Roll2).l,a1 ; use fast animation
00015692                            	;	cmpi.w	#$600,d2	; is Sonic moving fast?
00015692                            	;	bcc.s	loc_13AF0	; if yes, branch
00015692                            	;	lea	(SonAni_Roll).l,a1 ; use slower	animation
00015692                            
00015692                            loc_13AF0:
00015692 4442                       		neg.w	d2
00015694 0642 0400                  		addi.w	#$400,d2
00015698 6A00                       		bpl.s	loc_13AFA
0001569A 7400                       		moveq	#0,d2
0001569C                            
0001569C                            loc_13AFA:
0001569C E04A                       		lsr.w	#8,d2
0001569E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000156A2 1228 0022                  		move.b	$22(a0),d1
000156A6 0201 0001                  		andi.b	#1,d1
000156AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000156B0 8328 0001                  		or.b	d1,1(a0)
000156B4 6000 FEFE                  		bra.w	SAnim_Do2
000156B8                            ; ===========================================================================
000156B8                            
000156B8                            SAnim_Push:				; XREF: SAnim_RollJump
000156B8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000156BC 6B00                       		bmi.s	loc_13B1E
000156BE 4442                       		neg.w	d2
000156C0                            
000156C0                            loc_13B1E:
000156C0 0642 0800                  		addi.w	#$800,d2
000156C4 6A00                       		bpl.s	loc_13B26
000156C6 7400                       		moveq	#0,d2
000156C8                            
000156C8                            loc_13B26:
000156C8 EC4A                       		lsr.w	#6,d2
000156CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000156CE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000156D4 1228 0022                  		move.b	$22(a0),d1
000156D8 0201 0001                  		andi.b	#1,d1
000156DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000156E2 8328 0001                  		or.b	d1,1(a0)
000156E6 6000 FECC                  		bra.w	SAnim_Do2
000156EA                            ; End of function Sonic_Animate
000156EA                            
000156EA                            ; ===========================================================================
000156EA                            SonicAniData:
000156EA                            	include "_anim\Sonic.asm"
000156EA                            ; ---------------------------------------------------------------------------
000156EA                            ; Animation script - Sonic
000156EA                            ; ---------------------------------------------------------------------------
000156EA 0000                       		dc.w SonAni_Walk-SonicAniData ;0
000156EC 0000                       		dc.w SonAni_Run-SonicAniData ;1
000156EE 0000                       		dc.w SonAni_Blank-SonicAniData ;2
000156F0 0000                       		dc.w SonAni_Blank-SonicAniData ;3
000156F2 0000                       		dc.w SonAni_Push-SonicAniData ;4
000156F4 0000                       		dc.w SonAni_Wait-SonicAniData ;5
000156F6 0000                       		dc.w SonAni_Balance-SonicAniData ;6
000156F8 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
000156FA 0000                       		dc.w SonAni_Duck-SonicAniData ;8
000156FC 0000                       		dc.w SonAni_Bite-SonicAniData ;9
000156FE 0000                       		dc.w SonAni_Crawl-SonicAniData ;A
00015700 0000                       		dc.w SonAni_Blank-SonicAniData ;B
00015702 0000                       		dc.w SonAni_Blank-SonicAniData ;C
00015704 0000                       		dc.w SonAni_Stop-SonicAniData ;D
00015706 0000                       		dc.w SonAni_Float1-SonicAniData ;E
00015708 0000                       		dc.w SonAni_Float2-SonicAniData ;F
0001570A 0000                       		dc.w SonAni_Spring-SonicAniData ;10
0001570C 0000                       		dc.w SonAni_LZHang-SonicAniData ;11
0001570E 0000                       		dc.w SonAni_Blank-SonicAniData ;12
00015710 0000                       		dc.w SonAni_Blank-SonicAniData ;13
00015712 0000                       		dc.w SonAni_Blank-SonicAniData ;14
00015714 0000                       		dc.w SonAni_Bubble-SonicAniData ;15
00015716 0000                       		dc.w SonAni_Blank-SonicAniData ;16
00015718 0000                       		dc.w SonAni_Drown-SonicAniData ;17
0001571A 0000                       		dc.w SonAni_Death-SonicAniData ;18
0001571C 0000                       		dc.w SonAni_Blank-SonicAniData ;19
0001571E 0000                       		dc.w SonAni_Hurt-SonicAniData ;1A
00015720 0000                       		dc.w SonAni_LZSlide-SonicAniData ;1B
00015722 0000                       		dc.w SonAni_Blank-SonicAniData ;1C
00015724 0000                       		dc.w SonAni_Float3-SonicAniData ;1D
00015726 0000                       		dc.w SonAni_Float4-SonicAniData ;1E
00015728 0000                       		dc.w SonAni_Jump1-SonicAniData ;1F
0001572A 0000                       		dc.w SonAni_Jump2-SonicAniData ;20
0001572C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0 ;Unused
00015730 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015738 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00015740 FD3C 3D3E 3FFF FFFF        SonAni_Push:	dc.b $FD, $3C, $3D, $3E, $3F, $FF, $FF,	$FF
00015748 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001575E 1F34 35FF                  SonAni_Balance:	dc.b $1F, $34, $35, $FF
00015762 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015766 3F33 FF00                  SonAni_Duck:	dc.b $3F, $33, $FF, 0
0001576A 0201 2E2F 30FD 00          SonAni_Bite:	dc.b 2, 1, $2E, $2F, $30, $FD, 0
00015771 FF4A 4B4C 4DFF FFFF        SonAni_Crawl:	dc.b $FF, $4A, $4B, $4C, $4D, $FF, $FF,	$FF
00015779 0731 32FF                  SonAni_Stop:	dc.b 7,	$31, $32, $FF
0001577D 0736 FF                    SonAni_Float1:	dc.b 7,	$36, $FF
00015780 0736 3742 3843 FF00        SonAni_Float2:	dc.b 7,	$36, $37, $42, $38, $43, $FF, 0
00015788 2F39 FD00                  SonAni_Spring:	dc.b $2F, $39, $FD, 0
0001578C 043A 3BFF                  SonAni_LZHang:	dc.b 4,	$3A, $3B, $FF
00015790 0B46 460A 0BFD 0000        SonAni_Bubble:	dc.b $B, $46, $46, $A, $B, $FD,	0, 0
00015798 2F40 FF00                  SonAni_Drown:	dc.b $2F, $40, $FF, 0
0001579C 0341 FF00                  SonAni_Death:	dc.b 3,	$41, $FF, 0
000157A0 0744 45FF                  SonAni_Hurt:	dc.b 7, $44, $45, $FF
000157A4 0744 45FF                  SonAni_LZSlide:	dc.b 7, $44, $45, $FF
000157A8 0336 3742 3843 FF00        SonAni_Float3:	dc.b 3,	$36, $37, $42, $38, $43, $FF, 0
000157B0 0336 FD00                  SonAni_Float4:	dc.b 3,	$36, $FD, 0 ;Unused?
000157B4 0C47 48FE 0100             SonAni_Jump1:	dc.b $C, $47, $48, $FE, 1, 0
000157BA 2F49 FD00                  SonAni_Jump2:	dc.b $2F, $49, $FD, 0
000157BE                            		even
000157BE                            		even
000157BE                            
000157BE                            ; ---------------------------------------------------------------------------
000157BE                            ; Sonic	pattern	loading	subroutine
000157BE                            ; ---------------------------------------------------------------------------
000157BE                            
000157BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157BE                            
000157BE                            
000157BE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000157BE 7000                       		moveq	#0,d0
000157C0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000157C4 B038 F766                  		cmp.b	($FFFFF766).w,d0
000157C8 6700                       		beq.s	locret_13C96
000157CA 11C0 F766                  		move.b	d0,($FFFFF766).w
000157CE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000157D4 D040                       		add.w	d0,d0
000157D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000157DA 7A00                       		moveq	#0,d5
000157DC 1A1A                       		move.b	(a2)+,d5
000157DE 5345                       		subq.w	#1,d5
000157E0 6B00                       		bmi.s	locret_13C96
000157E2 383C F000                  		move.w	#$F000,d4
000157E6 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000157EC                            
000157EC                            SPLC_ReadEntry:
000157EC 7200                       		moveq	#0,d1
000157EE 121A                       		move.b	(a2)+,d1
000157F0 E149                       		lsl.w	#8,d1
000157F2 121A                       		move.b	(a2)+,d1
000157F4 3601                       		move.w	d1,d3
000157F6 E04B                       		lsr.w	#8,d3
000157F8 0243 00F0                  		andi.w	#$F0,d3
000157FC 0643 0010                  		addi.w	#$10,d3
00015800 0241 0FFF                  		andi.w	#$FFF,d1
00015804 EB89                       		lsl.l	#5,d1
00015806 D286                       		add.l	d6,d1
00015808 3404                       		move.w	d4,d2
0001580A D843                       		add.w	d3,d4
0001580C D843                       		add.w	d3,d4
0001580E 4EB9 0000 1106             		jsr	(QueueDMATransfer).l
00015814 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015818                            
00015818                            locret_13C96:
00015818 4E75                       		rts	
0001581A                            ; End of function LoadSonicDynPLC
0001581A                            
0001581A                            ; ===========================================================================
0001581A                            ; ---------------------------------------------------------------------------
0001581A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001581A                            ; ---------------------------------------------------------------------------
0001581A                            
0001581A                            Obj0A:					; XREF: Obj_Index
0001581A 7000                       		moveq	#0,d0
0001581C 1028 0024                  		move.b	$24(a0),d0
00015820 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015824 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015828                            ; ===========================================================================
00015828 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001582C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015830 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015834 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015838 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001583A                            ; ===========================================================================
0001583A                            
0001583A                            Obj0A_Main:				; XREF: Obj0A_Index
0001583A 5428 0024                  		addq.b	#2,$24(a0)
0001583E 217C 0001 437A 0004        		move.l	#Map_obj64,4(a0)
00015846 317C 8348 0002             		move.w	#$8348,2(a0)
0001584C 117C 0084 0001             		move.b	#$84,1(a0)
00015852 117C 0010 0019             		move.b	#$10,$19(a0)
00015858 117C 0001 0018             		move.b	#1,$18(a0)
0001585E 1028 0028                  		move.b	$28(a0),d0
00015862 6A00                       		bpl.s	loc_13D00
00015864 5028 0024                  		addq.b	#8,$24(a0)
00015868 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015870 317C 0440 0002             		move.w	#$440,2(a0)
00015876 0240 007F                  		andi.w	#$7F,d0
0001587A 1140 0033                  		move.b	d0,$33(a0)
0001587E 6000 0000                  		bra.w	Obj0A_Countdown
00015882                            ; ===========================================================================
00015882                            
00015882                            loc_13D00:
00015882 1140 001C                  		move.b	d0,$1C(a0)
00015886 3168 0008 0030             		move.w	8(a0),$30(a0)
0001588C 317C FF78 0012             		move.w	#-$88,$12(a0)
00015892                            
00015892                            Obj0A_Animate:				; XREF: Obj0A_Index
00015892 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015898 4EB9 0000 BEA2             		jsr	AnimateSprite
0001589E                            
0001589E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001589E 3038 F646                  		move.w	($FFFFF646).w,d0
000158A2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000158A6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000158A8 117C 0006 0024             		move.b	#6,$24(a0)
000158AE 5E28 001C                  		addq.b	#7,$1C(a0)
000158B2 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000158B8 6700                       		beq.s	Obj0A_Display
000158BA 6000                       		bra.s	Obj0A_Display
000158BC                            ; ===========================================================================
000158BC                            
000158BC                            Obj0A_Wobble:
000158BC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000158C0 6700                       		beq.s	loc_13D44
000158C2 5868 0030                  		addq.w	#4,$30(a0)
000158C6                            
000158C6                            loc_13D44:
000158C6 1028 0026                  		move.b	$26(a0),d0
000158CA 5228 0026                  		addq.b	#1,$26(a0)
000158CE 0240 007F                  		andi.w	#$7F,d0
000158D2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000158D8 1031 0000                  		move.b	(a1,d0.w),d0
000158DC 4880                       		ext.w	d0
000158DE D068 0030                  		add.w	$30(a0),d0
000158E2 3140 0008                  		move.w	d0,8(a0)
000158E6 6100                       		bsr.s	Obj0A_ShowNumber
000158E8 4EBA 96B6                  		jsr	SpeedToPos
000158EC 4A28 0001                  		tst.b	1(a0)
000158F0 6A00                       		bpl.s	Obj0A_Delete
000158F2 4EFA 96C6                  		jmp	DisplaySprite
000158F6                            ; ===========================================================================
000158F6                            
000158F6                            Obj0A_Delete:
000158F6 4EFA 96FE                  		jmp	DeleteObject
000158FA                            ; ===========================================================================
000158FA                            
000158FA                            Obj0A_Display:				; XREF: Obj0A_Index
000158FA 6100                       		bsr.s	Obj0A_ShowNumber
000158FC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015902 4EB9 0000 BEA2             		jsr	AnimateSprite
00015908 4EFA 96B0                  		jmp	DisplaySprite
0001590C                            ; ===========================================================================
0001590C                            
0001590C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001590C 4EFA 96E8                  		jmp	DeleteObject
00015910                            ; ===========================================================================
00015910                            
00015910                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015910 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015916 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015918 5368 0038                  		subq.w	#1,$38(a0)
0001591C 6600                       		bne.s	Obj0A_Display2
0001591E 117C 000E 0024             		move.b	#$E,$24(a0)
00015924 5E28 001C                  		addq.b	#7,$1C(a0)
00015928 60D0                       		bra.s	Obj0A_Display
0001592A                            ; ===========================================================================
0001592A                            
0001592A                            Obj0A_Display2:
0001592A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015930 4EB9 0000 BEA2             		jsr	AnimateSprite
00015936 4A28 0001                  		tst.b	1(a0)
0001593A 6A00                       		bpl.s	Obj0A_Delete3
0001593C 4EFA 967C                  		jmp	DisplaySprite
00015940                            ; ===========================================================================
00015940                            
00015940                            Obj0A_Delete3:
00015940 4EFA 96B4                  		jmp	DeleteObject
00015944                            ; ===========================================================================
00015944                            
00015944                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015944 4A68 0038                  		tst.w	$38(a0)
00015948 6700                       		beq.s	locret_13E1A
0001594A 5368 0038                  		subq.w	#1,$38(a0)
0001594E 6600                       		bne.s	locret_13E1A
00015950 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015956 6400                       		bcc.s	locret_13E1A
00015958 317C 000F 0038             		move.w	#$F,$38(a0)
0001595E 4268 0012                  		clr.w	$12(a0)
00015962 117C 0080 0001             		move.b	#$80,1(a0)
00015968 3028 0008                  		move.w	8(a0),d0
0001596C 9078 F700                  		sub.w	($FFFFF700).w,d0
00015970 0640 0080                  		addi.w	#$80,d0
00015974 3140 0008                  		move.w	d0,8(a0)
00015978 3028 000C                  		move.w	$C(a0),d0
0001597C 9078 F704                  		sub.w	($FFFFF704).w,d0
00015980 0640 0080                  		addi.w	#$80,d0
00015984 3140 000A                  		move.w	d0,$A(a0)
00015988 117C 000C 0024             		move.b	#$C,$24(a0)
0001598E                            
0001598E                            locret_13E1A:
0001598E 4E75                       		rts	
00015990                            ; ===========================================================================
00015990                            Obj0A_WobbleData:
00015990 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000159A1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000159B2 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000159C3 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000159D3 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000159E0 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000159ED FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000159FA FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015A07 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015A10                            ; ===========================================================================
00015A10                            
00015A10                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015A10 4A68 002C                  		tst.w	$2C(a0)
00015A14 6600 0000                  		bne.w	loc_13F86
00015A18 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015A1E 6400 0000                  		bcc.w	locret_1408C
00015A22 0838 0006 D022             		btst	#6,($FFFFD022).w
00015A28 6700 0000                  		beq.w	locret_1408C
00015A2C 5368 0038                  		subq.w	#1,$38(a0)
00015A30 6A00 0000                  		bpl.w	loc_13FAC
00015A34 317C 003B 0038             		move.w	#59,$38(a0)
00015A3A 317C 0001 0036             		move.w	#1,$36(a0)
00015A40 4EB9 0000 2854             		jsr	(RandomNumber).l
00015A46 0240 0001                  		andi.w	#1,d0
00015A4A 1140 0034                  		move.b	d0,$34(a0)
00015A4E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015A52 0C40 0019                  		cmpi.w	#$19,d0
00015A56 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015A58 0C40 0014                  		cmpi.w	#$14,d0
00015A5C 6700                       		beq.s	Obj0A_WarnSound
00015A5E 0C40 000F                  		cmpi.w	#$F,d0
00015A62 6700                       		beq.s	Obj0A_WarnSound
00015A64 0C40 000C                  		cmpi.w	#$C,d0
00015A68 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015A6A 5328 0032                  		subq.b	#1,$32(a0)
00015A6E 6A00                       		bpl.s	Obj0A_ReduceAir
00015A70 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015A76 08E8 0007 0036             		bset	#7,$36(a0)
00015A7C 6000                       		bra.s	Obj0A_ReduceAir
00015A7E                            ; ===========================================================================
00015A7E                            
00015A7E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015A7E 303C 00C2                  		move.w	#$C2,d0
00015A82 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015A88                            
00015A88                            Obj0A_ReduceAir:
00015A88 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015A8C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015A90 6100 0000                  		bsr.w	StopDrowning
00015A94 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015A9A 303C 00B2                  		move.w	#$B2,d0
00015A9E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play drowning sound
00015AA4 117C 000A 0034             		move.b	#$A,$34(a0)
00015AAA 317C 0001 0036             		move.w	#1,$36(a0)
00015AB0 317C 0078 002C             		move.w	#$78,$2C(a0)
00015AB6 2F08                       		move.l	a0,-(sp)
00015AB8 41F8 D000                  		lea	($FFFFD000).w,a0
00015ABC 6100 F928                  		bsr.w	Sonic_ResetOnFloor
00015AC0 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015AC6 08E8 0001 0022             		bset	#1,$22(a0)
00015ACC 08E8 0007 0002             		bset	#7,2(a0)
00015AD2 317C 0000 0012             		move.w	#0,$12(a0)
00015AD8 317C 0000 0010             		move.w	#0,$10(a0)
00015ADE 317C 0000 0014             		move.w	#0,$14(a0)
00015AE4 117C 000A 0024             		move.b  #$A,$24(a0)       ; Force the character to drown
00015AEA 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015AF0 11FC 0000 FE1E             		move.b  #0,($FFFFFE1E).w      ; Stop the timer immediately
00015AF6 11FC 0001 FFBC             		move.b	#1,($FFFFFFBC).w	; Sonic drowned flag
00015AFC 205F                       		movea.l	(sp)+,a0
00015AFE 4E75                       		rts	
00015B00                            ; ===========================================================================
00015B00                            
00015B00                            loc_13F86:
00015B00 5368 002C                  		subq.w  #1,$2C(a0)
00015B04 6600                       		bne.s   loc_13FAC                       ; Make it jump straight to this location
00015B06 11FC 0006 D024             		move.b  #6,($FFFFD024).w
00015B0C 4E75                       		rts
00015B0E                            ; ===========================================================================
00015B0E                            
00015B0E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015B0E 6000                       		bra.s	Obj0A_MakeItem
00015B10                            ; ===========================================================================
00015B10                            
00015B10                            loc_13FAC:
00015B10 4A68 0036                  		tst.w	$36(a0)
00015B14 6700 0000                  		beq.w	locret_1408C
00015B18 5368 003A                  		subq.w	#1,$3A(a0)
00015B1C 6A00 0000                  		bpl.w	locret_1408C
00015B20                            
00015B20                            Obj0A_MakeItem:
00015B20 4EB9 0000 2854             		jsr	(RandomNumber).l
00015B26 0240 000F                  		andi.w	#$F,d0
00015B2A 3140 003A                  		move.w	d0,$3A(a0)
00015B2E 4EBA 991E                  		jsr	SingleObjLoad
00015B32 6600 0000                  		bne.w	locret_1408C
00015B36 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015B3A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015B40 7006                       		moveq	#6,d0
00015B42 0838 0000 D022             		btst	#0,($FFFFD022).w
00015B48 6700                       		beq.s	loc_13FF2
00015B4A 4440                       		neg.w	d0
00015B4C 137C 0040 0026             		move.b	#$40,$26(a1)
00015B52                            
00015B52                            loc_13FF2:
00015B52 D169 0008                  		add.w	d0,8(a1)
00015B56 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015B5C 137C 0006 0028             		move.b	#6,$28(a1)
00015B62 4A68 002C                  		tst.w	$2C(a0)
00015B66 6700 0000                  		beq.w	loc_1403E
00015B6A 0268 0007 003A             		andi.w	#7,$3A(a0)
00015B70 0668 0000 003A             		addi.w	#0,$3A(a0)
00015B76 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015B7A 0440 000C                  		subi.w	#$C,d0
00015B7E 3340 000C                  		move.w	d0,$C(a1)
00015B82 4EB9 0000 2854             		jsr	(RandomNumber).l
00015B88 1340 0026                  		move.b	d0,$26(a1)
00015B8C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015B90 0200 0003                  		andi.b	#3,d0
00015B94 6600                       		bne.s	loc_14082
00015B96 137C 000E 0028             		move.b	#$E,$28(a1)
00015B9C 6000                       		bra.s	loc_14082
00015B9E                            ; ===========================================================================
00015B9E                            
00015B9E                            loc_1403E:
00015B9E 0828 0007 0036             		btst	#7,$36(a0)
00015BA4 6700                       		beq.s	loc_14082
00015BA6 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015BAA E24A                       		lsr.w	#1,d2
00015BAC 4EB9 0000 2854             		jsr	(RandomNumber).l
00015BB2 0240 0003                  		andi.w	#3,d0
00015BB6 6600                       		bne.s	loc_1406A
00015BB8 08E8 0006 0036             		bset	#6,$36(a0)
00015BBE 6600                       		bne.s	loc_14082
00015BC0 1342 0028                  		move.b	d2,$28(a1)
00015BC4 337C 001C 0038             		move.w	#$1C,$38(a1)
00015BCA                            
00015BCA                            loc_1406A:
00015BCA 4A28 0034                  		tst.b	$34(a0)
00015BCE 6600                       		bne.s	loc_14082
00015BD0 08E8 0006 0036             		bset	#6,$36(a0)
00015BD6 6600                       		bne.s	loc_14082
00015BD8 1342 0028                  		move.b	d2,$28(a1)
00015BDC 337C 001C 0038             		move.w	#$1C,$38(a1)
00015BE2                            
00015BE2                            loc_14082:
00015BE2 5328 0034                  		subq.b	#1,$34(a0)
00015BE6 6A00                       		bpl.s	locret_1408C
00015BE8 4268 0036                  		clr.w	$36(a0)
00015BEC                            
00015BEC                            locret_1408C:
00015BEC 4E75                       		rts	
00015BEE                            
00015BEE                            ; ---------------------------------------------------------------------------
00015BEE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015BEE                            ; ---------------------------------------------------------------------------
00015BEE                            
00015BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BEE                            
00015BEE                            
00015BEE                            StopDrowning:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015BEE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015BF4 4238 D372                  		clr.b	($FFFFD372).w
00015BF8 4E75                       		rts	
00015BFA                            ; End of function StopDrowning
00015BFA                            
00015BFA                            ; ===========================================================================
00015BFA                            Ani_obj0A:
00015BFA                            	include "_anim\obj0A.asm"
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA                            ; Animation script - countdown numbers and bubbles (LZ)
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA 0000                       		dc.w byte_140D6-Ani_obj0A
00015BFC 0000                       		dc.w byte_140E0-Ani_obj0A
00015BFE 0000                       		dc.w byte_140EA-Ani_obj0A
00015C00 0000                       		dc.w byte_140F4-Ani_obj0A
00015C02 0000                       		dc.w byte_140FE-Ani_obj0A
00015C04 0000                       		dc.w byte_14108-Ani_obj0A
00015C06 0000                       		dc.w byte_14112-Ani_obj0A
00015C08 0000                       		dc.w byte_14118-Ani_obj0A
00015C0A 0000                       		dc.w byte_14120-Ani_obj0A
00015C0C 0000                       		dc.w byte_14128-Ani_obj0A
00015C0E 0000                       		dc.w byte_14130-Ani_obj0A
00015C10 0000                       		dc.w byte_14138-Ani_obj0A
00015C12 0000                       		dc.w byte_14140-Ani_obj0A
00015C14 0000                       		dc.w byte_14148-Ani_obj0A
00015C16 0000                       		dc.w byte_1414A-Ani_obj0A
00015C18 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015C22 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015C2C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015C36 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015C40 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015C4A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015C54 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015C5A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015C62 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015C6A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015C72 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015C7A 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015C82 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015C8A 0EFC                       byte_14148:	dc.b $E, $FC
00015C8C 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015C92                            		even
00015C92                            		even
00015C92                            
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            ; Sprite mappings - drowning countdown numbers (LZ)
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            Map_obj0A:
00015C92                            	include "_maps\obj0A.asm"
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            ; Sprite mappings - drowning countdown numbers (LZ)
00015C92                            ; ---------------------------------------------------------------------------
00015C92 0000                       		dc.w byte_14152-Map_obj0A
00015C94 01                         byte_14152:	dc.b 1
00015C95 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015C9A                            		even
00015C9A                            		even
00015C9A                            ; ===========================================================================
00015C9A                            LoadShieldDPLC:
00015C9A 2C3C 0000 0000             		move.l	#Art_Shield,d6
00015CA0 6000                       		bra.s	LoadShieldStarsDPLC
00015CA2                            		
00015CA2                            LoadStarsDPLC:
00015CA2 2C3C 0000 0000             		move.l	#Art_Stars,d6
00015CA8                            
00015CA8                            LoadShieldStarsDPLC:
00015CA8 45F9 0000 0000             		lea	(ShieldStarsDPLC).l,a2
00015CAE 383C A820                  		move.w	#$541*$20,d4
00015CB2 4EF9 0000 0000             		jmp	LoadDPLC
00015CB8                            ; ===========================================================================
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8                            ; Object 38 - shield and invincibility stars
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8                            
00015CB8                            Obj38:					; XREF: Obj_Index
00015CB8 7000                       		moveq	#0,d0
00015CBA 1028 0024                  		move.b	$24(a0),d0
00015CBE 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015CC2 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015CC6                            ; ===========================================================================
00015CC6 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015CC8 0000                       		dc.w Obj38_Shield-Obj38_Index
00015CCA 0000                       		dc.w Obj38_Stars-Obj38_Index
00015CCC                            ; ===========================================================================
00015CCC                            
00015CCC                            Obj38_Main:				; XREF: Obj38_Index
00015CCC 5428 0024                  		addq.b	#2,$24(a0)
00015CD0 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015CD8 117C 0004 0001             		move.b	#4,1(a0)
00015CDE 117C 0001 0018             		move.b	#1,$18(a0)
00015CE4 117C 0010 0019             		move.b	#$10,$19(a0)
00015CEA 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015CF0 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015CF4 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015CF6 4E75                       		rts	
00015CF8                            ; ===========================================================================
00015CF8                            
00015CF8                            Obj38_DoStars:
00015CF8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015CFC 4E75                       		rts	
00015CFE                            ; ===========================================================================
00015CFE                            
00015CFE                            Obj38_Shield:				; XREF: Obj38_Index
00015CFE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015D02 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015D04 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015D08 6700                       		beq.s	Obj38_Delete	; if not, branch
00015D0A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015D10 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015D16 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015D1C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015D22 4EB9 0000 BEA2             		jsr	AnimateSprite
00015D28 4EBA FF70                  		jsr	LoadShieldDPLC
00015D2C 4EFA 928C                  		jmp	DisplaySprite
00015D30                            ; ===========================================================================
00015D30                            
00015D30                            Obj38_RmvShield:
00015D30 4E75                       		rts	
00015D32                            ; ===========================================================================
00015D32                            
00015D32                            Obj38_Delete:
00015D32 4EFA 92C2                  		jmp	DeleteObject
00015D36                            ; ===========================================================================
00015D36                            
00015D36                            Obj38_Stars:				; XREF: Obj38_Index
00015D36 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015D3A 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015D3C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015D40 1228 001C                  		move.b	$1C(a0),d1
00015D44 5301                       		subq.b	#1,d1
00015D46 6000                       		bra.s	Obj38_StarTrail
00015D48                            ; ===========================================================================
00015D48 E909                       		lsl.b	#4,d1
00015D4A 5801                       		addq.b	#4,d1
00015D4C 9001                       		sub.b	d1,d0
00015D4E 1228 0030                  		move.b	$30(a0),d1
00015D52 9001                       		sub.b	d1,d0
00015D54 5801                       		addq.b	#4,d1
00015D56 0201 000F                  		andi.b	#$F,d1
00015D5A 1141 0030                  		move.b	d1,$30(a0)
00015D5E 6000                       		bra.s	Obj38_StarTrail2a
00015D60                            ; ===========================================================================
00015D60                            
00015D60                            Obj38_StarTrail:			; XREF: Obj38_Stars
00015D60 E709                       		lsl.b	#3,d1
00015D62 1401                       		move.b	d1,d2
00015D64 D201                       		add.b	d1,d1
00015D66 D202                       		add.b	d2,d1
00015D68 5801                       		addq.b	#4,d1
00015D6A 9001                       		sub.b	d1,d0
00015D6C 1228 0030                  		move.b	$30(a0),d1
00015D70 9001                       		sub.b	d1,d0
00015D72 5801                       		addq.b	#4,d1
00015D74 0C01 0018                  		cmpi.b	#$18,d1
00015D78 6500                       		bcs.s	Obj38_StarTrail2
00015D7A 7200                       		moveq	#0,d1
00015D7C                            
00015D7C                            Obj38_StarTrail2:
00015D7C 1141 0030                  		move.b	d1,$30(a0)
00015D80                            
00015D80                            Obj38_StarTrail2a:
00015D80 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015D84 43F1 0000                  		lea	(a1,d0.w),a1
00015D88 3159 0008                  		move.w	(a1)+,8(a0)
00015D8C 3159 000C                  		move.w	(a1)+,$C(a0)
00015D90 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015D96 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015D9C 4EB9 0000 BEA2             		jsr	AnimateSprite
00015DA2 4EBA FEFE                  		jsr	LoadStarsDPLC
00015DA6 4EFA 9212                  		jmp	DisplaySprite
00015DAA                            ; ===========================================================================
00015DAA                            
00015DAA                            Obj38_Delete2:				; XREF: Obj38_Stars
00015DAA 4EFA 924A                  		jmp	DeleteObject
00015DAE                            ; ===========================================================================
00015DAE                            	
00015DAE                            ShieldStarsDPLC:
00015DAE                            		include "_inc/obj38_DPLC.asm"
00015DAE                            ; --------------------------------------------------------------------------------
00015DAE                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00015DAE                            
00015DAE                            SME_wct8N:	
00015DAE 0000 0000                  		dc.w SME_wct8N_84-SME_wct8N, SME_wct8N_85-SME_wct8N	
00015DB2 0000 0000                  		dc.w SME_wct8N_8E-SME_wct8N, SME_wct8N_97-SME_wct8N	
00015DB6 0000 0000                  		dc.w SME_wct8N_A0-SME_wct8N, SME_wct8N_A9-SME_wct8N	
00015DBA 0000 0000                  		dc.w SME_wct8N_B2-SME_wct8N, SME_wct8N_BB-SME_wct8N	
00015DBE 0000 0000                  		dc.w SME_wct8N_C4-SME_wct8N, SME_wct8N_C9-SME_wct8N	
00015DC2 0000 0000                  		dc.w SME_wct8N_D2-SME_wct8N, SME_wct8N_D7-SME_wct8N	
00015DC6 0000 0000                  		dc.w SME_wct8N_DE-SME_wct8N, SME_wct8N_E9-SME_wct8N	
00015DCA 0000 0000                  		dc.w SME_wct8N_F6-SME_wct8N, SME_wct8N_FF-SME_wct8N	
00015DCE 0000 0000                  		dc.w SME_wct8N_10A-SME_wct8N, SME_wct8N_113-SME_wct8N	
00015DD2 0000 0000                  		dc.w SME_wct8N_11E-SME_wct8N, SME_wct8N_127-SME_wct8N	
00015DD6 0000 0000                  		dc.w SME_wct8N_12C-SME_wct8N, SME_wct8N_131-SME_wct8N	
00015DDA 0000 0000                  		dc.w SME_wct8N_13A-SME_wct8N, SME_wct8N_13F-SME_wct8N	
00015DDE 0000 0000                  		dc.w SME_wct8N_146-SME_wct8N, SME_wct8N_153-SME_wct8N	
00015DE2 0000 0000                  		dc.w SME_wct8N_160-SME_wct8N, SME_wct8N_169-SME_wct8N	
00015DE6 0000 0000                  		dc.w SME_wct8N_174-SME_wct8N, SME_wct8N_17D-SME_wct8N	
00015DEA 0000 0000                  		dc.w SME_wct8N_188-SME_wct8N, SME_wct8N_18D-SME_wct8N	
00015DEE 0000 0000                  		dc.w SME_wct8N_192-SME_wct8N, SME_wct8N_197-SME_wct8N	
00015DF2 0000 0000                  		dc.w SME_wct8N_19C-SME_wct8N, SME_wct8N_1A5-SME_wct8N	
00015DF6 0000 0000                  		dc.w SME_wct8N_1AE-SME_wct8N, SME_wct8N_1BB-SME_wct8N	
00015DFA 0000 0000                  		dc.w SME_wct8N_1C8-SME_wct8N, SME_wct8N_1CD-SME_wct8N	
00015DFE 0000 0000                  		dc.w SME_wct8N_1D2-SME_wct8N, SME_wct8N_1D7-SME_wct8N	
00015E02 0000 0000                  		dc.w SME_wct8N_1DC-SME_wct8N, SME_wct8N_1E5-SME_wct8N	
00015E06 0000 0000                  		dc.w SME_wct8N_1EC-SME_wct8N, SME_wct8N_1F5-SME_wct8N	
00015E0A 0000 0000                  		dc.w SME_wct8N_1FC-SME_wct8N, SME_wct8N_201-SME_wct8N	
00015E0E 0000 0000                  		dc.w SME_wct8N_20A-SME_wct8N, SME_wct8N_211-SME_wct8N	
00015E12 0000 0000                  		dc.w SME_wct8N_216-SME_wct8N, SME_wct8N_21F-SME_wct8N	
00015E16 0000 0000                  		dc.w SME_wct8N_228-SME_wct8N, SME_wct8N_22F-SME_wct8N	
00015E1A 0000 0000                  		dc.w SME_wct8N_236-SME_wct8N, SME_wct8N_23D-SME_wct8N	
00015E1E 0000 0000                  		dc.w SME_wct8N_240-SME_wct8N, SME_wct8N_247-SME_wct8N	
00015E22 0000 0000                  		dc.w SME_wct8N_24E-SME_wct8N, SME_wct8N_257-SME_wct8N	
00015E26 0000 0000                  		dc.w SME_wct8N_260-SME_wct8N, SME_wct8N_265-SME_wct8N	
00015E2A 0000 0000                  		dc.w SME_wct8N_26C-SME_wct8N, SME_wct8N_271-SME_wct8N	
00015E2E 0000 0000                  		dc.w SME_wct8N_278-SME_wct8N, SME_wct8N_283-SME_wct8N	
00015E32 00                         SME_wct8N_84:	dc.b 0	
00015E33 0480 0080 0980 0080 09     SME_wct8N_85:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00015E3C 0480 1280 1280 1280 12     SME_wct8N_8E:	dc.b 4, $80, $12, $80, $12, $80, $12, $80, $12	
00015E45 0480 0080 0980 0080 09     SME_wct8N_97:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00015E4E 0480 0080 0980 0080 09     SME_wct8N_A0:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00015E57 0480 0080 0980 0080 09     SME_wct8N_A9:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00015E60 0480 1280 1B80 1280 1B     SME_wct8N_B2:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
00015E69 0480 1280 1B80 1280 1B     SME_wct8N_BB:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
00015E72 0250 5280 58               SME_wct8N_C4:	dc.b 2, $50, $52, $80, $58	
00015E77 0450 5250 6150 6710 6D     SME_wct8N_C9:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00015E80 0250 52B0 6F               SME_wct8N_D2:	dc.b 2, $50, $52, $B0, $6F	
00015E85 0370 3030 7B50 7F          SME_wct8N_D7:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00015E8C 0550 8B20 9150 9400 9A53+  SME_wct8N_DE:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00015E97 0650 8510 9B30 9D50 A130+  SME_wct8N_E9:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00015EA4 0450 AC10 B270 B420 BC     SME_wct8N_F6:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00015EAD 0530 C570 C920 D110 D453+  SME_wct8N_FF:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00015EB8 0450 BF10 D670 D820 E0     SME_wct8N_10A:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00015EC1 0550 8510 9B00 9170 E320+  SME_wct8N_113:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00015ECC 0470 EE50 F610 FC50 FE     SME_wct8N_11E:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00015ED5 0270 EEB1 04               SME_wct8N_127:	dc.b 2, $70, $EE, $B1, 4	
00015EDA 0251 1081 16               SME_wct8N_12C:	dc.b 2, $51, $10, $81, $16	
00015EDF 0451 1051 1F11 2551 27     SME_wct8N_131:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00015EE8 0251 10B1 2D               SME_wct8N_13A:	dc.b 2, $51, $10, $B1, $2D	
00015EED 0370 EE01 0481 39          SME_wct8N_13F:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00015EF4 0611 4811 4A81 4C01 5501+  SME_wct8N_146:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00015F01 0651 4221 5711 5A11 5C81+  SME_wct8N_153:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00015F0E 0451 6711 6D81 6F11 78     SME_wct8N_160:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00015F17 0521 8011 8371 8521 8D53+  SME_wct8N_169:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00015F22 0451 7A11 9081 9211 9B     SME_wct8N_174:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00015F2B 0551 4281 9D11 5C11 A603+  SME_wct8N_17D:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00015F36 0251 A8B1 AE               SME_wct8N_188:	dc.b 2, $51, $A8, $B1, $AE	
00015F3B 0250 52B1 BA               SME_wct8N_18D:	dc.b 2, $50, $52, $B1, $BA	
00015F40 0251 A8B1 C6               SME_wct8N_192:	dc.b 2, $51, $A8, $B1, $C6	
00015F45 0250 52B1 D2               SME_wct8N_197:	dc.b 2, $50, $52, $B1, $D2	
00015F4A 0451 DE11 E4B1 E601 F2     SME_wct8N_19C:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00015F53 0451 F311 F9B1 FB03 26     SME_wct8N_1A5:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00015F5C 0612 07B2 0913 9803 9A13+  SME_wct8N_1AE:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00015F69 06B2 1513 2713 A313 C913+  SME_wct8N_1BB:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00015F76 0252 21B2 27               SME_wct8N_1C8:	dc.b 2, $52, $21, $B2, $27	
00015F7B 0251 10B2 33               SME_wct8N_1CD:	dc.b 2, $51, $10, $B2, $33	
00015F80 0252 21B2 3F               SME_wct8N_1D2:	dc.b 2, $52, $21, $B2, $3F	
00015F85 0251 10B2 4B               SME_wct8N_1D7:	dc.b 2, $51, $10, $B2, $4B	
00015F8A 0452 5712 5DB2 5F02 6B     SME_wct8N_1DC:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00015F93 0372 6CB2 7403 DF          SME_wct8N_1E5:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00015F9A 0412 80B2 8202 6B53 D9     SME_wct8N_1EC:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00015FA3 03B2 8E03 D073 D1          SME_wct8N_1F5:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00015FAA 0234 57B4 4B               SME_wct8N_1FC:	dc.b 2, $34, $57, $B4, $4B	
00015FAF 0434 6A74 5B34 6324 67     SME_wct8N_201:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00015FB8 0334 7DB4 6E24 7A          SME_wct8N_20A:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00015FBF 0252 9AB2 A0               SME_wct8N_211:	dc.b 2, $52, $9A, $B2, $A0	
00015FC4 0452 AC72 B212 BA02 BC     SME_wct8N_216:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00015FCD 0412 BD72 BF22 C702 CA     SME_wct8N_21F:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00015FD6 0322 CB22 CEF2 D1          SME_wct8N_228:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00015FDD 03B2 E172 ED00 6F          SME_wct8N_22F:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00015FE4 0372 F532 FD23 01          SME_wct8N_236:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00015FEB 0183 04                    SME_wct8N_23D:	dc.b 1, $83, 4	
00015FEE 0373 0D03 1533 16          SME_wct8N_240:	dc.b 3, $73, $D, 3, $15, $33, $16	
00015FF5 03B3 2913 3503 37          SME_wct8N_247:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00015FFC 04B3 3833 4403 4803 49     SME_wct8N_24E:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00016005 04B3 4A33 5603 5A03 5B     SME_wct8N_257:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
0001600E 0283 5C73 65               SME_wct8N_260:	dc.b 2, $83, $5C, $73, $65	
00016013 0383 6D23 7613 79          SME_wct8N_265:	dc.b 3, $83, $6D, $23, $76, $13, $79	
0001601A 0283 7B73 84               SME_wct8N_26C:	dc.b 2, $83, $7B, $73, $84	
0001601F 0383 6D23 8C13 8F          SME_wct8N_271:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00016026 0573 A613 AE53 B033 B603+  SME_wct8N_278:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00016031 0573 BB13 AE53 C333 B603+  SME_wct8N_283:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
0001603C                            		even
0001603C                            		even
0001603C                            ; ===========================================================================
0001603C                            ; ---------------------------------------------------------------------------
0001603C                            ; Object 4A - special stage entry from beta
0001603C                            ; ---------------------------------------------------------------------------
0001603C                            
0001603C                            Obj4A:					; XREF: Obj_Index
0001603C 7000                       		moveq	#0,d0
0001603E 1028 0024                  		move.b	$24(a0),d0
00016042 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00016046 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001604A                            ; ===========================================================================
0001604A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001604C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001604E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00016050                            ; ===========================================================================
00016050                            
00016050                            Obj4A_Main:				; XREF: Obj4A_Index
00016050 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00016054 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00016056 4E75                       		rts	
00016058                            ; ===========================================================================
00016058                            
00016058                            Obj4A_Main2:
00016058 5428 0024                  		addq.b	#2,$24(a0)
0001605C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00016064 117C 0004 0001             		move.b	#4,1(a0)
0001606A 117C 0001 0018             		move.b	#1,$18(a0)
00016070 117C 0038 0019             		move.b	#$38,$19(a0)
00016076 317C 0541 0002             		move.w	#$541,2(a0)
0001607C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00016082                            
00016082                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00016082 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00016088 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001608E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00016094 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001609A 4EB9 0000 BEA2             		jsr	AnimateSprite
000160A0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000160A6 6600                       		bne.s	Obj4A_Display
000160A8 4A38 D000                  		tst.b	($FFFFD000).w
000160AC 6700                       		beq.s	Obj4A_Display
000160AE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000160B4 303C 00A8                  		move.w	#$A8,d0
000160B8 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000160BE                            
000160BE                            Obj4A_Display:
000160BE 4EFA 8EFA                  		jmp	DisplaySprite
000160C2                            ; ===========================================================================
000160C2                            
000160C2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000160C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000160C6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000160C8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000160CE 4EFA 8F26                  		jmp	DeleteObject
000160D2                            ; ===========================================================================
000160D2                            
000160D2                            Obj4A_Wait:
000160D2 4E75                       		rts	
000160D4                            ; ===========================================================================
000160D4                            ; ---------------------------------------------------------------------------
000160D4                            ; Object 08 - water splash (LZ)
000160D4                            ; ---------------------------------------------------------------------------
000160D4                            
000160D4                            Obj08:					; XREF: Obj_Index
000160D4 7000                       		moveq	#0,d0
000160D6 1028 0024                  		move.b	$24(a0),d0
000160DA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000160DE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000160E2                            ; ===========================================================================
000160E2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000160E4 0000                       		dc.w Obj08_Display-Obj08_Index
000160E6 0000                       		dc.w Obj08_Delete-Obj08_Index
000160E8                            ; ===========================================================================
000160E8                            
000160E8                            Obj08_Main:				; XREF: Obj08_Index
000160E8 5428 0024                  		addq.b	#2,$24(a0)
000160EC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000160F4 0028 0004 0001             		ori.b	#4,1(a0)
000160FA 117C 0001 0018             		move.b	#1,$18(a0)
00016100 117C 0010 0019             		move.b	#$10,$19(a0)
00016106 317C 4259 0002             		move.w	#$4259,2(a0)
0001610C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016112                            
00016112                            Obj08_Display:				; XREF: Obj08_Index
00016112 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016118 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001611E 4EB9 0000 BEA2             		jsr	AnimateSprite
00016124 4EFA 8E94                  		jmp	DisplaySprite
00016128                            ; ===========================================================================
00016128                            
00016128                            Obj08_Delete:				; XREF: Obj08_Index
00016128 4EFA 8ECC                  		jmp	DeleteObject	; delete when animation	is complete
0001612C                            ; ===========================================================================
0001612C                            Ani_obj38:
0001612C                            	include "_anim\obj38.asm"
0001612C                            ; ---------------------------------------------------------------------------
0001612C                            ; Animation script - shield and invincibility stars
0001612C                            ; ---------------------------------------------------------------------------
0001612C 0000                       		dc.w byte_14356-Ani_obj38
0001612E 0000                       		dc.w byte_1435E-Ani_obj38
00016130 0000                       		dc.w byte_14364-Ani_obj38
00016132 0000                       		dc.w byte_1437E-Ani_obj38
00016134 0000                       		dc.w byte_14398-Ani_obj38
00016136 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001613E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016144 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016155 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001615E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001616F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00016178 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00016189 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00016192                            		even
00016192                            		even
00016192                            
00016192                            ; ---------------------------------------------------------------------------
00016192                            ; Sprite mappings - shield and invincibility stars
00016192                            ; ---------------------------------------------------------------------------
00016192                            Map_obj38:
00016192                            	include "_maps\obj38.asm"
00016192                            ; --------------------------------------------------------------------------------
00016192                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016192                            ; --------------------------------------------------------------------------------
00016192                            
00016192                            SME_yYnGN:	
00016192 0000 0000                  		dc.w SME_yYnGN_10-SME_yYnGN, SME_yYnGN_11-SME_yYnGN	
00016196 0000 0000                  		dc.w SME_yYnGN_26-SME_yYnGN, SME_yYnGN_3B-SME_yYnGN	
0001619A 0000 0000                  		dc.w SME_yYnGN_50-SME_yYnGN, SME_yYnGN_65-SME_yYnGN	
0001619E 0000 0000                  		dc.w SME_yYnGN_7A-SME_yYnGN, SME_yYnGN_8F-SME_yYnGN	
000161A2 00                         SME_yYnGN_10:	dc.b 0	
000161A3 04                         SME_yYnGN_11:	dc.b 4	
000161A4 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000161A9 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000161AE 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000161B3 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000161B8 04                         SME_yYnGN_26:	dc.b 4	
000161B9 E80A 0800 E8               		dc.b $E8, $A, 8, 0, $E8	
000161BE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000161C3 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000161C8 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000161CD 04                         SME_yYnGN_3B:	dc.b 4	
000161CE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000161D3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000161D8 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000161DD 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000161E2 04                         SME_yYnGN_50:	dc.b 4	
000161E3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000161E8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000161ED 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000161F2 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000161F7 04                         SME_yYnGN_65:	dc.b 4	
000161F8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000161FD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016202 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016207 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001620C 04                         SME_yYnGN_7A:	dc.b 4	
0001620D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00016212 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00016217 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
0001621C 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016221 04                         SME_yYnGN_8F:	dc.b 4	
00016222 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016227 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001622C 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016231 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
00016236                            		even
00016236                            		even
00016236                            
00016236                            Ani_obj4A:
00016236                            	include "_anim\obj4A.asm"
00016236                            ; ---------------------------------------------------------------------------
00016236                            ; Animation script - special stage entry effect from beta
00016236                            ; ---------------------------------------------------------------------------
00016236 0000                       		dc.w byte_14458-Ani_obj4A
00016238 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001624C                            		even
0001624C                            		even
0001624C                            
0001624C                            ; ---------------------------------------------------------------------------
0001624C                            ; Sprite mappings - special stage entry	from beta
0001624C                            ; ---------------------------------------------------------------------------
0001624C                            Map_obj4A:
0001624C                            	include "_maps\obj4A.asm"
0001624C                            ; ---------------------------------------------------------------------------
0001624C                            ; Sprite mappings - special stage entry	from beta
0001624C                            ; ---------------------------------------------------------------------------
0001624C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00016250 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00016254 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00016258 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001625C 03                         byte_1447C:	dc.b 3
0001625D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00016262 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00016267 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001626C 03                         byte_1448C:	dc.b 3
0001626D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00016272 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00016277 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001627C 05                         byte_1449C:	dc.b 5
0001627D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00016282 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00016287 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001628C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00016291 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00016296 09                         byte_144B6:	dc.b 9
00016297 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001629C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000162A1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000162A6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000162AB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000162B0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000162B5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000162BA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000162BF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000162C4 12                         byte_144E4:	dc.b $12
000162C5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000162CA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000162CF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000162D4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000162D9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000162DE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000162E3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000162E8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000162ED 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000162F2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000162F7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000162FC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00016301 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00016306 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001630B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016310 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00016315 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001631A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001631F 11                         byte_1453F:	dc.b $11
00016320 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00016325 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001632A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001632F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00016334 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00016339 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001633E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00016343 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00016348 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001634D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00016352 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00016357 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001635C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00016361 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00016366 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001636B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00016370 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00016375 09                         byte_14595:	dc.b 9
00016376 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001637B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00016380 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00016385 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001638A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001638F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00016394 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00016399 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001639E 04                         		dc.b 4
0001639F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000163A4                            		even
000163A4                            		even
000163A4                            
000163A4                            Ani_obj08:
000163A4                            	include "_anim\obj08.asm"
000163A4                            ; ---------------------------------------------------------------------------
000163A4                            ; Animation script - water splash (LZ)
000163A4                            ; ---------------------------------------------------------------------------
000163A4 0000                       		dc.w byte_145C6-Ani_obj08
000163A6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000163AC                            		even
000163AC                            		even
000163AC                            
000163AC                            ; ---------------------------------------------------------------------------
000163AC                            ; Sprite mappings - water splash (LZ)
000163AC                            ; ---------------------------------------------------------------------------
000163AC                            Map_obj08:
000163AC                            	include "_maps\obj08.asm"
000163AC                            ; ---------------------------------------------------------------------------
000163AC                            ; Sprite mappings - water splash (LZ)
000163AC                            ; ---------------------------------------------------------------------------
000163AC 0000                       		dc.w byte_145D2-Map_obj08
000163AE 0000                       		dc.w byte_145DD-Map_obj08
000163B0 0000                       		dc.w byte_145E8-Map_obj08
000163B2 02                         byte_145D2:	dc.b 2
000163B3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000163B8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000163BD 02                         byte_145DD:	dc.b 2
000163BE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000163C3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000163C8 01                         byte_145E8:	dc.b 1
000163C9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000163CE                            		even
000163CE                            		even
000163CE                            
000163CE                            
000163CE                            
000163CE                            
000163CE                            
000163CE                            
000163CE                            ; ===========================================================================
000163CE                            ; ---------------------------------------------------------------------------
000163CE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000163CE                            ; ---------------------------------------------------------------------------
000163CE                            
000163CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163CE                            
000163CE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000163CE 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
000163D4 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
000163D8 6700                       		beq.s	SAP_First				; MJ: if not, branch
000163DA 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
000163E0                            
000163E0                            SAP_First:
000163E0 0828 0003 0022             		btst	#3,$22(a0)
000163E6 6700                       		beq.s	loc_14602
000163E8 7000                       		moveq	#0,d0
000163EA 11C0 F768                  		move.b	d0,($FFFFF768).w
000163EE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000163F2 4E75                       		rts	
000163F4                            ; ===========================================================================
000163F4                            
000163F4                            loc_14602:
000163F4 7003                       		moveq	#3,d0
000163F6 11C0 F768                  		move.b	d0,($FFFFF768).w
000163FA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000163FE 1028 0026                  		move.b	$26(a0),d0
00016402 0600 0020                  		addi.b	#$20,d0
00016406 6A00                       		bpl.s	loc_14624
00016408 1028 0026                  		move.b	$26(a0),d0
0001640C 6A00                       		bpl.s	loc_1461E
0001640E 5300                       		subq.b	#1,d0
00016410                            
00016410                            loc_1461E:
00016410 0600 0020                  		addi.b	#$20,d0
00016414 6000                       		bra.s	loc_14630
00016416                            ; ===========================================================================
00016416                            
00016416                            loc_14624:
00016416 1028 0026                  		move.b	$26(a0),d0
0001641A 6A00                       		bpl.s	loc_1462C
0001641C 5200                       		addq.b	#1,d0
0001641E                            
0001641E                            loc_1462C:
0001641E 0600 001F                  		addi.b	#$1F,d0
00016422                            
00016422                            loc_14630:
00016422 0200 00C0                  		andi.b	#$C0,d0
00016426 0C00 0040                  		cmpi.b	#$40,d0
0001642A 6700 0000                  		beq.w	Sonic_WalkVertL
0001642E 0C00 0080                  		cmpi.b	#$80,d0
00016432 6700 0000                  		beq.w	Sonic_WalkCeiling
00016436 0C00 00C0                  		cmpi.b	#$C0,d0
0001643A 6700 0000                  		beq.w	Sonic_WalkVertR
0001643E 3428 000C                  		move.w	$C(a0),d2
00016442 3628 0008                  		move.w	8(a0),d3
00016446 7000                       		moveq	#0,d0
00016448 1028 0016                  		move.b	$16(a0),d0
0001644C 4880                       		ext.w	d0
0001644E D440                       		add.w	d0,d2
00016450 1028 0017                  		move.b	$17(a0),d0
00016454 4880                       		ext.w	d0
00016456 D640                       		add.w	d0,d3
00016458 49F8 F768                  		lea	($FFFFF768).w,a4
0001645C 367C 0010                  		movea.w	#$10,a3
00016460 3C3C 0000                  		move.w	#0,d6
00016464 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016466 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001646A 3F01                       		move.w	d1,-(sp)
0001646C 3428 000C                  		move.w	$C(a0),d2
00016470 3628 0008                  		move.w	8(a0),d3
00016474 7000                       		moveq	#0,d0
00016476 1028 0016                  		move.b	$16(a0),d0
0001647A 4880                       		ext.w	d0
0001647C D440                       		add.w	d0,d2
0001647E 1028 0017                  		move.b	$17(a0),d0
00016482 4880                       		ext.w	d0
00016484 4440                       		neg.w	d0
00016486 D640                       		add.w	d0,d3
00016488 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001648C 367C 0010                  		movea.w	#$10,a3
00016490 3C3C 0000                  		move.w	#0,d6
00016494 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016496 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001649A 301F                       		move.w	(sp)+,d0
0001649C 6100 0000                  		bsr.w	Sonic_Angle
000164A0 4A41                       		tst.w	d1
000164A2 6700                       		beq.s	locret_146BE
000164A4 6A00                       		bpl.s	loc_146C0
000164A6 0C41 FFF2                  		cmpi.w	#-$E,d1
000164AA 6D00                       		blt.s	locret_146E6
000164AC D368 000C                  		add.w	d1,$C(a0)
000164B0                            
000164B0                            locret_146BE:
000164B0 4E75                       		rts	
000164B2                            ; ===========================================================================
000164B2                            
000164B2                            loc_146C0:
000164B2 0C41 000E                  		cmpi.w	#$E,d1
000164B6 6E00                       		bgt.s	loc_146CC
000164B8                            
000164B8                            loc_146C6:
000164B8 D368 000C                  		add.w	d1,$C(a0)
000164BC 4E75                       		rts	
000164BE                            ; ===========================================================================
000164BE                            
000164BE                            loc_146CC:
000164BE 4A28 0038                  		tst.b	$38(a0)
000164C2 66F4                       		bne.s	loc_146C6
000164C4 08E8 0001 0022             		bset	#1,$22(a0)
000164CA 08A8 0005 0022             		bclr	#5,$22(a0)
000164D0 117C 0001 001D             		move.b	#1,$1D(a0)
000164D6 4E75                       		rts	
000164D8                            ; ===========================================================================
000164D8                            
000164D8                            locret_146E6:
000164D8 4E75                       		rts	
000164DA                            ; End of function Sonic_AnglePos
000164DA                            
000164DA                            ; ===========================================================================
000164DA 2428 0008                  		move.l	8(a0),d2
000164DE 3028 0010                  		move.w	$10(a0),d0
000164E2 48C0                       		ext.l	d0
000164E4 E180                       		asl.l	#8,d0
000164E6 9480                       		sub.l	d0,d2
000164E8 2142 0008                  		move.l	d2,8(a0)
000164EC 303C 0038                  		move.w	#$38,d0
000164F0 48C0                       		ext.l	d0
000164F2 E180                       		asl.l	#8,d0
000164F4 9680                       		sub.l	d0,d3
000164F6 2143 000C                  		move.l	d3,$C(a0)
000164FA 4E75                       		rts	
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            locret_1470A:
000164FC 4E75                       		rts	
000164FE                            ; ===========================================================================
000164FE 2628 000C                  		move.l	$C(a0),d3
00016502 3028 0012                  		move.w	$12(a0),d0
00016506 0440 0038                  		subi.w	#$38,d0
0001650A 3140 0012                  		move.w	d0,$12(a0)
0001650E 48C0                       		ext.l	d0
00016510 E180                       		asl.l	#8,d0
00016512 9680                       		sub.l	d0,d3
00016514 2143 000C                  		move.l	d3,$C(a0)
00016518 4E75                       		rts	
0001651A 4E75                       		rts	
0001651C                            ; ===========================================================================
0001651C 2428 0008                  		move.l	8(a0),d2
00016520 2628 000C                  		move.l	$C(a0),d3
00016524 3028 0010                  		move.w	$10(a0),d0
00016528 48C0                       		ext.l	d0
0001652A E180                       		asl.l	#8,d0
0001652C 9480                       		sub.l	d0,d2
0001652E 3028 0012                  		move.w	$12(a0),d0
00016532 48C0                       		ext.l	d0
00016534 E180                       		asl.l	#8,d0
00016536 9680                       		sub.l	d0,d3
00016538 2142 0008                  		move.l	d2,8(a0)
0001653C 2143 000C                  		move.l	d3,$C(a0)
00016540 4E75                       		rts	
00016542                            
00016542                            ; ---------------------------------------------------------------------------
00016542                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016542                            ; ---------------------------------------------------------------------------
00016542                            
00016542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016542                            
00016542                            
00016542                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016542 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016546 B240                       		cmp.w	d0,d1
00016548 6F00                       		ble.s	loc_1475E
0001654A 1438 F768                  		move.b	($FFFFF768).w,d2
0001654E 3200                       		move.w	d0,d1
00016550                            
00016550                            loc_1475E:
00016550 0802 0000                  		btst	#0,d2
00016554 6600                       		bne.s	loc_1476A
00016556 1142 0026                  		move.b	d2,$26(a0)
0001655A 4E75                       		rts	
0001655C                            ; ===========================================================================
0001655C                            
0001655C                            loc_1476A:
0001655C 1428 0026                  		move.b	$26(a0),d2
00016560 0602 0020                  		addi.b	#$20,d2
00016564 0202 00C0                  		andi.b	#$C0,d2
00016568 1142 0026                  		move.b	d2,$26(a0)
0001656C 4E75                       		rts	
0001656E                            ; End of function Sonic_Angle
0001656E                            
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            
0001656E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001656E                            
0001656E                            
0001656E                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001656E 3428 000C                  		move.w	$C(a0),d2
00016572 3628 0008                  		move.w	8(a0),d3
00016576 7000                       		moveq	#0,d0
00016578 1028 0017                  		move.b	$17(a0),d0
0001657C 4880                       		ext.w	d0
0001657E 4440                       		neg.w	d0
00016580 D440                       		add.w	d0,d2
00016582 1028 0016                  		move.b	$16(a0),d0
00016586 4880                       		ext.w	d0
00016588 D640                       		add.w	d0,d3
0001658A 49F8 F768                  		lea	($FFFFF768).w,a4
0001658E 367C 0010                  		movea.w	#$10,a3
00016592 3C3C 0000                  		move.w	#0,d6
00016596 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016598 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001659C 3F01                       		move.w	d1,-(sp)
0001659E 3428 000C                  		move.w	$C(a0),d2
000165A2 3628 0008                  		move.w	8(a0),d3
000165A6 7000                       		moveq	#0,d0
000165A8 1028 0017                  		move.b	$17(a0),d0
000165AC 4880                       		ext.w	d0
000165AE D440                       		add.w	d0,d2
000165B0 1028 0016                  		move.b	$16(a0),d0
000165B4 4880                       		ext.w	d0
000165B6 D640                       		add.w	d0,d3
000165B8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000165BC 367C 0010                  		movea.w	#$10,a3
000165C0 3C3C 0000                  		move.w	#0,d6
000165C4 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000165C6 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000165CA 301F                       		move.w	(sp)+,d0
000165CC 6100 FF74                  		bsr.w	Sonic_Angle
000165D0 4A41                       		tst.w	d1
000165D2 6700                       		beq.s	locret_147F0
000165D4 6A00                       		bpl.s	loc_147F2
000165D6 0C41 FFF2                  		cmpi.w	#-$E,d1
000165DA 6D00 FF20                  		blt.w	locret_1470A
000165DE D368 0008                  		add.w	d1,8(a0)
000165E2                            
000165E2                            locret_147F0:
000165E2 4E75                       		rts	
000165E4                            ; ===========================================================================
000165E4                            
000165E4                            loc_147F2:
000165E4 0C41 000E                  		cmpi.w	#$E,d1
000165E8 6E00                       		bgt.s	loc_147FE
000165EA                            
000165EA                            loc_147F8:
000165EA D368 0008                  		add.w	d1,8(a0)
000165EE 4E75                       		rts	
000165F0                            ; ===========================================================================
000165F0                            
000165F0                            loc_147FE:
000165F0 4A28 0038                  		tst.b	$38(a0)
000165F4 66F4                       		bne.s	loc_147F8
000165F6 08E8 0001 0022             		bset	#1,$22(a0)
000165FC 08A8 0005 0022             		bclr	#5,$22(a0)
00016602 117C 0001 001D             		move.b	#1,$1D(a0)
00016608 4E75                       		rts	
0001660A                            ; End of function Sonic_WalkVertR
0001660A                            
0001660A                            ; ---------------------------------------------------------------------------
0001660A                            ; Subroutine allowing Sonic to walk upside-down
0001660A                            ; ---------------------------------------------------------------------------
0001660A                            
0001660A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001660A                            
0001660A                            
0001660A                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001660A 3428 000C                  		move.w	$C(a0),d2
0001660E 3628 0008                  		move.w	8(a0),d3
00016612 7000                       		moveq	#0,d0
00016614 1028 0016                  		move.b	$16(a0),d0
00016618 4880                       		ext.w	d0
0001661A 9440                       		sub.w	d0,d2
0001661C 0A42 000F                  		eori.w	#$F,d2
00016620 1028 0017                  		move.b	$17(a0),d0
00016624 4880                       		ext.w	d0
00016626 D640                       		add.w	d0,d3
00016628 49F8 F768                  		lea	($FFFFF768).w,a4
0001662C 367C FFF0                  		movea.w	#-$10,a3
00016630 3C3C 0800                  		move.w	#$0800,d6
00016634 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016636 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001663A 3F01                       		move.w	d1,-(sp)
0001663C 3428 000C                  		move.w	$C(a0),d2
00016640 3628 0008                  		move.w	8(a0),d3
00016644 7000                       		moveq	#0,d0
00016646 1028 0016                  		move.b	$16(a0),d0
0001664A 4880                       		ext.w	d0
0001664C 9440                       		sub.w	d0,d2
0001664E 0A42 000F                  		eori.w	#$F,d2
00016652 1028 0017                  		move.b	$17(a0),d0
00016656 4880                       		ext.w	d0
00016658 9640                       		sub.w	d0,d3
0001665A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001665E 367C FFF0                  		movea.w	#-$10,a3
00016662 3C3C 0800                  		move.w	#$0800,d6
00016666 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016668 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001666C 301F                       		move.w	(sp)+,d0
0001666E 6100 FED2                  		bsr.w	Sonic_Angle
00016672 4A41                       		tst.w	d1
00016674 6700                       		beq.s	locret_14892
00016676 6A00                       		bpl.s	loc_14894
00016678 0C41 FFF2                  		cmpi.w	#-$E,d1
0001667C 6D00 FE5A                  		blt.w	locret_146E6
00016680 9368 000C                  		sub.w	d1,$C(a0)
00016684                            
00016684                            locret_14892:
00016684 4E75                       		rts	
00016686                            ; ===========================================================================
00016686                            
00016686                            loc_14894:
00016686 0C41 000E                  		cmpi.w	#$E,d1
0001668A 6E00                       		bgt.s	loc_148A0
0001668C                            
0001668C                            loc_1489A:
0001668C 9368 000C                  		sub.w	d1,$C(a0)
00016690 4E75                       		rts	
00016692                            ; ===========================================================================
00016692                            
00016692                            loc_148A0:
00016692 4A28 0038                  		tst.b	$38(a0)
00016696 66F4                       		bne.s	loc_1489A
00016698 08E8 0001 0022             		bset	#1,$22(a0)
0001669E 08A8 0005 0022             		bclr	#5,$22(a0)
000166A4 117C 0001 001D             		move.b	#1,$1D(a0)
000166AA 4E75                       		rts	
000166AC                            ; End of function Sonic_WalkCeiling
000166AC                            
000166AC                            ; ---------------------------------------------------------------------------
000166AC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000166AC                            ; ---------------------------------------------------------------------------
000166AC                            
000166AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166AC                            
000166AC                            
000166AC                            Sonic_WalkVertL:
000166AC 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
000166B0 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
000166B4 7000                       		moveq	#0,d0					; MJ: clear d0
000166B6 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
000166BA 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000166BC 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
000166BE 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
000166C2 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000166C4 9640                       		sub.w	d0,d3					; MJ: subtract from X position
000166C6 0A43 000F                  		eori.w	#$F,d3
000166CA 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
000166CE 367C FFF0                  		movea.w	#-$10,a3
000166D2 3C3C 0400                  		move.w	#$400,d6
000166D6 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000166D8 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000166DC 3F01                       		move.w	d1,-(sp)
000166DE 3428 000C                  		move.w	$C(a0),d2
000166E2 3628 0008                  		move.w	8(a0),d3
000166E6 7000                       		moveq	#0,d0
000166E8 1028 0017                  		move.b	$17(a0),d0
000166EC 4880                       		ext.w	d0
000166EE D440                       		add.w	d0,d2
000166F0 1028 0016                  		move.b	$16(a0),d0
000166F4 4880                       		ext.w	d0
000166F6 9640                       		sub.w	d0,d3
000166F8 0A43 000F                  		eori.w	#$F,d3
000166FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016700 367C FFF0                  		movea.w	#-$10,a3
00016704 3C3C 0400                  		move.w	#$400,d6
00016708 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001670A 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001670E 301F                       		move.w	(sp)+,d0
00016710 6100 FE30                  		bsr.w	Sonic_Angle
00016714 4A41                       		tst.w	d1
00016716 6700                       		beq.s	locret_14934
00016718 6A00                       		bpl.s	loc_14936
0001671A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001671E 6D00 FDDC                  		blt.w	locret_1470A
00016722 9368 0008                  		sub.w	d1,8(a0)
00016726                            
00016726                            locret_14934:
00016726 4E75                       		rts
00016728                            
00016728                            ; ===========================================================================
00016728                            
00016728                            loc_14936:
00016728 0C41 000E                  		cmpi.w	#$E,d1
0001672C 6E00                       		bgt.s	loc_14942
0001672E                            
0001672E                            loc_1493C:
0001672E 9368 0008                  		sub.w	d1,8(a0)
00016732 4E75                       		rts	
00016734                            
00016734                            ; ===========================================================================
00016734                            
00016734                            loc_14942:
00016734 4A28 0038                  		tst.b	$38(a0)
00016738 66F4                       		bne.s	loc_1493C
0001673A 08E8 0001 0022             		bset	#1,$22(a0)
00016740 08A8 0005 0022             		bclr	#5,$22(a0)
00016746 117C 0001 001D             		move.b	#1,$1D(a0)
0001674C 4E75                       		rts	
0001674E                            ; End of function Sonic_WalkVertL
0001674E                            
0001674E                            ; ---------------------------------------------------------------------------
0001674E                            ; Subroutine to	find which tile	the object is standing on
0001674E                            ; ---------------------------------------------------------------------------
0001674E                            
0001674E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001674E                            
0001674E                            Floor_ChkTile:				; XREF: FindFloor; et al
0001674E 3002                       		move.w	d2,d0					; MJ: load Y position
00016750 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
00016754 D040                       		add.w	d0,d0					; MJ: multiply by 2
00016756 3203                       		move.w	d3,d1					; MJ: load X position
00016758 EE49                       		lsr.w	#7,d1					; MJ: shift to right side
0001675A 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
0001675E D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00016760 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00016762 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
00016766 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
0001676A 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
0001676E EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
00016770 3002                       		move.w	d2,d0					; MJ: load Y position
00016772 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
00016776 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016778 3003                       		move.w	d3,d0					; MJ: load X position
0001677A E648                       		lsr.w	#3,d0					; MJ: divide by 8
0001677C 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
00016780 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016782                            
00016782                            loc_14996:
00016782 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
00016784 4E75                       		rts						; MJ: return
00016786                            ; ===========================================================================
00016786                            
00016786                            loc_1499A:
00016786 0241 007F                  		andi.w	#$7F,d1
0001678A 0828 0006 0001             		btst	#6,1(a0)
00016790 6700                       		beq.s	loc_149B2
00016792 5241                       		addq.w	#1,d1
00016794 0C41 0029                  		cmpi.w	#$29,d1
00016798 6600                       		bne.s	loc_149B2
0001679A 323C 0051                  		move.w	#$51,d1
0001679E                            
0001679E                            loc_149B2:
0001679E EE59                       		ror.w	#7,d1
000167A0 E459                       		ror.w	#2,d1
000167A2 3002                       		move.w	d2,d0
000167A4 D040                       		add.w	d0,d0
000167A6 0240 0070                  		andi.w	#$070,d0
000167AA D240                       		add.w	d0,d1
000167AC 3003                       		move.w	d3,d0
000167AE E648                       		lsr.w	#3,d0
000167B0 0240 000E                  		andi.w	#$0E,d0
000167B4 D240                       		add.w	d0,d1
000167B6 2241                       		movea.l	d1,a1
000167B8 4E75                       		rts
000167BA                            ; End of function Floor_ChkTile
000167BA                            
000167BA                            
000167BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167BA                            
000167BA                            
000167BA                            ColisionChkLayer:
000167BA 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
000167BE 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
000167C0 3800                       		move.w	d0,d4					; MJ: load block ID to d4
000167C2 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
000167C6 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
000167CA E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
000167CC D044                       		add.w	d4,d0					; MJ: add to rest of block ID
000167CE                            
000167CE                            CCL_NoChange:
000167CE 4E75                       		rts						; MJ: return
000167D0                            
000167D0                            
000167D0                            FindFloor:
000167D0 6100 FF7C                  		bsr.w	Floor_ChkTile
000167D4 3011                       		move.w	(a1),d0
000167D6 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
000167D8 3800                       		move.w	d0,d4
000167DA 0240 03FF                  		andi.w	#$3FF,d0
000167DE 6700                       		beq.s	loc_149DE
000167E0 0B04                       		btst	d5,d4
000167E2 6600                       		bne.s	loc_149EC
000167E4                            
000167E4                            loc_149DE:
000167E4 D44B                       		add.w	a3,d2
000167E6 6100 0000                  		bsr.w	FindFloor2
000167EA 944B                       		sub.w	a3,d2
000167EC 0641 0010                  		addi.w	#$10,d1
000167F0 4E75                       		rts	
000167F2                            ; ===========================================================================
000167F2                            
000167F2                            loc_149EC:
000167F2 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
000167F6 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
000167FA 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
000167FE 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00016800 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016806 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
0001680A E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
0001680C 3203                       		move.w	d3,d1					; MJ: load X position
0001680E 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
00016812 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00016814 4641                       		not.w	d1					; MJ: reverse bits of the X position
00016816 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00016818                            
00016818                            loc_14A12:
00016818 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
0001681C 6700                       		beq.s	loc_14A22				; MJ: if not, branch
0001681E 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
00016822 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00016824 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00016828                            
00016828                            loc_14A22:
00016828 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
0001682C D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
0001682E 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00016834 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00016838 4880                       		ext.w	d0					; MJ: clear left byte
0001683A BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
0001683C 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
00016840 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
00016842 4440                       		neg.w	d0					; MJ: reverse solid value
00016844                            
00016844                            loc_14A3E:
00016844 4A40                       		tst.w	d0					; MJ: is the solid data null?
00016846 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00016848 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
0001684A 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
0001684E 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00016850 3202                       		move.w	d2,d1					; MJ: load Y position
00016852 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00016856 D041                       		add.w	d1,d0					; MJ: add to solid value
00016858 323C 000F                  		move.w	#$F,d1					; MJ: set F
0001685C 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
0001685E 4E75                       		rts			; d1 = position?	; MJ: return
00016860                            
00016860                            ; ===========================================================================
00016860                            
00016860                            loc_14A5A:
00016860 3202                       		move.w	d2,d1
00016862 0241 000F                  		andi.w	#$F,d1
00016866 D041                       		add.w	d1,d0
00016868 6A00 FF7A                  		bpl.w	loc_149DE
0001686C                            
0001686C                            loc_14A66:
0001686C 944B                       		sub.w	a3,d2
0001686E 6100 0000                  		bsr.w	FindFloor2
00016872 D44B                       		add.w	a3,d2
00016874 0441 0010                  		subi.w	#$10,d1
00016878 4E75                       		rts	
0001687A                            ; End of function FindFloor
0001687A                            
0001687A                            
0001687A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001687A                            
0001687A                            
0001687A                            FindFloor2:				; XREF: FindFloor
0001687A 6100 FED2                  		bsr.w	Floor_ChkTile
0001687E 3011                       		move.w	(a1),d0
00016880 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016884 3800                       		move.w	d0,d4
00016886 0240 03FF                  		andi.w	#$3FF,d0
0001688A 6700                       		beq.s	loc_14A86
0001688C 0B04                       		btst	d5,d4
0001688E 6600                       		bne.s	loc_14A94
00016890                            
00016890                            loc_14A86:
00016890 323C 000F                  		move.w	#$F,d1
00016894 3002                       		move.w	d2,d0
00016896 0240 000F                  		andi.w	#$F,d0
0001689A 9240                       		sub.w	d0,d1
0001689C 4E75                       		rts	
0001689E                            ; ===========================================================================
0001689E                            
0001689E                            loc_14A94:
0001689E 2478 F796                  		movea.l	($FFFFF796).w,a2
000168A2 1032 0000                  		move.b	(a2,d0.w),d0
000168A6 0240 00FF                  		andi.w	#$FF,d0
000168AA 67E4                       		beq.s	loc_14A86
000168AC 45F9 0000 0000             		lea	(AngleMap).l,a2
000168B2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000168B6 E948                       		lsl.w	#4,d0
000168B8 3203                       		move.w	d3,d1
000168BA 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000168BE 6700                       		beq.s	loc_14ABA
000168C0 4641                       		not.w	d1
000168C2 4414                       		neg.b	(a4)
000168C4                            
000168C4                            loc_14ABA:
000168C4 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000168C8 6700                       		beq.s	loc_14ACA
000168CA 0614 0040                  		addi.b	#$40,(a4)
000168CE 4414                       		neg.b	(a4)
000168D0 0414 0040                  		subi.b	#$40,(a4)
000168D4                            
000168D4                            loc_14ACA:
000168D4 0241 000F                  		andi.w	#$F,d1
000168D8 D240                       		add.w	d0,d1
000168DA 45F9 0000 0000             		lea	(CollArray1).l,a2
000168E0 1032 1000                  		move.b	(a2,d1.w),d0
000168E4 4880                       		ext.w	d0
000168E6 BD44                       		eor.w	d6,d4
000168E8 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000168EC 6700                       		beq.s	loc_14AE6
000168EE 4440                       		neg.w	d0
000168F0                            
000168F0                            loc_14AE6:
000168F0 4A40                       		tst.w	d0
000168F2 679C                       		beq.s	loc_14A86
000168F4 6B00                       		bmi.s	loc_14AFC
000168F6 3202                       		move.w	d2,d1
000168F8 0241 000F                  		andi.w	#$F,d1
000168FC D041                       		add.w	d1,d0
000168FE 323C 000F                  		move.w	#$F,d1
00016902 9240                       		sub.w	d0,d1
00016904 4E75                       		rts	
00016906                            ; ===========================================================================
00016906                            
00016906                            loc_14AFC:
00016906 3202                       		move.w	d2,d1
00016908 0241 000F                  		andi.w	#$F,d1
0001690C D041                       		add.w	d1,d0
0001690E 6A00 FF80                  		bpl.w	loc_14A86
00016912 4641                       		not.w	d1
00016914 4E75                       		rts	
00016916                            ; End of function FindFloor2
00016916                            
00016916                            
00016916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016916                            
00016916                            
00016916                            FindWall:
00016916 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
0001691A 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
0001691C 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016920 3800                       		move.w	d0,d4					; MJ: copy to d4
00016922 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00016926 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00016928 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
0001692A 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
0001692C                            
0001692C                            loc_14B1E:
0001692C D64B                       		add.w	a3,d3					; MJ: add 10 to X position
0001692E 6100 0000                  		bsr.w	FindWall2
00016932 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00016934 0641 0010                  		addi.w	#$10,d1
00016938 4E75                       		rts	
0001693A                            ; ===========================================================================
0001693A                            
0001693A                            loc_14B2C:
0001693A 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
0001693E 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00016942 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00016946 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00016948 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
0001694E 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00016952 E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00016954 3202                       		move.w	d2,d1					; MJ: load Y position
00016956 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
0001695A 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
0001695C 4641                       		not.w	d1
0001695E 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00016962 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016964 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00016968                            
00016968                            loc_14B5A:
00016968 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
0001696C 6700                       		beq.s	loc_14B62				; MJ: if not, branch
0001696E 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016970                            
00016970                            loc_14B62:
00016970 0241 000F                  		andi.w	#$F,d1
00016974 D240                       		add.w	d0,d1
00016976 45F9 0000 0000             		lea	(CollArray2).l,a2
0001697C 1032 1000                  		move.b	(a2,d1.w),d0
00016980 4880                       		ext.w	d0
00016982 BD44                       		eor.w	d6,d4
00016984 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016988 6700                       		beq.s	loc_14B7E
0001698A 4440                       		neg.w	d0
0001698C                            
0001698C                            loc_14B7E:
0001698C 4A40                       		tst.w	d0
0001698E 679C                       		beq.s	loc_14B1E
00016990 6B00                       		bmi.s	loc_14B9A
00016992 0C00 0010                  		cmpi.b	#$10,d0
00016996 6700                       		beq.s	loc_14BA6
00016998 3203                       		move.w	d3,d1
0001699A 0241 000F                  		andi.w	#$F,d1
0001699E D041                       		add.w	d1,d0
000169A0 323C 000F                  		move.w	#$F,d1
000169A4 9240                       		sub.w	d0,d1
000169A6 4E75                       		rts	
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            loc_14B9A:
000169A8 3203                       		move.w	d3,d1
000169AA 0241 000F                  		andi.w	#$F,d1
000169AE D041                       		add.w	d1,d0
000169B0 6A00 FF7A                  		bpl.w	loc_14B1E
000169B4                            
000169B4                            loc_14BA6:
000169B4 964B                       		sub.w	a3,d3
000169B6 6100 0000                  		bsr.w	FindWall2
000169BA D64B                       		add.w	a3,d3
000169BC 0441 0010                  		subi.w	#$10,d1
000169C0 4E75                       		rts	
000169C2                            ; End of function FindWall
000169C2                            
000169C2                            
000169C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169C2                            
000169C2                            
000169C2                            FindWall2:				; XREF: FindWall
000169C2 6100 FD8A                  		bsr.w	Floor_ChkTile
000169C6 3011                       		move.w	(a1),d0
000169C8 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
000169CC 3800                       		move.w	d0,d4
000169CE 0240 03FF                  		andi.w	#$3FF,d0
000169D2 6700                       		beq.s	loc_14BC6
000169D4 0B04                       		btst	d5,d4
000169D6 6600                       		bne.s	loc_14BD4
000169D8                            
000169D8                            loc_14BC6:
000169D8 323C 000F                  		move.w	#$F,d1
000169DC 3003                       		move.w	d3,d0
000169DE 0240 000F                  		andi.w	#$F,d0
000169E2 9240                       		sub.w	d0,d1
000169E4 4E75                       		rts	
000169E6                            ; ===========================================================================
000169E6                            
000169E6                            loc_14BD4:
000169E6 2478 F796                  		movea.l	($FFFFF796).w,a2
000169EA 1032 0000                  		move.b	(a2,d0.w),d0
000169EE 0240 00FF                  		andi.w	#$FF,d0
000169F2 67E4                       		beq.s	loc_14BC6
000169F4 45F9 0000 0000             		lea	(AngleMap).l,a2
000169FA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000169FE E948                       		lsl.w	#4,d0
00016A00 3202                       		move.w	d2,d1
00016A02 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016A06 6700                       		beq.s	loc_14C02
00016A08 4641                       		not.w	d1
00016A0A 0614 0040                  		addi.b	#$40,(a4)
00016A0E 4414                       		neg.b	(a4)
00016A10 0414 0040                  		subi.b	#$40,(a4)
00016A14                            
00016A14                            loc_14C02:
00016A14 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016A18 6700                       		beq.s	loc_14C0A
00016A1A 4414                       		neg.b	(a4)
00016A1C                            
00016A1C                            loc_14C0A:
00016A1C 0241 000F                  		andi.w	#$F,d1
00016A20 D240                       		add.w	d0,d1
00016A22 45F9 0000 0000             		lea	(CollArray2).l,a2
00016A28 1032 1000                  		move.b	(a2,d1.w),d0
00016A2C 4880                       		ext.w	d0
00016A2E BD44                       		eor.w	d6,d4
00016A30 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016A34 6700                       		beq.s	loc_14C26
00016A36 4440                       		neg.w	d0
00016A38                            
00016A38                            loc_14C26:
00016A38 4A40                       		tst.w	d0
00016A3A 679C                       		beq.s	loc_14BC6
00016A3C 6B00                       		bmi.s	loc_14C3C
00016A3E 3203                       		move.w	d3,d1
00016A40 0241 000F                  		andi.w	#$F,d1
00016A44 D041                       		add.w	d1,d0
00016A46 323C 000F                  		move.w	#$F,d1
00016A4A 9240                       		sub.w	d0,d1
00016A4C 4E75                       		rts	
00016A4E                            ; ===========================================================================
00016A4E                            
00016A4E                            loc_14C3C:
00016A4E 3203                       		move.w	d3,d1
00016A50 0241 000F                  		andi.w	#$F,d1
00016A54 D041                       		add.w	d1,d0
00016A56 6A00 FF80                  		bpl.w	loc_14BC6
00016A5A 4641                       		not.w	d1
00016A5C 4E75                       		rts	
00016A5E                            ; End of function FindWall2
00016A5E                            
00016A5E                            ; ---------------------------------------------------------------------------
00016A5E                            ; Unused floor/wall subroutine - logs something	to do with collision
00016A5E                            ; ---------------------------------------------------------------------------
00016A5E                            
00016A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A5E                            
00016A5E                            
00016A5E                            FloorLog_Unk:				; XREF: Level
00016A5E 4E75                       		rts	
00016A60                            
00016A60 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A66 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A6C 363C 00FF                  		move.w	#$FF,d3
00016A70                            
00016A70                            loc_14C5E:
00016A70 7A10                       		moveq	#$10,d5
00016A72 343C 000F                  		move.w	#$F,d2
00016A76                            
00016A76                            loc_14C64:
00016A76 7800                       		moveq	#0,d4
00016A78 323C 000F                  		move.w	#$F,d1
00016A7C                            
00016A7C                            loc_14C6A:
00016A7C 3019                       		move.w	(a1)+,d0
00016A7E EAA8                       		lsr.l	d5,d0
00016A80 D944                       		addx.w	d4,d4
00016A82 51C9 FFF8                  		dbf	d1,loc_14C6A
00016A86                            
00016A86 34C4                       		move.w	d4,(a2)+
00016A88 92FC 0020                  		suba.w	#$20,a1
00016A8C 5345                       		subq.w	#1,d5
00016A8E 51CA FFE6                  		dbf	d2,loc_14C64
00016A92                            
00016A92 D2FC 0020                  		adda.w	#$20,a1
00016A96 51CB FFD8                  		dbf	d3,loc_14C5E
00016A9A                            
00016A9A 43F9 0000 0000             		lea	(CollArray1).l,a1
00016AA0 45F9 0000 0000             		lea	(CollArray2).l,a2
00016AA6 6100                       		bsr.s	FloorLog_Unk2
00016AA8 43F9 0000 0000             		lea	(CollArray1).l,a1
00016AAE 45F9 0000 0000             		lea	(CollArray1).l,a2
00016AB4                            
00016AB4                            ; End of function FloorLog_Unk
00016AB4                            
00016AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AB4                            
00016AB4                            
00016AB4                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016AB4 363C 0FFF                  		move.w	#$FFF,d3
00016AB8                            
00016AB8                            loc_14CA6:
00016AB8 7400                       		moveq	#0,d2
00016ABA 323C 000F                  		move.w	#$F,d1
00016ABE 3019                       		move.w	(a1)+,d0
00016AC0 6700                       		beq.s	loc_14CD4
00016AC2 6B00                       		bmi.s	loc_14CBE
00016AC4                            
00016AC4                            loc_14CB2:
00016AC4 E248                       		lsr.w	#1,d0
00016AC6 6400                       		bcc.s	loc_14CB8
00016AC8 5202                       		addq.b	#1,d2
00016ACA                            
00016ACA                            loc_14CB8:
00016ACA 51C9 FFF8                  		dbf	d1,loc_14CB2
00016ACE                            
00016ACE 6000                       		bra.s	loc_14CD6
00016AD0                            ; ===========================================================================
00016AD0                            
00016AD0                            loc_14CBE:
00016AD0 0C40 FFFF                  		cmpi.w	#-1,d0
00016AD4 6700                       		beq.s	loc_14CD0
00016AD6                            
00016AD6                            loc_14CC4:
00016AD6 E348                       		lsl.w	#1,d0
00016AD8 6400                       		bcc.s	loc_14CCA
00016ADA 5302                       		subq.b	#1,d2
00016ADC                            
00016ADC                            loc_14CCA:
00016ADC 51C9 FFF8                  		dbf	d1,loc_14CC4
00016AE0                            
00016AE0 6000                       		bra.s	loc_14CD6
00016AE2                            ; ===========================================================================
00016AE2                            
00016AE2                            loc_14CD0:
00016AE2 303C 0010                  		move.w	#$10,d0
00016AE6                            
00016AE6                            loc_14CD4:
00016AE6 3400                       		move.w	d0,d2
00016AE8                            
00016AE8                            loc_14CD6:
00016AE8 14C2                       		move.b	d2,(a2)+
00016AEA 51CB FFCC                  		dbf	d3,loc_14CA6
00016AEE                            
00016AEE 4E75                       		rts	
00016AF0                            
00016AF0                            ; End of function FloorLog_Unk2
00016AF0                            
00016AF0                            
00016AF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AF0                            
00016AF0                            
00016AF0                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016AF0 2628 0008                  		move.l	8(a0),d3
00016AF4 2428 000C                  		move.l	$C(a0),d2
00016AF8 3228 0010                  		move.w	$10(a0),d1
00016AFC 48C1                       		ext.l	d1
00016AFE E181                       		asl.l	#8,d1
00016B00 D681                       		add.l	d1,d3
00016B02 3228 0012                  		move.w	$12(a0),d1
00016B06 48C1                       		ext.l	d1
00016B08 E181                       		asl.l	#8,d1
00016B0A D481                       		add.l	d1,d2
00016B0C 4842                       		swap	d2
00016B0E 4843                       		swap	d3
00016B10 11C0 F768                  		move.b	d0,($FFFFF768).w
00016B14 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016B18 1200                       		move.b	d0,d1
00016B1A 0600 0020                  		addi.b	#$20,d0
00016B1E 6A00                       		bpl.s	loc_14D1A
00016B20 1001                       		move.b	d1,d0
00016B22 6A00                       		bpl.s	loc_14D14
00016B24 5300                       		subq.b	#1,d0
00016B26                            
00016B26                            loc_14D14:
00016B26 0600 0020                  		addi.b	#$20,d0
00016B2A 6000                       		bra.s	loc_14D24
00016B2C                            ; ===========================================================================
00016B2C                            
00016B2C                            loc_14D1A:
00016B2C 1001                       		move.b	d1,d0
00016B2E 6A00                       		bpl.s	loc_14D20
00016B30 5200                       		addq.b	#1,d0
00016B32                            
00016B32                            loc_14D20:
00016B32 0600 001F                  		addi.b	#$1F,d0
00016B36                            
00016B36                            loc_14D24:
00016B36 0200 00C0                  		andi.b	#$C0,d0
00016B3A 6700 0000                  		beq.w	loc_14DF0
00016B3E 0C00 0080                  		cmpi.b	#$80,d0
00016B42 6700 0000                  		beq.w	loc_14F7C
00016B46 0201 0038                  		andi.b	#$38,d1
00016B4A 6600                       		bne.s	loc_14D3C
00016B4C 5042                       		addq.w	#8,d2
00016B4E                            
00016B4E                            loc_14D3C:
00016B4E 0C00 0040                  		cmpi.b	#$40,d0
00016B52 6700 0000                  		beq.w	loc_1504A
00016B56 6000 0000                  		bra.w	loc_14EBC
00016B5A                            
00016B5A                            ; End of function Sonic_WalkSpeed
00016B5A                            
00016B5A                            
00016B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B5A                            
00016B5A                            
00016B5A                            sub_14D48:				; XREF: Sonic_Jump
00016B5A 11C0 F768                  		move.b	d0,($FFFFF768).w
00016B5E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016B62 0600 0020                  		addi.b	#$20,d0
00016B66 0200 00C0                  		andi.b	#$C0,d0
00016B6A 0C00 0040                  		cmpi.b	#$40,d0
00016B6E 6700 0000                  		beq.w	loc_14FD6
00016B72 0C00 0080                  		cmpi.b	#$80,d0
00016B76 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016B7A 0C00 00C0                  		cmpi.b	#$C0,d0
00016B7E 6700 0000                  		beq.w	sub_14E50
00016B82                            
00016B82                            ; End of function sub_14D48
00016B82                            
00016B82                            ; ---------------------------------------------------------------------------
00016B82                            ; Subroutine to	make Sonic land	on the floor after jumping
00016B82                            ; ---------------------------------------------------------------------------
00016B82                            
00016B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B82                            
00016B82                            
00016B82                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016B82 3428 000C                  		move.w	$C(a0),d2
00016B86 3628 0008                  		move.w	8(a0),d3
00016B8A 7000                       		moveq	#0,d0
00016B8C 1028 0016                  		move.b	$16(a0),d0
00016B90 4880                       		ext.w	d0
00016B92 D440                       		add.w	d0,d2
00016B94 1028 0017                  		move.b	$17(a0),d0
00016B98 4880                       		ext.w	d0
00016B9A D640                       		add.w	d0,d3
00016B9C 49F8 F768                  		lea	($FFFFF768).w,a4
00016BA0 367C 0010                  		movea.w	#$10,a3
00016BA4 3C3C 0000                  		move.w	#0,d6
00016BA8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016BAA 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00016BAE 3F01                       		move.w	d1,-(sp)
00016BB0 3428 000C                  		move.w	$C(a0),d2
00016BB4 3628 0008                  		move.w	8(a0),d3
00016BB8 7000                       		moveq	#0,d0
00016BBA 1028 0016                  		move.b	$16(a0),d0
00016BBE 4880                       		ext.w	d0
00016BC0 D440                       		add.w	d0,d2
00016BC2 1028 0017                  		move.b	$17(a0),d0
00016BC6 4880                       		ext.w	d0
00016BC8 9640                       		sub.w	d0,d3
00016BCA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016BCE 367C 0010                  		movea.w	#$10,a3
00016BD2 3C3C 0000                  		move.w	#0,d6
00016BD6 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016BD8 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00016BDC 301F                       		move.w	(sp)+,d0
00016BDE 143C 0000                  		move.b	#0,d2
00016BE2                            
00016BE2                            loc_14DD0:
00016BE2 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016BE6 B240                       		cmp.w	d0,d1
00016BE8 6F00                       		ble.s	loc_14DDE
00016BEA 1638 F768                  		move.b	($FFFFF768).w,d3
00016BEE C141                       		exg	d0,d1
00016BF0                            
00016BF0                            loc_14DDE:
00016BF0 0803 0000                  		btst	#0,d3
00016BF4 6700                       		beq.s	locret_14DE6
00016BF6 1602                       		move.b	d2,d3
00016BF8                            
00016BF8                            locret_14DE6:
00016BF8 4E75                       		rts	
00016BFA                            
00016BFA                            ; End of function Sonic_HitFloor
00016BFA                            
00016BFA                            ; ===========================================================================
00016BFA 3428 000C                  		move.w	$C(a0),d2
00016BFE 3628 0008                  		move.w	8(a0),d3
00016C02                            
00016C02                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016C02 0642 000A                  		addi.w	#$A,d2
00016C06 49F8 F768                  		lea	($FFFFF768).w,a4
00016C0A 367C 0010                  		movea.w	#$10,a3
00016C0E 3C3C 0000                  		move.w	#0,d6
00016C12 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016C14 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00016C18 143C 0000                  		move.b	#0,d2
00016C1C                            
00016C1C                            loc_14E0A:				; XREF: sub_14EB4
00016C1C 1638 F768                  		move.b	($FFFFF768).w,d3
00016C20 0803 0000                  		btst	#0,d3
00016C24 6700                       		beq.s	locret_14E16
00016C26 1602                       		move.b	d2,d3
00016C28                            
00016C28                            locret_14E16:
00016C28 4E75                       		rts	
00016C2A                            
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A                            ; Subroutine allowing objects to interact with the floor
00016C2A                            ; ---------------------------------------------------------------------------
00016C2A                            
00016C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C2A                            
00016C2A                            
00016C2A                            ObjHitFloor:
00016C2A 3628 0008                  		move.w	8(a0),d3
00016C2E                            
00016C2E                            ; End of function ObjHitFloor
00016C2E                            
00016C2E                            
00016C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C2E                            
00016C2E                            
00016C2E                            ObjHitFloor2:
00016C2E 3428 000C                  		move.w	$C(a0),d2
00016C32 7000                       		moveq	#0,d0
00016C34 1028 0016                  		move.b	$16(a0),d0
00016C38 4880                       		ext.w	d0
00016C3A D440                       		add.w	d0,d2
00016C3C 49F8 F768                  		lea	($FFFFF768).w,a4
00016C40 18BC 0000                  		move.b	#0,(a4)
00016C44 367C 0010                  		movea.w	#$10,a3
00016C48 3C3C 0000                  		move.w	#0,d6
00016C4C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016C4E 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00016C52 1638 F768                  		move.b	($FFFFF768).w,d3
00016C56 0803 0000                  		btst	#0,d3
00016C5A 6700                       		beq.s	locret_14E4E
00016C5C 163C 0000                  		move.b	#0,d3
00016C60                            
00016C60                            locret_14E4E:
00016C60 4E75                       		rts	
00016C62                            ; End of function ObjHitFloor2
00016C62                            
00016C62                            
00016C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C62                            
00016C62                            
00016C62                            sub_14E50:				; XREF: sub_14D48
00016C62 3428 000C                  		move.w	$C(a0),d2
00016C66 3628 0008                  		move.w	8(a0),d3
00016C6A 7000                       		moveq	#0,d0
00016C6C 1028 0017                  		move.b	$17(a0),d0
00016C70 4880                       		ext.w	d0
00016C72 9440                       		sub.w	d0,d2
00016C74 1028 0016                  		move.b	$16(a0),d0
00016C78 4880                       		ext.w	d0
00016C7A D640                       		add.w	d0,d3
00016C7C 49F8 F768                  		lea	($FFFFF768).w,a4
00016C80 367C 0010                  		movea.w	#$10,a3
00016C84 3C3C 0000                  		move.w	#0,d6
00016C88 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016C8A 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00016C8E 3F01                       		move.w	d1,-(sp)
00016C90 3428 000C                  		move.w	$C(a0),d2
00016C94 3628 0008                  		move.w	8(a0),d3
00016C98 7000                       		moveq	#0,d0
00016C9A 1028 0017                  		move.b	$17(a0),d0
00016C9E 4880                       		ext.w	d0
00016CA0 D440                       		add.w	d0,d2
00016CA2 1028 0016                  		move.b	$16(a0),d0
00016CA6 4880                       		ext.w	d0
00016CA8 D640                       		add.w	d0,d3
00016CAA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016CAE 367C 0010                  		movea.w	#$10,a3
00016CB2 3C3C 0000                  		move.w	#0,d6
00016CB6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016CB8 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00016CBC 301F                       		move.w	(sp)+,d0
00016CBE 143C 00C0                  		move.b	#-$40,d2
00016CC2 6000 FF1E                  		bra.w	loc_14DD0
00016CC6                            
00016CC6                            ; End of function sub_14E50
00016CC6                            
00016CC6                            
00016CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CC6                            
00016CC6                            
00016CC6                            sub_14EB4:				; XREF: Sonic_Floor
00016CC6 3428 000C                  		move.w	$C(a0),d2
00016CCA 3628 0008                  		move.w	8(a0),d3
00016CCE                            
00016CCE                            loc_14EBC:
00016CCE 0643 000A                  		addi.w	#$A,d3
00016CD2 49F8 F768                  		lea	($FFFFF768).w,a4
00016CD6 367C 0010                  		movea.w	#$10,a3
00016CDA 3C3C 0000                  		move.w	#0,d6
00016CDE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016CE0 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00016CE4 143C 00C0                  		move.b	#-$40,d2
00016CE8 6000 FF32                  		bra.w	loc_14E0A
00016CEC                            
00016CEC                            ; End of function sub_14EB4
00016CEC                            
00016CEC                            ; ---------------------------------------------------------------------------
00016CEC                            ; Subroutine to	detect when an object hits a wall to its right
00016CEC                            ; ---------------------------------------------------------------------------
00016CEC                            
00016CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CEC                            
00016CEC                            
00016CEC                            ObjHitWallRight:
00016CEC D668 0008                  		add.w	8(a0),d3
00016CF0 3428 000C                  		move.w	$C(a0),d2
00016CF4 49F8 F768                  		lea	($FFFFF768).w,a4
00016CF8 18BC 0000                  		move.b	#0,(a4)
00016CFC 367C 0010                  		movea.w	#$10,a3
00016D00 3C3C 0000                  		move.w	#0,d6
00016D04 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016D06 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00016D0A 1638 F768                  		move.b	($FFFFF768).w,d3
00016D0E 0803 0000                  		btst	#0,d3
00016D12 6700                       		beq.s	locret_14F06
00016D14 163C 00C0                  		move.b	#-$40,d3
00016D18                            
00016D18                            locret_14F06:
00016D18 4E75                       		rts	
00016D1A                            
00016D1A                            ; End of function ObjHitWallRight
00016D1A                            
00016D1A                            ; ---------------------------------------------------------------------------
00016D1A                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016D1A                            ; touches them
00016D1A                            ; ---------------------------------------------------------------------------
00016D1A                            
00016D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D1A                            
00016D1A                            
00016D1A                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016D1A 3428 000C                  		move.w	$C(a0),d2
00016D1E 3628 0008                  		move.w	8(a0),d3
00016D22 7000                       		moveq	#0,d0
00016D24 1028 0016                  		move.b	$16(a0),d0
00016D28 4880                       		ext.w	d0
00016D2A 9440                       		sub.w	d0,d2
00016D2C 0A42 000F                  		eori.w	#$F,d2
00016D30 1028 0017                  		move.b	$17(a0),d0
00016D34 4880                       		ext.w	d0
00016D36 D640                       		add.w	d0,d3
00016D38 49F8 F768                  		lea	($FFFFF768).w,a4
00016D3C 367C FFF0                  		movea.w	#-$10,a3
00016D40 3C3C 0800                  		move.w	#$0800,d6
00016D44 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016D46 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
00016D4A 3F01                       		move.w	d1,-(sp)
00016D4C 3428 000C                  		move.w	$C(a0),d2
00016D50 3628 0008                  		move.w	8(a0),d3
00016D54 7000                       		moveq	#0,d0
00016D56 1028 0016                  		move.b	$16(a0),d0
00016D5A 4880                       		ext.w	d0
00016D5C 9440                       		sub.w	d0,d2
00016D5E 0A42 000F                  		eori.w	#$F,d2
00016D62 1028 0017                  		move.b	$17(a0),d0
00016D66 4880                       		ext.w	d0
00016D68 9640                       		sub.w	d0,d3
00016D6A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016D6E 367C FFF0                  		movea.w	#-$10,a3
00016D72 3C3C 0800                  		move.w	#$0800,d6
00016D76 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016D78 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00016D7C 301F                       		move.w	(sp)+,d0
00016D7E 143C 0080                  		move.b	#-$80,d2
00016D82 6000 FE5E                  		bra.w	loc_14DD0
00016D86                            ; End of function Sonic_DontRunOnWalls
00016D86                            
00016D86                            ; ===========================================================================
00016D86 3428 000C                  		move.w	$C(a0),d2
00016D8A 3628 0008                  		move.w	8(a0),d3
00016D8E                            
00016D8E                            loc_14F7C:
00016D8E 0442 000A                  		subi.w	#$A,d2
00016D92 0A42 000F                  		eori.w	#$F,d2
00016D96 49F8 F768                  		lea	($FFFFF768).w,a4
00016D9A 367C FFF0                  		movea.w	#-$10,a3
00016D9E 3C3C 0800                  		move.w	#$0800,d6
00016DA2 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016DA4 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00016DA8 143C 0080                  		move.b	#-$80,d2
00016DAC 6000 FE6E                  		bra.w	loc_14E0A
00016DB0                            
00016DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DB0                            
00016DB0                            
00016DB0                            ObjHitCeiling:
00016DB0 3428 000C                  		move.w	$C(a0),d2
00016DB4 3628 0008                  		move.w	8(a0),d3
00016DB8 7000                       		moveq	#0,d0
00016DBA 1028 0016                  		move.b	$16(a0),d0
00016DBE 4880                       		ext.w	d0
00016DC0 9440                       		sub.w	d0,d2
00016DC2 0A42 000F                  		eori.w	#$F,d2
00016DC6 49F8 F768                  		lea	($FFFFF768).w,a4
00016DCA 367C FFF0                  		movea.w	#-$10,a3
00016DCE 3C3C 0800                  		move.w	#$0800,d6
00016DD2 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016DD4 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
00016DD8 1638 F768                  		move.b	($FFFFF768).w,d3
00016DDC 0803 0000                  		btst	#0,d3
00016DE0 6700                       		beq.s	locret_14FD4
00016DE2 163C 0080                  		move.b	#-$80,d3
00016DE6                            
00016DE6                            locret_14FD4:
00016DE6 4E75                       		rts	
00016DE8                            ; End of function ObjHitCeiling
00016DE8                            
00016DE8                            ; ===========================================================================
00016DE8                            
00016DE8                            loc_14FD6:				; XREF: sub_14D48
00016DE8 3428 000C                  		move.w	$C(a0),d2
00016DEC 3628 0008                  		move.w	8(a0),d3
00016DF0 7000                       		moveq	#0,d0
00016DF2 1028 0017                  		move.b	$17(a0),d0
00016DF6 4880                       		ext.w	d0
00016DF8 9440                       		sub.w	d0,d2
00016DFA 1028 0016                  		move.b	$16(a0),d0
00016DFE 4880                       		ext.w	d0
00016E00 9640                       		sub.w	d0,d3
00016E02 0A43 000F                  		eori.w	#$F,d3
00016E06 49F8 F768                  		lea	($FFFFF768).w,a4
00016E0A 367C FFF0                  		movea.w	#-$10,a3
00016E0E 3C3C 0400                  		move.w	#$400,d6
00016E12 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E14 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
00016E18 3F01                       		move.w	d1,-(sp)
00016E1A 3428 000C                  		move.w	$C(a0),d2
00016E1E 3628 0008                  		move.w	8(a0),d3
00016E22 7000                       		moveq	#0,d0
00016E24 1028 0017                  		move.b	$17(a0),d0
00016E28 4880                       		ext.w	d0
00016E2A D440                       		add.w	d0,d2
00016E2C 1028 0016                  		move.b	$16(a0),d0
00016E30 4880                       		ext.w	d0
00016E32 9640                       		sub.w	d0,d3
00016E34 0A43 000F                  		eori.w	#$F,d3
00016E38 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E3C 367C FFF0                  		movea.w	#-$10,a3
00016E40 3C3C 0400                  		move.w	#$400,d6
00016E44 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E46 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00016E4A 301F                       		move.w	(sp)+,d0
00016E4C 143C 0040                  		move.b	#$40,d2
00016E50 6000 FD90                  		bra.w	loc_14DD0
00016E54                            
00016E54                            ; ---------------------------------------------------------------------------
00016E54                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016E54                            ; ---------------------------------------------------------------------------
00016E54                            
00016E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E54                            
00016E54                            
00016E54                            Sonic_HitWall:				; XREF: Sonic_Floor
00016E54 3428 000C                  		move.w	$C(a0),d2
00016E58 3628 0008                  		move.w	8(a0),d3
00016E5C                            
00016E5C                            loc_1504A:
00016E5C 0443 000A                  		subi.w	#$A,d3
00016E60 0A43 000F                  		eori.w	#$F,d3
00016E64 49F8 F768                  		lea	($FFFFF768).w,a4
00016E68 367C FFF0                  		movea.w	#-$10,a3
00016E6C 3C3C 0400                  		move.w	#$400,d6
00016E70 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E72 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
00016E76 143C 0040                  		move.b	#$40,d2
00016E7A 6000 FDA0                  		bra.w	loc_14E0A
00016E7E                            ; End of function Sonic_HitWall
00016E7E                            
00016E7E                            ; ---------------------------------------------------------------------------
00016E7E                            ; Subroutine to	detect when an object hits a wall to its left
00016E7E                            ; ---------------------------------------------------------------------------
00016E7E                            
00016E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E7E                            
00016E7E                            
00016E7E                            ObjHitWallLeft:
00016E7E D668 0008                  		add.w	8(a0),d3
00016E82 3428 000C                  		move.w	$C(a0),d2
00016E86 49F8 F768                  		lea	($FFFFF768).w,a4
00016E8A 18BC 0000                  		move.b	#0,(a4)
00016E8E 367C FFF0                  		movea.w	#-$10,a3
00016E92 3C3C 0400                  		move.w	#$400,d6
00016E96 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E98 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00016E9C 1638 F768                  		move.b	($FFFFF768).w,d3
00016EA0 0803 0000                  		btst	#0,d3
00016EA4 6700                       		beq.s	locret_15098
00016EA6 163C 0040                  		move.b	#$40,d3
00016EAA                            
00016EAA                            locret_15098:
00016EAA 4E75                       		rts	
00016EAC                            ; End of function ObjHitWallLeft
00016EAC                            
00016EAC                            ; ===========================================================================
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            
00016EAC                            ; ===========================================================================
00016EAC                            ; ---------------------------------------------------------------------------
00016EAC                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016EAC                            ; ---------------------------------------------------------------------------
00016EAC                            
00016EAC                            Obj66:					; XREF: Obj_Index
00016EAC 7000                       		moveq	#0,d0
00016EAE 1028 0024                  		move.b	$24(a0),d0
00016EB2 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016EB6 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016EBA                            ; ===========================================================================
00016EBA 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016EBC 0000                       		dc.w Obj66_Action-Obj66_Index
00016EBE 0000                       		dc.w Obj66_Display-Obj66_Index
00016EC0 0000                       		dc.w Obj66_Release-Obj66_Index
00016EC2                            ; ===========================================================================
00016EC2                            
00016EC2                            Obj66_Main:				; XREF: Obj66_Index
00016EC2 5428 0024                  		addq.b	#2,$24(a0)
00016EC6 323C 0001                  		move.w	#1,d1
00016ECA 2248                       		movea.l	a0,a1
00016ECC 6000                       		bra.s	Obj66_MakeItem
00016ECE                            ; ===========================================================================
00016ECE                            
00016ECE                            Obj66_Loop:
00016ECE 6100 857E                  		bsr.w	SingleObjLoad
00016ED2 6600                       		bne.s	loc_150FE
00016ED4 12BC 0066                  		move.b	#$66,0(a1)
00016ED8 5829 0024                  		addq.b	#4,$24(a1)
00016EDC 3368 0008 0008             		move.w	8(a0),8(a1)
00016EE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016EE8 137C 0003 0018             		move.b	#3,$18(a1)
00016EEE 137C 0010 001A             		move.b	#$10,$1A(a1)
00016EF4                            
00016EF4                            Obj66_MakeItem:				; XREF: Obj66_Main
00016EF4 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016EFC 337C 4348 0002             		move.w	#$4348,2(a1)
00016F02 0029 0004 0001             		ori.b	#4,1(a1)
00016F08 137C 0038 0019             		move.b	#$38,$19(a1)
00016F0E                            
00016F0E                            loc_150FE:
00016F0E 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016F12                            
00016F12 117C 0030 0019             		move.b	#$30,$19(a0)
00016F18 117C 0004 0018             		move.b	#4,$18(a0)
00016F1E 317C 003C 0030             		move.w	#$3C,$30(a0)
00016F24 117C 0001 0034             		move.b	#1,$34(a0)
00016F2A 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016F30                            
00016F30                            Obj66_Action:				; XREF: Obj66_Index
00016F30 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016F34 4A28 0001                  		tst.b	1(a0)
00016F38 6A00 0000                  		bpl.w	Obj66_Display
00016F3C 323C 0030                  		move.w	#$30,d1
00016F40 3401                       		move.w	d1,d2
00016F42 3602                       		move.w	d2,d3
00016F44 5243                       		addq.w	#1,d3
00016F46 3828 0008                  		move.w	8(a0),d4
00016F4A 6100 A450                  		bsr.w	SolidObject
00016F4E 0828 0005 0022             		btst	#5,$22(a0)
00016F54 6700 0000                  		beq.w	Obj66_Display
00016F58 43F8 D000                  		lea	($FFFFD000).w,a1
00016F5C 720E                       		moveq	#$E,d1
00016F5E 3029 0008                  		move.w	8(a1),d0
00016F62 B068 0008                  		cmp.w	8(a0),d0
00016F66 6500                       		bcs.s	Obj66_GrabSonic
00016F68 7207                       		moveq	#7,d1
00016F6A                            
00016F6A                            Obj66_GrabSonic:
00016F6A B228 001A                  		cmp.b	$1A(a0),d1
00016F6E 6600                       		bne.s	Obj66_Display
00016F70 1141 0032                  		move.b	d1,$32(a0)
00016F74 5828 0024                  		addq.b	#4,$24(a0)
00016F78 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016F7E 137C 0015 001C             		move.b	#$15,$1C(a1)	; make Sonic use "bubble" animation
00016F84 337C 0800 0014             		move.w	#$800,$14(a1)
00016F8A 337C 0000 0010             		move.w	#0,$10(a1)
00016F90 337C 0000 0012             		move.w	#0,$12(a1)
00016F96 08A8 0005 0022             		bclr	#5,$22(a0)
00016F9C 08A9 0005 0022             		bclr	#5,$22(a1)
00016FA2 08E9 0001 0022             		bset	#1,$22(a1)
00016FA8 3429 0008                  		move.w	8(a1),d2
00016FAC 3629 000C                  		move.w	$C(a1),d3
00016FB0 6100 0000                  		bsr.w	Obj66_ChgPos
00016FB4 D569 0008                  		add.w	d2,8(a1)
00016FB8 D769 000C                  		add.w	d3,$C(a1)
00016FBC E0E9 0008                  		asr	8(a1)
00016FC0 E0E9 000C                  		asr	$C(a1)
00016FC4                            
00016FC4                            Obj66_Display:				; XREF: Obj66_Index
00016FC4 6000 A0AE                  		bra.w	MarkObjGone
00016FC8                            ; ===========================================================================
00016FC8                            
00016FC8                            Obj66_Release:				; XREF: Obj66_Index
00016FC8 1028 001A                  		move.b	$1A(a0),d0
00016FCC 0C00 0004                  		cmpi.b	#4,d0
00016FD0 6700                       		beq.s	loc_151C8
00016FD2 0C00 0007                  		cmpi.b	#7,d0
00016FD6 6600                       		bne.s	loc_151F8
00016FD8                            
00016FD8                            loc_151C8:
00016FD8 B028 0032                  		cmp.b	$32(a0),d0
00016FDC 6700                       		beq.s	loc_151F8
00016FDE 43F8 D000                  		lea	($FFFFD000).w,a1
00016FE2 337C 0000 0010             		move.w	#0,$10(a1)
00016FE8 337C 0800 0012             		move.w	#$800,$12(a1)
00016FEE 0C00 0004                  		cmpi.b	#4,d0
00016FF2 6700                       		beq.s	loc_151F0
00016FF4 337C 0800 0010             		move.w	#$800,$10(a1)
00016FFA 337C 0800 0012             		move.w	#$800,$12(a1)
00017000                            
00017000                            loc_151F0:
00017000 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017004 5928 0024                  		subq.b	#4,$24(a0)
00017008                            
00017008                            loc_151F8:
00017008 6100                       		bsr.s	Obj66_ChkSwitch
0001700A 6100                       		bsr.s	Obj66_ChgPos
0001700C 6000 A066                  		bra.w	MarkObjGone
00017010                            
00017010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017010                            
00017010                            
00017010                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017010 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017014 7000                       		moveq	#0,d0
00017016 1028 0038                  		move.b	$38(a0),d0
0001701A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017020 6700                       		beq.s	loc_15224	; if not, branch
00017022 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00017026 6600                       		bne.s	Obj66_Animate	; if yes, branch
00017028 4428 0034                  		neg.b	$34(a0)
0001702C 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017032 6000                       		bra.s	Obj66_Animate
00017034                            ; ===========================================================================
00017034                            
00017034                            loc_15224:
00017034 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00017038                            
00017038                            Obj66_Animate:
00017038 5328 001E                  		subq.b	#1,$1E(a0)
0001703C 6A00                       		bpl.s	locret_15246
0001703E 117C 0007 001E             		move.b	#7,$1E(a0)
00017044 1228 0034                  		move.b	$34(a0),d1
00017048 1028 001A                  		move.b	$1A(a0),d0
0001704C D001                       		add.b	d1,d0
0001704E 0200 000F                  		andi.b	#$F,d0
00017052 1140 001A                  		move.b	d0,$1A(a0)
00017056                            
00017056                            locret_15246:
00017056 4E75                       		rts	
00017058                            ; End of function Obj66_ChkSwitch
00017058                            
00017058                            
00017058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017058                            
00017058                            
00017058                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00017058 43F8 D000                  		lea	($FFFFD000).w,a1
0001705C 7000                       		moveq	#0,d0
0001705E 1028 001A                  		move.b	$1A(a0),d0
00017062 D040                       		add.w	d0,d0
00017064 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00017068 101A                       		move.b	(a2)+,d0
0001706A 4880                       		ext.w	d0
0001706C D068 0008                  		add.w	8(a0),d0
00017070 3340 0008                  		move.w	d0,8(a1)
00017074 101A                       		move.b	(a2)+,d0
00017076 4880                       		ext.w	d0
00017078 D068 000C                  		add.w	$C(a0),d0
0001707C 3340 000C                  		move.w	d0,$C(a1)
00017080 4E75                       		rts	
00017082                            ; End of function Obj66_ChgPos
00017082                            
00017082                            ; ===========================================================================
00017082 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00017086 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001708A 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001708E 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017092 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00017096 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001709A 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001709E E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000170A2                            ; ---------------------------------------------------------------------------
000170A2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000170A2                            ; ---------------------------------------------------------------------------
000170A2                            Map_obj66:
000170A2                            	include "_maps\obj66.asm"
000170A2                            ; ---------------------------------------------------------------------------
000170A2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000170A2                            ; ---------------------------------------------------------------------------
000170A2 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000170A6 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000170AA 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000170AE 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000170B2 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000170B6 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000170BA 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000170BE 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000170C2 0000                       		dc.w byte_154A4-Map_obj66
000170C4 06                         byte_152B4:	dc.b 6
000170C5 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000170CA 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000170CF E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000170D4 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000170D9 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000170DE 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000170E3 06                         byte_152D3:	dc.b 6
000170E4 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000170E9 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000170EE F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000170F3 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000170F8 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000170FD 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017102 06                         byte_152F2:	dc.b 6
00017103 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00017108 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001710D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017112 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00017117 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001711C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017121 06                         byte_15311:	dc.b 6
00017122 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00017127 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001712C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017131 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00017136 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001713B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017140 06                         byte_15330:	dc.b 6
00017141 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00017146 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001714B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017150 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00017155 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001715A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001715F 06                         byte_1534F:	dc.b 6
00017160 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00017165 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001716A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001716F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00017174 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00017179 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001717E 06                         byte_1536E:	dc.b 6
0001717F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017184 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017189 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001718E 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017193 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017198 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001719D 06                         byte_1538D:	dc.b 6
0001719E 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000171A3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000171A8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000171AD F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000171B2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000171B7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000171BC 06                         byte_153AC:	dc.b 6
000171BD E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000171C2 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000171C7 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000171CC E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000171D1 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000171D6 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000171DB 06                         byte_153CB:	dc.b 6
000171DC D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000171E1 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000171E6 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000171EB DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000171F0 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000171F5 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000171FA 06                         byte_153EA:	dc.b 6
000171FB D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017200 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017205 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001720A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001720F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017214 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00017219 06                         byte_15409:	dc.b 6
0001721A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001721F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017224 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00017229 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001722E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017233 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00017238 06                         byte_15428:	dc.b 6
00017239 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001723E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017243 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00017248 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001724D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017252 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00017257 06                         byte_15447:	dc.b 6
00017258 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001725D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017262 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00017267 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001726C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017271 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00017276 06                         byte_15466:	dc.b 6
00017277 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001727C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017281 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00017286 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001728B E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017290 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017295 06                         byte_15485:	dc.b 6
00017296 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001729B D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000172A0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000172A5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000172AA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000172AF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000172B4 0C                         byte_154A4:	dc.b $C
000172B5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000172BA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000172BF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000172C4 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000172C9 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000172CE E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000172D3 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000172D8 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000172DD 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000172E2 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000172E7 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000172EC 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000172F2 00                         		even
000172F2 00                         		even
000172F2                            
000172F2                            ; ===========================================================================
000172F2                            ; ---------------------------------------------------------------------------
000172F2                            ; Object 67 - disc that	you run	around (SBZ)
000172F2                            ; ---------------------------------------------------------------------------
000172F2                            
000172F2                            Obj67:					; XREF: Obj_Index
000172F2 7000                       		moveq	#0,d0
000172F4 1028 0024                  		move.b	$24(a0),d0
000172F8 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000172FC 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017300                            ; ===========================================================================
00017300 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017302 0000                       		dc.w Obj67_Action-Obj67_Index
00017304                            ; ===========================================================================
00017304                            
00017304                            Obj67_Main:				; XREF: Obj67_Index
00017304 5428 0024                  		addq.b	#2,$24(a0)
00017308 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017310 317C C344 0002             		move.w	#$C344,2(a0)
00017316 117C 0004 0001             		move.b	#4,1(a0)
0001731C 117C 0004 0018             		move.b	#4,$18(a0)
00017322 117C 0008 0019             		move.b	#8,$19(a0)
00017328 3168 0008 0032             		move.w	8(a0),$32(a0)
0001732E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017334 117C 0018 0034             		move.b	#$18,$34(a0)
0001733A 117C 0048 0038             		move.b	#$48,$38(a0)
00017340 1228 0028                  		move.b	$28(a0),d1	; get object type
00017344 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017348 6700                       		beq.s	loc_15546
0001734A 117C 0010 0034             		move.b	#$10,$34(a0)
00017350 117C 0038 0038             		move.b	#$38,$38(a0)
00017356                            
00017356                            loc_15546:
00017356 1228 0028                  		move.b	$28(a0),d1	; get object type
0001735A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001735E 4881                       		ext.w	d1
00017360 E741                       		asl.w	#3,d1
00017362 3141 0036                  		move.w	d1,$36(a0)
00017366 1028 0022                  		move.b	$22(a0),d0
0001736A E418                       		ror.b	#2,d0
0001736C 0200 00C0                  		andi.b	#-$40,d0
00017370 1140 0026                  		move.b	d0,$26(a0)
00017374                            
00017374                            Obj67_Action:				; XREF: Obj67_Index
00017374 6100 0000                  		bsr.w	Obj67_MoveSonic
00017378 6100 0000                  		bsr.w	Obj67_MoveSpot
0001737C 6000 0000                  		bra.w	Obj67_ChkDel
00017380                            ; ===========================================================================
00017380                            
00017380                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017380 7400                       		moveq	#0,d2
00017382 1428 0038                  		move.b	$38(a0),d2
00017386 3602                       		move.w	d2,d3
00017388 D643                       		add.w	d3,d3
0001738A 43F8 D000                  		lea	($FFFFD000).w,a1
0001738E 3029 0008                  		move.w	8(a1),d0
00017392 9068 0032                  		sub.w	$32(a0),d0
00017396 D042                       		add.w	d2,d0
00017398 B043                       		cmp.w	d3,d0
0001739A 6400                       		bcc.s	loc_155A8
0001739C 3229 000C                  		move.w	$C(a1),d1
000173A0 9268 0030                  		sub.w	$30(a0),d1
000173A4 D242                       		add.w	d2,d1
000173A6 B243                       		cmp.w	d3,d1
000173A8 6400                       		bcc.s	loc_155A8
000173AA 0829 0001 0022             		btst	#1,$22(a1)
000173B0 6700                       		beq.s	loc_155B8
000173B2 4228 003A                  		clr.b	$3A(a0)
000173B6 4E75                       		rts	
000173B8                            ; ===========================================================================
000173B8                            
000173B8                            loc_155A8:
000173B8 4A28 003A                  		tst.b	$3A(a0)
000173BC 6700                       		beq.s	locret_155B6
000173BE 4229 0038                  		clr.b	$38(a1)
000173C2 4228 003A                  		clr.b	$3A(a0)
000173C6                            
000173C6                            locret_155B6:
000173C6 4E75                       		rts	
000173C8                            ; ===========================================================================
000173C8                            
000173C8                            loc_155B8:
000173C8 4A28 003A                  		tst.b	$3A(a0)
000173CC 6600                       		bne.s	loc_155E2
000173CE 117C 0001 003A             		move.b	#1,$3A(a0)
000173D4 0829 0002 0022             		btst	#2,$22(a1)
000173DA 6600                       		bne.s	loc_155D0
000173DC 4229 001C                  		clr.b	$1C(a1)
000173E0                            
000173E0                            loc_155D0:
000173E0 08A9 0005 0022             		bclr	#5,$22(a1)
000173E6 137C 0001 001D             		move.b	#1,$1D(a1)
000173EC 137C 0001 0038             		move.b	#1,$38(a1)
000173F2                            
000173F2                            loc_155E2:
000173F2 3029 0014                  		move.w	$14(a1),d0
000173F6 4A68 0036                  		tst.w	$36(a0)
000173FA 6A00                       		bpl.s	loc_15608
000173FC 0C40 FC00                  		cmpi.w	#-$400,d0
00017400 6F00                       		ble.s	loc_155FA
00017402 337C FC00 0014             		move.w	#-$400,$14(a1)
00017408 4E75                       		rts	
0001740A                            ; ===========================================================================
0001740A                            
0001740A                            loc_155FA:
0001740A 0C40 F100                  		cmpi.w	#-$F00,d0
0001740E 6C00                       		bge.s	locret_15606
00017410 337C F100 0014             		move.w	#-$F00,$14(a1)
00017416                            
00017416                            locret_15606:
00017416 4E75                       		rts	
00017418                            ; ===========================================================================
00017418                            
00017418                            loc_15608:
00017418 0C40 0400                  		cmpi.w	#$400,d0
0001741C 6C00                       		bge.s	loc_15616
0001741E 337C 0400 0014             		move.w	#$400,$14(a1)
00017424 4E75                       		rts	
00017426                            ; ===========================================================================
00017426                            
00017426                            loc_15616:
00017426 0C40 0F00                  		cmpi.w	#$F00,d0
0001742A 6F00                       		ble.s	locret_15622
0001742C 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017432                            
00017432                            locret_15622:
00017432 4E75                       		rts	
00017434                            ; ===========================================================================
00017434                            
00017434                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017434 3028 0036                  		move.w	$36(a0),d0
00017438 D168 0026                  		add.w	d0,$26(a0)
0001743C 1028 0026                  		move.b	$26(a0),d0
00017440 4EB9 0000 287A             		jsr	(CalcSine).l
00017446 3428 0030                  		move.w	$30(a0),d2
0001744A 3628 0032                  		move.w	$32(a0),d3
0001744E 7800                       		moveq	#0,d4
00017450 1828 0034                  		move.b	$34(a0),d4
00017454 E14C                       		lsl.w	#8,d4
00017456 2A04                       		move.l	d4,d5
00017458 C9C0                       		muls.w	d0,d4
0001745A 4844                       		swap	d4
0001745C CBC1                       		muls.w	d1,d5
0001745E 4845                       		swap	d5
00017460 D842                       		add.w	d2,d4
00017462 DA43                       		add.w	d3,d5
00017464 3144 000C                  		move.w	d4,$C(a0)
00017468 3145 0008                  		move.w	d5,8(a0)
0001746C 4E75                       		rts	
0001746E                            ; ===========================================================================
0001746E                            
0001746E                            Obj67_ChkDel:				; XREF: Obj67_Action
0001746E 3028 0032                  		move.w	$32(a0),d0
00017472 0240 FF80                  		andi.w	#-$80,d0
00017476 3238 F700                  		move.w	($FFFFF700).w,d1
0001747A 0441 0080                  		subi.w	#$80,d1
0001747E 0241 FF80                  		andi.w	#-$80,d1
00017482 9041                       		sub.w	d1,d0
00017484 0C40 0280                  		cmpi.w	#$280,d0
00017488 6200                       		bhi.s	Obj67_Delete
0001748A 4EF9 0000 EFBA             		jmp	DisplaySprite
00017490                            ; ===========================================================================
00017490                            
00017490                            Obj67_Delete:
00017490 4EF9 0000 EFF6             		jmp	DeleteObject
00017496                            ; ===========================================================================
00017496                            ; ---------------------------------------------------------------------------
00017496                            ; Sprite mappings - disc that you run around (SBZ)
00017496                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017496                            ; part of the level tiles.)
00017496                            ; ---------------------------------------------------------------------------
00017496                            Map_obj67:
00017496                            	include "_maps\obj67.asm"
00017496                            ; ---------------------------------------------------------------------------
00017496                            ; Sprite mappings - disc that you run around (SBZ)
00017496                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017496                            ; part of the level tiles.)
00017496                            ; ---------------------------------------------------------------------------
00017496 0000                       		dc.w byte_15688-Map_obj67
00017498 01                         byte_15688:	dc.b 1
00017499 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001749E                            		even
0001749E                            		even
0001749E                            
0001749E                            ; ===========================================================================
0001749E                            ; ---------------------------------------------------------------------------
0001749E                            ; Object 68 - conveyor belts (SBZ)
0001749E                            ; ---------------------------------------------------------------------------
0001749E                            
0001749E                            Obj68:					; XREF: Obj_Index
0001749E 7000                       		moveq	#0,d0
000174A0 1028 0024                  		move.b	$24(a0),d0
000174A4 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000174A8 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000174AC                            ; ===========================================================================
000174AC 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000174AE 0000                       		dc.w Obj68_Action-Obj68_Index
000174B0                            ; ===========================================================================
000174B0                            
000174B0                            Obj68_Main:				; XREF: Obj68_Index
000174B0 5428 0024                  		addq.b	#2,$24(a0)
000174B4 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000174BA 1228 0028                  		move.b	$28(a0),d1	; get object type
000174BE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000174C2 6700                       		beq.s	loc_156BA	; if zero, branch
000174C4 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000174CA                            
000174CA                            loc_156BA:
000174CA 1228 0028                  		move.b	$28(a0),d1	; get object type
000174CE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000174D2 4881                       		ext.w	d1
000174D4 E841                       		asr.w	#4,d1
000174D6 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000174DA                            
000174DA                            Obj68_Action:				; XREF: Obj68_Index
000174DA 6100                       		bsr.s	Obj68_MoveSonic
000174DC 3028 0008                  		move.w	8(a0),d0
000174E0 0240 FF80                  		andi.w	#$FF80,d0
000174E4 3238 F700                  		move.w	($FFFFF700).w,d1
000174E8 0441 0080                  		subi.w	#$80,d1
000174EC 0241 FF80                  		andi.w	#$FF80,d1
000174F0 9041                       		sub.w	d1,d0
000174F2 0C40 0280                  		cmpi.w	#$280,d0
000174F6 6200                       		bhi.s	Obj68_Delete
000174F8 4E75                       		rts	
000174FA                            ; ===========================================================================
000174FA                            
000174FA                            Obj68_Delete:
000174FA 4EF9 0000 EFF6             		jmp	DeleteObject
00017500                            ; ===========================================================================
00017500                            
00017500                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017500 7400                       		moveq	#0,d2
00017502 1428 0038                  		move.b	$38(a0),d2
00017506 3602                       		move.w	d2,d3
00017508 D643                       		add.w	d3,d3
0001750A 43F8 D000                  		lea	($FFFFD000).w,a1
0001750E 3029 0008                  		move.w	8(a1),d0
00017512 9068 0008                  		sub.w	8(a0),d0
00017516 D042                       		add.w	d2,d0
00017518 B043                       		cmp.w	d3,d0
0001751A 6400                       		bcc.s	locret_1572E
0001751C 3229 000C                  		move.w	$C(a1),d1
00017520 9268 000C                  		sub.w	$C(a0),d1
00017524 0641 0030                  		addi.w	#$30,d1
00017528 0C41 0030                  		cmpi.w	#$30,d1
0001752C 6400                       		bcc.s	locret_1572E
0001752E 0829 0001 0022             		btst	#1,$22(a1)
00017534 6600                       		bne.s	locret_1572E
00017536 3028 0036                  		move.w	$36(a0),d0
0001753A D169 0008                  		add.w	d0,8(a1)
0001753E                            
0001753E                            locret_1572E:
0001753E 4E75                       		rts	
00017540                            
00017540                            ; ===========================================================================
00017540                            ; ---------------------------------------------------------------------------
00017540                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017540                            ; ---------------------------------------------------------------------------
00017540                            
00017540                            Obj69:					; XREF: Obj_Index
00017540 7000                       		moveq	#0,d0
00017542 1028 0024                  		move.b	$24(a0),d0
00017546 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001754A 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001754E                            ; ===========================================================================
0001754E 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017550 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017552 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017554                            ; ===========================================================================
00017554                            
00017554                            Obj69_Main:				; XREF: Obj69_Index
00017554 5428 0024                  		addq.b	#2,$24(a0)
00017558 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017560 317C 4492 0002             		move.w	#$4492,2(a0)
00017566 0028 0004 0001             		ori.b	#4,1(a0)
0001756C 117C 0080 0019             		move.b	#$80,$19(a0)
00017572 7000                       		moveq	#0,d0
00017574 1028 0028                  		move.b	$28(a0),d0
00017578 0240 000F                  		andi.w	#$F,d0
0001757C C0FC 003C                  		mulu.w	#$3C,d0
00017580 3140 0032                  		move.w	d0,$32(a0)
00017584 4A28 0028                  		tst.b	$28(a0)
00017588 6A00                       		bpl.s	Obj69_Trapdoor
0001758A 5428 0024                  		addq.b	#2,$24(a0)
0001758E 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017596 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001759C 117C 0010 0019             		move.b	#$10,$19(a0)
000175A2 117C 0002 001C             		move.b	#2,$1C(a0)
000175A8 7000                       		moveq	#0,d0
000175AA 1028 0028                  		move.b	$28(a0),d0	; get object type
000175AE 3200                       		move.w	d0,d1
000175B0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000175B4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000175B8 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000175BC 3140 0032                  		move.w	d0,$32(a0)
000175C0 0241 0070                  		andi.w	#$70,d1
000175C4 0641 0010                  		addi.w	#$10,d1
000175C8 E549                       		lsl.w	#2,d1
000175CA 5341                       		subq.w	#1,d1
000175CC 3141 0036                  		move.w	d1,$36(a0)
000175D0 6000                       		bra.s	Obj69_Spinner
000175D2                            ; ===========================================================================
000175D2                            
000175D2                            Obj69_Trapdoor:				; XREF: Obj69_Index
000175D2 5368 0030                  		subq.w	#1,$30(a0)
000175D6 6A00                       		bpl.s	Obj69_Animate
000175D8 3168 0032 0030             		move.w	$32(a0),$30(a0)
000175DE 0868 0000 001C             		bchg	#0,$1C(a0)
000175E4 4A28 0001                  		tst.b	1(a0)
000175E8 6A00                       		bpl.s	Obj69_Animate
000175EA 303C 00BB                  		move.w	#$BB,d0
000175EE 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play door sound
000175F4                            
000175F4                            Obj69_Animate:
000175F4 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000175FA 4EB9 0000 BEA2             		jsr	AnimateSprite
00017600 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017604 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00017606 323C 004B                  		move.w	#$4B,d1
0001760A 343C 000C                  		move.w	#$C,d2
0001760E 3602                       		move.w	d2,d3
00017610 5243                       		addq.w	#1,d3
00017612 3828 0008                  		move.w	8(a0),d4
00017616 6100 9D84                  		bsr.w	SolidObject
0001761A 6000 9A58                  		bra.w	MarkObjGone
0001761E                            ; ===========================================================================
0001761E                            
0001761E                            Obj69_NotSolid:
0001761E 0828 0003 0022             		btst	#3,$22(a0)
00017624 6700                       		beq.s	Obj69_Display
00017626 43F8 D000                  		lea	($FFFFD000).w,a1
0001762A 08A9 0003 0022             		bclr	#3,$22(a1)
00017630 08A8 0003 0022             		bclr	#3,$22(a0)
00017636 4228 0025                  		clr.b	$25(a0)
0001763A                            
0001763A                            Obj69_Display:
0001763A 6000 9A38                  		bra.w	MarkObjGone
0001763E                            ; ===========================================================================
0001763E                            
0001763E                            Obj69_Spinner:				; XREF: Obj69_Index
0001763E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017642 C068 0036                  		and.w	$36(a0),d0
00017646 6600                       		bne.s	Obj69_Delay
00017648 117C 0001 0034             		move.b	#1,$34(a0)
0001764E                            
0001764E                            Obj69_Delay:
0001764E 4A28 0034                  		tst.b	$34(a0)
00017652 6700                       		beq.s	Obj69_Animate2
00017654 5368 0030                  		subq.w	#1,$30(a0)
00017658 6A00                       		bpl.s	Obj69_Animate2
0001765A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017660 4228 0034                  		clr.b	$34(a0)
00017664 0868 0000 001C             		bchg	#0,$1C(a0)
0001766A                            
0001766A                            Obj69_Animate2:
0001766A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017670 4EB9 0000 BEA2             		jsr	AnimateSprite
00017676 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001767A 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001767C 323C 001B                  		move.w	#$1B,d1
00017680 343C 0007                  		move.w	#7,d2
00017684 3602                       		move.w	d2,d3
00017686 5243                       		addq.w	#1,d3
00017688 3828 0008                  		move.w	8(a0),d4
0001768C 6100 9D0E                  		bsr.w	SolidObject
00017690 6000 99E2                  		bra.w	MarkObjGone
00017694                            ; ===========================================================================
00017694                            
00017694                            Obj69_NotSolid2:
00017694 0828 0003 0022             		btst	#3,$22(a0)
0001769A 6700                       		beq.s	Obj69_Display2
0001769C 43F8 D000                  		lea	($FFFFD000).w,a1
000176A0 08A9 0003 0022             		bclr	#3,$22(a1)
000176A6 08A8 0003 0022             		bclr	#3,$22(a0)
000176AC 4228 0025                  		clr.b	$25(a0)
000176B0                            
000176B0                            Obj69_Display2:
000176B0 6000 99C2                  		bra.w	MarkObjGone
000176B4                            ; ===========================================================================
000176B4                            Ani_obj69:
000176B4                            	include "_anim\obj69.asm"
000176B4                            ; ---------------------------------------------------------------------------
000176B4                            ; Animation script - trapdoor (SBZ)
000176B4                            ; ---------------------------------------------------------------------------
000176B4 0000                       		dc.w byte_158AC-Ani_obj69
000176B6 0000                       		dc.w byte_158B2-Ani_obj69
000176B8 0000                       		dc.w byte_158B8-Ani_obj69
000176BA 0000                       		dc.w byte_158CC-Ani_obj69
000176BC 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000176C2 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000176C8 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176D5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176DC 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176E9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176F0                            		even
000176F0                            		even
000176F0                            
000176F0                            ; ---------------------------------------------------------------------------
000176F0                            ; Sprite mappings - trapdoor (SBZ)
000176F0                            ; ---------------------------------------------------------------------------
000176F0                            Map_obj69:
000176F0                            	include "_maps\obj69.asm"
000176F0                            ; ---------------------------------------------------------------------------
000176F0                            ; Sprite mappings - trapdoor (SBZ)
000176F0                            ; ---------------------------------------------------------------------------
000176F0 0000                       		dc.w byte_158E6-Map_obj69
000176F2 0000                       		dc.w byte_158FB-Map_obj69
000176F4 0000                       		dc.w byte_15924-Map_obj69
000176F6 04                         byte_158E6:	dc.b 4
000176F7 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000176FC F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017701 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017706 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001770B 08                         byte_158FB:	dc.b 8
0001770C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017711 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017716 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001771B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017720 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017725 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001772A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001772F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017734 04                         byte_15924:	dc.b 4
00017735 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001773A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001773F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017744 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001774A 00                         		even
0001774A 00                         		even
0001774A                            
0001774A                            ; ---------------------------------------------------------------------------
0001774A                            ; Sprite mappings - spinning platforms (SBZ)
0001774A                            ; ---------------------------------------------------------------------------
0001774A                            Map_obj69a:
0001774A                            	include "_maps\obj69a.asm"
0001774A                            ; ---------------------------------------------------------------------------
0001774A                            ; Sprite mappings - spinning platforms (SBZ)
0001774A                            ; ---------------------------------------------------------------------------
0001774A 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001774E 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017752 0000                       		dc.w byte_15970-Map_obj69a
00017754 02                         byte_15944:	dc.b 2
00017755 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001775A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001775F 02                         byte_1594F:	dc.b 2
00017760 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017765 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001776A 02                         byte_1595A:	dc.b 2
0001776B F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017770 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017775 02                         byte_15965:	dc.b 2
00017776 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001777B 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017780 02                         byte_15970:	dc.b 2
00017781 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017786 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001778C 00                         		even
0001778C 00                         		even
0001778C                            
0001778C                            ; ===========================================================================
0001778C                            ; ---------------------------------------------------------------------------
0001778C                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001778C                            ; ---------------------------------------------------------------------------
0001778C                            
0001778C                            Obj6A:					; XREF: Obj_Index
0001778C 7000                       		moveq	#0,d0
0001778E 1028 0024                  		move.b	$24(a0),d0
00017792 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017796 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001779A                            ; ===========================================================================
0001779A 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001779C 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001779E                            ; ===========================================================================
0001779E                            
0001779E                            Obj6A_Main:				; XREF: Obj6A_Index
0001779E 5428 0024                  		addq.b	#2,$24(a0)
000177A2 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000177AA 317C 43B5 0002             		move.w	#$43B5,2(a0)
000177B0 117C 0004 0001             		move.b	#4,1(a0)
000177B6 117C 0004 0018             		move.b	#4,$18(a0)
000177BC 117C 0020 0019             		move.b	#$20,$19(a0)
000177C2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000177C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000177CE 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000177D4 6400                       		bcc.s	Obj6A_Action
000177D6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000177DC                            
000177DC                            Obj6A_Action:				; XREF: Obj6A_Index
000177DC 7000                       		moveq	#0,d0
000177DE 1028 0028                  		move.b	$28(a0),d0
000177E2 0240 0007                  		andi.w	#7,d0
000177E6 D040                       		add.w	d0,d0
000177E8 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000177EC 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000177F0 3028 003A                  		move.w	$3A(a0),d0
000177F4 0240 FF80                  		andi.w	#$FF80,d0
000177F8 3238 F700                  		move.w	($FFFFF700).w,d1
000177FC 0441 0080                  		subi.w	#$80,d1
00017800 0241 FF80                  		andi.w	#$FF80,d1
00017804 9041                       		sub.w	d1,d0
00017806 0C40 0280                  		cmpi.w	#$280,d0
0001780A 6200                       		bhi.s	Obj6A_Delete
0001780C 4EF9 0000 EFBA             		jmp	DisplaySprite
00017812                            ; ===========================================================================
00017812                            
00017812                            Obj6A_Delete:
00017812 4EF9 0000 EFF6             		jmp	DeleteObject
00017818                            ; ===========================================================================
00017818 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001781C 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017820 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017822                            ; ===========================================================================
00017822                            
00017822                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017822 4E75                       		rts	
00017824                            ; ===========================================================================
00017824                            
00017824                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017824 323C 0060                  		move.w	#$60,d1
00017828 7000                       		moveq	#0,d0
0001782A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001782E 0828 0000 0022             		btst	#0,$22(a0)
00017834 6700                       		beq.s	Obj6A_Animate01
00017836 4440                       		neg.w	d0
00017838 D041                       		add.w	d1,d0
0001783A                            
0001783A                            Obj6A_Animate01:
0001783A 3228 003A                  		move.w	$3A(a0),d1
0001783E 9240                       		sub.w	d0,d1
00017840 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017844 5328 001E                  		subq.b	#1,$1E(a0)
00017848 6A00                       		bpl.s	loc_15A46
0001784A 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017850 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017856                            
00017856                            loc_15A46:
00017856 4A28 0001                  		tst.b	1(a0)
0001785A 6A00                       		bpl.s	locret_15A60
0001785C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017860 0240 000F                  		andi.w	#$F,d0
00017864 6600                       		bne.s	locret_15A60
00017866 303C 00B0                  		move.w	#$B0,d0
0001786A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play saw sound
00017870                            
00017870                            locret_15A60:
00017870 4E75                       		rts	
00017872                            ; ===========================================================================
00017872                            
00017872                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017872 323C 0030                  		move.w	#$30,d1
00017876 7000                       		moveq	#0,d0
00017878 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001787C 0828 0000 0022             		btst	#0,$22(a0)
00017882 6700                       		beq.s	Obj6A_Animate02
00017884 4440                       		neg.w	d0
00017886 0640 0080                  		addi.w	#$80,d0
0001788A                            
0001788A                            Obj6A_Animate02:
0001788A 3228 0038                  		move.w	$38(a0),d1
0001788E 9240                       		sub.w	d0,d1
00017890 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017894 5328 001E                  		subq.b	#1,$1E(a0)
00017898 6A00                       		bpl.s	loc_15A96
0001789A 117C 0002 001E             		move.b	#2,$1E(a0)
000178A0 0868 0000 001A             		bchg	#0,$1A(a0)
000178A6                            
000178A6                            loc_15A96:
000178A6 4A28 0001                  		tst.b	1(a0)
000178AA 6A00                       		bpl.s	locret_15AB0
000178AC 1038 FE64                  		move.b	($FFFFFE64).w,d0
000178B0 0C00 0018                  		cmpi.b	#$18,d0
000178B4 6600                       		bne.s	locret_15AB0
000178B6 303C 00B0                  		move.w	#$B0,d0
000178BA 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play saw sound
000178C0                            
000178C0                            locret_15AB0:
000178C0 4E75                       		rts	
000178C2                            ; ===========================================================================
000178C2                            
000178C2                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000178C2 4A28 003D                  		tst.b	$3D(a0)
000178C6 6600                       		bne.s	Obj6A_Animate03
000178C8 3038 D008                  		move.w	($FFFFD008).w,d0
000178CC 0440 00C0                  		subi.w	#$C0,d0
000178D0 6500                       		bcs.s	loc_15B02
000178D2 9068 0008                  		sub.w	8(a0),d0
000178D6 6500                       		bcs.s	loc_15B02
000178D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000178DC 0440 0080                  		subi.w	#$80,d0
000178E0 B068 000C                  		cmp.w	$C(a0),d0
000178E4 6400                       		bcc.s	locret_15B04
000178E6 0640 0100                  		addi.w	#$100,d0
000178EA B068 000C                  		cmp.w	$C(a0),d0
000178EE 6500                       		bcs.s	locret_15B04
000178F0 117C 0001 003D             		move.b	#1,$3D(a0)
000178F6 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000178FC 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017902 117C 0002 001A             		move.b	#2,$1A(a0)
00017908 303C 00B0                  		move.w	#$B0,d0
0001790C 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play saw sound
00017912                            
00017912                            loc_15B02:
00017912 588F                       		addq.l	#4,sp
00017914                            
00017914                            locret_15B04:
00017914 4E75                       		rts	
00017916                            ; ===========================================================================
00017916                            
00017916                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017916 4EB9 0000 EFA0             		jsr	SpeedToPos
0001791C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017922 5328 001E                  		subq.b	#1,$1E(a0)
00017926 6A00                       		bpl.s	locret_15B24
00017928 117C 0002 001E             		move.b	#2,$1E(a0)
0001792E 0868 0000 001A             		bchg	#0,$1A(a0)
00017934                            
00017934                            locret_15B24:
00017934 4E75                       		rts	
00017936                            ; ===========================================================================
00017936                            
00017936                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017936 4A28 003D                  		tst.b	$3D(a0)
0001793A 6600                       		bne.s	Obj6A_Animate04
0001793C 3038 D008                  		move.w	($FFFFD008).w,d0
00017940 0640 00E0                  		addi.w	#$E0,d0
00017944 9068 0008                  		sub.w	8(a0),d0
00017948 6400                       		bcc.s	loc_15B74
0001794A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001794E 0440 0080                  		subi.w	#$80,d0
00017952 B068 000C                  		cmp.w	$C(a0),d0
00017956 6400                       		bcc.s	locret_15B76
00017958 0640 0100                  		addi.w	#$100,d0
0001795C B068 000C                  		cmp.w	$C(a0),d0
00017960 6500                       		bcs.s	locret_15B76
00017962 117C 0001 003D             		move.b	#1,$3D(a0)
00017968 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001796E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017974 117C 0002 001A             		move.b	#2,$1A(a0)
0001797A 303C 00B0                  		move.w	#$B0,d0
0001797E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play saw sound
00017984                            
00017984                            loc_15B74:
00017984 588F                       		addq.l	#4,sp
00017986                            
00017986                            locret_15B76:
00017986 4E75                       		rts	
00017988                            ; ===========================================================================
00017988                            
00017988                            Obj6A_Animate04:
00017988 4EB9 0000 EFA0             		jsr	SpeedToPos
0001798E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017994 5328 001E                  		subq.b	#1,$1E(a0)
00017998 6A00                       		bpl.s	locret_15B96
0001799A 117C 0002 001E             		move.b	#2,$1E(a0)
000179A0 0868 0000 001A             		bchg	#0,$1A(a0)
000179A6                            
000179A6                            locret_15B96:
000179A6 4E75                       		rts	
000179A8                            ; ===========================================================================
000179A8                            ; ---------------------------------------------------------------------------
000179A8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000179A8                            ; ---------------------------------------------------------------------------
000179A8                            Map_obj6A:
000179A8                            	include "_maps\obj6A.asm"
000179A8                            ; ---------------------------------------------------------------------------
000179A8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000179A8                            ; ---------------------------------------------------------------------------
000179A8 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000179AC 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000179B0 07                         byte_15BA0:	dc.b 7
000179B1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000179B6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000179BB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000179C0 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000179C5 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000179CA 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000179CF 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000179D4 07                         byte_15BC4:	dc.b 7
000179D5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000179DA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000179DF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000179E4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000179E9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000179EE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000179F3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000179F8 04                         byte_15BE8:	dc.b 4
000179F9 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000179FE E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017A03 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017A08 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017A0D 04                         byte_15BFD:	dc.b 4
00017A0E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017A13 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017A18 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017A1D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017A22                            		even
00017A22                            		even
00017A22                            
00017A22                            ; ===========================================================================
00017A22                            ; ---------------------------------------------------------------------------
00017A22                            ; Object 6B - stomper (SBZ)
00017A22                            ; ---------------------------------------------------------------------------
00017A22                            
00017A22                            Obj6B:					; XREF: Obj_Index
00017A22 7000                       		moveq	#0,d0
00017A24 1028 0024                  		move.b	$24(a0),d0
00017A28 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017A2C 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017A30                            ; ===========================================================================
00017A30 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017A32 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017A34                            
00017A34 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017A38 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017A3C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017A40 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017A44 8040 0005                  		dc.b  $80, $40,	  0,   5
00017A48                            ; ===========================================================================
00017A48                            
00017A48                            Obj6B_Main:				; XREF: Obj6B_Index
00017A48 5428 0024                  		addq.b	#2,$24(a0)
00017A4C 7000                       		moveq	#0,d0
00017A4E 1028 0028                  		move.b	$28(a0),d0
00017A52 E448                       		lsr.w	#2,d0
00017A54 0240 001C                  		andi.w	#$1C,d0
00017A58 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017A5C 115B 0019                  		move.b	(a3)+,$19(a0)
00017A60 115B 0016                  		move.b	(a3)+,$16(a0)
00017A64 E448                       		lsr.w	#2,d0
00017A66 1140 001A                  		move.b	d0,$1A(a0)
00017A6A 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017A72 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017A78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017A7E 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017A80 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017A86 6700                       		beq.s	Obj6B_SBZ3
00017A88                            
00017A88                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017A88 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A8C 7000                       		moveq	#0,d0
00017A8E 1028 0023                  		move.b	$23(a0),d0
00017A92 6700                       		beq.s	Obj6B_Delete
00017A94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017A9A                            
00017A9A                            Obj6B_Delete:
00017A9A 4EF9 0000 EFF6             		jmp	DeleteObject
00017AA0                            ; ===========================================================================
00017AA0                            
00017AA0                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017AA0 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017AA6 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017AAC 6600                       		bne.s	Obj6B_SBZ12
00017AAE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AB2 7000                       		moveq	#0,d0
00017AB4 1028 0023                  		move.b	$23(a0),d0
00017AB8 6700                       		beq.s	Obj6B_SBZ12
00017ABA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017AC0 6700                       		beq.s	Obj6B_SBZ12
00017AC2 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017AC6 60C0                       		bra.s	Obj6B_ChkGone
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017AC8 0028 0004 0001             		ori.b	#4,1(a0)
00017ACE 117C 0004 0018             		move.b	#4,$18(a0)
00017AD4 3168 0008 0034             		move.w	8(a0),$34(a0)
00017ADA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017AE0 7000                       		moveq	#0,d0
00017AE2 101B                       		move.b	(a3)+,d0
00017AE4 3140 003C                  		move.w	d0,$3C(a0)
00017AE8 7000                       		moveq	#0,d0
00017AEA 1028 0028                  		move.b	$28(a0),d0
00017AEE 6A00                       		bpl.s	Obj6B_Action
00017AF0 0200 000F                  		andi.b	#$F,d0
00017AF4 1140 003E                  		move.b	d0,$3E(a0)
00017AF8 1153 0028                  		move.b	(a3),$28(a0)
00017AFC 0C13 0005                  		cmpi.b	#5,(a3)
00017B00 6600                       		bne.s	Obj6B_ChkGone2
00017B02 08E8 0004 0001             		bset	#4,1(a0)
00017B08                            
00017B08                            Obj6B_ChkGone2:
00017B08 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017B0C 7000                       		moveq	#0,d0
00017B0E 1028 0023                  		move.b	$23(a0),d0
00017B12 6700                       		beq.s	Obj6B_Action
00017B14 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017B1A                            
00017B1A                            Obj6B_Action:				; XREF: Obj6B_Index
00017B1A 3F28 0008                  		move.w	8(a0),-(sp)
00017B1E 7000                       		moveq	#0,d0
00017B20 1028 0028                  		move.b	$28(a0),d0
00017B24 0240 000F                  		andi.w	#$F,d0
00017B28 D040                       		add.w	d0,d0
00017B2A 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017B2E 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017B32 381F                       		move.w	(sp)+,d4
00017B34 4A28 0001                  		tst.b	1(a0)
00017B38 6A00                       		bpl.s	Obj6B_ChkDel
00017B3A 7200                       		moveq	#0,d1
00017B3C 1228 0019                  		move.b	$19(a0),d1
00017B40 0641 000B                  		addi.w	#$B,d1
00017B44 7400                       		moveq	#0,d2
00017B46 1428 0016                  		move.b	$16(a0),d2
00017B4A 3602                       		move.w	d2,d3
00017B4C 5243                       		addq.w	#1,d3
00017B4E 6100 984C                  		bsr.w	SolidObject
00017B52                            
00017B52                            Obj6B_ChkDel:
00017B52 3028 0034                  		move.w	$34(a0),d0
00017B56 0240 FF80                  		andi.w	#$FF80,d0
00017B5A 3238 F700                  		move.w	($FFFFF700).w,d1
00017B5E 0441 0080                  		subi.w	#$80,d1
00017B62 0241 FF80                  		andi.w	#$FF80,d1
00017B66 9041                       		sub.w	d1,d0
00017B68 0C40 0280                  		cmpi.w	#$280,d0
00017B6C 6200                       		bhi.s	loc_15D64
00017B6E 4EF9 0000 EFBA             		jmp	DisplaySprite
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            loc_15D64:
00017B74 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017B7A 6600                       		bne.s	Obj6B_Delete2
00017B7C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017B80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017B84 7000                       		moveq	#0,d0
00017B86 1028 0023                  		move.b	$23(a0),d0
00017B8A 6700                       		beq.s	Obj6B_Delete2
00017B8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017B92                            
00017B92                            Obj6B_Delete2:
00017B92 4EF9 0000 EFF6             		jmp	DeleteObject
00017B98                            ; ===========================================================================
00017B98 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017B9C 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017BA0 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017BA4                            ; ===========================================================================
00017BA4                            
00017BA4                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017BA4 4E75                       		rts	
00017BA6                            ; ===========================================================================
00017BA6                            
00017BA6                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017BA6 4A28 0038                  		tst.b	$38(a0)
00017BAA 6600                       		bne.s	loc_15DB4
00017BAC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017BB0 7000                       		moveq	#0,d0
00017BB2 1028 003E                  		move.b	$3E(a0),d0
00017BB6 0832 0000 0000             		btst	#0,(a2,d0.w)
00017BBC 6700                       		beq.s	loc_15DC2
00017BBE 117C 0001 0038             		move.b	#1,$38(a0)
00017BC4                            
00017BC4                            loc_15DB4:
00017BC4 3028 003C                  		move.w	$3C(a0),d0
00017BC8 B068 003A                  		cmp.w	$3A(a0),d0
00017BCC 6700                       		beq.s	loc_15DE0
00017BCE 5468 003A                  		addq.w	#2,$3A(a0)
00017BD2                            
00017BD2                            loc_15DC2:
00017BD2 3028 003A                  		move.w	$3A(a0),d0
00017BD6 0828 0000 0022             		btst	#0,$22(a0)
00017BDC 6700                       		beq.s	loc_15DD4
00017BDE 4440                       		neg.w	d0
00017BE0 0640 0080                  		addi.w	#$80,d0
00017BE4                            
00017BE4                            loc_15DD4:
00017BE4 3228 0034                  		move.w	$34(a0),d1
00017BE8 9240                       		sub.w	d0,d1
00017BEA 3141 0008                  		move.w	d1,8(a0)
00017BEE 4E75                       		rts	
00017BF0                            ; ===========================================================================
00017BF0                            
00017BF0                            loc_15DE0:
00017BF0 5228 0028                  		addq.b	#1,$28(a0)
00017BF4 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017BFA 4228 0038                  		clr.b	$38(a0)
00017BFE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C02 7000                       		moveq	#0,d0
00017C04 1028 0023                  		move.b	$23(a0),d0
00017C08 67C8                       		beq.s	loc_15DC2
00017C0A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017C10 60C0                       		bra.s	loc_15DC2
00017C12                            ; ===========================================================================
00017C12                            
00017C12                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017C12 4A28 0038                  		tst.b	$38(a0)
00017C16 6600                       		bne.s	loc_15E14
00017C18 5368 0036                  		subq.w	#1,$36(a0)
00017C1C 6600                       		bne.s	loc_15E1E
00017C1E 117C 0001 0038             		move.b	#1,$38(a0)
00017C24                            
00017C24                            loc_15E14:
00017C24 4A68 003A                  		tst.w	$3A(a0)
00017C28 6700                       		beq.s	loc_15E3C
00017C2A 5568 003A                  		subq.w	#2,$3A(a0)
00017C2E                            
00017C2E                            loc_15E1E:
00017C2E 3028 003A                  		move.w	$3A(a0),d0
00017C32 0828 0000 0022             		btst	#0,$22(a0)
00017C38 6700                       		beq.s	loc_15E30
00017C3A 4440                       		neg.w	d0
00017C3C 0640 0080                  		addi.w	#$80,d0
00017C40                            
00017C40                            loc_15E30:
00017C40 3228 0034                  		move.w	$34(a0),d1
00017C44 9240                       		sub.w	d0,d1
00017C46 3141 0008                  		move.w	d1,8(a0)
00017C4A 4E75                       		rts	
00017C4C                            ; ===========================================================================
00017C4C                            
00017C4C                            loc_15E3C:
00017C4C 5328 0028                  		subq.b	#1,$28(a0)
00017C50 4228 0038                  		clr.b	$38(a0)
00017C54 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C58 7000                       		moveq	#0,d0
00017C5A 1028 0023                  		move.b	$23(a0),d0
00017C5E 67CE                       		beq.s	loc_15E1E
00017C60 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017C66 60C6                       		bra.s	loc_15E1E
00017C68                            ; ===========================================================================
00017C68                            
00017C68                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017C68 4A28 0038                  		tst.b	$38(a0)
00017C6C 6600                       		bne.s	loc_15E7C
00017C6E 4A68 003A                  		tst.w	$3A(a0)
00017C72 6700                       		beq.s	loc_15E6A
00017C74 5368 003A                  		subq.w	#1,$3A(a0)
00017C78 6000                       		bra.s	loc_15E8E
00017C7A                            ; ===========================================================================
00017C7A                            
00017C7A                            loc_15E6A:
00017C7A 5368 0036                  		subq.w	#1,$36(a0)
00017C7E 6A00                       		bpl.s	loc_15E8E
00017C80 317C 003C 0036             		move.w	#$3C,$36(a0)
00017C86 117C 0001 0038             		move.b	#1,$38(a0)
00017C8C                            
00017C8C                            loc_15E7C:
00017C8C 5068 003A                  		addq.w	#8,$3A(a0)
00017C90 3028 003A                  		move.w	$3A(a0),d0
00017C94 B068 003C                  		cmp.w	$3C(a0),d0
00017C98 6600                       		bne.s	loc_15E8E
00017C9A 4228 0038                  		clr.b	$38(a0)
00017C9E                            
00017C9E                            loc_15E8E:
00017C9E 3028 003A                  		move.w	$3A(a0),d0
00017CA2 0828 0000 0022             		btst	#0,$22(a0)
00017CA8 6700                       		beq.s	loc_15EA0
00017CAA 4440                       		neg.w	d0
00017CAC 0640 0038                  		addi.w	#$38,d0
00017CB0                            
00017CB0                            loc_15EA0:
00017CB0 3228 0030                  		move.w	$30(a0),d1
00017CB4 D240                       		add.w	d0,d1
00017CB6 3141 000C                  		move.w	d1,$C(a0)
00017CBA 4E75                       		rts	
00017CBC                            ; ===========================================================================
00017CBC                            
00017CBC                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017CBC 4A28 0038                  		tst.b	$38(a0)
00017CC0 6600                       		bne.s	loc_15ED0
00017CC2 4A68 003A                  		tst.w	$3A(a0)
00017CC6 6700                       		beq.s	loc_15EBE
00017CC8 5168 003A                  		subq.w	#8,$3A(a0)
00017CCC 6000                       		bra.s	loc_15EF0
00017CCE                            ; ===========================================================================
00017CCE                            
00017CCE                            loc_15EBE:
00017CCE 5368 0036                  		subq.w	#1,$36(a0)
00017CD2 6A00                       		bpl.s	loc_15EF0
00017CD4 317C 003C 0036             		move.w	#$3C,$36(a0)
00017CDA 117C 0001 0038             		move.b	#1,$38(a0)
00017CE0                            
00017CE0                            loc_15ED0:
00017CE0 3028 003A                  		move.w	$3A(a0),d0
00017CE4 B068 003C                  		cmp.w	$3C(a0),d0
00017CE8 6700                       		beq.s	loc_15EE0
00017CEA 5068 003A                  		addq.w	#8,$3A(a0)
00017CEE 6000                       		bra.s	loc_15EF0
00017CF0                            ; ===========================================================================
00017CF0                            
00017CF0                            loc_15EE0:
00017CF0 5368 0036                  		subq.w	#1,$36(a0)
00017CF4 6A00                       		bpl.s	loc_15EF0
00017CF6 317C 003C 0036             		move.w	#$3C,$36(a0)
00017CFC 4228 0038                  		clr.b	$38(a0)
00017D00                            
00017D00                            loc_15EF0:
00017D00 3028 003A                  		move.w	$3A(a0),d0
00017D04 0828 0000 0022             		btst	#0,$22(a0)
00017D0A 6700                       		beq.s	loc_15F02
00017D0C 4440                       		neg.w	d0
00017D0E 0640 0038                  		addi.w	#$38,d0
00017D12                            
00017D12                            loc_15F02:
00017D12 3228 0030                  		move.w	$30(a0),d1
00017D16 D240                       		add.w	d0,d1
00017D18 3141 000C                  		move.w	d1,$C(a0)
00017D1C 4E75                       		rts	
00017D1E                            ; ===========================================================================
00017D1E                            
00017D1E                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017D1E 4A28 0038                  		tst.b	$38(a0)
00017D22 6600                       		bne.s	loc_15F3E
00017D24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017D28 7000                       		moveq	#0,d0
00017D2A 1028 003E                  		move.b	$3E(a0),d0
00017D2E 0832 0000 0000             		btst	#0,(a2,d0.w)
00017D34 6700                       		beq.s	locret_15F5C
00017D36 117C 0001 0038             		move.b	#1,$38(a0)
00017D3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D40 7000                       		moveq	#0,d0
00017D42 1028 0023                  		move.b	$23(a0),d0
00017D46 6700                       		beq.s	loc_15F3E
00017D48 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017D4E                            
00017D4E                            loc_15F3E:
00017D4E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017D56 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017D5E 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D64 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017D6A 6700                       		beq.s	loc_15F5E
00017D6C                            
00017D6C                            locret_15F5C:
00017D6C 4E75                       		rts	
00017D6E                            ; ===========================================================================
00017D6E                            
00017D6E                            loc_15F5E:
00017D6E 4228 0028                  		clr.b	$28(a0)
00017D72 4228 0038                  		clr.b	$38(a0)
00017D76 4E75                       		rts	
00017D78                            ; ===========================================================================
00017D78                            ; ---------------------------------------------------------------------------
00017D78                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D78                            ; ---------------------------------------------------------------------------
00017D78                            Map_obj6B:
00017D78                            	include "_maps\obj6B.asm"
00017D78                            ; ---------------------------------------------------------------------------
00017D78                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D78                            ; ---------------------------------------------------------------------------
00017D78 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017D7C 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017D80 0000                       		dc.w byte_15FB0-Map_obj6B
00017D82 04                         byte_15F72:	dc.b 4
00017D83 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017D88 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017D8D F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017D92 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017D97 08                         byte_15F87:	dc.b 8
00017D98 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017D9D E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017DA2 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017DA7 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017DAC 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017DB1 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017DB6 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017DBB 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017DC0 0E                         byte_15FB0:	dc.b $E
00017DC1 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017DC6 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017DCB C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017DD0 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017DD5 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017DDA C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017DDF C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017DE4 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017DE9 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017DEE E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017DF3 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017DF8 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017DFD 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017E02 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017E08 00                         		even
00017E08 00                         		even
00017E08                            
00017E08                            ; ===========================================================================
00017E08                            ; ---------------------------------------------------------------------------
00017E08                            ; Object 6C - vanishing	platforms (SBZ)
00017E08                            ; ---------------------------------------------------------------------------
00017E08                            
00017E08                            Obj6C:					; XREF: Obj_Index
00017E08 7000                       		moveq	#0,d0
00017E0A 1028 0024                  		move.b	$24(a0),d0
00017E0E 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017E12 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017E16                            ; ===========================================================================
00017E16 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017E18 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017E1A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017E1C 0000                       		dc.w loc_16068-Obj6C_Index
00017E1E                            ; ===========================================================================
00017E1E                            
00017E1E                            Obj6C_Main:				; XREF: Obj6C_Index
00017E1E 5C28 0024                  		addq.b	#6,$24(a0)
00017E22 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017E2A 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017E30 0028 0004 0001             		ori.b	#4,1(a0)
00017E36 117C 0010 0019             		move.b	#$10,$19(a0)
00017E3C 117C 0004 0018             		move.b	#4,$18(a0)
00017E42 7000                       		moveq	#0,d0
00017E44 1028 0028                  		move.b	$28(a0),d0	; get object type
00017E48 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017E4C 5240                       		addq.w	#1,d0		; add 1
00017E4E EF48                       		lsl.w	#7,d0		; multiply by $80
00017E50 3200                       		move.w	d0,d1
00017E52 5340                       		subq.w	#1,d0
00017E54 3140 0030                  		move.w	d0,$30(a0)
00017E58 3140 0032                  		move.w	d0,$32(a0)
00017E5C 7000                       		moveq	#0,d0
00017E5E 1028 0028                  		move.b	$28(a0),d0	; get object type
00017E62 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017E66 0641 0080                  		addi.w	#$80,d1
00017E6A C0C1                       		mulu.w	d1,d0
00017E6C E088                       		lsr.l	#8,d0
00017E6E 3140 0036                  		move.w	d0,$36(a0)
00017E72 5341                       		subq.w	#1,d1
00017E74 3141 0038                  		move.w	d1,$38(a0)
00017E78                            
00017E78                            loc_16068:				; XREF: Obj6C_Index
00017E78 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017E7C 9068 0036                  		sub.w	$36(a0),d0
00017E80 C068 0038                  		and.w	$38(a0),d0
00017E84 6600                       		bne.s	Obj6C_Animate
00017E86 5928 0024                  		subq.b	#4,$24(a0)
00017E8A 6000                       		bra.s	Obj6C_Vanish
00017E8C                            ; ===========================================================================
00017E8C                            
00017E8C                            Obj6C_Animate:
00017E8C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017E92 4EB9 0000 BEA2             		jsr	AnimateSprite
00017E98 6000 91DA                  		bra.w	MarkObjGone
00017E9C                            ; ===========================================================================
00017E9C                            
00017E9C                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017E9C 5368 0030                  		subq.w	#1,$30(a0)
00017EA0 6A00                       		bpl.s	loc_160AA
00017EA2 317C 007F 0030             		move.w	#127,$30(a0)
00017EA8 4A28 001C                  		tst.b	$1C(a0)
00017EAC 6700                       		beq.s	loc_160A4
00017EAE 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017EB4                            
00017EB4                            loc_160A4:
00017EB4 0868 0000 001C             		bchg	#0,$1C(a0)
00017EBA                            
00017EBA                            loc_160AA:
00017EBA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017EC0 4EB9 0000 BEA2             		jsr	AnimateSprite
00017EC6 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017ECC 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017ECE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017ED4 6600                       		bne.s	loc_160D6
00017ED6 7200                       		moveq	#0,d1
00017ED8 1228 0019                  		move.b	$19(a0),d1
00017EDC 4EB9 0000 8BAC             		jsr	(PlatformObject).l
00017EE2 6000 9190                  		bra.w	MarkObjGone
00017EE6                            ; ===========================================================================
00017EE6                            
00017EE6                            loc_160D6:
00017EE6 7200                       		moveq	#0,d1
00017EE8 1228 0019                  		move.b	$19(a0),d1
00017EEC 4EB9 0000 8D20             		jsr	(ExitPlatform).l
00017EF2 3428 0008                  		move.w	8(a0),d2
00017EF6 4EB9 0000 928A             		jsr	(MvSonicOnPtfm2).l
00017EFC 6000 9176                  		bra.w	MarkObjGone
00017F00                            ; ===========================================================================
00017F00                            
00017F00                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017F00 0828 0003 0022             		btst	#3,$22(a0)
00017F06 6700                       		beq.s	Obj6C_Display
00017F08 43F8 D000                  		lea	($FFFFD000).w,a1
00017F0C 08A9 0003 0022             		bclr	#3,$22(a1)
00017F12 08A8 0003 0022             		bclr	#3,$22(a0)
00017F18 117C 0002 0024             		move.b	#2,$24(a0)
00017F1E 4228 0025                  		clr.b	$25(a0)
00017F22                            
00017F22                            Obj6C_Display:
00017F22 6000 9150                  		bra.w	MarkObjGone
00017F26                            ; ===========================================================================
00017F26                            Ani_obj6C:
00017F26                            	include "_anim\obj6C.asm"
00017F26                            ; ---------------------------------------------------------------------------
00017F26                            ; Animation script - vanishing platforms (SBZ)
00017F26                            ; ---------------------------------------------------------------------------
00017F26 0000                       		dc.w byte_1611A-Ani_obj6C
00017F28 0000                       		dc.w byte_16122-Ani_obj6C
00017F2A 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017F32 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017F3A                            		even
00017F3A                            		even
00017F3A                            
00017F3A                            ; ---------------------------------------------------------------------------
00017F3A                            ; Sprite mappings - vanishing platforms	(SBZ)
00017F3A                            ; ---------------------------------------------------------------------------
00017F3A                            Map_obj6C:
00017F3A                            	include "_maps\obj6C.asm"
00017F3A                            ; ---------------------------------------------------------------------------
00017F3A                            ; Sprite mappings - vanishing platforms	(SBZ)
00017F3A                            ; ---------------------------------------------------------------------------
00017F3A 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017F3E 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017F42 01                         byte_16132:	dc.b 1
00017F43 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017F48 01                         byte_16138:	dc.b 1
00017F49 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017F4E 01                         byte_1613E:	dc.b 1
00017F4F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017F54 00                         byte_16144:	dc.b 0
00017F56 00                         		even
00017F56 00                         		even
00017F56                            
00017F56                            ; ===========================================================================
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            ; Object 6E - electrocution orbs (SBZ)
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            
00017F56                            Obj6E:					; XREF: Obj_Index
00017F56 7000                       		moveq	#0,d0
00017F58 1028 0024                  		move.b	$24(a0),d0
00017F5C 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017F60 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017F64                            ; ===========================================================================
00017F64 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017F66 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017F68                            ; ===========================================================================
00017F68                            
00017F68                            Obj6E_Main:				; XREF: Obj6E_Index
00017F68 5428 0024                  		addq.b	#2,$24(a0)
00017F6C 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017F74 317C 047E 0002             		move.w	#$47E,2(a0)
00017F7A 0028 0004 0001             		ori.b	#4,1(a0)
00017F80 117C 0028 0019             		move.b	#$28,$19(a0)
00017F86 7000                       		moveq	#0,d0
00017F88 1028 0028                  		move.b	$28(a0),d0	; read object type
00017F8C E948                       		lsl.w	#4,d0		; multiply by $10
00017F8E 5340                       		subq.w	#1,d0
00017F90 3140 0034                  		move.w	d0,$34(a0)
00017F94                            
00017F94                            Obj6E_Shock:				; XREF: Obj6E_Index
00017F94 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017F98 C068 0034                  		and.w	$34(a0),d0
00017F9C 6600                       		bne.s	Obj6E_Animate
00017F9E 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017FA4 4A28 0001                  		tst.b	1(a0)
00017FA8 6A00                       		bpl.s	Obj6E_Animate
00017FAA 303C 00B1                  		move.w	#$B1,d0
00017FAE 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play electricity sound
00017FB4                            
00017FB4                            Obj6E_Animate:
00017FB4 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017FBA 4EB9 0000 BEA2             		jsr	AnimateSprite
00017FC0 117C 0000 0020             		move.b	#0,$20(a0)
00017FC6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017FCC 6600                       		bne.s	Obj6E_Display	; if not, branch
00017FCE 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017FD4                            
00017FD4                            Obj6E_Display:
00017FD4 6000 909E                  		bra.w	MarkObjGone
00017FD8                            ; ===========================================================================
00017FD8                            Ani_obj6E:
00017FD8                            	include "_anim\obj6E.asm"
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            ; Animation script - electrocution orbs (SBZ)
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8 0000                       		dc.w byte_161CC-Ani_obj6E
00017FDA 0000                       		dc.w byte_161D0-Ani_obj6E
00017FDC 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017FE0 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017FF0                            		even
00017FF0                            		even
00017FF0                            
00017FF0                            ; ---------------------------------------------------------------------------
00017FF0                            ; Sprite mappings - electrocution orbs (SBZ)
00017FF0                            ; ---------------------------------------------------------------------------
00017FF0                            Map_obj6E:
00017FF0                            	include "_maps\obj6E.asm"
00017FF0                            ; ---------------------------------------------------------------------------
00017FF0                            ; Sprite mappings - electrocution orbs (SBZ)
00017FF0                            ; ---------------------------------------------------------------------------
00017FF0 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017FF4 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017FF8 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017FFC 02                         byte_161EC:	dc.b 2
00017FFD F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018002 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018007 03                         byte_161F7:	dc.b 3
00018008 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001800D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018012 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018017 05                         byte_16207:	dc.b 5
00018018 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001801D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018022 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018027 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001802C F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018031 04                         byte_16221:	dc.b 4
00018032 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018037 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001803C F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018041 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018046 06                         byte_16236:	dc.b 6
00018047 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001804C 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018051 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00018056 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001805B F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018060 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00018065 04                         byte_16255:	dc.b 4
00018066 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001806B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018070 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00018075 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001807A                            		even
0001807A                            		even
0001807A                            
0001807A                            ; ===========================================================================
0001807A                            ; ---------------------------------------------------------------------------
0001807A                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001807A                            ; ---------------------------------------------------------------------------
0001807A                            
0001807A                            Obj6F:					; XREF: Obj_Index
0001807A 7000                       		moveq	#0,d0
0001807C 1028 0024                  		move.b	$24(a0),d0
00018080 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00018084 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00018088 3028 0030                  		move.w	$30(a0),d0
0001808C 0240 FF80                  		andi.w	#$FF80,d0
00018090 3238 F700                  		move.w	($FFFFF700).w,d1
00018094 0441 0080                  		subi.w	#$80,d1
00018098 0241 FF80                  		andi.w	#$FF80,d1
0001809C 9041                       		sub.w	d1,d0
0001809E 0C40 0280                  		cmpi.w	#$280,d0
000180A2 6200                       		bhi.s	loc_1629A
000180A4                            
000180A4                            Obj6F_Display:
000180A4 4EF9 0000 EFBA             		jmp	DisplaySprite
000180AA                            ; ===========================================================================
000180AA                            
000180AA                            loc_1629A:
000180AA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000180B0 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000180B2 0C40 FF80                  		cmpi.w	#-$80,d0
000180B6 64EC                       		bcc.s	Obj6F_Display
000180B8                            
000180B8                            Obj6F_Act1or2:
000180B8 1028 002F                  		move.b	$2F(a0),d0
000180BC 6A00                       		bpl.s	Obj6F_Delete
000180BE 0240 007F                  		andi.w	#$7F,d0
000180C2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000180C6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000180CC                            
000180CC                            Obj6F_Delete:
000180CC 4EF9 0000 EFF6             		jmp	DeleteObject
000180D2                            ; ===========================================================================
000180D2 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000180D4 0000                       		dc.w loc_163D8-Obj6F_Index
000180D6                            ; ===========================================================================
000180D6                            
000180D6                            Obj6F_Main:				; XREF: Obj6F_Index
000180D6 1028 0028                  		move.b	$28(a0),d0
000180DA 6B00 0000                  		bmi.w	loc_16380
000180DE 5428 0024                  		addq.b	#2,$24(a0)
000180E2 217C 0001 774A 0004        		move.l	#Map_obj69a,4(a0)
000180EA 317C 04DF 0002             		move.w	#$4DF,2(a0)
000180F0 117C 0010 0019             		move.b	#$10,$19(a0)
000180F6 0028 0004 0001             		ori.b	#4,1(a0)
000180FC 117C 0004 0018             		move.b	#4,$18(a0)
00018102 7000                       		moveq	#0,d0
00018104 1028 0028                  		move.b	$28(a0),d0
00018108 3200                       		move.w	d0,d1
0001810A E648                       		lsr.w	#3,d0
0001810C 0240 001E                  		andi.w	#$1E,d0
00018110 45FA 0000                  		lea	off_164A6(pc),a2
00018114 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018118 315A 0038                  		move.w	(a2)+,$38(a0)
0001811C 315A 0030                  		move.w	(a2)+,$30(a0)
00018120 214A 003C                  		move.l	a2,$3C(a0)
00018124 0241 000F                  		andi.w	#$F,d1
00018128 E549                       		lsl.w	#2,d1
0001812A 1141 0038                  		move.b	d1,$38(a0)
0001812E 117C 0004 003A             		move.b	#4,$3A(a0)
00018134 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018138 6700                       		beq.s	loc_16356
0001813A 117C 0001 003B             		move.b	#1,$3B(a0)
00018140 4428 003A                  		neg.b	$3A(a0)
00018144 7200                       		moveq	#0,d1
00018146 1228 0038                  		move.b	$38(a0),d1
0001814A D228 003A                  		add.b	$3A(a0),d1
0001814E B228 0039                  		cmp.b	$39(a0),d1
00018152 6500                       		bcs.s	loc_16352
00018154 1001                       		move.b	d1,d0
00018156 7200                       		moveq	#0,d1
00018158 4A00                       		tst.b	d0
0001815A 6A00                       		bpl.s	loc_16352
0001815C 1228 0039                  		move.b	$39(a0),d1
00018160 5901                       		subq.b	#4,d1
00018162                            
00018162                            loc_16352:
00018162 1141 0038                  		move.b	d1,$38(a0)
00018166                            
00018166                            loc_16356:
00018166 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001816C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00018172 4A41                       		tst.w	d1
00018174 6600                       		bne.s	loc_1636C
00018176 117C 0001 001C             		move.b	#1,$1C(a0)
0001817C                            
0001817C                            loc_1636C:
0001817C 0C41 0008                  		cmpi.w	#8,d1
00018180 6600                       		bne.s	loc_16378
00018182 117C 0000 001C             		move.b	#0,$1C(a0)
00018188                            
00018188                            loc_16378:
00018188 6100 BD9E                  		bsr.w	Obj63_ChangeDir
0001818C 6000 0000                  		bra.w	loc_163D8
00018190                            ; ===========================================================================
00018190                            
00018190                            loc_16380:				; XREF: Obj6F_Main
00018190 1140 002F                  		move.b	d0,$2F(a0)
00018194 0240 007F                  		andi.w	#$7F,d0
00018198 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001819C 08F2 0000 0000             		bset	#0,(a2,d0.w)
000181A2 6700                       		beq.s	loc_1639A
000181A4 4EF9 0000 EFF6             		jmp	DeleteObject
000181AA                            ; ===========================================================================
000181AA                            
000181AA                            loc_1639A:
000181AA D040                       		add.w	d0,d0
000181AC 0240 001E                  		andi.w	#$1E,d0
000181B0 0640 0080                  		addi.w	#$80,d0
000181B4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000181BA D4F2 0000                  		adda.w	(a2,d0.w),a2
000181BE 321A                       		move.w	(a2)+,d1
000181C0 2248                       		movea.l	a0,a1
000181C2 6000                       		bra.s	Obj6F_LoadPform
000181C4                            ; ===========================================================================
000181C4                            
000181C4                            Obj6F_Loop:
000181C4 4EB9 0000 F44E             		jsr	SingleObjLoad
000181CA 6600                       		bne.s	loc_163D0
000181CC                            
000181CC                            Obj6F_LoadPform:			; XREF: loc_1639A
000181CC 12BC 006F                  		move.b	#$6F,0(a1)
000181D0 335A 0008                  		move.w	(a2)+,8(a1)
000181D4 335A 000C                  		move.w	(a2)+,$C(a1)
000181D8 301A                       		move.w	(a2)+,d0
000181DA 1340 0028                  		move.b	d0,$28(a1)
000181DE                            
000181DE                            loc_163D0:
000181DE 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000181E2                            
000181E2 588F                       		addq.l	#4,sp
000181E4 4E75                       		rts	
000181E6                            ; ===========================================================================
000181E6                            
000181E6                            loc_163D8:				; XREF: Obj6F_Index
000181E6 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000181EC 4EB9 0000 BEA2             		jsr	AnimateSprite
000181F2 4A28 001A                  		tst.b	$1A(a0)
000181F6 6600                       		bne.s	loc_16404
000181F8 3F28 0008                  		move.w	8(a0),-(sp)
000181FC 6100 0000                  		bsr.w	loc_16424
00018200 323C 001B                  		move.w	#$1B,d1
00018204 343C 0007                  		move.w	#7,d2
00018208 3602                       		move.w	d2,d3
0001820A 5243                       		addq.w	#1,d3
0001820C 381F                       		move.w	(sp)+,d4
0001820E 6000 918C                  		bra.w	SolidObject
00018212                            ; ===========================================================================
00018212                            
00018212                            loc_16404:
00018212 0828 0003 0022             		btst	#3,$22(a0)
00018218 6700                       		beq.s	loc_16420
0001821A 43F8 D000                  		lea	($FFFFD000).w,a1
0001821E 08A9 0003 0022             		bclr	#3,$22(a1)
00018224 08A8 0003 0022             		bclr	#3,$22(a0)
0001822A 4228 0025                  		clr.b	$25(a0)
0001822E                            
0001822E                            loc_16420:
0001822E 6000 0002                  		bra.w	*+4
00018232                            
00018232                            loc_16424:
00018232 3028 0008                  		move.w	8(a0),d0
00018236 B068 0034                  		cmp.w	$34(a0),d0
0001823A 6600                       		bne.s	loc_16484
0001823C 3028 000C                  		move.w	$C(a0),d0
00018240 B068 0036                  		cmp.w	$36(a0),d0
00018244 6600                       		bne.s	loc_16484
00018246 7200                       		moveq	#0,d1
00018248 1228 0038                  		move.b	$38(a0),d1
0001824C D228 003A                  		add.b	$3A(a0),d1
00018250 B228 0039                  		cmp.b	$39(a0),d1
00018254 6500                       		bcs.s	loc_16456
00018256 1001                       		move.b	d1,d0
00018258 7200                       		moveq	#0,d1
0001825A 4A00                       		tst.b	d0
0001825C 6A00                       		bpl.s	loc_16456
0001825E 1228 0039                  		move.b	$39(a0),d1
00018262 5901                       		subq.b	#4,d1
00018264                            
00018264                            loc_16456:
00018264 1141 0038                  		move.b	d1,$38(a0)
00018268 2268 003C                  		movea.l	$3C(a0),a1
0001826C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00018272 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00018278 4A41                       		tst.w	d1
0001827A 6600                       		bne.s	loc_16474
0001827C 117C 0001 001C             		move.b	#1,$1C(a0)
00018282                            
00018282                            loc_16474:
00018282 0C41 0008                  		cmpi.w	#8,d1
00018286 6600                       		bne.s	loc_16480
00018288 117C 0000 001C             		move.b	#0,$1C(a0)
0001828E                            
0001828E                            loc_16480:
0001828E 6100 BC98                  		bsr.w	Obj63_ChangeDir
00018292                            
00018292                            loc_16484:
00018292 4EF9 0000 EFA0             		jmp	SpeedToPos
00018298                            ; ===========================================================================
00018298                            Ani_obj6F:
00018298                            	include "_anim\obj6F.asm"
00018298                            ; ---------------------------------------------------------------------------
00018298                            ; Animation script - platform on conveyor belt (SBZ)
00018298                            ; ---------------------------------------------------------------------------
00018298 0000                       		dc.w byte_1648E-Ani_obj6F
0001829A 0000                       		dc.w byte_164A2-Ani_obj6F
0001829C 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000182A9 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000182B0 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000182B4 00                         		even
000182B4 00                         		even
000182B4                            
000182B4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000182BA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000182C0 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000182D4 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000182E8 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000182FC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018310 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018324 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018338                            ; ===========================================================================
00018338                            ; ---------------------------------------------------------------------------
00018338                            ; Object 70 - large girder block (SBZ)
00018338                            ; ---------------------------------------------------------------------------
00018338                            
00018338                            Obj70:					; XREF: Obj_Index
00018338 7000                       		moveq	#0,d0
0001833A 1028 0024                  		move.b	$24(a0),d0
0001833E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018342 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00018346                            ; ===========================================================================
00018346 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00018348 0000                       		dc.w Obj70_Action-Obj70_Index
0001834A                            ; ===========================================================================
0001834A                            
0001834A                            Obj70_Main:				; XREF: Obj70_Index
0001834A 5428 0024                  		addq.b	#2,$24(a0)
0001834E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00018356 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001835C 0028 0004 0001             		ori.b	#4,1(a0)
00018362 117C 0004 0018             		move.b	#4,$18(a0)
00018368 117C 0060 0019             		move.b	#$60,$19(a0)
0001836E 117C 0018 0016             		move.b	#$18,$16(a0)
00018374 3168 0008 0032             		move.w	8(a0),$32(a0)
0001837A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018380 6100 0000                  		bsr.w	Obj70_Move2
00018384                            
00018384                            Obj70_Action:				; XREF: Obj70_Index
00018384 3F28 0008                  		move.w	8(a0),-(sp)
00018388 4A68 003A                  		tst.w	$3A(a0)
0001838C 6700                       		beq.s	Obj70_Move
0001838E 5368 003A                  		subq.w	#1,$3A(a0)
00018392 6600                       		bne.s	Obj70_Solid
00018394                            
00018394                            Obj70_Move:
00018394 4EB9 0000 EFA0             		jsr	SpeedToPos
0001839A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001839E 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000183A0 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000183A4                            
000183A4                            Obj70_Solid:
000183A4 381F                       		move.w	(sp)+,d4
000183A6 4A28 0001                  		tst.b	1(a0)
000183AA 6A00                       		bpl.s	Obj70_ChkDel
000183AC 7200                       		moveq	#0,d1
000183AE 1228 0019                  		move.b	$19(a0),d1
000183B2 0641 000B                  		addi.w	#$B,d1
000183B6 7400                       		moveq	#0,d2
000183B8 1428 0016                  		move.b	$16(a0),d2
000183BC 3602                       		move.w	d2,d3
000183BE 5243                       		addq.w	#1,d3
000183C0 6100 8FDA                  		bsr.w	SolidObject
000183C4                            
000183C4                            Obj70_ChkDel:
000183C4 3028 0032                  		move.w	$32(a0),d0
000183C8 0240 FF80                  		andi.w	#$FF80,d0
000183CC 3238 F700                  		move.w	($FFFFF700).w,d1
000183D0 0441 0080                  		subi.w	#$80,d1
000183D4 0241 FF80                  		andi.w	#$FF80,d1
000183D8 9041                       		sub.w	d1,d0
000183DA 0C40 0280                  		cmpi.w	#$280,d0
000183DE 6200                       		bhi.s	Obj70_Delete
000183E0 4EF9 0000 EFBA             		jmp	DisplaySprite
000183E6                            ; ===========================================================================
000183E6                            
000183E6                            Obj70_Delete:
000183E6 4EF9 0000 EFF6             		jmp	DeleteObject
000183EC                            ; ===========================================================================
000183EC                            
000183EC                            Obj70_Move2:				; XREF: Obj70_Main
000183EC 1028 0038                  		move.b	$38(a0),d0
000183F0 0240 0018                  		andi.w	#$18,d0
000183F4 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000183FA 43F1 0000                  		lea	(a1,d0.w),a1
000183FE 3159 0010                  		move.w	(a1)+,$10(a0)
00018402 3159 0012                  		move.w	(a1)+,$12(a0)
00018406 3159 0034                  		move.w	(a1)+,$34(a0)
0001840A 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001840E 317C 0007 003A             		move.w	#7,$3A(a0)
00018414 4E75                       		rts	
00018416                            ; ===========================================================================
00018416 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001841E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00018426 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001842E 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018436                            ; ---------------------------------------------------------------------------
00018436                            ; Sprite mappings - large girder block (SBZ)
00018436                            ; ---------------------------------------------------------------------------
00018436                            Map_obj70:
00018436                            	include "_maps\obj70.asm"
00018436                            ; ---------------------------------------------------------------------------
00018436                            ; Sprite mappings - large girder block (SBZ)
00018436                            ; ---------------------------------------------------------------------------
00018436 0000                       		dc.w byte_1662A-Map_obj70
00018438 0C                         byte_1662A:	dc.b $C
00018439 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001843E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018443 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018448 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001844D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018452 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018457 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001845C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018461 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018466 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001846B E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018470 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018476 00                         		even
00018476 00                         		even
00018476                            
00018476                            ; ===========================================================================
00018476                            ; ---------------------------------------------------------------------------
00018476                            ; Object 72 - teleporter (SBZ)
00018476                            ; ---------------------------------------------------------------------------
00018476                            
00018476                            Obj72:					; XREF: Obj_Index
00018476 7000                       		moveq	#0,d0
00018478 1028 0024                  		move.b	$24(a0),d0
0001847C 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018480 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018484 3028 0008                  		move.w	8(a0),d0
00018488 0240 FF80                  		andi.w	#$FF80,d0
0001848C 3238 F700                  		move.w	($FFFFF700).w,d1
00018490 0441 0080                  		subi.w	#$80,d1
00018494 0241 FF80                  		andi.w	#$FF80,d1
00018498 9041                       		sub.w	d1,d0
0001849A 0C40 0280                  		cmpi.w	#$280,d0
0001849E 6200                       		bhi.s	Obj72_Delete
000184A0 4E75                       		rts	
000184A2                            ; ===========================================================================
000184A2                            
000184A2                            Obj72_Delete:
000184A2 4EF9 0000 EFF6             		jmp	DeleteObject
000184A8                            ; ===========================================================================
000184A8 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000184AA 0000                       		dc.w loc_166C8-Obj72_Index
000184AC 0000                       		dc.w loc_1675E-Obj72_Index
000184AE 0000                       		dc.w loc_16798-Obj72_Index
000184B0                            ; ===========================================================================
000184B0                            
000184B0                            Obj72_Main:				; XREF: Obj72_Index
000184B0 5428 0024                  		addq.b	#2,$24(a0)
000184B4 1028 0028                  		move.b	$28(a0),d0
000184B8 D040                       		add.w	d0,d0
000184BA 0240 001E                  		andi.w	#$1E,d0
000184BE 45FA 0000                  		lea	Obj72_Data(pc),a2
000184C2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000184C6 315A 003A                  		move.w	(a2)+,$3A(a0)
000184CA 214A 003C                  		move.l	a2,$3C(a0)
000184CE 315A 0036                  		move.w	(a2)+,$36(a0)
000184D2 315A 0038                  		move.w	(a2)+,$38(a0)
000184D6                            
000184D6                            loc_166C8:				; XREF: Obj72_Index
000184D6 43F8 D000                  		lea	($FFFFD000).w,a1
000184DA 3029 0008                  		move.w	8(a1),d0
000184DE 9068 0008                  		sub.w	8(a0),d0
000184E2 0828 0000 0022             		btst	#0,$22(a0)
000184E8 6700                       		beq.s	loc_166E0
000184EA 0640 000F                  		addi.w	#$F,d0
000184EE                            
000184EE                            loc_166E0:
000184EE 0C40 0010                  		cmpi.w	#$10,d0
000184F2 6400                       		bcc.s	locret_1675C
000184F4 3229 000C                  		move.w	$C(a1),d1
000184F8 9268 000C                  		sub.w	$C(a0),d1
000184FC 0641 0020                  		addi.w	#$20,d1
00018500 0C41 0040                  		cmpi.w	#$40,d1
00018504 6400                       		bcc.s	locret_1675C
00018506 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001850A 6600                       		bne.s	locret_1675C
0001850C 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018512 6600                       		bne.s	loc_1670E
00018514 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001851A 6500                       		bcs.s	locret_1675C
0001851C                            
0001851C                            loc_1670E:
0001851C 5428 0024                  		addq.b	#2,$24(a0)
00018520 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018526 137C 001A 001C             		move.b	#$1A,$1C(a1)	; use Sonic's hurt animation
0001852C 337C 0800 0014             		move.w	#$800,$14(a1)
00018532 337C 0000 0010             		move.w	#0,$10(a1)
00018538 337C 0000 0012             		move.w	#0,$12(a1)
0001853E 08A8 0005 0022             		bclr	#5,$22(a0)
00018544 08A9 0005 0022             		bclr	#5,$22(a1)
0001854A 08E9 0001 0022             		bset	#1,$22(a1)
00018550 3368 0008 0008             		move.w	8(a0),8(a1)
00018556 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001855C 4228 0032                  		clr.b	$32(a0)
00018560 303C 00BE                  		move.w	#$BE,d0
00018564 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001856A                            
0001856A                            locret_1675C:
0001856A 4E75                       		rts	
0001856C                            ; ===========================================================================
0001856C                            
0001856C                            loc_1675E:				; XREF: Obj72_Index
0001856C 43F8 D000                  		lea	($FFFFD000).w,a1
00018570 1028 0032                  		move.b	$32(a0),d0
00018574 5428 0032                  		addq.b	#2,$32(a0)
00018578 4EB9 0000 287A             		jsr	(CalcSine).l
0001857E EA40                       		asr.w	#5,d0
00018580 3428 000C                  		move.w	$C(a0),d2
00018584 9440                       		sub.w	d0,d2
00018586 3342 000C                  		move.w	d2,$C(a1)
0001858A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018590 6600                       		bne.s	locret_16796
00018592 6100 0000                  		bsr.w	sub_1681C
00018596 5428 0024                  		addq.b	#2,$24(a0)
0001859A 303C 00BC                  		move.w	#$BC,d0
0001859E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play teleport sound
000185A4                            
000185A4                            locret_16796:
000185A4 4E75                       		rts	
000185A6                            ; ===========================================================================
000185A6                            
000185A6                            loc_16798:				; XREF: Obj72_Index
000185A6 588F                       		addq.l	#4,sp
000185A8 43F8 D000                  		lea	($FFFFD000).w,a1
000185AC 5328 002E                  		subq.b	#1,$2E(a0)
000185B0 6A00                       		bpl.s	loc_167DA
000185B2 3368 0036 0008             		move.w	$36(a0),8(a1)
000185B8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000185BE 7200                       		moveq	#0,d1
000185C0 1228 003A                  		move.b	$3A(a0),d1
000185C4 5801                       		addq.b	#4,d1
000185C6 B228 003B                  		cmp.b	$3B(a0),d1
000185CA 6500                       		bcs.s	loc_167C2
000185CC 7200                       		moveq	#0,d1
000185CE 6000                       		bra.s	loc_16800
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            loc_167C2:
000185D0 1141 003A                  		move.b	d1,$3A(a0)
000185D4 2468 003C                  		movea.l	$3C(a0),a2
000185D8 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000185DE 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000185E4 6000 0000                  		bra.w	sub_1681C
000185E8                            ; ===========================================================================
000185E8                            
000185E8                            loc_167DA:
000185E8 2429 0008                  		move.l	8(a1),d2
000185EC 2629 000C                  		move.l	$C(a1),d3
000185F0 3029 0010                  		move.w	$10(a1),d0
000185F4 48C0                       		ext.l	d0
000185F6 E180                       		asl.l	#8,d0
000185F8 D480                       		add.l	d0,d2
000185FA 3029 0012                  		move.w	$12(a1),d0
000185FE 48C0                       		ext.l	d0
00018600 E180                       		asl.l	#8,d0
00018602 D680                       		add.l	d0,d3
00018604 2342 0008                  		move.l	d2,8(a1)
00018608 2343 000C                  		move.l	d3,$C(a1)
0001860C 4E75                       		rts	
0001860E                            ; ===========================================================================
0001860E                            
0001860E                            loc_16800:
0001860E 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018614 4228 0024                  		clr.b	$24(a0)
00018618 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001861C 337C 0000 0010             		move.w	#0,$10(a1)
00018622 337C 0200 0012             		move.w	#$200,$12(a1)
00018628 4E75                       		rts	
0001862A                            
0001862A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001862A                            
0001862A                            
0001862A                            sub_1681C:
0001862A 7000                       		moveq	#0,d0
0001862C 343C 1000                  		move.w	#$1000,d2
00018630 3028 0036                  		move.w	$36(a0),d0
00018634 9069 0008                  		sub.w	8(a1),d0
00018638 6C00                       		bge.s	loc_16830
0001863A 4440                       		neg.w	d0
0001863C 4442                       		neg.w	d2
0001863E                            
0001863E                            loc_16830:
0001863E 7200                       		moveq	#0,d1
00018640 363C 1000                  		move.w	#$1000,d3
00018644 3228 0038                  		move.w	$38(a0),d1
00018648 9269 000C                  		sub.w	$C(a1),d1
0001864C 6C00                       		bge.s	loc_16844
0001864E 4441                       		neg.w	d1
00018650 4443                       		neg.w	d3
00018652                            
00018652                            loc_16844:
00018652 B240                       		cmp.w	d0,d1
00018654 6500                       		bcs.s	loc_1687A
00018656 7200                       		moveq	#0,d1
00018658 3228 0038                  		move.w	$38(a0),d1
0001865C 9269 000C                  		sub.w	$C(a1),d1
00018660 4841                       		swap	d1
00018662 83C3                       		divs.w	d3,d1
00018664 7000                       		moveq	#0,d0
00018666 3028 0036                  		move.w	$36(a0),d0
0001866A 9069 0008                  		sub.w	8(a1),d0
0001866E 6700                       		beq.s	loc_16866
00018670 4840                       		swap	d0
00018672 81C1                       		divs.w	d1,d0
00018674                            
00018674                            loc_16866:
00018674 3340 0010                  		move.w	d0,$10(a1)
00018678 3343 0012                  		move.w	d3,$12(a1)
0001867C 4A41                       		tst.w	d1
0001867E 6A00                       		bpl.s	loc_16874
00018680 4441                       		neg.w	d1
00018682                            
00018682                            loc_16874:
00018682 3141 002E                  		move.w	d1,$2E(a0)
00018686 4E75                       		rts	
00018688                            ; ===========================================================================
00018688                            
00018688                            loc_1687A:
00018688 7000                       		moveq	#0,d0
0001868A 3028 0036                  		move.w	$36(a0),d0
0001868E 9069 0008                  		sub.w	8(a1),d0
00018692 4840                       		swap	d0
00018694 81C2                       		divs.w	d2,d0
00018696 7200                       		moveq	#0,d1
00018698 3228 0038                  		move.w	$38(a0),d1
0001869C 9269 000C                  		sub.w	$C(a1),d1
000186A0 6700                       		beq.s	loc_16898
000186A2 4841                       		swap	d1
000186A4 83C0                       		divs.w	d0,d1
000186A6                            
000186A6                            loc_16898:
000186A6 3341 0012                  		move.w	d1,$12(a1)
000186AA 3342 0010                  		move.w	d2,$10(a1)
000186AE 4A40                       		tst.w	d0
000186B0 6A00                       		bpl.s	loc_168A6
000186B2 4440                       		neg.w	d0
000186B4                            
000186B4                            loc_168A6:
000186B4 3140 002E                  		move.w	d0,$2E(a0)
000186B8 4E75                       		rts	
000186BA                            ; End of function sub_1681C
000186BA                            
000186BA                            ; ===========================================================================
000186BA 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000186C0 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000186C6 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000186CA 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000186D0 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000186D6 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000186DC 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000186E2 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000186E8 0884 0298 0894             		dc.w $884, $298, $894
000186EE 0270 0894 0190             		dc.w $270, $894, $190
000186F4 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000186FA 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018700 1184 0498 1158             		dc.w $1184, $498, $1158
00018706 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001870C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018712 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018718 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001871E 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018724 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001872A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018730 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018736 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001873C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018742                            ; ===========================================================================
00018742                            ; ---------------------------------------------------------------------------
00018742                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018742                            ; ---------------------------------------------------------------------------
00018742                            
00018742                            Obj78:					; XREF: Obj_Index
00018742 7000                       		moveq	#0,d0
00018744 1028 0024                  		move.b	$24(a0),d0
00018748 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001874C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018750                            ; ===========================================================================
00018750 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018752 0000                       		dc.w Obj78_Action-Obj78_Index
00018754 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018756 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018758 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001875A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001875C 0000                       		dc.w loc_16CC0-Obj78_Index
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            locret_16950:
0001875E 4E75                       		rts	
00018760                            ; ===========================================================================
00018760                            
00018760                            Obj78_Main:				; XREF: Obj78_Index
00018760 117C 0007 0016             		move.b	#7,$16(a0)
00018766 117C 0008 0017             		move.b	#8,$17(a0)
0001876C 4EB9 0000 EF80             		jsr	ObjectFall
00018772 4EBA E4B6                  		jsr	ObjHitFloor
00018776 4A41                       		tst.w	d1
00018778 6AE4                       		bpl.s	locret_16950
0001877A D368 000C                  		add.w	d1,$C(a0)
0001877E 4268 0012                  		clr.w	$12(a0)
00018782 5428 0024                  		addq.b	#2,$24(a0)
00018786 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001878E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018794 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001879A 6700                       		beq.s	loc_16996
0001879C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000187A2                            
000187A2                            loc_16996:
000187A2 0228 0003 0001             		andi.b	#3,1(a0)
000187A8 0028 0004 0001             		ori.b	#4,1(a0)
000187AE 1168 0001 0022             		move.b	1(a0),$22(a0)
000187B4 117C 0004 0018             		move.b	#4,$18(a0)
000187BA 117C 0008 0019             		move.b	#8,$19(a0)
000187C0 117C 000B 0020             		move.b	#$B,$20(a0)
000187C6 3428 0008                  		move.w	8(a0),d2
000187CA 7A0C                       		moveq	#$C,d5
000187CC 0828 0000 0022             		btst	#0,$22(a0)
000187D2 6700                       		beq.s	loc_169CA
000187D4 4445                       		neg.w	d5
000187D6                            
000187D6                            loc_169CA:
000187D6 1C3C 0004                  		move.b	#4,d6
000187DA 7600                       		moveq	#0,d3
000187DC 7804                       		moveq	#4,d4
000187DE 2448                       		movea.l	a0,a2
000187E0 7202                       		moveq	#2,d1
000187E2                            
000187E2                            Obj78_LoadBody:
000187E2 4EB9 0000 F464             		jsr	SingleObjLoad2
000187E8 6600                       		bne.s	Obj78_QuitLoad
000187EA 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000187EE 1346 0024                  		move.b	d6,$24(a1)
000187F2 5406                       		addq.b	#2,d6
000187F4 2368 0004 0004             		move.l	4(a0),4(a1)
000187FA 3368 0002 0002             		move.w	2(a0),2(a1)
00018800 137C 0005 0018             		move.b	#5,$18(a1)
00018806 137C 0008 0019             		move.b	#8,$19(a1)
0001880C 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018812 D445                       		add.w	d5,d2
00018814 3342 0008                  		move.w	d2,8(a1)
00018818 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001881E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018824 1368 0022 0001             		move.b	$22(a0),1(a1)
0001882A 137C 0008 001A             		move.b	#8,$1A(a1)
00018830 234A 003C                  		move.l	a2,$3C(a1)
00018834 1344 003C                  		move.b	d4,$3C(a1)
00018838 5804                       		addq.b	#4,d4
0001883A 2449                       		movea.l	a1,a2
0001883C                            
0001883C                            Obj78_QuitLoad:
0001883C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018840                            
00018840 117C 0007 002A             		move.b	#7,$2A(a0)
00018846 4228 003C                  		clr.b	$3C(a0)
0001884A                            
0001884A                            Obj78_Action:				; XREF: Obj78_Index
0001884A 4A28 0022                  		tst.b	$22(a0)
0001884E 6B00 0000                  		bmi.w	loc_16C96
00018852 7000                       		moveq	#0,d0
00018854 1028 0025                  		move.b	$25(a0),d0
00018858 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001885C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018860 1228 002B                  		move.b	$2B(a0),d1
00018864 6A00                       		bpl.s	Obj78_Display
00018866 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001886C 1028 0026                  		move.b	$26(a0),d0
00018870 0240 007F                  		andi.w	#$7F,d0
00018874 5828 0026                  		addq.b	#4,$26(a0)
00018878 1031 0000                  		move.b	(a1,d0.w),d0
0001887C 6A00                       		bpl.s	Obj78_AniHead
0001887E 08A8 0007 002B             		bclr	#7,$2B(a0)
00018884 6000                       		bra.s	Obj78_Display
00018886                            ; ===========================================================================
00018886                            
00018886                            Obj78_AniHead:
00018886 0201 0010                  		andi.b	#$10,d1
0001888A D001                       		add.b	d1,d0
0001888C 1140 001A                  		move.b	d0,$1A(a0)
00018890                            
00018890                            Obj78_Display:
00018890 3028 0008                  		move.w	8(a0),d0
00018894 0240 FF80                  		andi.w	#$FF80,d0
00018898 3238 F700                  		move.w	($FFFFF700).w,d1
0001889C 0441 0080                  		subi.w	#$80,d1
000188A0 0241 FF80                  		andi.w	#$FF80,d1
000188A4 9041                       		sub.w	d1,d0
000188A6 0C40 0280                  		cmpi.w	#$280,d0
000188AA 6200 0000                  		bhi.w	Obj78_ChkGone
000188AE 4EF9 0000 EFBA             		jmp	DisplaySprite
000188B4                            ; ===========================================================================
000188B4                            
000188B4                            Obj78_ChkGone:
000188B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188B8 7000                       		moveq	#0,d0
000188BA 1028 0023                  		move.b	$23(a0),d0
000188BE 6700                       		beq.s	loc_16ABC
000188C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000188C6                            
000188C6                            loc_16ABC:
000188C6 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000188CC 4E75                       		rts	
000188CE                            ; ===========================================================================
000188CE                            
000188CE                            Obj78_Delete:				; XREF: Obj78_Index
000188CE 4EF9 0000 EFF6             		jmp	DeleteObject
000188D4                            ; ===========================================================================
000188D4 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000188D6 0000                       		dc.w loc_16B02-Obj78_Index2
000188D8                            ; ===========================================================================
000188D8                            
000188D8                            Obj78_Move:				; XREF: Obj78_Index2
000188D8 5328 002A                  		subq.b	#1,$2A(a0)
000188DC 6B00                       		bmi.s	Obj78_Move2
000188DE 4E75                       		rts	
000188E0                            ; ===========================================================================
000188E0                            
000188E0                            Obj78_Move2:
000188E0 5428 0025                  		addq.b	#2,$25(a0)
000188E4 117C 0010 002A             		move.b	#$10,$2A(a0)
000188EA 317C FF40 0010             		move.w	#-$C0,$10(a0)
000188F0 317C 0040 0014             		move.w	#$40,$14(a0)
000188F6 0868 0004 002B             		bchg	#4,$2B(a0)
000188FC 6600                       		bne.s	loc_16AFC
000188FE 4268 0010                  		clr.w	$10(a0)
00018902 4468 0014                  		neg.w	$14(a0)
00018906                            
00018906                            loc_16AFC:
00018906 08E8 0007 002B             		bset	#7,$2B(a0)
0001890C                            
0001890C                            loc_16B02:				; XREF: Obj78_Index2
0001890C 5328 002A                  		subq.b	#1,$2A(a0)
00018910 6B00                       		bmi.s	loc_16B5E
00018912 2F28 0008                  		move.l	8(a0),-(sp)
00018916 2428 0008                  		move.l	8(a0),d2
0001891A 3028 0010                  		move.w	$10(a0),d0
0001891E 0828 0000 0022             		btst	#0,$22(a0)
00018924 6700                       		beq.s	loc_16B1E
00018926 4440                       		neg.w	d0
00018928                            
00018928                            loc_16B1E:
00018928 48C0                       		ext.l	d0
0001892A E180                       		asl.l	#8,d0
0001892C D480                       		add.l	d0,d2
0001892E 2142 0008                  		move.l	d2,8(a0)
00018932 4EBA E2F6                  		jsr	ObjHitFloor
00018936 241F                       		move.l	(sp)+,d2
00018938 0C41 FFF8                  		cmpi.w	#-8,d1
0001893C 6D00                       		blt.s	loc_16B70
0001893E 0C41 000C                  		cmpi.w	#$C,d1
00018942 6C00                       		bge.s	loc_16B70
00018944 D368 000C                  		add.w	d1,$C(a0)
00018948 4842                       		swap	d2
0001894A B468 0008                  		cmp.w	8(a0),d2
0001894E 6700                       		beq.s	locret_16B5C
00018950 7000                       		moveq	#0,d0
00018952 1028 003C                  		move.b	$3C(a0),d0
00018956 5228 003C                  		addq.b	#1,$3C(a0)
0001895A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018960 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018964                            
00018964                            locret_16B5C:
00018964 4E75                       		rts	
00018966                            ; ===========================================================================
00018966                            
00018966                            loc_16B5E:
00018966 5528 0025                  		subq.b	#2,$25(a0)
0001896A 117C 0007 002A             		move.b	#7,$2A(a0)
00018970 317C 0000 0010             		move.w	#0,$10(a0)
00018976 4E75                       		rts	
00018978                            ; ===========================================================================
00018978                            
00018978                            loc_16B70:
00018978 2142 0008                  		move.l	d2,8(a0)
0001897C 0868 0000 0022             		bchg	#0,$22(a0)
00018982 1168 0022 0001             		move.b	$22(a0),1(a0)
00018988 7000                       		moveq	#0,d0
0001898A 1028 003C                  		move.b	$3C(a0),d0
0001898E 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018994 5228 003C                  		addq.b	#1,$3C(a0)
00018998 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001899E 4E75                       		rts	
000189A0                            ; ===========================================================================
000189A0                            
000189A0                            Obj78_BodySeg2:				; XREF: Obj78_Index
000189A0 2268 003C                  		movea.l	$3C(a0),a1
000189A4 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000189AA 6A00                       		bpl.s	Obj78_BodySeg1
000189AC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000189B2 1028 0026                  		move.b	$26(a0),d0
000189B6 0240 007F                  		andi.w	#$7F,d0
000189BA 5828 0026                  		addq.b	#4,$26(a0)
000189BE 4A31 0004                  		tst.b	4(a1,d0.w)
000189C2 6A00                       		bpl.s	Obj78_AniBody
000189C4 5828 0026                  		addq.b	#4,$26(a0)
000189C8                            
000189C8                            Obj78_AniBody:
000189C8 1031 0000                  		move.b	(a1,d0.w),d0
000189CC 5000                       		addq.b	#8,d0
000189CE 1140 001A                  		move.b	d0,$1A(a0)
000189D2                            
000189D2                            Obj78_BodySeg1:				; XREF: Obj78_Index
000189D2 2268 003C                  		movea.l	$3C(a0),a1
000189D6 4A28 0022                  		tst.b	$22(a0)
000189DA 6B00 0000                  		bmi.w	loc_16C90
000189DE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000189E4 1169 0025 0025             		move.b	$25(a1),$25(a0)
000189EA 6700 0000                  		beq.w	loc_16C64
000189EE 3169 0014 0014             		move.w	$14(a1),$14(a0)
000189F4 3029 0010                  		move.w	$10(a1),d0
000189F8 D069 0014                  		add.w	$14(a1),d0
000189FC 3140 0010                  		move.w	d0,$10(a0)
00018A00 2428 0008                  		move.l	8(a0),d2
00018A04 2602                       		move.l	d2,d3
00018A06 3028 0010                  		move.w	$10(a0),d0
00018A0A 0828 0000 0022             		btst	#0,$22(a0)
00018A10 6700                       		beq.s	loc_16C0C
00018A12 4440                       		neg.w	d0
00018A14                            
00018A14                            loc_16C0C:
00018A14 48C0                       		ext.l	d0
00018A16 E180                       		asl.l	#8,d0
00018A18 D480                       		add.l	d0,d2
00018A1A 2142 0008                  		move.l	d2,8(a0)
00018A1E 4843                       		swap	d3
00018A20 B668 0008                  		cmp.w	8(a0),d3
00018A24 6700                       		beq.s	loc_16C64
00018A26 7000                       		moveq	#0,d0
00018A28 1028 003C                  		move.b	$3C(a0),d0
00018A2C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018A30 0C01 0080                  		cmpi.b	#-$80,d1
00018A34 6600                       		bne.s	loc_16C50
00018A36 4843                       		swap	d3
00018A38 2143 0008                  		move.l	d3,8(a0)
00018A3C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018A40 0868 0000 0022             		bchg	#0,$22(a0)
00018A46 1168 0022 0001             		move.b	$22(a0),1(a0)
00018A4C 5228 003C                  		addq.b	#1,$3C(a0)
00018A50 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018A56 6000                       		bra.s	loc_16C64
00018A58                            ; ===========================================================================
00018A58                            
00018A58                            loc_16C50:
00018A58 4881                       		ext.w	d1
00018A5A D368 000C                  		add.w	d1,$C(a0)
00018A5E 5228 003C                  		addq.b	#1,$3C(a0)
00018A62 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018A68 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018A6C                            
00018A6C                            loc_16C64:
00018A6C 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018A72 6700                       		beq.s	loc_16C90
00018A74 0C11 0027                  		cmpi.b	#$27,0(a1)
00018A78 6700                       		beq.s	loc_16C7C
00018A7A 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018A80 6600                       		bne.s	loc_16C82
00018A82                            
00018A82                            loc_16C7C:
00018A82 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018A86 117C 000A 0024             		move.b	#$A,$24(a0)
00018A8C                            
00018A8C                            loc_16C82:
00018A8C 4EF9 0000 EFBA             		jmp	DisplaySprite
00018A92                            
00018A92                            ; ===========================================================================
00018A92 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018A9A                            ; ===========================================================================
00018A9A                            
00018A9A                            loc_16C90:
00018A9A 08E9 0007 0022             		bset	#7,$22(a1)
00018AA0                            
00018AA0                            loc_16C96:
00018AA0 7000                       		moveq	#0,d0
00018AA2 1028 0024                  		move.b	$24(a0),d0
00018AA6 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018AAA 0828 0000 0022             		btst	#0,$22(a0)
00018AB0 6700                       		beq.s	loc_16CAA
00018AB2 4440                       		neg.w	d0
00018AB4                            
00018AB4                            loc_16CAA:
00018AB4 3140 0010                  		move.w	d0,$10(a0)
00018AB8 317C FC00 0012             		move.w	#-$400,$12(a0)
00018ABE 117C 000C 0024             		move.b	#$C,$24(a0)
00018AC4 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018ACA                            
00018ACA                            loc_16CC0:				; XREF: Obj78_Index
00018ACA 4EB9 0000 EF80             		jsr	ObjectFall
00018AD0 4A68 0012                  		tst.w	$12(a0)
00018AD4 6B00                       		bmi.s	loc_16CE0
00018AD6 4EBA E152                  		jsr	ObjHitFloor
00018ADA 4A41                       		tst.w	d1
00018ADC 6A00                       		bpl.s	loc_16CE0
00018ADE D368 000C                  		add.w	d1,$C(a0)
00018AE2 317C FC00 0012             		move.w	#-$400,$12(a0)
00018AE8                            
00018AE8                            loc_16CE0:
00018AE8 4A28 0001                  		tst.b	1(a0)
00018AEC 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018AF0 4EF9 0000 EFBA             		jmp	DisplaySprite
00018AF6                            ; ===========================================================================
00018AF6                            Ani_obj78:
00018AF6                            	include "_anim\obj78.asm"
00018AF6                            ; ---------------------------------------------------------------------------
00018AF6                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018AF6                            ; ---------------------------------------------------------------------------
00018AF6 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018B06 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018B16 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018B26 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018B36 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018B46 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018B56 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018B66 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018B76                            	even
00018B76                            	even
00018B76                            
00018B76                            ; ---------------------------------------------------------------------------
00018B76                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B76                            ; ---------------------------------------------------------------------------
00018B76                            Map_obj78:
00018B76                            	include "_maps\obj78.asm"
00018B76                            ; ---------------------------------------------------------------------------
00018B76                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B76                            ; ---------------------------------------------------------------------------
00018B76 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018B7A 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018B7E 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018B82 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018B86 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018B8A 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018B8E 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018B92 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018B96 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018B9A 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018B9E 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018BA2 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018BA6 01                         byte_16D9E:	dc.b 1
00018BA7 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018BAC 01                         byte_16DA4:	dc.b 1
00018BAD F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018BB2 01                         byte_16DAA:	dc.b 1
00018BB3 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018BB8 01                         byte_16DB0:	dc.b 1
00018BB9 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018BBE 01                         byte_16DB6:	dc.b 1
00018BBF EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018BC4 01                         byte_16DBC:	dc.b 1
00018BC5 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018BCA 01                         byte_16DC2:	dc.b 1
00018BCB EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018BD0 01                         byte_16DC8:	dc.b 1
00018BD1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018BD6 01                         byte_16DCE:	dc.b 1
00018BD7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018BDC 01                         byte_16DD4:	dc.b 1
00018BDD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018BE2 01                         byte_16DDA:	dc.b 1
00018BE3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018BE8 01                         byte_16DE0:	dc.b 1
00018BE9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018BEE 01                         byte_16DE6:	dc.b 1
00018BEF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018BF4 01                         byte_16DEC:	dc.b 1
00018BF5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018BFA 01                         byte_16DF2:	dc.b 1
00018BFB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018C00 01                         byte_16DF8:	dc.b 1
00018C01 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018C06 01                         byte_16DFE:	dc.b 1
00018C07 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018C0C 01                         byte_16E04:	dc.b 1
00018C0D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018C12 01                         byte_16E0A:	dc.b 1
00018C13 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018C18 01                         byte_16E10:	dc.b 1
00018C19 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018C1E 01                         byte_16E16:	dc.b 1
00018C1F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018C24 01                         byte_16E1C:	dc.b 1
00018C25 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018C2A 01                         byte_16E22:	dc.b 1
00018C2B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018C30 01                         byte_16E28:	dc.b 1
00018C31 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018C36                            		even
00018C36                            		even
00018C36                            
00018C36                            ; ===========================================================================
00018C36                            ; ---------------------------------------------------------------------------
00018C36                            ; Object 79 - lamppost
00018C36                            ; ---------------------------------------------------------------------------
00018C36                            
00018C36                            Obj79:					; XREF: Obj_Index
00018C36 7000                       		moveq	#0,d0
00018C38 1028 0024                  		move.b	$24(a0),d0
00018C3C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018C40 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018C44 4EFA 842E                  		jmp	MarkObjGone
00018C48                            ; ===========================================================================
00018C48 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018C4A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018C4C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018C4E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018C50                            ; ===========================================================================
00018C50                            
00018C50                            Obj79_Main:				; XREF: Obj79_Index
00018C50 5428 0024                  		addq.b	#2,$24(a0)
00018C54 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018C5C 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018C62 117C 0004 0001             		move.b	#4,1(a0)
00018C68 117C 0008 0019             		move.b	#8,$19(a0)
00018C6E 117C 0005 0018             		move.b	#5,$18(a0)
00018C74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018C78 7000                       		moveq	#0,d0
00018C7A 1028 0023                  		move.b	$23(a0),d0
00018C7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C84 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018C8A 6600                       		bne.s	Obj79_RedLamp
00018C8C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018C90 0201 007F                  		andi.b	#$7F,d1
00018C94 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018C98 0202 007F                  		andi.b	#$7F,d2
00018C9C B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018C9E 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018CA0                            
00018CA0                            Obj79_RedLamp:
00018CA0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018CA6 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018CAC 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018CB2 4E75                       		rts	
00018CB4                            ; ===========================================================================
00018CB4                            
00018CB4                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018CB4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018CB8 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018CBC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018CC0 6B00 0000                  		bmi.w	locret_16F90
00018CC4 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018CC8 0201 007F                  		andi.b	#$7F,d1
00018CCC 1428 0028                  		move.b	$28(a0),d2
00018CD0 0202 007F                  		andi.b	#$7F,d2
00018CD4 B202                       		cmp.b	d2,d1
00018CD6 6500                       		bcs.s	Obj79_HitLamp
00018CD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018CDC 7000                       		moveq	#0,d0
00018CDE 1028 0023                  		move.b	$23(a0),d0
00018CE2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018CE8 117C 0004 0024             		move.b	#4,$24(a0)
00018CEE 117C 0003 001A             		move.b	#3,$1A(a0)
00018CF4 6000 0000                  		bra.w	locret_16F90
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            Obj79_HitLamp:
00018CF8 3038 D008                  		move.w	($FFFFD008).w,d0
00018CFC 9068 0008                  		sub.w	8(a0),d0
00018D00 5040                       		addq.w	#8,d0
00018D02 0C40 0010                  		cmpi.w	#$10,d0
00018D06 6400 0000                  		bcc.w	locret_16F90
00018D0A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018D0E 9068 000C                  		sub.w	$C(a0),d0
00018D12 0640 0040                  		addi.w	#$40,d0
00018D16 0C40 0068                  		cmpi.w	#$68,d0
00018D1A 6400                       		bcc.s	locret_16F90
00018D1C 303C 00A1                  		move.w	#$A1,d0
00018D20 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018D26 5428 0024                  		addq.b	#2,$24(a0)
00018D2A 4EB9 0000 F44E             		jsr	SingleObjLoad
00018D30 6600                       		bne.s	loc_16F76
00018D32 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018D36 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018D3C 3368 0008 0030             		move.w	8(a0),$30(a1)
00018D42 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018D48 0469 0018 0032             		subi.w	#$18,$32(a1)
00018D4E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018D56 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018D5C 137C 0004 0001             		move.b	#4,1(a1)
00018D62 137C 0008 0019             		move.b	#8,$19(a1)
00018D68 137C 0004 0018             		move.b	#4,$18(a1)
00018D6E 137C 0002 001A             		move.b	#2,$1A(a1)
00018D74 337C 0020 0036             		move.w	#$20,$36(a1)
00018D7A                            
00018D7A                            loc_16F76:
00018D7A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018D80 6100 0000                  		bsr.w	Obj79_StoreInfo
00018D84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018D88 7000                       		moveq	#0,d0
00018D8A 1028 0023                  		move.b	$23(a0),d0
00018D8E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D94                            
00018D94                            locret_16F90:
00018D94 4E75                       		rts	
00018D96                            ; ===========================================================================
00018D96                            
00018D96                            Obj79_AfterHit:				; XREF: Obj79_Index
00018D96 4E75                       		rts	
00018D98                            ; ===========================================================================
00018D98                            
00018D98                            Obj79_Twirl:				; XREF: Obj79_Index
00018D98 5368 0036                  		subq.w	#1,$36(a0)
00018D9C 6A00                       		bpl.s	loc_16FA0
00018D9E 117C 0004 0024             		move.b	#4,$24(a0)
00018DA4                            
00018DA4                            loc_16FA0:
00018DA4 1028 0026                  		move.b	$26(a0),d0
00018DA8 0428 0010 0026             		subi.b	#$10,$26(a0)
00018DAE 0400 0040                  		subi.b	#$40,d0
00018DB2 4EB9 0000 287A             		jsr	(CalcSine).l
00018DB8 C3FC 0C00                  		muls.w	#$C00,d1
00018DBC 4841                       		swap	d1
00018DBE D268 0030                  		add.w	$30(a0),d1
00018DC2 3141 0008                  		move.w	d1,8(a0)
00018DC6 C1FC 0C00                  		muls.w	#$C00,d0
00018DCA 4840                       		swap	d0
00018DCC D068 0032                  		add.w	$32(a0),d0
00018DD0 3140 000C                  		move.w	d0,$C(a0)
00018DD4 4E75                       		rts	
00018DD6                            ; ===========================================================================
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6                            ; Subroutine to	store information when you hit a lamppost
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6                            
00018DD6                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018DD6 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018DDC 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018DE2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018DE8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018DEE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018DF4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018DFA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018E00 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018E06 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018E0C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018E12 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018E18 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018E1E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018E24 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018E2A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018E30 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018E36 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018E3C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018E42 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018E48 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018E4E 4E75                       		rts	
00018E50                            
00018E50                            ; ---------------------------------------------------------------------------
00018E50                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018E50                            ; ---------------------------------------------------------------------------
00018E50                            
00018E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018E50                            
00018E50                            
00018E50                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018E50 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018E56 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018E5C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018E62 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018E68 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018E6E 4278 FE20                  		clr.w	($FFFFFE20).w
00018E72 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018E76 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018E7C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018E82 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018E86 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018E8C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018E92 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018E98 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018E9E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018EA4 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018EAA 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018EB0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018EB6 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018EBC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018EC2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018EC8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018ECE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018ED4 6600                       		bne.s	loc_170E4
00018ED6 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018EDC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018EE2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018EE8                            
00018EE8                            loc_170E4:
00018EE8 4A38 FE30                  		tst.b	($FFFFFE30).w
00018EEC 6A00                       		bpl.s	locret_170F6
00018EEE 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018EF2 0440 00A0                  		subi.w	#$A0,d0
00018EF6 31C0 F728                  		move.w	d0,($FFFFF728).w
00018EFA                            
00018EFA                            locret_170F6:
00018EFA 4E75                       		rts	
00018EFC                            ; End of function Obj79_LoadInfo
00018EFC                            
00018EFC                            ; ===========================================================================
00018EFC                            ; ---------------------------------------------------------------------------
00018EFC                            ; Sprite mappings - lamppost
00018EFC                            ; ---------------------------------------------------------------------------
00018EFC                            Map_obj79:
00018EFC                            	include "_maps\obj79.asm"
00018EFC                            ; ---------------------------------------------------------------------------
00018EFC                            ; Sprite mappings - lamppost
00018EFC                            ; ---------------------------------------------------------------------------
00018EFC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018F00 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018F04 06                         byte_17100:	dc.b 6
00018F05 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018F0A E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018F0F F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F14 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F19 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018F1E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018F23 04                         byte_1711F:	dc.b 4
00018F24 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018F29 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018F2E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F33 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F38 02                         byte_17134:	dc.b 2
00018F39 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018F3E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018F43 06                         byte_1713F:	dc.b 6
00018F44 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018F49 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018F4E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018F53 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018F58 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018F5D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018F62                            		even
00018F62                            		even
00018F62                            
00018F62                            ; ===========================================================================
00018F62                            ; ---------------------------------------------------------------------------
00018F62                            ; Object 7D - hidden points at the end of a level
00018F62                            ; ---------------------------------------------------------------------------
00018F62                            
00018F62                            Obj7D:					; XREF: Obj_Index
00018F62 7000                       		moveq	#0,d0
00018F64 1028 0024                  		move.b	$24(a0),d0
00018F68 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018F6C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018F70                            ; ===========================================================================
00018F70 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018F72 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018F74                            ; ===========================================================================
00018F74                            
00018F74                            Obj7D_Main:				; XREF: Obj7D_Index
00018F74 7410                       		moveq	#$10,d2
00018F76 3602                       		move.w	d2,d3
00018F78 D643                       		add.w	d3,d3
00018F7A 43F8 D000                  		lea	($FFFFD000).w,a1
00018F7E 3029 0008                  		move.w	8(a1),d0
00018F82 9068 0008                  		sub.w	8(a0),d0
00018F86 D042                       		add.w	d2,d0
00018F88 B043                       		cmp.w	d3,d0
00018F8A 6400                       		bcc.s	Obj7D_ChkDel
00018F8C 3229 000C                  		move.w	$C(a1),d1
00018F90 9268 000C                  		sub.w	$C(a0),d1
00018F94 D242                       		add.w	d2,d1
00018F96 B243                       		cmp.w	d3,d1
00018F98 6400                       		bcc.s	Obj7D_ChkDel
00018F9A 4A78 FE08                  		tst.w	($FFFFFE08).w
00018F9E 6600                       		bne.s	Obj7D_ChkDel
00018FA0 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018FA4 6600                       		bne.s	Obj7D_ChkDel
00018FA6 5428 0024                  		addq.b	#2,$24(a0)
00018FAA 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018FB2 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018FB8 0028 0004 0001             		ori.b	#4,1(a0)
00018FBE 117C 0000 0018             		move.b	#0,$18(a0)
00018FC4 117C 0010 0019             		move.b	#$10,$19(a0)
00018FCA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018FD0 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018FD6 303C 00C9                  		move.w	#$C9,d0
00018FDA 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play bonus sound
00018FE0 7000                       		moveq	#0,d0
00018FE2 1028 0028                  		move.b	$28(a0),d0
00018FE6 D040                       		add.w	d0,d0
00018FE8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018FEC 4EB9 0000 0000             		jsr	AddPoints
00018FF2                            
00018FF2                            Obj7D_ChkDel:
00018FF2 3028 0008                  		move.w	8(a0),d0
00018FF6 0240 FF80                  		andi.w	#$FF80,d0
00018FFA 3238 F700                  		move.w	($FFFFF700).w,d1
00018FFE 0441 0080                  		subi.w	#$80,d1
00019002 0241 FF80                  		andi.w	#$FF80,d1
00019006 9041                       		sub.w	d1,d0
00019008 0C40 0280                  		cmpi.w	#$280,d0
0001900C 6200                       		bhi.s	Obj7D_Delete
0001900E 4E75                       		rts	
00019010                            ; ===========================================================================
00019010                            
00019010                            Obj7D_Delete:
00019010 4EF9 0000 EFF6             		jmp	DeleteObject
00019016                            ; ===========================================================================
00019016 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019018 03E8                       		dc.w 1000
0001901A 0064                       		dc.w 100
0001901C 000A                       		dc.w 10
0001901E                            ; ===========================================================================
0001901E                            
0001901E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001901E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019022 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019024 3028 0008                  		move.w	8(a0),d0
00019028 0240 FF80                  		andi.w	#-$80,d0
0001902C 3238 F700                  		move.w	($FFFFF700).w,d1
00019030 0441 0080                  		subi.w	#$80,d1
00019034 0241 FF80                  		andi.w	#-$80,d1
00019038 9041                       		sub.w	d1,d0
0001903A 0C40 0280                  		cmpi.w	#$280,d0
0001903E 6200                       		bhi.s	Obj7D_Delete2
00019040 4EF9 0000 EFBA             		jmp	DisplaySprite
00019046                            ; ===========================================================================
00019046                            
00019046                            Obj7D_Delete2:
00019046 4EF9 0000 EFF6             		jmp	DeleteObject
0001904C                            ; ===========================================================================
0001904C                            ; ---------------------------------------------------------------------------
0001904C                            ; Sprite mappings - hidden points at the end of	a level
0001904C                            ; ---------------------------------------------------------------------------
0001904C                            Map_obj7D:
0001904C                            	include "_maps\obj7D.asm"
0001904C                            ; ---------------------------------------------------------------------------
0001904C                            ; Sprite mappings - hidden points at the end of	a level
0001904C                            ; ---------------------------------------------------------------------------
0001904C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019050 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00019054 00                         byte_17250:	dc.b 0
00019055 01                         byte_17251:	dc.b 1
00019056 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001905B 01                         byte_17257:	dc.b 1
0001905C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019061 01                         byte_1725D:	dc.b 1
00019062 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019068 00                         		even
00019068 00                         		even
00019068                            
00019068                            ; ===========================================================================
00019068                            ; ---------------------------------------------------------------------------
00019068                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019068                            ; ---------------------------------------------------------------------------
00019068                            
00019068                            Obj8A:					; XREF: Obj_Index
00019068 7000                       		moveq	#0,d0
0001906A 1028 0024                  		move.b	$24(a0),d0
0001906E 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00019072 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00019076                            ; ===========================================================================
00019076 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019078 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            Obj8A_Main:				; XREF: Obj8A_Index
0001907A 5428 0024                  		addq.b	#2,$24(a0)
0001907E 317C 0120 0008             		move.w	#$120,8(a0)
00019084 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001908A 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019092 317C 05A0 0002             		move.w	#$5A0,2(a0)
00019098 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001909C 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000190A0 117C 0000 0001             		move.b	#0,1(a0)
000190A6 117C 0000 0018             		move.b	#0,$18(a0)
000190AC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000190B2 6600                       		bne.s	Obj8A_Display	; if not, branch
000190B4 317C 00A6 0002             		move.w	#$A6,2(a0)
000190BA 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000190C0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000190C4 6700                       		beq.s	Obj8A_Display	; if not, branch
000190C6 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000190CC 6600                       		bne.s	Obj8A_Display	; if not, branch
000190CE 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
000190D4 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
000190DA 4EF9 0000 EFF6             		jmp	DeleteObject
000190E0                            ; ===========================================================================
000190E0                            
000190E0                            Obj8A_Display:				; XREF: Obj8A_Index
000190E0 4EF9 0000 EFBA             		jmp	DisplaySprite
000190E6                            ; ===========================================================================
000190E6                            ; ---------------------------------------------------------------------------
000190E6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000190E6                            ; ---------------------------------------------------------------------------
000190E6                            Map_obj8A:
000190E6                            	include "_maps\obj8A.asm"
000190E6                            ; ---------------------------------------------------------------------------
000190E6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000190E6                            ; ---------------------------------------------------------------------------
000190E6 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000190EA 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000190EE 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000190F2 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000190F6 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000190FA 0000                       		dc.w byte_176A9-Map_obj8A
000190FC 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000190FD F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019102 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00019107 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001910C F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019111 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00019116 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001911B F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019120 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019125 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001912A F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001912F F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019134 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019139 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001913E F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019143 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019144 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019149 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
0001914E D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00019153 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00019158 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
0001915D D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00019162 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00019167 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
0001916C 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00019171 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00019176 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
0001917B 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00019180 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00019185 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
0001918A 0805 0004 30               		dc.b 8,	5, 0, 4, $30
0001918F 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00019194 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00019195 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
0001919A D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
0001919F D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000191A4 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000191A9 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000191AE D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000191B3 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000191B8 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000191BD 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000191C2 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000191C7 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000191C8 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000191CD D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000191D2 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000191D7 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000191DC D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000191E1 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000191E6 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000191EB D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000191F0 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000191F5 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000191FA D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000191FF D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019204 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00019209 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
0001920E D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019213 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00019218 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
0001921D 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019222 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00019227 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
0001922C 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019231 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00019236 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001923B 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019240 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019241 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00019246 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001924B D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00019250 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00019255 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
0001925A D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
0001925F 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00019264 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00019269 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
0001926E 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00019273 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00019278 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
0001927D 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00019282 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00019287 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
0001928C 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00019291 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00019296 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
0001929B 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000192A0 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000192A5 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000192A6 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000192AB D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000192B0 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000192B5 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000192BA D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000192BF D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000192C4 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000192C9 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000192CE D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000192D3 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000192D8 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000192DD D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000192E2 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000192E7 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000192EC 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000192F1 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000192F6 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000192FB 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019300 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019305 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001930A 0805 0058 18               		dc.b 8,	5, 0, $58, $18
0001930F 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019314 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00019319 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
0001931E 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019323 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00019328 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00019329 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001932E D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019333 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019338 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001933D D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019342 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00019347 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001934C D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00019351 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00019356 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001935B D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00019360 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00019365 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001936A 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001936F 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00019374 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00019379 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001937E 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00019383 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00019388 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001938D 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00019392 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00019397 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001939C 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
0001939D D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000193A2 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000193A7 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000193AC D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000193B1 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000193B6 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000193BB D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000193C0 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000193C5 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000193CA D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000193CF D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000193D4 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000193D9 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000193DE 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000193E3 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000193E8 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000193ED 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000193F2 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000193F7 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000193FC 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019401 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00019406 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001940B 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019410 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019415 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001941A 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
0001941F 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019424 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00019429 2005 0004 08               		dc.b $20, 5, 0,	4, 8
0001942E 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019433 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019438 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019439 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001943E F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019443 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019448 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
0001944D F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019452 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00019457 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
0001945C F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019461 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019466 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001946B F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019470 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019475 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
0001947A F805 0000 60               		dc.b $F8, 5, 0,	0, $60
0001947F F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019484 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019485 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001948A 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001948F 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019494 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019499 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001949E 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000194A3 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000194A8 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000194AD 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000194AE E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000194B3 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000194B8 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000194BD E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000194C2 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000194C7 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000194CC E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000194D1 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000194D6 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000194DB 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000194E0 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000194E5 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000194EA 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000194EF 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000194F4 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000194F9 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000194FE 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019504 00                         		even
00019504 00                         		even
00019504                            
00019504                            ; ===========================================================================
00019504                            ; ---------------------------------------------------------------------------
00019504                            ; Object 3D - Eggman (GHZ)
00019504                            ; ---------------------------------------------------------------------------
00019504                            
00019504                            Obj3D:					; XREF: Obj_Index
00019504 7000                       		moveq	#0,d0
00019506 1028 0024                  		move.b	$24(a0),d0
0001950A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001950E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019512                            ; ===========================================================================
00019512 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019514 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00019516 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00019518 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001951A                            
0001951A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001951C 0401                       		dc.b 4,	1
0001951E 0607                       		dc.b 6,	7
00019520                            ; ===========================================================================
00019520                            
00019520                            Obj3D_Main:				; XREF: Obj3D_Index
00019520 45F9 0001 951A             		lea	(Obj3D_ObjData).l,a2
00019526 2248                       		movea.l	a0,a1
00019528 7202                       		moveq	#2,d1
0001952A 6000                       		bra.s	Obj3D_LoadBoss
0001952C                            ; ===========================================================================
0001952C                            
0001952C                            Obj3D_Loop:
0001952C 4EB9 0000 F464             		jsr	SingleObjLoad2
00019532 6600                       		bne.s	loc_17772
00019534                            
00019534                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019534 135A 0024                  		move.b	(a2)+,$24(a1)
00019538 12BC 003D                  		move.b	#$3D,0(a1)
0001953C 3368 0008 0008             		move.w	8(a0),8(a1)
00019542 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019548 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019550 337C 0400 0002             		move.w	#$400,2(a1)
00019556 137C 0004 0001             		move.b	#4,1(a1)
0001955C 137C 0020 0019             		move.b	#$20,$19(a1)
00019562 137C 0003 0018             		move.b	#3,$18(a1)
00019568 135A 001C                  		move.b	(a2)+,$1C(a1)
0001956C 2348 0034                  		move.l	a0,$34(a1)
00019570 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019574                            
00019574                            loc_17772:
00019574 3168 0008 0030             		move.w	8(a0),$30(a0)
0001957A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019580 117C 000F 0020             		move.b	#$F,$20(a0)
00019586 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001958C                            
0001958C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001958C 7000                       		moveq	#0,d0
0001958E 1028 0025                  		move.b	$25(a0),d0
00019592 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019596 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001959A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000195A0 4EB9 0000 BEA2             		jsr	AnimateSprite
000195A6 1028 0022                  		move.b	$22(a0),d0
000195AA 0200 0003                  		andi.b	#3,d0
000195AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000195B4 8128 0001                  		or.b	d0,1(a0)
000195B8 4EF9 0000 EFBA             		jmp	DisplaySprite
000195BE                            ; ===========================================================================
000195BE 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000195C0 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000195C2 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000195C4 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000195C6 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000195C8 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000195CA 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000195CC                            ; ===========================================================================
000195CC                            
000195CC                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000195CC 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000195D2 6100 0000                  		bsr.w	BossMove
000195D6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000195DC 6600                       		bne.s	loc_177E6
000195DE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000195E4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000195E8                            
000195E8                            loc_177E6:
000195E8 1028 003F                  		move.b	$3F(a0),d0
000195EC 4EB9 0000 287A             		jsr	(CalcSine).l
000195F2 EC40                       		asr.w	#6,d0
000195F4 D068 0038                  		add.w	$38(a0),d0
000195F8 3140 000C                  		move.w	d0,$C(a0)
000195FC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019602 5428 003F                  		addq.b	#2,$3F(a0)
00019606 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001960C 6400                       		bcc.s	locret_1784A
0001960E 4A28 0022                  		tst.b	$22(a0)
00019612 6B00                       		bmi.s	loc_1784C
00019614 4A28 0020                  		tst.b	$20(a0)
00019618 6600                       		bne.s	locret_1784A
0001961A 4A28 003E                  		tst.b	$3E(a0)
0001961E 6600                       		bne.s	Obj3D_ShipFlash
00019620 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00019626 303C 00AC                  		move.w	#$AC,d0
0001962A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019630                            
00019630                            Obj3D_ShipFlash:
00019630 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
00019634 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019636 4A51                       		tst.w	(a1)
00019638 6600                       		bne.s	loc_1783C
0001963A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001963E                            
0001963E                            loc_1783C:
0001963E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019640 5328 003E                  		subq.b	#1,$3E(a0)
00019644 6600                       		bne.s	locret_1784A
00019646 117C 000F 0020             		move.b	#$F,$20(a0)
0001964C                            
0001964C                            locret_1784A:
0001964C 4E75                       		rts	
0001964E                            ; ===========================================================================
0001964E                            
0001964E                            loc_1784C:				; XREF: loc_177E6
0001964E 7064                       		moveq	#100,d0
00019650 6100 0000                  		bsr.w	AddPoints
00019654 117C 0008 0025             		move.b	#8,$25(a0)
0001965A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019660 4E75                       		rts	
00019662                            
00019662                            ; ---------------------------------------------------------------------------
00019662                            ; Defeated boss	subroutine
00019662                            ; ---------------------------------------------------------------------------
00019662                            
00019662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019662                            
00019662                            
00019662                            BossDefeated:
00019662 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019666 0200 0007                  		andi.b	#7,d0
0001966A 6600                       		bne.s	locret_178A2
0001966C 4EB9 0000 F44E             		jsr	SingleObjLoad
00019672 6600                       		bne.s	locret_178A2
00019674 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019678 3368 0008 0008             		move.w	8(a0),8(a1)
0001967E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019684 4EB9 0000 2854             		jsr	(RandomNumber).l
0001968A 3200                       		move.w	d0,d1
0001968C 7200                       		moveq	#0,d1
0001968E 1200                       		move.b	d0,d1
00019690 E409                       		lsr.b	#2,d1
00019692 0441 0020                  		subi.w	#$20,d1
00019696 D369 0008                  		add.w	d1,8(a1)
0001969A E048                       		lsr.w	#8,d0
0001969C E608                       		lsr.b	#3,d0
0001969E D169 000C                  		add.w	d0,$C(a1)
000196A2                            
000196A2                            locret_178A2:
000196A2 4E75                       		rts	
000196A4                            ; End of function BossDefeated
000196A4                            
000196A4                            ; ---------------------------------------------------------------------------
000196A4                            ; Subroutine to	move a boss
000196A4                            ; ---------------------------------------------------------------------------
000196A4                            
000196A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000196A4                            
000196A4                            
000196A4                            BossMove:
000196A4 2428 0030                  		move.l	$30(a0),d2
000196A8 2628 0038                  		move.l	$38(a0),d3
000196AC 3028 0010                  		move.w	$10(a0),d0
000196B0 48C0                       		ext.l	d0
000196B2 E180                       		asl.l	#8,d0
000196B4 D480                       		add.l	d0,d2
000196B6 3028 0012                  		move.w	$12(a0),d0
000196BA 48C0                       		ext.l	d0
000196BC E180                       		asl.l	#8,d0
000196BE D680                       		add.l	d0,d3
000196C0 2142 0030                  		move.l	d2,$30(a0)
000196C4 2143 0038                  		move.l	d3,$38(a0)
000196C8 4E75                       		rts	
000196CA                            ; End of function BossMove
000196CA                            
000196CA                            ; ===========================================================================
000196CA                            
000196CA                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000196CA 317C FF00 0010             		move.w	#-$100,$10(a0)
000196D0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196D6 6100 FFCC                  		bsr.w	BossMove
000196DA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000196E0 6600                       		bne.s	loc_17916
000196E2 317C 0000 0010             		move.w	#0,$10(a0)
000196E8 317C 0000 0012             		move.w	#0,$12(a0)
000196EE 5428 0025                  		addq.b	#2,$25(a0)
000196F2 4EB9 0000 F464             		jsr	SingleObjLoad2
000196F8 6600                       		bne.s	loc_17910
000196FA 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000196FE 3368 0030 0008             		move.w	$30(a0),8(a1)
00019704 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001970A 2348 0034                  		move.l	a0,$34(a1)
0001970E                            
0001970E                            loc_17910:
0001970E 317C 0077 003C             		move.w	#$77,$3C(a0)
00019714                            
00019714                            loc_17916:
00019714 6000 FED2                  		bra.w	loc_177E6
00019718                            ; ===========================================================================
00019718                            
00019718                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019718 5368 003C                  		subq.w	#1,$3C(a0)
0001971C 6A00                       		bpl.s	Obj3D_Reverse
0001971E 5428 0025                  		addq.b	#2,$25(a0)
00019722 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019728 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001972E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019734 6600                       		bne.s	Obj3D_Reverse
00019736 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001973C 317C 0040 0010             		move.w	#$40,$10(a0)
00019742                            
00019742                            Obj3D_Reverse:
00019742 0828 0000 0022             		btst	#0,$22(a0)
00019748 6600                       		bne.s	loc_17950
0001974A 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001974E                            
0001974E                            loc_17950:
0001974E 6000 FE98                  		bra.w	loc_177E6
00019752                            ; ===========================================================================
00019752                            
00019752                            loc_17954:				; XREF: Obj3D_ShipIndex
00019752 5368 003C                  		subq.w	#1,$3C(a0)
00019756 6B00                       		bmi.s	loc_17960
00019758 6100 FF4A                  		bsr.w	BossMove
0001975C 6000                       		bra.s	loc_17976
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_17960:
0001975E 0868 0000 0022             		bchg	#0,$22(a0)
00019764 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001976A 5528 0025                  		subq.b	#2,$25(a0)
0001976E 317C 0000 0010             		move.w	#0,$10(a0)
00019774                            
00019774                            loc_17976:
00019774 6000 FE72                  		bra.w	loc_177E6
00019778                            ; ===========================================================================
00019778                            
00019778                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019778 5368 003C                  		subq.w	#1,$3C(a0)
0001977C 6B00                       		bmi.s	loc_17984
0001977E 6000 FEE2                  		bra.w	BossDefeated
00019782                            ; ===========================================================================
00019782                            
00019782                            loc_17984:
00019782 08E8 0000 0022             		bset	#0,$22(a0)
00019788 08A8 0007 0022             		bclr	#7,$22(a0)
0001978E 4268 0010                  		clr.w	$10(a0)
00019792 5428 0025                  		addq.b	#2,$25(a0)
00019796 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001979C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000197A0 6600                       		bne.s	locret_179AA
000197A2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000197A8                            
000197A8                            locret_179AA:
000197A8 4E75                       		rts	
000197AA                            ; ===========================================================================
000197AA                            
000197AA                            loc_179AC:				; XREF: Obj3D_ShipIndex
000197AA 5268 003C                  		addq.w	#1,$3C(a0)
000197AE 6700                       		beq.s	loc_179BC
000197B0 6A00                       		bpl.s	loc_179C2
000197B2 0668 0018 0012             		addi.w	#$18,$12(a0)
000197B8 6000                       		bra.s	loc_179EE
000197BA                            ; ===========================================================================
000197BA                            
000197BA                            loc_179BC:
000197BA 4268 0012                  		clr.w	$12(a0)
000197BE 6000                       		bra.s	loc_179EE
000197C0                            ; ===========================================================================
000197C0                            
000197C0                            loc_179C2:
000197C0 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000197C6 6500                       		bcs.s	loc_179DA
000197C8 6700                       		beq.s	loc_179E0
000197CA 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000197D0 6500                       		bcs.s	loc_179EE
000197D2 5428 0025                  		addq.b	#2,$25(a0)
000197D6 6000                       		bra.s	loc_179EE
000197D8                            ; ===========================================================================
000197D8                            
000197D8                            loc_179DA:
000197D8 5168 0012                  		subq.w	#8,$12(a0)
000197DC 6000                       		bra.s	loc_179EE
000197DE                            ; ===========================================================================
000197DE                            
000197DE                            loc_179E0:
000197DE 4268 0012                  		clr.w	$12(a0)
000197E2                            		
000197E2 6100 0000                  		bsr.w	BossEnd
000197E6                            
000197E6                            loc_179EE:
000197E6 6100 FEBC                  		bsr.w	BossMove
000197EA 6000 FDFC                  		bra.w	loc_177E6
000197EE                            ; ===========================================================================
000197EE                            
000197EE                            loc_179F6:				; XREF: Obj3D_ShipIndex
000197EE 317C 0400 0010             		move.w	#$400,$10(a0)
000197F4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000197FA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019800 6700                       		beq.s	loc_17A10
00019802 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019806 6000                       		bra.s	loc_17A16
00019808                            ; ===========================================================================
00019808                            
00019808                            loc_17A10:
00019808 4A28 0001                  		tst.b	1(a0)
0001980C 6A00                       		bpl.s	Obj3D_ShipDel
0001980E                            
0001980E                            loc_17A16:
0001980E 6100 FE94                  		bsr.w	BossMove
00019812 6000 FDD4                  		bra.w	loc_177E6
00019816                            ; ===========================================================================
00019816                            
00019816                            Obj3D_ShipDel:
00019816 4EF9 0000 EFF6             		jmp	DeleteObject
0001981C                            ; ===========================================================================
0001981C                            
0001981C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001981C 7000                       		moveq	#0,d0
0001981E 7201                       		moveq	#1,d1
00019820 2268 0034                  		movea.l	$34(a0),a1
00019824 1029 0025                  		move.b	$25(a1),d0
00019828 5900                       		subq.b	#4,d0
0001982A 6600                       		bne.s	loc_17A3E
0001982C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019832 6600                       		bne.s	loc_17A46
00019834 7204                       		moveq	#4,d1
00019836                            
00019836                            loc_17A3E:
00019836 5D00                       		subq.b	#6,d0
00019838 6B00                       		bmi.s	loc_17A46
0001983A 720A                       		moveq	#$A,d1
0001983C 6000                       		bra.s	loc_17A5A
0001983E                            ; ===========================================================================
0001983E                            
0001983E                            loc_17A46:
0001983E 4A29 0020                  		tst.b	$20(a1)
00019842 6600                       		bne.s	loc_17A50
00019844 7205                       		moveq	#5,d1
00019846 6000                       		bra.s	loc_17A5A
00019848                            ; ===========================================================================
00019848                            
00019848                            loc_17A50:
00019848 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001984E 6500                       		bcs.s	loc_17A5A
00019850 7204                       		moveq	#4,d1
00019852                            
00019852                            loc_17A5A:
00019852 1141 001C                  		move.b	d1,$1C(a0)
00019856 5500                       		subq.b	#2,d0
00019858 6600                       		bne.s	Obj3D_FaceDisp
0001985A 117C 0006 001C             		move.b	#6,$1C(a0)
00019860 4A28 0001                  		tst.b	1(a0)
00019864 6A00                       		bpl.s	Obj3D_FaceDel
00019866                            
00019866                            Obj3D_FaceDisp:
00019866 6000                       		bra.s	Obj3D_Display
00019868                            ; ===========================================================================
00019868                            
00019868                            Obj3D_FaceDel:
00019868 4EF9 0000 EFF6             		jmp	DeleteObject
0001986E                            ; ===========================================================================
0001986E                            
0001986E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001986E 117C 0007 001C             		move.b	#7,$1C(a0)
00019874 2268 0034                  		movea.l	$34(a0),a1
00019878 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001987E 6600                       		bne.s	loc_17A96
00019880 117C 000B 001C             		move.b	#$B,$1C(a0)
00019886 4A28 0001                  		tst.b	1(a0)
0001988A 6A00                       		bpl.s	Obj3D_FlameDel
0001988C 6000                       		bra.s	Obj3D_FlameDisp
0001988E                            ; ===========================================================================
0001988E                            
0001988E                            loc_17A96:
0001988E 3029 0010                  		move.w	$10(a1),d0
00019892 6700                       		beq.s	Obj3D_FlameDisp
00019894 117C 0008 001C             		move.b	#8,$1C(a0)
0001989A                            
0001989A                            Obj3D_FlameDisp:
0001989A 6000                       		bra.s	Obj3D_Display
0001989C                            ; ===========================================================================
0001989C                            
0001989C                            Obj3D_FlameDel:
0001989C 4EF9 0000 EFF6             		jmp	DeleteObject
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000198A2 2268 0034                  		movea.l	$34(a0),a1
000198A6 3169 0008 0008             		move.w	8(a1),8(a0)
000198AC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000198B2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000198B8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000198BE 4EB9 0000 BEA2             		jsr	AnimateSprite
000198C4 1028 0022                  		move.b	$22(a0),d0
000198C8 0200 0003                  		andi.b	#3,d0
000198CC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198D2 8128 0001                  		or.b	d0,1(a0)
000198D6 4EF9 0000 EFBA             		jmp	DisplaySprite
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            BossEnd:
000198DC 7000                       		moveq	#0,d0
000198DE 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
000198E2 4E75                       		rts
000198E4                            ; ===========================================================================
000198E4                            ; LEVEL MUSIC CONTROLLER
000198E4                            ; ===========================================================================
000198E4                            
000198E4                            CtrlLevelMusic:
000198E4 4A38 FFBC                  		tst.b	($FFFFFFBC).w		; Has Sonic drowned?
000198E8 6600                       		bne.s	@end				; If so, skip all this
000198EA 1038 FFFE                  		move.b	($FFFFFFFE).w,d0	; Level music
000198EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
000198F2 6700                       		beq.s	@chk_spdshoes		; If not, check if he has speed shoes
000198F4 103C 0087                  		move.b	#$87,d0				; Invincibility music
000198F8                            		
000198F8                            @chk_spdshoes:
000198F8 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does he have speed shoes?
000198FC 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
000198FE 103C 0095                  		move.b	#$95,d0				; Speed shoes music
00019902 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019906 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019908 103C 0096                  		move.b	#$96,d0				; Speed shoes + invincibility music
0001990C                            		
0001990C                            @chk_boss:
0001990C 4A38 FFFF                  		tst.b	($FFFFFFFF).w		; Is there a boss?
00019910 6700                       		beq.s	@chk_drowning		; If not, check if Sonic is drowning
00019912 7200                       		moveq	#0,d1				; Clear d1
00019914 1238 FE10                  		move.b	($FFFFFE10).w,d1	; Set boss number
00019918 43F9 0000 4DF6             		lea	(MusicList_Bosses).l,a1	; Load Music Playlist for bosses
0001991E 1031 1000                  		move.b	(a1,d1.w),d0		; Set music ID
00019922                            		
00019922                            @chk_drowning:
00019922 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; Check air remaining
00019928 6400                       		bcc.s	@chk_value			; If air is above $C, branch
0001992A 103C 0092                  		move.b	#$92,d0				; Drowning music
0001992E                            		
0001992E                            @chk_value:
0001992E 1238 FFFC                  		move.b	($FFFFFFFC).w,d1	; Get current music playing
00019932 B200                       		cmp.b	d0,d1				; If the value is the same,
00019934 6600                       		bne.s	@play				; don't play it again
00019936                            		
00019936                            @end:
00019936 4E75                       		rts							; Return
00019938                            		
00019938                            @play:
00019938 4EF9 0000 1000             		jmp	(PlayMusic).l			; Play music and return
0001993E                            ; ===========================================================================
0001993E                            ; ---------------------------------------------------------------------------
0001993E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001993E                            ; ---------------------------------------------------------------------------
0001993E                            
0001993E                            Obj48:					; XREF: Obj_Index
0001993E 7000                       		moveq	#0,d0
00019940 1028 0024                  		move.b	$24(a0),d0
00019944 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019948 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001994C                            ; ===========================================================================
0001994C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001994E 0000                       		dc.w Obj48_Base-Obj48_Index
00019950 0000                       		dc.w Obj48_Display2-Obj48_Index
00019952 0000                       		dc.w loc_17C68-Obj48_Index
00019954 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019956                            ; ===========================================================================
00019956                            
00019956                            Obj48_Main:				; XREF: Obj48_Index
00019956 5428 0024                  		addq.b	#2,$24(a0)
0001995A 317C 4080 0026             		move.w	#$4080,$26(a0)
00019960 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019966 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001996E 317C 046C 0002             		move.w	#$46C,2(a0)
00019974 45E8 0028                  		lea	$28(a0),a2
00019978 14FC 0000                  		move.b	#0,(a2)+
0001997C 7205                       		moveq	#5,d1
0001997E 2248                       		movea.l	a0,a1
00019980 6000                       		bra.s	loc_17B60
00019982                            ; ===========================================================================
00019982                            
00019982                            Obj48_MakeLinks:
00019982 4EB9 0000 F464             		jsr	SingleObjLoad2
00019988 6600                       		bne.s	Obj48_MakeBall
0001998A 3368 0008 0008             		move.w	8(a0),8(a1)
00019990 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019996 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001999A 137C 0006 0024             		move.b	#6,$24(a1)
000199A0 237C 0000 93A4 0004        		move.l	#Map_obj15,4(a1)
000199A8 337C 0380 0002             		move.w	#$380,2(a1)
000199AE 137C 0001 001A             		move.b	#1,$1A(a1)
000199B4 5228 0028                  		addq.b	#1,$28(a0)
000199B8                            
000199B8                            loc_17B60:				; XREF: Obj48_Main
000199B8 3A09                       		move.w	a1,d5
000199BA 0445 D000                  		subi.w	#$D000,d5
000199BE EC4D                       		lsr.w	#6,d5
000199C0 0245 007F                  		andi.w	#$7F,d5
000199C4 14C5                       		move.b	d5,(a2)+
000199C6 137C 0004 0001             		move.b	#4,1(a1)
000199CC 137C 0008 0019             		move.b	#8,$19(a1)
000199D2 137C 0006 0018             		move.b	#6,$18(a1)
000199D8 2368 0034 0034             		move.l	$34(a0),$34(a1)
000199DE 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000199E2                            
000199E2                            Obj48_MakeBall:
000199E2 137C 0008 0024             		move.b	#8,$24(a1)
000199E8 237C 0000 9902 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000199F0 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000199F6 137C 0001 001A             		move.b	#1,$1A(a1)
000199FC 137C 0005 0018             		move.b	#5,$18(a1)
00019A02 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019A08 4E75                       		rts	
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019A10                            
00019A10                            ; ===========================================================================
00019A10                            
00019A10                            Obj48_Base:				; XREF: Obj48_Index
00019A10 47F9 0001 9A0A             		lea	(Obj48_PosData).l,a3
00019A16 45E8 0028                  		lea	$28(a0),a2
00019A1A 7C00                       		moveq	#0,d6
00019A1C 1C1A                       		move.b	(a2)+,d6
00019A1E                            
00019A1E                            loc_17BC6:
00019A1E 7800                       		moveq	#0,d4
00019A20 181A                       		move.b	(a2)+,d4
00019A22 ED4C                       		lsl.w	#6,d4
00019A24 0684 00FF D000             		addi.l	#$FFD000,d4
00019A2A 2244                       		movea.l	d4,a1
00019A2C 101B                       		move.b	(a3)+,d0
00019A2E B029 003C                  		cmp.b	$3C(a1),d0
00019A32 6700                       		beq.s	loc_17BE0
00019A34 5229 003C                  		addq.b	#1,$3C(a1)
00019A38                            
00019A38                            loc_17BE0:
00019A38 51CE FFE4                  		dbf	d6,loc_17BC6
00019A3C                            
00019A3C B029 003C                  		cmp.b	$3C(a1),d0
00019A40 6600                       		bne.s	loc_17BFA
00019A42 2268 0034                  		movea.l	$34(a0),a1
00019A46 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019A4C 6600                       		bne.s	loc_17BFA
00019A4E 5428 0024                  		addq.b	#2,$24(a0)
00019A52                            
00019A52                            loc_17BFA:
00019A52 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019A58 6700                       		beq.s	Obj48_Display
00019A5A 5268 0032                  		addq.w	#1,$32(a0)
00019A5E                            
00019A5E                            Obj48_Display:
00019A5E 6100 0000                  		bsr.w	sub_17C2A
00019A62 1028 0026                  		move.b	$26(a0),d0
00019A66 4EB9 0000 9316             		jsr	(Obj15_Move2).l
00019A6C 4EF9 0000 EFBA             		jmp	DisplaySprite
00019A72                            ; ===========================================================================
00019A72                            
00019A72                            Obj48_Display2:				; XREF: Obj48_Index
00019A72 6100 0000                  		bsr.w	sub_17C2A
00019A76 4EB9 0000 92D6             		jsr	(Obj48_Move).l
00019A7C 4EF9 0000 EFBA             		jmp	DisplaySprite
00019A82                            
00019A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A82                            
00019A82                            
00019A82                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019A82 2268 0034                  		movea.l	$34(a0),a1
00019A86 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019A8C 6400                       		bcc.s	loc_17C3C
00019A8E 0868 0000 001A             		bchg	#0,$1A(a0)
00019A94                            
00019A94                            loc_17C3C:
00019A94 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019A9A 3029 000C                  		move.w	$C(a1),d0
00019A9E D068 0032                  		add.w	$32(a0),d0
00019AA2 3140 0038                  		move.w	d0,$38(a0)
00019AA6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019AAC 4A29 0022                  		tst.b	$22(a1)
00019AB0 6A00                       		bpl.s	locret_17C66
00019AB2 10BC 003F                  		move.b	#$3F,0(a0)
00019AB6 117C 0000 0024             		move.b	#0,$24(a0)
00019ABC                            
00019ABC                            locret_17C66:
00019ABC 4E75                       		rts	
00019ABE                            ; End of function sub_17C2A
00019ABE                            
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            loc_17C68:				; XREF: Obj48_Index
00019ABE 2268 0034                  		movea.l	$34(a0),a1
00019AC2 4A29 0022                  		tst.b	$22(a1)
00019AC6 6A00                       		bpl.s	Obj48_Display3
00019AC8 10BC 003F                  		move.b	#$3F,0(a0)
00019ACC 117C 0000 0024             		move.b	#0,$24(a0)
00019AD2                            
00019AD2                            Obj48_Display3:
00019AD2 4EF9 0000 EFBA             		jmp	DisplaySprite
00019AD8                            ; ===========================================================================
00019AD8                            
00019AD8                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019AD8 7000                       		moveq	#0,d0
00019ADA 4A28 001A                  		tst.b	$1A(a0)
00019ADE 6600                       		bne.s	Obj48_Vanish
00019AE0 5200                       		addq.b	#1,d0
00019AE2                            
00019AE2                            Obj48_Vanish:
00019AE2 1140 001A                  		move.b	d0,$1A(a0)
00019AE6 2268 0034                  		movea.l	$34(a0),a1
00019AEA 4A29 0022                  		tst.b	$22(a1)
00019AEE 6A00                       		bpl.s	Obj48_Display4
00019AF0 117C 0000 0020             		move.b	#0,$20(a0)
00019AF6 6100 FB6A                  		bsr.w	BossDefeated
00019AFA 5328 003C                  		subq.b	#1,$3C(a0)
00019AFE 6A00                       		bpl.s	Obj48_Display4
00019B00 10BC 003F                  		move.b	#$3F,(a0)
00019B04 117C 0000 0024             		move.b	#0,$24(a0)
00019B0A                            
00019B0A                            Obj48_Display4:
00019B0A 4EF9 0000 EFBA             		jmp	DisplaySprite
00019B10                            ; ===========================================================================
00019B10                            Ani_Eggman:
00019B10                            	include "_anim\Eggman.asm"
00019B10                            ; ---------------------------------------------------------------------------
00019B10                            ; Animation script - Eggman (bosses)
00019B10                            ; ---------------------------------------------------------------------------
00019B10 0000                       		dc.w byte_17CD4-Ani_Eggman
00019B12 0000                       		dc.w byte_17CD8-Ani_Eggman
00019B14 0000                       		dc.w byte_17CDC-Ani_Eggman
00019B16 0000                       		dc.w byte_17CE0-Ani_Eggman
00019B18 0000                       		dc.w byte_17CE4-Ani_Eggman
00019B1A 0000                       		dc.w byte_17CE8-Ani_Eggman
00019B1C 0000                       		dc.w byte_17CEC-Ani_Eggman
00019B1E 0000                       		dc.w byte_17CF0-Ani_Eggman
00019B20 0000                       		dc.w byte_17CF4-Ani_Eggman
00019B22 0000                       		dc.w byte_17CF8-Ani_Eggman
00019B24 0000                       		dc.w byte_17CFC-Ani_Eggman
00019B26 0000                       		dc.w byte_17D00-Ani_Eggman
00019B28 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019B2C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019B30 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019B34 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019B38 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019B3C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019B40 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019B44 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019B48 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019B4C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019B50 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019B54 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019B60                            		even
00019B60                            		even
00019B60                            
00019B60                            ; ---------------------------------------------------------------------------
00019B60                            ; Sprite mappings - Eggman (boss levels)
00019B60                            ; ---------------------------------------------------------------------------
00019B60                            Map_Eggman:
00019B60                            	include "_maps\Eggman.asm"
00019B60                            ; ---------------------------------------------------------------------------
00019B60                            ; Sprite mappings - Eggman (boss levels)
00019B60                            ; ---------------------------------------------------------------------------
00019B60 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019B64 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019B68 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019B6C 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019B70 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019B74 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019B78 0000                       		dc.w byte_17DC8-Map_Eggman
00019B7A 06                         byte_17D26:	dc.b 6
00019B7B EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019B80 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019B85 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019B8A FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019B8F 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019B94 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019B99 02                         byte_17D45:	dc.b 2
00019B9A E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019B9F EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019BA4 02                         byte_17D50:	dc.b 2
00019BA5 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019BAA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019BAF 03                         byte_17D5B:	dc.b 3
00019BB0 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019BB5 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019BBA EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019BBF 03                         byte_17D6B:	dc.b 3
00019BC0 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019BC5 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019BCA EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019BCF 03                         byte_17D7B:	dc.b 3
00019BD0 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019BD5 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019BDA EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019BDF 03                         byte_17D8B:	dc.b 3
00019BE0 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019BE5 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019BEA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019BEF 04                         byte_17D9B:	dc.b 4
00019BF0 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019BF5 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019BFA EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019BFF EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019C04 01                         byte_17DB0:	dc.b 1
00019C05 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019C0A 01                         byte_17DB6:	dc.b 1
00019C0B 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019C10 00                         byte_17DBC:	dc.b 0
00019C11 02                         byte_17DBD:	dc.b 2
00019C12 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019C17 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019C1C 02                         byte_17DC8:	dc.b 2
00019C1D F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019C22 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019C28 00                         		even
00019C28 00                         		even
00019C28                            
00019C28                            ; ---------------------------------------------------------------------------
00019C28                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019C28                            ; ---------------------------------------------------------------------------
00019C28                            Map_BossItems:
00019C28                            	include "_maps\Boss items.asm"
00019C28                            ; ---------------------------------------------------------------------------
00019C28                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019C28                            ; ---------------------------------------------------------------------------
00019C28 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019C2C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019C30 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019C34 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019C38 01                         byte_17DE4:	dc.b 1
00019C39 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019C3E 02                         byte_17DEA:	dc.b 2
00019C3F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019C44 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019C49 00                         		dc.b 0
00019C4A 01                         byte_17DF6:	dc.b 1
00019C4B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019C50 01                         byte_17DFC:	dc.b 1
00019C51 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019C56 01                         byte_17E02:	dc.b 1
00019C57 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019C5C 04                         byte_17E08:	dc.b 4
00019C5D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019C62 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019C67 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019C6C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019C71 00                         		dc.b 0
00019C72 02                         byte_17E1E:	dc.b 2
00019C73 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019C78 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019C7D 00                         		dc.b 0
00019C7E 02                         byte_17E2A:	dc.b 2
00019C7F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019C84 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019C8A 00                         		even
00019C8A 00                         		even
00019C8A                            
00019C8A                            ; ===========================================================================
00019C8A                            ; ---------------------------------------------------------------------------
00019C8A                            ; Object 77 - Eggman (LZ)
00019C8A                            ; ---------------------------------------------------------------------------
00019C8A                            
00019C8A                            obj77:					; XREF: Obj_Index
00019C8A 7000                       		moveq	#0,d0
00019C8C 1028 0024                  		move.b	$24(a0),d0
00019C90 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00019C94 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00019C98                            ; ===========================================================================
00019C98 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00019C9A 0000                       		dc.w obj77_ShipMain-obj77_Index
00019C9C 0000                       		dc.w obj77_FaceMain-obj77_Index
00019C9E 0000                       		dc.w obj77_FlameMain-obj77_Index
00019CA0 0000                       		dc.w obj77_TubeMain-obj77_Index
00019CA2                            
00019CA2 0200 04                    obj77_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019CA5 0401 04                    		dc.b 4,	1, 4
00019CA8 0607 04                    		dc.b 6,	7, 4
00019CAB 0800 03                    		dc.b 8,	0, 3
00019CAE                            ; ===========================================================================
00019CAE                            
00019CAE                            obj77_Main:				; XREF: obj77_Index
00019CAE 317C 2188 0008             		move.w	#$2188,8(a0)
00019CB4 317C 0228 000C             		move.w	#$228,$C(a0)
00019CBA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019CC0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019CC6 117C 000F 0020             		move.b	#$F,$20(a0)
00019CCC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019CD2 45FA FFCE                  		lea	obj77_ObjData(pc),a2
00019CD6 2248                       		movea.l	a0,a1
00019CD8 7203                       		moveq	#3,d1
00019CDA 6000                       		bra.s	obj77_LoadBoss
00019CDC                            ; ===========================================================================
00019CDC                            
00019CDC                            obj77_Loop:
00019CDC 4EB9 0000 F464             		jsr	SingleObjLoad2
00019CE2 6600                       		bne.s	lz_1895C
00019CE4 12BC 007A                  		move.b	#$7A,0(a1)
00019CE8 3368 0008 0008             		move.w	8(a0),8(a1)
00019CEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019CF4                            
00019CF4                            obj77_LoadBoss:				; XREF: obj77_Main
00019CF4 08A8 0000 0022             		bclr	#0,$22(a0)
00019CFA 4229 0025                  		clr.b	$25(a1)
00019CFE 135A 0024                  		move.b	(a2)+,$24(a1)
00019D02 135A 001C                  		move.b	(a2)+,$1C(a1)
00019D06 135A 0018                  		move.b	(a2)+,$18(a1)
00019D0A 237C 0001 9B60 0004        		move.l	#Map_Eggman,4(a1)
00019D12 337C 0400 0002             		move.w	#$400,2(a1)
00019D18 137C 0004 0001             		move.b	#4,1(a1)
00019D1E 137C 0020 0019             		move.b	#$20,$19(a1)
00019D24 2348 0034                  		move.l	a0,$34(a1)
00019D28 51C9 FFB2                  		dbf	d1,obj77_Loop	; repeat sequence 3 more times
00019D2C                            
00019D2C                            lz_1895C:
00019D2C 43F8 D040                  		lea	($FFFFD040).w,a1
00019D30 45E8 002A                  		lea	$2A(a0),a2
00019D34 705E                       		moveq	#$5E,d0
00019D36 723E                       		moveq	#$3E,d1
00019D38                            
00019D38                            lz_18968:
00019D38 B011                       		cmp.b	(a1),d0
00019D3A 6600                       		bne.s	lz_18974
00019D3C 4A29 0028                  		tst.b	$28(a1)
00019D40 6700                       		beq.s	lz_18974
00019D42 34C9                       		move.w	a1,(a2)+
00019D44                            
00019D44                            lz_18974:
00019D44 D2FC 0040                  		adda.w	#$40,a1
00019D48 51C9 FFEE                  		dbf	d1,lz_18968
00019D4C                            
00019D4C                            obj77_ShipMain:				; XREF: obj77_Index
00019D4C 7000                       		moveq	#0,d0
00019D4E 1028 0025                  		move.b	$25(a0),d0
00019D52 303B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d0
00019D56 4EBB 0000                  		jsr	obj77_ShipIndex(pc,d0.w)
00019D5A 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
00019D60 4EB9 0000 BEA2             		jsr	AnimateSprite
00019D66 7003                       		moveq	#3,d0
00019D68 C028 0022                  		and.b	$22(a0),d0
00019D6C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D72 8128 0001                  		or.b	d0,1(a0)
00019D76 4EF9 0000 EFBA             		jmp	DisplaySprite
00019D7C                            ; ===========================================================================
00019D7C 0000                       obj77_ShipIndex:dc.w lz_189B8-obj77_ShipIndex
00019D7E 0000                       		dc.w lz_18A5E-obj77_ShipIndex
00019D80 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00019D82 0000                       		dc.w lz_18B48-obj77_ShipIndex
00019D84 0000                       		dc.w lz_18B80-obj77_ShipIndex
00019D86 0000                       		dc.w lz_18BC6-obj77_ShipIndex
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            lz_189B8:				; XREF: obj77_ShipIndex
00019D88 317C FF00 0010             		move.w	#-$100,$10(a0)
00019D8E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019D94 6400                       		bcc.s	lz_189CA
00019D96 5428 0025                  		addq.b	#2,$25(a0)
00019D9A                            
00019D9A                            lz_189CA:
00019D9A 6100 F908                  		bsr.w	BossMove
00019D9E 1028 003F                  		move.b	$3F(a0),d0
00019DA2 5428 003F                  		addq.b	#2,$3F(a0)
00019DA6 4EB9 0000 287A             		jsr	(CalcSine).l
00019DAC EC40                       		asr.w	#6,d0
00019DAE D068 0038                  		add.w	$38(a0),d0
00019DB2 3140 000C                  		move.w	d0,$C(a0)
00019DB6 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DBC 6000                       		bra.s	lz_189FE
00019DBE                            ; ===========================================================================
00019DBE                            
00019DBE                            lz_189EE:
00019DBE 6100 F8E4                  		bsr.w	BossMove
00019DC2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019DC8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DCE                            
00019DCE                            lz_189FE:
00019DCE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019DD4 6400                       		bcc.s	lz_18A44
00019DD6 4A28 0022                  		tst.b	$22(a0)
00019DDA 6B00                       		bmi.s	lz_18A46
00019DDC 4A28 0020                  		tst.b	$20(a0)
00019DE0 6600                       		bne.s	lz_18A44
00019DE2 4A28 003E                  		tst.b	$3E(a0)
00019DE6 6600                       		bne.s	lz_18A28
00019DE8 117C 0020 003E             		move.b	#$20,$3E(a0)
00019DEE 303C 00AC                  		move.w	#$AC,d0
00019DF2 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019DF8                            
00019DF8                            lz_18A28:
00019DF8 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019DFC 7000                       		moveq	#0,d0
00019DFE 4A51                       		tst.w	(a1)
00019E00 6600                       		bne.s	lz_18A36
00019E02 303C 0EEE                  		move.w	#$EEE,d0
00019E06                            
00019E06                            lz_18A36:
00019E06 3280                       		move.w	d0,(a1)
00019E08 5328 003E                  		subq.b	#1,$3E(a0)
00019E0C 6600                       		bne.s	lz_18A44
00019E0E 117C 000F 0020             		move.b	#$F,$20(a0)
00019E14                            
00019E14                            lz_18A44:
00019E14 4E75                       		rts	
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            lz_18A46:
00019E16 7064                       		moveq	#100,d0
00019E18 6100 0000                  		bsr.w	AddPoints
00019E1C 117C 0006 0025             		move.b	#6,$25(a0)
00019E22 117C 0078 003C             		move.b	#$78,$3C(a0)
00019E28 4268 0010                  		clr.w	$10(a0)
00019E2C 4E75                       		rts	
00019E2E                            ; ===========================================================================
00019E2E                            
00019E2E                            lz_18A5E:				; XREF: obj77_ShipIndex
00019E2E 3028 0030                  		move.w	$30(a0),d0
00019E32 317C 0200 0010             		move.w	#$200,$10(a0)
00019E38 0828 0000 0022             		btst	#0,$22(a0)
00019E3E 6600                       		bne.s	lz_18A7C
00019E40 4468 0010                  		neg.w	$10(a0)
00019E44 0C40 2008                  		cmpi.w	#$2008,d0
00019E48 6E00                       		bgt.s	lz_18A88
00019E4A 6000                       		bra.s	lz_18A82
00019E4C                            ; ===========================================================================
00019E4C                            
00019E4C                            lz_18A7C:
00019E4C 0C40 2138                  		cmpi.w	#$2138,d0
00019E50 6D00                       		blt.s	lz_18A88
00019E52                            
00019E52                            lz_18A82:
00019E52 0868 0000 0022             		bchg	#0,$22(a0)
00019E58                            
00019E58                            lz_18A88:
00019E58 3028 0008                  		move.w	8(a0),d0
00019E5C 72FF                       		moveq	#-1,d1
00019E5E 7402                       		moveq	#2,d2
00019E60 45E8 002A                  		lea	$2A(a0),a2
00019E64 7828                       		moveq	#$28,d4
00019E66 4A68 0010                  		tst.w	$10(a0)
00019E6A 6A00                       		bpl.s	lz_18A9E
00019E6C 4444                       		neg.w	d4
00019E6E                            
00019E6E                            lz_18A9E:
00019E6E 321A                       		move.w	(a2)+,d1
00019E70 2641                       		movea.l	d1,a3
00019E72 082B 0003 0022             		btst	#3,$22(a3)
00019E78 6600                       		bne.s	lz_18AB4
00019E7A 362B 0008                  		move.w	8(a3),d3
00019E7E D644                       		add.w	d4,d3
00019E80 9640                       		sub.w	d0,d3
00019E82 6700                       		beq.s	lz_18AC0
00019E84                            
00019E84                            lz_18AB4:
00019E84 51CA FFE8                  		dbf	d2,lz_18A9E
00019E88                            
00019E88 1142 0028                  		move.b	d2,$28(a0)
00019E8C 6000 FF0C                  		bra.w	lz_189CA
00019E90                            ; ===========================================================================
00019E90                            
00019E90                            lz_18AC0:
00019E90 1142 0028                  		move.b	d2,$28(a0)
00019E94 5428 0025                  		addq.b	#2,$25(a0)
00019E98 117C 0028 003C             		move.b	#$28,$3C(a0)
00019E9E 6000 FEFA                  		bra.w	lz_189CA
00019EA2                            ; ===========================================================================
00019EA2                            
00019EA2                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00019EA2 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019EA8 6600                       		bne.s	lz_18B36
00019EAA 70FF                       		moveq	#-1,d0
00019EAC 1028 0028                  		move.b	$28(a0),d0
00019EB0 4880                       		ext.w	d0
00019EB2 6B00                       		bmi.s	lz_18B40
00019EB4 5540                       		subq.w	#2,d0
00019EB6 4440                       		neg.w	d0
00019EB8 D040                       		add.w	d0,d0
00019EBA 43E8 002A                  		lea	$2A(a0),a1
00019EBE 3031 0000                  		move.w	(a1,d0.w),d0
00019EC2 2440                       		movea.l	d0,a2
00019EC4 43F8 D040                  		lea	($FFFFD040).w,a1
00019EC8 723E                       		moveq	#$3E,d1
00019ECA                            
00019ECA                            lz_18AFA:
00019ECA B0A9 003C                  		cmp.l	$3C(a1),d0
00019ECE 6700                       		beq.s	lz_18B40
00019ED0 D2FC 0040                  		adda.w	#$40,a1
00019ED4 51C9 FFF4                  		dbf	d1,lz_18AFA
00019ED8                            
00019ED8 2F08                       		move.l	a0,-(sp)
00019EDA 41D2                       		lea	(a2),a0
00019EDC 4EB9 0000 F464             		jsr	SingleObjLoad2
00019EE2 205F                       		movea.l	(sp)+,a0
00019EE4 6600                       		bne.s	lz_18B40
00019EE6 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019EEA 3368 0008 0008             		move.w	8(a0),8(a1)
00019EF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019EF6 0669 0020 000C             		addi.w	#$20,$C(a1)
00019EFC 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019F02 234A 003C                  		move.l	a2,$3C(a1)
00019F06                            
00019F06                            lz_18B36:
00019F06 5328 003C                  		subq.b	#1,$3C(a0)
00019F0A 6700                       		beq.s	lz_18B40
00019F0C 6000 FEC0                  		bra.w	lz_189FE
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            lz_18B40:
00019F10 5528 0025                  		subq.b	#2,$25(a0)
00019F14 6000 FE84                  		bra.w	lz_189CA
00019F18                            ; ===========================================================================
00019F18                            
00019F18                            lz_18B48:				; XREF: obj77_ShipIndex
00019F18 5328 003C                  		subq.b	#1,$3C(a0)
00019F1C 6B00                       		bmi.s	lz_18B52
00019F1E 6000 F742                  		bra.w	BossDefeated
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            lz_18B52:
00019F22 5428 0025                  		addq.b	#2,$25(a0)
00019F26 4268 0012                  		clr.w	$12(a0)
00019F2A 08E8 0000 0022             		bset	#0,$22(a0)
00019F30 08A8 0007 0022             		bclr	#7,$22(a0)
00019F36 4268 0010                  		clr.w	$10(a0)
00019F3A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019F40 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019F44 6600                       		bne.s	lz_18B7C
00019F46 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019F4C                            
00019F4C                            lz_18B7C:
00019F4C 6000 FE80                  		bra.w	lz_189FE
00019F50                            ; ===========================================================================
00019F50                            
00019F50                            lz_18B80:				; XREF: obj77_ShipIndex
00019F50 5228 003C                  		addq.b	#1,$3C(a0)
00019F54 6700                       		beq.s	lz_18B90
00019F56 6A00                       		bpl.s	lz_18B96
00019F58 0668 0018 0012             		addi.w	#$18,$12(a0)
00019F5E 6000                       		bra.s	lz_18BC2
00019F60                            ; ===========================================================================
00019F60                            
00019F60                            lz_18B90:
00019F60 4268 0012                  		clr.w	$12(a0)
00019F64 6000                       		bra.s	lz_18BC2
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            lz_18B96:
00019F66 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019F6C 6500                       		bcs.s	lz_18BAE
00019F6E 6700                       		beq.s	lz_18BB4
00019F70 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019F76 6500                       		bcs.s	lz_18BC2
00019F78 5428 0025                  		addq.b	#2,$25(a0)
00019F7C 6000                       		bra.s	lz_18BC2
00019F7E                            ; ===========================================================================
00019F7E                            
00019F7E                            lz_18BAE:
00019F7E 5168 0012                  		subq.w	#8,$12(a0)
00019F82 6000                       		bra.s	lz_18BC2
00019F84                            ; ===========================================================================
00019F84                            
00019F84                            lz_18BB4:
00019F84 4268 0012                  		clr.w	$12(a0)
00019F88 6100 F952                  		bsr.w	BossEnd
00019F8C                            
00019F8C                            lz_18BC2:
00019F8C 6000 FE30                  		bra.w	lz_189EE
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            lz_18BC6:				; XREF: obj77_ShipIndex
00019F90 317C 0400 0010             		move.w	#$400,$10(a0)
00019F96 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F9C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019FA2 6400                       		bcc.s	lz_18BE0
00019FA4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019FA8 6000                       		bra.s	lz_18BE8
00019FAA                            ; ===========================================================================
00019FAA                            
00019FAA                            lz_18BE0:
00019FAA 4A28 0001                  		tst.b	1(a0)
00019FAE 6A00 0000                  		bpl.w	obj77_Delete
00019FB2                            
00019FB2                            lz_18BE8:
00019FB2 6100 F6F0                  		bsr.w	BossMove
00019FB6 6000 FDE2                  		bra.w	lz_189CA
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            obj77_FaceMain:				; XREF: obj77_Index
00019FBA 7000                       		moveq	#0,d0
00019FBC 7201                       		moveq	#1,d1
00019FBE 2268 0034                  		movea.l	$34(a0),a1
00019FC2 1029 0025                  		move.b	$25(a1),d0
00019FC6 0C00 0006                  		cmpi.b	#6,d0
00019FCA 6B00                       		bmi.s	lz_18C06
00019FCC 720A                       		moveq	#$A,d1
00019FCE 6000                       		bra.s	lz_18C1A
00019FD0                            ; ===========================================================================
00019FD0                            
00019FD0                            lz_18C06:
00019FD0 4A29 0020                  		tst.b	$20(a1)
00019FD4 6600                       		bne.s	lz_18C10
00019FD6 7205                       		moveq	#5,d1
00019FD8 6000                       		bra.s	lz_18C1A
00019FDA                            ; ===========================================================================
00019FDA                            
00019FDA                            lz_18C10:
00019FDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019FE0 6500                       		bcs.s	lz_18C1A
00019FE2 7204                       		moveq	#4,d1
00019FE4                            
00019FE4                            lz_18C1A:
00019FE4 1141 001C                  		move.b	d1,$1C(a0)
00019FE8 0C00 000A                  		cmpi.b	#$A,d0
00019FEC 6600                       		bne.s	lz_18C32
00019FEE 117C 0006 001C             		move.b	#6,$1C(a0)
00019FF4 4A28 0001                  		tst.b	1(a0)
00019FF8 6A00 0000                  		bpl.w	obj77_Delete
00019FFC                            
00019FFC                            lz_18C32:
00019FFC 6000                       		bra.s	lz_18C6C
00019FFE                            ; ===========================================================================
00019FFE                            
00019FFE                            obj77_FlameMain:			; XREF: obj77_Index
00019FFE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A004 2268 0034                  		movea.l	$34(a0),a1
0001A008 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A00E 6600                       		bne.s	lz_18C56
0001A010 4A28 0001                  		tst.b	1(a0)
0001A014 6A00 0000                  		bpl.w	obj77_Delete
0001A018 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A01E 6000                       		bra.s	lz_18C6C
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            lz_18C56:
0001A020 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A026 6E00                       		bgt.s	lz_18C6C
0001A028 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A02E 6D00                       		blt.s	lz_18C6C
0001A030 117C 0007 001C             		move.b	#7,$1C(a0)
0001A036                            
0001A036                            lz_18C6C:
0001A036 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001A03C 4EB9 0000 BEA2             		jsr	AnimateSprite
0001A042                            
0001A042                            lz_18C78:
0001A042 2268 0034                  		movea.l	$34(a0),a1
0001A046 3169 0008 0008             		move.w	8(a1),8(a0)
0001A04C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A052 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A058 7003                       		moveq	#3,d0
0001A05A C028 0022                  		and.b	$22(a0),d0
0001A05E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A064 8128 0001                  		or.b	d0,1(a0)
0001A068 4EF9 0000 EFBA             		jmp	DisplaySprite
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            obj77_TubeMain:				; XREF: obj77_Index
0001A06E 2268 0034                  		movea.l	$34(a0),a1
0001A072 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A078 6600                       		bne.s	lz_18CB8
0001A07A 4A28 0001                  		tst.b	1(a0)
0001A07E 6A00 0000                  		bpl.w	obj77_Delete
0001A082                            
0001A082                            lz_18CB8:
0001A082 217C 0001 9C28 0004        		move.l	#Map_BossItems,4(a0)
0001A08A 317C 246C 0002             		move.w	#$246C,2(a0)
0001A090 117C 0003 001A             		move.b	#3,$1A(a0)
0001A096 60AA                       		bra.s	lz_18C78
0001A098                            
0001A098                            
0001A098                            
0001A098                            ; ===========================================================================
0001A098                            ; ---------------------------------------------------------------------------
0001A098                            ; Object 73 - Eggman (MZ)
0001A098                            ; ---------------------------------------------------------------------------
0001A098                            
0001A098                            Obj73:					; XREF: Obj_Index
0001A098 7000                       		moveq	#0,d0
0001A09A 1028 0024                  		move.b	$24(a0),d0
0001A09E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A0A2 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A0A6                            ; ===========================================================================
0001A0A6 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A0A8 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A0AA 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A0AC 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A0AE 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A0B0                            
0001A0B0 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A0B3 0401 04                    		dc.b 4,	1, 4
0001A0B6 0607 04                    		dc.b 6,	7, 4
0001A0B9 0800 03                    		dc.b 8,	0, 3
0001A0BC                            ; ===========================================================================
0001A0BC                            
0001A0BC                            Obj73_Main:				; XREF: Obj73_Index
0001A0BC 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A0C2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A0C8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0CE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A0D4 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A0D8 2248                       		movea.l	a0,a1
0001A0DA 7203                       		moveq	#3,d1
0001A0DC 6000                       		bra.s	Obj73_LoadBoss
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            Obj73_Loop:
0001A0DE 4EB9 0000 F464             		jsr	SingleObjLoad2
0001A0E4 6600                       		bne.s	Obj73_ShipMain
0001A0E6 12BC 0073                  		move.b	#$73,0(a1)
0001A0EA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A0F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A0F6                            
0001A0F6                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A0F6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0FC 4229 0025                  		clr.b	$25(a1)
0001A100 135A 0024                  		move.b	(a2)+,$24(a1)
0001A104 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A108 135A 0018                  		move.b	(a2)+,$18(a1)
0001A10C 237C 0001 9B60 0004        		move.l	#Map_Eggman,4(a1)
0001A114 337C 0400 0002             		move.w	#$400,2(a1)
0001A11A 137C 0004 0001             		move.b	#4,1(a1)
0001A120 137C 0020 0019             		move.b	#$20,$19(a1)
0001A126 2348 0034                  		move.l	a0,$34(a1)
0001A12A 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A12E                            
0001A12E                            Obj73_ShipMain:
0001A12E 7000                       		moveq	#0,d0
0001A130 1028 0025                  		move.b	$25(a0),d0
0001A134 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A138 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A13C 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001A142 4EB9 0000 BEA2             		jsr	AnimateSprite
0001A148 7003                       		moveq	#3,d0
0001A14A C028 0022                  		and.b	$22(a0),d0
0001A14E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A154 8128 0001                  		or.b	d0,1(a0)
0001A158 4EF9 0000 EFBA             		jmp	DisplaySprite
0001A15E                            ; ===========================================================================
0001A15E 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A160 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A162 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A164 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A166 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            loc_18302:				; XREF: Obj73_ShipIndex
0001A168 1028 003F                  		move.b	$3F(a0),d0
0001A16C 5428 003F                  		addq.b	#2,$3F(a0)
0001A170 4EB9 0000 287A             		jsr	(CalcSine).l
0001A176 E440                       		asr.w	#2,d0
0001A178 3140 0012                  		move.w	d0,$12(a0)
0001A17C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A182 6100 F520                  		bsr.w	BossMove
0001A186 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A18C 6600                       		bne.s	loc_18334
0001A18E 5428 0025                  		addq.b	#2,$25(a0)
0001A192 4228 0028                  		clr.b	$28(a0)
0001A196 42A8 0010                  		clr.l	$10(a0)
0001A19A                            
0001A19A                            loc_18334:
0001A19A 4EB9 0000 2854             		jsr	(RandomNumber).l
0001A1A0 1140 0034                  		move.b	d0,$34(a0)
0001A1A4                            
0001A1A4                            loc_1833E:
0001A1A4 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A1AA 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A1B0 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A1B6 6400                       		bcc.s	locret_18390
0001A1B8 4A28 0022                  		tst.b	$22(a0)
0001A1BC 6B00                       		bmi.s	loc_18392
0001A1BE 4A28 0020                  		tst.b	$20(a0)
0001A1C2 6600                       		bne.s	locret_18390
0001A1C4 4A28 003E                  		tst.b	$3E(a0)
0001A1C8 6600                       		bne.s	loc_18374
0001A1CA 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A1D0 303C 00AC                  		move.w	#$AC,d0
0001A1D4 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A1DA                            
0001A1DA                            loc_18374:
0001A1DA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A1DE 7000                       		moveq	#0,d0
0001A1E0 4A51                       		tst.w	(a1)
0001A1E2 6600                       		bne.s	loc_18382
0001A1E4 303C 0EEE                  		move.w	#$EEE,d0
0001A1E8                            
0001A1E8                            loc_18382:
0001A1E8 3280                       		move.w	d0,(a1)
0001A1EA 5328 003E                  		subq.b	#1,$3E(a0)
0001A1EE 6600                       		bne.s	locret_18390
0001A1F0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1F6                            
0001A1F6                            locret_18390:
0001A1F6 4E75                       		rts	
0001A1F8                            ; ===========================================================================
0001A1F8                            
0001A1F8                            loc_18392:				; XREF: loc_1833E
0001A1F8 7064                       		moveq	#100,d0
0001A1FA 6100 0000                  		bsr.w	AddPoints
0001A1FE 117C 0004 0025             		move.b	#4,$25(a0)
0001A204 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A20A 4268 0010                  		clr.w	$10(a0)
0001A20E 4E75                       		rts	
0001A210                            ; ===========================================================================
0001A210                            
0001A210                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A210 7000                       		moveq	#0,d0
0001A212 1028 0028                  		move.b	$28(a0),d0
0001A216 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A21A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A21E 0228 0006 0028             		andi.b	#6,$28(a0)
0001A224 6000 FF7E                  		bra.w	loc_1833E
0001A228                            ; ===========================================================================
0001A228 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A22A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A22C 0000                       		dc.w loc_183CA-off_183C2
0001A22E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A230                            ; ===========================================================================
0001A230                            
0001A230                            loc_183CA:				; XREF: off_183C2
0001A230 4A68 0010                  		tst.w	$10(a0)
0001A234 6600                       		bne.s	loc_183FE
0001A236 7040                       		moveq	#$40,d0
0001A238 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A23E 6700                       		beq.s	loc_183E6
0001A240 6500                       		bcs.s	loc_183DE
0001A242 4440                       		neg.w	d0
0001A244                            
0001A244                            loc_183DE:
0001A244 3140 0012                  		move.w	d0,$12(a0)
0001A248 6000 F45A                  		bra.w	BossMove
0001A24C                            ; ===========================================================================
0001A24C                            
0001A24C                            loc_183E6:
0001A24C 317C 0200 0010             		move.w	#$200,$10(a0)
0001A252 317C 0100 0012             		move.w	#$100,$12(a0)
0001A258 0828 0000 0022             		btst	#0,$22(a0)
0001A25E 6600                       		bne.s	loc_183FE
0001A260 4468 0010                  		neg.w	$10(a0)
0001A264                            
0001A264                            loc_183FE:
0001A264 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A26A 6400                       		bcc.s	Obj73_MakeLava
0001A26C 6100 F436                  		bsr.w	BossMove
0001A270 5968 0012                  		subq.w	#4,$12(a0)
0001A274                            
0001A274                            Obj73_MakeLava:
0001A274 5328 0034                  		subq.b	#1,$34(a0)
0001A278 6400                       		bcc.s	loc_1845C
0001A27A 4EB9 0000 F44E             		jsr	SingleObjLoad
0001A280 6600                       		bne.s	loc_1844A
0001A282 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A286 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A28C 4EB9 0000 2854             		jsr	(RandomNumber).l
0001A292 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A298 80FC 0050                  		divu.w	#$50,d0
0001A29C 4840                       		swap	d0
0001A29E 0640 1878                  		addi.w	#$1878,d0
0001A2A2 3340 0008                  		move.w	d0,8(a1)
0001A2A6 EE09                       		lsr.b	#7,d1
0001A2A8 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A2AE                            
0001A2AE                            loc_1844A:
0001A2AE 4EB9 0000 2854             		jsr	(RandomNumber).l
0001A2B4 0200 001F                  		andi.b	#$1F,d0
0001A2B8 0600 0040                  		addi.b	#$40,d0
0001A2BC 1140 0034                  		move.b	d0,$34(a0)
0001A2C0                            
0001A2C0                            loc_1845C:
0001A2C0 0828 0000 0022             		btst	#0,$22(a0)
0001A2C6 6700                       		beq.s	loc_18474
0001A2C8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A2CE 6D00                       		blt.s	locret_1849C
0001A2D0 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A2D6 6000                       		bra.s	loc_18482
0001A2D8                            ; ===========================================================================
0001A2D8                            
0001A2D8                            loc_18474:
0001A2D8 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A2DE 6E00                       		bgt.s	locret_1849C
0001A2E0 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A2E6                            
0001A2E6                            loc_18482:
0001A2E6 4268 0010                  		clr.w	$10(a0)
0001A2EA 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A2F0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A2F6 6400                       		bcc.s	loc_18498
0001A2F8 4468 0012                  		neg.w	$12(a0)
0001A2FC                            
0001A2FC                            loc_18498:
0001A2FC 5428 0028                  		addq.b	#2,$28(a0)
0001A300                            
0001A300                            locret_1849C:
0001A300 4E75                       		rts	
0001A302                            ; ===========================================================================
0001A302                            
0001A302                            Obj73_MakeLava2:			; XREF: off_183C2
0001A302 6100 F3A0                  		bsr.w	BossMove
0001A306 3028 0038                  		move.w	$38(a0),d0
0001A30A 0440 022C                  		subi.w	#$22C,d0
0001A30E 6E00                       		bgt.s	locret_184F4
0001A310 303C 022C                  		move.w	#$22C,d0
0001A314 4A68 0012                  		tst.w	$12(a0)
0001A318 6700                       		beq.s	loc_184EA
0001A31A 4268 0012                  		clr.w	$12(a0)
0001A31E 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A324 0868 0000 0022             		bchg	#0,$22(a0)
0001A32A 4EB9 0000 F44E             		jsr	SingleObjLoad
0001A330 6600                       		bne.s	loc_184EA
0001A332 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A338 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A33E 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A344 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A348 137C 0001 0028             		move.b	#1,$28(a1)
0001A34E                            
0001A34E                            loc_184EA:
0001A34E 5368 003C                  		subq.w	#1,$3C(a0)
0001A352 6600                       		bne.s	locret_184F4
0001A354 5428 0028                  		addq.b	#2,$28(a0)
0001A358                            
0001A358                            locret_184F4:
0001A358 4E75                       		rts	
0001A35A                            ; ===========================================================================
0001A35A                            
0001A35A                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A35A 5368 003C                  		subq.w	#1,$3C(a0)
0001A35E 6B00                       		bmi.s	loc_18500
0001A360 6000 F300                  		bra.w	BossDefeated
0001A364                            ; ===========================================================================
0001A364                            
0001A364                            loc_18500:
0001A364 08E8 0000 0022             		bset	#0,$22(a0)
0001A36A 08A8 0007 0022             		bclr	#7,$22(a0)
0001A370 4268 0010                  		clr.w	$10(a0)
0001A374 5428 0025                  		addq.b	#2,$25(a0)
0001A378 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A37E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A382 6600                       		bne.s	locret_1852A
0001A384 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A38A 4268 0012                  		clr.w	$12(a0)
0001A38E                            
0001A38E                            locret_1852A:
0001A38E 4E75                       		rts	
0001A390                            ; ===========================================================================
0001A390                            
0001A390                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A390 5268 003C                  		addq.w	#1,$3C(a0)
0001A394 6700                       		beq.s	loc_18544
0001A396 6A00                       		bpl.s	loc_1854E
0001A398 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A39E 6400                       		bcc.s	loc_18544
0001A3A0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A3A6 6000                       		bra.s	loc_1857A
0001A3A8                            ; ===========================================================================
0001A3A8                            
0001A3A8                            loc_18544:
0001A3A8 4268 0012                  		clr.w	$12(a0)
0001A3AC 4268 003C                  		clr.w	$3C(a0)
0001A3B0 6000                       		bra.s	loc_1857A
0001A3B2                            ; ===========================================================================
0001A3B2                            
0001A3B2                            loc_1854E:
0001A3B2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A3B8 6500                       		bcs.s	loc_18566
0001A3BA 6700                       		beq.s	loc_1856C
0001A3BC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A3C2 6500                       		bcs.s	loc_1857A
0001A3C4 5428 0025                  		addq.b	#2,$25(a0)
0001A3C8 6000                       		bra.s	loc_1857A
0001A3CA                            ; ===========================================================================
0001A3CA                            
0001A3CA                            loc_18566:
0001A3CA 5168 0012                  		subq.w	#8,$12(a0)
0001A3CE 6000                       		bra.s	loc_1857A
0001A3D0                            ; ===========================================================================
0001A3D0                            
0001A3D0                            loc_1856C:
0001A3D0 4268 0012                  		clr.w	$12(a0)
0001A3D4 6100 F506                  		bsr.w	BossEnd
0001A3D8                            
0001A3D8                            loc_1857A:
0001A3D8 6100 F2CA                  		bsr.w	BossMove
0001A3DC 6000 FDC6                  		bra.w	loc_1833E
0001A3E0                            ; ===========================================================================
0001A3E0                            
0001A3E0                            loc_18582:				; XREF: Obj73_ShipIndex
0001A3E0 317C 0500 0010             		move.w	#$500,$10(a0)
0001A3E6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A3EC 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A3F2 6400                       		bcc.s	loc_1859C
0001A3F4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A3F8 6000                       		bra.s	loc_185A2
0001A3FA                            ; ===========================================================================
0001A3FA                            
0001A3FA                            loc_1859C:
0001A3FA 4A28 0001                  		tst.b	1(a0)
0001A3FE 6A00                       		bpl.s	Obj73_ShipDel
0001A400                            
0001A400                            loc_185A2:
0001A400 6100 F2A2                  		bsr.w	BossMove
0001A404 6000 FD9E                  		bra.w	loc_1833E
0001A408                            ; ===========================================================================
0001A408                            
0001A408                            Obj73_ShipDel:
0001A408 4EF9 0000 EFF6             		jmp	DeleteObject
0001A40E                            ; ===========================================================================
0001A40E                            
0001A40E                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A40E 7000                       		moveq	#0,d0
0001A410 7201                       		moveq	#1,d1
0001A412 2268 0034                  		movea.l	$34(a0),a1
0001A416 1029 0025                  		move.b	$25(a1),d0
0001A41A 5540                       		subq.w	#2,d0
0001A41C 6600                       		bne.s	loc_185D2
0001A41E 0829 0001 0028             		btst	#1,$28(a1)
0001A424 6700                       		beq.s	loc_185DA
0001A426 4A69 0012                  		tst.w	$12(a1)
0001A42A 6600                       		bne.s	loc_185DA
0001A42C 7204                       		moveq	#4,d1
0001A42E 6000                       		bra.s	loc_185EE
0001A430                            ; ===========================================================================
0001A430                            
0001A430                            loc_185D2:
0001A430 5500                       		subq.b	#2,d0
0001A432 6B00                       		bmi.s	loc_185DA
0001A434 720A                       		moveq	#$A,d1
0001A436 6000                       		bra.s	loc_185EE
0001A438                            ; ===========================================================================
0001A438                            
0001A438                            loc_185DA:
0001A438 4A29 0020                  		tst.b	$20(a1)
0001A43C 6600                       		bne.s	loc_185E4
0001A43E 7205                       		moveq	#5,d1
0001A440 6000                       		bra.s	loc_185EE
0001A442                            ; ===========================================================================
0001A442                            
0001A442                            loc_185E4:
0001A442 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A448 6500                       		bcs.s	loc_185EE
0001A44A 7204                       		moveq	#4,d1
0001A44C                            
0001A44C                            loc_185EE:
0001A44C 1141 001C                  		move.b	d1,$1C(a0)
0001A450 5900                       		subq.b	#4,d0
0001A452 6600                       		bne.s	loc_18602
0001A454 117C 0006 001C             		move.b	#6,$1C(a0)
0001A45A 4A28 0001                  		tst.b	1(a0)
0001A45E 6A00                       		bpl.s	Obj73_FaceDel
0001A460                            
0001A460                            loc_18602:
0001A460 6000                       		bra.s	Obj73_Display
0001A462                            ; ===========================================================================
0001A462                            
0001A462                            Obj73_FaceDel:
0001A462 4EF9 0000 EFF6             		jmp	DeleteObject
0001A468                            ; ===========================================================================
0001A468                            
0001A468                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A468 117C 0007 001C             		move.b	#7,$1C(a0)
0001A46E 2268 0034                  		movea.l	$34(a0),a1
0001A472 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A478 6D00                       		blt.s	loc_1862A
0001A47A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A480 4A28 0001                  		tst.b	1(a0)
0001A484 6A00                       		bpl.s	Obj73_FlameDel
0001A486 6000                       		bra.s	loc_18636
0001A488                            ; ===========================================================================
0001A488                            
0001A488                            loc_1862A:
0001A488 4A69 0010                  		tst.w	$10(a1)
0001A48C 6700                       		beq.s	loc_18636
0001A48E 117C 0008 001C             		move.b	#8,$1C(a0)
0001A494                            
0001A494                            loc_18636:
0001A494 6000                       		bra.s	Obj73_Display
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A496 4EF9 0000 EFF6             		jmp	DeleteObject
0001A49C                            ; ===========================================================================
0001A49C                            
0001A49C                            Obj73_Display:
0001A49C 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001A4A2 4EB9 0000 BEA2             		jsr	AnimateSprite
0001A4A8                            
0001A4A8                            loc_1864A:
0001A4A8 2268 0034                  		movea.l	$34(a0),a1
0001A4AC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A4B2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A4B8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A4BE 7003                       		moveq	#3,d0
0001A4C0 C028 0022                  		and.b	$22(a0),d0
0001A4C4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A4CA 8128 0001                  		or.b	d0,1(a0)
0001A4CE 4EF9 0000 EFBA             		jmp	DisplaySprite
0001A4D4                            ; ===========================================================================
0001A4D4                            
0001A4D4                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A4D4 2268 0034                  		movea.l	$34(a0),a1
0001A4D8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A4DE 6600                       		bne.s	loc_18688
0001A4E0 4A28 0001                  		tst.b	1(a0)
0001A4E4 6A00                       		bpl.s	Obj73_TubeDel
0001A4E6                            
0001A4E6                            loc_18688:
0001A4E6 217C 0001 9C28 0004        		move.l	#Map_BossItems,4(a0)
0001A4EE 317C 246C 0002             		move.w	#$246C,2(a0)
0001A4F4 117C 0004 001A             		move.b	#4,$1A(a0)
0001A4FA 60AC                       		bra.s	loc_1864A
0001A4FC                            ; ===========================================================================
0001A4FC                            
0001A4FC                            Obj73_TubeDel:
0001A4FC 4EF9 0000 EFF6             		jmp	DeleteObject
0001A502                            ; ===========================================================================
0001A502                            ; ---------------------------------------------------------------------------
0001A502                            ; Object 74 - lava that	Eggman drops (MZ)
0001A502                            ; ---------------------------------------------------------------------------
0001A502                            
0001A502                            Obj74:					; XREF: Obj_Index
0001A502 7000                       		moveq	#0,d0
0001A504 1028 0024                  		move.b	$24(a0),d0
0001A508 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A50C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A510 4EF9 0000 EFBA             		jmp	DisplaySprite
0001A516                            ; ===========================================================================
0001A516 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A518 0000                       		dc.w Obj74_Action-Obj74_Index
0001A51A 0000                       		dc.w loc_18886-Obj74_Index
0001A51C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A51E                            ; ===========================================================================
0001A51E                            
0001A51E                            Obj74_Main:				; XREF: Obj74_Index
0001A51E 117C 0008 0016             		move.b	#8,$16(a0)
0001A524 117C 0008 0017             		move.b	#8,$17(a0)
0001A52A 217C 0000 CAF4 0004        		move.l	#Map_obj14,4(a0)
0001A532 317C 0345 0002             		move.w	#$345,2(a0)
0001A538 117C 0004 0001             		move.b	#4,1(a0)
0001A53E 117C 0005 0018             		move.b	#5,$18(a0)
0001A544 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A54A 117C 0008 0019             		move.b	#8,$19(a0)
0001A550 5428 0024                  		addq.b	#2,$24(a0)
0001A554 4A28 0028                  		tst.b	$28(a0)
0001A558 6600                       		bne.s	loc_1870A
0001A55A 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A560 5428 0024                  		addq.b	#2,$24(a0)
0001A564 6000 0000                  		bra.w	loc_18886
0001A568                            ; ===========================================================================
0001A568                            
0001A568                            loc_1870A:
0001A568 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A56E 303C 00AE                  		move.w	#$AE,d0
0001A572 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play lava sound
0001A578                            
0001A578                            Obj74_Action:				; XREF: Obj74_Index
0001A578 7000                       		moveq	#0,d0
0001A57A 1028 0025                  		move.b	$25(a0),d0
0001A57E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A582 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A586 4EB9 0000 EFA0             		jsr	SpeedToPos
0001A58C 43F9 0000 FE96             		lea	(Ani_obj14).l,a1
0001A592 4EB9 0000 BEA2             		jsr	AnimateSprite
0001A598 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A59E 6200                       		bhi.s	Obj74_Delete
0001A5A0 4E75                       		rts	
0001A5A2                            ; ===========================================================================
0001A5A2                            
0001A5A2                            Obj74_Delete:
0001A5A2 4EF9 0000 EFF6             		jmp	DeleteObject
0001A5A8                            ; ===========================================================================
0001A5A8 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A5AA 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A5AC 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A5AE 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            Obj74_Drop:				; XREF: Obj74_Index2
0001A5B0 08E8 0001 0022             		bset	#1,$22(a0)
0001A5B6 5328 0029                  		subq.b	#1,$29(a0)
0001A5BA 6A00                       		bpl.s	locret_18780
0001A5BC 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A5C2 4228 0028                  		clr.b	$28(a0)
0001A5C6 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A5CC 08A8 0001 0022             		bclr	#1,$22(a0)
0001A5D2 6100 C656                  		bsr.w	ObjHitFloor
0001A5D6 4A41                       		tst.w	d1
0001A5D8 6A00                       		bpl.s	locret_18780
0001A5DA 5428 0025                  		addq.b	#2,$25(a0)
0001A5DE                            
0001A5DE                            locret_18780:
0001A5DE 4E75                       		rts	
0001A5E0                            ; ===========================================================================
0001A5E0                            
0001A5E0                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A5E0 5568 000C                  		subq.w	#2,$C(a0)
0001A5E4 08E8 0007 0002             		bset	#7,2(a0)
0001A5EA 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A5F0 4268 0012                  		clr.w	$12(a0)
0001A5F4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A5FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A600 117C 0003 0029             		move.b	#3,$29(a0)
0001A606 4EB9 0000 F464             		jsr	SingleObjLoad2
0001A60C 6600                       		bne.s	loc_187CA
0001A60E 47D1                       		lea	(a1),a3
0001A610 45D0                       		lea	(a0),a2
0001A612 7003                       		moveq	#3,d0
0001A614                            
0001A614                            Obj74_Loop:
0001A614 26DA                       		move.l	(a2)+,(a3)+
0001A616 26DA                       		move.l	(a2)+,(a3)+
0001A618 26DA                       		move.l	(a2)+,(a3)+
0001A61A 26DA                       		move.l	(a2)+,(a3)+
0001A61C 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A620                            
0001A620 4469 0010                  		neg.w	$10(a1)
0001A624 5429 0025                  		addq.b	#2,$25(a1)
0001A628                            
0001A628                            loc_187CA:
0001A628 5428 0025                  		addq.b	#2,$25(a0)
0001A62C 4E75                       		rts	
0001A62E                            
0001A62E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A62E                            
0001A62E                            
0001A62E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A62E 4EB9 0000 F464             		jsr	SingleObjLoad2
0001A634 6600                       		bne.s	locret_187EE
0001A636 3368 0008 0008             		move.w	8(a0),8(a1)
0001A63C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A642 12BC 0074                  		move.b	#$74,(a1)
0001A646 337C 0067 0028             		move.w	#$67,$28(a1)
0001A64C                            
0001A64C                            locret_187EE:
0001A64C 4E75                       		rts	
0001A64E                            ; End of function Obj74_Duplicate2
0001A64E                            
0001A64E                            ; ===========================================================================
0001A64E                            
0001A64E                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A64E 6100 C5DA                  		bsr.w	ObjHitFloor
0001A652 4A41                       		tst.w	d1
0001A654 6A00                       		bpl.s	loc_18826
0001A656 3028 0008                  		move.w	8(a0),d0
0001A65A 0C40 1940                  		cmpi.w	#$1940,d0
0001A65E 6E00                       		bgt.s	loc_1882C
0001A660 3228 0030                  		move.w	$30(a0),d1
0001A664 B240                       		cmp.w	d0,d1
0001A666 6700                       		beq.s	loc_1881E
0001A668 0240 0010                  		andi.w	#$10,d0
0001A66C 0241 0010                  		andi.w	#$10,d1
0001A670 B240                       		cmp.w	d0,d1
0001A672 6700                       		beq.s	loc_1881E
0001A674 61B8                       		bsr.s	Obj74_Duplicate2
0001A676 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A67C                            
0001A67C                            loc_1881E:
0001A67C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A682 4E75                       		rts	
0001A684                            ; ===========================================================================
0001A684                            
0001A684                            loc_18826:
0001A684 5428 0025                  		addq.b	#2,$25(a0)
0001A688 4E75                       		rts	
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            loc_1882C:
0001A68A 5428 0024                  		addq.b	#2,$24(a0)
0001A68E 4E75                       		rts	
0001A690                            ; ===========================================================================
0001A690                            
0001A690                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A690 08A8 0001 0022             		bclr	#1,$22(a0)
0001A696 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A69C 3028 0008                  		move.w	8(a0),d0
0001A6A0 9068 0032                  		sub.w	$32(a0),d0
0001A6A4 6A00                       		bpl.s	loc_1884A
0001A6A6 4440                       		neg.w	d0
0001A6A8                            
0001A6A8                            loc_1884A:
0001A6A8 0C40 0012                  		cmpi.w	#$12,d0
0001A6AC 6600                       		bne.s	loc_18856
0001A6AE 08A8 0007 0002             		bclr	#7,2(a0)
0001A6B4                            
0001A6B4                            loc_18856:
0001A6B4 6100 C574                  		bsr.w	ObjHitFloor
0001A6B8 4A41                       		tst.w	d1
0001A6BA 6A00                       		bpl.s	locret_1887E
0001A6BC 5328 0029                  		subq.b	#1,$29(a0)
0001A6C0 6700                       		beq.s	Obj74_Delete2
0001A6C2 4268 0012                  		clr.w	$12(a0)
0001A6C6 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A6CC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A6D2 08E8 0007 0002             		bset	#7,2(a0)
0001A6D8 5528 0025                  		subq.b	#2,$25(a0)
0001A6DC                            
0001A6DC                            locret_1887E:
0001A6DC 4E75                       		rts	
0001A6DE                            ; ===========================================================================
0001A6DE                            
0001A6DE                            Obj74_Delete2:
0001A6DE 4EF9 0000 EFF6             		jmp	DeleteObject
0001A6E4                            ; ===========================================================================
0001A6E4                            
0001A6E4                            loc_18886:				; XREF: Obj74_Index
0001A6E4 08E8 0007 0002             		bset	#7,2(a0)
0001A6EA 5328 0029                  		subq.b	#1,$29(a0)
0001A6EE 6600                       		bne.s	Obj74_Animate
0001A6F0 117C 0001 001C             		move.b	#1,$1C(a0)
0001A6F6 5968 000C                  		subq.w	#4,$C(a0)
0001A6FA 4228 0020                  		clr.b	$20(a0)
0001A6FE                            
0001A6FE                            Obj74_Animate:
0001A6FE 43F9 0000 FE96             		lea	(Ani_obj14).l,a1
0001A704 4EF9 0000 BEA2             		jmp	AnimateSprite
0001A70A                            ; ===========================================================================
0001A70A                            
0001A70A                            Obj74_Delete3:				; XREF: Obj74_Index
0001A70A 4EF9 0000 EFF6             		jmp	DeleteObject
0001A710                            ; ===========================================================================
0001A710                            
0001A710                            Obj7A_Delete:
0001A710 4EF9 0000 EFF6             		jmp	DeleteObject
0001A716                            
0001A716                            Obj77_Delete:
0001A716 4EF9 0000 EFF6             		jmp	DeleteObject
0001A71C                            
0001A71C                            ; ===========================================================================
0001A71C                            ; ---------------------------------------------------------------------------
0001A71C                            ; Object 7A - Eggman (SLZ)
0001A71C                            ; ---------------------------------------------------------------------------
0001A71C                            
0001A71C                            Obj7A:					; XREF: Obj_Index
0001A71C 7000                       		moveq	#0,d0
0001A71E 1028 0024                  		move.b	$24(a0),d0
0001A722 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A726 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A72A                            ; ===========================================================================
0001A72A 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A72C 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A72E 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A730 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A732 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A734                            
0001A734 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A737 0401 04                    		dc.b 4,	1, 4
0001A73A 0607 04                    		dc.b 6,	7, 4
0001A73D 0800 03                    		dc.b 8,	0, 3
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            Obj7A_Main:				; XREF: Obj7A_Index
0001A740 317C 2188 0008             		move.w	#$2188,8(a0)
0001A746 317C 0228 000C             		move.w	#$228,$C(a0)
0001A74C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A752 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A758 117C 000F 0020             		move.b	#$F,$20(a0)
0001A75E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A764 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A768 2248                       		movea.l	a0,a1
0001A76A 7203                       		moveq	#3,d1
0001A76C 6000                       		bra.s	Obj7A_LoadBoss
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            Obj7A_Loop:
0001A76E 4EB9 0000 F464             		jsr	SingleObjLoad2
0001A774 6600                       		bne.s	loc_1895C
0001A776 12BC 007A                  		move.b	#$7A,0(a1)
0001A77A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A780 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A786                            
0001A786                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A786 08A8 0000 0022             		bclr	#0,$22(a0)
0001A78C 4229 0025                  		clr.b	$25(a1)
0001A790 135A 0024                  		move.b	(a2)+,$24(a1)
0001A794 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A798 135A 0018                  		move.b	(a2)+,$18(a1)
0001A79C 237C 0001 9B60 0004        		move.l	#Map_Eggman,4(a1)
0001A7A4 337C 0400 0002             		move.w	#$400,2(a1)
0001A7AA 137C 0004 0001             		move.b	#4,1(a1)
0001A7B0 137C 0020 0019             		move.b	#$20,$19(a1)
0001A7B6 2348 0034                  		move.l	a0,$34(a1)
0001A7BA 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A7BE                            
0001A7BE                            loc_1895C:
0001A7BE 43F8 D040                  		lea	($FFFFD040).w,a1
0001A7C2 45E8 002A                  		lea	$2A(a0),a2
0001A7C6 705E                       		moveq	#$5E,d0
0001A7C8 723E                       		moveq	#$3E,d1
0001A7CA                            
0001A7CA                            loc_18968:
0001A7CA B011                       		cmp.b	(a1),d0
0001A7CC 6600                       		bne.s	loc_18974
0001A7CE 4A29 0028                  		tst.b	$28(a1)
0001A7D2 6700                       		beq.s	loc_18974
0001A7D4 34C9                       		move.w	a1,(a2)+
0001A7D6                            
0001A7D6                            loc_18974:
0001A7D6 D2FC 0040                  		adda.w	#$40,a1
0001A7DA 51C9 FFEE                  		dbf	d1,loc_18968
0001A7DE                            
0001A7DE                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A7DE 7000                       		moveq	#0,d0
0001A7E0 1028 0025                  		move.b	$25(a0),d0
0001A7E4 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A7E8 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A7EC 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001A7F2 4EB9 0000 BEA2             		jsr	AnimateSprite
0001A7F8 7003                       		moveq	#3,d0
0001A7FA C028 0022                  		and.b	$22(a0),d0
0001A7FE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A804 8128 0001                  		or.b	d0,1(a0)
0001A808 4EF9 0000 EFBA             		jmp	DisplaySprite
0001A80E                            ; ===========================================================================
0001A80E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A810 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A812 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A814 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A816 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A818 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A81A                            ; ===========================================================================
0001A81A                            
0001A81A                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A81A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A820 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A826 6400                       		bcc.s	loc_189CA
0001A828 5428 0025                  		addq.b	#2,$25(a0)
0001A82C                            
0001A82C                            loc_189CA:
0001A82C 6100 EE76                  		bsr.w	BossMove
0001A830 1028 003F                  		move.b	$3F(a0),d0
0001A834 5428 003F                  		addq.b	#2,$3F(a0)
0001A838 4EB9 0000 287A             		jsr	(CalcSine).l
0001A83E EC40                       		asr.w	#6,d0
0001A840 D068 0038                  		add.w	$38(a0),d0
0001A844 3140 000C                  		move.w	d0,$C(a0)
0001A848 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A84E 6000                       		bra.s	loc_189FE
0001A850                            ; ===========================================================================
0001A850                            
0001A850                            loc_189EE:
0001A850 6100 EE52                  		bsr.w	BossMove
0001A854 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A85A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A860                            
0001A860                            loc_189FE:
0001A860 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A866 6400                       		bcc.s	locret_18A44
0001A868 4A28 0022                  		tst.b	$22(a0)
0001A86C 6B00                       		bmi.s	loc_18A46
0001A86E 4A28 0020                  		tst.b	$20(a0)
0001A872 6600                       		bne.s	locret_18A44
0001A874 4A28 003E                  		tst.b	$3E(a0)
0001A878 6600                       		bne.s	loc_18A28
0001A87A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A880 303C 00AC                  		move.w	#$AC,d0
0001A884 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A88A                            
0001A88A                            loc_18A28:
0001A88A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A88E 7000                       		moveq	#0,d0
0001A890 4A51                       		tst.w	(a1)
0001A892 6600                       		bne.s	loc_18A36
0001A894 303C 0EEE                  		move.w	#$EEE,d0
0001A898                            
0001A898                            loc_18A36:
0001A898 3280                       		move.w	d0,(a1)
0001A89A 5328 003E                  		subq.b	#1,$3E(a0)
0001A89E 6600                       		bne.s	locret_18A44
0001A8A0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A8A6                            
0001A8A6                            locret_18A44:
0001A8A6 4E75                       		rts	
0001A8A8                            ; ===========================================================================
0001A8A8                            
0001A8A8                            loc_18A46:
0001A8A8 7064                       		moveq	#100,d0
0001A8AA 6100 0000                  		bsr.w	AddPoints
0001A8AE 117C 0006 0025             		move.b	#6,$25(a0)
0001A8B4 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A8BA 4268 0010                  		clr.w	$10(a0)
0001A8BE 4E75                       		rts	
0001A8C0                            ; ===========================================================================
0001A8C0                            
0001A8C0                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A8C0 3028 0030                  		move.w	$30(a0),d0
0001A8C4 317C 0200 0010             		move.w	#$200,$10(a0)
0001A8CA 0828 0000 0022             		btst	#0,$22(a0)
0001A8D0 6600                       		bne.s	loc_18A7C
0001A8D2 4468 0010                  		neg.w	$10(a0)
0001A8D6 0C40 2008                  		cmpi.w	#$2008,d0
0001A8DA 6E00                       		bgt.s	loc_18A88
0001A8DC 6000                       		bra.s	loc_18A82
0001A8DE                            ; ===========================================================================
0001A8DE                            
0001A8DE                            loc_18A7C:
0001A8DE 0C40 2138                  		cmpi.w	#$2138,d0
0001A8E2 6D00                       		blt.s	loc_18A88
0001A8E4                            
0001A8E4                            loc_18A82:
0001A8E4 0868 0000 0022             		bchg	#0,$22(a0)
0001A8EA                            
0001A8EA                            loc_18A88:
0001A8EA 3028 0008                  		move.w	8(a0),d0
0001A8EE 72FF                       		moveq	#-1,d1
0001A8F0 7402                       		moveq	#2,d2
0001A8F2 45E8 002A                  		lea	$2A(a0),a2
0001A8F6 7828                       		moveq	#$28,d4
0001A8F8 4A68 0010                  		tst.w	$10(a0)
0001A8FC 6A00                       		bpl.s	loc_18A9E
0001A8FE 4444                       		neg.w	d4
0001A900                            
0001A900                            loc_18A9E:
0001A900 321A                       		move.w	(a2)+,d1
0001A902 2641                       		movea.l	d1,a3
0001A904 082B 0003 0022             		btst	#3,$22(a3)
0001A90A 6600                       		bne.s	loc_18AB4
0001A90C 362B 0008                  		move.w	8(a3),d3
0001A910 D644                       		add.w	d4,d3
0001A912 9640                       		sub.w	d0,d3
0001A914 6700                       		beq.s	loc_18AC0
0001A916                            
0001A916                            loc_18AB4:
0001A916 51CA FFE8                  		dbf	d2,loc_18A9E
0001A91A                            
0001A91A 1142 0028                  		move.b	d2,$28(a0)
0001A91E 6000 FF0C                  		bra.w	loc_189CA
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            loc_18AC0:
0001A922 1142 0028                  		move.b	d2,$28(a0)
0001A926 5428 0025                  		addq.b	#2,$25(a0)
0001A92A 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A930 6000 FEFA                  		bra.w	loc_189CA
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A934 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A93A 6600                       		bne.s	loc_18B36
0001A93C 70FF                       		moveq	#-1,d0
0001A93E 1028 0028                  		move.b	$28(a0),d0
0001A942 4880                       		ext.w	d0
0001A944 6B00                       		bmi.s	loc_18B40
0001A946 5540                       		subq.w	#2,d0
0001A948 4440                       		neg.w	d0
0001A94A D040                       		add.w	d0,d0
0001A94C 43E8 002A                  		lea	$2A(a0),a1
0001A950 3031 0000                  		move.w	(a1,d0.w),d0
0001A954 2440                       		movea.l	d0,a2
0001A956 43F8 D040                  		lea	($FFFFD040).w,a1
0001A95A 723E                       		moveq	#$3E,d1
0001A95C                            
0001A95C                            loc_18AFA:
0001A95C B0A9 003C                  		cmp.l	$3C(a1),d0
0001A960 6700                       		beq.s	loc_18B40
0001A962 D2FC 0040                  		adda.w	#$40,a1
0001A966 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A96A                            
0001A96A 2F08                       		move.l	a0,-(sp)
0001A96C 41D2                       		lea	(a2),a0
0001A96E 4EB9 0000 F464             		jsr	SingleObjLoad2
0001A974 205F                       		movea.l	(sp)+,a0
0001A976 6600                       		bne.s	loc_18B40
0001A978 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A97C 3368 0008 0008             		move.w	8(a0),8(a1)
0001A982 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A988 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A98E 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A994 234A 003C                  		move.l	a2,$3C(a1)
0001A998                            
0001A998                            loc_18B36:
0001A998 5328 003C                  		subq.b	#1,$3C(a0)
0001A99C 6700                       		beq.s	loc_18B40
0001A99E 6000 FEC0                  		bra.w	loc_189FE
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            loc_18B40:
0001A9A2 5528 0025                  		subq.b	#2,$25(a0)
0001A9A6 6000 FE84                  		bra.w	loc_189CA
0001A9AA                            ; ===========================================================================
0001A9AA                            
0001A9AA                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A9AA 5328 003C                  		subq.b	#1,$3C(a0)
0001A9AE 6B00                       		bmi.s	loc_18B52
0001A9B0 6000 ECB0                  		bra.w	BossDefeated
0001A9B4                            ; ===========================================================================
0001A9B4                            
0001A9B4                            loc_18B52:
0001A9B4 5428 0025                  		addq.b	#2,$25(a0)
0001A9B8 4268 0012                  		clr.w	$12(a0)
0001A9BC 08E8 0000 0022             		bset	#0,$22(a0)
0001A9C2 08A8 0007 0022             		bclr	#7,$22(a0)
0001A9C8 4268 0010                  		clr.w	$10(a0)
0001A9CC 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A9D2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A9D6 6600                       		bne.s	loc_18B7C
0001A9D8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A9DE                            
0001A9DE                            loc_18B7C:
0001A9DE 6000 FE80                  		bra.w	loc_189FE
0001A9E2                            ; ===========================================================================
0001A9E2                            
0001A9E2                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A9E2 5228 003C                  		addq.b	#1,$3C(a0)
0001A9E6 6700                       		beq.s	loc_18B90
0001A9E8 6A00                       		bpl.s	loc_18B96
0001A9EA 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A9F0 6000                       		bra.s	loc_18BC2
0001A9F2                            ; ===========================================================================
0001A9F2                            
0001A9F2                            loc_18B90:
0001A9F2 4268 0012                  		clr.w	$12(a0)
0001A9F6 6000                       		bra.s	loc_18BC2
0001A9F8                            ; ===========================================================================
0001A9F8                            
0001A9F8                            loc_18B96:
0001A9F8 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A9FE 6500                       		bcs.s	loc_18BAE
0001AA00 6700                       		beq.s	loc_18BB4
0001AA02 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AA08 6500                       		bcs.s	loc_18BC2
0001AA0A 5428 0025                  		addq.b	#2,$25(a0)
0001AA0E 6000                       		bra.s	loc_18BC2
0001AA10                            ; ===========================================================================
0001AA10                            
0001AA10                            loc_18BAE:
0001AA10 5168 0012                  		subq.w	#8,$12(a0)
0001AA14 6000                       		bra.s	loc_18BC2
0001AA16                            ; ===========================================================================
0001AA16                            
0001AA16                            loc_18BB4:
0001AA16 4268 0012                  		clr.w	$12(a0)
0001AA1A 6100 EEC0                  		bsr.w	BossEnd
0001AA1E                            
0001AA1E                            loc_18BC2:
0001AA1E 6000 FE30                  		bra.w	loc_189EE
0001AA22                            ; ===========================================================================
0001AA22                            
0001AA22                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AA22 317C 0400 0010             		move.w	#$400,$10(a0)
0001AA28 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AA2E 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AA34 6400                       		bcc.s	loc_18BE0
0001AA36 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA3A 6000                       		bra.s	loc_18BE8
0001AA3C                            ; ===========================================================================
0001AA3C                            
0001AA3C                            loc_18BE0:
0001AA3C 4A28 0001                  		tst.b	1(a0)
0001AA40 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001AA44                            
0001AA44                            loc_18BE8:
0001AA44 6100 EC5E                  		bsr.w	BossMove
0001AA48 6000 FDE2                  		bra.w	loc_189CA
0001AA4C                            ; ===========================================================================
0001AA4C                            
0001AA4C                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AA4C 7000                       		moveq	#0,d0
0001AA4E 7201                       		moveq	#1,d1
0001AA50 2268 0034                  		movea.l	$34(a0),a1
0001AA54 1029 0025                  		move.b	$25(a1),d0
0001AA58 0C00 0006                  		cmpi.b	#6,d0
0001AA5C 6B00                       		bmi.s	loc_18C06
0001AA5E 720A                       		moveq	#$A,d1
0001AA60 6000                       		bra.s	loc_18C1A
0001AA62                            ; ===========================================================================
0001AA62                            
0001AA62                            loc_18C06:
0001AA62 4A29 0020                  		tst.b	$20(a1)
0001AA66 6600                       		bne.s	loc_18C10
0001AA68 7205                       		moveq	#5,d1
0001AA6A 6000                       		bra.s	loc_18C1A
0001AA6C                            ; ===========================================================================
0001AA6C                            
0001AA6C                            loc_18C10:
0001AA6C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AA72 6500                       		bcs.s	loc_18C1A
0001AA74 7204                       		moveq	#4,d1
0001AA76                            
0001AA76                            loc_18C1A:
0001AA76 1141 001C                  		move.b	d1,$1C(a0)
0001AA7A 0C00 000A                  		cmpi.b	#$A,d0
0001AA7E 6600                       		bne.s	loc_18C32
0001AA80 117C 0006 001C             		move.b	#6,$1C(a0)
0001AA86 4A28 0001                  		tst.b	1(a0)
0001AA8A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001AA8E                            
0001AA8E                            loc_18C32:
0001AA8E 6000                       		bra.s	loc_18C6C
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AA90 117C 0008 001C             		move.b	#8,$1C(a0)
0001AA96 2268 0034                  		movea.l	$34(a0),a1
0001AA9A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AAA0 6600                       		bne.s	loc_18C56
0001AAA2 4A28 0001                  		tst.b	1(a0)
0001AAA6 6A00 FC68                  		bpl.w	Obj7A_Delete
0001AAAA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AAB0 6000                       		bra.s	loc_18C6C
0001AAB2                            ; ===========================================================================
0001AAB2                            
0001AAB2                            loc_18C56:
0001AAB2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AAB8 6E00                       		bgt.s	loc_18C6C
0001AABA 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AAC0 6D00                       		blt.s	loc_18C6C
0001AAC2 117C 0007 001C             		move.b	#7,$1C(a0)
0001AAC8                            
0001AAC8                            loc_18C6C:
0001AAC8 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001AACE 4EB9 0000 BEA2             		jsr	AnimateSprite
0001AAD4                            
0001AAD4                            loc_18C78:
0001AAD4 2268 0034                  		movea.l	$34(a0),a1
0001AAD8 3169 0008 0008             		move.w	8(a1),8(a0)
0001AADE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AAE4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AAEA 7003                       		moveq	#3,d0
0001AAEC C028 0022                  		and.b	$22(a0),d0
0001AAF0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AAF6 8128 0001                  		or.b	d0,1(a0)
0001AAFA 4EF9 0000 EFBA             		jmp	DisplaySprite
0001AB00                            ; ===========================================================================
0001AB00                            
0001AB00                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AB00 2268 0034                  		movea.l	$34(a0),a1
0001AB04 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AB0A 6600                       		bne.s	loc_18CB8
0001AB0C 4A28 0001                  		tst.b	1(a0)
0001AB10 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AB14                            
0001AB14                            loc_18CB8:
0001AB14 217C 0001 9C28 0004        		move.l	#Map_BossItems,4(a0)
0001AB1C 317C 246C 0002             		move.w	#$246C,2(a0)
0001AB22 117C 0003 001A             		move.b	#3,$1A(a0)
0001AB28 60AA                       		bra.s	loc_18C78
0001AB2A                            ; ===========================================================================
0001AB2A                            ; ---------------------------------------------------------------------------
0001AB2A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AB2A                            ; ---------------------------------------------------------------------------
0001AB2A                            
0001AB2A                            Obj7B:					; XREF: Obj_Index
0001AB2A 7000                       		moveq	#0,d0
0001AB2C 1028 0024                  		move.b	$24(a0),d0
0001AB30 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AB34 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AB38 3028 0030                  		move.w	$30(a0),d0
0001AB3C 0240 FF80                  		andi.w	#$FF80,d0
0001AB40 3238 F700                  		move.w	($FFFFF700).w,d1
0001AB44 0441 0080                  		subi.w	#$80,d1
0001AB48 0241 FF80                  		andi.w	#$FF80,d1
0001AB4C 9041                       		sub.w	d1,d0
0001AB4E 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001AB52 0C40 0280                  		cmpi.w	#$280,d0
0001AB56 6200 FBB8                  		bhi.w	Obj7A_Delete
0001AB5A 4EF9 0000 EFBA             		jmp	DisplaySprite
0001AB60                            ; ===========================================================================
0001AB60 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AB62 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AB64 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AB66 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AB68 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AB6A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            Obj7B_Main:				; XREF: Obj7B_Index
0001AB6C 217C 0001 33AE 0004        		move.l	#Map_obj5Ea,4(a0)
0001AB74 317C 0518 0002             		move.w	#$518,2(a0)
0001AB7A 117C 0001 001A             		move.b	#1,$1A(a0)
0001AB80 0028 0004 0001             		ori.b	#4,1(a0)
0001AB86 117C 0004 0018             		move.b	#4,$18(a0)
0001AB8C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AB92 117C 000C 0019             		move.b	#$C,$19(a0)
0001AB98 2268 003C                  		movea.l	$3C(a0),a1
0001AB9C 3169 0008 0030             		move.w	8(a1),$30(a0)
0001ABA2 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001ABA8 08E8 0000 0022             		bset	#0,$22(a0)
0001ABAE 3028 0008                  		move.w	8(a0),d0
0001ABB2 B069 0008                  		cmp.w	8(a1),d0
0001ABB6 6E00                       		bgt.s	loc_18D68
0001ABB8 08A8 0000 0022             		bclr	#0,$22(a0)
0001ABBE 117C 0002 003A             		move.b	#2,$3A(a0)
0001ABC4                            
0001ABC4                            loc_18D68:
0001ABC4 5428 0024                  		addq.b	#2,$24(a0)
0001ABC8                            
0001ABC8                            Obj7B_Fall:				; XREF: Obj7B_Index
0001ABC8 4EB9 0000 EF80             		jsr	ObjectFall
0001ABCE 2268 003C                  		movea.l	$3C(a0),a1
0001ABD2 45F9 0000 0000             		lea	(word_19018).l,a2
0001ABD8 7000                       		moveq	#0,d0
0001ABDA 1029 001A                  		move.b	$1A(a1),d0
0001ABDE 3228 0008                  		move.w	8(a0),d1
0001ABE2 9268 0030                  		sub.w	$30(a0),d1
0001ABE6 6400                       		bcc.s	loc_18D8E
0001ABE8 5440                       		addq.w	#2,d0
0001ABEA                            
0001ABEA                            loc_18D8E:
0001ABEA D040                       		add.w	d0,d0
0001ABEC 3228 0034                  		move.w	$34(a0),d1
0001ABF0 D272 0000                  		add.w	(a2,d0.w),d1
0001ABF4 B268 000C                  		cmp.w	$C(a0),d1
0001ABF8 6E00                       		bgt.s	locret_18DC4
0001ABFA 2268 003C                  		movea.l	$3C(a0),a1
0001ABFE 7202                       		moveq	#2,d1
0001AC00 0828 0000 0022             		btst	#0,$22(a0)
0001AC06 6700                       		beq.s	loc_18DAE
0001AC08 7200                       		moveq	#0,d1
0001AC0A                            
0001AC0A                            loc_18DAE:
0001AC0A 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AC10 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AC16 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AC1C 6000 0000                  		bra.w	loc_18FA2
0001AC20                            ; ===========================================================================
0001AC20                            
0001AC20                            locret_18DC4:
0001AC20 4E75                       		rts	
0001AC22                            ; ===========================================================================
0001AC22                            
0001AC22                            loc_18DC6:				; XREF: Obj7B_Index
0001AC22 2268 003C                  		movea.l	$3C(a0),a1
0001AC26 7000                       		moveq	#0,d0
0001AC28 1028 003A                  		move.b	$3A(a0),d0
0001AC2C 9029 003A                  		sub.b	$3A(a1),d0
0001AC30 6700                       		beq.s	loc_18E2A
0001AC32 6400                       		bcc.s	loc_18DDA
0001AC34 4400                       		neg.b	d0
0001AC36                            
0001AC36                            loc_18DDA:
0001AC36 323C F7E8                  		move.w	#-$818,d1
0001AC3A 343C FEEC                  		move.w	#-$114,d2
0001AC3E 0C00 0001                  		cmpi.b	#1,d0
0001AC42 6700                       		beq.s	loc_18E00
0001AC44 323C F6A0                  		move.w	#-$960,d1
0001AC48 343C FF0C                  		move.w	#-$F4,d2
0001AC4C 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AC52 6D00                       		blt.s	loc_18E00
0001AC54 323C F5E0                  		move.w	#-$A20,d1
0001AC58 343C FF80                  		move.w	#-$80,d2
0001AC5C                            
0001AC5C                            loc_18E00:
0001AC5C 3141 0012                  		move.w	d1,$12(a0)
0001AC60 3142 0010                  		move.w	d2,$10(a0)
0001AC64 3028 0008                  		move.w	8(a0),d0
0001AC68 9068 0030                  		sub.w	$30(a0),d0
0001AC6C 6400                       		bcc.s	loc_18E16
0001AC6E 4468 0010                  		neg.w	$10(a0)
0001AC72                            
0001AC72                            loc_18E16:
0001AC72 117C 0001 001A             		move.b	#1,$1A(a0)
0001AC78 317C 0020 0028             		move.w	#$20,$28(a0)
0001AC7E 5428 0024                  		addq.b	#2,$24(a0)
0001AC82 6000 0000                  		bra.w	loc_18EAA
0001AC86                            ; ===========================================================================
0001AC86                            
0001AC86                            loc_18E2A:				; XREF: loc_18DC6
0001AC86 45F9 0000 0000             		lea	(word_19018).l,a2
0001AC8C 7000                       		moveq	#0,d0
0001AC8E 1029 001A                  		move.b	$1A(a1),d0
0001AC92 343C 0028                  		move.w	#$28,d2
0001AC96 3228 0008                  		move.w	8(a0),d1
0001AC9A 9268 0030                  		sub.w	$30(a0),d1
0001AC9E 6400                       		bcc.s	loc_18E48
0001ACA0 4442                       		neg.w	d2
0001ACA2 5440                       		addq.w	#2,d0
0001ACA4                            
0001ACA4                            loc_18E48:
0001ACA4 D040                       		add.w	d0,d0
0001ACA6 3228 0034                  		move.w	$34(a0),d1
0001ACAA D272 0000                  		add.w	(a2,d0.w),d1
0001ACAE 3141 000C                  		move.w	d1,$C(a0)
0001ACB2 D468 0030                  		add.w	$30(a0),d2
0001ACB6 3142 0008                  		move.w	d2,8(a0)
0001ACBA 4268 000E                  		clr.w	$E(a0)
0001ACBE 4268 000A                  		clr.w	$A(a0)
0001ACC2 5368 0028                  		subq.w	#1,$28(a0)
0001ACC6 6600                       		bne.s	loc_18E7A
0001ACC8 317C 0020 0028             		move.w	#$20,$28(a0)
0001ACCE 117C 0008 0024             		move.b	#8,$24(a0)
0001ACD4 4E75                       		rts	
0001ACD6                            ; ===========================================================================
0001ACD6                            
0001ACD6                            loc_18E7A:
0001ACD6 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001ACDC 6600                       		bne.s	loc_18E88
0001ACDE 117C 0005 001F             		move.b	#5,$1F(a0)
0001ACE4                            
0001ACE4                            loc_18E88:
0001ACE4 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001ACEA 6600                       		bne.s	loc_18E96
0001ACEC 117C 0002 001F             		move.b	#2,$1F(a0)
0001ACF2                            
0001ACF2                            loc_18E96:
0001ACF2 5328 001E                  		subq.b	#1,$1E(a0)
0001ACF6 6E00                       		bgt.s	locret_18EA8
0001ACF8 0868 0000 001A             		bchg	#0,$1A(a0)
0001ACFE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AD04                            
0001AD04                            locret_18EA8:
0001AD04 4E75                       		rts	
0001AD06                            ; ===========================================================================
0001AD06                            
0001AD06                            loc_18EAA:				; XREF: Obj7B_Index
0001AD06 43F8 D040                  		lea	($FFFFD040).w,a1
0001AD0A 707A                       		moveq	#$7A,d0
0001AD0C 7240                       		moveq	#$40,d1
0001AD0E 743E                       		moveq	#$3E,d2
0001AD10                            
0001AD10                            loc_18EB4:
0001AD10 B011                       		cmp.b	(a1),d0
0001AD12 6700                       		beq.s	loc_18EC0
0001AD14 D2C1                       		adda.w	d1,a1
0001AD16 51CA FFF8                  		dbf	d2,loc_18EB4
0001AD1A                            
0001AD1A 6000                       		bra.s	loc_18F38
0001AD1C                            ; ===========================================================================
0001AD1C                            
0001AD1C                            loc_18EC0:
0001AD1C 3029 0008                  		move.w	8(a1),d0
0001AD20 3229 000C                  		move.w	$C(a1),d1
0001AD24 3428 0008                  		move.w	8(a0),d2
0001AD28 3628 000C                  		move.w	$C(a0),d3
0001AD2C 45FA 0000                  		lea	byte_19022(pc),a2
0001AD30 47FA 0000                  		lea	byte_19026(pc),a3
0001AD34 181A                       		move.b	(a2)+,d4
0001AD36 4884                       		ext.w	d4
0001AD38 D044                       		add.w	d4,d0
0001AD3A 181B                       		move.b	(a3)+,d4
0001AD3C 4884                       		ext.w	d4
0001AD3E D444                       		add.w	d4,d2
0001AD40 B440                       		cmp.w	d0,d2
0001AD42 6500                       		bcs.s	loc_18F38
0001AD44 181A                       		move.b	(a2)+,d4
0001AD46 4884                       		ext.w	d4
0001AD48 D044                       		add.w	d4,d0
0001AD4A 181B                       		move.b	(a3)+,d4
0001AD4C 4884                       		ext.w	d4
0001AD4E D444                       		add.w	d4,d2
0001AD50 B042                       		cmp.w	d2,d0
0001AD52 6500                       		bcs.s	loc_18F38
0001AD54 181A                       		move.b	(a2)+,d4
0001AD56 4884                       		ext.w	d4
0001AD58 D244                       		add.w	d4,d1
0001AD5A 181B                       		move.b	(a3)+,d4
0001AD5C 4884                       		ext.w	d4
0001AD5E D644                       		add.w	d4,d3
0001AD60 B641                       		cmp.w	d1,d3
0001AD62 6500                       		bcs.s	loc_18F38
0001AD64 181A                       		move.b	(a2)+,d4
0001AD66 4884                       		ext.w	d4
0001AD68 D244                       		add.w	d4,d1
0001AD6A 181B                       		move.b	(a3)+,d4
0001AD6C 4884                       		ext.w	d4
0001AD6E D644                       		add.w	d4,d3
0001AD70 B243                       		cmp.w	d3,d1
0001AD72 6500                       		bcs.s	loc_18F38
0001AD74 5428 0024                  		addq.b	#2,$24(a0)
0001AD78 4268 0028                  		clr.w	$28(a0)
0001AD7C 4229 0020                  		clr.b	$20(a1)
0001AD80 5329 0021                  		subq.b	#1,$21(a1)
0001AD84 6600                       		bne.s	loc_18F38
0001AD86 08E9 0007 0022             		bset	#7,$22(a1)
0001AD8C 4268 0010                  		clr.w	$10(a0)
0001AD90 4268 0012                  		clr.w	$12(a0)
0001AD94                            
0001AD94                            loc_18F38:
0001AD94 4A68 0012                  		tst.w	$12(a0)
0001AD98 6A00                       		bpl.s	loc_18F5C
0001AD9A 4EB9 0000 EF80             		jsr	ObjectFall
0001ADA0 3028 0034                  		move.w	$34(a0),d0
0001ADA4 0440 002F                  		subi.w	#$2F,d0
0001ADA8 B068 000C                  		cmp.w	$C(a0),d0
0001ADAC 6E00                       		bgt.s	loc_18F58
0001ADAE 4EB9 0000 EF80             		jsr	ObjectFall
0001ADB4                            
0001ADB4                            loc_18F58:
0001ADB4 6000 FF20                  		bra.w	loc_18E7A
0001ADB8                            ; ===========================================================================
0001ADB8                            
0001ADB8                            loc_18F5C:
0001ADB8 4EB9 0000 EF80             		jsr	ObjectFall
0001ADBE 2268 003C                  		movea.l	$3C(a0),a1
0001ADC2 45F9 0000 0000             		lea	(word_19018).l,a2
0001ADC8 7000                       		moveq	#0,d0
0001ADCA 1029 001A                  		move.b	$1A(a1),d0
0001ADCE 3228 0008                  		move.w	8(a0),d1
0001ADD2 9268 0030                  		sub.w	$30(a0),d1
0001ADD6 6400                       		bcc.s	loc_18F7E
0001ADD8 5440                       		addq.w	#2,d0
0001ADDA                            
0001ADDA                            loc_18F7E:
0001ADDA D040                       		add.w	d0,d0
0001ADDC 3228 0034                  		move.w	$34(a0),d1
0001ADE0 D272 0000                  		add.w	(a2,d0.w),d1
0001ADE4 B268 000C                  		cmp.w	$C(a0),d1
0001ADE8 6ECA                       		bgt.s	loc_18F58
0001ADEA 2268 003C                  		movea.l	$3C(a0),a1
0001ADEE 7202                       		moveq	#2,d1
0001ADF0 4A68 0010                  		tst.w	$10(a0)
0001ADF4 6B00                       		bmi.s	loc_18F9C
0001ADF6 7200                       		moveq	#0,d1
0001ADF8                            
0001ADF8                            loc_18F9C:
0001ADF8 317C 0000 0028             		move.w	#0,$28(a0)
0001ADFE                            
0001ADFE                            loc_18FA2:
0001ADFE 1341 003A                  		move.b	d1,$3A(a1)
0001AE02 1141 003A                  		move.b	d1,$3A(a0)
0001AE06 B229 001A                  		cmp.b	$1A(a1),d1
0001AE0A 6700                       		beq.s	loc_19008
0001AE0C 08A9 0003 0022             		bclr	#3,$22(a1)
0001AE12 6700                       		beq.s	loc_19008
0001AE14 4229 0025                  		clr.b	$25(a1)
0001AE18 137C 0002 0024             		move.b	#2,$24(a1)
0001AE1E 45F8 D000                  		lea	($FFFFD000).w,a2
0001AE22 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001AE28 446A 0012                  		neg.w	$12(a2)
0001AE2C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001AE32 6600                       		bne.s	loc_18FDC
0001AE34 E0EA 0012                  		asr	$12(a2)
0001AE38                            
0001AE38                            loc_18FDC:
0001AE38 08EA 0001 0022             		bset	#1,$22(a2)
0001AE3E 08AA 0003 0022             		bclr	#3,$22(a2)
0001AE44 422A 003C                  		clr.b	$3C(a2)
0001AE48 2F08                       		move.l	a0,-(sp)
0001AE4A 41D2                       		lea	(a2),a0
0001AE4C                            	;	jsr	Obj01_ChkRoll
0001AE4C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001AE52 205F                       		movea.l	(sp)+,a0
0001AE54 157C 0002 0024             		move.b	#2,$24(a2)
0001AE5A 303C 00CC                  		move.w	#$CC,d0
0001AE5E 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001AE64                            
0001AE64                            loc_19008:
0001AE64 4268 0010                  		clr.w	$10(a0)
0001AE68 4268 0012                  		clr.w	$12(a0)
0001AE6C 5428 0024                  		addq.b	#2,$24(a0)
0001AE70 6000 FE64                  		bra.w	loc_18E7A
0001AE74                            ; ===========================================================================
0001AE74 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AE7E                            		even
0001AE7E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001AE82                            		even
0001AE82 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001AE86                            		even
0001AE86                            ; ===========================================================================
0001AE86                            
0001AE86                            Obj7B_Explode:				; XREF: Obj7B_Index
0001AE86 10BC 003F                  		move.b	#$3F,(a0)
0001AE8A 4228 0024                  		clr.b	$24(a0)
0001AE8E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001AE94 6700                       		beq.s	Obj7B_MakeFrag
0001AE96 4E75                       		rts	
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            Obj7B_MakeFrag:
0001AE98 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001AE9E 7203                       		moveq	#3,d1
0001AEA0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AEA4                            
0001AEA4                            Obj7B_Loop:
0001AEA4 4EB9 0000 F44E             		jsr	SingleObjLoad
0001AEAA 6600                       		bne.s	loc_1909A
0001AEAC 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AEB0 137C 000A 0024             		move.b	#$A,$24(a1)
0001AEB6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AEBE 137C 0003 0018             		move.b	#3,$18(a1)
0001AEC4 337C 0518 0002             		move.w	#$518,2(a1)
0001AECA 3368 0008 0008             		move.w	8(a0),8(a1)
0001AED0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AED6 335A 0010                  		move.w	(a2)+,$10(a1)
0001AEDA 335A 0012                  		move.w	(a2)+,$12(a1)
0001AEDE 137C 0098 0020             		move.b	#$98,$20(a1)
0001AEE4 0029 0004 0001             		ori.b	#4,1(a1)
0001AEEA 08E9 0007 0001             		bset	#7,1(a1)
0001AEF0 137C 000C 0019             		move.b	#$C,$19(a1)
0001AEF6                            
0001AEF6                            loc_1909A:
0001AEF6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AEFA                            
0001AEFA 4E75                       		rts	
0001AEFC                            ; ===========================================================================
0001AEFC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AF00 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AF04 0100 FCC0                  		dc.w $100, $FCC0
0001AF08 00A0 FDC0                  		dc.w $A0, $FDC0
0001AF0C                            ; ===========================================================================
0001AF0C                            
0001AF0C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AF0C 4EB9 0000 EFA0             		jsr	SpeedToPos
0001AF12 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AF18 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AF1E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AF24 7004                       		moveq	#4,d0
0001AF26 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AF2A E448                       		lsr.w	#2,d0
0001AF2C 1140 001A                  		move.b	d0,$1A(a0)
0001AF30 4A28 0001                  		tst.b	1(a0)
0001AF34 6A00 F7DA                  		bpl.w	Obj7A_Delete
0001AF38 4E75                       		rts	
0001AF3A                            ; ===========================================================================
0001AF3A                            ; ---------------------------------------------------------------------------
0001AF3A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AF3A                            ; ---------------------------------------------------------------------------
0001AF3A                            Map_obj7B:
0001AF3A                            	include "_maps\obj7B.asm"
0001AF3A                            ; ---------------------------------------------------------------------------
0001AF3A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AF3A                            ; ---------------------------------------------------------------------------
0001AF3A 0000                       		dc.w byte_190E2-Map_obj7B
0001AF3C 0000                       		dc.w byte_190E8-Map_obj7B
0001AF3E 01                         byte_190E2:	dc.b 1
0001AF3F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AF44 01                         byte_190E8:	dc.b 1
0001AF45 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AF4A                            		even
0001AF4A                            		even
0001AF4A                            
0001AF4A                            ; ===========================================================================
0001AF4A                            ; ---------------------------------------------------------------------------
0001AF4A                            ; Object 75 - Eggman (SYZ)
0001AF4A                            ; ---------------------------------------------------------------------------
0001AF4A                            
0001AF4A                            Obj75:					; XREF: Obj_Index
0001AF4A 7000                       		moveq	#0,d0
0001AF4C 1028 0024                  		move.b	$24(a0),d0
0001AF50 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AF54 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AF58                            ; ===========================================================================
0001AF58 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AF5A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AF5C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AF5E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AF60 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AF62                            
0001AF62 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AF65 0401 05                    		dc.b 4,	1, 5
0001AF68 0607 05                    		dc.b 6,	7, 5
0001AF6B 0800 05                    		dc.b 8,	0, 5
0001AF6E                            ; ===========================================================================
0001AF6E                            
0001AF6E                            Obj75_Main:				; XREF: Obj75_Index
0001AF6E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AF74 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AF7A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AF80 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AF86 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF8C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AF92 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AF96 2248                       		movea.l	a0,a1
0001AF98 7203                       		moveq	#3,d1
0001AF9A 6000                       		bra.s	Obj75_LoadBoss
0001AF9C                            ; ===========================================================================
0001AF9C                            
0001AF9C                            Obj75_Loop:
0001AF9C 4EB9 0000 F464             		jsr	SingleObjLoad2
0001AFA2 6600                       		bne.s	Obj75_ShipMain
0001AFA4 12BC 0075                  		move.b	#$75,(a1)
0001AFA8 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AFB4                            
0001AFB4                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AFB4 08A8 0000 0022             		bclr	#0,$22(a0)
0001AFBA 4229 0025                  		clr.b	$25(a1)
0001AFBE 135A 0024                  		move.b	(a2)+,$24(a1)
0001AFC2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AFC6 135A 0018                  		move.b	(a2)+,$18(a1)
0001AFCA 237C 0001 9B60 0004        		move.l	#Map_Eggman,4(a1)
0001AFD2 337C 0400 0002             		move.w	#$400,2(a1)
0001AFD8 137C 0004 0001             		move.b	#4,1(a1)
0001AFDE 137C 0020 0019             		move.b	#$20,$19(a1)
0001AFE4 2348 0034                  		move.l	a0,$34(a1)
0001AFE8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AFEC                            
0001AFEC                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AFEC 7000                       		moveq	#0,d0
0001AFEE 1028 0025                  		move.b	$25(a0),d0
0001AFF2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AFF6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AFFA 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001B000 4EB9 0000 BEA2             		jsr	AnimateSprite
0001B006 7003                       		moveq	#3,d0
0001B008 C028 0022                  		and.b	$22(a0),d0
0001B00C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B012 8128 0001                  		or.b	d0,1(a0)
0001B016 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B01C                            ; ===========================================================================
0001B01C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B020 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B024 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B028                            ; ===========================================================================
0001B028                            
0001B028                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B028 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B02E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B034 6400                       		bcc.s	loc_191DE
0001B036 5428 0025                  		addq.b	#2,$25(a0)
0001B03A                            
0001B03A                            loc_191DE:
0001B03A 1028 003F                  		move.b	$3F(a0),d0
0001B03E 5428 003F                  		addq.b	#2,$3F(a0)
0001B042 4EB9 0000 287A             		jsr	(CalcSine).l
0001B048 E440                       		asr.w	#2,d0
0001B04A 3140 0012                  		move.w	d0,$12(a0)
0001B04E                            
0001B04E                            loc_191F2:
0001B04E 6100 E654                  		bsr.w	BossMove
0001B052 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B058 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B05E                            
0001B05E                            loc_19202:
0001B05E 3028 0008                  		move.w	8(a0),d0
0001B062 0440 2C00                  		subi.w	#$2C00,d0
0001B066 EA48                       		lsr.w	#5,d0
0001B068 1140 0034                  		move.b	d0,$34(a0)
0001B06C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B072 6400                       		bcc.s	locret_19256
0001B074 4A28 0022                  		tst.b	$22(a0)
0001B078 6B00                       		bmi.s	loc_19258
0001B07A 4A28 0020                  		tst.b	$20(a0)
0001B07E 6600                       		bne.s	locret_19256
0001B080 4A28 003E                  		tst.b	$3E(a0)
0001B084 6600                       		bne.s	loc_1923A
0001B086 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B08C 303C 00AC                  		move.w	#$AC,d0
0001B090 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B096                            
0001B096                            loc_1923A:
0001B096 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B09A 7000                       		moveq	#0,d0
0001B09C 4A51                       		tst.w	(a1)
0001B09E 6600                       		bne.s	loc_19248
0001B0A0 303C 0EEE                  		move.w	#$EEE,d0
0001B0A4                            
0001B0A4                            loc_19248:
0001B0A4 3280                       		move.w	d0,(a1)
0001B0A6 5328 003E                  		subq.b	#1,$3E(a0)
0001B0AA 6600                       		bne.s	locret_19256
0001B0AC 117C 000F 0020             		move.b	#$F,$20(a0)
0001B0B2                            
0001B0B2                            locret_19256:
0001B0B2 4E75                       		rts	
0001B0B4                            ; ===========================================================================
0001B0B4                            
0001B0B4                            loc_19258:				; XREF: loc_19202
0001B0B4 7064                       		moveq	#100,d0
0001B0B6 6100 0000                  		bsr.w	AddPoints
0001B0BA 117C 0006 0025             		move.b	#6,$25(a0)
0001B0C0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B0C6 4268 0010                  		clr.w	$10(a0)
0001B0CA 4E75                       		rts	
0001B0CC                            ; ===========================================================================
0001B0CC                            
0001B0CC                            loc_19270:				; XREF: Obj75_ShipIndex
0001B0CC 3028 0030                  		move.w	$30(a0),d0
0001B0D0 317C 0140 0010             		move.w	#$140,$10(a0)
0001B0D6 0828 0000 0022             		btst	#0,$22(a0)
0001B0DC 6600                       		bne.s	loc_1928E
0001B0DE 4468 0010                  		neg.w	$10(a0)
0001B0E2 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B0E6 6E00                       		bgt.s	loc_1929E
0001B0E8 6000                       		bra.s	loc_19294
0001B0EA                            ; ===========================================================================
0001B0EA                            
0001B0EA                            loc_1928E:
0001B0EA 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B0EE 6D00                       		blt.s	loc_1929E
0001B0F0                            
0001B0F0                            loc_19294:
0001B0F0 0868 0000 0022             		bchg	#0,$22(a0)
0001B0F6 4228 003D                  		clr.b	$3D(a0)
0001B0FA                            
0001B0FA                            loc_1929E:
0001B0FA 0440 2C10                  		subi.w	#$2C10,d0
0001B0FE 0240 001F                  		andi.w	#$1F,d0
0001B102 0440 001F                  		subi.w	#$1F,d0
0001B106 6A00                       		bpl.s	loc_192AE
0001B108 4440                       		neg.w	d0
0001B10A                            
0001B10A                            loc_192AE:
0001B10A 5340                       		subq.w	#1,d0
0001B10C 6E00                       		bgt.s	loc_192E8
0001B10E 4A28 003D                  		tst.b	$3D(a0)
0001B112 6600                       		bne.s	loc_192E8
0001B114 3238 D008                  		move.w	($FFFFD008).w,d1
0001B118 0441 2C00                  		subi.w	#$2C00,d1
0001B11C EA41                       		asr.w	#5,d1
0001B11E B228 0034                  		cmp.b	$34(a0),d1
0001B122 6600                       		bne.s	loc_192E8
0001B124 7000                       		moveq	#0,d0
0001B126 1028 0034                  		move.b	$34(a0),d0
0001B12A EB40                       		asl.w	#5,d0
0001B12C 0640 2C10                  		addi.w	#$2C10,d0
0001B130 3140 0030                  		move.w	d0,$30(a0)
0001B134 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B138 5428 0025                  		addq.b	#2,$25(a0)
0001B13C 4268 0028                  		clr.w	$28(a0)
0001B140 4268 0010                  		clr.w	$10(a0)
0001B144                            
0001B144                            loc_192E8:
0001B144 6000 FEF4                  		bra.w	loc_191DE
0001B148                            ; ===========================================================================
0001B148                            
0001B148                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B148 7000                       		moveq	#0,d0
0001B14A 1028 0028                  		move.b	$28(a0),d0
0001B14E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B152 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B156                            ; ===========================================================================
0001B156 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B158 0000                       		dc.w loc_19348-off_192FA
0001B15A 0000                       		dc.w loc_1938E-off_192FA
0001B15C 0000                       		dc.w loc_193D0-off_192FA
0001B15E                            ; ===========================================================================
0001B15E                            
0001B15E                            loc_19302:				; XREF: off_192FA
0001B15E 317C 0180 0012             		move.w	#$180,$12(a0)
0001B164 3028 0038                  		move.w	$38(a0),d0
0001B168 0C40 0556                  		cmpi.w	#$556,d0
0001B16C 6500                       		bcs.s	loc_19344
0001B16E 317C 0556 0038             		move.w	#$556,$38(a0)
0001B174 4268 003C                  		clr.w	$3C(a0)
0001B178 70FF                       		moveq	#-1,d0
0001B17A 3028 0036                  		move.w	$36(a0),d0
0001B17E 6700                       		beq.s	loc_1933C
0001B180 2240                       		movea.l	d0,a1
0001B182 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B188 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B18E 2348 0034                  		move.l	a0,$34(a1)
0001B192 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B198                            
0001B198                            loc_1933C:
0001B198 4268 0012                  		clr.w	$12(a0)
0001B19C 5428 0028                  		addq.b	#2,$28(a0)
0001B1A0                            
0001B1A0                            loc_19344:
0001B1A0 6000 FEAC                  		bra.w	loc_191F2
0001B1A4                            ; ===========================================================================
0001B1A4                            
0001B1A4                            loc_19348:				; XREF: off_192FA
0001B1A4 5368 003C                  		subq.w	#1,$3C(a0)
0001B1A8 6A00                       		bpl.s	loc_19366
0001B1AA 5428 0028                  		addq.b	#2,$28(a0)
0001B1AE 317C F800 0012             		move.w	#-$800,$12(a0)
0001B1B4 4A68 0036                  		tst.w	$36(a0)
0001B1B8 6600                       		bne.s	loc_19362
0001B1BA E0E8 0012                  		asr	$12(a0)
0001B1BE                            
0001B1BE                            loc_19362:
0001B1BE 7000                       		moveq	#0,d0
0001B1C0 6000                       		bra.s	loc_1937C
0001B1C2                            ; ===========================================================================
0001B1C2                            
0001B1C2                            loc_19366:
0001B1C2 7000                       		moveq	#0,d0
0001B1C4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B1CA 6E00                       		bgt.s	loc_1937C
0001B1CC 7002                       		moveq	#2,d0
0001B1CE 0828 0001 003D             		btst	#1,$3D(a0)
0001B1D4 6700                       		beq.s	loc_1937C
0001B1D6 4440                       		neg.w	d0
0001B1D8                            
0001B1D8                            loc_1937C:
0001B1D8 D068 0038                  		add.w	$38(a0),d0
0001B1DC 3140 000C                  		move.w	d0,$C(a0)
0001B1E0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B1E6 6000 FE76                  		bra.w	loc_19202
0001B1EA                            ; ===========================================================================
0001B1EA                            
0001B1EA                            loc_1938E:				; XREF: off_192FA
0001B1EA 303C 04DA                  		move.w	#$4DA,d0
0001B1EE 4A68 0036                  		tst.w	$36(a0)
0001B1F2 6700                       		beq.s	loc_1939C
0001B1F4 0440 0018                  		subi.w	#$18,d0
0001B1F8                            
0001B1F8                            loc_1939C:
0001B1F8 B068 0038                  		cmp.w	$38(a0),d0
0001B1FC 6D00                       		blt.s	loc_193BE
0001B1FE 317C 0008 003C             		move.w	#8,$3C(a0)
0001B204 4A68 0036                  		tst.w	$36(a0)
0001B208 6700                       		beq.s	loc_193B4
0001B20A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B210                            
0001B210                            loc_193B4:
0001B210 5428 0028                  		addq.b	#2,$28(a0)
0001B214 4268 0012                  		clr.w	$12(a0)
0001B218 6000                       		bra.s	loc_193CC
0001B21A                            ; ===========================================================================
0001B21A                            
0001B21A                            loc_193BE:
0001B21A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B220 6C00                       		bge.s	loc_193CC
0001B222 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B228                            
0001B228                            loc_193CC:
0001B228 6000 FE24                  		bra.w	loc_191F2
0001B22C                            ; ===========================================================================
0001B22C                            
0001B22C                            loc_193D0:				; XREF: off_192FA
0001B22C 5368 003C                  		subq.w	#1,$3C(a0)
0001B230 6E00                       		bgt.s	loc_19406
0001B232 6B00                       		bmi.s	loc_193EE
0001B234 70FF                       		moveq	#-1,d0
0001B236 3028 0036                  		move.w	$36(a0),d0
0001B23A 6700                       		beq.s	loc_193E8
0001B23C 2240                       		movea.l	d0,a1
0001B23E 137C 000A 0029             		move.b	#$A,$29(a1)
0001B244                            
0001B244                            loc_193E8:
0001B244 4268 0036                  		clr.w	$36(a0)
0001B248 6000                       		bra.s	loc_19406
0001B24A                            ; ===========================================================================
0001B24A                            
0001B24A                            loc_193EE:
0001B24A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B250 6600                       		bne.s	loc_19406
0001B252 4228 0029                  		clr.b	$29(a0)
0001B256 5528 0025                  		subq.b	#2,$25(a0)
0001B25A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B260 6000                       		bra.s	loc_19446
0001B262                            ; ===========================================================================
0001B262                            
0001B262                            loc_19406:
0001B262 7001                       		moveq	#1,d0
0001B264 4A68 0036                  		tst.w	$36(a0)
0001B268 6700                       		beq.s	loc_19410
0001B26A 7002                       		moveq	#2,d0
0001B26C                            
0001B26C                            loc_19410:
0001B26C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B272 6700                       		beq.s	loc_19424
0001B274 6D00                       		blt.s	loc_1941C
0001B276 4440                       		neg.w	d0
0001B278                            
0001B278                            loc_1941C:
0001B278 4A68 0036                  		tst.w	$36(a0)
0001B27C D168 0038                  		add.w	d0,$38(a0)
0001B280                            
0001B280                            loc_19424:
0001B280 7000                       		moveq	#0,d0
0001B282 4A68 0036                  		tst.w	$36(a0)
0001B286 6700                       		beq.s	loc_19438
0001B288 7002                       		moveq	#2,d0
0001B28A 0828 0000 003D             		btst	#0,$3D(a0)
0001B290 6700                       		beq.s	loc_19438
0001B292 4440                       		neg.w	d0
0001B294                            
0001B294                            loc_19438:
0001B294 D068 0038                  		add.w	$38(a0),d0
0001B298 3140 000C                  		move.w	d0,$C(a0)
0001B29C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B2A2                            
0001B2A2                            loc_19446:
0001B2A2 6000 FDBA                  		bra.w	loc_19202
0001B2A6                            
0001B2A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B2A6                            
0001B2A6                            
0001B2A6                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B2A6 4268 0036                  		clr.w	$36(a0)
0001B2AA 43F8 D040                  		lea	($FFFFD040).w,a1
0001B2AE 703E                       		moveq	#$3E,d0
0001B2B0 7276                       		moveq	#$76,d1
0001B2B2 1428 0034                  		move.b	$34(a0),d2
0001B2B6                            
0001B2B6                            Obj75_FindLoop:
0001B2B6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B2B8 6600                       		bne.s	loc_1946A	; if not, branch
0001B2BA B429 0028                  		cmp.b	$28(a1),d2
0001B2BE 6600                       		bne.s	loc_1946A
0001B2C0 3149 0036                  		move.w	a1,$36(a0)
0001B2C4 6000                       		bra.s	locret_19472
0001B2C6                            ; ===========================================================================
0001B2C6                            
0001B2C6                            loc_1946A:
0001B2C6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B2CA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B2CE                            
0001B2CE                            locret_19472:
0001B2CE 4E75                       		rts	
0001B2D0                            ; End of function Obj75_FindBlocks
0001B2D0                            
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            loc_19474:				; XREF: Obj75_ShipIndex
0001B2D0 5368 003C                  		subq.w	#1,$3C(a0)
0001B2D4 6B00                       		bmi.s	loc_1947E
0001B2D6 6000 E38A                  		bra.w	BossDefeated
0001B2DA                            ; ===========================================================================
0001B2DA                            
0001B2DA                            loc_1947E:
0001B2DA 5428 0025                  		addq.b	#2,$25(a0)
0001B2DE 4268 0012                  		clr.w	$12(a0)
0001B2E2 08E8 0000 0022             		bset	#0,$22(a0)
0001B2E8 08A8 0007 0022             		bclr	#7,$22(a0)
0001B2EE 4268 0010                  		clr.w	$10(a0)
0001B2F2 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B2F8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B2FC 6600                       		bne.s	loc_194A8
0001B2FE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B304                            
0001B304                            loc_194A8:
0001B304 6000 FD58                  		bra.w	loc_19202
0001B308                            ; ===========================================================================
0001B308                            
0001B308                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B308 5268 003C                  		addq.w	#1,$3C(a0)
0001B30C 6700                       		beq.s	loc_194BC
0001B30E 6A00                       		bpl.s	loc_194C2
0001B310 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B316 6000                       		bra.s	loc_194EE
0001B318                            ; ===========================================================================
0001B318                            
0001B318                            loc_194BC:
0001B318 4268 0012                  		clr.w	$12(a0)
0001B31C 6000                       		bra.s	loc_194EE
0001B31E                            ; ===========================================================================
0001B31E                            
0001B31E                            loc_194C2:
0001B31E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B324 6500                       		bcs.s	loc_194DA
0001B326 6700                       		beq.s	loc_194E0
0001B328 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B32E 6500                       		bcs.s	loc_194EE
0001B330 5428 0025                  		addq.b	#2,$25(a0)
0001B334 6000                       		bra.s	loc_194EE
0001B336                            ; ===========================================================================
0001B336                            
0001B336                            loc_194DA:
0001B336 5168 0012                  		subq.w	#8,$12(a0)
0001B33A 6000                       		bra.s	loc_194EE
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            loc_194E0:
0001B33C 4268 0012                  		clr.w	$12(a0)
0001B340 6100 E59A                  		bsr.w	BossEnd
0001B344                            
0001B344                            loc_194EE:
0001B344 6000 FD08                  		bra.w	loc_191F2
0001B348                            ; ===========================================================================
0001B348                            
0001B348                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B348 317C 0400 0010             		move.w	#$400,$10(a0)
0001B34E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B354 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B35A 6400                       		bcc.s	loc_1950C
0001B35C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B360 6000                       		bra.s	loc_19512
0001B362                            ; ===========================================================================
0001B362                            
0001B362                            loc_1950C:
0001B362 4A28 0001                  		tst.b	1(a0)
0001B366 6A00                       		bpl.s	Obj75_ShipDelete
0001B368                            
0001B368                            loc_19512:
0001B368 6100 E33A                  		bsr.w	BossMove
0001B36C 6000 FCCC                  		bra.w	loc_191DE
0001B370                            ; ===========================================================================
0001B370                            
0001B370                            Obj75_ShipDelete:
0001B370 4EF9 0000 EFF6             		jmp	DeleteObject
0001B376                            ; ===========================================================================
0001B376                            
0001B376                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B376 7201                       		moveq	#1,d1
0001B378 2268 0034                  		movea.l	$34(a0),a1
0001B37C 7000                       		moveq	#0,d0
0001B37E 1029 0025                  		move.b	$25(a1),d0
0001B382 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B386 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B38A 1141 001C                  		move.b	d1,$1C(a0)
0001B38E 1010                       		move.b	(a0),d0
0001B390 B011                       		cmp.b	(a1),d0
0001B392 6600                       		bne.s	Obj75_FaceDelete
0001B394 6000                       		bra.s	loc_195BE
0001B396                            ; ===========================================================================
0001B396                            
0001B396                            Obj75_FaceDelete:
0001B396 4EF9 0000 EFF6             		jmp	DeleteObject
0001B39C                            ; ===========================================================================
0001B39C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B3A0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B3A4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B3A8                            ; ===========================================================================
0001B3A8                            
0001B3A8                            loc_19552:				; XREF: off_19546
0001B3A8 720A                       		moveq	#$A,d1
0001B3AA 4E75                       		rts	
0001B3AC                            ; ===========================================================================
0001B3AC                            
0001B3AC                            loc_19556:				; XREF: off_19546
0001B3AC 7206                       		moveq	#6,d1
0001B3AE 4E75                       		rts	
0001B3B0                            ; ===========================================================================
0001B3B0                            
0001B3B0                            loc_1955A:				; XREF: off_19546
0001B3B0 7000                       		moveq	#0,d0
0001B3B2 1029 0028                  		move.b	$28(a1),d0
0001B3B6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B3BA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B3BE                            ; ===========================================================================
0001B3BE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B3C2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B3C6                            ; ===========================================================================
0001B3C6                            
0001B3C6                            loc_19570:				; XREF: off_19568
0001B3C6 6000                       		bra.s	loc_19574
0001B3C8                            ; ===========================================================================
0001B3C8                            
0001B3C8                            loc_19572:				; XREF: off_19568
0001B3C8 7206                       		moveq	#6,d1
0001B3CA                            
0001B3CA                            loc_19574:				; XREF: off_19546
0001B3CA 4A29 0020                  		tst.b	$20(a1)
0001B3CE 6600                       		bne.s	loc_1957E
0001B3D0 7205                       		moveq	#5,d1
0001B3D2 4E75                       		rts	
0001B3D4                            ; ===========================================================================
0001B3D4                            
0001B3D4                            loc_1957E:
0001B3D4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B3DA 6500                       		bcs.s	locret_19588
0001B3DC 7204                       		moveq	#4,d1
0001B3DE                            
0001B3DE                            locret_19588:
0001B3DE 4E75                       		rts	
0001B3E0                            ; ===========================================================================
0001B3E0                            
0001B3E0                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B3E0 117C 0007 001C             		move.b	#7,$1C(a0)
0001B3E6 2268 0034                  		movea.l	$34(a0),a1
0001B3EA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B3F0 6600                       		bne.s	loc_195AA
0001B3F2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B3F8 4A28 0001                  		tst.b	1(a0)
0001B3FC 6A00                       		bpl.s	Obj75_FlameDelete
0001B3FE 6000                       		bra.s	loc_195B6
0001B400                            ; ===========================================================================
0001B400                            
0001B400                            loc_195AA:
0001B400 4A69 0010                  		tst.w	$10(a1)
0001B404 6700                       		beq.s	loc_195B6
0001B406 117C 0008 001C             		move.b	#8,$1C(a0)
0001B40C                            
0001B40C                            loc_195B6:
0001B40C 6000                       		bra.s	loc_195BE
0001B40E                            ; ===========================================================================
0001B40E                            
0001B40E                            Obj75_FlameDelete:
0001B40E 4EF9 0000 EFF6             		jmp	DeleteObject
0001B414                            ; ===========================================================================
0001B414                            
0001B414                            loc_195BE:
0001B414 43F9 0001 9B10             		lea	(Ani_Eggman).l,a1
0001B41A 4EB9 0000 BEA2             		jsr	AnimateSprite
0001B420 2268 0034                  		movea.l	$34(a0),a1
0001B424 3169 0008 0008             		move.w	8(a1),8(a0)
0001B42A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B430                            
0001B430                            loc_195DA:
0001B430 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B436 7003                       		moveq	#3,d0
0001B438 C028 0022                  		and.b	$22(a0),d0
0001B43C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B442 8128 0001                  		or.b	d0,1(a0)
0001B446 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B44C                            ; ===========================================================================
0001B44C                            
0001B44C                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B44C 217C 0001 9C28 0004        		move.l	#Map_BossItems,4(a0)
0001B454 317C 246C 0002             		move.w	#$246C,2(a0)
0001B45A 117C 0005 001A             		move.b	#5,$1A(a0)
0001B460 2268 0034                  		movea.l	$34(a0),a1
0001B464 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B46A 6600                       		bne.s	loc_1961C
0001B46C 4A28 0001                  		tst.b	1(a0)
0001B470 6A00                       		bpl.s	Obj75_SpikeDelete
0001B472                            
0001B472                            loc_1961C:
0001B472 3169 0008 0008             		move.w	8(a1),8(a0)
0001B478 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B47E 3028 003C                  		move.w	$3C(a0),d0
0001B482 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B488 6600                       		bne.s	loc_19652
0001B48A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B490 6700                       		beq.s	loc_1964C
0001B492 4A29 0028                  		tst.b	$28(a1)
0001B496 6600                       		bne.s	loc_19658
0001B498 0C40 0094                  		cmpi.w	#$94,d0
0001B49C 6C00                       		bge.s	loc_19658
0001B49E 5E40                       		addq.w	#7,d0
0001B4A0 6000                       		bra.s	loc_19658
0001B4A2                            ; ===========================================================================
0001B4A2                            
0001B4A2                            loc_1964C:
0001B4A2 4A69 003C                  		tst.w	$3C(a1)
0001B4A6 6A00                       		bpl.s	loc_19658
0001B4A8                            
0001B4A8                            loc_19652:
0001B4A8 4A40                       		tst.w	d0
0001B4AA 6F00                       		ble.s	loc_19658
0001B4AC 5B40                       		subq.w	#5,d0
0001B4AE                            
0001B4AE                            loc_19658:
0001B4AE 3140 003C                  		move.w	d0,$3C(a0)
0001B4B2 E440                       		asr.w	#2,d0
0001B4B4 D168 000C                  		add.w	d0,$C(a0)
0001B4B8 117C 0008 0019             		move.b	#8,$19(a0)
0001B4BE 117C 000C 0016             		move.b	#$C,$16(a0)
0001B4C4 4228 0020                  		clr.b	$20(a0)
0001B4C8 2268 0034                  		movea.l	$34(a0),a1
0001B4CC 4A29 0020                  		tst.b	$20(a1)
0001B4D0 6700                       		beq.s	loc_19688
0001B4D2 4A29 0029                  		tst.b	$29(a1)
0001B4D6 6600                       		bne.s	loc_19688
0001B4D8 117C 0084 0020             		move.b	#$84,$20(a0)
0001B4DE                            
0001B4DE                            loc_19688:
0001B4DE 6000 FF50                  		bra.w	loc_195DA
0001B4E2                            ; ===========================================================================
0001B4E2                            
0001B4E2                            Obj75_SpikeDelete:
0001B4E2 4EF9 0000 EFF6             		jmp	DeleteObject
0001B4E8                            ; ===========================================================================
0001B4E8                            ; ---------------------------------------------------------------------------
0001B4E8                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B4E8                            ; ---------------------------------------------------------------------------
0001B4E8                            
0001B4E8                            Obj76:					; XREF: Obj_Index
0001B4E8 7000                       		moveq	#0,d0
0001B4EA 1028 0024                  		move.b	$24(a0),d0
0001B4EE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B4F2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B4F6                            ; ===========================================================================
0001B4F6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B4F8 0000                       		dc.w Obj76_Action-Obj76_Index
0001B4FA 0000                       		dc.w loc_19762-Obj76_Index
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            Obj76_Main:				; XREF: Obj76_Index
0001B4FC 7800                       		moveq	#0,d4
0001B4FE 3A3C 2C10                  		move.w	#$2C10,d5
0001B502 7C09                       		moveq	#9,d6
0001B504 43D0                       		lea	(a0),a1
0001B506 6000                       		bra.s	Obj76_MakeBlock
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            Obj76_Loop:
0001B508 4EB9 0000 F44E             		jsr	SingleObjLoad
0001B50E 6600                       		bne.s	Obj76_ExitLoop
0001B510                            
0001B510                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B510 12BC 0076                  		move.b	#$76,(a1)
0001B514 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B51C 337C 4000 0002             		move.w	#$4000,2(a1)
0001B522 137C 0004 0001             		move.b	#4,1(a1)
0001B528 137C 0010 0019             		move.b	#$10,$19(a1)
0001B52E 137C 0010 0016             		move.b	#$10,$16(a1)
0001B534 137C 0003 0018             		move.b	#3,$18(a1)
0001B53A 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B53E 337C 0582 000C             		move.w	#$582,$C(a1)
0001B544 3344 0028                  		move.w	d4,$28(a1)
0001B548 0644 0101                  		addi.w	#$101,d4
0001B54C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B550 5429 0024                  		addq.b	#2,$24(a1)
0001B554 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B558                            
0001B558                            Obj76_ExitLoop:
0001B558 4E75                       		rts	
0001B55A                            ; ===========================================================================
0001B55A                            
0001B55A                            Obj76_Action:				; XREF: Obj76_Index
0001B55A 1028 0029                  		move.b	$29(a0),d0
0001B55E B028 0028                  		cmp.b	$28(a0),d0
0001B562 6700                       		beq.s	Obj76_Solid
0001B564 4A00                       		tst.b	d0
0001B566 6B00                       		bmi.s	loc_19718
0001B568                            
0001B568                            loc_19712:
0001B568 6100 0000                  		bsr.w	Obj76_Break
0001B56C 6000                       		bra.s	Obj76_Display
0001B56E                            ; ===========================================================================
0001B56E                            
0001B56E                            loc_19718:
0001B56E 2268 0034                  		movea.l	$34(a0),a1
0001B572 4A29 0021                  		tst.b	$21(a1)
0001B576 67F0                       		beq.s	loc_19712
0001B578 3169 0008 0008             		move.w	8(a1),8(a0)
0001B57E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B584 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B58A B2C8                       		cmpa.w	a0,a1
0001B58C 6500                       		bcs.s	Obj76_Display
0001B58E 3029 0012                  		move.w	$12(a1),d0
0001B592 48C0                       		ext.l	d0
0001B594 E080                       		asr.l	#8,d0
0001B596 D168 000C                  		add.w	d0,$C(a0)
0001B59A 6000                       		bra.s	Obj76_Display
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            Obj76_Solid:				; XREF: Obj76_Action
0001B59C 323C 001B                  		move.w	#$1B,d1
0001B5A0 343C 0010                  		move.w	#$10,d2
0001B5A4 363C 0011                  		move.w	#$11,d3
0001B5A8 3828 0008                  		move.w	8(a0),d4
0001B5AC 4EB9 0001 139C             		jsr	SolidObject
0001B5B2                            
0001B5B2                            Obj76_Display:				; XREF: Obj76_Action
0001B5B2 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B5B8                            ; ===========================================================================
0001B5B8                            
0001B5B8                            loc_19762:				; XREF: Obj76_Index
0001B5B8 4A28 0001                  		tst.b	1(a0)
0001B5BC 6A00                       		bpl.s	Obj76_Delete
0001B5BE 4EB9 0000 EF80             		jsr	ObjectFall
0001B5C4 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B5CA                            ; ===========================================================================
0001B5CA                            
0001B5CA                            Obj76_Delete:
0001B5CA 4EF9 0000 EFF6             		jmp	DeleteObject
0001B5D0                            
0001B5D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5D0                            
0001B5D0                            
0001B5D0                            Obj76_Break:				; XREF: Obj76_Action
0001B5D0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B5D4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B5D8 7801                       		moveq	#1,d4
0001B5DA 7203                       		moveq	#3,d1
0001B5DC 7438                       		moveq	#$38,d2
0001B5DE 5428 0024                  		addq.b	#2,$24(a0)
0001B5E2 117C 0008 0019             		move.b	#8,$19(a0)
0001B5E8 117C 0008 0016             		move.b	#8,$16(a0)
0001B5EE 43D0                       		lea	(a0),a1
0001B5F0 6000                       		bra.s	Obj76_MakeFrag
0001B5F2                            ; ===========================================================================
0001B5F2                            
0001B5F2                            Obj76_LoopFrag:
0001B5F2 4EB9 0000 F464             		jsr	SingleObjLoad2
0001B5F8 6600                       		bne.s	loc_197D4
0001B5FA                            
0001B5FA                            Obj76_MakeFrag:
0001B5FA 45D0                       		lea	(a0),a2
0001B5FC 47D1                       		lea	(a1),a3
0001B5FE 7603                       		moveq	#3,d3
0001B600                            
0001B600                            loc_197AA:
0001B600 26DA                       		move.l	(a2)+,(a3)+
0001B602 26DA                       		move.l	(a2)+,(a3)+
0001B604 26DA                       		move.l	(a2)+,(a3)+
0001B606 26DA                       		move.l	(a2)+,(a3)+
0001B608 51CB FFF6                  		dbf	d3,loc_197AA
0001B60C                            
0001B60C 335C 0010                  		move.w	(a4)+,$10(a1)
0001B610 335C 0012                  		move.w	(a4)+,$12(a1)
0001B614 361D                       		move.w	(a5)+,d3
0001B616 D769 0008                  		add.w	d3,8(a1)
0001B61A 361D                       		move.w	(a5)+,d3
0001B61C D769 000C                  		add.w	d3,$C(a1)
0001B620 1344 001A                  		move.b	d4,$1A(a1)
0001B624 5244                       		addq.w	#1,d4
0001B626 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B62A                            
0001B62A                            loc_197D4:
0001B62A 303C 00CB                  		move.w	#$CB,d0
0001B62E 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B634                            ; End of function Obj76_Break
0001B634                            
0001B634                            ; ===========================================================================
0001B634 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B638 0180 FE00                  		dc.w $180, $FE00
0001B63C FF00 FF00                  		dc.w $FF00, $FF00
0001B640 0100 FF00                  		dc.w $100, $FF00
0001B644 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B648 0010 0000                  		dc.w $10, 0
0001B64C 0000 0010                  		dc.w 0,	$10
0001B650 0010 0010                  		dc.w $10, $10
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            Map_obj76:
0001B654                            	include "_maps\obj76.asm"
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B654                            ; ---------------------------------------------------------------------------
0001B654 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B658 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B65C 0000                       		dc.w byte_19826-Map_obj76
0001B65E 02                         byte_19808:	dc.b 2
0001B65F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B664 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B669 00                         		dc.b 0
0001B66A 01                         byte_19814:	dc.b 1
0001B66B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B670 01                         byte_1981A:	dc.b 1
0001B671 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B676 01                         byte_19820:	dc.b 1
0001B677 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B67C 01                         byte_19826:	dc.b 1
0001B67D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B682                            		even
0001B682                            		even
0001B682                            
0001B682                            ; ===========================================================================
0001B682                            
0001B682                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B682 4EF9 0000 EFF6             		jmp	DeleteObject
0001B688                            ; ===========================================================================
0001B688                            ; ---------------------------------------------------------------------------
0001B688                            ; Object 82 - Eggman (SBZ2)
0001B688                            ; ---------------------------------------------------------------------------
0001B688                            
0001B688                            Obj82:					; XREF: Obj_Index
0001B688 7000                       		moveq	#0,d0
0001B68A 1028 0024                  		move.b	$24(a0),d0
0001B68E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B692 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B696                            ; ===========================================================================
0001B696 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B698 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B69A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B69C                            
0001B69C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B69F 0400 03                    		dc.b 4,	0, 3
0001B6A2                            ; ===========================================================================
0001B6A2                            
0001B6A2                            Obj82_Main:				; XREF: Obj82_Index
0001B6A2 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B6A6 317C 2160 0008             		move.w	#$2160,8(a0)
0001B6AC 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B6B2 117C 000F 0020             		move.b	#$F,$20(a0)
0001B6B8 117C 0010 0021             		move.b	#$10,$21(a0)
0001B6BE 08A8 0000 0022             		bclr	#0,$22(a0)
0001B6C4 4228 0025                  		clr.b	$25(a0)
0001B6C8 115A 0024                  		move.b	(a2)+,$24(a0)
0001B6CC 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B6D0 115A 0018                  		move.b	(a2)+,$18(a0)
0001B6D4 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B6DC 317C 0400 0002             		move.w	#$400,2(a0)
0001B6E2 117C 0004 0001             		move.b	#4,1(a0)
0001B6E8 08E8 0007 0001             		bset	#7,1(a0)
0001B6EE 117C 0020 0019             		move.b	#$20,$19(a0)
0001B6F4 4EB9 0000 F464             		jsr	SingleObjLoad2
0001B6FA 6600                       		bne.s	Obj82_Eggman
0001B6FC 2348 0034                  		move.l	a0,$34(a1)
0001B700 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B704 337C 2130 0008             		move.w	#$2130,8(a1)
0001B70A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B710 4228 0025                  		clr.b	$25(a0)
0001B714 135A 0024                  		move.b	(a2)+,$24(a1)
0001B718 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B71C 135A 0018                  		move.b	(a2)+,$18(a1)
0001B720 237C 0000 D624 0004        		move.l	#Map_obj32,4(a1)
0001B728 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B72E 137C 0004 0001             		move.b	#4,1(a1)
0001B734 08E9 0007 0001             		bset	#7,1(a1)
0001B73A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B740 137C 0000 001A             		move.b	#0,$1A(a1)
0001B746                            
0001B746                            Obj82_Eggman:				; XREF: Obj82_Index
0001B746 7000                       		moveq	#0,d0
0001B748 1028 0025                  		move.b	$25(a0),d0
0001B74C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B750 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B754 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B758 4EB9 0000 BEA2             		jsr	AnimateSprite
0001B75E 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B764                            ; ===========================================================================
0001B764 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B766 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B768 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B76A 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B76C                            ; ===========================================================================
0001B76C                            
0001B76C                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B76C 3028 0008                  		move.w	8(a0),d0
0001B770 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B774 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B778 6400                       		bcc.s	loc_19934	; if not, branch
0001B77A 5428 0025                  		addq.b	#2,$25(a0)
0001B77E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B784 117C 0001 001C             		move.b	#1,$1C(a0)
0001B78A                            
0001B78A                            loc_19934:				; XREF: Obj82_EggIndex
0001B78A 4EF9 0000 EFA0             		jmp	SpeedToPos
0001B790                            ; ===========================================================================
0001B790                            
0001B790                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B790 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B794 6600                       		bne.s	loc_19954	; if time remains, branch
0001B796 5428 0025                  		addq.b	#2,$25(a0)
0001B79A 117C 0002 001C             		move.b	#2,$1C(a0)
0001B7A0 5868 000C                  		addq.w	#4,$C(a0)
0001B7A4 317C 000F 003C             		move.w	#15,$3C(a0)
0001B7AA                            
0001B7AA                            loc_19954:
0001B7AA 60DE                       		bra.s	loc_19934
0001B7AC                            ; ===========================================================================
0001B7AC                            
0001B7AC                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B7AC 5368 003C                  		subq.w	#1,$3C(a0)
0001B7B0 6E00                       		bgt.s	loc_199D0
0001B7B2 6600                       		bne.s	loc_1996A
0001B7B4 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B7BA 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B7C0                            
0001B7C0                            loc_1996A:
0001B7C0 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B7C6 6E00                       		bgt.s	loc_19976
0001B7C8 4268 0010                  		clr.w	$10(a0)
0001B7CC                            
0001B7CC                            loc_19976:
0001B7CC 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B7D2 4A68 0012                  		tst.w	$12(a0)
0001B7D6 6B00                       		bmi.s	Obj82_FindBlocks
0001B7D8 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B7DE 6500                       		bcs.s	Obj82_FindBlocks
0001B7E0 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B7E6 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B7EC 6500                       		bcs.s	Obj82_FindBlocks
0001B7EE 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B7F4 4268 0012                  		clr.w	$12(a0)
0001B7F8                            
0001B7F8                            Obj82_FindBlocks:
0001B7F8 3028 0010                  		move.w	$10(a0),d0
0001B7FC 8068 0012                  		or.w	$12(a0),d0
0001B800 6600                       		bne.s	loc_199D0
0001B802 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B806 703E                       		moveq	#$3E,d0
0001B808 7240                       		moveq	#$40,d1
0001B80A                            
0001B80A                            Obj82_FindLoop:	
0001B80A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B80C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B810 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B814                            
0001B814 6600                       		bne.s	loc_199D0
0001B816 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B81C 5428 0025                  		addq.b	#2,$25(a0)
0001B820 117C 0001 001C             		move.b	#1,$1C(a0)
0001B826                            
0001B826                            loc_199D0:
0001B826 6000 FF62                  		bra.w	loc_19934
0001B82A                            ; ===========================================================================
0001B82A                            
0001B82A                            Obj82_Switch:				; XREF: Obj82_Index
0001B82A 7000                       		moveq	#0,d0
0001B82C 1028 0025                  		move.b	$25(a0),d0
0001B830 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B834 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B838                            ; ===========================================================================
0001B838 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B83A 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            loc_199E6:				; XREF: Obj82_SwIndex
0001B83C 2268 0034                  		movea.l	$34(a0),a1
0001B840 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B846 6600                       		bne.s	Obj82_SwDisplay
0001B848 117C 0001 001A             		move.b	#1,$1A(a0)
0001B84E 5428 0025                  		addq.b	#2,$25(a0)
0001B852                            
0001B852                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B852 4EF9 0000 EFBA             		jmp	DisplaySprite
0001B858                            ; ===========================================================================
0001B858                            Ani_obj82:
0001B858                            	include "_anim\obj82.asm"
0001B858                            ; ---------------------------------------------------------------------------
0001B858                            ; Animation script - Eggman (SBZ2)
0001B858                            ; ---------------------------------------------------------------------------
0001B858 0000                       		dc.w byte_19A10-Ani_obj82
0001B85A 0000                       		dc.w byte_19A14-Ani_obj82
0001B85C 0000                       		dc.w byte_19A18-Ani_obj82
0001B85E 0000                       		dc.w byte_19A20-Ani_obj82
0001B860 0000                       		dc.w byte_19A24-Ani_obj82
0001B862 0000                       		dc.w byte_19A2A-Ani_obj82
0001B864 0000                       		dc.w byte_19A30-Ani_obj82
0001B866 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B86A 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B86E 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B876 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B87A 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B880 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B886 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B88A                            		even
0001B88A                            		even
0001B88A                            
0001B88A                            ; ---------------------------------------------------------------------------
0001B88A                            ; Sprite mappings - Eggman (SBZ2)
0001B88A                            ; ---------------------------------------------------------------------------
0001B88A                            Map_obj82:
0001B88A                            	include "_maps\obj82.asm"
0001B88A                            ; ---------------------------------------------------------------------------
0001B88A                            ; Sprite mappings - Eggman (SBZ2)
0001B88A                            ; ---------------------------------------------------------------------------
0001B88A 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B88E 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B892 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B896 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B89A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B89E 0000                       		dc.w byte_19B4F-Map_obj82
0001B8A0 03                         byte_19A4A:	dc.b 3
0001B8A1 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B8A6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B8AB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B8B0 04                         byte_19A5A:	dc.b 4
0001B8B1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B8B6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B8BB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B8C0 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B8C5 00                         		dc.b 0
0001B8C6 04                         byte_19A70:	dc.b 4
0001B8C7 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B8CC E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B8D1 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B8D6 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B8DB 00                         		dc.b 0
0001B8DC 04                         byte_19A86:	dc.b 4
0001B8DD F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B8E2 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B8E7 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B8EC EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B8F1 00                         		dc.b 0
0001B8F2 04                         byte_19A9C:	dc.b 4
0001B8F3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B8F8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B8FD 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B902 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B907 00                         		dc.b 0
0001B908 04                         byte_19AB2:	dc.b 4
0001B909 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B90E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B913 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B918 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B91D 00                         		dc.b 0
0001B91E 07                         byte_19AC8:	dc.b 7
0001B91F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B924 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B929 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B92E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B933 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B938 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B93D F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B942 05                         byte_19AEC:	dc.b 5
0001B943 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B948 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B94D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B952 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B957 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B95C 06                         byte_19B06:	dc.b 6
0001B95D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B962 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B967 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B96C 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B971 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B976 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B97B 00                         		dc.b 0
0001B97C 08                         byte_19B26:	dc.b 8
0001B97D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B982 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B987 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B98C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B991 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B996 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B99B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B9A0 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B9A5 03                         byte_19B4F:	dc.b 3
0001B9A6 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B9AB F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B9B0 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B9B6 00                         		even
0001B9B6 00                         		even
0001B9B6                            
0001B9B6                            ; ===========================================================================
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6                            
0001B9B6                            Obj83:					; XREF: Obj_Index
0001B9B6 7000                       		moveq	#0,d0
0001B9B8 1028 0024                  		move.b	$24(a0),d0
0001B9BC 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B9C0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B9C4                            ; ===========================================================================
0001B9C4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B9C6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B9C8 0000                       		dc.w loc_19C36-Obj83_Index
0001B9CA 0000                       		dc.w loc_19C62-Obj83_Index
0001B9CC 0000                       		dc.w loc_19C72-Obj83_Index
0001B9CE 0000                       		dc.w loc_19C80-Obj83_Index
0001B9D0                            ; ===========================================================================
0001B9D0                            
0001B9D0                            Obj83_Main:				; XREF: Obj83_Index
0001B9D0 317C 2080 0008             		move.w	#$2080,8(a0)
0001B9D6 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B9DC 117C 0080 0019             		move.b	#$80,$19(a0)
0001B9E2 117C 0010 0016             		move.b	#$10,$16(a0)
0001B9E8 117C 0004 0001             		move.b	#4,1(a0)
0001B9EE 08E8 0007 0001             		bset	#7,1(a0)
0001B9F4 7800                       		moveq	#0,d4
0001B9F6 3A3C 2010                  		move.w	#$2010,d5
0001B9FA 7C07                       		moveq	#7,d6
0001B9FC 45E8 0030                  		lea	$30(a0),a2
0001BA00                            
0001BA00                            Obj83_MakeBlock:
0001BA00 4EB9 0000 F44E             		jsr	SingleObjLoad
0001BA06 6600                       		bne.s	Obj83_ExitMake
0001BA08 34C9                       		move.w	a1,(a2)+
0001BA0A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BA0E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BA16 337C 4518 0002             		move.w	#$4518,2(a1)
0001BA1C 137C 0004 0001             		move.b	#4,1(a1)
0001BA22 137C 0010 0019             		move.b	#$10,$19(a1)
0001BA28 137C 0010 0016             		move.b	#$10,$16(a1)
0001BA2E 137C 0003 0018             		move.b	#3,$18(a1)
0001BA34 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BA38 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BA3E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BA42 137C 0008 0024             		move.b	#8,$24(a1)
0001BA48 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BA4C                            
0001BA4C                            Obj83_ExitMake:
0001BA4C 5428 0024                  		addq.b	#2,$24(a0)
0001BA50 4E75                       		rts	
0001BA52                            ; ===========================================================================
0001BA52                            
0001BA52                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BA52 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BA58 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BA5A 4228 001A                  		clr.b	$1A(a0)
0001BA5E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BA62                            
0001BA62                            Obj83_Solid:
0001BA62 7000                       		moveq	#0,d0
0001BA64 1028 001A                  		move.b	$1A(a0),d0
0001BA68 4400                       		neg.b	d0
0001BA6A 4880                       		ext.w	d0
0001BA6C 5040                       		addq.w	#8,d0
0001BA6E E940                       		asl.w	#4,d0
0001BA70 383C 2100                  		move.w	#$2100,d4
0001BA74 9840                       		sub.w	d0,d4
0001BA76 1140 0019                  		move.b	d0,$19(a0)
0001BA7A 3144 0008                  		move.w	d4,8(a0)
0001BA7E 720B                       		moveq	#$B,d1
0001BA80 D240                       		add.w	d0,d1
0001BA82 7410                       		moveq	#$10,d2
0001BA84 7611                       		moveq	#$11,d3
0001BA86 4EF9 0001 139C             		jmp	SolidObject
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            loc_19C36:				; XREF: Obj83_Index
0001BA8C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BA92 6400                       		bcc.s	Obj83_Solid2
0001BA94 70FF                       		moveq	#-1,d0
0001BA96 1028 001A                  		move.b	$1A(a0),d0
0001BA9A 4880                       		ext.w	d0
0001BA9C D040                       		add.w	d0,d0
0001BA9E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BAA2 2240                       		movea.l	d0,a1
0001BAA4 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BAAA 5228 001A                  		addq.b	#1,$1A(a0)
0001BAAE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BAB4 6700                       		beq.s	loc_19C62
0001BAB6                            
0001BAB6                            Obj83_Solid2:
0001BAB6 60AA                       		bra.s	Obj83_Solid
0001BAB8                            ; ===========================================================================
0001BAB8                            
0001BAB8                            loc_19C62:				; XREF: Obj83_Index
0001BAB8 08A8 0003 0022             		bclr	#3,$22(a0)
0001BABE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BAC4 6000 FBBC                  		bra.w	loc_1982C
0001BAC8                            ; ===========================================================================
0001BAC8                            
0001BAC8                            loc_19C72:				; XREF: Obj83_Index
0001BAC8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BACE 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BAD0 4EF9 0000 EFBA             		jmp	DisplaySprite
0001BAD6                            ; ===========================================================================
0001BAD6                            
0001BAD6                            loc_19C80:				; XREF: Obj83_Index
0001BAD6 4A28 0001                  		tst.b	1(a0)
0001BADA 6A00 FBA6                  		bpl.w	loc_1982C
0001BADE 4EB9 0000 EF80             		jsr	ObjectFall
0001BAE4 4EF9 0000 EFBA             		jmp	DisplaySprite
0001BAEA                            ; ===========================================================================
0001BAEA                            
0001BAEA                            Obj83_Break:				; XREF: loc_19C72
0001BAEA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BAEE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BAF2 7801                       		moveq	#1,d4
0001BAF4 7203                       		moveq	#3,d1
0001BAF6 7438                       		moveq	#$38,d2
0001BAF8 5428 0024                  		addq.b	#2,$24(a0)
0001BAFC 117C 0008 0019             		move.b	#8,$19(a0)
0001BB02 117C 0008 0016             		move.b	#8,$16(a0)
0001BB08 43D0                       		lea	(a0),a1
0001BB0A 6000                       		bra.s	Obj83_MakeFrag
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            Obj83_LoopFrag:
0001BB0C 4EB9 0000 F464             		jsr	SingleObjLoad2
0001BB12 6600                       		bne.s	Obj83_BreakSnd
0001BB14                            
0001BB14                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BB14 45D0                       		lea	(a0),a2
0001BB16 47D1                       		lea	(a1),a3
0001BB18 7603                       		moveq	#3,d3
0001BB1A                            
0001BB1A                            loc_19CC4:
0001BB1A 26DA                       		move.l	(a2)+,(a3)+
0001BB1C 26DA                       		move.l	(a2)+,(a3)+
0001BB1E 26DA                       		move.l	(a2)+,(a3)+
0001BB20 26DA                       		move.l	(a2)+,(a3)+
0001BB22 51CB FFF6                  		dbf	d3,loc_19CC4
0001BB26                            
0001BB26 335C 0012                  		move.w	(a4)+,$12(a1)
0001BB2A 361D                       		move.w	(a5)+,d3
0001BB2C D769 0008                  		add.w	d3,8(a1)
0001BB30 361D                       		move.w	(a5)+,d3
0001BB32 D769 000C                  		add.w	d3,$C(a1)
0001BB36 1344 001A                  		move.b	d4,$1A(a1)
0001BB3A 5244                       		addq.w	#1,d4
0001BB3C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BB40                            
0001BB40                            Obj83_BreakSnd:
0001BB40 303C 00CB                  		move.w	#$CB,d0
0001BB44 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BB4A 4EF9 0000 EFBA             		jmp	DisplaySprite
0001BB50                            ; ===========================================================================
0001BB50 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BB54 0120 00C0                  		dc.w $120, $C0
0001BB58 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BB5C 0010 0000                  		dc.w $10, 0
0001BB60 0000 0010                  		dc.w 0,	$10
0001BB64 0010 0010                  		dc.w $10, $10
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            Map_obj83:
0001BB68                            	include "_maps\obj83.asm"
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BB6C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BB70 0000                       		dc.w byte_19D46-Map_obj83
0001BB72 01                         byte_19D1C:	dc.b 1
0001BB73 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BB78 02                         byte_19D22:	dc.b 2
0001BB79 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BB7E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BB83 00                         		dc.b 0
0001BB84 02                         byte_19D2E:	dc.b 2
0001BB85 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BB8A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BB8F 00                         		dc.b 0
0001BB90 02                         byte_19D3A:	dc.b 2
0001BB91 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BB96 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BB9B 00                         		dc.b 0
0001BB9C 02                         byte_19D46:	dc.b 2
0001BB9D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BBA2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BBA8 00                         		even
0001BBA8 00                         		even
0001BBA8                            
0001BBA8                            ; ===========================================================================
0001BBA8                            ; ---------------------------------------------------------------------------
0001BBA8                            ; Object 85 - Eggman (FZ)
0001BBA8                            ; ---------------------------------------------------------------------------
0001BBA8                            
0001BBA8                            Obj85_Delete:
0001BBA8 4EF9 0000 EFF6             		jmp	DeleteObject
0001BBAE                            ; ===========================================================================
0001BBAE                            
0001BBAE                            Obj85:					; XREF: Obj_Index
0001BBAE 7000                       		moveq	#0,d0
0001BBB0 1028 0024                  		move.b	$24(a0),d0
0001BBB4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BBB8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BBBC                            ; ===========================================================================
0001BBBC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BBBE 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BBC0 0000                       		dc.w loc_1A38E-Obj85_Index
0001BBC2 0000                       		dc.w loc_1A346-Obj85_Index
0001BBC4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BBC6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BBC8 0000                       		dc.w loc_1A264-Obj85_Index
0001BBCA                            
0001BBCA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BBD0 0001 B88A                  		dc.l Map_obj82		; mappings pointer
0001BBD4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BBDA 0000 0000                  		dc.l Map_obj84
0001BBDE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BBE4 0000 0000                  		dc.l Map_FZBoss
0001BBE8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BBEE 0001 B88A                  		dc.l Map_obj82
0001BBF2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BBF8 0001 9B60                  		dc.l Map_Eggman
0001BBFC 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BC02 0001 9B60                  		dc.l Map_Eggman
0001BC06                            
0001BC06 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BC0B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BC10 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BC15 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BC1A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BC1F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BC24                            ; ===========================================================================
0001BC24                            
0001BC24                            Obj85_Main:				; XREF: Obj85_Index
0001BC24 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BC28 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BC2C 2248                       		movea.l	a0,a1
0001BC2E 7205                       		moveq	#5,d1
0001BC30 6000                       		bra.s	Obj85_LoadBoss
0001BC32                            ; ===========================================================================
0001BC32                            
0001BC32                            Obj85_Loop:
0001BC32 4EB9 0000 F464             		jsr	SingleObjLoad2
0001BC38 6600                       		bne.s	loc_19E20
0001BC3A                            
0001BC3A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BC3A 12BC 0085                  		move.b	#$85,(a1)
0001BC3E 335A 0008                  		move.w	(a2)+,8(a1)
0001BC42 335A 000C                  		move.w	(a2)+,$C(a1)
0001BC46 335A 0002                  		move.w	(a2)+,2(a1)
0001BC4A 235A 0004                  		move.l	(a2)+,4(a1)
0001BC4E 135B 0024                  		move.b	(a3)+,$24(a1)
0001BC52 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BC56 135B 0018                  		move.b	(a3)+,$18(a1)
0001BC5A 135B 0017                  		move.b	(a3)+,$17(a1)
0001BC5E 135B 0016                  		move.b	(a3)+,$16(a1)
0001BC62 137C 0004 0001             		move.b	#4,1(a1)
0001BC68 08E8 0007 0001             		bset	#7,1(a0)
0001BC6E 2348 0034                  		move.l	a0,$34(a1)
0001BC72 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BC76                            
0001BC76                            loc_19E20:
0001BC76 45E8 0036                  		lea	$36(a0),a2
0001BC7A 4EB9 0000 F44E             		jsr	SingleObjLoad
0001BC80 6600                       		bne.s	loc_19E5A
0001BC82 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BC86 3489                       		move.w	a1,(a2)
0001BC88 2348 0034                  		move.l	a0,$34(a1)
0001BC8C 45E8 0038                  		lea	$38(a0),a2
0001BC90 7400                       		moveq	#0,d2
0001BC92 7203                       		moveq	#3,d1
0001BC94                            
0001BC94                            loc_19E3E:
0001BC94 4EB9 0000 F464             		jsr	SingleObjLoad2
0001BC9A 6600                       		bne.s	loc_19E5A
0001BC9C 34C9                       		move.w	a1,(a2)+
0001BC9E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BCA2 2348 0034                  		move.l	a0,$34(a1)
0001BCA6 1342 0028                  		move.b	d2,$28(a1)
0001BCAA 5442                       		addq.w	#2,d2
0001BCAC 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BCB0                            
0001BCB0                            loc_19E5A:
0001BCB0 317C 0000 0034             		move.w	#0,$34(a0)
0001BCB6 117C 0001 0021             		move.b	#1,$21(a0)	; set number of	hits to	1
0001BCBC 4EB9 0000 0000             		jsr 	loc_19F6A
0001BCC2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BCC8                            
0001BCC8                            Obj85_Eggman:				; XREF: Obj85_Index
0001BCC8 7000                       		moveq	#0,d0
0001BCCA 1028 0034                  		move.b	$34(a0),d0
0001BCCE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BCD2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BCD6 4EF9 0000 EFBA             		jmp	DisplaySprite
0001BCDC                            ; ===========================================================================
0001BCDC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BCE0 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BCE4 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BCE8 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BCEC                            ; ===========================================================================
0001BCEC                            
0001BCEC                            loc_19E90:				; XREF: off_19E80
0001BCEC 4AB8 F680                  		tst.l	($FFFFF680).w
0001BCF0 6600                       		bne.s	loc_19EA2
0001BCF2 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BCF8 6500                       		bcs.s	loc_19EA2
0001BCFA 5428 0034                  		addq.b	#2,$34(a0)
0001BCFE                            
0001BCFE                            loc_19EA2:
0001BCFE 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BD02 4E75                       		rts	
0001BD04                            ; ===========================================================================
0001BD04                            
0001BD04                            loc_19EA8:				; XREF: off_19E80
0001BD04 4A68 0030                  		tst.w	$30(a0)
0001BD08 6A00                       		bpl.s	loc_19F10
0001BD0A 4268 0030                  		clr.w	$30(a0)
0001BD0E 4EB9 0000 2854             		jsr	(RandomNumber).l
0001BD14 0240 000C                  		andi.w	#$C,d0
0001BD18 3200                       		move.w	d0,d1
0001BD1A 5441                       		addq.w	#2,d1
0001BD1C 4A80                       		tst.l	d0
0001BD1E 6A00                       		bpl.s	loc_19EC6
0001BD20 C141                       		exg	d1,d0
0001BD22                            
0001BD22                            loc_19EC6:
0001BD22 43FA 0000                  		lea	word_19FD6(pc),a1
0001BD26 3031 0000                  		move.w	(a1,d0.w),d0
0001BD2A 3231 1000                  		move.w	(a1,d1.w),d1
0001BD2E 3140 0030                  		move.w	d0,$30(a0)
0001BD32 74FF                       		moveq	#-1,d2
0001BD34 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BD38 2242                       		movea.l	d2,a1
0001BD3A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BD40 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BD46 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BD4A 2242                       		movea.l	d2,a1
0001BD4C 137C 0001 0029             		move.b	#1,$29(a1)
0001BD52 337C 0000 0030             		move.w	#0,$30(a1)
0001BD58 317C 0001 0032             		move.w	#1,$32(a0)
0001BD5E 4228 0035                  		clr.b	$35(a0)
0001BD62 303C 00B7                  		move.w	#$B7,d0
0001BD66 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BD6C                            
0001BD6C                            loc_19F10:
0001BD6C 4A68 0032                  		tst.w	$32(a0)
0001BD70 6B00 0000                  		bmi.w	loc_19FA6
0001BD74 08A8 0000 0022             		bclr	#0,$22(a0)
0001BD7A 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD7E 9068 0008                  		sub.w	8(a0),d0
0001BD82 6500                       		bcs.s	loc_19F2E
0001BD84 08E8 0000 0022             		bset	#0,$22(a0)
0001BD8A                            
0001BD8A                            loc_19F2E:
0001BD8A 323C 002B                  		move.w	#$2B,d1
0001BD8E 343C 0014                  		move.w	#$14,d2
0001BD92 363C 0014                  		move.w	#$14,d3
0001BD96 3828 0008                  		move.w	8(a0),d4
0001BD9A 4EB9 0001 139C             		jsr	SolidObject
0001BDA0 4A44                       		tst.w	d4
0001BDA2 6E00                       		bgt.s	loc_19F50
0001BDA4                            
0001BDA4                            loc_19F48:
0001BDA4 4A28 0035                  		tst.b	$35(a0)
0001BDA8 6600                       		bne.s	loc_19F88
0001BDAA 6000                       		bra.s	loc_19F96
0001BDAC                            ; ===========================================================================
0001BDAC                            
0001BDAC                            loc_19F50:
0001BDAC 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BDB0 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BDB6 66EC                       		bne.s	loc_19F48
0001BDB8 303C 0300                  		move.w	#$300,d0
0001BDBC 0828 0000 0022             		btst	#0,$22(a0)
0001BDC2 6600                       		bne.s	loc_19F6A
0001BDC4 4440                       		neg.w	d0
0001BDC6                            
0001BDC6                            loc_19F6A:
0001BDC6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BDCA 4A28 0035                  		tst.b	$35(a0)
0001BDCE 6600                       		bne.s	loc_19F88
0001BDD0 5328 0021                  		subq.b	#1,$21(a0)
0001BDD4 117C 0064 0035             		move.b	#$64,$35(a0)
0001BDDA 303C 00AC                  		move.w	#$AC,d0
0001BDDE 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BDE4                            
0001BDE4                            loc_19F88:
0001BDE4 5328 0035                  		subq.b	#1,$35(a0)
0001BDE8 6700                       		beq.s	loc_19F96
0001BDEA 117C 0003 001C             		move.b	#3,$1C(a0)
0001BDF0 6000                       		bra.s	loc_19F9C
0001BDF2                            ; ===========================================================================
0001BDF2                            
0001BDF2                            loc_19F96:
0001BDF2 117C 0001 001C             		move.b	#1,$1C(a0)
0001BDF8                            
0001BDF8                            loc_19F9C:
0001BDF8 43FA FA5E                  		lea	Ani_obj82(pc),a1
0001BDFC 4EF9 0000 BEA2             		jmp	AnimateSprite
0001BE02                            ; ===========================================================================
0001BE02                            
0001BE02                            loc_19FA6:
0001BE02 4A28 0021                  		tst.b	$21(a0)
0001BE06 6700                       		beq.s	loc_19FBC
0001BE08 5428 0034                  		addq.b	#2,$34(a0)
0001BE0C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BE12 4268 0032                  		clr.w	$32(a0)
0001BE16 4E75                       		rts	
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            loc_19FBC:
0001BE18 117C 0006 0034             		move.b	#6,$34(a0)
0001BE1E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BE24 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BE2A 117C 0014 0016             		move.b	#$14,$16(a0)
0001BE30 4E75                       		rts	
0001BE32                            ; ===========================================================================
0001BE32 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BE42                            ; ===========================================================================
0001BE42                            
0001BE42                            loc_19FE6:				; XREF: off_19E80
0001BE42 70FF                       		moveq	#-1,d0
0001BE44 3028 0036                  		move.w	$36(a0),d0
0001BE48 2240                       		movea.l	d0,a1
0001BE4A 4A68 0030                  		tst.w	$30(a0)
0001BE4E 6A00                       		bpl.s	loc_1A000
0001BE50 4268 0030                  		clr.w	$30(a0)
0001BE54 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BE5A 6100                       		bsr.s	loc_1A020
0001BE5C                            
0001BE5C                            loc_1A000:
0001BE5C 700F                       		moveq	#$F,d0
0001BE5E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BE62 6600                       		bne.s	loc_1A00A
0001BE64 6100                       		bsr.s	loc_1A020
0001BE66                            
0001BE66                            loc_1A00A:
0001BE66 4A68 0032                  		tst.w	$32(a0)
0001BE6A 6700                       		beq.s	locret_1A01E
0001BE6C 5528 0034                  		subq.b	#2,$34(a0)
0001BE70 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BE76 4268 0032                  		clr.w	$32(a0)
0001BE7A                            
0001BE7A                            locret_1A01E:
0001BE7A 4E75                       		rts	
0001BE7C                            ; ===========================================================================
0001BE7C                            
0001BE7C                            loc_1A020:
0001BE7C 303C 00B1                  		move.w	#$B1,d0
0001BE80 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play electricity sound
0001BE86                            ; ===========================================================================
0001BE86                            
0001BE86                            loc_1A02A:				; XREF: off_19E80
0001BE86 117C 0030 0017             		move.b	#$30,$17(a0)
0001BE8C 08E8 0000 0022             		bset	#0,$22(a0)
0001BE92 4EB9 0000 EFA0             		jsr	SpeedToPos
0001BE98 117C 0006 001A             		move.b	#6,$1A(a0)
0001BE9E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BEA4 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BEAA 6500                       		bcs.s	loc_1A070
0001BEAC 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BEB2 5428 0034                  		addq.b	#2,$34(a0)
0001BEB6 117C 0020 0017             		move.b	#$20,$17(a0)
0001BEBC 317C 0100 0010             		move.w	#$100,$10(a0)
0001BEC2 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BEC8 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BECC                            
0001BECC                            loc_1A070:
0001BECC 6000 0000                  		bra.w	loc_1A166
0001BED0                            ; ===========================================================================
0001BED0                            
0001BED0                            loc_1A074:				; XREF: off_19E80
0001BED0 08E8 0000 0022             		bset	#0,$22(a0)
0001BED6 117C 0004 001C             		move.b	#4,$1C(a0)
0001BEDC 4EB9 0000 EFA0             		jsr	SpeedToPos
0001BEE2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BEE8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BEEE 6500                       		bcs.s	loc_1A09A
0001BEF0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BEF6                            
0001BEF6                            loc_1A09A:
0001BEF6 317C 0400 0010             		move.w	#$400,$10(a0)
0001BEFC 3028 0008                  		move.w	8(a0),d0
0001BF00 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BF04 6A00                       		bpl.s	loc_1A0B4
0001BF06 317C 0500 0010             		move.w	#$500,$10(a0)
0001BF0C 6000 0000                  		bra.w	loc_1A0F2
0001BF10                            ; ===========================================================================
0001BF10                            
0001BF10                            loc_1A0B4:
0001BF10 0440 0070                  		subi.w	#$70,d0
0001BF14 6500                       		bcs.s	loc_1A0F2
0001BF16 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BF1C 5140                       		subq.w	#8,d0
0001BF1E 6500                       		bcs.s	loc_1A0F2
0001BF20 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BF26 5140                       		subq.w	#8,d0
0001BF28 6500                       		bcs.s	loc_1A0F2
0001BF2A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BF30 5140                       		subq.w	#8,d0
0001BF32 6500                       		bcs.s	loc_1A0F2
0001BF34 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BF3A 5140                       		subq.w	#8,d0
0001BF3C 6500                       		bcs.s	loc_1A0F2
0001BF3E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BF44 0440 0038                  		subi.w	#$38,d0
0001BF48 6500                       		bcs.s	loc_1A0F2
0001BF4A 4268 0010                  		clr.w	$10(a0)
0001BF4E                            
0001BF4E                            loc_1A0F2:
0001BF4E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BF54 6500                       		bcs.s	loc_1A110
0001BF56 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BF5C 317C 0240 0010             		move.w	#$240,$10(a0)
0001BF62 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BF68 5428 0034                  		addq.b	#2,$34(a0)
0001BF6C                            
0001BF6C                            loc_1A110:
0001BF6C 6000                       		bra.s	loc_1A15C
0001BF6E                            ; ===========================================================================
0001BF6E                            
0001BF6E                            loc_1A112:				; XREF: off_19E80
0001BF6E 4EB9 0000 EFA0             		jsr	SpeedToPos
0001BF74 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BF7A 6500                       		bcs.s	loc_1A124
0001BF7C 4268 0010                  		clr.w	$10(a0)
0001BF80                            
0001BF80                            loc_1A124:
0001BF80 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BF86 4A68 0012                  		tst.w	$12(a0)
0001BF8A 6B00                       		bmi.s	loc_1A142
0001BF8C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BF92 6500                       		bcs.s	loc_1A142
0001BF94 317C 0592 000C             		move.w	#$592,$C(a0)
0001BF9A 4268 0012                  		clr.w	$12(a0)
0001BF9E                            
0001BF9E                            loc_1A142:
0001BF9E 3028 0010                  		move.w	$10(a0),d0
0001BFA2 8068 0012                  		or.w	$12(a0),d0
0001BFA6 6600                       		bne.s	loc_1A15C
0001BFA8 5428 0034                  		addq.b	#2,$34(a0)
0001BFAC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BFB2 117C 0001 0021             		move.b	#1,$21(a0)
0001BFB8                            
0001BFB8                            loc_1A15C:
0001BFB8 43FA F89E                  		lea	Ani_obj82(pc),a1
0001BFBC 4EB9 0000 BEA2             		jsr	AnimateSprite
0001BFC2                            
0001BFC2                            loc_1A166:
0001BFC2 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BFC8 6C00                       		bge.s	loc_1A172
0001BFCA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BFCE                            
0001BFCE                            loc_1A172:
0001BFCE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BFD4 6C00                       		bge.s	locret_1A190
0001BFD6 323C 001B                  		move.w	#$1B,d1
0001BFDA 343C 0070                  		move.w	#$70,d2
0001BFDE 363C 0071                  		move.w	#$71,d3
0001BFE2 3828 0008                  		move.w	8(a0),d4
0001BFE6 4EF9 0001 139C             		jmp	SolidObject
0001BFEC                            ; ===========================================================================
0001BFEC                            
0001BFEC                            locret_1A190:
0001BFEC 4E75                       		rts	
0001BFEE                            ; ===========================================================================
0001BFEE                            
0001BFEE                            loc_1A192:				; XREF: off_19E80
0001BFEE 217C 0001 9B60 0004        		move.l	#Map_Eggman,4(a0)
0001BFF6 317C 0400 0002             		move.w	#$400,2(a0)
0001BFFC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C002 08E8 0000 0022             		bset	#0,$22(a0)
0001C008 4EB9 0000 EFA0             		jsr	SpeedToPos
0001C00E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C014 6400                       		bcc.s	loc_1A1D0
0001C016 317C 0180 0010             		move.w	#$180,$10(a0)
0001C01C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C022 117C 000F 0020             		move.b	#$F,$20(a0)
0001C028 5428 0034                  		addq.b	#2,$34(a0)
0001C02C                            
0001C02C                            loc_1A1D0:
0001C02C 6000 FF8A                  		bra.w	loc_1A15C
0001C030                            ; ===========================================================================
0001C030                            
0001C030                            loc_1A1D4:				; XREF: off_19E80
0001C030 08E8 0000 0022             		bset	#0,$22(a0)
0001C036 4EB9 0000 EFA0             		jsr	SpeedToPos
0001C03C 4A68 0030                  		tst.w	$30(a0)
0001C040 6600                       		bne.s	loc_1A1FC
0001C042 4A28 0020                  		tst.b	$20(a0)
0001C046 6600                       		bne.s	loc_1A216
0001C048 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C04E 303C 00AC                  		move.w	#$AC,d0
0001C052 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C058                            
0001C058                            loc_1A1FC:
0001C058 5368 0030                  		subq.w	#1,$30(a0)
0001C05C 6600                       		bne.s	loc_1A216
0001C05E 4A28 0022                  		tst.b	$22(a0)
0001C062 6A00                       		bpl.s	loc_1A210
0001C064 317C 0060 0012             		move.w	#$60,$12(a0)
0001C06A 6000                       		bra.s	loc_1A216
0001C06C                            ; ===========================================================================
0001C06C                            
0001C06C                            loc_1A210:
0001C06C 117C 000F 0020             		move.b	#$F,$20(a0)
0001C072                            
0001C072                            loc_1A216:
0001C072 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C078 6D00                       		blt.s	loc_1A23A
0001C07A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C080 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C086 4278 D014                  		clr.w	($FFFFD014).w
0001C08A 4A68 0012                  		tst.w	$12(a0)
0001C08E 6A00                       		bpl.s	loc_1A248
0001C090 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C096                            
0001C096                            loc_1A23A:
0001C096 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C09C 6D00                       		blt.s	loc_1A248
0001C09E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C0A4                            
0001C0A4                            loc_1A248:
0001C0A4 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C0AA 6500                       		bcs.s	loc_1A260
0001C0AC 4A28 0001                  		tst.b	1(a0)
0001C0B0 6B00                       		bmi.s	loc_1A260
0001C0B2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C0B8 6000 FAEE                  		bra.w	Obj85_Delete
0001C0BC                            ; ===========================================================================
0001C0BC                            
0001C0BC                            loc_1A260:
0001C0BC 6000 FEFA                  		bra.w	loc_1A15C
0001C0C0                            ; ===========================================================================
0001C0C0                            
0001C0C0                            loc_1A264:				; XREF: Obj85_Index
0001C0C0 2268 0034                  		movea.l	$34(a0),a1
0001C0C4 1011                       		move.b	(a1),d0
0001C0C6 B010                       		cmp.b	(a0),d0
0001C0C8 6600 FADE                  		bne.w	Obj85_Delete
0001C0CC 117C 0007 001C             		move.b	#7,$1C(a0)
0001C0D2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C0D8 6C00                       		bge.s	loc_1A280
0001C0DA 6000                       		bra.s	loc_1A2A6
0001C0DC                            ; ===========================================================================
0001C0DC                            
0001C0DC                            loc_1A280:
0001C0DC 4A69 0010                  		tst.w	$10(a1)
0001C0E0 6700                       		beq.s	loc_1A28C
0001C0E2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C0E8                            
0001C0E8                            loc_1A28C:
0001C0E8 43FA DA26                  		lea	Ani_Eggman(pc),a1
0001C0EC 4EB9 0000 BEA2             		jsr	AnimateSprite
0001C0F2                            
0001C0F2                            loc_1A296:
0001C0F2 2268 0034                  		movea.l	$34(a0),a1
0001C0F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001C0FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C102                            
0001C102                            loc_1A2A6:
0001C102 2268 0034                  		movea.l	$34(a0),a1
0001C106 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C10C 7003                       		moveq	#3,d0
0001C10E C028 0022                  		and.b	$22(a0),d0
0001C112 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C118 8128 0001                  		or.b	d0,1(a0)
0001C11C 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C122                            ; ===========================================================================
0001C122                            
0001C122                            loc_1A2C6:				; XREF: Obj85_Index
0001C122 2268 0034                  		movea.l	$34(a0),a1
0001C126 1011                       		move.b	(a1),d0
0001C128 B010                       		cmp.b	(a0),d0
0001C12A 6600 FA7C                  		bne.w	Obj85_Delete
0001C12E 0CA9 0001 9B60 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C136 6700                       		beq.s	loc_1A2E4
0001C138 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C13E 60C2                       		bra.s	loc_1A2A6
0001C140                            ; ===========================================================================
0001C140                            
0001C140                            loc_1A2E4:
0001C140 117C 0001 001C             		move.b	#1,$1C(a0)
0001C146 4A29 0021                  		tst.b	$21(a1)
0001C14A 6F00                       		ble.s	loc_1A312
0001C14C 117C 0006 001C             		move.b	#6,$1C(a0)
0001C152 217C 0001 9B60 0004        		move.l	#Map_Eggman,4(a0)
0001C15A 317C 0400 0002             		move.w	#$400,2(a0)
0001C160 43FA D9AE                  		lea	Ani_Eggman(pc),a1
0001C164 4EB9 0000 BEA2             		jsr	AnimateSprite
0001C16A 6000 FF86                  		bra.w	loc_1A296
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            loc_1A312:
0001C16E 4A28 0001                  		tst.b	1(a0)
0001C172 6A00 FA34                  		bpl.w	Obj85_Delete
0001C176 6100 D4EA                  		bsr.w	BossDefeated
0001C17A 117C 0002 0018             		move.b	#2,$18(a0)
0001C180 117C 0000 001C             		move.b	#0,$1C(a0)
0001C186 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C18E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C194 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C198 4EB9 0000 BEA2             		jsr	AnimateSprite
0001C19E 6000 FF52                  		bra.w	loc_1A296
0001C1A2                            ; ===========================================================================
0001C1A2                            
0001C1A2                            loc_1A346:				; XREF: Obj85_Index
0001C1A2 08E8 0000 0022             		bset	#0,$22(a0)
0001C1A8 2268 0034                  		movea.l	$34(a0),a1
0001C1AC 0CA9 0001 9B60 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C1B4 6700                       		beq.s	loc_1A35E
0001C1B6 6000 FF4A                  		bra.w	loc_1A2A6
0001C1BA                            ; ===========================================================================
0001C1BA                            
0001C1BA                            loc_1A35E:
0001C1BA 3169 0008 0008             		move.w	8(a1),8(a0)
0001C1C0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C1C6 4A28 001E                  		tst.b	$1E(a0)
0001C1CA 6600                       		bne.s	loc_1A376
0001C1CC 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C1D2                            
0001C1D2                            loc_1A376:
0001C1D2 5328 001E                  		subq.b	#1,$1E(a0)
0001C1D6 6E00                       		bgt.s	loc_1A38A
0001C1D8 5228 001A                  		addq.b	#1,$1A(a0)
0001C1DC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C1E2 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C1E6                            
0001C1E6                            loc_1A38A:
0001C1E6 6000 FF0A                  		bra.w	loc_1A296
0001C1EA                            ; ===========================================================================
0001C1EA                            
0001C1EA                            loc_1A38E:				; XREF: Obj85_Index
0001C1EA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C1F0 3038 D008                  		move.w	($FFFFD008).w,d0
0001C1F4 9068 0008                  		sub.w	8(a0),d0
0001C1F8 6500                       		bcs.s	loc_1A3A6
0001C1FA 4A28 0001                  		tst.b	1(a0)
0001C1FE 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C202                            
0001C202                            loc_1A3A6:
0001C202 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C208                            ; ===========================================================================
0001C208                            
0001C208                            loc_1A3AC:				; XREF: Obj85_Index
0001C208 117C 0000 001A             		move.b	#0,$1A(a0)
0001C20E 08E8 0000 0022             		bset	#0,$22(a0)
0001C214 2268 0034                  		movea.l	$34(a0),a1
0001C218 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C21E 6600                       		bne.s	loc_1A3D0
0001C220 0CA9 0001 9B60 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C228 6700 F97E                  		beq.w	Obj85_Delete
0001C22C                            
0001C22C                            loc_1A3D0:
0001C22C 6000 FED4                  		bra.w	loc_1A2A6
0001C230                            ; ===========================================================================
0001C230                            Ani_obj85:
0001C230                            	include "_anim\obj85.asm"
0001C230                            ; ---------------------------------------------------------------------------
0001C230                            ; Animation script - Eggman (FZ)
0001C230                            ; ---------------------------------------------------------------------------
0001C230 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C232 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C236                            		even
0001C236                            		even
0001C236                            
0001C236                            Map_Eggman2:
0001C236                            	include "_maps\Eggman2.asm"
0001C236                            ; ---------------------------------------------------------------------------
0001C236                            ; Sprite mappings - Eggman (FZ)
0001C236                            ; ---------------------------------------------------------------------------
0001C236 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C238 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C23A 06                         byte_1A3DE:	dc.b 6
0001C23B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C240 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C245 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C24A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C24F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C254 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C259 06                         byte_1A3FD:	dc.b 6
0001C25A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C25F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C264 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C269 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C26E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C273 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C278                            		even
0001C278                            		even
0001C278                            
0001C278                            Map_FZBoss:
0001C278                            	include "_maps\FZ boss.asm"
0001C278                            ; ---------------------------------------------------------------------------
0001C278                            ; Sprite mappings - boss (FZ)
0001C278                            ; ---------------------------------------------------------------------------
0001C278 0000                       		dc.w byte_1A422-Map_FZBoss
0001C27A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C27C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C27E 02                         byte_1A422:	dc.b 2
0001C27F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C284 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C289 03                         byte_1A42D:	dc.b 3
0001C28A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C28F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C294 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C299 02                         byte_1A43D:	dc.b 2
0001C29A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C29F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C2A4                            		even
0001C2A4                            		even
0001C2A4                            
0001C2A4                            ; ===========================================================================
0001C2A4                            
0001C2A4                            Obj84_Delete:
0001C2A4 4EF9 0000 EFF6             		jmp	DeleteObject
0001C2AA                            ; ===========================================================================
0001C2AA                            ; ---------------------------------------------------------------------------
0001C2AA                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C2AA                            ; ---------------------------------------------------------------------------
0001C2AA                            
0001C2AA                            Obj84:					; XREF: Obj_Index
0001C2AA 7000                       		moveq	#0,d0
0001C2AC 1028 0024                  		move.b	$24(a0),d0
0001C2B0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C2B4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C2B8                            ; ===========================================================================
0001C2B8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C2BA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C2BC 0000                       		dc.w loc_1A57E-Obj84_Index
0001C2BE                            
0001C2BE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C2C2 2550 0620                  		dc.w $2550, $620
0001C2C6 2490 04C0                  		dc.w $2490, $4C0
0001C2CA 2510 04C0                  		dc.w $2510, $4C0
0001C2CE                            ; ===========================================================================
0001C2CE                            
0001C2CE                            Obj84_Main:				; XREF: Obj84_Index
0001C2CE 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C2D2 7000                       		moveq	#0,d0
0001C2D4 1028 0028                  		move.b	$28(a0),d0
0001C2D8 D040                       		add.w	d0,d0
0001C2DA D2C0                       		adda.w	d0,a1
0001C2DC 117C 0004 0001             		move.b	#4,1(a0)
0001C2E2 08E8 0007 0001             		bset	#7,1(a0)
0001C2E8 08E8 0004 0001             		bset	#4,1(a0)
0001C2EE 317C 0300 0002             		move.w	#$300,2(a0)
0001C2F4 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C2FC 3159 0008                  		move.w	(a1)+,8(a0)
0001C300 3151 000C                  		move.w	(a1),$C(a0)
0001C304 3159 0038                  		move.w	(a1)+,$38(a0)
0001C308 117C 0020 0016             		move.b	#$20,$16(a0)
0001C30E 117C 0060 0017             		move.b	#$60,$17(a0)
0001C314 117C 0020 0019             		move.b	#$20,$19(a0)
0001C31A 117C 0060 0016             		move.b	#$60,$16(a0)
0001C320 117C 0003 0018             		move.b	#3,$18(a0)
0001C326 5428 0024                  		addq.b	#2,$24(a0)
0001C32A                            
0001C32A                            loc_1A4CE:				; XREF: Obj84_Index
0001C32A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C330 6F00                       		ble.s	loc_1A4DC
0001C332 08E8 0001 0001             		bset	#1,1(a0)
0001C338                            
0001C338                            loc_1A4DC:
0001C338 42A8 003C                  		clr.l	$3C(a0)
0001C33C 4A28 0029                  		tst.b	$29(a0)
0001C340 6700                       		beq.s	loc_1A4EA
0001C342 5428 0024                  		addq.b	#2,$24(a0)
0001C346                            
0001C346                            loc_1A4EA:
0001C346 2028 003C                  		move.l	$3C(a0),d0
0001C34A 2228 0038                  		move.l	$38(a0),d1
0001C34E D280                       		add.l	d0,d1
0001C350 4841                       		swap	d1
0001C352 3141 000C                  		move.w	d1,$C(a0)
0001C356 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C35C 6600                       		bne.s	loc_1A524
0001C35E 4A68 0030                  		tst.w	$30(a0)
0001C362 6A00                       		bpl.s	loc_1A524
0001C364 70F6                       		moveq	#-$A,d0
0001C366 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C36C 6F00                       		ble.s	loc_1A514
0001C36E 700E                       		moveq	#$E,d0
0001C370                            
0001C370                            loc_1A514:
0001C370 D240                       		add.w	d0,d1
0001C372 2268 0034                  		movea.l	$34(a0),a1
0001C376 3341 000C                  		move.w	d1,$C(a1)
0001C37A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C380                            
0001C380                            loc_1A524:
0001C380 323C 002B                  		move.w	#$2B,d1
0001C384 343C 0060                  		move.w	#$60,d2
0001C388 363C 0061                  		move.w	#$61,d3
0001C38C 3828 0008                  		move.w	8(a0),d4
0001C390 4EB9 0001 139C             		jsr	SolidObject
0001C396 7000                       		moveq	#0,d0
0001C398 3228 003C                  		move.w	$3C(a0),d1
0001C39C 6A00                       		bpl.s	loc_1A550
0001C39E 4441                       		neg.w	d1
0001C3A0 5141                       		subq.w	#8,d1
0001C3A2 6500                       		bcs.s	loc_1A55C
0001C3A4 5200                       		addq.b	#1,d0
0001C3A6 E841                       		asr.w	#4,d1
0001C3A8 D041                       		add.w	d1,d0
0001C3AA 6000                       		bra.s	loc_1A55C
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            loc_1A550:
0001C3AC 0441 0027                  		subi.w	#$27,d1
0001C3B0 6500                       		bcs.s	loc_1A55C
0001C3B2 5200                       		addq.b	#1,d0
0001C3B4 E841                       		asr.w	#4,d1
0001C3B6 D041                       		add.w	d1,d0
0001C3B8                            
0001C3B8                            loc_1A55C:
0001C3B8 1140 001A                  		move.b	d0,$1A(a0)
0001C3BC 3038 D008                  		move.w	($FFFFD008).w,d0
0001C3C0 9068 0008                  		sub.w	8(a0),d0
0001C3C4 6B00                       		bmi.s	loc_1A578
0001C3C6 0440 0140                  		subi.w	#$140,d0
0001C3CA 6B00                       		bmi.s	loc_1A578
0001C3CC 4A28 0001                  		tst.b	1(a0)
0001C3D0 6A00 FED2                  		bpl.w	Obj84_Delete
0001C3D4                            
0001C3D4                            loc_1A578:
0001C3D4 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C3DA                            ; ===========================================================================
0001C3DA                            
0001C3DA                            loc_1A57E:				; XREF: Obj84_Index
0001C3DA 7000                       		moveq	#0,d0
0001C3DC 1028 0028                  		move.b	$28(a0),d0
0001C3E0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C3E4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C3E8 6000 FF5C                  		bra.w	loc_1A4EA
0001C3EC                            ; ===========================================================================
0001C3EC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C3EE 0000                       		dc.w loc_1A598-off_1A590
0001C3F0 0000                       		dc.w loc_1A604-off_1A590
0001C3F2 0000                       		dc.w loc_1A604-off_1A590
0001C3F4                            ; ===========================================================================
0001C3F4                            
0001C3F4                            loc_1A598:				; XREF: off_1A590
0001C3F4 4A28 0029                  		tst.b	$29(a0)
0001C3F8 6600                       		bne.s	loc_1A5D4
0001C3FA 2268 0034                  		movea.l	$34(a0),a1
0001C3FE 4A29 0021                  		tst.b	$21(a1)
0001C402 6600                       		bne.s	loc_1A5B4
0001C404 6100 D25C                  		bsr.w	BossDefeated
0001C408 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C410                            
0001C410                            loc_1A5B4:
0001C410 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C418 6400                       		bcc.s	locret_1A602
0001C41A 42A8 003C                  		clr.l	$3C(a0)
0001C41E 2268 0034                  		movea.l	$34(a0),a1
0001C422 5369 0032                  		subq.w	#1,$32(a1)
0001C426 4269 0030                  		clr.w	$30(a1)
0001C42A 5528 0024                  		subq.b	#2,$24(a0)
0001C42E 4E75                       		rts	
0001C430                            ; ===========================================================================
0001C430                            
0001C430                            loc_1A5D4:
0001C430 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C436 6C00                       		bge.s	loc_1A5E4
0001C438 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C440                            
0001C440                            loc_1A5E4:
0001C440 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C448 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C44E 6E00                       		bgt.s	locret_1A602
0001C450 4268 003E                  		clr.w	$3E(a0)
0001C454 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C45A 4228 0029                  		clr.b	$29(a0)
0001C45E                            
0001C45E                            locret_1A602:
0001C45E 4E75                       		rts	
0001C460                            ; ===========================================================================
0001C460                            
0001C460                            loc_1A604:				; XREF: off_1A590
0001C460 08E8 0001 0001             		bset	#1,1(a0)
0001C466 4A28 0029                  		tst.b	$29(a0)
0001C46A 6600                       		bne.s	loc_1A646
0001C46C 2268 0034                  		movea.l	$34(a0),a1
0001C470 4A29 0021                  		tst.b	$21(a1)
0001C474 6600                       		bne.s	loc_1A626
0001C476 6100 D1EA                  		bsr.w	BossDefeated
0001C47A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C482                            
0001C482                            loc_1A626:
0001C482 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C48A 6400                       		bcc.s	locret_1A674
0001C48C 42A8 003C                  		clr.l	$3C(a0)
0001C490 2268 0034                  		movea.l	$34(a0),a1
0001C494 5369 0032                  		subq.w	#1,$32(a1)
0001C498 4269 0030                  		clr.w	$30(a1)
0001C49C 5528 0024                  		subq.b	#2,$24(a0)
0001C4A0 4E75                       		rts	
0001C4A2                            ; ===========================================================================
0001C4A2                            
0001C4A2                            loc_1A646:
0001C4A2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C4A8 6D00                       		blt.s	loc_1A656
0001C4AA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C4B2                            
0001C4B2                            loc_1A656:
0001C4B2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C4BA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C4C0 6D00                       		blt.s	locret_1A674
0001C4C2 4268 003E                  		clr.w	$3E(a0)
0001C4C6 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C4CC 4228 0029                  		clr.b	$29(a0)
0001C4D0                            
0001C4D0                            locret_1A674:
0001C4D0 4E75                       		rts	
0001C4D2                            ; ===========================================================================
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2                            Map_obj84:
0001C4D2                            	include "_maps\obj84.asm"
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C4D6 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C4DA 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C4DE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C4E2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C4E6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C4EA 06                         byte_1A68E:	dc.b 6
0001C4EB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C4F0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C4F5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4FA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C4FF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C504 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C509 08                         byte_1A6AD:	dc.b 8
0001C50A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C50F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C514 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C519 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C51E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C523 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C528 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C52D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C532 0A                         byte_1A6D6:	dc.b $A
0001C533 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C538 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C53D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C542 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C547 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C54C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C551 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C556 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C55B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C560 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C565 0C                         byte_1A709:	dc.b $C
0001C566 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C56B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C570 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C575 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C57A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C57F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C584 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C589 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C58E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C593 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C598 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C59D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C5A2 0D                         byte_1A746:	dc.b $D
0001C5A3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C5A8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C5AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C5B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C5B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C5BC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C5C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C5C6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C5CB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C5D0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C5D5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C5DA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C5DF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C5E4 0E                         byte_1A788:	dc.b $E
0001C5E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C5EA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C5EF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C5F4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C5F9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C5FE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C603 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C608 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C60D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C612 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C617 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C61C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C621 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C626 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C62B 02                         byte_1A7CF:	dc.b 2
0001C62C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C631 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C636                            		even
0001C636                            		even
0001C636                            
0001C636                            ; ===========================================================================
0001C636                            ; ---------------------------------------------------------------------------
0001C636                            ; Object 86 - energy balls (FZ)
0001C636                            ; ---------------------------------------------------------------------------
0001C636                            
0001C636                            Obj86:					; XREF: Obj_Index
0001C636 7000                       		moveq	#0,d0
0001C638 1028 0024                  		move.b	$24(a0),d0
0001C63C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C640 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C644                            ; ===========================================================================
0001C644 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C646 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C648 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C64A 0000                       		dc.w loc_1A962-Obj86_Index
0001C64C 0000                       		dc.w loc_1A982-Obj86_Index
0001C64E                            ; ===========================================================================
0001C64E                            
0001C64E                            Obj86_Main:				; XREF: Obj86_Index
0001C64E 317C 2588 0008             		move.w	#$2588,8(a0)
0001C654 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C65A 317C 0300 0002             		move.w	#$300,2(a0)
0001C660 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C668 117C 0000 001C             		move.b	#0,$1C(a0)
0001C66E 117C 0003 0018             		move.b	#3,$18(a0)
0001C674 117C 0008 0017             		move.b	#8,$17(a0)
0001C67A 117C 0008 0016             		move.b	#8,$16(a0)
0001C680 117C 0004 0001             		move.b	#4,1(a0)
0001C686 08E8 0007 0001             		bset	#7,1(a0)
0001C68C 5428 0024                  		addq.b	#2,$24(a0)
0001C690                            
0001C690                            Obj86_Generator:			; XREF: Obj86_Index
0001C690 2268 0034                  		movea.l	$34(a0),a1
0001C694 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C69A 6600                       		bne.s	loc_1A850
0001C69C 10BC 003F                  		move.b	#$3F,(a0)
0001C6A0 117C 0000 0024             		move.b	#0,$24(a0)
0001C6A6 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C6AC                            ; ===========================================================================
0001C6AC                            
0001C6AC                            loc_1A850:
0001C6AC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C6B2 4A28 0029                  		tst.b	$29(a0)
0001C6B6 6700                       		beq.s	loc_1A86C
0001C6B8 5428 0024                  		addq.b	#2,$24(a0)
0001C6BC 117C 0001 001C             		move.b	#1,$1C(a0)
0001C6C2 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C6C8                            
0001C6C8                            loc_1A86C:
0001C6C8 323C 0013                  		move.w	#$13,d1
0001C6CC 343C 0008                  		move.w	#8,d2
0001C6D0 363C 0011                  		move.w	#$11,d3
0001C6D4 3828 0008                  		move.w	8(a0),d4
0001C6D8 4EB9 0001 139C             		jsr	SolidObject
0001C6DE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C6E2 9068 0008                  		sub.w	8(a0),d0
0001C6E6 6B00                       		bmi.s	loc_1A89A
0001C6E8 0440 0140                  		subi.w	#$140,d0
0001C6EC 6B00                       		bmi.s	loc_1A89A
0001C6EE 4A28 0001                  		tst.b	1(a0)
0001C6F2 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C6F6                            
0001C6F6                            loc_1A89A:
0001C6F6 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C6FA 4EB9 0000 BEA2             		jsr	AnimateSprite
0001C700 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C706                            ; ===========================================================================
0001C706                            
0001C706                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C706 4A28 0029                  		tst.b	$29(a0)
0001C70A 6700 0000                  		beq.w	loc_1A954
0001C70E 4228 0029                  		clr.b	$29(a0)
0001C712 D068 0030                  		add.w	$30(a0),d0
0001C716 0240 001E                  		andi.w	#$1E,d0
0001C71A D4C0                       		adda.w	d0,a2
0001C71C 5868 0030                  		addq.w	#4,$30(a0)
0001C720 4268 0032                  		clr.w	$32(a0)
0001C724 7403                       		moveq	#3,d2
0001C726                            
0001C726                            Obj86_Loop:
0001C726 4EB9 0000 F464             		jsr	SingleObjLoad2
0001C72C 6600 0000                  		bne.w	loc_1A954
0001C730 12BC 0086                  		move.b	#$86,(a1)
0001C734 3368 0008 0008             		move.w	8(a0),8(a1)
0001C73A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C740 137C 0008 0024             		move.b	#8,$24(a1)
0001C746 337C 2300 0002             		move.w	#$2300,2(a1)
0001C74C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C754 137C 000C 0016             		move.b	#$C,$16(a1)
0001C75A 137C 000C 0017             		move.b	#$C,$17(a1)
0001C760 137C 0000 0020             		move.b	#0,$20(a1)
0001C766 137C 0003 0018             		move.b	#3,$18(a1)
0001C76C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C772 137C 0004 0001             		move.b	#4,1(a1)
0001C778 08E9 0007 0001             		bset	#7,1(a1)
0001C77E 2348 0034                  		move.l	a0,$34(a1)
0001C782 4EB9 0000 2854             		jsr	(RandomNumber).l
0001C788 3228 0032                  		move.w	$32(a0),d1
0001C78C C3FC FFB1                  		muls.w	#-$4F,d1
0001C790 0641 2578                  		addi.w	#$2578,d1
0001C794 0240 001F                  		andi.w	#$1F,d0
0001C798 0440 0010                  		subi.w	#$10,d0
0001C79C D041                       		add.w	d1,d0
0001C79E 3340 0030                  		move.w	d0,$30(a1)
0001C7A2 5268 0032                  		addq.w	#1,$32(a0)
0001C7A6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C7AC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C7B0                            
0001C7B0                            loc_1A954:
0001C7B0 4A68 0032                  		tst.w	$32(a0)
0001C7B4 6600                       		bne.s	loc_1A95E
0001C7B6 5428 0024                  		addq.b	#2,$24(a0)
0001C7BA                            
0001C7BA                            loc_1A95E:
0001C7BA 6000 FF0C                  		bra.w	loc_1A86C
0001C7BE                            ; ===========================================================================
0001C7BE                            
0001C7BE                            loc_1A962:				; XREF: Obj86_Index
0001C7BE 117C 0002 001C             		move.b	#2,$1C(a0)
0001C7C4 4A68 0038                  		tst.w	$38(a0)
0001C7C8 6600                       		bne.s	loc_1A97E
0001C7CA 117C 0002 0024             		move.b	#2,$24(a0)
0001C7D0 2268 0034                  		movea.l	$34(a0),a1
0001C7D4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C7DA                            
0001C7DA                            loc_1A97E:
0001C7DA 6000 FEEC                  		bra.w	loc_1A86C
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            loc_1A982:				; XREF: Obj86_Index
0001C7DE 7000                       		moveq	#0,d0
0001C7E0 1028 0025                  		move.b	$25(a0),d0
0001C7E4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C7E8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C7EC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C7F0 4EB9 0000 BEA2             		jsr	AnimateSprite
0001C7F6 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C7FC                            ; ===========================================================================
0001C7FC 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C7FE 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C800 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            loc_1A9A6:				; XREF: Obj86_Index2
0001C802 3028 0030                  		move.w	$30(a0),d0
0001C806 9068 0008                  		sub.w	8(a0),d0
0001C80A E940                       		asl.w	#4,d0
0001C80C 3140 0010                  		move.w	d0,$10(a0)
0001C810 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C816 5428 0025                  		addq.b	#2,$25(a0)
0001C81A 4E75                       		rts	
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            loc_1A9C0:				; XREF: Obj86_Index2
0001C81C 4A68 0010                  		tst.w	$10(a0)
0001C820 6700                       		beq.s	loc_1A9E6
0001C822 4EB9 0000 EFA0             		jsr	SpeedToPos
0001C828 3028 0008                  		move.w	8(a0),d0
0001C82C 9068 0030                  		sub.w	$30(a0),d0
0001C830 6400                       		bcc.s	loc_1A9E6
0001C832 4268 0010                  		clr.w	$10(a0)
0001C836 D168 0008                  		add.w	d0,8(a0)
0001C83A 2268 0034                  		movea.l	$34(a0),a1
0001C83E 5369 0032                  		subq.w	#1,$32(a1)
0001C842                            
0001C842                            loc_1A9E6:
0001C842 117C 0000 001C             		move.b	#0,$1C(a0)
0001C848 5368 0028                  		subq.w	#1,$28(a0)
0001C84C 6600                       		bne.s	locret_1AA1C
0001C84E 5428 0025                  		addq.b	#2,$25(a0)
0001C852 117C 0001 001C             		move.b	#1,$1C(a0)
0001C858 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C85E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C864 7000                       		moveq	#0,d0
0001C866 3038 D008                  		move.w	($FFFFD008).w,d0
0001C86A 9068 0008                  		sub.w	8(a0),d0
0001C86E 3140 0010                  		move.w	d0,$10(a0)
0001C872 317C 0140 0012             		move.w	#$140,$12(a0)
0001C878                            
0001C878                            locret_1AA1C:
0001C878 4E75                       		rts	
0001C87A                            ; ===========================================================================
0001C87A                            
0001C87A                            loc_1AA1E:				; XREF: Obj86_Index2
0001C87A 4EB9 0000 EFA0             		jsr	SpeedToPos
0001C880 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C886 6400                       		bcc.s	loc_1AA34
0001C888 5368 0028                  		subq.w	#1,$28(a0)
0001C88C 6700                       		beq.s	loc_1AA34
0001C88E 4E75                       		rts	
0001C890                            ; ===========================================================================
0001C890                            
0001C890                            loc_1AA34:
0001C890 2268 0034                  		movea.l	$34(a0),a1
0001C894 5369 0038                  		subq.w	#1,$38(a1)
0001C898 6000 FA0A                  		bra.w	Obj84_Delete
0001C89C                            ; ===========================================================================
0001C89C                            Ani_obj86:
0001C89C                            	include "_anim\obj86.asm"
0001C89C                            ; ---------------------------------------------------------------------------
0001C89C                            ; Animation script - energy ball launcher (FZ)
0001C89C                            ; ---------------------------------------------------------------------------
0001C89C 0000                       		dc.w byte_1AA46-Ani_obj86
0001C89E 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C8A0 0000                       		dc.w byte_1AA50-Ani_obj86
0001C8A2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C8A6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C8AC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C8B2                            		even
0001C8B2                            		even
0001C8B2                            
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2                            Map_obj86:
0001C8B2                            	include "_maps\obj86.asm"
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C8B6 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C8BA 01                         byte_1AA5E:	dc.b 1
0001C8BB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C8C0 01                         byte_1AA64:	dc.b 1
0001C8C1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C8C6 01                         byte_1AA6A:	dc.b 1
0001C8C7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C8CC 01                         byte_1AA70:	dc.b 1
0001C8CD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C8D2                            		even
0001C8D2                            		even
0001C8D2                            
0001C8D2                            Ani_obj86a:
0001C8D2                            	include "_anim\obj86a.asm"
0001C8D2                            ; ---------------------------------------------------------------------------
0001C8D2                            ; Animation script - energy balls (FZ)
0001C8D2                            ; ---------------------------------------------------------------------------
0001C8D2 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C8D4 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C8D6 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C8E5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C8F4 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C8F8 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C902                            		even
0001C902                            		even
0001C902                            
0001C902                            ; ---------------------------------------------------------------------------
0001C902                            ; Sprite mappings - energy balls (FZ)
0001C902                            ; ---------------------------------------------------------------------------
0001C902                            Map_obj86a:
0001C902                            	include "_maps\obj86a.asm"
0001C902                            ; ---------------------------------------------------------------------------
0001C902                            ; Sprite mappings - energy balls (FZ)
0001C902                            ; ---------------------------------------------------------------------------
0001C902 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C906 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C90A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C90E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C912 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C916 0000                       		dc.w byte_1AB20-Map_obj86a
0001C918 02                         byte_1AABC:	dc.b 2
0001C919 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C91E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C923 02                         byte_1AAC7:	dc.b 2
0001C924 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C929 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C92E 02                         byte_1AAD2:	dc.b 2
0001C92F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C934 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C939 02                         byte_1AADD:	dc.b 2
0001C93A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C93F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C944 02                         byte_1AAE8:	dc.b 2
0001C945 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C94A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C94F 02                         byte_1AAF3:	dc.b 2
0001C950 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C955 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C95A 01                         byte_1AAFE:	dc.b 1
0001C95B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C960 01                         byte_1AB04:	dc.b 1
0001C961 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C966 02                         byte_1AB0A:	dc.b 2
0001C967 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C96C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C971 02                         byte_1AB15:	dc.b 2
0001C972 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C977 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C97C 00                         byte_1AB20:	dc.b 0
0001C97E 00                         		even
0001C97E 00                         		even
0001C97E                            
0001C97E                            ; ===========================================================================
0001C97E                            ; ---------------------------------------------------------------------------
0001C97E                            ; Object 3E - prison capsule
0001C97E                            ; ---------------------------------------------------------------------------
0001C97E                            
0001C97E                            Obj3E:					; XREF: Obj_Index
0001C97E 7000                       		moveq	#0,d0
0001C980 1028 0024                  		move.b	$24(a0),d0
0001C984 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C988 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C98C 3028 0008                  		move.w	8(a0),d0
0001C990 0240 FF80                  		andi.w	#$FF80,d0
0001C994 3238 F700                  		move.w	($FFFFF700).w,d1
0001C998 0441 0080                  		subi.w	#$80,d1
0001C99C 0241 FF80                  		andi.w	#$FF80,d1
0001C9A0 9041                       		sub.w	d1,d0
0001C9A2 0C40 0280                  		cmpi.w	#$280,d0
0001C9A6 6200                       		bhi.s	Obj3E_Delete
0001C9A8 4EF9 0000 EFBA             		jmp	DisplaySprite
0001C9AE                            ; ===========================================================================
0001C9AE                            
0001C9AE                            Obj3E_Delete:
0001C9AE 4EF9 0000 EFF6             		jmp	DeleteObject
0001C9B4                            ; ===========================================================================
0001C9B4 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C9B6 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C9B8 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C9BA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C9BC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C9BE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C9C0 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C9C2 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C9C4                            
0001C9C4 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C9C8 040C 0501                  		dc.b 4,	$C, 5, 1
0001C9CC 0610 0403                  		dc.b 6,	$10, 4,	3
0001C9D0 0810 0305                  		dc.b 8,	$10, 3,	5
0001C9D4                            ; ===========================================================================
0001C9D4                            
0001C9D4                            Obj3E_Main:				; XREF: Obj3E_Index
0001C9D4 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C9DC 317C 049D 0002             		move.w	#$49D,2(a0)
0001C9E2 117C 0004 0001             		move.b	#4,1(a0)
0001C9E8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C9EE 7000                       		moveq	#0,d0
0001C9F0 1028 0028                  		move.b	$28(a0),d0
0001C9F4 E548                       		lsl.w	#2,d0
0001C9F6 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C9FA 1159 0024                  		move.b	(a1)+,$24(a0)
0001C9FE 1159 0019                  		move.b	(a1)+,$19(a0)
0001CA02 1159 0018                  		move.b	(a1)+,$18(a0)
0001CA06 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CA0A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CA0E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CA10 117C 0006 0020             		move.b	#6,$20(a0)
0001CA16 117C 0008 0021             		move.b	#8,$21(a0)
0001CA1C                            
0001CA1C                            Obj3E_Not02:
0001CA1C 4E75                       		rts	
0001CA1E                            ; ===========================================================================
0001CA1E                            
0001CA1E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CA1E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CA24 6700                       		beq.s	Obj3E_ChkOpened
0001CA26 323C 002B                  		move.w	#$2B,d1
0001CA2A 343C 0018                  		move.w	#$18,d2
0001CA2E 363C 0018                  		move.w	#$18,d3
0001CA32 3828 0008                  		move.w	8(a0),d4
0001CA36 4EF9 0001 139C             		jmp	SolidObject
0001CA3C                            ; ===========================================================================
0001CA3C                            
0001CA3C                            Obj3E_ChkOpened:
0001CA3C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CA40 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CA42 4228 0025                  		clr.b	$25(a0)
0001CA46 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CA4C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CA52                            
0001CA52                            Obj3E_DoOpen:
0001CA52 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CA5A 323C 0017                  		move.w	#$17,d1
0001CA5E 343C 0008                  		move.w	#8,d2
0001CA62 363C 0008                  		move.w	#8,d3
0001CA66 3828 0008                  		move.w	8(a0),d4
0001CA6A 4EB9 0001 139C             		jsr	SolidObject
0001CA70 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CA76 4EB9 0000 BEA2             		jsr	AnimateSprite
0001CA7C 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CA82 4A28 0025                  		tst.b	$25(a0)
0001CA86 6700                       		beq.s	locret_1AC60
0001CA88 5068 000C                  		addq.w	#8,$C(a0)
0001CA8C 117C 000A 0024             		move.b	#$A,$24(a0)
0001CA92 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CA98 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CA9C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CAA0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CAA6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CAAC 4228 0025                  		clr.b	$25(a0)
0001CAB0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CAB6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CABC                            
0001CABC                            locret_1AC60:
0001CABC 4E75                       		rts	
0001CABE                            ; ===========================================================================
0001CABE                            
0001CABE                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CABE 7007                       		moveq	#7,d0
0001CAC0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CAC4 6600                       		bne.s	loc_1ACA0
0001CAC6 4EB9 0000 F44E             		jsr	SingleObjLoad
0001CACC 6600                       		bne.s	loc_1ACA0
0001CACE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CAD2 3368 0008 0008             		move.w	8(a0),8(a1)
0001CAD8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CADE 4EB9 0000 2854             		jsr	(RandomNumber).l
0001CAE4 7200                       		moveq	#0,d1
0001CAE6 1200                       		move.b	d0,d1
0001CAE8 E409                       		lsr.b	#2,d1
0001CAEA 0441 0020                  		subi.w	#$20,d1
0001CAEE D369 0008                  		add.w	d1,8(a1)
0001CAF2 E048                       		lsr.w	#8,d0
0001CAF4 E608                       		lsr.b	#3,d0
0001CAF6 D169 000C                  		add.w	d0,$C(a1)
0001CAFA                            
0001CAFA                            loc_1ACA0:
0001CAFA 5368 001E                  		subq.w	#1,$1E(a0)
0001CAFE 6700                       		beq.s	Obj3E_MakeAnimal
0001CB00 4E75                       		rts	
0001CB02                            ; ===========================================================================
0001CB02                            
0001CB02                            Obj3E_MakeAnimal:
0001CB02 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CB08 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CB0E 117C 0006 001A             		move.b	#6,$1A(a0)
0001CB14 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CB1A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CB20 7C07                       		moveq	#7,d6
0001CB22 3A3C 009A                  		move.w	#$9A,d5
0001CB26 78E4                       		moveq	#-$1C,d4
0001CB28                            
0001CB28                            Obj3E_Loop:
0001CB28 4EB9 0000 F44E             		jsr	SingleObjLoad
0001CB2E 6600                       		bne.s	locret_1ACF8
0001CB30 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CB34 3368 0008 0008             		move.w	8(a0),8(a1)
0001CB3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CB40 D969 0008                  		add.w	d4,8(a1)
0001CB44 5E44                       		addq.w	#7,d4
0001CB46 3345 0036                  		move.w	d5,$36(a1)
0001CB4A 5145                       		subq.w	#8,d5
0001CB4C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CB50                            
0001CB50                            locret_1ACF8:
0001CB50 4E75                       		rts	
0001CB52                            ; ===========================================================================
0001CB52                            
0001CB52                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CB52 7007                       		moveq	#7,d0
0001CB54 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CB58 6600                       		bne.s	loc_1AD38
0001CB5A 4EB9 0000 F44E             		jsr	SingleObjLoad
0001CB60 6600                       		bne.s	loc_1AD38
0001CB62 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CB66 3368 0008 0008             		move.w	8(a0),8(a1)
0001CB6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CB72 4EB9 0000 2854             		jsr	(RandomNumber).l
0001CB78 0240 001F                  		andi.w	#$1F,d0
0001CB7C 5D40                       		subq.w	#6,d0
0001CB7E 4A41                       		tst.w	d1
0001CB80 6A00                       		bpl.s	loc_1AD2E
0001CB82 4440                       		neg.w	d0
0001CB84                            
0001CB84                            loc_1AD2E:
0001CB84 D169 0008                  		add.w	d0,8(a1)
0001CB88 337C 000C 0036             		move.w	#$C,$36(a1)
0001CB8E                            
0001CB8E                            loc_1AD38:
0001CB8E 5368 001E                  		subq.w	#1,$1E(a0)
0001CB92 6600                       		bne.s	locret_1AD48
0001CB94 5428 0024                  		addq.b	#2,$24(a0)
0001CB98 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CB9E                            
0001CB9E                            locret_1AD48:
0001CB9E 4E75                       		rts	
0001CBA0                            ; ===========================================================================
0001CBA0                            
0001CBA0                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CBA0 703E                       		moveq	#$3E,d0
0001CBA2 7228                       		moveq	#$28,d1
0001CBA4 7440                       		moveq	#$40,d2
0001CBA6 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CBAA                            
0001CBAA                            Obj3E_FindObj28:
0001CBAA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CBAC 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CBAE D2C2                       		adda.w	d2,a1		; next object RAM
0001CBB0 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CBB4                            
0001CBB4 4EB9 0001 0658             		jsr	GotThroughAct
0001CBBA 4EF9 0000 EFF6             		jmp	DeleteObject
0001CBC0                            ; ===========================================================================
0001CBC0                            
0001CBC0                            Obj3E_Obj28Found:
0001CBC0 4E75                       		rts	
0001CBC2                            ; ===========================================================================
0001CBC2                            Ani_obj3E:
0001CBC2                            	include "_anim\obj3E.asm"
0001CBC2                            ; ---------------------------------------------------------------------------
0001CBC2                            ; Animation script - prison capsule
0001CBC2                            ; ---------------------------------------------------------------------------
0001CBC2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CBC4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CBC6 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CBCA                            		even
0001CBCA                            		even
0001CBCA                            
0001CBCA                            ; ---------------------------------------------------------------------------
0001CBCA                            ; Sprite mappings - prison capsule
0001CBCA                            ; ---------------------------------------------------------------------------
0001CBCA                            Map_obj3E:
0001CBCA                            	include "_maps\obj3E.asm"
0001CBCA                            ; ---------------------------------------------------------------------------
0001CBCA                            ; Sprite mappings - prison capsule
0001CBCA                            ; ---------------------------------------------------------------------------
0001CBCA 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CBCE 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CBD2 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CBD6 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CBD8 07                         byte_1AD82:	dc.b 7
0001CBD9 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CBDE E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CBE3 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CBE8 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CBED F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CBF2 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CBF7 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CBFC 01                         byte_1ADA6:	dc.b 1
0001CBFD F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CC02 06                         byte_1ADAC:	dc.b 6
0001CC03 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CC08 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CC0D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CC12 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CC17 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CC1C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CC21 01                         byte_1ADCB:	dc.b 1
0001CC22 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CC27 02                         byte_1ADD1:	dc.b 2
0001CC28 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CC2D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CC32 01                         byte_1ADDC:	dc.b 1
0001CC33 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CC38 00                         byte_1ADE2:	dc.b 0
0001CC3A 00                         		even
0001CC3A 00                         		even
0001CC3A                            
0001CC3A                            ; ---------------------------------------------------------------------------
0001CC3A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CC3A                            ; ---------------------------------------------------------------------------
0001CC3A                            
0001CC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC3A                            
0001CC3A                            
0001CC3A                            TouchResponse:				; XREF: Obj01
0001CC3A 4E71                       		nop	
0001CC3C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CC40 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CC44 5142                       		subq.w	#8,d2
0001CC46 7A00                       		moveq	#0,d5
0001CC48 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CC4C 5705                       		subq.b	#3,d5
0001CC4E 9645                       		sub.w	d5,d3
0001CC50 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CC56 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CC58 0643 000C                  		addi.w	#$C,d3
0001CC5C 7A0A                       		moveq	#$A,d5
0001CC5E                            
0001CC5E                            Touch_NoDuck:
0001CC5E 383C 0010                  		move.w	#$10,d4
0001CC62 DA45                       		add.w	d5,d5
0001CC64 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CC68 3C3C 005F                  		move.w	#$5F,d6
0001CC6C                            
0001CC6C                            Touch_Loop:
0001CC6C 4A29 0001                  		tst.b	1(a1)
0001CC70 6A00                       		bpl.s	Touch_NextObj
0001CC72 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CC76 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CC78                            
0001CC78                            Touch_NextObj:
0001CC78 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CC7C 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CC80                            
0001CC80 7000                       		moveq	#0,d0
0001CC82 4E75                       		rts	
0001CC84                            ; ===========================================================================
0001CC84 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CC86 0C14                       		dc.b   $C, $14
0001CC88 140C                       		dc.b  $14,  $C
0001CC8A 0410                       		dc.b	4, $10
0001CC8C 0C12                       		dc.b   $C, $12
0001CC8E 1010                       		dc.b  $10, $10
0001CC90 0606                       		dc.b	6,   6
0001CC92 180C                       		dc.b  $18,  $C
0001CC94 0C10                       		dc.b   $C, $10
0001CC96 100C                       		dc.b  $10,  $C
0001CC98 0808                       		dc.b	8,   8
0001CC9A 1410                       		dc.b  $14, $10
0001CC9C 1408                       		dc.b  $14,   8
0001CC9E 0E0E                       		dc.b   $E,  $E
0001CCA0 1818                       		dc.b  $18, $18
0001CCA2 2810                       		dc.b  $28, $10
0001CCA4 1018                       		dc.b  $10, $18
0001CCA6 0810                       		dc.b	8, $10
0001CCA8 2070                       		dc.b  $20, $70
0001CCAA 4020                       		dc.b  $40, $20
0001CCAC 8020                       		dc.b  $80, $20
0001CCAE 2020                       		dc.b  $20, $20
0001CCB0 0808                       		dc.b	8,   8
0001CCB2 0404                       		dc.b	4,   4
0001CCB4 2008                       		dc.b  $20,   8
0001CCB6 0C0C                       		dc.b   $C,  $C
0001CCB8 0804                       		dc.b	8,   4
0001CCBA 1804                       		dc.b  $18,   4
0001CCBC 2804                       		dc.b  $28,   4
0001CCBE 0408                       		dc.b	4,   8
0001CCC0 0418                       		dc.b	4, $18
0001CCC2 0428                       		dc.b	4, $28
0001CCC4 0420                       		dc.b	4, $20
0001CCC6 1818                       		dc.b  $18, $18
0001CCC8 0C18                       		dc.b   $C, $18
0001CCCA 4808                       		dc.b  $48,   8
0001CCCC                            ; ===========================================================================
0001CCCC                            
0001CCCC                            Touch_Height:				; XREF: TouchResponse
0001CCCC 0240 003F                  		andi.w	#$3F,d0
0001CCD0 D040                       		add.w	d0,d0
0001CCD2 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CCD6 7200                       		moveq	#0,d1
0001CCD8 121A                       		move.b	(a2)+,d1
0001CCDA 4A28 003A                  		tst.b	biting(a0)
0001CCDE 6700                       		beq.s	@not_biting
0001CCE0 5801                       		addq.b	#4,d1
0001CCE2                            		
0001CCE2                            @not_biting:
0001CCE2 3029 0008                  		move.w	8(a1),d0
0001CCE6 9041                       		sub.w	d1,d0
0001CCE8 9042                       		sub.w	d2,d0
0001CCEA 6400                       		bcc.s	loc_1AE98
0001CCEC D241                       		add.w	d1,d1
0001CCEE D041                       		add.w	d1,d0
0001CCF0 6500                       		bcs.s	Touch_Width
0001CCF2 6000 FF84                  		bra.w	Touch_NextObj
0001CCF6                            ; ===========================================================================
0001CCF6                            
0001CCF6                            loc_1AE98:
0001CCF6 B044                       		cmp.w	d4,d0
0001CCF8 6200 FF7E                  		bhi.w	Touch_NextObj
0001CCFC                            
0001CCFC                            Touch_Width:
0001CCFC 7200                       		moveq	#0,d1
0001CCFE 121A                       		move.b	(a2)+,d1
0001CD00 3029 000C                  		move.w	$C(a1),d0
0001CD04 9041                       		sub.w	d1,d0
0001CD06 9043                       		sub.w	d3,d0
0001CD08 6400                       		bcc.s	loc_1AEB6
0001CD0A D241                       		add.w	d1,d1
0001CD0C D240                       		add.w	d0,d1
0001CD0E 6500                       		bcs.s	Touch_ChkValue
0001CD10 6000 FF66                  		bra.w	Touch_NextObj
0001CD14                            ; ===========================================================================
0001CD14                            
0001CD14                            loc_1AEB6:
0001CD14 B045                       		cmp.w	d5,d0
0001CD16 6200 FF60                  		bhi.w	Touch_NextObj
0001CD1A                            
0001CD1A                            Touch_ChkValue:
0001CD1A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CD1E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CD22 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CD26 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CD2A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CD2E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CD30 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CD34                            
0001CD34                            ; touch	response is $40-$7F
0001CD34                            
0001CD34 1029 0020                  		move.b	$20(a1),d0
0001CD38 0200 003F                  		andi.b	#$3F,d0
0001CD3C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CD40 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CD42 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CD48 6400 0000                  		bcc.w	locret_1AEF2
0001CD4C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CD50                            
0001CD50                            locret_1AEF2:
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            
0001CD52                            Touch_Monitor:
0001CD52 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CD56 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CD58 3028 000C                  		move.w	$C(a0),d0
0001CD5C 0440 0010                  		subi.w	#$10,d0
0001CD60 B069 000C                  		cmp.w	$C(a1),d0
0001CD64 6500                       		bcs.s	locret_1AF2E
0001CD66 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CD6A 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CD70 4A29 0025                  		tst.b	$25(a1)
0001CD74 6600                       		bne.s	locret_1AF2E
0001CD76 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CD7A 4E75                       		rts
0001CD7C                            ; ===========================================================================
0001CD7C                            
0001CD7C                            loc_1AF1E:
0001CD7C 4A28 003A                  		tst.b	biting(a0)
0001CD80 6700 0000                  		beq.w	locret_1AF2E
0001CD84 3029 0008                  		move.w	8(a1),d0
0001CD88 3228 0008                  		move.w	8(a0),d1
0001CD8C 0828 0000 0022             		btst	#0,$22(a0)
0001CD92 6600                       		bne.s	@left
0001CD94 B240                       		cmp.w	d0,d1
0001CD96 6F00                       		ble.s	@do
0001CD98 4E75                       		rts
0001CD9A                            		
0001CD9A                            	@left:
0001CD9A B240                       		cmp.w	d0,d1
0001CD9C 6C00                       		bge.s	@do
0001CD9E 4E75                       		rts
0001CDA0                            		
0001CDA0                            	@do:
0001CDA0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CDA4                            
0001CDA4                            locret_1AF2E:
0001CDA4 4E75                       		rts	
0001CDA6                            ; ===========================================================================
0001CDA6                            
0001CDA6                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CDA6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CDAA 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CDAC 4A28 003A                  		tst.b	biting(a0)
0001CDB0 6700 0000                  		beq.w	Touch_ChkHurt
0001CDB4 3029 0008                  		move.w	8(a1),d0
0001CDB8 3228 0008                  		move.w	8(a0),d1
0001CDBC 0828 0000 0022             		btst	#0,$22(a0)
0001CDC2 6600                       		bne.s	@left
0001CDC4 B240                       		cmp.w	d0,d1
0001CDC6 6F00                       		ble.s	loc_1AF40
0001CDC8 6000 0000                  		bra.w	Touch_ChkHurt
0001CDCC                            		
0001CDCC                            	@left:
0001CDCC B240                       		cmp.w	d0,d1
0001CDCE 6C00                       		bge.s	loc_1AF40
0001CDD0 6000 0000                  		bra.w	Touch_ChkHurt
0001CDD4                            
0001CDD4                            loc_1AF40:
0001CDD4 4A29 0021                  		tst.b	$21(a1)
0001CDD8 6700                       		beq.s	Touch_KillEnemy
0001CDDA 137C 0000 0020             		move.b	#0,$20(a1)
0001CDE0 5329 0021                  		subq.b	#1,$21(a1)
0001CDE4 6600                       		bne.s	locret_1AF68
0001CDE6 08E9 0007 0022             		bset	#7,$22(a1)
0001CDEC                            
0001CDEC                            locret_1AF68:
0001CDEC 4E75                       		rts	
0001CDEE                            ; ===========================================================================
0001CDEE                            
0001CDEE                            Touch_KillEnemy:
0001CDEE 08E9 0007 0022             		bset	#7,$22(a1)
0001CDF4 7000                       		moveq	#0,d0
0001CDF6 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001CDFA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001CDFE 0C40 0006                  		cmpi.w	#6,d0
0001CE02 6500                       		bcs.s	loc_1AF82
0001CE04 7006                       		moveq	#6,d0
0001CE06                            
0001CE06                            loc_1AF82:
0001CE06 3340 003E                  		move.w	d0,$3E(a1)
0001CE0A 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001CE0E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001CE14 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001CE16 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001CE1A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001CE20                            
0001CE20                            loc_1AF9C:
0001CE20 6100 0000                  		bsr.w	AddPoints
0001CE24 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001CE28 137C 0000 0024             		move.b	#0,$24(a1)
0001CE2E 4E75                       		rts	
0001CE30                            ; ===========================================================================
0001CE30 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001CE38                            ; ===========================================================================
0001CE38                            
0001CE38                            loc_1AFDA:				; XREF: Touch_CatKiller
0001CE38 08E9 0007 0022             		bset	#7,$22(a1)
0001CE3E                            
0001CE3E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001CE3E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CE42 6700                       		beq.s	Touch_Hurt	; if not, branch
0001CE44                            
0001CE44                            loc_1AFE6:				; XREF: Touch_Hurt
0001CE44 70FF                       		moveq	#-1,d0
0001CE46 4E75                       		rts	
0001CE48                            ; ===========================================================================
0001CE48                            
0001CE48                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001CE48 4E71                       		nop	
0001CE4A 4A68 0030                  		tst.w	$30(a0)
0001CE4E 66F4                       		bne.s	loc_1AFE6
0001CE50 2449                       		movea.l	a1,a2
0001CE52                            
0001CE52                            ; End of function TouchResponse
0001CE52                            ; continue straight to HurtSonic
0001CE52                            
0001CE52                            ; ---------------------------------------------------------------------------
0001CE52                            ; Hurting Sonic	subroutine
0001CE52                            ; ---------------------------------------------------------------------------
0001CE52                            
0001CE52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE52                            
0001CE52                            
0001CE52                            HurtSonic:
0001CE52 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001CE56 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001CE58 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001CE5C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001CE60 4EB9 0000 F44E             		jsr	SingleObjLoad
0001CE66 6600                       		bne.s	Hurt_Shield
0001CE68 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001CE6C 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE72 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE78                            
0001CE78                            Hurt_Shield:
0001CE78 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001CE7E 117C 0004 0024             		move.b	#4,$24(a0)
0001CE84 6100 8560                  		bsr.w	Sonic_ResetOnFloor
0001CE88 08E8 0001 0022             		bset	#1,$22(a0)
0001CE8E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001CE94 317C FE00 0010             		move.w	#-$200,$10(a0)
0001CE9A 0828 0006 0022             		btst	#6,$22(a0)
0001CEA0 6700                       		beq.s	Hurt_Reverse
0001CEA2 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CEA8 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CEAE                            
0001CEAE                            Hurt_Reverse:
0001CEAE 3028 0008                  		move.w	8(a0),d0
0001CEB2 B06A 0008                  		cmp.w	8(a2),d0
0001CEB6 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CEB8 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CEBC                            
0001CEBC                            Hurt_ChkSpikes:
0001CEBC 317C 0000 0014             		move.w	#0,$14(a0)
0001CEC2 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CEC8 317C 0078 0030             		move.w	#$78,$30(a0)
0001CECE 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CED2 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CED6 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CED8 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CEDC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CEDE 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CEE2                            
0001CEE2                            Hurt_Sound:
0001CEE2 4EB9 0000 1018             		jsr	(PlaySound_Special).l
0001CEE8 70FF                       		moveq	#-1,d0
0001CEEA 4E75                       		rts	
0001CEEC                            ; ===========================================================================
0001CEEC                            
0001CEEC                            Hurt_NoRings:
0001CEEC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CEF0 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001CEF4                            ; End of function HurtSonic
0001CEF4                            
0001CEF4                            ; ---------------------------------------------------------------------------
0001CEF4                            ; Subroutine to	kill Sonic
0001CEF4                            ; ---------------------------------------------------------------------------
0001CEF4                            
0001CEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEF4                            
0001CEF4                            
0001CEF4                            KillSonic:
0001CEF4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CEF8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CEFA 31FC 0000 FE2C             		move.w	#0,($FFFFFE2C).w ; remove shield and invincibility
0001CF00 117C 0006 0024             		move.b	#6,$24(a0)
0001CF06 6100 84DE                  		bsr.w	Sonic_ResetOnFloor
0001CF0A 08E8 0001 0022             		bset	#1,$22(a0)
0001CF10 317C F900 0012             		move.w	#-$700,$12(a0)
0001CF16 317C 0000 0010             		move.w	#0,$10(a0)
0001CF1C 317C 0000 0014             		move.w	#0,$14(a0)
0001CF22 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CF28 117C 0018 001C             		move.b	#$18,$1C(a0)
0001CF2E 08E8 0007 0002             		bset	#7,2(a0)
0001CF34 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CF38 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CF3C 6600                       		bne.s	Kill_Sound
0001CF3E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CF42                            
0001CF42                            Kill_Sound:
0001CF42 4EB9 0000 1018             		jsr	(PlaySound_Special).l
0001CF48                            
0001CF48                            Kill_NoDeath:
0001CF48 70FF                       		moveq	#-1,d0
0001CF4A 4E75                       		rts	
0001CF4C                            ; End of function KillSonic
0001CF4C                            
0001CF4C                            
0001CF4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF4C                            
0001CF4C                            
0001CF4C                            Touch_Special:				; XREF: Touch_ChkValue
0001CF4C 1229 0020                  		move.b	$20(a1),d1
0001CF50 0201 003F                  		andi.b	#$3F,d1
0001CF54 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CF58 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CF5A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CF5E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CF60 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CF64 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CF66 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CF6A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CF6C 4E75                       		rts	
0001CF6E                            ; ===========================================================================
0001CF6E                            
0001CF6E                            Touch_CatKiller:			; XREF: Touch_Special
0001CF6E 6000 FEC8                  		bra.w	loc_1AFDA
0001CF72                            ; ===========================================================================
0001CF72                            
0001CF72                            Touch_Yadrin:				; XREF: Touch_Special
0001CF72 9A40                       		sub.w	d0,d5
0001CF74 0C45 0008                  		cmpi.w	#8,d5
0001CF78 6400                       		bcc.s	loc_1B144
0001CF7A 3029 0008                  		move.w	8(a1),d0
0001CF7E 5940                       		subq.w	#4,d0
0001CF80 0829 0000 0022             		btst	#0,$22(a1)
0001CF86 6700                       		beq.s	loc_1B130
0001CF88 0440 0010                  		subi.w	#$10,d0
0001CF8C                            
0001CF8C                            loc_1B130:
0001CF8C 9042                       		sub.w	d2,d0
0001CF8E 6400                       		bcc.s	loc_1B13C
0001CF90 0640 0018                  		addi.w	#$18,d0
0001CF94 6500                       		bcs.s	loc_1B140
0001CF96 6000                       		bra.s	loc_1B144
0001CF98                            ; ===========================================================================
0001CF98                            
0001CF98                            loc_1B13C:
0001CF98 B044                       		cmp.w	d4,d0
0001CF9A 6200                       		bhi.s	loc_1B144
0001CF9C                            
0001CF9C                            loc_1B140:
0001CF9C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001CFA0                            ; ===========================================================================
0001CFA0                            
0001CFA0                            loc_1B144:
0001CFA0 6000 FE04                  		bra.w	Touch_Enemy
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            Touch_D7orE1:				; XREF: Touch_Special
0001CFA4 5229 0021                  		addq.b	#1,$21(a1)
0001CFA8 4E75                       		rts	
0001CFAA                            ; End of function Touch_Special
0001CFAA                            
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA                            ; Subroutine to	show the special stage layout
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA                            
0001CFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFAA                            
0001CFAA                            
0001CFAA                            SS_ShowLayout:				; XREF: SpecialStage
0001CFAA 6100 0000                  		bsr.w	SS_AniWallsRings
0001CFAE 6100 0000                  		bsr.w	SS_AniItems
0001CFB2 3F05                       		move.w	d5,-(sp)
0001CFB4 43F8 8000                  		lea	($FFFF8000).w,a1
0001CFB8 1038 F780                  		move.b	($FFFFF780).w,d0
0001CFBC 0200 00FC                  		andi.b	#$FC,d0
0001CFC0 4EB9 0000 287A             		jsr	(CalcSine).l
0001CFC6 3800                       		move.w	d0,d4
0001CFC8 3A01                       		move.w	d1,d5
0001CFCA C9FC 0018                  		muls.w	#$18,d4
0001CFCE CBFC 0018                  		muls.w	#$18,d5
0001CFD2 7400                       		moveq	#0,d2
0001CFD4 3438 F700                  		move.w	($FFFFF700).w,d2
0001CFD8 84FC 0018                  		divu.w	#$18,d2
0001CFDC 4842                       		swap	d2
0001CFDE 4442                       		neg.w	d2
0001CFE0 0642 FF4C                  		addi.w	#-$B4,d2
0001CFE4 7600                       		moveq	#0,d3
0001CFE6 3638 F704                  		move.w	($FFFFF704).w,d3
0001CFEA 86FC 0018                  		divu.w	#$18,d3
0001CFEE 4843                       		swap	d3
0001CFF0 4443                       		neg.w	d3
0001CFF2 0643 FF4C                  		addi.w	#-$B4,d3
0001CFF6 3E3C 000F                  		move.w	#$F,d7
0001CFFA                            
0001CFFA                            loc_1B19E:
0001CFFA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CFFE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D002 4440                       		neg.w	d0
0001D004 C3C2                       		muls.w	d2,d1
0001D006 C1C3                       		muls.w	d3,d0
0001D008 2C00                       		move.l	d0,d6
0001D00A DC81                       		add.l	d1,d6
0001D00C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D010 C1C2                       		muls.w	d2,d0
0001D012 C3C3                       		muls.w	d3,d1
0001D014 D280                       		add.l	d0,d1
0001D016 2406                       		move.l	d6,d2
0001D018 3C3C 000F                  		move.w	#$F,d6
0001D01C                            
0001D01C                            loc_1B1C0:
0001D01C 2002                       		move.l	d2,d0
0001D01E E080                       		asr.l	#8,d0
0001D020 32C0                       		move.w	d0,(a1)+
0001D022 2001                       		move.l	d1,d0
0001D024 E080                       		asr.l	#8,d0
0001D026 32C0                       		move.w	d0,(a1)+
0001D028 D485                       		add.l	d5,d2
0001D02A D284                       		add.l	d4,d1
0001D02C 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D030                            
0001D030 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D034 0643 0018                  		addi.w	#$18,d3
0001D038 51CF FFC0                  		dbf	d7,loc_1B19E
0001D03C                            
0001D03C 3A1F                       		move.w	(sp)+,d5
0001D03E 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D044 7000                       		moveq	#0,d0
0001D046 3038 F704                  		move.w	($FFFFF704).w,d0
0001D04A 80FC 0018                  		divu.w	#$18,d0
0001D04E C0FC 0080                  		mulu.w	#$80,d0
0001D052 D1C0                       		adda.l	d0,a0
0001D054 7000                       		moveq	#0,d0
0001D056 3038 F700                  		move.w	($FFFFF700).w,d0
0001D05A 80FC 0018                  		divu.w	#$18,d0
0001D05E D0C0                       		adda.w	d0,a0
0001D060 49F8 8000                  		lea	($FFFF8000).w,a4
0001D064 3E3C 000F                  		move.w	#$F,d7
0001D068                            
0001D068                            loc_1B20C:
0001D068 3C3C 000F                  		move.w	#$F,d6
0001D06C                            
0001D06C                            loc_1B210:
0001D06C 7000                       		moveq	#0,d0
0001D06E 1018                       		move.b	(a0)+,d0
0001D070 6700                       		beq.s	loc_1B268
0001D072 0C00 004E                  		cmpi.b	#$4E,d0
0001D076 6200                       		bhi.s	loc_1B268
0001D078 3614                       		move.w	(a4),d3
0001D07A 0643 0120                  		addi.w	#$120,d3
0001D07E 0C43 0070                  		cmpi.w	#$70,d3
0001D082 6500                       		bcs.s	loc_1B268
0001D084 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D088 6400                       		bcc.s	loc_1B268
0001D08A 342C 0002                  		move.w	2(a4),d2
0001D08E 0642 00F0                  		addi.w	#$F0,d2
0001D092 0C42 0070                  		cmpi.w	#$70,d2
0001D096 6500                       		bcs.s	loc_1B268
0001D098 0C42 0170                  		cmpi.w	#$170,d2
0001D09C 6400                       		bcc.s	loc_1B268
0001D09E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D0A4 E748                       		lsl.w	#3,d0
0001D0A6 4BF5 0000                  		lea	(a5,d0.w),a5
0001D0AA 225D                       		movea.l	(a5)+,a1
0001D0AC 321D                       		move.w	(a5)+,d1
0001D0AE D241                       		add.w	d1,d1
0001D0B0 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D0B4 365D                       		movea.w	(a5)+,a3
0001D0B6 7200                       		moveq	#0,d1
0001D0B8 1219                       		move.b	(a1)+,d1
0001D0BA 5301                       		subq.b	#1,d1
0001D0BC 6B00                       		bmi.s	loc_1B268
0001D0BE 4EB9 0000 F118             		jsr	sub_D762
0001D0C4                            
0001D0C4                            loc_1B268:
0001D0C4 584C                       		addq.w	#4,a4
0001D0C6 51CE FFA4                  		dbf	d6,loc_1B210
0001D0CA                            
0001D0CA 41E8 0070                  		lea	$70(a0),a0
0001D0CE 51CF FF98                  		dbf	d7,loc_1B20C
0001D0D2                            
0001D0D2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D0D6 0C05 0050                  		cmpi.b	#$50,d5
0001D0DA 6700                       		beq.s	loc_1B288
0001D0DC 24BC 0000 0000             		move.l	#0,(a2)
0001D0E2 4E75                       		rts	
0001D0E4                            ; ===========================================================================
0001D0E4                            
0001D0E4                            loc_1B288:
0001D0E4 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D0EA 4E75                       		rts	
0001D0EC                            ; End of function SS_ShowLayout
0001D0EC                            
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            ; Subroutine to	animate	walls and rings	in the special stage
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            
0001D0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0EC                            
0001D0EC                            
0001D0EC                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D0EC 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D0F2 7000                       		moveq	#0,d0
0001D0F4 1038 F780                  		move.b	($FFFFF780).w,d0
0001D0F8 E408                       		lsr.b	#2,d0
0001D0FA 0240 000F                  		andi.w	#$F,d0
0001D0FE 7223                       		moveq	#$23,d1
0001D100                            
0001D100                            loc_1B2A4:
0001D100 3280                       		move.w	d0,(a1)
0001D102 5049                       		addq.w	#8,a1
0001D104 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D108                            
0001D108 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D10E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D112 6A00                       		bpl.s	loc_1B2C8
0001D114 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D11A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D11E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D124                            
0001D124                            loc_1B2C8:
0001D124 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D12A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D12E 6A00                       		bpl.s	loc_1B2E4
0001D130 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D136 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D13A 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D140                            
0001D140                            loc_1B2E4:
0001D140 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D144 1340 0138                  		move.b	d0,$138(a1)
0001D148 1340 0160                  		move.b	d0,$160(a1)
0001D14C 1340 0148                  		move.b	d0,$148(a1)
0001D150 1340 0150                  		move.b	d0,$150(a1)
0001D154 1340 01D8                  		move.b	d0,$1D8(a1)
0001D158 1340 01E0                  		move.b	d0,$1E0(a1)
0001D15C 1340 01E8                  		move.b	d0,$1E8(a1)
0001D160 1340 01F0                  		move.b	d0,$1F0(a1)
0001D164 1340 01F8                  		move.b	d0,$1F8(a1)
0001D168 1340 0200                  		move.b	d0,$200(a1)
0001D16C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D170 6A00                       		bpl.s	loc_1B326
0001D172 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D178 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D17C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D182                            
0001D182                            loc_1B326:
0001D182 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D186 1340 0168                  		move.b	d0,$168(a1)
0001D18A 1340 0170                  		move.b	d0,$170(a1)
0001D18E 1340 0178                  		move.b	d0,$178(a1)
0001D192 1340 0180                  		move.b	d0,$180(a1)
0001D196 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D19A 6A00                       		bpl.s	loc_1B350
0001D19C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D1A2 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D1A6 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D1AC                            
0001D1AC                            loc_1B350:
0001D1AC 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D1B2 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D1B8 7000                       		moveq	#0,d0
0001D1BA 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D1BE D040                       		add.w	d0,d0
0001D1C0 41F0 0000                  		lea	(a0,d0.w),a0
0001D1C4 3290                       		move.w	(a0),(a1)
0001D1C6 3368 0002 0008             		move.w	2(a0),8(a1)
0001D1CC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D1D2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D1D8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D1DE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D1E4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D1EA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D1F0 D0FC 0020                  		adda.w	#$20,a0
0001D1F4 D2FC 0048                  		adda.w	#$48,a1
0001D1F8 3290                       		move.w	(a0),(a1)
0001D1FA 3368 0002 0008             		move.w	2(a0),8(a1)
0001D200 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D206 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D20C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D212 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D218 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D21E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D224 D0FC 0020                  		adda.w	#$20,a0
0001D228 D2FC 0048                  		adda.w	#$48,a1
0001D22C 3290                       		move.w	(a0),(a1)
0001D22E 3368 0002 0008             		move.w	2(a0),8(a1)
0001D234 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D23A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D240 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D246 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D24C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D252 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D258 D0FC 0020                  		adda.w	#$20,a0
0001D25C D2FC 0048                  		adda.w	#$48,a1
0001D260 3290                       		move.w	(a0),(a1)
0001D262 3368 0002 0008             		move.w	2(a0),8(a1)
0001D268 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D26E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D274 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D27A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D280 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D286 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D28C D0FC 0020                  		adda.w	#$20,a0
0001D290 D2FC 0048                  		adda.w	#$48,a1
0001D294 4E75                       		rts	
0001D296                            ; End of function SS_AniWallsRings
0001D296                            
0001D296                            ; ===========================================================================
0001D296 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D2A6 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D2B6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D2C6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D2D6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D2E6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D2F6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D306 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D316                            ; ---------------------------------------------------------------------------
0001D316                            ; Subroutine to	remove items when you collect them in the special stage
0001D316                            ; ---------------------------------------------------------------------------
0001D316                            
0001D316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D316                            
0001D316                            
0001D316                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D316 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D31C 303C 001F                  		move.w	#$1F,d0
0001D320                            
0001D320                            loc_1B4C4:
0001D320 4A12                       		tst.b	(a2)
0001D322 6700                       		beq.s	locret_1B4CE
0001D324 504A                       		addq.w	#8,a2
0001D326 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D32A                            
0001D32A                            locret_1B4CE:
0001D32A 4E75                       		rts	
0001D32C                            ; End of function SS_RemoveCollectedItem
0001D32C                            
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            ; Subroutine to	animate	special	stage items when you touch them
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            
0001D32C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D32C                            
0001D32C                            
0001D32C                            SS_AniItems:				; XREF: SS_ShowLayout
0001D32C 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D332 3E3C 001F                  		move.w	#$1F,d7
0001D336                            
0001D336                            loc_1B4DA:
0001D336 7000                       		moveq	#0,d0
0001D338 1010                       		move.b	(a0),d0
0001D33A 6700                       		beq.s	loc_1B4E8
0001D33C E548                       		lsl.w	#2,d0
0001D33E 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D342 4E91                       		jsr	(a1)
0001D344                            
0001D344                            loc_1B4E8:
0001D344 5048                       		addq.w	#8,a0
0001D346                            
0001D346                            loc_1B4EA:
0001D346 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D34A                            
0001D34A 4E75                       		rts	
0001D34C                            ; End of function SS_AniItems
0001D34C                            
0001D34C                            ; ===========================================================================
0001D34C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D350 0000 0000                  		dc.l SS_AniBumper
0001D354 0000 0000                  		dc.l SS_Ani1Up
0001D358 0000 0000                  		dc.l SS_AniReverse
0001D35C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D360 0000 0000                  		dc.l SS_AniGlassBlock
0001D364                            ; ===========================================================================
0001D364                            
0001D364                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D364 5328 0002                  		subq.b	#1,2(a0)
0001D368 6A00                       		bpl.s	locret_1B530
0001D36A 117C 0005 0002             		move.b	#5,2(a0)
0001D370 7000                       		moveq	#0,d0
0001D372 1028 0003                  		move.b	3(a0),d0
0001D376 5228 0003                  		addq.b	#1,3(a0)
0001D37A 2268 0004                  		movea.l	4(a0),a1
0001D37E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D382 1280                       		move.b	d0,(a1)
0001D384 6600                       		bne.s	locret_1B530
0001D386 4290                       		clr.l	(a0)
0001D388 42A8 0004                  		clr.l	4(a0)
0001D38C                            
0001D38C                            locret_1B530:
0001D38C 4E75                       		rts	
0001D38E                            ; ===========================================================================
0001D38E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D394                            ; ===========================================================================
0001D394                            
0001D394                            SS_AniBumper:				; XREF: SS_AniIndex
0001D394 5328 0002                  		subq.b	#1,2(a0)
0001D398 6A00                       		bpl.s	locret_1B566
0001D39A 117C 0007 0002             		move.b	#7,2(a0)
0001D3A0 7000                       		moveq	#0,d0
0001D3A2 1028 0003                  		move.b	3(a0),d0
0001D3A6 5228 0003                  		addq.b	#1,3(a0)
0001D3AA 2268 0004                  		movea.l	4(a0),a1
0001D3AE 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D3B2 6600                       		bne.s	loc_1B564
0001D3B4 4290                       		clr.l	(a0)
0001D3B6 42A8 0004                  		clr.l	4(a0)
0001D3BA 12BC 0025                  		move.b	#$25,(a1)
0001D3BE 4E75                       		rts	
0001D3C0                            ; ===========================================================================
0001D3C0                            
0001D3C0                            loc_1B564:
0001D3C0 1280                       		move.b	d0,(a1)
0001D3C2                            
0001D3C2                            locret_1B566:
0001D3C2 4E75                       		rts	
0001D3C4                            ; ===========================================================================
0001D3C4 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D3CA                            ; ===========================================================================
0001D3CA                            
0001D3CA                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D3CA 5328 0002                  		subq.b	#1,2(a0)
0001D3CE 6A00                       		bpl.s	locret_1B596
0001D3D0 117C 0005 0002             		move.b	#5,2(a0)
0001D3D6 7000                       		moveq	#0,d0
0001D3D8 1028 0003                  		move.b	3(a0),d0
0001D3DC 5228 0003                  		addq.b	#1,3(a0)
0001D3E0 2268 0004                  		movea.l	4(a0),a1
0001D3E4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D3E8 1280                       		move.b	d0,(a1)
0001D3EA 6600                       		bne.s	locret_1B596
0001D3EC 4290                       		clr.l	(a0)
0001D3EE 42A8 0004                  		clr.l	4(a0)
0001D3F2                            
0001D3F2                            locret_1B596:
0001D3F2 4E75                       		rts	
0001D3F4                            ; ===========================================================================
0001D3F4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D3FA                            ; ===========================================================================
0001D3FA                            
0001D3FA                            SS_AniReverse:				; XREF: SS_AniIndex
0001D3FA 5328 0002                  		subq.b	#1,2(a0)
0001D3FE 6A00                       		bpl.s	locret_1B5CC
0001D400 117C 0007 0002             		move.b	#7,2(a0)
0001D406 7000                       		moveq	#0,d0
0001D408 1028 0003                  		move.b	3(a0),d0
0001D40C 5228 0003                  		addq.b	#1,3(a0)
0001D410 2268 0004                  		movea.l	4(a0),a1
0001D414 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D418 6600                       		bne.s	loc_1B5CA
0001D41A 4290                       		clr.l	(a0)
0001D41C 42A8 0004                  		clr.l	4(a0)
0001D420 12BC 002B                  		move.b	#$2B,(a1)
0001D424 4E75                       		rts	
0001D426                            ; ===========================================================================
0001D426                            
0001D426                            loc_1B5CA:
0001D426 1280                       		move.b	d0,(a1)
0001D428                            
0001D428                            locret_1B5CC:
0001D428 4E75                       		rts	
0001D42A                            ; ===========================================================================
0001D42A 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D430                            ; ===========================================================================
0001D430                            
0001D430                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D430 5328 0002                  		subq.b	#1,2(a0)
0001D434 6A00                       		bpl.s	locret_1B60C
0001D436 117C 0005 0002             		move.b	#5,2(a0)
0001D43C 7000                       		moveq	#0,d0
0001D43E 1028 0003                  		move.b	3(a0),d0
0001D442 5228 0003                  		addq.b	#1,3(a0)
0001D446 2268 0004                  		movea.l	4(a0),a1
0001D44A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D44E 1280                       		move.b	d0,(a1)
0001D450 6600                       		bne.s	locret_1B60C
0001D452 4290                       		clr.l	(a0)
0001D454 42A8 0004                  		clr.l	4(a0)
0001D458 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D45E 303C 00A8                  		move.w	#$A8,d0
0001D462 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D468                            
0001D468                            locret_1B60C:
0001D468 4E75                       		rts	
0001D46A                            ; ===========================================================================
0001D46A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D470                            ; ===========================================================================
0001D470                            
0001D470                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D470 5328 0002                  		subq.b	#1,2(a0)
0001D474 6A00                       		bpl.s	locret_1B640
0001D476 117C 0001 0002             		move.b	#1,2(a0)
0001D47C 7000                       		moveq	#0,d0
0001D47E 1028 0003                  		move.b	3(a0),d0
0001D482 5228 0003                  		addq.b	#1,3(a0)
0001D486 2268 0004                  		movea.l	4(a0),a1
0001D48A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D48E 1280                       		move.b	d0,(a1)
0001D490 6600                       		bne.s	locret_1B640
0001D492 12A8 0004                  		move.b	4(a0),(a1)
0001D496 4290                       		clr.l	(a0)
0001D498 42A8 0004                  		clr.l	4(a0)
0001D49C                            
0001D49C                            locret_1B640:
0001D49C 4E75                       		rts	
0001D49E                            ; ===========================================================================
0001D49E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            ; Special stage	layout pointers
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            SS_LayoutIndex:
0001D4A8                            	include "_inc\Special stage layout pointers.asm"
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            ; Special stage	layout pointers
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8 0000 0000                  	dc.l SS_1
0001D4AC 0000 0000                  	dc.l SS_2
0001D4B0 0000 0000                  	dc.l SS_3
0001D4B4 0000 0000                  	dc.l SS_4
0001D4B8 0000 0000                  	dc.l SS_5
0001D4BC 0000 0000                  	dc.l SS_6
0001D4C0                            	even
0001D4C0                            	even
0001D4C0                            
0001D4C0                            ; ---------------------------------------------------------------------------
0001D4C0                            ; Special stage	start locations
0001D4C0                            ; ---------------------------------------------------------------------------
0001D4C0                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D4D8                            		even
0001D4D8                            
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8                            ; Subroutine to	load special stage layout
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8                            
0001D4D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4D8                            
0001D4D8                            
0001D4D8                            SS_Load:				; XREF: SpecialStage
0001D4D8 7000                       		moveq	#0,d0
0001D4DA 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D4DE 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D4E2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D4E8 6500                       		bcs.s	SS_ChkEmldNum
0001D4EA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D4F0                            
0001D4F0                            SS_ChkEmldNum:
0001D4F0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D4F6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D4F8 7200                       		moveq	#0,d1
0001D4FA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D4FE 5301                       		subq.b	#1,d1
0001D500 6500                       		bcs.s	SS_LoadData
0001D502 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D506                            
0001D506                            SS_ChkEmldLoop:	
0001D506 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D50A 6600                       		bne.s	SS_ChkEmldRepeat
0001D50C 60CA                       		bra.s	SS_Load
0001D50E                            ; ===========================================================================
0001D50E                            
0001D50E                            SS_ChkEmldRepeat:
0001D50E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D512                            
0001D512                            SS_LoadData:
0001D512 E548                       		lsl.w	#2,d0
0001D514 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D518 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D51C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D520 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D524 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D52A 303C 0000                  		move.w	#0,d0
0001D52E 4EB9 0000 146E             		jsr	(EniDec).l
0001D534 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D53A 303C 0FFF                  		move.w	#$FFF,d0
0001D53E                            
0001D53E                            SS_ClrRAM3:
0001D53E 4299                       		clr.l	(a1)+
0001D540 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D544                            
0001D544 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D54A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D550 723F                       		moveq	#$3F,d1
0001D552                            
0001D552                            loc_1B6F6:
0001D552 743F                       		moveq	#$3F,d2
0001D554                            
0001D554                            loc_1B6F8:
0001D554 12D8                       		move.b	(a0)+,(a1)+
0001D556 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D55A                            
0001D55A 43E9 0040                  		lea	$40(a1),a1
0001D55E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D562                            
0001D562 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D568 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D56E 724D                       		moveq	#$4D,d1
0001D570                            
0001D570                            loc_1B714:
0001D570 22D8                       		move.l	(a0)+,(a1)+
0001D572 32FC 0000                  		move.w	#0,(a1)+
0001D576 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D57C 32D8                       		move.w	(a0)+,(a1)+
0001D57E 51C9 FFF0                  		dbf	d1,loc_1B714
0001D582                            
0001D582 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D588 323C 003F                  		move.w	#$3F,d1
0001D58C                            
0001D58C                            loc_1B730:
0001D58C                            
0001D58C 4299                       		clr.l	(a1)+
0001D58E 51C9 FFFC                  		dbf	d1,loc_1B730
0001D592                            
0001D592 4E75                       		rts	
0001D594                            ; End of function SS_Load
0001D594                            
0001D594                            ; ===========================================================================
0001D594                            ; ---------------------------------------------------------------------------
0001D594                            ; Special stage	mappings and VRAM pointers
0001D594                            ; ---------------------------------------------------------------------------
0001D594                            SS_MapIndex:
0001D594                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D594                            ; ---------------------------------------------------------------------------
0001D594                            ; Special stage	mappings and VRAM pointers
0001D594                            ; ---------------------------------------------------------------------------
0001D594 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D598 0142                       	dc.w $142		; VRAM setting
0001D59A 0000 0000                  	dc.l Map_SSWalls
0001D59E 0142                       	dc.w $142
0001D5A0 0000 0000                  	dc.l Map_SSWalls
0001D5A4 0142                       	dc.w $142
0001D5A6 0000 0000                  	dc.l Map_SSWalls
0001D5AA 0142                       	dc.w $142
0001D5AC 0000 0000                  	dc.l Map_SSWalls
0001D5B0 0142                       	dc.w $142
0001D5B2 0000 0000                  	dc.l Map_SSWalls
0001D5B6 0142                       	dc.w $142
0001D5B8 0000 0000                  	dc.l Map_SSWalls
0001D5BC 0142                       	dc.w $142
0001D5BE 0000 0000                  	dc.l Map_SSWalls
0001D5C2 0142                       	dc.w $142
0001D5C4 0000 0000                  	dc.l Map_SSWalls
0001D5C8 0142                       	dc.w $142
0001D5CA 0000 0000                  	dc.l Map_SSWalls
0001D5CE 2142                       	dc.w $2142
0001D5D0 0000 0000                  	dc.l Map_SSWalls
0001D5D4 2142                       	dc.w $2142
0001D5D6 0000 0000                  	dc.l Map_SSWalls
0001D5DA 2142                       	dc.w $2142
0001D5DC 0000 0000                  	dc.l Map_SSWalls
0001D5E0 2142                       	dc.w $2142
0001D5E2 0000 0000                  	dc.l Map_SSWalls
0001D5E6 2142                       	dc.w $2142
0001D5E8 0000 0000                  	dc.l Map_SSWalls
0001D5EC 2142                       	dc.w $2142
0001D5EE 0000 0000                  	dc.l Map_SSWalls
0001D5F2 2142                       	dc.w $2142
0001D5F4 0000 0000                  	dc.l Map_SSWalls
0001D5F8 2142                       	dc.w $2142
0001D5FA 0000 0000                  	dc.l Map_SSWalls
0001D5FE 2142                       	dc.w $2142
0001D600 0000 0000                  	dc.l Map_SSWalls
0001D604 4142                       	dc.w $4142
0001D606 0000 0000                  	dc.l Map_SSWalls
0001D60A 4142                       	dc.w $4142
0001D60C 0000 0000                  	dc.l Map_SSWalls
0001D610 4142                       	dc.w $4142
0001D612 0000 0000                  	dc.l Map_SSWalls
0001D616 4142                       	dc.w $4142
0001D618 0000 0000                  	dc.l Map_SSWalls
0001D61C 4142                       	dc.w $4142
0001D61E 0000 0000                  	dc.l Map_SSWalls
0001D622 4142                       	dc.w $4142
0001D624 0000 0000                  	dc.l Map_SSWalls
0001D628 4142                       	dc.w $4142
0001D62A 0000 0000                  	dc.l Map_SSWalls
0001D62E 4142                       	dc.w $4142
0001D630 0000 0000                  	dc.l Map_SSWalls
0001D634 4142                       	dc.w $4142
0001D636 0000 0000                  	dc.l Map_SSWalls
0001D63A 6142                       	dc.w $6142
0001D63C 0000 0000                  	dc.l Map_SSWalls
0001D640 6142                       	dc.w $6142
0001D642 0000 0000                  	dc.l Map_SSWalls
0001D646 6142                       	dc.w $6142
0001D648 0000 0000                  	dc.l Map_SSWalls
0001D64C 6142                       	dc.w $6142
0001D64E 0000 0000                  	dc.l Map_SSWalls
0001D652 6142                       	dc.w $6142
0001D654 0000 0000                  	dc.l Map_SSWalls
0001D658 6142                       	dc.w $6142
0001D65A 0000 0000                  	dc.l Map_SSWalls
0001D65E 6142                       	dc.w $6142
0001D660 0000 0000                  	dc.l Map_SSWalls
0001D664 6142                       	dc.w $6142
0001D666 0000 0000                  	dc.l Map_SSWalls
0001D66A 6142                       	dc.w $6142
0001D66C 0001 04D0                  	dc.l Map_obj47
0001D670 023B                       	dc.w $23B
0001D672 0000 0000                  	dc.l Map_SS_R
0001D676 0570                       	dc.w $570
0001D678 0000 0000                  	dc.l Map_SS_R
0001D67C 0251                       	dc.w $251
0001D67E 0000 0000                  	dc.l Map_SS_R
0001D682 0370                       	dc.w $370
0001D684 0000 0000                  	dc.l Map_SS_Up
0001D688 0263                       	dc.w $263
0001D68A 0000 0000                  	dc.l Map_SS_Down
0001D68E 0263                       	dc.w $263
0001D690 0000 0000                  	dc.l Map_SS_R
0001D694 22F0                       	dc.w $22F0
0001D696 0000 0000                  	dc.l Map_SS_Glass
0001D69A 0470                       	dc.w $470
0001D69C 0000 0000                  	dc.l Map_SS_Glass
0001D6A0 05F0                       	dc.w $5F0
0001D6A2 0000 0000                  	dc.l Map_SS_Glass
0001D6A6 65F0                       	dc.w $65F0
0001D6A8 0000 0000                  	dc.l Map_SS_Glass
0001D6AC 25F0                       	dc.w $25F0
0001D6AE 0000 0000                  	dc.l Map_SS_Glass
0001D6B2 45F0                       	dc.w $45F0
0001D6B4 0000 0000                  	dc.l Map_SS_R
0001D6B8 02F0                       	dc.w $2F0
0001D6BA 0101 04D0                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D6BE 023B                       	dc.w $23B
0001D6C0 0201 04D0                  	dc.l Map_obj47+$2000000
0001D6C4 023B                       	dc.w $23B
0001D6C6 0000 0000                  	dc.l Map_SS_R
0001D6CA 0797                       	dc.w $797
0001D6CC 0000 0000                  	dc.l Map_SS_R
0001D6D0 07A0                       	dc.w $7A0
0001D6D2 0000 0000                  	dc.l Map_SS_R
0001D6D6 07A9                       	dc.w $7A9
0001D6D8 0000 0000                  	dc.l Map_SS_R
0001D6DC 0797                       	dc.w $797
0001D6DE 0000 0000                  	dc.l Map_SS_R
0001D6E2 07A0                       	dc.w $7A0
0001D6E4 0000 0000                  	dc.l Map_SS_R
0001D6E8 07A9                       	dc.w $7A9
0001D6EA 0000 B718                  	dc.l Map_obj25
0001D6EE 27B2                       	dc.w $27B2
0001D6F0 0000 0000                  	dc.l Map_SS_Chaos3
0001D6F4 0770                       	dc.w $770
0001D6F6 0000 0000                  	dc.l Map_SS_Chaos3
0001D6FA 2770                       	dc.w $2770
0001D6FC 0000 0000                  	dc.l Map_SS_Chaos3
0001D700 4770                       	dc.w $4770
0001D702 0000 0000                  	dc.l Map_SS_Chaos3
0001D706 6770                       	dc.w $6770
0001D708 0000 0000                  	dc.l Map_SS_Chaos1
0001D70C 0770                       	dc.w $770
0001D70E 0000 0000                  	dc.l Map_SS_Chaos2
0001D712 0770                       	dc.w $770
0001D714 0000 0000                  	dc.l Map_SS_R
0001D718 04F0                       	dc.w $4F0
0001D71A 0400 B718                  	dc.l Map_obj25+$4000000
0001D71E 27B2                       	dc.w $27B2
0001D720 0500 B718                  	dc.l Map_obj25+$5000000
0001D724 27B2                       	dc.w $27B2
0001D726 0600 B718                  	dc.l Map_obj25+$6000000
0001D72A 27B2                       	dc.w $27B2
0001D72C 0700 B718                  	dc.l Map_obj25+$7000000
0001D730 27B2                       	dc.w $27B2
0001D732 0000 0000                  	dc.l Map_SS_Glass
0001D736 23F0                       	dc.w $23F0
0001D738 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D73C 23F0                       	dc.w $23F0
0001D73E 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D742 23F0                       	dc.w $23F0
0001D744 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D748 23F0                       	dc.w $23F0
0001D74A 0000 0000                  	dc.l Map_SS_R+$2000000
0001D74E 04F0                       	dc.w $4F0
0001D750 0000 0000                  	dc.l Map_SS_Glass
0001D754 05F0                       	dc.w $5F0
0001D756 0000 0000                  	dc.l Map_SS_Glass
0001D75A 65F0                       	dc.w $65F0
0001D75C 0000 0000                  	dc.l Map_SS_Glass
0001D760 25F0                       	dc.w $25F0
0001D762 0000 0000                  	dc.l Map_SS_Glass
0001D766 45F0                       	dc.w $45F0
0001D766 45F0                       	dc.w $45F0
0001D768                            
0001D768                            ; ---------------------------------------------------------------------------
0001D768                            ; Sprite mappings - special stage "R" block
0001D768                            ; ---------------------------------------------------------------------------
0001D768                            Map_SS_R:
0001D768                            	include "_maps\SSRblock.asm"
0001D768                            ; ---------------------------------------------------------------------------
0001D768                            ; Sprite mappings - special stage "R" block
0001D768                            ; ---------------------------------------------------------------------------
0001D768 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D76C 0000                       		dc.w byte_1B91E-Map_SS_R
0001D76E 01                         byte_1B912:	dc.b 1
0001D76F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D774 01                         byte_1B918:	dc.b 1
0001D775 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D77A 00                         byte_1B91E:	dc.b 0
0001D77C 00                         		even
0001D77C 00                         		even
0001D77C                            
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C                            Map_SS_Glass:
0001D77C                            	include "_maps\SSglassblock.asm"
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D77C                            ; ---------------------------------------------------------------------------
0001D77C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D780 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D784 01                         byte_1B928:	dc.b 1
0001D785 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D78A 01                         byte_1B92E:	dc.b 1
0001D78B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D790 01                         byte_1B934:	dc.b 1
0001D791 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D796 01                         byte_1B93A:	dc.b 1
0001D797 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D79C                            		even
0001D79C                            		even
0001D79C                            
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            ; Sprite mappings - special stage "UP" block
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            Map_SS_Up:
0001D79C                            	include "_maps\SSUPblock.asm"
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            ; Sprite mappings - special stage "UP" block
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C 0000                       		dc.w byte_1B944-Map_SS_Up
0001D79E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D7A0 01                         byte_1B944:	dc.b 1
0001D7A1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D7A6 01                         byte_1B94A:	dc.b 1
0001D7A7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D7AC                            		even
0001D7AC                            		even
0001D7AC                            
0001D7AC                            ; ---------------------------------------------------------------------------
0001D7AC                            ; Sprite mappings - special stage "DOWN" block
0001D7AC                            ; ---------------------------------------------------------------------------
0001D7AC                            Map_SS_Down:
0001D7AC                            	include "_maps\SSDOWNblock.asm"
0001D7AC                            ; ---------------------------------------------------------------------------
0001D7AC                            ; Sprite mappings - special stage "DOWN" block
0001D7AC                            ; ---------------------------------------------------------------------------
0001D7AC 0000                       		dc.w byte_1B954-Map_SS_Down
0001D7AE 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D7B0 01                         byte_1B954:	dc.b 1
0001D7B1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D7B6 01                         byte_1B95A:	dc.b 1
0001D7B7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D7BC                            		even
0001D7BC                            		even
0001D7BC                            
0001D7BC                            ; ---------------------------------------------------------------------------
0001D7BC                            ; Sprite mappings - special stage chaos	emeralds
0001D7BC                            ; ---------------------------------------------------------------------------
0001D7BC 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D7BE 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D7C0 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D7C2 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D7C4 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D7C6 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D7C8 01                         byte_1B96C:	dc.b 1
0001D7C9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D7CE 01                         byte_1B972:	dc.b 1
0001D7CF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D7D4 01                         byte_1B978:	dc.b 1
0001D7D5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D7DA 01                         byte_1B97E:	dc.b 1
0001D7DB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D7E0                            		even
0001D7E0                            ; ===========================================================================
0001D7E0                            ; ---------------------------------------------------------------------------
0001D7E0                            ; Object 09 - Sonic (special stage)
0001D7E0                            ; ---------------------------------------------------------------------------
0001D7E0                            
0001D7E0                            Obj09:					; XREF: Obj_Index
0001D7E0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D7E4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D7E6 6100 0000                  		bsr.w	SS_FixCamera
0001D7EA 6000 0000                  		bra.w	DebugMode
0001D7EE                            ; ===========================================================================
0001D7EE                            
0001D7EE                            Obj09_Normal:
0001D7EE 7000                       		moveq	#0,d0
0001D7F0 1028 0024                  		move.b	$24(a0),d0
0001D7F4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D7F8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D7FC                            ; ===========================================================================
0001D7FC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D7FE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D800 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D802 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D804                            ; ===========================================================================
0001D804                            
0001D804                            Obj09_Main:				; XREF: Obj09_Index
0001D804 5428 0024                  		addq.b	#2,$24(a0)
0001D808 117C 000E 0016             		move.b	#$E,$16(a0)
0001D80E 117C 0007 0017             		move.b	#7,$17(a0)
0001D814 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D81C 317C 0780 0002             		move.w	#$780,2(a0)
0001D822 117C 0004 0001             		move.b	#4,1(a0)
0001D828 117C 0000 0018             		move.b	#0,$18(a0)
0001D82E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D834 08E8 0002 0022             		bset	#2,$22(a0)
0001D83A 08E8 0001 0022             		bset	#1,$22(a0)
0001D840                            
0001D840                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D840 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D844 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D846 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D84C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D84E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D854                            
0001D854                            Obj09_NoDebug:
0001D854 117C 0000 0030             		move.b	#0,$30(a0)
0001D85A 7000                       		moveq	#0,d0
0001D85C 1028 0022                  		move.b	$22(a0),d0
0001D860 0240 0002                  		andi.w	#2,d0
0001D864 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D868 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D86C 4EB9 0001 57BE             		jsr	LoadSonicDynPLC
0001D872 4EF9 0000 EFBA             		jmp	DisplaySprite
0001D878                            ; ===========================================================================
0001D878 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D87A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D87C                            ; ===========================================================================
0001D87C                            
0001D87C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D87C 6100 0000                  		bsr.w	Obj09_Jump
0001D880 6100 0000                  		bsr.w	Obj09_Move
0001D884 6100 0000                  		bsr.w	Obj09_Fall
0001D888 6000                       		bra.s	Obj09_Display
0001D88A                            ; ===========================================================================
0001D88A                            
0001D88A                            Obj09_InAir:				; XREF: Obj09_Modes
0001D88A 6100 0000                  		bsr.w	nullsub_2
0001D88E 6100 0000                  		bsr.w	Obj09_Move
0001D892 6100 0000                  		bsr.w	Obj09_Fall
0001D896                            
0001D896                            Obj09_Display:				; XREF: Obj09_OnWall
0001D896 6100 0000                  		bsr.w	Obj09_ChkItems
0001D89A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D89E 4EB9 0000 EFA0             		jsr	SpeedToPos
0001D8A4 6100 0000                  		bsr.w	SS_FixCamera
0001D8A8 3038 F780                  		move.w	($FFFFF780).w,d0
0001D8AC D078 F782                  		add.w	($FFFFF782).w,d0
0001D8B0 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D8B4 4EB9 0001 556C             		jsr	Sonic_Animate
0001D8BA 4E75                       		rts	
0001D8BC                            
0001D8BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8BC                            
0001D8BC                            
0001D8BC                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D8BC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D8C2 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D8C4 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D8C8                            
0001D8C8                            Obj09_ChkRight:
0001D8C8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D8CE 6700                       		beq.s	loc_1BA78	; if not, branch
0001D8D0 6100 0000                  		bsr.w	Obj09_MoveRight
0001D8D4                            
0001D8D4                            loc_1BA78:
0001D8D4 1038 F602                  		move.b	($FFFFF602).w,d0
0001D8D8 0200 000C                  		andi.b	#$C,d0
0001D8DC 6600                       		bne.s	loc_1BAA8
0001D8DE 3028 0014                  		move.w	$14(a0),d0
0001D8E2 6700                       		beq.s	loc_1BAA8
0001D8E4 6B00                       		bmi.s	loc_1BA9A
0001D8E6 0440 000C                  		subi.w	#$C,d0
0001D8EA 6400                       		bcc.s	loc_1BA94
0001D8EC 303C 0000                  		move.w	#0,d0
0001D8F0                            
0001D8F0                            loc_1BA94:
0001D8F0 3140 0014                  		move.w	d0,$14(a0)
0001D8F4 6000                       		bra.s	loc_1BAA8
0001D8F6                            ; ===========================================================================
0001D8F6                            
0001D8F6                            loc_1BA9A:
0001D8F6 0640 000C                  		addi.w	#$C,d0
0001D8FA 6400                       		bcc.s	loc_1BAA4
0001D8FC 303C 0000                  		move.w	#0,d0
0001D900                            
0001D900                            loc_1BAA4:
0001D900 3140 0014                  		move.w	d0,$14(a0)
0001D904                            
0001D904                            loc_1BAA8:
0001D904 1038 F780                  		move.b	($FFFFF780).w,d0
0001D908 0600 0020                  		addi.b	#$20,d0
0001D90C 0200 00C0                  		andi.b	#$C0,d0
0001D910 4400                       		neg.b	d0
0001D912 4EB9 0000 287A             		jsr	(CalcSine).l
0001D918 C3E8 0014                  		muls.w	$14(a0),d1
0001D91C D3A8 0008                  		add.l	d1,8(a0)
0001D920 C1E8 0014                  		muls.w	$14(a0),d0
0001D924 D1A8 000C                  		add.l	d0,$C(a0)
0001D928 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D92C 2428 000C                  		move.l	$C(a0),d2
0001D930 2628 0008                  		move.l	8(a0),d3
0001D934 6100 0000                  		bsr.w	sub_1BCE8
0001D938 6700                       		beq.s	loc_1BAF2
0001D93A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D93E 93A8 0008                  		sub.l	d1,8(a0)
0001D942 91A8 000C                  		sub.l	d0,$C(a0)
0001D946 317C 0000 0014             		move.w	#0,$14(a0)
0001D94C 4E75                       		rts	
0001D94E                            ; ===========================================================================
0001D94E                            
0001D94E                            loc_1BAF2:
0001D94E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D952 4E75                       		rts	
0001D954                            ; End of function Obj09_Move
0001D954                            
0001D954                            
0001D954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D954                            
0001D954                            
0001D954                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D954 08E8 0000 0022             		bset	#0,$22(a0)
0001D95A 3028 0014                  		move.w	$14(a0),d0
0001D95E 6700                       		beq.s	loc_1BB06
0001D960 6A00                       		bpl.s	loc_1BB1A
0001D962                            
0001D962                            loc_1BB06:
0001D962 0440 000C                  		subi.w	#$C,d0
0001D966 0C40 F800                  		cmpi.w	#-$800,d0
0001D96A 6E00                       		bgt.s	loc_1BB14
0001D96C 303C F800                  		move.w	#-$800,d0
0001D970                            
0001D970                            loc_1BB14:
0001D970 3140 0014                  		move.w	d0,$14(a0)
0001D974 4E75                       		rts	
0001D976                            ; ===========================================================================
0001D976                            
0001D976                            loc_1BB1A:
0001D976 0440 0040                  		subi.w	#$40,d0
0001D97A 6400                       		bcc.s	loc_1BB22
0001D97C 4E71                       		nop	
0001D97E                            
0001D97E                            loc_1BB22:
0001D97E 3140 0014                  		move.w	d0,$14(a0)
0001D982 4E75                       		rts	
0001D984                            ; End of function Obj09_MoveLeft
0001D984                            
0001D984                            
0001D984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D984                            
0001D984                            
0001D984                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D984 08A8 0000 0022             		bclr	#0,$22(a0)
0001D98A 3028 0014                  		move.w	$14(a0),d0
0001D98E 6B00                       		bmi.s	loc_1BB48
0001D990 0640 000C                  		addi.w	#$C,d0
0001D994 0C40 0800                  		cmpi.w	#$800,d0
0001D998 6D00                       		blt.s	loc_1BB42
0001D99A 303C 0800                  		move.w	#$800,d0
0001D99E                            
0001D99E                            loc_1BB42:
0001D99E 3140 0014                  		move.w	d0,$14(a0)
0001D9A2 6000                       		bra.s	locret_1BB54
0001D9A4                            ; ===========================================================================
0001D9A4                            
0001D9A4                            loc_1BB48:
0001D9A4 0640 0040                  		addi.w	#$40,d0
0001D9A8 6400                       		bcc.s	loc_1BB50
0001D9AA 4E71                       		nop	
0001D9AC                            
0001D9AC                            loc_1BB50:
0001D9AC 3140 0014                  		move.w	d0,$14(a0)
0001D9B0                            
0001D9B0                            locret_1BB54:
0001D9B0 4E75                       		rts	
0001D9B2                            ; End of function Obj09_MoveRight
0001D9B2                            
0001D9B2                            
0001D9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9B2                            
0001D9B2                            
0001D9B2                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D9B2 1038 F603                  		move.b	($FFFFF603).w,d0
0001D9B6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D9BA 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D9BC 1038 F780                  		move.b	($FFFFF780).w,d0
0001D9C0 0200 00FC                  		andi.b	#$FC,d0
0001D9C4 4400                       		neg.b	d0
0001D9C6 0400 0040                  		subi.b	#$40,d0
0001D9CA 4EB9 0000 287A             		jsr	(CalcSine).l
0001D9D0 C3FC 0680                  		muls.w	#$680,d1
0001D9D4 E081                       		asr.l	#8,d1
0001D9D6 3141 0010                  		move.w	d1,$10(a0)
0001D9DA C1FC 0680                  		muls.w	#$680,d0
0001D9DE E080                       		asr.l	#8,d0
0001D9E0 3140 0012                  		move.w	d0,$12(a0)
0001D9E4 08E8 0001 0022             		bset	#1,$22(a0)
0001D9EA 303C 00A0                  		move.w	#$A0,d0
0001D9EE 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D9F4                            
0001D9F4                            Obj09_NoJump:
0001D9F4 4E75                       		rts	
0001D9F6                            ; End of function Obj09_Jump
0001D9F6                            
0001D9F6                            
0001D9F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9F6                            
0001D9F6                            
0001D9F6                            nullsub_2:				; XREF: Obj09_InAir
0001D9F6 4E75                       		rts	
0001D9F8                            ; End of function nullsub_2
0001D9F8                            
0001D9F8                            ; ===========================================================================
0001D9F8                            ; ---------------------------------------------------------------------------
0001D9F8                            ; unused subroutine to limit Sonic's upward vertical speed
0001D9F8                            ; ---------------------------------------------------------------------------
0001D9F8 323C FC00                  		move.w	#-$400,d1
0001D9FC B268 0012                  		cmp.w	$12(a0),d1
0001DA00 6F00                       		ble.s	locret_1BBB4
0001DA02 1038 F602                  		move.b	($FFFFF602).w,d0
0001DA06 0200 0070                  		andi.b	#$70,d0
0001DA0A 6600                       		bne.s	locret_1BBB4
0001DA0C 3141 0012                  		move.w	d1,$12(a0)
0001DA10                            
0001DA10                            locret_1BBB4:
0001DA10 4E75                       		rts	
0001DA12                            ; ---------------------------------------------------------------------------
0001DA12                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DA12                            ; ---------------------------------------------------------------------------
0001DA12                            
0001DA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA12                            
0001DA12                            
0001DA12                            SS_FixCamera:				; XREF: Obj09
0001DA12 3428 000C                  		move.w	$C(a0),d2
0001DA16 3628 0008                  		move.w	8(a0),d3
0001DA1A 3038 F700                  		move.w	($FFFFF700).w,d0
0001DA1E 0443 00A0                  		subi.w	#$A0,d3
0001DA22 6500                       		bcs.s	loc_1BBCE
0001DA24 9043                       		sub.w	d3,d0
0001DA26 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DA2A                            
0001DA2A                            loc_1BBCE:
0001DA2A 3038 F704                  		move.w	($FFFFF704).w,d0
0001DA2E 0442 0070                  		subi.w	#$70,d2
0001DA32 6500                       		bcs.s	locret_1BBDE
0001DA34 9042                       		sub.w	d2,d0
0001DA36 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DA3A                            
0001DA3A                            locret_1BBDE:
0001DA3A 4E75                       		rts	
0001DA3C                            ; End of function SS_FixCamera
0001DA3C                            
0001DA3C                            ; ===========================================================================
0001DA3C                            
0001DA3C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DA3C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DA42 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DA48 6600                       		bne.s	loc_1BBF4
0001DA4A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DA50                            
0001DA50                            loc_1BBF4:
0001DA50 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DA56 6D00                       		blt.s	loc_1BC12
0001DA58 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DA5E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DA64 5428 0024                  		addq.b	#2,$24(a0)
0001DA68 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DA6E                            
0001DA6E                            loc_1BC12:
0001DA6E 3038 F780                  		move.w	($FFFFF780).w,d0
0001DA72 D078 F782                  		add.w	($FFFFF782).w,d0
0001DA76 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DA7A 4EB9 0001 556C             		jsr	Sonic_Animate
0001DA80 4EB9 0001 57BE             		jsr	LoadSonicDynPLC
0001DA86 6100 FF8A                  		bsr.w	SS_FixCamera
0001DA8A 4EF9 0000 EFBA             		jmp	DisplaySprite
0001DA90                            ; ===========================================================================
0001DA90                            
0001DA90                            Obj09_Exit2:				; XREF: Obj09_Index
0001DA90 5368 0038                  		subq.w	#1,$38(a0)
0001DA94 6600                       		bne.s	loc_1BC40
0001DA96 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DA9C                            
0001DA9C                            loc_1BC40:
0001DA9C 4EB9 0001 556C             		jsr	Sonic_Animate
0001DAA2 4EB9 0001 57BE             		jsr	LoadSonicDynPLC
0001DAA8 6100 FF68                  		bsr.w	SS_FixCamera
0001DAAC 4EF9 0000 EFBA             		jmp	DisplaySprite
0001DAB2                            
0001DAB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAB2                            
0001DAB2                            
0001DAB2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DAB2 2428 000C                  		move.l	$C(a0),d2
0001DAB6 2628 0008                  		move.l	8(a0),d3
0001DABA 1038 F780                  		move.b	($FFFFF780).w,d0
0001DABE 0200 00FC                  		andi.b	#$FC,d0
0001DAC2 4EB9 0000 287A             		jsr	(CalcSine).l
0001DAC8 3828 0010                  		move.w	$10(a0),d4
0001DACC 48C4                       		ext.l	d4
0001DACE E184                       		asl.l	#8,d4
0001DAD0 C1FC 002A                  		muls.w	#$2A,d0
0001DAD4 D084                       		add.l	d4,d0
0001DAD6 3828 0012                  		move.w	$12(a0),d4
0001DADA 48C4                       		ext.l	d4
0001DADC E184                       		asl.l	#8,d4
0001DADE C3FC 002A                  		muls.w	#$2A,d1
0001DAE2 D284                       		add.l	d4,d1
0001DAE4 D680                       		add.l	d0,d3
0001DAE6 6100 0000                  		bsr.w	sub_1BCE8
0001DAEA 6700                       		beq.s	loc_1BCB0
0001DAEC 9680                       		sub.l	d0,d3
0001DAEE 7000                       		moveq	#0,d0
0001DAF0 3140 0010                  		move.w	d0,$10(a0)
0001DAF4 08A8 0001 0022             		bclr	#1,$22(a0)
0001DAFA D481                       		add.l	d1,d2
0001DAFC 6100 0000                  		bsr.w	sub_1BCE8
0001DB00 6700                       		beq.s	loc_1BCC6
0001DB02 9481                       		sub.l	d1,d2
0001DB04 7200                       		moveq	#0,d1
0001DB06 3141 0012                  		move.w	d1,$12(a0)
0001DB0A 4E75                       		rts	
0001DB0C                            ; ===========================================================================
0001DB0C                            
0001DB0C                            loc_1BCB0:
0001DB0C D481                       		add.l	d1,d2
0001DB0E 6100 0000                  		bsr.w	sub_1BCE8
0001DB12 6700                       		beq.s	loc_1BCD4
0001DB14 9481                       		sub.l	d1,d2
0001DB16 7200                       		moveq	#0,d1
0001DB18 3141 0012                  		move.w	d1,$12(a0)
0001DB1C 08A8 0001 0022             		bclr	#1,$22(a0)
0001DB22                            
0001DB22                            loc_1BCC6:
0001DB22 E080                       		asr.l	#8,d0
0001DB24 E081                       		asr.l	#8,d1
0001DB26 3140 0010                  		move.w	d0,$10(a0)
0001DB2A 3141 0012                  		move.w	d1,$12(a0)
0001DB2E 4E75                       		rts	
0001DB30                            ; ===========================================================================
0001DB30                            
0001DB30                            loc_1BCD4:
0001DB30 E080                       		asr.l	#8,d0
0001DB32 E081                       		asr.l	#8,d1
0001DB34 3140 0010                  		move.w	d0,$10(a0)
0001DB38 3141 0012                  		move.w	d1,$12(a0)
0001DB3C 08E8 0001 0022             		bset	#1,$22(a0)
0001DB42 4E75                       		rts	
0001DB44                            ; End of function Obj09_Fall
0001DB44                            
0001DB44                            
0001DB44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB44                            
0001DB44                            
0001DB44                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DB44 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DB4A 7800                       		moveq	#0,d4
0001DB4C 4842                       		swap	d2
0001DB4E 3802                       		move.w	d2,d4
0001DB50 4842                       		swap	d2
0001DB52 0644 0044                  		addi.w	#$44,d4
0001DB56 88FC 0018                  		divu.w	#$18,d4
0001DB5A C8FC 0080                  		mulu.w	#$80,d4
0001DB5E D3C4                       		adda.l	d4,a1
0001DB60 7800                       		moveq	#0,d4
0001DB62 4843                       		swap	d3
0001DB64 3803                       		move.w	d3,d4
0001DB66 4843                       		swap	d3
0001DB68 0644 0014                  		addi.w	#$14,d4
0001DB6C 88FC 0018                  		divu.w	#$18,d4
0001DB70 D2C4                       		adda.w	d4,a1
0001DB72 7A00                       		moveq	#0,d5
0001DB74 1819                       		move.b	(a1)+,d4
0001DB76 6100                       		bsr.s	sub_1BD30
0001DB78 1819                       		move.b	(a1)+,d4
0001DB7A 6100                       		bsr.s	sub_1BD30
0001DB7C D2FC 007E                  		adda.w	#$7E,a1
0001DB80 1819                       		move.b	(a1)+,d4
0001DB82 6100                       		bsr.s	sub_1BD30
0001DB84 1819                       		move.b	(a1)+,d4
0001DB86 6100                       		bsr.s	sub_1BD30
0001DB88 4A05                       		tst.b	d5
0001DB8A 4E75                       		rts	
0001DB8C                            ; End of function sub_1BCE8
0001DB8C                            
0001DB8C                            
0001DB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB8C                            
0001DB8C                            
0001DB8C                            sub_1BD30:				; XREF: sub_1BCE8
0001DB8C 6700                       		beq.s	locret_1BD44
0001DB8E 0C04 0028                  		cmpi.b	#$28,d4
0001DB92 6700                       		beq.s	locret_1BD44
0001DB94 0C04 003A                  		cmpi.b	#$3A,d4
0001DB98 6500                       		bcs.s	loc_1BD46
0001DB9A 0C04 004B                  		cmpi.b	#$4B,d4
0001DB9E 6400                       		bcc.s	loc_1BD46
0001DBA0                            
0001DBA0                            locret_1BD44:
0001DBA0 4E75                       		rts	
0001DBA2                            ; ===========================================================================
0001DBA2                            
0001DBA2                            loc_1BD46:
0001DBA2 1144 0030                  		move.b	d4,$30(a0)
0001DBA6 2149 0032                  		move.l	a1,$32(a0)
0001DBAA 7AFF                       		moveq	#-1,d5
0001DBAC 4E75                       		rts	
0001DBAE                            ; End of function sub_1BD30
0001DBAE                            
0001DBAE                            
0001DBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBAE                            
0001DBAE                            
0001DBAE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DBAE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DBB4 7800                       		moveq	#0,d4
0001DBB6 3828 000C                  		move.w	$C(a0),d4
0001DBBA 0644 0050                  		addi.w	#$50,d4
0001DBBE 88FC 0018                  		divu.w	#$18,d4
0001DBC2 C8FC 0080                  		mulu.w	#$80,d4
0001DBC6 D3C4                       		adda.l	d4,a1
0001DBC8 7800                       		moveq	#0,d4
0001DBCA 3828 0008                  		move.w	8(a0),d4
0001DBCE 0644 0020                  		addi.w	#$20,d4
0001DBD2 88FC 0018                  		divu.w	#$18,d4
0001DBD6 D2C4                       		adda.w	d4,a1
0001DBD8 1811                       		move.b	(a1),d4
0001DBDA 6600                       		bne.s	Obj09_ChkCont
0001DBDC 4A28 003A                  		tst.b	$3A(a0)
0001DBE0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DBE4 7800                       		moveq	#0,d4
0001DBE6 4E75                       		rts	
0001DBE8                            ; ===========================================================================
0001DBE8                            
0001DBE8                            Obj09_ChkCont:
0001DBE8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DBEC 6600                       		bne.s	Obj09_Chk1Up
0001DBEE 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DBF2 6600                       		bne.s	Obj09_GetCont
0001DBF4 14BC 0001                  		move.b	#1,(a2)
0001DBF8 2549 0004                  		move.l	a1,4(a2)
0001DBFC                            
0001DBFC                            Obj09_GetCont:
0001DBFC 4EB9 0000 B3B4             		jsr	CollectRing
0001DC02 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DC08 6500                       		bcs.s	Obj09_NoCont
0001DC0A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DC10 6600                       		bne.s	Obj09_NoCont
0001DC12 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DC16 303C 00BF                  		move.w	#$BF,d0
0001DC1A 4EB9 0000 1010             		jsr	(PlaySound).l	; play extra continue sound
0001DC20                            
0001DC20                            Obj09_NoCont:
0001DC20 7800                       		moveq	#0,d4
0001DC22 4E75                       		rts	
0001DC24                            ; ===========================================================================
0001DC24                            
0001DC24                            Obj09_Chk1Up:
0001DC24 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DC28 6600                       		bne.s	Obj09_ChkEmer
0001DC2A 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001DC2E 6600                       		bne.s	Obj09_Get1Up
0001DC30 14BC 0003                  		move.b	#3,(a2)
0001DC34 2549 0004                  		move.l	a1,4(a2)
0001DC38                            
0001DC38                            Obj09_Get1Up:
0001DC38 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DC3C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DC40 303C 0088                  		move.w	#$88,d0
0001DC44 4EB9 0000 1010             		jsr	(PlaySound).l	; play extra life music
0001DC4A 7800                       		moveq	#0,d4
0001DC4C 4E75                       		rts	
0001DC4E                            ; ===========================================================================
0001DC4E                            
0001DC4E                            Obj09_ChkEmer:
0001DC4E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DC52 6500                       		bcs.s	Obj09_ChkGhost
0001DC54 0C04 0040                  		cmpi.b	#$40,d4
0001DC58 6200                       		bhi.s	Obj09_ChkGhost
0001DC5A 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001DC5E 6600                       		bne.s	Obj09_GetEmer
0001DC60 14BC 0005                  		move.b	#5,(a2)
0001DC64 2549 0004                  		move.l	a1,4(a2)
0001DC68                            
0001DC68                            Obj09_GetEmer:
0001DC68 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DC6E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DC70 0404 003B                  		subi.b	#$3B,d4
0001DC74 7000                       		moveq	#0,d0
0001DC76 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DC7A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DC7E 1584 0000                  		move.b	d4,(a2,d0.w)
0001DC82 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DC86                            
0001DC86                            Obj09_NoEmer:
0001DC86 303C 0093                  		move.w	#$93,d0
0001DC8A 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play emerald music
0001DC90 7800                       		moveq	#0,d4
0001DC92 4E75                       		rts	
0001DC94                            ; ===========================================================================
0001DC94                            
0001DC94                            Obj09_ChkGhost:
0001DC94 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DC98 6600                       		bne.s	Obj09_ChkGhostTag
0001DC9A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DCA0                            
0001DCA0                            Obj09_ChkGhostTag:
0001DCA0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DCA4 6600                       		bne.s	Obj09_NoGhost
0001DCA6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DCAC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DCAE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DCB4                            
0001DCB4                            Obj09_NoGhost:
0001DCB4 78FF                       		moveq	#-1,d4
0001DCB6 4E75                       		rts	
0001DCB8                            ; ===========================================================================
0001DCB8                            
0001DCB8                            Obj09_MakeGhostSolid:
0001DCB8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DCBE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DCC0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DCC6 723F                       		moveq	#$3F,d1
0001DCC8                            
0001DCC8                            Obj09_GhostLoop2:
0001DCC8 743F                       		moveq	#$3F,d2
0001DCCA                            
0001DCCA                            Obj09_GhostLoop:
0001DCCA 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DCCE 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DCD0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DCD4                            
0001DCD4                            Obj09_NoReplace:
0001DCD4 5249                       		addq.w	#1,a1
0001DCD6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DCDA 43E9 0040                  		lea	$40(a1),a1
0001DCDE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DCE2                            
0001DCE2                            Obj09_GhostNotSolid:
0001DCE2 4228 003A                  		clr.b	$3A(a0)
0001DCE6 7800                       		moveq	#0,d4
0001DCE8 4E75                       		rts	
0001DCEA                            ; End of function Obj09_ChkItems
0001DCEA                            
0001DCEA                            
0001DCEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCEA                            
0001DCEA                            
0001DCEA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DCEA 1028 0030                  		move.b	$30(a0),d0
0001DCEE 6600                       		bne.s	Obj09_ChkBumper
0001DCF0 5328 0036                  		subq.b	#1,$36(a0)
0001DCF4 6A00                       		bpl.s	loc_1BEA0
0001DCF6 117C 0000 0036             		move.b	#0,$36(a0)
0001DCFC                            
0001DCFC                            loc_1BEA0:
0001DCFC 5328 0037                  		subq.b	#1,$37(a0)
0001DD00 6A00                       		bpl.s	locret_1BEAC
0001DD02 117C 0000 0037             		move.b	#0,$37(a0)
0001DD08                            
0001DD08                            locret_1BEAC:
0001DD08 4E75                       		rts	
0001DD0A                            ; ===========================================================================
0001DD0A                            
0001DD0A                            Obj09_ChkBumper:
0001DD0A 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DD0E 6600                       		bne.s	Obj09_GOAL
0001DD10 2228 0032                  		move.l	$32(a0),d1
0001DD14 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DD1A 3401                       		move.w	d1,d2
0001DD1C 0241 007F                  		andi.w	#$7F,d1
0001DD20 C2FC 0018                  		mulu.w	#$18,d1
0001DD24 0441 0014                  		subi.w	#$14,d1
0001DD28 EE4A                       		lsr.w	#7,d2
0001DD2A 0242 007F                  		andi.w	#$7F,d2
0001DD2E C4FC 0018                  		mulu.w	#$18,d2
0001DD32 0442 0044                  		subi.w	#$44,d2
0001DD36 9268 0008                  		sub.w	8(a0),d1
0001DD3A 9468 000C                  		sub.w	$C(a0),d2
0001DD3E 4EB9 0000 2B48             		jsr	(CalcAngle).l
0001DD44 4EB9 0000 287A             		jsr	(CalcSine).l
0001DD4A C3FC F900                  		muls.w	#-$700,d1
0001DD4E E081                       		asr.l	#8,d1
0001DD50 3141 0010                  		move.w	d1,$10(a0)
0001DD54 C1FC F900                  		muls.w	#-$700,d0
0001DD58 E080                       		asr.l	#8,d0
0001DD5A 3140 0012                  		move.w	d0,$12(a0)
0001DD5E 08E8 0001 0022             		bset	#1,$22(a0)
0001DD64 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001DD68 6600                       		bne.s	Obj09_BumpSnd
0001DD6A 14BC 0002                  		move.b	#2,(a2)
0001DD6E 2028 0032                  		move.l	$32(a0),d0
0001DD72 5380                       		subq.l	#1,d0
0001DD74 2540 0004                  		move.l	d0,4(a2)
0001DD78                            
0001DD78                            Obj09_BumpSnd:
0001DD78 303C 00B4                  		move.w	#$B4,d0
0001DD7C 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play bumper sound
0001DD82                            ; ===========================================================================
0001DD82                            
0001DD82                            Obj09_GOAL:
0001DD82 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001DD86 6600                       		bne.s	Obj09_UPblock
0001DD88 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001DD8C 303C 00A8                  		move.w	#$A8,d0		; change item
0001DD90 4EB9 0000 1018             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001DD96 4E75                       		rts	
0001DD98                            ; ===========================================================================
0001DD98                            
0001DD98                            Obj09_UPblock:
0001DD98 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001DD9C 6600                       		bne.s	Obj09_DOWNblock
0001DD9E 4A28 0036                  		tst.b	$36(a0)
0001DDA2 6600 0000                  		bne.w	Obj09_NoGlass
0001DDA6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DDAC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DDB2 6700                       		beq.s	Obj09_UPsnd
0001DDB4 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001DDB8 2268 0032                  		movea.l	$32(a0),a1
0001DDBC 5389                       		subq.l	#1,a1
0001DDBE 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001DDC2                            
0001DDC2                            Obj09_UPsnd:
0001DDC2 303C 00A9                  		move.w	#$A9,d0
0001DDC6 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DDCC                            ; ===========================================================================
0001DDCC                            
0001DDCC                            Obj09_DOWNblock:
0001DDCC 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001DDD0 6600                       		bne.s	Obj09_Rblock
0001DDD2 4A28 0036                  		tst.b	$36(a0)
0001DDD6 6600 0000                  		bne.w	Obj09_NoGlass
0001DDDA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DDE0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DDE6 6600                       		bne.s	Obj09_DOWNsnd
0001DDE8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001DDEC 2268 0032                  		movea.l	$32(a0),a1
0001DDF0 5389                       		subq.l	#1,a1
0001DDF2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001DDF6                            
0001DDF6                            Obj09_DOWNsnd:
0001DDF6 303C 00A9                  		move.w	#$A9,d0
0001DDFA 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DE00                            ; ===========================================================================
0001DE00                            
0001DE00                            Obj09_Rblock:
0001DE00 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001DE04 6600                       		bne.s	Obj09_ChkGlass
0001DE06 4A28 0037                  		tst.b	$37(a0)
0001DE0A 6600 0000                  		bne.w	Obj09_NoGlass
0001DE0E 117C 001E 0037             		move.b	#$1E,$37(a0)
0001DE14 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001DE18 6600                       		bne.s	Obj09_RevStage
0001DE1A 14BC 0004                  		move.b	#4,(a2)
0001DE1E 2028 0032                  		move.l	$32(a0),d0
0001DE22 5380                       		subq.l	#1,d0
0001DE24 2540 0004                  		move.l	d0,4(a2)
0001DE28                            
0001DE28                            Obj09_RevStage:
0001DE28 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001DE2C 303C 00A9                  		move.w	#$A9,d0
0001DE30 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play sound
0001DE36                            ; ===========================================================================
0001DE36                            
0001DE36                            Obj09_ChkGlass:
0001DE36 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001DE3A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001DE3C 0C00 002E                  		cmpi.b	#$2E,d0
0001DE40 6700                       		beq.s	Obj09_Glass
0001DE42 0C00 002F                  		cmpi.b	#$2F,d0
0001DE46 6700                       		beq.s	Obj09_Glass
0001DE48 0C00 0030                  		cmpi.b	#$30,d0
0001DE4C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001DE4E                            
0001DE4E                            Obj09_Glass:
0001DE4E 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001DE52 6600                       		bne.s	Obj09_GlassSnd
0001DE54 14BC 0006                  		move.b	#6,(a2)
0001DE58 2268 0032                  		movea.l	$32(a0),a1
0001DE5C 5389                       		subq.l	#1,a1
0001DE5E 2549 0004                  		move.l	a1,4(a2)
0001DE62 1011                       		move.b	(a1),d0
0001DE64 5200                       		addq.b	#1,d0		; change glass type when touched
0001DE66 0C00 0030                  		cmpi.b	#$30,d0
0001DE6A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001DE6C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001DE6E                            
0001DE6E                            Obj09_GlassUpdate:
0001DE6E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001DE72                            
0001DE72                            Obj09_GlassSnd:
0001DE72 303C 00BA                  		move.w	#$BA,d0
0001DE76 4EF9 0000 1018             		jmp	(PlaySound_Special).l ;	play glass block sound
0001DE7C                            ; ===========================================================================
0001DE7C                            
0001DE7C                            Obj09_NoGlass:
0001DE7C 4E75                       		rts	
0001DE7E                            ; End of function Obj09_ChkItems2
0001DE7E                            
0001DE7E                            ; ===========================================================================
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            ; Object 10 - blank
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            
0001DE7E                            Obj10:					; XREF: Obj_Index
0001DE7E 4E75                       		rts	
0001DE80                            
0001DE80                            ; ===========================================================================
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            
0001DE80                            Obj03:
0001DE80 7000                       		moveq	#0,d0
0001DE82 1028 0024                  		move.b	$24(a0),d0
0001DE86 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001DE8A 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001DE8E 3028 0008                  		move.w	8(a0),d0
0001DE92 0240 FF80                  		andi.w	#$FF80,d0
0001DE96 3238 F700                  		move.w	($FFFFF700).w,d1
0001DE9A 0441 0080                  		subi.w	#$80,d1
0001DE9E 0241 FF80                  		andi.w	#$FF80,d1
0001DEA2 9041                       		sub.w	d1,d0
0001DEA4 0C40 0280                  		cmpi.w	#$280,d0
0001DEA8 6200                       		bhi.s	Obj03_MarkChkGone
0001DEAA 4E75                       		rts
0001DEAC                            
0001DEAC                            Obj03_MarkChkGone:
0001DEAC 4EF9 0001 1096             		jmp	Mark_ChkGone
0001DEB2                            ; ===========================================================================
0001DEB2                            ; ---------------------------------------------------------------------------
0001DEB2 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001DEB4 0000                       		dc.w Obj03_MainX-Obj03_Index
0001DEB6 0000                       		dc.w Obj03_MainY-Obj03_Index
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; ===========================================================================
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; Initiation
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            
0001DEB8                            Obj03_Init:
0001DEB8 5428 0024                  		addq.b	#2,$24(a0)
0001DEBC 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001DEC4 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001DECA 0028 0004 0001             		ori.b	#4,$01(a0)
0001DED0 117C 0010 0019             		move.b	#$10,$19(a0)
0001DED6 117C 0005 0018             		move.b	#5,$18(a0)
0001DEDC 1028 0028                  		move.b	$28(a0),d0
0001DEE0 0800 0002                  		btst	#2,d0
0001DEE4 6700                       		beq.s	Obj03_Init_CheckX
0001DEE6                            
0001DEE6                            ;Obj03_Init_CheckY:
0001DEE6 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001DEEA 0240 0007                  		andi.w	#7,d0
0001DEEE 1140 001A                  		move.b	d0,$1A(a0)
0001DEF2 0240 0003                  		andi.w	#3,d0
0001DEF6 D040                       		add.w	d0,d0
0001DEF8 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001DEFE 3228 000C                  		move.w	$0C(a0),d1
0001DF02 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001DF06 B269 000C                  		cmp.w	$0C(a1),d1
0001DF0A 6400                       		bcc.s	Obj03_Init_Next
0001DF0C 117C 0001 0034             		move.b	#1,$34(a0)
0001DF12                            Obj03_Init_Next:
0001DF12                            	;	lea	(Sidekick).w,a1 ; a1=character
0001DF12                            	;	cmp.w	$0C(a1),d1
0001DF12                            	;	bcc.s	+
0001DF12                            	;	move.b	#1,$35(a0)
0001DF12                            ;+
0001DF12 6000 0000                  		bra.w	Obj03_MainY
0001DF16                            ; ===========================================================================
0001DF16                            word_1FD68:
0001DF16 0020                       	dc.w  $020
0001DF18 0040                       	dc.w  $040	; 1
0001DF1A 0080                       	dc.w  $080	; 2
0001DF1C 0100                       	dc.w  $100	; 3
0001DF1E                            ; ===========================================================================
0001DF1E                            ; loc_1FD70:
0001DF1E                            Obj03_Init_CheckX:
0001DF1E 0240 0003                  		andi.w	#3,d0
0001DF22 1140 001A                  		move.b	d0,$1A(a0)
0001DF26 D040                       		add.w	d0,d0
0001DF28 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001DF2E 3228 0008                  		move.w	$08(a0),d1
0001DF32 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001DF36 B269 0008                  		cmp.w	$08(a1),d1
0001DF3A 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001DF3C 117C 0001 0034             		move.b	#1,$34(a0)
0001DF42                            Obj03_Init_CheckX_Next:
0001DF42                            	;	lea	(Sidekick).w,a1 ; a1=character
0001DF42                            	;	cmp.w	$08(a1),d1
0001DF42                            	;	bcc.s	+
0001DF42                            	;	move.b	#1,$35(a0)
0001DF42                            ;+
0001DF42                            
0001DF42                            Obj03_MainX:
0001DF42 4A78 FE08                  		tst.w	($FFFFFE08).w
0001DF46 6600 0000                  		bne.w	return_1FEAC
0001DF4A 3228 0008                  		move.w	$08(a0),d1
0001DF4E 45E8 0034                  		lea	$34(a0),a2
0001DF52 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001DF56                            ;		bsr.s	+
0001DF56                            ;		lea	(Sidekick).w,a1 ; a1=character
0001DF56                            
0001DF56                            ;+
0001DF56 4A1A                       		tst.b	(a2)+
0001DF58 6600                       		bne.s	Obj03_MainX_Alt
0001DF5A B269 0008                  		cmp.w	$08(a1),d1
0001DF5E 6200 0000                  		bhi.w	return_1FEAC
0001DF62 157C 0001 FFFF             		move.b	#1,-1(a2)
0001DF68 3428 000C                  		move.w	$0C(a0),d2
0001DF6C 3602                       		move.w	d2,d3
0001DF6E 3828 0032                  		move.w	$32(a0),d4
0001DF72 9444                       		sub.w	d4,d2
0001DF74 D644                       		add.w	d4,d3
0001DF76 3829 000C                  		move.w	$0C(a1),d4
0001DF7A B842                       		cmp.w	d2,d4
0001DF7C 6D00 0000                  		blt.w	return_1FEAC
0001DF80 B843                       		cmp.w	d3,d4
0001DF82 6C00 0000                  		bge.w	return_1FEAC
0001DF86 1028 0028                  		move.b	$28(a0),d0
0001DF8A 6A00                       		bpl.s	Obj03_ICX_B1
0001DF8C 0829 0001 002B             		btst	#1,$2B(a1)
0001DF92 6600 0000                  		bne.w	return_1FEAC
0001DF96                            
0001DF96                            Obj03_ICX_B1:
0001DF96 0828 0000 0001             		btst	#0,$01(a0)
0001DF9C 6600                       		bne.s	Obj03_ICX_B2
0001DF9E 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001DFA4                            	;	move.b	#$C,$3E(a1)
0001DFA4                            	;	move.b	#$D,$3F(a1)
0001DFA4 0800 0003                  		btst	#3,d0
0001DFA8 6700                       		beq.s	Obj03_ICX_B2
0001DFAA 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001DFB0                            	;	move.b	#$E,$3E(a1)
0001DFB0                            	;	move.b	#$F,$3F(a1)
0001DFB0                            
0001DFB0                            Obj03_ICX_B2:
0001DFB0 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001DFB6 0800 0005                  		btst	#5,d0
0001DFBA 6700                       		beq.s	return_1FEAC
0001DFBC 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001DFC2 6000                       		bra.s	return_1FEAC
0001DFC4                            ; ===========================================================================
0001DFC4                            
0001DFC4                            Obj03_MainX_Alt:
0001DFC4 B269 0008                  		cmp.w	$08(a1),d1
0001DFC8 6300 0000                  		bls.w	return_1FEAC
0001DFCC 157C 0000 FFFF             		move.b	#0,-1(a2)
0001DFD2 3428 000C                  		move.w	$0C(a0),d2
0001DFD6 3602                       		move.w	d2,d3
0001DFD8 3828 0032                  		move.w	$32(a0),d4
0001DFDC 9444                       		sub.w	d4,d2
0001DFDE D644                       		add.w	d4,d3
0001DFE0 3829 000C                  		move.w	$0C(a1),d4
0001DFE4 B842                       		cmp.w	d2,d4
0001DFE6 6D00 0000                  		blt.w	return_1FEAC
0001DFEA B843                       		cmp.w	d3,d4
0001DFEC 6C00 0000                  		bge.w	return_1FEAC
0001DFF0 1028 0028                  		move.b	$28(a0),d0
0001DFF4 6A00                       		bpl.s	Obj03_MXA_B1
0001DFF6 0829 0001 002B             		btst	#1,$2B(a1)
0001DFFC 6600 0000                  		bne.w	return_1FEAC
0001E000                            
0001E000                            Obj03_MXA_B1:
0001E000 0828 0000 0001             		btst	#0,$01(a0)
0001E006 6600                       		bne.s	Obj03_MXA_B2
0001E008 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E00E                            	;	move.b	#$C,$3E(a1)
0001E00E                            	;	move.b	#$D,$3F(a1)
0001E00E 0800 0004                  		btst	#4,d0
0001E012 6700                       		beq.s	Obj03_MXA_B2
0001E014 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E01A                            	;	move.b	#$E,$3E(a1)
0001E01A                            	;	move.b	#$F,$3F(a1)
0001E01A                            
0001E01A                            Obj03_MXA_B2:
0001E01A 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E020 0800 0006                  		btst	#6,d0
0001E024 6700                       		beq.s	return_1FEAC
0001E026 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E02C                            
0001E02C                            return_1FEAC:
0001E02C 4E75                       		rts
0001E02E                            
0001E02E                            ; ===========================================================================
0001E02E                            
0001E02E                            Obj03_MainY:
0001E02E 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E032 6600 0000                  		bne.w	return_1FFB6
0001E036 3228 000C                  		move.w	$0C(a0),d1
0001E03A 45E8 0034                  		lea	$34(a0),a2
0001E03E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E042                            ;		bsr.s	+
0001E042                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E042                            
0001E042                            ;+
0001E042 4A1A                       		tst.b	(a2)+
0001E044 6600                       		bne.s	Obj03_MainY_Alt
0001E046 B269 000C                  		cmp.w	$0C(a1),d1
0001E04A 6200 0000                  		bhi.w	return_1FFB6
0001E04E 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E054 3428 0008                  		move.w	$08(a0),d2
0001E058 3602                       		move.w	d2,d3
0001E05A 3828 0032                  		move.w	$32(a0),d4
0001E05E 9444                       		sub.w	d4,d2
0001E060 D644                       		add.w	d4,d3
0001E062 3829 0008                  		move.w	$08(a1),d4
0001E066 B842                       		cmp.w	d2,d4
0001E068 6D00 0000                  		blt.w	return_1FFB6
0001E06C B843                       		cmp.w	d3,d4
0001E06E 6C00 0000                  		bge.w	return_1FFB6
0001E072 1028 0028                  		move.b	$28(a0),d0
0001E076 6A00                       		bpl.s	Obj03_MY_B1
0001E078 0829 0001 002B             		btst	#1,$2B(a1)
0001E07E 6600 0000                  		bne.w	return_1FFB6
0001E082                            
0001E082                            Obj03_MY_B1:
0001E082 0828 0000 0001             		btst	#0,$01(a0)
0001E088 6600                       		bne.s	Obj03_MY_B2
0001E08A 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E090                            	;	move.b	#$C,$3E(a1)
0001E090                            	;	move.b	#$D,$3F(a1)
0001E090 0800 0003                  		btst	#3,d0
0001E094 6700                       		beq.s	Obj03_MY_B2
0001E096 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E09C                            	;	move.b	#$E,$3E(a1)
0001E09C                            	;	move.b	#$F,$3F(a1)
0001E09C                            
0001E09C                            Obj03_MY_B2:
0001E09C 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E0A2 0800 0005                  		btst	#5,d0
0001E0A6 6700                       		beq.s	return_1FFB6
0001E0A8 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E0AE 6000                       		bra.s	return_1FFB6
0001E0B0                            
0001E0B0                            ; ===========================================================================
0001E0B0                            
0001E0B0                            Obj03_MainY_Alt:
0001E0B0 B269 000C                  		cmp.w	$0C(a1),d1
0001E0B4 6300 0000                  		bls.w	return_1FFB6
0001E0B8 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E0BE 3428 0008                  		move.w	$08(a0),d2
0001E0C2 3602                       		move.w	d2,d3
0001E0C4 3828 0032                  		move.w	$32(a0),d4
0001E0C8 9444                       		sub.w	d4,d2
0001E0CA D644                       		add.w	d4,d3
0001E0CC 3829 0008                  		move.w	$08(a1),d4
0001E0D0 B842                       		cmp.w	d2,d4
0001E0D2 6D00 0000                  		blt.w	return_1FFB6
0001E0D6 B843                       		cmp.w	d3,d4
0001E0D8 6C00 0000                  		bge.w	return_1FFB6
0001E0DC 1028 0028                  		move.b	$28(a0),d0
0001E0E0 6A00                       		bpl.s	Obj03_MYA_B1
0001E0E2 0829 0001 002B             		btst	#1,$2B(a1)
0001E0E8 6600 0000                  		bne.w	return_1FFB6
0001E0EC                            
0001E0EC                            Obj03_MYA_B1
0001E0EC 0828 0000 0001             		btst	#0,$01(a0)
0001E0F2 6600                       		bne.s	Obj03_MYA_B2
0001E0F4 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E0FA                            	;	move.b	#$C,$3E(a1)
0001E0FA                            	;	move.b	#$D,$3F(a1)
0001E0FA 0800 0004                  		btst	#4,d0
0001E0FE 6700                       		beq.s	Obj03_MYA_B2
0001E100 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E106                            	;	move.b	#$E,$3E(a1)
0001E106                            	;	move.b	#$F,$3F(a1)
0001E106                            
0001E106                            Obj03_MYA_B2:
0001E106 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E10C 0800 0006                  		btst	#6,d0
0001E110 6700                       		beq.s	return_1FFB6
0001E112 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E118                            
0001E118                            return_1FFB6:
0001E118 4E75                       		rts
0001E11A                            
0001E11A                            ; ===========================================================================
0001E11A                            ; ---------------------------------------------------------------------------
0001E11A                            ; Subroutine to	animate	level graphics
0001E11A                            ; ---------------------------------------------------------------------------
0001E11A                            
0001E11A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E11A                            
0001E11A                            
0001E11A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E11A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E11E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E120 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E126 6100 0000                  		bsr.w	AniArt_GiantRing
0001E12A 7000                       		moveq	#0,d0
0001E12C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E130 D040                       		add.w	d0,d0
0001E132 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E136 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E13A                            ; ===========================================================================
0001E13A                            
0001E13A                            AniArt_Pause:
0001E13A 4E75                       		rts	
0001E13C                            ; End of function AniArt_Load
0001E13C                            
0001E13C                            ; ===========================================================================
0001E13C 0000 0000                  AniArt_Index:	dc.w AniArt_none-AniArt_Index, AniArt_none-AniArt_Index
0001E140 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_none-AniArt_Index
0001E144 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_none-AniArt_Index
0001E148 0000                       		dc.w AniArt_ending-AniArt_Index
0001E14A                            ; ===========================================================================
0001E14A                            ; ---------------------------------------------------------------------------
0001E14A                            ; Animated pattern routine - Green Hill
0001E14A                            ; ---------------------------------------------------------------------------
0001E14A                            
0001E14A                            AniArt_GHZ:				; XREF: AniArt_Index
0001E14A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E14E 6A00                       		bpl.s	loc_1C08A
0001E150 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E156 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E15C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E160 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E164 0240 0001                  		andi.w	#1,d0
0001E168 6700                       		beq.s	loc_1C078
0001E16A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E16E                            
0001E16E                            loc_1C078:
0001E16E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E178 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E17C 6000 0000                  		bra.w	LoadTiles
0001E180                            ; ===========================================================================
0001E180                            
0001E180                            loc_1C08A:
0001E180 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E184 6A00                       		bpl.s	loc_1C0C0
0001E186 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E18C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E192 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E196 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E19A 0240 0001                  		andi.w	#1,d0
0001E19E 6700                       		beq.s	loc_1C0AE
0001E1A0 43E9 0200                  		lea	$200(a1),a1
0001E1A4                            
0001E1A4                            loc_1C0AE:
0001E1A4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E1AE 323C 000F                  		move.w	#$F,d1
0001E1B2 6000 0000                  		bra.w	LoadTiles
0001E1B6                            ; ===========================================================================
0001E1B6                            
0001E1B6                            loc_1C0C0:
0001E1B6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E1BA 6A00                       		bpl.s	locret_1C10C
0001E1BC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E1C2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E1C6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E1CA 0240 0003                  		andi.w	#3,d0
0001E1CE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E1D2 0800 0000                  		btst	#0,d0
0001E1D6 6600                       		bne.s	loc_1C0E8
0001E1D8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E1DE                            
0001E1DE                            loc_1C0E8:
0001E1DE EF48                       		lsl.w	#7,d0
0001E1E0 3200                       		move.w	d0,d1
0001E1E2 D040                       		add.w	d0,d0
0001E1E4 D041                       		add.w	d1,d0
0001E1E6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E1F0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E1F6 43F1 0000                  		lea	(a1,d0.w),a1
0001E1FA 323C 000B                  		move.w	#$B,d1
0001E1FE 6100 0000                  		bsr.w	LoadTiles
0001E202                            
0001E202                            locret_1C10C:
0001E202 4E75                       		rts	
0001E204                            ; ===========================================================================
0001E204 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E208                            ; ===========================================================================
0001E208                            ; ---------------------------------------------------------------------------
0001E208                            ; Animated pattern routine - Marble
0001E208                            ; ---------------------------------------------------------------------------
0001E208                            
0001E208                            AniArt_MZ:				; XREF: AniArt_Index
0001E208 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E20C 6A00                       		bpl.s	loc_1C150
0001E20E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E214 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E21A 7000                       		moveq	#0,d0
0001E21C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E220 5200                       		addq.b	#1,d0
0001E222 0C00 0003                  		cmpi.b	#3,d0
0001E226 6600                       		bne.s	loc_1C134
0001E228 7000                       		moveq	#0,d0
0001E22A                            
0001E22A                            loc_1C134:
0001E22A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E22E C0FC 0100                  		mulu.w	#$100,d0
0001E232 D2C0                       		adda.w	d0,a1
0001E234 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E23E 323C 0007                  		move.w	#7,d1
0001E242 6100 0000                  		bsr.w	LoadTiles
0001E246                            
0001E246                            loc_1C150:
0001E246 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E24A 6A00                       		bpl.s	loc_1C1AE
0001E24C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E252 7000                       		moveq	#0,d0
0001E254 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E258 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E25E EE58                       		ror.w	#7,d0
0001E260 D8C0                       		adda.w	d0,a4
0001E262 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E26C 7600                       		moveq	#0,d3
0001E26E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E272 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E276 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E27A 343C 0003                  		move.w	#3,d2
0001E27E                            
0001E27E                            loc_1C188:
0001E27E 3003                       		move.w	d3,d0
0001E280 D040                       		add.w	d0,d0
0001E282 0240 001E                  		andi.w	#$1E,d0
0001E286 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E28C 3033 0000                  		move.w	(a3,d0.w),d0
0001E290 47F3 0000                  		lea	(a3,d0.w),a3
0001E294 224C                       		movea.l	a4,a1
0001E296 323C 001F                  		move.w	#$1F,d1
0001E29A 4E93                       		jsr	(a3)
0001E29C 5843                       		addq.w	#4,d3
0001E29E 51CA FFDE                  		dbf	d2,loc_1C188
0001E2A2 4E75                       		rts	
0001E2A4                            ; ===========================================================================
0001E2A4                            
0001E2A4                            loc_1C1AE:
0001E2A4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E2A8 6A00 0000                  		bpl.w	locret_1C1EA
0001E2AC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E2B2 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E2B8 7000                       		moveq	#0,d0
0001E2BA 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E2BE 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E2C2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E2C8 C0FC 00C0                  		mulu.w	#$C0,d0
0001E2CC D2C0                       		adda.w	d0,a1
0001E2CE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E2D8 323C 0005                  		move.w	#5,d1
0001E2DC 6000 0000                  		bra.w	LoadTiles
0001E2E0                            ; ===========================================================================
0001E2E0                            
0001E2E0                            locret_1C1EA:
0001E2E0 4E75                       		rts	
0001E2E2                            ; ===========================================================================
0001E2E2                            ; ---------------------------------------------------------------------------
0001E2E2                            ; Animated pattern routine - Scrap Brain
0001E2E2                            ; ---------------------------------------------------------------------------
0001E2E2                            
0001E2E2                            AniArt_SBZ:				; XREF: AniArt_Index
0001E2E2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E2E6 6700                       		beq.s	loc_1C1F8
0001E2E8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E2EC 6000                       		bra.s	loc_1C250
0001E2EE                            ; ===========================================================================
0001E2EE                            
0001E2EE                            loc_1C1F8:
0001E2EE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E2F2 6A00                       		bpl.s	loc_1C250
0001E2F4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E2FA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E300 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E30A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E30E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E312 0240 0007                  		andi.w	#7,d0
0001E316 6700                       		beq.s	loc_1C234
0001E318 5340                       		subq.w	#1,d0
0001E31A C0FC 0180                  		mulu.w	#$180,d0
0001E31E 43F1 0000                  		lea	(a1,d0.w),a1
0001E322 323C 000B                  		move.w	#$B,d1
0001E326 6000 0000                  		bra.w	LoadTiles
0001E32A                            ; ===========================================================================
0001E32A                            
0001E32A                            loc_1C234:
0001E32A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E330                            
0001E330                            loc_1C23A:
0001E330 323C 0005                  		move.w	#5,d1
0001E334 6100 0000                  		bsr.w	LoadTiles
0001E338 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E33E 323C 0005                  		move.w	#5,d1
0001E342 6000 0000                  		bra.w	LoadTiles
0001E346                            ; ===========================================================================
0001E346                            
0001E346                            loc_1C250:
0001E346 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E34A 6700                       		beq.s	loc_1C25C
0001E34C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E350 6000                       		bra.s	locret_1C2A0
0001E352                            ; ===========================================================================
0001E352                            
0001E352                            loc_1C25C:
0001E352 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E356 6A00                       		bpl.s	locret_1C2A0
0001E358 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E35E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E364 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E36E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E372 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E376 0240 0007                  		andi.w	#7,d0
0001E37A 6700                       		beq.s	loc_1C298
0001E37C 5340                       		subq.w	#1,d0
0001E37E C0FC 0180                  		mulu.w	#$180,d0
0001E382 43F1 0000                  		lea	(a1,d0.w),a1
0001E386 323C 000B                  		move.w	#$B,d1
0001E38A 6000 0000                  		bra.w	LoadTiles
0001E38E                            ; ===========================================================================
0001E38E                            
0001E38E                            loc_1C298:
0001E38E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E394 609A                       		bra.s	loc_1C23A
0001E396                            ; ===========================================================================
0001E396                            
0001E396                            locret_1C2A0:
0001E396 4E75                       		rts	
0001E398                            ; ===========================================================================
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            ; Animated pattern routine - ending sequence
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            
0001E398                            AniArt_Ending:				; XREF: AniArt_Index
0001E398 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E39C 6A00                       		bpl.s	loc_1C2F4
0001E39E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E3A4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E3AA 45F8 9400                  		lea	($FFFF9400).w,a2
0001E3AE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E3B2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E3B6 0240 0001                  		andi.w	#1,d0
0001E3BA 6700                       		beq.s	loc_1C2CE
0001E3BC 43E9 0200                  		lea	$200(a1),a1
0001E3C0 45EA 0200                  		lea	$200(a2),a2
0001E3C4                            
0001E3C4                            loc_1C2CE:
0001E3C4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E3CE 323C 000F                  		move.w	#$F,d1
0001E3D2 6100 0000                  		bsr.w	LoadTiles
0001E3D6 224A                       		movea.l	a2,a1
0001E3D8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E3E2 323C 000F                  		move.w	#$F,d1
0001E3E6 6000 0000                  		bra.w	LoadTiles
0001E3EA                            ; ===========================================================================
0001E3EA                            
0001E3EA                            loc_1C2F4:
0001E3EA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E3EE 6A00                       		bpl.s	loc_1C33C
0001E3F0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E3F6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E3FA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E3FE 0240 0007                  		andi.w	#7,d0
0001E402 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E406 EF48                       		lsl.w	#7,d0
0001E408 3200                       		move.w	d0,d1
0001E40A D040                       		add.w	d0,d0
0001E40C D041                       		add.w	d1,d0
0001E40E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E418 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E41E 43F1 0000                  		lea	(a1,d0.w),a1
0001E422 323C 000B                  		move.w	#$B,d1
0001E426 6000 0000                  		bra.w	LoadTiles
0001E42A                            ; ===========================================================================
0001E42A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E432                            ; ===========================================================================
0001E432                            
0001E432                            loc_1C33C:
0001E432 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E436 6A00                       		bpl.s	loc_1C37A
0001E438 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E43E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E442 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E446 0240 0003                  		andi.w	#3,d0
0001E44A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E44E E148                       		lsl.w	#8,d0
0001E450 D040                       		add.w	d0,d0
0001E452 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E45C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E460 43F1 0000                  		lea	(a1,d0.w),a1
0001E464 323C 000F                  		move.w	#$F,d1
0001E468 6000 0000                  		bra.w	LoadTiles
0001E46C                            ; ===========================================================================
0001E46C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E470                            ; ===========================================================================
0001E470                            
0001E470                            loc_1C37A:
0001E470 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E474 6A00                       		bpl.s	locret_1C3B4
0001E476 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E47C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E480 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E484 0240 0003                  		andi.w	#3,d0
0001E488 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E48C E148                       		lsl.w	#8,d0
0001E48E D040                       		add.w	d0,d0
0001E490 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E49A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E49E 43F1 0000                  		lea	(a1,d0.w),a1
0001E4A2 323C 000F                  		move.w	#$F,d1
0001E4A6 6000 0000                  		bra.w	LoadTiles
0001E4AA                            ; ===========================================================================
0001E4AA                            
0001E4AA                            locret_1C3B4:
0001E4AA 4E75                       		rts	
0001E4AC                            ; ===========================================================================
0001E4AC                            
0001E4AC                            AniArt_none:				; XREF: AniArt_Index
0001E4AC 4E75                       		rts	
0001E4AE                            
0001E4AE                            ; ---------------------------------------------------------------------------
0001E4AE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E4AE                            ; ---------------------------------------------------------------------------
0001E4AE                            
0001E4AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4AE                            
0001E4AE                            
0001E4AE                            LoadTiles:
0001E4AE 2C99                       		move.l	(a1)+,(a6)
0001E4B0 2C99                       		move.l	(a1)+,(a6)
0001E4B2 2C99                       		move.l	(a1)+,(a6)
0001E4B4 2C99                       		move.l	(a1)+,(a6)
0001E4B6 2C99                       		move.l	(a1)+,(a6)
0001E4B8 2C99                       		move.l	(a1)+,(a6)
0001E4BA 2C99                       		move.l	(a1)+,(a6)
0001E4BC 2C99                       		move.l	(a1)+,(a6)
0001E4BE 51C9 FFEE                  		dbf	d1,LoadTiles
0001E4C2 4E75                       		rts	
0001E4C4                            ; End of function LoadTiles
0001E4C4                            
0001E4C4                            ; ===========================================================================
0001E4C4                            ; ---------------------------------------------------------------------------
0001E4C4                            ; Animated pattern routine - more Marble Zone
0001E4C4                            ; ---------------------------------------------------------------------------
0001E4C4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E4C8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E4CC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E4D0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E4D4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E4D8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E4DC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E4E0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E4E4                            ; ===========================================================================
0001E4E4                            
0001E4E4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E4E4 2C91                       		move.l	(a1),(a6)
0001E4E6 43E9 0010                  		lea	$10(a1),a1
0001E4EA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E4EE 4E75                       		rts	
0001E4F0                            ; ===========================================================================
0001E4F0                            
0001E4F0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E4F0 2029 0002                  		move.l	2(a1),d0
0001E4F4 1029 0001                  		move.b	1(a1),d0
0001E4F8 E098                       		ror.l	#8,d0
0001E4FA 2C80                       		move.l	d0,(a6)
0001E4FC 43E9 0010                  		lea	$10(a1),a1
0001E500 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E504 4E75                       		rts	
0001E506                            ; ===========================================================================
0001E506                            
0001E506                            loc_1C410:				; XREF: AniArt_MZextra
0001E506 2CA9 0002                  		move.l	2(a1),(a6)
0001E50A 43E9 0010                  		lea	$10(a1),a1
0001E50E 51C9 FFF6                  		dbf	d1,loc_1C410
0001E512 4E75                       		rts	
0001E514                            ; ===========================================================================
0001E514                            
0001E514                            loc_1C41E:				; XREF: AniArt_MZextra
0001E514 2029 0004                  		move.l	4(a1),d0
0001E518 1029 0003                  		move.b	3(a1),d0
0001E51C E098                       		ror.l	#8,d0
0001E51E 2C80                       		move.l	d0,(a6)
0001E520 43E9 0010                  		lea	$10(a1),a1
0001E524 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E528 4E75                       		rts	
0001E52A                            ; ===========================================================================
0001E52A                            
0001E52A                            loc_1C434:				; XREF: AniArt_MZextra
0001E52A 2CA9 0004                  		move.l	4(a1),(a6)
0001E52E 43E9 0010                  		lea	$10(a1),a1
0001E532 51C9 FFF6                  		dbf	d1,loc_1C434
0001E536 4E75                       		rts	
0001E538                            ; ===========================================================================
0001E538                            
0001E538                            loc_1C442:				; XREF: AniArt_MZextra
0001E538 2029 0006                  		move.l	6(a1),d0
0001E53C 1029 0005                  		move.b	5(a1),d0
0001E540 E098                       		ror.l	#8,d0
0001E542 2C80                       		move.l	d0,(a6)
0001E544 43E9 0010                  		lea	$10(a1),a1
0001E548 51C9 FFEE                  		dbf	d1,loc_1C442
0001E54C 4E75                       		rts	
0001E54E                            ; ===========================================================================
0001E54E                            
0001E54E                            loc_1C458:				; XREF: AniArt_MZextra
0001E54E 2CA9 0006                  		move.l	6(a1),(a6)
0001E552 43E9 0010                  		lea	$10(a1),a1
0001E556 51C9 FFF6                  		dbf	d1,loc_1C458
0001E55A 4E75                       		rts	
0001E55C                            ; ===========================================================================
0001E55C                            
0001E55C                            loc_1C466:				; XREF: AniArt_MZextra
0001E55C 2029 0008                  		move.l	8(a1),d0
0001E560 1029 0007                  		move.b	7(a1),d0
0001E564 E098                       		ror.l	#8,d0
0001E566 2C80                       		move.l	d0,(a6)
0001E568 43E9 0010                  		lea	$10(a1),a1
0001E56C 51C9 FFEE                  		dbf	d1,loc_1C466
0001E570 4E75                       		rts	
0001E572                            ; ===========================================================================
0001E572                            
0001E572                            loc_1C47C:				; XREF: AniArt_MZextra
0001E572 2CA9 0008                  		move.l	8(a1),(a6)
0001E576 43E9 0010                  		lea	$10(a1),a1
0001E57A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E57E 4E75                       		rts	
0001E580                            ; ===========================================================================
0001E580                            
0001E580                            loc_1C48A:				; XREF: AniArt_MZextra
0001E580 2029 000A                  		move.l	$A(a1),d0
0001E584 1029 0009                  		move.b	9(a1),d0
0001E588 E098                       		ror.l	#8,d0
0001E58A 2C80                       		move.l	d0,(a6)
0001E58C 43E9 0010                  		lea	$10(a1),a1
0001E590 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E594 4E75                       		rts	
0001E596                            ; ===========================================================================
0001E596                            
0001E596                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E596 2CA9 000A                  		move.l	$A(a1),(a6)
0001E59A 43E9 0010                  		lea	$10(a1),a1
0001E59E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E5A2 4E75                       		rts	
0001E5A4                            ; ===========================================================================
0001E5A4                            
0001E5A4                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E5A4 2029 000C                  		move.l	$C(a1),d0
0001E5A8 1029 000B                  		move.b	$B(a1),d0
0001E5AC E098                       		ror.l	#8,d0
0001E5AE 2C80                       		move.l	d0,(a6)
0001E5B0 43E9 0010                  		lea	$10(a1),a1
0001E5B4 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E5B8 4E75                       		rts	
0001E5BA                            ; ===========================================================================
0001E5BA                            
0001E5BA                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E5BA 2CA9 000C                  		move.l	$C(a1),(a6)
0001E5BE 43E9 0010                  		lea	$10(a1),a1
0001E5C2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E5C6 4E75                       		rts	
0001E5C8                            ; ===========================================================================
0001E5C8                            
0001E5C8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E5C8 2029 000C                  		move.l	$C(a1),d0
0001E5CC E198                       		rol.l	#8,d0
0001E5CE 1011                       		move.b	0(a1),d0
0001E5D0 2C80                       		move.l	d0,(a6)
0001E5D2 43E9 0010                  		lea	$10(a1),a1
0001E5D6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E5DA 4E75                       		rts	
0001E5DC                            ; ===========================================================================
0001E5DC                            
0001E5DC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E5DC 3CA9 000E                  		move.w	$E(a1),(a6)
0001E5E0 3C91                       		move.w	0(a1),(a6)
0001E5E2 43E9 0010                  		lea	$10(a1),a1
0001E5E6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E5EA 4E75                       		rts	
0001E5EC                            ; ===========================================================================
0001E5EC                            
0001E5EC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E5EC 2011                       		move.l	0(a1),d0
0001E5EE 1029 000F                  		move.b	$F(a1),d0
0001E5F2 E098                       		ror.l	#8,d0
0001E5F4 2C80                       		move.l	d0,(a6)
0001E5F6 43E9 0010                  		lea	$10(a1),a1
0001E5FA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E5FE 4E75                       		rts	
0001E600                            
0001E600                            ; ---------------------------------------------------------------------------
0001E600                            ; Animated pattern routine - giant ring
0001E600                            ; ---------------------------------------------------------------------------
0001E600                            
0001E600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E600                            
0001E600                            
0001E600                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E600 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E604 6600                       		bne.s	loc_1C518
0001E606 4E75                       		rts	
0001E608                            ; ===========================================================================
0001E608                            
0001E608                            loc_1C518:
0001E608 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E60E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E614 7000                       		moveq	#0,d0
0001E616 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E61A 43F1 0000                  		lea	(a1,d0.w),a1
0001E61E 0640 8000                  		addi.w	#$8000,d0
0001E622 E588                       		lsl.l	#2,d0
0001E624 E448                       		lsr.w	#2,d0
0001E626 0040 4000                  		ori.w	#$4000,d0
0001E62A 4840                       		swap	d0
0001E62C 2D40 0004                  		move.l	d0,4(a6)
0001E630 323C 000D                  		move.w	#$D,d1
0001E634 6000 FE78                  		bra.w	LoadTiles
0001E638                            ; End of function AniArt_GiantRing
0001E638                            
0001E638                            ; ===========================================================================
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            ; Object 21 - SCORE, TIME, RINGS
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            
0001E638                            Obj21:					; XREF: Obj_Index
0001E638 7000                       		moveq	#0,d0
0001E63A 1028 0024                  		move.b	$24(a0),d0
0001E63E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E642 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E646                            ; ===========================================================================
0001E646 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E648 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E64A                            ; ===========================================================================
0001E64A                            
0001E64A                            Obj21_Main:				; XREF: Obj21_Main
0001E64A 5428 0024                  		addq.b	#2,$24(a0)
0001E64E 317C 0090 0008             		move.w	#$90,8(a0)
0001E654 317C 0108 000A             		move.w	#$108,$A(a0)
0001E65A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E662 317C 86CA 0002             		move.w	#$86CA,2(a0)
0001E668 117C 0000 0001             		move.b	#0,1(a0)
0001E66E 117C 0000 0018             		move.b	#0,$18(a0)
0001E674                            
0001E674                            Obj21_Flash:				; XREF: Obj21_Main
0001E674 7000                       		moveq	#0,d0
0001E676 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E67C 6600                       		bne.s	Obj21_Display
0001E67E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E682 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001E684 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E686                            
0001E686                            Obj21_Flash2:
0001E686 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E68C 6600                       		bne.s	Obj21_Display	; if not, branch
0001E68E 5440                       		addq.w	#2,d0		; make time counter flash red
0001E690                            
0001E690                            Obj21_Display:
0001E690 1140 001A                  		move.b	d0,$1A(a0)
0001E694 4EF9 0000 EFBA             		jmp	DisplaySprite
0001E69A                            ; ===========================================================================
0001E69A                            ; ---------------------------------------------------------------------------
0001E69A                            ; Sprite mappings - SCORE, TIME, RINGS
0001E69A                            ; ---------------------------------------------------------------------------
0001E69A                            Map_obj21:
0001E69A                            	include "_maps\obj21.asm"
0001E69A                            ; --------------------------------------------------------------------------------
0001E69A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E69A                            ; --------------------------------------------------------------------------------
0001E69A                            
0001E69A                            SME_u7N7y:	
0001E69A 0000 0000                  		dc.w SME_u7N7y_8-SME_u7N7y, SME_u7N7y_36-SME_u7N7y	
0001E69E 0000 0000                  		dc.w SME_u7N7y_64-SME_u7N7y, SME_u7N7y_92-SME_u7N7y	
0001E6A2 0A                         SME_u7N7y_8:	dc.b $A
0001E6A3 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E6A8 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E6AD 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E6B2 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E6B7 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E6BC A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E6C1 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E6C6 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E6CB 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E6D0 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E6D5 0A                         SME_u7N7y_36:	dc.b $A
0001E6D6 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E6DB 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E6E0 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E6E5 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E6EA 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E6EF A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E6F4 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E6F9 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E6FE 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E703 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E708 0A                         SME_u7N7y_64:	dc.b $A
0001E709 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E70E 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E713 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E718 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E71D 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E722 A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E727 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E72C 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E731 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E736 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E73B 0A                         SME_u7N7y_92:	dc.b $A
0001E73C 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E741 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E746 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E74B 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E750 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E755 A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E75A A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E75F 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E764 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E769 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E76E                            		even
0001E76E                            		even
0001E76E                            
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E                            ; Add points subroutine
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E                            
0001E76E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E76E                            
0001E76E                            
0001E76E                            AddPoints:
0001E76E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E774 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E778 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E77C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E77E 223C 000F 423F             		move.l	#999999,d1
0001E784 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E786 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E78A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E78C 2481                       		move.l	d1,(a2)
0001E78E                            
0001E78E                            loc_1C6AC:
0001E78E 2013                       		move.l	(a3),d0
0001E790 B092                       		cmp.l	(a2),d0
0001E792 6500 0000                  		bcs.w	locret_1C6B6
0001E796 2480                       		move.l	d0,(a2)
0001E798                            
0001E798                            locret_1C6B6:
0001E798 4E75                       		rts	
0001E79A                            ; End of function AddPoints
0001E79A                            
0001E79A                            ; ---------------------------------------------------------------------------
0001E79A                            ; Subroutine to	update the HUD
0001E79A                            ; ---------------------------------------------------------------------------
0001E79A                            
0001E79A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E79A                            
0001E79A                            
0001E79A                            HudUpdate:
0001E79A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E79E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E7A2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E7A6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E7A8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E7AC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E7B2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E7B6 6100 0000                  		bsr.w	Hud_Score
0001E7BA                            
0001E7BA                            Hud_ChkRings:
0001E7BA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E7BE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E7C0 6A00                       		bpl.s	loc_1C6E4
0001E7C2 6100 0000                  		bsr.w	Hud_LoadZero
0001E7C6                            
0001E7C6                            loc_1C6E4:
0001E7C6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E7CA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E7D0 7200                       		moveq	#0,d1
0001E7D2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E7D6 6100 0000                  		bsr.w	Hud_Rings
0001E7DA                            
0001E7DA                            Hud_ChkTime:
0001E7DA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E7DE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E7E0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E7E4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E7E6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E7EA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E7F0 6700                       		beq.s	TimeOver	; if yes, branch
0001E7F2 5221                       		addq.b	#1,-(a1)
0001E7F4 0C11 003C                  		cmpi.b	#60,(a1)
0001E7F8 6500                       		bcs.s	Hud_ChkLives
0001E7FA 12BC 0000                  		move.b	#0,(a1)
0001E7FE 5221                       		addq.b	#1,-(a1)
0001E800 0C11 003C                  		cmpi.b	#60,(a1)
0001E804 6500                       		bcs.s	loc_1C734
0001E806 12BC 0000                  		move.b	#0,(a1)
0001E80A 5221                       		addq.b	#1,-(a1)
0001E80C 0C11 0009                  		cmpi.b	#9,(a1)
0001E810 6500                       		bcs.s	loc_1C734
0001E812 12BC 0009                  		move.b	#9,(a1)
0001E816                            
0001E816                            loc_1C734:
0001E816 203C 5E40 0003             		move.l	#$5E400003,d0
0001E81C 7200                       		moveq	#0,d1
0001E81E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E822 6100 0000                  		bsr.w	Hud_Mins
0001E826 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001E82C 7200                       		moveq	#0,d1
0001E82E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E832 6100 0000                  		bsr.w	Hud_Secs
0001E836                            
0001E836                            Hud_ChkLives:
0001E836 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E83A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001E83C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E840 6100 0000                  		bsr.w	Hud_Lives
0001E844                            
0001E844                            Hud_ChkBonus:
0001E844 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001E848 6700                       		beq.s	Hud_End		; if not, branch
0001E84A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E84E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001E858 7200                       		moveq	#0,d1
0001E85A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E85E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E862 7200                       		moveq	#0,d1
0001E864 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E868 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E86C                            
0001E86C                            Hud_End:
0001E86C 4E75                       		rts	
0001E86E                            ; ===========================================================================
0001E86E                            
0001E86E                            TimeOver:				; XREF: Hud_ChkTime
0001E86E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E872 41F8 D000                  		lea	($FFFFD000).w,a0
0001E876 2448                       		movea.l	a0,a2
0001E878 6100 E67A                  		bsr.w	KillSonic
0001E87C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E882 4E75                       		rts	
0001E884                            ; ===========================================================================
0001E884                            
0001E884                            HudDebug:				; XREF: HudUpdate
0001E884 6100 0000                  		bsr.w	HudDb_XY
0001E888 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E88C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E88E 6A00                       		bpl.s	HudDb_Rings
0001E890 6100 0000                  		bsr.w	Hud_LoadZero
0001E894                            
0001E894                            HudDb_Rings:
0001E894 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E898 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E89E 7200                       		moveq	#0,d1
0001E8A0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E8A4 6100 0000                  		bsr.w	Hud_Rings
0001E8A8                            
0001E8A8                            HudDb_ObjCount:
0001E8A8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E8AE 7200                       		moveq	#0,d1
0001E8B0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E8B4 6100 0000                  		bsr.w	Hud_Secs
0001E8B8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E8BC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E8BE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E8C2 6100 0000                  		bsr.w	Hud_Lives
0001E8C6                            
0001E8C6                            HudDb_ChkBonus:
0001E8C6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E8CA 6700                       		beq.s	HudDb_End	; if not, branch
0001E8CC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E8D0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E8DA 7200                       		moveq	#0,d1
0001E8DC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E8E0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E8E4 7200                       		moveq	#0,d1
0001E8E6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E8EA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E8EE                            
0001E8EE                            HudDb_End:
0001E8EE 4E75                       		rts	
0001E8F0                            ; End of function HudUpdate
0001E8F0                            
0001E8F0                            ; ---------------------------------------------------------------------------
0001E8F0                            ; Subroutine to	load "0" on the	HUD
0001E8F0                            ; ---------------------------------------------------------------------------
0001E8F0                            
0001E8F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8F0                            
0001E8F0                            
0001E8F0                            Hud_LoadZero:				; XREF: HudUpdate
0001E8F0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E8FA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E8FE 343C 0002                  		move.w	#2,d2
0001E902 6000                       		bra.s	loc_1C83E
0001E904                            ; End of function Hud_LoadZero
0001E904                            
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            
0001E904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E904                            
0001E904                            
0001E904                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E904 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E90A 6100 0000                  		bsr.w	Hud_Lives
0001E90E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E918 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E91C 343C 000E                  		move.w	#$E,d2
0001E920                            
0001E920                            loc_1C83E:				; XREF: Hud_LoadZero
0001E920 43FA 0000                  		lea	Art_Hud(pc),a1
0001E924                            
0001E924                            loc_1C842:
0001E924 323C 000F                  		move.w	#$F,d1
0001E928 101A                       		move.b	(a2)+,d0
0001E92A 6B00                       		bmi.s	loc_1C85E
0001E92C 4880                       		ext.w	d0
0001E92E EB48                       		lsl.w	#5,d0
0001E930 47F1 0000                  		lea	(a1,d0.w),a3
0001E934                            
0001E934                            loc_1C852:
0001E934 2C9B                       		move.l	(a3)+,(a6)
0001E936 51C9 FFFC                  		dbf	d1,loc_1C852
0001E93A                            
0001E93A                            loc_1C858:
0001E93A 51CA FFE8                  		dbf	d2,loc_1C842
0001E93E                            
0001E93E 4E75                       		rts	
0001E940                            ; ===========================================================================
0001E940                            
0001E940                            loc_1C85E:
0001E940 2CBC 0000 0000             		move.l	#0,(a6)
0001E946 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E94A                            
0001E94A 60EE                       		bra.s	loc_1C858
0001E94C                            ; End of function Hud_Base
0001E94C                            
0001E94C                            ; ===========================================================================
0001E94C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001E958 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            ; Subroutine to	load debug mode	numbers	patterns
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            
0001E95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E95C                            
0001E95C                            
0001E95C                            HudDb_XY:				; XREF: HudDebug
0001E95C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E966 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E96A 4841                       		swap	d1
0001E96C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E970 6100                       		bsr.s	HudDb_XY2
0001E972 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E976 4841                       		swap	d1
0001E978 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E97C                            ; End of function HudDb_XY
0001E97C                            
0001E97C                            
0001E97C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E97C                            
0001E97C                            
0001E97C                            HudDb_XY2:
0001E97C 7C07                       		moveq	#7,d6
0001E97E 43F9 0000 0374             		lea	(Art_Text).l,a1
0001E984                            
0001E984                            HudDb_XYLoop:
0001E984 E959                       		rol.w	#4,d1
0001E986 3401                       		move.w	d1,d2
0001E988 0242 000F                  		andi.w	#$F,d2
0001E98C 0C42 000A                  		cmpi.w	#$A,d2
0001E990 6500                       		bcs.s	loc_1C8B2
0001E992 5E42                       		addq.w	#7,d2
0001E994                            
0001E994                            loc_1C8B2:
0001E994 EB4A                       		lsl.w	#5,d2
0001E996 47F1 2000                  		lea	(a1,d2.w),a3
0001E99A 2C9B                       		move.l	(a3)+,(a6)
0001E99C 2C9B                       		move.l	(a3)+,(a6)
0001E99E 2C9B                       		move.l	(a3)+,(a6)
0001E9A0 2C9B                       		move.l	(a3)+,(a6)
0001E9A2 2C9B                       		move.l	(a3)+,(a6)
0001E9A4 2C9B                       		move.l	(a3)+,(a6)
0001E9A6 2C9B                       		move.l	(a3)+,(a6)
0001E9A8 2C9B                       		move.l	(a3)+,(a6)
0001E9AA 4841                       		swap	d1
0001E9AC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E9B0                            
0001E9B0 4E75                       		rts	
0001E9B2                            ; End of function HudDb_XY2
0001E9B2                            
0001E9B2                            ; ---------------------------------------------------------------------------
0001E9B2                            ; Subroutine to	load rings numbers patterns
0001E9B2                            ; ---------------------------------------------------------------------------
0001E9B2                            
0001E9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9B2                            
0001E9B2                            
0001E9B2                            Hud_Rings:				; XREF: HudUpdate
0001E9B2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E9B8 7C02                       		moveq	#2,d6
0001E9BA 6000                       		bra.s	Hud_LoadArt
0001E9BC                            ; End of function Hud_Rings
0001E9BC                            
0001E9BC                            ; ---------------------------------------------------------------------------
0001E9BC                            ; Subroutine to	load score numbers patterns
0001E9BC                            ; ---------------------------------------------------------------------------
0001E9BC                            
0001E9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9BC                            
0001E9BC                            
0001E9BC                            Hud_Score:				; XREF: HudUpdate
0001E9BC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E9C2 7C05                       		moveq	#5,d6
0001E9C4                            
0001E9C4                            Hud_LoadArt:
0001E9C4 7800                       		moveq	#0,d4
0001E9C6 43FA 0000                  		lea	Art_Hud(pc),a1
0001E9CA                            
0001E9CA                            Hud_ScoreLoop:
0001E9CA 7400                       		moveq	#0,d2
0001E9CC 261A                       		move.l	(a2)+,d3
0001E9CE                            
0001E9CE                            loc_1C8EC:
0001E9CE 9283                       		sub.l	d3,d1
0001E9D0 6500                       		bcs.s	loc_1C8F4
0001E9D2 5242                       		addq.w	#1,d2
0001E9D4 60F8                       		bra.s	loc_1C8EC
0001E9D6                            ; ===========================================================================
0001E9D6                            
0001E9D6                            loc_1C8F4:
0001E9D6 D283                       		add.l	d3,d1
0001E9D8 4A42                       		tst.w	d2
0001E9DA 6700                       		beq.s	loc_1C8FE
0001E9DC 383C 0001                  		move.w	#1,d4
0001E9E0                            
0001E9E0                            loc_1C8FE:
0001E9E0 4A44                       		tst.w	d4
0001E9E2 6700                       		beq.s	loc_1C92C
0001E9E4 ED4A                       		lsl.w	#6,d2
0001E9E6 2D40 0004                  		move.l	d0,4(a6)
0001E9EA 47F1 2000                  		lea	(a1,d2.w),a3
0001E9EE 2C9B                       		move.l	(a3)+,(a6)
0001E9F0 2C9B                       		move.l	(a3)+,(a6)
0001E9F2 2C9B                       		move.l	(a3)+,(a6)
0001E9F4 2C9B                       		move.l	(a3)+,(a6)
0001E9F6 2C9B                       		move.l	(a3)+,(a6)
0001E9F8 2C9B                       		move.l	(a3)+,(a6)
0001E9FA 2C9B                       		move.l	(a3)+,(a6)
0001E9FC 2C9B                       		move.l	(a3)+,(a6)
0001E9FE 2C9B                       		move.l	(a3)+,(a6)
0001EA00 2C9B                       		move.l	(a3)+,(a6)
0001EA02 2C9B                       		move.l	(a3)+,(a6)
0001EA04 2C9B                       		move.l	(a3)+,(a6)
0001EA06 2C9B                       		move.l	(a3)+,(a6)
0001EA08 2C9B                       		move.l	(a3)+,(a6)
0001EA0A 2C9B                       		move.l	(a3)+,(a6)
0001EA0C 2C9B                       		move.l	(a3)+,(a6)
0001EA0E                            
0001EA0E                            loc_1C92C:
0001EA0E 0680 0040 0000             		addi.l	#$400000,d0
0001EA14 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EA18                            
0001EA18 4E75                       		rts	
0001EA1A                            ; End of function Hud_Score
0001EA1A                            
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A                            ; Subroutine to	load countdown numbers on the continue screen
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A                            
0001EA1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA1A                            
0001EA1A                            
0001EA1A                            ContScrCounter:				; XREF: ContinueScreen
0001EA1A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EA24 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EA2A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EA30 7C01                       		moveq	#1,d6
0001EA32 7800                       		moveq	#0,d4
0001EA34 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EA38                            
0001EA38                            ContScr_Loop:
0001EA38 7400                       		moveq	#0,d2
0001EA3A 261A                       		move.l	(a2)+,d3
0001EA3C                            
0001EA3C                            loc_1C95A:
0001EA3C 9283                       		sub.l	d3,d1
0001EA3E 6500                       		bcs.s	loc_1C962
0001EA40 5242                       		addq.w	#1,d2
0001EA42 60F8                       		bra.s	loc_1C95A
0001EA44                            ; ===========================================================================
0001EA44                            
0001EA44                            loc_1C962:
0001EA44 D283                       		add.l	d3,d1
0001EA46 ED4A                       		lsl.w	#6,d2
0001EA48 47F1 2000                  		lea	(a1,d2.w),a3
0001EA4C 2C9B                       		move.l	(a3)+,(a6)
0001EA4E 2C9B                       		move.l	(a3)+,(a6)
0001EA50 2C9B                       		move.l	(a3)+,(a6)
0001EA52 2C9B                       		move.l	(a3)+,(a6)
0001EA54 2C9B                       		move.l	(a3)+,(a6)
0001EA56 2C9B                       		move.l	(a3)+,(a6)
0001EA58 2C9B                       		move.l	(a3)+,(a6)
0001EA5A 2C9B                       		move.l	(a3)+,(a6)
0001EA5C 2C9B                       		move.l	(a3)+,(a6)
0001EA5E 2C9B                       		move.l	(a3)+,(a6)
0001EA60 2C9B                       		move.l	(a3)+,(a6)
0001EA62 2C9B                       		move.l	(a3)+,(a6)
0001EA64 2C9B                       		move.l	(a3)+,(a6)
0001EA66 2C9B                       		move.l	(a3)+,(a6)
0001EA68 2C9B                       		move.l	(a3)+,(a6)
0001EA6A 2C9B                       		move.l	(a3)+,(a6)
0001EA6C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EA70                            
0001EA70 4E75                       		rts	
0001EA72                            ; End of function ContScrCounter
0001EA72                            
0001EA72                            ; ===========================================================================
0001EA72                            ; ---------------------------------------------------------------------------
0001EA72                            ; HUD counter sizes
0001EA72                            ; ---------------------------------------------------------------------------
0001EA72 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EA76 0000 2710                  Hud_10000:	dc.l 10000
0001EA7A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EA7E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EA82 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EA86 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EA8A                            
0001EA8A                            ; ---------------------------------------------------------------------------
0001EA8A                            ; Subroutine to	load time numbers patterns
0001EA8A                            ; ---------------------------------------------------------------------------
0001EA8A                            
0001EA8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA8A                            
0001EA8A                            
0001EA8A                            Hud_Mins:				; XREF: Hud_ChkTime
0001EA8A 45F9 0001 EA86             		lea	(Hud_1).l,a2
0001EA90 7C00                       		moveq	#0,d6
0001EA92 6000                       		bra.s	loc_1C9BA
0001EA94                            ; End of function Hud_Mins
0001EA94                            
0001EA94                            
0001EA94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA94                            
0001EA94                            
0001EA94                            Hud_Secs:				; XREF: Hud_ChkTime
0001EA94 45F9 0001 EA82             		lea	(Hud_10).l,a2
0001EA9A 7C01                       		moveq	#1,d6
0001EA9C                            
0001EA9C                            loc_1C9BA:
0001EA9C 7800                       		moveq	#0,d4
0001EA9E 43FA 0000                  		lea	Art_Hud(pc),a1
0001EAA2                            
0001EAA2                            Hud_TimeLoop:
0001EAA2 7400                       		moveq	#0,d2
0001EAA4 261A                       		move.l	(a2)+,d3
0001EAA6                            
0001EAA6                            loc_1C9C4:
0001EAA6 9283                       		sub.l	d3,d1
0001EAA8 6500                       		bcs.s	loc_1C9CC
0001EAAA 5242                       		addq.w	#1,d2
0001EAAC 60F8                       		bra.s	loc_1C9C4
0001EAAE                            ; ===========================================================================
0001EAAE                            
0001EAAE                            loc_1C9CC:
0001EAAE D283                       		add.l	d3,d1
0001EAB0 4A42                       		tst.w	d2
0001EAB2 6700                       		beq.s	loc_1C9D6
0001EAB4 383C 0001                  		move.w	#1,d4
0001EAB8                            
0001EAB8                            loc_1C9D6:
0001EAB8 ED4A                       		lsl.w	#6,d2
0001EABA 2D40 0004                  		move.l	d0,4(a6)
0001EABE 47F1 2000                  		lea	(a1,d2.w),a3
0001EAC2 2C9B                       		move.l	(a3)+,(a6)
0001EAC4 2C9B                       		move.l	(a3)+,(a6)
0001EAC6 2C9B                       		move.l	(a3)+,(a6)
0001EAC8 2C9B                       		move.l	(a3)+,(a6)
0001EACA 2C9B                       		move.l	(a3)+,(a6)
0001EACC 2C9B                       		move.l	(a3)+,(a6)
0001EACE 2C9B                       		move.l	(a3)+,(a6)
0001EAD0 2C9B                       		move.l	(a3)+,(a6)
0001EAD2 2C9B                       		move.l	(a3)+,(a6)
0001EAD4 2C9B                       		move.l	(a3)+,(a6)
0001EAD6 2C9B                       		move.l	(a3)+,(a6)
0001EAD8 2C9B                       		move.l	(a3)+,(a6)
0001EADA 2C9B                       		move.l	(a3)+,(a6)
0001EADC 2C9B                       		move.l	(a3)+,(a6)
0001EADE 2C9B                       		move.l	(a3)+,(a6)
0001EAE0 2C9B                       		move.l	(a3)+,(a6)
0001EAE2 0680 0040 0000             		addi.l	#$400000,d0
0001EAE8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EAEC                            
0001EAEC 4E75                       		rts	
0001EAEE                            ; End of function Hud_Secs
0001EAEE                            
0001EAEE                            ; ---------------------------------------------------------------------------
0001EAEE                            ; Subroutine to	load time/ring bonus numbers patterns
0001EAEE                            ; ---------------------------------------------------------------------------
0001EAEE                            
0001EAEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAEE                            
0001EAEE                            
0001EAEE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EAEE 45F9 0001 EA7A             		lea	(Hud_1000).l,a2
0001EAF4 7C03                       		moveq	#3,d6
0001EAF6 7800                       		moveq	#0,d4
0001EAF8 43FA 0000                  		lea	Art_Hud(pc),a1
0001EAFC                            
0001EAFC                            Hud_BonusLoop:
0001EAFC 7400                       		moveq	#0,d2
0001EAFE 261A                       		move.l	(a2)+,d3
0001EB00                            
0001EB00                            loc_1CA1E:
0001EB00 9283                       		sub.l	d3,d1
0001EB02 6500                       		bcs.s	loc_1CA26
0001EB04 5242                       		addq.w	#1,d2
0001EB06 60F8                       		bra.s	loc_1CA1E
0001EB08                            ; ===========================================================================
0001EB08                            
0001EB08                            loc_1CA26:
0001EB08 D283                       		add.l	d3,d1
0001EB0A 4A42                       		tst.w	d2
0001EB0C 6700                       		beq.s	loc_1CA30
0001EB0E 383C 0001                  		move.w	#1,d4
0001EB12                            
0001EB12                            loc_1CA30:
0001EB12 4A44                       		tst.w	d4
0001EB14 6700                       		beq.s	Hud_ClrBonus
0001EB16 ED4A                       		lsl.w	#6,d2
0001EB18 47F1 2000                  		lea	(a1,d2.w),a3
0001EB1C 2C9B                       		move.l	(a3)+,(a6)
0001EB1E 2C9B                       		move.l	(a3)+,(a6)
0001EB20 2C9B                       		move.l	(a3)+,(a6)
0001EB22 2C9B                       		move.l	(a3)+,(a6)
0001EB24 2C9B                       		move.l	(a3)+,(a6)
0001EB26 2C9B                       		move.l	(a3)+,(a6)
0001EB28 2C9B                       		move.l	(a3)+,(a6)
0001EB2A 2C9B                       		move.l	(a3)+,(a6)
0001EB2C 2C9B                       		move.l	(a3)+,(a6)
0001EB2E 2C9B                       		move.l	(a3)+,(a6)
0001EB30 2C9B                       		move.l	(a3)+,(a6)
0001EB32 2C9B                       		move.l	(a3)+,(a6)
0001EB34 2C9B                       		move.l	(a3)+,(a6)
0001EB36 2C9B                       		move.l	(a3)+,(a6)
0001EB38 2C9B                       		move.l	(a3)+,(a6)
0001EB3A 2C9B                       		move.l	(a3)+,(a6)
0001EB3C                            
0001EB3C                            loc_1CA5A:
0001EB3C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EB40                            
0001EB40 4E75                       		rts	
0001EB42                            ; ===========================================================================
0001EB42                            
0001EB42                            Hud_ClrBonus:
0001EB42 7A0F                       		moveq	#$F,d5
0001EB44                            
0001EB44                            Hud_ClrBonusLoop:
0001EB44 2CBC 0000 0000             		move.l	#0,(a6)
0001EB4A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EB4E                            
0001EB4E 60EC                       		bra.s	loc_1CA5A
0001EB50                            ; End of function Hud_TimeRingBonus
0001EB50                            
0001EB50                            ; ---------------------------------------------------------------------------
0001EB50                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EB50                            ; ---------------------------------------------------------------------------
0001EB50                            
0001EB50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB50                            
0001EB50                            
0001EB50                            Hud_Lives:				; XREF: Hud_ChkLives
0001EB50 203C 7B20 0003             		move.l	#$7B200003,d0	; set VRAM address
0001EB56 7200                       		moveq	#0,d1
0001EB58 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EB5C 45F9 0001 EA82             		lea	(Hud_10).l,a2
0001EB62 7C01                       		moveq	#1,d6
0001EB64 7800                       		moveq	#0,d4
0001EB66 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EB6A 2D40 0004                  		move.l	d0,4(a6)
0001EB6E                            
0001EB6E                            Hud_LivesLoop:
0001EB6E 7400                       		moveq	#0,d2
0001EB70 261A                       		move.l	(a2)+,d3
0001EB72                            
0001EB72                            loc_1CA90:
0001EB72 9283                       		sub.l	d3,d1
0001EB74 6500                       		bcs.s	loc_1CA98
0001EB76 5242                       		addq.w	#1,d2
0001EB78 60F8                       		bra.s	loc_1CA90
0001EB7A                            ; ===========================================================================
0001EB7A                            
0001EB7A                            loc_1CA98:
0001EB7A D283                       		add.l	d3,d1
0001EB7C 4A42                       		tst.w	d2
0001EB7E 6700                       		beq.s	loc_1CAA2
0001EB80 383C 0001                  		move.w	#1,d4
0001EB84                            
0001EB84                            loc_1CAA2:
0001EB84 4A44                       		tst.w	d4
0001EB86 6700                       		beq.s	@chk
0001EB88 4A46                       		tst.w	d6
0001EB8A 6700                       		beq.s	loc_1CAA6
0001EB8C 0C42 0001                  		cmpi.w	#1,d2
0001EB90 6700                       		beq.s	Hud_Lives_Draw10
0001EB92 6000                       		bra.s	loc_1CAA6
0001EB94                            
0001EB94                            @chk:
0001EB94 4A46                       		tst.w	d6
0001EB96 6700                       		beq.s	Hud_Lives_DrawDigit
0001EB98 6000                       		bra.s	Hud_Lives_End
0001EB9A                            
0001EB9A                            loc_1CAA6:
0001EB9A 4A46                       		tst.w	d6
0001EB9C 6600                       		bne.s	Hud_Lives_DrawDigit
0001EB9E 7200                       		moveq	#0,d1
0001EBA0 1238 FE12                  		move.b	($FFFFFE12).w,d1
0001EBA4 82FC 000A                  		divu.w	#10,d1
0001EBA8 4841                       		swap	d1
0001EBAA 4A41                       		tst.w	d1
0001EBAC 6700                       		beq.s	Hud_Lives_DrawBlank
0001EBAE                            
0001EBAE                            Hud_Lives_DrawDigit:
0001EBAE EB4A                       		lsl.w	#5,d2
0001EBB0 47F1 2000                  		lea	(a1,d2.w),a3
0001EBB4 2C9B                       		move.l	(a3)+,(a6)
0001EBB6 2C9B                       		move.l	(a3)+,(a6)
0001EBB8 2C9B                       		move.l	(a3)+,(a6)
0001EBBA 2C9B                       		move.l	(a3)+,(a6)
0001EBBC 2C9B                       		move.l	(a3)+,(a6)
0001EBBE 2C9B                       		move.l	(a3)+,(a6)
0001EBC0 2C9B                       		move.l	(a3)+,(a6)
0001EBC2 2C9B                       		move.l	(a3)+,(a6)
0001EBC4 0680 0040 0000             		addi.l	#$400000,d0
0001EBCA 2D40 0004                  		move.l	d0,4(a6)
0001EBCE                            		
0001EBCE                            Hud_Lives_Draw10:
0001EBCE 4A46                       		tst.w	d6
0001EBD0 6700                       		beq.s	Hud_Lives_End
0001EBD2 343C 0140                  		move.w	#10*$20,d2
0001EBD6 47F1 2000                  		lea	(a1,d2.w),a3
0001EBDA 2C9B                       		move.l	(a3)+,(a6)
0001EBDC 2C9B                       		move.l	(a3)+,(a6)
0001EBDE 2C9B                       		move.l	(a3)+,(a6)
0001EBE0 2C9B                       		move.l	(a3)+,(a6)
0001EBE2 2C9B                       		move.l	(a3)+,(a6)
0001EBE4 2C9B                       		move.l	(a3)+,(a6)
0001EBE6 2C9B                       		move.l	(a3)+,(a6)
0001EBE8 2C9B                       		move.l	(a3)+,(a6)
0001EBEA 0680 0040 0000             		addi.l	#$400000,d0
0001EBF0 2D40 0004                  		move.l	d0,4(a6)
0001EBF4                            		
0001EBF4                            Hud_Lives_End:
0001EBF4 51CE FF78                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EBF8 4E75                       		rts	
0001EBFA                            ; ===========================================================================
0001EBFA                            
0001EBFA                            Hud_Lives_DrawBlank:
0001EBFA 7A07                       		moveq	#7,d5
0001EBFC                            
0001EBFC                            Hud_Lives_DrawBlankLoop:
0001EBFC 2CBC 0000 0000             		move.l	#0,(a6)
0001EC02 51CD FFF8                  		dbf	d5,Hud_Lives_DrawBlankLoop
0001EC06 0680 0040 0000             		addi.l	#$400000,d0
0001EC0C 2D40 0004                  		move.l	d0,4(a6)
0001EC10 60E2                       		bra.s	Hud_Lives_End
0001EC12                            ; End of function Hud_Lives
0001EC12                            
0001EC12                            ; ===========================================================================
0001EC12                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001EF12                            		even
0001EF12                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F072                            		even
0001F072                            ; ===========================================================================
0001F072                            ; ---------------------------------------------------------------------------
0001F072                            ; When debug mode is currently in use
0001F072                            ; ---------------------------------------------------------------------------
0001F072                            
0001F072                            DebugMode:				; XREF: Obj01; Obj09
0001F072 7000                       		moveq	#0,d0
0001F074 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F078 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F07C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F080                            ; ===========================================================================
0001F080 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F082 0000                       		dc.w Debug_Skip-Debug_Index
0001F084                            ; ===========================================================================
0001F084                            
0001F084                            Debug_Main:				; XREF: Debug_Index
0001F084 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F088 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F08E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F094 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F09A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F0A0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F0A6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F0AC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F0B2 117C 0000 001A             		move.b	#0,$1A(a0)
0001F0B8 117C 0000 001C             		move.b	#0,$1C(a0)
0001F0BE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F0C4 6600                       		bne.s	Debug_Zone	; if not, branch
0001F0C6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F0CC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F0D2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F0D4 6000                       		bra.s	Debug_UseList
0001F0D6                            ; ===========================================================================
0001F0D6                            
0001F0D6                            Debug_Zone:
0001F0D6 7000                       		moveq	#0,d0
0001F0D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F0DC                            
0001F0DC                            Debug_UseList:
0001F0DC 45F9 0000 0000             		lea	(DebugList).l,a2
0001F0E2 D040                       		add.w	d0,d0
0001F0E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F0E8 3C1A                       		move.w	(a2)+,d6
0001F0EA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F0EE 6200                       		bhi.s	loc_1CF9E
0001F0F0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F0F6                            
0001F0F6                            loc_1CF9E:
0001F0F6 6100 0000                  		bsr.w	Debug_ShowItem
0001F0FA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F100 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F106                            
0001F106                            Debug_Skip:				; XREF: Debug_Index
0001F106 7006                       		moveq	#6,d0
0001F108 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F10E 6700                       		beq.s	loc_1CFBE
0001F110 7000                       		moveq	#0,d0
0001F112 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F116                            
0001F116                            loc_1CFBE:
0001F116 45F9 0000 0000             		lea	(DebugList).l,a2
0001F11C D040                       		add.w	d0,d0
0001F11E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F122 3C1A                       		move.w	(a2)+,d6
0001F124 6100 0000                  		bsr.w	Debug_Control
0001F128 4EF9 0000 EFBA             		jmp	DisplaySprite
0001F12E                            
0001F12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F12E                            
0001F12E                            
0001F12E                            Debug_Control:
0001F12E 7800                       		moveq	#0,d4
0001F130 323C 0001                  		move.w	#1,d1
0001F134 1838 F605                  		move.b	($FFFFF605).w,d4
0001F138 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F13C 6600                       		bne.s	loc_1D018	; if yes, branch
0001F13E 1038 F604                  		move.b	($FFFFF604).w,d0
0001F142 0240 000F                  		andi.w	#$F,d0
0001F146 6600                       		bne.s	loc_1D000
0001F148 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F14E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F154 6000 0000                  		bra.w	Debug_BackItem
0001F158                            ; ===========================================================================
0001F158                            
0001F158                            loc_1D000:
0001F158 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F15C 6600                       		bne.s	loc_1D01C
0001F15E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F164 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F168 6600                       		bne.s	loc_1D018
0001F16A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F170                            
0001F170                            loc_1D018:
0001F170 1838 F604                  		move.b	($FFFFF604).w,d4
0001F174                            
0001F174                            loc_1D01C:
0001F174 7200                       		moveq	#0,d1
0001F176 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F17A 5241                       		addq.w	#1,d1
0001F17C 4841                       		swap	d1
0001F17E E881                       		asr.l	#4,d1
0001F180 2428 000C                  		move.l	$C(a0),d2
0001F184 2628 0008                  		move.l	8(a0),d3
0001F188 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F18C 6700                       		beq.s	loc_1D03C	; if not, branch
0001F18E 9481                       		sub.l	d1,d2
0001F190 6400                       		bcc.s	loc_1D03C
0001F192 7400                       		moveq	#0,d2
0001F194                            
0001F194                            loc_1D03C:
0001F194 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F198 6700                       		beq.s	loc_1D052	; if not, branch
0001F19A D481                       		add.l	d1,d2
0001F19C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F1A2 6500                       		bcs.s	loc_1D052
0001F1A4 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F1AA                            
0001F1AA                            loc_1D052:
0001F1AA 0804 0002                  		btst	#2,d4
0001F1AE 6700                       		beq.s	loc_1D05E
0001F1B0 9681                       		sub.l	d1,d3
0001F1B2 6400                       		bcc.s	loc_1D05E
0001F1B4 7600                       		moveq	#0,d3
0001F1B6                            
0001F1B6                            loc_1D05E:
0001F1B6 0804 0003                  		btst	#3,d4
0001F1BA 6700                       		beq.s	loc_1D066
0001F1BC D681                       		add.l	d1,d3
0001F1BE                            
0001F1BE                            loc_1D066:
0001F1BE 2142 000C                  		move.l	d2,$C(a0)
0001F1C2 2143 0008                  		move.l	d3,8(a0)
0001F1C6                            
0001F1C6                            Debug_BackItem:
0001F1C6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F1CC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F1CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F1D4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F1D6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F1DA 6400                       		bcc.s	Debug_NoLoop
0001F1DC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F1E0 6000                       		bra.s	Debug_NoLoop
0001F1E2                            ; ===========================================================================
0001F1E2                            
0001F1E2                            Debug_NextItem:
0001F1E2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F1E8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F1EA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F1EE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F1F2 6200                       		bhi.s	Debug_NoLoop
0001F1F4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F1FA                            
0001F1FA                            Debug_NoLoop:
0001F1FA 6000 0000                  		bra.w	Debug_ShowItem
0001F1FE                            ; ===========================================================================
0001F1FE                            
0001F1FE                            Debug_MakeItem:
0001F1FE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F204 6700                       		beq.s	Debug_Exit	; if not, branch
0001F206 4EB9 0000 F44E             		jsr	SingleObjLoad
0001F20C 6600                       		bne.s	Debug_Exit
0001F20E 3368 0008 0008             		move.w	8(a0),8(a1)
0001F214 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F21A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F21E 1368 0001 0001             		move.b	1(a0),1(a1)
0001F224 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F22A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F230 7000                       		moveq	#0,d0
0001F232 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F236 E748                       		lsl.w	#3,d0
0001F238 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F23E 4E75                       		rts	
0001F240                            ; ===========================================================================
0001F240                            
0001F240                            Debug_Exit:
0001F240 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F246 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F248 7000                       		moveq	#0,d0
0001F24A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F24E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F256 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F25C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F260 3140 000A                  		move.w	d0,$A(a0)
0001F264 3140 000E                  		move.w	d0,$E(a0)
0001F268 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F26E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F274 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F27A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F27C 4278 F780                  		clr.w	($FFFFF780).w
0001F280 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F286 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F28E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F294 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F29A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F2A0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F2A6                            
0001F2A6                            Debug_DoNothing:
0001F2A6 4E75                       		rts	
0001F2A8                            ; End of function Debug_Control
0001F2A8                            
0001F2A8                            
0001F2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2A8                            
0001F2A8                            
0001F2A8                            Debug_ShowItem:				; XREF: Debug_Main
0001F2A8 7000                       		moveq	#0,d0
0001F2AA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F2AE E748                       		lsl.w	#3,d0
0001F2B0 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F2B6 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F2BC 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F2C2 4E75                       		rts	
0001F2C4                            ; End of function Debug_ShowItem
0001F2C4                            
0001F2C4                            ; ===========================================================================
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            ; Debug	list pointers
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            DebugList:
0001F2C4                            	include "_inc\Debug list pointers.asm"
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            ; Debug	list pointers
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4 0000                       	dc.w Debug_GHZ-DebugList
0001F2C6 0000                       	dc.w Debug_LZ-DebugList
0001F2C8 0000                       	dc.w Debug_MZ-DebugList
0001F2CA 0000                       	dc.w Debug_SLZ-DebugList
0001F2CC 0000                       	dc.w Debug_SYZ-DebugList
0001F2CE 0000                       	dc.w Debug_SBZ-DebugList
0001F2D0 0000                       	dc.w Debug_Ending-DebugList
0001F2D0 0000                       	dc.w Debug_Ending-DebugList
0001F2D2                            
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2                            ; Debug	list - Green Hill
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2                            Debug_GHZ:
0001F2D2                            	include "_inc\Debug list - GHZ.asm"
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2                            ; Debug	list - Green Hill
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2 0010                       	dc.w $10			; number of items in list
0001F2D4 2500 B718                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F2D8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001F2DC 2600 BD14                  	dc.l Map_obj26+$26000000
0001F2E0 0000 0680                  	dc.b 0,	0, 6, $80
0001F2E4 1F00 AE96                  	dc.l Map_obj1F+$1F000000
0001F2E8 0000 0400                  	dc.b 0,	0, 4, 0
0001F2EC 2200 B176                  	dc.l Map_obj22+$22000000
0001F2F0 0000 0444                  	dc.b 0,	0, 4, $44
0001F2F4 2B00 C354                  	dc.l Map_obj2B+$2B000000
0001F2F8 0000 047B                  	dc.b 0,	0, 4, $7B
0001F2FC 3600 E9BA                  	dc.l Map_obj36+$36000000
0001F300 0000 051B                  	dc.b 0,	0, 5, $1B
0001F304 1800 9894                  	dc.l Map_obj18+$18000000
0001F308 0000 4000                  	dc.b 0,	0, $40,	0
0001F30C 3B00 EAE0                  	dc.l Map_obj3B+$3B000000
0001F310 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F314 4001 1166                  	dc.l Map_obj40+$40000000
0001F318 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F31C 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F320 0000 0523                  	dc.b 0,	0, 5, $23
0001F324 4200 F916                  	dc.l Map_obj42+$42000000
0001F328 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F32C 4400 FC24                  	dc.l Map_obj44+$44000000
0001F330 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F334 1900 9902                  	dc.l Map_obj48+$19000000
0001F338 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F33C 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F340 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F344 4B00 B758                  	dc.l Map_obj4B+$4B000000
0001F348 0000 2400                  	dc.b 0,	0, $24,	0
0001F34C 7D01 904C                  	dc.l Map_obj7D+$7D000000
0001F350 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F354                            	even
0001F354                            	even
0001F354                            
0001F354                            ; ---------------------------------------------------------------------------
0001F354                            ; Debug	list - Labyrinth
0001F354                            ; ---------------------------------------------------------------------------
0001F354                            Debug_LZ:
0001F354                            	include "_inc\Debug list - LZ.asm"
0001F354                            ; ---------------------------------------------------------------------------
0001F354                            ; Debug	list - Labyrinth
0001F354                            ; ---------------------------------------------------------------------------
0001F354 0028                       	dc.w $28
0001F356 2500 B718                  	dc.l Map_obj25+$25000000
0001F35A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F35E 2600 BD14                  	dc.l Map_obj26+$26000000
0001F362 0000 0680                  	dc.b 0,	0, 6, $80
0001F366 5901 2718                  	dc.l Map_obj59+$59000000
0001F36A 0000 4000                  	dc.b 0,	0, $40,	0
0001F36E 5300 9E9A                  	dc.l Map_obj53+$53000000
0001F372 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F376 1800 98F2                  	dc.l Map_obj18b+$18000000
0001F37A 0000 4000                  	dc.b 0,	0, $40,	0
0001F37E 5A01 2852                  	dc.l Map_obj5A+$5A000000
0001F382 0000 4000                  	dc.b 0,	0, $40,	0
0001F386 5B01 2A0A                  	dc.l Map_obj5B+$5B000000
0001F38A 0000 4000                  	dc.b 0,	0, $40,	0
0001F38E 5D01 2FDA                  	dc.l Map_obj5D+$5D000000
0001F392 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F396 5E01 336C                  	dc.l Map_obj5E+$5E000000
0001F39A 0000 0374                  	dc.b 0,	0, 3, $74
0001F39E 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F3A2 0000 0523                  	dc.b 0,	0, 5, $23
0001F3A6 1300 CAF4                  	dc.l Map_obj14+$13000000
0001F3AA 0000 0480                  	dc.b 0,	0, 4, $80
0001F3AE 1C00 9FAA                  	dc.l Map_obj1C+$1C000000
0001F3B2 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F3B6 5F01 35EA                  	dc.l Map_obj5F+$5F000000
0001F3BA 0000 0400                  	dc.b 0,	0, 4, 0
0001F3BE 6001 38A0                  	dc.l Map_obj60+$60000000
0001F3C2 0000 2429                  	dc.b 0,	0, $24,	$29
0001F3C6 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F3CA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F3CE 2500 B718                  	dc.l Map_obj25+$25000000
0001F3D2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F3D6 2600 BD14                  	dc.l Map_obj26+$26000000
0001F3DA 0000 0680                  	dc.b 0,	0, 6, $80
0001F3DE 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F3E2 0000 0523                  	dc.b 0,	0, 5, $23
0001F3E6 2C00 C3FA                  	dc.l Map_obj2C+$2C000000
0001F3EA 0800 2486                  	dc.b 8,	0, $24,	$86
0001F3EE 2D00 C5E6                  	dc.l Map_obj2D+$2D000000
0001F3F2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F3F6 1601 3956                  	dc.l Map_obj16+$16000000
0001F3FA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F3FE 1601 3956                  	dc.l Map_obj16+$16000000
0001F402 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F406 3300 DA64                  	dc.l Map_obj33+$33000000
0001F40A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F40E 3200 D624                  	dc.l Map_obj32+$32000000
0001F412 0000 0513                  	dc.b 0,	0, 5, $13
0001F416 3600 E9BA                  	dc.l Map_obj36+$36000000
0001F41A 0000 051B                  	dc.b 0,	0, 5, $1B
0001F41E 5201 1A78                  	dc.l Map_obj52a+$52000000
0001F422 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F426 6101 3B7E                  	dc.l Map_obj61+$61000000
0001F42A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F42E 6101 3B7E                  	dc.l Map_obj61+$61000000
0001F432 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F436 6101 3B7E                  	dc.l Map_obj61+$61000000
0001F43A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F43E 6201 3CD2                  	dc.l Map_obj62+$62000000
0001F442 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F446 6101 3B7E                  	dc.l Map_obj61+$61000000
0001F44A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F44E 6101 3B7E                  	dc.l Map_obj61+$61000000
0001F452 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F456 6301 4034                  	dc.l Map_obj63+$63000000
0001F45A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F45E 6001 38A0                  	dc.l Map_obj60+$60000000
0001F462 0000 0467                  	dc.b 0,	0, 4, $67
0001F466 6401 437A                  	dc.l Map_obj64+$64000000
0001F46A 8413 8348                  	dc.b $84, $13, $83, $48
0001F46E 6501 4502                  	dc.l Map_obj65+$65000000
0001F472 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F476 6501 4502                  	dc.l Map_obj65+$65000000
0001F47A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F47E 0B01 2CF0                  	dc.l Map_obj0B+$B000000
0001F482 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F486 0C01 2DC0                  	dc.l Map_obj0C+$C000000
0001F48A 0200 4328                  	dc.b 2,	0, $43,	$28
0001F48E 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F492 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F496                            	even
0001F496                            	even
0001F496                            
0001F496                            ; ---------------------------------------------------------------------------
0001F496                            ; Debug	list - Marble
0001F496                            ; ---------------------------------------------------------------------------
0001F496                            Debug_MZ:
0001F496                            	include "_inc\Debug list - MZ.asm"
0001F496                            ; ---------------------------------------------------------------------------
0001F496                            ; Debug	list - Marble
0001F496                            ; ---------------------------------------------------------------------------
0001F496 0012                       	dc.w $12
0001F498 2500 B718                  	dc.l Map_obj25+$25000000
0001F49C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F4A0 2600 BD14                  	dc.l Map_obj26+$26000000
0001F4A4 0000 0680                  	dc.b 0,	0, 6, $80
0001F4A8 2200 B176                  	dc.l Map_obj22+$22000000
0001F4AC 0000 0444                  	dc.b 0,	0, 4, $44
0001F4B0 3600 E9BA                  	dc.l Map_obj36+$36000000
0001F4B4 0000 051B                  	dc.b 0,	0, 5, $1B
0001F4B8 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F4BC 0000 0523                  	dc.b 0,	0, 5, $23
0001F4C0 1300 CAF4                  	dc.l Map_obj14+$13000000
0001F4C4 0000 0345                  	dc.b 0,	0, 3, $45
0001F4C8 4601 02D6                  	dc.l Map_obj46+$46000000
0001F4CC 0000 4000                  	dc.b 0,	0, $40,	0
0001F4D0 4C01 0C12                  	dc.l Map_obj4C+$4C000000
0001F4D4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F4D8 4E01 0EF6                  	dc.l Map_obj4E+$4E000000
0001F4DC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F4E0 3300 DA64                  	dc.l Map_obj33+$33000000
0001F4E4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F4E8 5001 12F4                  	dc.l Map_obj50+$50000000
0001F4EC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F4F0 5101 17AC                  	dc.l Map_obj51+$51000000
0001F4F4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F4F8 5201 1A22                  	dc.l Map_obj52+$52000000
0001F4FC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F500 5300 9E9A                  	dc.l Map_obj53+$53000000
0001F504 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F508 5401 0BD8                  	dc.l Map_obj54+$54000000
0001F50C 0000 8680                  	dc.b 0,	0, $86,	$80
0001F510 5501 1C16                  	dc.l Map_obj55+$55000000
0001F514 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F518 7801 8B76                  	dc.l Map_obj78+$78000000
0001F51C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F520 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F524 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F528                            	even
0001F528                            	even
0001F528                            
0001F528                            ; ---------------------------------------------------------------------------
0001F528                            ; Debug	list - Star Light
0001F528                            ; ---------------------------------------------------------------------------
0001F528                            Debug_SLZ:
0001F528                            	include "_inc\Debug list - SLZ.asm"
0001F528                            ; ---------------------------------------------------------------------------
0001F528                            ; Debug	list - Star Light
0001F528                            ; ---------------------------------------------------------------------------
0001F528 000F                       	dc.w $F
0001F52A 2500 B718                  	dc.l Map_obj25+$25000000
0001F52E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F532 2600 BD14                  	dc.l Map_obj26+$26000000
0001F536 0000 0680                  	dc.b 0,	0, 6, $80
0001F53A 5901 2718                  	dc.l Map_obj59+$59000000
0001F53E 0000 4000                  	dc.b 0,	0, $40,	0
0001F542 5300 9E9A                  	dc.l Map_obj53+$53000000
0001F546 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F54A 1800 98F2                  	dc.l Map_obj18b+$18000000
0001F54E 0000 4000                  	dc.b 0,	0, $40,	0
0001F552 5A01 2852                  	dc.l Map_obj5A+$5A000000
0001F556 0000 4000                  	dc.b 0,	0, $40,	0
0001F55A 5B01 2A0A                  	dc.l Map_obj5B+$5B000000
0001F55E 0000 4000                  	dc.b 0,	0, $40,	0
0001F562 5D01 2FDA                  	dc.l Map_obj5D+$5D000000
0001F566 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F56A 5E01 336C                  	dc.l Map_obj5E+$5E000000
0001F56E 0000 0374                  	dc.b 0,	0, 3, $74
0001F572 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F576 0000 0523                  	dc.b 0,	0, 5, $23
0001F57A 1300 CAF4                  	dc.l Map_obj14+$13000000
0001F57E 0000 0480                  	dc.b 0,	0, 4, $80
0001F582 1C00 9FAA                  	dc.l Map_obj1C+$1C000000
0001F586 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F58A 5F01 35EA                  	dc.l Map_obj5F+$5F000000
0001F58E 0000 0400                  	dc.b 0,	0, 4, 0
0001F592 6001 38A0                  	dc.l Map_obj60+$60000000
0001F596 0000 2429                  	dc.b 0,	0, $24,	$29
0001F59A 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F59E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F5A2                            
0001F5A2                            	even
0001F5A2                            	even
0001F5A2                            
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            ; Debug	list - Spring Yard
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            Debug_SYZ:
0001F5A2                            	include "_inc\Debug list - SYZ.asm"
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2                            ; Debug	list - Spring Yard
0001F5A2                            ; ---------------------------------------------------------------------------
0001F5A2 000F                       	dc.w $F
0001F5A4 2500 B718                  	dc.l Map_obj25+$25000000
0001F5A8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F5AC 2600 BD14                  	dc.l Map_obj26+$26000000
0001F5B0 0000 0680                  	dc.b 0,	0, 6, $80
0001F5B4 3600 E9BA                  	dc.l Map_obj36+$36000000
0001F5B8 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5BC 4100 F6F0                  	dc.l Map_obj41+$41000000
0001F5C0 0000 0523                  	dc.b 0,	0, 5, $23
0001F5C4 4300 FB76                  	dc.l Map_obj43+$43000000
0001F5C8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F5CC 1201 0354                  	dc.l Map_obj12+$12000000
0001F5D0 0000 0000                  	dc.b 0,	0, 0, 0
0001F5D4 4701 04D0                  	dc.l Map_obj47+$47000000
0001F5D8 0000 0380                  	dc.b 0,	0, 3, $80
0001F5DC 1F00 AE96                  	dc.l Map_obj1F+$1F000000
0001F5E0 0000 0400                  	dc.b 0,	0, 4, 0
0001F5E4 2200 B176                  	dc.l Map_obj22+$22000000
0001F5E8 0000 0444                  	dc.b 0,	0, 4, $44
0001F5EC 5001 12F4                  	dc.l Map_obj50+$50000000
0001F5F0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F5F4 1800 98E0                  	dc.l Map_obj18a+$18000000
0001F5F8 0000 4000                  	dc.b 0,	0, $40,	0
0001F5FC 5601 20D8                  	dc.l Map_obj56+$56000000
0001F600 0000 4000                  	dc.b 0,	0, $40,	0
0001F604 3200 D624                  	dc.l Map_obj32+$32000000
0001F608 0000 0513                  	dc.b 0,	0, 5, $13
0001F60C 7801 8B76                  	dc.l Map_obj78+$78000000
0001F610 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F614 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F618 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F61C                            	even
0001F61C                            	even
0001F61C                            
0001F61C                            ; ---------------------------------------------------------------------------
0001F61C                            ; Debug	list - Scrap Brain
0001F61C                            ; ---------------------------------------------------------------------------
0001F61C                            Debug_SBZ:
0001F61C                            	include "_inc\Debug list - SBZ.asm"
0001F61C                            ; ---------------------------------------------------------------------------
0001F61C                            ; Debug	list - Scrap Brain
0001F61C                            ; ---------------------------------------------------------------------------
0001F61C 001D                       	dc.w $1D
0001F61E 2500 B718                  	dc.l Map_obj25+$25000000
0001F622 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F626 2600 BD14                  	dc.l Map_obj26+$26000000
0001F62A 0000 0680                  	dc.b 0,	0, 6, $80
0001F62E 5F01 35EA                  	dc.l Map_obj5F+$5F000000
0001F632 0000 0400                  	dc.b 0,	0, 4, 0
0001F636 6001 38A0                  	dc.l Map_obj60+$60000000
0001F63A 0000 0429                  	dc.b 0,	0, 4, $29
0001F63E 7801 8B76                  	dc.l Map_obj78+$78000000
0001F642 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F646 1501 2474                  	dc.l Map_obj15b+$15000000
0001F64A 0702 4391                  	dc.b 7,	2, $43,	$91
0001F64E 6701 7496                  	dc.l Map_obj67+$67000000
0001F652 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F656 5201 1A22                  	dc.l Map_obj52+$52000000
0001F65A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F65E 3200 D624                  	dc.l Map_obj32+$32000000
0001F662 0000 0513                  	dc.b 0,	0, 5, $13
0001F666 6901 76F0                  	dc.l Map_obj69+$69000000
0001F66A 0300 4492                  	dc.b 3,	0, $44,	$92
0001F66E 6901 774A                  	dc.l Map_obj69a+$69000000
0001F672 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F676 6A01 79A8                  	dc.l Map_obj6A+$6A000000
0001F67A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F67E 5300 9E9A                  	dc.l Map_obj53+$53000000
0001F682 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F686 5201 1A22                  	dc.l Map_obj52+$52000000
0001F68A 3903 4460                  	dc.b $39, 3, $44, $60
0001F68E 6B01 7D78                  	dc.l Map_obj6B+$6B000000
0001F692 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F696 2A00 A140                  	dc.l Map_obj2A+$2A000000
0001F69A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F69E 6B01 7D78                  	dc.l Map_obj6B+$6B000000
0001F6A2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F6A6 6A01 79A8                  	dc.l Map_obj6A+$6A000000
0001F6AA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F6AE 6B01 7D78                  	dc.l Map_obj6B+$6B000000
0001F6B2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F6B6 6A01 79A8                  	dc.l Map_obj6A+$6A000000
0001F6BA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F6BE 6B01 7D78                  	dc.l Map_obj6B+$6B000000
0001F6C2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F6C6 6C01 7F3A                  	dc.l Map_obj6C+$6C000000
0001F6CA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F6CE 6D00 FFC6                  	dc.l Map_obj6D+$6D000000
0001F6D2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F6D6 6D00 FFC6                  	dc.l Map_obj6D+$6D000000
0001F6DA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F6DE 6E01 7FF0                  	dc.l Map_obj6E+$6E000000
0001F6E2 0400 047E                  	dc.b 4,	0, 4, $7E
0001F6E6 7001 8436                  	dc.l Map_obj70+$70000000
0001F6EA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F6EE 7101 2E80                  	dc.l Map_obj71+$71000000
0001F6F2 1100 8680                  	dc.b $11, 0, $86, $80
0001F6F6 1E00 A5AE                  	dc.l Map_obj1E+$1E000000
0001F6FA 0400 2302                  	dc.b 4,	0, $23,	2
0001F6FE 7901 8EFC                  	dc.l Map_obj79+$79000000
0001F702 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F706                            	even
0001F706                            	even
0001F706                            
0001F706                            ; ---------------------------------------------------------------------------
0001F706                            ; Debug	list - ending sequence / special stage
0001F706                            ; ---------------------------------------------------------------------------
0001F706                            Debug_Ending:
0001F706                            	include "_inc\Debug list - Ending and SS.asm"
0001F706                            ; ---------------------------------------------------------------------------
0001F706                            ; Debug	list - ending sequence / special stage
0001F706                            ; ---------------------------------------------------------------------------
0001F706 000D                       	dc.w $D
0001F708 2500 B718                  	dc.l Map_obj25+$25000000
0001F70C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F710 4701 04D0                  	dc.l Map_obj47+$47000000
0001F714 0000 0380                  	dc.b 0,	0, 3, $80
0001F718 2800 ABC8                  	dc.l Map_obj28a+$28000000
0001F71C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F720 2800 ABC8                  	dc.l Map_obj28a+$28000000
0001F724 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F728 2800 ABC8                  	dc.l Map_obj28a+$28000000
0001F72C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F730 2800 ABB0                  	dc.l Map_obj28+$28000000
0001F734 0D00 0553                  	dc.b $D, 0, 5, $53
0001F738 2800 ABB0                  	dc.l Map_obj28+$28000000
0001F73C 0E00 0553                  	dc.b $E, 0, 5, $53
0001F740 2800 ABB0                  	dc.l Map_obj28+$28000000
0001F744 0F00 0573                  	dc.b $F, 0, 5, $73
0001F748 2800 ABB0                  	dc.l Map_obj28+$28000000
0001F74C 1000 0573                  	dc.b $10, 0, 5,	$73
0001F750 2800 ABC8                  	dc.l Map_obj28a+$28000000
0001F754 1100 0585                  	dc.b $11, 0, 5,	$85
0001F758 2800 ABE0                  	dc.l Map_obj28b+$28000000
0001F75C 1200 0593                  	dc.b $12, 0, 5,	$93
0001F760 2800 ABC8                  	dc.l Map_obj28a+$28000000
0001F764 1300 0565                  	dc.b $13, 0, 5,	$65
0001F768 2800 ABE0                  	dc.l Map_obj28b+$28000000
0001F76C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F770                            	even
0001F770                            	even
0001F770                            
0001F770                            ; ---------------------------------------------------------------------------
0001F770                            ; Main level load blocks
0001F770                            ; ---------------------------------------------------------------------------
0001F770                            MainLoadBlocks:
0001F770                            	include "_inc\Main level load blocks.asm"
0001F770                            ; ---------------------------------------------------------------------------
0001F770                            ; Main level load blocks
0001F770                            ;
0001F770                            ; ===FORMAT===
0001F770                            ; level	patterns + (1st	PLC num	* 10^6)
0001F770                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F770                            ; 256x256 mappings
0001F770                            ; blank, music (unused), pal index (unused), pal index
0001F770                            ; ---------------------------------------------------------------------------
0001F770 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F774 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F778 0000 0000                  	dc.l Blk256_GHZ
0001F77C 0081 0404                  	dc.b 0,	$81, 4,	4
0001F780 0000 0000                  	dc.l Nem_LZ+$6000000
0001F784 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F788 0000 0000                  	dc.l Blk256_LZ
0001F78C 0082 0505                  	dc.b 0,	$82, 5,	5
0001F790 0000 0000                  	dc.l Nem_MZ+$8000000
0001F794 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F798 0000 0000                  	dc.l Blk256_MZ
0001F79C 0083 0606                  	dc.b 0,	$83, 6,	6
0001F7A0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F7A4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F7A8 0000 0000                  	dc.l Blk256_SLZ
0001F7AC 0084 0707                  	dc.b 0,	$84, 7,	7
0001F7B0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F7B4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F7B8 0000 0000                  	dc.l Blk256_SYZ
0001F7BC 0085 0808                  	dc.b 0,	$85, 8,	8
0001F7C0 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F7C4 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F7C8 0000 0000                  	dc.l Blk256_SBZ
0001F7CC 0086 0909                  	dc.b 0,	$86, 9,	9
0001F7D0 0000 0000                  	dc.l Nem_TIT_1st	; main load block for ending
0001F7D4 0000 0000                  	dc.l Blk16_TS
0001F7D8 0000 0000                  	dc.l Blk256_TS
0001F7DC 0086 1313                  	dc.b 0,	$86, $13, $13
0001F7E0                            	even
0001F7E0                            	even
0001F7E0                            
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            ; Pattern load cues
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            ArtLoadCues:
0001F7E0                            	include "_inc\Pattern load cues.asm"
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            ; Pattern load cues - index
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F7E4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F7E8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F7EC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F7F0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F7F4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F7F8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F7FC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F800 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F804 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F808 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F80C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F810 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F814 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F818 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F81C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F820                            ; ---------------------------------------------------------------------------
0001F820                            ; Pattern load cues - standard block 1
0001F820                            ; ---------------------------------------------------------------------------
0001F820 0005                       PLC_Main:	dc.w 5
0001F822 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F826 D800                       		dc.w $D800
0001F828 0000 0000                  		dc.l Nem_Hud		; HUD
0001F82C D940                       		dc.w $D940
0001F82E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F832 FA80                       		dc.w $FA80
0001F834 0000 0000                  		dc.l Nem_LivesPic	; lives	counter pic
0001F838 ACA0                       		dc.w $ACA0
0001F83A 0000 0000                  		dc.l Nem_Ring		; rings
0001F83E F640                       		dc.w $F640
0001F840 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F844 F2E0                       		dc.w $F2E0
0001F846                            ; ---------------------------------------------------------------------------
0001F846                            ; Pattern load cues - standard block 2
0001F846                            ; ---------------------------------------------------------------------------
0001F846 0000                       PLC_Main2:	dc.w 0
0001F848 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F84C D000                       		dc.w $D000
0001F84E                            ; ---------------------------------------------------------------------------
0001F84E                            ; Pattern load cues - explosion
0001F84E                            ; ---------------------------------------------------------------------------
0001F84E 0000                       PLC_Explode:	dc.w 0
0001F850 0000 0000                  		dc.l Nem_Explode	; explosion
0001F854 B400                       		dc.w $B400
0001F856                            ; ---------------------------------------------------------------------------
0001F856                            ; Pattern load cues - game/time	over
0001F856                            ; ---------------------------------------------------------------------------
0001F856 0000                       PLC_GameOver:	dc.w 0
0001F858 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F85C ABC0                       		dc.w $ABC0
0001F85E                            ; ---------------------------------------------------------------------------
0001F85E                            ; Pattern load cues - Green Hill
0001F85E                            ; ---------------------------------------------------------------------------
0001F85E 000A                       PLC_GHZ:	dc.w $A
0001F860 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001F864 0000                       		dc.w 0
0001F866 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F86A 6B00                       		dc.w $6B00
0001F86C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F870 7A00                       		dc.w $7A00
0001F872 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F876 8000                       		dc.w $8000
0001F878 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F87C 8880                       		dc.w $8880
0001F87E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F882 8F60                       		dc.w $8F60
0001F884 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F888 9360                       		dc.w $9360
0001F88A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F88E 9E00                       		dc.w $9E00
0001F890 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F894 A360                       		dc.w $A360
0001F896 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F89A A460                       		dc.w $A460
0001F89C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F8A0 A660                       		dc.w $A660
0001F8A2 0005                       PLC_GHZ2:	dc.w 5
0001F8A4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F8A8 7000                       		dc.w $7000
0001F8AA 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F8AE 71C0                       		dc.w $71C0
0001F8B0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F8B4 7300                       		dc.w $7300
0001F8B6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F8BA 7540                       		dc.w $7540
0001F8BC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F8C0 A1E0                       		dc.w $A1E0
0001F8C2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F8C6 6980                       		dc.w $6980
0001F8C8                            ; ---------------------------------------------------------------------------
0001F8C8                            ; Pattern load cues - Labyrinth
0001F8C8                            ; ---------------------------------------------------------------------------
0001F8C8                            PLC_LZ:		
0001F8C8 000A                       		dc.w $A
0001F8CA 0000 0000                  		dc.l Nem_LZ			; LZ main patterns
0001F8CE 0000                       		dc.w 0
0001F8D0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F8D4 8000                       		dc.w $8000
0001F8D6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F8DA 8520                       		dc.w $8520
0001F8DC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F8E0 9000                       		dc.w $9000
0001F8E2 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F8E6 9C00                       		dc.w $9C00
0001F8E8 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F8EC A260                       		dc.w $A260
0001F8EE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F8F2 A360                       		dc.w $A360
0001F8F4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F8F8 A460                       		dc.w $A460
0001F8FA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F8FE A660                       		dc.w $A660
0001F900 0000 0000                  		dc.l Nem_Water		; water	surface
0001F904 6000                       		dc.w $6000
0001F906 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F90A 6900                       		dc.w $6900
0001F90C 0005                       PLC_LZ2:	dc.w 5
0001F90E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F912 6E80                       		dc.w $6E80
0001F914 0000 0000                  		dc.l Nem_Fan		; fan
0001F918 7400                       		dc.w $7400
0001F91A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F91E 7980                       		dc.w $7980
0001F920 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F924 7B80                       		dc.w $7B80
0001F926 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F92A 9B00                       		dc.w $9B00
0001F92C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F930 9E00                       		dc.w $9E00
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            ; Pattern load cues - Marble
0001F932                            ; ---------------------------------------------------------------------------
0001F932 0009                       PLC_MZ:		dc.w 9
0001F934 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F938 0000                       		dc.w 0
0001F93A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F93E 6000                       		dc.w $6000
0001F940 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F944 68A0                       		dc.w $68A0
0001F946 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F94A 7000                       		dc.w $7000
0001F94C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F950 71C0                       		dc.w $71C0
0001F952 0000 0000                  		dc.l Nem_Lava		; lava
0001F956 7500                       		dc.w $7500
0001F958 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F95C 8880                       		dc.w $8880
0001F95E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F962 8F60                       		dc.w $8F60
0001F964 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F968 9700                       		dc.w $9700
0001F96A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F96E 9FE0                       		dc.w $9FE0
0001F970 0004                       PLC_MZ2:	dc.w 4
0001F972 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F976 A260                       		dc.w $A260
0001F978 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F97C A360                       		dc.w $A360
0001F97E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F982 A460                       		dc.w $A460
0001F984 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F988 A660                       		dc.w $A660
0001F98A 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F98E 5700                       		dc.w $5700
0001F990                            ; ---------------------------------------------------------------------------
0001F990                            ; Pattern load cues - Star Light
0001F990                            ; ---------------------------------------------------------------------------
0001F990 0008                       PLC_SLZ:	dc.w 8
0001F992 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F996 0000                       		dc.w 0
0001F998 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F99C 8000                       		dc.w $8000
0001F99E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F9A2 8520                       		dc.w $8520
0001F9A4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F9A8 9000                       		dc.w $9000
0001F9AA 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F9AE 9C00                       		dc.w $9C00
0001F9B0 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F9B4 A260                       		dc.w $A260
0001F9B6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F9BA A360                       		dc.w $A360
0001F9BC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F9C0 A460                       		dc.w $A460
0001F9C2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F9C6 A660                       		dc.w $A660
0001F9C8 0005                       PLC_SLZ2:	dc.w 5
0001F9CA 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F9CE 6E80                       		dc.w $6E80
0001F9D0 0000 0000                  		dc.l Nem_Fan		; fan
0001F9D4 7400                       		dc.w $7400
0001F9D6 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F9DA 7980                       		dc.w $7980
0001F9DC 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F9E0 7B80                       		dc.w $7B80
0001F9E2 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F9E6 9B00                       		dc.w $9B00
0001F9E8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F9EC 9E00                       		dc.w $9E00
0001F9EE                            ; ---------------------------------------------------------------------------
0001F9EE                            ; Pattern load cues - Spring Yard
0001F9EE                            ; ---------------------------------------------------------------------------
0001F9EE 0004                       PLC_SYZ:	dc.w 4
0001F9F0 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F9F4 0000                       		dc.w 0
0001F9F6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F9FA 8000                       		dc.w $8000
0001F9FC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA00 8880                       		dc.w $8880
0001FA02 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FA06 8F60                       		dc.w $8F60
0001FA08 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FA0C 9700                       		dc.w $9700
0001FA0E 0007                       PLC_SYZ2:	dc.w 7
0001FA10 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FA14 7000                       		dc.w $7000
0001FA16 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FA1A 72C0                       		dc.w $72C0
0001FA1C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FA20 7740                       		dc.w $7740
0001FA22 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FA26 9FE0                       		dc.w $9FE0
0001FA28 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FA2C A1E0                       		dc.w $A1E0
0001FA2E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA32 A360                       		dc.w $A360
0001FA34 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA38 A460                       		dc.w $A460
0001FA3A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA3E A660                       		dc.w $A660
0001FA40                            ; ---------------------------------------------------------------------------
0001FA40                            ; Pattern load cues - Scrap Brain
0001FA40                            ; ---------------------------------------------------------------------------
0001FA40 000B                       PLC_SBZ:	dc.w $B
0001FA42 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001FA46 0000                       		dc.w 0
0001FA48 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FA4C 5800                       		dc.w $5800
0001FA4E 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FA52 5D00                       		dc.w $5D00
0001FA54 0000 0000                  		dc.l Nem_Girder		; girder
0001FA58 5E00                       		dc.w $5E00
0001FA5A 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FA5E 6040                       		dc.w $6040
0001FA60 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FA64 6880                       		dc.w $6880
0001FA66 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FA6A 6900                       		dc.w $6900
0001FA6C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FA70 7220                       		dc.w $7220
0001FA72 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FA76 76A0                       		dc.w $76A0
0001FA78 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FA7C 7B20                       		dc.w $7B20
0001FA7E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FA82 7EA0                       		dc.w $7EA0
0001FA84 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FA88 9860                       		dc.w $9860
0001FA8A 000C                       PLC_SBZ2:	dc.w $C
0001FA8C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FA90 5600                       		dc.w $5600
0001FA92 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FA96 8000                       		dc.w $8000
0001FA98 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FA9C 8520                       		dc.w $8520
0001FA9E 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FAA2 8C00                       		dc.w $8C00
0001FAA4 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FAA8 8DE0                       		dc.w $8DE0
0001FAAA 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FAAE 8FC0                       		dc.w $8FC0
0001FAB0 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FAB4 9240                       		dc.w $9240
0001FAB6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FABA 7F20                       		dc.w $7F20
0001FABC 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FAC0 9BE0                       		dc.w $9BE0
0001FAC2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FAC6 A1E0                       		dc.w $A1E0
0001FAC8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FACC A360                       		dc.w $A360
0001FACE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAD2 A460                       		dc.w $A460
0001FAD4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FAD8 A660                       		dc.w $A660
0001FADA                            ; ---------------------------------------------------------------------------
0001FADA                            ; Pattern load cues - title card
0001FADA                            ; ---------------------------------------------------------------------------
0001FADA 0001                       PLC_TitleCard:	dc.w 1
0001FADC 0000 0000                  		dc.l Nem_TitleCard
0001FAE0 B000                       		dc.w $B000
0001FAE2 0000 0000                  		dc.l Nem_LoverWentRight
0001FAE6 B5A0                       		dc.w $B5A0
0001FAE8                            ; ---------------------------------------------------------------------------
0001FAE8                            ; Pattern load cues - act 3 boss
0001FAE8                            ; ---------------------------------------------------------------------------
0001FAE8 0005                       PLC_Boss:	dc.w 5
0001FAEA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FAEE 8000                       		dc.w $8000
0001FAF0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FAF4 8D80                       		dc.w $8D80
0001FAF6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FAFA 93A0                       		dc.w $93A0
0001FAFC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FB00 A300                       		dc.w $A300
0001FB02 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FB06 A300                       		dc.w $A300
0001FB08 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FB0C A540                       		dc.w $A540
0001FB0E                            ; ---------------------------------------------------------------------------
0001FB0E                            ; Pattern load cues - act 1/2 signpost
0001FB0E                            ; ---------------------------------------------------------------------------
0001FB0E 0002                       PLC_Signpost:	dc.w 2
0001FB10 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FB14 D000                       		dc.w $680*$20
0001FB16 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FB1A 96C0                       		dc.w $96C0
0001FB1C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FB20 8C40                       		dc.w $8C40
0001FB22                            ; ---------------------------------------------------------------------------
0001FB22                            ; Pattern load cues - beta special stage warp effect
0001FB22                            ; ---------------------------------------------------------------------------
0001FB22 0000                       PLC_Warp:	dc.w 0
0001FB24 0000 0000                  		dc.l Nem_Warp
0001FB28 A820                       		dc.w $A820
0001FB2A                            ; ---------------------------------------------------------------------------
0001FB2A                            ; Pattern load cues - special stage
0001FB2A                            ; ---------------------------------------------------------------------------
0001FB2A 0010                       PLC_SpeStage:	dc.w $10
0001FB2C 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FB30 0000                       		dc.w 0
0001FB32 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FB36 0A20                       		dc.w $A20
0001FB38 0000 0000                  		dc.l Nem_SSWalls	; walls
0001FB3C 2840                       		dc.w $2840
0001FB3E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FB42 4760                       		dc.w $4760
0001FB44 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FB48 4A20                       		dc.w $4A20
0001FB4A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FB4E 4C60                       		dc.w $4C60
0001FB50 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FB54 5E00                       		dc.w $5E00
0001FB56 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FB5A 6E00                       		dc.w $6E00
0001FB5C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FB60 7E00                       		dc.w $7E00
0001FB62 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FB66 8E00                       		dc.w $8E00
0001FB68 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FB6C 9E00                       		dc.w $9E00
0001FB6E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001FB72 AE00                       		dc.w $AE00
0001FB74 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FB78 BE00                       		dc.w $BE00
0001FB7A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FB7E EE00                       		dc.w $EE00
0001FB80 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001FB84 F2E0                       		dc.w $F2E0
0001FB86 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001FB8A F400                       		dc.w $F400
0001FB8C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001FB90 F520                       		dc.w $F520
0001FB92 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001FB96 F2E0                       		dc.w $F2E0
0001FB98 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001FB9C F400                       		dc.w $F400
0001FB9E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001FBA2 F520                       		dc.w $F520
0001FBA4                            ; ---------------------------------------------------------------------------
0001FBA4                            ; Pattern load cues - GHZ animals
0001FBA4                            ; ---------------------------------------------------------------------------
0001FBA4 0001                       PLC_GHZAnimals:	dc.w 1
0001FBA6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FBAA B000                       		dc.w $B000
0001FBAC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FBB0 B240                       		dc.w $B240
0001FBB2                            ; ---------------------------------------------------------------------------
0001FBB2                            ; Pattern load cues - LZ animals
0001FBB2                            ; ---------------------------------------------------------------------------
0001FBB2 0001                       PLC_LZAnimals:	dc.w 1
0001FBB4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FBB8 B000                       		dc.w $B000
0001FBBA 0000 0000                  		dc.l Nem_Seal		; seal
0001FBBE B240                       		dc.w $B240
0001FBC0                            ; ---------------------------------------------------------------------------
0001FBC0                            ; Pattern load cues - MZ animals
0001FBC0                            ; ---------------------------------------------------------------------------
0001FBC0 0001                       PLC_MZAnimals:	dc.w 1
0001FBC2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FBC6 B000                       		dc.w $B000
0001FBC8 0000 0000                  		dc.l Nem_Seal		; seal
0001FBCC B240                       		dc.w $B240
0001FBCE                            ; ---------------------------------------------------------------------------
0001FBCE                            ; Pattern load cues - SLZ animals
0001FBCE                            ; ---------------------------------------------------------------------------
0001FBCE 0001                       PLC_SLZAnimals:	dc.w 1
0001FBD0 0000 0000                  		dc.l Nem_Pig		; pig
0001FBD4 B000                       		dc.w $B000
0001FBD6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FBDA B240                       		dc.w $B240
0001FBDC                            ; ---------------------------------------------------------------------------
0001FBDC                            ; Pattern load cues - SYZ animals
0001FBDC                            ; ---------------------------------------------------------------------------
0001FBDC 0001                       PLC_SYZAnimals:	dc.w 1
0001FBDE 0000 0000                  		dc.l Nem_Pig		; pig
0001FBE2 B000                       		dc.w $B000
0001FBE4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FBE8 B240                       		dc.w $B240
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA                            ; Pattern load cues - SBZ animals
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA 0001                       PLC_SBZAnimals:	dc.w 1
0001FBEC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FBF0 B000                       		dc.w $B000
0001FBF2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FBF6 B240                       		dc.w $B240
0001FBF8                            ; ---------------------------------------------------------------------------
0001FBF8                            ; Pattern load cues - special stage results screen
0001FBF8                            ; ---------------------------------------------------------------------------
0001FBF8 0001                       PLC_SpeStResult:dc.w 1
0001FBFA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FBFE A820                       		dc.w $A820
0001FC00 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FC04 AA20                       		dc.w $AA20
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06                            ; Pattern load cues - ending sequence
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06 000E                       PLC_Ending:	dc.w $E
0001FC08 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001FC0C 0000                       		dc.w 0
0001FC0E 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001FC12 39A0                       		dc.w $39A0
0001FC14 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FC18 6B00                       		dc.w $6B00
0001FC1A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FC1E 7400                       		dc.w $7400
0001FC20 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FC24 78A0                       		dc.w $78A0
0001FC26 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FC2A 7C20                       		dc.w $7C20
0001FC2C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FC30 A480                       		dc.w $A480
0001FC32 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FC36 AA60                       		dc.w $AA60
0001FC38 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FC3C ACA0                       		dc.w $ACA0
0001FC3E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FC42 AE60                       		dc.w $AE60
0001FC44 0000 0000                  		dc.l Nem_Seal		; seal
0001FC48 B0A0                       		dc.w $B0A0
0001FC4A 0000 0000                  		dc.l Nem_Pig		; pig
0001FC4E B260                       		dc.w $B260
0001FC50 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FC54 B4A0                       		dc.w $B4A0
0001FC56 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FC5A B660                       		dc.w $B660
0001FC5C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FC60 B8A0                       		dc.w $B8A0
0001FC62                            ; ---------------------------------------------------------------------------
0001FC62                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FC62                            ; ---------------------------------------------------------------------------
0001FC62 0002                       PLC_TryAgain:	dc.w 2
0001FC64 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FC68 78A0                       		dc.w $78A0
0001FC6A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FC6E 7C20                       		dc.w $7C20
0001FC70 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FC74 B400                       		dc.w $B400
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            ; Pattern load cues - Eggman on SBZ 2
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FC78 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FC7C A300                       		dc.w $A300
0001FC7E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FC82 8000                       		dc.w $8000
0001FC84 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC88 9400                       		dc.w $9400
0001FC8A                            ; ---------------------------------------------------------------------------
0001FC8A                            ; Pattern load cues - final boss
0001FC8A                            ; ---------------------------------------------------------------------------
0001FC8A 0004                       PLC_FZBoss:	dc.w 4
0001FC8C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FC90 7400                       		dc.w $7400
0001FC92 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FC96 6000                       		dc.w $6000
0001FC98 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FC9C 8000                       		dc.w $8000
0001FC9E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FCA2 8E00                       		dc.w $8E00
0001FCA4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FCA8 A540                       		dc.w $A540
0001FCAA                            		even
0001FCAA                            		even
0001FCAA                            	even
0001FCAA                            
0001FCAA                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002010C                            		even
0002010C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020204                            		even
00020204                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
00020318                            		even
00020318                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021324                            		even
00021324                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022CF2                            		even
00022CF2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022D26                            		even
00022D26                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022DE4                            		even
00022DE4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002328C                            		even
0002328C                            ; ---------------------------------------------------------------------------
0002328C                            ; Sprite mappings - Sonic
0002328C                            ; ---------------------------------------------------------------------------
0002328C                            Map_Sonic:
0002328C                            	include "_maps\Sonic.asm"
0002328C                            ; --------------------------------------------------------------------------------
0002328C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002328C                            ; --------------------------------------------------------------------------------
0002328C                            
0002328C                            SME_lwZMb:	
0002328C 0000 0000                  		dc.w SME_lwZMb_B4-SME_lwZMb, SME_lwZMb_B5-SME_lwZMb	
00023290 0000 0000                  		dc.w SME_lwZMb_CA-SME_lwZMb, SME_lwZMb_EE-SME_lwZMb	
00023294 0000 0000                  		dc.w SME_lwZMb_FE-SME_lwZMb, SME_lwZMb_10E-SME_lwZMb	
00023298 0000 0000                  		dc.w SME_lwZMb_11E-SME_lwZMb, SME_lwZMb_133-SME_lwZMb	
0002329C 0000 0000                  		dc.w SME_lwZMb_13E-SME_lwZMb, SME_lwZMb_149-SME_lwZMb	
000232A0 0000 0000                  		dc.w SME_lwZMb_15E-SME_lwZMb, SME_lwZMb_169-SME_lwZMb	
000232A4 0000 0000                  		dc.w SME_lwZMb_179-SME_lwZMb, SME_lwZMb_193-SME_lwZMb	
000232A8 0000 0000                  		dc.w SME_lwZMb_1B2-SME_lwZMb, SME_lwZMb_1C7-SME_lwZMb	
000232AC 0000 0000                  		dc.w SME_lwZMb_1E1-SME_lwZMb, SME_lwZMb_1F6-SME_lwZMb	
000232B0 0000 0000                  		dc.w SME_lwZMb_210-SME_lwZMb, SME_lwZMb_225-SME_lwZMb	
000232B4 0000 0000                  		dc.w SME_lwZMb_230-SME_lwZMb, SME_lwZMb_23B-SME_lwZMb	
000232B8 0000 0000                  		dc.w SME_lwZMb_250-SME_lwZMb, SME_lwZMb_25B-SME_lwZMb	
000232BC 0000 0000                  		dc.w SME_lwZMb_26B-SME_lwZMb, SME_lwZMb_28A-SME_lwZMb	
000232C0 0000 0000                  		dc.w SME_lwZMb_2A9-SME_lwZMb, SME_lwZMb_2BE-SME_lwZMb	
000232C4 0000 0000                  		dc.w SME_lwZMb_2D8-SME_lwZMb, SME_lwZMb_2ED-SME_lwZMb	
000232C8 0000 0000                  		dc.w SME_lwZMb_307-SME_lwZMb, SME_lwZMb_312-SME_lwZMb	
000232CC 0000 0000                  		dc.w SME_lwZMb_31D-SME_lwZMb, SME_lwZMb_328-SME_lwZMb	
000232D0 0000 0000                  		dc.w SME_lwZMb_333-SME_lwZMb, SME_lwZMb_348-SME_lwZMb	
000232D4 0000 0000                  		dc.w SME_lwZMb_35D-SME_lwZMb, SME_lwZMb_37C-SME_lwZMb	
000232D8 0000 0000                  		dc.w SME_lwZMb_39B-SME_lwZMb, SME_lwZMb_3A6-SME_lwZMb	
000232DC 0000 0000                  		dc.w SME_lwZMb_3B1-SME_lwZMb, SME_lwZMb_3BC-SME_lwZMb	
000232E0 0000 0000                  		dc.w SME_lwZMb_3C7-SME_lwZMb, SME_lwZMb_3DC-SME_lwZMb	
000232E4 0000 0000                  		dc.w SME_lwZMb_3EC-SME_lwZMb, SME_lwZMb_401-SME_lwZMb	
000232E8 0000 0000                  		dc.w SME_lwZMb_411-SME_lwZMb, SME_lwZMb_41C-SME_lwZMb	
000232EC 0000 0000                  		dc.w SME_lwZMb_431-SME_lwZMb, SME_lwZMb_441-SME_lwZMb	
000232F0 0000 0000                  		dc.w SME_lwZMb_44C-SME_lwZMb, SME_lwZMb_461-SME_lwZMb	
000232F4 0000 0000                  		dc.w SME_lwZMb_476-SME_lwZMb, SME_lwZMb_486-SME_lwZMb	
000232F8 0000 0000                  		dc.w SME_lwZMb_496-SME_lwZMb, SME_lwZMb_4A6-SME_lwZMb	
000232FC 0000 0000                  		dc.w SME_lwZMb_4B1-SME_lwZMb, SME_lwZMb_4C1-SME_lwZMb	
00023300 0000 0000                  		dc.w SME_lwZMb_4D1-SME_lwZMb, SME_lwZMb_4E6-SME_lwZMb	
00023304 0000 0000                  		dc.w SME_lwZMb_4FB-SME_lwZMb, SME_lwZMb_506-SME_lwZMb	
00023308 0000 0000                  		dc.w SME_lwZMb_516-SME_lwZMb, SME_lwZMb_521-SME_lwZMb	
0002330C 0000 0000                  		dc.w SME_lwZMb_531-SME_lwZMb, SME_lwZMb_54B-SME_lwZMb	
00023310 0000 0000                  		dc.w SME_lwZMb_565-SME_lwZMb, SME_lwZMb_575-SME_lwZMb	
00023314 0000 0000                  		dc.w SME_lwZMb_585-SME_lwZMb, SME_lwZMb_595-SME_lwZMb	
00023318 0000 0000                  		dc.w SME_lwZMb_5A0-SME_lwZMb, SME_lwZMb_5B0-SME_lwZMb	
0002331C 0000 0000                  		dc.w SME_lwZMb_5C5-SME_lwZMb, SME_lwZMb_5EE-SME_lwZMb	
00023320 0000 0000                  		dc.w SME_lwZMb_5F4-SME_lwZMb, SME_lwZMb_609-SME_lwZMb	
00023324 0000 0000                  		dc.w SME_lwZMb_61E-SME_lwZMb, SME_lwZMb_633-SME_lwZMb	
00023328 0000 0000                  		dc.w SME_lwZMb_648-SME_lwZMb, SME_lwZMb_658-SME_lwZMb	
0002332C 0000 0000                  		dc.w SME_lwZMb_668-SME_lwZMb, SME_lwZMb_678-SME_lwZMb	
00023330 0000 0000                  		dc.w SME_lwZMb_688-SME_lwZMb, SME_lwZMb_69D-SME_lwZMb	
00023334 0000 0000                  		dc.w SME_lwZMb_6B2-SME_lwZMb, SME_lwZMb_6C7-SME_lwZMb	
00023338 0000 0000                  		dc.w SME_lwZMb_6DC-SME_lwZMb, SME_lwZMb_6EC-SME_lwZMb	
0002333C 0000 0000                  		dc.w SME_lwZMb_6FC-SME_lwZMb, SME_lwZMb_70C-SME_lwZMb	
00023340 00                         SME_lwZMb_B4:	dc.b 0	
00023341 04                         SME_lwZMb_B5:	dc.b 4	
00023342 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00023347 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002334C 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00023351 F409 0009 F0               		dc.b $F4, 9, 0, 9, $F0	
00023356 07                         SME_lwZMb_CA:	dc.b 7	
00023357 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002335C EC09 0003 F0               		dc.b $EC, 9, 0, 3, $F0	
00023361 0400 0009 00               		dc.b 4, 0, 0, 9, 0	
00023366 FC00 000A 00               		dc.b $FC, 0, 0, $A, 0	
0002336B FC01 000B F0               		dc.b $FC, 1, 0, $B, $F0	
00023370 0400 000D F8               		dc.b 4, 0, 0, $D, $F8	
00023375 FC00 000E F8               		dc.b $FC, 0, 0, $E, $F8	
0002337A 03                         SME_lwZMb_EE:	dc.b 3	
0002337B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00023380 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023385 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002338A 03                         SME_lwZMb_FE:	dc.b 3	
0002338B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00023390 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023395 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002339A 03                         SME_lwZMb_10E:	dc.b 3	
0002339B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
000233A0 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
000233A5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000233AA 04                         SME_lwZMb_11E:	dc.b 4	
000233AB EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
000233B0 FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
000233B5 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
000233BA 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
000233BF 02                         SME_lwZMb_133:	dc.b 2	
000233C0 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000233C5 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
000233CA 02                         SME_lwZMb_13E:	dc.b 2	
000233CB ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
000233D0 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
000233D5 04                         SME_lwZMb_149:	dc.b 4	
000233D6 EB09 0000 F3               		dc.b $EB, 9, 0, 0, $F3	
000233DB FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
000233E0 FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
000233E5 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
000233EA 02                         SME_lwZMb_15E:	dc.b 2	
000233EB EC09 0000 F2               		dc.b $EC, 9, 0, 0, $F2	
000233F0 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
000233F5 03                         SME_lwZMb_169:	dc.b 3	
000233F6 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
000233FB FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
00023400 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
00023405 05                         SME_lwZMb_179:	dc.b 5	
00023406 EB06 0000 03               		dc.b $EB, 6, 0, 0, 3	
0002340B FB08 0006 EB               		dc.b $FB, 8, 0, 6, $EB	
00023410 0309 0009 F3               		dc.b 3, 9, 0, 9, $F3	
00023415 1300 000F FB               		dc.b $13, 0, 0, $F, $FB	
0002341A EB09 0010 EB               		dc.b $EB, 9, 0, $10, $EB	
0002341F 06                         SME_lwZMb_193:	dc.b 6	
00023420 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023425 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
0002342A FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
0002342F 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
00023434 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
00023439 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
0002343E 04                         SME_lwZMb_1B2:	dc.b 4	
0002343F ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023444 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00023449 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
0002344E 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
00023453 05                         SME_lwZMb_1C7:	dc.b 5	
00023454 EB05 0000 03               		dc.b $EB, 5, 0, 0, 3	
00023459 FB0D 0004 F3               		dc.b $FB, $D, 0, 4, $F3	
0002345E 0B08 000C F3               		dc.b $B, 8, 0, $C, $F3	
00023463 1304 000F FB               		dc.b $13, 4, 0, $F, $FB	
00023468 EB09 0011 EB               		dc.b $EB, 9, 0, $11, $EB	
0002346D 04                         SME_lwZMb_1E1:	dc.b 4	
0002346E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023473 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00023478 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002347D 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
00023482 05                         SME_lwZMb_1F6:	dc.b 5	
00023483 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023488 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002348D FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
00023492 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
00023497 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
0002349C 04                         SME_lwZMb_210:	dc.b 4	
0002349D F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000234A2 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
000234A7 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
000234AC 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
000234B1 02                         SME_lwZMb_225:	dc.b 2	
000234B2 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000234B7 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000234BC 02                         SME_lwZMb_230:	dc.b 2	
000234BD F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
000234C2 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
000234C7 04                         SME_lwZMb_23B:	dc.b 4	
000234C8 F506 0000 EB               		dc.b $F5, 6, 0, 0, $EB	
000234CD EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
000234D2 FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
000234D7 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
000234DC 02                         SME_lwZMb_250:	dc.b 2	
000234DD F506 0000 EC               		dc.b $F5, 6, 0, 0, $EC	
000234E2 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
000234E7 03                         SME_lwZMb_25B:	dc.b 3	
000234E8 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000234ED EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000234F2 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000234F7 06                         SME_lwZMb_26B:	dc.b 6	
000234F8 ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
000234FD F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
00023502 F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
00023507 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
0002350C FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
00023511 FD06 000F EB               		dc.b $FD, 6, 0, $F, $EB	
00023516 06                         SME_lwZMb_28A:	dc.b 6	
00023517 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
0002351C E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
00023521 EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
00023526 F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
0002352B F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
00023530 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
00023535 04                         SME_lwZMb_2A9:	dc.b 4	
00023536 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002353B F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
00023540 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
00023545 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002354A 05                         SME_lwZMb_2BE:	dc.b 5	
0002354B ED08 0000 F3               		dc.b $ED, 8, 0, 0, $F3	
00023550 F504 0003 EB               		dc.b $F5, 4, 0, 3, $EB	
00023555 F50D 0005 FB               		dc.b $F5, $D, 0, 5, $FB	
0002355A 0508 000D FB               		dc.b 5, 8, 0, $D, $FB	
0002355F FD06 0010 EB               		dc.b $FD, 6, 0, $10, $EB	
00023564 04                         SME_lwZMb_2D8:	dc.b 4	
00023565 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
0002356A F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
0002356F EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
00023574 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
00023579 05                         SME_lwZMb_2ED:	dc.b 5	
0002357A FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002357F EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
00023584 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
00023589 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002358E 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
00023593 02                         SME_lwZMb_307:	dc.b 2	
00023594 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023599 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002359E 02                         SME_lwZMb_312:	dc.b 2	
0002359F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000235A4 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000235A9 02                         SME_lwZMb_31D:	dc.b 2	
000235AA EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000235AF FE0E 0006 ED               		dc.b $FE, $E, 0, 6, $ED	
000235B4 02                         SME_lwZMb_328:	dc.b 2	
000235B5 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000235BA FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000235BF 04                         SME_lwZMb_333:	dc.b 4	
000235C0 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000235C5 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000235CA FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000235CF FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000235D4 04                         SME_lwZMb_348:	dc.b 4	
000235D5 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000235DA EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000235DF FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000235E4 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000235E9 06                         SME_lwZMb_35D:	dc.b 6	
000235EA EE01 0000 06               		dc.b $EE, 1, 0, 0, 6	
000235EF FE0E 0002 F6               		dc.b $FE, $E, 0, 2, $F6	
000235F4 EE01 000E FE               		dc.b $EE, 1, 0, $E, $FE	
000235F9 FE00 0010 EE               		dc.b $FE, 0, 0, $10, $EE	
000235FE EE01 0011 F6               		dc.b $EE, 1, 0, $11, $F6	
00023603 EE01 0013 EE               		dc.b $EE, 1, 0, $13, $EE	
00023608 06                         SME_lwZMb_37C:	dc.b 6	
00023609 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002360E F604 000C F6               		dc.b $F6, 4, 0, $C, $F6	
00023613 EE04 000E F6               		dc.b $EE, 4, 0, $E, $F6	
00023618 EE01 0010 EE               		dc.b $EE, 1, 0, $10, $EE	
0002361D EE01 0012 06               		dc.b $EE, 1, 0, $12, 6	
00023622 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023627 02                         SME_lwZMb_39B:	dc.b 2	
00023628 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002362D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023632 02                         SME_lwZMb_3A6:	dc.b 2	
00023633 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00023638 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002363D 02                         SME_lwZMb_3B1:	dc.b 2	
0002363E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00023643 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023648 02                         SME_lwZMb_3BC:	dc.b 2	
00023649 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002364E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023653 04                         SME_lwZMb_3C7:	dc.b 4	
00023654 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00023659 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002365E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023663 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023668 03                         SME_lwZMb_3DC:	dc.b 3	
00023669 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002366E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023673 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023678 04                         SME_lwZMb_3EC:	dc.b 4	
00023679 F204 0000 EE               		dc.b $F2, 4, 0, 0, $EE	
0002367E EA0B 0002 FE               		dc.b $EA, $B, 0, 2, $FE	
00023683 0A00 000E FE               		dc.b $A, 0, 0, $E, $FE	
00023688 FA06 000F EE               		dc.b $FA, 6, 0, $F, $EE	
0002368D 03                         SME_lwZMb_401:	dc.b 3	
0002368E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00023693 0A00 000C FE               		dc.b $A, 0, 0, $C, $FE	
00023698 F207 000D EE               		dc.b $F2, 7, 0, $D, $EE	
0002369D 02                         SME_lwZMb_411:	dc.b 2	
0002369E 100C 0000 F4               		dc.b $10, $C, 0, 0, $F4	
000236A3 F00B 0004 F4               		dc.b $F0, $B, 0, 4, $F4	
000236A8 04                         SME_lwZMb_41C:	dc.b 4	
000236A9 0F0C 0000 F3               		dc.b $F, $C, 0, 0, $F3	
000236AE EF07 0004 F3               		dc.b $EF, 7, 0, 4, $F3	
000236B3 EF03 000C 03               		dc.b $EF, 3, 0, $C, 3	
000236B8 EF02 0010 0B               		dc.b $EF, 2, 0, $10, $B	
000236BD 03                         SME_lwZMb_431:	dc.b 3	
000236BE 0D0C 0000 F3               		dc.b $D, $C, 0, 0, $F3	
000236C3 ED0B 0004 F3               		dc.b $ED, $B, 0, 4, $F3	
000236C8 ED02 0010 0B               		dc.b $ED, 2, 0, $10, $B	
000236CD 02                         SME_lwZMb_441:	dc.b 2	
000236CE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000236D3 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000236D8 04                         SME_lwZMb_44C:	dc.b 4	
000236D9 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000236DE FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000236E3 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000236E8 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
000236ED 04                         SME_lwZMb_461:	dc.b 4	
000236EE F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
000236F3 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
000236F8 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
000236FD 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023702 03                         SME_lwZMb_476:	dc.b 3	
00023703 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00023708 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002370D F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00023712 03                         SME_lwZMb_486:	dc.b 3	
00023713 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00023718 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002371D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00023722 03                         SME_lwZMb_496:	dc.b 3	
00023723 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00023728 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002372D 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00023732 02                         SME_lwZMb_4A6:	dc.b 2	
00023733 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
00023738 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
0002373D 03                         SME_lwZMb_4B1:	dc.b 3	
0002373E F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
00023743 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
00023748 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
0002374D 03                         SME_lwZMb_4C1:	dc.b 3	
0002374E E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
00023753 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
00023758 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
0002375D 04                         SME_lwZMb_4D1:	dc.b 4	
0002375E F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023763 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00023768 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
0002376D F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023772 04                         SME_lwZMb_4E6:	dc.b 4	
00023773 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023778 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
0002377D F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00023782 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023787 02                         SME_lwZMb_4FB:	dc.b 2	
00023788 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002378D 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023792 03                         SME_lwZMb_506:	dc.b 3	
00023793 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023798 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002379D 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
000237A2 02                         SME_lwZMb_516:	dc.b 2	
000237A3 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000237A8 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000237AD 03                         SME_lwZMb_521:	dc.b 3	
000237AE EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
000237B3 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000237B8 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
000237BD 05                         SME_lwZMb_531:	dc.b 5	
000237BE E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000237C3 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000237C8 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000237CD 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
000237D2 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
000237D7 05                         SME_lwZMb_54B:	dc.b 5	
000237D8 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000237DD E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000237E2 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000237E7 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
000237EC 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
000237F1 03                         SME_lwZMb_565:	dc.b 3	
000237F2 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
000237F7 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
000237FC 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
00023801 03                         SME_lwZMb_575:	dc.b 3	
00023802 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00023807 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
0002380C 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00023811 03                         SME_lwZMb_585:	dc.b 3	
00023812 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00023817 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
0002381C 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
00023821 02                         SME_lwZMb_595:	dc.b 2	
00023822 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023827 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002382C 03                         SME_lwZMb_5A0:	dc.b 3	
0002382D EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00023832 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00023837 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
0002383C 04                         SME_lwZMb_5B0:	dc.b 4	
0002383D F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023842 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00023847 F800 0012 0C               		dc.b $F8, 0, 0, $12, $C	
0002384C 0801 0013 0C               		dc.b 8, 1, 0, $13, $C	
00023851 08                         SME_lwZMb_5C5:	dc.b 8	
00023852 1100 0000 F4               		dc.b $11, 0, 0, 0, $F4	
00023857 0908 0001 F4               		dc.b 9, 8, 0, 1, $F4	
0002385C F901 0004 0C               		dc.b $F9, 1, 0, 4, $C	
00023861 F101 0006 EC               		dc.b $F1, 1, 0, 6, $EC	
00023866 F102 0008 F4               		dc.b $F1, 2, 0, 8, $F4	
0002386B E903 000B FC               		dc.b $E9, 3, 0, $B, $FC	
00023870 F102 000F 04               		dc.b $F1, 2, 0, $F, 4	
00023875 E900 0012 04               		dc.b $E9, 0, 0, $12, 4	
0002387A 01                         SME_lwZMb_5EE:	dc.b 1	
0002387B EA0B 0000 F3               		dc.b $EA, $B, 0, 0, $F3	
00023880 04                         SME_lwZMb_5F4:	dc.b 4	
00023881 F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023886 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
0002388B 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00023890 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023895 04                         SME_lwZMb_609:	dc.b 4	
00023896 EC04 0000 FC               		dc.b $EC, 4, 0, 0, $FC	
0002389B F40D 0002 F4               		dc.b $F4, $D, 0, 2, $F4	
000238A0 0408 000A F4               		dc.b 4, 8, 0, $A, $F4	
000238A5 FC00 000D EC               		dc.b $FC, 0, 0, $D, $EC	
000238AA 04                         SME_lwZMb_61E:	dc.b 4	
000238AB F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
000238B0 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
000238B5 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
000238BA 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
000238BF 04                         SME_lwZMb_633:	dc.b 4	
000238C0 EC04 0000 FC               		dc.b $EC, 4, 0, 0, $FC	
000238C5 F40D 0002 F4               		dc.b $F4, $D, 0, 2, $F4	
000238CA 0408 000A F4               		dc.b 4, 8, 0, $A, $F4	
000238CF FC00 000D EC               		dc.b $FC, 0, 0, $D, $EC	
000238D4 03                         SME_lwZMb_648:	dc.b 3	
000238D5 F70B 0000 F8               		dc.b $F7, $B, 0, 0, $F8	
000238DA FF00 000C 10               		dc.b $FF, 0, 0, $C, $10	
000238DF 0700 000D 10               		dc.b 7, 0, 0, $D, $10	
000238E4 03                         SME_lwZMb_658:	dc.b 3	
000238E5 EF0B 0000 F0               		dc.b $EF, $B, 0, 0, $F0	
000238EA F700 000C 08               		dc.b $F7, 0, 0, $C, 8	
000238EF FF00 000D 08               		dc.b $FF, 0, 0, $D, 8	
000238F4 03                         SME_lwZMb_668:	dc.b 3	
000238F5 F70B 0000 F8               		dc.b $F7, $B, 0, 0, $F8	
000238FA FF00 000C 10               		dc.b $FF, 0, 0, $C, $10	
000238FF 0700 000D 10               		dc.b 7, 0, 0, $D, $10	
00023904 03                         SME_lwZMb_678:	dc.b 3	
00023905 EF0B 0000 F0               		dc.b $EF, $B, 0, 0, $F0	
0002390A F700 000C 08               		dc.b $F7, 0, 0, $C, 8	
0002390F FF00 000D 08               		dc.b $FF, 0, 0, $D, 8	
00023914 04                         SME_lwZMb_688:	dc.b 4	
00023915 FC01 1800 F4               		dc.b $FC, 1, $18, 0, $F4	
0002391A F407 1802 FC               		dc.b $F4, 7, $18, 2, $FC	
0002391F FC02 180A 0C               		dc.b $FC, 2, $18, $A, $C	
00023924 1400 180D 04               		dc.b $14, 0, $18, $D, 4	
00023929 04                         SME_lwZMb_69D:	dc.b 4	
0002392A FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
0002392F F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
00023934 FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023939 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
0002393E 04                         SME_lwZMb_6B2:	dc.b 4	
0002393F FC01 1800 F4               		dc.b $FC, 1, $18, 0, $F4	
00023944 F407 1802 FC               		dc.b $F4, 7, $18, 2, $FC	
00023949 FC02 180A 0C               		dc.b $FC, 2, $18, $A, $C	
0002394E 1400 180D 04               		dc.b $14, 0, $18, $D, 4	
00023953 04                         SME_lwZMb_6C7:	dc.b 4	
00023954 FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
00023959 F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
0002395E FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023963 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
00023968 03                         SME_lwZMb_6DC:	dc.b 3	
00023969 FC0E 0000 FC               		dc.b $FC, $E, 0, 0, $FC	
0002396E F400 000C 04               		dc.b $F4, 0, 0, $C, 4	
00023973 F400 000D 0C               		dc.b $F4, 0, 0, $D, $C	
00023978 03                         SME_lwZMb_6EC:	dc.b 3	
00023979 040E 0000 F4               		dc.b 4, $E, 0, 0, $F4	
0002397E FC00 000C FC               		dc.b $FC, 0, 0, $C, $FC	
00023983 FC00 000D 04               		dc.b $FC, 0, 0, $D, 4	
00023988 03                         SME_lwZMb_6FC:	dc.b 3	
00023989 FC0E 0000 FC               		dc.b $FC, $E, 0, 0, $FC	
0002398E F400 000C 04               		dc.b $F4, 0, 0, $C, 4	
00023993 F400 000D 0C               		dc.b $F4, 0, 0, $D, $C	
00023998 03                         SME_lwZMb_70C:	dc.b 3	
00023999 040E 0000 F4               		dc.b 4, $E, 0, 0, $F4	
0002399E FC00 000C FC               		dc.b $FC, 0, 0, $C, $FC	
000239A3 FC00 000D 04               		dc.b $FC, 0, 0, $D, 4	
000239A8                            		even
000239A8                            		even
000239A8                            
000239A8                            ; ---------------------------------------------------------------------------
000239A8                            ; Uncompressed graphics	loading	array for Sonic
000239A8                            ; ---------------------------------------------------------------------------
000239A8                            SonicDynPLC:
000239A8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000239A8                            ; --------------------------------------------------------------------------------
000239A8                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
000239A8                            
000239A8                            SME_eXnsg:	
000239A8 0000 0000                  		dc.w SME_eXnsg_B4-SME_eXnsg, SME_eXnsg_B5-SME_eXnsg	
000239AC 0000 0000                  		dc.w SME_eXnsg_BE-SME_eXnsg, SME_eXnsg_CD-SME_eXnsg	
000239B0 0000 0000                  		dc.w SME_eXnsg_D4-SME_eXnsg, SME_eXnsg_DB-SME_eXnsg	
000239B4 0000 0000                  		dc.w SME_eXnsg_E2-SME_eXnsg, SME_eXnsg_EB-SME_eXnsg	
000239B8 0000 0000                  		dc.w SME_eXnsg_F0-SME_eXnsg, SME_eXnsg_F5-SME_eXnsg	
000239BC 0000 0000                  		dc.w SME_eXnsg_FE-SME_eXnsg, SME_eXnsg_103-SME_eXnsg	
000239C0 0000 0000                  		dc.w SME_eXnsg_10A-SME_eXnsg, SME_eXnsg_115-SME_eXnsg	
000239C4 0000 0000                  		dc.w SME_eXnsg_122-SME_eXnsg, SME_eXnsg_12B-SME_eXnsg	
000239C8 0000 0000                  		dc.w SME_eXnsg_136-SME_eXnsg, SME_eXnsg_13F-SME_eXnsg	
000239CC 0000 0000                  		dc.w SME_eXnsg_14A-SME_eXnsg, SME_eXnsg_153-SME_eXnsg	
000239D0 0000 0000                  		dc.w SME_eXnsg_158-SME_eXnsg, SME_eXnsg_15D-SME_eXnsg	
000239D4 0000 0000                  		dc.w SME_eXnsg_166-SME_eXnsg, SME_eXnsg_16B-SME_eXnsg	
000239D8 0000 0000                  		dc.w SME_eXnsg_172-SME_eXnsg, SME_eXnsg_17F-SME_eXnsg	
000239DC 0000 0000                  		dc.w SME_eXnsg_18C-SME_eXnsg, SME_eXnsg_195-SME_eXnsg	
000239E0 0000 0000                  		dc.w SME_eXnsg_1A0-SME_eXnsg, SME_eXnsg_1A9-SME_eXnsg	
000239E4 0000 0000                  		dc.w SME_eXnsg_1B4-SME_eXnsg, SME_eXnsg_1B9-SME_eXnsg	
000239E8 0000 0000                  		dc.w SME_eXnsg_1BE-SME_eXnsg, SME_eXnsg_1C3-SME_eXnsg	
000239EC 0000 0000                  		dc.w SME_eXnsg_1C8-SME_eXnsg, SME_eXnsg_1D1-SME_eXnsg	
000239F0 0000 0000                  		dc.w SME_eXnsg_1DA-SME_eXnsg, SME_eXnsg_1E7-SME_eXnsg	
000239F4 0000 0000                  		dc.w SME_eXnsg_1F4-SME_eXnsg, SME_eXnsg_1F9-SME_eXnsg	
000239F8 0000 0000                  		dc.w SME_eXnsg_1FE-SME_eXnsg, SME_eXnsg_203-SME_eXnsg	
000239FC 0000 0000                  		dc.w SME_eXnsg_208-SME_eXnsg, SME_eXnsg_211-SME_eXnsg	
00023A00 0000 0000                  		dc.w SME_eXnsg_218-SME_eXnsg, SME_eXnsg_221-SME_eXnsg	
00023A04 0000 0000                  		dc.w SME_eXnsg_228-SME_eXnsg, SME_eXnsg_22D-SME_eXnsg	
00023A08 0000 0000                  		dc.w SME_eXnsg_236-SME_eXnsg, SME_eXnsg_23D-SME_eXnsg	
00023A0C 0000 0000                  		dc.w SME_eXnsg_242-SME_eXnsg, SME_eXnsg_24B-SME_eXnsg	
00023A10 0000 0000                  		dc.w SME_eXnsg_254-SME_eXnsg, SME_eXnsg_25B-SME_eXnsg	
00023A14 0000 0000                  		dc.w SME_eXnsg_262-SME_eXnsg, SME_eXnsg_269-SME_eXnsg	
00023A18 0000 0000                  		dc.w SME_eXnsg_26C-SME_eXnsg, SME_eXnsg_273-SME_eXnsg	
00023A1C 0000 0000                  		dc.w SME_eXnsg_27A-SME_eXnsg, SME_eXnsg_283-SME_eXnsg	
00023A20 0000 0000                  		dc.w SME_eXnsg_28C-SME_eXnsg, SME_eXnsg_291-SME_eXnsg	
00023A24 0000 0000                  		dc.w SME_eXnsg_298-SME_eXnsg, SME_eXnsg_29D-SME_eXnsg	
00023A28 0000 0000                  		dc.w SME_eXnsg_2A4-SME_eXnsg, SME_eXnsg_2AF-SME_eXnsg	
00023A2C 0000 0000                  		dc.w SME_eXnsg_2BA-SME_eXnsg, SME_eXnsg_2C1-SME_eXnsg	
00023A30 0000 0000                  		dc.w SME_eXnsg_2C8-SME_eXnsg, SME_eXnsg_2CF-SME_eXnsg	
00023A34 0000 0000                  		dc.w SME_eXnsg_2D4-SME_eXnsg, SME_eXnsg_2DB-SME_eXnsg	
00023A38 0000 0000                  		dc.w SME_eXnsg_2E4-SME_eXnsg, SME_eXnsg_2F5-SME_eXnsg	
00023A3C 0000 0000                  		dc.w SME_eXnsg_2F8-SME_eXnsg, SME_eXnsg_301-SME_eXnsg	
00023A40 0000 0000                  		dc.w SME_eXnsg_30A-SME_eXnsg, SME_eXnsg_313-SME_eXnsg	
00023A44 0000 0000                  		dc.w SME_eXnsg_31C-SME_eXnsg, SME_eXnsg_323-SME_eXnsg	
00023A48 0000 0000                  		dc.w SME_eXnsg_32A-SME_eXnsg, SME_eXnsg_331-SME_eXnsg	
00023A4C 0000 0000                  		dc.w SME_eXnsg_338-SME_eXnsg, SME_eXnsg_341-SME_eXnsg	
00023A50 0000 0000                  		dc.w SME_eXnsg_34A-SME_eXnsg, SME_eXnsg_353-SME_eXnsg	
00023A54 0000 0000                  		dc.w SME_eXnsg_35C-SME_eXnsg, SME_eXnsg_363-SME_eXnsg	
00023A58 0000 0000                  		dc.w SME_eXnsg_36A-SME_eXnsg, SME_eXnsg_371-SME_eXnsg	
00023A5C 00                         SME_eXnsg_B4:	dc.b 0	
00023A5D 0420 0020 0920 0C50 03     SME_eXnsg_B5:	dc.b 4, $20, 0, $20, 9, $20, $C, $50, 3	
00023A66 0720 1B50 0F00 1A03 9110+  SME_eXnsg_BE:	dc.b 7, $20, $1B, $50, $F, 0, $1A, 3, $91, $10, $15, 0, $18, 4, $81	
00023A75 0350 1E50 1520 1B          SME_eXnsg_CD:	dc.b 3, $50, $1E, $50, $15, $20, $1B	
00023A7C 0350 1E50 1520 24          SME_eXnsg_D4:	dc.b 3, $50, $1E, $50, $15, $20, $24	
00023A83 0380 2720 0920 0C          SME_eXnsg_DB:	dc.b 3, $80, $27, $20, 9, $20, $C	
00023A8A 0470 3050 3850 3E10 44     SME_eXnsg_E2:	dc.b 4, $70, $30, $50, $38, $50, $3E, $10, $44	
00023A93 0270 30B0 46               SME_eXnsg_EB:	dc.b 2, $70, $30, $B0, $46	
00023A98 0250 5280 58               SME_eXnsg_F0:	dc.b 2, $50, $52, $80, $58	
00023A9D 0450 5250 6150 6710 6D     SME_eXnsg_F5:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00023AA6 0250 52B0 6F               SME_eXnsg_FE:	dc.b 2, $50, $52, $B0, $6F	
00023AAB 0370 3030 7B50 7F          SME_eXnsg_103:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00023AB2 0550 8B20 9150 9400 9A53+  SME_eXnsg_10A:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00023ABD 0650 8510 9B30 9D50 A130+  SME_eXnsg_115:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00023ACA 0450 AC10 B270 B420 BC     SME_eXnsg_122:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00023AD3 0530 C570 C920 D110 D453+  SME_eXnsg_12B:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00023ADE 0450 BF10 D670 D820 E0     SME_eXnsg_136:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00023AE7 0550 8510 9B00 9170 E320+  SME_eXnsg_13F:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00023AF2 0470 EE50 F610 FC50 FE     SME_eXnsg_14A:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00023AFB 0270 EEB1 04               SME_eXnsg_153:	dc.b 2, $70, $EE, $B1, 4	
00023B00 0251 1081 16               SME_eXnsg_158:	dc.b 2, $51, $10, $81, $16	
00023B05 0451 1051 1F11 2551 27     SME_eXnsg_15D:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00023B0E 0251 10B1 2D               SME_eXnsg_166:	dc.b 2, $51, $10, $B1, $2D	
00023B13 0370 EE01 0481 39          SME_eXnsg_16B:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00023B1A 0611 4811 4A81 4C01 5501+  SME_eXnsg_172:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00023B27 0651 4221 5711 5A11 5C81+  SME_eXnsg_17F:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00023B34 0451 6711 6D81 6F11 78     SME_eXnsg_18C:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00023B3D 0521 8011 8371 8521 8D53+  SME_eXnsg_195:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00023B48 0451 7A11 9081 9211 9B     SME_eXnsg_1A0:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00023B51 0551 4281 9D11 5C11 A603+  SME_eXnsg_1A9:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00023B5C 0251 A8B1 AE               SME_eXnsg_1B4:	dc.b 2, $51, $A8, $B1, $AE	
00023B61 0250 52B1 BA               SME_eXnsg_1B9:	dc.b 2, $50, $52, $B1, $BA	
00023B66 0251 A8B1 C6               SME_eXnsg_1BE:	dc.b 2, $51, $A8, $B1, $C6	
00023B6B 0250 52B1 D2               SME_eXnsg_1C3:	dc.b 2, $50, $52, $B1, $D2	
00023B70 0451 DE11 E4B1 E601 F2     SME_eXnsg_1C8:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00023B79 0451 F311 F9B1 FB03 26     SME_eXnsg_1D1:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00023B82 0612 07B2 0913 9803 9A13+  SME_eXnsg_1DA:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00023B8F 06B2 1513 2713 A313 C913+  SME_eXnsg_1E7:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00023B9C 0252 21B2 27               SME_eXnsg_1F4:	dc.b 2, $52, $21, $B2, $27	
00023BA1 0251 10B2 33               SME_eXnsg_1F9:	dc.b 2, $51, $10, $B2, $33	
00023BA6 0252 21B2 3F               SME_eXnsg_1FE:	dc.b 2, $52, $21, $B2, $3F	
00023BAB 0251 10B2 4B               SME_eXnsg_203:	dc.b 2, $51, $10, $B2, $4B	
00023BB0 0452 5712 5DB2 5F02 6B     SME_eXnsg_208:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00023BB9 0372 6CB2 7403 DF          SME_eXnsg_211:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00023BC0 0412 80B2 8202 6B53 D9     SME_eXnsg_218:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00023BC9 03B2 8E03 D073 D1          SME_eXnsg_221:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00023BD0 0234 57B4 4B               SME_eXnsg_228:	dc.b 2, $34, $57, $B4, $4B	
00023BD5 0434 6A74 5B34 6324 67     SME_eXnsg_22D:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00023BDE 0334 7DB4 6E24 7A          SME_eXnsg_236:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00023BE5 0252 9AB2 A0               SME_eXnsg_23D:	dc.b 2, $52, $9A, $B2, $A0	
00023BEA 0452 AC72 B212 BA02 BC     SME_eXnsg_242:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00023BF3 0412 BD72 BF22 C702 CA     SME_eXnsg_24B:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023BFC 0322 CB22 CEF2 D1          SME_eXnsg_254:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00023C03 03B2 E172 ED00 6F          SME_eXnsg_25B:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00023C0A 0372 F532 FD23 01          SME_eXnsg_262:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023C11 0183 04                    SME_eXnsg_269:	dc.b 1, $83, 4	
00023C14 0373 0D03 1533 16          SME_eXnsg_26C:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023C1B 03B3 2913 3503 37          SME_eXnsg_273:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00023C22 04B3 3833 4403 4803 49     SME_eXnsg_27A:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00023C2B 04B3 4A33 5603 5A03 5B     SME_eXnsg_283:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00023C34 0283 5C73 65               SME_eXnsg_28C:	dc.b 2, $83, $5C, $73, $65	
00023C39 0383 6D23 7613 79          SME_eXnsg_291:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00023C40 0283 7B73 84               SME_eXnsg_298:	dc.b 2, $83, $7B, $73, $84	
00023C45 0383 6D23 8C13 8F          SME_eXnsg_29D:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00023C4C 0573 A613 AE53 B033 B603+  SME_eXnsg_2A4:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00023C57 0573 BB13 AE53 C333 B603+  SME_eXnsg_2AF:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00023C62 0372 F532 FD23 01          SME_eXnsg_2BA:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023C69 0373 0D03 1533 16          SME_eXnsg_2C1:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023C70 03B3 E013 EC33 EE          SME_eXnsg_2C8:	dc.b 3, $B3, $E0, $13, $EC, $33, $EE	
00023C77 02F4 0424 14               SME_eXnsg_2CF:	dc.b 2, $F4, 4, $24, $14	
00023C7C 0353 F2B3 F810 6B          SME_eXnsg_2D4:	dc.b 3, $53, $F2, $B3, $F8, $10, $6B	
00023C83 04F4 1714 2704 2914 2A     SME_eXnsg_2DB:	dc.b 4, $F4, $17, $14, $27, 4, $29, $14, $2A	
00023C8C 0804 3E24 3914 3C14 2C24+  SME_eXnsg_2E4:	dc.b 8, 4, $3E, $24, $39, $14, $3C, $14, $2C, $24, $2E, $34, $31, $24, $36, 4, $35	
00023C9D 01B4 3F                    SME_eXnsg_2F5:	dc.b 1, $B4, $3F	
00023CA0 0412 BD72 BF22 C702 CA     SME_eXnsg_2F8:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023CA9 0412 BD72 BF22 C702 CA     SME_eXnsg_301:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023CB2 0412 BD72 BF22 C702 CA     SME_eXnsg_30A:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023CBB 0412 BD72 BF22 C702 CA     SME_eXnsg_313:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023CC4 03B4 A604 B304 B4          SME_eXnsg_31C:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023CCB 03B4 A604 B304 B4          SME_eXnsg_323:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023CD2 03B4 A604 B304 B4          SME_eXnsg_32A:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023CD9 03B4 A604 B304 B4          SME_eXnsg_331:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023CE0 0414 9074 9224 9A04 9D     SME_eXnsg_338:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023CE9 0414 9074 9224 9A04 9D     SME_eXnsg_341:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023CF2 0414 9074 9224 9A04 9D     SME_eXnsg_34A:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023CFB 0414 9074 9224 9A04 9D     SME_eXnsg_353:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023D04 03B4 C204 CE04 CF          SME_eXnsg_35C:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023D0B 03B4 C204 CE04 CF          SME_eXnsg_363:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023D12 03B4 C204 CE04 CF          SME_eXnsg_36A:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023D19 03B4 C204 CE04 CF          SME_eXnsg_371:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023D20                            		even
00023D20                            		even
00023D20                            
00023D20                            ; ---------------------------------------------------------------------------
00023D20                            ; Uncompressed graphics	- Sonic
00023D20                            ; ---------------------------------------------------------------------------
00023D20                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002D720                            		even
0002D720                            ; ---------------------------------------------------------------------------
0002D720                            ; Compressed graphics - various
0002D720                            ; ---------------------------------------------------------------------------
0002D720                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002D824                            		even
0002D824                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002D85E                            		even
0002D85E                            Art_Shield:	incbin	artunc\shield.bin	; shield
0002DBBE                            		even
0002DBBE                            Art_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002E03E                            		even
0002E03E                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002E148                            		even
0002E148                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002E19A                            		even
0002E19A                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E3E2                            		even
0002E3E2                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E568                            		even
0002E568                            ; ---------------------------------------------------------------------------
0002E568                            ; Sprite mappings - walls of the special stage
0002E568                            ; ---------------------------------------------------------------------------
0002E568                            Map_SSWalls:
0002E568                            	include "_maps\SSwalls.asm"
0002E568                            ; ---------------------------------------------------------------------------
0002E568                            ; Sprite mappings - walls of the special stage
0002E568                            ; ---------------------------------------------------------------------------
0002E568 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E56C 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E570 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E574 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E578 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E57C 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E580 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E584 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E588 01                         byte_2C584:	dc.b 1
0002E589 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E58E 01                         byte_2C58A:	dc.b 1
0002E58F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E594 01                         byte_2C590:	dc.b 1
0002E595 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E59A 01                         byte_2C596:	dc.b 1
0002E59B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E5A0 01                         byte_2C59C:	dc.b 1
0002E5A1 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E5A6 01                         byte_2C5A2:	dc.b 1
0002E5A7 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E5AC 01                         byte_2C5A8:	dc.b 1
0002E5AD F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E5B2 01                         byte_2C5AE:	dc.b 1
0002E5B3 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E5B8 01                         byte_2C5B4:	dc.b 1
0002E5B9 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E5BE 01                         byte_2C5BA:	dc.b 1
0002E5BF F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E5C4 01                         byte_2C5C0:	dc.b 1
0002E5C5 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E5CA 01                         byte_2C5C6:	dc.b 1
0002E5CB F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E5D0 01                         byte_2C5CC:	dc.b 1
0002E5D1 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E5D6 01                         byte_2C5D2:	dc.b 1
0002E5D7 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E5DC 01                         byte_2C5D8:	dc.b 1
0002E5DD F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E5E2 01                         byte_2C5DE:	dc.b 1
0002E5E3 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E5E8                            		even
0002E5E8                            		even
0002E5E8                            ; ---------------------------------------------------------------------------
0002E5E8                            ; Compressed graphics - special stage
0002E5E8                            ; ---------------------------------------------------------------------------
0002E5E8                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002EF20                            		even
0002EF20                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002F054                            		even
0002F054                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002FCE4                            		even
0002FCE4                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002FFE4                            		even
0002FFE4                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000304D8                            		even
000304D8                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000305C6                            		even
000305C6                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00030696                            		even
00030696                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003078C                            		even
0003078C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000307EA                            		even
000307EA                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003087C                            		even
0003087C                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003093E                            		even
0003093E                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00030A0C                            		even
00030A0C                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030AD8                            		even
00030AD8                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00030BA0                            		even
00030BA0                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030C6A                            		even
00030C6A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030D3A                            		even
00030D3A                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030F2E                            		even
00030F2E                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00031096                            		even
00031096                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00031146                            		even
00031146                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00031220                            		even
00031220                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000312A4                            		even
000312A4                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00031422                            		even
00031422                            ; ---------------------------------------------------------------------------
00031422                            ; Compressed graphics - GHZ stuff
00031422                            ; ---------------------------------------------------------------------------
00031422                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003146C                            		even
0003146C                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00031586                            		even
00031586                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00031672                            		even
00031672                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000316BA                            		even
000316BA                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00031858                            		even
00031858                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000318D4                            		even
000318D4                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031AE8                            		even
00031AE8                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00031C14                            		even
00031C14                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031D42                            		even
00031D42                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031DE0                            		even
00031DE0                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031E40                            		even
00031E40                            ; ---------------------------------------------------------------------------
00031E40                            ; Compressed graphics - LZ stuff
00031E40                            ; ---------------------------------------------------------------------------
00031E40                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00031F64                            		even
00031F64                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00032758                            		even
00032758                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000328D8                            		even
000328D8                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00032A42                            		even
00032A42                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00033098                            		even
00033098                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003314E                            		even
0003314E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000331F0                            		even
000331F0                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003334C                            		even
0003334C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000333B0                            		even
000333B0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00033502                            		even
00033502                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000339E4                            		even
000339E4                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00033B54                            		even
00033B54                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033E0C                            		even
00033E0C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00033F44                            		even
00033F44                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003406E                            		even
0003406E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003417E                            		even
0003417E                            ; ---------------------------------------------------------------------------
0003417E                            ; Compressed graphics - MZ stuff
0003417E                            ; ---------------------------------------------------------------------------
0003417E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003440C                            		even
0003440C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000344CA                            		even
000344CA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00034582                            		even
00034582                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000345D6                            		even
000345D6                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000348B4                            		even
000348B4                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000351CA                            		even
000351CA                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003532E                            		even
0003532E                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000353B6                            		even
000353B6                            ; ---------------------------------------------------------------------------
000353B6                            ; Compressed graphics - SLZ stuff
000353B6                            ; ---------------------------------------------------------------------------
000353B6                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000355F2                            		even
000355F2                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00035738                            		even
00035738                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003597C                            		even
0003597C                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000359DE                            		even
000359DE                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00035AC0                            		even
00035AC0                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035CA2                            		even
00035CA2                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00035DAE                            		even
00035DAE                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035E52                            		even
00035E52                            ; ---------------------------------------------------------------------------
00035E52                            ; Compressed graphics - SYZ stuff
00035E52                            ; ---------------------------------------------------------------------------
00035E52                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035FBC                            		even
00035FBC                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003601E                            		even
0003601E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00036100                            		even
00036100                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003638E                            		even
0003638E                            ; ---------------------------------------------------------------------------
0003638E                            ; Compressed graphics - SBZ stuff
0003638E                            ; ---------------------------------------------------------------------------
0003638E                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000363E2                            		even
000363E2                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003667E                            		even
0003667E                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00036882                            		even
00036882                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00036A20                            		even
00036A20                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036D50                            		even
00036D50                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036F2E                            		even
00036F2E                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036F86                            		even
00036F86                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00037106                            		even
00037106                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00037204                            		even
00037204                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00037390                            		even
00037390                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000373E0                            		even
000373E0                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00037438                            		even
00037438                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00037534                            		even
00037534                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003764A                            		even
0003764A                            ; ---------------------------------------------------------------------------
0003764A                            ; Compressed graphics - enemies
0003764A                            ; ---------------------------------------------------------------------------
0003764A                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037A0A                            		even
00037A0A                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037EF8                            		even
00037EF8                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003829E                            		even
0003829E                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00038486                            		even
00038486                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00038B70                            		even
00038B70                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00038DD8                            		even
00038DD8                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039062                            		even
00039062                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00039586                            		even
00039586                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00039810                            		even
00039810                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039E2E                            		even
00039E2E                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003A216                            		even
0003A216                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A512                            		even
0003A512                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A75A                            		even
0003A75A                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A9F2                            		even
0003A9F2                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003ABD0                            		even
0003ABD0                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003AD5E                            		even
0003AD5E                            ; ---------------------------------------------------------------------------
0003AD5E                            ; Compressed graphics - various
0003AD5E                            ; ---------------------------------------------------------------------------
0003AD5E                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003AF86                            		even
0003AF86                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003B0D6                            		even
0003B0D6                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B158                            		even
0003B158                            Nem_LivesPic:	incbin	artnem\lifeiconpic.bin	; life counter icon picture
0003B1C8                            		even
0003B1C8                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B2D4 00                         		even
0003B2D4                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B72E                            		even
0003B72E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003BD94                            		even
0003BD94                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003BE44                            		even
0003BE44                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003BFD6                            		even
0003BFD6                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003C0D8                            		even
0003C0D8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C1B4                            		even
0003C1B4                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C662                            		even
0003C662                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C722                            		even
0003C722                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C896                            		even
0003C896                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003CB98                            		even
0003CB98                            ; ---------------------------------------------------------------------------
0003CB98                            ; Compressed graphics - continue screen
0003CB98                            ; ---------------------------------------------------------------------------
0003CB98                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003CE48                            		even
0003CE48                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003D082                            		even
0003D082                            ; ---------------------------------------------------------------------------
0003D082                            ; Compressed graphics - animals
0003D082                            ; ---------------------------------------------------------------------------
0003D082                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D1DA                            		even
0003D1DA                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D336                            		even
0003D336                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003D4B2                            		even
0003D4B2                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003D5CE                            		even
0003D5CE                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D704                            		even
0003D704                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D83E                            		even
0003D83E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D99A                            		even
0003D99A                            ; ---------------------------------------------------------------------------
0003D99A                            ; Compressed graphics - primary patterns and block mappings
0003D99A                            ; ---------------------------------------------------------------------------
0003D99A                            
0003D99A                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
0003EFFA                            		even
0003EFFA                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
000403A2                            		even
000403A2                            Blk16_TS:	incbin	map16\ts.bin
00040CC0                            		even
00040CC0                            Blk256_TS:	incbin	map256\ts.bin
00042E1C                            		even
00042E1C                            Blk16_GHZ:	incbin	map16\ghz.bin
00043754                            		even
00043754                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
000460D2                            		even
000460D2                            Blk256_GHZ:	incbin	map256\ghz.bin
00048136                            		even
00048136                            Blk16_LZ:	incbin	map16\lz.bin
000487C6                            		even
000487C6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004C230                            		even
0004C230                            Blk256_LZ:	incbin	map256\lz.bin
0004E1AC                            		even
0004E1AC                            Blk16_MZ:	incbin	map16\mz.bin
0004E922 00                         		even
0004E922                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00051076                            		even
00051076                            Blk256_MZ:	incbin	map256\mz.bin
000527AE                            		even
000527AE                            Blk16_SLZ:	incbin	map16\slz.bin
00052F40 00                         		even
00052F40                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00056930 00                         		even
00056930                            Blk256_SLZ:	incbin	map256\slz.bin
000588AC                            		even
000588AC                            Blk16_SYZ:	incbin	map16\syz.bin
0005915A 00                         		even
0005915A                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005C740                            		even
0005C740                            Blk256_SYZ:	incbin	map256\syz.bin
0005EA2A                            		even
0005EA2A                            Blk16_SBZ:	incbin	map16\sbz.bin
0005F7D8                            		even
0005F7D8                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00061EA6                            		even
00061EA6                            Blk256_SBZ:	incbin	map256\sbz.bin
00064A2A 00                         		even
00064A2A                            ; ---------------------------------------------------------------------------
00064A2A                            ; Compressed graphics - bosses and ending sequence
00064A2A                            ; ---------------------------------------------------------------------------
00064A2A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006528E                            		even
0006528E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00065578                            		even
00065578                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00065DFC                            		even
00065DFC                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00066628                            		even
00066628                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00066D90                            		even
00066D90                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00067310                            		even
00067310                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00067430                            		even
00067430                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006762E                            		even
0006762E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006880C                            		even
0006880C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00069150                            		even
00069150                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00069526                            		even
00069526                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00069AB6                            		even
00069AB6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00069D3E                            		even
00069D3E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006A33C                            		even
0006A33C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006A5C4                            		even
0006A5C4                            ; ---------------------------------------------------------------------------
0006A5C4                            ; Collision data
0006A5C4                            ; ---------------------------------------------------------------------------
0006A5C4                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006A6C4                            		even
0006A6C4                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006B6C4                            		even
0006B6C4                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006C6C4                            		even
0006C6C4                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0006C87E 00                         		even
0006C87E                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0006CA36                            		even
0006CA36                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0006CBD6                            		even
0006CBD6                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0006CD76                            		even
0006CD76                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0006CF06                            		even
0006CF06                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0006D096                            		even
0006D096                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0006D234                            		even
0006D234                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0006D3D2                            		even
0006D3D2                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0006D5C6                            		even
0006D5C6                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0006D7BA                            		even
0006D7BA                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0006DA12                            		even
0006DA12                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0006DC6A                            		even
0006DC6A                            ; ---------------------------------------------------------------------------
0006DC6A                            ; Special layouts
0006DC6A                            ; ---------------------------------------------------------------------------
0006DC6A                            SS_1:		incbin	sslayout\1.bin
0006DEE4                            		even
0006DEE4                            SS_2:		incbin	sslayout\2.bin
0006E2F6                            		even
0006E2F6                            SS_3:		incbin	sslayout\3.bin
0006E652                            		even
0006E652                            SS_4:		incbin	sslayout\4.bin
0006EB2C                            		even
0006EB2C                            SS_5:		incbin	sslayout\5.bin
0006EFFE                            		even
0006EFFE                            SS_6:		incbin	sslayout\6.bin
0006F30E                            		even
0006F30E                            ; ---------------------------------------------------------------------------
0006F30E                            ; Animated uncompressed graphics
0006F30E                            ; ---------------------------------------------------------------------------
0006F30E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006F50E                            		even
0006F50E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006F90E                            		even
0006F90E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006FD8E                            		even
0006FD8E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007008E                            		even
0007008E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007068E                            		even
0007068E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007098E                            		even
0007098E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0007140E                            		even
0007140E                            
0007140E                            ; ---------------------------------------------------------------------------
0007140E                            ; Level	layout index
0007140E                            ; ---------------------------------------------------------------------------
0007140E 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0007141A 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
00071426 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
00071432 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
0007143E 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0007144A 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
00071456 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
00071462 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
0007146E 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0007147A 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
00071486 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
00071492 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
0007149E 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
000714AA 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
000714B6 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
000714C2 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
000714CE 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
000714DA 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
000714E6 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
000714F2 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
000714FE 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0007150A 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
00071516 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
00071522 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
0007152E 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0007153A 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
00071546 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
00071552 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0007155E                            
0007155E                            Level_GHZ1:	incbin	levels\ghz1.bin
0007255E                            		even
0007255E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072562                            Level_GHZ2:	incbin	levels\ghz2.bin
00073562                            		even
00073562 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00073566                            Level_GHZ3:	incbin	levels\ghz3.bin
00074566                            		even
00074566                            Level_GHZbg:	incbin	levels\ghzbg.bin
00074588                            		even
00074588 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007458C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00074590                            
00074590                            Level_LZ1:	incbin	levels\lz1.bin
00075590                            		even
00075590                            Level_LZbg:	incbin	levels\lzbg.bin
00075692                            		even
00075692 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00075696                            Level_LZ2:	incbin	levels\lz2.bin
00076696                            		even
00076696 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007669A                            Level_LZ3:	incbin	levels\lz3.bin
0007769A                            		even
0007769A                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
0007869A                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
0007869A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007869E                            Level_SBZ3:	incbin	levels\sbz3.bin
0007969E                            		even
0007969E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000796A2                            
000796A2                            Level_MZ1:	incbin	levels\mz1.bin
0007A6A2                            		even
0007A6A2                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A71C                            		even
0007A71C                            Level_MZ2:	incbin	levels\mz2.bin
0007B71C                            		even
0007B71C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007B7AE                            		even
0007B7AE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007B7B2                            Level_MZ3:	incbin	levels\mz3.bin
0007C7B2                            		even
0007C7B2                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007C856                            		even
0007C856 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007C85A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007C85E                            
0007C85E                            Level_SLZ1:	incbin	levels\slz1.bin
0007D85E                            		even
0007D85E                            Level_SLZbg:	incbin	levels\slzbg.bin
0007D8D8                            		even
0007D8D8                            Level_SLZ2:	incbin	levels\slz2.bin
0007E8D8                            		even
0007E8D8                            Level_SLZ3:	incbin	levels\slz3.bin
0007F8D8                            		even
0007F8D8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F8DC                            
0007F8DC                            Level_SYZ1:	incbin	levels\syz1.bin
000808DC                            		even
000808DC                            Level_SYZbg:	incbin	levels\syzbg.bin
00080916                            		even
00080916 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0008091A                            Level_SYZ2:	incbin	levels\syz2.bin
0008191A                            		even
0008191A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0008191E                            Level_SYZ3:	incbin	levels\syz3.bin
0008291E                            		even
0008291E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00082922 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00082926                            
00082926                            Level_SBZ1:	incbin	levels\sbz1.bin
00083926                            		even
00083926                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00083964                            		even
00083964                            Level_SBZ2:	incbin	levels\sbz2.bin
00084964                            		even
00084964                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00084ACE                            		even
00084ACE 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00084AD2 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00084AD6                            Level_End:	incbin	levels\ending.bin
00085AD6                            		even
00085AD6 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00085ADA                            
00085ADA                            ; ---------------------------------------------------------------------------
00085ADA                            ; Animated uncompressed giant ring graphics
00085ADA                            ; ---------------------------------------------------------------------------
00085ADA                            Art_BigRing:	incbin	artunc\bigring.bin
0008671A                            		even
0008671A                            ; ---------------------------------------------------------------------------
0008671A                            ; Sprite locations index
0008671A                            ; ---------------------------------------------------------------------------
0008671A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008671E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086722 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086726 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008672A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008672E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086732 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086736 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008673A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008673E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086742 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086746 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008674A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008674E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086752 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086756 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008675A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008675E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086762 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086766 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008676A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008676E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086772 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086776 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008677A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008677E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086782 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00086786 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008678A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0008678E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00086792 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00086796 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0008679A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0008679E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000867A2 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000867A6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000867AA FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000867B0                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00086816                            		even
00086816                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00086DE6                            		even
00086DE6                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000874B2                            		even
000874B2                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00087A04                            		even
00087A04                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00087EBA                            		even
00087EBA                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000884DE                            		even
000884DE                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00088976                            		even
00088976                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000889A8                            		even
000889A8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000889DA                            		even
000889DA                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00088A0C                            		even
00088A0C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00088A3E                            		even
00088A3E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00088A88                            		even
00088A88                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00088AC6                            		even
00088AC6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00088E32                            		even
00088E32                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000892DC                            		even
000892DC                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00089852                            		even
00089852                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00089DAA                            		even
00089DAA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0008A266                            		even
0008A266                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0008A890                            		even
0008A890                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0008AD1C                            		even
0008AD1C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0008B286                            		even
0008B286                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0008B88C                            		even
0008B88C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0008BFCA                            		even
0008BFCA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0008C6A8                            		even
0008C6A8                            ObjPos_FZ:	incbin	objpos\fz.bin
0008C6BA                            		even
0008C6BA                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0008C6EC                            		even
0008C6EC                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0008C71E                            		even
0008C71E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0008C750                            		even
0008C750                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0008C782                            		even
0008C782                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0008C7B4                            		even
0008C7B4                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0008C7EC                            		even
0008C7EC                            ObjPos_End:	incbin	objpos\ending.bin
0008C948                            		even
0008C948 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008C94E                            ; ---------------------------------------------------------------------------
0008C94E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0008C952 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0008C956 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008C95A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008C95E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0008C962 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0008C966                            ; ---------------------------------------------------------------------------
0008C966                            ; PSG instruments used in music
0008C966                            ; ---------------------------------------------------------------------------
0008C966 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008C972 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008C97E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008C98A                            PSG1:		incbin	sound\psg1.bin
0008C9A1                            PSG2:		incbin	sound\psg2.bin
0008C9A8                            PSG3:		incbin	sound\psg3.bin
0008C9B9                            PSG4:		incbin	sound\psg4.bin
0008C9C4                            PSG6:		incbin	sound\psg6.bin
0008C9D3                            PSG5:		incbin	sound\psg5.bin
0008C9FD                            PSG7:		incbin	sound\psg7.bin
0008CA19                            PSG8:		incbin	sound\psg8.bin
0008CA41                            PSG9:		incbin	sound\psg9.bin
0008CA52                            
0008CA52 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008CA5A                            ; ---------------------------------------------------------------------------
0008CA5A                            ; Music	Pointers
0008CA5A                            ; ---------------------------------------------------------------------------
0008CA5A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0008CA62 0000 0000 0000 0000        		dc.l Music83, Music84
0008CA6A 0000 0000 0000 0000        		dc.l Music85, Music86
0008CA72 0000 0000 0000 0000        		dc.l Music87, Music88
0008CA7A 0000 0000 0000 0000        		dc.l Music89, Music8A
0008CA82 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008CA8A 0000 0000 0000 0000        		dc.l Music8D, Music8E
0008CA92 0000 0000 0000 0000        		dc.l Music8F, Music90
0008CA9A 0000 0000 0000 0000        		dc.l Music91, Music92
0008CAA2 0000 0000 0000 0000        		dc.l Music93, Music94
0008CAAA 0000 0000 0000 0000        		dc.l Music95, Music96
0008CAB2 0000 0000                  		dc.l Music97
0008CAB6                            ; ---------------------------------------------------------------------------
0008CAB6                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0008CAB6                            ; ---------------------------------------------------------------------------
0008CAB6 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0008CAC6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0008CAD6 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0008CAE6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0008CAF6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0008CB06 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0008CB16 9090 9090 90               		dc.b $90, $90, $90, $90, $90
0008CB1C 00                         		even
0008CB1C                            
0008CB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CB1C                            
0008CB1C                            
0008CB1C                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0008CB1C                            	;	move.w	#$100,($A11100).l ; stop the Z80
0008CB1C                            	;	nop
0008CB1C                            	;	nop
0008CB1C                            	;	nop
0008CB1C                            
0008CB1C                            ;loc_71b5a:
0008CB1C 4DF9 00FF F000             		lea	($FFF000).l,a6
0008CB22 422E 000E                  		clr.b	$E(a6)
0008CB26 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0008CB2A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008CB2E 532E 0001                  		subq.b	#1,1(a6)
0008CB32 6600                       		bne.s	loc_71B9E
0008CB34 4EBA 0000                  		jsr	sub_7260C(pc)
0008CB38                            
0008CB38                            loc_71B9E:
0008CB38 102E 0004                  		move.b	4(a6),d0
0008CB3C 6700                       		beq.s	loc_71BA8
0008CB3E 4EBA 0000                  		jsr	sub_72504(pc)
0008CB42                            
0008CB42                            loc_71BA8:
0008CB42 4A2E 0024                  		tst.b	$24(a6)
0008CB46 6700                       		beq.s	loc_71BB2
0008CB48 4EBA 0000                  		jsr	sub_7267C(pc)
0008CB4C                            
0008CB4C                            loc_71BB2:
0008CB4C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008CB50 6700                       		beq.s	loc_71BBC	; if not, branch
0008CB52 4EBA 0000                  		jsr	Sound_Play(pc)
0008CB56                            
0008CB56                            loc_71BBC:
0008CB56 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008CB5C 6700                       		beq.s	loc_71BC8
0008CB5E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0008CB62                            
0008CB62                            loc_71BC8:
0008CB62 4BEE 0040                  		lea	$40(a6),a5
0008CB66 4A15                       		tst.b	(a5)
0008CB68 6A00                       		bpl.s	loc_71BD4
0008CB6A 4EBA 0000                  		jsr	sub_71C4E(pc)
0008CB6E                            
0008CB6E                            loc_71BD4:
0008CB6E 422E 0008                  		clr.b	8(a6)
0008CB72 7E05                       		moveq	#5,d7
0008CB74                            
0008CB74                            loc_71BDA:
0008CB74 DAFC 0030                  		adda.w	#$30,a5
0008CB78 4A15                       		tst.b	(a5)
0008CB7A 6A00                       		bpl.s	loc_71BE6
0008CB7C 4EBA 0000                  		jsr	sub_71CCA(pc)
0008CB80                            
0008CB80                            loc_71BE6:
0008CB80 51CF FFF2                  		dbf	d7,loc_71BDA
0008CB84                            
0008CB84 7E02                       		moveq	#2,d7
0008CB86                            
0008CB86                            loc_71BEC:
0008CB86 DAFC 0030                  		adda.w	#$30,a5
0008CB8A 4A15                       		tst.b	(a5)
0008CB8C 6A00                       		bpl.s	loc_71BF8
0008CB8E 4EBA 0000                  		jsr	sub_72850(pc)
0008CB92                            
0008CB92                            loc_71BF8:
0008CB92 51CF FFF2                  		dbf	d7,loc_71BEC
0008CB96                            
0008CB96 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008CB9C 7E02                       		moveq	#2,d7
0008CB9E                            
0008CB9E                            loc_71C04:
0008CB9E DAFC 0030                  		adda.w	#$30,a5
0008CBA2 4A15                       		tst.b	(a5)
0008CBA4 6A00                       		bpl.s	loc_71C10
0008CBA6 4EBA 0000                  		jsr	sub_71CCA(pc)
0008CBAA                            
0008CBAA                            loc_71C10:
0008CBAA 51CF FFF2                  		dbf	d7,loc_71C04
0008CBAE                            
0008CBAE 7E02                       		moveq	#2,d7
0008CBB0                            
0008CBB0                            loc_71C16:
0008CBB0 DAFC 0030                  		adda.w	#$30,a5
0008CBB4 4A15                       		tst.b	(a5)
0008CBB6 6A00                       		bpl.s	loc_71C22
0008CBB8 4EBA 0000                  		jsr	sub_72850(pc)
0008CBBC                            
0008CBBC                            loc_71C22:
0008CBBC 51CF FFF2                  		dbf	d7,loc_71C16
0008CBC0 1D7C 0040 000E             		move.b	#$40,$E(a6)
0008CBC6 DAFC 0030                  		adda.w	#$30,a5
0008CBCA 4A15                       		tst.b	(a5)
0008CBCC 6A00                       		bpl.s	loc_71C38
0008CBCE 4EBA 0000                  		jsr	sub_71CCA(pc)
0008CBD2                            
0008CBD2                            loc_71C38:
0008CBD2 DAFC 0030                  		adda.w	#$30,a5
0008CBD6 4A15                       		tst.b	(a5)
0008CBD8 6A00                       		bpl.s	loc_71C44
0008CBDA 4EBA 0000                  		jsr	sub_72850(pc)
0008CBDE                            
0008CBDE                            loc_71C44:
0008CBDE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	   	; is Megadrive PAL?
0008CBE4 6700                       		beq.s	@end		 			; if not, branch
0008CBE6 5338 FFBF                  		subq.b	#1,($FFFFFFBF).w		; decrement timer
0008CBEA 6A00                       		bpl.s	@end					; if it's not 0, return
0008CBEC 11FC 0005 FFBF             		move.b  #5,($FFFFFFBF).w	   	; reset counter
0008CBF2 6000 FF28                  		bra.w	sub_71B4C		  		; run sound driver again
0008CBF6                            		
0008CBF6                            @end:
0008CBF6 4E75                       		rts
0008CBF8                            ; End of function sub_71B4C
0008CBF8                            
0008CBF8                            
0008CBF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CBF8                            
0008CBF8                            
0008CBF8                            sub_71C4E:				; XREF: sub_71B4C
0008CBF8 532D 000E                  		subq.b	#1,$E(a5)
0008CBFC 6600                       		bne.s	locret_71CAA
0008CBFE 1D7C 0080 0008             		move.b	#$80,8(a6)
0008CC04 286D 0004                  		movea.l	4(a5),a4
0008CC08                            
0008CC08                            loc_71C5E:
0008CC08 7A00                       		moveq	#0,d5
0008CC0A 1A1C                       		move.b	(a4)+,d5
0008CC0C 0C05 00E0                  		cmpi.b	#-$20,d5
0008CC10 6500                       		bcs.s	loc_71C6E
0008CC12 4EBA 0000                  		jsr	sub_72A5A(pc)
0008CC16 60F0                       		bra.s	loc_71C5E
0008CC18                            ; ===========================================================================
0008CC18                            
0008CC18                            loc_71C6E:
0008CC18 4A05                       		tst.b	d5
0008CC1A 6A00                       		bpl.s	loc_71C84
0008CC1C 1B45 0010                  		move.b	d5,$10(a5)
0008CC20 1A1C                       		move.b	(a4)+,d5
0008CC22 6A00                       		bpl.s	loc_71C84
0008CC24 534C                       		subq.w	#1,a4
0008CC26 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008CC2C 6000                       		bra.s	loc_71C88
0008CC2E                            ; ===========================================================================
0008CC2E                            
0008CC2E                            loc_71C84:
0008CC2E 4EBA 0000                  		jsr	sub_71D40(pc)
0008CC32                            
0008CC32                            loc_71C88:
0008CC32 2B4C 0004                  		move.l	a4,4(a5)
0008CC36 0815 0002                  		btst	#2,(a5)
0008CC3A 6600                       		bne.s	locret_71CAA
0008CC3C 7000                       		moveq	#0,d0
0008CC3E 102D 0010                  		move.b	$10(a5),d0
0008CC42 0C00 0080                  		cmpi.b	#$80,d0
0008CC46 6700                       		beq.s	locret_71CAA
0008CC48 33FC 0100 00A1 1100 4E71+  		stopZ80
0008CC60 13C0 00A0 1FFF             		move.b    d0,($A01FFF).l
0008CC66 33FC 0000 00A1 1100        		startZ80
0008CC6E                            
0008CC6E                            locret_71CAA:
0008CC6E 4E75                       		rts	
0008CC70                            ; ===========================================================================
0008CC70                            
0008CC70                            loc_71CAC:
0008CC70 0400 0088                  		subi.b	#$88,d0
0008CC74 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0008CC78 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0008CC7E 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008CC86 4E75                       		rts	
0008CC88                            ; End of function sub_71C4E
0008CC88                            
0008CC88                            ; ===========================================================================
0008CC88 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0008CC8E                            
0008CC8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CC8E                            
0008CC8E                            
0008CC8E                            sub_71CCA:				; XREF: sub_71B4C
0008CC8E 532D 000E                  		subq.b	#1,$E(a5)
0008CC92 6600                       		bne.s	loc_71CE0
0008CC94 0895 0004                  		bclr	#4,(a5)
0008CC98 4EBA 0000                  		jsr	sub_71CEC(pc)
0008CC9C 4EBA 0000                  		jsr	sub_71E18(pc)
0008CCA0 6000 0000                  		bra.w	loc_726E2
0008CCA4                            ; ===========================================================================
0008CCA4                            
0008CCA4                            loc_71CE0:
0008CCA4 4EBA 0000                  		jsr	sub_71D9E(pc)
0008CCA8 4EBA 0000                  		jsr	sub_71DC6(pc)
0008CCAC 6000 0000                  		bra.w	loc_71E24
0008CCB0                            ; End of function sub_71CCA
0008CCB0                            
0008CCB0                            
0008CCB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CCB0                            
0008CCB0                            
0008CCB0                            sub_71CEC:				; XREF: sub_71CCA
0008CCB0 286D 0004                  		movea.l	4(a5),a4
0008CCB4 0895 0001                  		bclr	#1,(a5)
0008CCB8                            
0008CCB8                            loc_71CF4:
0008CCB8 7A00                       		moveq	#0,d5
0008CCBA 1A1C                       		move.b	(a4)+,d5
0008CCBC 0C05 00E0                  		cmpi.b	#-$20,d5
0008CCC0 6500                       		bcs.s	loc_71D04
0008CCC2 4EBA 0000                  		jsr	sub_72A5A(pc)
0008CCC6 60F0                       		bra.s	loc_71CF4
0008CCC8                            ; ===========================================================================
0008CCC8                            
0008CCC8                            loc_71D04:
0008CCC8 4EBA 0000                  		jsr	sub_726FE(pc)
0008CCCC 4A05                       		tst.b	d5
0008CCCE 6A00                       		bpl.s	loc_71D1A
0008CCD0 4EBA 0000                  		jsr	sub_71D22(pc)
0008CCD4 1A1C                       		move.b	(a4)+,d5
0008CCD6 6A00                       		bpl.s	loc_71D1A
0008CCD8 534C                       		subq.w	#1,a4
0008CCDA 6000 0000                  		bra.w	sub_71D60
0008CCDE                            ; ===========================================================================
0008CCDE                            
0008CCDE                            loc_71D1A:
0008CCDE 4EBA 0000                  		jsr	sub_71D40(pc)
0008CCE2 6000 0000                  		bra.w	sub_71D60
0008CCE6                            ; End of function sub_71CEC
0008CCE6                            
0008CCE6                            
0008CCE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CCE6                            
0008CCE6                            
0008CCE6                            sub_71D22:				; XREF: sub_71CEC
0008CCE6 0405 0080                  		subi.b	#$80,d5
0008CCEA 6700                       		beq.s	loc_71D58
0008CCEC DA2D 0008                  		add.b	8(a5),d5
0008CCF0 0245 007F                  		andi.w	#$7F,d5
0008CCF4 E34D                       		lsl.w	#1,d5
0008CCF6 41FA 0000                  		lea	word_72790(pc),a0
0008CCFA 3C30 5000                  		move.w	(a0,d5.w),d6
0008CCFE 3B46 0010                  		move.w	d6,$10(a5)
0008CD02 4E75                       		rts	
0008CD04                            ; End of function sub_71D22
0008CD04                            
0008CD04                            
0008CD04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CD04                            
0008CD04                            
0008CD04                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008CD04 1005                       		move.b	d5,d0
0008CD06 122D 0002                  		move.b	2(a5),d1
0008CD0A                            
0008CD0A                            loc_71D46:
0008CD0A 5301                       		subq.b	#1,d1
0008CD0C 6700                       		beq.s	loc_71D4E
0008CD0E D005                       		add.b	d5,d0
0008CD10 60F8                       		bra.s	loc_71D46
0008CD12                            ; ===========================================================================
0008CD12                            
0008CD12                            loc_71D4E:
0008CD12 1B40 000F                  		move.b	d0,$F(a5)
0008CD16 1B40 000E                  		move.b	d0,$E(a5)
0008CD1A 4E75                       		rts	
0008CD1C                            ; End of function sub_71D40
0008CD1C                            
0008CD1C                            ; ===========================================================================
0008CD1C                            
0008CD1C                            loc_71D58:				; XREF: sub_71D22
0008CD1C 08D5 0001                  		bset	#1,(a5)
0008CD20 426D 0010                  		clr.w	$10(a5)
0008CD24                            
0008CD24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CD24                            
0008CD24                            
0008CD24                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008CD24 2B4C 0004                  		move.l	a4,4(a5)
0008CD28 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008CD2E 0815 0004                  		btst	#4,(a5)
0008CD32 6600                       		bne.s	locret_71D9C
0008CD34 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008CD3A 422D 000C                  		clr.b	$C(a5)
0008CD3E 0815 0003                  		btst	#3,(a5)
0008CD42 6700                       		beq.s	locret_71D9C
0008CD44 206D 0014                  		movea.l	$14(a5),a0
0008CD48 1B58 0018                  		move.b	(a0)+,$18(a5)
0008CD4C 1B58 0019                  		move.b	(a0)+,$19(a5)
0008CD50 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008CD54 1018                       		move.b	(a0)+,d0
0008CD56 E208                       		lsr.b	#1,d0
0008CD58 1B40 001B                  		move.b	d0,$1B(a5)
0008CD5C 426D 001C                  		clr.w	$1C(a5)
0008CD60                            
0008CD60                            locret_71D9C:
0008CD60 4E75                       		rts	
0008CD62                            ; End of function sub_71D60
0008CD62                            
0008CD62                            
0008CD62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CD62                            
0008CD62                            
0008CD62                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008CD62 4A2D 0012                  		tst.b	$12(a5)
0008CD66 6700                       		beq.s	locret_71DC4
0008CD68 532D 0012                  		subq.b	#1,$12(a5)
0008CD6C 6600                       		bne.s	locret_71DC4
0008CD6E 08D5 0001                  		bset	#1,(a5)
0008CD72 4A2D 0001                  		tst.b	1(a5)
0008CD76 6B00 0000                  		bmi.w	loc_71DBE
0008CD7A 4EBA 0000                  		jsr	sub_726FE(pc)
0008CD7E 584F                       		addq.w	#4,sp
0008CD80 4E75                       		rts	
0008CD82                            ; ===========================================================================
0008CD82                            
0008CD82                            loc_71DBE:
0008CD82 4EBA 0000                  		jsr	sub_729A0(pc)
0008CD86 584F                       		addq.w	#4,sp
0008CD88                            
0008CD88                            locret_71DC4:
0008CD88 4E75                       		rts	
0008CD8A                            ; End of function sub_71D9E
0008CD8A                            
0008CD8A                            
0008CD8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CD8A                            
0008CD8A                            
0008CD8A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008CD8A 584F                       		addq.w	#4,sp
0008CD8C 0815 0003                  		btst	#3,(a5)
0008CD90 6700                       		beq.s	locret_71E16
0008CD92 4A2D 0018                  		tst.b	$18(a5)
0008CD96 6700                       		beq.s	loc_71DDA
0008CD98 532D 0018                  		subq.b	#1,$18(a5)
0008CD9C 4E75                       		rts	
0008CD9E                            ; ===========================================================================
0008CD9E                            
0008CD9E                            loc_71DDA:
0008CD9E 532D 0019                  		subq.b	#1,$19(a5)
0008CDA2 6700                       		beq.s	loc_71DE2
0008CDA4 4E75                       		rts	
0008CDA6                            ; ===========================================================================
0008CDA6                            
0008CDA6                            loc_71DE2:
0008CDA6 206D 0014                  		movea.l	$14(a5),a0
0008CDAA 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008CDB0 4A2D 001B                  		tst.b	$1B(a5)
0008CDB4 6600                       		bne.s	loc_71DFE
0008CDB6 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008CDBC 442D 001A                  		neg.b	$1A(a5)
0008CDC0 4E75                       		rts	
0008CDC2                            ; ===========================================================================
0008CDC2                            
0008CDC2                            loc_71DFE:
0008CDC2 532D 001B                  		subq.b	#1,$1B(a5)
0008CDC6 1C2D 001A                  		move.b	$1A(a5),d6
0008CDCA 4886                       		ext.w	d6
0008CDCC DC6D 001C                  		add.w	$1C(a5),d6
0008CDD0 3B46 001C                  		move.w	d6,$1C(a5)
0008CDD4 DC6D 0010                  		add.w	$10(a5),d6
0008CDD8 594F                       		subq.w	#4,sp
0008CDDA                            
0008CDDA                            locret_71E16:
0008CDDA 4E75                       		rts	
0008CDDC                            ; End of function sub_71DC6
0008CDDC                            
0008CDDC                            
0008CDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CDDC                            
0008CDDC                            
0008CDDC                            sub_71E18:				; XREF: sub_71CCA
0008CDDC 0815 0001                  		btst	#1,(a5)
0008CDE0 6600                       		bne.s	locret_71E48
0008CDE2 3C2D 0010                  		move.w	$10(a5),d6
0008CDE6 6700                       		beq.s	loc_71E4A
0008CDE8                            
0008CDE8                            loc_71E24:				; XREF: sub_71CCA
0008CDE8 102D 001E                  		move.b	$1E(a5),d0
0008CDEC 4880                       		ext.w	d0
0008CDEE DC40                       		add.w	d0,d6
0008CDF0 0815 0002                  		btst	#2,(a5)
0008CDF4 6600                       		bne.s	locret_71E48
0008CDF6 3206                       		move.w	d6,d1
0008CDF8 E049                       		lsr.w	#8,d1
0008CDFA 103C 00A4                  		move.b	#-$5C,d0
0008CDFE 4EBA 0000                  		jsr	sub_72722(pc)
0008CE02 1206                       		move.b	d6,d1
0008CE04 103C 00A0                  		move.b	#-$60,d0
0008CE08 4EBA 0000                  		jsr	sub_72722(pc)
0008CE0C                            
0008CE0C                            locret_71E48:
0008CE0C 4E75                       		rts	
0008CE0E                            ; ===========================================================================
0008CE0E                            
0008CE0E                            loc_71E4A:
0008CE0E 08D5 0001                  		bset	#1,(a5)
0008CE12 4E75                       		rts	
0008CE14                            ; End of function sub_71E18
0008CE14                            
0008CE14                            ; ===========================================================================
0008CE14                            
0008CE14                            loc_71E50:				; XREF: sub_71B4C
0008CE14 6B00                       		bmi.s	loc_71E94
0008CE16 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008CE1C 6700 0000                  		beq.w	loc_71EFE
0008CE20 1D7C 0002 0003             		move.b	#2,3(a6)
0008CE26 7602                       		moveq	#2,d3
0008CE28 103C 00B4                  		move.b	#-$4C,d0
0008CE2C 7200                       		moveq	#0,d1
0008CE2E                            
0008CE2E                            loc_71E6A:
0008CE2E 4EBA 0000                  		jsr	sub_7272E(pc)
0008CE32 4EBA 0000                  		jsr	sub_72764(pc)
0008CE36 5200                       		addq.b	#1,d0
0008CE38 51CB FFF4                  		dbf	d3,loc_71E6A
0008CE3C                            
0008CE3C 7602                       		moveq	#2,d3
0008CE3E 7028                       		moveq	#$28,d0
0008CE40                            
0008CE40                            loc_71E7C:
0008CE40 1203                       		move.b	d3,d1
0008CE42 4EBA 0000                  		jsr	sub_7272E(pc)
0008CE46 5801                       		addq.b	#4,d1
0008CE48 4EBA 0000                  		jsr	sub_7272E(pc)
0008CE4C 51CB FFF2                  		dbf	d3,loc_71E7C
0008CE50                            
0008CE50 4EBA 0000                  		jsr	sub_729B6(pc)
0008CE54 33FC 0100 00A1 1100 4E71+  		stopZ80
0008CE6C 13FC 007F 00A0 1FFF        		move.b    #$7F,($A01FFF).l; pause DAC
0008CE74 33FC 0000 00A1 1100        		startZ80
0008CE7C 6000 FD60                  		bra.w	loc_71C44
0008CE80                            ; ===========================================================================
0008CE80                            
0008CE80                            loc_71E94:				; XREF: loc_71E50
0008CE80 422E 0003                  		clr.b	3(a6)
0008CE84 7630                       		moveq	#$30,d3
0008CE86 4BEE 0040                  		lea	$40(a6),a5
0008CE8A 7806                       		moveq	#6,d4
0008CE8C                            
0008CE8C                            loc_71EA0:
0008CE8C 0815 0007                  		btst	#7,(a5)
0008CE90 6700                       		beq.s	loc_71EB8
0008CE92 0815 0002                  		btst	#2,(a5)
0008CE96 6600                       		bne.s	loc_71EB8
0008CE98 103C 00B4                  		move.b	#-$4C,d0
0008CE9C 122D 000A                  		move.b	$A(a5),d1
0008CEA0 4EBA 0000                  		jsr	sub_72722(pc)
0008CEA4                            
0008CEA4                            loc_71EB8:
0008CEA4 DAC3                       		adda.w	d3,a5
0008CEA6 51CC FFE4                  		dbf	d4,loc_71EA0
0008CEAA                            
0008CEAA 4BEE 0220                  		lea	$220(a6),a5
0008CEAE 7802                       		moveq	#2,d4
0008CEB0                            
0008CEB0                            loc_71EC4:
0008CEB0 0815 0007                  		btst	#7,(a5)
0008CEB4 6700                       		beq.s	loc_71EDC
0008CEB6 0815 0002                  		btst	#2,(a5)
0008CEBA 6600                       		bne.s	loc_71EDC
0008CEBC 103C 00B4                  		move.b	#-$4C,d0
0008CEC0 122D 000A                  		move.b	$A(a5),d1
0008CEC4 4EBA 0000                  		jsr	sub_72722(pc)
0008CEC8                            
0008CEC8                            loc_71EDC:
0008CEC8 DAC3                       		adda.w  d3,a5
0008CECA 51CC FFE4                  		dbf     d4,loc_71EC4
0008CECE                            
0008CECE 4BEE 0340                  		lea     $340(a6),a5
0008CED2 0815 0007                  		btst    #7,(a5)
0008CED6 6700                       		beq.s   @UnpauseDAC
0008CED8 0815 0002                  		btst    #2,(a5)
0008CEDC 6600                       		bne.s   @UnpauseDAC
0008CEDE 103C 00B4                  		move.b  #-$4C,d0
0008CEE2 122D 000A                  		move.b  $A(a5),d1
0008CEE6 4EBA 0000                  		jsr     sub_72722(pc)
0008CEEA                            @UnpauseDAC:
0008CEEA 33FC 0100 00A1 1100 4E71+  		stopZ80
0008CF02 13FC 0000 00A0 1FFF        		move.b  #0,($A01FFF).l  ; unpause DAC
0008CF0A 33FC 0000 00A1 1100        		startZ80
0008CF12                            
0008CF12                            loc_71EFE:
0008CF12 6000 FCCA                  		bra.w	loc_71C44
0008CF16                            
0008CF16                            ; ---------------------------------------------------------------------------
0008CF16                            ; Subroutine to	play a sound or	music track
0008CF16                            ; ---------------------------------------------------------------------------
0008CF16                            
0008CF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CF16                            
0008CF16                            
0008CF16                            Sound_Play:				; XREF: sub_71B4C
0008CF16 2079 0008 C94E             		movea.l	(Go_SoundTypes).l,a0
0008CF1C 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008CF20 1616                       		move.b	0(a6),d3
0008CF22 7802                       		moveq	#2,d4
0008CF24                            
0008CF24                            loc_71F12:
0008CF24 1011                       		move.b	(a1),d0		; move track number to d0
0008CF26 1200                       		move.b	d0,d1
0008CF28 4219                       		clr.b	(a1)+
0008CF2A 0400 0081                  		subi.b	#$81,d0
0008CF2E 6500                       		bcs.s	loc_71F3E
0008CF30 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008CF36 6700                       		beq.s	loc_71F2C
0008CF38 1D41 000A                  		move.b	d1,$A(a6)
0008CF3C 6000                       		bra.s	loc_71F3E
0008CF3E                            ; ===========================================================================
0008CF3E                            
0008CF3E                            loc_71F2C:
0008CF3E 0240 007F                  		andi.w	#$7F,d0
0008CF42 1430 0000                  		move.b	(a0,d0.w),d2
0008CF46 B403                       		cmp.b	d3,d2
0008CF48 6500                       		bcs.s	loc_71F3E
0008CF4A 1602                       		move.b	d2,d3
0008CF4C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008CF50                            
0008CF50                            loc_71F3E:
0008CF50 51CC FFD2                  		dbf	d4,loc_71F12
0008CF54                            
0008CF54 4A03                       		tst.b	d3
0008CF56 6B00                       		bmi.s	locret_71F4A
0008CF58 1C83                       		move.b	d3,0(a6)
0008CF5A                            
0008CF5A                            locret_71F4A:
0008CF5A 4E75                       		rts	
0008CF5C                            ; End of function Sound_Play
0008CF5C                            
0008CF5C                            
0008CF5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008CF5C                            
0008CF5C                            
0008CF5C                            Sound_ChkValue:				; XREF: sub_71B4C
0008CF5C 7E00                       		moveq	#0,d7
0008CF5E 1E2E 0009                  		move.b	9(a6),d7
0008CF62 6700 0000                  		beq.w	Sound_E4
0008CF66 6A00                       		bpl.s	locret_71F8C
0008CF68 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008CF6E 0C07 009F                  		cmpi.b	#$9F,d7
0008CF72 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008CF76 0C07 00A0                  		cmpi.b	#$A0,d7
0008CF7A 6500 0000                  		bcs.w	locret_71F8C
0008CF7E 0C07 00CF                  		cmpi.b	#$CF,d7
0008CF82 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008CF86 0C07 00D0                  		cmpi.b	#$D0,d7
0008CF8A 6500 0000                  		bcs.w	locret_71F8C
0008CF8E 0C07 00D1                  		cmpi.b	#$D1,d7
0008CF92 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
0008CF96 0C07 00DF                  		cmpi.b	#$DF,d7
0008CF9A 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008CF9E 0C07 00E4                  		cmpi.b	#$E4,d7
0008CFA2 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008CFA4                            
0008CFA4                            locret_71F8C:
0008CFA4 4E75                       		rts	
0008CFA6                            ; ===========================================================================
0008CFA6                            
0008CFA6                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008CFA6 0407 00E0                  		subi.b	#$E0,d7
0008CFAA E54F                       		lsl.w	#2,d7
0008CFAC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008CFB0                            ; ===========================================================================
0008CFB0                            
0008CFB0                            Sound_ExIndex:
0008CFB0 6000 0000                  		bra.w	Sound_E0
0008CFB4                            ; ===========================================================================
0008CFB4 6000 0000                  		bra.w	Sound_E1
0008CFB8                            ; ===========================================================================
0008CFB8 6000 0000                  		bra.w	Sound_E2
0008CFBC                            ; ===========================================================================
0008CFBC 6000 0000                  		bra.w	Sound_E3
0008CFC0                            ; ===========================================================================
0008CFC0 6000 0000                  		bra.w	Sound_E4
0008CFC4                            ; ===========================================================================
0008CFC4                            ; ---------------------------------------------------------------------------
0008CFC4                            ; Play "Say-gaa" PCM sound
0008CFC4                            ; ---------------------------------------------------------------------------
0008CFC4                            
0008CFC4                            Sound_E1:				  
0008CFC4 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008CFCA 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0008CFD0 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0008CFD8                            PlayPCM_Loop:	  
0008CFD8 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0008CFDE 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0008CFE2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0008CFE6 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0008CFE8 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0008CFEA 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0008CFEE 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008CFF4 4EB8 0E3A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0008CFF8 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0008CFFE 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008D000 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008D002                            return_PlayPCM: 
0008D002 584F                       		addq.w	#4,sp 
0008D004 4E75                       		rts
0008D006                            
0008D006                            ; ===========================================================================
0008D006                            ; ---------------------------------------------------------------------------
0008D006                            ; Play music track $81-$9F
0008D006                            ; ---------------------------------------------------------------------------
0008D006                            
0008D006                            Sound_81to9F:				; XREF: Sound_ChkValue
0008D006 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008D00A 6600                       		bne.s	loc_72024	; if not, branch
0008D00C 4A2E 0027                  		tst.b	$27(a6)
0008D010 6600 0000                  		bne.w	loc_721B6
0008D014 4BEE 0040                  		lea	$40(a6),a5
0008D018 7009                       		moveq	#9,d0
0008D01A                            
0008D01A                            loc_71FE6:
0008D01A 0895 0002                  		bclr	#2,(a5)
0008D01E DAFC 0030                  		adda.w	#$30,a5
0008D022 51C8 FFF6                  		dbf	d0,loc_71FE6
0008D026                            
0008D026 4BEE 0220                  		lea	$220(a6),a5
0008D02A 7005                       		moveq	#5,d0
0008D02C                            
0008D02C                            loc_71FF8:
0008D02C 0895 0007                  		bclr	#7,(a5)
0008D030 DAFC 0030                  		adda.w	#$30,a5
0008D034 51C8 FFF6                  		dbf	d0,loc_71FF8
0008D038 4216                       		clr.b	0(a6)
0008D03A 204E                       		movea.l	a6,a0
0008D03C 43EE 03A0                  		lea	$3A0(a6),a1
0008D040 303C 0087                  		move.w	#$87,d0
0008D044                            
0008D044                            loc_72012:
0008D044 22D8                       		move.l	(a0)+,(a1)+
0008D046 51C8 FFFC                  		dbf	d0,loc_72012
0008D04A                            
0008D04A 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008D050 4216                       		clr.b	0(a6)
0008D052 6000                       		bra.s	loc_7202C
0008D054                            ; ===========================================================================
0008D054                            
0008D054                            loc_72024:
0008D054 422E 0027                  		clr.b	$27(a6)
0008D058 422E 0026                  		clr.b	$26(a6)
0008D05C                            
0008D05C                            loc_7202C:
0008D05C 4EBA 0000                  		jsr	sub_725CA(pc)
0008D060 2879 0008 C95E             		movea.l	(off_719A0).l,a4
0008D066 0407 0081                  		subi.b	#$81,d7
0008D06A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0008D070 2879 0008 C956             		movea.l	(Go_MusicIndex).l,a4
0008D076 E54F                       		lsl.w	#2,d7
0008D078 2874 7000                  		movea.l	(a4,d7.w),a4
0008D07C 7000                       		moveq	#0,d0
0008D07E 3014                       		move.w	(a4),d0
0008D080 D08C                       		add.l	a4,d0
0008D082 2D40 0018                  		move.l	d0,$18(a6)
0008D086 102C 0005                  		move.b	5(a4),d0
0008D08A 1D40 0028                  		move.b	d0,$28(a6)
0008D08E 4A2E 002A                  		tst.b	$2A(a6)
0008D092 6700                       		beq.s	loc_72068
0008D094 102E 0029                  		move.b	$29(a6),d0
0008D098                            
0008D098                            loc_72068:
0008D098 1D40 0002                  		move.b	d0,2(a6)
0008D09C 1D40 0001                  		move.b	d0,1(a6)
0008D0A0 7200                       		moveq	#0,d1
0008D0A2 264C                       		movea.l	a4,a3
0008D0A4 5C4C                       		addq.w	#6,a4
0008D0A6 7E00                       		moveq	#0,d7
0008D0A8 1E2B 0002                  		move.b	2(a3),d7
0008D0AC 6700 0000                  		beq.w	loc_72114
0008D0B0 5307                       		subq.b	#1,d7
0008D0B2 123C 00C0                  		move.b	#-$40,d1
0008D0B6 182B 0004                  		move.b	4(a3),d4
0008D0BA 7C30                       		moveq	#$30,d6
0008D0BC 1A3C 0001                  		move.b	#1,d5
0008D0C0 43EE 0040                  		lea	$40(a6),a1
0008D0C4 45FA 0000                  		lea	byte_721BA(pc),a2
0008D0C8                            
0008D0C8                            loc_72098:
0008D0C8 08D1 0007                  		bset	#7,(a1)
0008D0CC 135A 0001                  		move.b	(a2)+,1(a1)
0008D0D0 1344 0002                  		move.b	d4,2(a1)
0008D0D4 1346 000D                  		move.b	d6,$D(a1)
0008D0D8 1341 000A                  		move.b	d1,$A(a1)
0008D0DC 1345 000E                  		move.b	d5,$E(a1)
0008D0E0 7000                       		moveq	#0,d0
0008D0E2 301C                       		move.w	(a4)+,d0
0008D0E4 D08B                       		add.l	a3,d0
0008D0E6 2340 0004                  		move.l	d0,4(a1)
0008D0EA 335C 0008                  		move.w	(a4)+,8(a1)
0008D0EE D2C6                       		adda.w	d6,a1
0008D0F0 51CF FFD6                  		dbf	d7,loc_72098
0008D0F4 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008D0FA 6600                       		bne.s	loc_720D8
0008D0FC 702B                       		moveq	#$2B,d0
0008D0FE 7200                       		moveq	#0,d1
0008D100 4EBA 0000                  		jsr	sub_7272E(pc)
0008D104 6000 0000                  		bra.w	loc_72114
0008D108                            ; ===========================================================================
0008D108                            
0008D108                            loc_720D8:
0008D108 7028                       		moveq	#$28,d0
0008D10A 7206                       		moveq	#6,d1
0008D10C 4EBA 0000                  		jsr	sub_7272E(pc)
0008D110 103C 0042                  		move.b	#$42,d0
0008D114 727F                       		moveq	#$7F,d1
0008D116 4EBA 0000                  		jsr	sub_72764(pc)
0008D11A 103C 004A                  		move.b	#$4A,d0
0008D11E 727F                       		moveq	#$7F,d1
0008D120 4EBA 0000                  		jsr	sub_72764(pc)
0008D124 103C 0046                  		move.b	#$46,d0
0008D128 727F                       		moveq	#$7F,d1
0008D12A 4EBA 0000                  		jsr	sub_72764(pc)
0008D12E 103C 004E                  		move.b	#$4E,d0
0008D132 727F                       		moveq	#$7F,d1
0008D134 4EBA 0000                  		jsr	sub_72764(pc)
0008D138 103C 00B6                  		move.b	#-$4A,d0
0008D13C 123C 00C0                  		move.b	#-$40,d1
0008D140 4EBA 0000                  		jsr	sub_72764(pc)
0008D144                            
0008D144                            loc_72114:
0008D144 7E00                       		moveq	#0,d7
0008D146 1E2B 0003                  		move.b	3(a3),d7
0008D14A 6700                       		beq.s	loc_72154
0008D14C 5307                       		subq.b	#1,d7
0008D14E 43EE 0190                  		lea	$190(a6),a1
0008D152 45FA 0000                  		lea	byte_721C2(pc),a2
0008D156                            
0008D156                            loc_72126:
0008D156 08D1 0007                  		bset	#7,(a1)
0008D15A 135A 0001                  		move.b	(a2)+,1(a1)
0008D15E 1344 0002                  		move.b	d4,2(a1)
0008D162 1346 000D                  		move.b	d6,$D(a1)
0008D166 1345 000E                  		move.b	d5,$E(a1)
0008D16A 7000                       		moveq	#0,d0
0008D16C 301C                       		move.w	(a4)+,d0
0008D16E D08B                       		add.l	a3,d0
0008D170 2340 0004                  		move.l	d0,4(a1)
0008D174 335C 0008                  		move.w	(a4)+,8(a1)
0008D178 101C                       		move.b	(a4)+,d0
0008D17A 135C 000B                  		move.b	(a4)+,$B(a1)
0008D17E D2C6                       		adda.w	d6,a1
0008D180 51CF FFD4                  		dbf	d7,loc_72126
0008D184                            
0008D184                            loc_72154:
0008D184 43EE 0220                  		lea	$220(a6),a1
0008D188 7E05                       		moveq	#5,d7
0008D18A                            
0008D18A                            loc_7215A:
0008D18A 4A11                       		tst.b	(a1)
0008D18C 6A00 0000                  		bpl.w	loc_7217C
0008D190 7000                       		moveq	#0,d0
0008D192 1029 0001                  		move.b	1(a1),d0
0008D196 6B00                       		bmi.s	loc_7216E
0008D198 5500                       		subq.b	#2,d0
0008D19A E508                       		lsl.b	#2,d0
0008D19C 6000                       		bra.s	loc_72170
0008D19E                            ; ===========================================================================
0008D19E                            
0008D19E                            loc_7216E:
0008D19E E608                       		lsr.b	#3,d0
0008D1A0                            
0008D1A0                            loc_72170:
0008D1A0 41FA 0000                  		lea	dword_722CC(pc),a0
0008D1A4 2070 0000                  		movea.l	(a0,d0.w),a0
0008D1A8 08D0 0002                  		bset	#2,(a0)
0008D1AC                            
0008D1AC                            loc_7217C:
0008D1AC D2C6                       		adda.w	d6,a1
0008D1AE 51CF FFDA                  		dbf	d7,loc_7215A
0008D1B2                            
0008D1B2 4A6E 0340                  		tst.w	$340(a6)
0008D1B6 6A00                       		bpl.s	loc_7218E
0008D1B8 08EE 0002 0100             		bset	#2,$100(a6)
0008D1BE                            
0008D1BE                            loc_7218E:
0008D1BE 4A6E 0370                  		tst.w	$370(a6)
0008D1C2 6A00                       		bpl.s	loc_7219A
0008D1C4 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008D1CA                            
0008D1CA                            loc_7219A:
0008D1CA 4BEE 0070                  		lea	$70(a6),a5
0008D1CE 7805                       		moveq	#5,d4
0008D1D0                            
0008D1D0                            loc_721A0:
0008D1D0 4EBA 0000                  		jsr	sub_726FE(pc)
0008D1D4 DAC6                       		adda.w	d6,a5
0008D1D6 51CC FFF8                  		dbf	d4,loc_721A0
0008D1DA 7802                       		moveq	#2,d4
0008D1DC                            
0008D1DC                            loc_721AC:
0008D1DC 4EBA 0000                  		jsr	sub_729A0(pc)
0008D1E0 DAC6                       		adda.w	d6,a5
0008D1E2 51CC FFF8                  		dbf	d4,loc_721AC
0008D1E6                            
0008D1E6                            loc_721B6:
0008D1E6 584F                       		addq.w	#4,sp
0008D1E8 4E75                       		rts	
0008D1EA                            ; ===========================================================================
0008D1EA 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0008D1F2                            		even
0008D1F2 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008D1F6                            		even
0008D1F6                            ; ===========================================================================
0008D1F6                            ; ---------------------------------------------------------------------------
0008D1F6                            ; Play normal sound effect
0008D1F6                            ; ---------------------------------------------------------------------------
0008D1F6                            
0008D1F6                            Sound_D1toDF:
0008D1F6 4A2E 0027                  		tst.b	$27(a6)
0008D1FA 6600 0000                  		bne.w	loc_722C6
0008D1FE 4A2E 0004                  		tst.b	4(a6)
0008D202 6600 0000                  		bne.w	loc_722C6
0008D206 4A2E 0024                  		tst.b	$24(a6)
0008D20A 6600 0000                  		bne.w	loc_722C6
0008D20E 2079 0008 C95A             		movea.l	(Go_SoundIndex).l,a0
0008D214 0407 00A1                  		sub.b	#$A1,d7
0008D218 6000 0000                  		bra	SoundEffects_Common
0008D21C                            
0008D21C                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008D21C 4A2E 0027                  		tst.b	$27(a6)
0008D220 6600 0000                  		bne.w	loc_722C6
0008D224 4A2E 0004                  		tst.b	4(a6)
0008D228 6600 0000                  		bne.w	loc_722C6
0008D22C 4A2E 0024                  		tst.b	$24(a6)
0008D230 6600 0000                  		bne.w	loc_722C6
0008D234 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008D238 6600                       		bne.s	Sound_notB5	; if not, branch
0008D23A 4A2E 002B                  		tst.b	$2B(a6)
0008D23E 6600                       		bne.s	loc_721EE
0008D240 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008D244                            
0008D244                            loc_721EE:
0008D244 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008D24A                            
0008D24A                            Sound_notB5:
0008D24A 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0008D24E 6600                       		bne.s	Sound_notA7	; if not, branch
0008D250 4A2E 002C                  		tst.b	$2C(a6)
0008D254 6600 0000                  		bne.w	locret_722C4
0008D258 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0008D25E                            
0008D25E                            Sound_notA7:
0008D25E 2079 0008 C95A             		movea.l	(Go_SoundIndex).l,a0
0008D264 0407 00A0                  		subi.b	#$A0,d7
0008D268                            
0008D268                            SoundEffects_Common:
0008D268 E54F                       		lsl.w	#2,d7
0008D26A 2670 7000                  		movea.l	(a0,d7.w),a3
0008D26E 224B                       		movea.l	a3,a1
0008D270 7200                       		moveq	#0,d1
0008D272 3219                       		move.w	(a1)+,d1
0008D274 D28B                       		add.l	a3,d1
0008D276 1A19                       		move.b	(a1)+,d5
0008D278 1E19                       		move.b	(a1)+,d7
0008D27A 5307                       		subq.b	#1,d7
0008D27C 7C30                       		moveq	#$30,d6
0008D27E                            
0008D27E                            loc_72228:
0008D27E 7600                       		moveq	#0,d3
0008D280 1629 0001                  		move.b	1(a1),d3
0008D284 1803                       		move.b	d3,d4
0008D286 6B00                       		bmi.s	loc_72244
0008D288 5543                       		subq.w	#2,d3
0008D28A E54B                       		lsl.w	#2,d3
0008D28C 4BFA 0000                  		lea	dword_722CC(pc),a5
0008D290 2A75 3000                  		movea.l	(a5,d3.w),a5
0008D294 08D5 0002                  		bset	#2,(a5)
0008D298 6000                       		bra.s	loc_7226E
0008D29A                            ; ===========================================================================
0008D29A                            
0008D29A                            loc_72244:
0008D29A E64B                       		lsr.w	#3,d3
0008D29C 4BFA 0000                  		lea	dword_722CC(pc),a5
0008D2A0 2A75 3000                  		movea.l	(a5,d3.w),a5
0008D2A4 08D5 0002                  		bset	#2,(a5)
0008D2A8 0C04 00C0                  		cmpi.b	#$C0,d4
0008D2AC 6600                       		bne.s	loc_7226E
0008D2AE 1004                       		move.b	d4,d0
0008D2B0 0000 001F                  		ori.b	#$1F,d0
0008D2B4 13C0 00C0 0011             		move.b	d0,($C00011).l
0008D2BA 0840 0005                  		bchg	#5,d0
0008D2BE 13C0 00C0 0011             		move.b	d0,($C00011).l
0008D2C4                            
0008D2C4                            loc_7226E:
0008D2C4 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0008D2C8 244D                       		movea.l	a5,a2
0008D2CA 700B                       		moveq	#$B,d0
0008D2CC                            
0008D2CC                            loc_72276:
0008D2CC 429A                       		clr.l	(a2)+
0008D2CE 51C8 FFFC                  		dbf	d0,loc_72276
0008D2D2                            
0008D2D2 3A99                       		move.w	(a1)+,(a5)
0008D2D4 1B45 0002                  		move.b	d5,2(a5)
0008D2D8 7000                       		moveq	#0,d0
0008D2DA 3019                       		move.w	(a1)+,d0
0008D2DC D08B                       		add.l	a3,d0
0008D2DE 2B40 0004                  		move.l	d0,4(a5)
0008D2E2 3B59 0008                  		move.w	(a1)+,8(a5)
0008D2E6 1B7C 0001 000E             		move.b	#1,$E(a5)
0008D2EC 1B46 000D                  		move.b	d6,$D(a5)
0008D2F0 4A04                       		tst.b	d4
0008D2F2 6B00                       		bmi.s	loc_722A8
0008D2F4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008D2FA 2B41 0020                  		move.l	d1,$20(a5)
0008D2FE                            
0008D2FE                            loc_722A8:
0008D2FE 51CF FF7E                  		dbf	d7,loc_72228
0008D302                            
0008D302 4A2E 0250                  		tst.b	$250(a6)
0008D306 6A00                       		bpl.s	loc_722B8
0008D308 08EE 0002 0340             		bset	#2,$340(a6)
0008D30E                            
0008D30E                            loc_722B8:
0008D30E 4A2E 0310                  		tst.b	$310(a6)
0008D312 6A00                       		bpl.s	locret_722C4
0008D314 08EE 0002 0370             		bset	#2,$370(a6)
0008D31A                            
0008D31A                            locret_722C4:
0008D31A 4E75                       		rts	
0008D31C                            ; ===========================================================================
0008D31C                            
0008D31C                            loc_722C6:
0008D31C 4216                       		clr.b	0(a6)
0008D31E 4E75                       		rts	
0008D320                            ; ===========================================================================
0008D320 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008D324 0000 0000                  		dc.l 0
0008D328 00FF F100                  		dc.l $FFF100
0008D32C 00FF F130                  		dc.l $FFF130
0008D330 00FF F190                  		dc.l $FFF190
0008D334 00FF F1C0                  		dc.l $FFF1C0
0008D338 00FF F1F0                  		dc.l $FFF1F0
0008D33C 00FF F1F0                  		dc.l $FFF1F0
0008D340 00FF F220                  dword_722EC:	dc.l $FFF220
0008D344 0000 0000                  		dc.l 0
0008D348 00FF F250                  		dc.l $FFF250
0008D34C 00FF F280                  		dc.l $FFF280
0008D350 00FF F2B0                  		dc.l $FFF2B0
0008D354 00FF F2E0                  		dc.l $FFF2E0
0008D358 00FF F310                  		dc.l $FFF310
0008D35C 00FF F310                  		dc.l $FFF310
0008D360                            ; ===========================================================================
0008D360                            ; ---------------------------------------------------------------------------
0008D360                            ; Play GHZ waterfall sound
0008D360                            ; ---------------------------------------------------------------------------
0008D360                            
0008D360                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008D360 4A2E 0027                  		tst.b	$27(a6)
0008D364 6600 0000                  		bne.w	locret_723C6
0008D368 4A2E 0004                  		tst.b	4(a6)
0008D36C 6600 0000                  		bne.w	locret_723C6
0008D370 4A2E 0024                  		tst.b	$24(a6)
0008D374 6600 0000                  		bne.w	locret_723C6
0008D378 2079 0008 C952             		movea.l	(Go_SoundD0).l,a0
0008D37E 0407 00D0                  		subi.b	#$D0,d7
0008D382 E54F                       		lsl.w	#2,d7
0008D384 2670 7000                  		movea.l	(a0,d7.w),a3
0008D388 224B                       		movea.l	a3,a1
0008D38A 7000                       		moveq	#0,d0
0008D38C 3019                       		move.w	(a1)+,d0
0008D38E D08B                       		add.l	a3,d0
0008D390 2D40 0020                  		move.l	d0,$20(a6)
0008D394 1A19                       		move.b	(a1)+,d5
0008D396 1E19                       		move.b	(a1)+,d7
0008D398 5307                       		subq.b	#1,d7
0008D39A 7C30                       		moveq	#$30,d6
0008D39C                            
0008D39C                            loc_72348:
0008D39C 1829 0001                  		move.b	1(a1),d4
0008D3A0 6B00                       		bmi.s	loc_7235A
0008D3A2 08EE 0002 0100             		bset	#2,$100(a6)
0008D3A8 4BEE 0340                  		lea	$340(a6),a5
0008D3AC 6000                       		bra.s	loc_72364
0008D3AE                            ; ===========================================================================
0008D3AE                            
0008D3AE                            loc_7235A:
0008D3AE 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008D3B4 4BEE 0370                  		lea	$370(a6),a5
0008D3B8                            
0008D3B8                            loc_72364:
0008D3B8 244D                       		movea.l	a5,a2
0008D3BA 700B                       		moveq	#$B,d0
0008D3BC                            
0008D3BC                            loc_72368:
0008D3BC 429A                       		clr.l	(a2)+
0008D3BE 51C8 FFFC                  		dbf	d0,loc_72368
0008D3C2                            
0008D3C2 3A99                       		move.w	(a1)+,(a5)
0008D3C4 1B45 0002                  		move.b	d5,2(a5)
0008D3C8 7000                       		moveq	#0,d0
0008D3CA 3019                       		move.w	(a1)+,d0
0008D3CC D08B                       		add.l	a3,d0
0008D3CE 2B40 0004                  		move.l	d0,4(a5)
0008D3D2 3B59 0008                  		move.w	(a1)+,8(a5)
0008D3D6 1B7C 0001 000E             		move.b	#1,$E(a5)
0008D3DC 1B46 000D                  		move.b	d6,$D(a5)
0008D3E0 4A04                       		tst.b	d4
0008D3E2 6B00                       		bmi.s	loc_72396
0008D3E4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008D3EA                            
0008D3EA                            loc_72396:
0008D3EA 51CF FFB0                  		dbf	d7,loc_72348
0008D3EE                            
0008D3EE 4A2E 0250                  		tst.b	$250(a6)
0008D3F2 6A00                       		bpl.s	loc_723A6
0008D3F4 08EE 0002 0340             		bset	#2,$340(a6)
0008D3FA                            
0008D3FA                            loc_723A6:
0008D3FA 4A2E 0310                  		tst.b	$310(a6)
0008D3FE 6A00                       		bpl.s	locret_723C6
0008D400 08EE 0002 0370             		bset	#2,$370(a6)
0008D406 0004 001F                  		ori.b	#$1F,d4
0008D40A 13C4 00C0 0011             		move.b	d4,($C00011).l
0008D410 0844 0005                  		bchg	#5,d4
0008D414 13C4 00C0 0011             		move.b	d4,($C00011).l
0008D41A                            
0008D41A                            locret_723C6:
0008D41A 4E75                       		rts	
0008D41C                            ; End of function Sound_ChkValue
0008D41C                            
0008D41C                            ; ===========================================================================
0008D41C 00FF F100                  		dc.l $FFF100
0008D420 00FF F1F0                  		dc.l $FFF1F0
0008D424 00FF F250                  		dc.l $FFF250
0008D428 00FF F310                  		dc.l $FFF310
0008D42C 00FF F340                  		dc.l $FFF340
0008D430 00FF F370                  		dc.l $FFF370
0008D434                            
0008D434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D434                            
0008D434                            
0008D434                            Snd_FadeOut1:				; XREF: Sound_E0
0008D434 4216                       		clr.b	0(a6)
0008D436 4BEE 0220                  		lea	$220(a6),a5
0008D43A 7E05                       		moveq	#5,d7
0008D43C                            
0008D43C                            loc_723EA:
0008D43C 4A15                       		tst.b	(a5)
0008D43E 6A00 0000                  		bpl.w	loc_72472
0008D442 0895 0007                  		bclr	#7,(a5)
0008D446 7600                       		moveq	#0,d3
0008D448 162D 0001                  		move.b	1(a5),d3
0008D44C 6B00                       		bmi.s	loc_7243C
0008D44E 4EBA 0000                  		jsr	sub_726FE(pc)
0008D452 0C03 0004                  		cmpi.b	#4,d3
0008D456 6600                       		bne.s	loc_72416
0008D458 4A2E 0340                  		tst.b	$340(a6)
0008D45C 6A00                       		bpl.s	loc_72416
0008D45E 4BEE 0340                  		lea	$340(a6),a5
0008D462 226E 0020                  		movea.l	$20(a6),a1
0008D466 6000                       		bra.s	loc_72428
0008D468                            ; ===========================================================================
0008D468                            
0008D468                            loc_72416:
0008D468 5503                       		subq.b	#2,d3
0008D46A E50B                       		lsl.b	#2,d3
0008D46C 41FA FEB2                  		lea	dword_722CC(pc),a0
0008D470 264D                       		movea.l	a5,a3
0008D472 2A70 3000                  		movea.l	(a0,d3.w),a5
0008D476 226E 0018                  		movea.l	$18(a6),a1
0008D47A                            
0008D47A                            loc_72428:
0008D47A 0895 0002                  		bclr	#2,(a5)
0008D47E 08D5 0001                  		bset	#1,(a5)
0008D482 102D 000B                  		move.b	$B(a5),d0
0008D486 4EBA 0000                  		jsr	sub_72C4E(pc)
0008D48A 2A4B                       		movea.l	a3,a5
0008D48C 6000                       		bra.s	loc_72472
0008D48E                            ; ===========================================================================
0008D48E                            
0008D48E                            loc_7243C:
0008D48E 4EBA 0000                  		jsr	sub_729A0(pc)
0008D492 41EE 0370                  		lea	$370(a6),a0
0008D496 0C03 00E0                  		cmpi.b	#$E0,d3
0008D49A 6700                       		beq.s	loc_7245A
0008D49C 0C03 00C0                  		cmpi.b	#$C0,d3
0008D4A0 6700                       		beq.s	loc_7245A
0008D4A2 E60B                       		lsr.b	#3,d3
0008D4A4 41FA FE7A                  		lea	dword_722CC(pc),a0
0008D4A8 2070 3000                  		movea.l	(a0,d3.w),a0
0008D4AC                            
0008D4AC                            loc_7245A:
0008D4AC 0890 0002                  		bclr	#2,(a0)
0008D4B0 08D0 0001                  		bset	#1,(a0)
0008D4B4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008D4BA 6600                       		bne.s	loc_72472
0008D4BC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008D4C4                            
0008D4C4                            loc_72472:
0008D4C4 DAFC 0030                  		adda.w	#$30,a5
0008D4C8 51CF FF72                  		dbf	d7,loc_723EA
0008D4CC                            
0008D4CC 4E75                       		rts	
0008D4CE                            ; End of function Snd_FadeOut1
0008D4CE                            
0008D4CE                            
0008D4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D4CE                            
0008D4CE                            
0008D4CE                            Snd_FadeOut2:				; XREF: Sound_E0
0008D4CE 4BEE 0340                  		lea	$340(a6),a5
0008D4D2 4A15                       		tst.b	(a5)
0008D4D4 6A00                       		bpl.s	loc_724AE
0008D4D6 0895 0007                  		bclr	#7,(a5)
0008D4DA 0815 0002                  		btst	#2,(a5)
0008D4DE 6600                       		bne.s	loc_724AE
0008D4E0 4EBA 0000                  		jsr	loc_7270A(pc)
0008D4E4 4BEE 0100                  		lea	$100(a6),a5
0008D4E8 0895 0002                  		bclr	#2,(a5)
0008D4EC 08D5 0001                  		bset	#1,(a5)
0008D4F0 4A15                       		tst.b	(a5)
0008D4F2 6A00                       		bpl.s	loc_724AE
0008D4F4 226E 0018                  		movea.l	$18(a6),a1
0008D4F8 102D 000B                  		move.b	$B(a5),d0
0008D4FC 4EBA 0000                  		jsr	sub_72C4E(pc)
0008D500                            
0008D500                            loc_724AE:
0008D500 4BEE 0370                  		lea	$370(a6),a5
0008D504 4A15                       		tst.b	(a5)
0008D506 6A00                       		bpl.s	locret_724E4
0008D508 0895 0007                  		bclr	#7,(a5)
0008D50C 0815 0002                  		btst	#2,(a5)
0008D510 6600                       		bne.s	locret_724E4
0008D512 4EBA 0000                  		jsr	loc_729A6(pc)
0008D516 4BEE 01F0                  		lea	$1F0(a6),a5
0008D51A 0895 0002                  		bclr	#2,(a5)
0008D51E 08D5 0001                  		bset	#1,(a5)
0008D522 4A15                       		tst.b	(a5)
0008D524 6A00                       		bpl.s	locret_724E4
0008D526 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008D52C 6600                       		bne.s	locret_724E4
0008D52E 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0008D536                            
0008D536                            locret_724E4:
0008D536 4E75                       		rts	
0008D538                            ; End of function Snd_FadeOut2
0008D538                            
0008D538                            ; ===========================================================================
0008D538                            ; ---------------------------------------------------------------------------
0008D538                            ; Fade out music
0008D538                            ; ---------------------------------------------------------------------------
0008D538                            
0008D538                            Sound_E0:				; XREF: Sound_ExIndex
0008D538 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008D53C 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008D540 1D7C 0003 0006             		move.b	#3,6(a6)
0008D546 1D7C 0028 0004             		move.b	#$28,4(a6)
0008D54C 422E 0040                  		clr.b	$40(a6)
0008D550 422E 002A                  		clr.b	$2A(a6)
0008D554 4E75                       		rts	
0008D556                            
0008D556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D556                            
0008D556                            
0008D556                            sub_72504:				; XREF: sub_71B4C
0008D556 102E 0006                  		move.b	6(a6),d0
0008D55A 6700                       		beq.s	loc_72510
0008D55C 532E 0006                  		subq.b	#1,6(a6)
0008D560 4E75                       		rts	
0008D562                            ; ===========================================================================
0008D562                            
0008D562                            loc_72510:
0008D562 532E 0004                  		subq.b	#1,4(a6)
0008D566 6700 0000                  		beq.w	Sound_E4
0008D56A 1D7C 0003 0006             		move.b	#3,6(a6)
0008D570 4BEE 0070                  		lea	$70(a6),a5
0008D574 7E05                       		moveq	#5,d7
0008D576                            
0008D576                            loc_72524:
0008D576 4A15                       		tst.b	(a5)
0008D578 6A00                       		bpl.s	loc_72538
0008D57A 522D 0009                  		addq.b	#1,9(a5)
0008D57E 6A00                       		bpl.s	loc_72534
0008D580 0895 0007                  		bclr	#7,(a5)
0008D584 6000                       		bra.s	loc_72538
0008D586                            ; ===========================================================================
0008D586                            
0008D586                            loc_72534:
0008D586 4EBA 0000                  		jsr	sub_72CB4(pc)
0008D58A                            
0008D58A                            loc_72538:
0008D58A DAFC 0030                  		adda.w	#$30,a5
0008D58E 51CF FFE6                  		dbf	d7,loc_72524
0008D592                            
0008D592 7E02                       		moveq	#2,d7
0008D594                            
0008D594                            loc_72542:
0008D594 4A15                       		tst.b	(a5)
0008D596 6A00                       		bpl.s	loc_72560
0008D598 522D 0009                  		addq.b	#1,9(a5)
0008D59C 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008D5A2 6500                       		bcs.s	loc_72558
0008D5A4 0895 0007                  		bclr	#7,(a5)
0008D5A8 6000                       		bra.s	loc_72560
0008D5AA                            ; ===========================================================================
0008D5AA                            
0008D5AA                            loc_72558:
0008D5AA 1C2D 0009                  		move.b	9(a5),d6
0008D5AE 4EBA 0000                  		jsr	sub_7296A(pc)
0008D5B2                            
0008D5B2                            loc_72560:
0008D5B2 DAFC 0030                  		adda.w	#$30,a5
0008D5B6 51CF FFDC                  		dbf	d7,loc_72542
0008D5BA                            
0008D5BA 4E75                       		rts	
0008D5BC                            ; End of function sub_72504
0008D5BC                            
0008D5BC                            
0008D5BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D5BC                            
0008D5BC                            
0008D5BC                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0008D5BC 7602                       		moveq	#2,d3
0008D5BE 7028                       		moveq	#$28,d0
0008D5C0                            
0008D5C0                            loc_7256E:
0008D5C0 1203                       		move.b	d3,d1
0008D5C2 4EBA 0000                  		jsr	sub_7272E(pc)
0008D5C6 5801                       		addq.b	#4,d1
0008D5C8 4EBA 0000                  		jsr	sub_7272E(pc)
0008D5CC 51CB FFF2                  		dbf	d3,loc_7256E
0008D5D0                            
0008D5D0 7040                       		moveq	#$40,d0
0008D5D2 727F                       		moveq	#$7F,d1
0008D5D4 7802                       		moveq	#2,d4
0008D5D6                            
0008D5D6                            loc_72584:
0008D5D6 7603                       		moveq	#3,d3
0008D5D8                            
0008D5D8                            loc_72586:
0008D5D8 4EBA 0000                  		jsr	sub_7272E(pc)
0008D5DC 4EBA 0000                  		jsr	sub_72764(pc)
0008D5E0 5840                       		addq.w	#4,d0
0008D5E2 51CB FFF4                  		dbf	d3,loc_72586
0008D5E6                            
0008D5E6 0400 000F                  		subi.b	#$F,d0
0008D5EA 51CC FFEA                  		dbf	d4,loc_72584
0008D5EE                            
0008D5EE 4E75                       		rts	
0008D5F0                            ; End of function sub_7256A
0008D5F0                            
0008D5F0                            ; ===========================================================================
0008D5F0                            ; ---------------------------------------------------------------------------
0008D5F0                            ; Stop music
0008D5F0                            ; ---------------------------------------------------------------------------
0008D5F0                            
0008D5F0                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008D5F0 702B                       		moveq	#$2B,d0
0008D5F2 123C 0080                  		move.b	#$80,d1
0008D5F6 4EBA 0000                  		jsr	sub_7272E(pc)
0008D5FA 7027                       		moveq	#$27,d0
0008D5FC 7200                       		moveq	#0,d1
0008D5FE 4EBA 0000                  		jsr	sub_7272E(pc)
0008D602 204E                       		movea.l	a6,a0
0008D604 303C 00E3                  		move.w	#$E3,d0
0008D608                            
0008D608                            loc_725B6:
0008D608 4298                       		clr.l	(a0)+
0008D60A 51C8 FFFC                  		dbf	d0,loc_725B6
0008D60E                            
0008D60E 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008D614 4EBA FFA6                  		jsr	sub_7256A(pc)
0008D618                            
0008D618 33FC 0100 00A1 1100 4E71+  		stopZ80
0008D630 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
0008D638 33FC 0000 00A1 1100        		startZ80
0008D640 6000 0000                  		bra.w	sub_729B6
0008D644                            
0008D644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D644                            
0008D644                            
0008D644                            sub_725CA:				; XREF: Sound_ChkValue
0008D644 204E                       		movea.l	a6,a0
0008D646 1216                       		move.b	0(a6),d1
0008D648 142E 0027                  		move.b	$27(a6),d2
0008D64C 162E 002A                  		move.b	$2A(a6),d3
0008D650 182E 0026                  		move.b	$26(a6),d4
0008D654 3A2E 000A                  		move.w	$A(a6),d5
0008D658 303C 0087                  		move.w	#$87,d0
0008D65C                            
0008D65C                            loc_725E4:
0008D65C 4298                       		clr.l	(a0)+
0008D65E 51C8 FFFC                  		dbf	d0,loc_725E4
0008D662                            
0008D662 1C81                       		move.b	d1,0(a6)
0008D664 1D42 0027                  		move.b	d2,$27(a6)
0008D668 1D43 002A                  		move.b	d3,$2A(a6)
0008D66C 1D44 0026                  		move.b	d4,$26(a6)
0008D670 3D45 000A                  		move.w	d5,$A(a6)
0008D674 1D7C 0080 0009             		move.b	#$80,9(a6)
0008D67A 4EBA FF40                  		jsr	sub_7256A(pc)
0008D67E 6000 0000                  		bra.w	sub_729B6
0008D682                            ; End of function sub_725CA
0008D682                            
0008D682                            
0008D682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D682                            
0008D682                            
0008D682                            sub_7260C:				; XREF: sub_71B4C
0008D682 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008D688 41EE 004E                  		lea	$4E(a6),a0
0008D68C 7030                       		moveq	#$30,d0
0008D68E 7209                       		moveq	#9,d1
0008D690                            
0008D690                            loc_7261A:
0008D690 5210                       		addq.b	#1,(a0)
0008D692 D0C0                       		adda.w	d0,a0
0008D694 51C9 FFFA                  		dbf	d1,loc_7261A
0008D698                            
0008D698 4E75                       		rts	
0008D69A                            ; End of function sub_7260C
0008D69A                            
0008D69A                            ; ===========================================================================
0008D69A                            ; ---------------------------------------------------------------------------
0008D69A                            ; Speed	up music
0008D69A                            ; ---------------------------------------------------------------------------
0008D69A                            
0008D69A                            Sound_E2:				; XREF: Sound_ExIndex
0008D69A 4A2E 0027                  		tst.b	$27(a6)
0008D69E 6600                       		bne.s	loc_7263E
0008D6A0 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0008D6A6 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008D6AC 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008D6B2 4E75                       		rts	
0008D6B4                            ; ===========================================================================
0008D6B4                            
0008D6B4                            loc_7263E:
0008D6B4 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0008D6BA 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0008D6C0 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0008D6C6 4E75                       		rts	
0008D6C8                            ; ===========================================================================
0008D6C8                            ; ---------------------------------------------------------------------------
0008D6C8                            ; Change music back to normal speed
0008D6C8                            ; ---------------------------------------------------------------------------
0008D6C8                            
0008D6C8                            Sound_E3:				; XREF: Sound_ExIndex
0008D6C8 4A2E 0027                  		tst.b	$27(a6)
0008D6CC 6600                       		bne.s	loc_7266A
0008D6CE 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0008D6D4 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008D6DA 422E 002A                  		clr.b	$2A(a6)
0008D6DE 4E75                       		rts	
0008D6E0                            ; ===========================================================================
0008D6E0                            
0008D6E0                            loc_7266A:
0008D6E0 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0008D6E6 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0008D6EC 422E 03CA                  		clr.b	$3CA(a6)
0008D6F0 4E75                       		rts	
0008D6F2                            
0008D6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D6F2                            
0008D6F2                            
0008D6F2                            sub_7267C:				; XREF: sub_71B4C
0008D6F2 4A2E 0025                  		tst.b	$25(a6)
0008D6F6 6700                       		beq.s	loc_72688
0008D6F8 532E 0025                  		subq.b	#1,$25(a6)
0008D6FC 4E75                       		rts	
0008D6FE                            ; ===========================================================================
0008D6FE                            
0008D6FE                            loc_72688:
0008D6FE 4A2E 0026                  		tst.b	$26(a6)
0008D702 6700                       		beq.s	loc_726D6
0008D704 532E 0026                  		subq.b	#1,$26(a6)
0008D708 1D7C 0002 0025             		move.b	#2,$25(a6)
0008D70E 4BEE 0070                  		lea	$70(a6),a5
0008D712 7E05                       		moveq	#5,d7
0008D714                            
0008D714                            loc_7269E:
0008D714 4A15                       		tst.b	(a5)
0008D716 6A00                       		bpl.s	loc_726AA
0008D718 532D 0009                  		subq.b	#1,9(a5)
0008D71C 4EBA 0000                  		jsr	sub_72CB4(pc)
0008D720                            
0008D720                            loc_726AA:
0008D720 DAFC 0030                  		adda.w	#$30,a5
0008D724 51CF FFEE                  		dbf	d7,loc_7269E
0008D728 7E02                       		moveq	#2,d7
0008D72A                            
0008D72A                            loc_726B4:
0008D72A 4A15                       		tst.b	(a5)
0008D72C 6A00                       		bpl.s	loc_726CC
0008D72E 532D 0009                  		subq.b	#1,9(a5)
0008D732 1C2D 0009                  		move.b	9(a5),d6
0008D736 0C06 0010                  		cmpi.b	#$10,d6
0008D73A 6500                       		bcs.s	loc_726C8
0008D73C 7C0F                       		moveq	#$F,d6
0008D73E                            
0008D73E                            loc_726C8:
0008D73E 4EBA 0000                  		jsr	sub_7296A(pc)
0008D742                            
0008D742                            loc_726CC:
0008D742 DAFC 0030                  		adda.w	#$30,a5
0008D746 51CF FFE2                  		dbf	d7,loc_726B4
0008D74A 4E75                       		rts	
0008D74C                            ; ===========================================================================
0008D74C                            
0008D74C                            loc_726D6:
0008D74C 08AE 0002 0040             		bclr	#2,$40(a6)
0008D752 422E 0024                  		clr.b	$24(a6)
0008D756                            
0008D756 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
0008D75A 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
0008D75C                            
0008D75C 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
0008D75E 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
0008D762 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
0008D766                            
0008D766                            Resume_NoDAC:
0008D766 4E75                       		rts
0008D768                            
0008D768                            ; ===========================================================================
0008D768                            
0008D768                            loc_726E2:				; XREF: sub_71CCA
0008D768 0815 0001                  		btst	#1,(a5)
0008D76C 6600                       		bne.s	locret_726FC
0008D76E 0815 0002                  		btst	#2,(a5)
0008D772 6600                       		bne.s	locret_726FC
0008D774 7028                       		moveq	#$28,d0
0008D776 122D 0001                  		move.b	1(a5),d1
0008D77A 0001 00F0                  		ori.b	#-$10,d1
0008D77E 6000 0000                  		bra.w	sub_7272E
0008D782                            ; ===========================================================================
0008D782                            
0008D782                            locret_726FC:
0008D782 4E75                       		rts	
0008D784                            
0008D784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D784                            
0008D784                            
0008D784                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008D784 0815 0004                  		btst	#4,(a5)
0008D788 6600                       		bne.s	locret_72714
0008D78A 0815 0002                  		btst	#2,(a5)
0008D78E 6600                       		bne.s	locret_72714
0008D790                            
0008D790                            loc_7270A:				; XREF: Snd_FadeOut2
0008D790 7028                       		moveq	#$28,d0
0008D792 122D 0001                  		move.b	1(a5),d1
0008D796 6000 0000                  		bra.w	sub_7272E
0008D79A                            ; ===========================================================================
0008D79A                            
0008D79A                            locret_72714:
0008D79A 4E75                       		rts	
0008D79C                            ; End of function sub_726FE
0008D79C                            
0008D79C                            ; ===========================================================================
0008D79C                            
0008D79C                            loc_72716:				; XREF: sub_72A5A
0008D79C 0815 0002                  		btst	#2,(a5)
0008D7A0 6600                       		bne.s	locret_72720
0008D7A2 6000 0000                  		bra.w	sub_72722
0008D7A6                            ; ===========================================================================
0008D7A6                            
0008D7A6                            locret_72720:
0008D7A6 4E75                       		rts	
0008D7A8                            
0008D7A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D7A8                            
0008D7A8                            
0008D7A8                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008D7A8 082D 0002 0001             		btst	#2,1(a5)
0008D7AE 6600                       		bne.s	loc_7275A
0008D7B0 D02D 0001                  		add.b	1(a5),d0
0008D7B4                            ; End of function sub_72722
0008D7B4                            
0008D7B4                            
0008D7B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D7B4                            
0008D7B4                            
0008D7B4                            sub_7272E:		 ; XREF: loc_71E6A
0008D7B4 33FC 0100 00A1 1100 4E71+  		stopZ80
0008D7CC 1439 00A0 4000 0802 0007+  		waitYM
0008D7D8 13C0 00A0 4000             		move.b    d0,($A04000).l
0008D7DE 1439 00A0 4000 0802 0007+  		waitYM
0008D7EA 13C1 00A0 4001             		move.b    d1,($A04001).l
0008D7F0 1439 00A0 4000 0802 0007+  		waitYM
0008D7FC 13FC 002A 00A0 4000        		move.b    #$2A,($A04000).l
0008D804 33FC 0000 00A1 1100        		startZ80
0008D80C 4E75                       		rts
0008D80E                            ; End of function sub_7272E
0008D80E                            
0008D80E                            ; ===========================================================================
0008D80E                            
0008D80E                            loc_7275A:				; XREF: sub_72722
0008D80E 142D 0001                  		move.b	1(a5),d2
0008D812 0882 0002                  		bclr	#2,d2
0008D816 D002                       		add.b	d2,d0
0008D818                            
0008D818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D818                            
0008D818                            
0008D818                            sub_72764:		 ; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0008D818 33FC 0100 00A1 1100 4E71+  		stopZ80
0008D830 1439 00A0 4000 0802 0007+  		waitYM
0008D83C 13C0 00A0 4002             		move.b    d0,($A04002).l
0008D842 1439 00A0 4000 0802 0007+  		waitYM
0008D84E 13C1 00A0 4003             		move.b    d1,($A04003).l
0008D854 1439 00A0 4000 0802 0007+  		waitYM
0008D860 13FC 002A 00A0 4000        		move.b    #$2A,($A04000).l
0008D868 33FC 0000 00A1 1100        		startZ80
0008D870 4E75                       		rts
0008D872                            ; End of function sub_72764
0008D872                            
0008D872                            ; ===========================================================================
0008D872 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008D884 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008D896 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008D8A6 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008D8B6 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008D8C6 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008D8D6 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008D8E6 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008D8F6 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008D906 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008D916 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0008D926 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0008D932                            
0008D932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D932                            
0008D932                            
0008D932                            sub_72850:				; XREF: sub_71B4C
0008D932 532D 000E                  		subq.b	#1,$E(a5)
0008D936 6600                       		bne.s	loc_72866
0008D938 0895 0004                  		bclr	#4,(a5)
0008D93C 4EBA 0000                  		jsr	sub_72878(pc)
0008D940 4EBA 0000                  		jsr	sub_728DC(pc)
0008D944 6000 0000                  		bra.w	loc_7292E
0008D948                            ; ===========================================================================
0008D948                            
0008D948                            loc_72866:
0008D948 4EBA F418                  		jsr	sub_71D9E(pc)
0008D94C 4EBA 0000                  		jsr	sub_72926(pc)
0008D950 4EBA F438                  		jsr	sub_71DC6(pc)
0008D954 4EBA 0000                  		jsr	sub_728E2(pc)
0008D958 4E75                       		rts	
0008D95A                            ; End of function sub_72850
0008D95A                            
0008D95A                            
0008D95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D95A                            
0008D95A                            
0008D95A                            sub_72878:				; XREF: sub_72850
0008D95A 0895 0001                  		bclr	#1,(a5)
0008D95E 286D 0004                  		movea.l	4(a5),a4
0008D962                            
0008D962                            loc_72880:
0008D962 7A00                       		moveq	#0,d5
0008D964 1A1C                       		move.b	(a4)+,d5
0008D966 0C05 00E0                  		cmpi.b	#$E0,d5
0008D96A 6500                       		bcs.s	loc_72890
0008D96C 4EBA 0000                  		jsr	sub_72A5A(pc)
0008D970 60F0                       		bra.s	loc_72880
0008D972                            ; ===========================================================================
0008D972                            
0008D972                            loc_72890:
0008D972 4A05                       		tst.b	d5
0008D974 6A00                       		bpl.s	loc_728A4
0008D976 4EBA 0000                  		jsr	sub_728AC(pc)
0008D97A 1A1C                       		move.b	(a4)+,d5
0008D97C 4A05                       		tst.b	d5
0008D97E 6A00                       		bpl.s	loc_728A4
0008D980 534C                       		subq.w	#1,a4
0008D982 6000 F3A0                  		bra.w	sub_71D60
0008D986                            ; ===========================================================================
0008D986                            
0008D986                            loc_728A4:
0008D986 4EBA F37C                  		jsr	sub_71D40(pc)
0008D98A 6000 F398                  		bra.w	sub_71D60
0008D98E                            ; End of function sub_72878
0008D98E                            
0008D98E                            
0008D98E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D98E                            
0008D98E                            
0008D98E                            sub_728AC:				; XREF: sub_72878
0008D98E 0405 0081                  		subi.b	#$81,d5
0008D992 6500                       		bcs.s	loc_728CA
0008D994 DA2D 0008                  		add.b	8(a5),d5
0008D998 0245 007F                  		andi.w	#$7F,d5
0008D99C E34D                       		lsl.w	#1,d5
0008D99E 41FA 0000                  		lea	word_729CE(pc),a0
0008D9A2 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008D9A8 6000 F37A                  		bra.w	sub_71D60
0008D9AC                            ; ===========================================================================
0008D9AC                            
0008D9AC                            loc_728CA:
0008D9AC 08D5 0001                  		bset	#1,(a5)
0008D9B0 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008D9B6 4EBA F36C                  		jsr	sub_71D60(pc)
0008D9BA 6000 0000                  		bra.w	sub_729A0
0008D9BE                            ; End of function sub_728AC
0008D9BE                            
0008D9BE                            
0008D9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D9BE                            
0008D9BE                            
0008D9BE                            sub_728DC:				; XREF: sub_72850
0008D9BE 3C2D 0010                  		move.w	$10(a5),d6
0008D9C2 6B00                       		bmi.s	loc_72920
0008D9C4                            ; End of function sub_728DC
0008D9C4                            
0008D9C4                            
0008D9C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008D9C4                            
0008D9C4                            
0008D9C4                            sub_728E2:				; XREF: sub_72850
0008D9C4 102D 001E                  		move.b	$1E(a5),d0
0008D9C8 4880                       		ext.w	d0
0008D9CA DC40                       		add.w	d0,d6
0008D9CC 0815 0002                  		btst	#2,(a5)
0008D9D0 6600                       		bne.s	locret_7291E
0008D9D2 0815 0001                  		btst	#1,(a5)
0008D9D6 6600                       		bne.s	locret_7291E
0008D9D8 102D 0001                  		move.b	1(a5),d0
0008D9DC 0C00 00E0                  		cmpi.b	#$E0,d0
0008D9E0 6600                       		bne.s	loc_72904
0008D9E2 103C 00C0                  		move.b	#$C0,d0
0008D9E6                            
0008D9E6                            loc_72904:
0008D9E6 3206                       		move.w	d6,d1
0008D9E8 0201 000F                  		andi.b	#$F,d1
0008D9EC 8001                       		or.b	d1,d0
0008D9EE E84E                       		lsr.w	#4,d6
0008D9F0 0206 003F                  		andi.b	#$3F,d6
0008D9F4 13C0 00C0 0011             		move.b	d0,($C00011).l
0008D9FA 13C6 00C0 0011             		move.b	d6,($C00011).l
0008DA00                            
0008DA00                            locret_7291E:
0008DA00 4E75                       		rts	
0008DA02                            ; End of function sub_728E2
0008DA02                            
0008DA02                            ; ===========================================================================
0008DA02                            
0008DA02                            loc_72920:				; XREF: sub_728DC
0008DA02 08D5 0001                  		bset	#1,(a5)
0008DA06 4E75                       		rts	
0008DA08                            
0008DA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DA08                            
0008DA08                            
0008DA08                            sub_72926:				; XREF: sub_72850
0008DA08 4A2D 000B                  		tst.b	$B(a5)
0008DA0C 6700 0000                  		beq.w	locret_7298A
0008DA10                            
0008DA10                            loc_7292E:				; XREF: sub_72850
0008DA10 1C2D 0009                  		move.b	9(a5),d6
0008DA14 7000                       		moveq	#0,d0
0008DA16 102D 000B                  		move.b	$B(a5),d0
0008DA1A 6700                       		beq.s	sub_7296A
0008DA1C 2079 0008 C962             		movea.l	(Go_PSGIndex).l,a0
0008DA22 5340                       		subq.w	#1,d0
0008DA24 E548                       		lsl.w	#2,d0
0008DA26 2070 0000                  		movea.l	(a0,d0.w),a0
0008DA2A 102D 000C                  		move.b	$C(a5),d0
0008DA2E 1030 0000                  		move.b	(a0,d0.w),d0
0008DA32 522D 000C                  		addq.b	#1,$C(a5)
0008DA36 0800 0007                  		btst	#7,d0
0008DA3A 6700                       		beq.s	loc_72960
0008DA3C 0C00 0080                  		cmpi.b	#$80,d0
0008DA40 6700                       		beq.s	loc_7299A
0008DA42                            
0008DA42                            loc_72960:
0008DA42 DC40                       		add.w	d0,d6
0008DA44 0C06 0010                  		cmpi.b	#$10,d6
0008DA48 6500                       		bcs.s	sub_7296A
0008DA4A 7C0F                       		moveq	#$F,d6
0008DA4C                            ; End of function sub_72926
0008DA4C                            
0008DA4C                            
0008DA4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DA4C                            
0008DA4C                            
0008DA4C                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0008DA4C 0815 0001                  		btst	#1,(a5)
0008DA50 6600                       		bne.s	locret_7298A
0008DA52 0815 0002                  		btst	#2,(a5)
0008DA56 6600                       		bne.s	locret_7298A
0008DA58 0815 0004                  		btst	#4,(a5)
0008DA5C 6600                       		bne.s	loc_7298C
0008DA5E                            
0008DA5E                            loc_7297C:
0008DA5E 8C2D 0001                  		or.b	1(a5),d6
0008DA62 0606 0010                  		addi.b	#$10,d6
0008DA66 13C6 00C0 0011             		move.b	d6,($C00011).l
0008DA6C                            
0008DA6C                            locret_7298A:
0008DA6C 4E75                       		rts	
0008DA6E                            ; ===========================================================================
0008DA6E                            
0008DA6E                            loc_7298C:
0008DA6E 4A2D 0013                  		tst.b	$13(a5)
0008DA72 67EA                       		beq.s	loc_7297C
0008DA74 4A2D 0012                  		tst.b	$12(a5)
0008DA78 66E4                       		bne.s	loc_7297C
0008DA7A 4E75                       		rts	
0008DA7C                            ; End of function sub_7296A
0008DA7C                            
0008DA7C                            ; ===========================================================================
0008DA7C                            
0008DA7C                            loc_7299A:				; XREF: sub_72926
0008DA7C 532D 000C                  		subq.b	#1,$C(a5)
0008DA80 4E75                       		rts	
0008DA82                            
0008DA82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DA82                            
0008DA82                            
0008DA82                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0008DA82 0815 0002                  		btst	#2,(a5)
0008DA86 6600                       		bne.s	locret_729B4
0008DA88                            
0008DA88                            loc_729A6:				; XREF: Snd_FadeOut2
0008DA88 102D 0001                  		move.b	1(a5),d0
0008DA8C 0000 001F                  		ori.b	#$1F,d0
0008DA90 13C0 00C0 0011             		move.b	d0,($C00011).l
0008DA96                            
0008DA96                            locret_729B4:
0008DA96 4E75                       		rts	
0008DA98                            ; End of function sub_729A0
0008DA98                            
0008DA98                            
0008DA98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DA98                            
0008DA98                            
0008DA98                            sub_729B6:				; XREF: loc_71E7C
0008DA98 41F9 00C0 0011             		lea	($C00011).l,a0
0008DA9E 10BC 009F                  		move.b	#$9F,(a0)
0008DAA2 10BC 00BF                  		move.b	#$BF,(a0)
0008DAA6 10BC 00DF                  		move.b	#$DF,(a0)
0008DAAA 10BC 00FF                  		move.b	#$FF,(a0)
0008DAAE 4E75                       		rts	
0008DAB0                            ; End of function sub_729B6
0008DAB0                            
0008DAB0                            ; ===========================================================================
0008DAB0 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0008DAC2 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008DAD4 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008DAE8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0008DAFC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0008DB10 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008DB24 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008DB38 0011 0000                  		dc.w $11, 0
0008DB3C                            
0008DB3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DB3C                            
0008DB3C                            
0008DB3C                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008DB3C 0445 00E0                  		subi.w	#$E0,d5
0008DB40 E54D                       		lsl.w	#2,d5
0008DB42 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008DB46                            ; End of function sub_72A5A
0008DB46                            
0008DB46                            ; ===========================================================================
0008DB46                            
0008DB46                            loc_72A64:
0008DB46 6000 0000                  		bra.w	loc_72ACC
0008DB4A                            ; ===========================================================================
0008DB4A 6000 0000                  		bra.w	loc_72AEC
0008DB4E                            ; ===========================================================================
0008DB4E 6000 0000                  		bra.w	loc_72AF2
0008DB52                            ; ===========================================================================
0008DB52 6000 0000                  		bra.w	loc_72AF8
0008DB56                            ; ===========================================================================
0008DB56 6000 0000                  		bra.w	loc_72B14
0008DB5A                            ; ===========================================================================
0008DB5A 6000 0000                  		bra.w	loc_72B9E
0008DB5E                            ; ===========================================================================
0008DB5E 6000 0000                  		bra.w	loc_72BA4
0008DB62                            ; ===========================================================================
0008DB62 6000 0000                  		bra.w	loc_72BAE
0008DB66                            ; ===========================================================================
0008DB66 6000 0000                  		bra.w	loc_72BB4
0008DB6A                            ; ===========================================================================
0008DB6A 6000 0000                  		bra.w	loc_72BBE
0008DB6E                            ; ===========================================================================
0008DB6E 6000 0000                  		bra.w	loc_72BC6
0008DB72                            ; ===========================================================================
0008DB72 6000 0000                  		bra.w	loc_72BD0
0008DB76                            ; ===========================================================================
0008DB76 6000 0000                  		bra.w	loc_72BE6
0008DB7A                            ; ===========================================================================
0008DB7A 6000 0000                  		bra.w	loc_72BEE
0008DB7E                            ; ===========================================================================
0008DB7E 6000 0000                  		bra.w	loc_72BF4
0008DB82                            ; ===========================================================================
0008DB82 6000 0000                  		bra.w	loc_72C26
0008DB86                            ; ===========================================================================
0008DB86 6000 0000                  		bra.w	loc_72D30
0008DB8A                            ; ===========================================================================
0008DB8A 6000 0000                  		bra.w	loc_72D52
0008DB8E                            ; ===========================================================================
0008DB8E 6000 0000                  		bra.w	loc_72D58
0008DB92                            ; ===========================================================================
0008DB92 6000 0000                  		bra.w	loc_72E06
0008DB96                            ; ===========================================================================
0008DB96 6000 0000                  		bra.w	loc_72E20
0008DB9A                            ; ===========================================================================
0008DB9A 6000 0000                  		bra.w	loc_72E26
0008DB9E                            ; ===========================================================================
0008DB9E 6000 0000                  		bra.w	loc_72E2C
0008DBA2                            ; ===========================================================================
0008DBA2 6000 0000                  		bra.w	loc_72E38
0008DBA6                            ; ===========================================================================
0008DBA6 6000 0000                  		bra.w	loc_72E52
0008DBAA                            ; ===========================================================================
0008DBAA 6000 0000                  		bra.w	loc_72E64
0008DBAE                            ; ===========================================================================
0008DBAE                            
0008DBAE                            loc_72ACC:				; XREF: loc_72A64
0008DBAE 121C                       		move.b	(a4)+,d1
0008DBB0 4A2D 0001                  		tst.b	1(a5)
0008DBB4 6B00                       		bmi.s	locret_72AEA
0008DBB6 102D 000A                  		move.b	$A(a5),d0
0008DBBA 0200 0037                  		andi.b	#$37,d0
0008DBBE 8200                       		or.b	d0,d1
0008DBC0 1B41 000A                  		move.b	d1,$A(a5)
0008DBC4 103C 00B4                  		move.b	#$B4,d0
0008DBC8 6000 FBD2                  		bra.w	loc_72716
0008DBCC                            ; ===========================================================================
0008DBCC                            
0008DBCC                            locret_72AEA:
0008DBCC 4E75                       		rts	
0008DBCE                            ; ===========================================================================
0008DBCE                            
0008DBCE                            loc_72AEC:				; XREF: loc_72A64
0008DBCE 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008DBD2 4E75                       		rts	
0008DBD4                            ; ===========================================================================
0008DBD4                            
0008DBD4                            loc_72AF2:				; XREF: loc_72A64
0008DBD4 1D5C 0007                  		move.b	(a4)+,7(a6)
0008DBD8 4E75                       		rts	
0008DBDA                            ; ===========================================================================
0008DBDA                            
0008DBDA                            loc_72AF8:				; XREF: loc_72A64
0008DBDA 7000                       		moveq	#0,d0
0008DBDC 102D 000D                  		move.b	$D(a5),d0
0008DBE0 2875 0000                  		movea.l	(a5,d0.w),a4
0008DBE4 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0008DBEC 544C                       		addq.w	#2,a4
0008DBEE 5800                       		addq.b	#4,d0
0008DBF0 1B40 000D                  		move.b	d0,$D(a5)
0008DBF4 4E75                       		rts	
0008DBF6                            ; ===========================================================================
0008DBF6                            
0008DBF6                            loc_72B14:				; XREF: loc_72A64
0008DBF6 204E                       		movea.l	a6,a0
0008DBF8 43EE 03A0                  		lea	$3A0(a6),a1
0008DBFC 303C 0087                  		move.w	#$87,d0
0008DC00                            
0008DC00                            loc_72B1E:
0008DC00 20D9                       		move.l	(a1)+,(a0)+
0008DC02 51C8 FFFC                  		dbf	d0,loc_72B1E
0008DC06                            
0008DC06 08EE 0002 0040             		bset	#2,$40(a6)
0008DC0C 264D                       		movea.l	a5,a3
0008DC0E 1C3C 0028                  		move.b	#$28,d6
0008DC12 9C2E 0026                  		sub.b	$26(a6),d6
0008DC16 7E05                       		moveq	#5,d7
0008DC18 4BEE 0070                  		lea	$70(a6),a5
0008DC1C                            
0008DC1C                            loc_72B3A:
0008DC1C 0815 0007                  		btst	#7,(a5)
0008DC20 6700                       		beq.s	loc_72B5C
0008DC22 08D5 0001                  		bset	#1,(a5)
0008DC26 DD2D 0009                  		add.b	d6,9(a5)
0008DC2A 0815 0002                  		btst	#2,(a5)
0008DC2E 6600                       		bne.s	loc_72B5C
0008DC30 7000                       		moveq	#0,d0
0008DC32 102D 000B                  		move.b	$B(a5),d0
0008DC36 226E 0018                  		movea.l	$18(a6),a1
0008DC3A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008DC3E                            
0008DC3E                            loc_72B5C:
0008DC3E DAFC 0030                  		adda.w	#$30,a5
0008DC42 51CF FFD8                  		dbf	d7,loc_72B3A
0008DC46                            
0008DC46 7E02                       		moveq	#2,d7
0008DC48                            
0008DC48                            loc_72B66:
0008DC48 0815 0007                  		btst	#7,(a5)
0008DC4C 6700                       		beq.s	loc_72B78
0008DC4E 08D5 0001                  		bset	#1,(a5)
0008DC52 4EBA FE2E                  		jsr	sub_729A0(pc)
0008DC56 DD2D 0009                  		add.b	d6,9(a5)
0008DC5A                            
0008DC5A                            loc_72B78:
0008DC5A DAFC 0030                  		adda.w	#$30,a5
0008DC5E 51CF FFE8                  		dbf	d7,loc_72B66
0008DC62 2A4B                       		movea.l	a3,a5
0008DC64 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
0008DC68 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
0008DC6A                            
0008DC6A 702B                       		moveq	#$2B,d0			; DAC enable/disable register
0008DC6C 7200                       		moveq	#0,d1			; Disable DAC
0008DC6E 4EBA FB44                  		jsr	sub_7272E(pc)
0008DC72                            
0008DC72                            Restore_NoFM6
0008DC72 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008DC78 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008DC7E 422E 0027                  		clr.b	$27(a6)
0008DC82 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0008DC8A 504F                       		addq.w	#8,sp
0008DC8C 4E75                       		rts	
0008DC8E                            ; ===========================================================================
0008DC8E                            
0008DC8E                            loc_72B9E:				; XREF: loc_72A64
0008DC8E 1B5C 0002                  		move.b	(a4)+,2(a5)
0008DC92 4E75                       		rts	
0008DC94                            ; ===========================================================================
0008DC94                            
0008DC94                            loc_72BA4:				; XREF: loc_72A64
0008DC94 101C                       		move.b	(a4)+,d0
0008DC96 D12D 0009                  		add.b	d0,9(a5)
0008DC9A 6000 0000                  		bra.w	sub_72CB4
0008DC9E                            ; ===========================================================================
0008DC9E                            
0008DC9E                            loc_72BAE:				; XREF: loc_72A64
0008DC9E 08D5 0004                  		bset	#4,(a5)
0008DCA2 4E75                       		rts	
0008DCA4                            ; ===========================================================================
0008DCA4                            
0008DCA4                            loc_72BB4:				; XREF: loc_72A64
0008DCA4 1B54 0012                  		move.b	(a4),$12(a5)
0008DCA8 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008DCAC 4E75                       		rts	
0008DCAE                            ; ===========================================================================
0008DCAE                            
0008DCAE                            loc_72BBE:				; XREF: loc_72A64
0008DCAE 101C                       		move.b	(a4)+,d0
0008DCB0 D12D 0008                  		add.b	d0,8(a5)
0008DCB4 4E75                       		rts	
0008DCB6                            ; ===========================================================================
0008DCB6                            
0008DCB6                            loc_72BC6:				; XREF: loc_72A64
0008DCB6 1D54 0002                  		move.b	(a4),2(a6)
0008DCBA 1D5C 0001                  		move.b	(a4)+,1(a6)
0008DCBE 4E75                       		rts	
0008DCC0                            ; ===========================================================================
0008DCC0                            
0008DCC0                            loc_72BD0:				; XREF: loc_72A64
0008DCC0 41EE 0040                  		lea	$40(a6),a0
0008DCC4 101C                       		move.b	(a4)+,d0
0008DCC6 7230                       		moveq	#$30,d1
0008DCC8 7409                       		moveq	#9,d2
0008DCCA                            
0008DCCA                            loc_72BDA:
0008DCCA 1140 0002                  		move.b	d0,2(a0)
0008DCCE D0C1                       		adda.w	d1,a0
0008DCD0 51CA FFF8                  		dbf	d2,loc_72BDA
0008DCD4                            
0008DCD4 4E75                       		rts	
0008DCD6                            ; ===========================================================================
0008DCD6                            
0008DCD6                            loc_72BE6:				; XREF: loc_72A64
0008DCD6 101C                       		move.b	(a4)+,d0
0008DCD8 D12D 0009                  		add.b	d0,9(a5)
0008DCDC 4E75                       		rts	
0008DCDE                            ; ===========================================================================
0008DCDE                            
0008DCDE                            loc_72BEE:				; XREF: loc_72A64
0008DCDE 422E 002C                  		clr.b	$2C(a6)
0008DCE2 4E75                       		rts	
0008DCE4                            ; ===========================================================================
0008DCE4                            
0008DCE4                            loc_72BF4:				; XREF: loc_72A64
0008DCE4 0895 0007                  		bclr	#7,(a5)
0008DCE8 0895 0004                  		bclr	#4,(a5)
0008DCEC 4EBA FA96                  		jsr	sub_726FE(pc)
0008DCF0 4A2E 0250                  		tst.b	$250(a6)
0008DCF4 6B00                       		bmi.s	loc_72C22
0008DCF6 264D                       		movea.l	a5,a3
0008DCF8 4BEE 0100                  		lea	$100(a6),a5
0008DCFC 226E 0018                  		movea.l	$18(a6),a1
0008DD00 0895 0002                  		bclr	#2,(a5)
0008DD04 08D5 0001                  		bset	#1,(a5)
0008DD08 102D 000B                  		move.b	$B(a5),d0
0008DD0C 4EBA 0000                  		jsr	sub_72C4E(pc)
0008DD10 2A4B                       		movea.l	a3,a5
0008DD12                            
0008DD12                            loc_72C22:
0008DD12 504F                       		addq.w	#8,sp
0008DD14 4E75                       		rts	
0008DD16                            ; ===========================================================================
0008DD16                            
0008DD16                            loc_72C26:				; XREF: loc_72A64
0008DD16 7000                       		moveq	#0,d0
0008DD18 101C                       		move.b	(a4)+,d0
0008DD1A 1B40 000B                  		move.b	d0,$B(a5)
0008DD1E 0815 0002                  		btst	#2,(a5)
0008DD22 6600 0000                  		bne.w	locret_72CAA
0008DD26 226E 0018                  		movea.l	$18(a6),a1
0008DD2A 4A2E 000E                  		tst.b	$E(a6)
0008DD2E 6700                       		beq.s	sub_72C4E
0008DD30 226D 0020                  		movea.l	$20(a5),a1
0008DD34 4A2E 000E                  		tst.b	$E(a6)
0008DD38 6B00                       		bmi.s	sub_72C4E
0008DD3A 226E 0020                  		movea.l	$20(a6),a1
0008DD3E                            
0008DD3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DD3E                            
0008DD3E                            
0008DD3E                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008DD3E 5340                       		subq.w	#1,d0
0008DD40 6B00                       		bmi.s	loc_72C5C
0008DD42 323C 0019                  		move.w	#$19,d1
0008DD46                            
0008DD46                            loc_72C56:
0008DD46 D2C1                       		adda.w	d1,a1
0008DD48 51C8 FFFC                  		dbf	d0,loc_72C56
0008DD4C                            
0008DD4C                            loc_72C5C:
0008DD4C 1219                       		move.b	(a1)+,d1
0008DD4E 1B41 001F                  		move.b	d1,$1F(a5)
0008DD52 1801                       		move.b	d1,d4
0008DD54 103C 00B0                  		move.b	#$B0,d0
0008DD58 4EBA FA4E                  		jsr	sub_72722(pc)
0008DD5C 45FA 0000                  		lea	byte_72D18(pc),a2
0008DD60 7613                       		moveq	#$13,d3
0008DD62                            
0008DD62                            loc_72C72:
0008DD62 101A                       		move.b	(a2)+,d0
0008DD64 1219                       		move.b	(a1)+,d1
0008DD66 4EBA FA40                  		jsr	sub_72722(pc)
0008DD6A 51CB FFF6                  		dbf	d3,loc_72C72
0008DD6E 7A03                       		moveq	#3,d5
0008DD70 0244 0007                  		andi.w	#7,d4
0008DD74 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008DD78 162D 0009                  		move.b	9(a5),d3
0008DD7C                            
0008DD7C                            loc_72C8C:
0008DD7C 101A                       		move.b	(a2)+,d0
0008DD7E 1219                       		move.b	(a1)+,d1
0008DD80 E20C                       		lsr.b	#1,d4
0008DD82 6400                       		bcc.s	loc_72C96
0008DD84 D203                       		add.b	d3,d1
0008DD86                            
0008DD86                            loc_72C96:
0008DD86 4EBA FA20                  		jsr	sub_72722(pc)
0008DD8A 51CD FFF0                  		dbf	d5,loc_72C8C
0008DD8E 103C 00B4                  		move.b	#$B4,d0
0008DD92 122D 000A                  		move.b	$A(a5),d1
0008DD96 4EBA FA10                  		jsr	sub_72722(pc)
0008DD9A                            
0008DD9A                            locret_72CAA:
0008DD9A 4E75                       		rts	
0008DD9C                            ; End of function sub_72C4E
0008DD9C                            
0008DD9C                            ; ===========================================================================
0008DD9C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008DDA4                            
0008DDA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008DDA4                            
0008DDA4                            
0008DDA4                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008DDA4 0815 0002                  		btst	#2,(a5)
0008DDA8 6600                       		bne.s	locret_72D16
0008DDAA 7000                       		moveq	#0,d0
0008DDAC 102D 000B                  		move.b	$B(a5),d0
0008DDB0 226E 0018                  		movea.l	$18(a6),a1
0008DDB4 4A2E 000E                  		tst.b	$E(a6)
0008DDB8 6700                       		beq.s	loc_72CD8
0008DDBA 226E 0020                  		movea.l	$20(a6),a1
0008DDBE 4A2E 000E                  		tst.b	$E(a6)
0008DDC2 6B00                       		bmi.s	loc_72CD8
0008DDC4 226E 0020                  		movea.l	$20(a6),a1
0008DDC8                            
0008DDC8                            loc_72CD8:
0008DDC8 5340                       		subq.w	#1,d0
0008DDCA 6B00                       		bmi.s	loc_72CE6
0008DDCC 323C 0019                  		move.w	#$19,d1
0008DDD0                            
0008DDD0                            loc_72CE0:
0008DDD0 D2C1                       		adda.w	d1,a1
0008DDD2 51C8 FFFC                  		dbf	d0,loc_72CE0
0008DDD6                            
0008DDD6                            loc_72CE6:
0008DDD6 D2FC 0015                  		adda.w	#$15,a1
0008DDDA 45FA 0000                  		lea	byte_72D2C(pc),a2
0008DDDE 102D 001F                  		move.b	$1F(a5),d0
0008DDE2 0240 0007                  		andi.w	#7,d0
0008DDE6 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008DDEA 162D 0009                  		move.b	9(a5),d3
0008DDEE 6B00                       		bmi.s	locret_72D16
0008DDF0 7A03                       		moveq	#3,d5
0008DDF2                            
0008DDF2                            loc_72D02:
0008DDF2 101A                       		move.b	(a2)+,d0
0008DDF4 1219                       		move.b	(a1)+,d1
0008DDF6 E20C                       		lsr.b	#1,d4
0008DDF8 6400                       		bcc.s	loc_72D12
0008DDFA D203                       		add.b	d3,d1
0008DDFC 6500                       		bcs.s	loc_72D12
0008DDFE 4EBA F9A8                  		jsr	sub_72722(pc)
0008DE02                            
0008DE02                            loc_72D12:
0008DE02 51CD FFEE                  		dbf	d5,loc_72D02
0008DE06                            
0008DE06                            locret_72D16:
0008DE06 4E75                       		rts	
0008DE08                            ; End of function sub_72CB4
0008DE08                            
0008DE08                            ; ===========================================================================
0008DE08 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008DE12 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008DE1C 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008DE20                            ; ===========================================================================
0008DE20                            
0008DE20                            loc_72D30:				; XREF: loc_72A64
0008DE20 08D5 0003                  		bset	#3,(a5)
0008DE24 2B4C 0014                  		move.l	a4,$14(a5)
0008DE28 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008DE2C 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008DE30 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008DE34 101C                       		move.b	(a4)+,d0
0008DE36 E208                       		lsr.b	#1,d0
0008DE38 1B40 001B                  		move.b	d0,$1B(a5)
0008DE3C 426D 001C                  		clr.w	$1C(a5)
0008DE40 4E75                       		rts	
0008DE42                            ; ===========================================================================
0008DE42                            
0008DE42                            loc_72D52:				; XREF: loc_72A64
0008DE42 08D5 0003                  		bset	#3,(a5)
0008DE46 4E75                       		rts	
0008DE48                            ; ===========================================================================
0008DE48                            
0008DE48                            loc_72D58:				; XREF: loc_72A64
0008DE48 0895 0007                  		bclr	#7,(a5)
0008DE4C 0895 0004                  		bclr	#4,(a5)
0008DE50 4A2D 0001                  		tst.b	1(a5)
0008DE54 6B00                       		bmi.s	loc_72D74
0008DE56 4A2E 0008                  		tst.b	8(a6)
0008DE5A 6B00 0000                  		bmi.w	loc_72E02
0008DE5E 4EBA F924                  		jsr	sub_726FE(pc)
0008DE62 6000                       		bra.s	loc_72D78
0008DE64                            ; ===========================================================================
0008DE64                            
0008DE64                            loc_72D74:
0008DE64 4EBA FC1C                  		jsr	sub_729A0(pc)
0008DE68                            
0008DE68                            loc_72D78:
0008DE68 4A2E 000E                  		tst.b	$E(a6)
0008DE6C 6A00 0000                  		bpl.w	loc_72E02
0008DE70 4216                       		clr.b	0(a6)
0008DE72 7000                       		moveq	#0,d0
0008DE74 102D 0001                  		move.b	1(a5),d0
0008DE78 6B00                       		bmi.s	loc_72DCC
0008DE7A 41FA F4A4                  		lea	dword_722CC(pc),a0
0008DE7E 264D                       		movea.l	a5,a3
0008DE80 0C00 0004                  		cmpi.b	#4,d0
0008DE84 6600                       		bne.s	loc_72DA8
0008DE86 4A2E 0340                  		tst.b	$340(a6)
0008DE8A 6A00                       		bpl.s	loc_72DA8
0008DE8C 4BEE 0340                  		lea	$340(a6),a5
0008DE90 226E 0020                  		movea.l	$20(a6),a1
0008DE94 6000                       		bra.s	loc_72DB8
0008DE96                            ; ===========================================================================
0008DE96                            
0008DE96                            loc_72DA8:
0008DE96 5500                       		subq.b	#2,d0
0008DE98 E508                       		lsl.b	#2,d0
0008DE9A 2A70 0000                  		movea.l	(a0,d0.w),a5
0008DE9E 4A15                       		tst.b	(a5)
0008DEA0 6A00                       		bpl.s	loc_72DC8
0008DEA2 226E 0018                  		movea.l	$18(a6),a1
0008DEA6                            
0008DEA6                            loc_72DB8:
0008DEA6 0895 0002                  		bclr	#2,(a5)
0008DEAA 08D5 0001                  		bset	#1,(a5)
0008DEAE 102D 000B                  		move.b	$B(a5),d0
0008DEB2 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008DEB6                            
0008DEB6                            loc_72DC8:
0008DEB6 2A4B                       		movea.l	a3,a5
0008DEB8 6000                       		bra.s	loc_72E02
0008DEBA                            ; ===========================================================================
0008DEBA                            
0008DEBA                            loc_72DCC:
0008DEBA 41EE 0370                  		lea	$370(a6),a0
0008DEBE 4A10                       		tst.b	(a0)
0008DEC0 6A00                       		bpl.s	loc_72DE0
0008DEC2 0C00 00E0                  		cmpi.b	#$E0,d0
0008DEC6 6700                       		beq.s	loc_72DEA
0008DEC8 0C00 00C0                  		cmpi.b	#$C0,d0
0008DECC 6700                       		beq.s	loc_72DEA
0008DECE                            
0008DECE                            loc_72DE0:
0008DECE 41FA F450                  		lea	dword_722CC(pc),a0
0008DED2 E608                       		lsr.b	#3,d0
0008DED4 2070 0000                  		movea.l	(a0,d0.w),a0
0008DED8                            
0008DED8                            loc_72DEA:
0008DED8 0890 0002                  		bclr	#2,(a0)
0008DEDC 08D0 0001                  		bset	#1,(a0)
0008DEE0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008DEE6 6600                       		bne.s	loc_72E02
0008DEE8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008DEF0                            
0008DEF0                            loc_72E02:
0008DEF0 504F                       		addq.w	#8,sp
0008DEF2 4E75                       		rts	
0008DEF4                            ; ===========================================================================
0008DEF4                            
0008DEF4                            loc_72E06:				; XREF: loc_72A64
0008DEF4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0008DEFA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0008DEFE 0815 0002                  		btst	#2,(a5)
0008DF02 6600                       		bne.s	locret_72E1E
0008DF04 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0008DF0C                            
0008DF0C                            locret_72E1E:
0008DF0C 4E75                       		rts	
0008DF0E                            ; ===========================================================================
0008DF0E                            
0008DF0E                            loc_72E20:				; XREF: loc_72A64
0008DF0E 0895 0003                  		bclr	#3,(a5)
0008DF12 4E75                       		rts	
0008DF14                            ; ===========================================================================
0008DF14                            
0008DF14                            loc_72E26:				; XREF: loc_72A64
0008DF14 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008DF18 4E75                       		rts	
0008DF1A                            ; ===========================================================================
0008DF1A                            
0008DF1A                            loc_72E2C:				; XREF: loc_72A64
0008DF1A 101C                       		move.b	(a4)+,d0
0008DF1C E148                       		lsl.w	#8,d0
0008DF1E 101C                       		move.b	(a4)+,d0
0008DF20 D8C0                       		adda.w	d0,a4
0008DF22 534C                       		subq.w	#1,a4
0008DF24 4E75                       		rts	
0008DF26                            ; ===========================================================================
0008DF26                            
0008DF26                            loc_72E38:				; XREF: loc_72A64
0008DF26 7000                       		moveq	#0,d0
0008DF28 101C                       		move.b	(a4)+,d0
0008DF2A 121C                       		move.b	(a4)+,d1
0008DF2C 4A35 0024                  		tst.b	$24(a5,d0.w)
0008DF30 6600                       		bne.s	loc_72E48
0008DF32 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008DF36                            
0008DF36                            loc_72E48:
0008DF36 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008DF3A 66DE                       		bne.s	loc_72E2C
0008DF3C 544C                       		addq.w	#2,a4
0008DF3E 4E75                       		rts	
0008DF40                            ; ===========================================================================
0008DF40                            
0008DF40                            loc_72E52:				; XREF: loc_72A64
0008DF40 7000                       		moveq	#0,d0
0008DF42 102D 000D                  		move.b	$D(a5),d0
0008DF46 5900                       		subq.b	#4,d0
0008DF48 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008DF4C 1B40 000D                  		move.b	d0,$D(a5)
0008DF50 60C8                       		bra.s	loc_72E2C
0008DF52                            ; ===========================================================================
0008DF52                            
0008DF52                            loc_72E64:				; XREF: loc_72A64
0008DF52 103C 0088                  		move.b	#$88,d0
0008DF56 123C 000F                  		move.b	#$F,d1
0008DF5A 4EBA F858                  		jsr	sub_7272E(pc)
0008DF5E 103C 008C                  		move.b	#$8C,d0
0008DF62 123C 000F                  		move.b	#$F,d1
0008DF66 6000 F84C                  		bra.w	sub_7272E
0008DF6A                            ; ===========================================================================
0008DF6A                            Kos_Z80:	include    'MegaPCM.asm'
0008DF6A                            
0008DF6A                            ; ===============================================================
0008DF6A                            ; Mega PCM Driver Include File
0008DF6A                            ; (c) 2012, Vladikcomper
0008DF6A                            ; ===============================================================
0008DF6A                            
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            ; Variables used in DAC table
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            
0008DF6A                            ; flags
0008DF6A =000000C0                  panLR	= $C0
0008DF6A =00000080                  panL	= $80
0008DF6A =00000040                  panR	= $40
0008DF6A =00000000                  pcm	= 0
0008DF6A =00000004                  dpcm	= 4
0008DF6A =00000002                  loop	= 2
0008DF6A =00000001                  pri	= 1
0008DF6A                            
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            ; Macros
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            
0008DF6A                            z80word macro Value
0008DF6A                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
0008DF6A                            	endm
0008DF6A                            
0008DF6A                            DAC_Entry macro Pitch,Offset,Flags
0008DF6A                            	dc.b	\Flags			; 00h	- Flags
0008DF6A                            	dc.b	\Pitch			; 01h	- Pitch
0008DF6A                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
0008DF6A                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
0008DF6A                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
0008DF6A                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
0008DF6A                            	endm
0008DF6A                            	
0008DF6A                            IncludeDAC macro Name,Extension
0008DF6A                            \Name:
0008DF6A                            	if strcmp('\extension','wav')
0008DF6A                            		incbin	'dac/\Name\.\Extension\',$3A
0008DF6A                            	else
0008DF6A                            		incbin	'dac/\Name\.\Extension\'
0008DF6A                            	endc
0008DF6A                            \Name\_End:
0008DF6A                            	endm
0008DF6A                            
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            ; Driver's code
0008DF6A                            ; ---------------------------------------------------------------
0008DF6A                            
0008DF6A                            MegaPCM:
0008DF6A                            	incbin	'MegaPCM.z80'
0008E17A                            
0008E17A                            ; ---------------------------------------------------------------
0008E17A                            ; DAC Samples Table
0008E17A                            ; ---------------------------------------------------------------
0008E17A                            
0008E17A 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
0008E182 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
0008E18A 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
0008E192 0408 0000 0000 0000        	DAC_Entry	$08, bah, dpcm			; $84	- Timpani
0008E19A 0408 0000 0000 0000        	DAC_Entry	$08, grunt, dpcm		; $85	- <Free>
0008E1A2 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
0008E1AA 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
0008E1B2 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
0008E1BA 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
0008E1C2 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
0008E1CA 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
0008E1D2 0003 0000 0000 0000        	DAC_Entry	$03, sega, pcm			; $8C   - Sega
0008E1DA                            
0008E1DA                            MegaPCM_End:
0008E1DA                            
0008E1DA                            ; ---------------------------------------------------------------
0008E1DA                            ; DAC Samples Files
0008E1DA                            ; ---------------------------------------------------------------
0008E1DA                            
000AB096                            	even
000AB096                            
000AB096                            
000AB096                            
000AB096                            Music81:	incbin	"sound\Mind In The Gutter I.bin"
000AC444                            		even
000AC444                            Music82:	incbin	"sound\I Died On Jeopardy.bin"
000ACFE2                            		even
000ACFE2                            Music83:	incbin	"sound\Tutorial With Attitude.bin"
000AE566                            		even
000AE566                            Music84:	incbin	"sound\Welcome to the Alleyway.bin"
000AF450                            		even
000AF450                            Music85:	incbin	"sound\I'm An Edgy Motherfucker.bin"
000B062A 00                         		even
000B062A                            Music86:	incbin	sound\music86.bin
000B0B7A                            		even
000B0B7A                            Music87:	incbin	sound\Jeopardyinv.bin
000B1054                            		even
000B1054                            Music88:	incbin	sound\music88.bin
000B1142                            		even
000B1142                            Music89:	incbin	sound\music89.bin
000B146E                            		even
000B146E                            Music8A:	incbin	sound\Jeopardy.bin
000B1976 00                         		even
000B1976                            Music8B:	incbin	"sound\Grand Finale.bin"
000B4048                            		even
000B4048                            Music8C:	incbin	sound\music8C.bin
000B4BFA 00                         		even
000B4BFA                            Music8D:	incbin	sound\music8D.bin
000B4E16                            		even
000B4E16                            Music8E:	incbin	"sound\Lover Went Right.bin"
000B501E                            		even
000B501E                            Music8F:	incbin	sound\music8F.bin
000B5528 00                         		even
000B5528                            Music90:	incbin	"sound\Life Or Death.bin"
000B567A                            		even
000B567A                            Music91:	incbin	sound\music91.bin
000B6948                            		even
000B6948                            Music92:	incbin	"sound\I Cannot Breathe.bin"
000B7380 00                         		even
000B7380                            Music93:	incbin	sound\music93.bin
000B744E                            		even
000B744E                            Music95:	incbin	sound\SpeedShoes.bin
000B7634                            		even
000B7634                            Music96:	incbin	sound\SpeedShoesInv.bin
000B781A                            		even
000B781A                            Music97:	incbin	"sound\Mind In The Gutter II.bin"
000B8744                            		even
000B8744                            		
000B8744                            ; ---------------------------------------------------------------------------
000B8744                            ; Sound	effect pointers
000B8744                            ; ---------------------------------------------------------------------------
000B8744                            SoundIndex:	
000B8744 0000 0000 0000 0000 0000+  		dc.l SoundA0, SoundA1, SoundA2
000B8750 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B875C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B8768 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B8774 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B8780 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B878C 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B8798 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B87A4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B87B0 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B87BC 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B87C8 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B87D4 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B87E0 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B87EC 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B87F8 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B8804 0000 0000                  SoundD0Index:	dc.l SoundD0
000B8808                            SoundA0:	incbin	sound\soundA0.bin
000B881E                            		even
000B881E                            SoundA1:	incbin	sound\soundA1.bin
000B8848                            		even
000B8848                            SoundA2:	incbin	sound\soundA2.bin
000B8868                            		even
000B8868                            SoundA3:	incbin	sound\soundA3.bin
000B889A                            		even
000B889A                            SoundA4:	incbin	sound\soundA4.bin
000B88D0                            		even
000B88D0                            SoundA5:	incbin	sound\soundA5.bin
000B88FC                            		even
000B88FC                            SoundA6:	incbin	sound\soundA6.bin
000B892C                            		even
000B892C                            SoundA7:	incbin	sound\soundA7.bin
000B895C                            		even
000B895C                            SoundA8:	incbin	sound\soundA8.bin
000B8990                            		even
000B8990                            SoundA9:	incbin	sound\soundA9.bin
000B89A2                            		even
000B89A2                            SoundAA:	incbin	sound\soundAA.bin
000B89E4                            		even
000B89E4                            SoundAB:	incbin	sound\soundAB.bin
000B8A04                            		even
000B8A04                            SoundAC:	incbin	sound\soundAC.bin
000B8A38                            		even
000B8A38                            SoundAD:	incbin	sound\soundAD.bin
000B8A6E                            		even
000B8A6E                            SoundAE:	incbin	sound\soundAE.bin
000B8AB8                            		even
000B8AB8                            SoundAF:	incbin	sound\soundAF.bin
000B8AE6                            		even
000B8AE6                            SoundB0:	incbin	sound\soundB0.bin
000B8B18                            		even
000B8B18                            SoundB1:	incbin	sound\soundB1.bin
000B8B44                            		even
000B8B44                            SoundB2:	incbin	sound\soundB2.bin
000B8B94                            		even
000B8B94                            SoundB3:	incbin	sound\soundB3.bin
000B8BDE                            		even
000B8BDE                            SoundB4:	incbin	sound\soundB4.bin
000B8C3A                            		even
000B8C3A                            SoundB5:	incbin	sound\soundB5.bin
000B8C68                            		even
000B8C68                            SoundB6:	incbin	sound\soundB6.bin
000B8C86                            		even
000B8C86                            SoundB7:	incbin	sound\soundB7.bin
000B8CC2                            		even
000B8CC2                            SoundB8:	incbin	sound\soundB8.bin
000B8CE0                            		even
000B8CE0                            SoundB9:	incbin	sound\soundB9.bin
000B8D44                            		even
000B8D44                            SoundBA:	incbin	sound\soundBA.bin
000B8D6C                            		even
000B8D6C                            SoundBB:	incbin	sound\soundBB.bin
000B8D98                            		even
000B8D98                            SoundBC:	incbin	sound\soundBC.bin
000B8DDA                            		even
000B8DDA                            SoundBD:	incbin	sound\soundBD.bin
000B8E2E                            		even
000B8E2E                            SoundBE:	incbin	sound\soundBE.bin
000B8E68                            		even
000B8E68                            SoundBF:	incbin	sound\soundBF.bin
000B8EDA                            		even
000B8EDA                            SoundC0:	incbin	sound\soundC0.bin
000B8F08                            		even
000B8F08                            SoundC1:	incbin	sound\soundC1.bin
000B8F42                            		even
000B8F42                            SoundC2:	incbin	sound\soundC2.bin
000B8F6C                            		even
000B8F6C                            SoundC3:	incbin	sound\soundC3.bin
000B8FE6                            		even
000B8FE6                            SoundC4:	incbin	sound\soundC4.bin
000B900E                            		even
000B900E                            SoundC5:	incbin	sound\soundC5.bin
000B9076                            		even
000B9076                            SoundC6:	incbin	sound\soundC6.bin
000B90B8                            		even
000B90B8                            SoundC7:	incbin	sound\soundC7.bin
000B90E6                            		even
000B90E6                            SoundC8:	incbin	sound\soundC8.bin
000B90F8                            		even
000B90F8                            SoundC9:	incbin	sound\soundC9.bin
000B9126                            		even
000B9126                            SoundCA:	incbin	sound\soundCA.bin
000B9154                            		even
000B9154                            SoundCB:	incbin	sound\soundCB.bin
000B91A0                            		even
000B91A0                            SoundCC:	incbin	sound\soundCC.bin
000B91DA                            		even
000B91DA                            SoundCD:	incbin	sound\soundCD.bin
000B91E8                            		even
000B91E8                            SoundCE:	incbin	sound\soundCE.bin
000B9216                            		even
000B9216                            SoundCF:	incbin	sound\soundCF.bin
000B924E                            		even
000B924E                            SoundD0:	incbin	sound\soundD0.bin
000B9288                            		even
000B9288                            SoundD1:	incbin	sound\soundD1.bin
000B92C4                            		even
000B92C4                            SoundD2:	incbin	sound\Gen_Jump.bin
000B92DA                            		even
000B92DA                            SoundD3:	incbin	sound\PeeloutCharge.bin
000B9314 00                         		even
000B9314                            SoundD4:	incbin	sound\PeeloutStop.bin
000B9320                            		even
000B9320                            SoundD5:	incbin	sound\S3K_Shoot.bin
000B934E 00                         		even
000B934E                            SoundD6:	incbin	sound\Peelout_Release.bin
000B93E6                            		even
000B93E6                            SegaPCM:	incbin	sound\segapcm.bin
000BFD5E                            SegaPCM_End	even
000BFD5E                            ; ===========================================================================
000BFD5E                            Music94:		incbin	"sound\owarisoft logo.bin"
000BFE9C                            		even
000BFE9C                            ;	include "#Owarisoft/main.asm"
000BFE9C                            ;	inform 0,""
000BFE9C                            ; ===========================================================================
000BFE9C                            Art_Dust	incbin	artunc\spindust.bin
000C17DC                            ; ===========================================================================
000C17DC                            
000C17DC                            LoadDPLC:
000C17DC 7000                       		moveq	#0,d0
000C17DE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000C17E2 D040                       		add.w	d0,d0
000C17E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000C17E8 7A00                       		moveq	#0,d5
000C17EA 1A1A                       		move.b	(a2)+,d5
000C17EC 5345                       		subq.w	#1,d5
000C17EE 6B00                       		bmi.s	DPLC_End
000C17F0                            
000C17F0                            DPLC_ReadEntry:
000C17F0 7200                       		moveq	#0,d1
000C17F2 121A                       		move.b	(a2)+,d1
000C17F4 E149                       		lsl.w	#8,d1
000C17F6 121A                       		move.b	(a2)+,d1
000C17F8 3601                       		move.w	d1,d3
000C17FA E04B                       		lsr.w	#8,d3
000C17FC 0243 00F0                  		andi.w	#$F0,d3
000C1800 0643 0010                  		addi.w	#$10,d3
000C1804 0241 0FFF                  		andi.w	#$FFF,d1
000C1808 EB89                       		lsl.l	#5,d1
000C180A D286                       		add.l	d6,d1
000C180C 3404                       		move.w	d4,d2
000C180E D843                       		add.w	d3,d4
000C1810 D843                       		add.w	d3,d4
000C1812 4EB9 0000 1106             		jsr	(QueueDMATransfer).l
000C1818 51CD FFD6                  		dbf	d5,DPLC_ReadEntry	; repeat for number of entries
000C181C                            
000C181C                            DPLC_End:
000C181C 4E75                       		rts	
000C181E                            ; End of function LoadSonicDynPLC
000C181E                            ; ===============================================================
000C181E                            Nem_TitleCard_Tutorial:	incbin "artnem\Title Cards\Tutorial.bin"
000C195C                            		even
000C195C                            Nem_TitleCard_FuckedUp:	incbin "artnem\Title Cards\OhShitSonYouFuckedUpNow.bin"
000C1B6E 00                         		even
000C1B6E                            Nem_TitleCard_Dzien:	incbin "artnem\Title Cards\DzienDobry.bin"
000C1CF4 00                         		even
000C1CF4                            Nem_TitleCard_Appendicitis:	incbin "artnem\Title Cards\IThinkIHaveAppendicitis.bin"
000C1EEC 00                         		even
000C1EEC                            Nem_TitleCard_Teeth:	incbin "artnem\Title Cards\MyTeethFeelFunny.bin"
000C2058                            		even
000C2058                            Nem_TitleCard_Hell:	incbin "artnem\Title Cards\YoureInHellNow.bin"
000C21B8                            		even
000C21B8                            Nem_TitleCard_Final:	incbin "artnem\Title Cards\Final.bin"
000C22CC 00                         		even
000C22CC                            Nem_LoverWentRight:		incbin "artnem\Title Cards\LoverWentRight.bin"
000C2414                            		even
000C2414                            ; ===============================================================
000C2414                            ; MUST BE AT THE END OF THE ROM
000C2414                            ; ===============================================================
000C2414                            ; ---------------------------------------------------------------
000C2414                            ; Error handling module
000C2414                            ; ---------------------------------------------------------------
000C2414                             
000C2414 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
000C2418 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
000C2422 01                                 dc.b    1               ; extended stack frame
000C2424 00                                 even
000C2424                             
000C2424 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
000C2428 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
000C2436 01                                 dc.b    1               ; extended stack frame
000C2438 00                                 even
000C2438                             
000C2438 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
000C243C 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
000C2450 00                                 dc.b    0               ; extended stack frame
000C2452 00                                 even
000C2452                             
000C2452 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
000C2456 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
000C2462 00                                 dc.b    0               ; extended stack frame
000C2464 00                                 even
000C2464                             
000C2464 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
000C2468 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
000C2478 00                                 dc.b    0               ; extended stack frame
000C247A 00                                 even
000C247A                             
000C247A 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
000C247E 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
000C2490 00                                 dc.b    0               ; extended stack frame
000C2492 00                                 even
000C2492                             
000C2492 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
000C2496 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
000C24AA 00                                 dc.b    0               ; extended stack frame
000C24AC 00                                 even
000C24AC                             
000C24AC 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
000C24B0 5452 4143 4500                     dc.b    "TRACE",0           ; text
000C24B6 00                                 dc.b    0               ; extended stack frame
000C24B8 00                                 even
000C24B8                             
000C24B8 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
000C24BC 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
000C24CF 00                                 dc.b    0               ; extended stack frame
000C24D0                                    even
000C24D0                             
000C24D0 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
000C24D4 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
000C24E7 00                                 dc.b    0               ; extended stack frame
000C24E8                                    even
000C24E8                             
000C24E8 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
000C24EC 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
000C24FC 00                                 dc.b    0               ; extended stack frame
000C24FE 00                                 even
000C24FE                             
000C24FE                            ErrorHandler:   incbin  "error/ErrorHandler.bin"
000C2CE2                            		even
000C2CE2                            ; ===========================================================================
000C2CE2                            EndOfRom:
