00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            stopZ80		macro
00000000                            		move.w    #$100,($A11100).l
00000000                            		nop
00000000                            		nop
00000000                            		nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                            		move.w    #0,($A11100).l    ; start the Z80
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM		macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                            		btst    #7,d2
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000 =FFFFFFC4                  VBlankJump	equ $FFFFFFC4
00000000 =FFFFFFCA                  HBlankJump	equ VBlankJump+6
00000000                            ; ===========================================================================
00000000                            
00000000                            loadJumps	macro fromloc
00000000                            
00000000                            		lea	VBlankJump,a0
00000000                            		lea	fromloc,a1
00000000                            	rept 3
00000000                            		move.l	(a1)+,(a0)+
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000        Vectors:	dc.l $FFFE00, EntryPoint
00000008 6000 FFFE                  ErrorTrap:	bra.w	*
0000000C                            
0000000C 0000 0000 0000 0000 0000+  		dc.l AddressError, IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0008 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FFCA 0000 0008 FFFF+  		dc.l HBlankJump, ErrorTrap, VBlankJump, ErrorTrap
00000080 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F4                            
000000F4                            ; ===========================================================================
000000F4 4EF9 0000 0000             IntMain:	jmp	V_Int
000000FA 4EF9 0000 0000             			jmp	H_Int
00000100                            ; ===========================================================================
00000100 5345 4741 204D 4547 4120+  Console:		dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 4F57 4152 4920 2020 3230+  Date:			dc.b 'OWARI   2016.NOV' ; Release date
00000120 5975 6E64 6F6E 6720 5A69+  Title_Local:	dc.b 'Yundong Zixingche                               ' ; Domestic name
00000150 5975 6E67 646F 6E67 205A+  Title_Int:		dc.b 'Yungdong Zixingche                              ' ; International name
00000180 474D 2031 3331 3331 3331+  Serial:			dc.b 'GM 13131313-13'   ; Serial/version number
0000018E 0000                       Checksum:		dc.w 0
00000190 4A20 2020 2020 2020 2020+  				dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom			; ROM start
000001A4 0000 0000                  RomEndLoc:		dc.l EndOfRom-1			; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000			; RAM start
000001AC 00FF FFFF                  RamEndLoc:		dc.l $FFFFFF			; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020			; change to $5241E020 to create	SRAM
000001B4 2020 2020                  				dc.l $20202020			; SRAM start
000001B8 2020 2020                  				dc.l $20202020			; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:			dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:			dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            EntryPoint:
00000200 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
00000206 6600                       		bne.s	PortA_Ok
00000208 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
0000020E                            
0000020E                            PortA_Ok:
0000020E 6600                       		bne.s	PortC_Ok
00000210 4BFA 0000                  		lea	SetupValues(pc),a5
00000214 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000218 4CDD 1F00                  		movem.l	(a5)+,a0-a4
0000021C 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000220 0200 000F                  		andi.b	#$F,d0
00000224 6700                       		beq.s	SkipSecurity
00000226 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
0000022E                            
0000022E                            SkipSecurity:
0000022E 3014                       		move.w	(a4),d0		; check	if VDP works
00000230 7000                       		moveq	#0,d0
00000232 2C40                       		movea.l	d0,a6
00000234 4E66                       		move.l	a6,usp		; set usp to $0
00000236 7217                       		moveq	#$17,d1
00000238                            
00000238                            VDPInitLoop:
00000238 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000023A 3885                       		move.w	d5,(a4)		; move value to	VDP register
0000023C DA47                       		add.w	d7,d5		; next register
0000023E 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000242 289D                       		move.l	(a5)+,(a4)
00000244 3680                       		move.w	d0,(a3)		; clear	the screen
00000246 3287                       		move.w	d7,(a1)		; stop the Z80
00000248 3487                       		move.w	d7,(a2)		; reset	the Z80
0000024A                            
0000024A                            WaitForZ80:
0000024A 0111                       		btst	d0,(a1)		; has the Z80 stopped?
0000024C 66FC                       		bne.s	WaitForZ80	; if not, branch
0000024E 7425                       		moveq	#$25,d2
00000250                            
00000250                            Z80InitLoop:
00000250 10DD                       		move.b	(a5)+,(a0)+
00000252 51CA FFFC                  		dbf	d2,Z80InitLoop
00000256 3480                       		move.w	d0,(a2)
00000258 3280                       		move.w	d0,(a1)		; start	the Z80
0000025A 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025C                            
0000025C                            ClrRAMLoop:
0000025C 2D00                       		move.l	d0,-(a6)
0000025E 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000262 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000264 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
00000266 761F                       		moveq	#$1F,d3
00000268                            
00000268                            ClrCRAMLoop:
00000268 2680                       		move.l	d0,(a3)
0000026A 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
0000026E 289D                       		move.l	(a5)+,(a4)
00000270 7813                       		moveq	#$13,d4
00000272                            
00000272                            ClrVDPStuff:
00000272 2680                       		move.l	d0,(a3)
00000274 51CC FFFC                  		dbf	d4,ClrVDPStuff
00000278 7A03                       		moveq	#3,d5
0000027A                            
0000027A                            PSGInitLoop:
0000027A 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
0000027E 51CD FFFA                  		dbf	d5,PSGInitLoop
00000282 3480                       		move.w	d0,(a2)
00000284 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
00000288 46FC 2700                  		move	#$2700,sr	; set the sr
0000028C                            
0000028C                            PortC_Ok:
0000028C 6000                       		bra.s	GameProgram
0000028E                            ; ===========================================================================
0000028E 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000290 3FFF                       		dc.w $3FFF
00000292 0100                       		dc.w $100
00000294                            
00000294 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
00000298 00A1 1100                  		dc.l $A11100		; Z80 bus request
0000029C 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A0 00C0 0000                  		dc.l $C00000
000002A4 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002A8                            
000002A8 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002AC 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B0 0000 FF00                  		dc.b 0,	0, $FF,	0
000002B4 8137 0001                  		dc.b $81, $37, 0, 1
000002B8 0100 00FF                  		dc.b 1,	0, 0, $FF
000002BC FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C0                            
000002C0 4000 0080                  		dc.l $40000080
000002C4                            
000002C4 AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D0 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002DA D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002E5 ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002EA                            
000002EA 8104                       		dc.w $8104		; value	for VDP	display	mode
000002EC 8F02                       		dc.w $8F02		; value	for VDP	increment
000002EE C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F2 4000 0010                  		dc.l $40000010
000002F6                            
000002F6 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000002FA                            ; ===========================================================================
000002FA                            
000002FA                            GameProgram:
000002FA 4A79 00C0 0004             		tst.w	($C00004).l
00000300 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000306 7E00                       		moveq	#0,d7
00000308 3C3C 3FFF                  		move.w	#$3FFF,d6
0000030C                            
0000030C                            GameClrRAM:
0000030C 2CC7                       		move.l	d7,(a6)+
0000030E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000312                            
00000312 1039 00A1 0001             		move.b	($A10001).l,d0
00000318 0200 00C0                  		andi.b	#$C0,d0
0000031C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000320                            
00000320 41F8 FFC4 43F8 00F4 20D9+  		loadJumps IntMain
0000032E                            		
0000032E 6100 0000                  		bsr.w	VDPSetupGame
00000332 6100 0000                  		bsr.w	InitMegaPCM
00000336 6100 0000                  		bsr.w	JoypadInit
0000033A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Notice Screen
00000340                            
00000340                            MainGameLoop:
00000340 1038 F600                  		move.b	($FFFFF600).w,d0
00000344 0240 007C                  		andi.w	#$7C,d0
00000348 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
0000034C 4E90                       		jsr	(a0)
0000034E 60F0                       		bra.s	MainGameLoop
00000350                            ; ===========================================================================
00000350                            ; ---------------------------------------------------------------------------
00000350                            ; Main game mode array
00000350                            ; ---------------------------------------------------------------------------
00000350                            
00000350                            GameModeArray:
00000350 0000 0000                  		dc.l	NoticeScreen	; Notice Screen ($00)
00000354 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
00000358 0000 0000                  		dc.l	Level		; Demo Mode ($08)
0000035C 0000 0000                  		dc.l	Level		; Normal Level ($0C)
00000360 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
00000364 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
00000368 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
0000036C 0000 0000                  		dc.l	Credits		; Credits ($1C)
00000370 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($20)
00000374                            ; ===========================================================================
00000374                            
00000374                            BusError:
00000374 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000037A 6000                       		bra.s	loc_43A
0000037C                            ; ===========================================================================
0000037C                            
0000037C                            AddressError:
0000037C 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000382 6000                       		bra.s	loc_43A
00000384                            ; ===========================================================================
00000384                            
00000384                            IllegalInstr:
00000384 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000038A 54AF 0002                  		addq.l	#2,2(sp)
0000038E 6000                       		bra.s	loc_462
00000390                            ; ===========================================================================
00000390                            
00000390                            ZeroDivide:
00000390 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000396 6000                       		bra.s	loc_462
00000398                            ; ===========================================================================
00000398                            
00000398                            ChkInstr:
00000398 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000039E 6000                       		bra.s	loc_462
000003A0                            ; ===========================================================================
000003A0                            
000003A0                            TrapvInstr:
000003A0 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003A6 6000                       		bra.s	loc_462
000003A8                            ; ===========================================================================
000003A8                            
000003A8                            PrivilegeViol:
000003A8 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003AE 6000                       		bra.s	loc_462
000003B0                            ; ===========================================================================
000003B0                            
000003B0                            Trace:
000003B0 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003B6 6000                       		bra.s	loc_462
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            Line1010Emu:
000003B8 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003BE 54AF 0002                  		addq.l	#2,2(sp)
000003C2 6000                       		bra.s	loc_462
000003C4                            ; ===========================================================================
000003C4                            
000003C4                            Line1111Emu:
000003C4 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
000003CA 54AF 0002                  		addq.l	#2,2(sp)
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ErrorExcept:
000003D0 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            loc_43A:
000003D8 46FC 2700                  		move	#$2700,sr
000003DC 544F                       		addq.w	#2,sp
000003DE 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E2 544F                       		addq.w	#2,sp
000003E4 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EA 6100 0000                  		bsr.w	ShowErrorMsg
000003EE 202F 0002                  		move.l	2(sp),d0
000003F2 6100 0000                  		bsr.w	sub_5BA
000003F6 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FA 6100 0000                  		bsr.w	sub_5BA
000003FE 6000                       		bra.s	loc_478
00000400                            ; ===========================================================================
00000400                            
00000400                            loc_462:
00000400 46FC 2700                  		move	#$2700,sr
00000404 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040A 6100 0000                  		bsr.w	ShowErrorMsg
0000040E 202F 0002                  		move.l	2(sp),d0
00000412 6100 0000                  		bsr.w	sub_5BA
00000416                            
00000416                            loc_478:
00000416 6100 0000                  		bsr.w	ErrorWaitForC
0000041A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000420 46FC 2300                  		move	#$2300,sr
00000424 4E73                       		rte	
00000426                            
00000426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000426                            
00000426                            
00000426                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000426 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042C 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000436 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043C 323C 027F                  		move.w	#$27F,d1
00000440                            
00000440                            Error_LoadGfx:
00000440 3C98                       		move.w	(a0)+,(a6)
00000442 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000446 7000                       		moveq	#0,d0		; clear	d0
00000448 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000450 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000454 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045E 7212                       		moveq	#$12,d1		; number of characters
00000460                            
00000460                            Error_LoopChars:
00000460 7000                       		moveq	#0,d0
00000462 1018                       		move.b	(a0)+,d0
00000464 0640 0790                  		addi.w	#$790,d0
00000468 3C80                       		move.w	d0,(a6)
0000046A 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046E 4E75                       		rts	
00000470                            ; End of function ShowErrorMsg
00000470                            
00000470                            ; ===========================================================================
00000470 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000474 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000478 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047C 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000480 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000484 0000                       		dc.w asc_5A6-ErrorText
00000486 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000499 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AC 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BF 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D2 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E5 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F8 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000531 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000544 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000558 00                         		even
00000558                            
00000558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000558                            
00000558                            
00000558                            sub_5BA:				; XREF: loc_43A; loc_462
00000558 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055C 7407                       		moveq	#7,d2
0000055E                            
0000055E                            loc_5C0:
0000055E E998                       		rol.l	#4,d0
00000560 6100                       		bsr.s	sub_5CA
00000562 51CA FFFA                  		dbf	d2,loc_5C0
00000566 4E75                       		rts	
00000568                            ; End of function sub_5BA
00000568                            
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            sub_5CA:				; XREF: sub_5BA
00000568 3200                       		move.w	d0,d1
0000056A 0241 000F                  		andi.w	#$F,d1
0000056E 0C41 000A                  		cmpi.w	#$A,d1
00000572 6500                       		bcs.s	loc_5D8
00000574 5E41                       		addq.w	#7,d1
00000576                            
00000576                            loc_5D8:
00000576 0641 07C0                  		addi.w	#$7C0,d1
0000057A 3C81                       		move.w	d1,(a6)
0000057C 4E75                       		rts	
0000057E                            ; End of function sub_5CA
0000057E                            
0000057E                            
0000057E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057E                            
0000057E                            
0000057E                            ErrorWaitForC:				; XREF: loc_478
0000057E 6100 0000                  		bsr.w	ReadJoypads
00000582 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000588 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058C 4E75                       		rts	
0000058E                            ; End of function ErrorWaitForC
0000058E                            
0000058E                            ; ===========================================================================
0000058E                            
0000058E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAE                            		even
00000AAE                            
00000AAE                            ; ===========================================================================
00000AAE                            
00000AAE                            V_Int:				; XREF: Vectors
00000AAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB2 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB6 6700                       		beq.s	loc_B88
00000AB8 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD6 6700                       		beq.s	loc_B42
00000AD8 303C 0700                  		move.w	#$700,d0
00000ADC                            
00000ADC                            loc_B3E:
00000ADC 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE0                            
00000AE0                            loc_B42:
00000AE0 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF0 0240 003E                  		andi.w	#$3E,d0
00000AF4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFC                            
00000AFC                            loc_B5E:				; XREF: loc_B88
00000AFC 4EB9 0000 0000             		jsr	sub_71B4C
00000B02                            
00000B02                            loc_B64:				; XREF: loc_D50
00000B02 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B06 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0A 4E73                       		rte	
00000B0C                            ; ===========================================================================
00000B0C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B10 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B14 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B18 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B20 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B24 0000                       		dc.w loc_E72-off_B6E
00000B26                            ; ===========================================================================
00000B26                            
00000B26                            loc_B88:				; XREF: V_Int; off_B6E
00000B26 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2C 6700                       		beq.s	loc_B9A
00000B2E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B34 6600 FFC6                  		bne.w	loc_B5E
00000B38                            
00000B38                            loc_B9A:
00000B38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3E 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B42 3039 00C0 0004             		move.w	($C00004).l,d0
00000B48 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4E 6700                       		beq.s	loc_BBA
00000B50 303C 0700                  		move.w	#$700,d0
00000B54                            
00000B54                            loc_BB6:
00000B54 51C8 FFFE                  		dbf	d0,loc_BB6
00000B58                            
00000B58                            loc_BBA:
00000B58 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B66                            
00000B66                            loc_BC8:
00000B66 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B6E 66F6                       		bne.s	loc_BC8
00000B70 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B74 6600                       		bne.s	loc_BFE
00000B76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B82 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B88 3ABC 977F                  		move.w	#$977F,(a5)
00000B8C 3ABC C000                  		move.w	#$C000,(a5)
00000B90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B9A 6000                       		bra.s	loc_C22
00000B9C                            ; ===========================================================================
00000B9C                            
00000B9C                            loc_BFE:				; XREF: loc_BC8
00000B9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BA2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BAE 3ABC 977F                  		move.w	#$977F,(a5)
00000BB2 3ABC C000                  		move.w	#$C000,(a5)
00000BB6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BC0                            
00000BC0                            loc_C22:				; XREF: loc_BC8
00000BC0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000BCC 6000 FF2E                  		bra.w	loc_B5E
00000BD0                            ; ===========================================================================
00000BD0                            
00000BD0                            loc_C32:				; XREF: off_B6E
00000BD0 6100 0000                  		bsr.w	sub_106E
00000BD4                            
00000BD4                            loc_C36:				; XREF: off_B6E
00000BD4 4A78 F614                  		tst.w	($FFFFF614).w
00000BD8 6700 0000                  		beq.w	locret_C42
00000BDC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BE0                            
00000BE0                            locret_C42:
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C44:				; XREF: off_B6E
00000BE2 6100 0000                  		bsr.w	sub_106E
00000BE6 6100 0000                  		bsr.w	sub_6886
00000BEA 6100 0000                  		bsr.w	sub_1642
00000BEE 4A78 F614                  		tst.w	($FFFFF614).w
00000BF2 6700 0000                  		beq.w	locret_C5C
00000BF6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BFA                            
00000BFA                            locret_C5C:
00000BFA 4E75                       		rts	
00000BFC                            ; ===========================================================================
00000BFC                            
00000BFC                            loc_C5E:				; XREF: off_B6E
00000BFC 6100 0000                  		bsr.w	sub_106E
00000C00 4E75                       		rts	
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            loc_C64:				; XREF: off_B6E
00000C02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C08 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C0C                            
00000C0C                            loc_C6E:				; XREF: off_B6E
00000C0C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C14                            
00000C14                            loc_C76:
00000C14 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C1C 66F6                       		bne.s	loc_C76		; if not, branch
00000C1E 6100 0000                  		bsr.w	ReadJoypads
00000C22 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C26 6600                       		bne.s	loc_CB0
00000C28 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C2E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C34 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C3A 3ABC 977F                  		move.w	#$977F,(a5)
00000C3E 3ABC C000                  		move.w	#$C000,(a5)
00000C42 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C48 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C4C 6000                       		bra.s	loc_CD4
00000C4E                            ; ===========================================================================
00000C4E                            
00000C4E                            loc_CB0:				; XREF: loc_C76
00000C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C5A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C60 3ABC 977F                  		move.w	#$977F,(a5)
00000C64 3ABC C000                  		move.w	#$C000,(a5)
00000C68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C72                            
00000C72                            loc_CD4:				; XREF: loc_C76
00000C72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C7C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C82 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C88 3ABC 977F                  		move.w	#$977F,(a5)
00000C8C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C90 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CAC 3ABC 977F                  		move.w	#$977F,(a5)
00000CB0 3ABC 7800                  		move.w	#$7800,(a5)
00000CB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC4                            
00000CC4                            loc_D50:
00000CC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000CCC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CD2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CD8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CDE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CE4 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CEA 6400                       		bcc.s	Demo_Time
00000CEC 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF2 588F                       		addq.l	#4,sp
00000CF4 6000 FE0C                  		bra.w	loc_B64
00000CF8                            
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            ; Subroutine to	run a demo for an amount of time
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            
00000CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CF8                            
00000CF8                            
00000CF8                            Demo_Time:				; XREF: loc_D50; H_Int
00000CF8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CFC 4EB9 0000 0000             		jsr	AniArt_Load
00000D02 4EB9 0000 0000             		jsr	HudUpdate
00000D08 6100 0000                  		bsr.w	sub_165E
00000D0C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D10 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D14 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D18                            
00000D18                            Demo_TimeEnd:
00000D18 4E75                       		rts	
00000D1A                            ; End of function Demo_Time
00000D1A                            
00000D1A                            ; ===========================================================================
00000D1A                            
00000D1A                            loc_DA6:				; XREF: off_B6E
00000D1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D22                            
00000D22                            loc_DAE:
00000D22 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D2A 66F6                       		bne.s	loc_DAE		; if not, branch
00000D2C 6100 0000                  		bsr.w	ReadJoypads
00000D30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D36 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D3C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D42 3ABC 977F                  		move.w	#$977F,(a5)
00000D46 3ABC C000                  		move.w	#$C000,(a5)
00000D4A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D60 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D66 3ABC 977F                  		move.w	#$977F,(a5)
00000D6A 3ABC 7800                  		move.w	#$7800,(a5)
00000D6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D7E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D84 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8A 3ABC 977F                  		move.w	#$977F,(a5)
00000D8E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DA4 6100 0000                  		bsr.w	PalCycle_SS
00000DA8 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DAE                            
00000DAE                            loc_E64:
00000DAE 4A78 F614                  		tst.w	($FFFFF614).w
00000DB2 6700 0000                  		beq.w	locret_E70
00000DB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DBA                            
00000DBA                            locret_E70:
00000DBA 4E75                       		rts	
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_E72:				; XREF: off_B6E
00000DBC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DC4                            
00000DC4                            loc_E7A:
00000DC4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DCC 66F6                       		bne.s	loc_E7A		; if not, branch
00000DCE 6100 0000                  		bsr.w	ReadJoypads
00000DD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DD6 6600                       		bne.s	loc_EB4
00000DD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DEA 3ABC 977F                  		move.w	#$977F,(a5)
00000DEE 3ABC C000                  		move.w	#$C000,(a5)
00000DF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFC 6000                       		bra.s	loc_ED8
00000DFE                            ; ===========================================================================
00000DFE                            
00000DFE                            loc_EB4:				; XREF: loc_E7A
00000DFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E10 3ABC 977F                  		move.w	#$977F,(a5)
00000E14 3ABC C000                  		move.w	#$C000,(a5)
00000E18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E22                            
00000E22                            loc_ED8:				; XREF: loc_E7A
00000E22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E2C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E32 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E38                            
00000E38                            loc_EEE:
00000E38 3ABC 977F                  		move.w	#$977F,(a5)
00000E3C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E50 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E56 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E5C 3ABC 977F                  		move.w	#$977F,(a5)
00000E60 3ABC 7800                  		move.w	#$7800,(a5)
00000E64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6E 4A38 F767                  		tst.b	($FFFFF767).w
00000E72 6700                       		beq.s	loc_F54
00000E74 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E7A                            
00000E7A                            loc_F54:
00000E7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E9A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9E 4EB9 0000 0000             		jsr	AniArt_Load
00000EA4 4EB9 0000 0000             		jsr	HudUpdate
00000EAA 6100 0000                  		bsr.w	sub_1642
00000EAE 4E75                       		rts	
00000EB0                            ; ===========================================================================
00000EB0                            
00000EB0                            loc_F8A:				; XREF: off_B6E
00000EB0 6100 0000                  		bsr.w	sub_106E
00000EB4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            loc_F9A:				; XREF: off_B6E
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EC8 6000 0000                  		bra.w	sub_1642
00000ECC                            ; ===========================================================================
00000ECC                            
00000ECC                            loc_FA6:				; XREF: off_B6E
00000ECC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000ED4                            
00000ED4                            loc_FAE:
00000ED4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EDC 66F6                       		bne.s	loc_FAE		; if not, branch
00000EDE 6100 0000                  		bsr.w	ReadJoypads
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F18 3ABC 977F                  		move.w	#$977F,(a5)
00000F1C 3ABC 7800                  		move.w	#$7800,(a5)
00000F20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F36 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F56 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F5C                            
00000F5C                            loc_1060:
00000F5C 4A78 F614                  		tst.w	($FFFFF614).w
00000F60 6700 0000                  		beq.w	locret_106C
00000F64 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F68                            
00000F68                            locret_106C:
00000F68 4E75                       		rts	
00000F6A                            
00000F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F6A                            
00000F6A                            
00000F6A                            sub_106E:				; XREF: loc_C32; et al
00000F6A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F72                            
00000F72                            loc_1076:
00000F72 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F7A 66F6                       		bne.s	loc_1076	; if not, branch
00000F7C 6100 0000                  		bsr.w	ReadJoypads
00000F80 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F84 6600                       		bne.s	loc_10B0
00000F86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F98 3ABC 977F                  		move.w	#$977F,(a5)
00000F9C 3ABC C000                  		move.w	#$C000,(a5)
00000FA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FAA 6000                       		bra.s	loc_10D4
00000FAC                            ; ===========================================================================
00000FAC                            
00000FAC                            loc_10B0:				; XREF: sub_106E
00000FAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FB8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FBE 3ABC 977F                  		move.w	#$977F,(a5)
00000FC2 3ABC C000                  		move.w	#$C000,(a5)
00000FC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD0                            
00000FD0                            loc_10D4:				; XREF: sub_106E
00000FD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE2 3ABC 977F                  		move.w	#$977F,(a5)
00000FE6 3ABC 7800                  		move.w	#$7800,(a5)
00000FEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001000 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001006 3ABC 977F                  		move.w	#$977F,(a5)
0000100A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000100E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001014 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001018 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001020 4E75                       		rts	
00001022                            ; End of function sub_106E
00001022                            
00001022                            ; ---------------------------------------------------------------------------
00001022                            ; Subroutine to	move Palettes from the RAM to CRAM
00001022                            ; ---------------------------------------------------------------------------
00001022                            
00001022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001022                            
00001022                            
00001022                            H_Int:
00001022 46FC 2700                  		move	#$2700,sr
00001026 4A78 F644                  		tst.w	($FFFFF644).w
0000102A 6700                       		beq.s	locret_119C
0000102C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001032 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001036 43F9 00C0 0000             		lea	($C00000).l,a1
0000103C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
00001040 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001048 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 2298                       		move.l	(a0)+,(a1)
00001054 2298                       		move.l	(a0)+,(a1)
00001056 2298                       		move.l	(a0)+,(a1)
00001058 2298                       		move.l	(a0)+,(a1)
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000108E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001092 4A38 F64F                  		tst.b	($FFFFF64F).w
00001096 6600                       		bne.s	loc_119E
00001098                            
00001098                            locret_119C:
00001098 4E73                       		rte	
0000109A                            ; ===========================================================================
0000109A                            
0000109A                            loc_119E:				; XREF: H_Int
0000109A 4238 F64F                  		clr.b	($FFFFF64F).w
0000109E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010A2 6100 FC54                  		bsr.w	Demo_Time
000010A6 4EB9 0000 0000             		jsr	sub_71B4C
000010AC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010B0 4E73                       		rte	
000010B2                            ; End of function H_Int
000010B2                            
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            ; Subroutine to	initialise joypads
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            
000010B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B2                            
000010B2                            
000010B2                            JoypadInit:				; XREF: GameClrRAM
000010B2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010BA                            
000010BA                            Joypad_WaitZ80:
000010BA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010C2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010C4 7040                       		moveq	#$40,d0
000010C6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010CC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010D2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010D8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010E0 4E75                       		rts	
000010E2                            ; End of function JoypadInit
000010E2                            
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            ; Subroutine to	read joypad input, and send it to the RAM
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            ReadJoypads:
000010E2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010E6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010EC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010EE 5449                       		addq.w	#2,a1		; do the second	joypad
000010F0                            
000010F0                            Joypad_Read:
000010F0 12BC 0000                  		move.b	#0,(a1)
000010F4 4E71                       		nop	
000010F6 4E71                       		nop	
000010F8 1011                       		move.b	(a1),d0
000010FA E508                       		lsl.b	#2,d0
000010FC 0200 00C0                  		andi.b	#$C0,d0
00001100 12BC 0040                  		move.b	#$40,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1211                       		move.b	(a1),d1
0000110A 0201 003F                  		andi.b	#$3F,d1
0000110E 8001                       		or.b	d1,d0
00001110 4600                       		not.b	d0
00001112 1210                       		move.b	(a0),d1
00001114 B101                       		eor.b	d0,d1
00001116 10C0                       		move.b	d0,(a0)+
00001118 C200                       		and.b	d0,d1
0000111A 10C1                       		move.b	d1,(a0)+
0000111C 4E75                       		rts	
0000111E                            ; End of function ReadJoypads
0000111E                            
0000111E                            
0000111E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111E                            
0000111E                            
0000111E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000111E 41F9 00C0 0004             		lea	($C00004).l,a0
00001124 43F9 00C0 0000             		lea	($C00000).l,a1
0000112A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001130 7E12                       		moveq	#$12,d7
00001132                            
00001132                            VDP_Loop:
00001132 309A                       		move.w	(a2)+,(a0)
00001134 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001138                            
00001138 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000113E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001142 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001148 7000                       		moveq	#0,d0
0000114A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001154 3E3C 003F                  		move.w	#$3F,d7
00001158                            
00001158                            VDP_ClrCRAM:
00001158 3280                       		move.w	d0,(a1)
0000115A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000115E                            
0000115E 42B8 F616                  		clr.l	($FFFFF616).w
00001162 42B8 F61A                  		clr.l	($FFFFF61A).w
00001166 2F01                       		move.l	d1,-(sp)
00001168 4BF9 00C0 0004             		lea	($C00004).l,a5
0000116E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001172 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001178 3ABC 9780                  		move.w	#$9780,(a5)
0000117C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001182 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000118A                            
0000118A                            loc_128E:
0000118A 3215                       		move.w	(a5),d1
0000118C 0801 0001                  		btst	#1,d1
00001190 66F8                       		bne.s	loc_128E
00001192                            
00001192 3ABC 8F02                  		move.w	#$8F02,(a5)
00001196 221F                       		move.l	(sp)+,d1
00001198 4E75                       		rts	
0000119A                            ; End of function VDPSetupGame
0000119A                            
0000119A                            ; ===========================================================================
0000119A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011A2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011AA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011B2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011BA 9001 9100 9200             		dc.w $9001, $9100, $9200
000011C0                            
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            ; Subroutine to	clear the screen
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            
000011C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C0                            
000011C0                            
000011C0                            ClearScreen:
000011C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011C6 3ABC 8F01                  		move.w	#$8F01,(a5)
000011CA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011D0 3ABC 9780                  		move.w	#$9780,(a5)
000011D4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011DA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011E2                            
000011E2                            loc_12E6:
000011E2 3215                       		move.w	(a5),d1
000011E4 0801 0001                  		btst	#1,d1
000011E8 66F8                       		bne.s	loc_12E6
000011EA                            
000011EA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000011F8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011FE 3ABC 9780                  		move.w	#$9780,(a5)
00001202 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001208 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001210                            
00001210                            loc_1314:
00001210 3215                       		move.w	(a5),d1
00001212 0801 0001                  		btst	#1,d1
00001216 66F8                       		bne.s	loc_1314
00001218                            
00001218 3ABC 8F02                  		move.w	#$8F02,(a5)
0000121C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001224 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000122C 43F8 F800                  		lea	($FFFFF800).w,a1
00001230 7000                       		moveq	#0,d0
00001232 323C 00A0                  		move.w	#$A0,d1
00001236                            
00001236                            loc_133A:
00001236 22C0                       		move.l	d0,(a1)+
00001238 51C9 FFFC                  		dbf	d1,loc_133A
0000123C                            
0000123C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001240 7000                       		moveq	#0,d0
00001242 323C 0100                  		move.w	#$100,d1
00001246                            
00001246                            loc_134A:
00001246 22C0                       		move.l	d0,(a1)+
00001248 51C9 FFFC                  		dbf	d1,loc_134A
0000124C 4E75                       		rts	
0000124E                            ; End of function ClearScreen
0000124E                            
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	load the sound driver
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            InitMegaPCM:			; XREF: GameClrRAM; TitleScreen
0000124E 4E71                       		nop
00001250 303C 0100                  		move.w	#$100,d0
00001254 33C0 00A1 1100             		move.w	d0,($A11100).l
0000125A 33C0 00A1 1200             		move.w	d0,($A11200).l
00001260 41F9 0000 0000             		lea	(MegaPCM).l,a0
00001266 43F9 00A0 0000             		lea	($A00000).l,a1
0000126C 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
00001270                            
00001270 12D8                       	@Load:	move.b	(a0)+,(a1)+
00001272 51C9 FFFC                  		dbf	d1,@Load
00001276 7200                       		moveq	#0,d1
00001278 33C1 00A1 1200             		move.w	d1,($A11200).l
0000127E 4E71                       		nop
00001280 4E71                       		nop
00001282 4E71                       		nop
00001284 4E71                       		nop
00001286 33C0 00A1 1200             		move.w	d0,($A11200).l
0000128C 33C1 00A1 1100             		move.w	d1,($A11100).l
00001292 4E75                       		rts
00001294                            ; End of function InitMegaPCM
00001294                            
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; Subroutine to	play a DAC sample
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; To use this: 
00001294                            ;		moveq	#$FFFFFFXX,d0
00001294                            ;		jsr	PlaySample
00001294                            ; XX = Sample Number
00001294                            ; ---------------------------------------------------------------------------
00001294                            
00001294                            PlaySample:
00001294 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
0000129C 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000012A4 66F6                       	bne.s	@0
000012A6 13C0 00A0 1FFF             	move.b	d0,$A01FFF
000012AC 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000012B4 4E75                       	rts
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            PlayMusic:
000012B6 0C00 0088                  		cmpi.b	#$88,d0
000012BA 6700                       		beq.s	PlaySound
000012BC 0C00 00A0                  		cmpi.b	#$A0,d0
000012C0 6C00                       		bge.s	PlaySound
000012C2 11C0 FFFC                  		move.b	d0,($FFFFFFFC).w
000012C6                            ; ===========================================================================
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	play a sound or	music track
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            
000012C6                            PlaySound:
000012C6 6100                       		bsr.s	Snd_ChkStop
000012C8 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CC 4E75                       		rts	
000012CE                            ; End of function PlaySound
000012CE                            
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            ; Subroutine to	play a special sound/music (E0-E4)
000012CE                            ;
000012CE                            ; E0 - Fade out
000012CE                            ; E1 - Sega
000012CE                            ; E2 - Speed up
000012CE                            ; E3 - Normal speed
000012CE                            ; E4 - Stop
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            
000012CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CE                            
000012CE                            
000012CE                            PlaySound_Special:
000012CE 6100                       		bsr.s	Snd_ChkStop
000012D0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D4 4E75                       		rts	
000012D6                            ; End of function PlaySound_Special
000012D6                            ; ===========================================================================
000012D6                            
000012D6                            Snd_ChkStop:
000012D6 0C00 00E0                  		cmpi.b	#$E0,d0
000012DA 6700                       		beq.s	@clr
000012DC 0C00 00E4                  		cmpi.b	#$E4,d0
000012E0 6700                       		beq.s	@clr
000012E2 4E75                       		rts
000012E4                            		
000012E4                            @clr:
000012E4 11FC 0000 FFFC             		move.b	#0,($FFFFFFFC).w
000012EA 4E75                       		rts
000012EC                            ; ===========================================================================
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            ; Unused sound/music subroutine
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            
000012EC                            PlaySound_Unk:
000012EC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000012F0 4E75                       		rts	
000012F2                            
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            ; Subroutine to	pause the game
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            
000012F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F2                            
000012F2                            
000012F2                            PauseGame:				; XREF: Level_MainLoop; et al
000012F2 4E71                       		nop	
000012F4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012F8 6700                       		beq.s	Unpause		; if not, branch
000012FA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012FE 6600                       		bne.s	loc_13BE	; if yes, branch
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001308                            
00001308                            loc_13BE:
00001308 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000130E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001314                            
00001314                            loc_13CA:
00001314 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000131A 6100 0000                  		bsr.w	DelayProgram
0000131E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001322 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001324 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000132A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000132C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001332 4E71                       		nop	
00001334 6000                       		bra.s	loc_1404
00001336                            ; ===========================================================================
00001336                            
00001336                            Pause_ChkBC:				; XREF: PauseGame
00001336 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000133C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000133E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001344 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001346                            
00001346                            Pause_ChkStart:				; XREF: PauseGame
00001346 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000134C 67C6                       		beq.s	loc_13CA	; if not, branch
0000134E                            
0000134E                            loc_1404:				; XREF: PauseGame
0000134E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001354                            
00001354                            Unpause:				; XREF: PauseGame
00001354 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000135A                            
0000135A                            Pause_DoNothing:			; XREF: PauseGame
0000135A 4E75                       		rts	
0000135C                            ; ===========================================================================
0000135C                            
0000135C                            Pause_SlowMo:				; XREF: PauseGame
0000135C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001362 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001368 4E75                       		rts	
0000136A                            ; End of function PauseGame
0000136A                            
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            ; Subroutine to	display	patterns via the VDP
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            
0000136A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136A                            
0000136A                            
0000136A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000136A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001370 283C 0080 0000             		move.l	#$800000,d4
00001376                            
00001376                            loc_142C:
00001376 2D40 0004                  		move.l	d0,4(a6)
0000137A 3601                       		move.w	d1,d3
0000137C                            
0000137C                            loc_1432:
0000137C 3C99                       		move.w	(a1)+,(a6)
0000137E 51CB FFFC                  		dbf	d3,loc_1432
00001382 D084                       		add.l	d4,d0
00001384 51CA FFF0                  		dbf	d2,loc_142C
00001388 4E75                       		rts	
0000138A                            ; End of function ShowVDPGraphics
0000138A                            
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000138A                            ; to be issued the next time ProcessDMAQueue is called.
0000138A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000138A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000138A                            ; registers in which it expects data in:
0000138A                            ; d1.l: Address to data (In 68k address space)
0000138A                            ; d2.w: Destination in VRAM
0000138A                            ; d3.w: Length of data
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000138A                             
0000138A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000138A                            
0000138A                            ; VDP addressses
0000138A =00C00000                  vdp_data_port:		equ $C00000
0000138A =00C00004                  vdp_control_port:	equ $C00004
0000138A =00C00008                  vdp_counter:		equ $C00008
0000138A                            ; Buffer Size Natsumi Credits
0000138A                            ;DMA_Buffer_Start	equ $FFFFA512-2	; the start address of DMA buffer for uncompressed art
0000138A                            ;DMA_Buffer_End		equ $FFFFA912-4	; the end address of DMA buffer for uncompressed art
0000138A                            ; Buffer Size S1 Default
0000138A =FFFFC800                  DMA_Buffer_Start	equ $FFFFC800	; the start address of DMA buffer for uncompressed art
0000138A =FFFFC8FC                  DMA_Buffer_End		equ $FFFFC8FC	; the end address of DMA buffer for uncompressed art
0000138A                            
0000138A                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000138A                            ProcessDMAQueue:
0000138A 4BF9 00C0 0004             		lea	VDP_Control_Port,a5
00001390 43F8 C800                  		lea	DMA_Buffer_Start.w,a1
00001394                            ; loc_14B6:
00001394                            ProcessDMAQueue_Loop:
00001394 3019                       		move.w	(a1)+,d0
00001396 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001398                            		; issue a set of VDP commands...
00001398 3A80                       		move.w	d0,(a5)		; transfer length
0000139A 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000139C 3A99                       		move.w	(a1)+,(a5)	; source address
0000139E 3A99                       		move.w	(a1)+,(a5)	; source address
000013A0 3A99                       		move.w	(a1)+,(a5)	; source address
000013A2 3A99                       		move.w	(a1)+,(a5)	; destination
000013A4 3A99                       		move.w	(a1)+,(a5)	; destination
000013A6 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013AA 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013AC                            ; loc_14CE:
000013AC                            ProcessDMAQueue_Done:
000013AC 31FC 0000 C800             		move.w	#0,DMA_Buffer_Start.w
000013B2 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End.w
000013BA 4E75                       		rts
000013BC                            		
000013BC                            QueueDMATransfer:
000013BC 2278 C8FC                  		movea.l	DMA_Buffer_End.w,a1
000013C0 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013C4 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C6                             
000013C6                            		; piece together some VDP commands and store them for later...
000013C6 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000013CA 1003                       		move.b	d3,d0
000013CC 32C0                       		move.w	d0,(a1)+ ; store command
000013CE                             
000013CE 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000013D2 E04B                       		lsr.w	#8,d3
000013D4 1003                       		move.b	d3,d0
000013D6 32C0                       		move.w	d0,(a1)+ ; store command
000013D8                             
000013D8 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000013DC E289                       		lsr.l	#1,d1
000013DE 1001                       		move.b	d1,d0
000013E0 32C0                       		move.w	d0,(a1)+ ; store command
000013E2                             
000013E2 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000013E6 E089                       		lsr.l	#8,d1
000013E8 1001                       		move.b	d1,d0
000013EA 32C0                       		move.w	d0,(a1)+ ; store command
000013EC                             
000013EC 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $01FE0000
000013F0 E089                       		lsr.l	#8,d1
000013F2 1001                       		move.b	d1,d0
000013F4 32C0                       		move.w	d0,(a1)+ ; store command
000013F6                             
000013F6 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013FC E58A                       		lsl.l	#2,d2
000013FE E44A                       		lsr.w	#2,d2
00001400 4842                       		swap	d2
00001402 0082 4000 0080             		or.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001408 22C2                       		move.l	d2,(a1)+ ; store command
0000140A                             
0000140A 21C9 C8FC                  		move.l	a1,DMA_Buffer_End.w ; set the next free slot address
0000140E B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
00001412 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001414 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001418                            ; return_14AA:
00001418                            QueueDMATransfer_Done:
00001418 4E75                       		rts
0000141A                            		
0000141A                            
0000141A 4278 C800                  		clr.w	DMA_Buffer_Start			; clear start of the DMA queue
0000141E 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End	; reset address pointer of DMA queue
00001426                            ; End of function ProcessDMAQueue
00001426                            
00001426                            ; ===============================================================
00001426                            ; ---------------------------------------------------------------
00001426                            ; COMPER Decompressor
00001426                            ; ---------------------------------------------------------------
00001426                            ; INPUT:
00001426                            ;       a0      - Source Offset
00001426                            ;       a1      - Destination Offset
00001426                            ; ---------------------------------------------------------------
00001426                             
00001426                            CompDec
00001426                             
00001426                            @newblock
00001426 3018                               move.w  (a0)+,d0                ; fetch description field
00001428 760F                               moveq   #15,d3                  ; set bits counter to 16
0000142A                             
0000142A                            @mainloop
0000142A D040                               add.w   d0,d0                   ; roll description field
0000142C 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000142E 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
00001430 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001434 60F0                               bra.s   @newblock               ; start a new block
00001436                             
00001436                            ; ---------------------------------------------------------------
00001436 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001438 1218                               move.b  (a0)+,d1                ; load displacement
0000143A D241                               add.w   d1,d1
0000143C 7400                               moveq   #0,d2                   ; init copy count
0000143E 1418                               move.b  (a0)+,d2                ; load copy length
00001440 6700                               beq.s   @end                    ; if zero, branch
00001442 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001446                             
00001446 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001448 51CA FFFC                          dbf     d2,@loop                ; repeat
0000144C 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001450 60D4                               bra.s   @newblock               ; start a new block
00001452                             
00001452 4E75                       @end    rts
00001454                            
00001454                            ; ==============================================================================
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Nemesis decompression routine
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Optimized by vladikcomper
00001454                            ; ------------------------------------------------------------------------------
00001454                             
00001454                            NemDec_RAM:
00001454 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001458 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
0000145C 6000                               bra.s   NemDec_Main
0000145E                             
0000145E                            ; ------------------------------------------------------------------------------
0000145E                            NemDec:
0000145E 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001462 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
00001468 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
0000146C                             
0000146C                            NemDec_Main:
0000146C 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
00001470 3418                               move.w  (a0)+,d2                ; get number of patterns
00001472 6A00                               bpl.s   @0                      ; are we in Mode 0?
00001474 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
00001478 E74A                       @0      lsl.w   #3,d2
0000147A 3A42                               movea.w d2,a5
0000147C 7607                               moveq   #7,d3
0000147E 7400                               moveq   #0,d2
00001480 7800                               moveq   #0,d4
00001482 6100 0000                          bsr.w   NemDec4
00001486 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001488 E145                               asl.w   #8,d5                   ; shift up by a byte
0000148A 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000148C 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
00001490 6100                               bsr.s   NemDec2
00001492 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001496 4E75                               rts
00001498                             
00001498                            ; ---------------------------------------------------------------------------
00001498                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001498                            ; ---------------------------------------------------------------------------
00001498                             
00001498                            NemDec2:
00001498 3E06                               move.w  d6,d7
0000149A 5147                               subq.w  #8,d7                   ; get shift value
0000149C 3205                               move.w  d5,d1
0000149E EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000014A0 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000014A4 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000014A6 0241 00FF                          andi.w  #$FF,d1
000014AA D241                               add.w   d1,d1
000014AC 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000014B0 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000014B4 6400                               bcc.s   @0                      ; if not, branch
000014B6 5046                               addq.w  #8,d6
000014B8 E145                               asl.w   #8,d5
000014BA 1A18                               move.b  (a0)+,d5                ; read next byte
000014BC 1231 1001                  @0      move.b  1(a1,d1.w),d1
000014C0 3001                               move.w  d1,d0
000014C2 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014C6 0240 00F0                          andi.w  #$F0,d0
000014CA                             
000014CA                            NemDec_GetRepeatCount:
000014CA E848                               lsr.w   #4,d0                   ; get repeat count
000014CC                             
000014CC                            NemDec_WritePixel:
000014CC E98C                               lsl.l   #4,d4                   ; shift up by a nybble
000014CE 8801                               or.b    d1,d4                   ; write pixel
000014D0 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
000014D4 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
000014D6                            ; ---------------------------------------------------------------------------
000014D6                             
000014D6                            NemDec3:
000014D6 7800                               moveq   #0,d4                   ; reset row
000014D8 7607                               moveq   #7,d3                   ; reset nybble counter
000014DA                             
000014DA                            NemDec_WritePixelLoop:
000014DA 51C8 FFF0                          dbf     d0,NemDec_WritePixel
000014DE 60B8                               bra.s   NemDec2
000014E0                            ; ---------------------------------------------------------------------------
000014E0                             
000014E0                            NemDec_InlineData:
000014E0 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
000014E2 0C46 0009                          cmpi.w  #9,d6
000014E6 6400                               bcc.s   @0
000014E8 5046                               addq.w  #8,d6
000014EA E145                               asl.w   #8,d5
000014EC 1A18                               move.b  (a0)+,d5
000014EE 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
000014F0 3205                               move.w  d5,d1
000014F2 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
000014F4 3001                               move.w  d1,d0
000014F6 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014FA 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
000014FE 0C46 0009                          cmpi.w  #9,d6
00001502 64C6                               bcc.s   NemDec_GetRepeatCount
00001504 5046                               addq.w  #8,d6
00001506 E145                               asl.w   #8,d5
00001508 1A18                               move.b  (a0)+,d5
0000150A 60BE                               bra.s   NemDec_GetRepeatCount
0000150C                             
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            ; Subroutines to output decompressed entry
0000150C                            ; Selected depending on current decompression mode
0000150C                            ; ---------------------------------------------------------------------------
0000150C                             
0000150C                            NemDec_WriteRowToVDP:
0000150C                            loc_1502:
0000150C 2884                               move.l  d4,(a4)                 ; write 8-pixel row
0000150E 534D                               subq.w  #1,a5
00001510 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001512 66C2                               bne.s   NemDec3                 ; if not, branch
00001514 4E75                               rts
00001516                            ; ---------------------------------------------------------------------------
00001516                             
00001516                            NemDec_WriteRowToVDP_XOR:
00001516 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001518 2882                               move.l  d2,(a4)                 ; and write the result
0000151A 534D                               subq.w  #1,a5
0000151C 380D                               move.w  a5,d4
0000151E 66B6                               bne.s   NemDec3
00001520 4E75                               rts
00001522                            ; ---------------------------------------------------------------------------
00001522                             
00001522                            NemDec_WriteRowToRAM:
00001522 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00001524 534D                               subq.w  #1,a5
00001526 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001528 66AC                               bne.s   NemDec3                 ; if not, branch
0000152A 4E75                               rts
0000152C                            ; ---------------------------------------------------------------------------
0000152C                             
0000152C                            NemDec_WriteRowToRAM_XOR:
0000152C B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000152E 28C2                               move.l  d2,(a4)+                ; and write the result
00001530 534D                               subq.w  #1,a5
00001532 380D                               move.w  a5,d4
00001534 66A0                               bne.s   NemDec3
00001536 4E75                               rts
00001538                             
00001538                            ; ---------------------------------------------------------------------------
00001538                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001538                            ; ---------------------------------------------------------------------------
00001538                             
00001538                            NemDec4:
00001538 1018                               move.b  (a0)+,d0                ; read first byte
0000153A                             
0000153A                            @ChkEnd:
0000153A 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
0000153E 6600                               bne.s   @NewPalIndex            ; if not, branch
00001540 4E75                               rts
00001542                            ; ---------------------------------------------------------------------------
00001542                             
00001542                            @NewPalIndex:
00001542 3E00                               move.w  d0,d7
00001544                             
00001544                            @ItemLoop:
00001544 1018                               move.b  (a0)+,d0                ; read next byte
00001546 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001548 1200                               move.b  d0,d1
0000154A 0247 000F                          andi.w  #$F,d7                  ; get palette index
0000154E 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
00001552 8E41                               or.w    d1,d7                   ; combine the two
00001554 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00001558 1200                               move.b  d0,d1
0000155A E149                               lsl.w   #8,d1
0000155C 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
0000155E 7208                               moveq   #8,d1
00001560 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
00001562 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
00001564 1018                               move.b  (a0)+,d0                ; get code
00001566 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
00001568 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
0000156C 60D6                               bra.s   @ItemLoop               ; repeat
0000156E                            ; ---------------------------------------------------------------------------
0000156E                             
0000156E                            @ItemShortCode:
0000156E 1018                               move.b  (a0)+,d0                ; get code
00001570 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
00001572 D040                               add.w   d0,d0                   ; get index into code table
00001574 7A01                               moveq   #1,d5
00001576 E36D                               lsl.w   d1,d5
00001578 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
0000157A 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
0000157E                             
0000157E                            @ItemShortCodeLoop:
0000157E 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
00001580 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001584 60BE                               bra.s   @ItemLoop
00001586                            
00001586                            ; ---------------------------------------------------------------------------
00001586                            ; Subroutine to	load pattern load cues
00001586                            ; ---------------------------------------------------------------------------
00001586                            
00001586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001586                            
00001586                            
00001586                            LoadPLC:
00001586 48E7 0060                  		movem.l	a1-a2,-(sp)
0000158A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001590 D040                       		add.w	d0,d0
00001592 3031 0000                  		move.w	(a1,d0.w),d0
00001596 43F1 0000                  		lea	(a1,d0.w),a1
0000159A 45F8 F680                  		lea	($FFFFF680).w,a2
0000159E                            
0000159E                            loc_1598:
0000159E 4A92                       		tst.l	(a2)
000015A0 6700                       		beq.s	loc_15A0
000015A2 5C4A                       		addq.w	#6,a2
000015A4 60F8                       		bra.s	loc_1598
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_15A0:				; XREF: LoadPLC
000015A6 3019                       		move.w	(a1)+,d0
000015A8 6B00                       		bmi.s	loc_15AC
000015AA                            
000015AA                            loc_15A4:
000015AA 24D9                       		move.l	(a1)+,(a2)+
000015AC 34D9                       		move.w	(a1)+,(a2)+
000015AE 51C8 FFFA                  		dbf	d0,loc_15A4
000015B2                            
000015B2                            loc_15AC:
000015B2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B6 4E75                       		rts	
000015B8                            ; End of function LoadPLC
000015B8                            
000015B8                            
000015B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B8                            
000015B8                            
000015B8                            LoadPLC2:
000015B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000015BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015C2 D040                       		add.w	d0,d0
000015C4 3031 0000                  		move.w	(a1,d0.w),d0
000015C8 43F1 0000                  		lea	(a1,d0.w),a1
000015CC 6100                       		bsr.s	ClearPLC
000015CE 45F8 F680                  		lea	($FFFFF680).w,a2
000015D2 3019                       		move.w	(a1)+,d0
000015D4 6B00                       		bmi.s	loc_15D8
000015D6                            
000015D6                            loc_15D0:
000015D6 24D9                       		move.l	(a1)+,(a2)+
000015D8 34D9                       		move.w	(a1)+,(a2)+
000015DA 51C8 FFFA                  		dbf	d0,loc_15D0
000015DE                            
000015DE                            loc_15D8:
000015DE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015E2 4E75                       		rts	
000015E4                            ; End of function LoadPLC2
000015E4                            
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            ; Subroutine to	clear the pattern load cues
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            
000015E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E4                            
000015E4                            
000015E4                            ClearPLC:				; XREF: LoadPLC2
000015E4 45F8 F680                  		lea	($FFFFF680).w,a2
000015E8 701F                       		moveq	#$1F,d0
000015EA                            
000015EA                            ClearPLC_Loop:
000015EA 429A                       		clr.l	(a2)+
000015EC 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015F0 4E75                       		rts	
000015F2                            ; End of function ClearPLC
000015F2                            
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	use graphics listed in a pattern load cue
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            
000015F2                            
000015F2                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015F2 4AB8 F680                  		tst.l	($FFFFF680).w
000015F6 6700                       		beq.s	locret_1640
000015F8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015FC 6600                       		bne.s	locret_1640
000015FE 2078 F680                  		movea.l	($FFFFF680).w,a0
00001602 47F9 0000 150C             		lea	(loc_1502).l,a3
00001608 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000160C 3418                       		move.w	(a0)+,d2
0000160E 6A00                       		bpl.s	loc_160E
00001610 D6FC 000A                  		adda.w	#$A,a3
00001614                            
00001614                            loc_160E:
00001614 0242 7FFF                  		andi.w	#$7FFF,d2
00001618 6100 FF1E                  		bsr.w	NemDec4
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622 7C10                       		moveq	#$10,d6
00001624 7000                       		moveq	#0,d0
00001626 21C8 F680                  		move.l	a0,($FFFFF680).w
0000162A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001632 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001636 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001642 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001646                            
00001646                            locret_1640:
00001646 4E75                       		rts	
00001648                            ; End of function RunPLC_RAM
00001648                            
00001648                            
00001648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            
00001648                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001648 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000164C 6700 0000                  		beq.w	locret_16DA
00001650 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001656 7000                       		moveq	#0,d0
00001658 3038 F684                  		move.w	($FFFFF684).w,d0
0000165C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001662 6000                       		bra.s	loc_1676
00001664                            ; End of function sub_1642
00001664                            
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            sub_165E:				; XREF: Demo_Time
00001664 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001668 6700                       		beq.s	locret_16DA
0000166A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001670 7000                       		moveq	#0,d0
00001672 3038 F684                  		move.w	($FFFFF684).w,d0
00001676 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000167C                            
0000167C                            loc_1676:				; XREF: sub_1642
0000167C 49F9 00C0 0004             		lea	($C00004).l,a4
00001682 E588                       		lsl.l	#2,d0
00001684 E448                       		lsr.w	#2,d0
00001686 0040 4000                  		ori.w	#$4000,d0
0000168A 4840                       		swap	d0
0000168C 2880                       		move.l	d0,(a4)
0000168E 594C                       		subq.w	#4,a4
00001690 2078 F680                  		movea.l	($FFFFF680).w,a0
00001694 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001698 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000169C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016A0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016AC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016B0                            
000016B0                            loc_16AA:				; XREF: sub_165E
000016B0 3A7C 0008                  		movea.w	#8,a5
000016B4 6100 FE20                  		bsr.w	NemDec3
000016B8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016BC 6700                       		beq.s	loc_16DC
000016BE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016C2 66EC                       		bne.s	loc_16AA
000016C4 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016CC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016D0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016DC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016E0                            
000016E0                            locret_16DA:				; XREF: sub_1642
000016E0 4E75                       		rts	
000016E2                            ; ===========================================================================
000016E2                            
000016E2                            loc_16DC:				; XREF: sub_165E
000016E2 41F8 F680                  		lea	($FFFFF680).w,a0
000016E6 7015                       		moveq	#$15,d0
000016E8                            
000016E8                            loc_16E2:				; XREF: sub_165E
000016E8 20E8 0006                  		move.l	6(a0),(a0)+
000016EC 51C8 FFFA                  		dbf	d0,loc_16E2
000016F0 4E75                       		rts	
000016F2                            ; End of function sub_165E
000016F2                            
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	execute	the pattern load cue
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            
000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            
000016F2                            
000016F2                            RunPLC_ROM:
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1
00001702 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001704                            
00001704                            RunPLC_Loop:
00001704 2059                       		movea.l	(a1)+,a0	; get art pointer
00001706 7000                       		moveq	#0,d0
00001708 3019                       		move.w	(a1)+,d0	; get VRAM address
0000170A E588                       		lsl.l	#2,d0		; divide address by $20
0000170C E448                       		lsr.w	#2,d0
0000170E 0040 4000                  		ori.w	#$4000,d0
00001712 4840                       		swap	d0
00001714 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000171A 6100 FD42                  		bsr.w	NemDec		; decompress
0000171E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001722 4E75                       		rts	
00001724                            ; End of function RunPLC_ROM
00001724                            
00001724                            ; ---------------------------------------------------------------------------
00001724                            ; Enigma decompression algorithm
00001724                            ; ---------------------------------------------------------------------------
00001724                            
00001724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001724                            
00001724                            
00001724                            EniDec:
00001724 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001728 3640                       		movea.w	d0,a3
0000172A 1018                       		move.b	(a0)+,d0
0000172C 4880                       		ext.w	d0
0000172E 3A40                       		movea.w	d0,a5
00001730 1818                       		move.b	(a0)+,d4
00001732 E70C                       		lsl.b	#3,d4
00001734 3458                       		movea.w	(a0)+,a2
00001736 D4CB                       		adda.w	a3,a2
00001738 3858                       		movea.w	(a0)+,a4
0000173A D8CB                       		adda.w	a3,a4
0000173C 1A18                       		move.b	(a0)+,d5
0000173E E145                       		asl.w	#8,d5
00001740 1A18                       		move.b	(a0)+,d5
00001742 7C10                       		moveq	#$10,d6
00001744                            
00001744                            loc_173E:				; XREF: loc_1768
00001744 7007                       		moveq	#7,d0
00001746 3E06                       		move.w	d6,d7
00001748 9E40                       		sub.w	d0,d7
0000174A 3205                       		move.w	d5,d1
0000174C EE69                       		lsr.w	d7,d1
0000174E 0241 007F                  		andi.w	#$7F,d1
00001752 3401                       		move.w	d1,d2
00001754 0C41 0040                  		cmpi.w	#$40,d1
00001758 6400                       		bcc.s	loc_1758
0000175A 7006                       		moveq	#6,d0
0000175C E24A                       		lsr.w	#1,d2
0000175E                            
0000175E                            loc_1758:
0000175E 6100 0000                  		bsr.w	sub_188C
00001762 0242 000F                  		andi.w	#$F,d2
00001766 E849                       		lsr.w	#4,d1
00001768 D241                       		add.w	d1,d1
0000176A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000176E                            ; End of function EniDec
0000176E                            
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1768:				; XREF: loc_17B4
0000176E 32CA                       		move.w	a2,(a1)+
00001770 524A                       		addq.w	#1,a2
00001772 51CA FFFA                  		dbf	d2,loc_1768
00001776 60CC                       		bra.s	loc_173E
00001778                            ; ===========================================================================
00001778                            
00001778                            loc_1772:				; XREF: loc_17B4
00001778 32CC                       		move.w	a4,(a1)+
0000177A 51CA FFFC                  		dbf	d2,loc_1772
0000177E 60C4                       		bra.s	loc_173E
00001780                            ; ===========================================================================
00001780                            
00001780                            loc_177A:				; XREF: loc_17B4
00001780 6100 0000                  		bsr.w	loc_17DC
00001784                            
00001784                            loc_177E:
00001784 32C1                       		move.w	d1,(a1)+
00001786 51CA FFFC                  		dbf	d2,loc_177E
0000178A 60B8                       		bra.s	loc_173E
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1786:				; XREF: loc_17B4
0000178C 6100 0000                  		bsr.w	loc_17DC
00001790                            
00001790                            loc_178A:
00001790 32C1                       		move.w	d1,(a1)+
00001792 5241                       		addq.w	#1,d1
00001794 51CA FFFA                  		dbf	d2,loc_178A
00001798 60AA                       		bra.s	loc_173E
0000179A                            ; ===========================================================================
0000179A                            
0000179A                            loc_1794:				; XREF: loc_17B4
0000179A 6100 0000                  		bsr.w	loc_17DC
0000179E                            
0000179E                            loc_1798:
0000179E 32C1                       		move.w	d1,(a1)+
000017A0 5341                       		subq.w	#1,d1
000017A2 51CA FFFA                  		dbf	d2,loc_1798
000017A6 609C                       		bra.s	loc_173E
000017A8                            ; ===========================================================================
000017A8                            
000017A8                            loc_17A2:				; XREF: loc_17B4
000017A8 0C42 000F                  		cmpi.w	#$F,d2
000017AC 6700                       		beq.s	loc_17C4
000017AE                            
000017AE                            loc_17A8:
000017AE 6100 0000                  		bsr.w	loc_17DC
000017B2 32C1                       		move.w	d1,(a1)+
000017B4 51CA FFF8                  		dbf	d2,loc_17A8
000017B8 608A                       		bra.s	loc_173E
000017BA                            ; ===========================================================================
000017BA                            
000017BA                            loc_17B4:				; XREF: EniDec
000017BA 60B2                       		bra.s	loc_1768
000017BC                            ; ===========================================================================
000017BC 60B0                       		bra.s	loc_1768
000017BE                            ; ===========================================================================
000017BE 60B8                       		bra.s	loc_1772
000017C0                            ; ===========================================================================
000017C0 60B6                       		bra.s	loc_1772
000017C2                            ; ===========================================================================
000017C2 60BC                       		bra.s	loc_177A
000017C4                            ; ===========================================================================
000017C4 60C6                       		bra.s	loc_1786
000017C6                            ; ===========================================================================
000017C6 60D2                       		bra.s	loc_1794
000017C8                            ; ===========================================================================
000017C8 60DE                       		bra.s	loc_17A2
000017CA                            ; ===========================================================================
000017CA                            
000017CA                            loc_17C4:				; XREF: loc_17A2
000017CA 5348                       		subq.w	#1,a0
000017CC 0C46 0010                  		cmpi.w	#$10,d6
000017D0 6600                       		bne.s	loc_17CE
000017D2 5348                       		subq.w	#1,a0
000017D4                            
000017D4                            loc_17CE:
000017D4 3008                       		move.w	a0,d0
000017D6 E248                       		lsr.w	#1,d0
000017D8 6400                       		bcc.s	loc_17D6
000017DA 5248                       		addq.w	#1,a0
000017DC                            
000017DC                            loc_17D6:
000017DC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017E0 4E75                       		rts	
000017E2                            ; ===========================================================================
000017E2                            
000017E2                            loc_17DC:				; XREF: loc_17A2
000017E2 360B                       		move.w	a3,d3
000017E4 1204                       		move.b	d4,d1
000017E6 D201                       		add.b	d1,d1
000017E8 6400                       		bcc.s	loc_17EE
000017EA 5346                       		subq.w	#1,d6
000017EC 0D05                       		btst	d6,d5
000017EE 6700                       		beq.s	loc_17EE
000017F0 0043 8000                  		ori.w	#-$8000,d3
000017F4                            
000017F4                            loc_17EE:
000017F4 D201                       		add.b	d1,d1
000017F6 6400                       		bcc.s	loc_17FC
000017F8 5346                       		subq.w	#1,d6
000017FA 0D05                       		btst	d6,d5
000017FC 6700                       		beq.s	loc_17FC
000017FE 0643 4000                  		addi.w	#$4000,d3
00001802                            
00001802                            loc_17FC:
00001802 D201                       		add.b	d1,d1
00001804 6400                       		bcc.s	loc_180A
00001806 5346                       		subq.w	#1,d6
00001808 0D05                       		btst	d6,d5
0000180A 6700                       		beq.s	loc_180A
0000180C 0643 2000                  		addi.w	#$2000,d3
00001810                            
00001810                            loc_180A:
00001810 D201                       		add.b	d1,d1
00001812 6400                       		bcc.s	loc_1818
00001814 5346                       		subq.w	#1,d6
00001816 0D05                       		btst	d6,d5
00001818 6700                       		beq.s	loc_1818
0000181A 0043 1000                  		ori.w	#$1000,d3
0000181E                            
0000181E                            loc_1818:
0000181E D201                       		add.b	d1,d1
00001820 6400                       		bcc.s	loc_1826
00001822 5346                       		subq.w	#1,d6
00001824 0D05                       		btst	d6,d5
00001826 6700                       		beq.s	loc_1826
00001828 0043 0800                  		ori.w	#$800,d3
0000182C                            
0000182C                            loc_1826:
0000182C 3205                       		move.w	d5,d1
0000182E 3E06                       		move.w	d6,d7
00001830 9E4D                       		sub.w	a5,d7
00001832 6400                       		bcc.s	loc_1856
00001834 3C07                       		move.w	d7,d6
00001836 0646 0010                  		addi.w	#$10,d6
0000183A 4447                       		neg.w	d7
0000183C EF69                       		lsl.w	d7,d1
0000183E 1A10                       		move.b	(a0),d5
00001840 EF3D                       		rol.b	d7,d5
00001842 DE47                       		add.w	d7,d7
00001844 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001848 D245                       		add.w	d5,d1
0000184A                            
0000184A                            loc_1844:				; XREF: loc_1868
0000184A 300D                       		move.w	a5,d0
0000184C D040                       		add.w	d0,d0
0000184E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001852 D243                       		add.w	d3,d1
00001854 1A18                       		move.b	(a0)+,d5
00001856 E14D                       		lsl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A 4E75                       		rts	
0000185C                            ; ===========================================================================
0000185C                            
0000185C                            loc_1856:				; XREF: loc_1826
0000185C 6700                       		beq.s	loc_1868
0000185E EE69                       		lsr.w	d7,d1
00001860 300D                       		move.w	a5,d0
00001862 D040                       		add.w	d0,d0
00001864 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001868 D243                       		add.w	d3,d1
0000186A 300D                       		move.w	a5,d0
0000186C 6000                       		bra.s	sub_188C
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            loc_1868:				; XREF: loc_1856
0000186E 7C10                       		moveq	#$10,d6
00001870                            
00001870                            loc_186A:
00001870 60D8                       		bra.s	loc_1844
00001872                            ; ===========================================================================
00001872 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001888 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001892                            
00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            
00001892                            
00001892                            sub_188C:				; XREF: EniDec
00001892 9C40                       		sub.w	d0,d6
00001894 0C46 0009                  		cmpi.w	#9,d6
00001898 6400                       		bcc.s	locret_189A
0000189A 5046                       		addq.w	#8,d6
0000189C E145                       		asl.w	#8,d5
0000189E 1A18                       		move.b	(a0)+,d5
000018A0                            
000018A0                            locret_189A:
000018A0 4E75                       		rts	
000018A2                            ; End of function sub_188C
000018A2                            
000018A2                            ; ===========================================================================
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            ; Kosinski decompression routine
000018A2                            ;
000018A2                            ; Created by vladikcomper
000018A2                            ; Special thanks to flamewing and MarkeyJester
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            _Kos_RunBitStream macro
000018A2                                    dbf     d2,@skip\@
000018A2                                    moveq   #7,d2
000018A2                                    move.b  d1,d0
000018A2                                    swap    d3
000018A2                                    bpl.s   @skip\@
000018A2                                    move.b  (a0)+,d0                        ; get desc. bitfield
000018A2                                    move.b  (a0)+,d1                        ;
000018A2                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018A2                                    move.b  (a4,d1.w),d1                    ;
000018A2                            @skip\@
000018A2                                    endm
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            KosDec:
000018A2 7E07                               moveq   #7,d7
000018A4 7000                               moveq   #0,d0
000018A6 7200                               moveq   #0,d1
000018A8 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000018AC 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000018AE 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000018B0 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018B4 1234 1000                          move.b  (a4,d1.w),d1                    ;
000018B8 7407                               moveq   #7,d2                           ; set repeat count to 8
000018BA 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
000018BC 4243                               clr.w   d3                              ;
000018BE 6000                               bra.s   KosDec_FetchNewCode
000018C0                             
000018C0                            KosDec_FetchCodeLoop:
000018C0                                    ; code 1 (Uncompressed byte)
000018C0 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018D8 12D8                               move.b  (a0)+,(a1)+
000018DA                             
000018DA                            KosDec_FetchNewCode:
000018DA D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018DC 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
000018DE                             
000018DE                                    ; codes 00 and 01
000018DE 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018F6 7800                               moveq   #0,d4                           ; d4 will contain copy count
000018F8 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018FA 6500                               bcs.s   KosDec_Code_01
000018FC                             
000018FC                                    ; code 00 (Dictionary ref. short)
000018FC 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001914 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001916 D944                               addx.w  d4,d4
00001918 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001930 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001932 D944                               addx.w  d4,d4
00001934 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000194C 7AFF                               moveq   #-1,d5
0000194E 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00001950                             
00001950                            KosDec_StreamCopy:
00001950 47F1 5000                          lea     (a1,d5),a3
00001954 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001956                             
00001956                            KosDec_copy:
00001956 12DB                               move.b  (a3)+,(a1)+
00001958 51CC FFFC                          dbf     d4,KosDec_copy
0000195C 6000 FF7C                          bra.w   KosDec_FetchNewCode
00001960                            ; ---------------------------------------------------------------------------
00001960                            KosDec_Code_01:
00001960                                    ; code 01 (Dictionary ref. long / special)
00001960 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001978 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
0000197A 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
0000197C 7AFF                               moveq   #-1,d5
0000197E 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00001980 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00001982 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00001984 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00001986 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00001988                             
00001988                                    ; special mode (extended counter)
00001988 1818                               move.b  (a0)+,d4                        ; read cnt
0000198A 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
0000198C 5304                               subq.b  #1,d4
0000198E 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00001992                             
00001992 47F1 5000                          lea     (a1,d5),a3
00001996 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001998 3C04                               move.w  d4,d6
0000199A 4646                               not.w   d6
0000199C CC47                               and.w   d7,d6
0000199E DC46                               add.w   d6,d6
000019A0 E64C                               lsr.w   #3,d4
000019A2 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000019A6                             
000019A6                            KosDec_largecopy:
000019A6                                    rept 8
000019A6                                    move.b  (a3)+,(a1)+
000019A6 12DB 12DB 12DB 12DB 12DB+          endr
000019B6 51CC FFEE                          dbf     d4,KosDec_largecopy
000019BA 6000 FF1E                          bra.w   KosDec_FetchNewCode
000019BE                             
000019BE                            KosDec_Quit:
000019BE 4E75                               rts
000019C0                             
000019C0                            ; ---------------------------------------------------------------------------
000019C0                            ; A look-up table to invert bits order in desc. field bytes
000019C0                            ; ---------------------------------------------------------------------------
000019C0                             
000019C0                            KosDec_ByteMap:
000019C0 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000019D0 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000019E0 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000019F0 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001A00 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001A10 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001A20 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001A30 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001A40 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001A50 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001A60 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001A70 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A80 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A90 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001AA0 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001AB0 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001AC0                             
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Palette cycling routine loading subroutine
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AC0 7400                       		moveq	#0,d2
00001AC2 7000                       		moveq	#0,d0
00001AC4 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AC8 D040                       		add.w	d0,d0		; multiply by 2
00001ACA 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001ACE 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AD2                            ; End of function PalCycle_Load
00001AD2                            
00001AD2                            ; ===========================================================================
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Palette cycling routines
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AD4 0000                       		dc.w PalCycle_LZ-PalCycle
00001AD6 0000                       		dc.w PalCycle_MZ-PalCycle
00001AD8 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ADA 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ADC 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ADE 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AE0                            
00001AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AE0                            
00001AE0                            
00001AE0                            PalCycle_Title:				; XREF: TitleScreen
00001AE0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AE6 6000                       		bra.s	loc_196A
00001AE8                            ; ===========================================================================
00001AE8                            
00001AE8                            PalCycle_GHZ:				; XREF: PalCycle
00001AE8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AEE                            
00001AEE                            loc_196A:				; XREF: PalCycle_Title
00001AEE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AF2 6A00                       		bpl.s	locret_1990
00001AF4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AFA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B02 0240 0003                  		andi.w	#3,d0
00001B06 E748                       		lsl.w	#3,d0
00001B08 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B0C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B10 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B14                            
00001B14                            locret_1990:
00001B14 4E75                       		rts	
00001B16                            ; End of function PalCycle_Title
00001B16                            
00001B16                            
00001B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B16                            
00001B16                            
00001B16                            PalCycle_LZ:				; XREF: PalCycle
00001B16 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B1A 6A00                       		bpl.s	loc_19D8
00001B1C 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B22 3038 F632                  		move.w	($FFFFF632).w,d0
00001B26 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B2A 0240 0003                  		andi.w	#3,d0
00001B2E E748                       		lsl.w	#3,d0
00001B30 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B36 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B3C 6600                       		bne.s	loc_19C0
00001B3E 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	Palette instead
00001B44                            
00001B44                            loc_19C0:
00001B44 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B48 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B50 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B54 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B58 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5C                            
00001B5C                            loc_19D8:
00001B5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B60 0240 0007                  		andi.w	#7,d0
00001B64 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B68 6700                       		beq.s	locret_1A3A
00001B6A 7201                       		moveq	#1,d1
00001B6C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B70 6700                       		beq.s	loc_19F0
00001B72 4441                       		neg.w	d1
00001B74                            
00001B74                            loc_19F0:
00001B74 3038 F650                  		move.w	($FFFFF650).w,d0
00001B78 0240 0003                  		andi.w	#3,d0
00001B7C D041                       		add.w	d1,d0
00001B7E 0C40 0003                  		cmpi.w	#3,d0
00001B82 6500                       		bcs.s	loc_1A0A
00001B84 3200                       		move.w	d0,d1
00001B86 7000                       		moveq	#0,d0
00001B88 4A41                       		tst.w	d1
00001B8A 6A00                       		bpl.s	loc_1A0A
00001B8C 7002                       		moveq	#2,d0
00001B8E                            
00001B8E                            loc_1A0A:
00001B8E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B92 D040                       		add.w	d0,d0
00001B94 3200                       		move.w	d0,d1
00001B96 D040                       		add.w	d0,d0
00001B98 D041                       		add.w	d1,d0
00001B9A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001BA0 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001BA4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA8 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BB2 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BBE                            
00001BBE                            locret_1A3A:
00001BBE 4E75                       		rts	
00001BC0                            ; End of function PalCycle_LZ
00001BC0                            
00001BC0                            ; ===========================================================================
00001BC0 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BC8                            ; ===========================================================================
00001BC8                            
00001BC8                            PalCycle_MZ:				; XREF: PalCycle
00001BC8 4E75                       		rts	
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_SLZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	locret_1A80
00001BD0 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5240                       		addq.w	#1,d0
00001BDC 0C40 0006                  		cmpi.w	#6,d0
00001BE0 6500                       		bcs.s	loc_1A60
00001BE2 7000                       		moveq	#0,d0
00001BE4                            
00001BE4                            loc_1A60:
00001BE4 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BE8 3200                       		move.w	d0,d1
00001BEA D241                       		add.w	d1,d1
00001BEC D041                       		add.w	d1,d0
00001BEE D040                       		add.w	d0,d0
00001BF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001C04                            
00001C04                            locret_1A80:
00001C04 4E75                       		rts	
00001C06                            ; End of function PalCycle_SLZ
00001C06                            
00001C06                            
00001C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C06                            
00001C06                            
00001C06                            PalCycle_SYZ:				; XREF: PalCycle
00001C06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C0A 6A00                       		bpl.s	locret_1AC6
00001C0C 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C12 3038 F632                  		move.w	($FFFFF632).w,d0
00001C16 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C1A 0240 0003                  		andi.w	#3,d0
00001C1E E548                       		lsl.w	#2,d0
00001C20 3200                       		move.w	d0,d1
00001C22 D040                       		add.w	d0,d0
00001C24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C2A 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C4A                            
00001C4A                            locret_1AC6:
00001C4A 4E75                       		rts	
00001C4C                            ; End of function PalCycle_SYZ
00001C4C                            
00001C4C                            
00001C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4C                            
00001C4C                            
00001C4C                            PalCycle_SBZ:				; XREF: PalCycle
00001C4C 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C52 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C56 6700                       		beq.s	loc_1ADA
00001C58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C5E                            
00001C5E                            loc_1ADA:
00001C5E 43F8 F650                  		lea	($FFFFF650).w,a1
00001C62 321A                       		move.w	(a2)+,d1
00001C64                            
00001C64                            loc_1AE0:
00001C64 5311                       		subq.b	#1,(a1)
00001C66 6B00                       		bmi.s	loc_1AEA
00001C68 5489                       		addq.l	#2,a1
00001C6A 5C8A                       		addq.l	#6,a2
00001C6C 6000                       		bra.s	loc_1B06
00001C6E                            ; ===========================================================================
00001C6E                            
00001C6E                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C6E 12DA                       		move.b	(a2)+,(a1)+
00001C70 1011                       		move.b	(a1),d0
00001C72 5200                       		addq.b	#1,d0
00001C74 B01A                       		cmp.b	(a2)+,d0
00001C76 6500                       		bcs.s	loc_1AF6
00001C78 7000                       		moveq	#0,d0
00001C7A                            
00001C7A                            loc_1AF6:
00001C7A 12C0                       		move.b	d0,(a1)+
00001C7C 0240 000F                  		andi.w	#$F,d0
00001C80 D040                       		add.w	d0,d0
00001C82 305A                       		movea.w	(a2)+,a0
00001C84 365A                       		movea.w	(a2)+,a3
00001C86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C8A                            
00001C8A                            loc_1B06:				; XREF: PalCycle_SBZ
00001C8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C92 6A00                       		bpl.s	locret_1B64
00001C94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C9A 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CA0 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CA4 6700                       		beq.s	loc_1B2E
00001CA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CAC 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CB2                            
00001CB2                            loc_1B2E:
00001CB2 72FF                       		moveq	#-1,d1
00001CB4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CB8 6700                       		beq.s	loc_1B38
00001CBA 4441                       		neg.w	d1
00001CBC                            
00001CBC                            loc_1B38:
00001CBC 3038 F632                  		move.w	($FFFFF632).w,d0
00001CC0 0240 0003                  		andi.w	#3,d0
00001CC4 D041                       		add.w	d1,d0
00001CC6 0C40 0003                  		cmpi.w	#3,d0
00001CCA 6500                       		bcs.s	loc_1B52
00001CCC 3200                       		move.w	d0,d1
00001CCE 7000                       		moveq	#0,d0
00001CD0 4A41                       		tst.w	d1
00001CD2 6A00                       		bpl.s	loc_1B52
00001CD4 7002                       		moveq	#2,d0
00001CD6                            
00001CD6                            loc_1B52:
00001CD6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CDA D040                       		add.w	d0,d0
00001CDC 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CE8                            
00001CE8                            locret_1B64:
00001CE8 4E75                       		rts	
00001CEA                            ; End of function PalCycle_SBZ
00001CEA                            
00001CEA                            ; ===========================================================================
00001CEA                            Pal_TitleCyc:	incbin	Palette\c_title.bin
00001D0A                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001D2A                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001D4A                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001D5C                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001D6E                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001DD6                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001DFA                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001E1A                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001E2A                            
00001E2A                            Pal_SBZCycList:
00001E2A                            	include "_inc\SBZ Palette script 1.asm"
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A                            ; Scrap Brain Zone 1 pallet cycling script
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A 0008                       	dc.w 8			; number of entries - 1
00001E2C 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E2E 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E30 FB50                       	dc.w $FB50		; RAM address
00001E32 0D08                       	dc.b $D, 8
00001E34 0000                       	dc.w Pal_SBZCyc2
00001E36 FB52                       	dc.w $FB52
00001E38 0E08                       	dc.b $E, 8
00001E3A 0000                       	dc.w Pal_SBZCyc3
00001E3C FB6E                       	dc.w $FB6E
00001E3E 0B08                       	dc.b $B, 8
00001E40 0000                       	dc.w Pal_SBZCyc5
00001E42 FB70                       	dc.w $FB70
00001E44 0708                       	dc.b 7,	8
00001E46 0000                       	dc.w Pal_SBZCyc6
00001E48 FB72                       	dc.w $FB72
00001E4A 1C10                       	dc.b $1C, $10
00001E4C 0000                       	dc.w Pal_SBZCyc7
00001E4E FB7E                       	dc.w $FB7E
00001E50 0303                       	dc.b 3,	3
00001E52 0000                       	dc.w Pal_SBZCyc8
00001E54 FB78                       	dc.w $FB78
00001E56 0303                       	dc.b 3,	3
00001E58 0000                       	dc.w Pal_SBZCyc8+2
00001E5A FB7A                       	dc.w $FB7A
00001E5C 0303                       	dc.b 3,	3
00001E5E 0000                       	dc.w Pal_SBZCyc8+4
00001E60 FB7C                       	dc.w $FB7C
00001E62                            	even
00001E62                            	even
00001E62                            
00001E62                            Pal_SBZCycList2:
00001E62                            	include "_inc\SBZ Palette script 2.asm"
00001E62                            ; ---------------------------------------------------------------------------
00001E62                            ; Scrap Brain Zone 2 pallet cycling script
00001E62                            ; ---------------------------------------------------------------------------
00001E62 0006                       	dc.w 6
00001E64 0708                       	dc.b 7,	8
00001E66 0000                       	dc.w Pal_SBZCyc1
00001E68 FB50                       	dc.w $FB50
00001E6A 0D08                       	dc.b $D, 8
00001E6C 0000                       	dc.w Pal_SBZCyc2
00001E6E FB52                       	dc.w $FB52
00001E70 0908                       	dc.b 9,	8
00001E72 0000                       	dc.w Pal_SBZCyc9
00001E74 FB70                       	dc.w $FB70
00001E76 0708                       	dc.b 7,	8
00001E78 0000                       	dc.w Pal_SBZCyc6
00001E7A FB72                       	dc.w $FB72
00001E7C 0303                       	dc.b 3,	3
00001E7E 0000                       	dc.w Pal_SBZCyc8
00001E80 FB78                       	dc.w $FB78
00001E82 0303                       	dc.b 3,	3
00001E84 0000                       	dc.w Pal_SBZCyc8+2
00001E86 FB7A                       	dc.w $FB7A
00001E88 0303                       	dc.b 3,	3
00001E8A 0000                       	dc.w Pal_SBZCyc8+4
00001E8C FB7C                       	dc.w $FB7C
00001E8E                            	even
00001E8E                            	even
00001E8E                            
00001E8E                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001E9E                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001EAE                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001EBE                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001ECA                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001EDA                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001EEA                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001F0A                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001F14                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001F24                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            ; Subroutine to	fade out and fade in
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            
00001F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F30                            
00001F30                            
00001F30                            Pal_FadeTo:
00001F30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F36                            
00001F36                            Pal_FadeTo2:
00001F36 7000                       		moveq	#0,d0
00001F38 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F3C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F40 D0C0                       		adda.w	d0,a0
00001F42 7200                       		moveq	#0,d1
00001F44 1038 F627                  		move.b	($FFFFF627).w,d0
00001F48                            
00001F48                            Pal_ToBlack:
00001F48 30C1                       		move.w	d1,(a0)+
00001F4A 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill Palette with $000	(black)
00001F4E 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001F50 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001F52                            
00001F52                            loc_1DCE:
00001F52 6100 F69E                  		bsr.w	RunPLC_RAM
00001F56 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F5C 6100 0000                  		bsr.w	DelayProgram
00001F60 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001F64 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001F66 6100                       		bsr.s	Pal_FadeIn
00001F68 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001F6A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001F6C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001F72 6000 0000                  		bra	DelayProgram				; MJ: ''
00001F76                            
00001F76                            ; End of function Pal_FadeTo
00001F76                            
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            ; Palette fade-in subroutine
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            
00001F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F76                            
00001F76                            
00001F76                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001F76 7000                       		moveq	#0,d0
00001F78 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F80 1038 F626                  		move.b	($FFFFF626).w,d0
00001F84 D0C0                       		adda.w	d0,a0
00001F86 D2C0                       		adda.w	d0,a1
00001F88 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8C                            
00001F8C                            loc_1DFA:
00001F8C 6100                       		bsr.s	Pal_AddColor
00001F8E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001F92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F98 6600                       		bne.s	locret_1E24
00001F9A 7000                       		moveq	#0,d0
00001F9C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA0 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FA4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA8 D0C0                       		adda.w	d0,a0
00001FAA D2C0                       		adda.w	d0,a1
00001FAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB0                            
00001FB0                            loc_1E1E:
00001FB0 6100                       		bsr.s	Pal_AddColor
00001FB2 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FB6                            
00001FB6                            locret_1E24:
00001FB6 4E75                       		rts	
00001FB8                            ; End of function Pal_FadeIn
00001FB8                            
00001FB8                            
00001FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB8                            
00001FB8                            
00001FB8                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FB8 1A11                       		move.b	(a1),d5					; MJ: load blue
00001FBA 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001FBC 1401                       		move.b	d1,d2					; MJ: load red
00001FBE E809                       		lsr.b	#$04,d1					; MJ: get only green
00001FC0 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001FC4 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001FC6 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001FC8 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001FCC 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001FD0                            
00001FD0                            FCI_NoBlue:
00001FD0 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001FD2 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001FD6 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001FDA                            
00001FDA                            FCI_NoGreen:
00001FDA B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001FDC 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001FE0 5403                       		addq.b	#$02,d3					; MJ: increase red
00001FE2                            
00001FE2                            FCI_NoRed:
00001FE2 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001FE4 4E75                       		rts						; MJ: return
00001FE6                            
00001FE6                            ; End of function Pal_AddColor
00001FE6                            
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeFrom:
00001FE6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FEC 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001FEE 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001FF0                            
00001FF0                            loc_1E5C:
00001FF0 6100 F600                  		bsr.w	RunPLC_RAM
00001FF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FFA 6100 0000                  		bsr.w	DelayProgram
00001FFE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002002 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00002004 6100                       		bsr.s	Pal_FadeOut
00002006 51CC FFE8                  		dbf	d4,loc_1E5C
0000200A 4E75                       		rts	
0000200C                            ; End of function Pal_FadeFrom
0000200C                            
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            ; Palette fade-out subroutine
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            
0000200C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200C                            
0000200C                            
0000200C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000200C 7000                       		moveq	#0,d0
0000200E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002012 1038 F626                  		move.b	($FFFFF626).w,d0
00002016 D0C0                       		adda.w	d0,a0
00002018 1038 F627                  		move.b	($FFFFF627).w,d0
0000201C                            
0000201C                            loc_1E82:
0000201C 6100                       		bsr.s	Pal_DecColor
0000201E 51C8 FFFC                  		dbf	d0,loc_1E82
00002022                            
00002022 7000                       		moveq	#0,d0
00002024 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002028 1038 F626                  		move.b	($FFFFF626).w,d0
0000202C D0C0                       		adda.w	d0,a0
0000202E 1038 F627                  		move.b	($FFFFF627).w,d0
00002032                            
00002032                            loc_1E98:
00002032 6100                       		bsr.s	Pal_DecColor
00002034 51C8 FFFC                  		dbf	d0,loc_1E98
00002038 4E75                       		rts	
0000203A                            ; End of function Pal_FadeOut
0000203A                            
0000203A                            
0000203A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203A                            
0000203A                            
0000203A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000203A 3A10                       		move.w	(a0),d5					; MJ: load colour
0000203C 3205                       		move.w	d5,d1					; MJ: copy to d1
0000203E 1401                       		move.b	d1,d2					; MJ: load green and red
00002040 1601                       		move.b	d1,d3					; MJ: load red
00002042 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00002046 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000204A 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
0000204E                            
0000204E                            FCO_NoBlue:
0000204E 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00002052 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002056 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000205A                            
0000205A                            FCO_NoGreen:
0000205A 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
0000205E 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002062 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002064                            
00002064                            FCO_NoRed:
00002064 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002066 4E75                       		rts						; MJ: return
00002068                            
00002068                            ; End of function Pal_DecColor
00002068                            
00002068                            ; ---------------------------------------------------------------------------
00002068                            ; Subroutine to	fill the Palette	with white (special stage)
00002068                            ; ---------------------------------------------------------------------------
00002068                            
00002068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002068                            
00002068                            
00002068                            Pal_MakeWhite:				; XREF: SpecialStage
00002068 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 323C 0EEE                  		move.w	#$EEE,d1
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            PalWhite_Loop:
00002082 30C1                       		move.w	d1,(a0)+
00002084 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002088 383C 0015                  		move.w	#$15,d4
0000208C                            
0000208C                            loc_1EF4:
0000208C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002092 6100 0000                  		bsr.w	DelayProgram
00002096 6100                       		bsr.s	Pal_WhiteToBlack
00002098 6100 F558                  		bsr.w	RunPLC_RAM
0000209C 51CC FFEE                  		dbf	d4,loc_1EF4
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_MakeWhite
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020A2 7000                       		moveq	#0,d0
000020A4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020AC 1038 F626                  		move.b	($FFFFF626).w,d0
000020B0 D0C0                       		adda.w	d0,a0
000020B2 D2C0                       		adda.w	d0,a1
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1F20:
000020B8 6100                       		bsr.s	Pal_DecColor2
000020BA 51C8 FFFC                  		dbf	d0,loc_1F20
000020BE                            
000020BE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020C4 6600                       		bne.s	locret_1F4A
000020C6 7000                       		moveq	#0,d0
000020C8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020CC 43F8 FA00                  		lea	($FFFFFA00).w,a1
000020D0 1038 F626                  		move.b	($FFFFF626).w,d0
000020D4 D0C0                       		adda.w	d0,a0
000020D6 D2C0                       		adda.w	d0,a1
000020D8 1038 F627                  		move.b	($FFFFF627).w,d0
000020DC                            
000020DC                            loc_1F44:
000020DC 6100                       		bsr.s	Pal_DecColor2
000020DE 51C8 FFFC                  		dbf	d0,loc_1F44
000020E2                            
000020E2                            locret_1F4A:
000020E2 4E75                       		rts	
000020E4                            ; End of function Pal_WhiteToBlack
000020E4                            
000020E4                            
000020E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E4                            
000020E4                            
000020E4                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000020E4 3419                       		move.w	(a1)+,d2
000020E6 3610                       		move.w	(a0),d3
000020E8 B642                       		cmp.w	d2,d3
000020EA 6700                       		beq.s	loc_1F78
000020EC 3203                       		move.w	d3,d1
000020EE 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000020F2 6500                       		bcs.s	loc_1F64
000020F4 B242                       		cmp.w	d2,d1
000020F6 6500                       		bcs.s	loc_1F64
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 4E75                       		rts	
000020FC                            ; ===========================================================================
000020FC                            
000020FC                            loc_1F64:				; XREF: Pal_DecColor2
000020FC 3203                       		move.w	d3,d1
000020FE 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002102 6500                       		bcs.s	loc_1F74
00002104 B242                       		cmp.w	d2,d1
00002106 6500                       		bcs.s	loc_1F74
00002108 30C1                       		move.w	d1,(a0)+
0000210A 4E75                       		rts	
0000210C                            ; ===========================================================================
0000210C                            
0000210C                            loc_1F74:				; XREF: loc_1F64
0000210C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000210E 4E75                       		rts	
00002110                            ; ===========================================================================
00002110                            
00002110                            loc_1F78:				; XREF: Pal_DecColor2
00002110 5448                       		addq.w	#2,a0
00002112 4E75                       		rts	
00002114                            ; End of function Pal_DecColor2
00002114                            
00002114                            ; ---------------------------------------------------------------------------
00002114                            ; Subroutine to	make a white flash when	you enter a special stage
00002114                            ; ---------------------------------------------------------------------------
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            Pal_MakeFlash:				; XREF: SpecialStage
00002114 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000211A 383C 0015                  		move.w	#$15,d4
0000211E                            
0000211E                            loc_1F86:
0000211E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002124 6100 0000                  		bsr.w	DelayProgram
00002128 6100                       		bsr.s	Pal_ToWhite
0000212A 6100 F4C6                  		bsr.w	RunPLC_RAM
0000212E 51CC FFEE                  		dbf	d4,loc_1F86
00002132 4E75                       		rts	
00002134                            ; End of function Pal_MakeFlash
00002134                            
00002134                            
00002134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002134                            
00002134                            
00002134                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002134 7000                       		moveq	#0,d0
00002136 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 1038 F627                  		move.b	($FFFFF627).w,d0
00002144                            
00002144                            loc_1FAC:
00002144 6100                       		bsr.s	Pal_AddColor2
00002146 51C8 FFFC                  		dbf	d0,loc_1FAC
0000214A 7000                       		moveq	#0,d0
0000214C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002150 1038 F626                  		move.b	($FFFFF626).w,d0
00002154 D0C0                       		adda.w	d0,a0
00002156 1038 F627                  		move.b	($FFFFF627).w,d0
0000215A                            
0000215A                            loc_1FC2:
0000215A 6100                       		bsr.s	Pal_AddColor2
0000215C 51C8 FFFC                  		dbf	d0,loc_1FC2
00002160 4E75                       		rts	
00002162                            ; End of function Pal_ToWhite
00002162                            
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002162 3410                       		move.w	(a0),d2
00002164 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002168 6700                       		beq.s	loc_2006
0000216A 3202                       		move.w	d2,d1
0000216C 0241 000E                  		andi.w	#$E,d1
00002170 0C41 000E                  		cmpi.w	#$E,d1
00002174 6700                       		beq.s	loc_1FE2
00002176 5458                       		addq.w	#2,(a0)+	; increase red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1FE2:				; XREF: Pal_AddColor2
0000217A 3202                       		move.w	d2,d1
0000217C 0241 00E0                  		andi.w	#$E0,d1
00002180 0C41 00E0                  		cmpi.w	#$E0,d1
00002184 6700                       		beq.s	loc_1FF4
00002186 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000218A 4E75                       		rts	
0000218C                            ; ===========================================================================
0000218C                            
0000218C                            loc_1FF4:				; XREF: loc_1FE2
0000218C 3202                       		move.w	d2,d1
0000218E 0241 0E00                  		andi.w	#$E00,d1
00002192 0C41 0E00                  		cmpi.w	#$E00,d1
00002196 6700                       		beq.s	loc_2006
00002198 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000219C 4E75                       		rts	
0000219E                            ; ===========================================================================
0000219E                            
0000219E                            loc_2006:				; XREF: Pal_AddColor2
0000219E 5448                       		addq.w	#2,a0
000021A0 4E75                       		rts	
000021A2                            ; End of function Pal_AddColor2
000021A2                            
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            ; Palette cycling routine - Sega	logo
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            PalCycle_Sega:				; XREF: SegaScreen
000021A2 4A38 F635                  		tst.b	($FFFFF635).w
000021A6 6600                       		bne.s	loc_206A
000021A8 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021AC 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021B2 7205                       		moveq	#5,d1
000021B4 3038 F632                  		move.w	($FFFFF632).w,d0
000021B8                            
000021B8                            loc_2020:
000021B8 6A00                       		bpl.s	loc_202A
000021BA 5448                       		addq.w	#2,a0
000021BC 5341                       		subq.w	#1,d1
000021BE 5440                       		addq.w	#2,d0
000021C0 60F6                       		bra.s	loc_2020
000021C2                            ; ===========================================================================
000021C2                            
000021C2                            loc_202A:				; XREF: PalCycle_Sega
000021C2 3400                       		move.w	d0,d2
000021C4 0242 001E                  		andi.w	#$1E,d2
000021C8 6600                       		bne.s	loc_2034
000021CA 5440                       		addq.w	#2,d0
000021CC                            
000021CC                            loc_2034:
000021CC 0C40 0060                  		cmpi.w	#$60,d0
000021D0 6400                       		bcc.s	loc_203E
000021D2 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000021D6                            
000021D6                            loc_203E:
000021D6 5440                       		addq.w	#2,d0
000021D8 51C9 FFE8                  		dbf	d1,loc_202A
000021DC 3038 F632                  		move.w	($FFFFF632).w,d0
000021E0 5440                       		addq.w	#2,d0
000021E2 3400                       		move.w	d0,d2
000021E4 0242 001E                  		andi.w	#$1E,d2
000021E8 6600                       		bne.s	loc_2054
000021EA 5440                       		addq.w	#2,d0
000021EC                            
000021EC                            loc_2054:
000021EC 0C40 0064                  		cmpi.w	#$64,d0
000021F0 6D00                       		blt.s	loc_2062
000021F2 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000021F8 70F4                       		moveq	#-$C,d0
000021FA                            
000021FA                            loc_2062:
000021FA 31C0 F632                  		move.w	d0,($FFFFF632).w
000021FE 7001                       		moveq	#1,d0
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_206A:				; XREF: loc_202A
00002202 5338 F634                  		subq.b	#1,($FFFFF634).w
00002206 6A00                       		bpl.s	loc_20BC
00002208 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 0640 000C                  		addi.w	#$C,d0
00002216 0C40 0030                  		cmpi.w	#$30,d0
0000221A 6500                       		bcs.s	loc_2088
0000221C 7000                       		moveq	#0,d0
0000221E 4E75                       		rts	
00002220                            ; ===========================================================================
00002220                            
00002220                            loc_2088:				; XREF: loc_206A
00002220 31C0 F632                  		move.w	d0,($FFFFF632).w
00002224 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000222A 41F0 0000                  		lea	(a0,d0.w),a0
0000222E 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002232 22D8                       		move.l	(a0)+,(a1)+
00002234 22D8                       		move.l	(a0)+,(a1)+
00002236 3298                       		move.w	(a0)+,(a1)
00002238 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000223C 7000                       		moveq	#0,d0
0000223E 722C                       		moveq	#$2C,d1
00002240                            
00002240                            loc_20A8:
00002240 3400                       		move.w	d0,d2
00002242 0242 001E                  		andi.w	#$1E,d2
00002246 6600                       		bne.s	loc_20B2
00002248 5440                       		addq.w	#2,d0
0000224A                            
0000224A                            loc_20B2:
0000224A 3390 0000                  		move.w	(a0),(a1,d0.w)
0000224E 5440                       		addq.w	#2,d0
00002250 51C9 FFEE                  		dbf	d1,loc_20A8
00002254                            
00002254                            loc_20BC:
00002254 7001                       		moveq	#1,d0
00002256 4E75                       		rts	
00002258                            ; End of function PalCycle_Sega
00002258                            
00002258                            ; ===========================================================================
00002258                            
00002258                            Pal_Sega1:	incbin	Palette\sega1.bin
00002264                            Pal_Sega2:	incbin	Palette\sega2.bin
00002294                            
00002294                            ; ---------------------------------------------------------------------------
00002294                            ; Subroutines to load Palettes
00002294                            ; ---------------------------------------------------------------------------
00002294                            
00002294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002294                            
00002294                            
00002294                            PalLoad1:
00002294 43F9 0000 0000             		lea	(PalPointers).l,a1
0000229A E748                       		lsl.w	#3,d0
0000229C D2C0                       		adda.w	d0,a1
0000229E 2459                       		movea.l	(a1)+,a2
000022A0 3659                       		movea.w	(a1)+,a3
000022A2 D6FC 0080                  		adda.w	#$80,a3
000022A6 3E19                       		move.w	(a1)+,d7
000022A8                            
000022A8                            loc_2110:
000022A8 26DA                       		move.l	(a2)+,(a3)+
000022AA 51CF FFFC                  		dbf	d7,loc_2110
000022AE 4E75                       		rts	
000022B0                            ; End of function PalLoad1
000022B0                            
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PalLoad2:
000022B0 43F9 0000 0000             		lea	(PalPointers).l,a1
000022B6 E748                       		lsl.w	#3,d0
000022B8 D2C0                       		adda.w	d0,a1
000022BA 2459                       		movea.l	(a1)+,a2
000022BC 3659                       		movea.w	(a1)+,a3
000022BE 3E19                       		move.w	(a1)+,d7
000022C0                            
000022C0                            loc_2128:
000022C0 26DA                       		move.l	(a2)+,(a3)+
000022C2 51CF FFFC                  		dbf	d7,loc_2128
000022C6 4E75                       		rts	
000022C8                            ; End of function PalLoad2
000022C8                            
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            ; Underwater Palette loading subroutine
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            
000022C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C8                            
000022C8                            
000022C8                            PalLoad3_Water:
000022C8 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CE E748                       		lsl.w	#3,d0
000022D0 D2C0                       		adda.w	d0,a1
000022D2 2459                       		movea.l	(a1)+,a2
000022D4 3659                       		movea.w	(a1)+,a3
000022D6 96FC 0080                  		suba.w	#$80,a3
000022DA 3E19                       		move.w	(a1)+,d7
000022DC                            
000022DC                            loc_2144:
000022DC 26DA                       		move.l	(a2)+,(a3)+
000022DE 51CF FFFC                  		dbf	d7,loc_2144
000022E2 4E75                       		rts	
000022E4                            ; End of function PalLoad3_Water
000022E4                            
000022E4                            
000022E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E4                            
000022E4                            
000022E4                            PalLoad4_Water:
000022E4 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EA E748                       		lsl.w	#3,d0
000022EC D2C0                       		adda.w	d0,a1
000022EE 2459                       		movea.l	(a1)+,a2
000022F0 3659                       		movea.w	(a1)+,a3
000022F2 96FC 0100                  		suba.w	#$100,a3
000022F6 3E19                       		move.w	(a1)+,d7
000022F8                            
000022F8                            loc_2160:
000022F8 26DA                       		move.l	(a2)+,(a3)+
000022FA 51CF FFFC                  		dbf	d7,loc_2160
000022FE 4E75                       		rts	
00002300                            ; End of function PalLoad4_Water
00002300                            
00002300                            ; ===========================================================================
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Palette pointers
00002300                            ; ---------------------------------------------------------------------------
00002300                            PalPointers:
00002300                            	include "_inc\Palette pointers.asm"
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Pallet pointers
00002300                            ; ---------------------------------------------------------------------------
00002300 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002304 FB00                       	dc.w $FB00		; RAM address
00002306 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002308 0000 0000                  	dc.l Pal_Title
0000230C FB00                       	dc.w $FB00
0000230E 001F                       	dc.w $1F
00002310 0000 0000                  	dc.l Pal_LevelSel
00002314 FB00                       	dc.w $FB00
00002316 001F                       	dc.w $1F
00002318 0000 0000                  	dc.l Pal_Sonic
0000231C FB00                       	dc.w $FB00
0000231E 0007                       	dc.w 7
00002320 0000 0000                  	dc.l Pal_GHZ
00002324 FB20                       	dc.w $FB20
00002326 0017                       	dc.w $17
00002328 0000 0000                  	dc.l Pal_LZ
0000232C FB20                       	dc.w $FB20
0000232E 0017                       	dc.w $17
00002330 0000 0000                  	dc.l Pal_MZ
00002334 FB20                       	dc.w $FB20
00002336 0017                       	dc.w $17
00002338 0000 0000                  	dc.l Pal_SLZ
0000233C FB20                       	dc.w $FB20
0000233E 0017                       	dc.w $17
00002340 0000 0000                  	dc.l Pal_SYZ
00002344 FB20                       	dc.w $FB20
00002346 0017                       	dc.w $17
00002348 0000 0000                  	dc.l Pal_SBZ1
0000234C FB20                       	dc.w $FB20
0000234E 0017                       	dc.w $17
00002350 0000 0000                  	dc.l Pal_Special
00002354 FB00                       	dc.w $FB00
00002356 001F                       	dc.w $1F
00002358 0000 0000                  	dc.l Pal_LZWater
0000235C FB00                       	dc.w $FB00
0000235E 001F                       	dc.w $1F
00002360 0000 0000                  	dc.l Pal_SBZ3
00002364 FB20                       	dc.w $FB20
00002366 0017                       	dc.w $17
00002368 0000 0000                  	dc.l Pal_SBZ3Water
0000236C FB00                       	dc.w $FB00
0000236E 001F                       	dc.w $1F
00002370 0000 0000                  	dc.l Pal_SBZ2
00002374 FB20                       	dc.w $FB20
00002376 0017                       	dc.w $17
00002378 0000 0000                  	dc.l Pal_LZSonWater
0000237C FB00                       	dc.w $FB00
0000237E 0007                       	dc.w 7
00002380 0000 0000                  	dc.l Pal_SBZ3SonWat
00002384 FB00                       	dc.w $FB00
00002386 0007                       	dc.w 7
00002388 0000 0000                  	dc.l Pal_SpeResult
0000238C FB00                       	dc.w $FB00
0000238E 001F                       	dc.w $1F
00002390 0000 0000                  	dc.l Pal_SpeContinue
00002394 FB00                       	dc.w $FB00
00002396 000F                       	dc.w $F
00002398 0000 0000                  	dc.l Pal_Ending
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Notice
000023A4 FB20                       	dc.w $FB20
000023A6 0017                       	dc.w $17
000023A6 0017                       	dc.w $17
000023A8                            
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            ; Palette data
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            Pal_SegaBG:	incbin	Palette\sega_bg.bin
00002428                            Pal_Title:	incbin	Palette\title.bin
000024A8                            Pal_LevelSel:	incbin	Palette\levelsel.bin
00002528                            Pal_Sonic:	incbin	Palette\sonic.bin
00002548                            Pal_GHZ:	incbin	Palette\ghz.bin
000025A8                            Pal_LZ:		incbin	Palette\lz.bin
00002608                            Pal_LZWater:	incbin	Palette\lz_uw.bin	; LZ underwater Palettes
00002688                            Pal_MZ:		incbin	Palette\mz.bin
000026E8                            Pal_SLZ:	incbin	Palette\slz.bin
00002748                            Pal_SYZ:	incbin	Palette\syz.bin
000027A8                            Pal_SBZ1:	incbin	Palette\sbz_act1.bin	; SBZ act 1 Palettes
00002808                            Pal_SBZ2:	incbin	Palette\sbz_act2.bin	; SBZ act 2 & Final Zone Palettes
00002868                            Pal_Special:	incbin	Palette\special.bin	; special stage Palettes
000028E8                            Pal_SBZ3:	incbin	Palette\sbz_act3.bin	; SBZ act 3 Palettes
00002948                            Pal_SBZ3Water:	incbin	Palette\sbz_a3uw.bin	; SBZ act 3 (underwater) Palettes
000029C8                            Pal_LZSonWater:	incbin	Palette\son_lzuw.bin	; Sonic (underwater in LZ) Palette
000029E8                            Pal_SBZ3SonWat:	incbin	Palette\son_sbzu.bin	; Sonic (underwater in SBZ act 3) Palette
00002A08                            Pal_SpeResult:	incbin	Palette\ssresult.bin	; special stage results screen Palettes
00002A88                            Pal_SpeContinue:incbin	Palette\sscontin.bin	; special stage results screen continue Palette
00002AC8                            Pal_Ending:	incbin	Palette\ending.bin	; ending sequence Palettes
00002B48                            
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            
00002B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B48                            
00002B48                            
00002B48                            DelayProgram:				; XREF: PauseGame
00002B48 46FC 2300                  		move	#$2300,sr
00002B4C                            
00002B4C                            loc_29AC:
00002B4C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B50 66FA                       		bne.s	loc_29AC
00002B52 4E75                       		rts	
00002B54                            ; End of function DelayProgram
00002B54                            
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            ; Subroutine to	generate a pseudo-random number	in d0
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            
00002B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B54                            
00002B54                            
00002B54                            RandomNumber:
00002B54 2238 F636                  		move.l	($FFFFF636).w,d1
00002B58 6600                       		bne.s	loc_29C0
00002B5A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B60                            
00002B60                            loc_29C0:
00002B60 2001                       		move.l	d1,d0
00002B62 E581                       		asl.l	#2,d1
00002B64 D280                       		add.l	d0,d1
00002B66 E781                       		asl.l	#3,d1
00002B68 D280                       		add.l	d0,d1
00002B6A 3001                       		move.w	d1,d0
00002B6C 4841                       		swap	d1
00002B6E D041                       		add.w	d1,d0
00002B70 3200                       		move.w	d0,d1
00002B72 4841                       		swap	d1
00002B74 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B78 4E75                       		rts	
00002B7A                            ; End of function RandomNumber
00002B7A                            
00002B7A                            
00002B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B7A                            
00002B7A                            
00002B7A                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B7A 0240 00FF                  		andi.w	#$FF,d0
00002B7E D040                       		add.w	d0,d0
00002B80 0640 0080                  		addi.w	#$80,d0
00002B84 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B88 0440 0080                  		subi.w	#$80,d0
00002B8C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B90 4E75                       		rts	
00002B92                            ; End of function CalcSine
00002B92                            
00002B92                            ; ===========================================================================
00002B92                            
00002B92                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002E12                            
00002E12                            ; ===========================================================================
00002E12 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E16 3200                       		move.w	d0,d1
00002E18 4841                       		swap	d1
00002E1A 7000                       		moveq	#0,d0
00002E1C 3200                       		move.w	d0,d1
00002E1E 7407                       		moveq	#7,d2
00002E20                            
00002E20                            loc_2C80:
00002E20 E599                       		rol.l	#2,d1
00002E22 D040                       		add.w	d0,d0
00002E24 5240                       		addq.w	#1,d0
00002E26 9240                       		sub.w	d0,d1
00002E28 6400                       		bcc.s	loc_2C9A
00002E2A D240                       		add.w	d0,d1
00002E2C 5340                       		subq.w	#1,d0
00002E2E 51CA FFF0                  		dbf	d2,loc_2C80
00002E32 E248                       		lsr.w	#1,d0
00002E34 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E38 4E75                       		rts	
00002E3A                            ; ===========================================================================
00002E3A                            
00002E3A                            loc_2C9A:
00002E3A 5240                       		addq.w	#1,d0
00002E3C 51CA FFE2                  		dbf	d2,loc_2C80
00002E40 E248                       		lsr.w	#1,d0
00002E42 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E46 4E75                       		rts	
00002E48                            
00002E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E48                            
00002E48                            
00002E48                            CalcAngle:
00002E48 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E4C 7600                       		moveq	#0,d3
00002E4E 7800                       		moveq	#0,d4
00002E50 3601                       		move.w	d1,d3
00002E52 3802                       		move.w	d2,d4
00002E54 8843                       		or.w	d3,d4
00002E56 6700                       		beq.s	loc_2D04
00002E58 3802                       		move.w	d2,d4
00002E5A 4A43                       		tst.w	d3
00002E5C 6A00 0000                  		bpl.w	loc_2CC2
00002E60 4443                       		neg.w	d3
00002E62                            
00002E62                            loc_2CC2:
00002E62 4A44                       		tst.w	d4
00002E64 6A00 0000                  		bpl.w	loc_2CCA
00002E68 4444                       		neg.w	d4
00002E6A                            
00002E6A                            loc_2CCA:
00002E6A B843                       		cmp.w	d3,d4
00002E6C 6400 0000                  		bcc.w	loc_2CDC
00002E70 E18C                       		lsl.l	#8,d4
00002E72 88C3                       		divu.w	d3,d4
00002E74 7000                       		moveq	#0,d0
00002E76 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E7A 6000                       		bra.s	loc_2CE6
00002E7C                            ; ===========================================================================
00002E7C                            
00002E7C                            loc_2CDC:				; XREF: CalcAngle
00002E7C E18B                       		lsl.l	#8,d3
00002E7E 86C4                       		divu.w	d4,d3
00002E80 7040                       		moveq	#$40,d0
00002E82 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E86                            
00002E86                            loc_2CE6:
00002E86 4A41                       		tst.w	d1
00002E88 6A00 0000                  		bpl.w	loc_2CF2
00002E8C 4440                       		neg.w	d0
00002E8E 0640 0080                  		addi.w	#$80,d0
00002E92                            
00002E92                            loc_2CF2:
00002E92 4A42                       		tst.w	d2
00002E94 6A00 0000                  		bpl.w	loc_2CFE
00002E98 4440                       		neg.w	d0
00002E9A 0640 0100                  		addi.w	#$100,d0
00002E9E                            
00002E9E                            loc_2CFE:
00002E9E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EA2 4E75                       		rts	
00002EA4                            ; ===========================================================================
00002EA4                            
00002EA4                            loc_2D04:				; XREF: CalcAngle
00002EA4 303C 0040                  		move.w	#$40,d0
00002EA8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EAC 4E75                       		rts	
00002EAE                            ; End of function CalcAngle
00002EAE                            
00002EAE                            ; ===========================================================================
00002EAE                            
00002EAE                            Angle_Data:	incbin	misc\angles.bin
00002FB0                            
00002FB0                            NoticeScreen: include	"_notice\code.asm"
00002FB0                            
00002FB0                            ;NoticeScreen:				; XREF: GameModeArray
00002FB0 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
00002FB4 4EB8 12CE                      jsr    PlaySound_Special.w      ; play music ID
00002FB8 4EB8 1FE6                      jsr    Pal_FadeFrom.w           ; fade palette out
00002FBC 46FC 2700                      move   #$2700,sr                ; disable interrupts
00002FC0 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002FC4 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
00002FC8 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
00002FCE 4EB8 15E4                      jsr    ClearPLC.w               ; clear pattern load cues
00002FD2 4EB8 11C0                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
00002FD6 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
00002FDC 41F9 0000 0000                 lea    Map_Notice.l,a0           ; load compressed mappings address
00002FE2 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
00002FE6 4EB8 1724                      jsr    EniDec.w                 ; decompress and dump
00002FEA 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
00002FF0 7227                           moveq  #$28-$01,d1              ; set map box draw width
00002FF2 741D                           moveq  #$1E-$01,d2              ; set map box draw height
00002FF4 6100 E374                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
00002FF8 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
00002FFE 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
00003004 41F9 0000 0000                 lea    Art_Notice.l,a0            ; load compressed art address
0000300A 4EB8 145E                      jsr    NemDec.w                 ; decompress and dump to VDP memory
0000300E 41F9 0000 0000                 lea    Pal_Notice.l,a0         ; load palette address
00003014 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
00003018 700F                           moveq  #$F,d0                   ; set repeat times
0000301A                            
0000301A                            
0000301A                            NoticeScreen_PalLoop:
0000301A 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
0000301C 22D8                           move.l (a0)+,(a1)+              ; ''
0000301E 51C8 FFFA                      dbf    d0,NoticeScreen_PalLoop    ; repeat until done
00003022 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00003026 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
0000302A 3C80                           move.w d0,(a6)                  ; save to VDP
0000302C 4EB8 1F30                      jsr    Pal_FadeTo               ; fade palette in
00003030                            ;	move.b	#$E1,d0
00003030                            ;	bsr.w	PlaySound_Special ; play "Notice"	sound
00003030                            
00003030                            Notice_MainLoop:
00003030 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00003036 4EB8 2B48                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
0000303A 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
0000303E 6B00                           bmi.s  Notice_GotoTitle           ; if so, branch
00003040 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00003046 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
0000304A 66E4                           bne.s  Notice_MainLoop            ; if not, branch
0000304C                            
0000304C                            Notice_GotoTitle:
0000304C 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00003052 4E75                       		rts	
00003054                            ; ---------------------------------------------------------------------------
00003054                            Art_Notice:		incbin	"_notice\Art.bin"		; rename to your needs
0000460C                            			even
0000460C                            Map_Notice:		incbin	"_notice\Map.bin"		; rename to your needs
000046AE 00                         			even
000046AE                            Pal_Notice:		incbin	"_notice\Palette.bin"		; rename to your needs
0000472E                            			even
0000472E                            			even
0000472E                            
0000472E                            ; ===========================================================================
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            ; Sega screen
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            
0000472E                            SegaScreen:				; XREF: GameModeArray
0000472E 103C 00E4                  		move.b	#$E4,d0
00004732 6100 CB9A                  		bsr.w	PlaySound_Special ; stop music
00004736 6100 CEAC                  		bsr.w	ClearPLC
0000473A 6100 D8AA                  		bsr.w	Pal_FadeFrom
0000473E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004744 3CBC 8004                  		move.w	#$8004,(a6)
00004748 3CBC 8230                  		move.w	#$8230,(a6)
0000474C 3CBC 8407                  		move.w	#$8407,(a6)
00004750 3CBC 8700                  		move.w	#$8700,(a6)
00004754 3CBC 8B00                  		move.w	#$8B00,(a6)
00004758 4238 F64E                  		clr.b	($FFFFF64E).w
0000475C 46FC 2700                  		move	#$2700,sr
00004760 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004764 0200 00BF                  		andi.b	#$BF,d0
00004768 33C0 00C0 0004             		move.w	d0,($C00004).l
0000476E 6100 CA50                  		bsr.w	ClearScreen
00004772 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000477C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004782 6100 CCDA                  		bsr.w	NemDec
00004786 43F9 00FF 0000             		lea	($FF0000).l,a1
0000478C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004792 303C 0000                  		move.w	#0,d0
00004796 6100 CF8C                  		bsr.w	EniDec
0000479A 43F9 00FF 0000             		lea	($FF0000).l,a1
000047A0 203C 6510 0003             		move.l	#$65100003,d0
000047A6 7217                       		moveq	#$17,d1
000047A8 7407                       		moveq	#7,d2
000047AA 6100 CBBE                  		bsr.w	ShowVDPGraphics
000047AE 43F9 00FF 0180             		lea	($FF0180).l,a1
000047B4 203C 4000 0003             		move.l	#$40000003,d0
000047BA 7227                       		moveq	#$27,d1
000047BC 741B                       		moveq	#$1B,d2
000047BE 6100 CBAA                  		bsr.w	ShowVDPGraphics
000047C2 7000                       		moveq	#0,d0
000047C4 6100 DAEA                  		bsr.w	PalLoad2	; load Sega logo Palette
000047C8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000047CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000047D4 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000047DA 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000047E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000047E4 0000 0040                  		ori.b	#$40,d0
000047E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000047EE                            
000047EE                            Sega_WaitPalette:
000047EE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000047F4 6100 E352                  		bsr.w	DelayProgram
000047F8 6100 D9A8                  		bsr.w	PalCycle_Sega
000047FC 66F0                       		bne.s	Sega_WaitPalette
000047FE                            
000047FE 103C 00E1                  		move.b	#$E1,d0
00004802 6100 CACA                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00004806 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000480C 6100 E33A                  		bsr.w	DelayProgram
00004810 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004816                            
00004816                            Sega_WaitEnd:
00004816 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000481C 6100 E32A                  		bsr.w	DelayProgram
00004820 4A78 F614                  		tst.w	($FFFFF614).w
00004824 6700                       		beq.s	Sega_GotoTitle
00004826 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000482C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000482E                            
0000482E                            Sega_GotoTitle:
0000482E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00004834                            	;	rts	
00004834 4EF9 0000 0000             		jmp	Owarisoft
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Title	screen
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            TitleScreen:				; XREF: GameModeArray
0000483A 103C 00E4                  		move.b	#$E4,d0
0000483E 6100 CA8E                  		bsr.w	PlaySound_Special ; stop music
00004842 6100 CDA0                  		bsr.w	ClearPLC
00004846 6100 D79E                  		bsr.w	Pal_FadeFrom
0000484A 46FC 2700                  		move	#$2700,sr
0000484E 6100 C9FE                  		bsr.w	InitMegaPCM
00004852 4DF9 00C0 0004             		lea	($C00004).l,a6
00004858 3CBC 8004                  		move.w	#$8004,(a6)
0000485C 3CBC 8230                  		move.w	#$8230,(a6)
00004860 3CBC 8407                  		move.w	#$8407,(a6)
00004864 3CBC 9001                  		move.w	#$9001,(a6)
00004868 3CBC 9200                  		move.w	#$9200,(a6)
0000486C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004870 3CBC 8720                  		move.w	#$8720,(a6)
00004874 4238 F64E                  		clr.b	($FFFFF64E).w
00004878 6100 C946                  		bsr.w	ClearScreen
0000487C 43F8 D000                  		lea	($FFFFD000).w,a1
00004880 7000                       		moveq	#0,d0
00004882 323C 07FF                  		move.w	#$7FF,d1
00004886                            
00004886                            Title_ClrObjRam:
00004886 22C0                       		move.l	d0,(a1)+
00004888 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000488C                            
0000488C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004896 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000489C 6100 CBC0                  		bsr.w	NemDec
000048A0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000048AA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000048B0 6100 CBAC                  		bsr.w	NemDec
000048B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000048C0 303C 0000                  		move.w	#0,d0
000048C4 6100 CE5E                  		bsr.w	EniDec
000048C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000048CE 203C 4000 0003             		move.l	#$40000003,d0
000048D4 7227                       		moveq	#$27,d1
000048D6 741B                       		moveq	#$1B,d2
000048D8 6100 CA90                  		bsr.w	ShowVDPGraphics
000048DC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000048E0 7000                       		moveq	#0,d0
000048E2 323C 001F                  		move.w	#$1F,d1
000048E6                            
000048E6                            Title_ClrPalette:
000048E6 22C0                       		move.l	d0,(a1)+
000048E8 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
000048EC                            
000048EC 7003                       		moveq	#3,d0		; load Sonic's Palette
000048EE 6100 D9A4                  		bsr.w	PalLoad1
000048F2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000048F8 4EB9 0000 0000             		jsr	ObjectsLoad
000048FE 4EB9 0000 0000             		jsr	BuildSprites
00004904 6100 D62A                  		bsr.w	Pal_FadeTo
00004908 46FC 2700                  		move	#$2700,sr
0000490C 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00004916 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000491C 6100 CB40                  		bsr.w	NemDec
00004920 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000492A 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004930 6100 CB2C                  		bsr.w	NemDec
00004934 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000493E 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00004944 6100 CB18                  		bsr.w	NemDec
00004948 4DF9 00C0 0000             		lea	($C00000).l,a6
0000494E 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00004956 4BF9 0000 058E             		lea	(Art_Text).l,a5
0000495C 323C 028F                  		move.w	#$28F,d1
00004960                            
00004960                            Title_LoadText:
00004960 3C9D                       		move.w	(a5)+,(a6)
00004962 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00004966                            
00004966 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000496C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00004972 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00004978 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000497E 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00004984 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
0000498A 6100 0000                  		bsr.w	LevelSizeLoad
0000498E 6100 0000                  		bsr.w	DeformBgLayer
00004992 43F8 B000                  		lea	($FFFFB000).w,a1
00004996 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	TS 16x16 mappings
0000499C 303C 0000                  		move.w	#0,d0
000049A0 6100 CD82                  		bsr.w	EniDec
000049A4 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
000049AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000049B0 6100 CEF0                  		bsr.w	KosDec
000049B4 6100 0000                  		bsr.w	LevelLayoutLoad
000049B8 6100 D62C                  		bsr.w	Pal_FadeFrom
000049BC 46FC 2700                  		move	#$2700,sr
000049C0 6100 C7FE                  		bsr.w	ClearScreen
000049C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000049CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000049D0 47F8 F708                  		lea	($FFFFF708).w,a3
000049D4 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000049D8 343C 6000                  		move.w	#$6000,d2
000049DC 6100 0000                  		bsr.w	LoadTilesFromStart2
000049E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000049E6 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000049EC 303C 0000                  		move.w	#0,d0
000049F0 6100 CD32                  		bsr.w	EniDec
000049F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000049FA 203C 4206 0003             		move.l	#$42060003,d0
00004A00 7221                       		moveq	#$21,d1
00004A02 7415                       		moveq	#$15,d2
00004A04 6100 C964                  		bsr.w	ShowVDPGraphics
00004A08 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004A12 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load TZ patterns
00004A18 6100 CA44                  		bsr.w	NemDec
00004A1C 7001                       		moveq	#1,d0		; load title screen Palette
00004A1E 6100 D874                  		bsr.w	PalLoad1
00004A22 103C 008A                  		move.b	#$8A,d0		; play title screen music
00004A26 6100 C8A6                  		bsr.w	PlaySound_Special
00004A2A 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004A30 31FC 0654 F614             		move.w	#$654,($FFFFF614).w ; run title	screen for $178	frames
00004A36 43F8 D080                  		lea	($FFFFD080).w,a1
00004A3A 7000                       		moveq	#0,d0
00004A3C 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00004A40                            
00004A40                            Title_ClrObjRam2:
00004A40 22C0                       		move.l	d0,(a1)+
00004A42 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00004A46                            
00004A46 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A4C                            
00004A4C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A52 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004A58 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004A5E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00004A64 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004A6A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004A70 4EB9 0000 0000             		jsr	ObjectsLoad
00004A76 6100 0000                  		bsr.w	DeformBgLayer
00004A7A 4EB9 0000 0000             		jsr	BuildSprites
00004A80 7000                       		moveq	#0,d0
00004A82 6100 CB34                  		bsr.w	LoadPLC2
00004A86 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004A8C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00004A92 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A96 0000 0040                  		ori.b	#$40,d0
00004A9A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AA0 6100 D48E                  		bsr.w	Pal_FadeTo
00004AA4                            
00004AA4                            loc_317C:
00004AA4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004AAA 6100 E09C                  		bsr.w	DelayProgram
00004AAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004AB4 6100 0000                  		bsr.w	DeformBgLayer
00004AB8 4EB9 0000 0000             		jsr	BuildSprites
00004ABE 6100 D020                  		bsr.w	PalCycle_Title
00004AC2 6100 CB2E                  		bsr.w	RunPLC_RAM
00004AC6 3038 D008                  		move.w	($FFFFD008).w,d0
00004ACA 5440                       		addq.w	#2,d0
00004ACC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00004AD0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00004AD4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00004AD6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00004ADC 4E75                       		rts	
00004ADE                            ; ===========================================================================
00004ADE                            
00004ADE                            Title_ChkRegion:
00004ADE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00004AE2 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00004AE4 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00004AEA 6000                       		bra.s	Title_EnterCheat
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            Title_RegionJ:				; XREF: Title_ChkRegion
00004AEC 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00004AF2                            
00004AF2                            Title_EnterCheat:			; XREF: Title_ChkRegion
00004AF2 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00004AF6 D0C0                       		adda.w	d0,a0
00004AF8 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00004AFC 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00004B00 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004B02 6600                       		bne.s	loc_3210	; if not, branch
00004B04 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00004B08 4A00                       		tst.b	d0
00004B0A 6600                       		bne.s	Title_CountC
00004B0C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004B10 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00004B14 E249                       		lsr.w	#1,d1
00004B16 0241 0003                  		andi.w	#3,d1
00004B1A 6700                       		beq.s	Title_PlayRing
00004B1C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004B20 6A00                       		bpl.s	Title_PlayRing
00004B22 7201                       		moveq	#1,d1
00004B24 1181 1001                  		move.b	d1,1(a0,d1.w)
00004B28                            
00004B28                            Title_PlayRing:
00004B28 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004B2E 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
00004B36 103C 00BF                  		move.b	#$BF,d0		; play continue sound when code is entered
00004B3A 6100 C792                  		bsr.w	PlaySound_Special
00004B3E 6000                       		bra.s	Title_CountC
00004B40                            ; ===========================================================================
00004B40                            
00004B40                            loc_3210:				; XREF: Title_EnterCheat
00004B40 4A00                       		tst.b	d0
00004B42 6700                       		beq.s	Title_CountC
00004B44 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004B4A 6700                       		beq.s	Title_CountC
00004B4C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004B52                            
00004B52                            Title_CountC:
00004B52 1038 F605                  		move.b	($FFFFF605).w,d0
00004B56 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00004B5A 6700                       		beq.s	loc_3230	; if not, branch
00004B5C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00004B60                            
00004B60                            loc_3230:
00004B60 4A78 F614                  		tst.w	($FFFFF614).w
00004B64 6700 0000                  		beq.w	Demo
00004B68 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00004B6E 6700 FF34                  		beq.w	loc_317C	; if not, branch
00004B72                            
00004B72                            Title_ChkLevSel:
00004B72 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00004B76 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B7A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00004B80 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B84 7000                       		moveq	#$00,d0				; clear d0
00004B86 11C0 FF32                  		move.b	d0,($FFFFFF32).w		; clear background strip 1 draw flags
00004B8A 11C0 FF34                  		move.b	d0,($FFFFFF34).w		; clear background strip 2 draw flags
00004B8E 11C0 FF30                  		move.b	d0,($FFFFFF30).w		; clear foreground strip draw flag
00004B92 7002                       		moveq	#2,d0
00004B94 6100 D71A                  		bsr.w	PalLoad2	; load level select Palette
00004B98 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004B9C 7000                       		moveq	#0,d0
00004B9E 323C 00DF                  		move.w	#$DF,d1
00004BA2                            
00004BA2                            Title_ClrScroll:
00004BA2 22C0                       		move.l	d0,(a1)+
00004BA4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00004BA8                            
00004BA8 21C0 F616                  		move.l	d0,($FFFFF616).w
00004BAC 46FC 2700                  		move	#$2700,sr
00004BB0 4DF9 00C0 0000             		lea	($C00000).l,a6
00004BB6 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00004BC0 323C 03FF                  		move.w	#$3FF,d1
00004BC4                            
00004BC4                            Title_ClrVram:
00004BC4 2C80                       		move.l	d0,(a6)
00004BC6 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00004BCA                            
00004BCA 6100 0000                  		bsr.w	LevSelTextLoad
00004BCE                            
00004BCE                            ; ---------------------------------------------------------------------------
00004BCE                            ; Level	Select
00004BCE                            ; ---------------------------------------------------------------------------
00004BCE                            
00004BCE                            LevelSelect:
00004BCE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004BD4 6100 DF72                  		bsr.w	DelayProgram
00004BD8 6100 0000                  		bsr.w	LevSelControls
00004BDC 6100 CA14                  		bsr.w	RunPLC_RAM
00004BE0 4AB8 F680                  		tst.l	($FFFFF680).w
00004BE4 66E8                       		bne.s	LevelSelect
00004BE6 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004BEC 67E0                       		beq.s	LevelSelect	; if not, branch
00004BEE 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004BF2 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004BF6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004BF8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004BFC 0640 0080                  		addi.w	#$80,d0
00004C00 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00004C04 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00004C06 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004C0A 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004C0C 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004C10 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004C12                            
00004C12                            LevSel_NoCheat:
00004C12 0C40 0097                  		cmpi.w	#$97,d0		; is sound $80-$94 being played?
00004C16 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00004C18 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00004C1C 65B0                       		bcs.s	LevelSelect	; if yes, branch
00004C1E                            
00004C1E                            LevSel_PlaySnd:
00004C1E 6100 C6AE                  		bsr.w	PlaySound_Special
00004C22 60AA                       		bra.s	LevelSelect
00004C24                            ; ===========================================================================
00004C24                            
00004C24                            LevSel_Ending:				; XREF: LevelSelect
00004C24 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00004C2A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004C30 4E75                       		rts	
00004C32                            ; ===========================================================================
00004C32                            
00004C32                            LevSel_Credits:				; XREF: LevelSelect
00004C32 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00004C38 103C 0091                  		move.b	#$91,d0
00004C3C 6100 C690                  		bsr.w	PlaySound_Special ; play credits music
00004C40 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004C46 4E75                       		rts	
00004C48                            ; ===========================================================================
00004C48                            
00004C48                            LevSel_Level_SS:			; XREF: LevelSelect
00004C48 D040                       		add.w	d0,d0
00004C4A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004C4E 6B00 FF7E                  		bmi.w	LevelSelect
00004C52 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004C56 6600                       		bne.s	LevSel_Level	; if not, branch
00004C58 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004C5E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004C62 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C68 7000                       		moveq	#0,d0
00004C6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C72 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C76 4E75                       		rts	
00004C78                            ; ===========================================================================
00004C78                            
00004C78                            LevSel_Level:				; XREF: LevSel_Level_SS
00004C78 0240 3FFF                  		andi.w	#$3FFF,d0
00004C7C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004C80                            
00004C80                            PlayLevel:				; XREF: ROM:00003246j ...
00004C80 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C86 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C8C 7000                       		moveq	#0,d0
00004C8E 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004C92 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C96 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C9A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C9E 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004CA2 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00004CA6 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00004CAA 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00004CAE 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00004CB2 103C 00E0                  		move.b	#$E0,d0
00004CB6 6100 C616                  		bsr.w	PlaySound_Special ; fade out music
00004CBA 4E75                       		rts	
00004CBC                            ; ===========================================================================
00004CBC                            ; ---------------------------------------------------------------------------
00004CBC                            ; Level	select - level pointers
00004CBC                            ; ---------------------------------------------------------------------------
00004CBC                            LSelectPointers:
00004CBC                            		incbin	misc\ls_point.bin
00004CE6                            		even
00004CE6                            ; ---------------------------------------------------------------------------
00004CE6                            ; Level	select codes
00004CE6                            ; ---------------------------------------------------------------------------
00004CE6                            LevelSelectCode_J:
00004CE6                            		incbin	misc\ls_jcode.bin
00004CEC                            		even
00004CEC                            
00004CEC                            LevelSelectCode_US:
00004CEC                            		incbin	misc\ls_ucode.bin
00004CF2                            		even
00004CF2                            ; ===========================================================================
00004CF2                            
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            ; Demo mode
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            
00004CF2                            Demo:					; XREF: TitleScreen
00004CF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004CF8                            
00004CF8                            loc_33B6:				; XREF: loc_33E4
00004CF8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004CFE 6100 DE48                  		bsr.w	DelayProgram
00004D02 6100 0000                  		bsr.w	DeformBgLayer
00004D06 6100 CDB8                  		bsr.w	PalCycle_Load
00004D0A 6100 C8E6                  		bsr.w	RunPLC_RAM
00004D0E 3038 D008                  		move.w	($FFFFD008).w,d0
00004D12 5440                       		addq.w	#2,d0
00004D14 31C0 D008                  		move.w	d0,($FFFFD008).w
00004D18 0C40 1C00                  		cmpi.w	#$1C00,d0
00004D1C 6500                       		bcs.s	loc_33E4
00004D1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004D24 4E75                       		rts	
00004D26                            ; ===========================================================================
00004D26                            
00004D26                            loc_33E4:				; XREF: Demo
00004D26 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00004D2C 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
00004D30 4A78 F614                  		tst.w	($FFFFF614).w
00004D34 6600 FFC2                  		bne.w	loc_33B6
00004D38 103C 00E0                  		move.b	#$E0,d0
00004D3C 6100 C590                  		bsr.w	PlaySound_Special ; fade out music
00004D40 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004D44 0240 0007                  		andi.w	#7,d0
00004D48 D040                       		add.w	d0,d0
00004D4A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004D4E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004D52 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004D56 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004D5C 6500                       		bcs.s	loc_3422	; if yes, branch
00004D5E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004D64                            
00004D64                            loc_3422:
00004D64 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004D6A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004D70 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004D74 6600                       		bne.s	Demo_Level	; if not, branch
00004D76 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004D7C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004D80 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004D84                            
00004D84                            Demo_Level:
00004D84 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004D8A 7000                       		moveq	#0,d0
00004D8C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D90 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D94 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004D98 4E75                       		rts	
00004D9A                            ; ===========================================================================
00004D9A                            ; ---------------------------------------------------------------------------
00004D9A                            ; Levels used in demos
00004D9A                            ; ---------------------------------------------------------------------------
00004D9A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004DA2                            		even
00004DA2                            
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            ; Subroutine to	change what you're selecting in the level select
00004DA2                            ; ---------------------------------------------------------------------------
00004DA2                            
00004DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DA2                            
00004DA2                            
00004DA2                            LevSelControls:				; XREF: LevelSelect
00004DA2 1238 F605                  		move.b	($FFFFF605).w,d1
00004DA6 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004DAA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004DAC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004DB0 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004DB2                            
00004DB2                            LevSel_UpDown:
00004DB2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004DB8 1238 F604                  		move.b	($FFFFF604).w,d1
00004DBC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004DC0 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004DC2 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004DC6 0801 0000                  		btst	#0,d1		; is up	pressed?
00004DCA 6700                       		beq.s	LevSel_Down	; if not, branch
00004DCC 5340                       		subq.w	#1,d0		; move up 1 selection
00004DCE 6400                       		bcc.s	LevSel_Down
00004DD0 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004DD2                            
00004DD2                            LevSel_Down:
00004DD2 0801 0001                  		btst	#1,d1		; is down pressed?
00004DD6 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004DD8 5240                       		addq.w	#1,d0		; move down 1 selection
00004DDA 0C40 0015                  		cmpi.w	#$15,d0
00004DDE 6500                       		bcs.s	LevSel_Refresh
00004DE0 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004DE2                            
00004DE2                            LevSel_Refresh:
00004DE2 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004DE6 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004DEA 4E75                       		rts	
00004DEC                            ; ===========================================================================
00004DEC                            
00004DEC                            LevSel_SndTest:				; XREF: LevSelControls
00004DEC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004DF2 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004DF4 1238 F605                  		move.b	($FFFFF605).w,d1
00004DF8 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00004DFC 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004DFE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004E02 0801 0002                  		btst	#2,d1		; is left pressed?
00004E06 6700                       		beq.s	LevSel_Right	; if not, branch
00004E08 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004E0A 6400                       		bcc.s	LevSel_Right
00004E0C 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004E0E                            
00004E0E                            LevSel_Right:
00004E0E 0801 0003                  		btst	#3,d1		; is right pressed?
00004E12 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004E14 5240                       		addq.w	#1,d0		; add 1	to sound test
00004E16 0C40 0050                  		cmpi.w	#$50,d0
00004E1A 6500                       		bcs.s	LevSel_Refresh2
00004E1C 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004E1E                            
00004E1E                            LevSel_Refresh2:
00004E1E 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004E22 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004E26                            
00004E26                            LevSel_NoMove:
00004E26 4E75                       		rts	
00004E28                            ; End of function LevSelControls
00004E28                            
00004E28                            ; ---------------------------------------------------------------------------
00004E28                            ; Subroutine to load level select text
00004E28                            ; ---------------------------------------------------------------------------
00004E28                            
00004E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E28                            
00004E28                            
00004E28                            LevSelTextLoad:				; XREF: TitleScreen
00004E28 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E2E 4DF9 00C0 0000             		lea	($C00000).l,a6
00004E34 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004E3A 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004E3E 7214                       		moveq	#$14,d1		; number of lines of text
00004E40                            
00004E40                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004E40 2D44 0004                  		move.l	d4,4(a6)
00004E44 6100 0000                  		bsr.w	LevSel_ChgLine
00004E48 0684 0080 0000             		addi.l	#$800000,d4
00004E4E 51C9 FFF0                  		dbf	d1,loc_34FE
00004E52 7000                       		moveq	#0,d0
00004E54 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004E58 3200                       		move.w	d0,d1
00004E5A 283C 6210 0003             		move.l	#$62100003,d4
00004E60 EF48                       		lsl.w	#7,d0
00004E62 4840                       		swap	d0
00004E64 D880                       		add.l	d0,d4
00004E66 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E6C E749                       		lsl.w	#3,d1
00004E6E 3001                       		move.w	d1,d0
00004E70 D241                       		add.w	d1,d1
00004E72 D240                       		add.w	d0,d1
00004E74 D2C1                       		adda.w	d1,a1
00004E76 363C C680                  		move.w	#$C680,d3
00004E7A 2D44 0004                  		move.l	d4,4(a6)
00004E7E 6100 0000                  		bsr.w	LevSel_ChgLine
00004E82 363C E680                  		move.w	#$E680,d3
00004E86 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004E8C 6600                       		bne.s	loc_3550
00004E8E 363C C680                  		move.w	#$C680,d3
00004E92                            
00004E92                            loc_3550:
00004E92 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004E9C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004EA0 0640 0080                  		addi.w	#$80,d0
00004EA4 1400                       		move.b	d0,d2
00004EA6 E808                       		lsr.b	#4,d0
00004EA8 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EAC 1002                       		move.b	d2,d0
00004EAE 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EB2 4E75                       		rts	
00004EB4                            ; End of function LevSelTextLoad
00004EB4                            
00004EB4                            
00004EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EB4                            
00004EB4                            
00004EB4                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004EB4 0240 000F                  		andi.w	#$F,d0
00004EB8 0C00 000A                  		cmpi.b	#$A,d0
00004EBC 6500                       		bcs.s	loc_3580
00004EBE 5E00                       		addi.b	#7,d0
00004EC0                            
00004EC0                            loc_3580:
00004EC0 D043                       		add.w	d3,d0
00004EC2 3C80                       		move.w	d0,(a6)
00004EC4 4E75                       		rts	
00004EC6                            ; End of function LevSel_ChgSnd
00004EC6                            
00004EC6                            
00004EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EC6                            
00004EC6                            
00004EC6                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004EC6 7417                       		moveq	#$17,d2		; number of characters per line
00004EC8                            
00004EC8                            loc_3588:
00004EC8 7000                       		moveq	#0,d0
00004ECA 1019                       		move.b	(a1)+,d0
00004ECC 6A00                       		bpl.s	loc_3598
00004ECE 3CBC 0000                  		move.w	#0,(a6)
00004ED2 51CA FFF4                  		dbf	d2,loc_3588
00004ED6 4E75                       		rts	
00004ED8                            ; ===========================================================================
00004ED8                            
00004ED8                            loc_3598:				; XREF: LevSel_ChgLine
00004ED8 D043                       		add.w	d3,d0
00004EDA 3C80                       		move.w	d0,(a6)
00004EDC 51CA FFEA                  		dbf	d2,loc_3588
00004EE0 4E75                       		rts	
00004EE2                            ; End of function LevSel_ChgLine
00004EE2                            
00004EE2                            ; ===========================================================================
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            ; Level	select menu text
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            LevelMenuText:	incbin	misc\menutext.bin
000050DA                            		even
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            ; Music	playlist
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            MusicList_Levels:
000050DA 8383 8383                  		dc.b $83, $83, $83, $83
000050DE 8282 8286                  		dc.b $82, $82, $82, $86
000050E2 8197 8197                  		dc.b $81, $97, $81, $97
000050E6 8484 8484                  		dc.b $84, $84, $84, $84
000050EA 8585 8585                  		dc.b $85, $85, $85, $85
000050EE 8686 8D86                  		dc.b $86, $86, $8D, $86
000050F2                            		even
000050F2                            MusicList_SpecialStages:
000050F2 8989 8989 8989             		dc.b $89, $89, $89, $89, $89, $89
000050F8                            		even
000050F8                            MusicList_Credits:
000050F8 9191                       		dc.b $91, $91
000050FA                            		even
000050FA                            MusicList_Endings:
000050FA 8B8B                       		dc.b $8B, $8B
000050FC                            		even
000050FC                            MusicList_Bosses:
000050FC 8C8C 8C8C 8C8C             		dc.b $8C, $8C, $8C, $8C, $8C, $8C
00005102                            		even
00005102                            ; ===========================================================================
00005102                            
00005102                            ; ---------------------------------------------------------------------------
00005102                            ; Level
00005102                            ; ---------------------------------------------------------------------------
00005102                            
00005102                            Level:					; XREF: GameModeArray
00005102 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005108 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000510C 6B00                       		bmi.s	loc_37B6
0000510E 103C 00E0                  		move.b	#$E0,d0
00005112 6100 C1BA                  		bsr.w	PlaySound_Special ; fade out music
00005116                            
00005116                            loc_37B6:
00005116 6100 C4CC                  		bsr.w	ClearPLC
0000511A 6100 CECA                  		bsr.w	Pal_FadeFrom
0000511E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005122 6B00                       		bmi.s	Level_ClrRam
00005124 46FC 2700                  		move	#$2700,sr
00005128 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005132 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005138 6100 C324                  		bsr.w	NemDec
0000513C 46FC 2300                  		move	#$2300,sr
00005140 7000                       		moveq	#0,d0
00005142 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005146 E948                       		lsl.w	#4,d0
00005148 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000514E 45F2 0000                  		lea	(a2,d0.w),a2
00005152 7000                       		moveq	#0,d0
00005154 1012                       		move.b	(a2),d0
00005156 6700                       		beq.s	loc_37FC
00005158 6100 C42C                  		bsr.w	LoadPLC		; load level patterns
0000515C                            
0000515C                            loc_37FC:
0000515C 7001                       		moveq	#1,d0
0000515E 6100 C426                  		bsr.w	LoadPLC		; load standard	patterns
00005162                            
00005162                            Level_ClrRam:
00005162 43F8 D000                  		lea	($FFFFD000).w,a1
00005166 7000                       		moveq	#0,d0
00005168 323C 07FF                  		move.w	#$7FF,d1
0000516C                            
0000516C                            Level_ClrObjRam:
0000516C 22C0                       		move.l	d0,(a1)+
0000516E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00005172                            
00005172 43F8 F628                  		lea	($FFFFF628).w,a1
00005176 7000                       		moveq	#0,d0
00005178 323C 0015                  		move.w	#$15,d1
0000517C                            
0000517C                            Level_ClrVars:
0000517C 22C0                       		move.l	d0,(a1)+
0000517E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00005182                            
00005182 43F8 F700                  		lea	($FFFFF700).w,a1
00005186 7000                       		moveq	#0,d0
00005188 323C 003F                  		move.w	#$3F,d1
0000518C                            
0000518C                            Level_ClrVars2:
0000518C 22C0                       		move.l	d0,(a1)+
0000518E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00005192                            
00005192 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005196 7000                       		moveq	#0,d0
00005198 323C 0047                  		move.w	#$47,d1
0000519C                            
0000519C                            Level_ClrVars3:
0000519C 22C0                       		move.l	d0,(a1)+
0000519E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000051A2                            
000051A2 46FC 2700                  		move	#$2700,sr
000051A6 6100 C018                  		bsr.w	ClearScreen
000051AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000051B0 3CBC 8B03                  		move.w	#$8B03,(a6)
000051B4 3CBC 8230                  		move.w	#$8230,(a6)
000051B8 3CBC 8407                  		move.w	#$8407,(a6)
000051BC 3CBC 857C                  		move.w	#$857C,(a6)
000051C0 3CBC 9001                  		move.w	#$9001,(a6)
000051C4 3CBC 8004                  		move.w	#$8004,(a6)
000051C8 3CBC 8720                  		move.w	#$8720,(a6)
000051CC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051D2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051D6                            		
000051D6 4278 C800                  		clr.w	($FFFFC800).w
000051DA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000051E2                            		
000051E2 11FC 0000 FFBC             		move.b	#0,($FFFFFFBC).w				; Clear sonic drowned flag
000051E8                            		
000051E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000051EE 6600                       		bne.s	Level_LoadPal	; if not, branch
000051F0 3CBC 8014                  		move.w	#$8014,(a6)
000051F4 7000                       		moveq	#0,d0
000051F6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000051FA D040                       		add.w	d0,d0
000051FC 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00005202 3031 0000                  		move.w	(a1,d0.w),d0
00005206 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000520A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000520E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00005212 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00005216 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000521A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00005220                            
00005220                            Level_LoadPal:
00005220 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005226 46FC 2300                  		move	#$2300,sr
0000522A 7003                       		moveq	#3,d0
0000522C 6100 D082                  		bsr.w	PalLoad2	; load Sonic's Palette line
00005230 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005236 6600                       		bne.s	Level_GetBgm	; if not, branch
00005238 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
0000523A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00005240 6600                       		bne.s	Level_WaterPal	; if not, branch
00005242 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
00005244                            
00005244                            Level_WaterPal:
00005244 6100 D082                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
00005248 4A38 FE30                  		tst.b	($FFFFFE30).w
0000524C 6700                       		beq.s	Level_GetBgm
0000524E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00005254                            
00005254                            Level_GetBgm:
00005254 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005258 6B00 0000                  		bmi.w	loc_3946
0000525C                            		
0000525C 7000                       		moveq	#0,d0
0000525E 3238 FE10                  		move.w	($FFFFFE10).w,d1
00005262 E419                       		ror.b	#2,d1
00005264 EC49                       		lsr.w	#6,d1
00005266 43F9 0000 50DA             		lea	(MusicList_Levels).l,a1
0000526C 1031 1000                  		move.b	(a1,d1.w),d0		; get d0-th entry from the playlist
00005270 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
00005274 4EB9 0000 0000             		jsr	CtrlLevelMusic
0000527A                            		
0000527A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w 	; load title	card object
00005280                            
00005280                            Level_TtlCard:
00005280 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005286 6100 D8C0                  		bsr.w	DelayProgram
0000528A 4EB9 0000 0000             		jsr	ObjectsLoad
00005290 4EB9 0000 0000             		jsr	BuildSprites
00005296 6100 C35A                  		bsr.w	RunPLC_RAM
0000529A 3038 D108                  		move.w	($FFFFD108).w,d0
0000529E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000052A2 66DC                       		bne.s	Level_TtlCard	; if not, branch
000052A4 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000052A8 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000052AA 4EB9 0000 0000             		jsr	Hud_Base
000052B0                            
000052B0                            loc_3946:
000052B0 7003                       		moveq	#3,d0
000052B2 6100 CFE0                  		bsr.w	PalLoad1	; load Sonic's Palette line
000052B6 6100 0000                  		bsr.w	LevelSizeLoad
000052BA 6100 0000                  		bsr.w	DeformBgLayer
000052BE 08F8 0002 F754             		bset	#2,($FFFFF754).w
000052C4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
000052C8 6100 0000                  		bsr.w	LoadTilesFromStart
000052CC 4EB9 0000 0000             		jsr	FloorLog_Unk
000052D2 6100 0000                  		bsr.w	ColIndexLoad
000052D6 6100 0000                  		bsr.w	LZWaterEffects
000052DA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000052E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000052E4 6B00                       		bmi.s	Level_ChkDebug
000052E6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000052EC                            
000052EC                            Level_ChkDebug:
000052EC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000052F0 6700                       		beq.s	Level_ChkWater	; if not, branch
000052F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000052F8 6700                       		beq.s	Level_ChkWater	; if not, branch
000052FA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005300                            
00005300                            Level_ChkWater:
00005300 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00005306 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000530C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005312 6600                       		bne.s	Level_LoadObj	; if not, branch
00005314 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000531A 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00005320 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00005326 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000532C                            
0000532C                            Level_LoadObj:
0000532C 4EB9 0000 0000             		jsr	ObjPosLoad
00005332 4EB9 0000 0000             		jsr	ObjectsLoad
00005338 4EB9 0000 0000             		jsr	BuildSprites
0000533E 7000                       		moveq	#0,d0
00005340 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00005344 6600                       		bne.s	loc_39E8	; if yes, branch
00005346 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000534A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000534E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00005352                            
00005352                            loc_39E8:
00005352 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00005356 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000535A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000535E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00005362 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005366 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000536A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000536E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005372 6100 0000                  		bsr.w	OscillateNumInit
00005376 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000537C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00005382 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00005388 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000538E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00005394 7000                       		moveq	#0,d0
00005396 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000539A E548                       		lsl.w	#2,d0
0000539C 2271 0000                  		movea.l	(a1,d0.w),a1
000053A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000053A4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000053A6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000053AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000053B0 5340                       		subq.w	#1,d0
000053B2 E548                       		lsl.w	#2,d0
000053B4 2271 0000                  		movea.l	(a1,d0.w),a1
000053B8                            
000053B8                            Level_Demo:
000053B8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000053BE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000053C2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000053C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000053CC 6A00                       		bpl.s	Level_ChkWaterPal
000053CE 31FC 021C F614             		move.w	#540,($FFFFF614).w
000053D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000053DA 6600                       		bne.s	Level_ChkWaterPal
000053DC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000053E2                            
000053E2                            Level_ChkWaterPal:
000053E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000053E8 6600                       		bne.s	Level_Delay	; if not, branch
000053EA 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
000053EC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000053F2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000053F4 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
000053F6                            
000053F6                            Level_WaterPal2:
000053F6 6100 CEEC                  		bsr.w	PalLoad4_Water
000053FA                            
000053FA                            Level_Delay:
000053FA 323C 0003                  		move.w	#3,d1
000053FE                            
000053FE                            Level_DelayLoop:
000053FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005404 6100 D742                  		bsr.w	DelayProgram
00005408 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000540C                            
0000540C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005412 6100 CB22                  		bsr.w	Pal_FadeTo2
00005416 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000541A 6B00                       		bmi.s	Level_ClrCardArt
0000541C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00005420 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00005424 5838 D124                  		addq.b	#4,($FFFFD124).w
00005428 5838 D164                  		addq.b	#4,($FFFFD164).w
0000542C 6000                       		bra.s	Level_StartGame
0000542E                            ; ===========================================================================
0000542E                            
0000542E                            Level_ClrCardArt:
0000542E 7002                       		moveq	#2,d0
00005430 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
00005436 7000                       		moveq	#0,d0
00005438 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000543C 0640 0015                  		addi.w	#$15,d0
00005440 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00005446                            
00005446                            Level_StartGame:
00005446 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000544C                            
0000544C                            ; ---------------------------------------------------------------------------
0000544C                            ; Main level loop (when	all title card and loading sequences are finished)
0000544C                            ; ---------------------------------------------------------------------------
0000544C                            
0000544C                            Level_MainLoop:
0000544C 6100 BEA4                  		bsr.w	PauseGame
00005450 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005456 6100 D6F0                  		bsr.w	DelayProgram
0000545A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000545E 6100 0000                  		bsr.w	MoveSonicInDemo
00005462 6100 0000                  		bsr.w	LZWaterEffects
00005466 4EB9 0000 0000             		jsr	ObjectsLoad
0000546C 4A78 FE08                  		tst.w	($FFFFFE08).w
00005470 6600                       		bne.s	loc_3B10
00005472 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005478 6400                       		bcc.s	loc_3B14
0000547A                            
0000547A                            loc_3B10:
0000547A 6100 0000                  		bsr.w	DeformBgLayer
0000547E                            
0000547E                            loc_3B14:
0000547E 4EB9 0000 0000             		jsr	BuildSprites
00005484 4EB9 0000 0000             		jsr	ObjPosLoad
0000548A 6100 C634                  		bsr.w	PalCycle_Load
0000548E 6100 C162                  		bsr.w	RunPLC_RAM
00005492 6100 0000                  		bsr.w	OscillateNumDo
00005496 6100 0000                  		bsr.w	ChangeRingFrame
0000549A 6100 0000                  		bsr.w	SignpostArtLoad
0000549E 4EB9 0000 0000             		jsr	CtrlLevelMusic
000054A4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054AA 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000054AC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000054B0 6600 FC50                  		bne.w	Level		; if yes, branch
000054B4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000054BA 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000054BE 4E75                       		rts	
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            Level_ChkDemo:				; XREF: Level_MainLoop
000054C0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054C4 6600                       		bne.s	Level_EndDemo	; if yes, branch
000054C6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054CA 6700                       		beq.s	Level_EndDemo	; if not, branch
000054CC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054D2 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000054D6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054DC 4E75                       		rts	
000054DE                            ; ===========================================================================
000054DE                            
000054DE                            Level_EndDemo:				; XREF: Level_ChkDemo
000054DE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000054E4 6600                       		bne.s	loc_3B88	; if not, branch
000054E6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054EC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054F0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000054F2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000054F8                            
000054F8                            loc_3B88:
000054F8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000054FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005504 4278 F794                  		clr.w	($FFFFF794).w
00005508                            
00005508                            loc_3B98:
00005508 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000550E 6100 D638                  		bsr.w	DelayProgram
00005512 6100 0000                  		bsr.w	MoveSonicInDemo
00005516 4EB9 0000 0000             		jsr	ObjectsLoad
0000551C 4EB9 0000 0000             		jsr	BuildSprites
00005522 4EB9 0000 0000             		jsr	ObjPosLoad
00005528 5378 F794                  		subq.w	#1,($FFFFF794).w
0000552C 6A00                       		bpl.s	loc_3BC8
0000552E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005534 6100 CAD6                  		bsr.w	Pal_FadeOut
00005538                            
00005538                            loc_3BC8:
00005538 4A78 F614                  		tst.w	($FFFFF614).w
0000553C 66CA                       		bne.s	loc_3B98
0000553E 4E75                       		rts	
00005540                            ; ===========================================================================
00005540                            ; ---------------------------------------------------------------------------
00005540                            ; Subroutine to	do special water effects in Labyrinth Zone
00005540                            ; ---------------------------------------------------------------------------
00005540                            
00005540                            LZWaterEffects:				; XREF: Level
00005540 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00005546 6600                       		bne.s	locret_3C28	; if not, branch
00005548 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000554E 6400                       		bcc.s	LZMoveWater
00005550 6100 0000                  		bsr.w	LZWindTunnels
00005554 6100 0000                  		bsr.w	LZWaterSlides
00005558 6100 0000                  		bsr.w	LZDynamicWater
0000555C                            
0000555C                            LZMoveWater:
0000555C 4238 F64E                  		clr.b	($FFFFF64E).w
00005560 7000                       		moveq	#0,d0
00005562 1038 FE60                  		move.b	($FFFFFE60).w,d0
00005566 E248                       		lsr.w	#1,d0
00005568 D078 F648                  		add.w	($FFFFF648).w,d0
0000556C 31C0 F646                  		move.w	d0,($FFFFF646).w
00005570 3038 F646                  		move.w	($FFFFF646).w,d0
00005574 9078 F704                  		sub.w	($FFFFF704).w,d0
00005578 6400                       		bcc.s	loc_3C1A
0000557A 4A40                       		tst.w	d0
0000557C 6A00                       		bpl.s	loc_3C1A
0000557E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00005584 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000558A                            
0000558A                            loc_3C1A:
0000558A 0C40 00DF                  		cmpi.w	#$DF,d0
0000558E 6500                       		bcs.s	loc_3C24
00005590 303C 00DF                  		move.w	#$DF,d0
00005594                            
00005594                            loc_3C24:
00005594 11C0 F625                  		move.b	d0,($FFFFF625).w
00005598                            
00005598                            locret_3C28:
00005598 4E75                       		rts	
0000559A                            ; ===========================================================================
0000559A                            ; ---------------------------------------------------------------------------
0000559A                            ; Labyrinth default water heights
0000559A                            ; ---------------------------------------------------------------------------
0000559A                            WaterHeight:	incbin	misc\lz_heigh.bin
000055A2                            		even
000055A2                            ; ===========================================================================
000055A2                            
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            ; Labyrinth dynamic water routines
000055A2                            ; ---------------------------------------------------------------------------
000055A2                            
000055A2                            LZDynamicWater:				; XREF: LZWaterEffects
000055A2 7000                       		moveq	#0,d0
000055A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000055A8 D040                       		add.w	d0,d0
000055AA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000055AE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000055B2 7200                       		moveq	#0,d1
000055B4 1238 F64C                  		move.b	($FFFFF64C).w,d1
000055B8 3038 F64A                  		move.w	($FFFFF64A).w,d0
000055BC 9078 F648                  		sub.w	($FFFFF648).w,d0
000055C0 6700                       		beq.s	locret_3C5A
000055C2 6400                       		bcc.s	loc_3C56
000055C4 4441                       		neg.w	d1
000055C6                            
000055C6                            loc_3C56:
000055C6 D378 F648                  		add.w	d1,($FFFFF648).w
000055CA                            
000055CA                            locret_3C5A:
000055CA 4E75                       		rts	
000055CC                            ; ===========================================================================
000055CC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000055CE 0000                       		dc.w DynWater_LZ2-DynWater_Index
000055D0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000055D2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000055D4                            ; ===========================================================================
000055D4                            
000055D4                            DynWater_LZ1:				; XREF: DynWater_Index
000055D4 3038 F700                  		move.w	($FFFFF700).w,d0
000055D8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000055DC 6600                       		bne.s	loc_3CD0
000055DE 323C 00B8                  		move.w	#$B8,d1
000055E2 0C40 0600                  		cmpi.w	#$600,d0
000055E6 6500                       		bcs.s	loc_3CB4
000055E8 323C 0108                  		move.w	#$108,d1
000055EC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000055F2 6500                       		bcs.s	loc_3CBA
000055F4 0C40 0C00                  		cmpi.w	#$C00,d0
000055F8 6500                       		bcs.s	loc_3CB4
000055FA 323C 0318                  		move.w	#$318,d1
000055FE 0C40 1080                  		cmpi.w	#$1080,d0
00005602 6500                       		bcs.s	loc_3CB4
00005604 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000560A 323C 05C8                  		move.w	#$5C8,d1
0000560E 0C40 1380                  		cmpi.w	#$1380,d0
00005612 6500                       		bcs.s	loc_3CB4
00005614 323C 03A8                  		move.w	#$3A8,d1
00005618 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000561C 6600                       		bne.s	loc_3CB4
0000561E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00005624                            
00005624                            loc_3CB4:
00005624 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005628 4E75                       		rts	
0000562A                            ; ===========================================================================
0000562A                            
0000562A                            loc_3CBA:				; XREF: DynWater_LZ1
0000562A 0C40 0C80                  		cmpi.w	#$C80,d0
0000562E 65F4                       		bcs.s	loc_3CB4
00005630 323C 00E8                  		move.w	#$E8,d1
00005634 0C40 1500                  		cmpi.w	#$1500,d0
00005638 65EA                       		bcs.s	loc_3CB4
0000563A 323C 0108                  		move.w	#$108,d1
0000563E 60E4                       		bra.s	loc_3CB4
00005640                            ; ===========================================================================
00005640                            
00005640                            loc_3CD0:				; XREF: DynWater_LZ1
00005640 5302                       		subq.b	#1,d2
00005642 6600                       		bne.s	locret_3CF4
00005644 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000564A 6400                       		bcc.s	locret_3CF4
0000564C 323C 03A8                  		move.w	#$3A8,d1
00005650 0C40 1300                  		cmpi.w	#$1300,d0
00005654 6500                       		bcs.s	loc_3CF0
00005656 323C 0108                  		move.w	#$108,d1
0000565A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005660                            
00005660                            loc_3CF0:
00005660 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005664                            
00005664                            locret_3CF4:
00005664 4E75                       		rts	
00005666                            ; ===========================================================================
00005666                            
00005666                            DynWater_LZ2:				; XREF: DynWater_Index
00005666 3038 F700                  		move.w	($FFFFF700).w,d0
0000566A 323C 0328                  		move.w	#$328,d1
0000566E 0C40 0500                  		cmpi.w	#$500,d0
00005672 6500                       		bcs.s	loc_3D12
00005674 323C 03C8                  		move.w	#$3C8,d1
00005678 0C40 0B00                  		cmpi.w	#$B00,d0
0000567C 6500                       		bcs.s	loc_3D12
0000567E 323C 0428                  		move.w	#$428,d1
00005682                            
00005682                            loc_3D12:
00005682 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005686 4E75                       		rts	
00005688                            ; ===========================================================================
00005688                            
00005688                            DynWater_LZ3:				; XREF: DynWater_Index
00005688 3038 F700                  		move.w	($FFFFF700).w,d0
0000568C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00005690 6600                       		bne.s	loc_3D5E
00005692 323C 0900                  		move.w	#$900,d1
00005696 0C40 0600                  		cmpi.w	#$600,d0
0000569A 6500                       		bcs.s	loc_3D54
0000569C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000056A2 6500                       		bcs.s	loc_3D54
000056A4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056AA 6400                       		bcc.s	loc_3D54
000056AC 323C 04C8                  		move.w	#$4C8,d1
000056B0 21FC 0000 0000 A400        		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
000056B8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000056BE 303C 00B7                  		move.w	#$B7,d0
000056C2 6100 BC0A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000056C6                            
000056C6                            loc_3D54:
000056C6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056CA 31C1 F648                  		move.w	d1,($FFFFF648).w
000056CE 4E75                       		rts	
000056D0                            ; ===========================================================================
000056D0                            
000056D0                            loc_3D5E:				; XREF: DynWater_LZ3
000056D0 5302                       		subq.b	#1,d2
000056D2 6600                       		bne.s	loc_3DA8
000056D4 323C 04C8                  		move.w	#$4C8,d1
000056D8 0C40 0770                  		cmpi.w	#$770,d0
000056DC 6500                       		bcs.s	loc_3DA2
000056DE 323C 0308                  		move.w	#$308,d1
000056E2 0C40 1400                  		cmpi.w	#$1400,d0
000056E6 6500                       		bcs.s	loc_3DA2
000056E8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000056EE 6700                       		beq.s	loc_3D8E
000056F0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056F6 6400                       		bcc.s	loc_3D8E
000056F8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000056FE 6400                       		bcc.s	loc_3DA2
00005700                            
00005700                            loc_3D8E:
00005700 323C 0508                  		move.w	#$508,d1
00005704 31C1 F648                  		move.w	d1,($FFFFF648).w
00005708 0C40 1770                  		cmpi.w	#$1770,d0
0000570C 6500                       		bcs.s	loc_3DA2
0000570E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00005714                            
00005714                            loc_3DA2:
00005714 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005718 4E75                       		rts	
0000571A                            ; ===========================================================================
0000571A                            
0000571A                            loc_3DA8:
0000571A 5302                       		subq.b	#1,d2
0000571C 6600                       		bne.s	loc_3DD2
0000571E 323C 0508                  		move.w	#$508,d1
00005722 0C40 1860                  		cmpi.w	#$1860,d0
00005726 6500                       		bcs.s	loc_3DCC
00005728 323C 0188                  		move.w	#$188,d1
0000572C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005730 6400                       		bcc.s	loc_3DC6
00005732 B278 F648                  		cmp.w	($FFFFF648).w,d1
00005736 6600                       		bne.s	loc_3DCC
00005738                            
00005738                            loc_3DC6:
00005738 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000573E                            
0000573E                            loc_3DCC:
0000573E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005742 4E75                       		rts	
00005744                            ; ===========================================================================
00005744                            
00005744                            loc_3DD2:
00005744 5302                       		subq.b	#1,d2
00005746 6600                       		bne.s	loc_3E0E
00005748 323C 0188                  		move.w	#$188,d1
0000574C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005750 6500                       		bcs.s	loc_3E04
00005752 323C 0900                  		move.w	#$900,d1
00005756 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000575A 6500                       		bcs.s	loc_3E04
0000575C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00005762 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00005768 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000576E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00005774 4E75                       		rts	
00005776                            ; ===========================================================================
00005776                            
00005776                            loc_3E04:
00005776 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000577A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000577E 4E75                       		rts	
00005780                            ; ===========================================================================
00005780                            
00005780                            loc_3E0E:
00005780 0C40 1E00                  		cmpi.w	#$1E00,d0
00005784 6500                       		bcs.s	locret_3E1A
00005786 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000578C                            
0000578C                            locret_3E1A:
0000578C 4E75                       		rts	
0000578E                            ; ===========================================================================
0000578E                            
0000578E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000578E 323C 0228                  		move.w	#$228,d1
00005792 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00005798 6500                       		bcs.s	loc_3E2C
0000579A 323C 04C8                  		move.w	#$4C8,d1
0000579E                            
0000579E                            loc_3E2C:
0000579E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000057A2 4E75                       		rts
000057A4                            
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            ; Labyrinth Zone "wind tunnels"	subroutine
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            
000057A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057A4                            
000057A4                            
000057A4                            LZWindTunnels:				; XREF: LZWaterEffects
000057A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000057A8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000057AC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000057B2 7000                       		moveq	#0,d0
000057B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000057B8 E748                       		lsl.w	#3,d0
000057BA D4C0                       		adda.w	d0,a2
000057BC 7200                       		moveq	#0,d1
000057BE 4A38 FE11                  		tst.b	($FFFFFE11).w
000057C2 6600                       		bne.s	loc_3E56
000057C4 7201                       		moveq	#1,d1
000057C6 514A                       		subq.w	#8,a2
000057C8                            
000057C8                            loc_3E56:
000057C8 43F8 D000                  		lea	($FFFFD000).w,a1
000057CC                            
000057CC                            LZWind_Loop:
000057CC 3029 0008                  		move.w	8(a1),d0
000057D0 B052                       		cmp.w	(a2),d0
000057D2 6500 0000                  		bcs.w	loc_3EF4
000057D6 B06A 0004                  		cmp.w	4(a2),d0
000057DA 6400 0000                  		bcc.w	loc_3EF4
000057DE 3429 000C                  		move.w	$C(a1),d2
000057E2 B46A 0002                  		cmp.w	2(a2),d2
000057E6 6500                       		bcs.s	loc_3EF4
000057E8 B46A 0006                  		cmp.w	6(a2),d2
000057EC 6400                       		bcc.s	loc_3EF4
000057EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000057F2 0200 003F                  		andi.b	#$3F,d0
000057F6 6600                       		bne.s	loc_3E90
000057F8 303C 00D0                  		move.w	#$D0,d0
000057FC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rushing water sound
00005802                            
00005802                            loc_3E90:
00005802 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00005806 6600 0000                  		bne.w	locret_3F0A
0000580A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00005810 6400                       		bcc.s	loc_3F06
00005812 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00005818 0440 0080                  		subi.w	#$80,d0
0000581C B052                       		cmp.w	(a2),d0
0000581E 6400                       		bcc.s	LZWind_Move
00005820 7002                       		moveq	#2,d0
00005822 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00005828 6600                       		bne.s	loc_3EBA
0000582A 4440                       		neg.w	d0
0000582C                            
0000582C                            loc_3EBA:
0000582C D169 000C                  		add.w	d0,$C(a1)
00005830                            
00005830                            LZWind_Move:
00005830 5869 0008                  		addq.w	#4,8(a1)
00005834 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000583A 337C 0000 0012             		move.w	#0,$12(a1)
00005840 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00005846 08E9 0001 0022             		bset	#1,$22(a1)
0000584C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00005852 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00005854 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00005858                            
00005858                            LZWind_MoveDown:
00005858 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000585E 6700                       		beq.s	locret_3EF2	; if not, branch
00005860 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00005864                            
00005864                            locret_3EF2:
00005864 4E75                       		rts	
00005866                            ; ===========================================================================
00005866                            
00005866                            loc_3EF4:				; XREF: LZWindTunnels
00005866 504A                       		addq.w	#8,a2
00005868 51C9 FF62                  		dbf	d1,LZWind_Loop
0000586C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00005870 6700                       		beq.s	locret_3F0A
00005872 137C 0000 001C             		move.b	#0,$1C(a1)
00005878                            
00005878                            loc_3F06:
00005878 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000587C                            
0000587C                            locret_3F0A:
0000587C 4E75                       		rts	
0000587E                            ; End of function LZWindTunnels
0000587E                            
0000587E                            ; ===========================================================================
0000587E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00005886 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00005898 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000058A6                            					; XREF: LZWindTunnels
000058A6                            		even
000058A6                            
000058A6                            ; ---------------------------------------------------------------------------
000058A6                            ; Labyrinth Zone water slide subroutine
000058A6                            ; ---------------------------------------------------------------------------
000058A6                            
000058A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058A6                            
000058A6                            
000058A6                            LZWaterSlides:				; XREF: LZWaterEffects
000058A6 43F8 D000                  		lea	($FFFFD000).w,a1
000058AA 0829 0001 0022             		btst	#1,$22(a1)
000058B0 6600                       		bne.s	loc_3F6A
000058B2 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
000058B6 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
000058BA 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
000058BE E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
000058C0 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
000058C2 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
000058C6 D041                       		add.w	d1,d0					; MJ: add together
000058C8 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
000058CC 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
000058D0 45FA 0000                  		lea	Slide_Chunks(pc),a2
000058D4 7200                       		moveq	#$00,d1					; MJ: clear d2
000058D6 6000 0000                  		bra	LZLoadChunk				; MJ: continue
000058DA                            
000058DA                            LZFindChunk:
000058DA B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
000058DC 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
000058E0 5241                       		addq.w	#$01,d1					; MJ: increase counter
000058E2                            
000058E2                            LZLoadChunk:
000058E2 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
000058E4 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
000058E6                            
000058E6                            loc_3F6A:
000058E6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000058EA 6700                       		beq.s	locret_3F7A
000058EC 337C 0005 003E             		move.w	#5,$3E(a1)
000058F2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000058F6                            
000058F6                            locret_3F7A:
000058F6 4E75                       		rts	
000058F8                            ; ===========================================================================
000058F8                            
000058F8                            LZSlide_Move:				; XREF: LZWaterSlides
000058F8 0C41 0003                  		cmpi.w	#3,d1
000058FC 6400                       		bcc.s	loc_3F84
000058FE 4E71                       		nop	
00005900                            
00005900                            loc_3F84:
00005900 08A9 0000 0022             		bclr	#0,$22(a1)
00005906 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
0000590A 1340 0014                  		move.b	d0,$14(a1)
0000590E 6A00                       		bpl.s	loc_3F9A
00005910 08E9 0000 0022             		bset	#0,$22(a1)
00005916                            
00005916                            loc_3F9A:
00005916 4229 0015                  		clr.b	$15(a1)
0000591A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00005920 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00005926 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000592A 0200 001F                  		andi.b	#$1F,d0
0000592E 6600                       		bne.s	locret_3FBE
00005930 303C 00D0                  		move.w	#$D0,d0
00005934 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play water sound
0000593A                            
0000593A                            locret_3FBE:
0000593A 4E75                       		rts	
0000593C                            ; End of function LZWaterSlides
0000593C                            
0000593C                            ; ===========================================================================
0000593C                            ; ---------------------------------------------------------------------------
0000593C 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
00005940 FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
00005944 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
00005948 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
0000594C 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
00005950 17                         		dc.b	$17
00005951 00                         		dc.b	$00					; MJ: End marker
00005952                            		even
00005952                            ; ---------------------------------------------------------------------------
00005952 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
00005956 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
0000595A 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
0000595E F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
00005962 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
00005966 F5                         		dc.b	$F5
00005968 00                         		even
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; ===========================================================================
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; Subroutine to	move Sonic in demo mode
00005968                            ; ---------------------------------------------------------------------------
00005968                            
00005968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005968                            
00005968                            
00005968                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00005968 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000596C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000596E 4E75                       		rts	
00005970                            ; ===========================================================================
00005970                            
00005970                            ; This is an unused subroutine for recording a demo
00005970                            
00005970                            MoveDemo_Record:
00005970 43F9 0008 0000             		lea	($80000).l,a1
00005976 3038 F790                  		move.w	($FFFFF790).w,d0
0000597A D2C0                       		adda.w	d0,a1
0000597C 1038 F604                  		move.b	($FFFFF604).w,d0
00005980 B011                       		cmp.b	(a1),d0
00005982 6600                       		bne.s	loc_3FFA
00005984 5229 0001                  		addq.b	#1,1(a1)
00005988 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000598E 6700                       		beq.s	loc_3FFA
00005990 4E75                       		rts	
00005992                            ; ===========================================================================
00005992                            
00005992                            loc_3FFA:				; XREF: MoveDemo_Record
00005992 1340 0002                  		move.b	d0,2(a1)
00005996 137C 0000 0003             		move.b	#0,3(a1)
0000599C 5478 F790                  		addq.w	#2,($FFFFF790).w
000059A0 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000059A6 4E75                       		rts	
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            MoveDemo_On:				; XREF: MoveSonicInDemo
000059A8 4A38 F604                  		tst.b	($FFFFF604).w
000059AC 6A00                       		bpl.s	loc_4022
000059AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059B2 6B00                       		bmi.s	loc_4022
000059B4 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000059BA                            
000059BA                            loc_4022:
000059BA 43F9 0000 0000             		lea	(Demo_Index).l,a1
000059C0 7000                       		moveq	#0,d0
000059C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000059C6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000059CC 6600                       		bne.s	loc_4038
000059CE 7006                       		moveq	#6,d0
000059D0                            
000059D0                            loc_4038:
000059D0 E548                       		lsl.w	#2,d0
000059D2 2271 0000                  		movea.l	(a1,d0.w),a1
000059D6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059DA 6A00                       		bpl.s	loc_4056
000059DC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000059E2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000059E6 5340                       		subq.w	#1,d0
000059E8 E548                       		lsl.w	#2,d0
000059EA 2271 0000                  		movea.l	(a1,d0.w),a1
000059EE                            
000059EE                            loc_4056:
000059EE 3038 F790                  		move.w	($FFFFF790).w,d0
000059F2 D2C0                       		adda.w	d0,a1
000059F4 1011                       		move.b	(a1),d0
000059F6 41F8 F604                  		lea	($FFFFF604).w,a0
000059FA 1200                       		move.b	d0,d1
000059FC 1428 FFFE                  		move.b	-2(a0),d2
00005A00 B500                       		eor.b	d2,d0
00005A02 10C1                       		move.b	d1,(a0)+
00005A04 C001                       		and.b	d1,d0
00005A06 10C0                       		move.b	d0,(a0)+
00005A08 5338 F792                  		subq.b	#1,($FFFFF792).w
00005A0C 6400                       		bcc.s	locret_407E
00005A0E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005A14 5478 F790                  		addq.w	#2,($FFFFF790).w
00005A18                            
00005A18                            locret_407E:
00005A18 4E75                       		rts	
00005A1A                            ; End of function MoveSonicInDemo
00005A1A                            
00005A1A                            ; ===========================================================================
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            ; Demo sequence	pointers
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            Demo_Index:
00005A1A                            	include "_inc\Demo pointers for intro.asm"
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            ; Demo sequence	pointers
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A 0000 0000                  	dc.l Demo_GHZ
00005A1E 0000 0000                  	dc.l Demo_GHZ
00005A22 0000 0000                  	dc.l Demo_MZ
00005A26 0000 0000                  	dc.l Demo_MZ
00005A2A 0000 0000                  	dc.l Demo_SYZ
00005A2E 0000 0000                  	dc.l Demo_SYZ
00005A32 0000 0000                  	dc.l Demo_SS
00005A36 0000 0000                  	dc.l Demo_SS
00005A36 0000 0000                  	dc.l Demo_SS
00005A3A                            
00005A3A                            Demo_EndIndex:
00005A3A                            	include "_inc\Demo pointers for ending.asm"
00005A3A                            ; ---------------------------------------------------------------------------
00005A3A                            ; Demo (ending) sequence pointers
00005A3A                            ; ---------------------------------------------------------------------------
00005A3A 0000 0000                  	dc.l Demo_EndGHZ1
00005A3E 0000 0000                  	dc.l Demo_EndMZ
00005A42 0000 0000                  	dc.l Demo_EndSYZ
00005A46 0000 0000                  	dc.l Demo_EndLZ
00005A4A 0000 0000                  	dc.l Demo_EndSLZ
00005A4E 0000 0000                  	dc.l Demo_EndSBZ1
00005A52 0000 0000                  	dc.l Demo_EndSBZ2
00005A56 0000 0000                  	dc.l Demo_EndGHZ2
00005A56 0000 0000                  	dc.l Demo_EndGHZ2
00005A5A                            
00005A5A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005A6A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005A7A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005A8A                            		even
00005A8A                            
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            ; Collision index loading subroutine
00005A8A                            ; ---------------------------------------------------------------------------
00005A8A                            
00005A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A8A                            
00005A8A                            
00005A8A                            ColIndexLoad:				; XREF: Level
00005A8A 7000                       		moveq	#0,d0
00005A8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A90 E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
00005A92 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
00005A98 5840                       		add.w	#$04,d0					; MJ: increase to next location
00005A9A 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
00005AA0 4E75                       		rts	
00005AA2                            ; End of function ColIndexLoad
00005AA2                            
00005AA2                            ; ===========================================================================
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Collision index pointers
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ColPointers:
00005AA2                            	include "_inc\Collision index pointers.asm"
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2                            ; Collision index pointers
00005AA2                            ; ---------------------------------------------------------------------------
00005AA2 0000 0000                  	dc.l Col_GHZ_1
00005AA6 0000 0000                  	dc.l Col_GHZ_2
00005AAA 0000 0000                  	dc.l Col_LZ_1
00005AAE 0000 0000                  	dc.l Col_LZ_2
00005AB2 0000 0000                  	dc.l Col_MZ_1
00005AB6 0000 0000                  	dc.l Col_MZ_2
00005ABA 0000 0000                  	dc.l Col_SLZ_1
00005ABE 0000 0000                  	dc.l Col_SLZ_2
00005AC2 0000 0000                  	dc.l Col_SYZ_1
00005AC6 0000 0000                  	dc.l Col_SYZ_2
00005ACA 0000 0000                  	dc.l Col_SBZ_1
00005ACE 0000 0000                  	dc.l Col_SBZ_2
00005ACE 0000 0000                  	dc.l Col_SBZ_2
00005AD2                            
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            ; Oscillating number subroutine
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            
00005AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AD2                            
00005AD2                            
00005AD2                            OscillateNumInit:			; XREF: Level
00005AD2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005AD6 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005ADC 7220                       		moveq	#$20,d1
00005ADE                            
00005ADE                            Osc_Loop:
00005ADE 32DA                       		move.w	(a2)+,(a1)+
00005AE0 51C9 FFFC                  		dbf	d1,Osc_Loop
00005AE4 4E75                       		rts	
00005AE6                            ; End of function OscillateNumInit
00005AE6                            
00005AE6                            ; ===========================================================================
00005AE6 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005AEA 0000 0080                  		dc.w 0,	$80
00005AEE 0000 0080                  		dc.w 0,	$80
00005AF2 0000 0080                  		dc.w 0,	$80
00005AF6 0000 0080                  		dc.w 0,	$80
00005AFA 0000 0080                  		dc.w 0,	$80
00005AFE 0000 0080                  		dc.w 0,	$80
00005B02 0000 0080                  		dc.w 0,	$80
00005B06 0000 0080                  		dc.w 0,	$80
00005B0A 0000 50F0                  		dc.w 0,	$50F0
00005B0E 011E 2080                  		dc.w $11E, $2080
00005B12 00B4 3080                  		dc.w $B4, $3080
00005B16 010E 5080                  		dc.w $10E, $5080
00005B1A 01C2 7080                  		dc.w $1C2, $7080
00005B1E 0276 0080                  		dc.w $276, $80
00005B22 0000 0080                  		dc.w 0,	$80
00005B26 0000                       		dc.w 0
00005B28                            		even
00005B28                            
00005B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B28                            
00005B28                            
00005B28                            OscillateNumDo:				; XREF: Level
00005B28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B2E 6400                       		bcc.s	locret_41C4
00005B30 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B34 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005B3A 3619                       		move.w	(a1)+,d3
00005B3C 720F                       		moveq	#$F,d1
00005B3E                            
00005B3E                            loc_4184:
00005B3E 341A                       		move.w	(a2)+,d2
00005B40 381A                       		move.w	(a2)+,d4
00005B42 0303                       		btst	d1,d3
00005B44 6600                       		bne.s	loc_41A4
00005B46 3029 0002                  		move.w	2(a1),d0
00005B4A D042                       		add.w	d2,d0
00005B4C 3340 0002                  		move.w	d0,2(a1)
00005B50 D151                       		add.w	d0,0(a1)
00005B52 B811                       		cmp.b	0(a1),d4
00005B54 6200                       		bhi.s	loc_41BA
00005B56 03C3                       		bset	d1,d3
00005B58 6000                       		bra.s	loc_41BA
00005B5A                            ; ===========================================================================
00005B5A                            
00005B5A                            loc_41A4:				; XREF: OscillateNumDo
00005B5A 3029 0002                  		move.w	2(a1),d0
00005B5E 9042                       		sub.w	d2,d0
00005B60 3340 0002                  		move.w	d0,2(a1)
00005B64 D151                       		add.w	d0,0(a1)
00005B66 B811                       		cmp.b	0(a1),d4
00005B68 6300                       		bls.s	loc_41BA
00005B6A 0383                       		bclr	d1,d3
00005B6C                            
00005B6C                            loc_41BA:
00005B6C 5849                       		addq.w	#4,a1
00005B6E 51C9 FFCE                  		dbf	d1,loc_4184
00005B72 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00005B76                            
00005B76                            locret_41C4:
00005B76 4E75                       		rts	
00005B78                            ; End of function OscillateNumDo
00005B78                            
00005B78                            ; ===========================================================================
00005B78 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00005B7C 0002 0018                  		dc.w 2,	$18
00005B80 0002 0020                  		dc.w 2,	$20
00005B84 0002 0030                  		dc.w 2,	$30
00005B88 0004 0020                  		dc.w 4,	$20
00005B8C 0008 0008                  		dc.w 8,	8
00005B90 0008 0040                  		dc.w 8,	$40
00005B94 0004 0040                  		dc.w 4,	$40
00005B98 0002 0050                  		dc.w 2,	$50
00005B9C 0002 0050                  		dc.w 2,	$50
00005BA0 0002 0020                  		dc.w 2,	$20
00005BA4 0003 0030                  		dc.w 3,	$30
00005BA8 0005 0050                  		dc.w 5,	$50
00005BAC 0007 0070                  		dc.w 7,	$70
00005BB0 0002 0010                  		dc.w 2,	$10
00005BB4 0002 0010                  		dc.w 2,	$10
00005BB8                            		even
00005BB8                            
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            
00005BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BB8                            
00005BB8                            
00005BB8                            ChangeRingFrame:			; XREF: Level
00005BB8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005BBC 6A00                       		bpl.s	loc_421C
00005BBE 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005BC4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005BC8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00005BCE                            
00005BCE                            loc_421C:
00005BCE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00005BD2 6A00                       		bpl.s	loc_4232
00005BD4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005BDA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005BDE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005BE4                            
00005BE4                            loc_4232:
00005BE4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005BE8 6A00                       		bpl.s	loc_4250
00005BEA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005BF0 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005BF4 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005BFA 6500                       		bcs.s	loc_4250
00005BFC 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005C02                            
00005C02                            loc_4250:
00005C02 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005C06 6700                       		beq.s	locret_4272
00005C08 7000                       		moveq	#0,d0
00005C0A 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005C0E D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005C12 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005C16 EF58                       		rol.w	#7,d0
00005C18 0240 0003                  		andi.w	#3,d0
00005C1C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005C20 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005C24                            
00005C24                            locret_4272:
00005C24 4E75                       		rts	
00005C26                            ; End of function ChangeRingFrame
00005C26                            
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            ; End-of-act signpost pattern loading subroutine
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            
00005C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C26                            
00005C26                            
00005C26                            SignpostArtLoad:			; XREF: Level
00005C26 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005C2A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005C2E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005C34 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005C36 3038 F700                  		move.w	($FFFFF700).w,d0
00005C3A 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005C3E 0441 0100                  		subi.w	#$100,d1
00005C42 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005C44 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005C46 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005C4A 6700                       		beq.s	Signpost_Exit
00005C4C B278 F728                  		cmp.w	($FFFFF728).w,d1
00005C50 6700                       		beq.s	Signpost_Exit
00005C52 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00005C56 7012                       		moveq	#$12,d0
00005C58 6000 B95E                  		bra.w	LoadPLC2	; load signpost	patterns
00005C5C                            ; ===========================================================================
00005C5C                            
00005C5C                            Signpost_Exit:
00005C5C 4E75                       		rts	
00005C5E                            ; End of function SignpostArtLoad
00005C5E                            
00005C5E                            ; ===========================================================================
00005C5E                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005CDE                            Demo_MZ:	incbin	demodata\i_mz.bin
00005E0E                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005E8E                            Demo_SS:	incbin	demodata\i_ss.bin
00005F8E                            ; ===========================================================================
00005F8E                            
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            ; Special Stage
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            
00005F8E                            SpecialStage:				; XREF: GameModeArray
00005F8E 303C 00CA                  		move.w	#$CA,d0
00005F92 6100 B33A                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005F96 6100 C17C                  		bsr.w	Pal_MakeFlash
00005F9A 46FC 2700                  		move	#$2700,sr
00005F9E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FA4 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FA8 3CBC 8004                  		move.w	#$8004,(a6)
00005FAC 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005FB2 3CBC 9011                  		move.w	#$9011,(a6)
00005FB6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FBA 0200 00BF                  		andi.b	#$BF,d0
00005FBE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FC4 6100 B1FA                  		bsr.w	ClearScreen
00005FC8 46FC 2300                  		move	#$2300,sr
00005FCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00005FD2 3ABC 8F01                  		move.w	#$8F01,(a5)
00005FD6 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005FDC 3ABC 9780                  		move.w	#$9780,(a5)
00005FE0 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005FE6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005FEE                            
00005FEE                            loc_463C:
00005FEE 3215                       		move.w	(a5),d1
00005FF0 0801 0001                  		btst	#1,d1
00005FF4 66F8                       		bne.s	loc_463C
00005FF6 3ABC 8F02                  		move.w	#$8F02,(a5)
00005FFA 6100 0000                  		bsr.w	SS_BGLoad
00005FFE 7014                       		moveq	#$14,d0
00006000 6100 B6F0                  		bsr.w	RunPLC_ROM	; load special stage patterns
00006004 43F8 D000                  		lea	($FFFFD000).w,a1
00006008 7000                       		moveq	#0,d0
0000600A 323C 07FF                  		move.w	#$7FF,d1
0000600E                            
0000600E                            SS_ClrObjRam:
0000600E 22C0                       		move.l	d0,(a1)+
00006010 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00006014                            
00006014 43F8 F700                  		lea	($FFFFF700).w,a1
00006018 7000                       		moveq	#0,d0
0000601A 323C 003F                  		move.w	#$3F,d1
0000601E                            
0000601E                            SS_ClrRam:
0000601E 22C0                       		move.l	d0,(a1)+
00006020 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00006024                            
00006024 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006028 7000                       		moveq	#0,d0
0000602A 323C 0027                  		move.w	#$27,d1
0000602E                            
0000602E                            SS_ClrRam2:
0000602E 22C0                       		move.l	d0,(a1)+
00006030 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00006034                            
00006034 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006038 7000                       		moveq	#0,d0
0000603A 323C 007F                  		move.w	#$7F,d1
0000603E                            
0000603E                            SS_ClrNemRam:
0000603E 22C0                       		move.l	d0,(a1)+
00006040 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00006044                            
00006044 4238 F64E                  		clr.b	($FFFFF64E).w
00006048 4278 FE02                  		clr.w	($FFFFFE02).w
0000604C 700A                       		moveq	#$A,d0
0000604E 6100 C244                  		bsr.w	PalLoad1	; load special stage Palette
00006052 4EB9 0000 0000             		jsr	SS_Load
00006058 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00006060 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00006068 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000606E 6100 0000                  		bsr.w	PalCycle_SS
00006072 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00006076 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000607C                            		
0000607C 7000                       		moveq	#0,d0
0000607E 1038 FE16                  		move.b	($FFFFFE16).w,d0
00006082 4A00                       		tst.b	d0
00006084 6700                       		beq.s	SS_Num_Not_Zero
00006086 103C 0006                  		move.b	#6,d0
0000608A                            
0000608A                            SS_Num_Not_Zero:
0000608A 5340                       		subq.w	#1,d0
0000608C                            
0000608C 43F9 0000 50F2             		lea	(MusicList_SpecialStages).l,a1 ; load Music Playlist for Special Stages
00006092 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006096 6100 B22E                  		bsr.w	PlaySound	; play special stage BG	music
0000609A                            		
0000609A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000060A0 43F9 0000 5A1A             		lea	(Demo_Index).l,a1
000060A6 7006                       		moveq	#6,d0
000060A8 E548                       		lsl.w	#2,d0
000060AA 2271 0000                  		movea.l	(a1,d0.w),a1
000060AE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000060B4 5338 F792                  		subq.b	#1,($FFFFF792).w
000060B8 4278 FE20                  		clr.w	($FFFFFE20).w
000060BC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000060C0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000060C6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000060CC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000060D0 6700                       		beq.s	SS_NoDebug	; if not, branch
000060D2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000060D8 6700                       		beq.s	SS_NoDebug	; if not, branch
000060DA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000060E0                            
000060E0                            SS_NoDebug:
000060E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000060E4 0000 0040                  		ori.b	#$40,d0
000060E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000060EE 6100 BF78                  		bsr.w	Pal_MakeWhite
000060F2                            
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            ; Main Special Stage loop
000060F2                            ; ---------------------------------------------------------------------------
000060F2                            
000060F2                            SS_MainLoop:
000060F2 6100 B1FE                  		bsr.w	PauseGame
000060F6 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000060FC 6100 CA4A                  		bsr.w	DelayProgram
00006100 6100 F866                  		bsr.w	MoveSonicInDemo
00006104 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000610A 4EB9 0000 0000             		jsr	ObjectsLoad
00006110 4EB9 0000 0000             		jsr	BuildSprites
00006116 4EB9 0000 0000             		jsr	SS_ShowLayout
0000611C 6100 0000                  		bsr.w	SS_BGAnimate
00006120 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006124 6700                       		beq.s	SS_ChkEnd	; if not, branch
00006126 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000612A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000612E                            
0000612E                            SS_ChkEnd:
0000612E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00006134 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006138                            
00006138 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000613C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00006140 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006146 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000614C 6500                       		bcs.s	SS_End		; if not, branch
0000614E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00006152                            
00006152                            SS_End:
00006152 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006158 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000615E 4278 F794                  		clr.w	($FFFFF794).w
00006162                            
00006162                            SS_EndLoop:
00006162 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006168 6100 C9DE                  		bsr.w	DelayProgram
0000616C 6100 F7FA                  		bsr.w	MoveSonicInDemo
00006170 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006176 4EB9 0000 0000             		jsr	ObjectsLoad
0000617C 4EB9 0000 0000             		jsr	BuildSprites
00006182 4EB9 0000 0000             		jsr	SS_ShowLayout
00006188 6100 0000                  		bsr.w	SS_BGAnimate
0000618C 5378 F794                  		subq.w	#1,($FFFFF794).w
00006190 6A00                       		bpl.s	loc_47D4
00006192 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006198 6100 BF9A                  		bsr.w	Pal_ToWhite
0000619C                            
0000619C                            loc_47D4:
0000619C 4A78 F614                  		tst.w	($FFFFF614).w
000061A0 66C0                       		bne.s	SS_EndLoop
000061A2                            
000061A2 46FC 2700                  		move	#$2700,sr
000061A6 4DF9 00C0 0004             		lea	($C00004).l,a6
000061AC 3CBC 8230                  		move.w	#$8230,(a6)
000061B0 3CBC 8407                  		move.w	#$8407,(a6)
000061B4 3CBC 9001                  		move.w	#$9001,(a6)
000061B8 6100 B006                  		bsr.w	ClearScreen
000061BC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000061C6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000061CC 6100 B290                  		bsr.w	NemDec
000061D0 4EB9 0000 0000             		jsr	Hud_Base
000061D6 4278 C800                  		clr.w	($FFFFC800).w
000061DA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000061E2 46FC 2300                  		move	#$2300,sr
000061E6 7011                       		moveq	#$11,d0
000061E8 6100 C0C6                  		bsr.w	PalLoad2	; load results screen Palette
000061EC 7000                       		moveq	#0,d0
000061EE 6100 B3C8                  		bsr.w	LoadPLC2
000061F2 701B                       		moveq	#$1B,d0
000061F4 6100 B390                  		bsr.w	LoadPLC		; load results screen patterns
000061F8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000061FE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00006204 3038 FE20                  		move.w	($FFFFFE20).w,d0
00006208 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000620C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00006210 303C 008E                  		move.w	#$8E,d0
00006214 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000621A 43F8 D000                  		lea	($FFFFD000).w,a1
0000621E 7000                       		moveq	#0,d0
00006220 323C 07FF                  		move.w	#$7FF,d1
00006224                            
00006224                            SS_EndClrObjRam:
00006224 22C0                       		move.l	d0,(a1)+
00006226 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000622A                            
0000622A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00006230                            
00006230                            SS_NormalExit:
00006230 6100 B0C0                  		bsr.w	PauseGame
00006234 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000623A 6100 C90C                  		bsr.w	DelayProgram
0000623E 4EB9 0000 0000             		jsr	ObjectsLoad
00006244 4EB9 0000 0000             		jsr	BuildSprites
0000624A 6100 B3A6                  		bsr.w	RunPLC_RAM
0000624E 4A78 FE02                  		tst.w	($FFFFFE02).w
00006252 67DC                       		beq.s	SS_NormalExit
00006254 4AB8 F680                  		tst.l	($FFFFF680).w
00006258 66D6                       		bne.s	SS_NormalExit
0000625A 303C 00CA                  		move.w	#$CA,d0
0000625E 6100 B06E                  		bsr.w	PlaySound_Special ; play special stage exit sound
00006262 6100 BEB0                  		bsr.w	Pal_MakeFlash
00006266 4E75                       		rts	
00006268                            ; ===========================================================================
00006268                            
00006268                            SS_ToSegaScreen:
00006268 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000626E 4E75                       		rts
00006270                            
00006270                            ; ---------------------------------------------------------------------------
00006270                            ; Special stage	background loading subroutine
00006270                            ; ---------------------------------------------------------------------------
00006270                            
00006270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006270                            
00006270                            
00006270                            SS_BGLoad:				; XREF: SpecialStage
00006270 43F9 00FF 0000             		lea	($FF0000).l,a1
00006276 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000627C 303C 4051                  		move.w	#$4051,d0
00006280 6100 B4A2                  		bsr.w	EniDec
00006284 263C 5000 0001             		move.l	#$50000001,d3
0000628A 45F9 00FF 0080             		lea	($FF0080).l,a2
00006290 7E06                       		moveq	#6,d7
00006292                            
00006292                            loc_48BE:
00006292 2003                       		move.l	d3,d0
00006294 7C03                       		moveq	#3,d6
00006296 7800                       		moveq	#0,d4
00006298 0C47 0003                  		cmpi.w	#3,d7
0000629C 6400                       		bcc.s	loc_48CC
0000629E 7801                       		moveq	#1,d4
000062A0                            
000062A0                            loc_48CC:
000062A0 7A07                       		moveq	#7,d5
000062A2                            
000062A2                            loc_48CE:
000062A2 224A                       		movea.l	a2,a1
000062A4 0A04 0001                  		eori.b	#1,d4
000062A8 6600                       		bne.s	loc_48E2
000062AA 0C47 0006                  		cmpi.w	#6,d7
000062AE 6600                       		bne.s	loc_48F2
000062B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000062B6                            
000062B6                            loc_48E2:
000062B6 48E7 F800                  		movem.l	d0-d4,-(sp)
000062BA 7207                       		moveq	#7,d1
000062BC 7407                       		moveq	#7,d2
000062BE 6100 B0AA                  		bsr.w	ShowVDPGraphics
000062C2 4CDF 001F                  		movem.l	(sp)+,d0-d4
000062C6                            
000062C6                            loc_48F2:
000062C6 0680 0010 0000             		addi.l	#$100000,d0
000062CC 51CD FFD4                  		dbf	d5,loc_48CE
000062D0 0680 0380 0000             		addi.l	#$3800000,d0
000062D6 0A04 0001                  		eori.b	#1,d4
000062DA 51CE FFC4                  		dbf	d6,loc_48CC
000062DE 0683 1000 0000             		addi.l	#$10000000,d3
000062E4 6A00                       		bpl.s	loc_491C
000062E6 4843                       		swap	d3
000062E8 0683 0000 C000             		addi.l	#$C000,d3
000062EE 4843                       		swap	d3
000062F0                            
000062F0                            loc_491C:
000062F0 D4FC 0080                  		adda.w	#$80,a2
000062F4 51CF FF9C                  		dbf	d7,loc_48BE
000062F8 43F9 00FF 0000             		lea	($FF0000).l,a1
000062FE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00006304 303C 4000                  		move.w	#$4000,d0
00006308 6100 B41A                  		bsr.w	EniDec
0000630C 43F9 00FF 0000             		lea	($FF0000).l,a1
00006312 203C 4000 0003             		move.l	#$40000003,d0
00006318 723F                       		moveq	#$3F,d1
0000631A 741F                       		moveq	#$1F,d2
0000631C 6100 B04C                  		bsr.w	ShowVDPGraphics
00006320 43F9 00FF 0000             		lea	($FF0000).l,a1
00006326 203C 5000 0003             		move.l	#$50000003,d0
0000632C 723F                       		moveq	#$3F,d1
0000632E 743F                       		moveq	#$3F,d2
00006330 6100 B038                  		bsr.w	ShowVDPGraphics
00006334 4E75                       		rts	
00006336                            ; End of function SS_BGLoad
00006336                            
00006336                            ; ---------------------------------------------------------------------------
00006336                            ; Palette cycling routine - special stage
00006336                            ; ---------------------------------------------------------------------------
00006336                            
00006336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006336                            
00006336                            
00006336                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00006336 4A78 F63A                  		tst.w	($FFFFF63A).w
0000633A 6600                       		bne.s	locret_49E6
0000633C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00006340 6A00                       		bpl.s	locret_49E6
00006342 4DF9 00C0 0004             		lea	($C00004).l,a6
00006348 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000634C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00006350 0240 001F                  		andi.w	#$1F,d0
00006354 E548                       		lsl.w	#2,d0
00006356 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000635C D0C0                       		adda.w	d0,a0
0000635E 1018                       		move.b	(a0)+,d0
00006360 6A00                       		bpl.s	loc_4992
00006362 303C 01FF                  		move.w	#$1FF,d0
00006366                            
00006366                            loc_4992:
00006366 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000636A 7000                       		moveq	#0,d0
0000636C 1018                       		move.b	(a0)+,d0
0000636E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00006372 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00006378 43F1 0000                  		lea	(a1,d0.w),a1
0000637C 303C 8200                  		move.w	#-$7E00,d0
00006380 1019                       		move.b	(a1)+,d0
00006382 3C80                       		move.w	d0,(a6)
00006384 11D1 F616                  		move.b	(a1),($FFFFF616).w
00006388 303C 8400                  		move.w	#-$7C00,d0
0000638C 1018                       		move.b	(a0)+,d0
0000638E 3C80                       		move.w	d0,(a6)
00006390 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000639A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000063A2 7000                       		moveq	#0,d0
000063A4 1018                       		move.b	(a0)+,d0
000063A6 6B00                       		bmi.s	loc_49E8
000063A8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000063AE D2C0                       		adda.w	d0,a1
000063B0 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000063B4 24D9                       		move.l	(a1)+,(a2)+
000063B6 24D9                       		move.l	(a1)+,(a2)+
000063B8 24D9                       		move.l	(a1)+,(a2)+
000063BA                            
000063BA                            locret_49E6:
000063BA 4E75                       		rts	
000063BC                            ; ===========================================================================
000063BC                            
000063BC                            loc_49E8:				; XREF: PalCycle_SS
000063BC 3238 F79E                  		move.w	($FFFFF79E).w,d1
000063C0 0C40 008A                  		cmpi.w	#$8A,d0
000063C4 6500                       		bcs.s	loc_49F4
000063C6 5241                       		addq.w	#1,d1
000063C8                            
000063C8                            loc_49F4:
000063C8 C2FC 002A                  		mulu.w	#$2A,d1
000063CC 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000063D2 D2C1                       		adda.w	d1,a1
000063D4 0240 007F                  		andi.w	#$7F,d0
000063D8 0880 0000                  		bclr	#0,d0
000063DC 6700                       		beq.s	loc_4A18
000063DE 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000063E2 24D1                       		move.l	(a1),(a2)+
000063E4 24E9 0004                  		move.l	4(a1),(a2)+
000063E8 24E9 0008                  		move.l	8(a1),(a2)+
000063EC                            
000063EC                            loc_4A18:
000063EC D2FC 000C                  		adda.w	#$C,a1
000063F0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000063F4 0C40 000A                  		cmpi.w	#$A,d0
000063F8 6500                       		bcs.s	loc_4A2E
000063FA 0440 000A                  		subi.w	#$A,d0
000063FE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00006402                            
00006402                            loc_4A2E:
00006402 3200                       		move.w	d0,d1
00006404 D040                       		add.w	d0,d0
00006406 D041                       		add.w	d1,d0
00006408 D2C0                       		adda.w	d0,a1
0000640A 24D9                       		move.l	(a1)+,(a2)+
0000640C 34D9                       		move.w	(a1)+,(a2)+
0000640E 4E75                       		rts	
00006410                            ; End of function PalCycle_SS
00006410                            
00006410                            ; ===========================================================================
00006410 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00006420                            					; XREF: PalCycle_SS
00006420 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00006430 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00006440 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00006450 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00006460 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00006470 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00006480 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00006490                            		even
00006490 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000649E                            					; XREF: PalCycle_SS
0000649E                            		even
0000649E                            
0000649E                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
000064E6                            		even
000064E6                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
000065B8                            		even
000065B8                            
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            ; Subroutine to	make the special stage background animated
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            
000065B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B8                            
000065B8                            
000065B8                            SS_BGAnimate:				; XREF: SpecialStage
000065B8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000065BC 6600                       		bne.s	loc_4BF6
000065BE 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000065C4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065CA                            
000065CA                            loc_4BF6:
000065CA 0C40 0008                  		cmpi.w	#8,d0
000065CE 6400                       		bcc.s	loc_4C4E
000065D0 0C40 0006                  		cmpi.w	#6,d0
000065D4 6600                       		bne.s	loc_4C10
000065D6 5278 F718                  		addq.w	#1,($FFFFF718).w
000065DA 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000065DE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065E4                            
000065E4                            loc_4C10:
000065E4 7000                       		moveq	#0,d0
000065E6 3038 F708                  		move.w	($FFFFF708).w,d0
000065EA 4440                       		neg.w	d0
000065EC 4840                       		swap	d0
000065EE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000065F4 47F8 AA00                  		lea	($FFFFAA00).w,a3
000065F8 7609                       		moveq	#9,d3
000065FA                            
000065FA                            loc_4C26:
000065FA 302B 0002                  		move.w	2(a3),d0
000065FE 6100 C57A                  		bsr.w	CalcSine
00006602 7400                       		moveq	#0,d2
00006604 1419                       		move.b	(a1)+,d2
00006606 C1C2                       		muls.w	d2,d0
00006608 E080                       		asr.l	#8,d0
0000660A 36C0                       		move.w	d0,(a3)+
0000660C 1419                       		move.b	(a1)+,d2
0000660E 4882                       		ext.w	d2
00006610 D55B                       		add.w	d2,(a3)+
00006612 51CB FFE6                  		dbf	d3,loc_4C26
00006616 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000661A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00006620 6000                       		bra.s	loc_4C7E
00006622                            ; ===========================================================================
00006622                            
00006622                            loc_4C4E:				; XREF: SS_BGAnimate
00006622 0C40 000C                  		cmpi.w	#$C,d0
00006626 6600                       		bne.s	loc_4C74
00006628 5378 F718                  		subq.w	#1,($FFFFF718).w
0000662C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006630 243C 0001 8000             		move.l	#$18000,d2
00006636 7206                       		moveq	#6,d1
00006638                            
00006638                            loc_4C64:
00006638 2013                       		move.l	(a3),d0
0000663A 9082                       		sub.l	d2,d0
0000663C 26C0                       		move.l	d0,(a3)+
0000663E 0482 0000 2000             		subi.l	#$2000,d2
00006644 51C9 FFF2                  		dbf	d1,loc_4C64
00006648                            
00006648                            loc_4C74:
00006648 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000664C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00006652                            
00006652                            loc_4C7E:
00006652 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006656 3038 F718                  		move.w	($FFFFF718).w,d0
0000665A 4440                       		neg.w	d0
0000665C 4840                       		swap	d0
0000665E 7600                       		moveq	#0,d3
00006660 161A                       		move.b	(a2)+,d3
00006662 3438 F70C                  		move.w	($FFFFF70C).w,d2
00006666 4442                       		neg.w	d2
00006668 0242 00FF                  		andi.w	#$FF,d2
0000666C E54A                       		lsl.w	#2,d2
0000666E                            
0000666E                            loc_4C9A:
0000666E 301B                       		move.w	(a3)+,d0
00006670 544B                       		addq.w	#2,a3
00006672 7200                       		moveq	#0,d1
00006674 121A                       		move.b	(a2)+,d1
00006676 5341                       		subq.w	#1,d1
00006678                            
00006678                            loc_4CA4:
00006678 2380 2000                  		move.l	d0,(a1,d2.w)
0000667C 5842                       		addq.w	#4,d2
0000667E 0242 03FC                  		andi.w	#$3FC,d2
00006682 51C9 FFF4                  		dbf	d1,loc_4CA4
00006686 51CB FFE6                  		dbf	d3,loc_4C9A
0000668A 4E75                       		rts	
0000668C                            ; End of function SS_BGAnimate
0000668C                            
0000668C                            ; ===========================================================================
0000668C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00006698                            		even
00006698 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000066A0                            		even
000066A0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000066B4                            		even
000066B4                            					; XREF: SS_BGAnimate
000066B4                            ; ===========================================================================
000066B4                            
000066B4                            ; ---------------------------------------------------------------------------
000066B4                            ; Continue screen
000066B4                            ; ---------------------------------------------------------------------------
000066B4                            
000066B4                            ContinueScreen:				; XREF: GameModeArray
000066B4 6100 B930                  		bsr.w	Pal_FadeFrom
000066B8 46FC 2700                  		move	#$2700,sr
000066BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000066C0 0200 00BF                  		andi.b	#$BF,d0
000066C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000066CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000066D0 3CBC 8004                  		move.w	#$8004,(a6)
000066D4 3CBC 8700                  		move.w	#$8700,(a6)
000066D8 6100 AAE6                  		bsr.w	ClearScreen
000066DC 43F8 D000                  		lea	($FFFFD000).w,a1
000066E0 7000                       		moveq	#0,d0
000066E2 323C 07FF                  		move.w	#$7FF,d1
000066E6                            
000066E6                            Cont_ClrObjRam:
000066E6 22C0                       		move.l	d0,(a1)+
000066E8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000066EC                            
000066EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000066F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000066FC 6100 AD60                  		bsr.w	NemDec
00006700 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000670A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00006710 6100 AD4C                  		bsr.w	NemDec
00006714 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000671E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00006724 6100 AD38                  		bsr.w	NemDec
00006728 720A                       		moveq	#10,d1
0000672A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00006730 7012                       		moveq	#$12,d0
00006732 6100 BB60                  		bsr.w	PalLoad1	; load continue	screen Palette
00006736 103C 0090                  		move.b	#$90,d0
0000673A 6100 AB8A                  		bsr.w	PlaySound	; play continue	music
0000673E 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00006744 42B8 F700                  		clr.l	($FFFFF700).w
00006748 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00006750 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00006756 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000675C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00006762 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00006768 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000676E 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00006774 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000677A 4EB9 0000 0000             		jsr	ObjectsLoad
00006780 4EB9 0000 0000             		jsr	BuildSprites
00006786 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000678A 0000 0040                  		ori.b	#$40,d0
0000678E 33C0 00C0 0004             		move.w	d0,($C00004).l
00006794 6100 B79A                  		bsr.w	Pal_FadeTo
00006798                            
00006798                            ; ---------------------------------------------------------------------------
00006798                            ; Continue screen main loop
00006798                            ; ---------------------------------------------------------------------------
00006798                            
00006798                            Cont_MainLoop:
00006798 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000679E 6100 C3A8                  		bsr.w	DelayProgram
000067A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067A8 6400                       		bcc.s	loc_4DF2
000067AA 46FC 2700                  		move	#$2700,sr
000067AE 3238 F614                  		move.w	($FFFFF614).w,d1
000067B2 82FC 003C                  		divu.w	#$3C,d1
000067B6 0281 0000 000F             		andi.l	#$F,d1
000067BC 4EB9 0000 0000             		jsr	ContScrCounter
000067C2 46FC 2300                  		move	#$2300,sr
000067C6                            
000067C6                            loc_4DF2:
000067C6 4EB9 0000 0000             		jsr	ObjectsLoad
000067CC 4EB9 0000 0000             		jsr	BuildSprites
000067D2 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000067D8 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000067DA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067E0 64B6                       		bcc.s	Cont_MainLoop
000067E2 4A78 F614                  		tst.w	($FFFFF614).w
000067E6 6600 FFB0                  		bne.w	Cont_MainLoop
000067EA 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000067F0 4E75                       		rts	
000067F2                            ; ===========================================================================
000067F2                            
000067F2                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000067F2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000067F8 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000067FE 7000                       		moveq	#0,d0
00006800 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006804 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006808 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000680C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00006810 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00006814 4E75                       		rts	
00006816                            ; ===========================================================================
00006816                            
00006816                            ; ---------------------------------------------------------------------------
00006816                            ; Object 80 - Continue screen elements
00006816                            ; ---------------------------------------------------------------------------
00006816                            
00006816                            Obj80:					; XREF: Obj_Index
00006816 7000                       		moveq	#0,d0
00006818 1028 0024                  		move.b	$24(a0),d0
0000681C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00006820 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00006824                            ; ===========================================================================
00006824 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00006826 0000                       		dc.w Obj80_Display-Obj80_Index
00006828 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000682A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000682C                            ; ===========================================================================
0000682C                            
0000682C                            Obj80_Main:				; XREF: Obj80_Index
0000682C 5428 0024                  		addq.b	#2,$24(a0)
00006830 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006838 317C 8500 0002             		move.w	#$8500,2(a0)
0000683E 117C 0000 0001             		move.b	#0,1(a0)
00006844 117C 003C 0019             		move.b	#$3C,$19(a0)
0000684A 317C 0120 0008             		move.w	#$120,8(a0)
00006850 317C 00C0 000A             		move.w	#$C0,$A(a0)
00006856 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000685C                            
0000685C                            Obj80_Display:				; XREF: Obj80_Index
0000685C 4EF9 0000 0000             		jmp	DisplaySprite
00006862                            ; ===========================================================================
00006862                            Obj80_MiniSonicPos:
00006862 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00006874 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00006880                            ; ===========================================================================
00006880                            
00006880                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00006880 2248                       		movea.l	a0,a1
00006882 45F9 0000 6862             		lea	(Obj80_MiniSonicPos).l,a2
00006888 7200                       		moveq	#0,d1
0000688A 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000688E 5501                       		subq.b	#2,d1
00006890 6400                       		bcc.s	loc_4EC4
00006892 4EF9 0000 0000             		jmp	DeleteObject
00006898                            ; ===========================================================================
00006898                            
00006898                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00006898 7601                       		moveq	#1,d3
0000689A 0C01 000E                  		cmpi.b	#$E,d1
0000689E 6500                       		bcs.s	loc_4ED0
000068A0 7600                       		moveq	#0,d3
000068A2 720E                       		moveq	#$E,d1
000068A4                            
000068A4                            loc_4ED0:
000068A4 1401                       		move.b	d1,d2
000068A6 0202 0001                  		andi.b	#1,d2
000068AA                            
000068AA                            Obj80_MiniSonLoop:
000068AA 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000068AE 335A 0008                  		move.w	(a2)+,8(a1)
000068B2 4A02                       		tst.b	d2
000068B4 6700                       		beq.s	loc_4EEA
000068B6 0469 000A 0008             		subi.w	#$A,8(a1)
000068BC                            
000068BC                            loc_4EEA:
000068BC 337C 00D0 000A             		move.w	#$D0,$A(a1)
000068C2 137C 0006 001A             		move.b	#6,$1A(a1)
000068C8 137C 0006 0024             		move.b	#6,$24(a1)
000068CE 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000068D6 337C 8551 0002             		move.w	#$8551,2(a1)
000068DC 137C 0000 0001             		move.b	#0,1(a1)
000068E2 43E9 0040                  		lea	$40(a1),a1
000068E6 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000068EA 43E9 FFC0                  		lea	-$40(a1),a1
000068EE 1343 0028                  		move.b	d3,$28(a1)
000068F2                            
000068F2                            Obj80_ChkType:				; XREF: Obj80_Index
000068F2 4A28 0028                  		tst.b	$28(a0)
000068F6 6700                       		beq.s	loc_4F40
000068F8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000068FE 6500                       		bcs.s	loc_4F40
00006900 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006904 0200 0001                  		andi.b	#1,d0
00006908 6600                       		bne.s	loc_4F40
0000690A 4A78 D010                  		tst.w	($FFFFD010).w
0000690E 6600                       		bne.s	Obj80_Delete
00006910 4E75                       		rts	
00006912                            ; ===========================================================================
00006912                            
00006912                            loc_4F40:				; XREF: Obj80_ChkType
00006912 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006916 0200 000F                  		andi.b	#$F,d0
0000691A 6600                       		bne.s	Obj80_Display2
0000691C 0868 0000 001A             		bchg	#0,$1A(a0)
00006922                            
00006922                            Obj80_Display2:
00006922 4EF9 0000 0000             		jmp	DisplaySprite
00006928                            ; ===========================================================================
00006928                            
00006928                            Obj80_Delete:				; XREF: Obj80_ChkType
00006928 4EF9 0000 0000             		jmp	DeleteObject
0000692E                            ; ===========================================================================
0000692E                            
0000692E                            ; ---------------------------------------------------------------------------
0000692E                            ; Object 81 - Sonic on the continue screen
0000692E                            ; ---------------------------------------------------------------------------
0000692E                            
0000692E                            Obj81:					; XREF: Obj_Index
0000692E 7000                       		moveq	#0,d0
00006930 1028 0024                  		move.b	$24(a0),d0
00006934 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00006938 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000693C 4EF9 0000 0000             		jmp	DisplaySprite
00006942                            ; ===========================================================================
00006942 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00006944 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00006946 0000                       		dc.w Obj81_Animate-Obj81_Index
00006948 0000                       		dc.w Obj81_Run-Obj81_Index
0000694A                            ; ===========================================================================
0000694A                            
0000694A                            Obj81_Main:				; XREF: Obj81_Index
0000694A 5428 0024                  		addq.b	#2,$24(a0)
0000694E 317C 00A0 0008             		move.w	#$A0,8(a0)
00006954 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000695A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00006962 317C 0780 0002             		move.w	#$780,2(a0)
00006968 117C 0004 0001             		move.b	#4,1(a0)
0000696E 117C 0002 0018             		move.b	#2,$18(a0)
00006974 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000697A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00006980                            
00006980                            Obj81_ChkLand:				; XREF: Obj81_Index
00006980 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00006986 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00006988 5428 0024                  		addq.b	#2,$24(a0)
0000698C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00006990 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006998 317C 8500 0002             		move.w	#$8500,2(a0)
0000699E 117C 0000 001C             		move.b	#0,$1C(a0)
000069A4 6000                       		bra.s	Obj81_Animate
000069A6                            ; ===========================================================================
000069A6                            
000069A6                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000069A6 4EB9 0000 0000             		jsr	SpeedToPos
000069AC 4EB9 0000 0000             		jsr	Sonic_Animate
000069B2 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000069B8                            ; ===========================================================================
000069B8                            
000069B8                            Obj81_Animate:				; XREF: Obj81_Index
000069B8 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000069BC 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000069BE 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000069C4 4EF9 0000 0000             		jmp	AnimateSprite
000069CA                            ; ===========================================================================
000069CA                            
000069CA                            Obj81_GetUp:				; XREF: Obj81_Animate
000069CA 5428 0024                  		addq.b	#2,$24(a0)
000069CE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000069D6 317C 0780 0002             		move.w	#$780,2(a0)
000069DC 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000069E2 4268 0014                  		clr.w	$14(a0)
000069E6 5168 000C                  		subq.w	#8,$C(a0)
000069EA 103C 00E0                  		move.b	#$E0,d0
000069EE 6100 A8DE                  		bsr.w	PlaySound_Special ; fade out music
000069F2                            
000069F2                            Obj81_Run:				; XREF: Obj81_Index
000069F2 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000069F8 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000069FA 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00006A00 6000                       		bra.s	Obj81_ShowRun
00006A02                            ; ===========================================================================
00006A02                            
00006A02                            Obj81_AddSpeed:				; XREF: Obj81_Run
00006A02 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006A08                            
00006A08                            Obj81_ShowRun:				; XREF: Obj81_Run
00006A08 4EB9 0000 0000             		jsr	SpeedToPos
00006A0E 4EB9 0000 0000             		jsr	Sonic_Animate
00006A14 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006A1A                            ; ===========================================================================
00006A1A                            Ani_obj81:
00006A1A                            	include "_anim\obj81.asm"
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A                            ; Animation script - Sonic on the continue screen
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A 0000                       		dc.w byte_504A-Ani_obj81
00006A1C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00006A28 00                         		even
00006A28 00                         		even
00006A28                            
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            ; Sprite mappings - Continue screen
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            Map_obj80:
00006A28                            	include "_maps\obj80.asm"
00006A28                            ; ---------------------------------------------------------------------------
00006A28                            ; Sprite mappings - Continue screen
00006A28                            ; ---------------------------------------------------------------------------
00006A28 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006A2C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006A30 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006A34 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00006A38 0B                         byte_5066:	dc.b $B
00006A39 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006A3E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006A43 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006A48 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006A4D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006A52 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006A57 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006A5C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006A61 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006A66 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00006A6B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006A70 03                         byte_509E:	dc.b 3
00006A71 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006A76 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A7B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A80 03                         byte_50AE:	dc.b 3
00006A81 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006A86 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A8B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A90 03                         byte_50BE:	dc.b 3
00006A91 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006A96 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A9B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006AA0 02                         byte_50CE:	dc.b 2
00006AA1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006AA6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006AAB 01                         byte_50D9:	dc.b 1
00006AAC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006AB1 01                         byte_50DF:	dc.b 1
00006AB2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006AB8 00                         		even
00006AB8 00                         		even
00006AB8                            
00006AB8                            ; ===========================================================================
00006AB8                            ; ---------------------------------------------------------------------------
00006AB8                            ; Ending sequence in Green Hill	Zone
00006AB8                            ; ---------------------------------------------------------------------------
00006AB8                            
00006AB8                            EndingSequence:				; XREF: GameModeArray
00006AB8 103C 00E4                  		move.b	#$E4,d0
00006ABC 6100 A810                  		bsr.w	PlaySound_Special ; stop music
00006AC0 6100 B524                  		bsr.w	Pal_FadeFrom
00006AC4 43F8 D000                  		lea	($FFFFD000).w,a1
00006AC8 7000                       		moveq	#0,d0
00006ACA 323C 07FF                  		move.w	#$7FF,d1
00006ACE                            
00006ACE                            End_ClrObjRam:
00006ACE 22C0                       		move.l	d0,(a1)+
00006AD0 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006AD4                            
00006AD4 43F8 F628                  		lea	($FFFFF628).w,a1
00006AD8 7000                       		moveq	#0,d0
00006ADA 323C 0015                  		move.w	#$15,d1
00006ADE                            
00006ADE                            End_ClrRam:
00006ADE 22C0                       		move.l	d0,(a1)+
00006AE0 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006AE4                            
00006AE4 43F8 F700                  		lea	($FFFFF700).w,a1
00006AE8 7000                       		moveq	#0,d0
00006AEA 323C 003F                  		move.w	#$3F,d1
00006AEE                            
00006AEE                            End_ClrRam2:
00006AEE 22C0                       		move.l	d0,(a1)+
00006AF0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006AF4                            
00006AF4 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006AF8 7000                       		moveq	#0,d0
00006AFA 323C 0047                  		move.w	#$47,d1
00006AFE                            
00006AFE                            End_ClrRam3:
00006AFE 22C0                       		move.l	d0,(a1)+
00006B00 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006B04                            
00006B04 46FC 2700                  		move	#$2700,sr
00006B08 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006B0C 0200 00BF                  		andi.b	#$BF,d0
00006B10 33C0 00C0 0004             		move.w	d0,($C00004).l
00006B16 6100 A6A8                  		bsr.w	ClearScreen
00006B1A 4DF9 00C0 0004             		lea	($C00004).l,a6
00006B20 3CBC 8B03                  		move.w	#$8B03,(a6)
00006B24 3CBC 8230                  		move.w	#$8230,(a6)
00006B28 3CBC 8407                  		move.w	#$8407,(a6)
00006B2C 3CBC 857C                  		move.w	#$857C,(a6)
00006B30 3CBC 9001                  		move.w	#$9001,(a6)
00006B34 3CBC 8004                  		move.w	#$8004,(a6)
00006B38 3CBC 8720                  		move.w	#$8720,(a6)
00006B3C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006B42 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006B46 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006B4C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00006B52 11FC 0000 FFFD             		move.b	#0,($FFFFFFFD).w	; puts a 0 in this flag
00006B58 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B5E 6700                       		beq.s	End_LoadData	; if yes, branch
00006B60 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00006B66 11FC 0001 FFFD             		move.b	#1,($FFFFFFFD).w	; puts a 1 in this flag
00006B6C                            
00006B6C                            End_LoadData:
00006B6C 701C                       		moveq	#$1C,d0
00006B6E 6100 AB82                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00006B72 4EB9 0000 0000             		jsr	Hud_Base
00006B78 6100 0000                  		bsr.w	LevelSizeLoad
00006B7C 6100 0000                  		bsr.w	DeformBgLayer
00006B80 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B86 6100 0000                  		bsr.w	MainLoadBlockLoad
00006B8A 6100 0000                  		bsr.w	LoadTilesFromStart
00006B8E                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00006B8E 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
00006B96 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
00006B9E 46FC 2300                  		move	#$2300,sr
00006BA2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006BA8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006BAC 6100 ACF4                  		bsr.w	KosDec
00006BB0 7003                       		moveq	#3,d0
00006BB2 6100 B6E0                  		bsr.w	PalLoad1	; load Sonic's Palette
00006BB6 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
00006BBA 43F9 0000 50FA             		lea	(MusicList_Endings).l,a1 ; load Music Playlist for Endings
00006BC0 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006BC4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00006BCA 6700                       		beq.s	End_LoadSonic	; if not, branch
00006BCC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006BD2                            
00006BD2                            End_LoadSonic:
00006BD2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00006BD8 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00006BDE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00006BE4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00006BEA 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006BF0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006BF6 4EB9 0000 0000             		jsr	ObjPosLoad
00006BFC 4EB9 0000 0000             		jsr	ObjectsLoad
00006C02 4EB9 0000 0000             		jsr	BuildSprites
00006C08 7000                       		moveq	#0,d0
00006C0A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00006C0E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006C12 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006C16 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006C1A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006C1E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006C22 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006C26 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006C2A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006C2E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006C32 6100 EE9E                  		bsr.w	OscillateNumInit
00006C36 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006C3C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006C42 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006C48 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006C4E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C54 6100 BEF2                  		bsr.w	DelayProgram
00006C58 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006C5C 0000 0040                  		ori.b	#$40,d0
00006C60 33C0 00C0 0004             		move.w	d0,($C00004).l
00006C66 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006C6C 6100 B2C2                  		bsr.w	Pal_FadeTo
00006C70                            
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            ; Main ending sequence loop
00006C70                            ; ---------------------------------------------------------------------------
00006C70                            
00006C70                            End_MainLoop:
00006C70 6100 A680                  		bsr.w	PauseGame
00006C74 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C7A 6100 BECC                  		bsr.w	DelayProgram
00006C7E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006C82 6100 0000                  		bsr.w	End_MoveSonic
00006C86 4EB9 0000 0000             		jsr	ObjectsLoad
00006C8C 6100 0000                  		bsr.w	DeformBgLayer
00006C90 4EB9 0000 0000             		jsr	BuildSprites
00006C96 4EB9 0000 0000             		jsr	ObjPosLoad
00006C9C 6100 AE22                  		bsr.w	PalCycle_Load
00006CA0 6100 EE86                  		bsr.w	OscillateNumDo
00006CA4 6100 EF12                  		bsr.w	ChangeRingFrame
00006CA8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00006CAE 6700                       		beq.s	loc_52DA	; if yes, branch
00006CB0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006CB6 4240                       		clr.w	d0
00006CB8 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
00006CBC 43F9 0000 50F8             		lea	(MusicList_Credits).l,a1	; load Music Playlist for credits
00006CC2 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00006CC6                            
00006CC6 6100 A606                  		bsr.w	PlaySound_Special ; play credits music
00006CCA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006CD0 4E75                       		rts
00006CD2                            ; ===========================================================================
00006CD2                            
00006CD2                            loc_52DA:
00006CD2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006CD6 6700 FF98                  		beq.w	End_MainLoop	; if not, branch
00006CDA                            
00006CDA 4278 FE02                  		clr.w	($FFFFFE02).w
00006CDE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006CE4 4278 F794                  		clr.w	($FFFFF794).w
00006CE8                            
00006CE8                            End_AllEmlds:				; XREF: loc_5334
00006CE8 6100 A608                  		bsr.w	PauseGame
00006CEC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006CF2 6100 BE54                  		bsr.w	DelayProgram
00006CF6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006CFA 6100 0000                  		bsr.w	End_MoveSonic
00006CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00006D04 6100 0000                  		bsr.w	DeformBgLayer
00006D08 4EB9 0000 0000             		jsr	BuildSprites
00006D0E 4EB9 0000 0000             		jsr	ObjPosLoad
00006D14 6100 EE12                  		bsr.w	OscillateNumDo
00006D18 6100 EE9E                  		bsr.w	ChangeRingFrame
00006D1C 5378 F794                  		subq.w	#1,($FFFFF794).w
00006D20 6A00                       		bpl.s	loc_5334
00006D22 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006D28 6100 B40A                  		bsr.w	Pal_ToWhite
00006D2C                            
00006D2C                            loc_5334:
00006D2C 4A78 FE02                  		tst.w	($FFFFFE02).w
00006D30 6700 FFB6                  		beq.w	End_AllEmlds
00006D34 4278 FE02                  		clr.w	($FFFFFE02).w
00006D38 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006D3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D44 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D4A 47F8 F700                  		lea	($FFFFF700).w,a3
00006D4E 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006D52 343C 4000                  		move.w	#$4000,d2
00006D56 6100 0000                  		bsr.w	LoadTilesFromStart2
00006D5A 7013                       		moveq	#$13,d0
00006D5C 6100 B536                  		bsr.w	PalLoad1	; load ending Palette
00006D60 6100 B306                  		bsr.w	Pal_MakeWhite
00006D64 6000 FF0A                  		bra.w	End_MainLoop
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Subroutine controlling Sonic on the ending sequence
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            End_MoveSonic:				; XREF: End_MainLoop
00006D68 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006D6C 6600                       		bne.s	End_MoveSonic2
00006D6E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00006D74 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00006D76 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D7A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006D80 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00006D86 4E75                       		rts	
00006D88                            ; ===========================================================================
00006D88                            
00006D88                            End_MoveSonic2:				; XREF: End_MoveSonic
00006D88 5500                       		subq.b	#2,d0
00006D8A 6600                       		bne.s	End_MoveSonic3
00006D8C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00006D92 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00006D94 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D98 7000                       		moveq	#0,d0
00006D9A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006D9E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006DA2 31C0 D014                  		move.w	d0,($FFFFD014).w
00006DA6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006DAC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006DB2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006DB8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006DBE 4E75                       		rts	
00006DC0                            ; ===========================================================================
00006DC0                            
00006DC0                            End_MoveSonic3:				; XREF: End_MoveSonic
00006DC0 5500                       		subq.b	#2,d0
00006DC2 6600                       		bne.s	End_MoveSonExit
00006DC4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DC8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006DCE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006DD4 4278 D024                  		clr.w	($FFFFD024).w
00006DD8                            
00006DD8                            End_MoveSonExit:
00006DD8 4E75                       		rts	
00006DDA                            ; End of function End_MoveSonic
00006DDA                            
00006DDA                            ; ===========================================================================
00006DDA                            ; ---------------------------------------------------------------------------
00006DDA                            ; Object 87 - Sonic on ending sequence
00006DDA                            ; ---------------------------------------------------------------------------
00006DDA                            
00006DDA                            Obj87:					; XREF: Obj_Index
00006DDA 7000                       		moveq	#0,d0
00006DDC 1028 0025                  		move.b	$25(a0),d0
00006DE0 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006DE4 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006DE8 4EF9 0000 0000             		jmp	DisplaySprite
00006DEE                            ; ===========================================================================
00006DEE 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006DF2 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006DF6 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006DFA 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006DFE 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006E02                            ; ===========================================================================
00006E02                            
00006E02                            Obj87_Main:				; XREF: Obj87_Index
00006E02 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006E08 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006E0A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006E10 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006E16 4E75                       		rts	
00006E18                            ; ===========================================================================
00006E18                            
00006E18                            Obj87_Main2:				; XREF: Obj87_Main
00006E18 5428 0025                  		addq.b	#2,$25(a0)
00006E1C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006E24 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006E2A 117C 0004 0001             		move.b	#4,1(a0)
00006E30 4228 0022                  		clr.b	$22(a0)
00006E34 117C 0002 0018             		move.b	#2,$18(a0)
00006E3A 117C 0000 001A             		move.b	#0,$1A(a0)
00006E40 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006E46                            
00006E46                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006E46 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006E4A 6600                       		bne.s	Obj87_Wait
00006E4C 5428 0025                  		addq.b	#2,$25(a0)
00006E50 317C 0001 001C             		move.w	#1,$1C(a0)
00006E56 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006E5C                            
00006E5C                            Obj87_Wait:
00006E5C 4E75                       		rts	
00006E5E                            ; ===========================================================================
00006E5E                            
00006E5E                            Obj87_LookUp:				; XREF: Obj87_Index
00006E5E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006E66 6600                       		bne.s	locret_5480
00006E68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006E6E 317C 005A 0030             		move.w	#$5A,$30(a0)
00006E74 5428 0025                  		addq.b	#2,$25(a0)
00006E78                            
00006E78                            locret_5480:
00006E78 4E75                       		rts	
00006E7A                            ; ===========================================================================
00006E7A                            
00006E7A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006E7A 5368 0030                  		subq.w	#1,$30(a0)
00006E7E 6600                       		bne.s	Obj87_Wait2
00006E80 43F8 D400                  		lea	($FFFFD400).w,a1
00006E84 323C 00FF                  		move.w	#$FF,d1
00006E88                            
00006E88                            Obj87_ClrLoop:
00006E88 4299                       		clr.l	(a1)+
00006E8A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006E8E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006E94 5428 0025                  		addq.b	#2,$25(a0)
00006E98 117C 0001 001C             		move.b	#1,$1C(a0)
00006E9E 317C 003C 0030             		move.w	#$3C,$30(a0)
00006EA4                            
00006EA4                            Obj87_Wait2:
00006EA4 4E75                       		rts	
00006EA6                            ; ===========================================================================
00006EA6                            
00006EA6                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006EA6 5368 0030                  		subq.w	#1,$30(a0)
00006EAA 6600                       		bne.s	Obj87_Wait3
00006EAC 5428 0025                  		addq.b	#2,$25(a0)
00006EB0 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006EB6 117C 0002 001C             		move.b	#2,$1C(a0)
00006EBC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006EC2                            
00006EC2                            Obj87_Wait3:
00006EC2 4E75                       		rts	
00006EC4                            ; ===========================================================================
00006EC4                            
00006EC4                            Obj87_Animate:				; XREF: Obj87_Index
00006EC4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006ECA 4EF9 0000 0000             		jmp	AnimateSprite
00006ED0                            ; ===========================================================================
00006ED0                            
00006ED0                            Obj87_Leap:				; XREF: Obj87_Index
00006ED0 5368 0030                  		subq.w	#1,$30(a0)
00006ED4 6600                       		bne.s	Obj87_Wait4
00006ED6 5428 0025                  		addq.b	#2,$25(a0)
00006EDA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006EE2 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006EE8 117C 0004 0001             		move.b	#4,1(a0)
00006EEE 4228 0022                  		clr.b	$22(a0)
00006EF2 117C 0002 0018             		move.b	#2,$18(a0)
00006EF8 117C 0005 001A             		move.b	#5,$1A(a0)
00006EFE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006F04 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006F0A 60B8                       		bra.s	Obj87_Animate
00006F0C                            ; ===========================================================================
00006F0C                            
00006F0C                            Obj87_Wait4:				; XREF: Obj87_Leap
00006F0C 4E75                       		rts	
00006F0E                            ; ===========================================================================
00006F0E                            Ani_obj87:
00006F0E                            	include "_anim\obj87.asm"
00006F0E                            ; ---------------------------------------------------------------------------
00006F0E                            ; Animation script - Sonic on the ending sequence
00006F0E                            ; ---------------------------------------------------------------------------
00006F0E 0000                       		dc.w byte_551C-Ani_obj87
00006F10 0000                       		dc.w byte_552A-Ani_obj87
00006F12 0000                       		dc.w byte_5534-Ani_obj87
00006F14 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006F22 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006F2C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006F34                            		even
00006F34                            		even
00006F34                            
00006F34                            ; ===========================================================================
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            ; Object 88 - chaos emeralds on	the ending sequence
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            
00006F34                            Obj88:					; XREF: Obj_Index
00006F34 7000                       		moveq	#0,d0
00006F36 1028 0024                  		move.b	$24(a0),d0
00006F3A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006F3E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006F42 4EF9 0000 0000             		jmp	DisplaySprite
00006F48                            ; ===========================================================================
00006F48 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006F4A 0000                       		dc.w Obj88_Move-Obj88_Index
00006F4C                            ; ===========================================================================
00006F4C                            
00006F4C                            Obj88_Main:				; XREF: Obj88_Index
00006F4C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006F52 6700                       		beq.s	Obj88_Main2
00006F54 588F                       		addq.l	#4,sp
00006F56 4E75                       		rts	
00006F58                            ; ===========================================================================
00006F58                            
00006F58                            Obj88_Main2:				; XREF: Obj88_Main
00006F58 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006F5E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006F64 2248                       		movea.l	a0,a1
00006F66 7600                       		moveq	#0,d3
00006F68 7401                       		moveq	#1,d2
00006F6A 7205                       		moveq	#5,d1
00006F6C                            
00006F6C                            Obj88_MainLoop:
00006F6C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006F70 5429 0024                  		addq.b	#2,$24(a1)
00006F74 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006F7C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006F82 137C 0004 0001             		move.b	#4,1(a1)
00006F88 137C 0001 0018             		move.b	#1,$18(a1)
00006F8E 3368 0008 0038             		move.w	8(a0),$38(a1)
00006F94 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006F9A 1342 001C                  		move.b	d2,$1C(a1)
00006F9E 1342 001A                  		move.b	d2,$1A(a1)
00006FA2 5202                       		addq.b	#1,d2
00006FA4 1343 0026                  		move.b	d3,$26(a1)
00006FA8 0603 002A                  		addi.b	#$2A,d3
00006FAC 43E9 0040                  		lea	$40(a1),a1
00006FB0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006FB4                            
00006FB4                            Obj88_Move:				; XREF: Obj88_Index
00006FB4 3028 003E                  		move.w	$3E(a0),d0
00006FB8 D168 0026                  		add.w	d0,$26(a0)
00006FBC 1028 0026                  		move.b	$26(a0),d0
00006FC0 4EB9 0000 2B7A             		jsr	(CalcSine).l
00006FC6 7800                       		moveq	#0,d4
00006FC8 1828 003C                  		move.b	$3C(a0),d4
00006FCC C3C4                       		muls.w	d4,d1
00006FCE E081                       		asr.l	#8,d1
00006FD0 C1C4                       		muls.w	d4,d0
00006FD2 E080                       		asr.l	#8,d0
00006FD4 D268 0038                  		add.w	$38(a0),d1
00006FD8 D068 003A                  		add.w	$3A(a0),d0
00006FDC 3141 0008                  		move.w	d1,8(a0)
00006FE0 3140 000C                  		move.w	d0,$C(a0)
00006FE4 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006FEA 6700                       		beq.s	loc_55FA
00006FEC 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006FF2                            
00006FF2                            loc_55FA:
00006FF2 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006FF8 6700                       		beq.s	loc_5608
00006FFA 0668 0020 003E             		addi.w	#$20,$3E(a0)
00007000                            
00007000                            loc_5608:
00007000 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00007006 6700                       		beq.s	locret_5614
00007008 5368 003A                  		subq.w	#1,$3A(a0)
0000700C                            
0000700C                            locret_5614:
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E                            ; ---------------------------------------------------------------------------
0000700E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000700E                            ; ---------------------------------------------------------------------------
0000700E                            
0000700E                            Obj89:					; XREF: Obj_Index
0000700E 7000                       		moveq	#0,d0
00007010 1028 0024                  		move.b	$24(a0),d0
00007014 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00007018 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000701C                            ; ===========================================================================
0000701C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000701E 0000                       		dc.w Obj89_Move-Obj89_Index
00007020 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00007022                            ; ===========================================================================
00007022                            
00007022                            Obj89_Main:				; XREF: Obj89_Index
00007022 5428 0024                  		addq.b	#2,$24(a0)
00007026 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000702C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00007032 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000703A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00007040 117C 0000 0001             		move.b	#0,1(a0)
00007046 117C 0000 0018             		move.b	#0,$18(a0)
0000704C                            
0000704C                            Obj89_Move:				; XREF: Obj89_Index
0000704C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00007052 6700                       		beq.s	Obj89_Delay	; if yes, branch
00007054 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000705A 4EB9 0000 0000             		jsr	DisplaySprite
00007060                            ; ===========================================================================
00007060                            
00007060                            Obj89_Delay:				; XREF: Obj89_Move
00007060 5428 0024                  		addq.b	#2,$24(a0)
00007064 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000706A                            
0000706A                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000706A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000706E 6A00                       		bpl.s	Obj89_Display
00007070 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00007076                            
00007076                            Obj89_Display:
00007076 4EB9 0000 0000             		jsr	DisplaySprite
0000707C                            ; ===========================================================================
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            ; Sprite mappings - Sonic on the ending	sequence
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            Map_obj87:
0000707C                            	include "_maps\obj87.asm"
0000707C                            ; ---------------------------------------------------------------------------
0000707C                            ; Sprite mappings - Sonic on the ending	sequence
0000707C                            ; ---------------------------------------------------------------------------
0000707C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00007080 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00007084 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00007088 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000708C 02                         byte_5690:	dc.b 2
0000708D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00007092 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00007097 03                         byte_569B:	dc.b 3
00007098 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000709D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000070A2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070A7 02                         byte_56AB:	dc.b 2
000070A8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000070AD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000070B2 02                         byte_56B6:	dc.b 2
000070B3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000070B8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000070BD 02                         byte_56C1:	dc.b 2
000070BE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000070C3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000070C8 03                         byte_56CC:	dc.b 3
000070C9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000070CE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000070D3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000070D8 07                         byte_56DC:	dc.b 7
000070D9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000070DE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000070E3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000070E8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000070ED DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000070F2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000070F7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000070FC 18                         byte_5700:	dc.b $18
000070FD 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00007102 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00007107 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000710C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00007111 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00007116 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000711B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00007120 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00007125 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000712A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000712F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00007134 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00007139 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000713E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00007143 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00007148 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000714D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00007152 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00007157 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000715C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00007161 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00007166 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000716B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00007170 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00007176 00                         		even
00007176 00                         		even
00007176                            
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Sprite mappings - chaos emeralds on the ending sequence
00007176                            ; ---------------------------------------------------------------------------
00007176                            Map_obj88:
00007176                            	include "_maps\obj88.asm"
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Sprite mappings - chaos emeralds on the ending sequence
00007176                            ; ---------------------------------------------------------------------------
00007176 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000717A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000717E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00007182 0000                       		dc.w byte_57AC-Map_obj88
00007184 01                         byte_5788:	dc.b 1
00007185 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000718A 01                         byte_578E:	dc.b 1
0000718B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00007190 01                         byte_5794:	dc.b 1
00007191 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00007196 01                         byte_579A:	dc.b 1
00007197 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000719C 01                         byte_57A0:	dc.b 1
0000719D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000071A2 01                         byte_57A6:	dc.b 1
000071A3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000071A8 01                         byte_57AC:	dc.b 1
000071A9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000071AE                            		even
000071AE                            		even
000071AE                            
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            Map_obj89:
000071AE                            	include "_maps\obj89.asm"
000071AE                            ; ---------------------------------------------------------------------------
000071AE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071AE                            ; ---------------------------------------------------------------------------
000071AE 0000                       		dc.w byte_57B4-Map_obj89
000071B0 03                         byte_57B4:	dc.b 3
000071B1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000071B6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000071BB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000071C0                            		even
000071C0                            		even
000071C0                            
000071C0                            ; ===========================================================================
000071C0                            ; ---------------------------------------------------------------------------
000071C0                            ; Credits ending sequence
000071C0                            ; ---------------------------------------------------------------------------
000071C0                            
000071C0                            Credits:				; XREF: GameModeArray
000071C0 6100 A422                  		bsr.w	ClearPLC
000071C4 6100 AE20                  		bsr.w	Pal_FadeFrom
000071C8 4DF9 00C0 0004             		lea	($C00004).l,a6
000071CE 3CBC 8004                  		move.w	#$8004,(a6)
000071D2 3CBC 8230                  		move.w	#$8230,(a6)
000071D6 3CBC 8407                  		move.w	#$8407,(a6)
000071DA 3CBC 9001                  		move.w	#$9001,(a6)
000071DE 3CBC 9200                  		move.w	#$9200,(a6)
000071E2 3CBC 8B03                  		move.w	#$8B03,(a6)
000071E6 3CBC 8720                  		move.w	#$8720,(a6)
000071EA 4238 F64E                  		clr.b	($FFFFF64E).w
000071EE 6100 9FD0                  		bsr.w	ClearScreen
000071F2 43F8 D000                  		lea	($FFFFD000).w,a1
000071F6 7000                       		moveq	#0,d0
000071F8 323C 07FF                  		move.w	#$7FF,d1
000071FC                            
000071FC                            Cred_ClrObjRam:
000071FC 22C0                       		move.l	d0,(a1)+
000071FE 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00007202                            
00007202 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000720C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00007212 6100 A24A                  		bsr.w	NemDec
00007216 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000721A 7000                       		moveq	#0,d0
0000721C 323C 001F                  		move.w	#$1F,d1
00007220                            
00007220                            Cred_ClrPalette:
00007220 22C0                       		move.l	d0,(a1)+
00007222 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
00007226                            
00007226 7003                       		moveq	#3,d0
00007228 6100 B06A                  		bsr.w	PalLoad1	; load Sonic's Palette
0000722C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00007232 4EB9 0000 0000             		jsr	ObjectsLoad
00007238 4EB9 0000 0000             		jsr	BuildSprites
0000723E 6100 0000                  		bsr.w	EndingDemoLoad
00007242 7000                       		moveq	#0,d0
00007244 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007248 E948                       		lsl.w	#4,d0
0000724A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00007250 45F2 0000                  		lea	(a2,d0.w),a2
00007254 7000                       		moveq	#0,d0
00007256 1012                       		move.b	(a2),d0
00007258 6700                       		beq.s	loc_5862
0000725A 6100 A32A                  		bsr.w	LoadPLC		; load level patterns
0000725E                            
0000725E                            loc_5862:
0000725E 7001                       		moveq	#1,d0
00007260 6100 A324                  		bsr.w	LoadPLC		; load standard	level patterns
00007264 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
0000726A 6100 ACC4                  		bsr.w	Pal_FadeTo
0000726E                            
0000726E                            Cred_WaitLoop:
0000726E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00007274 6100 B8D2                  		bsr.w	DelayProgram
00007278 6100 A378                  		bsr.w	RunPLC_RAM
0000727C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00007280 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00007282 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00007286 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00007288 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000728E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00007292 4E75                       		rts	
00007294                            
00007294                            ; ---------------------------------------------------------------------------
00007294                            ; Ending sequence demo loading subroutine
00007294                            ; ---------------------------------------------------------------------------
00007294                            
00007294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007294                            
00007294                            
00007294                            EndingDemoLoad:				; XREF: Credits
00007294 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007298 0240 000F                  		andi.w	#$F,d0
0000729C D040                       		add.w	d0,d0
0000729E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000072A2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000072A6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000072AA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000072B0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000072B2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000072B8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000072BE 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000072C4 7000                       		moveq	#0,d0
000072C6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000072CA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000072CE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000072D2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000072D6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000072DC 6600                       		bne.s	EndDemo_Exit	; if not, branch
000072DE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000072E4 45F8 FE30                  		lea	($FFFFFE30).w,a2
000072E8 303C 0008                  		move.w	#8,d0
000072EC                            
000072EC                            EndDemo_LampLoad:
000072EC 24D9                       		move.l	(a1)+,(a2)+
000072EE 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000072F2                            
000072F2                            EndDemo_Exit:
000072F2 4E75                       		rts	
000072F4                            ; End of function EndingDemoLoad
000072F4                            
000072F4                            ; ===========================================================================
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            ; Levels used in the end sequence demos
000072F4                            ; ---------------------------------------------------------------------------
000072F4                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00007304                            
00007304                            ; ---------------------------------------------------------------------------
00007304                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00007304                            ; ---------------------------------------------------------------------------
00007304                            EndDemo_LampVar:
00007304 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00007306 0A00 062C 000D             		dc.w $A00, $62C, $D
0000730C 0000 0000                  		dc.l 0
00007310 0000                       		dc.b 0,	0
00007312 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00007326 0101                       		dc.b 1,	1
00007328                            ; ===========================================================================
00007328                            ; ---------------------------------------------------------------------------
00007328                            ; "TRY AGAIN" and "END"	screens
00007328                            ; ---------------------------------------------------------------------------
00007328                            
00007328                            TryAgainEnd:				; XREF: Credits
00007328 6100 A2BA                  		bsr.w	ClearPLC
0000732C 6100 ACB8                  		bsr.w	Pal_FadeFrom
00007330 4DF9 00C0 0004             		lea	($C00004).l,a6
00007336 3CBC 8004                  		move.w	#$8004,(a6)
0000733A 3CBC 8230                  		move.w	#$8230,(a6)
0000733E 3CBC 8407                  		move.w	#$8407,(a6)
00007342 3CBC 9001                  		move.w	#$9001,(a6)
00007346 3CBC 9200                  		move.w	#$9200,(a6)
0000734A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000734E 3CBC 8720                  		move.w	#$8720,(a6)
00007352 4238 F64E                  		clr.b	($FFFFF64E).w
00007356 6100 9E68                  		bsr.w	ClearScreen
0000735A 43F8 D000                  		lea	($FFFFD000).w,a1
0000735E 7000                       		moveq	#0,d0
00007360 323C 07FF                  		move.w	#$7FF,d1
00007364                            
00007364                            TryAg_ClrObjRam:
00007364 22C0                       		move.l	d0,(a1)+
00007366 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000736A                            
0000736A 701D                       		moveq	#$1D,d0
0000736C 6100 A384                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00007370 43F8 FB80                  		lea	($FFFFFB80).w,a1
00007374 7000                       		moveq	#0,d0
00007376 323C 001F                  		move.w	#$1F,d1
0000737A                            
0000737A                            TryAg_ClrPalette:
0000737A 22C0                       		move.l	d0,(a1)+
0000737C 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
00007380                            
00007380 7013                       		moveq	#$13,d0
00007382 6100 AF10                  		bsr.w	PalLoad1	; load ending Palette
00007386 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000738A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00007390 4EB9 0000 0000             		jsr	ObjectsLoad
00007396 4EB9 0000 0000             		jsr	BuildSprites
0000739C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000073A2 6100 AB8C                  		bsr.w	Pal_FadeTo
000073A6                            
000073A6                            ; ---------------------------------------------------------------------------
000073A6                            ; "TRY AGAIN" and "END"	screen main loop
000073A6                            ; ---------------------------------------------------------------------------
000073A6                            TryAg_MainLoop:
000073A6 6100 9F4A                  		bsr.w	PauseGame
000073AA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000073B0 6100 B796                  		bsr.w	DelayProgram
000073B4 4EB9 0000 0000             		jsr	ObjectsLoad
000073BA 4EB9 0000 0000             		jsr	BuildSprites
000073C0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000073C6 6600                       		bne.s	TryAg_Exit	; if yes, branch
000073C8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000073CC 6700                       		beq.s	TryAg_Exit	; if yes, branch
000073CE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000073D4 67D0                       		beq.s	TryAg_MainLoop
000073D6                            
000073D6                            TryAg_Exit:
000073D6 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000073DC 4E75                       		rts	
000073DE                            
000073DE                            ; ===========================================================================
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000073DE                            ; ---------------------------------------------------------------------------
000073DE                            
000073DE                            Obj8B:					; XREF: Obj_Index
000073DE 7000                       		moveq	#0,d0
000073E0 1028 0024                  		move.b	$24(a0),d0
000073E4 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000073E8 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000073EC 4EF9 0000 0000             		jmp	DisplaySprite
000073F2                            ; ===========================================================================
000073F2 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000073F4 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000073F6 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000073F8 0000                       		dc.w loc_5A8E-Obj8B_Index
000073FA                            ; ===========================================================================
000073FA                            
000073FA                            Obj8B_Main:				; XREF: Obj8B_Index
000073FA 5428 0024                  		addq.b	#2,$24(a0)
000073FE 317C 0120 0008             		move.w	#$120,8(a0)
00007404 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000740A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00007412 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007418 117C 0000 0001             		move.b	#0,1(a0)
0000741E 117C 0002 0018             		move.b	#2,$18(a0)
00007424 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000742A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007430 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00007432 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00007438 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000743E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00007444 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000744A                            
0000744A                            Obj8B_Animate:				; XREF: Obj8B_Index
0000744A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00007450 4EF9 0000 0000             		jmp	AnimateSprite
00007456                            ; ===========================================================================
00007456                            
00007456                            Obj8B_Juggle:				; XREF: Obj8B_Index
00007456 5428 0024                  		addq.b	#2,$24(a0)
0000745A 7002                       		moveq	#2,d0
0000745C 0828 0000 001C             		btst	#0,$1C(a0)
00007462 6700                       		beq.s	loc_5A6A
00007464 4440                       		neg.w	d0
00007466                            
00007466                            loc_5A6A:
00007466 43F8 D800                  		lea	($FFFFD800).w,a1
0000746A 7205                       		moveq	#5,d1
0000746C                            
0000746C                            loc_5A70:
0000746C 1340 003E                  		move.b	d0,$3E(a1)
00007470 3400                       		move.w	d0,d2
00007472 E742                       		asl.w	#3,d2
00007474 D529 0026                  		add.b	d2,$26(a1)
00007478 43E9 0040                  		lea	$40(a1),a1
0000747C 51C9 FFEE                  		dbf	d1,loc_5A70
00007480 5228 001A                  		addq.b	#1,$1A(a0)
00007484 317C 0070 0030             		move.w	#112,$30(a0)
0000748A                            
0000748A                            loc_5A8E:				; XREF: Obj8B_Index
0000748A 5368 0030                  		subq.w	#1,$30(a0)
0000748E 6A00                       		bpl.s	locret_5AA0
00007490 0868 0000 001C             		bchg	#0,$1C(a0)
00007496 117C 0002 0024             		move.b	#2,$24(a0)
0000749C                            
0000749C                            locret_5AA0:
0000749C 4E75                       		rts	
0000749E                            ; ===========================================================================
0000749E                            Ani_obj8B:
0000749E                            	include "_anim\obj8B.asm"
0000749E                            ; ---------------------------------------------------------------------------
0000749E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000749E                            ; ---------------------------------------------------------------------------
0000749E 0000                       		dc.w byte_5AA8-Ani_obj8B
000074A0 0000                       		dc.w byte_5AAC-Ani_obj8B
000074A2 0000                       		dc.w byte_5AB0-Ani_obj8B
000074A4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000074A8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000074AC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000074BE                            		even
000074BE                            		even
000074BE                            
000074BE                            ; ===========================================================================
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            
000074BE                            Obj8C:					; XREF: Obj_Index
000074BE 7000                       		moveq	#0,d0
000074C0 1028 0024                  		move.b	$24(a0),d0
000074C4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000074C8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000074CC 4EF9 0000 0000             		jmp	DisplaySprite
000074D2                            ; ===========================================================================
000074D2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000074D4 0000                       		dc.w Obj8C_Move-Obj8C_Index
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            Obj8C_Main:				; XREF: Obj8C_Index
000074D6 2248                       		movea.l	a0,a1
000074D8 7400                       		moveq	#0,d2
000074DA 7600                       		moveq	#0,d3
000074DC 7205                       		moveq	#5,d1
000074DE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000074E2                            
000074E2                            Obj8C_MakeEms:				; XREF: loc_5B42
000074E2 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000074E6 5429 0024                  		addq.b	#2,$24(a1)
000074EA 237C 0000 7176 0004        		move.l	#Map_obj88,4(a1)
000074F2 337C 03C5 0002             		move.w	#$3C5,2(a1)
000074F8 137C 0000 0001             		move.b	#0,1(a1)
000074FE 137C 0001 0018             		move.b	#1,$18(a1)
00007504 337C 0104 0008             		move.w	#$104,8(a1)
0000750A 337C 0120 0038             		move.w	#$120,$38(a1)
00007510 337C 00EC 000A             		move.w	#$EC,$A(a1)
00007516 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000751C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00007522 47F8 FE58                  		lea	($FFFFFE58).w,a3
00007526                            
00007526                            Obj8C_ChkEms:
00007526 7000                       		moveq	#0,d0
00007528 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000752C 5340                       		subq.w	#1,d0
0000752E 6500                       		bcs.s	loc_5B42
00007530                            
00007530                            Obj8C_ChkEmLoop:
00007530 B433 0000                  		cmp.b	(a3,d0.w),d2
00007534 6600                       		bne.s	loc_5B3E
00007536 5202                       		addq.b	#1,d2
00007538 60EC                       		bra.s	Obj8C_ChkEms
0000753A                            ; ===========================================================================
0000753A                            
0000753A                            loc_5B3E:
0000753A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000753E                            
0000753E                            loc_5B42:
0000753E 1342 001A                  		move.b	d2,$1A(a1)
00007542 5229 001A                  		addq.b	#1,$1A(a1)
00007546 5202                       		addq.b	#1,d2
00007548 137C 0080 0026             		move.b	#$80,$26(a1)
0000754E 1343 001E                  		move.b	d3,$1E(a1)
00007552 1343 001F                  		move.b	d3,$1F(a1)
00007556 0643 000A                  		addi.w	#$A,d3
0000755A 43E9 0040                  		lea	$40(a1),a1
0000755E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00007562                            
00007562                            Obj8C_Move:				; XREF: Obj8C_Index
00007562 4A68 003E                  		tst.w	$3E(a0)
00007566 6700                       		beq.s	locret_5BBA
00007568 4A28 001E                  		tst.b	$1E(a0)
0000756C 6700                       		beq.s	loc_5B78
0000756E 5328 001E                  		subq.b	#1,$1E(a0)
00007572 6600                       		bne.s	loc_5B80
00007574                            
00007574                            loc_5B78:
00007574 3028 003E                  		move.w	$3E(a0),d0
00007578 D168 0026                  		add.w	d0,$26(a0)
0000757C                            
0000757C                            loc_5B80:
0000757C 1028 0026                  		move.b	$26(a0),d0
00007580 6700                       		beq.s	loc_5B8C
00007582 0C00 0080                  		cmpi.b	#$80,d0
00007586 6600                       		bne.s	loc_5B96
00007588                            
00007588                            loc_5B8C:
00007588 4268 003E                  		clr.w	$3E(a0)
0000758C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00007592                            
00007592                            loc_5B96:
00007592 4EB9 0000 2B7A             		jsr	(CalcSine).l
00007598 7800                       		moveq	#0,d4
0000759A 1828 003C                  		move.b	$3C(a0),d4
0000759E C3C4                       		muls.w	d4,d1
000075A0 E081                       		asr.l	#8,d1
000075A2 C1C4                       		muls.w	d4,d0
000075A4 E080                       		asr.l	#8,d0
000075A6 D268 0038                  		add.w	$38(a0),d1
000075AA D068 003A                  		add.w	$3A(a0),d0
000075AE 3141 0008                  		move.w	d1,8(a0)
000075B2 3140 000A                  		move.w	d0,$A(a0)
000075B6                            
000075B6                            locret_5BBA:
000075B6 4E75                       		rts	
000075B8                            ; ===========================================================================
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            Map_obj8B:
000075B8                            	include "_maps\obj8B.asm"
000075B8                            ; ---------------------------------------------------------------------------
000075B8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000075B8                            ; ---------------------------------------------------------------------------
000075B8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000075BC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000075C0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000075C4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000075C8 08                         byte_5BCC:	dc.b 8
000075C9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000075CE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000075D3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000075D8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000075DD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000075E2 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000075E7 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000075EC 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000075F1 08                         byte_5BF5:	dc.b 8
000075F2 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000075F7 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000075FC E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00007601 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00007606 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000760B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007610 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007615 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000761A 08                         byte_5C1E:	dc.b 8
0000761B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00007620 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00007625 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000762A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000762F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00007634 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007639 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000763E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007643 08                         byte_5C47:	dc.b 8
00007644 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00007649 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000764E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00007653 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00007658 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000765D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00007662 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007667 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000766C 0C                         byte_5C70:	dc.b $C
0000766D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00007672 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00007677 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000767C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00007681 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00007686 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000768B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00007690 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00007695 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000769A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000769F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000076A4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000076A9 0A                         byte_5CAD:	dc.b $A
000076AA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000076AF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000076B4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000076B9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000076BE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000076C3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000076C8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076CD 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076D2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000076D7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000076DC 0A                         byte_5CE0:	dc.b $A
000076DD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000076E2 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000076E7 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000076EC C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000076F1 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000076F6 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000076FB 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00007700 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00007705 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000770A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000770F 0C                         byte_5D13:	dc.b $C
00007710 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00007715 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000771A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000771F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00007724 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00007729 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000772E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00007733 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00007738 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000773D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00007742 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00007747 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000774C                            		even
0000774C                            		even
0000774C                            
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            ; Ending sequence demos
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000777A                            		even
0000777A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000077BA                            		even
000077BA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000077EA                            		even
000077EA                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000781A                            		even
0000781A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000783A                            		even
0000783A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000785A                            		even
0000785A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000788A                            		even
0000788A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000078BA                            		even
000078BA                            
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            ; Subroutine to	load level boundaries and start	locations
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            
000078BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078BA                            
000078BA                            
000078BA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000078BA 7000                       		moveq	#0,d0
000078BC 11C0 F740                  		move.b	d0,($FFFFF740).w
000078C0 11C0 F741                  		move.b	d0,($FFFFF741).w
000078C4 11C0 F746                  		move.b	d0,($FFFFF746).w
000078C8 11C0 F748                  		move.b	d0,($FFFFF748).w
000078CC 11C0 F742                  		move.b	d0,($FFFFF742).w
000078D0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000078D4 ED08                       		lsl.b	#6,d0
000078D6 E848                       		lsr.w	#4,d0
000078D8 3200                       		move.w	d0,d1
000078DA D040                       		add.w	d0,d0
000078DC D041                       		add.w	d1,d0
000078DE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000078E2 3018                       		move.w	(a0)+,d0
000078E4 31C0 F730                  		move.w	d0,($FFFFF730).w
000078E8 2018                       		move.l	(a0)+,d0
000078EA 21C0 F728                  		move.l	d0,($FFFFF728).w
000078EE 21C0 F720                  		move.l	d0,($FFFFF720).w
000078F2 2018                       		move.l	(a0)+,d0
000078F4 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000078F8 21C0 F724                  		move.l	d0,($FFFFF724).w
000078FC 3038 F728                  		move.w	($FFFFF728).w,d0
00007900 0640 0240                  		addi.w	#$240,d0
00007904 31C0 F732                  		move.w	d0,($FFFFF732).w
00007908 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000790E 3018                       		move.w	(a0)+,d0
00007910 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00007914 6000 0000                  		bra.w	LevSz_ChkLamp
00007918                            ; ===========================================================================
00007918                            ; ---------------------------------------------------------------------------
00007918                            ; Level size array and ending start location array
00007918                            ; ---------------------------------------------------------------------------
00007918                            LevelSizeArray:	incbin	misc\lvl_size.bin
00007A68                            		even
00007A68                            
00007A68                            EndingStLocArray:
00007A68                            		incbin	misc\sloc_end.bin
00007A88                            		even
00007A88                            
00007A88                            ; ===========================================================================
00007A88                            
00007A88                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00007A88 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007A8C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007A8E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007A94 3238 D008                  		move.w	($FFFFD008).w,d1
00007A98 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007A9C 6000                       		bra.s	loc_60D0
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00007A9E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007AA2 ED08                       		lsl.b	#6,d0
00007AA4 E848                       		lsr.w	#4,d0
00007AA6 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
00007AAC 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
00007AB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007AB4 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007AB6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007ABA 5340                       		subq.w	#1,d0
00007ABC E548                       		lsl.w	#2,d0
00007ABE 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007AC2                            
00007AC2                            LevSz_SonicPos:
00007AC2 7200                       		moveq	#0,d1
00007AC4 3219                       		move.w	(a1)+,d1
00007AC6 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00007ACA 7000                       		moveq	#0,d0
00007ACC 3011                       		move.w	(a1),d0
00007ACE 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007AD2 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
00007AD6 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
00007ADA 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
00007ADE 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00007AE2 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00007AE6 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00007AEA 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
00007AEE 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00007AF2                            
00007AF2                            loc_60D0:				; XREF: LevSz_ChkLamp
00007AF2 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00007AF6 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00007AFA 743F                       		moveq	#63,d2				; begin a 64-step loop
00007AFC                            @looppoint:
00007AFC 34C1                       		move.w	d1,(a2)+			; fill in X
00007AFE 34C0                       		move.w	d0,(a2)+			; fill in Y
00007B00 51CA FFFA                  		dbf	d2,@looppoint		; loop
00007B04 0441 00A0                  		subi.w	#$A0,d1
00007B08 6400                       		bcc.s	loc_60D8
00007B0A 7200                       		moveq	#0,d1
00007B0C                            
00007B0C                            loc_60D8:
00007B0C 3438 F72A                  		move.w	($FFFFF72A).w,d2
00007B10 B242                       		cmp.w	d2,d1
00007B12 6500                       		bcs.s	loc_60E2
00007B14 3202                       		move.w	d2,d1
00007B16                            
00007B16                            loc_60E2:
00007B16 31C1 F700                  		move.w	d1,($FFFFF700).w
00007B1A 0440 0060                  		subi.w	#$60,d0
00007B1E 6400                       		bcc.s	loc_60EE
00007B20 7000                       		moveq	#0,d0
00007B22                            
00007B22                            loc_60EE:
00007B22 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007B26 6D00                       		blt.s	loc_60F8
00007B28 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007B2C                            
00007B2C                            loc_60F8:
00007B2C 31C0 F704                  		move.w	d0,($FFFFF704).w
00007B30 6100 0000                  		bsr.w	BgScrollSpeed
00007B34 7000                       		moveq	#0,d0
00007B36 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B3A E508                       		lsl.b	#2,d0
00007B3C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007B42 6000 0000                  		bra.w	LevSz_Unk
00007B46                            
00007B46                            ; ===========================================================================
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            ; MJ: Sonic start location array
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            
00007B46                            StartLocArray:	incbin	startpos\ghz1.bin
00007B4A                            		incbin	startpos\ghz2.bin
00007B4E                            		incbin	startpos\ghz3.bin
00007B52                            		incbin	startpos\ghz4.bin
00007B56                            		incbin	startpos\lz1.bin
00007B5A                            		incbin	startpos\lz2.bin
00007B5E                            		incbin	startpos\lz3.bin
00007B62                            		incbin	startpos\lz4.bin
00007B66                            		incbin	startpos\mz1.bin
00007B6A                            		incbin	startpos\mz2.bin
00007B6E                            		incbin	startpos\mz3.bin
00007B72                            		incbin	startpos\mz4.bin
00007B76                            		incbin	startpos\slz1.bin
00007B7A                            		incbin	startpos\slz2.bin
00007B7E                            		incbin	startpos\slz3.bin
00007B82                            		incbin	startpos\slz4.bin
00007B86                            		incbin	startpos\syz1.bin
00007B8A                            		incbin	startpos\syz2.bin
00007B8E                            		incbin	startpos\syz3.bin
00007B92                            		incbin	startpos\syz4.bin
00007B96                            		incbin	startpos\sbz1.bin
00007B9A                            		incbin	startpos\sbz2.bin
00007B9E                            		incbin	startpos\sbz3.bin
00007BA2                            		incbin	startpos\sbz4.bin
00007BA6                            		incbin	startpos\end1.bin
00007BAA                            		incbin	startpos\end2.bin
00007BAE                            		incbin	startpos\end3.bin
00007BB2                            		incbin	startpos\end4.bin
00007BB6                            		even
00007BB6                            
00007BB6                            ; ===========================================================================
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Which	256x256	tiles contain loops or roll-tunnels
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00007BB6                            ; loop,	loop, tunnel, tunnel
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            LoopTileNums:	incbin	misc\loopnums.bin
00007BD2                            		even
00007BD2                            
00007BD2                            ; ===========================================================================
00007BD2                            
00007BD2                            LevSz_Unk:				; XREF: LevelSizeLoad
00007BD2 7000                       		moveq	#0,d0
00007BD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BD8 E748                       		lsl.w	#3,d0
00007BDA 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00007BDE 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007BE2 24D9                       		move.l	(a1)+,(a2)+
00007BE4 24D9                       		move.l	(a1)+,(a2)+
00007BE6 4E75                       		rts	
00007BE8                            ; End of function LevelSizeLoad
00007BE8                            
00007BE8                            ; ===========================================================================
00007BE8 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00007BF0 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BF8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C00 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C08 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C10 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C18 0070 0100 0100 0100        		dc.l $700100, $1000100
00007C20                            
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            ; Subroutine to	set scroll speed of some backgrounds
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            
00007C20                            
00007C20                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007C20 4A38 FE30                  		tst.b	($FFFFFE30).w
00007C24 6600                       		bne.s	loc_6206
00007C26 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C2A 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C2E 31C1 F708                  		move.w	d1,($FFFFF708).w
00007C32 31C1 F710                  		move.w	d1,($FFFFF710).w
00007C36 31C1 F718                  		move.w	d1,($FFFFF718).w
00007C3A                            
00007C3A                            loc_6206:
00007C3A 7400                       		moveq	#0,d2
00007C3C 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007C40 D442                       		add.w	d2,d2
00007C42 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007C46 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007C4A                            ; End of function BgScrollSpeed
00007C4A                            
00007C4A                            ; ===========================================================================
00007C4A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007C4E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007C52 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007C56 0000                       		dc.w BgScroll_End-BgScroll_Index
00007C58                            ; ===========================================================================
00007C58                            
00007C58                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007C58 6000 0000                  		bra.w	Deform_GHZ
00007C5C                            ; ===========================================================================
00007C5C                            
00007C5C                            BgScroll_LZ:				; XREF: BgScroll_Index
00007C5C E280                       		asr.l	#1,d0
00007C5E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C62 4E75                       		rts	
00007C64                            ; ===========================================================================
00007C64                            
00007C64                            BgScroll_MZ:				; XREF: BgScroll_Index
00007C64 4E75                       		rts	
00007C66                            ; ===========================================================================
00007C66                            
00007C66                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007C66 E280                       		asr.l	#1,d0
00007C68 0640 00C0                  		addi.w	#$C0,d0
00007C6C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C70 4E75                       		rts	
00007C72                            ; ===========================================================================
00007C72                            
00007C72                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007C72 E980                       		asl.l	#4,d0
00007C74 2400                       		move.l	d0,d2
00007C76 E380                       		asl.l	#1,d0
00007C78 D082                       		add.l	d2,d0
00007C7A E080                       		asr.l	#8,d0
00007C7C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C80 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C84 4E75                       		rts	
00007C86                            ; ===========================================================================
00007C86                            
00007C86                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007C86 E980                       		asl.l	#4,d0
00007C88 E380                       		asl.l	#1,d0
00007C8A E080                       		asr.l	#8,d0
00007C8C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C90 4E75                       		rts	
00007C92                            ; ===========================================================================
00007C92                            
00007C92                            BgScroll_End:				; XREF: BgScroll_Index
00007C92 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007C98 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007C9E 4E75                       		rts	
00007CA0                            ; ===========================================================================
00007CA0 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007CA6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007CAC 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00007CB2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007CB8 4E75                       		rts
00007CBA                            
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            ; Background layer deformation subroutines
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            
00007CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBA                            
00007CBA                            
00007CBA                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007CBA 4A38 F744                  		tst.b	($FFFFF744).w
00007CBE 6700                       		beq.s	loc_628E
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2                            
00007CC2                            loc_628E:
00007CC2 4278 F754                  		clr.w	($FFFFF754).w
00007CC6 4278 F756                  		clr.w	($FFFFF756).w
00007CCA 4278 F758                  		clr.w	($FFFFF758).w
00007CCE 4278 F75A                  		clr.w	($FFFFF75A).w
00007CD2 6100 0000                  		bsr.w	ScrollHoriz
00007CD6 6100 0000                  		bsr.w	ScrollVertical
00007CDA 6100 0000                  		bsr.w	DynScrResizeLoad
00007CDE 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007CE4 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007CEA 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007CF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007CF6 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007CFC 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007D02 7000                       		moveq	#0,d0
00007D04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D08 D040                       		add.w	d0,d0
00007D0A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007D0E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007D12                            ; End of function DeformBgLayer
00007D12                            
00007D12                            ; ===========================================================================
00007D12                            ; ---------------------------------------------------------------------------
00007D12                            ; Offset index for background layer deformation	code
00007D12                            ; ---------------------------------------------------------------------------
00007D12 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007D16 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007D1A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007D1E 0000                       		dc.w Deform_GHZ-Deform_Index
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            ; Green	Hill Zone background layer deformation code
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            
00007D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D20                            
00007D20                            
00007D20                            Deform_GHZ:				; XREF: Deform_Index
00007D20 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007D24 48C4                       		ext.l	d4
00007D26 EB84                       		asl.l	#5,d4
00007D28 2204                       		move.l	d4,d1
00007D2A E384                       		asl.l	#1,d4
00007D2C D881                       		add.l	d1,d4
00007D2E 7A00                       		moveq	#0,d5
00007D30 6100 0000                  		bsr.w	ScrollBlock1
00007D34 6100 0000                  		bsr.w	ScrollBlock4
00007D38 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D3C 3038 F704                  		move.w	($FFFFF704).w,d0
00007D40 0240 07FF                  		andi.w	#$7FF,d0
00007D44 EA48                       		lsr.w	#5,d0
00007D46 4440                       		neg.w	d0
00007D48 0640 0026                  		addi.w	#$26,d0
00007D4C 31C0 F714                  		move.w	d0,($FFFFF714).w
00007D50 3800                       		move.w	d0,d4
00007D52 6100 0000                  		bsr.w	ScrollBlock3
00007D56 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D5C 323C 006F                  		move.w	#$6F,d1
00007D60 9244                       		sub.w	d4,d1
00007D62 3038 F700                  		move.w	($FFFFF700).w,d0
00007D66 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007D6C 6600                       		bne.s	loc_633C
00007D6E 7000                       		moveq	#0,d0
00007D70                            
00007D70                            loc_633C:
00007D70 4440                       		neg.w	d0
00007D72 4840                       		swap	d0
00007D74 3038 F708                  		move.w	($FFFFF708).w,d0
00007D78 4440                       		neg.w	d0
00007D7A                            
00007D7A                            loc_6346:
00007D7A 22C0                       		move.l	d0,(a1)+
00007D7C 51C9 FFFC                  		dbf	d1,loc_6346
00007D80 323C 0027                  		move.w	#$27,d1
00007D84 3038 F710                  		move.w	($FFFFF710).w,d0
00007D88 4440                       		neg.w	d0
00007D8A                            
00007D8A                            loc_6356:
00007D8A 22C0                       		move.l	d0,(a1)+
00007D8C 51C9 FFFC                  		dbf	d1,loc_6356
00007D90 3038 F710                  		move.w	($FFFFF710).w,d0
00007D94 0640 0000                  		addi.w	#0,d0
00007D98 3438 F700                  		move.w	($FFFFF700).w,d2
00007D9C 0642 FE00                  		addi.w	#-$200,d2
00007DA0 9440                       		sub.w	d0,d2
00007DA2 48C2                       		ext.l	d2
00007DA4 E182                       		asl.l	#8,d2
00007DA6 85FC 0068                  		divs.w	#$68,d2
00007DAA 48C2                       		ext.l	d2
00007DAC E182                       		asl.l	#8,d2
00007DAE 7600                       		moveq	#0,d3
00007DB0 3600                       		move.w	d0,d3
00007DB2 323C 0047                  		move.w	#$47,d1
00007DB6 D244                       		add.w	d4,d1
00007DB8                            
00007DB8                            loc_6384:
00007DB8 3003                       		move.w	d3,d0
00007DBA 4440                       		neg.w	d0
00007DBC 22C0                       		move.l	d0,(a1)+
00007DBE 4843                       		swap	d3
00007DC0 D682                       		add.l	d2,d3
00007DC2 4843                       		swap	d3
00007DC4 51C9 FFF2                  		dbf	d1,loc_6384
00007DC8 4E75                       		rts	
00007DCA                            ; End of function Deform_GHZ
00007DCA                            
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            ; Labyrinth Zone background layer deformation code
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            
00007DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCA                            
00007DCA                            
00007DCA                            Deform_LZ:				; XREF: Deform_Index
00007DCA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DCE 48C4                       		ext.l	d4
00007DD0 EF84                       		asl.l	#7,d4
00007DD2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007DD6 48C5                       		ext.l	d5
00007DD8 EF85                       		asl.l	#7,d5
00007DDA 6100 0000                  		bsr.w	ScrollBlock1
00007DDE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007DE4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007DE8 323C 00DF                  		move.w	#$DF,d1
00007DEC 3038 F700                  		move.w	($FFFFF700).w,d0
00007DF0 4440                       		neg.w	d0
00007DF2 4840                       		swap	d0
00007DF4 3038 F708                  		move.w	($FFFFF708).w,d0
00007DF8 4440                       		neg.w	d0
00007DFA                            
00007DFA                            loc_63C6:
00007DFA 22C0                       		move.l	d0,(a1)+
00007DFC 51C9 FFFC                  		dbf	d1,loc_63C6
00007E00 3038 F646                  		move.w	($FFFFF646).w,d0
00007E04 9078 F704                  		sub.w	($FFFFF704).w,d0
00007E08 4E75                       		rts	
00007E0A                            ; End of function Deform_LZ
00007E0A                            
00007E0A                            ; ---------------------------------------------------------------------------
00007E0A                            ; Marble Zone background layer deformation code
00007E0A                            ; ---------------------------------------------------------------------------
00007E0A                            
00007E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E0A                            
00007E0A                            
00007E0A                            Deform_MZ:				; XREF: Deform_Index
00007E0A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E0E 48C4                       		ext.l	d4
00007E10 ED84                       		asl.l	#6,d4
00007E12 2204                       		move.l	d4,d1
00007E14 E384                       		asl.l	#1,d4
00007E16 D881                       		add.l	d1,d4
00007E18 7A00                       		moveq	#0,d5
00007E1A 6100 0000                  		bsr.w	ScrollBlock1
00007E1E 303C 0200                  		move.w	#$200,d0
00007E22 3238 F704                  		move.w	($FFFFF704).w,d1
00007E26 0441 01C8                  		subi.w	#$1C8,d1
00007E2A 6500                       		bcs.s	loc_6402
00007E2C 3401                       		move.w	d1,d2
00007E2E D241                       		add.w	d1,d1
00007E30 D242                       		add.w	d2,d1
00007E32 E441                       		asr.w	#2,d1
00007E34 D041                       		add.w	d1,d0
00007E36                            
00007E36                            loc_6402:
00007E36 31C0 F714                  		move.w	d0,($FFFFF714).w
00007E3A 6100 0000                  		bsr.w	ScrollBlock3
00007E3E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E44 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E48 323C 00DF                  		move.w	#$DF,d1
00007E4C 3038 F700                  		move.w	($FFFFF700).w,d0
00007E50 4440                       		neg.w	d0
00007E52 4840                       		swap	d0
00007E54 3038 F708                  		move.w	($FFFFF708).w,d0
00007E58 4440                       		neg.w	d0
00007E5A                            
00007E5A                            loc_6426:
00007E5A 22C0                       		move.l	d0,(a1)+
00007E5C 51C9 FFFC                  		dbf	d1,loc_6426
00007E60 4E75                       		rts	
00007E62                            ; End of function Deform_MZ
00007E62                            
00007E62                            ; ---------------------------------------------------------------------------
00007E62                            ; Star Light Zone background layer deformation code
00007E62                            ; ---------------------------------------------------------------------------
00007E62                            
00007E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E62                            
00007E62                            
00007E62                            Deform_SLZ:				; XREF: Deform_Index
00007E62 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E66 48C4                       		ext.l	d4
00007E68 EF84                       		asl.l	#7,d4
00007E6A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007E6E 48C5                       		ext.l	d5
00007E70 EF85                       		asl.l	#7,d5
00007E72 6100 0000                  		bsr.w	ScrollBlock2
00007E76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E7C 6100 0000                  		bsr.w	Deform_SLZ_2
00007E80 45F8 A800                  		lea	($FFFFA800).w,a2
00007E84 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007E88 3400                       		move.w	d0,d2
00007E8A 0440 00C0                  		subi.w	#$C0,d0
00007E8E 0240 03F0                  		andi.w	#$3F0,d0
00007E92 E648                       		lsr.w	#3,d0
00007E94 45F2 0000                  		lea	(a2,d0.w),a2
00007E98 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E9C 323C 000E                  		move.w	#$E,d1
00007EA0 3038 F700                  		move.w	($FFFFF700).w,d0
00007EA4 4440                       		neg.w	d0
00007EA6 4840                       		swap	d0
00007EA8 0242 000F                  		andi.w	#$F,d2
00007EAC D442                       		add.w	d2,d2
00007EAE 301A                       		move.w	(a2)+,d0
00007EB0 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007EB4                            ; ===========================================================================
00007EB4                            
00007EB4                            loc_6480:				; XREF: Deform_SLZ
00007EB4 301A                       		move.w	(a2)+,d0
00007EB6                            
00007EB6                            loc_6482:
00007EB6 22C0                       		move.l	d0,(a1)+
00007EB8 22C0                       		move.l	d0,(a1)+
00007EBA 22C0                       		move.l	d0,(a1)+
00007EBC 22C0                       		move.l	d0,(a1)+
00007EBE 22C0                       		move.l	d0,(a1)+
00007EC0 22C0                       		move.l	d0,(a1)+
00007EC2 22C0                       		move.l	d0,(a1)+
00007EC4 22C0                       		move.l	d0,(a1)+
00007EC6 22C0                       		move.l	d0,(a1)+
00007EC8 22C0                       		move.l	d0,(a1)+
00007ECA 22C0                       		move.l	d0,(a1)+
00007ECC 22C0                       		move.l	d0,(a1)+
00007ECE 22C0                       		move.l	d0,(a1)+
00007ED0 22C0                       		move.l	d0,(a1)+
00007ED2 22C0                       		move.l	d0,(a1)+
00007ED4 22C0                       		move.l	d0,(a1)+
00007ED6 51C9 FFDC                  		dbf	d1,loc_6480
00007EDA 4E75                       		rts	
00007EDC                            ; End of function Deform_SLZ
00007EDC                            
00007EDC                            
00007EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EDC                            
00007EDC                            
00007EDC                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007EDC 43F8 A800                  		lea	($FFFFA800).w,a1
00007EE0 3438 F700                  		move.w	($FFFFF700).w,d2
00007EE4 4442                       		neg.w	d2
00007EE6 3002                       		move.w	d2,d0
00007EE8 E640                       		asr.w	#3,d0
00007EEA 9042                       		sub.w	d2,d0
00007EEC 48C0                       		ext.l	d0
00007EEE E980                       		asl.l	#4,d0
00007EF0 81FC 001C                  		divs.w	#$1C,d0
00007EF4 48C0                       		ext.l	d0
00007EF6 E980                       		asl.l	#4,d0
00007EF8 E180                       		asl.l	#8,d0
00007EFA 7600                       		moveq	#0,d3
00007EFC 3602                       		move.w	d2,d3
00007EFE 323C 001B                  		move.w	#$1B,d1
00007F02                            
00007F02                            loc_64CE:
00007F02 32C3                       		move.w	d3,(a1)+
00007F04 4843                       		swap	d3
00007F06 D680                       		add.l	d0,d3
00007F08 4843                       		swap	d3
00007F0A 51C9 FFF6                  		dbf	d1,loc_64CE
00007F0E 3002                       		move.w	d2,d0
00007F10 E640                       		asr.w	#3,d0
00007F12 323C 0004                  		move.w	#4,d1
00007F16                            
00007F16                            loc_64E2:
00007F16 32C0                       		move.w	d0,(a1)+
00007F18 51C9 FFFC                  		dbf	d1,loc_64E2
00007F1C 3002                       		move.w	d2,d0
00007F1E E440                       		asr.w	#2,d0
00007F20 323C 0004                  		move.w	#4,d1
00007F24                            
00007F24                            loc_64F0:
00007F24 32C0                       		move.w	d0,(a1)+
00007F26 51C9 FFFC                  		dbf	d1,loc_64F0
00007F2A 3002                       		move.w	d2,d0
00007F2C E240                       		asr.w	#1,d0
00007F2E 323C 001D                  		move.w	#$1D,d1
00007F32                            
00007F32                            loc_64FE:
00007F32 32C0                       		move.w	d0,(a1)+
00007F34 51C9 FFFC                  		dbf	d1,loc_64FE
00007F38 4E75                       		rts	
00007F3A                            ; End of function Deform_SLZ_2
00007F3A                            
00007F3A                            ; ---------------------------------------------------------------------------
00007F3A                            ; Spring Yard Zone background layer deformation	code
00007F3A                            ; ---------------------------------------------------------------------------
00007F3A                            
00007F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F3A                            
00007F3A                            
00007F3A                            Deform_SYZ:				; XREF: Deform_Index
00007F3A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F3E 48C4                       		ext.l	d4
00007F40 ED84                       		asl.l	#6,d4
00007F42 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F46 48C5                       		ext.l	d5
00007F48 E985                       		asl.l	#4,d5
00007F4A 2205                       		move.l	d5,d1
00007F4C E385                       		asl.l	#1,d5
00007F4E DA81                       		add.l	d1,d5
00007F50 6100 0000                  		bsr.w	ScrollBlock1
00007F54 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F5A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F5E 323C 00DF                  		move.w	#$DF,d1
00007F62 3038 F700                  		move.w	($FFFFF700).w,d0
00007F66 4440                       		neg.w	d0
00007F68 4840                       		swap	d0
00007F6A 3038 F708                  		move.w	($FFFFF708).w,d0
00007F6E 4440                       		neg.w	d0
00007F70                            
00007F70                            loc_653C:
00007F70 22C0                       		move.l	d0,(a1)+
00007F72 51C9 FFFC                  		dbf	d1,loc_653C
00007F76 4E75                       		rts	
00007F78                            ; End of function Deform_SYZ
00007F78                            
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            ; Scrap	Brain Zone background layer deformation	code
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            
00007F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F78                            
00007F78                            
00007F78                            Deform_SBZ:				; XREF: Deform_Index
00007F78 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F7C 48C4                       		ext.l	d4
00007F7E ED84                       		asl.l	#6,d4
00007F80 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F84 48C5                       		ext.l	d5
00007F86 E985                       		asl.l	#4,d5
00007F88 E385                       		asl.l	#1,d5
00007F8A 6100 0000                  		bsr.w	ScrollBlock1
00007F8E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F94 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F98 323C 00DF                  		move.w	#$DF,d1
00007F9C 3038 F700                  		move.w	($FFFFF700).w,d0
00007FA0 4440                       		neg.w	d0
00007FA2 4840                       		swap	d0
00007FA4 3038 F708                  		move.w	($FFFFF708).w,d0
00007FA8 4440                       		neg.w	d0
00007FAA                            
00007FAA                            loc_6576:
00007FAA 22C0                       		move.l	d0,(a1)+
00007FAC 51C9 FFFC                  		dbf	d1,loc_6576
00007FB0 4E75                       		rts	
00007FB2                            ; End of function Deform_SBZ
00007FB2                            
00007FB2                            ; ---------------------------------------------------------------------------
00007FB2                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007FB2                            ; ---------------------------------------------------------------------------
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            ScrollHoriz:				; XREF: DeformBgLayer
00007FB2 3838 F700                  		move.w	($FFFFF700).w,d4
00007FB6 6100                       		bsr.s	ScrollHoriz2
00007FB8 3038 F700                  		move.w	($FFFFF700).w,d0
00007FBC 0240 0010                  		andi.w	#$10,d0
00007FC0 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007FC4 B300                       		eor.b	d1,d0
00007FC6 6600                       		bne.s	locret_65B0
00007FC8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007FCE 3038 F700                  		move.w	($FFFFF700).w,d0
00007FD2 9044                       		sub.w	d4,d0
00007FD4 6A00                       		bpl.s	loc_65AA
00007FD6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007FDC 4E75                       		rts	
00007FDE                            ; ===========================================================================
00007FDE                            
00007FDE                            loc_65AA:
00007FDE 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007FE4                            
00007FE4                            locret_65B0:
00007FE4 4E75                       		rts	
00007FE6                            ; End of function ScrollHoriz
00007FE6                            
00007FE6                            
00007FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE6                            
00007FE6                            
00007FE6                            ScrollHoriz2:				; XREF: ScrollHoriz
00007FE6 3038 D008                  		move.w	($FFFFD008).w,d0
00007FEA 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FEE 0440 0090                  		subi.w	#$90,d0
00007FF2 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007FF4 0440 0010                  		subi.w	#$10,d0
00007FF8 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
00007FFA 4278 F73A                  		clr.w	($FFFFF73A).w
00007FFE 4E75                       		rts
00008000                            ; ===========================================================================
00008000                            
00008000                            loc_65CC:
00008000 0C40 0010                  		cmpi.w	#$10,d0
00008004 6500                       		bcs.s	loc_65D6
00008006 303C 0010                  		move.w	#$10,d0
0000800A                            
0000800A                            loc_65D6:
0000800A D078 F700                  		add.w	($FFFFF700).w,d0
0000800E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00008012 6D00                       		blt.s	loc_65E4
00008014 3038 F72A                  		move.w	($FFFFF72A).w,d0
00008018                            
00008018                            loc_65E4:
00008018 3200                       		move.w	d0,d1
0000801A 9278 F700                  		sub.w	($FFFFF700).w,d1
0000801E E141                       		asl.w	#8,d1
00008020 31C0 F700                  		move.w	d0,($FFFFF700).w
00008024 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00008028 4E75                       		rts	
0000802A                            ; ===========================================================================
0000802A                            
0000802A                            loc_65F6:
0000802A 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
0000802E 6400                       		bcc.s	Left_NoMax				; if not, branch
00008030 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
00008034                            
00008034                            Left_NoMax:
00008034 D078 F700                  		add.w	($FFFFF700).w,d0
00008038 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000803C 6EDA                       		bgt.s	loc_65E4
0000803E 3038 F728                  		move.w	($FFFFF728).w,d0
00008042 60D4                       		bra.s	loc_65E4
00008044                            ; End of function ScrollHoriz2
00008044                            
00008044                            ; ===========================================================================
00008044 4A40                       		tst.w	d0
00008046 6A00                       		bpl.s	loc_6610
00008048 303C FFFE                  		move.w	#-2,d0
0000804C 60DC                       		bra.s	loc_65F6
0000804E                            ; ===========================================================================
0000804E                            
0000804E                            loc_6610:
0000804E 303C 0002                  		move.w	#2,d0
00008052 60AC                       		bra.s	loc_65CC
00008054                            
00008054                            ; ---------------------------------------------------------------------------
00008054                            ; Subroutine to	scroll the level vertically as Sonic moves
00008054                            ; ---------------------------------------------------------------------------
00008054                            
00008054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008054                            
00008054                            
00008054                            ScrollVertical:				; XREF: DeformBgLayer
00008054 7200                       		moveq	#0,d1
00008056 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000805A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000805E 0838 0002 D022             		btst	#2,($FFFFD022).w
00008064 6700                       		beq.s	loc_662A
00008066 5B40                       		subq.w	#5,d0
00008068                            
00008068                            loc_662A:
00008068 0838 0001 D022             		btst	#1,($FFFFD022).w
0000806E 6700                       		beq.s	loc_664A
00008070 0640 0020                  		addi.w	#$20,d0
00008074 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00008078 6500                       		bcs.s	loc_6696
0000807A 0440 0040                  		subi.w	#$40,d0
0000807E 6400                       		bcc.s	loc_6696
00008080 4A38 F75C                  		tst.b	($FFFFF75C).w
00008084 6600                       		bne.s	loc_66A8
00008086 6000                       		bra.s	loc_6656
00008088                            ; ===========================================================================
00008088                            
00008088                            loc_664A:
00008088 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000808C 6600                       		bne.s	loc_665C
0000808E 4A38 F75C                  		tst.b	($FFFFF75C).w
00008092 6600                       		bne.s	loc_66A8
00008094                            
00008094                            loc_6656:
00008094 4278 F73C                  		clr.w	($FFFFF73C).w
00008098 4E75                       		rts	
0000809A                            ; ===========================================================================
0000809A                            
0000809A                            loc_665C:
0000809A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000080A0 6600                       		bne.s	loc_6684
000080A2 3238 D014                  		move.w	($FFFFD014).w,d1
000080A6 6A00                       		bpl.s	loc_666C
000080A8 4441                       		neg.w	d1
000080AA                            
000080AA                            loc_666C:
000080AA 0C41 0800                  		cmpi.w	#$800,d1
000080AE 6400                       		bcc.s	loc_6696
000080B0 323C 0600                  		move.w	#$600,d1
000080B4 0C40 0006                  		cmpi.w	#6,d0
000080B8 6E00                       		bgt.s	loc_66F6
000080BA 0C40 FFFA                  		cmpi.w	#-6,d0
000080BE 6D00                       		blt.s	loc_66C0
000080C0 6000                       		bra.s	loc_66AE
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            loc_6684:
000080C2 323C 0200                  		move.w	#$200,d1
000080C6 0C40 0002                  		cmpi.w	#2,d0
000080CA 6E00                       		bgt.s	loc_66F6
000080CC 0C40 FFFE                  		cmpi.w	#-2,d0
000080D0 6D00                       		blt.s	loc_66C0
000080D2 6000                       		bra.s	loc_66AE
000080D4                            ; ===========================================================================
000080D4                            
000080D4                            loc_6696:
000080D4 323C 1000                  		move.w	#$1000,d1
000080D8 0C40 0010                  		cmpi.w	#$10,d0
000080DC 6E00                       		bgt.s	loc_66F6
000080DE 0C40 FFF0                  		cmpi.w	#-$10,d0
000080E2 6D00                       		blt.s	loc_66C0
000080E4 6000                       		bra.s	loc_66AE
000080E6                            ; ===========================================================================
000080E6                            
000080E6                            loc_66A8:
000080E6 7000                       		moveq	#0,d0
000080E8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000080EC                            
000080EC                            loc_66AE:
000080EC 7200                       		moveq	#0,d1
000080EE 3200                       		move.w	d0,d1
000080F0 D278 F704                  		add.w	($FFFFF704).w,d1
000080F4 4A40                       		tst.w	d0
000080F6 6A00 0000                  		bpl.w	loc_6700
000080FA 6000 0000                  		bra.w	loc_66CC
000080FE                            ; ===========================================================================
000080FE                            
000080FE                            loc_66C0:
000080FE 4441                       		neg.w	d1
00008100 48C1                       		ext.l	d1
00008102 E181                       		asl.l	#8,d1
00008104 D2B8 F704                  		add.l	($FFFFF704).w,d1
00008108 4841                       		swap	d1
0000810A                            
0000810A                            loc_66CC:
0000810A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000810E 6E00                       		bgt.s	loc_6724
00008110 0C41 FF00                  		cmpi.w	#-$100,d1
00008114 6E00                       		bgt.s	loc_66F0
00008116 0241 07FF                  		andi.w	#$7FF,d1
0000811A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008120 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00008126 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000812C 6000                       		bra.s	loc_6724
0000812E                            ; ===========================================================================
0000812E                            
0000812E                            loc_66F0:
0000812E 3238 F72C                  		move.w	($FFFFF72C).w,d1
00008132 6000                       		bra.s	loc_6724
00008134                            ; ===========================================================================
00008134                            
00008134                            loc_66F6:
00008134 48C1                       		ext.l	d1
00008136 E181                       		asl.l	#8,d1
00008138 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000813C 4841                       		swap	d1
0000813E                            
0000813E                            loc_6700:
0000813E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00008142 6D00                       		blt.s	loc_6724
00008144 0441 0800                  		subi.w	#$800,d1
00008148 6500                       		bcs.s	loc_6720
0000814A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00008150 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00008156 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000815C 6000                       		bra.s	loc_6724
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            loc_6720:
0000815E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00008162                            
00008162                            loc_6724:
00008162 3838 F704                  		move.w	($FFFFF704).w,d4
00008166 4841                       		swap	d1
00008168 2601                       		move.l	d1,d3
0000816A 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000816E E09B                       		ror.l	#8,d3
00008170 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00008174 21C1 F704                  		move.l	d1,($FFFFF704).w
00008178 3038 F704                  		move.w	($FFFFF704).w,d0
0000817C 0240 0010                  		andi.w	#$10,d0
00008180 1238 F74B                  		move.b	($FFFFF74B).w,d1
00008184 B300                       		eor.b	d1,d0
00008186 6600                       		bne.s	locret_6766
00008188 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000818E 3038 F704                  		move.w	($FFFFF704).w,d0
00008192 9044                       		sub.w	d4,d0
00008194 6A00                       		bpl.s	loc_6760
00008196 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000819C 4E75                       		rts	
0000819E                            ; ===========================================================================
0000819E                            
0000819E                            loc_6760:
0000819E 08F8 0001 F754             		bset	#1,($FFFFF754).w
000081A4                            
000081A4                            locret_6766:
000081A4 4E75                       		rts	
000081A6                            ; End of function ScrollVertical
000081A6                            
000081A6                            
000081A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A6                            
000081A6                            
000081A6                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000081A6 2438 F708                  		move.l	($FFFFF708).w,d2
000081AA 2002                       		move.l	d2,d0
000081AC D084                       		add.l	d4,d0
000081AE 21C0 F708                  		move.l	d0,($FFFFF708).w
000081B2 2200                       		move.l	d0,d1
000081B4 4841                       		swap	d1
000081B6 0241 0010                  		andi.w	#$10,d1
000081BA 1638 F74C                  		move.b	($FFFFF74C).w,d3
000081BE B701                       		eor.b	d3,d1
000081C0 6600                       		bne.s	loc_679C
000081C2 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000081C8 9082                       		sub.l	d2,d0
000081CA 6A00                       		bpl.s	loc_6796
000081CC 08F8 0002 F756             		bset	#2,($FFFFF756).w
000081D2 6000                       		bra.s	loc_679C
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            loc_6796:
000081D4 08F8 0003 F756             		bset	#3,($FFFFF756).w
000081DA                            
000081DA                            loc_679C:
000081DA 2638 F70C                  		move.l	($FFFFF70C).w,d3
000081DE 2003                       		move.l	d3,d0
000081E0 D085                       		add.l	d5,d0
000081E2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000081E6 2200                       		move.l	d0,d1
000081E8 4841                       		swap	d1
000081EA 0241 0010                  		andi.w	#$10,d1
000081EE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000081F2 B501                       		eor.b	d2,d1
000081F4 6600                       		bne.s	locret_67D0
000081F6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000081FC 9083                       		sub.l	d3,d0
000081FE 6A00                       		bpl.s	loc_67CA
00008200 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008206 4E75                       		rts	
00008208                            ; ===========================================================================
00008208                            
00008208                            loc_67CA:
00008208 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000820E                            
0000820E                            locret_67D0:
0000820E 4E75                       		rts	
00008210                            ; End of function ScrollBlock1
00008210                            
00008210                            
00008210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008210                            
00008210                            
00008210                            ScrollBlock2:				; XREF: Deform_SLZ
00008210 2438 F708                  		move.l	($FFFFF708).w,d2
00008214 2002                       		move.l	d2,d0
00008216 D084                       		add.l	d4,d0
00008218 21C0 F708                  		move.l	d0,($FFFFF708).w
0000821C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00008220 2003                       		move.l	d3,d0
00008222 D085                       		add.l	d5,d0
00008224 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00008228 2200                       		move.l	d0,d1
0000822A 4841                       		swap	d1
0000822C 0241 0010                  		andi.w	#$10,d1
00008230 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008234 B501                       		eor.b	d2,d1
00008236 6600                       		bne.s	locret_6812
00008238 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000823E 9083                       		sub.l	d3,d0
00008240 6A00                       		bpl.s	loc_680C
00008242 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008248 4E75                       		rts	
0000824A                            ; ===========================================================================
0000824A                            
0000824A                            loc_680C:
0000824A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008250                            
00008250                            locret_6812:
00008250 4E75                       		rts	
00008252                            ; End of function ScrollBlock2
00008252                            
00008252                            
00008252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008252                            
00008252                            
00008252                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00008252 3638 F70C                  		move.w	($FFFFF70C).w,d3
00008256 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000825A 3200                       		move.w	d0,d1
0000825C 0241 0010                  		andi.w	#$10,d1
00008260 1438 F74D                  		move.b	($FFFFF74D).w,d2
00008264 B501                       		eor.b	d2,d1
00008266 6600                       		bne.s	locret_6842
00008268 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000826E 9043                       		sub.w	d3,d0
00008270 6A00                       		bpl.s	loc_683C
00008272 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008278 4E75                       		rts	
0000827A                            ; ===========================================================================
0000827A                            
0000827A                            loc_683C:
0000827A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008280                            
00008280                            locret_6842:
00008280 4E75                       		rts	
00008282                            ; End of function ScrollBlock3
00008282                            
00008282                            
00008282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008282                            
00008282                            
00008282                            ScrollBlock4:				; XREF: Deform_GHZ
00008282 3438 F710                  		move.w	($FFFFF710).w,d2
00008286 3638 F714                  		move.w	($FFFFF714).w,d3
0000828A 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000828E 48C0                       		ext.l	d0
00008290 EF80                       		asl.l	#7,d0
00008292 D1B8 F710                  		add.l	d0,($FFFFF710).w
00008296 3038 F710                  		move.w	($FFFFF710).w,d0
0000829A 0240 0010                  		andi.w	#$10,d0
0000829E 1238 F74E                  		move.b	($FFFFF74E).w,d1
000082A2 B300                       		eor.b	d1,d0
000082A4 6600                       		bne.s	locret_6884
000082A6 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000082AC 3038 F710                  		move.w	($FFFFF710).w,d0
000082B0 9042                       		sub.w	d2,d0
000082B2 6A00                       		bpl.s	loc_687E
000082B4 08F8 0002 F758             		bset	#2,($FFFFF758).w
000082BA 6000                       		bra.s	locret_6884
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            loc_687E:
000082BC 08F8 0003 F758             		bset	#3,($FFFFF758).w
000082C2                            
000082C2                            locret_6884:
000082C2 4E75                       		rts	
000082C4                            ; End of function ScrollBlock4
000082C4                            
000082C4                            
000082C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C4                            
000082C4                            
000082C4                            sub_6886:				; XREF: loc_C44
000082C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000082CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000082D0 45F8 F756                  		lea	($FFFFF756).w,a2
000082D4 47F8 F708                  		lea	($FFFFF708).w,a3
000082D8 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000082DC 343C 6000                  		move.w	#$6000,d2
000082E0 6100 0000                  		bsr.w	sub_6954
000082E4 45F8 F758                  		lea	($FFFFF758).w,a2
000082E8 47F8 F710                  		lea	($FFFFF710).w,a3
000082EC 6000 0000                  		bra.w	sub_69F4
000082F0                            ; End of function sub_6886
000082F0                            
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            ; Subroutine to	display	correct	tiles as you move
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            
000082F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082F0                            
000082F0                            
000082F0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000082F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000082F6 4DF9 00C0 0000             		lea	($C00000).l,a6
000082FC 45F8 FF32                  		lea	($FFFFFF32).w,a2
00008300 47F8 FF18                  		lea	($FFFFFF18).w,a3
00008304 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008308 343C 6000                  		move.w	#$6000,d2
0000830C 6100 0000                  		bsr.w	sub_6954
00008310 45F8 FF34                  		lea	($FFFFFF34).w,a2
00008314 47F8 FF20                  		lea	($FFFFFF20).w,a3
00008318 6100 0000                  		bsr.w	sub_69F4
0000831C 45F8 FF30                  		lea	($FFFFFF30).w,a2
00008320 47F8 FF10                  		lea	($FFFFFF10).w,a3
00008324 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008328 343C 4000                  		move.w	#$4000,d2
0000832C 4A12                       		tst.b	(a2)
0000832E 6700                       		beq.s	locret_6952
00008330 0892 0000                  		bclr	#0,(a2)
00008334 6700                       		beq.s	loc_6908
00008336 78F0                       		moveq	#-$10,d4
00008338 7AF0                       		moveq	#-$10,d5
0000833A 6100 0000                  		bsr.w	sub_6C20
0000833E 78F0                       		moveq	#-$10,d4
00008340 7AF0                       		moveq	#-$10,d5
00008342 6100 0000                  		bsr.w	sub_6AD8
00008346                            
00008346                            loc_6908:
00008346 0892 0001                  		bclr	#1,(a2)
0000834A 6700                       		beq.s	loc_6922
0000834C 383C 00E0                  		move.w	#$E0,d4
00008350 7AF0                       		moveq	#-$10,d5
00008352 6100 0000                  		bsr.w	sub_6C20
00008356 383C 00E0                  		move.w	#$E0,d4
0000835A 7AF0                       		moveq	#-$10,d5
0000835C 6100 0000                  		bsr.w	sub_6AD8
00008360                            
00008360                            loc_6922:
00008360 0892 0002                  		bclr	#2,(a2)
00008364 6700                       		beq.s	loc_6938
00008366 78F0                       		moveq	#-$10,d4
00008368 7AF0                       		moveq	#-$10,d5
0000836A 6100 0000                  		bsr.w	sub_6C20
0000836E 78F0                       		moveq	#-$10,d4
00008370 7AF0                       		moveq	#-$10,d5
00008372 6100 0000                  		bsr.w	sub_6B04
00008376                            
00008376                            loc_6938:
00008376 0892 0003                  		bclr	#3,(a2)
0000837A 6700                       		beq.s	locret_6952
0000837C 78F0                       		moveq	#-$10,d4
0000837E 3A3C 0140                  		move.w	#$140,d5
00008382 6100 0000                  		bsr.w	sub_6C20
00008386 78F0                       		moveq	#-$10,d4
00008388 3A3C 0140                  		move.w	#$140,d5
0000838C 6100 0000                  		bsr.w	sub_6B04
00008390                            
00008390                            locret_6952:
00008390 4E75                       		rts	
00008392                            ; End of function LoadTilesAsYouMove
00008392                            
00008392                            
00008392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008392                            
00008392                            
00008392                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00008392 4A12                       		tst.b	(a2)
00008394 6700 0000                  		beq.w	locret_69F2
00008398 0892 0000                  		bclr	#0,(a2)
0000839C 6700                       		beq.s	loc_6972
0000839E 78F0                       		moveq	#-$10,d4
000083A0 7AF0                       		moveq	#-$10,d5
000083A2 6100 0000                  		bsr.w	sub_6C20
000083A6 78F0                       		moveq	#-$10,d4
000083A8 7AF0                       		moveq	#-$10,d5
000083AA 7C1F                       		moveq	#$1F,d6
000083AC 6100 0000                  		bsr.w	sub_6ADA
000083B0                            
000083B0                            loc_6972:
000083B0 0892 0001                  		bclr	#1,(a2)
000083B4 6700                       		beq.s	loc_698E
000083B6 383C 00E0                  		move.w	#$E0,d4
000083BA 7AF0                       		moveq	#-$10,d5
000083BC 6100 0000                  		bsr.w	sub_6C20
000083C0 383C 00E0                  		move.w	#$E0,d4
000083C4 7AF0                       		moveq	#-$10,d5
000083C6 7C1F                       		moveq	#$1F,d6
000083C8 6100 0000                  		bsr.w	sub_6ADA
000083CC                            
000083CC                            loc_698E:
000083CC 0892 0002                  		bclr	#2,(a2)
000083D0 6700                       		beq.s	loc_69BE
000083D2 78F0                       		moveq	#-$10,d4
000083D4 7AF0                       		moveq	#-$10,d5
000083D6 6100 0000                  		bsr.w	sub_6C20
000083DA 78F0                       		moveq	#-$10,d4
000083DC 7AF0                       		moveq	#-$10,d5
000083DE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000083E2 322B 0004                  		move.w	4(a3),d1
000083E6 0241 FFF0                  		andi.w	#-$10,d1
000083EA 9C41                       		sub.w	d1,d6
000083EC 6D00                       		blt.s	loc_69BE
000083EE E84E                       		lsr.w	#4,d6
000083F0 0C46 000F                  		cmpi.w	#$F,d6
000083F4 6500                       		bcs.s	loc_69BA
000083F6 7C0F                       		moveq	#$F,d6
000083F8                            
000083F8                            loc_69BA:
000083F8 6100 0000                  		bsr.w	sub_6B06
000083FC                            
000083FC                            loc_69BE:
000083FC 0892 0003                  		bclr	#3,(a2)
00008400 6700                       		beq.s	locret_69F2
00008402 78F0                       		moveq	#-$10,d4
00008404 3A3C 0140                  		move.w	#$140,d5
00008408 6100 0000                  		bsr.w	sub_6C20
0000840C 78F0                       		moveq	#-$10,d4
0000840E 3A3C 0140                  		move.w	#$140,d5
00008412 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008416 322B 0004                  		move.w	4(a3),d1
0000841A 0241 FFF0                  		andi.w	#-$10,d1
0000841E 9C41                       		sub.w	d1,d6
00008420 6D00                       		blt.s	locret_69F2
00008422 E84E                       		lsr.w	#4,d6
00008424 0C46 000F                  		cmpi.w	#$F,d6
00008428 6500                       		bcs.s	loc_69EE
0000842A 7C0F                       		moveq	#$F,d6
0000842C                            
0000842C                            loc_69EE:
0000842C 6100 0000                  		bsr.w	sub_6B06
00008430                            
00008430                            locret_69F2:
00008430 4E75                       		rts	
00008432                            ; End of function sub_6954
00008432                            
00008432                            
00008432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008432                            
00008432                            
00008432                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00008432 4A12                       		tst.b	(a2)
00008434 6700 0000                  		beq.w	locret_6A80
00008438 0892 0002                  		bclr	#2,(a2)
0000843C 6700                       		beq.s	loc_6A3E
0000843E 0C53 0010                  		cmpi.w	#$10,(a3)
00008442 6500                       		bcs.s	loc_6A3E
00008444 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008448 322B 0004                  		move.w	4(a3),d1
0000844C 0241 FFF0                  		andi.w	#-$10,d1
00008450 9841                       		sub.w	d1,d4
00008452 3F04                       		move.w	d4,-(sp)
00008454 7AF0                       		moveq	#-$10,d5
00008456 6100 0000                  		bsr.w	sub_6C20
0000845A 381F                       		move.w	(sp)+,d4
0000845C 7AF0                       		moveq	#-$10,d5
0000845E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008462 322B 0004                  		move.w	4(a3),d1
00008466 0241 FFF0                  		andi.w	#-$10,d1
0000846A 9C41                       		sub.w	d1,d6
0000846C 6D00                       		blt.s	loc_6A3E
0000846E E84E                       		lsr.w	#4,d6
00008470 0446 000E                  		subi.w	#$E,d6
00008474 6400                       		bcc.s	loc_6A3E
00008476 4446                       		neg.w	d6
00008478 6100 0000                  		bsr.w	sub_6B06
0000847C                            
0000847C                            loc_6A3E:
0000847C 0892 0003                  		bclr	#3,(a2)
00008480 6700                       		beq.s	locret_6A80
00008482 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008486 322B 0004                  		move.w	4(a3),d1
0000848A 0241 FFF0                  		andi.w	#-$10,d1
0000848E 9841                       		sub.w	d1,d4
00008490 3F04                       		move.w	d4,-(sp)
00008492 3A3C 0140                  		move.w	#$140,d5
00008496 6100 0000                  		bsr.w	sub_6C20
0000849A 381F                       		move.w	(sp)+,d4
0000849C 3A3C 0140                  		move.w	#$140,d5
000084A0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000084A4 322B 0004                  		move.w	4(a3),d1
000084A8 0241 FFF0                  		andi.w	#-$10,d1
000084AC 9C41                       		sub.w	d1,d6
000084AE 6D00                       		blt.s	locret_6A80
000084B0 E84E                       		lsr.w	#4,d6
000084B2 0446 000E                  		subi.w	#$E,d6
000084B6 6400                       		bcc.s	locret_6A80
000084B8 4446                       		neg.w	d6
000084BA 6100 0000                  		bsr.w	sub_6B06
000084BE                            
000084BE                            locret_6A80:
000084BE 4E75                       		rts	
000084C0                            ; End of function sub_69F4
000084C0                            
000084C0                            ; ===========================================================================
000084C0 4A12                       		tst.b	(a2)
000084C2 6700                       		beq.s	locret_6AD6
000084C4 0892 0002                  		bclr	#2,(a2)
000084C8 6700                       		beq.s	loc_6AAC
000084CA 383C 00D0                  		move.w	#$D0,d4
000084CE 322B 0004                  		move.w	4(a3),d1
000084D2 0241 FFF0                  		andi.w	#-$10,d1
000084D6 9841                       		sub.w	d1,d4
000084D8 3F04                       		move.w	d4,-(sp)
000084DA 7AF0                       		moveq	#-$10,d5
000084DC 6100 0000                  		bsr.w	sub_6C3C
000084E0 381F                       		move.w	(sp)+,d4
000084E2 7AF0                       		moveq	#-$10,d5
000084E4 7C02                       		moveq	#2,d6
000084E6 6100 0000                  		bsr.w	sub_6B06
000084EA                            
000084EA                            loc_6AAC:
000084EA 0892 0003                  		bclr	#3,(a2)
000084EE 6700                       		beq.s	locret_6AD6
000084F0 383C 00D0                  		move.w	#$D0,d4
000084F4 322B 0004                  		move.w	4(a3),d1
000084F8 0241 FFF0                  		andi.w	#-$10,d1
000084FC 9841                       		sub.w	d1,d4
000084FE 3F04                       		move.w	d4,-(sp)
00008500 3A3C 0140                  		move.w	#$140,d5
00008504 6100 0000                  		bsr.w	sub_6C3C
00008508 381F                       		move.w	(sp)+,d4
0000850A 3A3C 0140                  		move.w	#$140,d5
0000850E 7C02                       		moveq	#2,d6
00008510 6100 0000                  		bsr.w	sub_6B06
00008514                            
00008514                            locret_6AD6:
00008514 4E75                       		rts	
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00008516 7C15                       		moveq	#$15,d6
00008518                            ; End of function sub_6AD8
00008518                            
00008518                            
00008518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008518                            
00008518                            
00008518                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00008518 2E3C 0080 0000             		move.l	#$800000,d7
0000851E 2200                       		move.l	d0,d1
00008520                            
00008520                            loc_6AE2:
00008520 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008524 6100 0000                  		bsr.w	sub_6BD6
00008528 2001                       		move.l	d1,d0
0000852A 6100 0000                  		bsr.w	sub_6B32
0000852E 5801                       		addq.b	#4,d1
00008530 0201 007F                  		andi.b	#$7F,d1
00008534 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008538 0645 0010                  		addi.w	#$10,d5
0000853C 51CE FFE2                  		dbf	d6,loc_6AE2
00008540 4E75                       		rts	
00008542                            ; End of function sub_6ADA
00008542                            
00008542                            
00008542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008542                            
00008542                            
00008542                            sub_6B04:				; XREF: LoadTilesAsYouMove
00008542 7C0F                       		moveq	#$F,d6
00008544                            ; End of function sub_6B04
00008544                            
00008544                            
00008544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008544                            ; main draw section
00008544                            
00008544                            sub_6B06:
00008544 2E3C 0080 0000             		move.l	#$800000,d7
0000854A 2200                       		move.l	d0,d1
0000854C                            
0000854C                            loc_6B0E:
0000854C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008550 6100 0000                  		bsr.w	sub_6BD6
00008554 2001                       		move.l	d1,d0
00008556 6100 0000                  		bsr.w	sub_6B32
0000855A 0641 0100                  		addi.w	#$100,d1
0000855E 0241 0FFF                  		andi.w	#$FFF,d1
00008562 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008566 0644 0010                  		addi.w	#$10,d4
0000856A 51CE FFE0                  		dbf	d6,loc_6B0E
0000856E 4E75                       		rts	
00008570                            ; End of function sub_6B06
00008570                            
00008570                            
00008570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008570                            
00008570                            
00008570                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00008570 8042                       		or.w	d2,d0
00008572 4840                       		swap	d0
00008574 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
00008578 6600                       		bne.s	loc_6B6E
0000857A 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
0000857E 6600                       		bne.s	loc_6B4E
00008580 2A80                       		move.l	d0,(a5)
00008582 2C99                       		move.l	(a1)+,(a6)
00008584 D087                       		add.l	d7,d0
00008586 2A80                       		move.l	d0,(a5)
00008588 2C99                       		move.l	(a1)+,(a6)
0000858A 4E75                       		rts	
0000858C                            ; ===========================================================================
0000858C                            
0000858C                            loc_6B4E:
0000858C 2A80                       		move.l	d0,(a5)
0000858E 2819                       		move.l	(a1)+,d4
00008590 0A84 0800 0800             		eori.l	#$8000800,d4
00008596 4844                       		swap	d4
00008598 2C84                       		move.l	d4,(a6)
0000859A D087                       		add.l	d7,d0
0000859C 2A80                       		move.l	d0,(a5)
0000859E 2819                       		move.l	(a1)+,d4
000085A0 0A84 0800 0800             		eori.l	#$8000800,d4
000085A6 4844                       		swap	d4
000085A8 2C84                       		move.l	d4,(a6)
000085AA 4E75                       		rts	
000085AC                            ; ===========================================================================
000085AC                            
000085AC                            loc_6B6E:
000085AC 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
000085B0 6600                       		bne.s	loc_6B90
000085B2 2A80                       		move.l	d0,(a5)
000085B4 2A19                       		move.l	(a1)+,d5
000085B6 2819                       		move.l	(a1)+,d4
000085B8 0A84 1000 1000             		eori.l	#$10001000,d4
000085BE 2C84                       		move.l	d4,(a6)
000085C0 D087                       		add.l	d7,d0
000085C2 2A80                       		move.l	d0,(a5)
000085C4 0A85 1000 1000             		eori.l	#$10001000,d5
000085CA 2C85                       		move.l	d5,(a6)
000085CC 4E75                       		rts	
000085CE                            ; ===========================================================================
000085CE                            
000085CE                            loc_6B90:
000085CE 2A80                       		move.l	d0,(a5)
000085D0 2A19                       		move.l	(a1)+,d5
000085D2 2819                       		move.l	(a1)+,d4
000085D4 0A84 1800 1800             		eori.l	#$18001800,d4
000085DA 4844                       		swap	d4
000085DC 2C84                       		move.l	d4,(a6)
000085DE D087                       		add.l	d7,d0
000085E0 2A80                       		move.l	d0,(a5)
000085E2 0A85 1800 1800             		eori.l	#$18001800,d5
000085E8 4845                       		swap	d5
000085EA 2C85                       		move.l	d5,(a6)
000085EC 4E75                       		rts	
000085EE                            ; End of function sub_6B32
000085EE                            
000085EE                            ; ===========================================================================
000085EE 4E75                       		rts	
000085F0                            ; ===========================================================================
000085F0 2A80                       		move.l	d0,(a5)
000085F2 3A3C 2000                  		move.w	#$2000,d5
000085F6 3819                       		move.w	(a1)+,d4
000085F8 D845                       		add.w	d5,d4
000085FA 3C84                       		move.w	d4,(a6)
000085FC 3819                       		move.w	(a1)+,d4
000085FE D845                       		add.w	d5,d4
00008600 3C84                       		move.w	d4,(a6)
00008602 D087                       		add.l	d7,d0
00008604 2A80                       		move.l	d0,(a5)
00008606 3819                       		move.w	(a1)+,d4
00008608 D845                       		add.w	d5,d4
0000860A 3C84                       		move.w	d4,(a6)
0000860C 3819                       		move.w	(a1)+,d4
0000860E D845                       		add.w	d5,d4
00008610 3C84                       		move.w	d4,(a6)
00008612 4E75                       		rts	
00008614                            
00008614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008614                            ; Reading from layout
00008614                            
00008614                            sub_6BD6:
00008614 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
00008618 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
0000861C DA53                       		add.w	(a3),d5					; MJ: load X position to d5
0000861E 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
00008620 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
00008624 E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
00008626 3005                       		move.w	d5,d0					; MJ: copy to d0
00008628 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
0000862A 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
0000862E E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
00008630 D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
00008632 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
00008634 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
00008638 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
0000863C EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
0000863E 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
00008642 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
00008646 D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
00008648 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
0000864A 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
0000864C 3610                       		move.w	(a0),d3
0000864E 0243 03FF                  		andi.w	#$3FF,d3
00008652 E74B                       		lsl.w	#3,d3
00008654 D2C3                       		adda.w	d3,a1
00008656                            
00008656                            locret_6C1E:
00008656 4E75                       		rts	
00008658                            ; End of function sub_6BD6
00008658                            
00008658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008658                            ; getting VRam location
00008658                            
00008658                            sub_6C20:
00008658 D86B 0004                  		add.w	4(a3),d4
0000865C DA53                       		add.w	(a3),d5
0000865E 0244 00F0                  		andi.w	#$F0,d4
00008662 0245 01F0                  		andi.w	#$1F0,d5
00008666 E94C                       		lsl.w	#4,d4
00008668 E44D                       		lsr.w	#2,d5
0000866A D845                       		add.w	d5,d4
0000866C 7003                       		moveq	#3,d0
0000866E 4840                       		swap	d0
00008670 3004                       		move.w	d4,d0
00008672 4E75                       		rts	
00008674                            ; End of function sub_6C20
00008674                            
00008674                            
00008674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008674                            ; not used
00008674                            
00008674                            
00008674                            sub_6C3C:
00008674 D86B 0004                  		add.w	4(a3),d4
00008678 DA53                       		add.w	(a3),d5
0000867A 0244 00F0                  		andi.w	#$F0,d4
0000867E 0245 01F0                  		andi.w	#$1F0,d5
00008682 E94C                       		lsl.w	#4,d4
00008684 E44D                       		lsr.w	#2,d5
00008686 D845                       		add.w	d5,d4
00008688 7002                       		moveq	#2,d0
0000868A 4840                       		swap	d0
0000868C 3004                       		move.w	d4,d0
0000868E 4E75                       		rts	
00008690                            ; End of function sub_6C3C
00008690                            
00008690                            ; ---------------------------------------------------------------------------
00008690                            ; Subroutine to	load tiles as soon as the level	appears
00008690                            ; ---------------------------------------------------------------------------
00008690                            
00008690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008690                            
00008690                            
00008690                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00008690 4BF9 00C0 0004             		lea	($C00004).l,a5
00008696 4DF9 00C0 0000             		lea	($C00000).l,a6
0000869C 47F8 F700                  		lea	($FFFFF700).w,a3
000086A0 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
000086A4 343C 4000                  		move.w	#$4000,d2
000086A8 6100                       		bsr.s	LoadTilesFromStart2
000086AA 47F8 F708                  		lea	($FFFFF708).w,a3
000086AE 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000086B2 343C 6000                  		move.w	#$6000,d2
000086B6                            ; End of function LoadTilesFromStart
000086B6                            
000086B6                            
000086B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B6                            
000086B6                            
000086B6                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000086B6 78F0                       		moveq	#-$10,d4
000086B8 7C0F                       		moveq	#$F,d6
000086BA                            
000086BA                            loc_6C82:
000086BA 48E7 0E00                  		movem.l	d4-d6,-(sp)
000086BE 7A00                       		moveq	#0,d5
000086C0 3204                       		move.w	d4,d1
000086C2 6100 FF94                  		bsr.w	sub_6C20
000086C6 3801                       		move.w	d1,d4
000086C8 7A00                       		moveq	#0,d5
000086CA 7C1F                       		moveq	#$1F,d6
000086CC 6100 FE4A                  		bsr.w	sub_6ADA
000086D0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000086D4 0644 0010                  		addi.w	#$10,d4
000086D8 51CE FFE0                  		dbf	d6,loc_6C82
000086DC 4E75                       		rts	
000086DE                            ; End of function LoadTilesFromStart2
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Main Load Block loading subroutine
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            
000086DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DE                            
000086DE                            
000086DE                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000086DE 7000                       		moveq	#0,d0
000086E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000086E4 E948                       		lsl.w	#4,d0
000086E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000086EC 45F2 0000                  		lea	(a2,d0.w),a2
000086F0 2F0A                       		move.l	a2,-(sp)
000086F2 588A                       		addq.l	#4,a2
000086F4 205A                       		movea.l	(a2)+,a0
000086F6 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000086FA 303C 0000                  		move.w	#0,d0
000086FE 6100 9024                  		bsr.w	EniDec
00008702 205A                       		movea.l	(a2)+,a0
00008704 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000870A 6100 9196                  		bsr.w	KosDec
0000870E 6100 0000                  		bsr.w	LevelLayoutLoad
00008712 301A                       		move.w	(a2)+,d0
00008714 3012                       		move.w	(a2),d0
00008716 0240 00FF                  		andi.w	#$FF,d0
0000871A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00008720 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00008722 700C                       		moveq	#$C,d0		; use SB3 Palette
00008724                            
00008724                            MLB_ChkSBZPal:
00008724 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000872A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000872C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00008732 6600                       		bne.s	MLB_NormalPal	; if not, branch
00008734                            
00008734                            MLB_UsePal0E:
00008734 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
00008736                            
00008736                            MLB_NormalPal:
00008736 6100 9B5C                  		bsr.w	PalLoad1	; load Palette (based on	d0)
0000873A 245F                       		movea.l	(sp)+,a2
0000873C 584A                       		addq.w	#4,a2
0000873E 7000                       		moveq	#0,d0
00008740 1012                       		move.b	(a2),d0
00008742 6700                       		beq.s	locret_6D10
00008744 6100 8E40                  		bsr.w	LoadPLC		; load pattern load cues
00008748                            
00008748                            locret_6D10:
00008748 4E75                       		rts	
0000874A                            ; End of function MainLoadBlockLoad
0000874A                            
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            ; Level	layout loading subroutine
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            
0000874A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000874A                            ; This method now releases free ram space from A408 - A7FF
0000874A                            
0000874A                            LevelLayoutLoad:
0000874A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000874E ED08                       		lsl.b	#6,d0
00008750 E848                       		lsr.w	#4,d0
00008752 3400                       		move.w	d0,d2
00008754 D040                       		add.w	d0,d0
00008756 D042                       		add.w	d2,d0
00008758 43F9 0000 0000             		lea	(Level_Index).l,a1
0000875E 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
00008762 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
00008766 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000876A 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000876E 4E75                       		rts						; MJ: Return
00008770                            
00008770                            ; End of function LevelLayoutLoad2
00008770                            
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Dynamic screen resize	loading	subroutine
00008770                            ; ---------------------------------------------------------------------------
00008770                            
00008770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008770                            
00008770                            
00008770                            DynScrResizeLoad:			; XREF: DeformBgLayer
00008770 7000                       		moveq	#0,d0
00008772 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008776 D040                       		add.w	d0,d0
00008778 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000877C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00008780 7202                       		moveq	#2,d1
00008782 3038 F726                  		move.w	($FFFFF726).w,d0
00008786 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000878A 6700                       		beq.s	locret_6DAA
0000878C 6400                       		bcc.s	loc_6DAC
0000878E 4441                       		neg.w	d1
00008790 3038 F704                  		move.w	($FFFFF704).w,d0
00008794 B078 F726                  		cmp.w	($FFFFF726).w,d0
00008798 6300                       		bls.s	loc_6DA0
0000879A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000879E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000087A4                            
000087A4                            loc_6DA0:
000087A4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087A8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087AE                            
000087AE                            locret_6DAA:
000087AE 4E75                       		rts	
000087B0                            ; ===========================================================================
000087B0                            
000087B0                            loc_6DAC:				; XREF: DynScrResizeLoad
000087B0 3038 F704                  		move.w	($FFFFF704).w,d0
000087B4 5040                       		addq.w	#8,d0
000087B6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000087BA 6500                       		bcs.s	loc_6DC4
000087BC 0838 0001 D022             		btst	#1,($FFFFD022).w
000087C2 6700                       		beq.s	loc_6DC4
000087C4 D241                       		add.w	d1,d1
000087C6 D241                       		add.w	d1,d1
000087C8                            
000087C8                            loc_6DC4:
000087C8 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087CC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087D2 4E75                       		rts	
000087D4                            ; End of function DynScrResizeLoad
000087D4                            
000087D4                            ; ===========================================================================
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Offset index for dynamic screen resizing
000087D4                            ; ---------------------------------------------------------------------------
000087D4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000087D8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000087DC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000087E0 0000                       		dc.w Resize_Ending-Resize_Index
000087E2                            ; ===========================================================================
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Green	Hill Zone dynamic screen resizing
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            
000087E2                            Resize_GHZ:				; XREF: Resize_Index
000087E2 7000                       		moveq	#0,d0
000087E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000087E8 D040                       		add.w	d0,d0
000087EA 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000087EE 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000087F2                            ; ===========================================================================
000087F2 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000087F4 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000087F6 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            Resize_GHZ1:
000087F8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000087FE 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00008804 6500                       		bcs.s	locret_6E08	; if not, branch
00008806 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000880C                            
0000880C                            locret_6E08:
0000880C 4E75                       		rts	
0000880E                            ; ===========================================================================
0000880E                            
0000880E                            Resize_GHZ2:
0000880E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008814 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000881A 6500                       		bcs.s	locret_6E3A
0000881C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008822 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00008828 6500                       		bcs.s	locret_6E3A
0000882A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00008830 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00008836 6500                       		bcs.s	locret_6E3A
00008838 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000883E                            
0000883E                            locret_6E3A:
0000883E 4E75                       		rts	
00008840                            ; ===========================================================================
00008840                            
00008840                            Resize_GHZ3:
00008840 7000                       		moveq	#0,d0
00008842 1038 F742                  		move.b	($FFFFF742).w,d0
00008846 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000884A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000884E                            ; ===========================================================================
0000884E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00008850 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00008852 0000                       		dc.w Resize_GHZ3end-off_6E4A
00008854                            ; ===========================================================================
00008854                            
00008854                            Resize_GHZ3main:
00008854 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000885A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00008860 6500                       		bcs.s	locret_6E96
00008862 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00008868 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000886E 6500                       		bcs.s	locret_6E96
00008870 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00008876 6500                       		bcs.s	loc_6E98
00008878 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000887E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00008884 6400                       		bcc.s	loc_6E8E
00008886 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000888C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00008892                            
00008892                            loc_6E8E:
00008892 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008898 6400                       		bcc.s	loc_6E98
0000889A                            
0000889A                            locret_6E96:
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            loc_6E98:
0000889C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000088A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000088A6 4E75                       		rts	
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            Resize_GHZ3boss:
000088A8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000088AE 6400                       		bcc.s	loc_6EB0
000088B0 5538 F742                  		subq.b	#2,($FFFFF742).w
000088B4                            
000088B4                            loc_6EB0:
000088B4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000088BA 6500                       		bcs.s	locret_6EE8
000088BC 6100 0000                  		bsr.w	SingleObjLoad
000088C0 6600                       		bne.s	loc_6ED0
000088C2 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000088C6 337C 2A60 0008             		move.w	#$2A60,8(a1)
000088CC 337C 0280 000C             		move.w	#$280,$C(a1)
000088D2                            
000088D2                            loc_6ED0:
000088D2 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000088D8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000088DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000088E2 7011                       		moveq	#$11,d0
000088E4 6000 8CA0                  		bra.w	LoadPLC		; load boss patterns
000088E8                            ; ===========================================================================
000088E8                            
000088E8                            locret_6EE8:
000088E8 4E75                       		rts	
000088EA                            ; ===========================================================================
000088EA                            
000088EA                            Resize_GHZ3end:
000088EA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000088F0 4E75                       		rts	
000088F2                            ; ===========================================================================
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            ; Labyrinth Zone dynamic screen	resizing
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            
000088F2                            Resize_LZ:				; XREF: Resize_Index
000088F2 7000                       		moveq	#0,d0
000088F4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000088F8 D040                       		add.w	d0,d0
000088FA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000088FE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008902                            ; ===========================================================================
00008902 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00008904 0000                       		dc.w Resize_LZ12-Resize_LZx
00008906 0000                       		dc.w Resize_LZ3-Resize_LZx
00008908 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            Resize_LZ12:
0000890A 4E75                       		rts	
0000890C                            ; ===========================================================================
0000890C                            
0000890C                            Resize_LZ3:
0000890C 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
00008910 6700                       		beq.s	loc_6F28				; if not, branch
00008912 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
00008916 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
0000891C 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
0000891E 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
00008926 303C 00B7                  		move.w	#$B7,d0
0000892A 6100 89A2                  		bsr.w	PlaySound_Special ; play rumbling sound
0000892E                            
0000892E                            loc_6F28:
0000892E 4A38 F742                  		tst.b	($FFFFF742).w
00008932 6600                       		bne.s	locret_6F64
00008934 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000893A 6500                       		bcs.s	locret_6F62
0000893C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008942 6400                       		bcc.s	locret_6F62
00008944 6100 0000                  		bsr.w	SingleObjLoad
00008948 6600                       		bne.s	loc_6F4A
0000894A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000894E                            
0000894E                            loc_6F4A:
0000894E 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008954 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000895A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000895E 7011                       		moveq	#$11,d0
00008960 6000 8C24                  		bra.w	LoadPLC		; load boss patterns
00008964                            ; ===========================================================================
00008964                            
00008964                            locret_6F62:
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            locret_6F64:
00008966 4E75                       		rts	
00008968                            ; ===========================================================================
00008968                            
00008968                            Resize_SBZ3:
00008968 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000896E 6500                       		bcs.s	locret_6F8C
00008970 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008976 6400                       		bcc.s	locret_6F8C	; if not, branch
00008978 4238 FE30                  		clr.b	($FFFFFE30).w
0000897C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00008982 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008988 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000898E                            
0000898E                            locret_6F8C:
0000898E 4E75                       		rts	
00008990                            ; ===========================================================================
00008990                            ; ---------------------------------------------------------------------------
00008990                            ; Marble Zone dynamic screen resizing
00008990                            ; ---------------------------------------------------------------------------
00008990                            
00008990                            Resize_MZ:				; XREF: Resize_Index
00008990 7000                       		moveq	#0,d0
00008992 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008996 D040                       		add.w	d0,d0
00008998 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000899C 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000089A0                            ; ===========================================================================
000089A0 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000089A2 0000                       		dc.w Resize_MZ2-Resize_MZx
000089A4 0000                       		dc.w Resize_MZ3-Resize_MZx
000089A6                            ; ===========================================================================
000089A6                            
000089A6                            Resize_MZ1:
000089A6 7000                       		moveq	#0,d0
000089A8 1038 F742                  		move.b	($FFFFF742).w,d0
000089AC 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000089B0 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000089B4                            ; ===========================================================================
000089B4 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000089B6 0000                       		dc.w loc_6FEA-off_6FB2
000089B8 0000                       		dc.w loc_702E-off_6FB2
000089BA 0000                       		dc.w loc_7050-off_6FB2
000089BC                            ; ===========================================================================
000089BC                            
000089BC                            loc_6FBA:
000089BC 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000089C2 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000089C8 6500                       		bcs.s	locret_6FE8
000089CA 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000089D0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000089D6 6500                       		bcs.s	locret_6FE8
000089D8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000089DE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089E4 6500                       		bcs.s	locret_6FE8
000089E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000089EA                            
000089EA                            locret_6FE8:
000089EA 4E75                       		rts	
000089EC                            ; ===========================================================================
000089EC                            
000089EC                            loc_6FEA:
000089EC 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089F2 6400                       		bcc.s	loc_6FF8
000089F4 5538 F742                  		subq.b	#2,($FFFFF742).w
000089F8 4E75                       		rts	
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            loc_6FF8:
000089FA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A00 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008A06 6400                       		bcc.s	locret_702C
00008A08 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008A0E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008A14 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008A1A 6400                       		bcc.s	locret_702C
00008A1C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A22 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A28 6500                       		bcs.s	locret_702C
00008A2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A2E                            
00008A2E                            locret_702C:
00008A2E 4E75                       		rts	
00008A30                            ; ===========================================================================
00008A30                            
00008A30                            loc_702E:
00008A30 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A36 6400                       		bcc.s	loc_703C
00008A38 5538 F742                  		subq.b	#2,($FFFFF742).w
00008A3C 4E75                       		rts	
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            loc_703C:
00008A3E 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008A44 6500                       		bcs.s	locret_704E
00008A46 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008A4C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A50                            
00008A50                            locret_704E:
00008A50 4E75                       		rts	
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            loc_7050:
00008A52 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008A58 6500                       		bcs.s	locret_7072
00008A5A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A60 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A66 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008A6C 6500                       		bcs.s	locret_7072
00008A6E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008A74                            
00008A74                            locret_7072:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Resize_MZ2:
00008A76 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008A7C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008A82 6500                       		bcs.s	locret_7088
00008A84 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008A8A                            
00008A8A                            locret_7088:
00008A8A 4E75                       		rts	
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Resize_MZ3:
00008A8C 7000                       		moveq	#0,d0
00008A8E 1038 F742                  		move.b	($FFFFF742).w,d0
00008A92 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A96 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A9A                            ; ===========================================================================
00008A9A 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008A9C 0000                       		dc.w Resize_MZ3end-off_7098
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            Resize_MZ3boss:
00008A9E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008AA4 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008AAA 6500                       		bcs.s	locret_70E8
00008AAC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008AB2 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008AB8 6500                       		bcs.s	locret_70E8
00008ABA 6100 0000                  		bsr.w	SingleObjLoad
00008ABE 6600                       		bne.s	loc_70D0
00008AC0 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008AC4 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008ACA 337C 022C 000C             		move.w	#$22C,$C(a1)
00008AD0                            
00008AD0                            loc_70D0:
00008AD0 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008AD6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008ADC 5438 F742                  		addq.b	#2,($FFFFF742).w
00008AE0 7011                       		moveq	#$11,d0
00008AE2 6000 8AA2                  		bra.w	LoadPLC		; load boss patterns
00008AE6                            ; ===========================================================================
00008AE6                            
00008AE6                            locret_70E8:
00008AE6 4E75                       		rts	
00008AE8                            ; ===========================================================================
00008AE8                            
00008AE8                            Resize_MZ3end:
00008AE8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008AEE 4E75                       		rts	
00008AF0                            ; ===========================================================================
00008AF0                            ; ---------------------------------------------------------------------------
00008AF0                            ; Star Light Zone dynamic screen resizing
00008AF0                            ; ---------------------------------------------------------------------------
00008AF0                            
00008AF0                            Resize_SLZ:				; XREF: Resize_Index
00008AF0 7000                       		moveq	#0,d0
00008AF2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008AF6 D040                       		add.w	d0,d0
00008AF8 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008AFC 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008B00                            ; ===========================================================================
00008B00 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008B02 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008B04 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008B06                            ; ===========================================================================
00008B06                            
00008B06                            Resize_SLZ12:
00008B06 4E75                       		rts	
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            Resize_SLZ3:
00008B08 7000                       		moveq	#0,d0
00008B0A 1038 F742                  		move.b	($FFFFF742).w,d0
00008B0E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008B12 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008B16                            ; ===========================================================================
00008B16 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008B18 0000                       		dc.w Resize_SLZ3boss-off_7118
00008B1A 0000                       		dc.w Resize_SLZ3end-off_7118
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            Resize_SLZ3main:
00008B1C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008B22 6500                       		bcs.s	locret_7130
00008B24 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B2E                            
00008B2E                            locret_7130:
00008B2E 4E75                       		rts	
00008B30                            ; ===========================================================================
00008B30                            
00008B30                            Resize_SLZ3boss:
00008B30 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008B36 6500                       		bcs.s	locret_715C
00008B38 6100 0000                  		bsr.w	SingleObjLoad
00008B3C 6600                       		bne.s	loc_7144
00008B3E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008B42                            
00008B42                            loc_7144:
00008B42 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008B48 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008B4E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B52 7011                       		moveq	#$11,d0
00008B54 6000 8A30                  		bra.w	LoadPLC		; load boss patterns
00008B58                            ; ===========================================================================
00008B58                            
00008B58                            locret_715C:
00008B58 4E75                       		rts	
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            Resize_SLZ3end:
00008B5A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008B60 4E75                       		rts
00008B62 4E75                       		rts
00008B64                            ; ===========================================================================
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            ; Spring Yard Zone dynamic screen resizing
00008B64                            ; ---------------------------------------------------------------------------
00008B64                            
00008B64                            Resize_SYZ:				; XREF: Resize_Index
00008B64 7000                       		moveq	#0,d0
00008B66 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008B6A D040                       		add.w	d0,d0
00008B6C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008B70 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008B74                            ; ===========================================================================
00008B74 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008B76 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008B78 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008B7A                            ; ===========================================================================
00008B7A                            
00008B7A                            Resize_SYZ1:
00008B7A 4E75                       		rts	
00008B7C                            ; ===========================================================================
00008B7C                            
00008B7C                            Resize_SYZ2:
00008B7C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B82 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008B88 6500                       		bcs.s	locret_71A2
00008B8A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008B90 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008B96 6500                       		bcs.s	locret_71A2
00008B98 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B9E                            
00008B9E                            locret_71A2:
00008B9E 4E75                       		rts	
00008BA0                            ; ===========================================================================
00008BA0                            
00008BA0                            Resize_SYZ3:
00008BA0 7000                       		moveq	#0,d0
00008BA2 1038 F742                  		move.b	($FFFFF742).w,d0
00008BA6 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008BAA 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008BAE                            ; ===========================================================================
00008BAE 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008BB0 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008BB2 0000                       		dc.w Resize_SYZ3end-off_71B2
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            Resize_SYZ3main:
00008BB4 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008BBA 6500                       		bcs.s	locret_71CE
00008BBC 6100 0000                  		bsr.w	SingleObjLoad
00008BC0 6600                       		bne.s	locret_71CE
00008BC2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008BC6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BCA                            
00008BCA                            locret_71CE:
00008BCA 4E75                       		rts	
00008BCC                            ; ===========================================================================
00008BCC                            
00008BCC                            Resize_SYZ3boss:
00008BCC 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008BD2 6500                       		bcs.s	locret_7200
00008BD4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008BDA 6100 0000                  		bsr.w	SingleObjLoad
00008BDE 6600                       		bne.s	loc_71EC
00008BE0 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008BE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BE8                            
00008BE8                            loc_71EC:
00008BE8 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008BEE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008BF4 7011                       		moveq	#$11,d0
00008BF6 6000 898E                  		bra.w	LoadPLC		; load boss patterns
00008BFA                            ; ===========================================================================
00008BFA                            
00008BFA                            locret_7200:
00008BFA 4E75                       		rts	
00008BFC                            ; ===========================================================================
00008BFC                            
00008BFC                            Resize_SYZ3end:
00008BFC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008C02 4E75                       		rts	
00008C04                            ; ===========================================================================
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Scrap	Brain Zone dynamic screen resizing
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            
00008C04                            Resize_SBZ:				; XREF: Resize_Index
00008C04 7000                       		moveq	#0,d0
00008C06 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008C0A D040                       		add.w	d0,d0
00008C0C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008C10 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008C14                            ; ===========================================================================
00008C14 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008C16 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008C18 0000                       		dc.w Resize_FZ-Resize_SBZx
00008C1A                            ; ===========================================================================
00008C1A                            
00008C1A                            Resize_SBZ1:
00008C1A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008C20 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008C26 6500                       		bcs.s	locret_7242
00008C28 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008C2E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008C34 6500                       		bcs.s	locret_7242
00008C36 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008C3C                            
00008C3C                            locret_7242:
00008C3C 4E75                       		rts	
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            Resize_SBZ2:
00008C3E 7000                       		moveq	#0,d0
00008C40 1038 F742                  		move.b	($FFFFF742).w,d0
00008C44 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C48 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C4C                            ; ===========================================================================
00008C4C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008C4E 0000                       		dc.w Resize_SBZ2boss-off_7252
00008C50 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008C52 0000                       		dc.w Resize_SBZ2end-off_7252
00008C54                            ; ===========================================================================
00008C54                            
00008C54                            Resize_SBZ2main:
00008C54 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008C5A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008C60 6500                       		bcs.s	locret_727A
00008C62 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008C68 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008C6E 6500                       		bcs.s	locret_727A
00008C70 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C74                            
00008C74                            locret_727A:
00008C74 4E75                       		rts	
00008C76                            ; ===========================================================================
00008C76                            
00008C76                            Resize_SBZ2boss:
00008C76 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008C7C 6500                       		bcs.s	locret_7298
00008C7E 6100 0000                  		bsr.w	SingleObjLoad
00008C82 6600                       		bne.s	locret_7298
00008C84 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008C88 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C8C 701E                       		moveq	#$1E,d0
00008C8E 6000 88F6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008C92                            ; ===========================================================================
00008C92                            
00008C92                            locret_7298:
00008C92 4E75                       		rts	
00008C94                            ; ===========================================================================
00008C94                            
00008C94                            Resize_SBZ2boss2:
00008C94 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008C9A 6500                       		bcs.s	loc_72B6
00008C9C 6100 0000                  		bsr.w	SingleObjLoad
00008CA0 6600                       		bne.s	loc_72B0
00008CA2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008CA6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CAA                            
00008CAA                            loc_72B0:
00008CAA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008CB0                            
00008CB0                            loc_72B6:
00008CB0 6000                       		bra.s	loc_72C2
00008CB2                            ; ===========================================================================
00008CB2                            
00008CB2                            Resize_SBZ2end:
00008CB2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008CB8 6500                       		bcs.s	loc_72C2
00008CBA 4E75                       		rts	
00008CBC                            ; ===========================================================================
00008CBC                            
00008CBC                            loc_72C2:
00008CBC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008CC2 4E75                       		rts	
00008CC4                            ; ===========================================================================
00008CC4                            
00008CC4                            Resize_FZ:
00008CC4 7000                       		moveq	#0,d0
00008CC6 1038 F742                  		move.b	($FFFFF742).w,d0
00008CCA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008CCE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008CD2                            ; ===========================================================================
00008CD2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008CD6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008CDA 0000                       		dc.w Resize_FZend2-off_72D8
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            Resize_FZmain:
00008CDC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008CE2 6500                       		bcs.s	loc_72F4
00008CE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CE8 701F                       		moveq	#$1F,d0
00008CEA 6100 889A                  		bsr.w	LoadPLC		; load FZ boss patterns
00008CEE                            
00008CEE                            loc_72F4:
00008CEE 60CC                       		bra.s	loc_72C2
00008CF0                            ; ===========================================================================
00008CF0                            
00008CF0                            Resize_FZboss:
00008CF0 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008CF6 6500                       		bcs.s	loc_7312
00008CF8 6100 0000                  		bsr.w	SingleObjLoad
00008CFC 6600                       		bne.s	loc_7312
00008CFE 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008D02 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D06 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008D0C                            
00008D0C                            loc_7312:
00008D0C 60AE                       		bra.s	loc_72C2
00008D0E                            ; ===========================================================================
00008D0E                            
00008D0E                            Resize_FZend:
00008D0E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008D14 6500                       		bcs.s	loc_7320
00008D16 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D1A                            
00008D1A                            loc_7320:
00008D1A 60A0                       		bra.s	loc_72C2
00008D1C                            ; ===========================================================================
00008D1C                            
00008D1C                            locret_7322:
00008D1C 4E75                       		rts	
00008D1E                            ; ===========================================================================
00008D1E                            
00008D1E                            Resize_FZend2:
00008D1E 609C                       		bra.s	loc_72C2
00008D20                            ; ===========================================================================
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            ; Ending sequence dynamic screen resizing (empty)
00008D20                            ; ---------------------------------------------------------------------------
00008D20                            
00008D20                            Resize_Ending:				; XREF: Resize_Index
00008D20 4E75                       		rts	
00008D22                            ; ===========================================================================
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Object 11 - GHZ bridge
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            
00008D22                            Obj11:					; XREF: Obj_Index
00008D22 7000                       		moveq	#0,d0
00008D24 1028 0024                  		move.b	$24(a0),d0
00008D28 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008D2C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008D30                            ; ===========================================================================
00008D30 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008D34 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008D38 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj11_Main:				; XREF: Obj11_Index
00008D3C 5428 0024                  		addq.b	#2,$24(a0)
00008D40 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008D48 317C 438E 0002             		move.w	#$438E,2(a0)
00008D4E 117C 0004 0001             		move.b	#4,1(a0)
00008D54 117C 0003 0018             		move.b	#3,$18(a0)
00008D5A 117C 0080 0019             		move.b	#$80,$19(a0)
00008D60 3428 000C                  		move.w	$C(a0),d2
00008D64 3628 0008                  		move.w	8(a0),d3
00008D68 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D6A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008D6E 7200                       		moveq	#0,d1
00008D70 1212                       		move.b	(a2),d1		; copy a2 to d1
00008D72 14FC 0000                  		move.b	#0,(a2)+
00008D76 3001                       		move.w	d1,d0
00008D78 E248                       		lsr.w	#1,d0
00008D7A E948                       		lsl.w	#4,d0
00008D7C 9640                       		sub.w	d0,d3
00008D7E 5501                       		subq.b	#2,d1
00008D80 6500                       		bcs.s	Obj11_Action
00008D82                            
00008D82                            Obj11_MakeBdg:
00008D82 6100 0000                  		bsr.w	SingleObjLoad
00008D86 6600                       		bne.s	Obj11_Action
00008D88 5228 0028                  		addq.b	#1,$28(a0)
00008D8C B668 0008                  		cmp.w	8(a0),d3
00008D90 6600                       		bne.s	loc_73B8
00008D92 0643 0010                  		addi.w	#$10,d3
00008D96 3142 000C                  		move.w	d2,$C(a0)
00008D9A 3142 003C                  		move.w	d2,$3C(a0)
00008D9E 3A08                       		move.w	a0,d5
00008DA0 0445 D000                  		subi.w	#-$3000,d5
00008DA4 EC4D                       		lsr.w	#6,d5
00008DA6 0245 007F                  		andi.w	#$7F,d5
00008DAA 14C5                       		move.b	d5,(a2)+
00008DAC 5228 0028                  		addq.b	#1,$28(a0)
00008DB0                            
00008DB0                            loc_73B8:				; XREF: ROM:00007398j
00008DB0 3A09                       		move.w	a1,d5
00008DB2 0445 D000                  		subi.w	#-$3000,d5
00008DB6 EC4D                       		lsr.w	#6,d5
00008DB8 0245 007F                  		andi.w	#$7F,d5
00008DBC 14C5                       		move.b	d5,(a2)+
00008DBE 137C 000A 0024             		move.b	#$A,$24(a1)
00008DC4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008DC6 3342 000C                  		move.w	d2,$C(a1)
00008DCA 3342 003C                  		move.w	d2,$3C(a1)
00008DCE 3343 0008                  		move.w	d3,8(a1)
00008DD2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008DDA 337C 438E 0002             		move.w	#$438E,2(a1)
00008DE0 137C 0004 0001             		move.b	#4,1(a1)
00008DE6 137C 0003 0018             		move.b	#3,$18(a1)
00008DEC 137C 0008 0019             		move.b	#8,$19(a1)
00008DF2 0643 0010                  		addi.w	#$10,d3
00008DF6 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008DFA                            
00008DFA                            Obj11_Action:				; XREF: Obj11_Index
00008DFA 6100                       		bsr.s	Obj11_Solid
00008DFC 4A28 003E                  		tst.b	$3E(a0)
00008E00 6700                       		beq.s	Obj11_Display
00008E02 5928 003E                  		subq.b	#4,$3E(a0)
00008E06 6100 0000                  		bsr.w	Obj11_Bend
00008E0A                            
00008E0A                            Obj11_Display:
00008E0A 6100 0000                  		bsr.w	DisplaySprite
00008E0E 6000 0000                  		bra.w	Obj11_ChkDel
00008E12                            
00008E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E12                            
00008E12                            
00008E12                            Obj11_Solid:				; XREF: Obj11_Action
00008E12 7200                       		moveq	#0,d1
00008E14 1228 0028                  		move.b	$28(a0),d1
00008E18 E749                       		lsl.w	#3,d1
00008E1A 3401                       		move.w	d1,d2
00008E1C 5041                       		addq.w	#8,d1
00008E1E D442                       		add.w	d2,d2
00008E20 43F8 D000                  		lea	($FFFFD000).w,a1
00008E24 4A69 0012                  		tst.w	$12(a1)
00008E28 6B00 0000                  		bmi.w	locret_751E
00008E2C 3029 0008                  		move.w	8(a1),d0
00008E30 9068 0008                  		sub.w	8(a0),d0
00008E34 D041                       		add.w	d1,d0
00008E36 6B00 0000                  		bmi.w	locret_751E
00008E3A B042                       		cmp.w	d2,d0
00008E3C 6400 0000                  		bcc.w	locret_751E
00008E40 6000                       		bra.s	Platform2
00008E42                            ; End of function Obj11_Solid
00008E42                            
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            ; Platform subroutine
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            
00008E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E42                            
00008E42                            
00008E42                            PlatformObject:
00008E42 43F8 D000                  		lea	($FFFFD000).w,a1
00008E46 4A69 0012                  		tst.w	$12(a1)
00008E4A 6B00 0000                  		bmi.w	locret_751E
00008E4E 3029 0008                  		move.w	8(a1),d0
00008E52 9068 0008                  		sub.w	8(a0),d0
00008E56 D041                       		add.w	d1,d0
00008E58 6B00 0000                  		bmi.w	locret_751E
00008E5C D241                       		add.w	d1,d1
00008E5E B041                       		cmp.w	d1,d0
00008E60 6400 0000                  		bcc.w	locret_751E
00008E64                            
00008E64                            Platform2:
00008E64 3028 000C                  		move.w	$C(a0),d0
00008E68 5140                       		subq.w	#8,d0
00008E6A                            
00008E6A                            Platform3:
00008E6A 3429 000C                  		move.w	$C(a1),d2
00008E6E 1229 0016                  		move.b	$16(a1),d1
00008E72 4881                       		ext.w	d1
00008E74 D242                       		add.w	d2,d1
00008E76 5841                       		addq.w	#4,d1
00008E78 9041                       		sub.w	d1,d0
00008E7A 6200 0000                  		bhi.w	locret_751E
00008E7E 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E82 6500 0000                  		bcs.w	locret_751E
00008E86 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008E8A 6B00 0000                  		bmi.w	locret_751E
00008E8E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008E94 6400 0000                  		bcc.w	locret_751E
00008E98 D440                       		add.w	d0,d2
00008E9A 5642                       		addq.w	#3,d2
00008E9C 3342 000C                  		move.w	d2,$C(a1)
00008EA0 5428 0024                  		addq.b	#2,$24(a0)
00008EA4                            
00008EA4                            loc_74AE:
00008EA4 0829 0003 0022             		btst	#3,$22(a1)
00008EAA 6700                       		beq.s	loc_74DC
00008EAC 7000                       		moveq	#0,d0
00008EAE 1029 003D                  		move.b	$3D(a1),d0
00008EB2 ED48                       		lsl.w	#6,d0
00008EB4 0680 00FF D000             		addi.l	#$FFD000,d0
00008EBA 2440                       		movea.l	d0,a2
00008EBC 08AA 0003 0022             		bclr	#3,$22(a2)
00008EC2 422A 0025                  		clr.b	$25(a2)
00008EC6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008ECC 6600                       		bne.s	loc_74DC
00008ECE 552A 0024                  		subq.b	#2,$24(a2)
00008ED2                            
00008ED2                            loc_74DC:
00008ED2 3008                       		move.w	a0,d0
00008ED4 0440 D000                  		subi.w	#-$3000,d0
00008ED8 EC48                       		lsr.w	#6,d0
00008EDA 0240 007F                  		andi.w	#$7F,d0
00008EDE 1340 003D                  		move.b	d0,$3D(a1)
00008EE2 137C 0000 0026             		move.b	#0,$26(a1)
00008EE8 337C 0000 0012             		move.w	#0,$12(a1)
00008EEE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008EF4 0829 0001 0022             		btst	#1,$22(a1)
00008EFA 6700                       		beq.s	loc_7512
00008EFC 2F08                       		move.l	a0,-(sp)
00008EFE 2049                       		movea.l	a1,a0
00008F00 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008F06 205F                       		movea.l	(sp)+,a0
00008F08                            
00008F08                            loc_7512:
00008F08 08E9 0003 0022             		bset	#3,$22(a1)
00008F0E 08E8 0003 0022             		bset	#3,$22(a0)
00008F14                            
00008F14                            locret_751E:
00008F14 4E75                       		rts	
00008F16                            ; End of function PlatformObject
00008F16                            
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            
00008F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F16                            
00008F16                            
00008F16                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008F16 43F8 D000                  		lea	($FFFFD000).w,a1
00008F1A 4A69 0012                  		tst.w	$12(a1)
00008F1E 6B00 FFF4                  		bmi.w	locret_751E
00008F22 3029 0008                  		move.w	8(a1),d0
00008F26 9068 0008                  		sub.w	8(a0),d0
00008F2A D041                       		add.w	d1,d0
00008F2C 6BE6                       		bmi.s	locret_751E
00008F2E D241                       		add.w	d1,d1
00008F30 B041                       		cmp.w	d1,d0
00008F32 64E0                       		bcc.s	locret_751E
00008F34 0828 0000 0001             		btst	#0,1(a0)
00008F3A 6700                       		beq.s	loc_754A
00008F3C 4640                       		not.w	d0
00008F3E D041                       		add.w	d1,d0
00008F40                            
00008F40                            loc_754A:
00008F40 E248                       		lsr.w	#1,d0
00008F42 7600                       		moveq	#0,d3
00008F44 1632 0000                  		move.b	(a2,d0.w),d3
00008F48 3028 000C                  		move.w	$C(a0),d0
00008F4C 9043                       		sub.w	d3,d0
00008F4E 6000 FF1A                  		bra.w	Platform3
00008F52                            ; End of function SlopeObject
00008F52                            
00008F52                            
00008F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F52                            
00008F52                            
00008F52                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008F52 43F8 D000                  		lea	($FFFFD000).w,a1
00008F56 4A69 0012                  		tst.w	$12(a1)
00008F5A 6B00 FFB8                  		bmi.w	locret_751E
00008F5E 3029 0008                  		move.w	8(a1),d0
00008F62 9068 0008                  		sub.w	8(a0),d0
00008F66 D041                       		add.w	d1,d0
00008F68 6B00 FFAA                  		bmi.w	locret_751E
00008F6C D241                       		add.w	d1,d1
00008F6E B041                       		cmp.w	d1,d0
00008F70 6400 FFA2                  		bcc.w	locret_751E
00008F74 3028 000C                  		move.w	$C(a0),d0
00008F78 9043                       		sub.w	d3,d0
00008F7A 6000 FEEE                  		bra.w	Platform3
00008F7E                            ; End of function Obj15_Solid
00008F7E                            
00008F7E                            ; ===========================================================================
00008F7E                            
00008F7E                            Obj11_Action2:				; XREF: Obj11_Index
00008F7E 6100                       		bsr.s	Obj11_WalkOff
00008F80 6100 0000                  		bsr.w	DisplaySprite
00008F84 6000 0000                  		bra.w	Obj11_ChkDel
00008F88                            
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            ; Subroutine allowing Sonic to walk off a bridge
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            
00008F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F88                            
00008F88                            
00008F88                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008F88 7200                       		moveq	#0,d1
00008F8A 1228 0028                  		move.b	$28(a0),d1
00008F8E E749                       		lsl.w	#3,d1
00008F90 3401                       		move.w	d1,d2
00008F92 5041                       		addq.w	#8,d1
00008F94 6100                       		bsr.s	ExitPlatform2
00008F96 6400                       		bcc.s	locret_75BE
00008F98 E848                       		lsr.w	#4,d0
00008F9A 1140 003F                  		move.b	d0,$3F(a0)
00008F9E 1028 003E                  		move.b	$3E(a0),d0
00008FA2 0C00 0040                  		cmpi.b	#$40,d0
00008FA6 6700                       		beq.s	loc_75B6
00008FA8 5828 003E                  		addq.b	#4,$3E(a0)
00008FAC                            
00008FAC                            loc_75B6:
00008FAC 6100 0000                  		bsr.w	Obj11_Bend
00008FB0 6100 0000                  		bsr.w	Obj11_MoveSonic
00008FB4                            
00008FB4                            locret_75BE:
00008FB4 4E75                       		rts	
00008FB6                            ; End of function Obj11_WalkOff
00008FB6                            
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            
00008FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB6                            
00008FB6                            
00008FB6                            ExitPlatform:
00008FB6 3401                       		move.w	d1,d2
00008FB8                            
00008FB8                            ExitPlatform2:
00008FB8 D442                       		add.w	d2,d2
00008FBA 43F8 D000                  		lea	($FFFFD000).w,a1
00008FBE 0829 0001 0022             		btst	#1,$22(a1)
00008FC4 6600                       		bne.s	loc_75E0
00008FC6 3029 0008                  		move.w	8(a1),d0
00008FCA 9068 0008                  		sub.w	8(a0),d0
00008FCE D041                       		add.w	d1,d0
00008FD0 6B00                       		bmi.s	loc_75E0
00008FD2 B042                       		cmp.w	d2,d0
00008FD4 6500                       		bcs.s	locret_75F2
00008FD6                            
00008FD6                            loc_75E0:
00008FD6 08A9 0003 0022             		bclr	#3,$22(a1)
00008FDC 117C 0002 0024             		move.b	#2,$24(a0)
00008FE2 08A8 0003 0022             		bclr	#3,$22(a0)
00008FE8                            
00008FE8                            locret_75F2:
00008FE8 4E75                       		rts	
00008FEA                            ; End of function ExitPlatform
00008FEA                            
00008FEA                            
00008FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FEA                            
00008FEA                            
00008FEA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008FEA 7000                       		moveq	#0,d0
00008FEC 1028 003F                  		move.b	$3F(a0),d0
00008FF0 1030 0029                  		move.b	$29(a0,d0.w),d0
00008FF4 ED48                       		lsl.w	#6,d0
00008FF6 0680 00FF D000             		addi.l	#$FFD000,d0
00008FFC 2440                       		movea.l	d0,a2
00008FFE 43F8 D000                  		lea	($FFFFD000).w,a1
00009002 302A 000C                  		move.w	$C(a2),d0
00009006 5140                       		subq.w	#8,d0
00009008 7200                       		moveq	#0,d1
0000900A 1229 0016                  		move.b	$16(a1),d1
0000900E 9041                       		sub.w	d1,d0
00009010 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00009014 4E75                       		rts	
00009016                            ; End of function Obj11_MoveSonic
00009016                            
00009016                            
00009016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009016                            
00009016                            
00009016                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00009016 1028 003E                  		move.b	$3E(a0),d0
0000901A 6100 9B5E                  		bsr.w	CalcSine
0000901E 3800                       		move.w	d0,d4
00009020 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009026 7000                       		moveq	#0,d0
00009028 1028 0028                  		move.b	$28(a0),d0
0000902C E948                       		lsl.w	#4,d0
0000902E 7600                       		moveq	#0,d3
00009030 1628 003F                  		move.b	$3F(a0),d3
00009034 3403                       		move.w	d3,d2
00009036 D640                       		add.w	d0,d3
00009038 7A00                       		moveq	#0,d5
0000903A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009040 1A35 3000                  		move.b	(a5,d3.w),d5
00009044 0243 000F                  		andi.w	#$F,d3
00009048 E94B                       		lsl.w	#4,d3
0000904A 47F4 3000                  		lea	(a4,d3.w),a3
0000904E 45E8 0029                  		lea	$29(a0),a2
00009052                            
00009052                            loc_765C:
00009052 7000                       		moveq	#0,d0
00009054 101A                       		move.b	(a2)+,d0
00009056 ED48                       		lsl.w	#6,d0
00009058 0680 00FF D000             		addi.l	#$FFD000,d0
0000905E 2240                       		movea.l	d0,a1
00009060 7000                       		moveq	#0,d0
00009062 101B                       		move.b	(a3)+,d0
00009064 5240                       		addq.w	#1,d0
00009066 C0C5                       		mulu.w	d5,d0
00009068 C0C4                       		mulu.w	d4,d0
0000906A 4840                       		swap	d0
0000906C D069 003C                  		add.w	$3C(a1),d0
00009070 3340 000C                  		move.w	d0,$C(a1)
00009074 51CA FFDC                  		dbf	d2,loc_765C
00009078 7000                       		moveq	#0,d0
0000907A 1028 0028                  		move.b	$28(a0),d0
0000907E 7600                       		moveq	#0,d3
00009080 1628 003F                  		move.b	$3F(a0),d3
00009084 5203                       		addq.b	#1,d3
00009086 9600                       		sub.b	d0,d3
00009088 4403                       		neg.b	d3
0000908A 6B00                       		bmi.s	locret_76CA
0000908C 3403                       		move.w	d3,d2
0000908E E94B                       		lsl.w	#4,d3
00009090 47F4 3000                  		lea	(a4,d3.w),a3
00009094 D6C2                       		adda.w	d2,a3
00009096 5342                       		subq.w	#1,d2
00009098 6500                       		bcs.s	locret_76CA
0000909A                            
0000909A                            loc_76A4:
0000909A 7000                       		moveq	#0,d0
0000909C 101A                       		move.b	(a2)+,d0
0000909E ED48                       		lsl.w	#6,d0
000090A0 0680 00FF D000             		addi.l	#$FFD000,d0
000090A6 2240                       		movea.l	d0,a1
000090A8 7000                       		moveq	#0,d0
000090AA 1023                       		move.b	-(a3),d0
000090AC 5240                       		addq.w	#1,d0
000090AE C0C5                       		mulu.w	d5,d0
000090B0 C0C4                       		mulu.w	d4,d0
000090B2 4840                       		swap	d0
000090B4 D069 003C                  		add.w	$3C(a1),d0
000090B8 3340 000C                  		move.w	d0,$C(a1)
000090BC 51CA FFDC                  		dbf	d2,loc_76A4
000090C0                            
000090C0                            locret_76CA:
000090C0 4E75                       		rts	
000090C2                            ; End of function Obj11_Bend
000090C2                            
000090C2                            ; ===========================================================================
000090C2                            ; ---------------------------------------------------------------------------
000090C2                            ; GHZ bridge-bending data
000090C2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000090C2                            ; ---------------------------------------------------------------------------
000090C2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000091D2                            		even
000091D2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000092D2                            		even
000092D2                            
000092D2                            ; ===========================================================================
000092D2                            
000092D2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000092D2 3028 0008                  		move.w	8(a0),d0
000092D6 0240 FF80                  		andi.w	#$FF80,d0
000092DA 3238 F700                  		move.w	($FFFFF700).w,d1
000092DE 0441 0080                  		subi.w	#$80,d1
000092E2 0241 FF80                  		andi.w	#$FF80,d1
000092E6 9041                       		sub.w	d1,d0
000092E8 0C40 0280                  		cmpi.w	#$280,d0
000092EC 6200 0000                  		bhi.w	Obj11_DelAll
000092F0 4E75                       		rts	
000092F2                            ; ===========================================================================
000092F2                            
000092F2                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000092F2 7400                       		moveq	#0,d2
000092F4 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000092F8 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000092FA 5302                       		subq.b	#1,d2		; subtract 1
000092FC 6500                       		bcs.s	Obj11_Delete
000092FE                            
000092FE                            Obj11_DelLoop:
000092FE 7000                       		moveq	#0,d0
00009300 101A                       		move.b	(a2)+,d0
00009302 ED48                       		lsl.w	#6,d0
00009304 0680 00FF D000             		addi.l	#$FFD000,d0
0000930A 2240                       		movea.l	d0,a1
0000930C B048                       		cmp.w	a0,d0
0000930E 6700                       		beq.s	loc_791E
00009310 6100 0000                  		bsr.w	DeleteObject2
00009314                            
00009314                            loc_791E:
00009314 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00009318                            
00009318                            Obj11_Delete:
00009318 6100 0000                  		bsr.w	DeleteObject
0000931C 4E75                       		rts	
0000931E                            ; ===========================================================================
0000931E                            
0000931E                            Obj11_Delete2:				; XREF: Obj11_Index
0000931E 6100 0000                  		bsr.w	DeleteObject
00009322 4E75                       		rts	
00009324                            ; ===========================================================================
00009324                            
00009324                            Obj11_Display2:				; XREF: Obj11_Index
00009324 6100 0000                  		bsr.w	DisplaySprite
00009328 4E75                       		rts	
0000932A                            ; ===========================================================================
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            ; Sprite mappings - GHZ	bridge
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            Map_obj11:
0000932A                            	include "_maps\obj11.asm"
0000932A                            ; ---------------------------------------------------------------------------
0000932A                            ; Sprite mappings - GHZ	bridge
0000932A                            ; ---------------------------------------------------------------------------
0000932A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000932E 0000                       		dc.w byte_794B-Map_obj11
00009330 01                         byte_793A:	dc.b 1
00009331 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009336 02                         byte_7940:	dc.b 2
00009337 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000933C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009341 01                         byte_794B:	dc.b 1
00009342 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00009348 00                         		even
00009348 00                         		even
00009348                            
00009348                            ; ===========================================================================
00009348                            ; ---------------------------------------------------------------------------
00009348                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009348                            ;	    - spiked ball on a chain (SBZ)
00009348                            ; ---------------------------------------------------------------------------
00009348                            
00009348                            Obj15:					; XREF: Obj_Index
00009348 7000                       		moveq	#0,d0
0000934A 1028 0024                  		move.b	$24(a0),d0
0000934E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00009352 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00009356                            ; ===========================================================================
00009356 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000935A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000935E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00009362 0000                       		dc.w Obj15_Action-Obj15_Index
00009364                            ; ===========================================================================
00009364                            
00009364                            Obj15_Main:				; XREF: Obj15_Index
00009364 5428 0024                  		addq.b	#2,$24(a0)
00009368 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00009370 317C 4380 0002             		move.w	#$4380,2(a0)
00009376 117C 0004 0001             		move.b	#4,1(a0)
0000937C 117C 0003 0018             		move.b	#3,$18(a0)
00009382 117C 0018 0019             		move.b	#$18,$19(a0)
00009388 117C 0008 0016             		move.b	#8,$16(a0)
0000938E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00009394 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000939A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000093A0 6600                       		bne.s	Obj15_NotSLZ
000093A2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000093AA 317C 43DC 0002             		move.w	#$43DC,2(a0)
000093B0 117C 0020 0019             		move.b	#$20,$19(a0)
000093B6 117C 0010 0016             		move.b	#$10,$16(a0)
000093BC 117C 0099 0020             		move.b	#$99,$20(a0)
000093C2                            
000093C2                            Obj15_NotSLZ:
000093C2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000093C8 6600                       		bne.s	Obj15_SetLength
000093CA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000093D2 317C 0391 0002             		move.w	#$391,2(a0)
000093D8 117C 0018 0019             		move.b	#$18,$19(a0)
000093DE 117C 0018 0016             		move.b	#$18,$16(a0)
000093E4 117C 0086 0020             		move.b	#$86,$20(a0)
000093EA 117C 000C 0024             		move.b	#$C,$24(a0)
000093F0                            
000093F0                            Obj15_SetLength:
000093F0 1810                       		move.b	0(a0),d4
000093F2 7200                       		moveq	#0,d1
000093F4 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000093F8 1212                       		move.b	(a2),d1		; move a2 to d1
000093FA 3F01                       		move.w	d1,-(sp)
000093FC 0241 000F                  		andi.w	#$F,d1
00009400 14FC 0000                  		move.b	#0,(a2)+
00009404 3601                       		move.w	d1,d3
00009406 E94B                       		lsl.w	#4,d3
00009408 5003                       		addq.b	#8,d3
0000940A 1143 003C                  		move.b	d3,$3C(a0)
0000940E 5103                       		subq.b	#8,d3
00009410 4A28 001A                  		tst.b	$1A(a0)
00009414 6700                       		beq.s	Obj15_MakeChain
00009416 5003                       		addq.b	#8,d3
00009418 5341                       		subq.w	#1,d1
0000941A                            
0000941A                            Obj15_MakeChain:
0000941A 6100 0000                  		bsr.w	SingleObjLoad
0000941E 6600                       		bne.s	loc_7A92
00009420 5228 0028                  		addq.b	#1,$28(a0)
00009424 3A09                       		move.w	a1,d5
00009426 0445 D000                  		subi.w	#-$3000,d5
0000942A EC4D                       		lsr.w	#6,d5
0000942C 0245 007F                  		andi.w	#$7F,d5
00009430 14C5                       		move.b	d5,(a2)+
00009432 137C 000A 0024             		move.b	#$A,$24(a1)
00009438 1284                       		move.b	d4,0(a1)	; load swinging	object
0000943A 2368 0004 0004             		move.l	4(a0),4(a1)
00009440 3368 0002 0002             		move.w	2(a0),2(a1)
00009446 08A9 0006 0002             		bclr	#6,2(a1)
0000944C 137C 0004 0001             		move.b	#4,1(a1)
00009452 137C 0004 0018             		move.b	#4,$18(a1)
00009458 137C 0008 0019             		move.b	#8,$19(a1)
0000945E 137C 0001 001A             		move.b	#1,$1A(a1)
00009464 1343 003C                  		move.b	d3,$3C(a1)
00009468 0403 0010                  		subi.b	#$10,d3
0000946C 6400                       		bcc.s	loc_7A8E
0000946E 137C 0002 001A             		move.b	#2,$1A(a1)
00009474 137C 0003 0018             		move.b	#3,$18(a1)
0000947A 08E9 0006 0002             		bset	#6,2(a1)
00009480                            
00009480                            loc_7A8E:
00009480 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00009484                            
00009484                            loc_7A92:
00009484 3A08                       		move.w	a0,d5
00009486 0445 D000                  		subi.w	#-$3000,d5
0000948A EC4D                       		lsr.w	#6,d5
0000948C 0245 007F                  		andi.w	#$7F,d5
00009490 14C5                       		move.b	d5,(a2)+
00009492 317C 4080 0026             		move.w	#$4080,$26(a0)
00009498 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000949E 321F                       		move.w	(sp)+,d1
000094A0 0801 0004                  		btst	#4,d1		; is object type $8X ?
000094A4 6700                       		beq.s	loc_7AD4	; if not, branch
000094A6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000094AE 317C 43AA 0002             		move.w	#$43AA,2(a0)
000094B4 117C 0001 001A             		move.b	#1,$1A(a0)
000094BA 117C 0002 0018             		move.b	#2,$18(a0)
000094C0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000094C6                            
000094C6                            loc_7AD4:
000094C6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000094CC 6700                       		beq.s	Obj15_Action	; if yes, branch
000094CE                            
000094CE                            Obj15_SetSolid:				; XREF: Obj15_Index
000094CE 7200                       		moveq	#0,d1
000094D0 1228 0019                  		move.b	$19(a0),d1
000094D4 7600                       		moveq	#0,d3
000094D6 1628 0016                  		move.b	$16(a0),d3
000094DA 6100 FA76                  		bsr.w	Obj15_Solid
000094DE                            
000094DE                            Obj15_Action:				; XREF: Obj15_Index
000094DE 6100 0000                  		bsr.w	Obj15_Move
000094E2 6100 0000                  		bsr.w	DisplaySprite
000094E6 6000 0000                  		bra.w	Obj15_ChkDel
000094EA                            ; ===========================================================================
000094EA                            
000094EA                            Obj15_Action2:				; XREF: Obj15_Index
000094EA 7200                       		moveq	#0,d1
000094EC 1228 0019                  		move.b	$19(a0),d1
000094F0 6100 FAC4                  		bsr.w	ExitPlatform
000094F4 3F28 0008                  		move.w	8(a0),-(sp)
000094F8 6100 0000                  		bsr.w	Obj15_Move
000094FC 341F                       		move.w	(sp)+,d2
000094FE 7600                       		moveq	#0,d3
00009500 1628 0016                  		move.b	$16(a0),d3
00009504 5203                       		addq.b	#1,d3
00009506 6100 0000                  		bsr.w	MvSonicOnPtfm
0000950A 6100 0000                  		bsr.w	DisplaySprite
0000950E 6000 0000                  		bra.w	Obj15_ChkDel
00009512                            
00009512 4E75                       		rts
00009514                            
00009514                            ; ---------------------------------------------------------------------------
00009514                            ; Subroutine to	change Sonic's position with a platform
00009514                            ; ---------------------------------------------------------------------------
00009514                            
00009514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009514                            
00009514                            
00009514                            MvSonicOnPtfm:
00009514 43F8 D000                  		lea	($FFFFD000).w,a1
00009518 3028 000C                  		move.w	$C(a0),d0
0000951C 9043                       		sub.w	d3,d0
0000951E 6000                       		bra.s	MvSonic2
00009520                            ; End of function MvSonicOnPtfm
00009520                            
00009520                            ; ---------------------------------------------------------------------------
00009520                            ; Subroutine to	change Sonic's position with a platform
00009520                            ; ---------------------------------------------------------------------------
00009520                            
00009520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009520                            
00009520                            
00009520                            MvSonicOnPtfm2:
00009520 43F8 D000                  		lea	($FFFFD000).w,a1
00009524 3028 000C                  		move.w	$C(a0),d0
00009528 0440 0009                  		subi.w	#9,d0
0000952C                            
0000952C                            MvSonic2:
0000952C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009530 6B00                       		bmi.s	locret_7B62
00009532 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009538 6400                       		bcc.s	locret_7B62
0000953A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000953E 6600                       		bne.s	locret_7B62
00009540 7200                       		moveq	#0,d1
00009542 1229 0016                  		move.b	$16(a1),d1
00009546 9041                       		sub.w	d1,d0
00009548 3340 000C                  		move.w	d0,$C(a1)
0000954C 9468 0008                  		sub.w	8(a0),d2
00009550 9569 0008                  		sub.w	d2,8(a1)
00009554                            
00009554                            locret_7B62:
00009554 4E75                       		rts	
00009556                            ; End of function MvSonicOnPtfm2
00009556                            
00009556                            
00009556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009556                            
00009556                            
00009556                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00009556 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000955A 323C 0080                  		move.w	#$80,d1
0000955E 0828 0000 0022             		btst	#0,$22(a0)
00009564 6700                       		beq.s	loc_7B78
00009566 4440                       		neg.w	d0
00009568 D041                       		add.w	d1,d0
0000956A                            
0000956A                            loc_7B78:
0000956A 6000                       		bra.s	Obj15_Move2
0000956C                            ; End of function Obj15_Move
0000956C                            
0000956C                            
0000956C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000956C                            
0000956C                            
0000956C                            Obj48_Move:				; XREF: Obj48_Display2
0000956C 4A28 003D                  		tst.b	$3D(a0)
00009570 6600                       		bne.s	loc_7B9C
00009572 3028 003E                  		move.w	$3E(a0),d0
00009576 5040                       		addq.w	#8,d0
00009578 3140 003E                  		move.w	d0,$3E(a0)
0000957C D168 0026                  		add.w	d0,$26(a0)
00009580 0C40 0200                  		cmpi.w	#$200,d0
00009584 6600                       		bne.s	loc_7BB6
00009586 117C 0001 003D             		move.b	#1,$3D(a0)
0000958C 6000                       		bra.s	loc_7BB6
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            loc_7B9C:
0000958E 3028 003E                  		move.w	$3E(a0),d0
00009592 5140                       		subq.w	#8,d0
00009594 3140 003E                  		move.w	d0,$3E(a0)
00009598 D168 0026                  		add.w	d0,$26(a0)
0000959C 0C40 FE00                  		cmpi.w	#-$200,d0
000095A0 6600                       		bne.s	loc_7BB6
000095A2 117C 0000 003D             		move.b	#0,$3D(a0)
000095A8                            
000095A8                            loc_7BB6:
000095A8 1028 0026                  		move.b	$26(a0),d0
000095AC                            ; End of function Obj48_Move
000095AC                            
000095AC                            
000095AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095AC                            
000095AC                            
000095AC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000095AC 6100 95CC                  		bsr.w	CalcSine
000095B0 3428 0038                  		move.w	$38(a0),d2
000095B4 3628 003A                  		move.w	$3A(a0),d3
000095B8 45E8 0028                  		lea	$28(a0),a2
000095BC 7C00                       		moveq	#0,d6
000095BE 1C1A                       		move.b	(a2)+,d6
000095C0                            
000095C0                            loc_7BCE:
000095C0 7800                       		moveq	#0,d4
000095C2 181A                       		move.b	(a2)+,d4
000095C4 ED4C                       		lsl.w	#6,d4
000095C6 0684 00FF D000             		addi.l	#$FFD000,d4
000095CC 2244                       		movea.l	d4,a1
000095CE 7800                       		moveq	#0,d4
000095D0 1829 003C                  		move.b	$3C(a1),d4
000095D4 2A04                       		move.l	d4,d5
000095D6 C9C0                       		muls.w	d0,d4
000095D8 E084                       		asr.l	#8,d4
000095DA CBC1                       		muls.w	d1,d5
000095DC E085                       		asr.l	#8,d5
000095DE D842                       		add.w	d2,d4
000095E0 DA43                       		add.w	d3,d5
000095E2 3344 000C                  		move.w	d4,$C(a1)
000095E6 3345 0008                  		move.w	d5,8(a1)
000095EA 51CE FFD4                  		dbf	d6,loc_7BCE
000095EE 4E75                       		rts	
000095F0                            ; End of function Obj15_Move2
000095F0                            
000095F0                            ; ===========================================================================
000095F0                            
000095F0                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000095F0 3028 003A                  		move.w	$3A(a0),d0
000095F4 0240 FF80                  		andi.w	#$FF80,d0
000095F8 3238 F700                  		move.w	($FFFFF700).w,d1
000095FC 0441 0080                  		subi.w	#$80,d1
00009600 0241 FF80                  		andi.w	#$FF80,d1
00009604 9041                       		sub.w	d1,d0
00009606 0C40 0280                  		cmpi.w	#$280,d0
0000960A 6200 0000                  		bhi.w	Obj15_DelAll
0000960E 4E75                       		rts	
00009610                            ; ===========================================================================
00009610                            
00009610                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00009610 7400                       		moveq	#0,d2
00009612 45E8 0028                  		lea	$28(a0),a2
00009616 141A                       		move.b	(a2)+,d2
00009618                            
00009618                            Obj15_DelLoop:
00009618 7000                       		moveq	#0,d0
0000961A 101A                       		move.b	(a2)+,d0
0000961C ED48                       		lsl.w	#6,d0
0000961E 0680 00FF D000             		addi.l	#$FFD000,d0
00009624 2240                       		movea.l	d0,a1
00009626 6100 0000                  		bsr.w	DeleteObject2
0000962A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000962E 4E75                       		rts	
00009630                            ; ===========================================================================
00009630                            
00009630                            Obj15_Delete:				; XREF: Obj15_Index
00009630 6100 0000                  		bsr.w	DeleteObject
00009634 4E75                       		rts	
00009636                            ; ===========================================================================
00009636                            
00009636                            Obj15_Display:				; XREF: Obj15_Index
00009636 6000 0000                  		bra.w	DisplaySprite
0000963A                            ; ===========================================================================
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            Map_obj15:
0000963A                            	include "_maps\obj15ghz.asm"
0000963A                            ; ---------------------------------------------------------------------------
0000963A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000963A                            ; ---------------------------------------------------------------------------
0000963A 0000                       		dc.w byte_7C4E-Map_obj15
0000963C 0000                       		dc.w byte_7C59-Map_obj15
0000963E 0000                       		dc.w byte_7C5F-Map_obj15
00009640 02                         byte_7C4E:	dc.b 2
00009641 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009646 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000964B 01                         byte_7C59:	dc.b 1
0000964C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009651 01                         byte_7C5F:	dc.b 1
00009652 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009658 00                         		even
00009658 00                         		even
00009658                            
00009658                            ; ---------------------------------------------------------------------------
00009658                            ; Sprite mappings - SLZ	swinging platforms
00009658                            ; ---------------------------------------------------------------------------
00009658                            Map_obj15a:
00009658                            	include "_maps\obj15slz.asm"
00009658                            ; ---------------------------------------------------------------------------
00009658                            ; Sprite mappings - SLZ	swinging platforms
00009658                            ; ---------------------------------------------------------------------------
00009658 0000                       		dc.w byte_7C6C-Map_obj15a
0000965A 0000                       		dc.w byte_7C95-Map_obj15a
0000965C 0000                       		dc.w byte_7C9B-Map_obj15a
0000965E 08                         byte_7C6C:	dc.b 8
0000965F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009664 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009669 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000966E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009673 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009678 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000967D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009682 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009687 01                         byte_7C95:	dc.b 1
00009688 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000968D 01                         byte_7C9B:	dc.b 1
0000968E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009694 00                         		even
00009694 00                         		even
00009694                            
00009694                            ; ===========================================================================
00009694                            ; ---------------------------------------------------------------------------
00009694                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009694                            ; ---------------------------------------------------------------------------
00009694                            
00009694                            Obj17:					; XREF: Obj_Index
00009694 7000                       		moveq	#0,d0
00009696 1028 0024                  		move.b	$24(a0),d0
0000969A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000969E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000096A2                            ; ===========================================================================
000096A2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000096A4 0000                       		dc.w Obj17_Action-Obj17_Index
000096A6 0000                       		dc.w Obj17_Action-Obj17_Index
000096A8 0000                       		dc.w Obj17_Delete-Obj17_Index
000096AA 0000                       		dc.w Obj17_Display-Obj17_Index
000096AC                            ; ===========================================================================
000096AC                            
000096AC                            Obj17_Main:				; XREF: Obj17_Index
000096AC 5428 0024                  		addq.b	#2,$24(a0)
000096B0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000096B8 317C 4398 0002             		move.w	#$4398,2(a0)
000096BE 117C 0007 0022             		move.b	#7,$22(a0)
000096C4 117C 0004 0001             		move.b	#4,1(a0)
000096CA 117C 0003 0018             		move.b	#3,$18(a0)
000096D0 117C 0008 0019             		move.b	#8,$19(a0)
000096D6 3428 000C                  		move.w	$C(a0),d2
000096DA 3628 0008                  		move.w	8(a0),d3
000096DE 1810                       		move.b	0(a0),d4
000096E0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000096E4 7200                       		moveq	#0,d1
000096E6 1212                       		move.b	(a2),d1		; move a2 to d1
000096E8 14FC 0000                  		move.b	#0,(a2)+
000096EC 3001                       		move.w	d1,d0
000096EE E248                       		lsr.w	#1,d0
000096F0 E948                       		lsl.w	#4,d0
000096F2 9640                       		sub.w	d0,d3
000096F4 5501                       		subq.b	#2,d1
000096F6 6500                       		bcs.s	Obj17_Action
000096F8 7C00                       		moveq	#0,d6
000096FA                            
000096FA                            Obj17_MakeHelix:
000096FA 6100 0000                  		bsr.w	SingleObjLoad
000096FE 6600                       		bne.s	Obj17_Action
00009700 5228 0028                  		addq.b	#1,$28(a0)
00009704 3A09                       		move.w	a1,d5
00009706 0445 D000                  		subi.w	#$D000,d5
0000970A EC4D                       		lsr.w	#6,d5
0000970C 0245 007F                  		andi.w	#$7F,d5
00009710 14C5                       		move.b	d5,(a2)+
00009712 137C 0008 0024             		move.b	#8,$24(a1)
00009718 1284                       		move.b	d4,0(a1)
0000971A 3342 000C                  		move.w	d2,$C(a1)
0000971E 3343 0008                  		move.w	d3,8(a1)
00009722 2368 0004 0004             		move.l	4(a0),4(a1)
00009728 337C 4398 0002             		move.w	#$4398,2(a1)
0000972E 137C 0004 0001             		move.b	#4,1(a1)
00009734 137C 0003 0018             		move.b	#3,$18(a1)
0000973A 137C 0008 0019             		move.b	#8,$19(a1)
00009740 1346 003E                  		move.b	d6,$3E(a1)
00009744 5206                       		addq.b	#1,d6
00009746 0206 0007                  		andi.b	#7,d6
0000974A 0643 0010                  		addi.w	#$10,d3
0000974E B668 0008                  		cmp.w	8(a0),d3
00009752 6600                       		bne.s	loc_7D78
00009754 1146 003E                  		move.b	d6,$3E(a0)
00009758 5206                       		addq.b	#1,d6
0000975A 0206 0007                  		andi.b	#7,d6
0000975E 0643 0010                  		addi.w	#$10,d3
00009762 5228 0028                  		addq.b	#1,$28(a0)
00009766                            
00009766                            loc_7D78:
00009766 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000976A                            
0000976A                            Obj17_Action:				; XREF: Obj17_Index
0000976A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000976E 6100 0000                  		bsr.w	DisplaySprite
00009772 6000 0000                  		bra.w	Obj17_ChkDel
00009776                            
00009776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009776                            
00009776                            
00009776                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00009776 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000977A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00009780 D028 003E                  		add.b	$3E(a0),d0
00009784 0200 0007                  		andi.b	#7,d0
00009788 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000978C 6600                       		bne.s	locret_7DA6
0000978E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00009794                            
00009794                            locret_7DA6:
00009794 4E75                       		rts	
00009796                            ; End of function Obj17_RotateSpikes
00009796                            
00009796                            ; ===========================================================================
00009796                            
00009796                            Obj17_ChkDel:				; XREF: Obj17_Action
00009796 3028 0008                  		move.w	8(a0),d0
0000979A 0240 FF80                  		andi.w	#$FF80,d0
0000979E 3238 F700                  		move.w	($FFFFF700).w,d1
000097A2 0441 0080                  		subi.w	#$80,d1
000097A6 0241 FF80                  		andi.w	#$FF80,d1
000097AA 9041                       		sub.w	d1,d0
000097AC 0C40 0280                  		cmpi.w	#$280,d0
000097B0 6200 0000                  		bhi.w	Obj17_DelAll
000097B4 4E75                       		rts	
000097B6                            ; ===========================================================================
000097B6                            
000097B6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000097B6 7400                       		moveq	#0,d2
000097B8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000097BC 141A                       		move.b	(a2)+,d2	; move a2 to d2
000097BE 5502                       		subq.b	#2,d2
000097C0 6500                       		bcs.s	Obj17_Delete
000097C2                            
000097C2                            Obj17_DelLoop:
000097C2 7000                       		moveq	#0,d0
000097C4 101A                       		move.b	(a2)+,d0
000097C6 ED48                       		lsl.w	#6,d0
000097C8 0680 00FF D000             		addi.l	#$FFD000,d0
000097CE 2240                       		movea.l	d0,a1
000097D0 6100 0000                  		bsr.w	DeleteObject2	; delete object
000097D4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000097D8                            
000097D8                            Obj17_Delete:				; XREF: Obj17_Index
000097D8 6100 0000                  		bsr.w	DeleteObject
000097DC 4E75                       		rts	
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            Obj17_Display:				; XREF: Obj17_Index
000097DE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000097E2 6000 0000                  		bra.w	DisplaySprite
000097E6                            ; ===========================================================================
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            Map_obj17:
000097E6                            	include "_maps\obj17.asm"
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E6                            ; ---------------------------------------------------------------------------
000097E6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000097EA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000097EE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000097F2 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000097F6 01                         byte_7E08:	dc.b 1
000097F7 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000097FC 01                         byte_7E0E:	dc.b 1
000097FD F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00009802 01                         byte_7E14:	dc.b 1
00009803 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00009808 01                         byte_7E1A:	dc.b 1
00009809 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000980E 01                         byte_7E20:	dc.b 1
0000980F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00009814 01                         byte_7E26:	dc.b 1
00009815 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000981A 01                         byte_7E2C:	dc.b 1
0000981B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00009820                            		even
00009820                            		even
00009820                            
00009820                            ; ===========================================================================
00009820                            ; ---------------------------------------------------------------------------
00009820                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009820                            ; ---------------------------------------------------------------------------
00009820                            
00009820                            Obj18:					; XREF: Obj_Index
00009820 7000                       		moveq	#0,d0
00009822 1028 0024                  		move.b	$24(a0),d0
00009826 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000982A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000982E                            ; ===========================================================================
0000982E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00009830 0000                       		dc.w Obj18_Solid-Obj18_Index
00009832 0000                       		dc.w Obj18_Action2-Obj18_Index
00009834 0000                       		dc.w Obj18_Delete-Obj18_Index
00009836 0000                       		dc.w Obj18_Action-Obj18_Index
00009838                            ; ===========================================================================
00009838                            
00009838                            Obj18_Main:				; XREF: Obj18_Index
00009838 5428 0024                  		addq.b	#2,$24(a0)
0000983C 317C 4000 0002             		move.w	#$4000,2(a0)
00009842 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000984A 117C 0020 0019             		move.b	#$20,$19(a0)
00009850 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00009856 6600                       		bne.s	Obj18_NotSYZ
00009858 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00009860 117C 0020 0019             		move.b	#$20,$19(a0)
00009866                            
00009866                            Obj18_NotSYZ:
00009866 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000986C 6600                       		bne.s	Obj18_NotSLZ
0000986E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009876 117C 0020 0019             		move.b	#$20,$19(a0)
0000987C 317C 4000 0002             		move.w	#$4000,2(a0)
00009882 117C 0003 0028             		move.b	#3,$28(a0)
00009888                            
00009888                            Obj18_NotSLZ:
00009888 117C 0004 0001             		move.b	#4,1(a0)
0000988E 117C 0004 0018             		move.b	#4,$18(a0)
00009894 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000989A 3168 000C 0034             		move.w	$C(a0),$34(a0)
000098A0 3168 0008 0032             		move.w	8(a0),$32(a0)
000098A6 317C 0080 0026             		move.w	#$80,$26(a0)
000098AC 7200                       		moveq	#0,d1
000098AE 1028 0028                  		move.b	$28(a0),d0
000098B2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000098B6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000098B8 5201                       		addq.b	#1,d1		; use frame #1
000098BA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000098C0                            
000098C0                            Obj18_SetFrame:
000098C0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000098C4                            
000098C4                            Obj18_Solid:				; XREF: Obj18_Index
000098C4 4A28 0038                  		tst.b	$38(a0)
000098C8 6700                       		beq.s	loc_7EE0
000098CA 5928 0038                  		subq.b	#4,$38(a0)
000098CE                            
000098CE                            loc_7EE0:
000098CE 7200                       		moveq	#0,d1
000098D0 1228 0019                  		move.b	$19(a0),d1
000098D4 6100 F56C                  		bsr.w	PlatformObject
000098D8                            
000098D8                            Obj18_Action:				; XREF: Obj18_Index
000098D8 6100 0000                  		bsr.w	Obj18_Move
000098DC 6100 0000                  		bsr.w	Obj18_Nudge
000098E0 6100 0000                  		bsr.w	DisplaySprite
000098E4 6000 0000                  		bra.w	Obj18_ChkDel
000098E8                            ; ===========================================================================
000098E8                            
000098E8                            Obj18_Action2:				; XREF: Obj18_Index
000098E8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098EE 6700                       		beq.s	loc_7F06
000098F0 5828 0038                  		addq.b	#4,$38(a0)
000098F4                            
000098F4                            loc_7F06:
000098F4 7200                       		moveq	#0,d1
000098F6 1228 0019                  		move.b	$19(a0),d1
000098FA 6100 F6BA                  		bsr.w	ExitPlatform
000098FE 3F28 0008                  		move.w	8(a0),-(sp)
00009902 6100 0000                  		bsr.w	Obj18_Move
00009906 6100 0000                  		bsr.w	Obj18_Nudge
0000990A 341F                       		move.w	(sp)+,d2
0000990C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009910 6100 0000                  		bsr.w	DisplaySprite
00009914 6000 0000                  		bra.w	Obj18_ChkDel
00009918                            
00009918 4E75                       		rts
0000991A                            
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            ; Subroutine to	move platform slightly when you	stand on it
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            
0000991A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000991A                            
0000991A                            
0000991A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000991A 1028 0038                  		move.b	$38(a0),d0
0000991E 6100 925A                  		bsr.w	CalcSine
00009922 323C 0400                  		move.w	#$400,d1
00009926 C1C1                       		muls.w	d1,d0
00009928 4840                       		swap	d0
0000992A D068 002C                  		add.w	$2C(a0),d0
0000992E 3140 000C                  		move.w	d0,$C(a0)
00009932 4E75                       		rts	
00009934                            ; End of function Obj18_Nudge
00009934                            
00009934                            ; ---------------------------------------------------------------------------
00009934                            ; Subroutine to	move platforms
00009934                            ; ---------------------------------------------------------------------------
00009934                            
00009934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009934                            
00009934                            
00009934                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00009934 7000                       		moveq	#0,d0
00009936 1028 0028                  		move.b	$28(a0),d0
0000993A 0240 000F                  		andi.w	#$F,d0
0000993E D040                       		add.w	d0,d0
00009940 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00009944 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009948                            ; End of function Obj18_Move
00009948                            
00009948                            ; ===========================================================================
00009948 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000994C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009950 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00009954 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009958 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000995C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009960 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00009962                            ; ===========================================================================
00009962                            
00009962                            Obj18_Type00:
00009962 4E75                       		rts			; platform 00 doesn't move
00009964                            ; ===========================================================================
00009964                            
00009964                            Obj18_Type05:
00009964 3028 0032                  		move.w	$32(a0),d0
00009968 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000996C 4401                       		neg.b	d1		; reverse platform-motion
0000996E 0601 0040                  		addi.b	#$40,d1
00009972 6000                       		bra.s	Obj18_01_Move
00009974                            ; ===========================================================================
00009974                            
00009974                            Obj18_Type01:
00009974 3028 0032                  		move.w	$32(a0),d0
00009978 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000997C 0401 0040                  		subi.b	#$40,d1
00009980                            
00009980                            Obj18_01_Move:
00009980 4881                       		ext.w	d1
00009982 D041                       		add.w	d1,d0
00009984 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00009988 6000 0000                  		bra.w	Obj18_ChgMotion
0000998C                            ; ===========================================================================
0000998C                            
0000998C                            Obj18_Type0C:
0000998C 3028 0034                  		move.w	$34(a0),d0
00009990 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009994 4401                       		neg.b	d1		; reverse platform-motion
00009996 0601 0030                  		addi.b	#$30,d1
0000999A 6000                       		bra.s	Obj18_02_Move
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            Obj18_Type0B:
0000999C 3028 0034                  		move.w	$34(a0),d0
000099A0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000099A4 0401 0030                  		subi.b	#$30,d1
000099A8 6000                       		bra.s	Obj18_02_Move
000099AA                            ; ===========================================================================
000099AA                            
000099AA                            Obj18_Type06:
000099AA 3028 0034                  		move.w	$34(a0),d0
000099AE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099B2 4401                       		neg.b	d1		; reverse platform-motion
000099B4 0601 0040                  		addi.b	#$40,d1
000099B8 6000                       		bra.s	Obj18_02_Move
000099BA                            ; ===========================================================================
000099BA                            
000099BA                            Obj18_Type02:
000099BA 3028 0034                  		move.w	$34(a0),d0
000099BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099C2 0401 0040                  		subi.b	#$40,d1
000099C6                            
000099C6                            Obj18_02_Move:
000099C6 4881                       		ext.w	d1
000099C8 D041                       		add.w	d1,d0
000099CA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000099CE 6000 0000                  		bra.w	Obj18_ChgMotion
000099D2                            ; ===========================================================================
000099D2                            
000099D2                            Obj18_Type03:
000099D2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099D6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000099D8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000099DE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000099E0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099E6                            
000099E6                            Obj18_03_NoMove:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj18_03_Wait:
000099E8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099EC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000099EE 317C 0020 003A             		move.w	#32,$3A(a0)
000099F4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000099F8 4E75                       		rts	
000099FA                            ; ===========================================================================
000099FA                            
000099FA                            Obj18_Type04:
000099FA 4A68 003A                  		tst.w	$3A(a0)
000099FE 6700                       		beq.s	loc_8048
00009A00 5368 003A                  		subq.w	#1,$3A(a0)
00009A04 6600                       		bne.s	loc_8048
00009A06 0828 0003 0022             		btst	#3,$22(a0)
00009A0C 6700                       		beq.s	loc_8042
00009A0E 08E9 0001 0022             		bset	#1,$22(a1)
00009A14 08A9 0003 0022             		bclr	#3,$22(a1)
00009A1A 137C 0002 0024             		move.b	#2,$24(a1)
00009A20 08A8 0003 0022             		bclr	#3,$22(a0)
00009A26 4228 0025                  		clr.b	$25(a0)
00009A2A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009A30                            
00009A30                            loc_8042:
00009A30 117C 0008 0024             		move.b	#8,$24(a0)
00009A36                            
00009A36                            loc_8048:
00009A36 2628 002C                  		move.l	$2C(a0),d3
00009A3A 3028 0012                  		move.w	$12(a0),d0
00009A3E 48C0                       		ext.l	d0
00009A40 E180                       		asl.l	#8,d0
00009A42 D680                       		add.l	d0,d3
00009A44 2143 002C                  		move.l	d3,$2C(a0)
00009A48 0668 0038 0012             		addi.w	#$38,$12(a0)
00009A4E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A52 0640 00E0                  		addi.w	#$E0,d0
00009A56 B068 002C                  		cmp.w	$2C(a0),d0
00009A5A 6400                       		bcc.s	locret_8074
00009A5C 117C 0006 0024             		move.b	#6,$24(a0)
00009A62                            
00009A62                            locret_8074:
00009A62 4E75                       		rts	
00009A64                            ; ===========================================================================
00009A64                            
00009A64                            Obj18_Type07:
00009A64 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A68 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009A6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009A6E 7000                       		moveq	#0,d0
00009A70 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009A74 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A76 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A7A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009A7C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A82                            
00009A82                            Obj18_07_NoMove:
00009A82 4E75                       		rts	
00009A84                            ; ===========================================================================
00009A84                            
00009A84                            Obj18_07_Wait:
00009A84 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A88 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009A8A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009A8E 4E75                       		rts	
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            Obj18_Type08:
00009A90 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009A94 3028 0034                  		move.w	$34(a0),d0
00009A98 0440 0200                  		subi.w	#$200,d0
00009A9C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009AA0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009AA2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009AA6                            
00009AA6                            Obj18_08_NoStop:
00009AA6 4E75                       		rts	
00009AA8                            ; ===========================================================================
00009AA8                            
00009AA8                            Obj18_Type0A:
00009AA8 3028 0034                  		move.w	$34(a0),d0
00009AAC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009AB0 0401 0040                  		subi.b	#$40,d1
00009AB4 4881                       		ext.w	d1
00009AB6 E241                       		asr.w	#1,d1
00009AB8 D041                       		add.w	d1,d0
00009ABA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009ABE                            
00009ABE                            Obj18_ChgMotion:
00009ABE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009AC4 4E75                       		rts	
00009AC6                            ; ===========================================================================
00009AC6                            
00009AC6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009AC6 3028 0032                  		move.w	$32(a0),d0
00009ACA 0240 FF80                  		andi.w	#$FF80,d0
00009ACE 3238 F700                  		move.w	($FFFFF700).w,d1
00009AD2 0441 0080                  		subi.w	#$80,d1
00009AD6 0241 FF80                  		andi.w	#$FF80,d1
00009ADA 9041                       		sub.w	d1,d0
00009ADC 0C40 0280                  		cmpi.w	#$280,d0
00009AE0 6200                       		bhi.s	Obj18_Delete
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj18_Delete:				; XREF: Obj18_Index
00009AE4 6000 0000                  		bra.w	DeleteObject
00009AE8                            ; ===========================================================================
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            ; Sprite mappings - unused
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            Map_obj18x:
00009AE8                            	include "_maps\obj18x.asm"
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8                            ; Sprite mappings - unused
00009AE8                            ; ---------------------------------------------------------------------------
00009AE8 0000                       		dc.w byte_80FE-Map_obj18x
00009AEA 0000                       		dc.w byte_8109-Map_obj18x
00009AEC 02                         byte_80FE:	dc.b 2
00009AED F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009AF2 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009AF7 0A                         byte_8109:	dc.b $A
00009AF8 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009AFD 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009B02 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009B07 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009B0C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009B11 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009B16 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009B1B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009B20 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009B25 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009B2A                            		even
00009B2A                            		even
00009B2A                            
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - GHZ	platforms
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            Map_obj18:
00009B2A                            	include "_maps\obj18ghz.asm"
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A                            ; Sprite mappings - GHZ	platforms
00009B2A                            ; ---------------------------------------------------------------------------
00009B2A 0000                       		dc.w byte_8140-Map_obj18
00009B2C 0000                       		dc.w byte_8155-Map_obj18
00009B2E 04                         byte_8140:	dc.b 4
00009B2F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009B34 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B39 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B3E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B43 0A                         byte_8155:	dc.b $A
00009B44 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B49 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B4E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B53 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B58 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B5D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B62 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B67 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B6C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B71 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B76                            		even
00009B76                            		even
00009B76                            
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            ; Sprite mappings - SYZ	platforms
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            Map_obj18a:
00009B76                            	include "_maps\obj18syz.asm"
00009B76                            ; ---------------------------------------------------------------------------
00009B76                            ; Sprite mappings - SYZ	platforms
00009B76                            ; ---------------------------------------------------------------------------
00009B76 0000                       		dc.w byte_818A-Map_obj18a
00009B78 03                         byte_818A:	dc.b 3
00009B79 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B7E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B83 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B88                            		even
00009B88                            		even
00009B88                            
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            ; Sprite mappings - SLZ	platforms
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            Map_obj18b:
00009B88                            	include "_maps\obj18slz.asm"
00009B88                            ; ---------------------------------------------------------------------------
00009B88                            ; Sprite mappings - SLZ	platforms
00009B88                            ; ---------------------------------------------------------------------------
00009B88 0000                       		dc.w byte_819C-Map_obj18b
00009B8A 02                         byte_819C:	dc.b 2
00009B8B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009B90 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009B96 00                         		even
00009B96 00                         		even
00009B96                            
00009B96                            ; ===========================================================================
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            ; Object 19 - blank
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            
00009B96                            Obj19:					; XREF: Obj_Index
00009B96 4E75                       		rts	
00009B98                            ; ===========================================================================
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            Map_obj48:
00009B98                            	include "_maps\obj48.asm"
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B98                            ; ---------------------------------------------------------------------------
00009B98 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009B9C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009BA0 06                         byte_81B2:	dc.b 6
00009BA1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009BA6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009BAB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009BB0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009BB5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009BBA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009BBF 04                         byte_81D1:	dc.b 4
00009BC0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009BC5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009BCA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009BCF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009BD4 04                         byte_81E6:	dc.b 4
00009BD5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BDA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BDF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BE4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BE9 04                         byte_81FB:	dc.b 4
00009BEA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BEF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009BF4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009BF9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009BFE                            		even
00009BFE                            		even
00009BFE                            
00009BFE                            ; ===========================================================================
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            ; Object 1A - GHZ collapsing ledge
00009BFE                            ; ---------------------------------------------------------------------------
00009BFE                            
00009BFE                            Obj1A:					; XREF: Obj_Index
00009BFE 7000                       		moveq	#0,d0
00009C00 1028 0024                  		move.b	$24(a0),d0
00009C04 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009C08 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009C0C                            ; ===========================================================================
00009C0C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009C10 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009C14 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009C18                            ; ===========================================================================
00009C18                            
00009C18                            Obj1A_Main:				; XREF: Obj1A_Index
00009C18 5428 0024                  		addq.b	#2,$24(a0)
00009C1C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009C24 317C 4000 0002             		move.w	#$4000,2(a0)
00009C2A 0028 0004 0001             		ori.b	#4,1(a0)
00009C30 117C 0004 0018             		move.b	#4,$18(a0)
00009C36 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009C3C 117C 0064 0019             		move.b	#$64,$19(a0)
00009C42 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009C48 117C 0038 0016             		move.b	#$38,$16(a0)
00009C4E 08E8 0004 0001             		bset	#4,1(a0)
00009C54                            
00009C54                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009C54 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009C58 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009C5A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009C5E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009C62 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009C66                            
00009C66                            Obj1A_Slope:
00009C66 323C 0030                  		move.w	#$30,d1
00009C6A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C70 6100 F2A4                  		bsr.w	SlopeObject
00009C74 6000 0000                  		bra.w	MarkObjGone
00009C78                            ; ===========================================================================
00009C78                            
00009C78                            Obj1A_Touch:				; XREF: Obj1A_Index
00009C78 4A28 0038                  		tst.b	$38(a0)
00009C7C 6700 0000                  		beq.w	loc_847A
00009C80 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009C86 5328 0038                  		subq.b	#1,$38(a0)
00009C8A                            
00009C8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C8A                            
00009C8A                            
00009C8A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009C8A 323C 0030                  		move.w	#$30,d1
00009C8E 6100 F326                  		bsr.w	ExitPlatform
00009C92 323C 0030                  		move.w	#$30,d1
00009C96 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C9C 3428 0008                  		move.w	8(a0),d2
00009CA0 6100 0000                  		bsr.w	SlopeObject2
00009CA4 6000 0000                  		bra.w	MarkObjGone
00009CA8                            ; End of function Obj1A_WalkOff
00009CA8                            
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            Obj1A_Display:				; XREF: Obj1A_Index
00009CA8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009CAC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009CAE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009CB2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009CB6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009CBA 6000 0000                  		bra.w	DisplaySprite
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            loc_82D0:				; XREF: Obj1A_Display
00009CBE 5328 0038                  		subq.b	#1,$38(a0)
00009CC2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009CC6 43F8 D000                  		lea	($FFFFD000).w,a1
00009CCA 0829 0003 0022             		btst	#3,$22(a1)
00009CD0 6700                       		beq.s	loc_82FC
00009CD2 4A28 0038                  		tst.b	$38(a0)
00009CD6 6600                       		bne.s	locret_8308
00009CD8 08A9 0003 0022             		bclr	#3,$22(a1)
00009CDE 08A9 0005 0022             		bclr	#5,$22(a1)
00009CE4 137C 0001 001D             		move.b	#1,$1D(a1)
00009CEA                            
00009CEA                            loc_82FC:
00009CEA 117C 0000 003A             		move.b	#0,$3A(a0)
00009CF0 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009CF6                            
00009CF6                            locret_8308:
00009CF6 4E75                       		rts	
00009CF8                            ; ===========================================================================
00009CF8                            
00009CF8                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009CF8 6100 0000                  		bsr.w	ObjectFall
00009CFC 6100 0000                  		bsr.w	DisplaySprite
00009D00 4A28 0001                  		tst.b	1(a0)
00009D04 6A00                       		bpl.s	Obj1A_Delete
00009D06 4E75                       		rts	
00009D08                            ; ===========================================================================
00009D08                            
00009D08                            Obj1A_Delete:				; XREF: Obj1A_Index
00009D08 6100 0000                  		bsr.w	DeleteObject
00009D0C 4E75                       		rts	
00009D0E                            ; ===========================================================================
00009D0E                            ; ---------------------------------------------------------------------------
00009D0E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009D0E                            ; ---------------------------------------------------------------------------
00009D0E                            
00009D0E                            Obj53:					; XREF: Obj_Index
00009D0E 7000                       		moveq	#0,d0
00009D10 1028 0024                  		move.b	$24(a0),d0
00009D14 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009D18 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009D1C                            ; ===========================================================================
00009D1C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009D20 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009D24 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009D28                            ; ===========================================================================
00009D28                            
00009D28                            Obj53_Main:				; XREF: Obj53_Index
00009D28 5428 0024                  		addq.b	#2,$24(a0)
00009D2C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009D34 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009D3A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009D40 6600                       		bne.s	Obj53_NotSLZ
00009D42 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009D48 5428 001A                  		addq.b	#2,$1A(a0)
00009D4C                            
00009D4C                            Obj53_NotSLZ:
00009D4C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009D52 6600                       		bne.s	Obj53_NotSBZ
00009D54 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009D5A                            
00009D5A                            Obj53_NotSBZ:
00009D5A 0028 0004 0001             		ori.b	#4,1(a0)
00009D60 117C 0004 0018             		move.b	#4,$18(a0)
00009D66 117C 0007 0038             		move.b	#7,$38(a0)
00009D6C 117C 0044 0019             		move.b	#$44,$19(a0)
00009D72                            
00009D72                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009D72 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009D76 6700                       		beq.s	Obj53_Solid	; if not, branch
00009D78 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009D7C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009D80 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009D84                            
00009D84                            Obj53_Solid:
00009D84 323C 0020                  		move.w	#$20,d1
00009D88 6100 F0B8                  		bsr.w	PlatformObject
00009D8C 4A28 0028                  		tst.b	$28(a0)
00009D90 6A00                       		bpl.s	Obj53_MarkAsGone
00009D92 0829 0003 0022             		btst	#3,$22(a1)
00009D98 6700                       		beq.s	Obj53_MarkAsGone
00009D9A 08A8 0000 0001             		bclr	#0,1(a0)
00009DA0 3029 0008                  		move.w	8(a1),d0
00009DA4 9068 0008                  		sub.w	8(a0),d0
00009DA8 6400                       		bcc.s	Obj53_MarkAsGone
00009DAA 08E8 0000 0001             		bset	#0,1(a0)
00009DB0                            
00009DB0                            Obj53_MarkAsGone:
00009DB0 6000 0000                  		bra.w	MarkObjGone
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            Obj53_Touch:				; XREF: Obj53_Index
00009DB4 4A28 0038                  		tst.b	$38(a0)
00009DB8 6700 0000                  		beq.w	loc_8458
00009DBC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009DC2 5328 0038                  		subq.b	#1,$38(a0)
00009DC6                            
00009DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DC6                            
00009DC6                            
00009DC6                            Obj53_WalkOff:				; XREF: Obj53_Index
00009DC6 323C 0020                  		move.w	#$20,d1
00009DCA 6100 F1EA                  		bsr.w	ExitPlatform
00009DCE 3428 0008                  		move.w	8(a0),d2
00009DD2 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009DD6 6000 0000                  		bra.w	MarkObjGone
00009DDA                            ; End of function Obj53_WalkOff
00009DDA                            
00009DDA                            ; ===========================================================================
00009DDA                            
00009DDA                            Obj53_Display:				; XREF: Obj53_Index
00009DDA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009DDE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009DE0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009DE4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DE8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009DEC 6000 0000                  		bra.w	DisplaySprite
00009DF0                            ; ===========================================================================
00009DF0                            
00009DF0                            loc_8402:
00009DF0 5328 0038                  		subq.b	#1,$38(a0)
00009DF4 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009DF8 43F8 D000                  		lea	($FFFFD000).w,a1
00009DFC 0829 0003 0022             		btst	#3,$22(a1)
00009E02 6700                       		beq.s	loc_842E
00009E04 4A28 0038                  		tst.b	$38(a0)
00009E08 6600                       		bne.s	locret_843A
00009E0A 08A9 0003 0022             		bclr	#3,$22(a1)
00009E10 08A9 0005 0022             		bclr	#5,$22(a1)
00009E16 137C 0001 001D             		move.b	#1,$1D(a1)
00009E1C                            
00009E1C                            loc_842E:
00009E1C 117C 0000 003A             		move.b	#0,$3A(a0)
00009E22 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009E28                            
00009E28                            locret_843A:
00009E28 4E75                       		rts	
00009E2A                            ; ===========================================================================
00009E2A                            
00009E2A                            Obj53_TimeZero:				; XREF: Obj53_Display
00009E2A 6100 0000                  		bsr.w	ObjectFall
00009E2E 6100 0000                  		bsr.w	DisplaySprite
00009E32 4A28 0001                  		tst.b	1(a0)
00009E36 6A00                       		bpl.s	Obj53_Delete
00009E38 4E75                       		rts	
00009E3A                            ; ===========================================================================
00009E3A                            
00009E3A                            Obj53_Delete:				; XREF: Obj53_Index
00009E3A 6100 0000                  		bsr.w	DeleteObject
00009E3E 4E75                       		rts	
00009E40                            ; ===========================================================================
00009E40                            
00009E40                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009E40 117C 0000 003A             		move.b	#0,$3A(a0)
00009E46                            
00009E46                            loc_8458:				; XREF: Obj53_Touch
00009E46 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009E4C 0828 0000 0028             		btst	#0,$28(a0)
00009E52 6700                       		beq.s	loc_846C
00009E54 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009E5A                            
00009E5A                            loc_846C:
00009E5A 7207                       		moveq	#7,d1
00009E5C 5228 001A                  		addq.b	#1,$1A(a0)
00009E60 6000                       		bra.s	loc_8486
00009E62                            ; ===========================================================================
00009E62                            
00009E62                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009E62 117C 0000 003A             		move.b	#0,$3A(a0)
00009E68                            
00009E68                            loc_847A:				; XREF: Obj1A_Touch
00009E68 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009E6E 7218                       		moveq	#$18,d1
00009E70 5428 001A                  		addq.b	#2,$1A(a0)
00009E74                            
00009E74                            loc_8486:				; XREF: Obj53_Collapse
00009E74 7000                       		moveq	#0,d0
00009E76 1028 001A                  		move.b	$1A(a0),d0
00009E7A D040                       		add.w	d0,d0
00009E7C 2668 0004                  		movea.l	4(a0),a3
00009E80 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E84 524B                       		addq.w	#1,a3
00009E86 08E8 0005 0001             		bset	#5,1(a0)
00009E8C 1810                       		move.b	0(a0),d4
00009E8E 1A28 0001                  		move.b	1(a0),d5
00009E92 2248                       		movea.l	a0,a1
00009E94 6000                       		bra.s	loc_84B2
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            loc_84AA:
00009E96 6100 0000                  		bsr.w	SingleObjLoad
00009E9A 6600                       		bne.s	loc_84F2
00009E9C 5A4B                       		addq.w	#5,a3
00009E9E                            
00009E9E                            loc_84B2:
00009E9E 137C 0006 0024             		move.b	#6,$24(a1)
00009EA4 1284                       		move.b	d4,0(a1)
00009EA6 234B 0004                  		move.l	a3,4(a1)
00009EAA 1345 0001                  		move.b	d5,1(a1)
00009EAE 3368 0008 0008             		move.w	8(a0),8(a1)
00009EB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EBA 3368 0002 0002             		move.w	2(a0),2(a1)
00009EC0 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009EC6 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009ECC 135C 0038                  		move.b	(a4)+,$38(a1)
00009ED0 B3C8                       		cmpa.l	a0,a1
00009ED2 6400                       		bcc.s	loc_84EE
00009ED4 6100 0000                  		bsr.w	DisplaySprite2
00009ED8                            
00009ED8                            loc_84EE:
00009ED8 51C9 FFBC                  		dbf	d1,loc_84AA
00009EDC                            
00009EDC                            loc_84F2:
00009EDC 6100 0000                  		bsr.w	DisplaySprite
00009EE0 303C 00B9                  		move.w	#$B9,d0
00009EE4 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009EEA                            ; ===========================================================================
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009EEA                            ; ---------------------------------------------------------------------------
00009EEA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009EFA 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F04 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F0C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F14                            
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            
00009F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F14                            
00009F14                            
00009F14                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009F14 43F8 D000                  		lea	($FFFFD000).w,a1
00009F18 0829 0003 0022             		btst	#3,$22(a1)
00009F1E 6700                       		beq.s	locret_856E
00009F20 3029 0008                  		move.w	8(a1),d0
00009F24 9068 0008                  		sub.w	8(a0),d0
00009F28 D041                       		add.w	d1,d0
00009F2A E248                       		lsr.w	#1,d0
00009F2C 0828 0000 0001             		btst	#0,1(a0)
00009F32 6700                       		beq.s	loc_854E
00009F34 4640                       		not.w	d0
00009F36 D041                       		add.w	d1,d0
00009F38                            
00009F38                            loc_854E:
00009F38 7200                       		moveq	#0,d1
00009F3A 1232 0000                  		move.b	(a2,d0.w),d1
00009F3E 3028 000C                  		move.w	$C(a0),d0
00009F42 9041                       		sub.w	d1,d0
00009F44 7200                       		moveq	#0,d1
00009F46 1229 0016                  		move.b	$16(a1),d1
00009F4A 9041                       		sub.w	d1,d0
00009F4C 3340 000C                  		move.w	d0,$C(a1)
00009F50 9468 0008                  		sub.w	8(a0),d2
00009F54 9569 0008                  		sub.w	d2,8(a1)
00009F58                            
00009F58                            locret_856E:
00009F58 4E75                       		rts	
00009F5A                            ; End of function SlopeObject2
00009F5A                            
00009F5A                            ; ===========================================================================
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Collision data for GHZ collapsing ledge
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Obj1A_SlopeData:
00009F5A                            		incbin	misc\ghzledge.bin
00009F8A                            		even
00009F8A                            
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Sprite mappings - GHZ	collapsing ledge
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            Map_obj1A:
00009F8A                            	include "_maps\obj1A.asm"
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A                            ; Sprite mappings - GHZ	collapsing ledge
00009F8A                            ; ---------------------------------------------------------------------------
00009F8A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009F8E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009F92 10                         byte_85A8:	dc.b $10
00009F93 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009F98 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009F9D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FA2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FA7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FAC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FB1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FB6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FBB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FC0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FC5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FCA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FCF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FD4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FD9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009FDE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FE3 10                         byte_85F9:	dc.b $10
00009FE4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009FE9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FEE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FF3 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FF8 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FFD D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A002 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A007 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A00C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A011 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A016 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A01B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A020 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A025 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A02A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A02F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A034 19                         byte_864A:	dc.b $19
0000A035 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A03A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A03F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A044 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A049 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A04E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A053 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A058 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A05D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A062 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A067 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A06C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A071 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A076 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A07B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A080 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A085 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A08A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A08F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A094 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A099 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A09E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0A3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0A8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0AD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0B2 19                         byte_86C8:	dc.b $19
0000A0B3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0B8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0BD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0C2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0C7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0CC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0D1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0D6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0DB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0E0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0E5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0EA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0EF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0F4 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0F9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0FE F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A103 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A108 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A10D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A112 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A117 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A11C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A121 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A126 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A12B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A130                            		even
0000A130                            		even
0000A130                            
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            Map_obj53:
0000A130                            	include "_maps\obj53.asm"
0000A130                            ; ---------------------------------------------------------------------------
0000A130                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A130                            ; ---------------------------------------------------------------------------
0000A130 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000A134 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000A138 04                         byte_874E:	dc.b 4
0000A139 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A13E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A143 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A148 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A14D 08                         byte_8763:	dc.b 8
0000A14E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A153 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A158 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A15D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A162 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A167 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A16C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A171 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A176 04                         byte_878C:	dc.b 4
0000A177 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A17C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A181 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A186 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A18B 08                         byte_87A1:	dc.b 8
0000A18C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A191 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A196 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A19B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A1A0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A1A5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1AA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1AF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1B4                            		even
0000A1B4                            		even
0000A1B4                            
0000A1B4                            ; ===========================================================================
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1B4                            ; ---------------------------------------------------------------------------
0000A1B4                            
0000A1B4                            Obj1C:					; XREF: Obj_Index
0000A1B4 7000                       		moveq	#0,d0
0000A1B6 1028 0024                  		move.b	$24(a0),d0
0000A1BA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000A1BE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000A1C2                            ; ===========================================================================
0000A1C2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000A1C4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000A1C6                            ; ===========================================================================
0000A1C6                            
0000A1C6                            Obj1C_Main:				; XREF: Obj1C_Index
0000A1C6 5428 0024                  		addq.b	#2,$24(a0)
0000A1CA 7000                       		moveq	#0,d0
0000A1CC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000A1D0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1D4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000A1D8 2159 0004                  		move.l	(a1)+,4(a0)
0000A1DC 3159 0002                  		move.w	(a1)+,2(a0)
0000A1E0 0028 0004 0001             		ori.b	#4,1(a0)
0000A1E6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000A1EA 1159 0019                  		move.b	(a1)+,$19(a0)
0000A1EE 1159 0018                  		move.b	(a1)+,$18(a0)
0000A1F2 1159 0020                  		move.b	(a1)+,$20(a0)
0000A1F6                            
0000A1F6                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000A1F6 3028 0008                  		move.w	8(a0),d0
0000A1FA 0240 FF80                  		andi.w	#$FF80,d0
0000A1FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A202 0441 0080                  		subi.w	#$80,d1
0000A206 0241 FF80                  		andi.w	#$FF80,d1
0000A20A 9041                       		sub.w	d1,d0
0000A20C 0C40 0280                  		cmpi.w	#$280,d0
0000A210 6200 0000                  		bhi.w	DeleteObject
0000A214 6000 0000                  		bra.w	DisplaySprite
0000A218                            ; ===========================================================================
0000A218                            ; ---------------------------------------------------------------------------
0000A218                            ; Variables for	object $1C are stored in an array
0000A218                            ; ---------------------------------------------------------------------------
0000A218 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000A21C 44D8                       		dc.w $44D8		; VRAM setting
0000A21E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A222 0000 0000                  		dc.l Map_obj1C
0000A226 44D8                       		dc.w $44D8
0000A228 0008 0200                  		dc.b 0,	8, 2, 0
0000A22C 0000 0000                  		dc.l Map_obj1C
0000A230 44D8                       		dc.w $44D8
0000A232 0008 0200                  		dc.b 0,	8, 2, 0
0000A236 0000 932A                  		dc.l Map_obj11
0000A23A 438E                       		dc.w $438E
0000A23C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            ; Sprite mappings - SLZ	lava thrower
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            Map_obj1C:
0000A240                            	include "_maps\obj1C.asm"
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            ; Sprite mappings - SLZ	lava thrower
0000A240                            ; ---------------------------------------------------------------------------
0000A240 0000                       		dc.w byte_8858-Map_obj1C
0000A242 01                         byte_8858:	dc.b 1
0000A243 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A248                            		even
0000A248                            		even
0000A248                            
0000A248                            ; ===========================================================================
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            ; Object 1D - switch that activates when Sonic touches it
0000A248                            ; (this	is not used anywhere in	the game)
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            
0000A248                            Obj1D:					; XREF: Obj_Index
0000A248 7000                       		moveq	#0,d0
0000A24A 1028 0024                  		move.b	$24(a0),d0
0000A24E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000A252 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000A256                            ; ===========================================================================
0000A256 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000A258 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000A25A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj1D_Main:				; XREF: Obj1D_Index
0000A25C 5428 0024                  		addq.b	#2,$24(a0)
0000A260 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000A268 317C 4000 0002             		move.w	#$4000,2(a0)
0000A26E 117C 0004 0001             		move.b	#4,1(a0)
0000A274 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000A27A 117C 0010 0019             		move.b	#$10,$19(a0)
0000A280 117C 0005 0018             		move.b	#5,$18(a0)
0000A286                            
0000A286                            Obj1D_Action:				; XREF: Obj1D_Index
0000A286 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000A28C 323C 0010                  		move.w	#$10,d1
0000A290 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000A294 6700                       		beq.s	Obj1D_ChkDel
0000A296 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A29A 7001                       		moveq	#1,d0
0000A29C 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A2A0                            
0000A2A0                            Obj1D_ChkDel:
0000A2A0 6100 0000                  		bsr.w	DisplaySprite
0000A2A4 3028 0008                  		move.w	8(a0),d0
0000A2A8 0240 FF80                  		andi.w	#$FF80,d0
0000A2AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2B0 0441 0080                  		subi.w	#$80,d1
0000A2B4 0241 FF80                  		andi.w	#$FF80,d1
0000A2B8 9041                       		sub.w	d1,d0
0000A2BA 0C40 0280                  		cmpi.w	#$280,d0
0000A2BE 6200 0000                  		bhi.w	Obj1D_Delete
0000A2C2 4E75                       		rts	
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A2C4 6100 0000                  		bsr.w	DeleteObject
0000A2C8 4E75                       		rts	
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            ; Subroutine to	check if Sonic touches the object
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            
0000A2CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2CA                            
0000A2CA                            
0000A2CA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A2CA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A2CE 3029 0008                  		move.w	8(a1),d0
0000A2D2 9068 0008                  		sub.w	8(a0),d0
0000A2D6 D041                       		add.w	d1,d0
0000A2D8 6B00                       		bmi.s	loc_8918
0000A2DA D241                       		add.w	d1,d1
0000A2DC B041                       		cmp.w	d1,d0
0000A2DE 6400                       		bcc.s	loc_8918
0000A2E0 3429 000C                  		move.w	$C(a1),d2
0000A2E4 1229 0016                  		move.b	$16(a1),d1
0000A2E8 4881                       		ext.w	d1
0000A2EA D242                       		add.w	d2,d1
0000A2EC 3028 000C                  		move.w	$C(a0),d0
0000A2F0 0440 0010                  		subi.w	#$10,d0
0000A2F4 9041                       		sub.w	d1,d0
0000A2F6 6200                       		bhi.s	loc_8918
0000A2F8 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A2FC 6500                       		bcs.s	loc_8918
0000A2FE 70FF                       		moveq	#-1,d0
0000A300 4E75                       		rts	
0000A302                            ; ===========================================================================
0000A302                            
0000A302                            loc_8918:
0000A302 7000                       		moveq	#0,d0
0000A304 4E75                       		rts	
0000A306                            ; End of function Obj1D_ChkTouch
0000A306                            
0000A306                            ; ===========================================================================
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            ; Sprite mappings - object 1D
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            Map_obj1D:
0000A306                            	include "_maps\obj1D.asm"
0000A306                            ; ---------------------------------------------------------------------------
0000A306                            ; Sprite mappings - object 1D
0000A306                            ; ---------------------------------------------------------------------------
0000A306 0000                       		dc.w byte_891E-Map_obj1D
0000A308 04                         byte_891E:	dc.b 4
0000A309 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A30E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A313 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A318 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A31E 00                         		even
0000A31E 00                         		even
0000A31E                            
0000A31E                            ; ===========================================================================
0000A31E                            ; ---------------------------------------------------------------------------
0000A31E                            ; Object 2A - doors (SBZ)
0000A31E                            ; ---------------------------------------------------------------------------
0000A31E                            
0000A31E                            Obj2A:					; XREF: Obj_Index
0000A31E 7000                       		moveq	#0,d0
0000A320 1028 0024                  		move.b	$24(a0),d0
0000A324 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A328 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A32C                            ; ===========================================================================
0000A32C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A32E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A330                            ; ===========================================================================
0000A330                            
0000A330                            Obj2A_Main:				; XREF: Obj2A_Index
0000A330 5428 0024                  		addq.b	#2,$24(a0)
0000A334 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A33C 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A342 0028 0004 0001             		ori.b	#4,1(a0)
0000A348 117C 0008 0019             		move.b	#8,$19(a0)
0000A34E 117C 0004 0018             		move.b	#4,$18(a0)
0000A354                            
0000A354                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A354 323C 0040                  		move.w	#$40,d1
0000A358 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A35C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A360 D041                       		add.w	d1,d0
0000A362 B068 0008                  		cmp.w	8(a0),d0
0000A366 6500                       		bcs.s	Obj2A_Animate
0000A368 9041                       		sub.w	d1,d0
0000A36A 9041                       		sub.w	d1,d0
0000A36C B068 0008                  		cmp.w	8(a0),d0
0000A370 6400                       		bcc.s	Obj2A_Animate
0000A372 D041                       		add.w	d1,d0
0000A374 B068 0008                  		cmp.w	8(a0),d0
0000A378 6400                       		bcc.s	loc_899A
0000A37A 0828 0000 0022             		btst	#0,$22(a0)
0000A380 6600                       		bne.s	Obj2A_Animate
0000A382 6000                       		bra.s	Obj2A_Open
0000A384                            ; ===========================================================================
0000A384                            
0000A384                            loc_899A:				; XREF: Obj2A_OpenShut
0000A384 0828 0000 0022             		btst	#0,$22(a0)
0000A38A 6700                       		beq.s	Obj2A_Animate
0000A38C                            
0000A38C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A38C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A392                            
0000A392                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A392 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A398 6100 0000                  		bsr.w	AnimateSprite
0000A39C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A3A0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A3A2 323C 0011                  		move.w	#$11,d1
0000A3A6 343C 0020                  		move.w	#$20,d2
0000A3AA 3602                       		move.w	d2,d3
0000A3AC 5243                       		addq.w	#1,d3
0000A3AE 3828 0008                  		move.w	8(a0),d4
0000A3B2 6100 0000                  		bsr.w	SolidObject
0000A3B6                            
0000A3B6                            Obj2A_MarkAsUsed:
0000A3B6 6000 0000                  		bra.w	MarkObjGone
0000A3BA                            ; ===========================================================================
0000A3BA                            Ani_obj2A:
0000A3BA                            	include "_anim\obj2A.asm"
0000A3BA                            ; ---------------------------------------------------------------------------
0000A3BA                            ; Animation script - doors (SBZ)
0000A3BA                            ; ---------------------------------------------------------------------------
0000A3BA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A3BC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A3BE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A3CA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A3D6                            		even
0000A3D6                            		even
0000A3D6                            
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            ; Sprite mappings - doors (SBZ)
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            Map_obj2A:
0000A3D6                            	include "_maps\obj2A.asm"
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6                            ; Sprite mappings - doors (SBZ)
0000A3D6                            ; ---------------------------------------------------------------------------
0000A3D6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A3DA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A3DE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A3E2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A3E6 0000                       		dc.w byte_8A56-Map_obj2A
0000A3E8 02                         byte_89FE:	dc.b 2
0000A3E9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A3EE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A3F3 02                         byte_8A09:	dc.b 2
0000A3F4 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A3F9 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A3FE 02                         byte_8A14:	dc.b 2
0000A3FF D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A404 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A409 02                         byte_8A1F:	dc.b 2
0000A40A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A40F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A414 02                         byte_8A2A:	dc.b 2
0000A415 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A41A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A41F 02                         byte_8A35:	dc.b 2
0000A420 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A425 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A42A 02                         byte_8A40:	dc.b 2
0000A42B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A430 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A435 02                         byte_8A4B:	dc.b 2
0000A436 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A43B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A440 02                         byte_8A56:	dc.b 2
0000A441 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A446 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A44C 00                         		even
0000A44C 00                         		even
0000A44C                            
0000A44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A44C                            
0000A44C                            
0000A44C                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A44C 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A450 6700                       		beq.s	loc_8AA8
0000A452 6B00 0000                  		bmi.w	loc_8AC4
0000A456 4A40                       		tst.w	d0
0000A458 6700 0000                  		beq.w	loc_8A92
0000A45C 6B00                       		bmi.s	loc_8A7C
0000A45E 4A69 0010                  		tst.w	$10(a1)
0000A462 6B00                       		bmi.s	loc_8A92
0000A464 6000                       		bra.s	loc_8A82
0000A466                            ; ===========================================================================
0000A466                            
0000A466                            loc_8A7C:
0000A466 4A69 0010                  		tst.w	$10(a1)
0000A46A 6A00                       		bpl.s	loc_8A92
0000A46C                            
0000A46C                            loc_8A82:
0000A46C 9169 0008                  		sub.w	d0,8(a1)
0000A470 337C 0000 0014             		move.w	#0,$14(a1)
0000A476 337C 0000 0010             		move.w	#0,$10(a1)
0000A47C                            
0000A47C                            loc_8A92:
0000A47C 0829 0001 0022             		btst	#1,$22(a1)
0000A482 6600                       		bne.s	loc_8AB6
0000A484 08E9 0005 0022             		bset	#5,$22(a1)
0000A48A 08E8 0005 0022             		bset	#5,$22(a0)
0000A490 4E75                       		rts	
0000A492                            ; ===========================================================================
0000A492                            
0000A492                            loc_8AA8:
0000A492 0828 0005 0022             		btst	#5,$22(a0)
0000A498 6700                       		beq.s	locret_8AC2
0000A49A 337C 0001 001C             		move.w	#1,$1C(a1)
0000A4A0                            
0000A4A0                            loc_8AB6:
0000A4A0 08A8 0005 0022             		bclr	#5,$22(a0)
0000A4A6 08A9 0005 0022             		bclr	#5,$22(a1)
0000A4AC                            
0000A4AC                            locret_8AC2:
0000A4AC 4E75                       		rts	
0000A4AE                            ; ===========================================================================
0000A4AE                            
0000A4AE                            loc_8AC4:
0000A4AE 4A69 0012                  		tst.w	$12(a1)
0000A4B2 6A00                       		bpl.s	locret_8AD8
0000A4B4 4A43                       		tst.w	d3
0000A4B6 6A00                       		bpl.s	locret_8AD8
0000A4B8 9769 000C                  		sub.w	d3,$C(a1)
0000A4BC 337C 0000 0012             		move.w	#0,$12(a1)
0000A4C2                            
0000A4C2                            locret_8AD8:
0000A4C2 4E75                       		rts	
0000A4C4                            ; End of function Obj44_SolidWall
0000A4C4                            
0000A4C4                            
0000A4C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4C4                            
0000A4C4                            
0000A4C4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A4C4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A4C8 3029 0008                  		move.w	8(a1),d0
0000A4CC 9068 0008                  		sub.w	8(a0),d0
0000A4D0 D041                       		add.w	d1,d0
0000A4D2 6B00                       		bmi.s	loc_8B48
0000A4D4 3601                       		move.w	d1,d3
0000A4D6 D643                       		add.w	d3,d3
0000A4D8 B043                       		cmp.w	d3,d0
0000A4DA 6200                       		bhi.s	loc_8B48
0000A4DC 1629 0016                  		move.b	$16(a1),d3
0000A4E0 4883                       		ext.w	d3
0000A4E2 D443                       		add.w	d3,d2
0000A4E4 3629 000C                  		move.w	$C(a1),d3
0000A4E8 9668 000C                  		sub.w	$C(a0),d3
0000A4EC D642                       		add.w	d2,d3
0000A4EE 6B00                       		bmi.s	loc_8B48
0000A4F0 3802                       		move.w	d2,d4
0000A4F2 D844                       		add.w	d4,d4
0000A4F4 B644                       		cmp.w	d4,d3
0000A4F6 6400                       		bcc.s	loc_8B48
0000A4F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A4FC 6B00                       		bmi.s	loc_8B48
0000A4FE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A504 6400                       		bcc.s	loc_8B48
0000A506 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A50A 6600                       		bne.s	loc_8B48
0000A50C 3A00                       		move.w	d0,d5
0000A50E B240                       		cmp.w	d0,d1
0000A510 6400                       		bcc.s	loc_8B30
0000A512 D241                       		add.w	d1,d1
0000A514 9041                       		sub.w	d1,d0
0000A516 3A00                       		move.w	d0,d5
0000A518 4445                       		neg.w	d5
0000A51A                            
0000A51A                            loc_8B30:
0000A51A 3203                       		move.w	d3,d1
0000A51C B443                       		cmp.w	d3,d2
0000A51E 6400                       		bcc.s	loc_8B3C
0000A520 9644                       		sub.w	d4,d3
0000A522 3203                       		move.w	d3,d1
0000A524 4441                       		neg.w	d1
0000A526                            
0000A526                            loc_8B3C:
0000A526 BA41                       		cmp.w	d1,d5
0000A528 6200                       		bhi.s	loc_8B44
0000A52A 7801                       		moveq	#1,d4
0000A52C 4E75                       		rts	
0000A52E                            ; ===========================================================================
0000A52E                            
0000A52E                            loc_8B44:
0000A52E 78FF                       		moveq	#-1,d4
0000A530 4E75                       		rts	
0000A532                            ; ===========================================================================
0000A532                            
0000A532                            loc_8B48:
0000A532 7800                       		moveq	#0,d4
0000A534 4E75                       		rts	
0000A536                            ; End of function Obj44_SolidWall2
0000A536                            
0000A536                            ; ===========================================================================
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            ; Object 1E - Ball Hog enemy (SBZ)
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            
0000A536                            Obj1E:					; XREF: Obj_Index
0000A536 7000                       		moveq	#0,d0
0000A538 1028 0024                  		move.b	$24(a0),d0
0000A53C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A540 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A544                            ; ===========================================================================
0000A544 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A546 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A548                            ; ===========================================================================
0000A548                            
0000A548                            Obj1E_Main:				; XREF: Obj1E_Index
0000A548 117C 0013 0016             		move.b	#$13,$16(a0)
0000A54E 117C 0008 0017             		move.b	#8,$17(a0)
0000A554 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A55C 317C 2302 0002             		move.w	#$2302,2(a0)
0000A562 117C 0004 0001             		move.b	#4,1(a0)
0000A568 117C 0004 0018             		move.b	#4,$18(a0)
0000A56E 117C 0005 0020             		move.b	#5,$20(a0)
0000A574 117C 000C 0019             		move.b	#$C,$19(a0)
0000A57A 6100 0000                  		bsr.w	ObjectFall
0000A57E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A584 4A41                       		tst.w	d1
0000A586 6A00                       		bpl.s	locret_8BAC
0000A588 D368 000C                  		add.w	d1,$C(a0)
0000A58C 317C 0000 0012             		move.w	#0,$12(a0)
0000A592 5428 0024                  		addq.b	#2,$24(a0)
0000A596                            
0000A596                            locret_8BAC:
0000A596 4E75                       		rts	
0000A598                            ; ===========================================================================
0000A598                            
0000A598                            Obj1E_Action:				; XREF: Obj1E_Index
0000A598 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A59E 6100 0000                  		bsr.w	AnimateSprite
0000A5A2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A5A8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A5AA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A5AE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A5B0 6000                       		bra.s	Obj1E_MarkAsGone
0000A5B2                            ; ===========================================================================
0000A5B2                            
0000A5B2                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A5B2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A5B6                            
0000A5B6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A5B6 6000 0000                  		bra.w	MarkObjGone
0000A5BA                            ; ===========================================================================
0000A5BA                            
0000A5BA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A5BA 117C 0001 0032             		move.b	#1,$32(a0)
0000A5C0 6100 0000                  		bsr.w	SingleObjLoad
0000A5C4 6600                       		bne.s	loc_8C1A
0000A5C6 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A5CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5D6 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A5DC 337C 0000 0012             		move.w	#0,$12(a1)
0000A5E2 70FC                       		moveq	#-4,d0
0000A5E4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A5EA 6700                       		beq.s	loc_8C0A	; if not, branch
0000A5EC 4440                       		neg.w	d0
0000A5EE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A5F2                            
0000A5F2                            loc_8C0A:
0000A5F2 D169 0008                  		add.w	d0,8(a1)
0000A5F6 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A5FC 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A602                            
0000A602                            loc_8C1A:
0000A602 60B2                       		bra.s	Obj1E_MarkAsGone
0000A604                            ; ===========================================================================
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A604                            ; ---------------------------------------------------------------------------
0000A604                            
0000A604                            Obj20:					; XREF: Obj_Index
0000A604 7000                       		moveq	#0,d0
0000A606 1028 0024                  		move.b	$24(a0),d0
0000A60A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A60E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A612                            ; ===========================================================================
0000A612 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A614 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A616                            ; ===========================================================================
0000A616                            
0000A616                            Obj20_Main:				; XREF: Obj20_Index
0000A616 5428 0024                  		addq.b	#2,$24(a0)
0000A61A 117C 0007 0016             		move.b	#7,$16(a0)
0000A620 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A628 317C 2302 0002             		move.w	#$2302,2(a0)
0000A62E 117C 0004 0001             		move.b	#4,1(a0)
0000A634 117C 0003 0018             		move.b	#3,$18(a0)
0000A63A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A640 117C 0008 0019             		move.b	#8,$19(a0)
0000A646 7000                       		moveq	#0,d0
0000A648 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A64C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A650 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A654 117C 0004 001A             		move.b	#4,$1A(a0)
0000A65A                            
0000A65A                            Obj20_Bounce:				; XREF: Obj20_Index
0000A65A 4EB9 0000 0000             		jsr	ObjectFall
0000A660 4A68 0012                  		tst.w	$12(a0)
0000A664 6B00                       		bmi.s	Obj20_ChkExplode
0000A666 4EB9 0000 0000             		jsr	ObjHitFloor
0000A66C 4A41                       		tst.w	d1
0000A66E 6A00                       		bpl.s	Obj20_ChkExplode
0000A670 D368 000C                  		add.w	d1,$C(a0)
0000A674 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A67A 4A03                       		tst.b	d3
0000A67C 6700                       		beq.s	Obj20_ChkExplode
0000A67E 6B00                       		bmi.s	loc_8CA4
0000A680 4A68 0010                  		tst.w	$10(a0)
0000A684 6A00                       		bpl.s	Obj20_ChkExplode
0000A686 4468 0010                  		neg.w	$10(a0)
0000A68A 6000                       		bra.s	Obj20_ChkExplode
0000A68C                            ; ===========================================================================
0000A68C                            
0000A68C                            loc_8CA4:				; XREF: Obj20_Bounce
0000A68C 4A68 0010                  		tst.w	$10(a0)
0000A690 6B00                       		bmi.s	Obj20_ChkExplode
0000A692 4468 0010                  		neg.w	$10(a0)
0000A696                            
0000A696                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A696 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A69A 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A69C 10BC 0024                  		move.b	#$24,0(a0)
0000A6A0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A6A4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A6AA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A6AE                            ; ===========================================================================
0000A6AE                            
0000A6AE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A6AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6B2 6A00                       		bpl.s	Obj20_Display
0000A6B4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A6BA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A6C0                            
0000A6C0                            Obj20_Display:
0000A6C0 6100 0000                  		bsr.w	DisplaySprite
0000A6C4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6C8 0640 00E0                  		addi.w	#$E0,d0
0000A6CC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A6D0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6D4 4E75                       		rts	
0000A6D6                            ; ===========================================================================
0000A6D6                            ; ---------------------------------------------------------------------------
0000A6D6                            ; Object 24 - explosion	from a destroyed monitor
0000A6D6                            ; ---------------------------------------------------------------------------
0000A6D6                            
0000A6D6                            Obj24:					; XREF: Obj_Index
0000A6D6 7000                       		moveq	#0,d0
0000A6D8 1028 0024                  		move.b	$24(a0),d0
0000A6DC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A6E0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A6E4                            ; ===========================================================================
0000A6E4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A6E6 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A6E8                            ; ===========================================================================
0000A6E8                            
0000A6E8                            Obj24_Main:				; XREF: Obj24_Index
0000A6E8 5428 0024                  		addq.b	#2,$24(a0)
0000A6EC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A6F4 317C 041C 0002             		move.w	#$41C,2(a0)
0000A6FA 117C 0004 0001             		move.b	#4,1(a0)
0000A700 117C 0001 0018             		move.b	#1,$18(a0)
0000A706 117C 0000 0020             		move.b	#0,$20(a0)
0000A70C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A712 117C 0009 001E             		move.b	#9,$1E(a0)
0000A718 117C 0000 001A             		move.b	#0,$1A(a0)
0000A71E 303C 00A5                  		move.w	#$A5,d0
0000A722 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A728                            
0000A728                            Obj24_Animate:				; XREF: Obj24_Index
0000A728 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A72C 6A00                       		bpl.s	Obj24_Display
0000A72E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A734 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A738 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A73E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A742                            
0000A742                            Obj24_Display:
0000A742 6000 0000                  		bra.w	DisplaySprite
0000A746                            ; ===========================================================================
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            ; Object 27 - explosion	from a destroyed enemy
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            
0000A746                            Obj27:					; XREF: Obj_Index
0000A746 7000                       		moveq	#0,d0
0000A748 1028 0024                  		move.b	$24(a0),d0
0000A74C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A750 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A754                            ; ===========================================================================
0000A754 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A756 0000                       		dc.w Obj27_Main-Obj27_Index
0000A758 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A75A                            ; ===========================================================================
0000A75A                            
0000A75A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A75A 5428 0024                  		addq.b	#2,$24(a0)
0000A75E 6100 0000                  		bsr.w	SingleObjLoad
0000A762 6600                       		bne.s	Obj27_Main
0000A764 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A768 3368 0008 0008             		move.w	8(a0),8(a1)
0000A76E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A774 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A77A                            
0000A77A                            Obj27_Main:				; XREF: Obj27_Index
0000A77A 5428 0024                  		addq.b	#2,$24(a0)
0000A77E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A786 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A78C 117C 0004 0001             		move.b	#4,1(a0)
0000A792 117C 0001 0018             		move.b	#1,$18(a0)
0000A798 117C 0000 0020             		move.b	#0,$20(a0)
0000A79E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A7A4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7AA 117C 0000 001A             		move.b	#0,$1A(a0)
0000A7B0 303C 00C1                  		move.w	#$C1,d0
0000A7B4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A7BA                            
0000A7BA                            Obj27_Animate:				; XREF: Obj27_Index
0000A7BA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A7BE 6A00                       		bpl.s	Obj27_Display
0000A7C0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7C6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A7CA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A7D0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7D4                            
0000A7D4                            Obj27_Display:
0000A7D4 6000 0000                  		bra.w	DisplaySprite
0000A7D8                            ; ===========================================================================
0000A7D8                            ; ---------------------------------------------------------------------------
0000A7D8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7D8                            ; ---------------------------------------------------------------------------
0000A7D8                            
0000A7D8                            Obj3F:					; XREF: Obj_Index
0000A7D8 7000                       		moveq	#0,d0
0000A7DA 1028 0024                  		move.b	$24(a0),d0
0000A7DE 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A7E2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A7E6                            ; ===========================================================================
0000A7E6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A7E8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            Obj3F_Main:				; XREF: Obj3F_Index
0000A7EA 5428 0024                  		addq.b	#2,$24(a0)
0000A7EE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A7F6 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A7FC 117C 0004 0001             		move.b	#4,1(a0)
0000A802 117C 0001 0018             		move.b	#1,$18(a0)
0000A808 117C 0000 0020             		move.b	#0,$20(a0)
0000A80E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A814 117C 0007 001E             		move.b	#7,$1E(a0)
0000A81A 117C 0000 001A             		move.b	#0,$1A(a0)
0000A820 303C 00C4                  		move.w	#$C4,d0
0000A824 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A82A                            ; ===========================================================================
0000A82A                            Ani_obj1E:
0000A82A                            	include "_anim\obj1E.asm"
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Animation script - doors (SBZ)
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A82C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A844 00                         		even
0000A844 00                         		even
0000A844                            
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            Map_obj1E:
0000A844                            	include "_maps\obj1E.asm"
0000A844                            ; ---------------------------------------------------------------------------
0000A844                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A844                            ; ---------------------------------------------------------------------------
0000A844 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A848 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A84C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A850 02                         byte_8E6E:	dc.b 2
0000A851 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A856 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A85B 02                         byte_8E79:	dc.b 2
0000A85C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A861 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A866 02                         byte_8E84:	dc.b 2
0000A867 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A86C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A871 02                         byte_8E8F:	dc.b 2
0000A872 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A877 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A87C 01                         byte_8E9A:	dc.b 1
0000A87D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A882 01                         byte_8EA0:	dc.b 1
0000A883 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A888                            		even
0000A888                            		even
0000A888                            
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            ; Sprite mappings - explosion
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            Map_obj24:
0000A888                            	include "_maps\obj24.asm"
0000A888                            ; ---------------------------------------------------------------------------
0000A888                            ; Sprite mappings - explosion
0000A888                            ; ---------------------------------------------------------------------------
0000A888 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A88C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A890 01                         byte_8EAE:	dc.b 1
0000A891 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A896 01                         byte_8EB4:	dc.b 1
0000A897 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A89C 01                         byte_8EBA:	dc.b 1
0000A89D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A8A2 01                         byte_8EC0:	dc.b 1
0000A8A3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8A8                            		even
0000A8A8                            		even
0000A8A8                            
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8                            ; Sprite mappings - explosion
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A8AC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A8B0 0000                       		dc.w byte_8EF7-Map_obj27
0000A8B2 01                         byte_8ED0:	dc.b 1
0000A8B3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8B8 01                         byte_8ED6:	dc.b 1
0000A8B9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8BE 01                         byte_8EDC:	dc.b 1
0000A8BF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8C4 04                         byte_8EE2:	dc.b 4
0000A8C5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8CA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8CF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8D4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8D9 04                         byte_8EF7:	dc.b 4
0000A8DA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A8DF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A8E4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A8E9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A8EE                            		even
0000A8EE                            ; ---------------------------------------------------------------------------
0000A8EE                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A8EE                            ; ---------------------------------------------------------------------------
0000A8EE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A8F0 0000                       		dc.w byte_8F16-Map_obj3F
0000A8F2 0000                       		dc.w byte_8F1C-Map_obj3F
0000A8F4 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A8F6 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A8F8 01                         byte_8F16:	dc.b 1
0000A8F9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A8FE 01                         byte_8F1C:	dc.b 1
0000A8FF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A904                            		even
0000A904                            ; ===========================================================================
0000A904                            ; ---------------------------------------------------------------------------
0000A904                            ; Object 28 - animals
0000A904                            ; ---------------------------------------------------------------------------
0000A904                            
0000A904                            Obj28:					; XREF: Obj_Index
0000A904 7000                       		moveq	#0,d0
0000A906 1028 0024                  		move.b	$24(a0),d0
0000A90A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A90E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A912                            ; ===========================================================================
0000A912 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A916 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A91A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A91E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A922 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A926 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A92A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A92E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A932 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A936 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A93A 0000                       		dc.w loc_92D6-Obj28_Index
0000A93C                            
0000A93C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A948                            
0000A948 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A94C 0000 0000                  		dc.l Map_obj28
0000A950 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A954 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A958 FE80 FD00                  		dc.w $FE80, $FD00
0000A95C 0000 0000                  		dc.l Map_obj28
0000A960 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A964 0000 0000                  		dc.l Map_obj28a
0000A968 FE40 FD00                  		dc.w $FE40, $FD00
0000A96C 0000 0000                  		dc.l Map_obj28b
0000A970 FD00 FC00                  		dc.w $FD00, $FC00
0000A974 0000 0000                  		dc.l Map_obj28a
0000A978 FD80 FC80                  		dc.w $FD80, $FC80
0000A97C 0000 0000                  		dc.l Map_obj28b
0000A980                            
0000A980 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A990 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A9A0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9AC                            
0000A9AC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A9C0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A9D4 0000 0000                  		dc.l Map_obj28b
0000A9D8                            
0000A9D8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A9EA 0565 05B3                  		dc.w $565, $5B3
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            Obj28_Ending:				; XREF: Obj28_Index
0000A9EE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A9F2 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A9F6 7000                       		moveq	#0,d0
0000A9F8 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A9FC D040                       		add.w	d0,d0		; multiply d0 by 2
0000A9FE 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000AA02 0440 0014                  		subi.w	#$14,d0
0000AA06 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000AA0C D040                       		add.w	d0,d0
0000AA0E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000AA14 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000AA18 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA1E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000AA24 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA2A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000AA30 117C 000C 0016             		move.b	#$C,$16(a0)
0000AA36 117C 0004 0001             		move.b	#4,1(a0)
0000AA3C 08E8 0000 0001             		bset	#0,1(a0)
0000AA42 117C 0006 0018             		move.b	#6,$18(a0)
0000AA48 117C 0008 0019             		move.b	#8,$19(a0)
0000AA4E 117C 0007 001E             		move.b	#7,$1E(a0)
0000AA54 6000 0000                  		bra.w	DisplaySprite
0000AA58                            ; ===========================================================================
0000AA58                            
0000AA58                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000AA58 5428 0024                  		addq.b	#2,$24(a0)
0000AA5C 6100 80F6                  		bsr.w	RandomNumber
0000AA60 0240 0001                  		andi.w	#1,d0
0000AA64 7200                       		moveq	#0,d1
0000AA66 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000AA6A D241                       		add.w	d1,d1
0000AA6C D240                       		add.w	d0,d1
0000AA6E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000AA72 1031 1000                  		move.b	(a1,d1.w),d0
0000AA76 1140 0030                  		move.b	d0,$30(a0)
0000AA7A E748                       		lsl.w	#3,d0
0000AA7C 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000AA80 D2C0                       		adda.w	d0,a1
0000AA82 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AA86 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AA8A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000AA8E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000AA94 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AA9A 6700                       		beq.s	loc_90C0	; if yes, branch
0000AA9C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000AAA2                            
0000AAA2                            loc_90C0:
0000AAA2 117C 000C 0016             		move.b	#$C,$16(a0)
0000AAA8 117C 0004 0001             		move.b	#4,1(a0)
0000AAAE 08E8 0000 0001             		bset	#0,1(a0)
0000AAB4 117C 0006 0018             		move.b	#6,$18(a0)
0000AABA 117C 0008 0019             		move.b	#8,$19(a0)
0000AAC0 117C 0007 001E             		move.b	#7,$1E(a0)
0000AAC6 117C 0002 001A             		move.b	#2,$1A(a0)
0000AACC 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AAD2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AAD6 6600                       		bne.s	loc_911C
0000AAD8 6100 0000                  		bsr.w	SingleObjLoad
0000AADC 6600                       		bne.s	Obj28_Display
0000AADE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000AAE2 3368 0008 0008             		move.w	8(a0),8(a1)
0000AAE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AAEE 3028 003E                  		move.w	$3E(a0),d0
0000AAF2 E248                       		lsr.w	#1,d0
0000AAF4 1340 001A                  		move.b	d0,$1A(a1)
0000AAF8                            
0000AAF8                            Obj28_Display:
0000AAF8 6000 0000                  		bra.w	DisplaySprite
0000AAFC                            ; ===========================================================================
0000AAFC                            
0000AAFC                            loc_911C:
0000AAFC 117C 0012 0024             		move.b	#$12,$24(a0)
0000AB02 4268 0010                  		clr.w	$10(a0)
0000AB06 6000 0000                  		bra.w	DisplaySprite
0000AB0A                            ; ===========================================================================
0000AB0A                            
0000AB0A                            loc_912A:				; XREF: Obj28_Index
0000AB0A 4A28 0001                  		tst.b	1(a0)
0000AB0E 6A00 0000                  		bpl.w	DeleteObject
0000AB12 6100 0000                  		bsr.w	ObjectFall
0000AB16 4A68 0012                  		tst.w	$12(a0)
0000AB1A 6B00                       		bmi.s	loc_9180
0000AB1C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB22 4A41                       		tst.w	d1
0000AB24 6A00                       		bpl.s	loc_9180
0000AB26 D368 000C                  		add.w	d1,$C(a0)
0000AB2A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AB30 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB36 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB3C 1028 0030                  		move.b	$30(a0),d0
0000AB40 D000                       		add.b	d0,d0
0000AB42 5800                       		addq.b	#4,d0
0000AB44 1140 0024                  		move.b	d0,$24(a0)
0000AB48 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AB4C 6700                       		beq.s	loc_9180
0000AB4E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000AB54 6700                       		beq.s	loc_9180
0000AB56 4468 0010                  		neg.w	$10(a0)
0000AB5A 0868 0000 0001             		bchg	#0,1(a0)
0000AB60                            
0000AB60                            loc_9180:
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            loc_9184:				; XREF: Obj28_Index
0000AB64 6100 0000                  		bsr.w	ObjectFall
0000AB68 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB6E 4A68 0012                  		tst.w	$12(a0)
0000AB72 6B00                       		bmi.s	loc_91AE
0000AB74 117C 0000 001A             		move.b	#0,$1A(a0)
0000AB7A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB80 4A41                       		tst.w	d1
0000AB82 6A00                       		bpl.s	loc_91AE
0000AB84 D368 000C                  		add.w	d1,$C(a0)
0000AB88 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB8E                            
0000AB8E                            loc_91AE:
0000AB8E 4A28 0028                  		tst.b	$28(a0)
0000AB92 6600                       		bne.s	loc_9224
0000AB94 4A28 0001                  		tst.b	1(a0)
0000AB98 6A00 0000                  		bpl.w	DeleteObject
0000AB9C 6000 0000                  		bra.w	DisplaySprite
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            loc_91C0:				; XREF: Obj28_Index
0000ABA0 6100 0000                  		bsr.w	SpeedToPos
0000ABA4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000ABAA 4A68 0012                  		tst.w	$12(a0)
0000ABAE 6B00                       		bmi.s	loc_91FC
0000ABB0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABB6 4A41                       		tst.w	d1
0000ABB8 6A00                       		bpl.s	loc_91FC
0000ABBA D368 000C                  		add.w	d1,$C(a0)
0000ABBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ABC4 4A28 0028                  		tst.b	$28(a0)
0000ABC8 6700                       		beq.s	loc_91FC
0000ABCA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000ABD0 6700                       		beq.s	loc_91FC
0000ABD2 4468 0010                  		neg.w	$10(a0)
0000ABD6 0868 0000 0001             		bchg	#0,1(a0)
0000ABDC                            
0000ABDC                            loc_91FC:
0000ABDC 5328 001E                  		subq.b	#1,$1E(a0)
0000ABE0 6A00                       		bpl.s	loc_9212
0000ABE2 117C 0001 001E             		move.b	#1,$1E(a0)
0000ABE8 5228 001A                  		addq.b	#1,$1A(a0)
0000ABEC 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ABF2                            
0000ABF2                            loc_9212:
0000ABF2 4A28 0028                  		tst.b	$28(a0)
0000ABF6 6600                       		bne.s	loc_9224
0000ABF8 4A28 0001                  		tst.b	1(a0)
0000ABFC 6A00 0000                  		bpl.w	DeleteObject
0000AC00 6000 0000                  		bra.w	DisplaySprite
0000AC04                            ; ===========================================================================
0000AC04                            
0000AC04                            loc_9224:				; XREF: Obj28_Index
0000AC04 3028 0008                  		move.w	8(a0),d0
0000AC08 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AC0C 6500                       		bcs.s	loc_923C
0000AC0E 0440 0180                  		subi.w	#$180,d0
0000AC12 6A00                       		bpl.s	loc_923C
0000AC14 4A28 0001                  		tst.b	1(a0)
0000AC18 6A00 0000                  		bpl.w	DeleteObject
0000AC1C                            
0000AC1C                            loc_923C:
0000AC1C 6000 0000                  		bra.w	DisplaySprite
0000AC20                            ; ===========================================================================
0000AC20                            
0000AC20                            loc_9240:				; XREF: Obj28_Index
0000AC20 4A28 0001                  		tst.b	1(a0)
0000AC24 6A00 0000                  		bpl.w	DeleteObject
0000AC28 5368 0036                  		subq.w	#1,$36(a0)
0000AC2C 6600 0000                  		bne.w	loc_925C
0000AC30 117C 0002 0024             		move.b	#2,$24(a0)
0000AC36 117C 0003 0018             		move.b	#3,$18(a0)
0000AC3C                            
0000AC3C                            loc_925C:
0000AC3C 6000 0000                  		bra.w	DisplaySprite
0000AC40                            ; ===========================================================================
0000AC40                            
0000AC40                            loc_9260:				; XREF: Obj28_Index
0000AC40 6100 0000                  		bsr.w	sub_9404
0000AC44 6400                       		bcc.s	loc_927C
0000AC46 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AC4C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC52 117C 000E 0024             		move.b	#$E,$24(a0)
0000AC58 6000 FF46                  		bra.w	loc_91C0
0000AC5C                            ; ===========================================================================
0000AC5C                            
0000AC5C                            loc_927C:
0000AC5C 6000 FFA6                  		bra.w	loc_9224
0000AC60                            ; ===========================================================================
0000AC60                            
0000AC60                            loc_9280:				; XREF: Obj28_Index
0000AC60 6100 0000                  		bsr.w	sub_9404
0000AC64 6A00                       		bpl.s	loc_92B6
0000AC66 4268 0010                  		clr.w	$10(a0)
0000AC6A 4268 0032                  		clr.w	$32(a0)
0000AC6E 6100 0000                  		bsr.w	SpeedToPos
0000AC72 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AC78 6100 0000                  		bsr.w	loc_93C4
0000AC7C 6100 0000                  		bsr.w	loc_93EC
0000AC80 5328 001E                  		subq.b	#1,$1E(a0)
0000AC84 6A00                       		bpl.s	loc_92B6
0000AC86 117C 0001 001E             		move.b	#1,$1E(a0)
0000AC8C 5228 001A                  		addq.b	#1,$1A(a0)
0000AC90 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AC96                            
0000AC96                            loc_92B6:
0000AC96 6000 FF6C                  		bra.w	loc_9224
0000AC9A                            ; ===========================================================================
0000AC9A                            
0000AC9A                            loc_92BA:				; XREF: Obj28_Index
0000AC9A 6100 0000                  		bsr.w	sub_9404
0000AC9E 6A00                       		bpl.s	loc_9310
0000ACA0 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000ACA6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACAC 117C 0004 0024             		move.b	#4,$24(a0)
0000ACB2 6000 FEB0                  		bra.w	loc_9184
0000ACB6                            ; ===========================================================================
0000ACB6                            
0000ACB6                            loc_92D6:				; XREF: Obj28_Index
0000ACB6 6100 0000                  		bsr.w	ObjectFall
0000ACBA 117C 0001 001A             		move.b	#1,$1A(a0)
0000ACC0 4A68 0012                  		tst.w	$12(a0)
0000ACC4 6B00                       		bmi.s	loc_9310
0000ACC6 117C 0000 001A             		move.b	#0,$1A(a0)
0000ACCC 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACD2 4A41                       		tst.w	d1
0000ACD4 6A00                       		bpl.s	loc_9310
0000ACD6 4628 0029                  		not.b	$29(a0)
0000ACDA 6600                       		bne.s	loc_9306
0000ACDC 4468 0010                  		neg.w	$10(a0)
0000ACE0 0868 0000 0001             		bchg	#0,1(a0)
0000ACE6                            
0000ACE6                            loc_9306:
0000ACE6 D368 000C                  		add.w	d1,$C(a0)
0000ACEA 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACF0                            
0000ACF0                            loc_9310:
0000ACF0 6000 FF12                  		bra.w	loc_9224
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            loc_9314:				; XREF: Obj28_Index
0000ACF4 6100 0000                  		bsr.w	sub_9404
0000ACF8 6A00                       		bpl.s	loc_932E
0000ACFA 4268 0010                  		clr.w	$10(a0)
0000ACFE 4268 0032                  		clr.w	$32(a0)
0000AD02 6100 0000                  		bsr.w	ObjectFall
0000AD06 6100 0000                  		bsr.w	loc_93C4
0000AD0A 6100 0000                  		bsr.w	loc_93EC
0000AD0E                            
0000AD0E                            loc_932E:
0000AD0E 6000 FEF4                  		bra.w	loc_9224
0000AD12                            ; ===========================================================================
0000AD12                            
0000AD12                            loc_9332:				; XREF: Obj28_Index
0000AD12 6100 0000                  		bsr.w	sub_9404
0000AD16 6A00                       		bpl.s	loc_936C
0000AD18 6100 0000                  		bsr.w	ObjectFall
0000AD1C 117C 0001 001A             		move.b	#1,$1A(a0)
0000AD22 4A68 0012                  		tst.w	$12(a0)
0000AD26 6B00                       		bmi.s	loc_936C
0000AD28 117C 0000 001A             		move.b	#0,$1A(a0)
0000AD2E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD34 4A41                       		tst.w	d1
0000AD36 6A00                       		bpl.s	loc_936C
0000AD38 4468 0010                  		neg.w	$10(a0)
0000AD3C 0868 0000 0001             		bchg	#0,1(a0)
0000AD42 D368 000C                  		add.w	d1,$C(a0)
0000AD46 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD4C                            
0000AD4C                            loc_936C:
0000AD4C 6000 FEB6                  		bra.w	loc_9224
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_9370:				; XREF: Obj28_Index
0000AD50 6100 0000                  		bsr.w	sub_9404
0000AD54 6A00                       		bpl.s	loc_93C0
0000AD56 6100 0000                  		bsr.w	SpeedToPos
0000AD5A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD60 4A68 0012                  		tst.w	$12(a0)
0000AD64 6B00                       		bmi.s	loc_93AA
0000AD66 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD6C 4A41                       		tst.w	d1
0000AD6E 6A00                       		bpl.s	loc_93AA
0000AD70 4628 0029                  		not.b	$29(a0)
0000AD74 6600                       		bne.s	loc_93A0
0000AD76 4468 0010                  		neg.w	$10(a0)
0000AD7A 0868 0000 0001             		bchg	#0,1(a0)
0000AD80                            
0000AD80                            loc_93A0:
0000AD80 D368 000C                  		add.w	d1,$C(a0)
0000AD84 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD8A                            
0000AD8A                            loc_93AA:
0000AD8A 5328 001E                  		subq.b	#1,$1E(a0)
0000AD8E 6A00                       		bpl.s	loc_93C0
0000AD90 117C 0001 001E             		move.b	#1,$1E(a0)
0000AD96 5228 001A                  		addq.b	#1,$1A(a0)
0000AD9A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ADA0                            
0000ADA0                            loc_93C0:
0000ADA0 6000 FE62                  		bra.w	loc_9224
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            loc_93C4:
0000ADA4 117C 0001 001A             		move.b	#1,$1A(a0)
0000ADAA 4A68 0012                  		tst.w	$12(a0)
0000ADAE 6B00                       		bmi.s	locret_93EA
0000ADB0 117C 0000 001A             		move.b	#0,$1A(a0)
0000ADB6 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADBC 4A41                       		tst.w	d1
0000ADBE 6A00                       		bpl.s	locret_93EA
0000ADC0 D368 000C                  		add.w	d1,$C(a0)
0000ADC4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADCA                            
0000ADCA                            locret_93EA:
0000ADCA 4E75                       		rts	
0000ADCC                            ; ===========================================================================
0000ADCC                            
0000ADCC                            loc_93EC:
0000ADCC 08E8 0000 0001             		bset	#0,1(a0)
0000ADD2 3028 0008                  		move.w	8(a0),d0
0000ADD6 9078 D008                  		sub.w	($FFFFD008).w,d0
0000ADDA 6400                       		bcc.s	locret_9402
0000ADDC 08A8 0000 0001             		bclr	#0,1(a0)
0000ADE2                            
0000ADE2                            locret_9402:
0000ADE2 4E75                       		rts	
0000ADE4                            
0000ADE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADE4                            
0000ADE4                            
0000ADE4                            sub_9404:
0000ADE4 3038 D008                  		move.w	($FFFFD008).w,d0
0000ADE8 9068 0008                  		sub.w	8(a0),d0
0000ADEC 0440 00B8                  		subi.w	#$B8,d0
0000ADF0 4E75                       		rts	
0000ADF2                            ; End of function sub_9404
0000ADF2                            
0000ADF2                            ; ===========================================================================
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            ; Object 29 - points that appear when you destroy something
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            
0000ADF2                            Obj29:					; XREF: Obj_Index
0000ADF2 7000                       		moveq	#0,d0
0000ADF4 1028 0024                  		move.b	$24(a0),d0
0000ADF8 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000ADFC 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000AE00 6000 0000                  		bra.w	DisplaySprite
0000AE04                            ; ===========================================================================
0000AE04 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AE06 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AE08                            ; ===========================================================================
0000AE08                            
0000AE08                            Obj29_Main:				; XREF: Obj29_Index
0000AE08 5428 0024                  		addq.b	#2,$24(a0)
0000AE0C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AE14 317C 2797 0002             		move.w	#$2797,2(a0)
0000AE1A 117C 0004 0001             		move.b	#4,1(a0)
0000AE20 117C 0001 0018             		move.b	#1,$18(a0)
0000AE26 117C 0008 0019             		move.b	#8,$19(a0)
0000AE2C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AE32                            
0000AE32                            Obj29_Slower:				; XREF: Obj29_Index
0000AE32 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE36 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000AE3A 6100 0000                  		bsr.w	SpeedToPos
0000AE3E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE44 4E75                       		rts	
0000AE46                            ; ===========================================================================
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Sprite mappings - animals
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            Map_obj28:
0000AE46                            	include "_maps\obj28.asm"
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Sprite mappings - animals
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46 0000                       		dc.w byte_9472-Map_obj28
0000AE48 0000                       		dc.w byte_9478-Map_obj28
0000AE4A 0000                       		dc.w byte_946C-Map_obj28
0000AE4C 01                         byte_946C:	dc.b 1
0000AE4D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE52 01                         byte_9472:	dc.b 1
0000AE53 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE58 01                         byte_9478:	dc.b 1
0000AE59 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE5E                            		even
0000AE5E                            		even
0000AE5E                            
0000AE5E                            Map_obj28a:
0000AE5E                            	include "_maps\obj28a.asm"
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E                            ; Sprite mappings - animals
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E 0000                       		dc.w byte_948A-Map_obj28a
0000AE60 0000                       		dc.w byte_9490-Map_obj28a
0000AE62 0000                       		dc.w byte_9484-Map_obj28a
0000AE64 01                         byte_9484:	dc.b 1
0000AE65 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE6A 01                         byte_948A:	dc.b 1
0000AE6B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE70 01                         byte_9490:	dc.b 1
0000AE71 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE76                            		even
0000AE76                            		even
0000AE76                            
0000AE76                            Map_obj28b:
0000AE76                            	include "_maps\obj28b.asm"
0000AE76                            ; ---------------------------------------------------------------------------
0000AE76                            ; Sprite mappings - animals
0000AE76                            ; ---------------------------------------------------------------------------
0000AE76 0000                       		dc.w byte_94A2-Map_obj28b
0000AE78 0000                       		dc.w byte_94A8-Map_obj28b
0000AE7A 0000                       		dc.w byte_949C-Map_obj28b
0000AE7C 01                         byte_949C:	dc.b 1
0000AE7D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE82 01                         byte_94A2:	dc.b 1
0000AE83 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AE88 01                         byte_94A8:	dc.b 1
0000AE89 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AE8E                            		even
0000AE8E                            		even
0000AE8E                            
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            Map_obj29:
0000AE8E                            	include "_maps\obj29.asm"
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000AE92 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AE96 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AE9A 0000                       		dc.w byte_94E5-Map_obj29
0000AE9C 01                         byte_94BC:	dc.b 1
0000AE9D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AEA2 01                         byte_94C2:	dc.b 1
0000AEA3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AEA8 01                         byte_94C8:	dc.b 1
0000AEA9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AEAE 01                         byte_94CE:	dc.b 1
0000AEAF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AEB4 01                         byte_94D4:	dc.b 1
0000AEB5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AEBA 02                         byte_94DA:	dc.b 2
0000AEBB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AEC0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AEC5 02                         byte_94E5:	dc.b 2
0000AEC6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AECB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AED0                            		even
0000AED0                            		even
0000AED0                            
0000AED0                            ; ===========================================================================
0000AED0                            ; ---------------------------------------------------------------------------
0000AED0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AED0                            ; ---------------------------------------------------------------------------
0000AED0                            
0000AED0                            Obj1F:					; XREF: Obj_Index
0000AED0 7000                       		moveq	#0,d0
0000AED2 1028 0024                  		move.b	$24(a0),d0
0000AED6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AEDA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AEDE                            ; ===========================================================================
0000AEDE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AEE0 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AEE2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AEE4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AEE6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            Obj1F_Main:				; XREF: Obj1F_Index
0000AEE8 117C 0010 0016             		move.b	#$10,$16(a0)
0000AEEE 117C 0008 0017             		move.b	#8,$17(a0)
0000AEF4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AEFC 317C 0400 0002             		move.w	#$400,2(a0)
0000AF02 117C 0004 0001             		move.b	#4,1(a0)
0000AF08 117C 0003 0018             		move.b	#3,$18(a0)
0000AF0E 117C 0006 0020             		move.b	#6,$20(a0)
0000AF14 117C 0015 0019             		move.b	#$15,$19(a0)
0000AF1A 6100 0000                  		bsr.w	ObjectFall
0000AF1E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AF24 4A41                       		tst.w	d1
0000AF26 6A00                       		bpl.s	locret_955A
0000AF28 D368 000C                  		add.w	d1,$C(a0)
0000AF2C 1143 0026                  		move.b	d3,$26(a0)
0000AF30 317C 0000 0012             		move.w	#0,$12(a0)
0000AF36 5428 0024                  		addq.b	#2,$24(a0)
0000AF3A                            
0000AF3A                            locret_955A:
0000AF3A 4E75                       		rts	
0000AF3C                            ; ===========================================================================
0000AF3C                            
0000AF3C                            Obj1F_Action:				; XREF: Obj1F_Index
0000AF3C 7000                       		moveq	#0,d0
0000AF3E 1028 0025                  		move.b	$25(a0),d0
0000AF42 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000AF46 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000AF4A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AF50 6100 0000                  		bsr.w	AnimateSprite
0000AF54 6000 0000                  		bra.w	MarkObjGone
0000AF58                            ; ===========================================================================
0000AF58 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000AF5A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000AF5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000AF60 6A00                       		bpl.s	locret_95B6
0000AF62 4A28 0001                  		tst.b	1(a0)
0000AF66 6A00                       		bpl.s	Obj1F_Move
0000AF68 0868 0001 0032             		bchg	#1,$32(a0)
0000AF6E 6600                       		bne.s	Obj1F_MakeFire
0000AF70                            
0000AF70                            Obj1F_Move:
0000AF70 5428 0025                  		addq.b	#2,$25(a0)
0000AF74 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000AF7A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000AF80 6100 0000                  		bsr.w	Obj1F_SetAni
0000AF84 5600                       		addq.b	#3,d0
0000AF86 1140 001C                  		move.b	d0,$1C(a0)
0000AF8A 0868 0000 0022             		bchg	#0,$22(a0)
0000AF90 6600                       		bne.s	locret_95B6
0000AF92 4468 0010                  		neg.w	$10(a0)		; change direction
0000AF96                            
0000AF96                            locret_95B6:
0000AF96 4E75                       		rts	
0000AF98                            ; ===========================================================================
0000AF98                            
0000AF98                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AF98 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AF9E 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AFA4 6100 0000                  		bsr.w	SingleObjLoad
0000AFA8 6600                       		bne.s	Obj1F_MakeFire2
0000AFAA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AFAE 137C 0006 0024             		move.b	#6,$24(a1)
0000AFB4 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFBA 0469 0010 0008             		subi.w	#$10,8(a1)
0000AFC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFC6 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AFCC                            
0000AFCC                            Obj1F_MakeFire2:
0000AFCC 6100 0000                  		bsr.w	SingleObjLoad
0000AFD0 6600                       		bne.s	locret_9618
0000AFD2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AFD6 137C 0006 0024             		move.b	#6,$24(a1)
0000AFDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFE2 0669 0010 0008             		addi.w	#$10,8(a1)
0000AFE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFEE 337C 0100 0010             		move.w	#$100,$10(a1)
0000AFF4                            
0000AFF4                            locret_9618:
0000AFF4 4E75                       		rts	
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000AFF6 5368 0030                  		subq.w	#1,$30(a0)
0000AFFA 6B00                       		bmi.s	loc_966E
0000AFFC 6100 0000                  		bsr.w	SpeedToPos
0000B000 0868 0000 0032             		bchg	#0,$32(a0)
0000B006 6600                       		bne.s	loc_9654
0000B008 3628 0008                  		move.w	8(a0),d3
0000B00C 0643 0010                  		addi.w	#$10,d3
0000B010 0828 0000 0022             		btst	#0,$22(a0)
0000B016 6700                       		beq.s	loc_9640
0000B018 0443 0020                  		subi.w	#$20,d3
0000B01C                            
0000B01C                            loc_9640:
0000B01C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B022 0C41 FFF8                  		cmpi.w	#-8,d1
0000B026 6D00                       		blt.s	loc_966E
0000B028 0C41 000C                  		cmpi.w	#$C,d1
0000B02C 6C00                       		bge.s	loc_966E
0000B02E 4E75                       		rts	
0000B030                            ; ===========================================================================
0000B030                            
0000B030                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000B030 4EB9 0000 0000             		jsr	ObjHitFloor
0000B036 D368 000C                  		add.w	d1,$C(a0)
0000B03A 1143 0026                  		move.b	d3,$26(a0)
0000B03E 6100 0000                  		bsr.w	Obj1F_SetAni
0000B042 5600                       		addq.b	#3,d0
0000B044 1140 001C                  		move.b	d0,$1C(a0)
0000B048 4E75                       		rts	
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000B04A 5528 0025                  		subq.b	#2,$25(a0)
0000B04E 317C 003B 0030             		move.w	#59,$30(a0)
0000B054 317C 0000 0010             		move.w	#0,$10(a0)
0000B05A 6100 0000                  		bsr.w	Obj1F_SetAni
0000B05E 1140 001C                  		move.b	d0,$1C(a0)
0000B062 4E75                       		rts	
0000B064                            ; ---------------------------------------------------------------------------
0000B064                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B064                            ; ---------------------------------------------------------------------------
0000B064                            
0000B064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B064                            
0000B064                            
0000B064                            Obj1F_SetAni:				; XREF: loc_966E
0000B064 7000                       		moveq	#0,d0
0000B066 1628 0026                  		move.b	$26(a0),d3
0000B06A 6B00                       		bmi.s	loc_96A4
0000B06C 0C03 0006                  		cmpi.b	#6,d3
0000B070 6500                       		bcs.s	locret_96A2
0000B072 7001                       		moveq	#1,d0
0000B074 0828 0000 0022             		btst	#0,$22(a0)
0000B07A 6600                       		bne.s	locret_96A2
0000B07C 7002                       		moveq	#2,d0
0000B07E                            
0000B07E                            locret_96A2:
0000B07E 4E75                       		rts	
0000B080                            ; ===========================================================================
0000B080                            
0000B080                            loc_96A4:				; XREF: Obj1F_SetAni
0000B080 0C03 00FA                  		cmpi.b	#-6,d3
0000B084 6200                       		bhi.s	locret_96B6
0000B086 7002                       		moveq	#2,d0
0000B088 0828 0000 0022             		btst	#0,$22(a0)
0000B08E 6600                       		bne.s	locret_96B6
0000B090 7001                       		moveq	#1,d0
0000B092                            
0000B092                            locret_96B6:
0000B092 4E75                       		rts	
0000B094                            ; End of function Obj1F_SetAni
0000B094                            
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            Obj1F_Delete:				; XREF: Obj1F_Index
0000B094 6100 0000                  		bsr.w	DeleteObject
0000B098 4E75                       		rts	
0000B09A                            ; ===========================================================================
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Sub-object - missile that the	Crabmeat throws
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            
0000B09A                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000B09A 5428 0024                  		addq.b	#2,$24(a0)
0000B09E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000B0A6 317C 0400 0002             		move.w	#$400,2(a0)
0000B0AC 117C 0004 0001             		move.b	#4,1(a0)
0000B0B2 117C 0003 0018             		move.b	#3,$18(a0)
0000B0B8 117C 0087 0020             		move.b	#$87,$20(a0)
0000B0BE 117C 0008 0019             		move.b	#8,$19(a0)
0000B0C4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B0CA 117C 0007 001C             		move.b	#7,$1C(a0)
0000B0D0                            
0000B0D0                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000B0D0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B0D6 6100 0000                  		bsr.w	AnimateSprite
0000B0DA 6100 0000                  		bsr.w	ObjectFall
0000B0DE 6100 0000                  		bsr.w	DisplaySprite
0000B0E2 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B0E6 0640 00E0                  		addi.w	#$E0,d0
0000B0EA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B0EE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000B0F0 4E75                       		rts	
0000B0F2                            ; ===========================================================================
0000B0F2                            
0000B0F2                            Obj1F_Delete2:
0000B0F2 6000 0000                  		bra.w	DeleteObject
0000B0F6                            ; ===========================================================================
0000B0F6                            Ani_obj1F:
0000B0F6                            	include "_anim\obj1F.asm"
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6                            ; Animation script - Crabmeat enemy
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000B0FC 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000B102 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000B106 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000B10A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000B10E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000B112 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000B118 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000B11E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000B124 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000B128 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000B12C                            		even
0000B12C                            		even
0000B12C                            
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            Map_obj1F:
0000B12C                            	include "_maps\obj1F.asm"
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000B130 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000B134 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000B138 0000                       		dc.w byte_97D7-Map_obj1F
0000B13A 04                         byte_975E:	dc.b 4
0000B13B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000B140 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B145 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B14A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B14F 04                         byte_9773:	dc.b 4
0000B150 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000B155 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B15A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B15F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B164 04                         byte_9788:	dc.b 4
0000B165 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000B16A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B16F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B174 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B179 04                         byte_979D:	dc.b 4
0000B17A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000B17F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B184 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B189 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B18E 06                         byte_97B2:	dc.b 6
0000B18F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000B194 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B199 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B19E F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B1A3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1A8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1AD 01                         byte_97D1:	dc.b 1
0000B1AE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000B1B3 01                         byte_97D7:	dc.b 1
0000B1B4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000B1BA 00                         		even
0000B1BA 00                         		even
0000B1BA                            
0000B1BA                            ; ===========================================================================
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            
0000B1BA                            Obj22:					; XREF: Obj_Index
0000B1BA 7000                       		moveq	#0,d0
0000B1BC 1028 0024                  		move.b	$24(a0),d0
0000B1C0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000B1C4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000B1C8                            ; ===========================================================================
0000B1C8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000B1CA 0000                       		dc.w Obj22_Action-Obj22_Index
0000B1CC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000B1CE                            ; ===========================================================================
0000B1CE                            
0000B1CE                            Obj22_Main:				; XREF: Obj22_Index
0000B1CE 5428 0024                  		addq.b	#2,$24(a0)
0000B1D2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000B1DA 317C 0444 0002             		move.w	#$444,2(a0)
0000B1E0 117C 0004 0001             		move.b	#4,1(a0)
0000B1E6 117C 0003 0018             		move.b	#3,$18(a0)
0000B1EC 117C 0008 0020             		move.b	#8,$20(a0)
0000B1F2 117C 0018 0019             		move.b	#$18,$19(a0)
0000B1F8                            
0000B1F8                            Obj22_Action:				; XREF: Obj22_Index
0000B1F8 7000                       		moveq	#0,d0
0000B1FA 1028 0025                  		move.b	$25(a0),d0
0000B1FE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000B202 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000B206 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000B20C 6100 0000                  		bsr.w	AnimateSprite
0000B210 6000 0000                  		bra.w	MarkObjGone
0000B214                            ; ===========================================================================
0000B214 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000B216 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000B218                            ; ===========================================================================
0000B218                            
0000B218                            Obj22_Move:				; XREF: Obj22_Index2
0000B218 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B21C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B21E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B224 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000B226 5428 0025                  		addq.b	#2,$25(a0)
0000B22A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000B230 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000B236 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000B23C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B242 6600                       		bne.s	locret_986C	; if not, branch
0000B244 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B248                            
0000B248                            locret_986C:
0000B248 4E75                       		rts	
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            Obj22_Fire:				; XREF: Obj22_Move
0000B24A 6100 0000                  		bsr.w	SingleObjLoad
0000B24E 6600                       		bne.s	locret_98D0
0000B250 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000B254 3368 0008 0008             		move.w	8(a0),8(a1)
0000B25A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B260 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000B266 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000B26C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000B272 303C 0018                  		move.w	#$18,d0
0000B276 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B27C 6600                       		bne.s	loc_98AA	; if not, branch
0000B27E 4440                       		neg.w	d0
0000B280 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000B284                            
0000B284                            loc_98AA:
0000B284 D169 0008                  		add.w	d0,8(a1)
0000B288 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000B28E 337C 000E 0032             		move.w	#$E,$32(a1)
0000B294 2348 003C                  		move.l	a0,$3C(a1)
0000B298 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B29E 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B2A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2AA                            
0000B2AA                            locret_98D0:
0000B2AA 4E75                       		rts	
0000B2AC                            ; ===========================================================================
0000B2AC                            
0000B2AC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B2AC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2B0 6B00                       		bmi.s	Obj22_ChgDir
0000B2B2 6100 0000                  		bsr.w	SpeedToPos
0000B2B6 4A28 0034                  		tst.b	$34(a0)
0000B2BA 6600                       		bne.s	locret_992A
0000B2BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2C0 9068 0008                  		sub.w	8(a0),d0
0000B2C4 6A00                       		bpl.s	Obj22_SetNrSonic
0000B2C6 4440                       		neg.w	d0
0000B2C8                            
0000B2C8                            Obj22_SetNrSonic:
0000B2C8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B2CC 6400                       		bcc.s	locret_992A	; if not, branch
0000B2CE 4A28 0001                  		tst.b	1(a0)
0000B2D2 6A00                       		bpl.s	locret_992A
0000B2D4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2DA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B2E0 6000                       		bra.s	Obj22_Stop
0000B2E2                            ; ===========================================================================
0000B2E2                            
0000B2E2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B2E2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B2E8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B2EE 317C 003B 0032             		move.w	#59,$32(a0)
0000B2F4                            
0000B2F4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B2F4 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B2F8 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B2FE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B304                            
0000B304                            locret_992A:
0000B304 4E75                       		rts	
0000B306                            ; ===========================================================================
0000B306                            
0000B306                            Obj22_Delete:				; XREF: Obj22_Index
0000B306 6100 0000                  		bsr.w	DeleteObject
0000B30A 4E75                       		rts	
0000B30C                            ; ===========================================================================
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            ; Object 23 - missile that Buzz	Bomber throws
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            
0000B30C                            Obj23:					; XREF: Obj_Index
0000B30C 7000                       		moveq	#0,d0
0000B30E 1028 0024                  		move.b	$24(a0),d0
0000B312 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B316 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B31A                            ; ===========================================================================
0000B31A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B31C 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B31E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B320 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B322 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B324                            ; ===========================================================================
0000B324                            
0000B324                            Obj23_Main:				; XREF: Obj23_Index
0000B324 5368 0032                  		subq.w	#1,$32(a0)
0000B328 6A00                       		bpl.s	Obj23_ChkCancel
0000B32A 5428 0024                  		addq.b	#2,$24(a0)
0000B32E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B336 317C 2444 0002             		move.w	#$2444,2(a0)
0000B33C 117C 0004 0001             		move.b	#4,1(a0)
0000B342 117C 0003 0018             		move.b	#3,$18(a0)
0000B348 117C 0008 0019             		move.b	#8,$19(a0)
0000B34E 0228 0003 0022             		andi.b	#3,$22(a0)
0000B354 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B358 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B35A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B360 117C 0087 0020             		move.b	#$87,$20(a0)
0000B366 117C 0001 001C             		move.b	#1,$1C(a0)
0000B36C 6000                       		bra.s	Obj23_Animate2
0000B36E                            ; ===========================================================================
0000B36E                            
0000B36E                            Obj23_Animate:				; XREF: Obj23_Index
0000B36E 6100                       		bsr.s	Obj23_ChkCancel
0000B370 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B376 6100 0000                  		bsr.w	AnimateSprite
0000B37A 6000 0000                  		bra.w	DisplaySprite
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B37E                            ; destroyed, and if it has, then cancel	the missile
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            
0000B37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B37E                            
0000B37E                            
0000B37E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B37E 2268 003C                  		movea.l	$3C(a0),a1
0000B382 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B386 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B388 4E75                       		rts	
0000B38A                            ; End of function Obj23_ChkCancel
0000B38A                            
0000B38A                            ; ===========================================================================
0000B38A                            
0000B38A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B38A 0828 0007 0022             		btst	#7,$22(a0)
0000B390 6600                       		bne.s	Obj23_Explode
0000B392 117C 0087 0020             		move.b	#$87,$20(a0)
0000B398 117C 0001 001C             		move.b	#1,$1C(a0)
0000B39E 6100 0000                  		bsr.w	SpeedToPos
0000B3A2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3A8 6100 0000                  		bsr.w	AnimateSprite
0000B3AC 6100 0000                  		bsr.w	DisplaySprite
0000B3B0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B3B4 0640 00E0                  		addi.w	#$E0,d0
0000B3B8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B3BC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B3BE 4E75                       		rts	
0000B3C0                            ; ===========================================================================
0000B3C0                            
0000B3C0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B3C0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B3C4 117C 0000 0024             		move.b	#0,$24(a0)
0000B3CA 6000 F30A                  		bra.w	Obj24
0000B3CE                            ; ===========================================================================
0000B3CE                            
0000B3CE                            Obj23_Delete:				; XREF: Obj23_Index
0000B3CE 6100 0000                  		bsr.w	DeleteObject
0000B3D2 4E75                       		rts	
0000B3D4                            ; ===========================================================================
0000B3D4                            
0000B3D4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B3D4 4A28 0001                  		tst.b	1(a0)
0000B3D8 6AF4                       		bpl.s	Obj23_Delete
0000B3DA 6100 0000                  		bsr.w	SpeedToPos
0000B3DE                            
0000B3DE                            Obj23_Animate2:				; XREF: Obj23_Main
0000B3DE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3E4 6100 0000                  		bsr.w	AnimateSprite
0000B3E8 6100 0000                  		bsr.w	DisplaySprite
0000B3EC 4E75                       		rts	
0000B3EE                            ; ===========================================================================
0000B3EE                            Ani_obj22:
0000B3EE                            	include "_anim\obj22.asm"
0000B3EE                            ; ---------------------------------------------------------------------------
0000B3EE                            ; Animation script - Buzz Bomber enemy
0000B3EE                            ; ---------------------------------------------------------------------------
0000B3EE 0000                       		dc.w byte_9A1E-Ani_obj22
0000B3F0 0000                       		dc.w byte_9A22-Ani_obj22
0000B3F2 0000                       		dc.w byte_9A26-Ani_obj22
0000B3F4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B3F8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B3FC 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B400                            		even
0000B400                            		even
0000B400                            
0000B400                            Ani_obj23:
0000B400                            	include "_anim\obj23.asm"
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            ; Animation script - missile that Buzz Bomber throws
0000B400                            ; ---------------------------------------------------------------------------
0000B400 0000                       		dc.w byte_9A2E-Ani_obj23
0000B402 0000                       		dc.w byte_9A32-Ani_obj23
0000B404 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B408 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B40C                            		even
0000B40C                            		even
0000B40C                            
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            ; Sprite mappings - Buzz Bomber	enemy
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            Map_obj22:
0000B40C                            	include "_maps\obj22.asm"
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C                            ; Sprite mappings - Buzz Bomber	enemy
0000B40C                            ; ---------------------------------------------------------------------------
0000B40C 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B410 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B414 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B418 06                         byte_9A42:	dc.b 6
0000B419 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B41E F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B423 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B428 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B42D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B432 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B437 06                         byte_9A61:	dc.b 6
0000B438 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B43D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B442 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B447 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B44C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B451 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B456 07                         byte_9A80:	dc.b 7
0000B457 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B45C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B461 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B466 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B46B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B470 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B475 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B47A 07                         byte_9AA4:	dc.b 7
0000B47B 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B480 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B485 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B48A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B48F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B494 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B499 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B49E 06                         byte_9AC8:	dc.b 6
0000B49F F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4A4 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4A9 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4AE 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4B3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B4B8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B4BD 04                         byte_9AE7:	dc.b 4
0000B4BE F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4C3 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4C8 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4CD 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4D2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B4D7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B4DC                            		even
0000B4DC                            		even
0000B4DC                            
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            Map_obj23:
0000B4DC                            	include "_maps\obj23.asm"
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B4E0 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B4E4 01                         byte_9B0E:	dc.b 1
0000B4E5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B4EA 01                         byte_9B14:	dc.b 1
0000B4EB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B4F0 01                         byte_9B1A:	dc.b 1
0000B4F1 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B4F6 01                         byte_9B20:	dc.b 1
0000B4F7 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B4FC                            		even
0000B4FC                            		even
0000B4FC                            
0000B4FC                            ; ===========================================================================
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            ; Object 25 - rings
0000B4FC                            ; ---------------------------------------------------------------------------
0000B4FC                            
0000B4FC                            Obj25:					; XREF: Obj_Index
0000B4FC 7000                       		moveq	#0,d0
0000B4FE 1028 0024                  		move.b	$24(a0),d0
0000B502 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B506 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B50A                            ; ===========================================================================
0000B50A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B50C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B50E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B510 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B512 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Distances between rings (format: horizontal, vertical)
0000B514                            ; ---------------------------------------------------------------------------
0000B514 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B516 1800                       		dc.b $18, 0		; horizontal normal
0000B518 2000                       		dc.b $20, 0		; horizontal wide
0000B51A 0010                       		dc.b 0,	$10		; vertical tight
0000B51C 0018                       		dc.b 0,	$18		; vertical normal
0000B51E 0020                       		dc.b 0,	$20		; vertical wide
0000B520 1010                       		dc.b $10, $10		; diagonal
0000B522 1818                       		dc.b $18, $18
0000B524 2020                       		dc.b $20, $20
0000B526 F010                       		dc.b $F0, $10
0000B528 E818                       		dc.b $E8, $18
0000B52A E020                       		dc.b $E0, $20
0000B52C 1008                       		dc.b $10, 8
0000B52E 1810                       		dc.b $18, $10
0000B530 F008                       		dc.b $F0, 8
0000B532 E810                       		dc.b $E8, $10
0000B534                            ; ===========================================================================
0000B534                            
0000B534                            Obj25_Main:				; XREF: Obj25_Index
0000B534 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B538 7000                       		moveq	#0,d0
0000B53A 1028 0023                  		move.b	$23(a0),d0
0000B53E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B542 1812                       		move.b	(a2),d4
0000B544 1228 0028                  		move.b	$28(a0),d1
0000B548 1001                       		move.b	d1,d0
0000B54A 0241 0007                  		andi.w	#7,d1
0000B54E 0C41 0007                  		cmpi.w	#7,d1
0000B552 6600                       		bne.s	loc_9B80
0000B554 7206                       		moveq	#6,d1
0000B556                            
0000B556                            loc_9B80:
0000B556 4841                       		swap	d1
0000B558 323C 0000                  		move.w	#0,d1
0000B55C E808                       		lsr.b	#4,d0
0000B55E D040                       		add.w	d0,d0
0000B560 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B564 4885                       		ext.w	d5
0000B566 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B56A 4886                       		ext.w	d6
0000B56C 2248                       		movea.l	a0,a1
0000B56E 3428 0008                  		move.w	8(a0),d2
0000B572 3628 000C                  		move.w	$C(a0),d3
0000B576 E20C                       		lsr.b	#1,d4
0000B578 6500                       		bcs.s	loc_9C02
0000B57A 0892 0007                  		bclr	#7,(a2)
0000B57E 6000                       		bra.s	loc_9BBA
0000B580                            ; ===========================================================================
0000B580                            
0000B580                            Obj25_MakeRings:
0000B580 4841                       		swap	d1
0000B582 E20C                       		lsr.b	#1,d4
0000B584 6500                       		bcs.s	loc_9C02
0000B586 0892 0007                  		bclr	#7,(a2)
0000B58A 6100 0000                  		bsr.w	SingleObjLoad
0000B58E 6600                       		bne.s	loc_9C0E
0000B590                            
0000B590                            loc_9BBA:				; XREF: Obj25_Main
0000B590 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B594 5429 0024                  		addq.b	#2,$24(a1)
0000B598 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B59C 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B5A2 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B5A6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B5AE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B5B4 137C 0004 0001             		move.b	#4,1(a1)
0000B5BA 137C 0002 0018             		move.b	#2,$18(a1)
0000B5C0 137C 0047 0020             		move.b	#$47,$20(a1)
0000B5C6 137C 0008 0019             		move.b	#8,$19(a1)
0000B5CC 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B5D2 1341 0034                  		move.b	d1,$34(a1)
0000B5D6                            
0000B5D6                            loc_9C02:
0000B5D6 5241                       		addq.w	#1,d1
0000B5D8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B5DA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B5DC 4841                       		swap	d1
0000B5DE 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B5E2                            
0000B5E2                            loc_9C0E:
0000B5E2 0812 0000                  		btst	#0,(a2)
0000B5E6 6600 0000                  		bne.w	DeleteObject
0000B5EA                            
0000B5EA                            Obj25_Animate:				; XREF: Obj25_Index
0000B5EA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B5F0 6100 0000                  		bsr.w	DisplaySprite
0000B5F4 3028 0032                  		move.w	$32(a0),d0
0000B5F8 0240 FF80                  		andi.w	#$FF80,d0
0000B5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B600 0441 0080                  		subi.w	#$80,d1
0000B604 0241 FF80                  		andi.w	#$FF80,d1
0000B608 9041                       		sub.w	d1,d0
0000B60A 0C40 0280                  		cmpi.w	#$280,d0
0000B60E 6200                       		bhi.s	Obj25_Delete
0000B610 4E75                       		rts	
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            Obj25_Collect:				; XREF: Obj25_Index
0000B612 5428 0024                  		addq.b	#2,$24(a0)
0000B616 117C 0000 0020             		move.b	#0,$20(a0)
0000B61C 117C 0001 0018             		move.b	#1,$18(a0)
0000B622 6100 0000                  		bsr.w	CollectRing
0000B626 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B62A 7000                       		moveq	#0,d0
0000B62C 1028 0023                  		move.b	$23(a0),d0
0000B630 1228 0034                  		move.b	$34(a0),d1
0000B634 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B638                            
0000B638                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B638 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B63E 6100 0000                  		bsr.w	AnimateSprite
0000B642 6000 0000                  		bra.w	DisplaySprite
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Obj25_Delete:				; XREF: Obj25_Index
0000B646 6000 0000                  		bra.w	DeleteObject
0000B64A                            
0000B64A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B64A                            
0000B64A                            
0000B64A                            CollectRing:				; XREF: Obj25_Collect
0000B64A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B64E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B654 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B658 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B65E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B660 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B666 6700                       		beq.s	loc_9CA4
0000B668 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B66E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B670 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B676 6600                       		bne.s	Obj25_PlaySnd
0000B678                            
0000B678                            loc_9CA4:
0000B678 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B67C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B680 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B684                            
0000B684                            Obj25_PlaySnd:
0000B684 4EF9 0000 12CE             		jmp	(PlaySound_Special).l
0000B68A                            ; End of function CollectRing
0000B68A                            
0000B68A                            ; ===========================================================================
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            
0000B68A                            Obj37:					; XREF: Obj_Index
0000B68A 7000                       		moveq	#0,d0
0000B68C 1028 0024                  		move.b	$24(a0),d0
0000B690 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B694 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B698                            ; ===========================================================================
0000B698 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B69A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B69C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B69E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B6A0 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B6A2                            ; ===========================================================================
0000B6A2                            
0000B6A2                            Obj37_CountRings:			; XREF: Obj37_Index
0000B6A2 2248                       		movea.l	a0,a1
0000B6A4 7A00                       		moveq	#0,d5
0000B6A6 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B6AA 7020                       		moveq	#32,d0
0000B6AC BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B6AE 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B6B0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B6B2                            
0000B6B2                            loc_9CDE:
0000B6B2 5345                       		subq.w	#1,d5
0000B6B4 383C 0288                  		move.w	#$288,d4
0000B6B8 6000                       		bra.s	Obj37_MakeRings
0000B6BA                            ; ===========================================================================
0000B6BA                            
0000B6BA                            Obj37_Loop:
0000B6BA 6100 0000                  		bsr.w	SingleObjLoad
0000B6BE 6600 0000                  		bne.w	Obj37_ResetCounter
0000B6C2                            
0000B6C2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B6C2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B6C6 5429 0024                  		addq.b	#2,$24(a1)
0000B6CA 137C 0008 0016             		move.b	#8,$16(a1)
0000B6D0 137C 0008 0017             		move.b	#8,$17(a1)
0000B6D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B6E2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B6EA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B6F0 137C 0004 0001             		move.b	#4,1(a1)
0000B6F6 137C 0003 0018             		move.b	#3,$18(a1)
0000B6FC 137C 0047 0020             		move.b	#$47,$20(a1)
0000B702 137C 0008 0019             		move.b	#8,$19(a1)
0000B708 4A44                       		tst.w	d4
0000B70A 6B00                       		bmi.s	loc_9D62
0000B70C 3004                       		move.w	d4,d0
0000B70E 4EB8 2B7A                  		jsr	CalcSine
0000B712 3404                       		move.w	d4,d2
0000B714 E04A                       		lsr.w	#8,d2
0000B716 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B71A 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B71C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B720 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B724 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B726 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B728 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B72A                            
0000B72A                            @skiphalvingvel:
0000B72A E560                       		asl.w	d2,d0
0000B72C E561                       		asl.w	d2,d1
0000B72E 3400                       		move.w	d0,d2
0000B730 3601                       		move.w	d1,d3
0000B732 0604 0010                  		addi.b	#$10,d4
0000B736 6400                       		bcc.s	loc_9D62
0000B738 0444 0080                  		subi.w	#$80,d4
0000B73C 6400                       		bcc.s	loc_9D62
0000B73E 383C 0288                  		move.w	#$288,d4
0000B742                            
0000B742                            loc_9D62:
0000B742 3342 0010                  		move.w	d2,$10(a1)
0000B746 3343 0012                  		move.w	d3,$12(a1)
0000B74A 4442                       		neg.w	d2
0000B74C 4444                       		neg.w	d4
0000B74E 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B752                            
0000B752                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B752 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B758 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B75E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B764 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B766 1140 001F                          move.b  d0,$1F(a0)       ; Move d0 to new timer
0000B76A 11C0 FEC6                          move.b  d0,($FFFFFEC6).w      ; Move d0 to old timer (for animated purposes)
0000B76E 303C 00C6                  		move.w	#$C6,d0
0000B772 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B778                            
0000B778                            Obj37_Bounce:				; XREF: Obj37_Index
0000B778 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B77E 6100 0000                  		bsr.w	SpeedToPos
0000B782 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B788 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B78C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B78E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B792 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B796 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B798 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B79E                            
0000B79E                            @skipbounceslow:
0000B79E 6B00                       		bmi.s	Obj37_ChkDel
0000B7A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B7A4 D007                       		add.b	d7,d0
0000B7A6 0200 0003                  		andi.b	#3,d0
0000B7AA 6600                       		bne.s	Obj37_ChkDel
0000B7AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000B7B2 4A41                       		tst.w	d1
0000B7B4 6A00                       		bpl.s	Obj37_ChkDel
0000B7B6 D368 000C                  		add.w	d1,$C(a0)
0000B7BA 3028 0012                  		move.w	$12(a0),d0
0000B7BE E440                       		asr.w	#2,d0
0000B7C0 9168 0012                  		sub.w	d0,$12(a0)
0000B7C4 4468 0012                  		neg.w	$12(a0)
0000B7C8                            
0000B7C8                            Obj37_ChkDel:
0000B7C8 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B7CC 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B7D0 0C78 FF00 F72C                     cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B7D6 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B7DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B7DE 0640 00E0                  		addi.w	#$E0,d0
0000B7E2 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000B7E6 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000B7E8                            ;Mercury Lost Rings Flash
0000B7E8 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000B7EE 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000B7F2 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000B7F8 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000B7FC 4E75                       		rts
0000B7FE                            ;end Lost Rings Flash
0000B7FE                            ; ===========================================================================
0000B7FE                            
0000B7FE                            Obj37_Collect:				; XREF: Obj37_Index
0000B7FE 5428 0024                  		addq.b	#2,$24(a0)
0000B802 117C 0000 0020             		move.b	#0,$20(a0)
0000B808 117C 0001 0018             		move.b	#1,$18(a0)
0000B80E 6100 FE3A                  		bsr.w	CollectRing
0000B812                            
0000B812                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B812 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B818 6100 0000                  		bsr.w	AnimateSprite
0000B81C 6000 0000                  		bra.w	DisplaySprite
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj37_Delete:				; XREF: Obj37_Index
0000B820 6000 0000                  		bra.w	DeleteObject
0000B824                            ; ===========================================================================
0000B824                            ; ---------------------------------------------------------------------------
0000B824                            ; Object 4B - giant ring for entry to special stage
0000B824                            ; ---------------------------------------------------------------------------
0000B824                            
0000B824                            Obj4B:					; XREF: Obj_Index
0000B824 7000                       		moveq	#0,d0
0000B826 1028 0024                  		move.b	$24(a0),d0
0000B82A 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B82E 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B832                            ; ===========================================================================
0000B832 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B834 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B836 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B838 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            Obj4B_Main:				; XREF: Obj4B_Index
0000B83A 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B842 317C 2400 0002             		move.w	#$2400,2(a0)
0000B848 0028 0004 0001             		ori.b	#4,1(a0)
0000B84E 117C 0040 0019             		move.b	#$40,$19(a0)
0000B854 4A28 0001                  		tst.b	1(a0)
0000B858 6A00                       		bpl.s	Obj4B_Animate
0000B85A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B860 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B864 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B86A 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B86C 4E75                       		rts	
0000B86E                            ; ===========================================================================
0000B86E                            
0000B86E                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B86E 5428 0024                  		addq.b	#2,$24(a0)
0000B872 117C 0002 0018             		move.b	#2,$18(a0)
0000B878 117C 0052 0020             		move.b	#$52,$20(a0)
0000B87E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B884                            
0000B884                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B884 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B88A 3028 0008                  		move.w	8(a0),d0
0000B88E 0240 FF80                  		andi.w	#$FF80,d0
0000B892 3238 F700                  		move.w	($FFFFF700).w,d1
0000B896 0441 0080                  		subi.w	#$80,d1
0000B89A 0241 FF80                  		andi.w	#$FF80,d1
0000B89E 9041                       		sub.w	d1,d0
0000B8A0 0C40 0280                  		cmpi.w	#$280,d0
0000B8A4 6200 0000                  		bhi.w	DeleteObject
0000B8A8 6000 0000                  		bra.w	DisplaySprite
0000B8AC                            ; ===========================================================================
0000B8AC                            
0000B8AC                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B8AC 5528 0024                  		subq.b	#2,$24(a0)
0000B8B0 117C 0000 0020             		move.b	#0,$20(a0)
0000B8B6 6100 0000                  		bsr.w	SingleObjLoad
0000B8BA 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B8BE 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B8C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B8CE 2348 003C                  		move.l	a0,$3C(a1)
0000B8D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B8D6 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B8DA 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B8DC 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B8E2                            
0000B8E2                            Obj4B_PlaySnd:
0000B8E2 303C 00C3                  		move.w	#$C3,d0
0000B8E6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B8EC 6096                       		bra.s	Obj4B_Animate
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B8EE 6000 0000                  		bra.w	DeleteObject
0000B8F2                            ; ===========================================================================
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            ; Object 7C - flash effect when	you collect the	giant ring
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            
0000B8F2                            Obj7C:					; XREF: Obj_Index
0000B8F2 7000                       		moveq	#0,d0
0000B8F4 1028 0024                  		move.b	$24(a0),d0
0000B8F8 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B8FC 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B900                            ; ===========================================================================
0000B900 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B902 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B904 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B906                            ; ===========================================================================
0000B906                            
0000B906                            Obj7C_Main:				; XREF: Obj7C_Index
0000B906 5428 0024                  		addq.b	#2,$24(a0)
0000B90A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B912 317C 2462 0002             		move.w	#$2462,2(a0)
0000B918 0028 0004 0001             		ori.b	#4,1(a0)
0000B91E 117C 0000 0018             		move.b	#0,$18(a0)
0000B924 117C 0020 0019             		move.b	#$20,$19(a0)
0000B92A 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B930                            
0000B930                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B930 6100                       		bsr.s	Obj7C_Collect
0000B932 3028 0008                  		move.w	8(a0),d0
0000B936 0240 FF80                  		andi.w	#$FF80,d0
0000B93A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B93E 0441 0080                  		subi.w	#$80,d1
0000B942 0241 FF80                  		andi.w	#$FF80,d1
0000B946 9041                       		sub.w	d1,d0
0000B948 0C40 0280                  		cmpi.w	#$280,d0
0000B94C 6200 0000                  		bhi.w	DeleteObject
0000B950 6000 0000                  		bra.w	DisplaySprite
0000B954                            
0000B954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B954                            
0000B954                            
0000B954                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B954 5328 001E                  		subq.b	#1,$1E(a0)
0000B958 6A00                       		bpl.s	locret_9F76
0000B95A 117C 0001 001E             		move.b	#1,$1E(a0)
0000B960 5228 001A                  		addq.b	#1,$1A(a0)
0000B964 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B96A 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B96C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B972 6600                       		bne.s	locret_9F76	; if not, branch
0000B974 2268 003C                  		movea.l	$3C(a0),a1
0000B978 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B97E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B984 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B98A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B98E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B992                            
0000B992                            locret_9F76:
0000B992 4E75                       		rts	
0000B994                            ; ===========================================================================
0000B994                            
0000B994                            Obj7C_End:				; XREF: Obj7C_Collect
0000B994 5428 0024                  		addq.b	#2,$24(a0)
0000B998 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B99E 588F                       		addq.l	#4,sp
0000B9A0 4E75                       		rts	
0000B9A2                            ; End of function Obj7C_Collect
0000B9A2                            
0000B9A2                            ; ===========================================================================
0000B9A2                            
0000B9A2                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B9A2 6000 0000                  		bra.w	DeleteObject
0000B9A6                            ; ===========================================================================
0000B9A6                            Ani_obj25:
0000B9A6                            	include "_anim\obj25.asm"
0000B9A6                            ; ---------------------------------------------------------------------------
0000B9A6                            ; Animation script - ring
0000B9A6                            ; ---------------------------------------------------------------------------
0000B9A6 0000                       		dc.w byte_9F8C-Ani_obj25
0000B9A8 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B9AE                            		even
0000B9AE                            		even
0000B9AE                            
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - rings
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            Map_obj25:
0000B9AE                            	include "_maps\obj25.asm"
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - rings
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B9B2 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B9B6 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B9BA 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B9BE 01                         byte_9FA2:	dc.b 1
0000B9BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B9C4 01                         byte_9FA8:	dc.b 1
0000B9C5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B9CA 01                         byte_9FAE:	dc.b 1
0000B9CB F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B9D0 01                         byte_9FB4:	dc.b 1
0000B9D1 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B9D6 01                         byte_9FBA:	dc.b 1
0000B9D7 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B9DC 01                         byte_9FC0:	dc.b 1
0000B9DD F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B9E2 01                         byte_9FC6:	dc.b 1
0000B9E3 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B9E8 01                         byte_9FCC:	dc.b 1
0000B9E9 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B9EE                            		even
0000B9EE                            		even
0000B9EE                            
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            ; Sprite mappings - giant ring
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            Map_obj4B:
0000B9EE                            	include "_maps\obj4B.asm"
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE                            ; Sprite mappings - giant ring
0000B9EE                            ; ---------------------------------------------------------------------------
0000B9EE 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B9F2 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B9F6 0A                         byte_9FDA:	dc.b $A
0000B9F7 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B9FC E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BA01 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BA06 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BA0B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BA10 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BA15 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BA1A 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BA1F 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BA24 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BA29 08                         byte_A00D:	dc.b 8
0000BA2A E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000BA2F E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BA34 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BA39 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BA3E F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BA43 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BA48 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BA4D 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BA52 04                         byte_A036:	dc.b 4
0000BA53 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000BA58 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BA5D 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BA62 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BA67 08                         byte_A04B:	dc.b 8
0000BA68 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000BA6D E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BA72 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BA77 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BA7C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BA81 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BA86 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BA8B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BA90                            		even
0000BA90                            		even
0000BA90                            
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            Map_obj7C:
0000BA90                            	include "_maps\obj7C.asm"
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA90                            ; ---------------------------------------------------------------------------
0000BA90 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000BA94 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000BA98 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000BA9C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000BAA0 02                         byte_A084:	dc.b 2
0000BAA1 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BAA6 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BAAB 04                         byte_A08F:	dc.b 4
0000BAAC E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BAB1 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BAB6 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BABB 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BAC0 04                         byte_A0A4:	dc.b 4
0000BAC1 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BAC6 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BACB 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BAD0 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BAD5 04                         byte_A0B9:	dc.b 4
0000BAD6 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BADB E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BAE0 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BAE5 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BAEA 04                         byte_A0CE:	dc.b 4
0000BAEB E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BAF0 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BAF5 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BAFA 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BAFF 04                         byte_A0E3:	dc.b 4
0000BB00 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BB05 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BB0A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BB0F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BB14 02                         byte_A0F8:	dc.b 2
0000BB15 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BB1A 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BB1F 04                         byte_A103:	dc.b 4
0000BB20 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BB25 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BB2A 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BB2F 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BB34                            		even
0000BB34                            		even
0000BB34                            
0000BB34                            ; ===========================================================================
0000BB34                            ; ---------------------------------------------------------------------------
0000BB34                            ; Object 26 - monitors
0000BB34                            ; ---------------------------------------------------------------------------
0000BB34                            
0000BB34                            Obj26:					; XREF: Obj_Index
0000BB34 7000                       		moveq	#0,d0
0000BB36 1028 0024                  		move.b	$24(a0),d0
0000BB3A 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000BB3E 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000BB42                            ; ===========================================================================
0000BB42 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000BB44 0000                       		dc.w Obj26_Solid-Obj26_Index
0000BB46 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000BB48 0000                       		dc.w Obj26_Animate-Obj26_Index
0000BB4A 0000                       		dc.w Obj26_Display-Obj26_Index
0000BB4C                            ; ===========================================================================
0000BB4C                            
0000BB4C                            Obj26_Main:				; XREF: Obj26_Index
0000BB4C 5428 0024                  		addq.b	#2,$24(a0)
0000BB50 117C 000E 0016             		move.b	#$E,$16(a0)
0000BB56 117C 000E 0017             		move.b	#$E,$17(a0)
0000BB5C 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000BB64 317C 0680 0002             		move.w	#$680,2(a0)
0000BB6A 117C 0004 0001             		move.b	#4,1(a0)
0000BB70 117C 0003 0018             		move.b	#3,$18(a0)
0000BB76 117C 000F 0019             		move.b	#$F,$19(a0)
0000BB7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BB80 7000                       		moveq	#0,d0
0000BB82 1028 0023                  		move.b	$23(a0),d0
0000BB86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BB8C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BB92 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000BB94 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000BB9A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000BBA0 4E75                       		rts	
0000BBA2                            ; ===========================================================================
0000BBA2                            
0000BBA2                            Obj26_NotBroken:			; XREF: Obj26_Main
0000BBA2 117C 0046 0020             		move.b	#$46,$20(a0)
0000BBA8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000BBAE                            
0000BBAE                            Obj26_Solid:				; XREF: Obj26_Index
0000BBAE 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000BBB2 6700                       		beq.s	loc_A1EC	; if not, branch
0000BBB4 5500                       		subq.b	#2,d0
0000BBB6 6600                       		bne.s	Obj26_Fall
0000BBB8 7200                       		moveq	#0,d1
0000BBBA 1228 0019                  		move.b	$19(a0),d1
0000BBBE 0641 000B                  		addi.w	#$B,d1
0000BBC2 6100 D3F2                  		bsr.w	ExitPlatform
0000BBC6 0829 0003 0022             		btst	#3,$22(a1)
0000BBCC 6600 0000                  		bne.w	loc_A1BC
0000BBD0 4228 0025                  		clr.b	$25(a0)
0000BBD4 6000 0000                  		bra.w	Obj26_Animate
0000BBD8                            ; ===========================================================================
0000BBD8                            
0000BBD8                            loc_A1BC:				; XREF: Obj26_Solid
0000BBD8 363C 0010                  		move.w	#$10,d3
0000BBDC 3428 0008                  		move.w	8(a0),d2
0000BBE0 6100 D932                  		bsr.w	MvSonicOnPtfm
0000BBE4 6000 0000                  		bra.w	Obj26_Animate
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj26_Fall:				; XREF: Obj26_Solid
0000BBE8 6100 0000                  		bsr.w	ObjectFall
0000BBEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000BBF2 4A41                       		tst.w	d1
0000BBF4 6A00 0000                  		bpl.w	Obj26_Animate
0000BBF8 D368 000C                  		add.w	d1,$C(a0)
0000BBFC 4268 0012                  		clr.w	$12(a0)
0000BC00 4228 0025                  		clr.b	$25(a0)
0000BC04 6000 0000                  		bra.w	Obj26_Animate
0000BC08                            ; ===========================================================================
0000BC08                            
0000BC08                            loc_A1EC:				; XREF: Obj26_Solid
0000BC08 323C 001A                  		move.w	#$1A,d1
0000BC0C 343C 000F                  		move.w	#$F,d2
0000BC10 6100 0000                  		bsr.w	Obj26_SolidSides
0000BC14 6700 0000                  		beq.w	loc_A25C
0000BC18 4A29 003A                  		tst.b	$3A(a1)
0000BC1C 6600                       		bne.s	loc_A25C
0000BC1E 4A41                       		tst.w	d1
0000BC20 6A00                       		bpl.s	loc_A220
0000BC22 9769 000C                  		sub.w	d3,$C(a1)
0000BC26 6100 D27C                  		bsr.w	loc_74AE
0000BC2A 117C 0002 0025             		move.b	#2,$25(a0)
0000BC30 6000 0000                  		bra.w	Obj26_Animate
0000BC34                            ; ===========================================================================
0000BC34                            
0000BC34                            loc_A220:
0000BC34 4A40                       		tst.w	d0
0000BC36 6700 0000                  		beq.w	loc_A246
0000BC3A 6B00                       		bmi.s	loc_A230
0000BC3C 4A69 0010                  		tst.w	$10(a1)
0000BC40 6B00                       		bmi.s	loc_A246
0000BC42 6000                       		bra.s	loc_A236
0000BC44                            ; ===========================================================================
0000BC44                            
0000BC44                            loc_A230:
0000BC44 4A69 0010                  		tst.w	$10(a1)
0000BC48 6A00                       		bpl.s	loc_A246
0000BC4A                            
0000BC4A                            loc_A236:
0000BC4A 9169 0008                  		sub.w	d0,8(a1)
0000BC4E 337C 0000 0014             		move.w	#0,$14(a1)
0000BC54 337C 0000 0010             		move.w	#0,$10(a1)
0000BC5A                            
0000BC5A                            loc_A246:
0000BC5A 0829 0001 0022             		btst	#1,$22(a1)
0000BC60 6600                       		bne.s	loc_A26A
0000BC62 08E9 0005 0022             		bset	#5,$22(a1)
0000BC68 08E8 0005 0022             		bset	#5,$22(a0)
0000BC6E 6000                       		bra.s	Obj26_Animate
0000BC70                            ; ===========================================================================
0000BC70                            
0000BC70                            loc_A25C:
0000BC70 0828 0005 0022             		btst	#5,$22(a0)
0000BC76 6700                       		beq.s	Obj26_Animate
0000BC78 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000BC7E 6700                       		beq.s	loc_A26A
0000BC80 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000BC86 6700                       		beq.s	loc_A26A
0000BC88 337C 0001 001C             		move.w	#1,$1C(a1)
0000BC8E                            
0000BC8E                            loc_A26A:
0000BC8E 08A8 0005 0022             		bclr	#5,$22(a0)
0000BC94 08A9 0005 0022             		bclr	#5,$22(a1)
0000BC9A                            
0000BC9A                            Obj26_Animate:				; XREF: Obj26_Index
0000BC9A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BCA0 6100 0000                  		bsr.w	AnimateSprite
0000BCA4                            
0000BCA4                            Obj26_Display:				; XREF: Obj26_Index
0000BCA4 6100 0000                  		bsr.w	DisplaySprite
0000BCA8 3028 0008                  		move.w	8(a0),d0
0000BCAC 0240 FF80                  		andi.w	#$FF80,d0
0000BCB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCB4 0441 0080                  		subi.w	#$80,d1
0000BCB8 0241 FF80                  		andi.w	#$FF80,d1
0000BCBC 9041                       		sub.w	d1,d0
0000BCBE 0C40 0280                  		cmpi.w	#$280,d0
0000BCC2 6200 0000                  		bhi.w	DeleteObject
0000BCC6 4E75                       		rts	
0000BCC8                            ; ===========================================================================
0000BCC8                            
0000BCC8                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BCC8 5428 0024                  		addq.b	#2,$24(a0)
0000BCCC 117C 0000 0020             		move.b	#0,$20(a0)
0000BCD2 6100 0000                  		bsr.w	SingleObjLoad
0000BCD6 6600                       		bne.s	Obj26_Explode
0000BCD8 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BCDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCE8 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BCEE                            
0000BCEE                            Obj26_Explode:
0000BCEE 6100 0000                  		bsr.w	SingleObjLoad
0000BCF2 6600                       		bne.s	Obj26_SetBroken
0000BCF4 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BCF8 5429 0024                  		addq.b	#2,$24(a1)
0000BCFC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD02 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BD08                            
0000BD08                            Obj26_SetBroken:
0000BD08 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BD0C 7000                       		moveq	#0,d0
0000BD0E 1028 0023                  		move.b	$23(a0),d0
0000BD12 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BD18 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BD1E 6000 0000                  		bra.w	DisplaySprite
0000BD22                            ; ===========================================================================
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            ; Object 2E - contents of monitors
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            
0000BD22                            Obj2E:					; XREF: Obj_Index
0000BD22 7000                       		moveq	#0,d0
0000BD24 1028 0024                  		move.b	$24(a0),d0
0000BD28 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BD2C 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BD30 6000 0000                  		bra.w	DisplaySprite
0000BD34                            ; ===========================================================================
0000BD34 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BD36 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BD38 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            Obj2E_Main:				; XREF: Obj2E_Index
0000BD3A 5428 0024                  		addq.b	#2,$24(a0)
0000BD3E 317C 0680 0002             		move.w	#$680,2(a0)
0000BD44 117C 0024 0001             		move.b	#$24,1(a0)
0000BD4A 117C 0003 0018             		move.b	#3,$18(a0)
0000BD50 117C 0008 0019             		move.b	#8,$19(a0)
0000BD56 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BD5C 7000                       		moveq	#0,d0
0000BD5E 1028 001C                  		move.b	$1C(a0),d0
0000BD62 5400                       		addq.b	#2,d0
0000BD64 1140 001A                  		move.b	d0,$1A(a0)
0000BD68 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BD6E D000                       		add.b	d0,d0
0000BD70 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BD74 5249                       		addq.w	#1,a1
0000BD76 2149 0004                  		move.l	a1,4(a0)
0000BD7A                            
0000BD7A                            Obj2E_Move:				; XREF: Obj2E_Index
0000BD7A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000BD7E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000BD82 6100 0000                  		bsr.w	SpeedToPos
0000BD86 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000BD8C 4E75                       		rts	
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000BD8E 5428 0024                          addq.b    #2,$24(a0)
0000BD92 317C 001D 001E                     move.w    #29,$1E(a0)
0000BD98 1028 001C                          move.b    $1C(a0),d0
0000BD9C 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000BDA0 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000BDA2 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000BDA4 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000BDA6 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000BDAA 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000BDB0 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000BDB2 4E75                               rts ; The Eggman monitor now does something!
0000BDB4                            ; ===========================================================================
0000BDB4                            
0000BDB4                            Obj2E_ChkSonic:
0000BDB4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BDB8 6600                       		bne.s	Obj2E_ChkShoes
0000BDBA                            
0000BDBA                            ExtraLife:
0000BDBA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BDBE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BDC2 303C 0088                  		move.w	#$88,d0
0000BDC6 4EF9 0000 12C6             		jmp	(PlaySound).l	; play extra life music
0000BDCC                            ; ===========================================================================
0000BDCC                            
0000BDCC                            Obj2E_ChkShoes:
0000BDCC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BDD0 6600                       		bne.s	Obj2E_ChkShield
0000BDD2 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BDD8                            
0000BDD8 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; am I already speed shoe'd?
0000BDDC 6600                       		bne.s	Obj2E_NoShoes	; if so, branch
0000BDDE 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000BDE4                            		
0000BDE4                            Obj2E_NoShoes:
0000BDE4 4E75                       		rts
0000BDE6                            ; ===========================================================================
0000BDE6                            
0000BDE6                            Obj2E_ChkShield:
0000BDE6 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BDEA 6600                       		bne.s	Obj2E_ChkInvinc
0000BDEC 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BDF2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BDF8 303C 00AF                  		move.w	#$AF,d0
0000BDFC 4EF9 0000 12C6             		jmp	(PlaySound).l	; play shield sound
0000BE02                            ; ===========================================================================
0000BE02                            
0000BE02                            Obj2E_ChkInvinc:
0000BE02 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BE06 6600 0000                  		bne.w	Obj2E_ChkRings
0000BE0A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BE10                            
0000BE10 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; am I already invincible?
0000BE14 6600                       		bne.s	Obj2E_NoInv		; if so, branch
0000BE16                            
0000BE16 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BE1C                            
0000BE1C 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BE22 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BE28 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BE2E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BE34 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BE3A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BE40 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BE46 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BE4C                            		
0000BE4C                            Obj2E_NoInv:
0000BE4C 4E75                       		rts	
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            Obj2E_ChkRings:
0000BE4E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BE52 6600                       		bne.s	Obj2E_ChkS
0000BE54 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BE5A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BE60 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BE66 6500                       		bcs.s	Obj2E_RingSound
0000BE68 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BE6E 6700 FF4A                  		beq.w	ExtraLife
0000BE72 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BE78 6500                       		bcs.s	Obj2E_RingSound
0000BE7A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BE80 6700 FF38                  		beq.w	ExtraLife
0000BE84                            
0000BE84                            Obj2E_RingSound:
0000BE84 303C 00B5                  		move.w	#$B5,d0
0000BE88 4EF9 0000 12C6             		jmp	(PlaySound).l	; play ring sound
0000BE8E                            ; ===========================================================================
0000BE8E                            
0000BE8E                            Obj2E_ChkS:
0000BE8E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000BE92 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code
0000BE96 4E71                       		nop
0000BE98                            
0000BE98                            Obj2E_ChkGoggles:	
0000BE98 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000BE9C 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000BEA0 4E71                       		nop
0000BEA2                            
0000BEA2                            Obj2E_ChkEnd:
0000BEA2 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BEA4                            ; ===========================================================================
0000BEA4                            
0000BEA4                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BEA4 5368 001E                  		subq.w	#1,$1E(a0)
0000BEA8 6B00 0000                  		bmi.w	DeleteObject
0000BEAC 4E75                       		rts	
0000BEAE                            ; ---------------------------------------------------------------------------
0000BEAE                            ; Subroutine to	make the sides of a monitor solid
0000BEAE                            ; ---------------------------------------------------------------------------
0000BEAE                            
0000BEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEAE                            
0000BEAE                            
0000BEAE                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BEAE 43F8 D000                  		lea	($FFFFD000).w,a1
0000BEB2 3029 0008                  		move.w	8(a1),d0
0000BEB6 9068 0008                  		sub.w	8(a0),d0
0000BEBA D041                       		add.w	d1,d0
0000BEBC 6B00                       		bmi.s	loc_A4E6
0000BEBE 3601                       		move.w	d1,d3
0000BEC0 D643                       		add.w	d3,d3
0000BEC2 B043                       		cmp.w	d3,d0
0000BEC4 6200                       		bhi.s	loc_A4E6
0000BEC6 1629 0016                  		move.b	$16(a1),d3
0000BECA 4883                       		ext.w	d3
0000BECC D443                       		add.w	d3,d2
0000BECE 3629 000C                  		move.w	$C(a1),d3
0000BED2 9668 000C                  		sub.w	$C(a0),d3
0000BED6 D642                       		add.w	d2,d3
0000BED8 6B00                       		bmi.s	loc_A4E6
0000BEDA D442                       		add.w	d2,d2
0000BEDC B642                       		cmp.w	d2,d3
0000BEDE 6400                       		bcc.s	loc_A4E6
0000BEE0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BEE4 6B00                       		bmi.s	loc_A4E6
0000BEE6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BEEC 6400                       		bcc.s	loc_A4E6
0000BEEE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BEF2 6600                       		bne.s	loc_A4E6
0000BEF4 B240                       		cmp.w	d0,d1
0000BEF6 6400                       		bcc.s	loc_A4DC
0000BEF8 D241                       		add.w	d1,d1
0000BEFA 9041                       		sub.w	d1,d0
0000BEFC                            
0000BEFC                            loc_A4DC:
0000BEFC 0C43 0010                  		cmpi.w	#$10,d3
0000BF00 6500                       		bcs.s	loc_A4EA
0000BF02                            
0000BF02                            loc_A4E2:
0000BF02 7201                       		moveq	#1,d1
0000BF04 4E75                       		rts	
0000BF06                            ; ===========================================================================
0000BF06                            
0000BF06                            loc_A4E6:
0000BF06 7200                       		moveq	#0,d1
0000BF08 4E75                       		rts	
0000BF0A                            ; ===========================================================================
0000BF0A                            
0000BF0A                            loc_A4EA:
0000BF0A 7200                       		moveq	#0,d1
0000BF0C 1228 0019                  		move.b	$19(a0),d1
0000BF10 5841                       		addq.w	#4,d1
0000BF12 3401                       		move.w	d1,d2
0000BF14 D442                       		add.w	d2,d2
0000BF16 D269 0008                  		add.w	8(a1),d1
0000BF1A 9268 0008                  		sub.w	8(a0),d1
0000BF1E 6BE2                       		bmi.s	loc_A4E2
0000BF20 B242                       		cmp.w	d2,d1
0000BF22 64DE                       		bcc.s	loc_A4E2
0000BF24 72FF                       		moveq	#-1,d1
0000BF26 4E75                       		rts	
0000BF28                            ; End of function Obj26_SolidSides
0000BF28                            
0000BF28                            ; ===========================================================================
0000BF28                            Ani_obj26:
0000BF28                            	include "_anim\obj26.asm"
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Animation script - monitors
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000BF2E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000BF34 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000BF3A 0000                       		dc.w byte_A582-Ani_obj26
0000BF3C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000BF42 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000BF4E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000BF5A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000BF66 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000BF72 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000BF7E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000BF8A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BF96 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BFA2 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BFAA                            		even
0000BFAA                            		even
0000BFAA                            
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Sprite mappings - monitors
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            Map_obj26:
0000BFAA                            	include "_maps\obj26.asm"
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Sprite mappings - monitors
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000BFAE 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000BFB2 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000BFB6 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000BFBA 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000BFBE 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000BFC2 01                         byte_A5A2:	dc.b 1			; static monitor
0000BFC3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFC8 02                         byte_A5A8:	dc.b 2			; static monitor
0000BFC9 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000BFCE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFD3 02                         byte_A5B3:	dc.b 2			; static monitor
0000BFD4 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000BFD9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFDE 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000BFDF F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000BFE4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFE9 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000BFEA F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000BFEF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFF4 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000BFF5 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000BFFA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFFF 02                         byte_A5DF:	dc.b 2			; shield monitor
0000C000 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000C005 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C00A 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000C00B F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000C010 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C015 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000C016 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000C01B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C020 02                         byte_A600:	dc.b 2			; 'S' monitor
0000C021 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000C026 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C02B 02                         byte_A60B:	dc.b 2			; goggles monitor
0000C02C F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000C031 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C036 01                         byte_A616:	dc.b 1			; broken monitor
0000C037 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000C03C                            		even
0000C03C                            		even
0000C03C                            
0000C03C                            ; ===========================================================================
0000C03C                            ; ---------------------------------------------------------------------------
0000C03C                            ; Object 0E - Sonic on the title screen
0000C03C                            ; ---------------------------------------------------------------------------
0000C03C                            
0000C03C                            Obj0E:					; XREF: Obj_Index
0000C03C 7000                       		moveq	#0,d0
0000C03E 1028 0024                  		move.b	$24(a0),d0
0000C042 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000C046 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000C04A                            ; ===========================================================================
0000C04A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000C04C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000C04E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000C050 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            Obj0E_Main:				; XREF: Obj0E_Index
0000C052 5428 0024                  		addq.b	#2,$24(a0)
0000C056 317C 00F0 0008             		move.w	#$F0,8(a0)
0000C05C 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000C062 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000C06A 317C 2300 0002             		move.w	#$2300,2(a0)
0000C070 117C 0001 0018             		move.b	#1,$18(a0)
0000C076 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000C07C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C082 6100 0000                  		bsr.w	AnimateSprite
0000C086                            
0000C086                            Obj0E_Delay:				; XREF: Obj0E_Index
0000C086 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000C08A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000C08C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000C090 6000 0000                  		bra.w	DisplaySprite
0000C094                            ; ===========================================================================
0000C094                            
0000C094                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000C094 4E75                       		rts	
0000C096                            ; ===========================================================================
0000C096                            
0000C096                            Obj0E_Move:				; XREF: Obj0E_Index
0000C096 5168 000A                  		subq.w	#8,$A(a0)
0000C09A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000C0A0 6600                       		bne.s	Obj0E_Display
0000C0A2 5428 0024                  		addq.b	#2,$24(a0)
0000C0A6                            
0000C0A6                            Obj0E_Display:
0000C0A6 6000 0000                  		bra.w	DisplaySprite
0000C0AA                            ; ===========================================================================
0000C0AA 4E75                       		rts	
0000C0AC                            ; ===========================================================================
0000C0AC                            
0000C0AC                            Obj0E_Animate:				; XREF: Obj0E_Index
0000C0AC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C0B2 6100 0000                  		bsr.w	AnimateSprite
0000C0B6 6000 0000                  		bra.w	DisplaySprite
0000C0BA                            ; ===========================================================================
0000C0BA 4E75                       		rts	
0000C0BC                            ; ===========================================================================
0000C0BC                            ; ---------------------------------------------------------------------------
0000C0BC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C0BC                            ; ---------------------------------------------------------------------------
0000C0BC                            
0000C0BC                            Obj0F:					; XREF: Obj_Index
0000C0BC 7000                       		moveq	#0,d0
0000C0BE 1028 0024                  		move.b	$24(a0),d0
0000C0C2 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C0C6 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C0CA 6000 0000                  		bra.w	DisplaySprite
0000C0CE                            ; ===========================================================================
0000C0CE 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000C0D0 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000C0D2 0000                       		dc.w locret_A6F8-Obj0F_Index
0000C0D4                            ; ===========================================================================
0000C0D4                            
0000C0D4                            Obj0F_Main:				; XREF: Obj0F_Index
0000C0D4 5428 0024                  		addq.b	#2,$24(a0)
0000C0D8 317C 00D0 0008             		move.w	#$D0,8(a0)
0000C0DE 317C 0130 000A             		move.w	#$130,$A(a0)
0000C0E4 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000C0EC 317C 0200 0002             		move.w	#$200,2(a0)
0000C0F2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000C0F8 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000C0FA 5428 0024                  		addq.b	#2,$24(a0)
0000C0FE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000C104 6600                       		bne.s	locret_A6F8	; if not, branch
0000C106 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000C10C 317C 0170 0008             		move.w	#$170,8(a0)
0000C112 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000C118                            
0000C118                            locret_A6F8:				; XREF: Obj0F_Index
0000C118 4E75                       		rts	
0000C11A                            ; ===========================================================================
0000C11A                            
0000C11A                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000C11A 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000C120 6000 0000                  		bra.w	AnimateSprite
0000C124                            ; ===========================================================================
0000C124                            Ani_obj0E:
0000C124                            	include "_anim\obj0E.asm"
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Animation script - Sonic on the title screen
0000C124                            ; ---------------------------------------------------------------------------
0000C124 0000                       		dc.w byte_A706-Ani_obj0E
0000C126 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000C132                            		even
0000C132                            		even
0000C132                            
0000C132                            Ani_obj0F:
0000C132                            	include "_anim\obj0F.asm"
0000C132                            ; ---------------------------------------------------------------------------
0000C132                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C132                            ; ---------------------------------------------------------------------------
0000C132 0000                       		dc.w byte_A714-Ani_obj0F
0000C134 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000C138                            		even
0000C138                            		even
0000C138                            
0000C138                            ; ---------------------------------------------------------------------------
0000C138                            ; Subroutine to	animate	a sprite using an animation script
0000C138                            ; ---------------------------------------------------------------------------
0000C138                            
0000C138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C138                            
0000C138                            
0000C138                            AnimateSprite:
0000C138 7000                       		moveq	#0,d0
0000C13A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000C13E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000C142 6700                       		beq.s	Anim_Run	; if not, branch
0000C144 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000C148 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C14E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000C154                            
0000C154                            Anim_Run:
0000C154 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000C158 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C15A D040                       		add.w	d0,d0
0000C15C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C160 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000C164 7200                       		moveq	#0,d1
0000C166 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000C16A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C16E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C170                            
0000C170                            Anim_Next:
0000C170 1200                       		move.b	d0,d1
0000C172 0200 001F                  		andi.b	#$1F,d0
0000C176 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000C17A 1028 0022                  		move.b	$22(a0),d0
0000C17E E719                       		rol.b	#3,d1
0000C180 B101                       		eor.b	d0,d1
0000C182 0201 0003                  		andi.b	#3,d1
0000C186 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000C18C 8328 0001                  		or.b	d1,1(a0)
0000C190 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000C194                            
0000C194                            Anim_Wait:
0000C194 4E75                       		rts	
0000C196                            ; ===========================================================================
0000C196                            
0000C196                            Anim_End_FF:
0000C196 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C198 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C19A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000C1A0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C1A4 60CA                       		bra.s	Anim_Next
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Anim_End_FE:
0000C1A6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C1A8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C1AA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C1AE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000C1B2 9200                       		sub.b	d0,d1
0000C1B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C1B8 60B6                       		bra.s	Anim_Next
0000C1BA                            ; ===========================================================================
0000C1BA                            
0000C1BA                            Anim_End_FD:
0000C1BA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C1BC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C1BE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000C1C4                            
0000C1C4                            Anim_End_FC:
0000C1C4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C1C6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C1C8 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000C1CC                            
0000C1CC                            Anim_End_FB:
0000C1CC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C1CE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C1D0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C1D6 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000C1DA                            
0000C1DA                            Anim_End_FA:
0000C1DA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C1DC 6600                       		bne.s	Anim_End	; if not, branch
0000C1DE 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000C1E2                            
0000C1E2                            Anim_End:
0000C1E2 4E75                       		rts	
0000C1E4                            ; End of function AnimateSprite
0000C1E4                            
0000C1E4                            ; ===========================================================================
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            Map_obj0F:
0000C1E4                            	include "_maps\obj0F.asm"
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1E4                            ; ---------------------------------------------------------------------------
0000C1E4 0000                       		dc.w byte_A7CD-Map_obj0F
0000C1E6 0000                       		dc.w byte_A7CC-Map_obj0F
0000C1E8 0000                       		dc.w byte_A7EB-Map_obj0F
0000C1EA 0000                       		dc.w byte_A882-Map_obj0F
0000C1EC 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000C1ED 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C1F2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C1F7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C1FC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C201 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C206 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C20B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000C20C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C211 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C216 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C21B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C220 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C225 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C22A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C22F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C234 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C239 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C23E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C243 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C248 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C24D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C252 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C257 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C25C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C261 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C266 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C26B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C270 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C275 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C27A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C27F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C284 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C289 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C28E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C293 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C298 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C29D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C2A2 01                         byte_A882:	dc.b 1			; "TM"
0000C2A3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C2A8                            		even
0000C2A8                            		even
0000C2A8                            
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            ; Sprite mappings - Sonic on the title screen
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            Map_obj0E:
0000C2A8                            	include "_maps\obj0E.asm"
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8                            ; Sprite mappings - Sonic on the title screen
0000C2A8                            ; ---------------------------------------------------------------------------
0000C2A8 0000                       		dc.w byte_A898-Map_obj0E
0000C2AA 0000                       		dc.w byte_A8CB-Map_obj0E
0000C2AC 0000                       		dc.w byte_A917-Map_obj0E
0000C2AE 0000                       		dc.w byte_A96D-Map_obj0E
0000C2B0 0000                       		dc.w byte_A9AF-Map_obj0E
0000C2B2 0000                       		dc.w byte_A9E7-Map_obj0E
0000C2B4 0000                       		dc.w byte_AA47-Map_obj0E
0000C2B6 0000                       		dc.w byte_AAB1-Map_obj0E
0000C2B8 0A                         byte_A898:	dc.b $A
0000C2B9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C2BE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C2C3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C2C8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C2CD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C2D2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C2D7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C2DC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C2E1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C2E6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C2EB 0F                         byte_A8CB:	dc.b $F
0000C2EC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C2F1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C2F6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C2FB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C300 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C305 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C30A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C30F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C314 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C319 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C31E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C323 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C328 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C32D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C332 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C337 11                         byte_A917:	dc.b $11
0000C338 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C33D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C342 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C347 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C34C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C351 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C356 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C35B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C360 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C365 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C36A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C36F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C374 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C379 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C37E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C383 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C388 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C38D 0D                         byte_A96D:	dc.b $D
0000C38E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C393 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C398 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C39D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C3A2 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C3A7 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C3AC 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C3B1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C3B6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C3BB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C3C0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C3C5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C3CA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C3CF 0B                         byte_A9AF:	dc.b $B
0000C3D0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C3D5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C3DA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C3DF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C3E4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C3E9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C3EE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C3F3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C3F8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C3FD 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C402 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C407 13                         byte_A9E7:	dc.b $13
0000C408 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C40D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C412 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C417 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C41C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C421 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C426 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C42B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C430 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C435 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C43A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C43F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C444 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C449 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C44E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C453 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C458 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C45D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C462 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C467 15                         byte_AA47:	dc.b $15
0000C468 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C46D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C472 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C477 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C47C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C481 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C486 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C48B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C490 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C495 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C49A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C49F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C4A4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C4A9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C4AE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C4B3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C4B8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C4BD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C4C2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C4C7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C4CC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C4D1 16                         byte_AAB1:	dc.b $16
0000C4D2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C4D7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C4DC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C4E1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C4E6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C4EB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C4F0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C4F5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C4FA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C4FF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C504 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C509 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C50E 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C513 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C518 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C51D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C522 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C527 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C52C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C531 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C536 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C53B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C540                            		even
0000C540                            		even
0000C540                            
0000C540                            ; ===========================================================================
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Object 2B - Chopper enemy (GHZ)
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            
0000C540                            Obj2B:					; XREF: Obj_Index
0000C540 7000                       		moveq	#0,d0
0000C542 1028 0024                  		move.b	$24(a0),d0
0000C546 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C54A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C54E 6000 0000                  		bra.w	MarkObjGone
0000C552                            ; ===========================================================================
0000C552 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C554 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C556                            ; ===========================================================================
0000C556                            
0000C556                            Obj2B_Main:				; XREF: Obj2B_Index
0000C556 5428 0024                  		addq.b	#2,$24(a0)
0000C55A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C562 317C 047B 0002             		move.w	#$47B,2(a0)
0000C568 117C 0004 0001             		move.b	#4,1(a0)
0000C56E 117C 0004 0018             		move.b	#4,$18(a0)
0000C574 117C 0009 0020             		move.b	#9,$20(a0)
0000C57A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C580 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C586 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C58C                            
0000C58C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C58C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C592 6100 FBA4                  		bsr.w	AnimateSprite
0000C596 6100 0000                  		bsr.w	SpeedToPos
0000C59A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C5A0 3028 0030                  		move.w	$30(a0),d0
0000C5A4 B068 000C                  		cmp.w	$C(a0),d0
0000C5A8 6400                       		bcc.s	Obj2B_ChgAni
0000C5AA 3140 000C                  		move.w	d0,$C(a0)
0000C5AE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C5B4                            
0000C5B4                            Obj2B_ChgAni:
0000C5B4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C5BA 0440 00C0                  		subi.w	#$C0,d0
0000C5BE B068 000C                  		cmp.w	$C(a0),d0
0000C5C2 6400                       		bcc.s	locret_ABB6
0000C5C4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C5CA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C5CE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C5D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C5D6                            
0000C5D6                            locret_ABB6:
0000C5D6 4E75                       		rts	
0000C5D8                            ; ===========================================================================
0000C5D8                            Ani_obj2B:
0000C5D8                            	include "_anim\obj2B.asm"
0000C5D8                            ; ---------------------------------------------------------------------------
0000C5D8                            ; Animation script - Chopper enemy
0000C5D8                            ; ---------------------------------------------------------------------------
0000C5D8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C5DA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C5DC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C5DE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C5E2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C5E6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C5EA 00                         		even
0000C5EA 00                         		even
0000C5EA                            
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            Map_obj2B:
0000C5EA                            	include "_maps\obj2B.asm"
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA 0000                       		dc.w byte_ABCE-Map_obj2B
0000C5EC 0000                       		dc.w byte_ABD4-Map_obj2B
0000C5EE 01                         byte_ABCE:	dc.b 1
0000C5EF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C5F4 01                         byte_ABD4:	dc.b 1
0000C5F5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C5FA                            		even
0000C5FA                            		even
0000C5FA                            
0000C5FA                            ; ===========================================================================
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            ; Object 2C - Jaws enemy (LZ)
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            
0000C5FA                            Obj2C:					; XREF: Obj_Index
0000C5FA 7000                       		moveq	#0,d0
0000C5FC 1028 0024                  		move.b	$24(a0),d0
0000C600 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C604 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C608                            ; ===========================================================================
0000C608 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C60A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C60C                            ; ===========================================================================
0000C60C                            
0000C60C                            Obj2C_Main:				; XREF: Obj2C_Index
0000C60C 5428 0024                  		addq.b	#2,$24(a0)
0000C610 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C618 317C 2486 0002             		move.w	#$2486,2(a0)
0000C61E 0028 0004 0001             		ori.b	#4,1(a0)
0000C624 117C 000A 0020             		move.b	#$A,$20(a0)
0000C62A 117C 0004 0018             		move.b	#4,$18(a0)
0000C630 117C 0010 0019             		move.b	#$10,$19(a0)
0000C636 7000                       		moveq	#0,d0
0000C638 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C63C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C63E 5340                       		subq.w	#1,d0
0000C640 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C644 3140 0032                  		move.w	d0,$32(a0)
0000C648 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C64E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C654 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C656 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C65A                            
0000C65A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C65A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C65E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C660 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C666 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C66A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C670 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C676                            
0000C676                            Obj2C_Animate:
0000C676 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C67C 6100 FABA                  		bsr.w	AnimateSprite
0000C680 6100 0000                  		bsr.w	SpeedToPos
0000C684 6000 0000                  		bra.w	MarkObjGone
0000C688                            ; ===========================================================================
0000C688                            Ani_obj2C:
0000C688                            	include "_anim\obj2C.asm"
0000C688                            ; ---------------------------------------------------------------------------
0000C688                            ; Animation script - Jaws enemy
0000C688                            ; ---------------------------------------------------------------------------
0000C688 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C68A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C690                            		even
0000C690                            		even
0000C690                            
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            ; Sprite mappings - Jaws enemy (LZ)
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            Map_obj2C:
0000C690                            	include "_maps\obj2C.asm"
0000C690                            ; ---------------------------------------------------------------------------
0000C690                            ; Sprite mappings - Jaws enemy (LZ)
0000C690                            ; ---------------------------------------------------------------------------
0000C690 0000                       		dc.w byte_AC78-Map_obj2C
0000C692 0000                       		dc.w byte_AC83-Map_obj2C
0000C694 0000                       		dc.w byte_AC8E-Map_obj2C
0000C696 0000                       		dc.w byte_AC99-Map_obj2C
0000C698 02                         byte_AC78:	dc.b 2
0000C699 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C69E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C6A3 02                         byte_AC83:	dc.b 2
0000C6A4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6A9 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C6AE 02                         byte_AC8E:	dc.b 2
0000C6AF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C6B4 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C6B9 02                         byte_AC99:	dc.b 2
0000C6BA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6BF F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C6C4                            		even
0000C6C4                            		even
0000C6C4                            
0000C6C4                            ; ===========================================================================
0000C6C4                            ; ---------------------------------------------------------------------------
0000C6C4                            ; Object 2D - Burrobot enemy (LZ)
0000C6C4                            ; ---------------------------------------------------------------------------
0000C6C4                            
0000C6C4                            Obj2D:					; XREF: Obj_Index
0000C6C4 7000                       		moveq	#0,d0
0000C6C6 1028 0024                  		move.b	$24(a0),d0
0000C6CA 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C6CE 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C6D2                            ; ===========================================================================
0000C6D2 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C6D4 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            Obj2D_Main:				; XREF: Obj2D_Index
0000C6D6 5428 0024                  		addq.b	#2,$24(a0)
0000C6DA 117C 0013 0016             		move.b	#$13,$16(a0)
0000C6E0 117C 0008 0017             		move.b	#8,$17(a0)
0000C6E6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C6EE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C6F4 0028 0004 0001             		ori.b	#4,1(a0)
0000C6FA 117C 0004 0018             		move.b	#4,$18(a0)
0000C700 117C 0005 0020             		move.b	#5,$20(a0)
0000C706 117C 000C 0019             		move.b	#$C,$19(a0)
0000C70C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C710 117C 0002 001C             		move.b	#2,$1C(a0)
0000C716                            
0000C716                            Obj2D_Action:				; XREF: Obj2D_Index
0000C716 7000                       		moveq	#0,d0
0000C718 1028 0025                  		move.b	$25(a0),d0
0000C71C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C720 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C724 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C72A 6100 FA0C                  		bsr.w	AnimateSprite
0000C72E 6000 0000                  		bra.w	MarkObjGone
0000C732                            ; ===========================================================================
0000C732 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C734 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C736 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C738 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C73A                            ; ===========================================================================
0000C73A                            
0000C73A                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C73A 5368 0030                  		subq.w	#1,$30(a0)
0000C73E 6A00                       		bpl.s	locret_AD42
0000C740 5428 0025                  		addq.b	#2,$25(a0)
0000C744 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C74A 317C 0080 0010             		move.w	#$80,$10(a0)
0000C750 117C 0001 001C             		move.b	#1,$1C(a0)
0000C756 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C75C 6700                       		beq.s	locret_AD42
0000C75E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C762                            
0000C762                            locret_AD42:
0000C762 4E75                       		rts	
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C764 5368 0030                  		subq.w	#1,$30(a0)
0000C768 6B00                       		bmi.s	loc_AD84
0000C76A 6100 0000                  		bsr.w	SpeedToPos
0000C76E 0868 0000 0032             		bchg	#0,$32(a0)
0000C774 6600                       		bne.s	loc_AD78
0000C776 3628 0008                  		move.w	8(a0),d3
0000C77A 0643 000C                  		addi.w	#$C,d3
0000C77E 0828 0000 0022             		btst	#0,$22(a0)
0000C784 6600                       		bne.s	loc_AD6A
0000C786 0443 0018                  		subi.w	#$18,d3
0000C78A                            
0000C78A                            loc_AD6A:
0000C78A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C790 0C41 000C                  		cmpi.w	#$C,d1
0000C794 6C00                       		bge.s	loc_AD84
0000C796 4E75                       		rts	
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_AD78:				; XREF: Obj2D_Move
0000C798 4EB9 0000 0000             		jsr	ObjHitFloor
0000C79E D368 000C                  		add.w	d1,$C(a0)
0000C7A2 4E75                       		rts	
0000C7A4                            ; ===========================================================================
0000C7A4                            
0000C7A4                            loc_AD84:				; XREF: Obj2D_Move
0000C7A4 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C7AA 6700                       		beq.s	loc_ADA4
0000C7AC 5528 0025                  		subq.b	#2,$25(a0)
0000C7B0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C7B6 317C 0000 0010             		move.w	#0,$10(a0)
0000C7BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000C7C2 4E75                       		rts	
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_ADA4:
0000C7C4 5428 0025                  		addq.b	#2,$25(a0)
0000C7C8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C7CE 117C 0002 001C             		move.b	#2,$1C(a0)
0000C7D4 4E75                       		rts	
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C7D6 6100 0000                  		bsr.w	SpeedToPos
0000C7DA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7E0 6B00                       		bmi.s	locret_ADF0
0000C7E2 117C 0003 001C             		move.b	#3,$1C(a0)
0000C7E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7EE 4A41                       		tst.w	d1
0000C7F0 6A00                       		bpl.s	locret_ADF0
0000C7F2 D368 000C                  		add.w	d1,$C(a0)
0000C7F6 317C 0000 0012             		move.w	#0,$12(a0)
0000C7FC 117C 0001 001C             		move.b	#1,$1C(a0)
0000C802 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C808 5528 0025                  		subq.b	#2,$25(a0)
0000C80C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C810                            
0000C810                            locret_ADF0:
0000C810 4E75                       		rts	
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C812 343C 0060                  		move.w	#$60,d2
0000C816 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C81A 6400                       		bcc.s	locret_AE20
0000C81C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C820 9068 000C                  		sub.w	$C(a0),d0
0000C824 6400                       		bcc.s	locret_AE20
0000C826 0C40 FF80                  		cmpi.w	#-$80,d0
0000C82A 6500                       		bcs.s	locret_AE20
0000C82C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C830 6600                       		bne.s	locret_AE20
0000C832 5528 0025                  		subq.b	#2,$25(a0)
0000C836 3141 0010                  		move.w	d1,$10(a0)
0000C83A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C840                            
0000C840                            locret_AE20:
0000C840 4E75                       		rts	
0000C842                            
0000C842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C842                            
0000C842                            
0000C842                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C842 323C 0080                  		move.w	#$80,d1
0000C846 08E8 0000 0022             		bset	#0,$22(a0)
0000C84C 3038 D008                  		move.w	($FFFFD008).w,d0
0000C850 9068 0008                  		sub.w	8(a0),d0
0000C854 6400                       		bcc.s	loc_AE40
0000C856 4440                       		neg.w	d0
0000C858 4441                       		neg.w	d1
0000C85A 08A8 0000 0022             		bclr	#0,$22(a0)
0000C860                            
0000C860                            loc_AE40:
0000C860 B042                       		cmp.w	d2,d0
0000C862 4E75                       		rts	
0000C864                            ; End of function Obj2D_ChkSonic2
0000C864                            
0000C864                            ; ===========================================================================
0000C864                            Ani_obj2D:
0000C864                            	include "_anim\obj2D.asm"
0000C864                            ; ---------------------------------------------------------------------------
0000C864                            ; Animation script - Burrobot enemy
0000C864                            ; ---------------------------------------------------------------------------
0000C864 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C866 0000                       		dc.w byte_AE50-Ani_obj2D
0000C868 0000                       		dc.w byte_AE54-Ani_obj2D
0000C86A 0000                       		dc.w byte_AE58-Ani_obj2D
0000C86C 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C870 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C874 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C878 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C87C 00                         		even
0000C87C 00                         		even
0000C87C                            
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            ; Sprite mappings - Burrobot enemy (LZ)
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            Map_obj2D:
0000C87C                            	include "_maps\obj2D.asm"
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C                            ; Sprite mappings - Burrobot enemy (LZ)
0000C87C                            ; ---------------------------------------------------------------------------
0000C87C 0000                       		dc.w byte_AE6A-Map_obj2D
0000C87E 0000                       		dc.w byte_AE75-Map_obj2D
0000C880 0000                       		dc.w byte_AE80-Map_obj2D
0000C882 0000                       		dc.w byte_AE8B-Map_obj2D
0000C884 0000                       		dc.w byte_AE96-Map_obj2D
0000C886 0000                       		dc.w byte_AEA1-Map_obj2D
0000C888 0000                       		dc.w byte_AEAC-Map_obj2D
0000C88A 02                         byte_AE6A:	dc.b 2
0000C88B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C890 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C895 02                         byte_AE75:	dc.b 2
0000C896 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C89B 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C8A0 02                         byte_AE80:	dc.b 2
0000C8A1 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C8A6 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C8AB 02                         byte_AE8B:	dc.b 2
0000C8AC E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C8B1 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C8B6 02                         byte_AE96:	dc.b 2
0000C8B7 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C8BC 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C8C1 02                         byte_AEA1:	dc.b 2
0000C8C2 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C8C7 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C8CC 02                         byte_AEAC:	dc.b 2
0000C8CD EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C8D2 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C8D8 00                         		even
0000C8D8 00                         		even
0000C8D8                            
0000C8D8                            ; ===========================================================================
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            ; Object 2F - large moving platforms (MZ)
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            
0000C8D8                            Obj2F:					; XREF: Obj_Index
0000C8D8 7000                       		moveq	#0,d0
0000C8DA 1028 0024                  		move.b	$24(a0),d0
0000C8DE 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C8E2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C8E6                            ; ===========================================================================
0000C8E6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C8E8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C8EA                            
0000C8EA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C8EC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C8EE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C8F0 0140                       		dc.b 1,	$40
0000C8F2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C8F4 0220                       		dc.b 2,	$20
0000C8F6                            ; ===========================================================================
0000C8F6                            
0000C8F6                            Obj2F_Main:				; XREF: Obj2F_Index
0000C8F6 5428 0024                  		addq.b	#2,$24(a0)
0000C8FA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C902 317C C000 0002             		move.w	#$C000,2(a0)
0000C908 117C 0004 0001             		move.b	#4,1(a0)
0000C90E 117C 0005 0018             		move.b	#5,$18(a0)
0000C914 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C91A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C920 7000                       		moveq	#0,d0
0000C922 1028 0028                  		move.b	$28(a0),d0
0000C926 E448                       		lsr.w	#2,d0
0000C928 0240 001C                  		andi.w	#$1C,d0
0000C92C 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C930 3019                       		move.w	(a1)+,d0
0000C932 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C936 214A 0030                  		move.l	a2,$30(a0)
0000C93A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C93E 1151 0019                  		move.b	(a1),$19(a0)
0000C942 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C948 117C 0040 0016             		move.b	#$40,$16(a0)
0000C94E 08E8 0004 0001             		bset	#4,1(a0)
0000C954                            
0000C954                            Obj2F_Action:				; XREF: Obj2F_Index
0000C954 6100 0000                  		bsr.w	Obj2F_Types
0000C958 4A28 0025                  		tst.b	$25(a0)
0000C95C 6700                       		beq.s	Obj2F_Solid
0000C95E 7200                       		moveq	#0,d1
0000C960 1228 0019                  		move.b	$19(a0),d1
0000C964 0641 000B                  		addi.w	#$B,d1
0000C968 6100 C64C                  		bsr.w	ExitPlatform
0000C96C 0829 0003 0022             		btst	#3,$22(a1)
0000C972 6600 0000                  		bne.w	Obj2F_Slope
0000C976 4228 0025                  		clr.b	$25(a0)
0000C97A 6000                       		bra.s	Obj2F_Display
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C97C 7200                       		moveq	#0,d1
0000C97E 1228 0019                  		move.b	$19(a0),d1
0000C982 0641 000B                  		addi.w	#$B,d1
0000C986 2468 0030                  		movea.l	$30(a0),a2
0000C98A 3428 0008                  		move.w	8(a0),d2
0000C98E 6100 D584                  		bsr.w	SlopeObject2
0000C992 6000                       		bra.s	Obj2F_Display
0000C994                            ; ===========================================================================
0000C994                            
0000C994                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C994 7200                       		moveq	#0,d1
0000C996 1228 0019                  		move.b	$19(a0),d1
0000C99A 0641 000B                  		addi.w	#$B,d1
0000C99E 343C 0020                  		move.w	#$20,d2
0000C9A2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C9A8 6600                       		bne.s	loc_AF8E
0000C9AA 343C 0030                  		move.w	#$30,d2
0000C9AE                            
0000C9AE                            loc_AF8E:
0000C9AE 2468 0030                  		movea.l	$30(a0),a2
0000C9B2 6100 0000                  		bsr.w	SolidObject2F
0000C9B6                            
0000C9B6                            Obj2F_Display:				; XREF: Obj2F_Action
0000C9B6 6100 0000                  		bsr.w	DisplaySprite
0000C9BA 6000 0000                  		bra.w	Obj2F_ChkDel
0000C9BE                            
0000C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9BE                            
0000C9BE                            
0000C9BE                            Obj2F_Types:				; XREF: Obj2F_Action
0000C9BE 7000                       		moveq	#0,d0
0000C9C0 1028 0028                  		move.b	$28(a0),d0
0000C9C4 0240 0007                  		andi.w	#7,d0
0000C9C8 D040                       		add.w	d0,d0
0000C9CA 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C9CE 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C9D2                            ; End of function Obj2F_Types
0000C9D2                            
0000C9D2                            ; ===========================================================================
0000C9D2 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C9D4 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C9D6 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C9D8 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C9DA 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C9DC 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C9DE                            ; ===========================================================================
0000C9DE                            
0000C9DE                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C9DE 4E75                       		rts			; type 00 platform doesn't move
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C9E0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C9E4 323C 0020                  		move.w	#$20,d1
0000C9E8 6000                       		bra.s	Obj2F_Move
0000C9EA                            ; ===========================================================================
0000C9EA                            
0000C9EA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C9EA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C9EE 323C 0030                  		move.w	#$30,d1
0000C9F2 6000                       		bra.s	Obj2F_Move
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C9F4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C9F8 323C 0040                  		move.w	#$40,d1
0000C9FC 6000                       		bra.s	Obj2F_Move
0000C9FE                            ; ===========================================================================
0000C9FE                            
0000C9FE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C9FE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000CA02 323C 0060                  		move.w	#$60,d1
0000CA06                            
0000CA06                            Obj2F_Move:
0000CA06 0828 0003 0028             		btst	#3,$28(a0)
0000CA0C 6700                       		beq.s	loc_AFF2
0000CA0E 4440                       		neg.w	d0
0000CA10 D041                       		add.w	d1,d0
0000CA12                            
0000CA12                            loc_AFF2:
0000CA12 3228 002C                  		move.w	$2C(a0),d1
0000CA16 9240                       		sub.w	d0,d1
0000CA18 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000CA1C 4E75                       		rts	
0000CA1E                            ; ===========================================================================
0000CA1E                            
0000CA1E                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000CA1E 1028 0034                  		move.b	$34(a0),d0
0000CA22 4A28 0025                  		tst.b	$25(a0)
0000CA26 6600                       		bne.s	loc_B010
0000CA28 5500                       		subq.b	#2,d0
0000CA2A 6400                       		bcc.s	loc_B01C
0000CA2C 7000                       		moveq	#0,d0
0000CA2E 6000                       		bra.s	loc_B01C
0000CA30                            ; ===========================================================================
0000CA30                            
0000CA30                            loc_B010:
0000CA30 5800                       		addq.b	#4,d0
0000CA32 0C00 0040                  		cmpi.b	#$40,d0
0000CA36 6500                       		bcs.s	loc_B01C
0000CA38 103C 0040                  		move.b	#$40,d0
0000CA3C                            
0000CA3C                            loc_B01C:
0000CA3C 1140 0034                  		move.b	d0,$34(a0)
0000CA40 4EB9 0000 2B7A             		jsr	(CalcSine).l
0000CA46 E848                       		lsr.w	#4,d0
0000CA48 3200                       		move.w	d0,d1
0000CA4A D068 002C                  		add.w	$2C(a0),d0
0000CA4E 3140 000C                  		move.w	d0,$C(a0)
0000CA52 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CA58 6600                       		bne.s	loc_B07A
0000CA5A 4A28 0035                  		tst.b	$35(a0)
0000CA5E 6600                       		bne.s	loc_B07A
0000CA60 117C 0001 0035             		move.b	#1,$35(a0)
0000CA66 6100 0000                  		bsr.w	SingleObjLoad2
0000CA6A 6600                       		bne.s	loc_B07A
0000CA6C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000CA70 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA76 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000CA7C 5069 002C                  		addq.w	#8,$2C(a1)
0000CA80 5769 002C                  		subq.w	#3,$2C(a1)
0000CA84 0469 0040 0008             		subi.w	#$40,8(a1)
0000CA8A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CA90 2348 0038                  		move.l	a0,$38(a1)
0000CA94 2448                       		movea.l	a0,a2
0000CA96 6100                       		bsr.s	sub_B09C
0000CA98                            
0000CA98                            loc_B07A:
0000CA98 7400                       		moveq	#0,d2
0000CA9A 45E8 0036                  		lea	$36(a0),a2
0000CA9E 141A                       		move.b	(a2)+,d2
0000CAA0 5302                       		subq.b	#1,d2
0000CAA2 6500                       		bcs.s	locret_B09A
0000CAA4                            
0000CAA4                            loc_B086:
0000CAA4 7000                       		moveq	#0,d0
0000CAA6 101A                       		move.b	(a2)+,d0
0000CAA8 ED48                       		lsl.w	#6,d0
0000CAAA 0640 D000                  		addi.w	#-$3000,d0
0000CAAE 3240                       		movea.w	d0,a1
0000CAB0 3341 003C                  		move.w	d1,$3C(a1)
0000CAB4 51CA FFEE                  		dbf	d2,loc_B086
0000CAB8                            
0000CAB8                            locret_B09A:
0000CAB8 4E75                       		rts	
0000CABA                            
0000CABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CABA                            
0000CABA                            
0000CABA                            sub_B09C:
0000CABA 45EA 0036                  		lea	$36(a2),a2
0000CABE 7000                       		moveq	#0,d0
0000CAC0 1012                       		move.b	(a2),d0
0000CAC2 5212                       		addq.b	#1,(a2)
0000CAC4 45F2 0001                  		lea	1(a2,d0.w),a2
0000CAC8 3009                       		move.w	a1,d0
0000CACA 0440 D000                  		subi.w	#-$3000,d0
0000CACE EC48                       		lsr.w	#6,d0
0000CAD0 0240 007F                  		andi.w	#$7F,d0
0000CAD4 1480                       		move.b	d0,(a2)
0000CAD6 4E75                       		rts	
0000CAD8                            ; End of function sub_B09C
0000CAD8                            
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000CAD8 4A28 0035                  		tst.b	$35(a0)
0000CADC 6700                       		beq.s	loc_B0C6
0000CADE 4A28 0001                  		tst.b	1(a0)
0000CAE2 6A00                       		bpl.s	Obj2F_DelFlames
0000CAE4                            
0000CAE4                            loc_B0C6:
0000CAE4 3028 002A                  		move.w	$2A(a0),d0
0000CAE8 0240 FF80                  		andi.w	#$FF80,d0
0000CAEC 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAF0 0441 0080                  		subi.w	#$80,d1
0000CAF4 0241 FF80                  		andi.w	#$FF80,d1
0000CAF8 9041                       		sub.w	d1,d0
0000CAFA 0C40 0280                  		cmpi.w	#$280,d0
0000CAFE 6200 0000                  		bhi.w	DeleteObject
0000CB02 4E75                       		rts	
0000CB04                            ; ===========================================================================
0000CB04                            
0000CB04                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000CB04 7400                       		moveq	#0,d2
0000CB06                            
0000CB06                            loc_B0E8:
0000CB06 45E8 0036                  		lea	$36(a0),a2
0000CB0A 1412                       		move.b	(a2),d2
0000CB0C 421A                       		clr.b	(a2)+
0000CB0E 5302                       		subq.b	#1,d2
0000CB10 6500                       		bcs.s	locret_B116
0000CB12                            
0000CB12                            loc_B0F4:
0000CB12 7000                       		moveq	#0,d0
0000CB14 1012                       		move.b	(a2),d0
0000CB16 421A                       		clr.b	(a2)+
0000CB18 ED48                       		lsl.w	#6,d0
0000CB1A 0640 D000                  		addi.w	#-$3000,d0
0000CB1E 3240                       		movea.w	d0,a1
0000CB20 6100 0000                  		bsr.w	DeleteObject2
0000CB24 51CA FFEC                  		dbf	d2,loc_B0F4
0000CB28 117C 0000 0035             		move.b	#0,$35(a0)
0000CB2E 117C 0000 0034             		move.b	#0,$34(a0)
0000CB34                            
0000CB34                            locret_B116:
0000CB34 4E75                       		rts	
0000CB36                            ; ===========================================================================
0000CB36                            ; ---------------------------------------------------------------------------
0000CB36                            ; Collision data for large moving platforms (MZ)
0000CB36                            ; ---------------------------------------------------------------------------
0000CB36                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000CB82                            		even
0000CB82                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000CBAE                            		even
0000CBAE                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000CBFA                            		even
0000CBFA                            ; ===========================================================================
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CBFA                            ; (appears when	you walk on sinking platforms)
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            
0000CBFA                            Obj35:					; XREF: Obj_Index
0000CBFA 7000                       		moveq	#0,d0
0000CBFC 1028 0024                  		move.b	$24(a0),d0
0000CC00 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000CC04 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000CC08                            ; ===========================================================================
0000CC08 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000CC0A 0000                       		dc.w loc_B238-Obj35_Index
0000CC0C 0000                       		dc.w Obj35_Move-Obj35_Index
0000CC0E                            ; ===========================================================================
0000CC0E                            
0000CC0E                            Obj35_Main:				; XREF: Obj35_Index
0000CC0E 5428 0024                  		addq.b	#2,$24(a0)
0000CC12 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000CC1A 317C 0345 0002             		move.w	#$345,2(a0)
0000CC20 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000CC26 117C 0004 0001             		move.b	#4,1(a0)
0000CC2C 117C 0001 0018             		move.b	#1,$18(a0)
0000CC32 117C 008B 0020             		move.b	#$8B,$20(a0)
0000CC38 117C 0008 0019             		move.b	#8,$19(a0)
0000CC3E 303C 00C8                  		move.w	#$C8,d0
0000CC42 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
0000CC48 4A28 0028                  		tst.b	$28(a0)
0000CC4C 6700                       		beq.s	loc_B238
0000CC4E 5428 0024                  		addq.b	#2,$24(a0)
0000CC52 6000 0000                  		bra.w	Obj35_Move
0000CC56                            ; ===========================================================================
0000CC56                            
0000CC56                            loc_B238:				; XREF: Obj35_Index
0000CC56 2268 0030                  		movea.l	$30(a0),a1
0000CC5A 3228 0008                  		move.w	8(a0),d1
0000CC5E 9268 002A                  		sub.w	$2A(a0),d1
0000CC62 0641 000C                  		addi.w	#$C,d1
0000CC66 3001                       		move.w	d1,d0
0000CC68 E248                       		lsr.w	#1,d0
0000CC6A 1031 0000                  		move.b	(a1,d0.w),d0
0000CC6E 4440                       		neg.w	d0
0000CC70 D068 002C                  		add.w	$2C(a0),d0
0000CC74 3400                       		move.w	d0,d2
0000CC76 D068 003C                  		add.w	$3C(a0),d0
0000CC7A 3140 000C                  		move.w	d0,$C(a0)
0000CC7E 0C41 0084                  		cmpi.w	#$84,d1
0000CC82 6400                       		bcc.s	loc_B2B0
0000CC84 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CC8C 0C41 0080                  		cmpi.w	#$80,d1
0000CC90 6400                       		bcc.s	loc_B2B0
0000CC92 2028 0008                  		move.l	8(a0),d0
0000CC96 0680 0008 0000             		addi.l	#$80000,d0
0000CC9C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CCA2 6600                       		bne.s	loc_B2B0
0000CCA4 6100 0000                  		bsr.w	SingleObjLoad2
0000CCA8 6600                       		bne.s	loc_B2B0
0000CCAA 12BC 0035                  		move.b	#$35,0(a1)
0000CCAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCB4 3342 002C                  		move.w	d2,$2C(a1)
0000CCB8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CCBE 137C 0001 0028             		move.b	#1,$28(a1)
0000CCC4 2468 0038                  		movea.l	$38(a0),a2
0000CCC8 6100 FDF0                  		bsr.w	sub_B09C
0000CCCC                            
0000CCCC                            loc_B2B0:
0000CCCC 6000                       		bra.s	Obj35_Animate
0000CCCE                            ; ===========================================================================
0000CCCE                            
0000CCCE                            Obj35_Move:				; XREF: Obj35_Index
0000CCCE 3028 002C                  		move.w	$2C(a0),d0
0000CCD2 D068 003C                  		add.w	$3C(a0),d0
0000CCD6 3140 000C                  		move.w	d0,$C(a0)
0000CCDA                            
0000CCDA                            Obj35_Animate:				; XREF: loc_B238
0000CCDA 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CCE0 6100 F456                  		bsr.w	AnimateSprite
0000CCE4 6000 0000                  		bra.w	DisplaySprite
0000CCE8                            ; ===========================================================================
0000CCE8                            Ani_obj35:
0000CCE8                            	include "_anim\obj35.asm"
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8                            ; Animation script - fireball that sits on the	floor (MZ)
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8 0000                       		dc.w byte_B2CE-Ani_obj35
0000CCEA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CCF0                            		even
0000CCF0                            		even
0000CCF0                            
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            ; Sprite mappings - large moving platforms (MZ)
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            Map_obj2F:
0000CCF0                            	include "_maps\obj2F.asm"
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0                            ; Sprite mappings - large moving platforms (MZ)
0000CCF0                            ; ---------------------------------------------------------------------------
0000CCF0 0000                       		dc.w byte_B2DA-Map_obj2F
0000CCF2 0000                       		dc.w byte_B31C-Map_obj2F
0000CCF4 0000                       		dc.w byte_B34F-Map_obj2F
0000CCF6 0D                         byte_B2DA:	dc.b $D
0000CCF7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CCFC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CD01 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD06 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CD0B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CD10 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD15 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CD1A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CD1F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CD24 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD29 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CD2E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CD33 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CD38 0A                         byte_B31C:	dc.b $A
0000CD39 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CD3E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CD43 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD48 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CD4D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CD52 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD57 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CD5C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CD61 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CD66 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CD6B 06                         byte_B34F:	dc.b 6
0000CD6C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CD71 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD76 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CD7B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CD80 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD85 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CD8A                            		even
0000CD8A                            		even
0000CD8A                            
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            Map_obj14:
0000CD8A                            	include "_maps\obj14.asm"
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD8A                            ; ---------------------------------------------------------------------------
0000CD8A 0000                       		dc.w byte_B37A-Map_obj14
0000CD8C 0000                       		dc.w byte_B380-Map_obj14
0000CD8E 0000                       		dc.w byte_B386-Map_obj14
0000CD90 0000                       		dc.w byte_B38C-Map_obj14
0000CD92 0000                       		dc.w byte_B392-Map_obj14
0000CD94 0000                       		dc.w byte_B398-Map_obj14
0000CD96 01                         byte_B37A:	dc.b 1
0000CD97 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CD9C 01                         byte_B380:	dc.b 1
0000CD9D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CDA2 01                         byte_B386:	dc.b 1
0000CDA3 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CDA8 01                         byte_B38C:	dc.b 1
0000CDA9 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CDAE 01                         byte_B392:	dc.b 1
0000CDAF F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CDB4 01                         byte_B398:	dc.b 1
0000CDB5 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CDBA                            		even
0000CDBA                            		even
0000CDBA                            
0000CDBA                            ; ===========================================================================
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            ; Object 30 - large green glassy blocks	(MZ)
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            
0000CDBA                            Obj30:					; XREF: Obj_Index
0000CDBA 7000                       		moveq	#0,d0
0000CDBC 1028 0024                  		move.b	$24(a0),d0
0000CDC0 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CDC4 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CDC8 3028 0008                  		move.w	8(a0),d0
0000CDCC 0240 FF80                  		andi.w	#$FF80,d0
0000CDD0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDD4 0441 0080                  		subi.w	#$80,d1
0000CDD8 0241 FF80                  		andi.w	#$FF80,d1
0000CDDC 9041                       		sub.w	d1,d0
0000CDDE 0C40 0280                  		cmpi.w	#$280,d0
0000CDE2 6200 0000                  		bhi.w	Obj30_Delete
0000CDE6 6000 0000                  		bra.w	DisplaySprite
0000CDEA                            ; ===========================================================================
0000CDEA                            
0000CDEA                            Obj30_Delete:
0000CDEA 6000 0000                  		bra.w	DeleteObject
0000CDEE                            ; ===========================================================================
0000CDEE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CDF0 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CDF2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CDF4 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CDF6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CDF8                            
0000CDF8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CDFB 0400 01                    		dc.b 4,	0, 1
0000CDFE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CE01 0800 01                    		dc.b 8,	0, 1
0000CE04                            ; ===========================================================================
0000CE04                            
0000CE04                            Obj30_Main:				; XREF: Obj30_Index
0000CE04 45F9 0000 CDF8             		lea	(Obj30_Vars1).l,a2
0000CE0A 7201                       		moveq	#1,d1
0000CE0C 117C 0048 0016             		move.b	#$48,$16(a0)
0000CE12 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CE18 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CE1A 45F9 0000 CDFE             		lea	(Obj30_Vars2).l,a2
0000CE20 7201                       		moveq	#1,d1
0000CE22 117C 0038 0016             		move.b	#$38,$16(a0)
0000CE28                            
0000CE28                            loc_B40C:
0000CE28 2248                       		movea.l	a0,a1
0000CE2A 6000                       		bra.s	Obj30_Load	; load main object
0000CE2C                            ; ===========================================================================
0000CE2C                            
0000CE2C                            Obj30_Loop:
0000CE2C 6100 0000                  		bsr.w	SingleObjLoad2
0000CE30 6600                       		bne.s	loc_B480
0000CE32                            
0000CE32                            Obj30_Load:				; XREF: Obj30_Main
0000CE32 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE36 12BC 0030                  		move.b	#$30,0(a1)
0000CE3A 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE40 101A                       		move.b	(a2)+,d0
0000CE42 4880                       		ext.w	d0
0000CE44 D068 000C                  		add.w	$C(a0),d0
0000CE48 3340 000C                  		move.w	d0,$C(a1)
0000CE4C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CE54 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CE5A 137C 0004 0001             		move.b	#4,1(a1)
0000CE60 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CE66 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CE6C 137C 0020 0019             		move.b	#$20,$19(a1)
0000CE72 137C 0004 0018             		move.b	#4,$18(a1)
0000CE78 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CE7C 2348 003C                  		move.l	a0,$3C(a1)
0000CE80 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CE84                            
0000CE84 137C 0010 0019             		move.b	#$10,$19(a1)
0000CE8A 137C 0003 0018             		move.b	#3,$18(a1)
0000CE90 5029 0028                  		addq.b	#8,$28(a1)
0000CE94 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CE9A                            
0000CE9A                            loc_B480:
0000CE9A 317C 0090 0032             		move.w	#$90,$32(a0)
0000CEA0 08E8 0004 0001             		bset	#4,1(a0)
0000CEA6                            
0000CEA6                            Obj30_Block012:				; XREF: Obj30_Index
0000CEA6 6100 0000                  		bsr.w	Obj30_Types
0000CEAA 323C 002B                  		move.w	#$2B,d1
0000CEAE 343C 0048                  		move.w	#$48,d2
0000CEB2 363C 0049                  		move.w	#$49,d3
0000CEB6 3828 0008                  		move.w	8(a0),d4
0000CEBA 6000 0000                  		bra.w	SolidObject
0000CEBE                            ; ===========================================================================
0000CEBE                            
0000CEBE                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CEBE 2268 003C                  		movea.l	$3C(a0),a1
0000CEC2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEC8 6000 0000                  		bra.w	Obj30_Types
0000CECC                            ; ===========================================================================
0000CECC                            
0000CECC                            Obj30_Block34:				; XREF: Obj30_Index
0000CECC 6100 0000                  		bsr.w	Obj30_Types
0000CED0 323C 002B                  		move.w	#$2B,d1
0000CED4 343C 0038                  		move.w	#$38,d2
0000CED8 363C 0039                  		move.w	#$39,d3
0000CEDC 3828 0008                  		move.w	8(a0),d4
0000CEE0 6000 0000                  		bra.w	SolidObject
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CEE4 2268 003C                  		movea.l	$3C(a0),a1
0000CEE8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEEE 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CEF4 6000 0002                  		bra.w	*+4
0000CEF8                            
0000CEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEF8                            
0000CEF8                            
0000CEF8                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CEF8 7000                       		moveq	#0,d0
0000CEFA 1028 0028                  		move.b	$28(a0),d0
0000CEFE 0240 0007                  		andi.w	#7,d0
0000CF02 D040                       		add.w	d0,d0
0000CF04 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CF08 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CF0C                            ; End of function Obj30_Types
0000CF0C                            
0000CF0C                            ; ===========================================================================
0000CF0C 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CF0E 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CF10 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CF12 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CF14 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CF16                            ; ===========================================================================
0000CF16                            
0000CF16                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CF16 4E75                       		rts	
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CF18 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF1C 323C 0040                  		move.w	#$40,d1
0000CF20 6000                       		bra.s	loc_B514
0000CF22                            ; ===========================================================================
0000CF22                            
0000CF22                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CF22 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF26 323C 0040                  		move.w	#$40,d1
0000CF2A 4440                       		neg.w	d0
0000CF2C D041                       		add.w	d1,d0
0000CF2E                            
0000CF2E                            loc_B514:				; XREF: Obj30_Type01
0000CF2E 0828 0003 0028             		btst	#3,$28(a0)
0000CF34 6700                       		beq.s	loc_B526
0000CF36 4440                       		neg.w	d0
0000CF38 D041                       		add.w	d1,d0
0000CF3A E208                       		lsr.b	#1,d0
0000CF3C 0640 0020                  		addi.w	#$20,d0
0000CF40                            
0000CF40                            loc_B526:
0000CF40 6000 0000                  		bra.w	loc_B5EE
0000CF44                            ; ===========================================================================
0000CF44                            
0000CF44                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000CF44 0828 0003 0028             		btst	#3,$28(a0)
0000CF4A 6700                       		beq.s	loc_B53E
0000CF4C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF50 0440 0010                  		subi.w	#$10,d0
0000CF54 6000 0000                  		bra.w	loc_B5EE
0000CF58                            ; ===========================================================================
0000CF58                            
0000CF58                            loc_B53E:
0000CF58 0828 0003 0022             		btst	#3,$22(a0)
0000CF5E 6600                       		bne.s	loc_B54E
0000CF60 08A8 0000 0034             		bclr	#0,$34(a0)
0000CF66 6000                       		bra.s	loc_B582
0000CF68                            ; ===========================================================================
0000CF68                            
0000CF68                            loc_B54E:
0000CF68 4A28 0034                  		tst.b	$34(a0)
0000CF6C 6600                       		bne.s	loc_B582
0000CF6E 117C 0001 0034             		move.b	#1,$34(a0)
0000CF74 08E8 0000 0035             		bset	#0,$35(a0)
0000CF7A 6700                       		beq.s	loc_B582
0000CF7C 08E8 0007 0034             		bset	#7,$34(a0)
0000CF82 317C 0010 0036             		move.w	#$10,$36(a0)
0000CF88 117C 000A 0038             		move.b	#$A,$38(a0)
0000CF8E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CF94 6600                       		bne.s	loc_B582
0000CF96 317C 0040 0036             		move.w	#$40,$36(a0)
0000CF9C                            
0000CF9C                            loc_B582:
0000CF9C 4A28 0034                  		tst.b	$34(a0)
0000CFA0 6A00                       		bpl.s	loc_B5AA
0000CFA2 4A28 0038                  		tst.b	$38(a0)
0000CFA6 6700                       		beq.s	loc_B594
0000CFA8 5328 0038                  		subq.b	#1,$38(a0)
0000CFAC 6600                       		bne.s	loc_B5AA
0000CFAE                            
0000CFAE                            loc_B594:
0000CFAE 4A68 0032                  		tst.w	$32(a0)
0000CFB2 6700                       		beq.s	loc_B5A4
0000CFB4 5368 0032                  		subq.w	#1,$32(a0)
0000CFB8 5368 0036                  		subq.w	#1,$36(a0)
0000CFBC 6600                       		bne.s	loc_B5AA
0000CFBE                            
0000CFBE                            loc_B5A4:
0000CFBE 08A8 0007 0034             		bclr	#7,$34(a0)
0000CFC4                            
0000CFC4                            loc_B5AA:
0000CFC4 3028 0032                  		move.w	$32(a0),d0
0000CFC8 6000                       		bra.s	loc_B5EE
0000CFCA                            ; ===========================================================================
0000CFCA                            
0000CFCA                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CFCA 0828 0003 0028             		btst	#3,$28(a0)
0000CFD0 6700                       		beq.s	Obj30_ChkSwitch
0000CFD2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFD6 0440 0010                  		subi.w	#$10,d0
0000CFDA 6000                       		bra.s	loc_B5EE
0000CFDC                            ; ===========================================================================
0000CFDC                            
0000CFDC                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CFDC 4A28 0034                  		tst.b	$34(a0)
0000CFE0 6600                       		bne.s	loc_B5E0
0000CFE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CFE6 7000                       		moveq	#0,d0
0000CFE8 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CFEC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CFEE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CFF2 6700                       		beq.s	loc_B5EA	; if not, branch
0000CFF4 117C 0001 0034             		move.b	#1,$34(a0)
0000CFFA                            
0000CFFA                            loc_B5E0:
0000CFFA 4A68 0032                  		tst.w	$32(a0)
0000CFFE 6700                       		beq.s	loc_B5EA
0000D000 5568 0032                  		subq.w	#2,$32(a0)
0000D004                            
0000D004                            loc_B5EA:
0000D004 3028 0032                  		move.w	$32(a0),d0
0000D008                            
0000D008                            loc_B5EE:
0000D008 3228 0030                  		move.w	$30(a0),d1
0000D00C 9240                       		sub.w	d0,d1
0000D00E 3141 000C                  		move.w	d1,$C(a0)
0000D012 4E75                       		rts	
0000D014                            ; ===========================================================================
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            Map_obj30:
0000D014                            	include "_maps\obj30.asm"
0000D014                            ; ---------------------------------------------------------------------------
0000D014                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D014                            ; ---------------------------------------------------------------------------
0000D014 0000                       		dc.w byte_B600-Map_obj30
0000D016 0000                       		dc.w byte_B63D-Map_obj30
0000D018 0000                       		dc.w byte_B648-Map_obj30
0000D01A 0C                         byte_B600:	dc.b $C
0000D01B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000D020 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000D025 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000D02A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000D02F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000D034 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000D039 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000D03E 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000D043 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000D048 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000D04D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000D052 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000D057 02                         byte_B63D:	dc.b 2
0000D058 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000D05D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000D062 0A                         byte_B648:	dc.b $A
0000D063 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000D068 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000D06D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000D072 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000D077 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000D07C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000D081 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000D086 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000D08B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000D090 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000D096 00                         		even
0000D096 00                         		even
0000D096                            
0000D096                            ; ===========================================================================
0000D096                            ; ---------------------------------------------------------------------------
0000D096                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D096                            ; ---------------------------------------------------------------------------
0000D096                            
0000D096                            Obj31:					; XREF: Obj_Index
0000D096 7000                       		moveq	#0,d0
0000D098 1028 0024                  		move.b	$24(a0),d0
0000D09C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000D0A0 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000D0A4                            ; ===========================================================================
0000D0A4 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000D0A6 0000                       		dc.w loc_B798-Obj31_Index
0000D0A8 0000                       		dc.w loc_B7FE-Obj31_Index
0000D0AA 0000                       		dc.w Obj31_Display2-Obj31_Index
0000D0AC 0000                       		dc.w loc_B7E2-Obj31_Index
0000D0AE                            
0000D0AE 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D0B0 0100                       		dc.b 1,	0
0000D0B2                            
0000D0B2 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000D0B5 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000D0B8 08CC 03                    		dc.b 8,	$CC, 3
0000D0BB 06F0 02                    		dc.b 6,	$F0, 2
0000D0BE                            
0000D0BE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D0C2 5000 7800                  		dc.w $5000, $7800
0000D0C6 3800 5800                  		dc.w $3800, $5800
0000D0CA B800                       		dc.w $B800
0000D0CC                            ; ===========================================================================
0000D0CC                            
0000D0CC                            Obj31_Main:				; XREF: Obj31_Index
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0028                  		move.b	$28(a0),d0
0000D0D2 6A00                       		bpl.s	loc_B6CE
0000D0D4 0240 007F                  		andi.w	#$7F,d0
0000D0D8 D040                       		add.w	d0,d0
0000D0DA 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000D0DE 115A 003A                  		move.b	(a2)+,$3A(a0)
0000D0E2 101A                       		move.b	(a2)+,d0
0000D0E4 1140 0028                  		move.b	d0,$28(a0)
0000D0E8                            
0000D0E8                            loc_B6CE:
0000D0E8 0200 000F                  		andi.b	#$F,d0
0000D0EC D040                       		add.w	d0,d0
0000D0EE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D0F2 4A40                       		tst.w	d0
0000D0F4 6600                       		bne.s	loc_B6E0
0000D0F6 3142 0032                  		move.w	d2,$32(a0)
0000D0FA                            
0000D0FA                            loc_B6E0:
0000D0FA 45F9 0000 D0B2             		lea	(Obj31_Var).l,a2
0000D100 2248                       		movea.l	a0,a1
0000D102 7203                       		moveq	#3,d1
0000D104 6000                       		bra.s	Obj31_MakeStomper
0000D106                            ; ===========================================================================
0000D106                            
0000D106                            Obj31_Loop:
0000D106 6100 0000                  		bsr.w	SingleObjLoad2
0000D10A 6600 0000                  		bne.w	Obj31_SetSize
0000D10E                            
0000D10E                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000D10E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D112 12BC 0031                  		move.b	#$31,0(a1)
0000D116 3368 0008 0008             		move.w	8(a0),8(a1)
0000D11C 101A                       		move.b	(a2)+,d0
0000D11E 4880                       		ext.w	d0
0000D120 D068 000C                  		add.w	$C(a0),d0
0000D124 3340 000C                  		move.w	d0,$C(a1)
0000D128 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000D130 337C 0300 0002             		move.w	#$300,2(a1)
0000D136 137C 0004 0001             		move.b	#4,1(a1)
0000D13C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000D142 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D148 137C 0010 0019             		move.b	#$10,$19(a1)
0000D14E 3342 0034                  		move.w	d2,$34(a1)
0000D152 137C 0004 0018             		move.b	#4,$18(a1)
0000D158 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D15C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000D162 6600                       		bne.s	loc_B76A
0000D164 5341                       		subq.w	#1,d1
0000D166 1028 0028                  		move.b	$28(a0),d0
0000D16A 0240 00F0                  		andi.w	#$F0,d0
0000D16E 0C40 0020                  		cmpi.w	#$20,d0
0000D172 679A                       		beq.s	Obj31_MakeStomper
0000D174 137C 0038 0019             		move.b	#$38,$19(a1)
0000D17A 137C 0090 0020             		move.b	#$90,$20(a1)
0000D180 5241                       		addq.w	#1,d1
0000D182                            
0000D182                            loc_B76A:
0000D182 2348 003C                  		move.l	a0,$3C(a1)
0000D186 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000D18A                            
0000D18A 137C 0003 0018             		move.b	#3,$18(a1)
0000D190                            
0000D190                            Obj31_SetSize:
0000D190 7000                       		moveq	#0,d0
0000D192 1028 0028                  		move.b	$28(a0),d0
0000D196 E648                       		lsr.w	#3,d0
0000D198 0200 000E                  		andi.b	#$E,d0
0000D19C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000D1A0 115A 0019                  		move.b	(a2)+,$19(a0)
0000D1A4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D1A8 6000                       		bra.s	loc_B798
0000D1AA                            ; ===========================================================================
0000D1AA 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000D1AC 3009                       		dc.b $30, 9
0000D1AE 100A                       		dc.b $10, $A
0000D1B0                            ; ===========================================================================
0000D1B0                            
0000D1B0                            loc_B798:				; XREF: Obj31_Index
0000D1B0 6100 0000                  		bsr.w	Obj31_Types
0000D1B4 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000D1BA 7200                       		moveq	#0,d1
0000D1BC 1228 0019                  		move.b	$19(a0),d1
0000D1C0 0641 000B                  		addi.w	#$B,d1
0000D1C4 343C 000C                  		move.w	#$C,d2
0000D1C8 363C 000D                  		move.w	#$D,d3
0000D1CC 3828 0008                  		move.w	8(a0),d4
0000D1D0 6100 0000                  		bsr.w	SolidObject
0000D1D4 0828 0003 0022             		btst	#3,$22(a0)
0000D1DA 6700                       		beq.s	Obj31_Display
0000D1DC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D1E2 6400                       		bcc.s	Obj31_Display
0000D1E4 2448                       		movea.l	a0,a2
0000D1E6 41F8 D000                  		lea	($FFFFD000).w,a0
0000D1EA 4EB9 0000 0000             		jsr	KillSonic
0000D1F0 204A                       		movea.l	a2,a0
0000D1F2                            
0000D1F2                            Obj31_Display:
0000D1F2 6100 0000                  		bsr.w	DisplaySprite
0000D1F6 6000 0000                  		bra.w	Obj31_ChkDel
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            loc_B7E2:				; XREF: Obj31_Index
0000D1FA 117C 0080 0016             		move.b	#$80,$16(a0)
0000D200 08E8 0004 0001             		bset	#4,1(a0)
0000D206 2268 003C                  		movea.l	$3C(a0),a1
0000D20A 1029 0032                  		move.b	$32(a1),d0
0000D20E EA08                       		lsr.b	#5,d0
0000D210 5600                       		addq.b	#3,d0
0000D212 1140 001A                  		move.b	d0,$1A(a0)
0000D216                            
0000D216                            loc_B7FE:				; XREF: Obj31_Index
0000D216 2268 003C                  		movea.l	$3C(a0),a1
0000D21A 7000                       		moveq	#0,d0
0000D21C 1029 0032                  		move.b	$32(a1),d0
0000D220 D068 0030                  		add.w	$30(a0),d0
0000D224 3140 000C                  		move.w	d0,$C(a0)
0000D228                            
0000D228                            Obj31_Display2:				; XREF: Obj31_Index
0000D228 6100 0000                  		bsr.w	DisplaySprite
0000D22C                            
0000D22C                            Obj31_ChkDel:				; XREF: Obj31_Display
0000D22C 3028 0008                  		move.w	8(a0),d0
0000D230 0240 FF80                  		andi.w	#$FF80,d0
0000D234 3238 F700                  		move.w	($FFFFF700).w,d1
0000D238 0441 0080                  		subi.w	#$80,d1
0000D23C 0241 FF80                  		andi.w	#$FF80,d1
0000D240 9041                       		sub.w	d1,d0
0000D242 0C40 0280                  		cmpi.w	#$280,d0
0000D246 6200 0000                  		bhi.w	DeleteObject
0000D24A 4E75                       		rts	
0000D24C                            ; ===========================================================================
0000D24C                            
0000D24C                            Obj31_Types:				; XREF: loc_B798
0000D24C 1028 0028                  		move.b	$28(a0),d0
0000D250 0240 000F                  		andi.w	#$F,d0
0000D254 D040                       		add.w	d0,d0
0000D256 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000D25A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000D25E                            ; ===========================================================================
0000D25E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000D260 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D262 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D264 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D266 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D268 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D26A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000D26C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000D270 7000                       		moveq	#0,d0
0000D272 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000D276 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D27A 6700                       		beq.s	loc_B8A8	; if not, branch
0000D27C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000D280 6A00                       		bpl.s	loc_B872
0000D282 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D288 6700                       		beq.s	loc_B8A0
0000D28A                            
0000D28A                            loc_B872:
0000D28A 4A68 0032                  		tst.w	$32(a0)
0000D28E 6700                       		beq.s	loc_B8A0
0000D290 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D294 0200 000F                  		andi.b	#$F,d0
0000D298 6600                       		bne.s	loc_B892
0000D29A 4A28 0001                  		tst.b	1(a0)
0000D29E 6A00                       		bpl.s	loc_B892
0000D2A0 303C 00C7                  		move.w	#$C7,d0
0000D2A4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D2AA                            
0000D2AA                            loc_B892:
0000D2AA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D2B0 6400                       		bcc.s	Obj31_Restart
0000D2B2 317C 0000 0032             		move.w	#0,$32(a0)
0000D2B8                            
0000D2B8                            loc_B8A0:
0000D2B8 317C 0000 0012             		move.w	#0,$12(a0)
0000D2BE 6000                       		bra.s	Obj31_Restart
0000D2C0                            ; ===========================================================================
0000D2C0                            
0000D2C0                            loc_B8A8:				; XREF: Obj31_Type00
0000D2C0 3228 0034                  		move.w	$34(a0),d1
0000D2C4 B268 0032                  		cmp.w	$32(a0),d1
0000D2C8 6700                       		beq.s	Obj31_Restart
0000D2CA 3028 0012                  		move.w	$12(a0),d0
0000D2CE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D2D4 D168 0032                  		add.w	d0,$32(a0)
0000D2D8 B268 0032                  		cmp.w	$32(a0),d1
0000D2DC 6200                       		bhi.s	Obj31_Restart
0000D2DE 3141 0032                  		move.w	d1,$32(a0)
0000D2E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D2E8 4A28 0001                  		tst.b	1(a0)
0000D2EC 6A00                       		bpl.s	Obj31_Restart
0000D2EE 303C 00BD                  		move.w	#$BD,d0
0000D2F2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D2F8                            
0000D2F8                            Obj31_Restart:
0000D2F8 7000                       		moveq	#0,d0
0000D2FA 1028 0032                  		move.b	$32(a0),d0
0000D2FE D068 0030                  		add.w	$30(a0),d0
0000D302 3140 000C                  		move.w	d0,$C(a0)
0000D306 4E75                       		rts	
0000D308                            ; ===========================================================================
0000D308                            
0000D308                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D308 4A68 0036                  		tst.w	$36(a0)
0000D30C 6700                       		beq.s	loc_B938
0000D30E 4A68 0038                  		tst.w	$38(a0)
0000D312 6700                       		beq.s	loc_B902
0000D314 5368 0038                  		subq.w	#1,$38(a0)
0000D318 6000                       		bra.s	loc_B97C
0000D31A                            ; ===========================================================================
0000D31A                            
0000D31A                            loc_B902:
0000D31A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D31E 0200 000F                  		andi.b	#$F,d0
0000D322 6600                       		bne.s	loc_B91C
0000D324 4A28 0001                  		tst.b	1(a0)
0000D328 6A00                       		bpl.s	loc_B91C
0000D32A 303C 00C7                  		move.w	#$C7,d0
0000D32E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D334                            
0000D334                            loc_B91C:
0000D334 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D33A 6400                       		bcc.s	loc_B97C
0000D33C 317C 0000 0032             		move.w	#0,$32(a0)
0000D342 317C 0000 0012             		move.w	#0,$12(a0)
0000D348 317C 0000 0036             		move.w	#0,$36(a0)
0000D34E 6000                       		bra.s	loc_B97C
0000D350                            ; ===========================================================================
0000D350                            
0000D350                            loc_B938:				; XREF: Obj31_Type01
0000D350 3228 0034                  		move.w	$34(a0),d1
0000D354 B268 0032                  		cmp.w	$32(a0),d1
0000D358 6700                       		beq.s	loc_B97C
0000D35A 3028 0012                  		move.w	$12(a0),d0
0000D35E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D364 D168 0032                  		add.w	d0,$32(a0)
0000D368 B268 0032                  		cmp.w	$32(a0),d1
0000D36C 6200                       		bhi.s	loc_B97C
0000D36E 3141 0032                  		move.w	d1,$32(a0)
0000D372 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D378 317C 0001 0036             		move.w	#1,$36(a0)
0000D37E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D384 4A28 0001                  		tst.b	1(a0)
0000D388 6A00                       		bpl.s	loc_B97C
0000D38A 303C 00BD                  		move.w	#$BD,d0
0000D38E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D394                            
0000D394                            loc_B97C:
0000D394 6000 FF62                  		bra.w	Obj31_Restart
0000D398                            ; ===========================================================================
0000D398                            
0000D398                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D398 3038 D008                  		move.w	($FFFFD008).w,d0
0000D39C 9068 0008                  		sub.w	8(a0),d0
0000D3A0 6400                       		bcc.s	loc_B98C
0000D3A2 4440                       		neg.w	d0
0000D3A4                            
0000D3A4                            loc_B98C:
0000D3A4 0C40 0090                  		cmpi.w	#$90,d0
0000D3A8 6400                       		bcc.s	loc_B996
0000D3AA 5228 0028                  		addq.b	#1,$28(a0)
0000D3AE                            
0000D3AE                            loc_B996:
0000D3AE 6000 FF48                  		bra.w	Obj31_Restart
0000D3B2                            ; ===========================================================================
0000D3B2                            ; ---------------------------------------------------------------------------
0000D3B2                            ; Object 45 - spiked metal block from beta version (MZ)
0000D3B2                            ; ---------------------------------------------------------------------------
0000D3B2                            
0000D3B2                            Obj45:					; XREF: Obj_Index
0000D3B2 7000                       		moveq	#0,d0
0000D3B4 1028 0024                  		move.b	$24(a0),d0
0000D3B8 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D3BC 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D3C0                            ; ===========================================================================
0000D3C0 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D3C2 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D3C4 0000                       		dc.w loc_BA8E-Obj45_Index
0000D3C6 0000                       		dc.w Obj45_Display-Obj45_Index
0000D3C8 0000                       		dc.w loc_BA7A-Obj45_Index
0000D3CA                            
0000D3CA 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D3CD 04E4 01                    		dc.b	4, $E4,	  1
0000D3D0 0834 03                    		dc.b	8, $34,	  3
0000D3D3 0628 02                    		dc.b	6, $28,	  2
0000D3D6                            
0000D3D6 3800                       word_B9BE:	dc.w $3800
0000D3D8 A000                       		dc.w -$6000
0000D3DA 5000                       		dc.w $5000
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            Obj45_Main:				; XREF: Obj45_Index
0000D3DC 7000                       		moveq	#0,d0
0000D3DE 1028 0028                  		move.b	$28(a0),d0
0000D3E2 D040                       		add.w	d0,d0
0000D3E4 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D3E8 45F9 0000 D3CA             		lea	(Obj45_Var).l,a2
0000D3EE 2248                       		movea.l	a0,a1
0000D3F0 7203                       		moveq	#3,d1
0000D3F2 6000                       		bra.s	Obj45_Load
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            Obj45_Loop:
0000D3F4 6100 0000                  		bsr.w	SingleObjLoad2
0000D3F8 6600                       		bne.s	loc_BA52
0000D3FA                            
0000D3FA                            Obj45_Load:				; XREF: Obj45_Main
0000D3FA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3FE 12BC 0045                  		move.b	#$45,0(a1)
0000D402 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D408 101A                       		move.b	(a2)+,d0
0000D40A 4880                       		ext.w	d0
0000D40C D068 0008                  		add.w	8(a0),d0
0000D410 3340 0008                  		move.w	d0,8(a1)
0000D414 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D41C 337C 0300 0002             		move.w	#$300,2(a1)
0000D422 137C 0004 0001             		move.b	#4,1(a1)
0000D428 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D42E 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D434 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D43A 137C 0020 0019             		move.b	#$20,$19(a1)
0000D440 3342 0034                  		move.w	d2,$34(a1)
0000D444 137C 0004 0018             		move.b	#4,$18(a1)
0000D44A 0C12 0001                  		cmpi.b	#1,(a2)
0000D44E 6600                       		bne.s	loc_BA40
0000D450 137C 0091 0020             		move.b	#$91,$20(a1)
0000D456                            
0000D456                            loc_BA40:
0000D456 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D45A 2348 003C                  		move.l	a0,$3C(a1)
0000D45E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D462                            
0000D462 137C 0003 0018             		move.b	#3,$18(a1)
0000D468                            
0000D468                            loc_BA52:
0000D468 117C 0010 0019             		move.b	#$10,$19(a0)
0000D46E                            
0000D46E                            Obj45_Solid:				; XREF: Obj45_Index
0000D46E 3F28 0008                  		move.w	8(a0),-(sp)
0000D472 6100 0000                  		bsr.w	Obj45_Move
0000D476 323C 0017                  		move.w	#$17,d1
0000D47A 343C 0020                  		move.w	#$20,d2
0000D47E 363C 0020                  		move.w	#$20,d3
0000D482 381F                       		move.w	(sp)+,d4
0000D484 6100 0000                  		bsr.w	SolidObject
0000D488 6100 0000                  		bsr.w	DisplaySprite
0000D48C 6000 0000                  		bra.w	Obj45_ChkDel
0000D490                            ; ===========================================================================
0000D490                            
0000D490                            loc_BA7A:				; XREF: Obj45_Index
0000D490 2268 003C                  		movea.l	$3C(a0),a1
0000D494 1029 0032                  		move.b	$32(a1),d0
0000D498 0600 0010                  		addi.b	#$10,d0
0000D49C EA08                       		lsr.b	#5,d0
0000D49E 5600                       		addq.b	#3,d0
0000D4A0 1140 001A                  		move.b	d0,$1A(a0)
0000D4A4                            
0000D4A4                            loc_BA8E:				; XREF: Obj45_Index
0000D4A4 2268 003C                  		movea.l	$3C(a0),a1
0000D4A8 7000                       		moveq	#0,d0
0000D4AA 1029 0032                  		move.b	$32(a1),d0
0000D4AE 4440                       		neg.w	d0
0000D4B0 D068 0030                  		add.w	$30(a0),d0
0000D4B4 3140 0008                  		move.w	d0,8(a0)
0000D4B8                            
0000D4B8                            Obj45_Display:				; XREF: Obj45_Index
0000D4B8 6100 0000                  		bsr.w	DisplaySprite
0000D4BC                            
0000D4BC                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D4BC 3028 003A                  		move.w	$3A(a0),d0
0000D4C0 0240 FF80                  		andi.w	#$FF80,d0
0000D4C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4C8 0441 0080                  		subi.w	#$80,d1
0000D4CC 0241 FF80                  		andi.w	#$FF80,d1
0000D4D0 9041                       		sub.w	d1,d0
0000D4D2 0C40 0280                  		cmpi.w	#$280,d0
0000D4D6 6200 0000                  		bhi.w	DeleteObject
0000D4DA 4E75                       		rts	
0000D4DC                            
0000D4DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4DC                            
0000D4DC                            
0000D4DC                            Obj45_Move:				; XREF: Obj45_Solid
0000D4DC 7000                       		moveq	#0,d0
0000D4DE 1028 0028                  		move.b	$28(a0),d0
0000D4E2 D040                       		add.w	d0,d0
0000D4E4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D4E8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D4EC                            ; End of function Obj45_Move
0000D4EC                            
0000D4EC                            ; ===========================================================================
0000D4EC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D4EE 0000                       		dc.w loc_BADA-off_BAD6
0000D4F0                            ; ===========================================================================
0000D4F0                            
0000D4F0                            loc_BADA:				; XREF: off_BAD6
0000D4F0 4A68 0036                  		tst.w	$36(a0)
0000D4F4 6700                       		beq.s	loc_BB08
0000D4F6 4A68 0038                  		tst.w	$38(a0)
0000D4FA 6700                       		beq.s	loc_BAEC
0000D4FC 5368 0038                  		subq.w	#1,$38(a0)
0000D500 6000                       		bra.s	loc_BB3C
0000D502                            ; ===========================================================================
0000D502                            
0000D502                            loc_BAEC:
0000D502 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D508 6400                       		bcc.s	loc_BB3C
0000D50A 317C 0000 0032             		move.w	#0,$32(a0)
0000D510 317C 0000 0010             		move.w	#0,$10(a0)
0000D516 317C 0000 0036             		move.w	#0,$36(a0)
0000D51C 6000                       		bra.s	loc_BB3C
0000D51E                            ; ===========================================================================
0000D51E                            
0000D51E                            loc_BB08:				; XREF: loc_BADA
0000D51E 3228 0034                  		move.w	$34(a0),d1
0000D522 B268 0032                  		cmp.w	$32(a0),d1
0000D526 6700                       		beq.s	loc_BB3C
0000D528 3028 0010                  		move.w	$10(a0),d0
0000D52C 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D532 D168 0032                  		add.w	d0,$32(a0)
0000D536 B268 0032                  		cmp.w	$32(a0),d1
0000D53A 6200                       		bhi.s	loc_BB3C
0000D53C 3141 0032                  		move.w	d1,$32(a0)
0000D540 317C 0000 0010             		move.w	#0,$10(a0)
0000D546 317C 0001 0036             		move.w	#1,$36(a0)
0000D54C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D552                            
0000D552                            loc_BB3C:
0000D552 7000                       		moveq	#0,d0
0000D554 1028 0032                  		move.b	$32(a0),d0
0000D558 4440                       		neg.w	d0
0000D55A D068 0030                  		add.w	$30(a0),d0
0000D55E 3140 0008                  		move.w	d0,8(a0)
0000D562 4E75                       		rts	
0000D564                            ; ===========================================================================
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            Map_obj31:
0000D564                            	include "_maps\obj31.asm"
0000D564                            ; ---------------------------------------------------------------------------
0000D564                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D564                            ; ---------------------------------------------------------------------------
0000D564 0000                       		dc.w byte_BB64-Map_obj31
0000D566 0000                       		dc.w byte_BB7E-Map_obj31
0000D568 0000                       		dc.w byte_BB98-Map_obj31
0000D56A 0000                       		dc.w byte_BB9E-Map_obj31
0000D56C 0000                       		dc.w byte_BBA9-Map_obj31
0000D56E 0000                       		dc.w byte_BBBE-Map_obj31
0000D570 0000                       		dc.w byte_BBDD-Map_obj31
0000D572 0000                       		dc.w byte_BC06-Map_obj31
0000D574 0000                       		dc.w byte_BC06-Map_obj31
0000D576 0000                       		dc.w byte_BC39-Map_obj31
0000D578 0000                       		dc.w byte_BC53-Map_obj31
0000D57A 05                         byte_BB64:	dc.b 5
0000D57B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D580 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D585 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D58A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D58F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D594 05                         byte_BB7E:	dc.b 5
0000D595 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D59A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D59F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D5A4 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D5A9 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D5AE 01                         byte_BB98:	dc.b 1
0000D5AF DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D5B4 02                         byte_BB9E:	dc.b 2
0000D5B5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5BA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5BF 04                         byte_BBA9:	dc.b 4
0000D5C0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5C5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5CA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5CF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5D4 06                         byte_BBBE:	dc.b 6
0000D5D5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5DA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D5DF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5E4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5E9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5EE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5F3 08                         byte_BBDD:	dc.b 8
0000D5F4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D5F9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D5FE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D603 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D608 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D60D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D612 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D617 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D61C 0A                         byte_BC06:	dc.b $A
0000D61D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D622 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D627 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D62C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D631 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D636 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D63B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D640 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D645 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D64A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D64F 05                         byte_BC39:	dc.b 5
0000D650 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D655 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D65A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D65F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D664 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D669 01                         byte_BC53:	dc.b 1
0000D66A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D670 00                         		even
0000D670 00                         		even
0000D670                            
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            Map_obj45:
0000D670                            	include "_maps\obj45.asm"
0000D670                            ; ---------------------------------------------------------------------------
0000D670                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D670                            ; ---------------------------------------------------------------------------
0000D670 0000                       		dc.w byte_BC6C-Map_obj45
0000D672 0000                       		dc.w byte_BC7C-Map_obj45
0000D674 0000                       		dc.w byte_BC8C-Map_obj45
0000D676 0000                       		dc.w byte_BC92-Map_obj45
0000D678 0000                       		dc.w byte_BC9D-Map_obj45
0000D67A 0000                       		dc.w byte_BCB2-Map_obj45
0000D67C 0000                       		dc.w byte_BCD1-Map_obj45
0000D67E 0000                       		dc.w byte_BCFA-Map_obj45
0000D680 0000                       		dc.w byte_BCFA-Map_obj45
0000D682 03                         byte_BC6C:	dc.b 3
0000D683 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D688 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D68D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D692 03                         byte_BC7C:	dc.b 3
0000D693 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D698 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D69D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D6A2 01                         byte_BC8C:	dc.b 1
0000D6A3 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D6A8 02                         byte_BC92:	dc.b 2
0000D6A9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6AE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6B3 04                         byte_BC9D:	dc.b 4
0000D6B4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6B9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6BE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6C3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6C8 06                         byte_BCB2:	dc.b 6
0000D6C9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6CE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6D3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6D8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6DD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6E2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D6E7 08                         byte_BCD1:	dc.b 8
0000D6E8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6ED F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6F2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6F7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6FC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D701 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D706 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D70B F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D710 08                         byte_BCFA:	dc.b 8
0000D711 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D716 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D71B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D720 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D725 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D72A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D72F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D734 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D739 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D73E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D744 00                         		even
0000D744 00                         		even
0000D744                            
0000D744                            ; ===========================================================================
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            
0000D744                            Obj32:					; XREF: Obj_Index
0000D744 7000                       		moveq	#0,d0
0000D746 1028 0024                  		move.b	$24(a0),d0
0000D74A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D74E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D752                            ; ===========================================================================
0000D752 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D754 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D756                            ; ===========================================================================
0000D756                            
0000D756                            Obj32_Main:				; XREF: Obj32_Index
0000D756 5428 0024                  		addq.b	#2,$24(a0)
0000D75A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D762 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D768 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D76E 6700                       		beq.s	loc_BD60
0000D770 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D776                            
0000D776                            loc_BD60:
0000D776 117C 0004 0001             		move.b	#4,1(a0)
0000D77C 117C 0010 0019             		move.b	#$10,$19(a0)
0000D782 117C 0004 0018             		move.b	#4,$18(a0)
0000D788 5668 000C                  		addq.w	#3,$C(a0)
0000D78C                            
0000D78C                            Obj32_Pressed:				; XREF: Obj32_Index
0000D78C 4A28 0001                  		tst.b	1(a0)
0000D790 6A00                       		bpl.s	Obj32_Display
0000D792 323C 001B                  		move.w	#$1B,d1
0000D796 343C 0005                  		move.w	#5,d2
0000D79A 363C 0005                  		move.w	#5,d3
0000D79E 3828 0008                  		move.w	8(a0),d4
0000D7A2 6100 0000                  		bsr.w	SolidObject
0000D7A6 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D7AC 1028 0028                  		move.b	$28(a0),d0
0000D7B0 0240 000F                  		andi.w	#$F,d0
0000D7B4 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D7B8 47F3 0000                  		lea	(a3,d0.w),a3
0000D7BC 7600                       		moveq	#0,d3
0000D7BE 0828 0006 0028             		btst	#6,$28(a0)
0000D7C4 6700                       		beq.s	loc_BDB2
0000D7C6 7607                       		moveq	#7,d3
0000D7C8                            
0000D7C8                            loc_BDB2:
0000D7C8 4A28 0028                  		tst.b	$28(a0)
0000D7CC 6A00                       		bpl.s	loc_BDBE
0000D7CE 6100 0000                  		bsr.w	Obj32_MZBlock
0000D7D2 6600                       		bne.s	loc_BDC8
0000D7D4                            
0000D7D4                            loc_BDBE:
0000D7D4 4A28 0025                  		tst.b	$25(a0)
0000D7D8 6600                       		bne.s	loc_BDC8
0000D7DA 0793                       		bclr	d3,(a3)
0000D7DC 6000                       		bra.s	loc_BDDE
0000D7DE                            ; ===========================================================================
0000D7DE                            
0000D7DE                            loc_BDC8:
0000D7DE 4A13                       		tst.b	(a3)
0000D7E0 6600                       		bne.s	loc_BDD6
0000D7E2 303C 00CD                  		move.w	#$CD,d0
0000D7E6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play switch sound
0000D7EC                            
0000D7EC                            loc_BDD6:
0000D7EC 07D3                       		bset	d3,(a3)
0000D7EE 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D7F4                            
0000D7F4                            loc_BDDE:
0000D7F4 0828 0005 0028             		btst	#5,$28(a0)
0000D7FA 6700                       		beq.s	Obj32_Display
0000D7FC 5328 001E                  		subq.b	#1,$1E(a0)
0000D800 6A00                       		bpl.s	Obj32_Display
0000D802 117C 0007 001E             		move.b	#7,$1E(a0)
0000D808 0868 0001 001A             		bchg	#1,$1A(a0)
0000D80E                            
0000D80E                            Obj32_Display:
0000D80E 6100 0000                  		bsr.w	DisplaySprite
0000D812 3028 0008                  		move.w	8(a0),d0
0000D816 0240 FF80                  		andi.w	#$FF80,d0
0000D81A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D81E 0441 0080                  		subi.w	#$80,d1
0000D822 0241 FF80                  		andi.w	#$FF80,d1
0000D826 9041                       		sub.w	d1,d0
0000D828 0C40 0280                  		cmpi.w	#$280,d0
0000D82C 6200 0000                  		bhi.w	Obj32_Delete
0000D830 4E75                       		rts	
0000D832                            ; ===========================================================================
0000D832                            
0000D832                            Obj32_Delete:
0000D832 6100 0000                  		bsr.w	DeleteObject
0000D836 4E75                       		rts	
0000D838                            
0000D838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D838                            
0000D838                            
0000D838                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D838 3F03                       		move.w	d3,-(sp)
0000D83A 3428 0008                  		move.w	8(a0),d2
0000D83E 3628 000C                  		move.w	$C(a0),d3
0000D842 0442 0010                  		subi.w	#$10,d2
0000D846 5143                       		subq.w	#8,d3
0000D848 383C 0020                  		move.w	#$20,d4
0000D84C 3A3C 0010                  		move.w	#$10,d5
0000D850 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D854 3C3C 005F                  		move.w	#$5F,d6
0000D858                            
0000D858                            Obj32_MZLoop:
0000D858 4A29 0001                  		tst.b	1(a1)
0000D85C 6A00                       		bpl.s	loc_BE4E
0000D85E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D862 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D864                            
0000D864                            loc_BE4E:
0000D864 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D868 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D86C                            
0000D86C 361F                       		move.w	(sp)+,d3
0000D86E 7000                       		moveq	#0,d0
0000D870                            
0000D870                            locret_BE5A:
0000D870 4E75                       		rts	
0000D872                            ; ===========================================================================
0000D872 1010                       Obj32_MZData:	dc.b $10, $10
0000D874                            ; ===========================================================================
0000D874                            
0000D874                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D874 7001                       		moveq	#1,d0
0000D876 0240 003F                  		andi.w	#$3F,d0
0000D87A D040                       		add.w	d0,d0
0000D87C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D880 121A                       		move.b	(a2)+,d1
0000D882 4881                       		ext.w	d1
0000D884 3029 0008                  		move.w	8(a1),d0
0000D888 9041                       		sub.w	d1,d0
0000D88A 9042                       		sub.w	d2,d0
0000D88C 6400                       		bcc.s	loc_BE80
0000D88E D241                       		add.w	d1,d1
0000D890 D041                       		add.w	d1,d0
0000D892 6500                       		bcs.s	loc_BE84
0000D894 60CE                       		bra.s	loc_BE4E
0000D896                            ; ===========================================================================
0000D896                            
0000D896                            loc_BE80:
0000D896 B044                       		cmp.w	d4,d0
0000D898 62CA                       		bhi.s	loc_BE4E
0000D89A                            
0000D89A                            loc_BE84:
0000D89A 121A                       		move.b	(a2)+,d1
0000D89C 4881                       		ext.w	d1
0000D89E 3029 000C                  		move.w	$C(a1),d0
0000D8A2 9041                       		sub.w	d1,d0
0000D8A4 9043                       		sub.w	d3,d0
0000D8A6 6400                       		bcc.s	loc_BE9A
0000D8A8 D241                       		add.w	d1,d1
0000D8AA D041                       		add.w	d1,d0
0000D8AC 6500                       		bcs.s	loc_BE9E
0000D8AE 60B4                       		bra.s	loc_BE4E
0000D8B0                            ; ===========================================================================
0000D8B0                            
0000D8B0                            loc_BE9A:
0000D8B0 B045                       		cmp.w	d5,d0
0000D8B2 62B0                       		bhi.s	loc_BE4E
0000D8B4                            
0000D8B4                            loc_BE9E:
0000D8B4 361F                       		move.w	(sp)+,d3
0000D8B6 7001                       		moveq	#1,d0
0000D8B8 4E75                       		rts	
0000D8BA                            ; End of function Obj32_MZBlock
0000D8BA                            
0000D8BA                            ; ===========================================================================
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            Map_obj32:
0000D8BA                            	include "_maps\obj32.asm"
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8BA                            ; ---------------------------------------------------------------------------
0000D8BA 0000                       		dc.w byte_BEAC-Map_obj32
0000D8BC 0000                       		dc.w byte_BEB7-Map_obj32
0000D8BE 0000                       		dc.w byte_BEC2-Map_obj32
0000D8C0 0000                       		dc.w byte_BEB7-Map_obj32
0000D8C2 02                         byte_BEAC:	dc.b 2
0000D8C3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D8C8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D8CD 02                         byte_BEB7:	dc.b 2
0000D8CE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D8D3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D8D8 02                         byte_BEC2:	dc.b 2
0000D8D9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D8DE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D8E3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8E8                            		even
0000D8E8                            		even
0000D8E8                            
0000D8E8                            ; ===========================================================================
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            ; Object 33 - pushable blocks (MZ, LZ)
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            
0000D8E8                            Obj33:					; XREF: Obj_Index
0000D8E8 7000                       		moveq	#0,d0
0000D8EA 1028 0024                  		move.b	$24(a0),d0
0000D8EE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D8F2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D8F6                            ; ===========================================================================
0000D8F6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D8F8 0000                       		dc.w loc_BF6E-Obj33_Index
0000D8FA 0000                       		dc.w loc_C02C-Obj33_Index
0000D8FC                            
0000D8FC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D8FE 4001                       		dc.b $40, 1
0000D900                            ; ===========================================================================
0000D900                            
0000D900                            Obj33_Main:				; XREF: Obj33_Index
0000D900 5428 0024                  		addq.b	#2,$24(a0)
0000D904 117C 000F 0016             		move.b	#$F,$16(a0)
0000D90A 117C 000F 0017             		move.b	#$F,$17(a0)
0000D910 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D918 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D91E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D924 6600                       		bne.s	loc_BF16
0000D926 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D92C                            
0000D92C                            loc_BF16:
0000D92C 117C 0004 0001             		move.b	#4,1(a0)
0000D932 117C 0003 0018             		move.b	#3,$18(a0)
0000D938 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D93E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D944 7000                       		moveq	#0,d0
0000D946 1028 0028                  		move.b	$28(a0),d0
0000D94A D040                       		add.w	d0,d0
0000D94C 0240 000E                  		andi.w	#$E,d0
0000D950 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D954 115A 0019                  		move.b	(a2)+,$19(a0)
0000D958 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D95C 4A28 0028                  		tst.b	$28(a0)
0000D960 6700                       		beq.s	Obj33_ChkGone
0000D962 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D968                            
0000D968                            Obj33_ChkGone:
0000D968 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D96C 7000                       		moveq	#0,d0
0000D96E 1028 0023                  		move.b	$23(a0),d0
0000D972 6700                       		beq.s	loc_BF6E
0000D974 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D97A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D980 6600 0000                  		bne.w	DeleteObject
0000D984                            
0000D984                            loc_BF6E:				; XREF: Obj33_Index
0000D984 4A28 0032                  		tst.b	$32(a0)
0000D988 6600 0000                  		bne.w	loc_C046
0000D98C 7200                       		moveq	#0,d1
0000D98E 1228 0019                  		move.b	$19(a0),d1
0000D992 0641 000B                  		addi.w	#$B,d1
0000D996 343C 0010                  		move.w	#$10,d2
0000D99A 363C 0011                  		move.w	#$11,d3
0000D99E 3828 0008                  		move.w	8(a0),d4
0000D9A2 6100 0000                  		bsr.w	loc_C186
0000D9A6 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D9AC 6600                       		bne.s	loc_BFC6	; if not, branch
0000D9AE 08A8 0007 0028             		bclr	#7,$28(a0)
0000D9B4 3028 0008                  		move.w	8(a0),d0
0000D9B8 0C40 0A20                  		cmpi.w	#$A20,d0
0000D9BC 6500                       		bcs.s	loc_BFC6
0000D9BE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D9C2 6400                       		bcc.s	loc_BFC6
0000D9C4 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D9C8 0440 001C                  		subi.w	#$1C,d0
0000D9CC 3140 000C                  		move.w	d0,$C(a0)
0000D9D0 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D9D6 08E8 0007 0028             		bset	#7,$28(a0)
0000D9DC                            
0000D9DC                            loc_BFC6:
0000D9DC 3028 0008                  		move.w	8(a0),d0
0000D9E0 0240 FF80                  		andi.w	#$FF80,d0
0000D9E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D9E8 0441 0080                  		subi.w	#$80,d1
0000D9EC 0241 FF80                  		andi.w	#$FF80,d1
0000D9F0 9041                       		sub.w	d1,d0
0000D9F2 0C40 0280                  		cmpi.w	#$280,d0
0000D9F6 6200                       		bhi.s	loc_BFE6
0000D9F8 6000 0000                  		bra.w	DisplaySprite
0000D9FC                            ; ===========================================================================
0000D9FC                            
0000D9FC                            loc_BFE6:
0000D9FC 3028 0034                  		move.w	$34(a0),d0
0000DA00 0240 FF80                  		andi.w	#$FF80,d0
0000DA04 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA08 0441 0080                  		subi.w	#$80,d1
0000DA0C 0241 FF80                  		andi.w	#$FF80,d1
0000DA10 9041                       		sub.w	d1,d0
0000DA12 0C40 0280                  		cmpi.w	#$280,d0
0000DA16 6200                       		bhi.s	loc_C016
0000DA18 3168 0034 0008             		move.w	$34(a0),8(a0)
0000DA1E 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000DA24 117C 0004 0024             		move.b	#4,$24(a0)
0000DA2A 6000                       		bra.s	loc_C02C
0000DA2C                            ; ===========================================================================
0000DA2C                            
0000DA2C                            loc_C016:
0000DA2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA30 7000                       		moveq	#0,d0
0000DA32 1028 0023                  		move.b	$23(a0),d0
0000DA36 6700                       		beq.s	loc_C028
0000DA38 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DA3E                            
0000DA3E                            loc_C028:
0000DA3E 6000 0000                  		bra.w	DeleteObject
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            loc_C02C:				; XREF: Obj33_Index
0000DA42 6100 0000                  		bsr.w	ChkObjOnScreen2
0000DA46 6700                       		beq.s	locret_C044
0000DA48 117C 0002 0024             		move.b	#2,$24(a0)
0000DA4E 4228 0032                  		clr.b	$32(a0)
0000DA52 4268 0010                  		clr.w	$10(a0)
0000DA56 4268 0012                  		clr.w	$12(a0)
0000DA5A                            
0000DA5A                            locret_C044:
0000DA5A 4E75                       		rts	
0000DA5C                            ; ===========================================================================
0000DA5C                            
0000DA5C                            loc_C046:				; XREF: loc_BF6E
0000DA5C 3F28 0008                  		move.w	8(a0),-(sp)
0000DA60 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000DA66 6400                       		bcc.s	loc_C056
0000DA68 6100 0000                  		bsr.w	SpeedToPos
0000DA6C                            
0000DA6C                            loc_C056:
0000DA6C 0828 0001 0022             		btst	#1,$22(a0)
0000DA72 6700                       		beq.s	loc_C0A0
0000DA74 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DA7A 4EB9 0000 0000             		jsr	ObjHitFloor
0000DA80 4A41                       		tst.w	d1
0000DA82 6A00 0000                  		bpl.w	loc_C09E
0000DA86 D368 000C                  		add.w	d1,$C(a0)
0000DA8A 4268 0012                  		clr.w	$12(a0)
0000DA8E 08A8 0001 0022             		bclr	#1,$22(a0)
0000DA94 3011                       		move.w	(a1),d0
0000DA96 0240 03FF                  		andi.w	#$3FF,d0
0000DA9A 0C40 016A                  		cmpi.w	#$16A,d0
0000DA9E 6500                       		bcs.s	loc_C09E
0000DAA0 3028 0030                  		move.w	$30(a0),d0
0000DAA4 E640                       		asr.w	#3,d0
0000DAA6 3140 0010                  		move.w	d0,$10(a0)
0000DAAA 117C 0001 0032             		move.b	#1,$32(a0)
0000DAB0 4268 000E                  		clr.w	$E(a0)
0000DAB4                            
0000DAB4                            loc_C09E:
0000DAB4 6000                       		bra.s	loc_C0E6
0000DAB6                            ; ===========================================================================
0000DAB6                            
0000DAB6                            loc_C0A0:
0000DAB6 4A68 0010                  		tst.w	$10(a0)
0000DABA 6700 0000                  		beq.w	loc_C0D6
0000DABE 6B00                       		bmi.s	loc_C0BC
0000DAC0 7600                       		moveq	#0,d3
0000DAC2 1628 0019                  		move.b	$19(a0),d3
0000DAC6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DACC 4A41                       		tst.w	d1		; has block touched a wall?
0000DACE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAD0 6000                       		bra.s	loc_C0E6
0000DAD2                            ; ===========================================================================
0000DAD2                            
0000DAD2                            loc_C0BC:
0000DAD2 7600                       		moveq	#0,d3
0000DAD4 1628 0019                  		move.b	$19(a0),d3
0000DAD8 4643                       		not.w	d3
0000DADA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DAE0 4A41                       		tst.w	d1		; has block touched a wall?
0000DAE2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DAE4 6000                       		bra.s	loc_C0E6
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            Obj33_StopPush:
0000DAE6 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000DAEA 6000                       		bra.s	loc_C0E6
0000DAEC                            ; ===========================================================================
0000DAEC                            
0000DAEC                            loc_C0D6:
0000DAEC 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000DAF4 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000DAFA 6400                       		bcc.s	loc_C104
0000DAFC                            
0000DAFC                            loc_C0E6:
0000DAFC 7200                       		moveq	#0,d1
0000DAFE 1228 0019                  		move.b	$19(a0),d1
0000DB02 0641 000B                  		addi.w	#$B,d1
0000DB06 343C 0010                  		move.w	#$10,d2
0000DB0A 363C 0011                  		move.w	#$11,d3
0000DB0E 381F                       		move.w	(sp)+,d4
0000DB10 6100 0000                  		bsr.w	loc_C186
0000DB14 6100                       		bsr.s	Obj33_ChkLava
0000DB16 6000 FEC4                  		bra.w	loc_BFC6
0000DB1A                            ; ===========================================================================
0000DB1A                            
0000DB1A                            loc_C104:
0000DB1A 381F                       		move.w	(sp)+,d4
0000DB1C 43F8 D000                  		lea	($FFFFD000).w,a1
0000DB20 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB26 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB2C 6000 FECE                  		bra.w	loc_BFE6
0000DB30                            ; ===========================================================================
0000DB30                            
0000DB30                            Obj33_ChkLava:
0000DB30 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000DB36 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000DB38 343C FFE0                  		move.w	#-$20,d2
0000DB3C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000DB42 6700                       		beq.s	Obj33_LoadLava
0000DB44 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000DB4A 6700                       		beq.s	Obj33_LoadLava
0000DB4C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000DB52 6700                       		beq.s	Obj33_LoadLava
0000DB54 4E75                       		rts	
0000DB56                            ; ===========================================================================
0000DB56                            
0000DB56                            Obj33_ChkLava2:
0000DB56 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000DB5C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000DB5E 343C 0020                  		move.w	#$20,d2
0000DB62 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000DB68 6700                       		beq.s	Obj33_LoadLava
0000DB6A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000DB70 6700                       		beq.s	Obj33_LoadLava
0000DB72                            
0000DB72                            Obj33_NoLava:
0000DB72 4E75                       		rts	
0000DB74                            ; ===========================================================================
0000DB74                            
0000DB74                            Obj33_LoadLava:
0000DB74 6100 0000                  		bsr.w	SingleObjLoad
0000DB78 6600                       		bne.s	locret_C184
0000DB7A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000DB7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000DB84 D569 0008                  		add.w	d2,8(a1)
0000DB88 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DB8E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000DB94 2348 003C                  		move.l	a0,$3C(a1)
0000DB98                            
0000DB98                            locret_C184:
0000DB98 4E75                       		rts	
0000DB9A                            ; ===========================================================================
0000DB9A                            
0000DB9A                            loc_C186:				; XREF: loc_BF6E
0000DB9A 1028 0025                  		move.b	$25(a0),d0
0000DB9E 6700 0000                  		beq.w	loc_C218
0000DBA2 5500                       		subq.b	#2,d0
0000DBA4 6600                       		bne.s	loc_C1AA
0000DBA6 6100 B40E                  		bsr.w	ExitPlatform
0000DBAA 0829 0003 0022             		btst	#3,$22(a1)
0000DBB0 6600                       		bne.s	loc_C1A4
0000DBB2 4228 0025                  		clr.b	$25(a0)
0000DBB6 4E75                       		rts	
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            loc_C1A4:
0000DBB8 3404                       		move.w	d4,d2
0000DBBA 6000 B958                  		bra.w	MvSonicOnPtfm
0000DBBE                            ; ===========================================================================
0000DBBE                            
0000DBBE                            loc_C1AA:
0000DBBE 5500                       		subq.b	#2,d0
0000DBC0 6600                       		bne.s	loc_C1F2
0000DBC2 6100 0000                  		bsr.w	SpeedToPos
0000DBC6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DBCC 4EB9 0000 0000             		jsr	ObjHitFloor
0000DBD2 4A41                       		tst.w	d1
0000DBD4 6A00 0000                  		bpl.w	locret_C1F0
0000DBD8 D368 000C                  		add.w	d1,$C(a0)
0000DBDC 4268 0012                  		clr.w	$12(a0)
0000DBE0 4228 0025                  		clr.b	$25(a0)
0000DBE4 3011                       		move.w	(a1),d0
0000DBE6 0240 03FF                  		andi.w	#$3FF,d0
0000DBEA 0C40 016A                  		cmpi.w	#$16A,d0
0000DBEE 6500                       		bcs.s	locret_C1F0
0000DBF0 3028 0030                  		move.w	$30(a0),d0
0000DBF4 E640                       		asr.w	#3,d0
0000DBF6 3140 0010                  		move.w	d0,$10(a0)
0000DBFA 117C 0001 0032             		move.b	#1,$32(a0)
0000DC00 4268 000E                  		clr.w	$E(a0)
0000DC04                            
0000DC04                            locret_C1F0:
0000DC04 4E75                       		rts	
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            loc_C1F2:
0000DC06 6100 0000                  		bsr.w	SpeedToPos
0000DC0A 3028 0008                  		move.w	8(a0),d0
0000DC0E 0240 000C                  		andi.w	#$C,d0
0000DC12 6600 0000                  		bne.w	locret_C2E4
0000DC16 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000DC1C 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000DC22 4268 0010                  		clr.w	$10(a0)
0000DC26 5528 0025                  		subq.b	#2,$25(a0)
0000DC2A 4E75                       		rts	
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            loc_C218:
0000DC2C 6100 0000                  		bsr.w	loc_FAC8
0000DC30 4A44                       		tst.w	d4
0000DC32 6700 0000                  		beq.w	locret_C2E4
0000DC36 6B00 0000                  		bmi.w	locret_C2E4
0000DC3A 4A28 0032                  		tst.b	$32(a0)
0000DC3E 6700                       		beq.s	loc_C230
0000DC40 6000 0000                  		bra.w	locret_C2E4
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            loc_C230:
0000DC44 4A40                       		tst.w	d0
0000DC46 6700 0000                  		beq.w	locret_C2E4
0000DC4A 6B00                       		bmi.s	loc_C268
0000DC4C 0829 0000 0022             		btst	#0,$22(a1)
0000DC52 6600 0000                  		bne.w	locret_C2E4
0000DC56 3F00                       		move.w	d0,-(sp)
0000DC58 7600                       		moveq	#0,d3
0000DC5A 1628 0019                  		move.b	$19(a0),d3
0000DC5E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DC64 301F                       		move.w	(sp)+,d0
0000DC66 4A41                       		tst.w	d1
0000DC68 6B00 0000                  		bmi.w	locret_C2E4
0000DC6C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DC74 7001                       		moveq	#1,d0
0000DC76 323C 0040                  		move.w	#$40,d1
0000DC7A 6000                       		bra.s	loc_C294
0000DC7C                            ; ===========================================================================
0000DC7C                            
0000DC7C                            loc_C268:
0000DC7C 0829 0000 0022             		btst	#0,$22(a1)
0000DC82 6700                       		beq.s	locret_C2E4
0000DC84 3F00                       		move.w	d0,-(sp)
0000DC86 7600                       		moveq	#0,d3
0000DC88 1628 0019                  		move.b	$19(a0),d3
0000DC8C 4643                       		not.w	d3
0000DC8E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DC94 301F                       		move.w	(sp)+,d0
0000DC96 4A41                       		tst.w	d1
0000DC98 6B00                       		bmi.s	locret_C2E4
0000DC9A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DCA2 70FF                       		moveq	#-1,d0
0000DCA4 323C FFC0                  		move.w	#-$40,d1
0000DCA8                            
0000DCA8                            loc_C294:
0000DCA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000DCAC D169 0008                  		add.w	d0,8(a1)
0000DCB0 3341 0014                  		move.w	d1,$14(a1)
0000DCB4 337C 0000 0010             		move.w	#0,$10(a1)
0000DCBA 3F00                       		move.w	d0,-(sp)
0000DCBC 303C 00A7                  		move.w	#$A7,d0
0000DCC0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DCC6 301F                       		move.w	(sp)+,d0
0000DCC8 4A28 0028                  		tst.b	$28(a0)
0000DCCC 6B00                       		bmi.s	locret_C2E4
0000DCCE 3F00                       		move.w	d0,-(sp)
0000DCD0 4EB9 0000 0000             		jsr	ObjHitFloor
0000DCD6 301F                       		move.w	(sp)+,d0
0000DCD8 0C41 0004                  		cmpi.w	#4,d1
0000DCDC 6F00                       		ble.s	loc_C2E0
0000DCDE 317C 0400 0010             		move.w	#$400,$10(a0)
0000DCE4 4A40                       		tst.w	d0
0000DCE6 6A00                       		bpl.s	loc_C2D8
0000DCE8 4468 0010                  		neg.w	$10(a0)
0000DCEC                            
0000DCEC                            loc_C2D8:
0000DCEC 117C 0006 0025             		move.b	#6,$25(a0)
0000DCF2 6000                       		bra.s	locret_C2E4
0000DCF4                            ; ===========================================================================
0000DCF4                            
0000DCF4                            loc_C2E0:
0000DCF4 D368 000C                  		add.w	d1,$C(a0)
0000DCF8                            
0000DCF8                            locret_C2E4:
0000DCF8 4E75                       		rts	
0000DCFA                            ; ===========================================================================
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            Map_obj33:
0000DCFA                            	include "_maps\obj33.asm"
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA 0000                       		dc.w byte_C2EA-Map_obj33
0000DCFC 0000                       		dc.w byte_C2F0-Map_obj33
0000DCFE 01                         byte_C2EA:	dc.b 1
0000DCFF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DD04 04                         byte_C2F0:	dc.b 4
0000DD05 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DD0A F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DD0F F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DD14 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DD1A 00                         		even
0000DD1A 00                         		even
0000DD1A                            
0000DD1A                            ; ===========================================================================
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            ; Object 34 - zone title cards
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            
0000DD1A                            Obj34:					; XREF: Obj_Index
0000DD1A 7000                       		moveq	#0,d0
0000DD1C 1028 0024                  		move.b	$24(a0),d0
0000DD20 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DD24 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DD28                            ; ===========================================================================
0000DD28 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DD2A 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DD2C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD2E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD30                            ; ===========================================================================
0000DD30                            
0000DD30                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DD30 2248                       		movea.l	a0,a1
0000DD32 7000                       		moveq	#0,d0
0000DD34 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DD38 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000DD3E 6600                       		bne.s	Obj34_CheckFZ
0000DD40 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000DD42                            
0000DD42                            Obj34_CheckFZ:
0000DD42 3400                       		move.w	d0,d2
0000DD44 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000DD4A 6600                       		bne.s	Obj34_LoadConfig
0000DD4C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000DD4E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000DD50                            
0000DD50                            Obj34_LoadConfig:
0000DD50 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000DD56 E948                       		lsl.w	#4,d0
0000DD58 D6C0                       		adda.w	d0,a3
0000DD5A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DD60 7203                       		moveq	#3,d1
0000DD62                            
0000DD62                            Obj34_Loop:
0000DD62 12BC 0034                  		move.b	#$34,0(a1)
0000DD66 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DD6A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DD6E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DD72 335A 000A                  		move.w	(a2)+,$A(a1)
0000DD76 135A 0024                  		move.b	(a2)+,$24(a1)
0000DD7A 101A                       		move.b	(a2)+,d0
0000DD7C 6600                       		bne.s	Obj34_ActNumber
0000DD7E 1002                       		move.b	d2,d0
0000DD80                            
0000DD80                            Obj34_ActNumber:
0000DD80 0C00 0007                  		cmpi.b	#7,d0
0000DD84 6600                       		bne.s	Obj34_MakeSprite
0000DD86 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000DD8A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000DD90 6600                       		bne.s	Obj34_MakeSprite
0000DD92 5300                       		subq.b	#1,d0
0000DD94                            
0000DD94                            Obj34_MakeSprite:
0000DD94 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DD98 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DDA0 337C 8580 0002             		move.w	#$8580,2(a1)
0000DDA6 137C 0078 0019             		move.b	#$78,$19(a1)
0000DDAC 137C 0000 0001             		move.b	#0,1(a1)
0000DDB2 137C 0000 0018             		move.b	#0,$18(a1)
0000DDB8 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DDBE 43E9 0040                  		lea	$40(a1),a1	; next object
0000DDC2 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DDC6                            
0000DDC6                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DDC6 7210                       		moveq	#$10,d1		; set horizontal speed
0000DDC8 3028 0030                  		move.w	$30(a0),d0
0000DDCC B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DDD0 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DDD2 6C00                       		bge.s	Obj34_Move
0000DDD4 4441                       		neg.w	d1
0000DDD6                            
0000DDD6                            Obj34_Move:
0000DDD6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DDDA                            
0000DDDA                            loc_C3C8:
0000DDDA 3028 0008                  		move.w	8(a0),d0
0000DDDE 6B00                       		bmi.s	locret_C3D8
0000DDE0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DDE4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DDE6 6000 0000                  		bra.w	DisplaySprite
0000DDEA                            ; ===========================================================================
0000DDEA                            
0000DDEA                            locret_C3D8:
0000DDEA 4E75                       		rts	
0000DDEC                            ; ===========================================================================
0000DDEC                            
0000DDEC                            Obj34_Wait:				; XREF: Obj34_Index
0000DDEC 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DDF0 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DDF2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DDF6 6000 0000                  		bra.w	DisplaySprite
0000DDFA                            ; ===========================================================================
0000DDFA                            
0000DDFA                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DDFA 4A28 0001                  		tst.b	1(a0)
0000DDFE 6A00                       		bpl.s	Obj34_ChangeArt
0000DE00 7220                       		moveq	#$20,d1
0000DE02 3028 0032                  		move.w	$32(a0),d0
0000DE06 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DE0A 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DE0C 6C00                       		bge.s	Obj34_Move2
0000DE0E 4441                       		neg.w	d1
0000DE10                            
0000DE10                            Obj34_Move2:
0000DE10 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DE14 3028 0008                  		move.w	8(a0),d0
0000DE18 6B00                       		bmi.s	locret_C412
0000DE1A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DE1E 6400                       		bcc.s	locret_C412	; if yes, branch
0000DE20 6000 0000                  		bra.w	DisplaySprite
0000DE24                            ; ===========================================================================
0000DE24                            
0000DE24                            locret_C412:
0000DE24 4E75                       		rts	
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DE26 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DE2C 6600                       		bne.s	Obj34_Delete
0000DE2E 7002                       		moveq	#2,d0
0000DE30 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
0000DE36 7000                       		moveq	#0,d0
0000DE38 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DE3C 0640 0015                  		addi.w	#$15,d0
0000DE40 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns
0000DE46                            
0000DE46                            Obj34_Delete:
0000DE46 6000 0000                  		bra.w	DeleteObject
0000DE4A                            ; ===========================================================================
0000DE4A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000DE4C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000DE4E 00E4                       		dc.w $E4
0000DE50 0206                       		dc.b 2,	6
0000DE52 00EA                       		dc.w $EA
0000DE54 0207                       		dc.b 2,	7
0000DE56 00E0                       		dc.w $E0
0000DE58 020A                       		dc.b 2,	$A
0000DE5A                            ; ---------------------------------------------------------------------------
0000DE5A                            ; Title	card configuration data
0000DE5A                            ; Format:
0000DE5A                            ; 4 bytes per item (YYYY XXXX)
0000DE5A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DE5A                            ; ---------------------------------------------------------------------------
0000DE5A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000DE6A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000DE7A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000DE8A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000DE9A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000DEAA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000DEBA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000DECA                            ; ===========================================================================
0000DECA                            ; ---------------------------------------------------------------------------
0000DECA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DECA                            ; ---------------------------------------------------------------------------
0000DECA                            
0000DECA                            Obj39:					; XREF: Obj_Index
0000DECA 7000                       		moveq	#0,d0
0000DECC 1028 0024                  		move.b	$24(a0),d0
0000DED0 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DED4 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DED8                            ; ===========================================================================
0000DED8 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DEDA 0000                       		dc.w loc_C50C-Obj39_Index
0000DEDC 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DEDE                            ; ===========================================================================
0000DEDE                            
0000DEDE                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DEDE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DEE2 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DEE4 4E75                       		rts	
0000DEE6                            ; ===========================================================================
0000DEE6                            
0000DEE6                            Obj39_Main:
0000DEE6 5428 0024                  		addq.b	#2,$24(a0)
0000DEEA 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DEF0 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DEF6 6700                       		beq.s	loc_C4EC	; if not, branch
0000DEF8 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DEFE                            
0000DEFE                            loc_C4EC:
0000DEFE 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DF04 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DF0C 317C 855E 0002             		move.w	#$855E,2(a0)
0000DF12 117C 0000 0001             		move.b	#0,1(a0)
0000DF18 117C 0000 0018             		move.b	#0,$18(a0)
0000DF1E                            
0000DF1E                            loc_C50C:				; XREF: Obj39_Index
0000DF1E 7210                       		moveq	#$10,d1		; set horizontal speed
0000DF20 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DF26 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DF28 6500                       		bcs.s	Obj39_Move
0000DF2A 4441                       		neg.w	d1
0000DF2C                            
0000DF2C                            Obj39_Move:
0000DF2C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DF30 6000 0000                  		bra.w	DisplaySprite
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            Obj39_SetWait:				; XREF: Obj39_Main
0000DF34 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DF3A 5428 0024                  		addq.b	#2,$24(a0)
0000DF3E 4E75                       		rts	
0000DF40                            ; ===========================================================================
0000DF40                            
0000DF40                            Obj39_Wait:				; XREF: Obj39_Index
0000DF40 1038 F605                  		move.b	($FFFFF605).w,d0
0000DF44 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000DF48 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000DF4A 0828 0000 001A             		btst	#0,$1A(a0)
0000DF50 6600                       		bne.s	Obj39_Display
0000DF52 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000DF56 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000DF58 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DF5C 6000 0000                  		bra.w	DisplaySprite
0000DF60                            ; ===========================================================================
0000DF60                            
0000DF60                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000DF60 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000DF64 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000DF66 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000DF6C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000DF70 6600                       		bne.s	Obj39_Display	; if yes, branch
0000DF72 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set mode to 0 (Sega screen)
0000DF78 6000                       		bra.s	Obj39_Display
0000DF7A                            ; ===========================================================================
0000DF7A                            
0000DF7A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000DF7A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DF80                            
0000DF80                            Obj39_Display:				; XREF: Obj39_ChgMode
0000DF80 6000 0000                  		bra.w	DisplaySprite
0000DF84                            ; ===========================================================================
0000DF84                            ; ---------------------------------------------------------------------------
0000DF84                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000DF84                            ; ---------------------------------------------------------------------------
0000DF84                            
0000DF84                            Obj3A:					; XREF: Obj_Index
0000DF84 7000                       		moveq	#0,d0
0000DF86 1028 0024                  		move.b	$24(a0),d0
0000DF8A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000DF8E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000DF92                            ; ===========================================================================
0000DF92 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000DF94 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000DF96 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF98 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000DF9A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF9C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000DF9E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DFA0 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000DFA2 0000                       		dc.w loc_C766-Obj3A_Index
0000DFA4                            ; ===========================================================================
0000DFA4                            
0000DFA4                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000DFA4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DFA8 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000DFAA 4E75                       		rts	
0000DFAC                            ; ===========================================================================
0000DFAC                            
0000DFAC                            Obj3A_Main:
0000DFAC 2248                       		movea.l	a0,a1
0000DFAE 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000DFB4 7206                       		moveq	#6,d1
0000DFB6                            
0000DFB6                            Obj3A_Loop:
0000DFB6 12BC 003A                  		move.b	#$3A,0(a1)
0000DFBA 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000DFBE 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000DFC2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DFC6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DFCA 135A 0024                  		move.b	(a2)+,$24(a1)
0000DFCE 101A                       		move.b	(a2)+,d0
0000DFD0 0C00 0006                  		cmpi.b	#6,d0
0000DFD4 6600                       		bne.s	loc_C5CA
0000DFD6 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000DFDA                            
0000DFDA                            loc_C5CA:
0000DFDA 1340 001A                  		move.b	d0,$1A(a1)
0000DFDE 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000DFE6 337C 8580 0002             		move.w	#$8580,2(a1)
0000DFEC 137C 0000 0001             		move.b	#0,1(a1)
0000DFF2 43E9 0040                  		lea	$40(a1),a1
0000DFF6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000DFFA                            
0000DFFA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000DFFA 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFFC 3028 0030                  		move.w	$30(a0),d0
0000E000 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E004 6700                       		beq.s	loc_C61A	; if yes, branch
0000E006 6C00                       		bge.s	Obj3A_Move
0000E008 4441                       		neg.w	d1
0000E00A                            
0000E00A                            Obj3A_Move:
0000E00A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E00E                            
0000E00E                            loc_C5FE:				; XREF: loc_C61A
0000E00E 3028 0008                  		move.w	8(a0),d0
0000E012 6B00                       		bmi.s	locret_C60E
0000E014 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E018 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E01A 6000 0000                  		bra.w	DisplaySprite
0000E01E                            ; ===========================================================================
0000E01E                            
0000E01E                            locret_C60E:
0000E01E 4E75                       		rts	
0000E020                            ; ===========================================================================
0000E020                            
0000E020                            loc_C610:				; XREF: loc_C61A
0000E020 117C 000E 0024             		move.b	#$E,$24(a0)
0000E026 6000 0000                  		bra.w	Obj3A_ChkPos2
0000E02A                            ; ===========================================================================
0000E02A                            
0000E02A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000E02A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E030 67EE                       		beq.s	loc_C610
0000E032 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E038 66D4                       		bne.s	loc_C5FE
0000E03A 5428 0024                  		addq.b	#2,$24(a0)
0000E03E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E044                            
0000E044                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E044 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E048 6600                       		bne.s	Obj3A_Display
0000E04A 5428 0024                  		addq.b	#2,$24(a0)
0000E04E                            
0000E04E                            Obj3A_Display:
0000E04E 6000 0000                  		bra.w	DisplaySprite
0000E052                            ; ===========================================================================
0000E052                            
0000E052                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E052 6100 0000                  		bsr.w	DisplaySprite
0000E056 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E05C 7000                       		moveq	#0,d0
0000E05E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E062 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E064 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E068 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E06E                            
0000E06E                            Obj3A_RingBonus:
0000E06E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E072 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E074 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E078 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E07E                            
0000E07E                            Obj3A_ChkBonus:
0000E07E 4A40                       		tst.w	d0		; is there any bonus?
0000E080 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E082 303C 00C5                  		move.w	#$C5,d0
0000E086 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E08C 5428 0024                  		addq.b	#2,$24(a0)
0000E090 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E096 6600                       		bne.s	Obj3A_SetDelay
0000E098 5828 0024                  		addq.b	#4,$24(a0)
0000E09C                            
0000E09C                            Obj3A_SetDelay:
0000E09C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E0A2                            
0000E0A2                            locret_C692:
0000E0A2 4E75                       		rts	
0000E0A4                            ; ===========================================================================
0000E0A4                            
0000E0A4                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E0A4 4EB9 0000 0000             		jsr	AddPoints
0000E0AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E0AE 0200 0003                  		andi.b	#3,d0
0000E0B2 66EE                       		bne.s	locret_C692
0000E0B4 303C 00CD                  		move.w	#$CD,d0
0000E0B8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E0BE                            ; ===========================================================================
0000E0BE                            
0000E0BE                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E0BE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E0C2 0240 0007                  		andi.w	#7,d0
0000E0C6 E748                       		lsl.w	#3,d0
0000E0C8 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000E0CC 0241 0003                  		andi.w	#3,d1
0000E0D0 D241                       		add.w	d1,d1
0000E0D2 D041                       		add.w	d1,d0
0000E0D4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E0D8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E0DC 4A40                       		tst.w	d0
0000E0DE 6600                       		bne.s	Obj3A_ChkSS
0000E0E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E0E6 6000                       		bra.s	Obj3A_Display2
0000E0E8                            ; ===========================================================================
0000E0E8                            
0000E0E8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E0E8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E0EC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E0F0 6700                       		beq.s	loc_C6EA	; if not, branch
0000E0F2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E0F8 6000                       		bra.s	Obj3A_Display2
0000E0FA                            ; ===========================================================================
0000E0FA                            
0000E0FA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000E0FA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E100                            
0000E100                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E100 6000 0000                  		bra.w	DisplaySprite
0000E104                            ; ===========================================================================
0000E104                            ; ---------------------------------------------------------------------------
0000E104                            ; Level	order array
0000E104                            ; ---------------------------------------------------------------------------
0000E104                            LevelOrder:
0000E104 0200 0000                  		dc.w $0200, $0000 	;GHZ1 -> MZ
0000E108 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E10C 0101 0102                  		dc.w $0101, $0102 	;LZ1 -> LZ2 -> LZ3
0000E110 0300 0502                  		dc.w $0300, $0502 	;LZ3 -> SLZ1 or if act 4 -> FZ
0000E114 0201 0400                  		dc.w $0201, $0400 	;MZ1 -> MZ2 -> SYZ 
0000E118 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E11C 0301 0302                  		dc.w $0301, $0302 	;SLZ1 -> SLZ2 -> SLZ3
0000E120 0500 0000                  		dc.w $0500, $0000 	;SLZ3 -> SYZ1
0000E124 0401 0402                  		dc.w $0401, $0402 	;SYZ1 -> SYZ2 -> SYZ3
0000E128 0100 0000                  		dc.w $0100, $0000 	;SYZ3 -> LZ1?
0000E12C 0501 0103                  		dc.w $0501, $0103 	;SBZ1 -> SBZ2 -> LZ4
0000E130                            		even
0000E130                            ; ===========================================================================
0000E130                            
0000E130                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E130 7220                       		moveq	#$20,d1		; set horizontal speed
0000E132 3028 0032                  		move.w	$32(a0),d0
0000E136 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E13A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E13C 6C00                       		bge.s	Obj3A_Move2
0000E13E 4441                       		neg.w	d1
0000E140                            
0000E140                            Obj3A_Move2:
0000E140 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E144 3028 0008                  		move.w	8(a0),d0
0000E148 6B00                       		bmi.s	locret_C748
0000E14A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E14E 6400                       		bcc.s	locret_C748	; if yes, branch
0000E150 6000 0000                  		bra.w	DisplaySprite
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            locret_C748:
0000E154 4E75                       		rts	
0000E156                            ; ===========================================================================
0000E156                            
0000E156                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E156 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E15C 6600 0000                  		bne.w	DeleteObject
0000E160 5428 0024                  		addq.b	#2,$24(a0)
0000E164 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E168 303C 008D                  		move.w	#$8D,d0
0000E16C 4EF9 0000 12C6             		jmp	(PlaySound).l	; play FZ music
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            loc_C766:				; XREF: Obj3A_Index
0000E172 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E176 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E17C 6700 0000                  		beq.w	DeleteObject
0000E180 4E75                       		rts	
0000E182                            ; ===========================================================================
0000E182 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E188 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E18A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E190 0201                       		dc.b 2,	1
0000E192 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000E198 0206                       		dc.b 2,	6
0000E19A 0520 0120 00EC             		dc.w $520, $120, $EC
0000E1A0 0202                       		dc.b 2,	2
0000E1A2 0540 0120 00FC             		dc.w $540, $120, $FC
0000E1A8 0203                       		dc.b 2,	3
0000E1AA 0560 0120 010C             		dc.w $560, $120, $10C
0000E1B0 0204                       		dc.b 2,	4
0000E1B2 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E1B8 0205                       		dc.b 2,	5
0000E1BA                            ; ===========================================================================
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            ; Object 7E - special stage results screen
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            
0000E1BA                            Obj7E:					; XREF: Obj_Index
0000E1BA 7000                       		moveq	#0,d0
0000E1BC 1028 0024                  		move.b	$24(a0),d0
0000E1C0 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E1C4 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E1C8                            ; ===========================================================================
0000E1C8 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E1CA 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E1CC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1CE 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E1D0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1D4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D6 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E1D8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1DA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1DC 0000                       		dc.w loc_C91A-Obj7E_Index
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E1DE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E1E2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E1E4 4E75                       		rts	
0000E1E6                            ; ===========================================================================
0000E1E6                            
0000E1E6                            Obj7E_Main:
0000E1E6 2248                       		movea.l	a0,a1
0000E1E8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E1EE 7203                       		moveq	#3,d1
0000E1F0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E1F6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E1F8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E1FA                            
0000E1FA                            Obj7E_Loop:
0000E1FA 12BC 007E                  		move.b	#$7E,0(a1)
0000E1FE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E202 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E206 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E20A 135A 0024                  		move.b	(a2)+,$24(a1)
0000E20E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E212 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E21A 337C 8580 0002             		move.w	#$8580,2(a1)
0000E220 137C 0000 0001             		move.b	#0,1(a1)
0000E226 43E9 0040                  		lea	$40(a1),a1
0000E22A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E22E                            
0000E22E 7007                       		moveq	#7,d0
0000E230 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E234 6700                       		beq.s	loc_C842
0000E236 7000                       		moveq	#0,d0
0000E238 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E23C 6600                       		bne.s	loc_C842	; if not, branch
0000E23E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E240 317C 0018 0008             		move.w	#$18,8(a0)
0000E246 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E24C                            
0000E24C                            loc_C842:
0000E24C 1140 001A                  		move.b	d0,$1A(a0)
0000E250                            
0000E250                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E250 7210                       		moveq	#$10,d1		; set horizontal speed
0000E252 3028 0030                  		move.w	$30(a0),d0
0000E256 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E25A 6700                       		beq.s	loc_C86C	; if yes, branch
0000E25C 6C00                       		bge.s	Obj7E_Move
0000E25E 4441                       		neg.w	d1
0000E260                            
0000E260                            Obj7E_Move:
0000E260 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E264                            
0000E264                            loc_C85A:				; XREF: loc_C86C
0000E264 3028 0008                  		move.w	8(a0),d0
0000E268 6B00                       		bmi.s	locret_C86A
0000E26A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E26E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E270 6000 0000                  		bra.w	DisplaySprite
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            locret_C86A:
0000E274 4E75                       		rts	
0000E276                            ; ===========================================================================
0000E276                            
0000E276                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E276 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E27C 66E6                       		bne.s	loc_C85A
0000E27E 5428 0024                  		addq.b	#2,$24(a0)
0000E282 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E288 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E28E                            
0000E28E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E28E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E292 6600                       		bne.s	Obj7E_Display
0000E294 5428 0024                  		addq.b	#2,$24(a0)
0000E298                            
0000E298                            Obj7E_Display:
0000E298 6000 0000                  		bra.w	DisplaySprite
0000E29C                            ; ===========================================================================
0000E29C                            
0000E29C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E29C 6100 0000                  		bsr.w	DisplaySprite
0000E2A0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E2A6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E2AA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E2AC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E2B2 700A                       		moveq	#10,d0		; add 10 to score
0000E2B4 4EB9 0000 0000             		jsr	AddPoints
0000E2BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E2BE 0200 0003                  		andi.b	#3,d0
0000E2C2 6600                       		bne.s	locret_C8EA
0000E2C4 303C 00CD                  		move.w	#$CD,d0
0000E2C8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E2CE                            ; ===========================================================================
0000E2CE                            
0000E2CE                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E2CE 303C 00C5                  		move.w	#$C5,d0
0000E2D2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E2D8 5428 0024                  		addq.b	#2,$24(a0)
0000E2DC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E2E2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E2E8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E2EA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E2F0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E2F4                            
0000E2F4                            locret_C8EA:
0000E2F4 4E75                       		rts	
0000E2F6                            ; ===========================================================================
0000E2F6                            
0000E2F6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E2F6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E2FC 6000 0000                  		bra.w	DisplaySprite
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E300 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E306 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E30C 303C 00BF                  		move.w	#$BF,d0
0000E310 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play continues music
0000E316 5428 0024                  		addq.b	#2,$24(a0)
0000E31A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E320 6000 0000                  		bra.w	DisplaySprite
0000E324                            ; ===========================================================================
0000E324                            
0000E324                            loc_C91A:				; XREF: Obj7E_Index
0000E324 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E328 0200 000F                  		andi.b	#$F,d0
0000E32C 6600                       		bne.s	Obj7E_Display2
0000E32E 0868 0000 001A             		bchg	#0,$1A(a0)
0000E334                            
0000E334                            Obj7E_Display2:
0000E334 6000 0000                  		bra.w	DisplaySprite
0000E338                            ; ===========================================================================
0000E338 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E33E 0200                       		dc.b 2,	0		; rountine number, frame number
0000E340 0320 0120 0118             		dc.w $320, $120, $118
0000E346 0201                       		dc.b 2,	1
0000E348 0360 0120 0128             		dc.w $360, $120, $128
0000E34E 0202                       		dc.b 2,	2
0000E350 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E356 0203                       		dc.b 2,	3
0000E358 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E35E 0206                       		dc.b 2,	6
0000E360                            ; ===========================================================================
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            ; Object 7F - chaos emeralds from the special stage results screen
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            
0000E360                            Obj7F:					; XREF: Obj_Index
0000E360 7000                       		moveq	#0,d0
0000E362 1028 0024                  		move.b	$24(a0),d0
0000E366 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E36A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E36E                            ; ===========================================================================
0000E36E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E370 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E372                            
0000E372                            ; ---------------------------------------------------------------------------
0000E372                            ; X-axis positions for chaos emeralds
0000E372                            ; ---------------------------------------------------------------------------
0000E372 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E37E                            ; ===========================================================================
0000E37E                            
0000E37E                            Obj7F_Main:				; XREF: Obj7F_Index
0000E37E 2248                       		movea.l	a0,a1
0000E380 45F9 0000 E372             		lea	(Obj7F_PosData).l,a2
0000E386 7400                       		moveq	#0,d2
0000E388 7200                       		moveq	#0,d1
0000E38A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E38E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E390 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E394                            
0000E394                            Obj7F_Loop:
0000E394 12BC 007F                  		move.b	#$7F,0(a1)
0000E398 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E39C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E3A2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E3A6 1633 2000                  		move.b	(a3,d2.w),d3
0000E3AA 1343 001A                  		move.b	d3,$1A(a1)
0000E3AE 1343 001C                  		move.b	d3,$1C(a1)
0000E3B2 5202                       		addq.b	#1,d2
0000E3B4 5429 0024                  		addq.b	#2,$24(a1)
0000E3B8 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E3C0 337C 8541 0002             		move.w	#$8541,2(a1)
0000E3C6 137C 0000 0001             		move.b	#0,1(a1)
0000E3CC 43E9 0040                  		lea	$40(a1),a1	; next object
0000E3D0 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E3D4                            
0000E3D4                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E3D4 1028 001A                  		move.b	$1A(a0),d0
0000E3D8 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E3DE 0C00 0006                  		cmpi.b	#6,d0
0000E3E2 6600                       		bne.s	Obj7F_Display
0000E3E4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E3EA                            
0000E3EA                            Obj7F_Display:
0000E3EA 6000 0000                  		bra.w	DisplaySprite
0000E3EE                            ; ===========================================================================
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - zone title cards
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            Map_obj34:	
0000E3EE                            
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            Map_obj39:
0000E3EE                            	include "_maps\obj34_title_card.asm"
0000E3EE                            ; --------------------------------------------------------------------------------
0000E3EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E3EE                            ; --------------------------------------------------------------------------------
0000E3EE                            
0000E3EE                            SME_1mMNn:	
0000E3EE 0000 0000                  		dc.w SME_1mMNn_18-SME_1mMNn, SME_1mMNn_41-SME_1mMNn	
0000E3F2 0000 0000                  		dc.w SME_1mMNn_D8-SME_1mMNn, SME_1mMNn_110-SME_1mMNn	
0000E3F6 0000 0000                  		dc.w SME_1mMNn_198-SME_1mMNn, SME_1mMNn_1F8-SME_1mMNn	
0000E3FA 0000 0000                  		dc.w SME_1mMNn_253-SME_1mMNn, SME_1mMNn_272-SME_1mMNn	
0000E3FE 0000 0000                  		dc.w SME_1mMNn_27D-SME_1mMNn, SME_1mMNn_288-SME_1mMNn	
0000E402 0000 0000                  		dc.w SME_1mMNn_293-SME_1mMNn, SME_1mMNn_2D5-SME_1mMNn	
0000E406 08                         SME_1mMNn_18:	dc.b 8	
0000E407 F805 0042 D4               		dc.b $F8, 5, 0, $42, $D4	
0000E40C F805 0046 E4               		dc.b $F8, 5, 0, $46, $E4	
0000E411 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
0000E416 F805 0032 04               		dc.b $F8, 5, 0, $32, 4	
0000E41B F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
0000E420 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000E425 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C	
0000E42A F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E42F 1E                         SME_1mMNn_41:	dc.b $1E	
0000E430 F805 0032 84               		dc.b $F8, 5, 0, $32, $84	
0000E435 F805 001C 94               		dc.b $F8, 5, 0, $1C, $94	
0000E43A F800 0056 A4               		dc.b $F8, 0, 0, $56, $A4	
0000E43F F805 003E B4               		dc.b $F8, 5, 0, $3E, $B4	
0000E444 F805 001C C4               		dc.b $F8, 5, 0, $1C, $C4	
0000E449 F801 0020 D4               		dc.b $F8, 1, 0, $20, $D4	
0000E44E F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	
0000E453 F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E458 F805 003E FC               		dc.b $F8, 5, 0, $3E, $FC	
0000E45D F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E462 F805 002E 1C               		dc.b $F8, 5, 0, $2E, $1C	
0000E467 F800 0056 3C               		dc.b $F8, 0, 0, $56, $3C	
0000E46C F805 004A 4C               		dc.b $F8, 5, 0, $4A, $4C	
0000E471 F805 0032 5C               		dc.b $F8, 5, 0, $32, $5C	
0000E476 F805 0046 6C               		dc.b $F8, 5, 0, $46, $6C	
0000E47B F800 0056 7C               		dc.b $F8, 0, 0, $56, $7C	
0000E480 F805 0014 8C               		dc.b $F8, 5, 0, $14, $8C	
0000E485 F805 0046 9C               		dc.b $F8, 5, 0, $46, $9C	
0000E48A F805 0008 AC               		dc.b $F8, 5, 0, 8, $AC	
0000E48F F805 0022 BC               		dc.b $F8, 5, 0, $22, $BC	
0000E494 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E499 F805 000C DC               		dc.b $F8, 5, 0, $C, $DC	
0000E49E F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E4A3 F805 0046 FC               		dc.b $F8, 5, 0, $46, $FC	
0000E4A8 F805 0036 0C               		dc.b $F8, 5, 0, $36, $C	
0000E4AD F800 0056 1C               		dc.b $F8, 0, 0, $56, $1C	
0000E4B2 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	
0000E4B7 F805 0032 3C               		dc.b $F8, 5, 0, $32, $3C	
0000E4BC F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	
0000E4C1 0BF8 0500 0C               		dc.b $B, $F8, 5, 0, $C	
0000E4C6 0B                         SME_1mMNn_D8:	dc.b $B	
0000E4C7 F805 000C A4               		dc.b $F8, 5, 0, $C, $A4	
0000E4CC F805 004E B4               		dc.b $F8, 5, 0, $4E, $B4	
0000E4D1 F801 0020 C4               		dc.b $F8, 1, 0, $20, $C4	
0000E4D6 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E4DB F805 002E DC               		dc.b $F8, 5, 0, $2E, $DC	
0000E4E0 F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E4E5 F805 000C FC               		dc.b $F8, 5, 0, $C, $FC	
0000E4EA F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E4EF F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C	
0000E4F4 F805 003A 2C               		dc.b $F8, 5, 0, $3A, $2C	
0000E4F9 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	
0000E4FE 1B                         SME_1mMNn_110:	dc.b $1B	
0000E4FF F801 0020 CC               		dc.b $F8, 1, 0, $20, $CC	
0000E504 F800 0056 D4               		dc.b $F8, 0, 0, $56, $D4	
0000E509 F805 0042 E4               		dc.b $F8, 5, 0, $42, $E4	
0000E50E F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
0000E513 F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E518 F805 002E 0C               		dc.b $F8, 5, 0, $2E, $C	
0000E51D F805 0022 1C               		dc.b $F8, 5, 0, $22, $1C	
0000E522 F800 0056 2C               		dc.b $F8, 0, 0, $56, $2C	
0000E527 F801 0020 3C               		dc.b $F8, 1, 0, $20, $3C	
0000E52C F800 0056 44               		dc.b $F8, 0, 0, $56, $44	
0000E531 F805 001C 54               		dc.b $F8, 5, 0, $1C, $54	
0000E536 F805 0000 64               		dc.b $F8, 5, 0, 0, $64	
0000E53B F805 0046 74               		dc.b $F8, 5, 0, $46, $74	
0000E540 F805 0010 84               		dc.b $F8, 5, 0, $10, $84	
0000E545 F800 0056 94               		dc.b $F8, 0, 0, $56, $94	
0000E54A F805 0000 A4               		dc.b $F8, 5, 0, 0, $A4	
0000E54F F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
0000E554 F805 0036 C4               		dc.b $F8, 5, 0, $36, $C4	
0000E559 F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E55E F805 002E E4               		dc.b $F8, 5, 0, $2E, $E4	
0000E563 F805 000C F4               		dc.b $F8, 5, 0, $C, $F4	
0000E568 F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E56D F805 0008 0C               		dc.b $F8, 5, 0, 8, $C	
0000E572 F801 0020 1C               		dc.b $F8, 1, 0, $20, $1C	
0000E577 F805 0042 24               		dc.b $F8, 5, 0, $42, $24	
0000E57C F801 0020 34               		dc.b $F8, 1, 0, $20, $34	
0000E581 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	
0000E586 13                         SME_1mMNn_198:	dc.b $13	
0000E587 F805 002A 8C               		dc.b $F8, 5, 0, $2A, $8C	
0000E58C F805 004A 9C               		dc.b $F8, 5, 0, $4A, $9C	
0000E591 F800 0056 AC               		dc.b $F8, 0, 0, $56, $AC	
0000E596 F805 0042 BC               		dc.b $F8, 5, 0, $42, $BC	
0000E59B F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E5A0 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
0000E5A5 F805 0042 EC               		dc.b $F8, 5, 0, $42, $EC	
0000E5AA F805 001C FC               		dc.b $F8, 5, 0, $1C, $FC	
0000E5AF F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E5B4 F805 0014 1C               		dc.b $F8, 5, 0, $14, $1C	
0000E5B9 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E5BE F805 0010 3C               		dc.b $F8, 5, 0, $10, $3C	
0000E5C3 F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E5C8 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E5CD F805 0014 6C               		dc.b $F8, 5, 0, $14, $6C	
0000E5D2 F805 0046 7C               		dc.b $F8, 5, 0, $46, $7C	
0000E5D7 F805 002E 8C               		dc.b $F8, 5, 0, $2E, $8C	
0000E5DC F805 002E 9C               		dc.b $F8, 5, 0, $2E, $9C	
0000E5E1 F805 004A AC               		dc.b $F8, 5, 0, $4A, $AC	
0000E5E6 12                         SME_1mMNn_1F8:	dc.b $12	
0000E5E7 F805 004A 84               		dc.b $F8, 5, 0, $4A, $84	
0000E5EC F805 0032 94               		dc.b $F8, 5, 0, $32, $94	
0000E5F1 F805 0046 A4               		dc.b $F8, 5, 0, $46, $A4	
0000E5F6 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	
0000E5FB F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E600 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
0000E605 F801 0020 F4               		dc.b $F8, 1, 0, $20, $F4	
0000E60A F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E60F F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E614 F805 001C 1C               		dc.b $F8, 5, 0, $1C, $1C	
0000E619 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E61E F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E623 F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E628 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E62D F805 002E 6C               		dc.b $F8, 5, 0, $2E, $6C	
0000E632 F805 0032 7C               		dc.b $F8, 5, 0, $32, $7C	
0000E637 F805 0010 8C               		dc.b $F8, 5, 0, $10, $8C	
0000E63C 06F8 0500 18               		dc.b 6, $F8, 5, 0, $18	
0000E641 06                         SME_1mMNn_253:	dc.b 6	
0000E642 F805 0018 CC               		dc.b $F8, 5, 0, $18, $CC	
0000E647 F805 0032 DC               		dc.b $F8, 5, 0, $32, $DC	
0000E64C F805 001C EC               		dc.b $F8, 5, 0, $1C, $EC	
0000E651 F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E656 F805 002E 0C               		dc.b $F8, 5, 0, $2E, $C	
0000E65B F805 004A 1C               		dc.b $F8, 5, 0, $4A, $1C	
0000E660 02                         SME_1mMNn_272:	dc.b 2	
0000E661 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E666 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
0000E66B 02                         SME_1mMNn_27D:	dc.b 2	
0000E66C 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E671 F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
0000E676 02                         SME_1mMNn_288:	dc.b 2	
0000E677 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E67C F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
0000E681 0D                         SME_1mMNn_293:	dc.b $D	
0000E682 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
0000E687 E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
0000E68C EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
0000E691 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
0000E696 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
0000E69B 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
0000E6A0 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
0000E6A5 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
0000E6AA EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
0000E6AF F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
0000E6B4 FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
0000E6B9 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
0000E6BE 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
0000E6C3 05                         SME_1mMNn_2D5:	dc.b 5	
0000E6C4 F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
0000E6C9 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
0000E6CE F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
0000E6D3 F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
0000E6D8 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
0000E6DE 00                         		even
0000E6DE 00                         		even
0000E6DE                            
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE                            Map_obj3A:	
0000E6DE                            	include "_maps\obj3A_passed.asm"
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E6DE                            ; ---------------------------------------------------------------------------
0000E6DE 0000                       		dc.w byte_CBEA-Map_obj3A
0000E6E0 0000                       		dc.w byte_CC13-Map_obj3A
0000E6E2 0000                       		dc.w byte_CC32-Map_obj3A
0000E6E4 0000                       		dc.w byte_CC51-Map_obj3A
0000E6E6 0000                       		dc.w byte_CC75-Map_obj3A
0000E6E8                            	;	dc.w byte_CB47-Map_obj3A
0000E6E8                            	;	dc.w byte_CB26-Map_obj3A
0000E6E8                            	;	dc.w byte_CB31-Map_obj3A
0000E6E8                            	;	dc.w byte_CB3C-Map_obj3A
0000E6E8 09                         byte_CBEA:	dc.b 9	;  SONIC HAS | LOUER HAS
0000E6E9 F805 0026 B8               		dc.b $F8, 5, 0, $26, $B8	; L
0000E6EE F805 0032 C8               		dc.b $F8, 5, 0, $32, $C8	; O
0000E6F3 F805 0046 D8               		dc.b $F8, 5, 0, $46, $D8	; U
0000E6F8 F805 0010 E8               		dc.b $F8, 5, 0, $10, $E8	; E
0000E6FD F805 003A F8               		dc.b $F8, 5, 0, $3A, $F8	; R
0000E702 F800 0056 08               		dc.b $F8, 0, 0, $56, $8	; Space
0000E707 F805 001C 18               		dc.b $F8, 5, 0, $1C, $18	; H
0000E70C F805 0000 28               		dc.b $F8, 5, 0, 0, $28		; A
0000E711 F805 003E 38               		dc.b $F8, 5, 0, $3E, $38	; S
0000E716 07                         byte_CC13:	dc.b 7	;  PASSED | ABORTED
0000E717 F805 0000 C8               		dc.b $F8, 5, 0, 0, $C8		; A
0000E71C F805 0004 D8               		dc.b $F8, 5, 0, 4, $D8		; B
0000E721 F805 0032 E8               		dc.b $F8, 5, 0, $32, $E8	; O
0000E726 F805 003A F8               		dc.b $F8, 5, 0, $3A, $F8	; R
0000E72B F805 0042 08               		dc.b $F8, 5, 0, $42, $8	; T
0000E730 F805 0010 18               		dc.b $F8, 5, 0, $10, $18	; E
0000E735 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000E73A 06                         byte_CC32:	dc.b 6			; SCORE
0000E73B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E740 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E745 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E74A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E74F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E754 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E759 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000E75A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000E75F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E764 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E769 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E76E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E773 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000E778 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E77D 07                         byte_CC75:	dc.b 7			; RING BONUS
0000E77E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E783 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E788 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E78D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E792 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E797 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E79C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E7A2 00                         		even
0000E7A2 00                         		even
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            ; Sprite mappings - special stage results screen
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            Map_obj7E:	
0000E7A2                            	;	dc.w byte_CCAC-Map_obj7E
0000E7A2                            	;	dc.w byte_CCEE-Map_obj7E
0000E7A2                            	;	dc.w byte_CD0D-Map_obj7E
0000E7A2                            	;	dc.w byte_CB47-Map_obj7E
0000E7A2                            	;	dc.w byte_CD31-Map_obj7E
0000E7A2                            	;	dc.w byte_CD46-Map_obj7E
0000E7A2                            	;	dc.w byte_CD5B-Map_obj7E
0000E7A2                            	;	dc.w byte_CD6B-Map_obj7E
0000E7A2                            	;	dc.w byte_CDA8-Map_obj7E
0000E7A2 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E7A3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E7A8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E7AD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E7B2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E7B7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E7BC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E7C1 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E7C6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E7CB F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E7D0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E7D5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E7DA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E7DF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E7E4 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E7E5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E7EA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E7EF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E7F4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E7F9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E7FE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E803 07                         byte_CD0D:	dc.b 7
0000E804 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E809 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E80E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E813 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E818 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E81D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E822 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E827 04                         byte_CD31:	dc.b 4
0000E828 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E82D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E832 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E837 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E83C 04                         byte_CD46:	dc.b 4
0000E83D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E842 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E847 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E84C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E851 03                         byte_CD5B:	dc.b 3
0000E852 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E857 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E85C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E861 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E862 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E867 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E86C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E871 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E876 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E87B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E880 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E885 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E88A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E88F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E894 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E899 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E89E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E89F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E8A4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E8A9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E8AE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E8B3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E8B8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E8BD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E8C2 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E8C7 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E8CC F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E8D1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E8D6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E8DB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E8E0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E8E5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E8EA                            		even
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            Map_obj7F:
0000E8EA                            	include "_maps\obj7F.asm"
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA 0000                       		dc.w byte_CE02-Map_obj7F
0000E8EC 0000                       		dc.w byte_CE08-Map_obj7F
0000E8EE 0000                       		dc.w byte_CE0E-Map_obj7F
0000E8F0 0000                       		dc.w byte_CE14-Map_obj7F
0000E8F2 0000                       		dc.w byte_CE1A-Map_obj7F
0000E8F4 0000                       		dc.w byte_CE20-Map_obj7F
0000E8F6 0000                       		dc.w byte_CE26-Map_obj7F
0000E8F8 01                         byte_CE02:	dc.b 1
0000E8F9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E8FE 01                         byte_CE08:	dc.b 1
0000E8FF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E904 01                         byte_CE0E:	dc.b 1
0000E905 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E90A 01                         byte_CE14:	dc.b 1
0000E90B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E910 01                         byte_CE1A:	dc.b 1
0000E911 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E916 01                         byte_CE20:	dc.b 1
0000E917 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E91C 00                         byte_CE26:	dc.b 0			; Blank frame
0000E91E 00                         		even
0000E91E 00                         		even
0000E91E                            
0000E91E                            ; ===========================================================================
0000E91E                            ; ---------------------------------------------------------------------------
0000E91E                            ; Object 36 - spikes
0000E91E                            ; ---------------------------------------------------------------------------
0000E91E                            
0000E91E                            Obj36:					; XREF: Obj_Index
0000E91E 7000                       		moveq	#0,d0
0000E920 1028 0024                  		move.b	$24(a0),d0
0000E924 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E928 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E92C                            ; ===========================================================================
0000E92C 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E92E 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E930                            
0000E930 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E932 0110                       		dc.b 1,	$10
0000E934 0204                       		dc.b 2,	4
0000E936 031C                       		dc.b 3,	$1C
0000E938 0440                       		dc.b 4,	$40
0000E93A 0510                       		dc.b 5,	$10
0000E93C                            ; ===========================================================================
0000E93C                            
0000E93C                            Obj36_Main:				; XREF: Obj36_Index
0000E93C 5428 0024                  		addq.b	#2,$24(a0)
0000E940 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E948 317C 051B 0002             		move.w	#$51B,2(a0)
0000E94E 0028 0004 0001             		ori.b	#4,1(a0)
0000E954 117C 0004 0018             		move.b	#4,$18(a0)
0000E95A 1028 0028                  		move.b	$28(a0),d0
0000E95E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E964 0240 00F0                  		andi.w	#$F0,d0
0000E968 43F9 0000 E930             		lea	(Obj36_Var).l,a1
0000E96E E648                       		lsr.w	#3,d0
0000E970 D2C0                       		adda.w	d0,a1
0000E972 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E976 1159 0019                  		move.b	(a1)+,$19(a0)
0000E97A 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E980 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E986                            
0000E986                            Obj36_Solid:				; XREF: Obj36_Index
0000E986 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E98A 343C 0004                  		move.w	#4,d2
0000E98E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E994 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E996 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E99C 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E99E 343C 0014                  		move.w	#$14,d2
0000E9A2                            
0000E9A2                            ; Spikes types $1x and $5x face	sideways
0000E9A2                            
0000E9A2                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E9A2 323C 001B                  		move.w	#$1B,d1
0000E9A6 3602                       		move.w	d2,d3
0000E9A8 5243                       		addq.w	#1,d3
0000E9AA 3828 0008                  		move.w	8(a0),d4
0000E9AE 6100 0000                  		bsr.w	SolidObject
0000E9B2 0828 0003 0022             		btst	#3,$22(a0)
0000E9B8 6600                       		bne.s	Obj36_Display
0000E9BA 0C44 0001                  		cmpi.w	#1,d4
0000E9BE 6700                       		beq.s	Obj36_Hurt
0000E9C0 6000                       		bra.s	Obj36_Display
0000E9C2                            ; ===========================================================================
0000E9C2                            
0000E9C2                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E9C2                            
0000E9C2                            Obj36_Upright:				; XREF: Obj36_Solid
0000E9C2 7200                       		moveq	#0,d1
0000E9C4 1228 0019                  		move.b	$19(a0),d1
0000E9C8 0641 000B                  		addi.w	#$B,d1
0000E9CC 343C 0010                  		move.w	#$10,d2
0000E9D0 363C 0011                  		move.w	#$11,d3
0000E9D4 3828 0008                  		move.w	8(a0),d4
0000E9D8 6100 0000                  		bsr.w	SolidObject
0000E9DC 0828 0003 0022             		btst	#3,$22(a0)
0000E9E2 6600                       		bne.s	Obj36_Hurt
0000E9E4 4A44                       		tst.w	d4
0000E9E6 6A00                       		bpl.s	Obj36_Display
0000E9E8                            
0000E9E8                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E9E8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E9EC 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E9EE 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000E9F2 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000E9F4 2F08                       		move.l	a0,-(sp)
0000E9F6 2448                       		movea.l	a0,a2
0000E9F8 41F8 D000                  		lea	($FFFFD000).w,a0
0000E9FC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000EA02 6400                       		bcc.s	loc_CF20
0000EA04 2628 000C                  		move.l	$C(a0),d3
0000EA08 3028 0012                  		move.w	$12(a0),d0
0000EA0C 48C0                       		ext.l	d0
0000EA0E E180                       		asl.l	#8,d0
0000EA10 9680                       		sub.l	d0,d3
0000EA12 2143 000C                  		move.l	d3,$C(a0)
0000EA16 4EB9 0000 0000             		jsr	HurtSonic
0000EA1C                            
0000EA1C                            loc_CF20:
0000EA1C 205F                       		movea.l	(sp)+,a0
0000EA1E                            
0000EA1E                            Obj36_Display:
0000EA1E 6100 0000                  		bsr.w	DisplaySprite
0000EA22 3028 0030                  		move.w	$30(a0),d0
0000EA26 0240 FF80                  		andi.w	#$FF80,d0
0000EA2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA2E 0441 0080                  		subi.w	#$80,d1
0000EA32 0241 FF80                  		andi.w	#$FF80,d1
0000EA36 9041                       		sub.w	d1,d0
0000EA38 0C40 0280                  		cmpi.w	#$280,d0
0000EA3C 6200 0000                  		bhi.w	DeleteObject
0000EA40 4E75                       		rts	
0000EA42                            ; ===========================================================================
0000EA42                            
0000EA42                            Obj36_Type0x:				; XREF: Obj36_Solid
0000EA42 7000                       		moveq	#0,d0
0000EA44 1028 0028                  		move.b	$28(a0),d0
0000EA48 D040                       		add.w	d0,d0
0000EA4A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000EA4E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000EA52                            ; ===========================================================================
0000EA52 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000EA54 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000EA56 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000EA58                            ; ===========================================================================
0000EA58                            
0000EA58                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000EA58 4E75                       		rts			; don't move the object
0000EA5A                            ; ===========================================================================
0000EA5A                            
0000EA5A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000EA5A 6100 0000                  		bsr.w	Obj36_Wait
0000EA5E 7000                       		moveq	#0,d0
0000EA60 1028 0034                  		move.b	$34(a0),d0
0000EA64 D068 0032                  		add.w	$32(a0),d0
0000EA68 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000EA6C 4E75                       		rts	
0000EA6E                            ; ===========================================================================
0000EA6E                            
0000EA6E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000EA6E 6100 0000                  		bsr.w	Obj36_Wait
0000EA72 7000                       		moveq	#0,d0
0000EA74 1028 0034                  		move.b	$34(a0),d0
0000EA78 D068 0030                  		add.w	$30(a0),d0
0000EA7C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000EA80 4E75                       		rts	
0000EA82                            ; ===========================================================================
0000EA82                            
0000EA82                            Obj36_Wait:
0000EA82 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EA86 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EA88 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EA8C 6600                       		bne.s	locret_CFE6
0000EA8E 4A28 0001                  		tst.b	1(a0)
0000EA92 6A00                       		bpl.s	locret_CFE6
0000EA94 303C 00B6                  		move.w	#$B6,d0
0000EA98 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000EA9E 6000                       		bra.s	locret_CFE6
0000EAA0                            ; ===========================================================================
0000EAA0                            
0000EAA0                            loc_CFA4:
0000EAA0 4A68 0036                  		tst.w	$36(a0)
0000EAA4 6700                       		beq.s	loc_CFC6
0000EAA6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EAAC 6400                       		bcc.s	locret_CFE6
0000EAAE 317C 0000 0034             		move.w	#0,$34(a0)
0000EAB4 317C 0000 0036             		move.w	#0,$36(a0)
0000EABA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EAC0 6000                       		bra.s	locret_CFE6
0000EAC2                            ; ===========================================================================
0000EAC2                            
0000EAC2                            loc_CFC6:
0000EAC2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EAC8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EACE 6500                       		bcs.s	locret_CFE6
0000EAD0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EAD6 317C 0001 0036             		move.w	#1,$36(a0)
0000EADC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EAE2                            
0000EAE2                            locret_CFE6:
0000EAE2 4E75                       		rts	
0000EAE4                            ; ===========================================================================
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4                            ; Sprite mappings - spikes
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4                            Map_obj36:
0000EAE4                            	include "_maps\obj36.asm"
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4                            ; Sprite mappings - spikes
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4 0000                       		dc.w byte_CFF4-Map_obj36
0000EAE6 0000                       		dc.w byte_D004-Map_obj36
0000EAE8 0000                       		dc.w byte_D014-Map_obj36
0000EAEA 0000                       		dc.w byte_D01A-Map_obj36
0000EAEC 0000                       		dc.w byte_D02A-Map_obj36
0000EAEE 0000                       		dc.w byte_D049-Map_obj36
0000EAF0 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000EAF1 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000EAF6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EAFB F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000EB00 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000EB01 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000EB06 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EB0B 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000EB10 01                         byte_D014:	dc.b 1			; 1 spike
0000EB11 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EB16 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000EB17 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000EB1C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EB21 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000EB26 06                         byte_D02A:	dc.b 6			; 6 spikes
0000EB27 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EB2C F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EB31 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EB36 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EB3B F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EB40 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EB45 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EB46 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EB4C 00                         		even
0000EB4C 00                         		even
0000EB4C                            
0000EB4C                            ; ===========================================================================
0000EB4C                            ; ---------------------------------------------------------------------------
0000EB4C                            ; Object 3B - purple rock (GHZ)
0000EB4C                            ; ---------------------------------------------------------------------------
0000EB4C                            
0000EB4C                            Obj3B:					; XREF: Obj_Index
0000EB4C 7000                       		moveq	#0,d0
0000EB4E 1028 0024                  		move.b	$24(a0),d0
0000EB52 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EB56 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EB5A                            ; ===========================================================================
0000EB5A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EB5C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EB5E                            ; ===========================================================================
0000EB5E                            
0000EB5E                            Obj3B_Main:				; XREF: Obj3B_Index
0000EB5E 5428 0024                  		addq.b	#2,$24(a0)
0000EB62 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EB6A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EB70 117C 0004 0001             		move.b	#4,1(a0)
0000EB76 117C 0013 0019             		move.b	#$13,$19(a0)
0000EB7C 117C 0004 0018             		move.b	#4,$18(a0)
0000EB82                            
0000EB82                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EB82 323C 001B                  		move.w	#$1B,d1
0000EB86 343C 0010                  		move.w	#$10,d2
0000EB8A 363C 0010                  		move.w	#$10,d3
0000EB8E 3828 0008                  		move.w	8(a0),d4
0000EB92 6100 0000                  		bsr.w	SolidObject
0000EB96 6100 0000                  		bsr.w	DisplaySprite
0000EB9A 3028 0008                  		move.w	8(a0),d0
0000EB9E 0240 FF80                  		andi.w	#$FF80,d0
0000EBA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBA6 0441 0080                  		subi.w	#$80,d1
0000EBAA 0241 FF80                  		andi.w	#$FF80,d1
0000EBAE 9041                       		sub.w	d1,d0
0000EBB0 0C40 0280                  		cmpi.w	#$280,d0
0000EBB4 6200 0000                  		bhi.w	DeleteObject
0000EBB8 4E75                       		rts	
0000EBBA                            ; ===========================================================================
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            ; Object 49 - waterfall	sound effect (GHZ)
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            
0000EBBA                            Obj49:					; XREF: Obj_Index
0000EBBA 7000                       		moveq	#0,d0
0000EBBC 1028 0024                  		move.b	$24(a0),d0
0000EBC0 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EBC4 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EBC8                            ; ===========================================================================
0000EBC8 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EBCA 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EBCC                            ; ===========================================================================
0000EBCC                            
0000EBCC                            Obj49_Main:				; XREF: Obj49_Index
0000EBCC 5428 0024                  		addq.b	#2,$24(a0)
0000EBD0 117C 0004 0001             		move.b	#4,1(a0)
0000EBD6                            
0000EBD6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EBD6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EBDA 0200 003F                  		andi.b	#$3F,d0
0000EBDE 6600                       		bne.s	Obj49_ChkDel
0000EBE0 303C 00D0                  		move.w	#$D0,d0
0000EBE4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EBEA                            
0000EBEA                            Obj49_ChkDel:
0000EBEA 3028 0008                  		move.w	8(a0),d0
0000EBEE 0240 FF80                  		andi.w	#$FF80,d0
0000EBF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBF6 0441 0080                  		subi.w	#$80,d1
0000EBFA 0241 FF80                  		andi.w	#$FF80,d1
0000EBFE 9041                       		sub.w	d1,d0
0000EC00 0C40 0280                  		cmpi.w	#$280,d0
0000EC04 6200 0000                  		bhi.w	DeleteObject
0000EC08 4E75                       		rts	
0000EC0A                            ; ===========================================================================
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A                            ; Sprite mappings - purple rock	(GHZ)
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A                            Map_obj3B:
0000EC0A                            	include "_maps\obj3B.asm"
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A                            ; Sprite mappings - purple rock	(GHZ)
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A 0000                       		dc.w byte_D110-Map_obj3B
0000EC0C 02                         byte_D110:	dc.b 2
0000EC0D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EC12 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EC18 00                         		even
0000EC18 00                         		even
0000EC18                            
0000EC18                            ; ===========================================================================
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18                            
0000EC18                            Obj3C:					; XREF: Obj_Index
0000EC18 7000                       		moveq	#0,d0
0000EC1A 1028 0024                  		move.b	$24(a0),d0
0000EC1E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000EC22 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000EC26 6000 0000                  		bra.w	MarkObjGone
0000EC2A                            ; ===========================================================================
0000EC2A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000EC2C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000EC2E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000EC30                            ; ===========================================================================
0000EC30                            
0000EC30                            Obj3C_Main:				; XREF: Obj3C_Index
0000EC30 5428 0024                  		addq.b	#2,$24(a0)
0000EC34 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000EC3C 317C 450F 0002             		move.w	#$450F,2(a0)
0000EC42 117C 0004 0001             		move.b	#4,1(a0)
0000EC48 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC4E 117C 0004 0018             		move.b	#4,$18(a0)
0000EC54 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000EC5A                            
0000EC5A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000EC5A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000EC60 323C 001B                  		move.w	#$1B,d1
0000EC64 343C 0020                  		move.w	#$20,d2
0000EC68 363C 0020                  		move.w	#$20,d3
0000EC6C 3828 0008                  		move.w	8(a0),d4
0000EC70 6100 0000                  		bsr.w	SolidObject
0000EC74 0828 0005 0022             		btst	#5,$22(a0)
0000EC7A 6600                       		bne.s	Obj3C_ChkRoll
0000EC7C                            
0000EC7C                            locret_D180:
0000EC7C 4E75                       		rts	
0000EC7E                            ; ===========================================================================
0000EC7E                            
0000EC7E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000EC7E                            	;	cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000EC7E                            	;	bne.s	locret_D180	; if not, branch
0000EC7E 3028 0030                  		move.w	$30(a0),d0
0000EC82 6A00                       		bpl.s	Obj3C_ChkSpeed
0000EC84 4440                       		neg.w	d0
0000EC86                            
0000EC86                            Obj3C_ChkSpeed:
0000EC86 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EC8A 65F0                       		bcs.s	locret_D180	; if not, branch
0000EC8C 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000EC92 5869 0008                  		addq.w	#4,8(a1)
0000EC96 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000EC9C 3028 0008                  		move.w	8(a0),d0
0000ECA0 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000ECA4 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000ECA6 5169 0008                  		subq.w	#8,8(a1)
0000ECAA 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000ECB0                            
0000ECB0                            Obj3C_Smash:
0000ECB0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ECB6 08A8 0005 0022             		bclr	#5,$22(a0)
0000ECBC 08A9 0005 0022             		bclr	#5,$22(a1)
0000ECC2 7207                       		moveq	#7,d1		; load 8 fragments
0000ECC4 343C 0070                  		move.w	#$70,d2
0000ECC8 6100                       		bsr.s	SmashObject
0000ECCA                            
0000ECCA                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000ECCA 6100 0000                  		bsr.w	SpeedToPos
0000ECCE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000ECD4 6100 0000                  		bsr.w	DisplaySprite
0000ECD8 4A28 0001                  		tst.b	1(a0)
0000ECDC 6A00 0000                  		bpl.w	DeleteObject
0000ECE0 4E75                       		rts	
0000ECE2                            
0000ECE2                            ; ---------------------------------------------------------------------------
0000ECE2                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000ECE2                            ; ---------------------------------------------------------------------------
0000ECE2                            
0000ECE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECE2                            
0000ECE2                            
0000ECE2                            SmashObject:				; XREF: Obj3C_Smash
0000ECE2 7000                       		moveq	#0,d0
0000ECE4 1028 001A                  		move.b	$1A(a0),d0
0000ECE8 D040                       		add.w	d0,d0
0000ECEA 2668 0004                  		movea.l	4(a0),a3
0000ECEE D6F3 0000                  		adda.w	(a3,d0.w),a3
0000ECF2 524B                       		addq.w	#1,a3
0000ECF4 08E8 0005 0001             		bset	#5,1(a0)
0000ECFA 1810                       		move.b	0(a0),d4
0000ECFC 1A28 0001                  		move.b	1(a0),d5
0000ED00 2248                       		movea.l	a0,a1
0000ED02 6000                       		bra.s	Smash_LoadFrag
0000ED04                            ; ===========================================================================
0000ED04                            
0000ED04                            Smash_Loop:
0000ED04 6100 0000                  		bsr.w	SingleObjLoad
0000ED08 6600                       		bne.s	Smash_PlaySnd
0000ED0A 5A4B                       		addq.w	#5,a3
0000ED0C                            
0000ED0C                            Smash_LoadFrag:				; XREF: SmashObject
0000ED0C 137C 0004 0024             		move.b	#4,$24(a1)
0000ED12 1284                       		move.b	d4,0(a1)
0000ED14 234B 0004                  		move.l	a3,4(a1)
0000ED18 1345 0001                  		move.b	d5,1(a1)
0000ED1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED22 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED28 3368 0002 0002             		move.w	2(a0),2(a1)
0000ED2E 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000ED34 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000ED3A 335C 0010                  		move.w	(a4)+,$10(a1)
0000ED3E 335C 0012                  		move.w	(a4)+,$12(a1)
0000ED42 B3C8                       		cmpa.l	a0,a1
0000ED44 6400                       		bcc.s	loc_D268
0000ED46 2F08                       		move.l	a0,-(sp)
0000ED48 2049                       		movea.l	a1,a0
0000ED4A 6100 0000                  		bsr.w	SpeedToPos
0000ED4E D568 0012                  		add.w	d2,$12(a0)
0000ED52 205F                       		movea.l	(sp)+,a0
0000ED54 6100 0000                  		bsr.w	DisplaySprite2
0000ED58                            
0000ED58                            loc_D268:
0000ED58 51C9 FFAA                  		dbf	d1,Smash_Loop
0000ED5C                            
0000ED5C                            Smash_PlaySnd:
0000ED5C 303C 00CB                  		move.w	#$CB,d0
0000ED60 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0000ED66                            ; End of function SmashObject
0000ED66                            
0000ED66                            ; ===========================================================================
0000ED66                            ; Smashed block	fragment speeds
0000ED66                            ;
0000ED66 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000ED6A 0600 FF00                  		dc.w $600, $FF00
0000ED6E 0600 0100                  		dc.w $600, $100
0000ED72 0400 0500                  		dc.w $400, $500
0000ED76 0600 FA00                  		dc.w $600, $FA00
0000ED7A 0800 FE00                  		dc.w $800, $FE00
0000ED7E 0800 0200                  		dc.w $800, $200
0000ED82 0600 0600                  		dc.w $600, $600
0000ED86                            
0000ED86 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000ED8A F800 FE00                  		dc.w $F800, $FE00
0000ED8E F800 0200                  		dc.w $F800, $200
0000ED92 FA00 0600                  		dc.w $FA00, $600
0000ED96 FC00 FB00                  		dc.w $FC00, $FB00
0000ED9A FA00 FF00                  		dc.w $FA00, $FF00
0000ED9E FA00 0100                  		dc.w $FA00, $100
0000EDA2 FC00 0500                  		dc.w $FC00, $500
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                            Map_obj3C:
0000EDA6                            	include "_maps\obj3C.asm"
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6 0000                       		dc.w byte_D2BC-Map_obj3C
0000EDA8 0000                       		dc.w byte_D2E5-Map_obj3C
0000EDAA 0000                       		dc.w byte_D30E-Map_obj3C
0000EDAC 08                         byte_D2BC:	dc.b 8
0000EDAD E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000EDB2 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000EDB7 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000EDBC 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000EDC1 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EDC6 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EDCB 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EDD0 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EDD5 08                         byte_D2E5:	dc.b 8
0000EDD6 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EDDB F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EDE0 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EDE5 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EDEA E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EDEF F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EDF4 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EDF9 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EDFE 08                         byte_D30E:	dc.b 8
0000EDFF E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EE04 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EE09 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EE0E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EE13 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000EE18 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000EE1D 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000EE22 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000EE28 00                         		even
0000EE28 00                         		even
0000EE28                            
0000EE28                            ; ---------------------------------------------------------------------------
0000EE28                            ; Object code loading subroutine
0000EE28                            ; ---------------------------------------------------------------------------
0000EE28                            
0000EE28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EE28                            
0000EE28                            
0000EE28                            ObjectsLoad:				; XREF: TitleScreen; et al
0000EE28 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000EE2C 7E7F                       		moveq	#$7F,d7
0000EE2E 7000                       		moveq	#0,d0
0000EE30 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000EE36 6400                       		bcc.s	loc_D362
0000EE38                            
0000EE38                            loc_D348:
0000EE38 1010                       		move.b	(a0),d0		; load object number from RAM
0000EE3A 6700                       		beq.s	loc_D358
0000EE3C D040                       		add.w	d0,d0
0000EE3E D040                       		add.w	d0,d0
0000EE40 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000EE44 4E91                       		jsr	(a1)		; run the object's code
0000EE46 7000                       		moveq	#0,d0
0000EE48                            
0000EE48                            loc_D358:
0000EE48 41E8 0040                  		lea	$40(a0),a0	; next object
0000EE4C 51CF FFEA                  		dbf	d7,loc_D348
0000EE50 4E75                       		rts	
0000EE52                            ; ===========================================================================
0000EE52                            
0000EE52                            loc_D362:
0000EE52 0C38 000A D024                     cmpi.b  #$A,($FFFFD024).w		      ; Has Sonic drowned?
0000EE58 67DE                               beq.s   loc_D348                        ; If so, run objects a little longer
0000EE5A 7E1F                       		moveq	#$1F,d7
0000EE5C 61DA                       		bsr.s	loc_D348
0000EE5E 7E5F                       		moveq	#$5F,d7
0000EE60                            
0000EE60                            loc_D368:
0000EE60 7000                       		moveq	#0,d0
0000EE62 1010                       		move.b	(a0),d0
0000EE64 6700                       		beq.s	loc_D378
0000EE66 4A28 0001                  		tst.b	1(a0)
0000EE6A 6A00                       		bpl.s	loc_D378
0000EE6C 6100 0000                  		bsr.w	DisplaySprite
0000EE70                            
0000EE70                            loc_D378:
0000EE70 41E8 0040                  		lea	$40(a0),a0
0000EE74                            
0000EE74                            loc_D37C:
0000EE74 51CF FFEA                  		dbf	d7,loc_D368
0000EE78 4E75                       		rts	
0000EE7A                            ; End of function ObjectsLoad
0000EE7A                            
0000EE7A                            ; ===========================================================================
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A                            ; Object pointers
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A                            Obj_Index:
0000EE7A                            	include "_inc\Object pointers.asm"
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A                            ; Object pointers
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
0000EE8A 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000EE9A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000EEAA 0000 0000 0000 C03C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000EEBA 0000 8D22 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EECA 0000 9348 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EEDA 0000 9B96 0000 9BFE 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EEEA 0000 A248 0000 A536 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EEFA 0000 0000 0000 B1BA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EF0A 0000 B4FC 0000 BB34 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EF1A 0000 ADF2 0000 A31E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EF2A 0000 C6C4 0000 BD22 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EF3A 0000 D096 0000 D744 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EF4A 0000 CBFA 0000 E91E 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EF5A 0000 DECA 0000 DF84 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000EF6A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000EF7A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000EF8A 0000 D3B2 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000EF9A 0000 EBBA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000EFAA 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000EFBA 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000EFCA 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000EFDA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000EFEA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000EFFA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000F00A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000F01A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000F02A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000F03A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000F04A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000F05A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000F06A 0000 0000 0000 E1BA 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000F07A 0000 692E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000F08A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000F09A 0000 700E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F09A 0000 700E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F0AA                            
0000F0AA                            ; ---------------------------------------------------------------------------
0000F0AA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F0AA                            ; ---------------------------------------------------------------------------
0000F0AA                            
0000F0AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0AA                            
0000F0AA                            
0000F0AA                            ObjectFall:
0000F0AA 3028 0010                  		move.w	$10(a0),d0
0000F0AE 48C0                       		ext.l	d0
0000F0B0 E188                       		lsl.l	#8,d0
0000F0B2 D1A8 0008                  		add.l	d0,8(a0)
0000F0B6 3028 0012                  		move.w	$12(a0),d0
0000F0BA 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000F0C0 48C0                       		ext.l	d0
0000F0C2 E188                       		lsl.l	#8,d0
0000F0C4 D1A8 000C                  		add.l	d0,$C(a0)
0000F0C8 4E75                       		rts	
0000F0CA                            ; End of function ObjectFall
0000F0CA                            
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            ; Subroutine translating object	speed to update	object position
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            
0000F0CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0CA                            
0000F0CA                            
0000F0CA                            SpeedToPos:
0000F0CA 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000F0CE 48C0                       		ext.l	d0
0000F0D0 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000F0D2 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000F0D6 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000F0DA 48C0                       		ext.l	d0
0000F0DC E188                       		lsl.l	#8,d0		; multiply by $100
0000F0DE D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000F0E2 4E75                       		rts	
0000F0E4                            ; End of function SpeedToPos
0000F0E4                            
0000F0E4                            ; ---------------------------------------------------------------------------
0000F0E4                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000F0E4                            ; ---------------------------------------------------------------------------
0000F0E4                            
0000F0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0E4                            
0000F0E4                            
0000F0E4                            DisplaySprite:
0000F0E4 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000F0E8 3028 0018                  		move.w	$18(a0),d0
0000F0EC E248                       		lsr.w	#1,d0
0000F0EE 0240 0380                  		andi.w	#$380,d0
0000F0F2 D2C0                       		adda.w	d0,a1
0000F0F4 0C51 007E                  		cmpi.w	#$7E,(a1)
0000F0F8 6400                       		bcc.s	locret_D620
0000F0FA 5451                       		addq.w	#2,(a1)
0000F0FC D2D1                       		adda.w	(a1),a1
0000F0FE 3288                       		move.w	a0,(a1)
0000F100                            
0000F100                            locret_D620:
0000F100 4E75                       		rts	
0000F102                            ; End of function DisplaySprite
0000F102                            
0000F102                            ; ---------------------------------------------------------------------------
0000F102                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000F102                            ; ---------------------------------------------------------------------------
0000F102                            
0000F102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F102                            
0000F102                            
0000F102                            DisplaySprite2:
0000F102 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000F106 3029 0018                  		move.w	$18(a1),d0
0000F10A E248                       		lsr.w	#1,d0
0000F10C 0240 0380                  		andi.w	#$380,d0
0000F110 D4C0                       		adda.w	d0,a2
0000F112 0C52 007E                  		cmpi.w	#$7E,(a2)
0000F116 6400                       		bcc.s	locret_D63E
0000F118 5452                       		addq.w	#2,(a2)
0000F11A D4D2                       		adda.w	(a2),a2
0000F11C 3489                       		move.w	a1,(a2)
0000F11E                            
0000F11E                            locret_D63E:
0000F11E 4E75                       		rts	
0000F120                            ; End of function DisplaySprite2
0000F120                            
0000F120                            ; ---------------------------------------------------------------------------
0000F120                            ; Subroutine to	delete an object
0000F120                            ; ---------------------------------------------------------------------------
0000F120                            
0000F120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F120                            
0000F120                            
0000F120                            DeleteObject:
0000F120 2248                       		movea.l	a0,a1
0000F122                            
0000F122                            DeleteObject2:
0000F122 7200                       		moveq	#0,d1
0000F124 700F                       		moveq	#$F,d0
0000F126                            
0000F126                            loc_D646:
0000F126 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F128 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F12C 4E75                       		rts	
0000F12E                            ; End of function DeleteObject
0000F12E                            
0000F12E                            ; ===========================================================================
0000F12E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F132 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F136 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F13A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F13E                            ; ---------------------------------------------------------------------------
0000F13E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F13E                            ; ---------------------------------------------------------------------------
0000F13E                            
0000F13E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F13E                            
0000F13E                            
0000F13E                            BuildSprites:				; XREF: TitleScreen; et al
0000F13E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000F142 7A00                       		moveq	#0,d5
0000F144 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000F148 7E07                       		moveq	#7,d7
0000F14A                            
0000F14A                            loc_D66A:
0000F14A 4A54                       		tst.w	(a4)
0000F14C 6700 0000                  		beq.w	loc_D72E
0000F150 7C02                       		moveq	#2,d6
0000F152                            
0000F152                            loc_D672:
0000F152 3074 6000                  		movea.w	(a4,d6.w),a0
0000F156 4A10                       		tst.b	(a0)
0000F158 6700 0000                  		beq.w	loc_D726
0000F15C 08A8 0007 0001             		bclr	#7,1(a0)
0000F162 1028 0001                  		move.b	1(a0),d0
0000F166 1800                       		move.b	d0,d4
0000F168 0240 000C                  		andi.w	#$C,d0
0000F16C 6700                       		beq.s	loc_D6DE
0000F16E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F172 7000                       		moveq	#0,d0
0000F174 1028 0019                  		move.b	$19(a0),d0
0000F178 3628 0008                  		move.w	8(a0),d3
0000F17C 9651                       		sub.w	(a1),d3
0000F17E 3203                       		move.w	d3,d1
0000F180 D240                       		add.w	d0,d1
0000F182 6B00 0000                  		bmi.w	loc_D726
0000F186 3203                       		move.w	d3,d1
0000F188 9240                       		sub.w	d0,d1
0000F18A 0C41 0140                  		cmpi.w	#$140,d1
0000F18E 6C00                       		bge.s	loc_D726
0000F190 0643 0080                  		addi.w	#$80,d3
0000F194 0804 0004                  		btst	#4,d4
0000F198 6700                       		beq.s	loc_D6E8
0000F19A 7000                       		moveq	#0,d0
0000F19C 1028 0016                  		move.b	$16(a0),d0
0000F1A0 3428 000C                  		move.w	$C(a0),d2
0000F1A4 9469 0004                  		sub.w	4(a1),d2
0000F1A8 3202                       		move.w	d2,d1
0000F1AA D240                       		add.w	d0,d1
0000F1AC 6B00                       		bmi.s	loc_D726
0000F1AE 3202                       		move.w	d2,d1
0000F1B0 9240                       		sub.w	d0,d1
0000F1B2 0C41 00E0                  		cmpi.w	#$E0,d1
0000F1B6 6C00                       		bge.s	loc_D726
0000F1B8 0642 0080                  		addi.w	#$80,d2
0000F1BC 6000                       		bra.s	loc_D700
0000F1BE                            ; ===========================================================================
0000F1BE                            
0000F1BE                            loc_D6DE:
0000F1BE 3428 000A                  		move.w	$A(a0),d2
0000F1C2 3628 0008                  		move.w	8(a0),d3
0000F1C6 6000                       		bra.s	loc_D700
0000F1C8                            ; ===========================================================================
0000F1C8                            
0000F1C8                            loc_D6E8:
0000F1C8 3428 000C                  		move.w	$C(a0),d2
0000F1CC 9469 0004                  		sub.w	4(a1),d2
0000F1D0 0642 0080                  		addi.w	#$80,d2
0000F1D4 0C42 0060                  		cmpi.w	#$60,d2
0000F1D8 6500                       		bcs.s	loc_D726
0000F1DA 0C42 0180                  		cmpi.w	#$180,d2
0000F1DE 6400                       		bcc.s	loc_D726
0000F1E0                            
0000F1E0                            loc_D700:
0000F1E0 2268 0004                  		movea.l	4(a0),a1
0000F1E4 7200                       		moveq	#0,d1
0000F1E6 0804 0005                  		btst	#5,d4
0000F1EA 6600                       		bne.s	loc_D71C
0000F1EC 1228 001A                  		move.b	$1A(a0),d1
0000F1F0 D201                       		add.b	d1,d1
0000F1F2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F1F6 1219                       		move.b	(a1)+,d1
0000F1F8 5301                       		subq.b	#1,d1
0000F1FA 6B00                       		bmi.s	loc_D720
0000F1FC                            
0000F1FC                            loc_D71C:
0000F1FC 6100 0000                  		bsr.w	sub_D750
0000F200                            
0000F200                            loc_D720:
0000F200 08E8 0007 0001             		bset	#7,1(a0)
0000F206                            
0000F206                            loc_D726:
0000F206 5446                       		addq.w	#2,d6
0000F208 5554                       		subq.w	#2,(a4)
0000F20A 6600 FF46                  		bne.w	loc_D672
0000F20E                            
0000F20E                            loc_D72E:
0000F20E 49EC 0080                  		lea	$80(a4),a4
0000F212 51CF FF36                  		dbf	d7,loc_D66A
0000F216 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F21A 0C05 0050                  		cmpi.b	#$50,d5
0000F21E 6700                       		beq.s	loc_D748
0000F220 24BC 0000 0000             		move.l	#0,(a2)
0000F226 4E75                       		rts	
0000F228                            ; ===========================================================================
0000F228                            
0000F228                            loc_D748:
0000F228 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F22E 4E75                       		rts	
0000F230                            ; End of function BuildSprites
0000F230                            
0000F230                            
0000F230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F230                            
0000F230                            
0000F230                            sub_D750:				; XREF: BuildSprites
0000F230 3668 0002                  		movea.w	2(a0),a3
0000F234 0804 0000                  		btst	#0,d4
0000F238 6600                       		bne.s	loc_D796
0000F23A 0804 0001                  		btst	#1,d4
0000F23E 6600 0000                  		bne.w	loc_D7E4
0000F242                            ; End of function sub_D750
0000F242                            
0000F242                            
0000F242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F242                            
0000F242                            
0000F242                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F242 0C05 0050                  		cmpi.b	#$50,d5
0000F246 6700                       		beq.s	locret_D794
0000F248 1019                       		move.b	(a1)+,d0
0000F24A 4880                       		ext.w	d0
0000F24C D042                       		add.w	d2,d0
0000F24E 34C0                       		move.w	d0,(a2)+
0000F250 14D9                       		move.b	(a1)+,(a2)+
0000F252 5205                       		addq.b	#1,d5
0000F254 14C5                       		move.b	d5,(a2)+
0000F256 1019                       		move.b	(a1)+,d0
0000F258 E148                       		lsl.w	#8,d0
0000F25A 1019                       		move.b	(a1)+,d0
0000F25C D04B                       		add.w	a3,d0
0000F25E 34C0                       		move.w	d0,(a2)+
0000F260 1019                       		move.b	(a1)+,d0
0000F262 4880                       		ext.w	d0
0000F264 D043                       		add.w	d3,d0
0000F266 0240 01FF                  		andi.w	#$1FF,d0
0000F26A 6600                       		bne.s	loc_D78E
0000F26C 5240                       		addq.w	#1,d0
0000F26E                            
0000F26E                            loc_D78E:
0000F26E 34C0                       		move.w	d0,(a2)+
0000F270 51C9 FFD0                  		dbf	d1,sub_D762
0000F274                            
0000F274                            locret_D794:
0000F274 4E75                       		rts	
0000F276                            ; End of function sub_D762
0000F276                            
0000F276                            ; ===========================================================================
0000F276                            
0000F276                            loc_D796:
0000F276 0804 0001                  		btst	#1,d4
0000F27A 6600 0000                  		bne.w	loc_D82A
0000F27E                            
0000F27E                            loc_D79E:
0000F27E 0C05 0050                  		cmpi.b	#$50,d5
0000F282 6700                       		beq.s	locret_D7E2
0000F284 1019                       		move.b	(a1)+,d0
0000F286 4880                       		ext.w	d0
0000F288 D042                       		add.w	d2,d0
0000F28A 34C0                       		move.w	d0,(a2)+
0000F28C 1819                       		move.b	(a1)+,d4
0000F28E 14C4                       		move.b	d4,(a2)+
0000F290 5205                       		addq.b	#1,d5
0000F292 14C5                       		move.b	d5,(a2)+
0000F294 1019                       		move.b	(a1)+,d0
0000F296 E148                       		lsl.w	#8,d0
0000F298 1019                       		move.b	(a1)+,d0
0000F29A D04B                       		add.w	a3,d0
0000F29C 0A40 0800                  		eori.w	#$800,d0
0000F2A0 34C0                       		move.w	d0,(a2)+
0000F2A2 1019                       		move.b	(a1)+,d0
0000F2A4 4880                       		ext.w	d0
0000F2A6 4440                       		neg.w	d0
0000F2A8 D804                       		add.b	d4,d4
0000F2AA 0244 0018                  		andi.w	#$18,d4
0000F2AE 5044                       		addq.w	#8,d4
0000F2B0 9044                       		sub.w	d4,d0
0000F2B2 D043                       		add.w	d3,d0
0000F2B4 0240 01FF                  		andi.w	#$1FF,d0
0000F2B8 6600                       		bne.s	loc_D7DC
0000F2BA 5240                       		addq.w	#1,d0
0000F2BC                            
0000F2BC                            loc_D7DC:
0000F2BC 34C0                       		move.w	d0,(a2)+
0000F2BE 51C9 FFBE                  		dbf	d1,loc_D79E
0000F2C2                            
0000F2C2                            locret_D7E2:
0000F2C2 4E75                       		rts	
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            loc_D7E4:				; XREF: sub_D750
0000F2C4 0C05 0050                  		cmpi.b	#$50,d5
0000F2C8 6700                       		beq.s	locret_D828
0000F2CA 1019                       		move.b	(a1)+,d0
0000F2CC 1811                       		move.b	(a1),d4
0000F2CE 4880                       		ext.w	d0
0000F2D0 4440                       		neg.w	d0
0000F2D2 E70C                       		lsl.b	#3,d4
0000F2D4 0244 0018                  		andi.w	#$18,d4
0000F2D8 5044                       		addq.w	#8,d4
0000F2DA 9044                       		sub.w	d4,d0
0000F2DC D042                       		add.w	d2,d0
0000F2DE 34C0                       		move.w	d0,(a2)+
0000F2E0 14D9                       		move.b	(a1)+,(a2)+
0000F2E2 5205                       		addq.b	#1,d5
0000F2E4 14C5                       		move.b	d5,(a2)+
0000F2E6 1019                       		move.b	(a1)+,d0
0000F2E8 E148                       		lsl.w	#8,d0
0000F2EA 1019                       		move.b	(a1)+,d0
0000F2EC D04B                       		add.w	a3,d0
0000F2EE 0A40 1000                  		eori.w	#$1000,d0
0000F2F2 34C0                       		move.w	d0,(a2)+
0000F2F4 1019                       		move.b	(a1)+,d0
0000F2F6 4880                       		ext.w	d0
0000F2F8 D043                       		add.w	d3,d0
0000F2FA 0240 01FF                  		andi.w	#$1FF,d0
0000F2FE 6600                       		bne.s	loc_D822
0000F300 5240                       		addq.w	#1,d0
0000F302                            
0000F302                            loc_D822:
0000F302 34C0                       		move.w	d0,(a2)+
0000F304 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F308                            
0000F308                            locret_D828:
0000F308 4E75                       		rts	
0000F30A                            ; ===========================================================================
0000F30A                            
0000F30A                            loc_D82A:
0000F30A 0C05 0050                  		cmpi.b	#$50,d5
0000F30E 6700                       		beq.s	locret_D87C
0000F310 1019                       		move.b	(a1)+,d0
0000F312 1811                       		move.b	(a1),d4
0000F314 4880                       		ext.w	d0
0000F316 4440                       		neg.w	d0
0000F318 E70C                       		lsl.b	#3,d4
0000F31A 0244 0018                  		andi.w	#$18,d4
0000F31E 5044                       		addq.w	#8,d4
0000F320 9044                       		sub.w	d4,d0
0000F322 D042                       		add.w	d2,d0
0000F324 34C0                       		move.w	d0,(a2)+
0000F326 1819                       		move.b	(a1)+,d4
0000F328 14C4                       		move.b	d4,(a2)+
0000F32A 5205                       		addq.b	#1,d5
0000F32C 14C5                       		move.b	d5,(a2)+
0000F32E 1019                       		move.b	(a1)+,d0
0000F330 E148                       		lsl.w	#8,d0
0000F332 1019                       		move.b	(a1)+,d0
0000F334 D04B                       		add.w	a3,d0
0000F336 0A40 1800                  		eori.w	#$1800,d0
0000F33A 34C0                       		move.w	d0,(a2)+
0000F33C 1019                       		move.b	(a1)+,d0
0000F33E 4880                       		ext.w	d0
0000F340 4440                       		neg.w	d0
0000F342 D804                       		add.b	d4,d4
0000F344 0244 0018                  		andi.w	#$18,d4
0000F348 5044                       		addq.w	#8,d4
0000F34A 9044                       		sub.w	d4,d0
0000F34C D043                       		add.w	d3,d0
0000F34E 0240 01FF                  		andi.w	#$1FF,d0
0000F352 6600                       		bne.s	loc_D876
0000F354 5240                       		addq.w	#1,d0
0000F356                            
0000F356                            loc_D876:
0000F356 34C0                       		move.w	d0,(a2)+
0000F358 51C9 FFB0                  		dbf	d1,loc_D82A
0000F35C                            
0000F35C                            locret_D87C:
0000F35C 4E75                       		rts	
0000F35E                            ; ---------------------------------------------------------------------------
0000F35E                            ; Subroutine to	check if an object is on the screen
0000F35E                            ; ---------------------------------------------------------------------------
0000F35E                            
0000F35E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F35E                            
0000F35E                            
0000F35E                            ChkObjOnScreen:
0000F35E 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F362 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F366 6B00                       		bmi.s	NotOnScreen
0000F368 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F36C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F36E                            
0000F36E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F372 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F376 6B00                       		bmi.s	NotOnScreen
0000F378 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F37C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F37E                            
0000F37E 7000                       		moveq	#0,d0		; set flag to 0
0000F380 4E75                       		rts	
0000F382                            ; ===========================================================================
0000F382                            
0000F382                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F382 7001                       		moveq	#1,d0		; set flag to 1
0000F384 4E75                       		rts	
0000F386                            ; End of function ChkObjOnScreen
0000F386                            
0000F386                            
0000F386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F386                            
0000F386                            
0000F386                            ChkObjOnScreen2:
0000F386 7200                       		moveq	#0,d1
0000F388 1228 0019                  		move.b	$19(a0),d1
0000F38C 3028 0008                  		move.w	8(a0),d0
0000F390 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F394 D041                       		add.w	d1,d0
0000F396 6B00                       		bmi.s	NotOnScreen2
0000F398 D241                       		add.w	d1,d1
0000F39A 9041                       		sub.w	d1,d0
0000F39C 0C40 0140                  		cmpi.w	#320,d0
0000F3A0 6C00                       		bge.s	NotOnScreen2
0000F3A2                            
0000F3A2 3228 000C                  		move.w	$C(a0),d1
0000F3A6 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F3AA 6B00                       		bmi.s	NotOnScreen2
0000F3AC 0C41 00E0                  		cmpi.w	#224,d1
0000F3B0 6C00                       		bge.s	NotOnScreen2
0000F3B2                            
0000F3B2 7000                       		moveq	#0,d0
0000F3B4 4E75                       		rts	
0000F3B6                            ; ===========================================================================
0000F3B6                            
0000F3B6                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F3B6 7001                       		moveq	#1,d0
0000F3B8 4E75                       		rts	
0000F3BA                            ; End of function ChkObjOnScreen2
0000F3BA                            
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            ; Subroutine to	load a level's objects
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            
0000F3BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3BA                            
0000F3BA                            
0000F3BA                            ObjPosLoad:				; XREF: Level; et al
0000F3BA 7000                       		moveq	#0,d0
0000F3BC 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000F3C0 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F3C4 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F3C8                            ; End of function ObjPosLoad
0000F3C8                            
0000F3C8                            ; ===========================================================================
0000F3C8 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F3CA 0000                       		dc.w OPL_Next-OPL_Index
0000F3CC                            ; ===========================================================================
0000F3CC                            
0000F3CC                            OPL_Main:				; XREF: OPL_Index
0000F3CC 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000F3D0 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000F3D4 ED08                       		lsl.b	#6,d0
0000F3D6 E848                       		lsr.w	#4,d0
0000F3D8 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F3DE 2248                       		movea.l	a0,a1
0000F3E0 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F3E4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F3E8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F3EC D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F3F0 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F3F4 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F3F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F3FC 34FC 0101                  		move.w	#$101,(a2)+
0000F400 303C 005E                  		move.w	#$5E,d0
0000F404                            
0000F404                            OPL_ClrList:
0000F404 429A                       		clr.l	(a2)+
0000F406 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F40A                            
0000F40A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F40E 7400                       		moveq	#0,d2
0000F410 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F414 0446 0080                  		subi.w	#$80,d6
0000F418 6400                       		bcc.s	loc_D93C
0000F41A 7C00                       		moveq	#0,d6
0000F41C                            
0000F41C                            loc_D93C:
0000F41C 0246 FF80                  		andi.w	#$FF80,d6
0000F420 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F424                            
0000F424                            loc_D944:
0000F424 BC50                       		cmp.w	(a0),d6
0000F426 6300                       		bls.s	loc_D956
0000F428 4A28 0004                  		tst.b	4(a0)
0000F42C 6A00                       		bpl.s	loc_D952
0000F42E 1412                       		move.b	(a2),d2
0000F430 5212                       		addq.b	#1,(a2)
0000F432                            
0000F432                            loc_D952:
0000F432 5C48                       		addq.w	#6,a0
0000F434 60EE                       		bra.s	loc_D944
0000F436                            ; ===========================================================================
0000F436                            
0000F436                            loc_D956:
0000F436 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F43A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F43E 0446 0080                  		subi.w	#$80,d6
0000F442 6500                       		bcs.s	loc_D976
0000F444                            
0000F444                            loc_D964:
0000F444 BC50                       		cmp.w	(a0),d6
0000F446 6300                       		bls.s	loc_D976
0000F448 4A28 0004                  		tst.b	4(a0)
0000F44C 6A00                       		bpl.s	loc_D972
0000F44E 522A 0001                  		addq.b	#1,1(a2)
0000F452                            
0000F452                            loc_D972:
0000F452 5C48                       		addq.w	#6,a0
0000F454 60EE                       		bra.s	loc_D964
0000F456                            ; ===========================================================================
0000F456                            
0000F456                            loc_D976:
0000F456 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F45A 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F460                            
0000F460                            OPL_Next:				; XREF: OPL_Index
0000F460 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F464 7400                       		moveq	#0,d2
0000F466 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F46A 0246 FF80                  		andi.w	#$FF80,d6
0000F46E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F472 6700 0000                  		beq.w	locret_DA3A
0000F476 6C00                       		bge.s	loc_D9F6
0000F478 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F47C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F480 0446 0080                  		subi.w	#$80,d6
0000F484 6500                       		bcs.s	loc_D9D2
0000F486                            
0000F486                            loc_D9A6:
0000F486 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F48A 6C00                       		bge.s	loc_D9D2
0000F48C 5D48                       		subq.w	#6,a0
0000F48E 4A28 0004                  		tst.b	4(a0)
0000F492 6A00                       		bpl.s	loc_D9BC
0000F494 532A 0001                  		subq.b	#1,1(a2)
0000F498 142A 0001                  		move.b	1(a2),d2
0000F49C                            
0000F49C                            loc_D9BC:
0000F49C 6100 0000                  		bsr.w	loc_DA3C
0000F4A0 6600                       		bne.s	loc_D9C6
0000F4A2 5D48                       		subq.w	#6,a0
0000F4A4 60E0                       		bra.s	loc_D9A6
0000F4A6                            ; ===========================================================================
0000F4A6                            
0000F4A6                            loc_D9C6:
0000F4A6 4A28 0004                  		tst.b	4(a0)
0000F4AA 6A00                       		bpl.s	loc_D9D0
0000F4AC 522A 0001                  		addq.b	#1,1(a2)
0000F4B0                            
0000F4B0                            loc_D9D0:
0000F4B0 5C48                       		addq.w	#6,a0
0000F4B2                            
0000F4B2                            loc_D9D2:
0000F4B2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F4B6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4BA 0646 0300                  		addi.w	#$300,d6
0000F4BE                            
0000F4BE                            loc_D9DE:
0000F4BE BC68 FFFA                  		cmp.w	-6(a0),d6
0000F4C2 6E00                       		bgt.s	loc_D9F0
0000F4C4 4A28 FFFE                  		tst.b	-2(a0)
0000F4C8 6A00                       		bpl.s	loc_D9EC
0000F4CA 5312                       		subq.b	#1,(a2)
0000F4CC                            
0000F4CC                            loc_D9EC:
0000F4CC 5D48                       		subq.w	#6,a0
0000F4CE 60EE                       		bra.s	loc_D9DE
0000F4D0                            ; ===========================================================================
0000F4D0                            
0000F4D0                            loc_D9F0:
0000F4D0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F4D4 4E75                       		rts	
0000F4D6                            ; ===========================================================================
0000F4D6                            
0000F4D6                            loc_D9F6:
0000F4D6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F4DA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4DE 0646 0280                  		addi.w	#$280,d6
0000F4E2                            
0000F4E2                            loc_DA02:
0000F4E2 BC50                       		cmp.w	(a0),d6
0000F4E4 6300                       		bls.s	loc_DA16
0000F4E6 4A28 0004                  		tst.b	4(a0)
0000F4EA 6A00                       		bpl.s	loc_DA10
0000F4EC 1412                       		move.b	(a2),d2
0000F4EE 5212                       		addq.b	#1,(a2)
0000F4F0                            
0000F4F0                            loc_DA10:
0000F4F0 6100 0000                  		bsr.w	loc_DA3C
0000F4F4 67EC                       		beq.s	loc_DA02
0000F4F6 4A28 0004                  		tst.b	$04(a0)			; MJ: was this object a remember state?
0000F4FA 6A00                       		bpl.s	loc_DA16		; MJ: if not, branch
0000F4FC 5312                       		subq.b	#$01,(a2)		; MJ: move right counter back
0000F4FE                            
0000F4FE                            loc_DA16:
0000F4FE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F502 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F506 0446 0300                  		subi.w	#$300,d6
0000F50A 6500                       		bcs.s	loc_DA36
0000F50C                            
0000F50C                            loc_DA24:
0000F50C BC50                       		cmp.w	(a0),d6
0000F50E 6300                       		bls.s	loc_DA36
0000F510 4A28 0004                  		tst.b	4(a0)
0000F514 6A00                       		bpl.s	loc_DA32
0000F516 522A 0001                  		addq.b	#1,1(a2)
0000F51A                            
0000F51A                            loc_DA32:
0000F51A 5C48                       		addq.w	#6,a0
0000F51C 60EE                       		bra.s	loc_DA24
0000F51E                            ; ===========================================================================
0000F51E                            
0000F51E                            loc_DA36:
0000F51E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F522                            
0000F522                            locret_DA3A:
0000F522 4E75                       		rts	
0000F524                            ; ===========================================================================
0000F524                            
0000F524                            loc_DA3C:
0000F524 4A28 0004                  		tst.b	4(a0)
0000F528 6A00                       		bpl.s	OPL_MakeItem
0000F52A 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000F530 6700                       		beq.s	OPL_MakeItem
0000F532 5C48                       		addq.w	#6,a0
0000F534 7000                       		moveq	#0,d0
0000F536 4E75                       		rts	
0000F538                            ; ===========================================================================
0000F538                            
0000F538                            OPL_MakeItem:
0000F538 6100 0000                  		bsr.w	SingleObjLoad
0000F53C 6600                       		bne.s	locret_DA8A
0000F53E 3358 0008                  		move.w	(a0)+,8(a1)
0000F542 3018                       		move.w	(a0)+,d0
0000F544 3200                       		move.w	d0,d1
0000F546 0240 0FFF                  		andi.w	#$FFF,d0
0000F54A 3340 000C                  		move.w	d0,$C(a1)
0000F54E E559                       		rol.w	#2,d1
0000F550 0201 0003                  		andi.b	#3,d1
0000F554 1341 0001                  		move.b	d1,1(a1)
0000F558 1341 0022                  		move.b	d1,$22(a1)
0000F55C 1018                       		move.b	(a0)+,d0
0000F55E 6A00                       		bpl.s	loc_DA80
0000F560 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)		; MJ: set as removed
0000F566 0200 007F                  		andi.b	#$7F,d0
0000F56A 1342 0023                  		move.b	d2,$23(a1)
0000F56E                            
0000F56E                            loc_DA80:
0000F56E 1280                       		move.b	d0,0(a1)
0000F570 1358 0028                  		move.b	(a0)+,$28(a1)
0000F574 7000                       		moveq	#0,d0
0000F576                            
0000F576                            locret_DA8A:
0000F576 4E75                       		rts	
0000F578                            ; ---------------------------------------------------------------------------
0000F578                            ; Single object	loading	subroutine
0000F578                            ; ---------------------------------------------------------------------------
0000F578                            
0000F578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F578                            
0000F578                            
0000F578                            SingleObjLoad:
0000F578 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F57C 303C 005F                  		move.w	#$5F,d0
0000F580                            
0000F580                            loc_DA94:
0000F580 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F582 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F584 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F588 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F58C                            
0000F58C                            locret_DAA0:
0000F58C 4E75                       		rts	
0000F58E                            ; End of function SingleObjLoad
0000F58E                            
0000F58E                            
0000F58E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F58E                            
0000F58E                            
0000F58E                            SingleObjLoad2:
0000F58E 2248                       		movea.l	a0,a1
0000F590 303C F000                  		move.w	#-$1000,d0
0000F594 9048                       		sub.w	a0,d0
0000F596 EC48                       		lsr.w	#6,d0
0000F598 5340                       		subq.w	#1,d0
0000F59A 6500                       		bcs.s	locret_DABC
0000F59C                            
0000F59C                            loc_DAB0:
0000F59C 4A11                       		tst.b	(a1)
0000F59E 6700                       		beq.s	locret_DABC
0000F5A0 43E9 0040                  		lea	$40(a1),a1
0000F5A4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F5A8                            
0000F5A8                            locret_DABC:
0000F5A8 4E75                       		rts	
0000F5AA                            ; End of function SingleObjLoad2
0000F5AA                            
0000F5AA                            ; ===========================================================================
0000F5AA                            ; ---------------------------------------------------------------------------
0000F5AA                            ; Object 41 - springs
0000F5AA                            ; ---------------------------------------------------------------------------
0000F5AA                            
0000F5AA                            Obj41:					; XREF: Obj_Index
0000F5AA 7000                       		moveq	#0,d0
0000F5AC 1028 0024                  		move.b	$24(a0),d0
0000F5B0 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F5B4 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F5B8 6100 FB2A                  		bsr.w	DisplaySprite
0000F5BC 3028 0008                  		move.w	8(a0),d0
0000F5C0 0240 FF80                  		andi.w	#$FF80,d0
0000F5C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5C8 0441 0080                  		subi.w	#$80,d1
0000F5CC 0241 FF80                  		andi.w	#$FF80,d1
0000F5D0 9041                       		sub.w	d1,d0
0000F5D2 0C40 0280                  		cmpi.w	#$280,d0
0000F5D6 6200 FB48                  		bhi.w	DeleteObject
0000F5DA 4E75                       		rts	
0000F5DC                            ; ===========================================================================
0000F5DC 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F5DE 0000                       		dc.w Obj41_Up-Obj41_Index
0000F5E0 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F5E2 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F5E4 0000                       		dc.w Obj41_LR-Obj41_Index
0000F5E6 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F5E8 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F5EA 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F5EC 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F5EE 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F5F0                            
0000F5F0 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F5F2 F600                       		dc.w -$A00		; power	of yellow spring
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            Obj41_Main:				; XREF: Obj41_Index
0000F5F4 5428 0024                  		addq.b	#2,$24(a0)
0000F5F8 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F600 317C 0523 0002             		move.w	#$523,2(a0)
0000F606 0028 0004 0001             		ori.b	#4,1(a0)
0000F60C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F612 117C 0004 0018             		move.b	#4,$18(a0)
0000F618 1028 0028                  		move.b	$28(a0),d0
0000F61C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F620 6700                       		beq.s	loc_DB54	; if not, branch
0000F622 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F628 117C 0001 001C             		move.b	#1,$1C(a0)
0000F62E 117C 0003 001A             		move.b	#3,$1A(a0)
0000F634 317C 0533 0002             		move.w	#$533,2(a0)
0000F63A 117C 0008 0019             		move.b	#8,$19(a0)
0000F640                            
0000F640                            loc_DB54:
0000F640 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F644 6700                       		beq.s	loc_DB66	; if not, branch
0000F646 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F64C 08E8 0001 0022             		bset	#1,$22(a0)
0000F652                            
0000F652                            loc_DB66:
0000F652 0800 0001                  		btst	#1,d0
0000F656 6700                       		beq.s	loc_DB72
0000F658 08E8 0005 0002             		bset	#5,2(a0)
0000F65E                            
0000F65E                            loc_DB72:
0000F65E 0240 000F                  		andi.w	#$F,d0
0000F662 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F668 4E75                       		rts	
0000F66A                            ; ===========================================================================
0000F66A                            
0000F66A                            Obj41_Up:				; XREF: Obj41_Index
0000F66A 323C 001B                  		move.w	#$1B,d1
0000F66E 343C 0008                  		move.w	#8,d2
0000F672 363C 0010                  		move.w	#$10,d3
0000F676 3828 0008                  		move.w	8(a0),d4
0000F67A 6100 0000                  		bsr.w	SolidObject
0000F67E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F682 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F684 4E75                       		rts	
0000F686                            ; ===========================================================================
0000F686                            
0000F686                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F686 5428 0024                  		addq.b	#2,$24(a0)
0000F68A 5069 000C                  		addq.w	#8,$C(a1)
0000F68E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F694 08E9 0001 0022             		bset	#1,$22(a1)
0000F69A 08A9 0003 0022             		bclr	#3,$22(a1)
0000F6A0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F6A6 137C 0002 0024             		move.b	#2,$24(a1)
0000F6AC 08A8 0003 0022             		bclr	#3,$22(a0)
0000F6B2 4228 0025                  		clr.b	$25(a0)
0000F6B6 303C 00CC                  		move.w	#$CC,d0
0000F6BA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F6C0                            
0000F6C0                            Obj41_AniUp:				; XREF: Obj41_Index
0000F6C0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F6C6 6000 CA70                  		bra.w	AnimateSprite
0000F6CA                            ; ===========================================================================
0000F6CA                            
0000F6CA                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F6CA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F6D0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F6D4 4E75                       		rts	
0000F6D6                            ; ===========================================================================
0000F6D6                            
0000F6D6                            Obj41_LR:				; XREF: Obj41_Index
0000F6D6 323C 0013                  		move.w	#$13,d1
0000F6DA 343C 000E                  		move.w	#$E,d2
0000F6DE 363C 000F                  		move.w	#$F,d3
0000F6E2 3828 0008                  		move.w	8(a0),d4
0000F6E6 6100 0000                  		bsr.w	SolidObject
0000F6EA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F6F0 6600                       		bne.s	loc_DC0C
0000F6F2 117C 0008 0024             		move.b	#8,$24(a0)
0000F6F8                            
0000F6F8                            loc_DC0C:
0000F6F8 0828 0005 0022             		btst	#5,$22(a0)
0000F6FE 6600                       		bne.s	Obj41_BounceLR
0000F700 4E75                       		rts	
0000F702                            ; ===========================================================================
0000F702                            
0000F702                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F702 5428 0024                  		addq.b	#2,$24(a0)
0000F706 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F70C 5069 0008                  		addq.w	#8,8(a1)
0000F710 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F716 6600                       		bne.s	loc_DC36	; if yes, branch
0000F718 0469 0010 0008             		subi.w	#$10,8(a1)
0000F71E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F722                            		
0000F722                            loc_DC36:
0000F722 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F728 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F72E 0869 0000 0022             		bchg	#0,$22(a1)
0000F734 0829 0002 0022             		btst	#2,$22(a1)
0000F73A 6600                       		bne.s	loc_DC56
0000F73C 103C 0000                  		move.b	#0,d0
0000F740 4A29 0039                  		tst.b	$39(a1)
0000F744 6700                       		beq.s	@not_crawling
0000F746 4E71                       		nop
0000F748                            		;move.b	#crawl_anim,d0
0000F748                            		
0000F748                            @not_crawling:
0000F748 1340 001C                  		move.b	d0,$1C(a1)
0000F74C                            
0000F74C                            loc_DC56:
0000F74C 08A8 0005 0022             		bclr	#5,$22(a0)
0000F752 08A9 0005 0022             		bclr	#5,$22(a1)
0000F758 303C 00CC                  		move.w	#$CC,d0
0000F75C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F762                            
0000F762                            Obj41_AniLR:				; XREF: Obj41_Index
0000F762 31FC 0000 C904             		move.w	#0,($FFFFC904).w	; clear screen delay counter
0000F768 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F76E 6000 C9C8                  		bra.w	AnimateSprite
0000F772                            ; ===========================================================================
0000F772                            
0000F772                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F772 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F778 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F77C 4E75                       		rts	
0000F77E                            ; ===========================================================================
0000F77E                            
0000F77E                            Obj41_Dwn:				; XREF: Obj41_Index
0000F77E 323C 001B                  		move.w	#$1B,d1
0000F782 343C 0008                  		move.w	#8,d2
0000F786 363C 0010                  		move.w	#$10,d3
0000F78A 3828 0008                  		move.w	8(a0),d4
0000F78E 6100 0000                  		bsr.w	SolidObject
0000F792 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F798 6600                       		bne.s	loc_DCA4
0000F79A 117C 000E 0024             		move.b	#$E,$24(a0)
0000F7A0                            
0000F7A0                            loc_DCA4:
0000F7A0 4A28 0025                  		tst.b	$25(a0)
0000F7A4 6600                       		bne.s	locret_DCAE
0000F7A6 4A44                       		tst.w	d4
0000F7A8 6B00                       		bmi.s	Obj41_BounceDwn
0000F7AA                            
0000F7AA                            locret_DCAE:
0000F7AA 4E75                       		rts	
0000F7AC                            ; ===========================================================================
0000F7AC                            
0000F7AC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F7AC 5428 0024                  		addq.b	#2,$24(a0)
0000F7B0 5169 000C                  		subq.w	#8,$C(a1)
0000F7B4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F7BA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F7BE 08E9 0001 0022             		bset	#1,$22(a1)
0000F7C4 08A9 0003 0022             		bclr	#3,$22(a1)
0000F7CA 137C 0002 0024             		move.b	#2,$24(a1)
0000F7D0 08A8 0003 0022             		bclr	#3,$22(a0)
0000F7D6 4228 0025                  		clr.b	$25(a0)
0000F7DA 303C 00CC                  		move.w	#$CC,d0
0000F7DE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F7E4                            
0000F7E4                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F7E4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F7EA 6000 C94C                  		bra.w	AnimateSprite
0000F7EE                            ; ===========================================================================
0000F7EE                            
0000F7EE                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F7EE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F7F4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F7F8 4E75                       		rts	
0000F7FA                            ; ===========================================================================
0000F7FA                            Ani_obj41:
0000F7FA                            	include "_anim\obj41.asm"
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            ; Animation script - springs
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA 0000                       		dc.w byte_DD02-Ani_obj41
0000F7FC 0000                       		dc.w byte_DD0E-Ani_obj41
0000F7FE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F80A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F816                            		even
0000F816                            		even
0000F816                            
0000F816                            ; ---------------------------------------------------------------------------
0000F816                            ; Sprite mappings - springs
0000F816                            ; ---------------------------------------------------------------------------
0000F816                            Map_obj41:
0000F816                            	include "_maps\obj41.asm"
0000F816                            ; ---------------------------------------------------------------------------
0000F816                            ; Sprite mappings - springs
0000F816                            ; ---------------------------------------------------------------------------
0000F816 0000                       		dc.w byte_DD26-Map_obj41
0000F818 0000                       		dc.w byte_DD31-Map_obj41
0000F81A 0000                       		dc.w byte_DD37-Map_obj41
0000F81C 0000                       		dc.w byte_DD47-Map_obj41
0000F81E 0000                       		dc.w byte_DD4D-Map_obj41
0000F820 0000                       		dc.w byte_DD53-Map_obj41
0000F822 02                         byte_DD26:	dc.b 2
0000F823 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F828 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F82D 01                         byte_DD31:	dc.b 1
0000F82E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F833 03                         byte_DD37:	dc.b 3
0000F834 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F839 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F83E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F843 01                         byte_DD47:	dc.b 1
0000F844 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F849 01                         byte_DD4D:	dc.b 1
0000F84A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F84F 04                         byte_DD53:	dc.b 4
0000F850 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F855 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F85A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F85F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F864                            		even
0000F864                            		even
0000F864                            
0000F864                            ; ===========================================================================
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Object 42 - Newtron enemy (GHZ)
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            
0000F864                            Obj42:					; XREF: Obj_Index
0000F864 7000                       		moveq	#0,d0
0000F866 1028 0024                  		move.b	$24(a0),d0
0000F86A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F86E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F872                            ; ===========================================================================
0000F872 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F874 0000                       		dc.w Obj42_Action-Obj42_Index
0000F876 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F878                            ; ===========================================================================
0000F878                            
0000F878                            Obj42_Main:				; XREF: Obj42_Index
0000F878 5428 0024                  		addq.b	#2,$24(a0)
0000F87C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F884 317C 049B 0002             		move.w	#$49B,2(a0)
0000F88A 117C 0004 0001             		move.b	#4,1(a0)
0000F890 117C 0004 0018             		move.b	#4,$18(a0)
0000F896 117C 0014 0019             		move.b	#$14,$19(a0)
0000F89C 117C 0010 0016             		move.b	#$10,$16(a0)
0000F8A2 117C 0008 0017             		move.b	#8,$17(a0)
0000F8A8                            
0000F8A8                            Obj42_Action:				; XREF: Obj42_Index
0000F8A8 7000                       		moveq	#0,d0
0000F8AA 1028 0025                  		move.b	$25(a0),d0
0000F8AE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F8B2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F8B6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F8BC 6100 C87A                  		bsr.w	AnimateSprite
0000F8C0 6000 0000                  		bra.w	MarkObjGone
0000F8C4                            ; ===========================================================================
0000F8C4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F8C6 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F8C8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F8CA 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F8CC 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F8CE                            ; ===========================================================================
0000F8CE                            
0000F8CE                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F8CE 08E8 0000 0022             		bset	#0,$22(a0)
0000F8D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8D8 9068 0008                  		sub.w	8(a0),d0
0000F8DC 6400                       		bcc.s	loc_DDEA
0000F8DE 4440                       		neg.w	d0
0000F8E0 08A8 0000 0022             		bclr	#0,$22(a0)
0000F8E6                            
0000F8E6                            loc_DDEA:
0000F8E6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F8EA 6400                       		bcc.s	locret_DE12	; if not, branch
0000F8EC 5428 0025                  		addq.b	#2,$25(a0)
0000F8F0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F8F6 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F8FA 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F8FC 317C 249B 0002             		move.w	#$249B,2(a0)
0000F902 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F908 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F90E                            
0000F90E                            locret_DE12:
0000F90E 4E75                       		rts	
0000F910                            ; ===========================================================================
0000F910                            
0000F910                            Obj42_Type00:				; XREF: Obj42_Index2
0000F910 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F916 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F918 08E8 0000 0022             		bset	#0,$22(a0)
0000F91E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F922 9068 0008                  		sub.w	8(a0),d0
0000F926 6400                       		bcc.s	locret_DE32
0000F928 08A8 0000 0022             		bclr	#0,$22(a0)
0000F92E                            
0000F92E                            locret_DE32:
0000F92E 4E75                       		rts	
0000F930                            ; ===========================================================================
0000F930                            
0000F930                            Obj42_Fall:				; XREF: Obj42_Type00
0000F930 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F936 6600                       		bne.s	loc_DE42
0000F938 117C 000C 0020             		move.b	#$C,$20(a0)
0000F93E                            
0000F93E                            loc_DE42:
0000F93E 6100 F76A                  		bsr.w	ObjectFall
0000F942 6100 0000                  		bsr.w	ObjHitFloor
0000F946 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F948 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F94A D368 000C                  		add.w	d1,$C(a0)
0000F94E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F954 5428 0025                  		addq.b	#2,$25(a0)
0000F958 117C 0002 001C             		move.b	#2,$1C(a0)
0000F95E 0828 0005 0002             		btst	#5,2(a0)
0000F964 6700                       		beq.s	Obj42_Move
0000F966 5228 001C                  		addq.b	#1,$1C(a0)
0000F96A                            
0000F96A                            Obj42_Move:
0000F96A 117C 000D 0020             		move.b	#$D,$20(a0)
0000F970 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F976 0828 0000 0022             		btst	#0,$22(a0)
0000F97C 6600                       		bne.s	locret_DE86
0000F97E 4468 0010                  		neg.w	$10(a0)
0000F982                            
0000F982                            locret_DE86:
0000F982 4E75                       		rts	
0000F984                            ; ===========================================================================
0000F984                            
0000F984                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F984 6100 F744                  		bsr.w	SpeedToPos
0000F988 6100 0000                  		bsr.w	ObjHitFloor
0000F98C 0C41 FFF8                  		cmpi.w	#-8,d1
0000F990 6D00                       		blt.s	loc_DEA2
0000F992 0C41 000C                  		cmpi.w	#$C,d1
0000F996 6C00                       		bge.s	loc_DEA2
0000F998 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F99C 4E75                       		rts	
0000F99E                            ; ===========================================================================
0000F99E                            
0000F99E                            loc_DEA2:
0000F99E 5428 0025                  		addq.b	#2,$25(a0)
0000F9A2 4E75                       		rts	
0000F9A4                            ; ===========================================================================
0000F9A4                            
0000F9A4                            Obj42_Speed:				; XREF: Obj42_Index2
0000F9A4 6100 F724                  		bsr.w	SpeedToPos
0000F9A8 4E75                       		rts	
0000F9AA                            ; ===========================================================================
0000F9AA                            
0000F9AA                            Obj42_Type01:				; XREF: Obj42_Index2
0000F9AA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F9B0 6600                       		bne.s	Obj42_FireMissile
0000F9B2 117C 000C 0020             		move.b	#$C,$20(a0)
0000F9B8                            
0000F9B8                            Obj42_FireMissile:
0000F9B8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F9BE 6600                       		bne.s	locret_DF14
0000F9C0 4A28 0032                  		tst.b	$32(a0)
0000F9C4 6600                       		bne.s	locret_DF14
0000F9C6 117C 0001 0032             		move.b	#1,$32(a0)
0000F9CC 6100 FBAA                  		bsr.w	SingleObjLoad
0000F9D0 6600                       		bne.s	locret_DF14
0000F9D2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F9D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F9DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F9E2 5169 000C                  		subq.w	#8,$C(a1)
0000F9E6 337C 0200 0010             		move.w	#$200,$10(a1)
0000F9EC 303C 0014                  		move.w	#$14,d0
0000F9F0 0828 0000 0022             		btst	#0,$22(a0)
0000F9F6 6600                       		bne.s	loc_DF04
0000F9F8 4440                       		neg.w	d0
0000F9FA 4469 0010                  		neg.w	$10(a1)
0000F9FE                            
0000F9FE                            loc_DF04:
0000F9FE D169 0008                  		add.w	d0,8(a1)
0000FA02 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FA08 137C 0001 0028             		move.b	#1,$28(a1)
0000FA0E                            
0000FA0E                            locret_DF14:
0000FA0E 4E75                       		rts	
0000FA10                            ; ===========================================================================
0000FA10                            
0000FA10                            Obj42_Delete:				; XREF: Obj42_Index
0000FA10 6000 F70E                  		bra.w	DeleteObject
0000FA14                            ; ===========================================================================
0000FA14                            Ani_obj42:
0000FA14                            	include "_anim\obj42.asm"
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Animation script - Newtron enemy
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14 0000                       		dc.w byte_DF24-Ani_obj42
0000FA16 0000                       		dc.w byte_DF28-Ani_obj42
0000FA18 0000                       		dc.w byte_DF30-Ani_obj42
0000FA1A 0000                       		dc.w byte_DF34-Ani_obj42
0000FA1C 0000                       		dc.w byte_DF38-Ani_obj42
0000FA1E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000FA22 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000FA2A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000FA2E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000FA32 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000FA3C                            		even
0000FA3C                            		even
0000FA3C                            
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Sprite mappings - Newtron enemy (GHZ)
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            Map_obj42:
0000FA3C                            	include "_maps\obj42.asm"
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Sprite mappings - Newtron enemy (GHZ)
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000FA40 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000FA44 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000FA48 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000FA4C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000FA50 0000                       		dc.w byte_DFF8-Map_obj42
0000FA52 03                         byte_DF58:	dc.b 3
0000FA53 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000FA58 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FA5D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FA62 03                         byte_DF68:	dc.b 3
0000FA63 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000FA68 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA6D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FA72 03                         byte_DF78:	dc.b 3
0000FA73 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000FA78 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA7D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FA82 04                         byte_DF88:	dc.b 4
0000FA83 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000FA88 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FA8D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FA92 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FA97 03                         byte_DF9D:	dc.b 3
0000FA98 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FA9D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FAA2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FAA7 02                         byte_DFAD:	dc.b 2
0000FAA8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAAD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAB2 03                         byte_DFB8:	dc.b 3
0000FAB3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAB8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FABD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FAC2 03                         byte_DFC8:	dc.b 3
0000FAC3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAC8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FACD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FAD2 03                         byte_DFD8:	dc.b 3
0000FAD3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAD8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FADD FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FAE2 03                         byte_DFE8:	dc.b 3
0000FAE3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FAE8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FAED FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FAF2 00                         byte_DFF8:	dc.b 0
0000FAF4 00                         		even
0000FAF4 00                         		even
0000FAF4                            
0000FAF4                            ; ===========================================================================
0000FAF4                            ; ---------------------------------------------------------------------------
0000FAF4                            ; Object 43 - Roller enemy (SYZ)
0000FAF4                            ; ---------------------------------------------------------------------------
0000FAF4                            
0000FAF4                            Obj43:					; XREF: Obj_Index
0000FAF4 7000                       		moveq	#0,d0
0000FAF6 1028 0024                  		move.b	$24(a0),d0
0000FAFA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FAFE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FB02                            ; ===========================================================================
0000FB02 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FB04 0000                       		dc.w Obj43_Action-Obj43_Index
0000FB06                            ; ===========================================================================
0000FB06                            
0000FB06                            Obj43_Main:				; XREF: Obj43_Index
0000FB06 117C 000E 0016             		move.b	#$E,$16(a0)
0000FB0C 117C 0008 0017             		move.b	#8,$17(a0)
0000FB12 6100 F596                  		bsr.w	ObjectFall
0000FB16 6100 0000                  		bsr.w	ObjHitFloor
0000FB1A 4A41                       		tst.w	d1
0000FB1C 6A00                       		bpl.s	locret_E052
0000FB1E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FB22 317C 0000 0012             		move.w	#0,$12(a0)
0000FB28 5428 0024                  		addq.b	#2,$24(a0)
0000FB2C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FB34 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FB3A 117C 0004 0001             		move.b	#4,1(a0)
0000FB40 117C 0004 0018             		move.b	#4,$18(a0)
0000FB46 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB4C                            
0000FB4C                            locret_E052:
0000FB4C 4E75                       		rts	
0000FB4E                            ; ===========================================================================
0000FB4E                            
0000FB4E                            Obj43_Action:				; XREF: Obj43_Index
0000FB4E 7000                       		moveq	#0,d0
0000FB50 1028 0025                  		move.b	$25(a0),d0
0000FB54 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FB58 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FB5C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FB62 6100 C5D4                  		bsr.w	AnimateSprite
0000FB66 3028 0008                  		move.w	8(a0),d0
0000FB6A 0240 FF80                  		andi.w	#$FF80,d0
0000FB6E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB72 0441 0080                  		subi.w	#$80,d1
0000FB76 0241 FF80                  		andi.w	#$FF80,d1
0000FB7A 9041                       		sub.w	d1,d0
0000FB7C 0C40 0280                  		cmpi.w	#$280,d0
0000FB80 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FB84 6000 F55E                  		bra.w	DisplaySprite
0000FB88                            ; ===========================================================================
0000FB88                            
0000FB88                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FB88 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB8C 7000                       		moveq	#0,d0
0000FB8E 1028 0023                  		move.b	$23(a0),d0
0000FB92 6700                       		beq.s	Obj43_Delete
0000FB94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB9A                            
0000FB9A                            Obj43_Delete:
0000FB9A 6000 F584                  		bra.w	DeleteObject
0000FB9E                            ; ===========================================================================
0000FB9E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FBA0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FBA2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FBA4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FBA6                            ; ===========================================================================
0000FBA6                            
0000FBA6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FBA6 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBAA 0440 0100                  		subi.w	#$100,d0
0000FBAE 6500                       		bcs.s	loc_E0D2
0000FBB0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FBB4 6500                       		bcs.s	loc_E0D2
0000FBB6 5828 0025                  		addq.b	#4,$25(a0)
0000FBBA 117C 0002 001C             		move.b	#2,$1C(a0)
0000FBC0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FBC6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FBCC                            
0000FBCC                            loc_E0D2:
0000FBCC 588F                       		addq.l	#4,sp
0000FBCE 4E75                       		rts	
0000FBD0                            ; ===========================================================================
0000FBD0                            
0000FBD0                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FBD0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FBD6 6700                       		beq.s	loc_E0F8
0000FBD8 5368 0030                  		subq.w	#1,$30(a0)
0000FBDC 6A00                       		bpl.s	locret_E0F6
0000FBDE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FBE4 317C 0700 0010             		move.w	#$700,$10(a0)
0000FBEA 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FBF0                            
0000FBF0                            locret_E0F6:
0000FBF0 4E75                       		rts	
0000FBF2                            ; ===========================================================================
0000FBF2                            
0000FBF2                            loc_E0F8:
0000FBF2 5428 0025                  		addq.b	#2,$25(a0)
0000FBF6 4E75                       		rts	
0000FBF8                            ; ===========================================================================
0000FBF8                            
0000FBF8                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FBF8 6100 0000                  		bsr.w	Obj43_Stop
0000FBFC 6100 F4CC                  		bsr.w	SpeedToPos
0000FC00 6100 0000                  		bsr.w	ObjHitFloor
0000FC04 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC08 6D00                       		blt.s	Obj43_Jump
0000FC0A 0C41 000C                  		cmpi.w	#$C,d1
0000FC0E 6C00                       		bge.s	Obj43_Jump
0000FC10 D368 000C                  		add.w	d1,$C(a0)
0000FC14 4E75                       		rts	
0000FC16                            ; ===========================================================================
0000FC16                            
0000FC16                            Obj43_Jump:
0000FC16 5428 0025                  		addq.b	#2,$25(a0)
0000FC1A 08E8 0000 0032             		bset	#0,$32(a0)
0000FC20 6700                       		beq.s	locret_E12E
0000FC22 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FC28                            
0000FC28                            locret_E12E:
0000FC28 4E75                       		rts	
0000FC2A                            ; ===========================================================================
0000FC2A                            
0000FC2A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FC2A 6100 F47E                  		bsr.w	ObjectFall
0000FC2E 4A68 0012                  		tst.w	$12(a0)
0000FC32 6B00                       		bmi.s	locret_E150
0000FC34 6100 0000                  		bsr.w	ObjHitFloor
0000FC38 4A41                       		tst.w	d1
0000FC3A 6A00                       		bpl.s	locret_E150
0000FC3C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FC40 5528 0025                  		subq.b	#2,$25(a0)
0000FC44 317C 0000 0012             		move.w	#0,$12(a0)
0000FC4A                            
0000FC4A                            locret_E150:
0000FC4A 4E75                       		rts	
0000FC4C                            
0000FC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC4C                            
0000FC4C                            
0000FC4C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FC4C 4A28 0032                  		tst.b	$32(a0)
0000FC50 6B00                       		bmi.s	locret_E188
0000FC52 3038 D008                  		move.w	($FFFFD008).w,d0
0000FC56 0440 0030                  		subi.w	#$30,d0
0000FC5A 9068 0008                  		sub.w	8(a0),d0
0000FC5E 6400                       		bcc.s	locret_E188
0000FC60 117C 0000 001C             		move.b	#0,$1C(a0)
0000FC66 117C 000E 0020             		move.b	#$E,$20(a0)
0000FC6C 4268 0010                  		clr.w	$10(a0)
0000FC70 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FC76 117C 0002 0025             		move.b	#2,$25(a0)
0000FC7C 08E8 0007 0032             		bset	#7,$32(a0)
0000FC82                            
0000FC82                            locret_E188:
0000FC82 4E75                       		rts	
0000FC84                            ; End of function Obj43_Stop
0000FC84                            
0000FC84                            ; ===========================================================================
0000FC84                            Ani_obj43:
0000FC84                            	include "_anim\obj43.asm"
0000FC84                            ; ---------------------------------------------------------------------------
0000FC84                            ; Animation script - Roller enemy
0000FC84                            ; ---------------------------------------------------------------------------
0000FC84 0000                       		dc.w byte_E190-Ani_obj43
0000FC86 0000                       		dc.w byte_E196-Ani_obj43
0000FC88 0000                       		dc.w byte_E19C-Ani_obj43
0000FC8A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FC90 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FC96 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FC9C 00                         		even
0000FC9C 00                         		even
0000FC9C                            
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            ; Sprite mappings - Roller enemy (SYZ)
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            Map_obj43:
0000FC9C                            	include "_maps\obj43.asm"
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C                            ; Sprite mappings - Roller enemy (SYZ)
0000FC9C                            ; ---------------------------------------------------------------------------
0000FC9C 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FCA0 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FCA4 0000                       		dc.w byte_E1CE-Map_obj43
0000FCA6 02                         byte_E1AC:	dc.b 2
0000FCA7 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FCAC F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FCB1 02                         byte_E1B7:	dc.b 2
0000FCB2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FCB7 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FCBC 01                         byte_E1C2:	dc.b 1
0000FCBD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FCC2 01                         byte_E1C8:	dc.b 1
0000FCC3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FCC8 01                         byte_E1CE:	dc.b 1
0000FCC9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FCCE                            		even
0000FCCE                            		even
0000FCCE                            
0000FCCE                            ; ===========================================================================
0000FCCE                            ; ---------------------------------------------------------------------------
0000FCCE                            ; Object 44 - walls (GHZ)
0000FCCE                            ; ---------------------------------------------------------------------------
0000FCCE                            
0000FCCE                            Obj44:					; XREF: Obj_Index
0000FCCE 7000                       		moveq	#0,d0
0000FCD0 1028 0024                  		move.b	$24(a0),d0
0000FCD4 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FCD8 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FCDC                            ; ===========================================================================
0000FCDC 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FCDE 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FCE0 0000                       		dc.w Obj44_Display-Obj44_Index
0000FCE2                            ; ===========================================================================
0000FCE2                            
0000FCE2                            Obj44_Main:				; XREF: Obj44_Index
0000FCE2 5428 0024                  		addq.b	#2,$24(a0)
0000FCE6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FCEE 317C 434C 0002             		move.w	#$434C,2(a0)
0000FCF4 0028 0004 0001             		ori.b	#4,1(a0)
0000FCFA 117C 0008 0019             		move.b	#8,$19(a0)
0000FD00 117C 0006 0018             		move.b	#6,$18(a0)
0000FD06 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FD0C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FD12 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FD14 5428 0024                  		addq.b	#2,$24(a0)
0000FD18 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FD1A                            ; ===========================================================================
0000FD1A                            
0000FD1A                            Obj44_Solid:				; XREF: Obj44_Index
0000FD1A 323C 0013                  		move.w	#$13,d1
0000FD1E 343C 0028                  		move.w	#$28,d2
0000FD22 6100 A728                  		bsr.w	Obj44_SolidWall
0000FD26                            
0000FD26                            Obj44_Display:				; XREF: Obj44_Index
0000FD26 6100 F3BC                  		bsr.w	DisplaySprite
0000FD2A 3028 0008                  		move.w	8(a0),d0
0000FD2E 0240 FF80                  		andi.w	#$FF80,d0
0000FD32 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD36 0441 0080                  		subi.w	#$80,d1
0000FD3A 0241 FF80                  		andi.w	#$FF80,d1
0000FD3E 9041                       		sub.w	d1,d0
0000FD40 0C40 0280                  		cmpi.w	#$280,d0
0000FD44 6200 F3DA                  		bhi.w	DeleteObject
0000FD48 4E75                       		rts	
0000FD4A                            ; ===========================================================================
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            ; Sprite mappings - walls (GHZ)
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            Map_obj44:
0000FD4A                            	include "_maps\obj44.asm"
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            ; Sprite mappings - walls (GHZ)
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A 0000                       		dc.w byte_E256-Map_obj44
0000FD4C 0000                       		dc.w byte_E26B-Map_obj44
0000FD4E 0000                       		dc.w byte_E280-Map_obj44
0000FD50 04                         byte_E256:	dc.b 4
0000FD51 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FD56 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FD5B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FD60 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FD65 04                         byte_E26B:	dc.b 4
0000FD66 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FD6B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FD70 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FD75 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FD7A 04                         byte_E280:	dc.b 4
0000FD7B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FD80 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FD85 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FD8A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FD90 00                         		even
0000FD90 00                         		even
0000FD90                            
0000FD90                            ; ===========================================================================
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            
0000FD90                            Obj13:					; XREF: Obj_Index
0000FD90 7000                       		moveq	#0,d0
0000FD92 1028 0024                  		move.b	$24(a0),d0
0000FD96 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FD9A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FD9E 6000 0000                  		bra.w	Obj14_ChkDel
0000FDA2                            ; ===========================================================================
0000FDA2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FDA4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FDA6                            ; ---------------------------------------------------------------------------
0000FDA6                            ;
0000FDA6                            ; Lava ball production rates
0000FDA6                            ;
0000FDA6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FDAC                            ; ===========================================================================
0000FDAC                            
0000FDAC                            Obj13_Main:				; XREF: Obj13_Index
0000FDAC 5428 0024                  		addq.b	#2,$24(a0)
0000FDB0 1028 0028                  		move.b	$28(a0),d0
0000FDB4 E848                       		lsr.w	#4,d0
0000FDB6 0240 000F                  		andi.w	#$F,d0
0000FDBA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FDC0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FDC6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FDCC                            
0000FDCC                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FDCC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FDD0 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FDD2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FDD8 6100 F584                  		bsr.w	ChkObjOnScreen
0000FDDC 6600                       		bne.s	locret_E302
0000FDDE 6100 F798                  		bsr.w	SingleObjLoad
0000FDE2 6600                       		bne.s	locret_E302
0000FDE4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FDE8 3368 0008 0008             		move.w	8(a0),8(a1)
0000FDEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FDF4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FDFA                            
0000FDFA                            locret_E302:
0000FDFA 4E75                       		rts	
0000FDFC                            ; ===========================================================================
0000FDFC                            ; ---------------------------------------------------------------------------
0000FDFC                            ; Object 14 - lava balls (MZ, SLZ)
0000FDFC                            ; ---------------------------------------------------------------------------
0000FDFC                            
0000FDFC                            Obj14:					; XREF: Obj_Index
0000FDFC 7000                       		moveq	#0,d0
0000FDFE 1028 0024                  		move.b	$24(a0),d0
0000FE02 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FE06 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FE0A 6000 F2D8                  		bra.w	DisplaySprite
0000FE0E                            ; ===========================================================================
0000FE0E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FE10 0000                       		dc.w Obj14_Action-Obj14_Index
0000FE12 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FE14                            
0000FE14 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FE1E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FE26                            ; ===========================================================================
0000FE26                            
0000FE26                            Obj14_Main:				; XREF: Obj14_Index
0000FE26 5428 0024                  		addq.b	#2,$24(a0)
0000FE2A 117C 0008 0016             		move.b	#8,$16(a0)
0000FE30 117C 0008 0017             		move.b	#8,$17(a0)
0000FE36 217C 0000 CD8A 0004        		move.l	#Map_obj14,4(a0)
0000FE3E 317C 0345 0002             		move.w	#$345,2(a0)
0000FE44 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FE4A 6600                       		bne.s	loc_E35A
0000FE4C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FE52                            
0000FE52                            loc_E35A:
0000FE52 117C 0004 0001             		move.b	#4,1(a0)
0000FE58 117C 0003 0018             		move.b	#3,$18(a0)
0000FE5E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FE64 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FE6A 4A28 0029                  		tst.b	$29(a0)
0000FE6E 6700                       		beq.s	Obj14_SetSpeed
0000FE70 5428 0018                  		addq.b	#2,$18(a0)
0000FE74                            
0000FE74                            Obj14_SetSpeed:
0000FE74 7000                       		moveq	#0,d0
0000FE76 1028 0028                  		move.b	$28(a0),d0
0000FE7A D040                       		add.w	d0,d0
0000FE7C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FE82 117C 0008 0019             		move.b	#8,$19(a0)
0000FE88 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FE8E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FE90 117C 0010 0019             		move.b	#$10,$19(a0)
0000FE96 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FE9C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FEA2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FEA8                            
0000FEA8                            Obj14_PlaySnd:
0000FEA8 303C 00AE                  		move.w	#$AE,d0
0000FEAC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FEB2                            
0000FEB2                            Obj14_Action:				; XREF: Obj14_Index
0000FEB2 7000                       		moveq	#0,d0
0000FEB4 1028 0028                  		move.b	$28(a0),d0
0000FEB8 D040                       		add.w	d0,d0
0000FEBA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FEBE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FEC2 6100 F206                  		bsr.w	SpeedToPos
0000FEC6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FECC 6100 C26A                  		bsr.w	AnimateSprite
0000FED0                            
0000FED0                            Obj14_ChkDel:				; XREF: Obj13
0000FED0 3028 0008                  		move.w	8(a0),d0
0000FED4 0240 FF80                  		andi.w	#$FF80,d0
0000FED8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEDC 0441 0080                  		subi.w	#$80,d1
0000FEE0 0241 FF80                  		andi.w	#$FF80,d1
0000FEE4 9041                       		sub.w	d1,d0
0000FEE6 0C40 0280                  		cmpi.w	#$280,d0
0000FEEA 6200 F234                  		bhi.w	DeleteObject
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FEF4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FEF8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FEFC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FF00 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FF02                            ; ===========================================================================
0000FF02                            ; lavaball types 00-03 fly up and fall back down
0000FF02                            
0000FF02                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FF02 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FF08 3028 0030                  		move.w	$30(a0),d0
0000FF0C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FF10 6400                       		bcc.s	loc_E41E	; if not, branch
0000FF12 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FF16                            
0000FF16                            loc_E41E:
0000FF16 08A8 0001 0022             		bclr	#1,$22(a0)
0000FF1C 4A68 0012                  		tst.w	$12(a0)
0000FF20 6A00                       		bpl.s	locret_E430
0000FF22 08E8 0001 0022             		bset	#1,$22(a0)
0000FF28                            
0000FF28                            locret_E430:
0000FF28 4E75                       		rts	
0000FF2A                            ; ===========================================================================
0000FF2A                            ; lavaball type	04 flies up until it hits the ceiling
0000FF2A                            
0000FF2A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FF2A 08E8 0001 0022             		bset	#1,$22(a0)
0000FF30 6100 0000                  		bsr.w	ObjHitCeiling
0000FF34 4A41                       		tst.w	d1
0000FF36 6A00                       		bpl.s	locret_E452
0000FF38 117C 0008 0028             		move.b	#8,$28(a0)
0000FF3E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF44 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FF4A                            
0000FF4A                            locret_E452:
0000FF4A 4E75                       		rts	
0000FF4C                            ; ===========================================================================
0000FF4C                            ; lavaball type	05 falls down until it hits the	floor
0000FF4C                            
0000FF4C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FF4C 08A8 0001 0022             		bclr	#1,$22(a0)
0000FF52 6100 0000                  		bsr.w	ObjHitFloor
0000FF56 4A41                       		tst.w	d1
0000FF58 6A00                       		bpl.s	locret_E474
0000FF5A 117C 0008 0028             		move.b	#8,$28(a0)
0000FF60 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF66 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FF6C                            
0000FF6C                            locret_E474:
0000FF6C 4E75                       		rts	
0000FF6E                            ; ===========================================================================
0000FF6E                            ; lavaball types 06-07 move sideways
0000FF6E                            
0000FF6E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FF6E 08E8 0000 0022             		bset	#0,$22(a0)
0000FF74 76F8                       		moveq	#-8,d3
0000FF76 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF7A 4A41                       		tst.w	d1
0000FF7C 6A00                       		bpl.s	locret_E498
0000FF7E 117C 0008 0028             		move.b	#8,$28(a0)
0000FF84 117C 0003 001C             		move.b	#3,$1C(a0)
0000FF8A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FF90                            
0000FF90                            locret_E498:
0000FF90 4E75                       		rts	
0000FF92                            ; ===========================================================================
0000FF92                            
0000FF92                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FF92 08A8 0000 0022             		bclr	#0,$22(a0)
0000FF98 7608                       		moveq	#8,d3
0000FF9A 6100 0000                  		bsr.w	ObjHitWallRight
0000FF9E 4A41                       		tst.w	d1
0000FFA0 6A00                       		bpl.s	locret_E4BC
0000FFA2 117C 0008 0028             		move.b	#8,$28(a0)
0000FFA8 117C 0003 001C             		move.b	#3,$1C(a0)
0000FFAE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FFB4                            
0000FFB4                            locret_E4BC:
0000FFB4 4E75                       		rts	
0000FFB6                            ; ===========================================================================
0000FFB6                            
0000FFB6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FFB6 4E75                       		rts	
0000FFB8                            ; ===========================================================================
0000FFB8                            
0000FFB8                            Obj14_Delete:				; XREF: Obj14_Index
0000FFB8 6000 F166                  		bra.w	DeleteObject
0000FFBC                            ; ===========================================================================
0000FFBC                            Ani_obj14:
0000FFBC                            	include "_anim\obj14.asm"
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC                            ; Animation script - lava balls
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC 0000                       		dc.w byte_E4CC-Ani_obj14
0000FFBE 0000                       		dc.w byte_E4D2-Ani_obj14
0000FFC0 0000                       		dc.w byte_E4D6-Ani_obj14
0000FFC2 0000                       		dc.w byte_E4DC-Ani_obj14
0000FFC4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FFCA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FFCE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FFD4 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FFD8                            		even
0000FFD8                            		even
0000FFD8                            
0000FFD8                            ; ===========================================================================
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            ; Object 6D - flame thrower (SBZ)
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            
0000FFD8                            Obj6D:					; XREF: Obj_Index
0000FFD8 7000                       		moveq	#0,d0
0000FFDA 1028 0024                  		move.b	$24(a0),d0
0000FFDE 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FFE2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FFE6                            ; ===========================================================================
0000FFE6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FFE8 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FFEA                            ; ===========================================================================
0000FFEA                            
0000FFEA                            Obj6D_Main:				; XREF: Obj6D_Index
0000FFEA 5428 0024                  		addq.b	#2,$24(a0)
0000FFEE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FFF6 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FFFC 0028 0004 0001             		ori.b	#4,1(a0)
00010002 117C 0001 0018             		move.b	#1,$18(a0)
00010008 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001000E 117C 000C 0019             		move.b	#$C,$19(a0)
00010014 1028 0028                  		move.b	$28(a0),d0
00010018 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001001C D040                       		add.w	d0,d0		; multiply by 2
0001001E 3140 0030                  		move.w	d0,$30(a0)
00010022 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010026 1028 0028                  		move.b	$28(a0),d0
0001002A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001002E EB48                       		lsl.w	#5,d0		; multiply by $20
00010030 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010034 117C 000A 0036             		move.b	#$A,$36(a0)
0001003A 0828 0001 0022             		btst	#1,$22(a0)
00010040 6700                       		beq.s	Obj6D_Action
00010042 117C 0002 001C             		move.b	#2,$1C(a0)
00010048 117C 0015 0036             		move.b	#$15,$36(a0)
0001004E                            
0001004E                            Obj6D_Action:				; XREF: Obj6D_Index
0001004E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010052 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010054 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001005A 0868 0000 001C             		bchg	#0,$1C(a0)
00010060 6700                       		beq.s	loc_E57A
00010062 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010068 303C 00B3                  		move.w	#$B3,d0
0001006C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010072                            
00010072                            loc_E57A:
00010072 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
00010078 6100 C0BE                  		bsr.w	AnimateSprite
0001007C 117C 0000 0020             		move.b	#0,$20(a0)
00010082 1028 0036                  		move.b	$36(a0),d0
00010086 B028 001A                  		cmp.b	$1A(a0),d0
0001008A 6600                       		bne.s	Obj6D_ChkDel
0001008C 117C 00A3 0020             		move.b	#$A3,$20(a0)
00010092                            
00010092                            Obj6D_ChkDel:
00010092 3028 0008                  		move.w	8(a0),d0
00010096 0240 FF80                  		andi.w	#$FF80,d0
0001009A 3238 F700                  		move.w	($FFFFF700).w,d1
0001009E 0441 0080                  		subi.w	#$80,d1
000100A2 0241 FF80                  		andi.w	#$FF80,d1
000100A6 9041                       		sub.w	d1,d0
000100A8 0C40 0280                  		cmpi.w	#$280,d0
000100AC 6200 F072                  		bhi.w	DeleteObject
000100B0 6000 F032                  		bra.w	DisplaySprite
000100B4                            ; ===========================================================================
000100B4                            Ani_obj6D:
000100B4                            	include "_anim\obj6D.asm"
000100B4                            ; ---------------------------------------------------------------------------
000100B4                            ; Animation script - flamethrower (SBZ)
000100B4                            ; ---------------------------------------------------------------------------
000100B4 0000                       		dc.w byte_E5C4-Ani_obj6D
000100B6 0000                       		dc.w byte_E5D2-Ani_obj6D
000100B8 0000                       		dc.w byte_E5DC-Ani_obj6D
000100BA 0000                       		dc.w byte_E5EA-Ani_obj6D
000100BC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000100CA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
000100D4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
000100E2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
000100EC                            		even
000100EC                            		even
000100EC                            
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            ; Sprite mappings - flame thrower (SBZ)
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            Map_obj6D:
000100EC                            	include "_maps\obj6D.asm"
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            ; Sprite mappings - flame thrower (SBZ)
000100EC                            ; ---------------------------------------------------------------------------
000100EC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
000100F0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
000100F4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
000100F8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
000100FC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00010100 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00010104 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00010108 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001010C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
00010110 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00010114 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00010118 01                         byte_E620:	dc.b 1
00010119 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001011E 02                         byte_E626:	dc.b 2
0001011F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010124 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010129 02                         byte_E631:	dc.b 2
0001012A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001012F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010134 03                         byte_E63C:	dc.b 3
00010135 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001013A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001013F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010144 03                         byte_E64C:	dc.b 3
00010145 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001014A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001014F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010154 04                         byte_E65C:	dc.b 4
00010155 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001015A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001015F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010164 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010169 04                         byte_E671:	dc.b 4
0001016A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001016F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010174 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010179 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001017E 05                         byte_E686:	dc.b 5
0001017F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010184 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010189 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001018E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010193 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010198 05                         byte_E6A0:	dc.b 5
00010199 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001019E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000101A3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101A8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101AD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101B2 06                         byte_E6BA:	dc.b 6
000101B3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000101B8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000101BD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101C2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000101C7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101CC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101D1 06                         byte_E6D9:	dc.b 6
000101D2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000101D7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000101DC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000101E1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101E6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101EB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101F0 01                         byte_E6F8:	dc.b 1
000101F1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101F6 02                         byte_E6FE:	dc.b 2
000101F7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101FC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010201 02                         byte_E709:	dc.b 2
00010202 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010207 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001020C 03                         byte_E714:	dc.b 3
0001020D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010212 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010217 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001021C 03                         byte_E724:	dc.b 3
0001021D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010222 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010227 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001022C 04                         byte_E734:	dc.b 4
0001022D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010232 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010237 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001023C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010241 04                         byte_E749:	dc.b 4
00010242 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010247 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001024C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010251 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010256 05                         byte_E75E:	dc.b 5
00010257 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001025C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010261 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010266 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001026B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010270 05                         byte_E778:	dc.b 5
00010271 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010276 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001027B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010280 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010285 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001028A 06                         byte_E792:	dc.b 6
0001028B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010290 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010295 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001029A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001029F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102A4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102A9 06                         byte_E7B1:	dc.b 6
000102AA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000102AF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000102B4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000102B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102BE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102C3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102C8                            		even
000102C8                            		even
000102C8                            
000102C8                            ; ===========================================================================
000102C8                            ; ---------------------------------------------------------------------------
000102C8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000102C8                            ; ---------------------------------------------------------------------------
000102C8                            
000102C8                            Obj46:					; XREF: Obj_Index
000102C8 7000                       		moveq	#0,d0
000102CA 1028 0024                  		move.b	$24(a0),d0
000102CE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000102D2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000102D6                            ; ===========================================================================
000102D6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000102D8 0000                       		dc.w Obj46_Action-Obj46_Index
000102DA                            ; ===========================================================================
000102DA                            
000102DA                            Obj46_Main:				; XREF: Obj46_Index
000102DA 5428 0024                  		addq.b	#2,$24(a0)
000102DE 117C 000F 0016             		move.b	#$F,$16(a0)
000102E4 117C 000F 0017             		move.b	#$F,$17(a0)
000102EA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
000102F2 317C 4000 0002             		move.w	#$4000,2(a0)
000102F8 117C 0004 0001             		move.b	#4,1(a0)
000102FE 117C 0003 0018             		move.b	#3,$18(a0)
00010304 117C 0010 0019             		move.b	#$10,$19(a0)
0001030A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010310 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010316                            
00010316                            Obj46_Action:				; XREF: Obj46_Index
00010316 4A28 0001                  		tst.b	1(a0)
0001031A 6A00                       		bpl.s	Obj46_ChkDel
0001031C 7000                       		moveq	#0,d0
0001031E 1028 0028                  		move.b	$28(a0),d0	; get object type
00010322 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010326 D040                       		add.w	d0,d0
00010328 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0001032C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00010330 323C 001B                  		move.w	#$1B,d1
00010334 343C 0010                  		move.w	#$10,d2
00010338 363C 0011                  		move.w	#$11,d3
0001033C 3828 0008                  		move.w	8(a0),d4
00010340 6100 0000                  		bsr.w	SolidObject
00010344                            
00010344                            Obj46_ChkDel:
00010344 6100 ED9E                  		bsr.w	DisplaySprite
00010348 3028 0008                  		move.w	8(a0),d0
0001034C 0240 FF80                  		andi.w	#$FF80,d0
00010350 3238 F700                  		move.w	($FFFFF700).w,d1
00010354 0441 0080                  		subi.w	#$80,d1
00010358 0241 FF80                  		andi.w	#$FF80,d1
0001035C 9041                       		sub.w	d1,d0
0001035E 0C40 0280                  		cmpi.w	#$280,d0
00010362 6200 EDBC                  		bhi.w	DeleteObject
00010366 4E75                       		rts	
00010368                            ; ===========================================================================
00010368 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001036A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001036C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001036E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010370 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010372                            ; ===========================================================================
00010372                            
00010372                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010372 4E75                       		rts	
00010374                            ; ===========================================================================
00010374                            
00010374                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010374 3038 D008                  		move.w	($FFFFD008).w,d0
00010378 9068 0008                  		sub.w	8(a0),d0
0001037C 6400                       		bcc.s	loc_E888
0001037E 4440                       		neg.w	d0
00010380                            
00010380                            loc_E888:
00010380 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010384 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010386 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001038C                            
0001038C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001038C 7000                       		moveq	#0,d0
0001038E 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010392 0828 0003 0028             		btst	#3,$28(a0)
00010398 6700                       		beq.s	loc_E8A8
0001039A 4440                       		neg.w	d0
0001039C 0640 0010                  		addi.w	#$10,d0
000103A0                            
000103A0                            loc_E8A8:
000103A0 3228 0030                  		move.w	$30(a0),d1
000103A4 9240                       		sub.w	d0,d1
000103A6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
000103AA 4E75                       		rts	
000103AC                            ; ===========================================================================
000103AC                            
000103AC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
000103AC 6100 ED1C                  		bsr.w	SpeedToPos
000103B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
000103B6 6100 0000                  		bsr.w	ObjHitFloor
000103BA 4A41                       		tst.w	d1		; has the block	hit the	floor?
000103BC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000103C0 D368 000C                  		add.w	d1,$C(a0)
000103C4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000103C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103CE 117C 0004 0028             		move.b	#4,$28(a0)
000103D4 3011                       		move.w	(a1),d0
000103D6 0240 03FF                  		andi.w	#$3FF,d0
000103DA 0C40 02E8                  		cmpi.w	#$2E8,d0
000103DE 6400                       		bcc.s	locret_E8EE
000103E0 117C 0000 0028             		move.b	#0,$28(a0)
000103E6                            
000103E6                            locret_E8EE:
000103E6 4E75                       		rts	
000103E8                            ; ===========================================================================
000103E8                            
000103E8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000103E8 7000                       		moveq	#0,d0
000103EA 1038 FE70                  		move.b	($FFFFFE70).w,d0
000103EE E648                       		lsr.w	#3,d0
000103F0 3228 0030                  		move.w	$30(a0),d1
000103F4 9240                       		sub.w	d0,d1
000103F6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000103FA 4E75                       		rts	
000103FC                            ; ===========================================================================
000103FC                            ; ---------------------------------------------------------------------------
000103FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000103FC                            ; ---------------------------------------------------------------------------
000103FC                            Map_obj46:
000103FC                            	include "_maps\obj46.asm"
000103FC                            ; ---------------------------------------------------------------------------
000103FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000103FC                            ; ---------------------------------------------------------------------------
000103FC 0000                       		dc.w byte_E906-Map_obj46
000103FE 01                         byte_E906:	dc.b 1
000103FF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010404                            		even
00010404                            		even
00010404                            
00010404                            ; ===========================================================================
00010404                            ; ---------------------------------------------------------------------------
00010404                            ; Object 12 - lamp (SYZ)
00010404                            ; ---------------------------------------------------------------------------
00010404                            
00010404                            Obj12:					; XREF: Obj_Index
00010404 7000                       		moveq	#0,d0
00010406 1028 0024                  		move.b	$24(a0),d0
0001040A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0001040E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00010412                            ; ===========================================================================
00010412 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00010414 0000                       		dc.w Obj12_Animate-Obj12_Index
00010416                            ; ===========================================================================
00010416                            
00010416                            Obj12_Main:				; XREF: Obj12_Index
00010416 5428 0024                  		addq.b	#2,$24(a0)
0001041A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00010422 317C 0000 0002             		move.w	#0,2(a0)
00010428 117C 0004 0001             		move.b	#4,1(a0)
0001042E 117C 0010 0019             		move.b	#$10,$19(a0)
00010434 117C 0006 0018             		move.b	#6,$18(a0)
0001043A                            
0001043A                            Obj12_Animate:				; XREF: Obj12_Index
0001043A 5328 001E                  		subq.b	#1,$1E(a0)
0001043E 6A00                       		bpl.s	Obj12_ChkDel
00010440 117C 0007 001E             		move.b	#7,$1E(a0)
00010446 5228 001A                  		addq.b	#1,$1A(a0)
0001044A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00010450 6500                       		bcs.s	Obj12_ChkDel
00010452 117C 0000 001A             		move.b	#0,$1A(a0)
00010458                            
00010458                            Obj12_ChkDel:
00010458 3028 0008                  		move.w	8(a0),d0
0001045C 0240 FF80                  		andi.w	#$FF80,d0
00010460 3238 F700                  		move.w	($FFFFF700).w,d1
00010464 0441 0080                  		subi.w	#$80,d1
00010468 0241 FF80                  		andi.w	#$FF80,d1
0001046C 9041                       		sub.w	d1,d0
0001046E 0C40 0280                  		cmpi.w	#$280,d0
00010472 6200 ECAC                  		bhi.w	DeleteObject
00010476 6000 EC6C                  		bra.w	DisplaySprite
0001047A                            ; ===========================================================================
0001047A                            ; ---------------------------------------------------------------------------
0001047A                            ; Sprite mappings - lamp (SYZ)
0001047A                            ; ---------------------------------------------------------------------------
0001047A                            Map_obj12:
0001047A                            	include "_maps\obj12.asm"
0001047A                            ; ---------------------------------------------------------------------------
0001047A                            ; Sprite mappings - lamp (SYZ)
0001047A                            ; ---------------------------------------------------------------------------
0001047A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001047E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010482 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010486 02                         byte_E98E:	dc.b 2
00010487 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001048C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010491 02                         byte_E999:	dc.b 2
00010492 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010497 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001049C 02                         byte_E9A4:	dc.b 2
0001049D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
000104A2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
000104A7 02                         byte_E9AF:	dc.b 2
000104A8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
000104AD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
000104B2 02                         byte_E9BA:	dc.b 2
000104B3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
000104B8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000104BD 02                         byte_E9C5:	dc.b 2
000104BE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000104C3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000104C8                            		even
000104C8                            		even
000104C8                            
000104C8                            ; ===========================================================================
000104C8                            ; ---------------------------------------------------------------------------
000104C8                            ; Object 47 - pinball bumper (SYZ)
000104C8                            ; ---------------------------------------------------------------------------
000104C8                            
000104C8                            Obj47:					; XREF: Obj_Index
000104C8 7000                       		moveq	#0,d0
000104CA 1028 0024                  		move.b	$24(a0),d0
000104CE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000104D2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000104D6                            ; ===========================================================================
000104D6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000104D8 0000                       		dc.w Obj47_Hit-Obj47_Index
000104DA                            ; ===========================================================================
000104DA                            
000104DA                            Obj47_Main:				; XREF: Obj47_Index
000104DA 5428 0024                  		addq.b	#2,$24(a0)
000104DE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000104E6 317C 0380 0002             		move.w	#$380,2(a0)
000104EC 117C 0004 0001             		move.b	#4,1(a0)
000104F2 117C 0010 0019             		move.b	#$10,$19(a0)
000104F8 117C 0001 0018             		move.b	#1,$18(a0)
000104FE 117C 00D7 0020             		move.b	#$D7,$20(a0)
00010504                            
00010504                            Obj47_Hit:				; XREF: Obj47_Index
00010504 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00010508 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001050C 4228 0021                  		clr.b	$21(a0)
00010510 43F8 D000                  		lea	($FFFFD000).w,a1
00010514 3228 0008                  		move.w	8(a0),d1
00010518 3428 000C                  		move.w	$C(a0),d2
0001051C 9269 0008                  		sub.w	8(a1),d1
00010520 9469 000C                  		sub.w	$C(a1),d2
00010524 4EB9 0000 2E48             		jsr	(CalcAngle).l
0001052A 4EB9 0000 2B7A             		jsr	(CalcSine).l
00010530 C3FC F900                  		muls.w	#-$700,d1
00010534 E081                       		asr.l	#8,d1
00010536 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0001053A C1FC F900                  		muls.w	#-$700,d0
0001053E E080                       		asr.l	#8,d0
00010540 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00010544 08E9 0001 0022             		bset	#1,$22(a1)
0001054A 08A9 0004 0022             		bclr	#4,$22(a1)
00010550 08A9 0005 0022             		bclr	#5,$22(a1)
00010556 4229 003C                  		clr.b	$3C(a1)
0001055A 117C 0001 001C             		move.b	#1,$1C(a0)
00010560 303C 00B4                  		move.w	#$B4,d0
00010564 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bumper sound
0001056A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001056E 7000                       		moveq	#0,d0
00010570 1028 0023                  		move.b	$23(a0),d0
00010574 6700                       		beq.s	Obj47_Score
00010576 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0001057C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001057E 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010582                            
00010582                            Obj47_Score:
00010582 7001                       		moveq	#1,d0
00010584 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001058A 6100 EFEC                  		bsr.w	SingleObjLoad
0001058E 6600                       		bne.s	Obj47_Display
00010590 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010594 3368 0008 0008             		move.w	8(a0),8(a1)
0001059A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000105A0 137C 0004 001A             		move.b	#4,$1A(a1)
000105A6                            
000105A6                            Obj47_Display:
000105A6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
000105AC 6100 BB8A                  		bsr.w	AnimateSprite
000105B0 3028 0008                  		move.w	8(a0),d0
000105B4 0240 FF80                  		andi.w	#$FF80,d0
000105B8 3238 F700                  		move.w	($FFFFF700).w,d1
000105BC 0441 0080                  		subi.w	#$80,d1
000105C0 0241 FF80                  		andi.w	#$FF80,d1
000105C4 9041                       		sub.w	d1,d0
000105C6 0C40 0280                  		cmpi.w	#$280,d0
000105CA 6200                       		bhi.s	Obj47_ChkHit
000105CC 6000 EB16                  		bra.w	DisplaySprite
000105D0                            ; ===========================================================================
000105D0                            
000105D0                            Obj47_ChkHit:				; XREF: Obj47_Display
000105D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105D4 7000                       		moveq	#0,d0
000105D6 1028 0023                  		move.b	$23(a0),d0
000105DA 6700                       		beq.s	Obj47_Delete
000105DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000105E2                            
000105E2                            Obj47_Delete:
000105E2 6000 EB3C                  		bra.w	DeleteObject
000105E6                            ; ===========================================================================
000105E6                            Ani_obj47:
000105E6                            	include "_anim\obj47.asm"
000105E6                            ; ---------------------------------------------------------------------------
000105E6                            ; Animation script - flamethrower (SBZ)
000105E6                            ; ---------------------------------------------------------------------------
000105E6 0000                       		dc.w byte_EAF4-Ani_obj47
000105E8 0000                       		dc.w byte_EAF8-Ani_obj47
000105EA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000105EE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000105F6                            		even
000105F6                            		even
000105F6                            
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            ; Sprite mappings - pinball bumper (SYZ)
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            Map_obj47:
000105F6                            	include "_maps\obj47.asm"
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            ; Sprite mappings - pinball bumper (SYZ)
000105F6                            ; ---------------------------------------------------------------------------
000105F6 0000                       		dc.w byte_EB06-Map_obj47
000105F8 0000                       		dc.w byte_EB11-Map_obj47
000105FA 0000                       		dc.w byte_EB1C-Map_obj47
000105FC 02                         byte_EB06:	dc.b 2
000105FD F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010602 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010607 02                         byte_EB11:	dc.b 2
00010608 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0001060D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010612 02                         byte_EB1C:	dc.b 2
00010613 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010618 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0001061E 00                         		even
0001061E 00                         		even
0001061E                            
0001061E                            ; ===========================================================================
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            ; Object 0D - signpost at the end of a level
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            
0001061E                            Obj0D:					; XREF: Obj_Index
0001061E 7000                       		moveq	#0,d0
00010620 1028 0024                  		move.b	$24(a0),d0
00010624 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00010628 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0001062C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00010632 6100 BB04                  		bsr.w	AnimateSprite
00010636 6100 EAAC                  		bsr.w	DisplaySprite
0001063A 3028 0008                  		move.w	8(a0),d0
0001063E 0240 FF80                  		andi.w	#$FF80,d0
00010642 3238 F700                  		move.w	($FFFFF700).w,d1
00010646 0441 0080                  		subi.w	#$80,d1
0001064A 0241 FF80                  		andi.w	#$FF80,d1
0001064E 9041                       		sub.w	d1,d0
00010650 0C40 0280                  		cmpi.w	#$280,d0
00010654 6200 EACA                  		bhi.w	DeleteObject
00010658 4E75                       		rts	
0001065A                            ; ===========================================================================
0001065A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0001065C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0001065E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010660 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010662 0000                       		dc.w locret_ED1A-Obj0D_Index
00010664                            ; ===========================================================================
00010664                            
00010664                            Obj0D_Main:				; XREF: Obj0D_Index
00010664 5428 0024                  		addq.b	#2,$24(a0)
00010668 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010670 317C 0680 0002             		move.w	#$680,2(a0)
00010676 117C 0004 0001             		move.b	#4,1(a0)
0001067C 117C 0018 0019             		move.b	#$18,$19(a0)
00010682 117C 0004 0018             		move.b	#4,$18(a0)
00010688                            
00010688                            Obj0D_Touch:				; XREF: Obj0D_Index
00010688 3038 D008                  		move.w	($FFFFD008).w,d0
0001068C 9068 0008                  		sub.w	8(a0),d0
00010690 6500                       		bcs.s	locret_EBBA
00010692 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010696 6400                       		bcc.s	locret_EBBA	; if not, branch
00010698 303C 00CF                  		move.w	#$CF,d0
0001069C 4EB9 0000 12C6             		jsr	(PlaySound).l	; play signpost	sound
000106A2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000106A6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
000106AC 5428 0024                  		addq.b	#2,$24(a0)
000106B0                            
000106B0                            locret_EBBA:
000106B0 4E75                       		rts	
000106B2                            ; ===========================================================================
000106B2                            
000106B2                            Obj0D_Spin:				; XREF: Obj0D_Index
000106B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
000106B6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
000106B8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
000106BE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
000106C2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000106C8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000106CA 5428 0024                  		addq.b	#2,$24(a0)
000106CE                            
000106CE                            Obj0D_Sparkle:
000106CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000106D2 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000106D4 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000106DA 7000                       		moveq	#0,d0
000106DC 1028 0034                  		move.b	$34(a0),d0
000106E0 5428 0034                  		addq.b	#2,$34(a0)
000106E4 0228 000E 0034             		andi.b	#$E,$34(a0)
000106EA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000106EE 6100 EE88                  		bsr.w	SingleObjLoad
000106F2 6600                       		bne.s	locret_EC42
000106F4 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000106F8 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000106FE 101A                       		move.b	(a2)+,d0
00010700 4880                       		ext.w	d0
00010702 D068 0008                  		add.w	8(a0),d0
00010706 3340 0008                  		move.w	d0,8(a1)
0001070A 101A                       		move.b	(a2)+,d0
0001070C 4880                       		ext.w	d0
0001070E D068 000C                  		add.w	$C(a0),d0
00010712 3340 000C                  		move.w	d0,$C(a1)
00010716 237C 0000 B9AE 0004        		move.l	#Map_obj25,4(a1)
0001071E 337C 27B2 0002             		move.w	#$27B2,2(a1)
00010724 137C 0004 0001             		move.b	#4,1(a1)
0001072A 137C 0002 0018             		move.b	#2,$18(a1)
00010730 137C 0008 0019             		move.b	#8,$19(a1)
00010736                            
00010736                            locret_EC42:
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0001073A 0808                       		dc.b	8,   8
0001073C F000                       		dc.b -$10,   0
0001073E 18F8                       		dc.b  $18,  -8
00010740 00F8                       		dc.b	0,  -8
00010742 1000                       		dc.b  $10,   0
00010744 E808                       		dc.b -$18,   8
00010746 1810                       		dc.b  $18, $10
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010748 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001074C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010750 0838 0001 D022             		btst	#1,($FFFFD022).w
00010756 6600                       		bne.s	loc_EC70
00010758 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001075E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010764                            
00010764                            loc_EC70:
00010764 4A38 D000                  		tst.b	($FFFFD000).w
00010768 6700                       		beq.s	loc_EC86
0001076A 3038 D008                  		move.w	($FFFFD008).w,d0
0001076E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010772 0641 0128                  		addi.w	#$128,d1
00010776 B041                       		cmp.w	d1,d0
00010778 6500                       		bcs.s	locret_ECEE
0001077A                            
0001077A                            loc_EC86:
0001077A 5428 0024                  		addq.b	#2,$24(a0)
0001077E                            
0001077E                            ; ---------------------------------------------------------------------------
0001077E                            ; Subroutine to	set up bonuses at the end of an	act
0001077E                            ; ---------------------------------------------------------------------------
0001077E                            
0001077E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001077E                            
0001077E                            
0001077E                            GotThroughAct:				; XREF: Obj3E_EndAct
0001077E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010782 6600                       		bne.s	locret_ECEE
00010784 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0001078A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001078E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010792 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010798 7010                       		moveq	#$10,d0
0001079A 4EB9 0000 15B8             		jsr	(LoadPLC2).l	; load title card patterns
000107A0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
000107A6 7000                       		moveq	#0,d0
000107A8 1038 FE23                  		move.b	($FFFFFE23).w,d0
000107AC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000107B0 7200                       		moveq	#0,d1
000107B2 1238 FE24                  		move.b	($FFFFFE24).w,d1
000107B6 D041                       		add.w	d1,d0		; add up your time
000107B8 80FC 000F                  		divu.w	#15,d0		; divide by 15
000107BC 7214                       		moveq	#$14,d1
000107BE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000107C0 6500                       		bcs.s	loc_ECD0	; if not, branch
000107C2 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000107C4                            
000107C4                            loc_ECD0:
000107C4 D040                       		add.w	d0,d0
000107C6 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000107CC 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000107D0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000107D4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000107D8 303C 008E                  		move.w	#$8E,d0
000107DC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000107E2                            
000107E2                            locret_ECEE:
000107E2 4E75                       		rts	
000107E4                            ; End of function GotThroughAct
000107E4                            
000107E4                            ; ===========================================================================
000107E4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000107F8 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001080E                            ; ===========================================================================
0001080E                            
0001080E                            locret_ED1A:				; XREF: Obj0D_Index
0001080E 4E75                       		rts	
00010810                            ; ===========================================================================
00010810                            Ani_obj0D:
00010810                            	include "_anim\obj0D.asm"
00010810                            ; ---------------------------------------------------------------------------
00010810                            ; Animation script - signpost
00010810                            ; ---------------------------------------------------------------------------
00010810 0000                       		dc.w byte_ED24-Ani_obj0D
00010812 0000                       		dc.w byte_ED28-Ani_obj0D
00010814 0000                       		dc.w byte_ED2E-Ani_obj0D
00010816 0000                       		dc.w byte_ED34-Ani_obj0D
00010818 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0001081C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00010822 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00010828 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0001082C 00                         		even
0001082C 00                         		even
0001082C                            
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            ; Sprite mappings - signpost
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            Map_obj0D:
0001082C                            	include "_maps\obj0D.asm"
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            ; Sprite mappings - signpost
0001082C                            ; ---------------------------------------------------------------------------
0001082C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00010830 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010834 0000                       		dc.w byte_ED73-Map_obj0D
00010836 03                         byte_ED42:	dc.b 3
00010837 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001083C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00010841 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010846 02                         byte_ED52:	dc.b 2
00010847 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0001084C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010851 02                         byte_ED5D:	dc.b 2
00010852 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010857 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001085C 02                         byte_ED68:	dc.b 2
0001085D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010862 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010867 03                         byte_ED73:	dc.b 3
00010868 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001086D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010872 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010878 00                         		even
00010878 00                         		even
00010878                            
00010878                            ; ===========================================================================
00010878                            ; ---------------------------------------------------------------------------
00010878                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010878                            ; ---------------------------------------------------------------------------
00010878                            
00010878                            Obj4C:					; XREF: Obj_Index
00010878 7000                       		moveq	#0,d0
0001087A 1028 0024                  		move.b	$24(a0),d0
0001087E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010882 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010886 6000 0000                  		bra.w	Obj4D_ChkDel
0001088A                            ; ===========================================================================
0001088A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001088C 0000                       		dc.w loc_EDCC-Obj4C_Index
0001088E 0000                       		dc.w loc_EE3E-Obj4C_Index
00010890 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010892 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010894 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010896                            ; ===========================================================================
00010896                            
00010896                            Obj4C_Main:				; XREF: Obj4C_Index
00010896 5428 0024                  		addq.b	#2,$24(a0)
0001089A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
000108A2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
000108A8 117C 0004 0001             		move.b	#4,1(a0)
000108AE 117C 0001 0018             		move.b	#1,$18(a0)
000108B4 117C 0038 0019             		move.b	#$38,$19(a0)
000108BA 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000108C0                            
000108C0                            loc_EDCC:				; XREF: Obj4C_Index
000108C0 5368 0032                  		subq.w	#1,$32(a0)
000108C4 6A00                       		bpl.s	locret_EDF0
000108C6 3168 0034 0032             		move.w	$34(a0),$32(a0)
000108CC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108D0 3228 000C                  		move.w	$C(a0),d1
000108D4 B041                       		cmp.w	d1,d0
000108D6 6400                       		bcc.s	locret_EDF0
000108D8 0441 0170                  		subi.w	#$170,d1
000108DC B041                       		cmp.w	d1,d0
000108DE 6500                       		bcs.s	locret_EDF0
000108E0 5428 0024                  		addq.b	#2,$24(a0)
000108E4                            
000108E4                            locret_EDF0:
000108E4 4E75                       		rts	
000108E6                            ; ===========================================================================
000108E6                            
000108E6                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000108E6 5428 0024                  		addq.b	#2,$24(a0)
000108EA 6100 ECA2                  		bsr.w	SingleObjLoad2
000108EE 6600                       		bne.s	loc_EE18
000108F0 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000108F4 3368 0008 0008             		move.w	8(a0),8(a1)
000108FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010900 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010906 2348 003C                  		move.l	a0,$3C(a1)
0001090A                            
0001090A                            loc_EE18:
0001090A 117C 0001 001C             		move.b	#1,$1C(a0)
00010910 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010914 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010916 117C 0004 001C             		move.b	#4,$1C(a0)
0001091C 6000                       		bra.s	Obj4C_Display
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0001091E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010922 08E9 0001 0022             		bset	#1,$22(a1)
00010928 337C FA80 0012             		move.w	#-$580,$12(a1)
0001092E 6000                       		bra.s	Obj4C_Display
00010930                            ; ===========================================================================
00010930                            
00010930                            loc_EE3E:				; XREF: Obj4C_Index
00010930 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010934 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010936 5428 0024                  		addq.b	#2,$24(a0)
0001093A 4E75                       		rts	
0001093C                            ; ===========================================================================
0001093C                            
0001093C                            Obj4C_Display:				; XREF: Obj4C_Index
0001093C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010942 6100 B7F4                  		bsr.w	AnimateSprite
00010946 6100 E79C                  		bsr.w	DisplaySprite
0001094A 4E75                       		rts	
0001094C                            ; ===========================================================================
0001094C                            
0001094C                            Obj4C_Delete:				; XREF: Obj4C_Index
0001094C 117C 0000 001C             		move.b	#0,$1C(a0)
00010952 117C 0002 0024             		move.b	#2,$24(a0)
00010958 4A28 0028                  		tst.b	$28(a0)
0001095C 6700 E7C2                  		beq.w	DeleteObject
00010960 4E75                       		rts	
00010962                            ; ===========================================================================
00010962                            ; ---------------------------------------------------------------------------
00010962                            ; Object 4D - lava geyser / lavafall (MZ)
00010962                            ; ---------------------------------------------------------------------------
00010962                            
00010962                            Obj4D:					; XREF: Obj_Index
00010962 7000                       		moveq	#0,d0
00010964 1028 0024                  		move.b	$24(a0),d0
00010968 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001096C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010970 6000 E772                  		bra.w	DisplaySprite
00010974                            ; ===========================================================================
00010974 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010976 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010978 0000                       		dc.w loc_EFFC-Obj4D_Index
0001097A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001097C                            
0001097C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010980                            ; ===========================================================================
00010980                            
00010980                            Obj4D_Main:				; XREF: Obj4D_Index
00010980 5428 0024                  		addq.b	#2,$24(a0)
00010984 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001098A 4A28 0028                  		tst.b	$28(a0)
0001098E 6700                       		beq.s	loc_EEA4
00010990 0468 0250 000C             		subi.w	#$250,$C(a0)
00010996                            
00010996                            loc_EEA4:
00010996 7000                       		moveq	#0,d0
00010998 1028 0028                  		move.b	$28(a0),d0
0001099C D040                       		add.w	d0,d0
0001099E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
000109A4 2248                       		movea.l	a0,a1
000109A6 7201                       		moveq	#1,d1
000109A8 6100                       		bsr.s	Obj4D_MakeLava
000109AA 6000                       		bra.s	loc_EF10
000109AC                            ; ===========================================================================
000109AC                            
000109AC                            Obj4D_Loop:
000109AC 6100 EBE0                  		bsr.w	SingleObjLoad2
000109B0 6600                       		bne.s	loc_EF0A
000109B2                            
000109B2                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000109B2 12BC 004D                  		move.b	#$4D,0(a1)
000109B6 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000109BE 337C 63A8 0002             		move.w	#$63A8,2(a1)
000109C4 137C 0004 0001             		move.b	#4,1(a1)
000109CA 137C 0020 0019             		move.b	#$20,$19(a1)
000109D0 3368 0008 0008             		move.w	8(a0),8(a1)
000109D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109DC 1368 0028 0028             		move.b	$28(a0),$28(a1)
000109E2 137C 0001 0018             		move.b	#1,$18(a1)
000109E8 137C 0005 001C             		move.b	#5,$1C(a1)
000109EE 4A28 0028                  		tst.b	$28(a0)
000109F2 6700                       		beq.s	loc_EF0A
000109F4 137C 0002 001C             		move.b	#2,$1C(a1)
000109FA                            
000109FA                            loc_EF0A:
000109FA 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000109FE 4E75                       		rts	
00010A00                            ; ===========================================================================
00010A00                            
00010A00                            loc_EF10:				; XREF: Obj4D_Main
00010A00 0669 0060 000C             		addi.w	#$60,$C(a1)
00010A06 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010A0C 0669 0060 0030             		addi.w	#$60,$30(a1)
00010A12 137C 0093 0020             		move.b	#$93,$20(a1)
00010A18 137C 0080 0016             		move.b	#$80,$16(a1)
00010A1E 08E9 0004 0001             		bset	#4,1(a1)
00010A24 5829 0024                  		addq.b	#4,$24(a1)
00010A28 2348 003C                  		move.l	a0,$3C(a1)
00010A2C 4A28 0028                  		tst.b	$28(a0)
00010A30 6700                       		beq.s	Obj4D_PlaySnd
00010A32 7200                       		moveq	#0,d1
00010A34 6100 FF76                  		bsr.w	Obj4D_Loop
00010A38 5429 0024                  		addq.b	#2,$24(a1)
00010A3C 08E9 0004 0002             		bset	#4,2(a1)
00010A42 0669 0100 000C             		addi.w	#$100,$C(a1)
00010A48 137C 0000 0018             		move.b	#0,$18(a1)
00010A4E 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010A54 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010A5A 117C 0000 0028             		move.b	#0,$28(a0)
00010A60                            
00010A60                            Obj4D_PlaySnd:
00010A60 303C 00C8                  		move.w	#$C8,d0
00010A64 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010A6A                            
00010A6A                            Obj4D_Action:				; XREF: Obj4D_Index
00010A6A 7000                       		moveq	#0,d0
00010A6C 1028 0028                  		move.b	$28(a0),d0
00010A70 D040                       		add.w	d0,d0
00010A72 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010A76 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010A7A 6100 E64E                  		bsr.w	SpeedToPos
00010A7E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010A84 6100 B6B2                  		bsr.w	AnimateSprite
00010A88                            
00010A88                            Obj4D_ChkDel:				; XREF: Obj4C
00010A88 3028 0008                  		move.w	8(a0),d0
00010A8C 0240 FF80                  		andi.w	#$FF80,d0
00010A90 3238 F700                  		move.w	($FFFFF700).w,d1
00010A94 0441 0080                  		subi.w	#$80,d1
00010A98 0241 FF80                  		andi.w	#$FF80,d1
00010A9C 9041                       		sub.w	d1,d0
00010A9E 0C40 0280                  		cmpi.w	#$280,d0
00010AA2 6200 E67C                  		bhi.w	DeleteObject
00010AA6 4E75                       		rts	
00010AA8                            ; ===========================================================================
00010AA8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010AAA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010AAC                            ; ===========================================================================
00010AAC                            
00010AAC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010AAC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010AB2 3028 0030                  		move.w	$30(a0),d0
00010AB6 B068 000C                  		cmp.w	$C(a0),d0
00010ABA 6400                       		bcc.s	locret_EFDA
00010ABC 5828 0024                  		addq.b	#4,$24(a0)
00010AC0 2268 003C                  		movea.l	$3C(a0),a1
00010AC4 137C 0003 001C             		move.b	#3,$1C(a1)
00010ACA                            
00010ACA                            locret_EFDA:
00010ACA 4E75                       		rts	
00010ACC                            ; ===========================================================================
00010ACC                            
00010ACC                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010ACC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010AD2 3028 0030                  		move.w	$30(a0),d0
00010AD6 B068 000C                  		cmp.w	$C(a0),d0
00010ADA 6400                       		bcc.s	locret_EFFA
00010ADC 5828 0024                  		addq.b	#4,$24(a0)
00010AE0 2268 003C                  		movea.l	$3C(a0),a1
00010AE4 137C 0001 001C             		move.b	#1,$1C(a1)
00010AEA                            
00010AEA                            locret_EFFA:
00010AEA 4E75                       		rts	
00010AEC                            ; ===========================================================================
00010AEC                            
00010AEC                            loc_EFFC:				; XREF: Obj4D_Index
00010AEC 2268 003C                  		movea.l	$3C(a0),a1
00010AF0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010AF6 6700 0000                  		beq.w	Obj4D_Delete
00010AFA 3029 000C                  		move.w	$C(a1),d0
00010AFE 0640 0060                  		addi.w	#$60,d0
00010B02 3140 000C                  		move.w	d0,$C(a0)
00010B06 9068 0030                  		sub.w	$30(a0),d0
00010B0A 4440                       		neg.w	d0
00010B0C 7208                       		moveq	#8,d1
00010B0E 0C40 0040                  		cmpi.w	#$40,d0
00010B12 6C00                       		bge.s	loc_F026
00010B14 720B                       		moveq	#$B,d1
00010B16                            
00010B16                            loc_F026:
00010B16 0C40 0080                  		cmpi.w	#$80,d0
00010B1A 6F00                       		ble.s	loc_F02E
00010B1C 720E                       		moveq	#$E,d1
00010B1E                            
00010B1E                            loc_F02E:
00010B1E 5328 001E                  		subq.b	#1,$1E(a0)
00010B22 6A00                       		bpl.s	loc_F04C
00010B24 117C 0007 001E             		move.b	#7,$1E(a0)
00010B2A 5228 001B                  		addq.b	#1,$1B(a0)
00010B2E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010B34 6500                       		bcs.s	loc_F04C
00010B36 117C 0000 001B             		move.b	#0,$1B(a0)
00010B3C                            
00010B3C                            loc_F04C:
00010B3C 1028 001B                  		move.b	$1B(a0),d0
00010B40 D001                       		add.b	d1,d0
00010B42 1140 001A                  		move.b	d0,$1A(a0)
00010B46 6000 FF40                  		bra.w	Obj4D_ChkDel
00010B4A                            ; ===========================================================================
00010B4A                            
00010B4A                            Obj4D_Delete:				; XREF: Obj4D_Index
00010B4A 6000 E5D4                  		bra.w	DeleteObject
00010B4E                            ; ===========================================================================
00010B4E                            ; ---------------------------------------------------------------------------
00010B4E                            ; Object 4E - advancing	wall of	lava (MZ)
00010B4E                            ; ---------------------------------------------------------------------------
00010B4E                            
00010B4E                            Obj4E:					; XREF: Obj_Index
00010B4E 7000                       		moveq	#0,d0
00010B50 1028 0024                  		move.b	$24(a0),d0
00010B54 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010B58 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010B5C                            ; ===========================================================================
00010B5C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010B5E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010B60 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010B62 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010B64 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010B66                            ; ===========================================================================
00010B66                            
00010B66                            Obj4E_Main:				; XREF: Obj4E_Index
00010B66 5828 0024                  		addq.b	#4,$24(a0)
00010B6A 2248                       		movea.l	a0,a1
00010B6C 7201                       		moveq	#1,d1
00010B6E 6000                       		bra.s	Obj4E_Main2
00010B70                            ; ===========================================================================
00010B70                            
00010B70                            Obj4E_Loop:
00010B70 6100 EA1C                  		bsr.w	SingleObjLoad2
00010B74 6600                       		bne.s	loc_F0C8
00010B76                            
00010B76                            Obj4E_Main2:				; XREF: Obj4E_Main
00010B76 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010B7A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010B82 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010B88 137C 0004 0001             		move.b	#4,1(a1)
00010B8E 137C 0050 0019             		move.b	#$50,$19(a1)
00010B94 3368 0008 0008             		move.w	8(a0),8(a1)
00010B9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010BA0 137C 0001 0018             		move.b	#1,$18(a1)
00010BA6 137C 0000 001C             		move.b	#0,$1C(a1)
00010BAC 137C 0094 0020             		move.b	#$94,$20(a1)
00010BB2 2348 003C                  		move.l	a0,$3C(a1)
00010BB6                            
00010BB6                            loc_F0C8:
00010BB6 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010BBA                            
00010BBA 5C29 0024                  		addq.b	#6,$24(a1)
00010BBE 137C 0004 001A             		move.b	#4,$1A(a1)
00010BC4                            
00010BC4                            Obj4E_Action:				; XREF: Obj4E_Index
00010BC4 3038 D008                  		move.w	($FFFFD008).w,d0
00010BC8 9068 0008                  		sub.w	8(a0),d0
00010BCC 6400                       		bcc.s	Obj4E_ChkSonic
00010BCE 4440                       		neg.w	d0
00010BD0                            
00010BD0                            Obj4E_ChkSonic:
00010BD0 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010BD4 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BD6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010BDA 9068 000C                  		sub.w	$C(a0),d0
00010BDE 6400                       		bcc.s	loc_F0F4
00010BE0 4440                       		neg.w	d0
00010BE2                            
00010BE2                            loc_F0F4:
00010BE2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010BE6 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BE8 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010BEE 6000                       		bra.s	Obj4E_Solid
00010BF0                            ; ===========================================================================
00010BF0                            
00010BF0                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010BF0 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010BF4 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010BF6 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010BFC 5528 0024                  		subq.b	#2,$24(a0)
00010C00                            
00010C00                            Obj4E_Solid:				; XREF: Obj4E_Index
00010C00 323C 002B                  		move.w	#$2B,d1
00010C04 343C 0018                  		move.w	#$18,d2
00010C08 3602                       		move.w	d2,d3
00010C0A 5243                       		addq.w	#1,d3
00010C0C 3828 0008                  		move.w	8(a0),d4
00010C10 1028 0024                  		move.b	$24(a0),d0
00010C14 3F00                       		move.w	d0,-(sp)
00010C16 6100 0000                  		bsr.w	SolidObject
00010C1A 301F                       		move.w	(sp)+,d0
00010C1C 1140 0024                  		move.b	d0,$24(a0)
00010C20 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010C26 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010C28 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010C2C 4228 0036                  		clr.b	$36(a0)
00010C30                            
00010C30                            Obj4E_Animate:
00010C30 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010C36 6100 B500                  		bsr.w	AnimateSprite
00010C3A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010C40 6400                       		bcc.s	Obj4E_ChkDel
00010C42 6100 E486                  		bsr.w	SpeedToPos
00010C46                            
00010C46                            Obj4E_ChkDel:
00010C46 6100 E49C                  		bsr.w	DisplaySprite
00010C4A 4A28 0036                  		tst.b	$36(a0)
00010C4E 6600                       		bne.s	locret_F17E
00010C50 3028 0008                  		move.w	8(a0),d0
00010C54 0240 FF80                  		andi.w	#$FF80,d0
00010C58 3238 F700                  		move.w	($FFFFF700).w,d1
00010C5C 0441 0080                  		subi.w	#$80,d1
00010C60 0241 FF80                  		andi.w	#$FF80,d1
00010C64 9041                       		sub.w	d1,d0
00010C66 0C40 0280                  		cmpi.w	#$280,d0
00010C6A 6200                       		bhi.s	Obj4E_ChkGone
00010C6C                            
00010C6C                            locret_F17E:
00010C6C 4E75                       		rts	
00010C6E                            ; ===========================================================================
00010C6E                            
00010C6E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010C6E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C72 7000                       		moveq	#0,d0
00010C74 1028 0023                  		move.b	$23(a0),d0
00010C78 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C7E 117C 0008 0024             		move.b	#8,$24(a0)
00010C84 4E75                       		rts	
00010C86                            ; ===========================================================================
00010C86                            
00010C86                            Obj4E_Move2:				; XREF: Obj4E_Index
00010C86 2268 003C                  		movea.l	$3C(a0),a1
00010C8A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010C90 6700                       		beq.s	Obj4E_Delete
00010C92 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010C98 0468 0080 0008             		subi.w	#$80,8(a0)
00010C9E 6000 E444                  		bra.w	DisplaySprite
00010CA2                            ; ===========================================================================
00010CA2                            
00010CA2                            Obj4E_Delete:				; XREF: Obj4E_Index
00010CA2 6000 E47C                  		bra.w	DeleteObject
00010CA6                            ; ===========================================================================
00010CA6                            ; ---------------------------------------------------------------------------
00010CA6                            ; Object 54 - invisible	lava tag (MZ)
00010CA6                            ; ---------------------------------------------------------------------------
00010CA6                            
00010CA6                            Obj54:					; XREF: Obj_Index
00010CA6 7000                       		moveq	#0,d0
00010CA8 1028 0024                  		move.b	$24(a0),d0
00010CAC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010CB0 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010CB4                            ; ===========================================================================
00010CB4 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010CB6 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010CB8                            
00010CB8 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010CBC                            ; ===========================================================================
00010CBC                            
00010CBC                            Obj54_Main:				; XREF: Obj54_Index
00010CBC 5428 0024                  		addq.b	#2,$24(a0)
00010CC0 7000                       		moveq	#0,d0
00010CC2 1028 0028                  		move.b	$28(a0),d0
00010CC6 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010CCC 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010CD4 117C 0084 0001             		move.b	#$84,1(a0)
00010CDA                            
00010CDA                            Obj54_ChkDel:				; XREF: Obj54_Index
00010CDA 3028 0008                  		move.w	8(a0),d0
00010CDE 0240 FF80                  		andi.w	#$FF80,d0
00010CE2 3238 F700                  		move.w	($FFFFF700).w,d1
00010CE6 0441 0080                  		subi.w	#$80,d1
00010CEA 0241 FF80                  		andi.w	#$FF80,d1
00010CEE 9041                       		sub.w	d1,d0
00010CF0 6B00 E42E                  		bmi.w	DeleteObject
00010CF4 0C40 0280                  		cmpi.w	#$280,d0
00010CF8 6200 E426                  		bhi.w	DeleteObject
00010CFC 4E75                       		rts	
00010CFE                            ; ===========================================================================
00010CFE                            ; ---------------------------------------------------------------------------
00010CFE                            ; Sprite mappings - invisible lava tag (MZ)
00010CFE                            ; ---------------------------------------------------------------------------
00010CFE                            Map_obj54:
00010CFE                            	include "_maps\obj54.asm"
00010CFE                            ; ---------------------------------------------------------------------------
00010CFE                            ; Sprite mappings - invisible lava tag (MZ)
00010CFE                            ; ---------------------------------------------------------------------------
00010CFE 0000                       		dc.w byte_F212-Map_obj54
00010D00 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010D02 00                         		even
00010D02 00                         		even
00010D02                            
00010D02                            Ani_obj4C:
00010D02                            	include "_anim\obj4C.asm"
00010D02                            ; ---------------------------------------------------------------------------
00010D02                            ; Animation script - geyser of lava (MZ)
00010D02                            ; ---------------------------------------------------------------------------
00010D02 0000                       		dc.w byte_F220-Ani_obj4C
00010D04 0000                       		dc.w byte_F22A-Ani_obj4C
00010D06 0000                       		dc.w byte_F22E-Ani_obj4C
00010D08 0000                       		dc.w byte_F232-Ani_obj4C
00010D0A 0000                       		dc.w byte_F23A-Ani_obj4C
00010D0C 0000                       		dc.w byte_F23E-Ani_obj4C
00010D0E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010D18 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010D1C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010D20 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010D28 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010D2C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010D30                            		even
00010D30                            		even
00010D30                            
00010D30                            Ani_obj4E:
00010D30                            	include "_anim\obj4E.asm"
00010D30                            ; ---------------------------------------------------------------------------
00010D30                            ; Animation script - advancing wall of lava (MZ)
00010D30                            ; ---------------------------------------------------------------------------
00010D30 0000                       		dc.w byte_F244-Ani_obj4E
00010D32 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010D38                            		even
00010D38                            		even
00010D38                            
00010D38                            ; ---------------------------------------------------------------------------
00010D38                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D38                            ; ---------------------------------------------------------------------------
00010D38                            Map_obj4C:
00010D38                            	include "_maps\obj4C.asm"
00010D38                            ; ---------------------------------------------------------------------------
00010D38                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D38                            ; ---------------------------------------------------------------------------
00010D38 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010D3C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010D40 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010D44 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010D48 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010D4C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010D50 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010D54 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010D58 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010D5C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010D60 02                         byte_F272:	dc.b 2
00010D61 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010D66 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010D6B 02                         byte_F27D:	dc.b 2
00010D6C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010D71 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010D76 04                         byte_F288:	dc.b 4
00010D77 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010D7C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010D81 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010D86 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010D8B 04                         byte_F29D:	dc.b 4
00010D8C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010D91 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010D96 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010D9B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010DA0 06                         byte_F2B2:	dc.b 6
00010DA1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010DA6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010DAB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010DB0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010DB5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010DBA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010DBF 06                         byte_F2D1:	dc.b 6
00010DC0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010DC5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010DCA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010DCF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010DD4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010DD9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010DDE 02                         byte_F2F0:	dc.b 2
00010DDF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010DE4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010DE9 02                         byte_F2FB:	dc.b 2
00010DEA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010DEF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010DF4 0A                         byte_F306:	dc.b $A
00010DF5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DFA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010DFF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010E04 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010E09 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010E0E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010E13 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010E18 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010E1D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010E22 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010E27 0A                         byte_F339:	dc.b $A
00010E28 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E2D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E32 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E37 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E3C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010E41 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010E46 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010E4B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010E50 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010E55 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010E5A 0A                         byte_F36C:	dc.b $A
00010E5B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010E60 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010E65 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010E6A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010E6F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010E74 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010E79 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010E7E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010E83 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010E88 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010E8D 06                         byte_F39F:	dc.b 6
00010E8E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010E93 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010E98 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010E9D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EA2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010EA7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010EAC 06                         byte_F3BE:	dc.b 6
00010EAD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010EB2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010EB7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010EBC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010EC1 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010EC6 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010ECB 06                         byte_F3DD:	dc.b 6
00010ECC 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010ED1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010ED6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010EDB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010EE0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010EE5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010EEA 10                         byte_F3FC:	dc.b $10
00010EEB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010EF0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010EF5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010EFA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EFF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010F04 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010F09 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010F0E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010F13 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010F18 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010F1D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010F22 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010F27 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010F2C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010F31 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010F36 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010F3B 10                         byte_F44D:	dc.b $10
00010F3C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010F41 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010F46 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010F4B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010F50 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010F55 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010F5A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010F5F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010F64 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010F69 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010F6E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010F73 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010F78 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010F7D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010F82 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010F87 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010F8C 10                         byte_F49E:	dc.b $10
00010F8D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F92 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F97 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F9C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010FA1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010FA6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010FAB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010FB0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010FB5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010FBA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010FBF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010FC4 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010FC9 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010FCE 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010FD3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010FD8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010FDD 06                         byte_F4EF:	dc.b 6
00010FDE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010FE3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010FE8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010FED E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010FF2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010FF7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010FFC 06                         byte_F50E:	dc.b 6
00010FFD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011002 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011007 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001100C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011011 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011016 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001101B 00                         byte_F52D:	dc.b 0
0001101C                            		even
0001101C                            		even
0001101C                            
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - advancing wall of lava (MZ)
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            Map_obj4E:
0001101C                            	include "_maps\obj4E.asm"
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - advancing wall of lava (MZ)
0001101C                            ; ---------------------------------------------------------------------------
0001101C 0000                       		dc.w byte_F538-Map_obj4E
0001101E 0000                       		dc.w byte_F566-Map_obj4E
00011020 0000                       		dc.w byte_F594-Map_obj4E
00011022 0000                       		dc.w byte_F5C2-Map_obj4E
00011024 0000                       		dc.w byte_F5F0-Map_obj4E
00011026 09                         byte_F538:	dc.b 9
00011027 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001102C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00011031 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011036 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001103B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011040 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011045 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001104A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001104F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011054 09                         byte_F566:	dc.b 9
00011055 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001105A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001105F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011064 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011069 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001106E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011073 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011078 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001107D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011082 09                         byte_F594:	dc.b 9
00011083 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00011088 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001108D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011092 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011097 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001109C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110A1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110A6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110AB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110B0 09                         byte_F5C2:	dc.b 9
000110B1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000110B6 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000110BB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110C0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110C5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110CA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110CF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110D4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110D9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110DE 08                         byte_F5F0:	dc.b 8
000110DF E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000110E4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110E9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110EE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110F3 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110F8 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110FD E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011102 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011108 00                         		even
00011108 00                         		even
00011108                            
00011108                            ; ===========================================================================
00011108                            ; ---------------------------------------------------------------------------
00011108                            ; Object 40 - Moto Bug enemy (GHZ)
00011108                            ; ---------------------------------------------------------------------------
00011108                            
00011108                            Obj40:					; XREF: Obj_Index
00011108 7000                       		moveq	#0,d0
0001110A 1028 0024                  		move.b	$24(a0),d0
0001110E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00011112 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00011116                            ; ===========================================================================
00011116 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00011118 0000                       		dc.w Obj40_Action-Obj40_Index
0001111A 0000                       		dc.w Obj40_Animate-Obj40_Index
0001111C 0000                       		dc.w Obj40_Delete-Obj40_Index
0001111E                            ; ===========================================================================
0001111E                            
0001111E                            Obj40_Main:				; XREF: Obj40_Index
0001111E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00011126 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001112C 117C 0004 0001             		move.b	#4,1(a0)
00011132 117C 0004 0018             		move.b	#4,$18(a0)
00011138 117C 0014 0019             		move.b	#$14,$19(a0)
0001113E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00011142 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00011144 117C 000E 0016             		move.b	#$E,$16(a0)
0001114A 117C 0008 0017             		move.b	#8,$17(a0)
00011150 117C 000C 0020             		move.b	#$C,$20(a0)
00011156 6100 DF52                  		bsr.w	ObjectFall
0001115A 4EB9 0000 0000             		jsr	ObjHitFloor
00011160 4A41                       		tst.w	d1
00011162 6A00                       		bpl.s	locret_F68A
00011164 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011168 317C 0000 0012             		move.w	#0,$12(a0)
0001116E 5428 0024                  		addq.b	#2,$24(a0)
00011172 0868 0000 0022             		bchg	#0,$22(a0)
00011178                            
00011178                            locret_F68A:
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001117A 5828 0024                  		addq.b	#4,$24(a0)
0001117E 6000 0000                  		bra.w	Obj40_Animate
00011182                            ; ===========================================================================
00011182                            
00011182                            Obj40_Action:				; XREF: Obj40_Index
00011182 7000                       		moveq	#0,d0
00011184 1028 0025                  		move.b	$25(a0),d0
00011188 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001118C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00011190 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011196 6100 AFA0                  		bsr.w	AnimateSprite
0001119A                            
0001119A                            ; ---------------------------------------------------------------------------
0001119A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001119A                            ; ---------------------------------------------------------------------------
0001119A                            
0001119A                            MarkObjGone:
0001119A 3028 0008                  		move.w	8(a0),d0
0001119E 0240 FF80                  		andi.w	#$FF80,d0
000111A2 3238 F700                  		move.w	($FFFFF700).w,d1
000111A6 0441 0080                  		subi.w	#$80,d1
000111AA 0241 FF80                  		andi.w	#$FF80,d1
000111AE 9041                       		sub.w	d1,d0
000111B0 0C40 0280                  		cmpi.w	#$280,d0
000111B4 6200 0000                  		bhi.w	Mark_ChkGone
000111B8 6000 DF2A                  		bra.w	DisplaySprite
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            Mark_ChkGone:
000111BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000111C0 7000                       		moveq	#0,d0
000111C2 1028 0023                  		move.b	$23(a0),d0
000111C6 6700                       		beq.s	Mark_Delete
000111C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000111CE                            
000111CE                            Mark_Delete:
000111CE 6000 DF50                  		bra.w	DeleteObject
000111D2                            
000111D2                            ; ===========================================================================
000111D2 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000111D4 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000111D6                            ; ===========================================================================
000111D6                            
000111D6                            Obj40_Move:				; XREF: Obj40_Index2
000111D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000111DA 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000111DC 5428 0025                  		addq.b	#2,$25(a0)
000111E0 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000111E6 117C 0001 001C             		move.b	#1,$1C(a0)
000111EC 0868 0000 0022             		bchg	#0,$22(a0)
000111F2 6600                       		bne.s	locret_F70A
000111F4 4468 0010                  		neg.w	$10(a0)		; change direction
000111F8                            
000111F8                            locret_F70A:
000111F8 4E75                       		rts	
000111FA                            ; ===========================================================================
000111FA                            
000111FA                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000111FA 6100 DECE                  		bsr.w	SpeedToPos
000111FE 4EB9 0000 0000             		jsr	ObjHitFloor
00011204 0C41 FFF8                  		cmpi.w	#-8,d1
00011208 6D00                       		blt.s	Obj40_Pause
0001120A 0C41 000C                  		cmpi.w	#$C,d1
0001120E 6C00                       		bge.s	Obj40_Pause
00011210 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011214 5328 0033                  		subq.b	#1,$33(a0)
00011218 6A00                       		bpl.s	locret_F756
0001121A 117C 000F 0033             		move.b	#$F,$33(a0)
00011220 6100 E356                  		bsr.w	SingleObjLoad
00011224 6600                       		bne.s	locret_F756
00011226 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001122A 3368 0008 0008             		move.w	8(a0),8(a1)
00011230 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011236 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001123C 137C 0002 001C             		move.b	#2,$1C(a1)
00011242                            
00011242                            locret_F756:
00011242 4E75                       		rts	
00011244                            ; ===========================================================================
00011244                            
00011244                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00011244 5528 0025                  		subq.b	#2,$25(a0)
00011248 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001124E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00011254 117C 0000 001C             		move.b	#0,$1C(a0)
0001125A 4E75                       		rts	
0001125C                            ; ===========================================================================
0001125C                            
0001125C                            Obj40_Animate:				; XREF: Obj40_Index
0001125C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011262 6100 AED4                  		bsr.w	AnimateSprite
00011266 6000 DE7C                  		bra.w	DisplaySprite
0001126A                            ; ===========================================================================
0001126A                            
0001126A                            Obj40_Delete:				; XREF: Obj40_Index
0001126A 6000 DEB4                  		bra.w	DeleteObject
0001126E                            ; ===========================================================================
0001126E                            Ani_obj40:
0001126E                            	include "_anim\obj40.asm"
0001126E                            ; ---------------------------------------------------------------------------
0001126E                            ; Animation script - Motobug enemy
0001126E                            ; ---------------------------------------------------------------------------
0001126E 0000                       		dc.w byte_F788-Ani_obj40
00011270 0000                       		dc.w byte_F78C-Ani_obj40
00011272 0000                       		dc.w byte_F792-Ani_obj40
00011274 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011278 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001127E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001128C                            		even
0001128C                            		even
0001128C                            
0001128C                            ; ---------------------------------------------------------------------------
0001128C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001128C                            ; ---------------------------------------------------------------------------
0001128C                            Map_obj40:
0001128C                            	include "_maps\obj40.asm"
0001128C                            ; ---------------------------------------------------------------------------
0001128C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001128C                            ; ---------------------------------------------------------------------------
0001128C 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00011290 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011294 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011298 0000                       		dc.w byte_F804-Map_obj40
0001129A 04                         byte_F7AE:	dc.b 4
0001129B F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000112A0 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000112A5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000112AA 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000112AF 04                         byte_F7C3:	dc.b 4
000112B0 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000112B5 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000112BA F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000112BF 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000112C4 05                         byte_F7D8:	dc.b 5
000112C5 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000112CA 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000112CF F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000112D4 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000112D9 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000112DE 01                         byte_F7F2:	dc.b 1
000112DF FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000112E4 01                         byte_F7F8:	dc.b 1
000112E5 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000112EA 01                         byte_F7FE:	dc.b 1
000112EB FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000112F0 00                         byte_F804:	dc.b 0
000112F2 00                         		even
000112F2 00                         		even
000112F2                            
000112F2                            ; ===========================================================================
000112F2                            ; ---------------------------------------------------------------------------
000112F2                            ; Object 4F - blank
000112F2                            ; ---------------------------------------------------------------------------
000112F2                            
000112F2                            Obj4F:					; XREF: Obj_Index
000112F2 4E75                       		rts	
000112F4                            
000112F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112F4                            
000112F4                            
000112F4                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000112F4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000112F8 D047                       		add.w	d7,d0
000112FA 0240 0003                  		andi.w	#3,d0
000112FE 6600                       		bne.s	loc_F836
00011300 7600                       		moveq	#0,d3
00011302 1628 0019                  		move.b	$19(a0),d3
00011306 4A68 0010                  		tst.w	$10(a0)
0001130A 6B00                       		bmi.s	loc_F82C
0001130C 6100 0000                  		bsr.w	ObjHitWallRight
00011310 4A41                       		tst.w	d1
00011312 6A00                       		bpl.s	loc_F836
00011314                            
00011314                            loc_F828:
00011314 7001                       		moveq	#1,d0
00011316 4E75                       		rts	
00011318                            ; ===========================================================================
00011318                            
00011318                            loc_F82C:
00011318 4643                       		not.w	d3
0001131A 6100 0000                  		bsr.w	ObjHitWallLeft
0001131E 4A41                       		tst.w	d1
00011320 6BF2                       		bmi.s	loc_F828
00011322                            
00011322                            loc_F836:
00011322 7000                       		moveq	#0,d0
00011324 4E75                       		rts	
00011326                            ; End of function Obj50_ChkWall
00011326                            
00011326                            ; ===========================================================================
00011326                            ; ---------------------------------------------------------------------------
00011326                            ; Object 50 - Yadrin enemy (SYZ)
00011326                            ; ---------------------------------------------------------------------------
00011326                            
00011326                            Obj50:					; XREF: Obj_Index
00011326 7000                       		moveq	#0,d0
00011328 1028 0024                  		move.b	$24(a0),d0
0001132C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00011330 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00011334                            ; ===========================================================================
00011334 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00011336 0000                       		dc.w Obj50_Action-Obj50_Index
00011338                            ; ===========================================================================
00011338                            
00011338                            Obj50_Main:				; XREF: Obj50_Index
00011338 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00011340 317C 247B 0002             		move.w	#$247B,2(a0)
00011346 117C 0004 0001             		move.b	#4,1(a0)
0001134C 117C 0004 0018             		move.b	#4,$18(a0)
00011352 117C 0014 0019             		move.b	#$14,$19(a0)
00011358 117C 0011 0016             		move.b	#$11,$16(a0)
0001135E 117C 0008 0017             		move.b	#8,$17(a0)
00011364 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001136A 6100 DD3E                  		bsr.w	ObjectFall
0001136E 6100 0000                  		bsr.w	ObjHitFloor
00011372 4A41                       		tst.w	d1
00011374 6A00                       		bpl.s	locret_F89E
00011376 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001137A 317C 0000 0012             		move.w	#0,$12(a0)
00011380 5428 0024                  		addq.b	#2,$24(a0)
00011384 0868 0000 0022             		bchg	#0,$22(a0)
0001138A                            
0001138A                            locret_F89E:
0001138A 4E75                       		rts	
0001138C                            ; ===========================================================================
0001138C                            
0001138C                            Obj50_Action:				; XREF: Obj50_Index
0001138C 7000                       		moveq	#0,d0
0001138E 1028 0025                  		move.b	$25(a0),d0
00011392 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011396 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001139A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000113A0 6100 AD96                  		bsr.w	AnimateSprite
000113A4 6000 FDF4                  		bra.w	MarkObjGone
000113A8                            ; ===========================================================================
000113A8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000113AA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000113AC                            ; ===========================================================================
000113AC                            
000113AC                            Obj50_Move:				; XREF: Obj50_Index2
000113AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000113B0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000113B2 5428 0025                  		addq.b	#2,$25(a0)
000113B6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000113BC 117C 0001 001C             		move.b	#1,$1C(a0)
000113C2 0868 0000 0022             		bchg	#0,$22(a0)
000113C8 6600                       		bne.s	locret_F8E2
000113CA 4468 0010                  		neg.w	$10(a0)		; change direction
000113CE                            
000113CE                            locret_F8E2:
000113CE 4E75                       		rts	
000113D0                            ; ===========================================================================
000113D0                            
000113D0                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000113D0 6100 DCF8                  		bsr.w	SpeedToPos
000113D4 6100 0000                  		bsr.w	ObjHitFloor
000113D8 0C41 FFF8                  		cmpi.w	#-8,d1
000113DC 6D00                       		blt.s	Obj50_Pause
000113DE 0C41 000C                  		cmpi.w	#$C,d1
000113E2 6C00                       		bge.s	Obj50_Pause
000113E4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000113E8 6100 FF0A                  		bsr.w	Obj50_ChkWall
000113EC 6600                       		bne.s	Obj50_Pause
000113EE 4E75                       		rts	
000113F0                            ; ===========================================================================
000113F0                            
000113F0                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000113F0 5528 0025                  		subq.b	#2,$25(a0)
000113F4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000113FA 317C 0000 0010             		move.w	#0,$10(a0)
00011400 117C 0000 001C             		move.b	#0,$1C(a0)
00011406 4E75                       		rts	
00011408                            ; ===========================================================================
00011408                            Ani_obj50:
00011408                            	include "_anim\obj50.asm"
00011408                            ; ---------------------------------------------------------------------------
00011408                            ; Animation script - Yadrin enemy
00011408                            ; ---------------------------------------------------------------------------
00011408 0000                       		dc.w byte_F920-Ani_obj50
0001140A 0000                       		dc.w byte_F924-Ani_obj50
0001140C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00011410 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001141A                            		even
0001141A                            		even
0001141A                            
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            Map_obj50:
0001141A                            	include "_maps\obj50.asm"
0001141A                            ; ---------------------------------------------------------------------------
0001141A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001141A                            ; ---------------------------------------------------------------------------
0001141A 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001141E 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00011422 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00011426 05                         byte_F93A:	dc.b 5
00011427 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001142C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011431 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011436 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001143B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011440 05                         byte_F954:	dc.b 5
00011441 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011446 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001144B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011450 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011455 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001145A 05                         byte_F96E:	dc.b 5
0001145B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011460 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011465 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001146A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001146F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011474 05                         byte_F988:	dc.b 5
00011475 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001147A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001147F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011484 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011489 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001148E 05                         byte_F9A2:	dc.b 5
0001148F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011494 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011499 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001149E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114A3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000114A8 05                         byte_F9BC:	dc.b 5
000114A9 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000114AE 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000114B3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000114B8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114BD 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000114C2                            		even
000114C2                            		even
000114C2                            
000114C2                            ; ---------------------------------------------------------------------------
000114C2                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000114C2                            ;
000114C2                            ; variables:
000114C2                            ; d1 = width
000114C2                            ; d2 = height /	2 (when	jumping)
000114C2                            ; d3 = height /	2 (when	walking)
000114C2                            ; d4 = x-axis position
000114C2                            ; ---------------------------------------------------------------------------
000114C2                            
000114C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114C2                            
000114C2                            
000114C2                            SolidObject:
000114C2 4A28 0025                  		tst.b	$25(a0)
000114C6 6700 0000                  		beq.w	loc_FAC8
000114CA 3401                       		move.w	d1,d2
000114CC D442                       		add.w	d2,d2
000114CE 43F8 D000                  		lea	($FFFFD000).w,a1
000114D2 0829 0001 0022             		btst	#1,$22(a1)
000114D8 6600                       		bne.s	loc_F9FE
000114DA 3029 0008                  		move.w	8(a1),d0
000114DE 9068 0008                  		sub.w	8(a0),d0
000114E2 D041                       		add.w	d1,d0
000114E4 6B00                       		bmi.s	loc_F9FE
000114E6 B042                       		cmp.w	d2,d0
000114E8 6500                       		bcs.s	loc_FA12
000114EA                            
000114EA                            loc_F9FE:
000114EA 08A9 0003 0022             		bclr	#3,$22(a1)
000114F0 08A8 0003 0022             		bclr	#3,$22(a0)
000114F6 4228 0025                  		clr.b	$25(a0)
000114FA 7800                       		moveq	#0,d4
000114FC 4E75                       		rts	
000114FE                            ; ===========================================================================
000114FE                            
000114FE                            loc_FA12:
000114FE 3404                       		move.w	d4,d2
00011500 4EBA 8012                  		jsr	MvSonicOnPtfm
00011504 7800                       		moveq	#0,d4
00011506 4E75                       		rts	
00011508                            ; ===========================================================================
00011508                            
00011508                            SolidObject71:				; XREF: Obj71_Solid
00011508 4A28 0025                  		tst.b	$25(a0)
0001150C 6700 0000                  		beq.w	loc_FAD0
00011510 3401                       		move.w	d1,d2
00011512 D442                       		add.w	d2,d2
00011514 43F8 D000                  		lea	($FFFFD000).w,a1
00011518 0829 0001 0022             		btst	#1,$22(a1)
0001151E 6600                       		bne.s	loc_FA44
00011520 3029 0008                  		move.w	8(a1),d0
00011524 9068 0008                  		sub.w	8(a0),d0
00011528 D041                       		add.w	d1,d0
0001152A 6B00                       		bmi.s	loc_FA44
0001152C B042                       		cmp.w	d2,d0
0001152E 6500                       		bcs.s	loc_FA58
00011530                            
00011530                            loc_FA44:
00011530 08A9 0003 0022             		bclr	#3,$22(a1)
00011536 08A8 0003 0022             		bclr	#3,$22(a0)
0001153C 4228 0025                  		clr.b	$25(a0)
00011540 7800                       		moveq	#0,d4
00011542 4E75                       		rts	
00011544                            ; ===========================================================================
00011544                            
00011544                            loc_FA58:
00011544 3404                       		move.w	d4,d2
00011546 4EB9 0000 9514             		jsr	MvSonicOnPtfm
0001154C 7800                       		moveq	#0,d4
0001154E 4E75                       		rts	
00011550                            ; ===========================================================================
00011550                            
00011550                            SolidObject2F:				; XREF: Obj2F_Solid
00011550 43F8 D000                  		lea	($FFFFD000).w,a1
00011554 4A28 0001                  		tst.b	1(a0)
00011558 6A00 0000                  		bpl.w	loc_FB92
0001155C 3029 0008                  		move.w	8(a1),d0
00011560 9068 0008                  		sub.w	8(a0),d0
00011564 D041                       		add.w	d1,d0
00011566 6B00 0000                  		bmi.w	loc_FB92
0001156A 3601                       		move.w	d1,d3
0001156C D643                       		add.w	d3,d3
0001156E B043                       		cmp.w	d3,d0
00011570 6200 0000                  		bhi.w	loc_FB92
00011574 3A00                       		move.w	d0,d5
00011576 0828 0000 0001             		btst	#0,1(a0)
0001157C 6700                       		beq.s	loc_FA94
0001157E 4645                       		not.w	d5
00011580 DA43                       		add.w	d3,d5
00011582                            
00011582                            loc_FA94:
00011582 E24D                       		lsr.w	#1,d5
00011584 7600                       		moveq	#0,d3
00011586 1632 5000                  		move.b	(a2,d5.w),d3
0001158A 9612                       		sub.b	(a2),d3
0001158C 3A28 000C                  		move.w	$C(a0),d5
00011590 9A43                       		sub.w	d3,d5
00011592 1629 0016                  		move.b	$16(a1),d3
00011596 4883                       		ext.w	d3
00011598 D443                       		add.w	d3,d2
0001159A 3629 000C                  		move.w	$C(a1),d3
0001159E 9645                       		sub.w	d5,d3
000115A0 5843                       		addq.w	#4,d3
000115A2 D642                       		add.w	d2,d3
000115A4 6B00 0000                  		bmi.w	loc_FB92
000115A8 3802                       		move.w	d2,d4
000115AA D844                       		add.w	d4,d4
000115AC B644                       		cmp.w	d4,d3
000115AE 6400 0000                  		bcc.w	loc_FB92
000115B2 6000 0000                  		bra.w	loc_FB0E
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            loc_FAC8:
000115B6 4A28 0001                  		tst.b	1(a0)
000115BA 6A00 0000                  		bpl.w	loc_FB92
000115BE                            
000115BE                            loc_FAD0:
000115BE 43F8 D000                  		lea	($FFFFD000).w,a1
000115C2 3029 0008                  		move.w	8(a1),d0
000115C6 9068 0008                  		sub.w	8(a0),d0
000115CA D041                       		add.w	d1,d0
000115CC 6B00 0000                  		bmi.w	loc_FB92
000115D0 3601                       		move.w	d1,d3
000115D2 D643                       		add.w	d3,d3
000115D4 B043                       		cmp.w	d3,d0
000115D6 6200 0000                  		bhi.w	loc_FB92
000115DA 1629 0016                  		move.b	$16(a1),d3
000115DE 4883                       		ext.w	d3
000115E0 D443                       		add.w	d3,d2
000115E2 3629 000C                  		move.w	$C(a1),d3
000115E6 9668 000C                  		sub.w	$C(a0),d3
000115EA 5843                       		addq.w	#4,d3
000115EC D642                       		add.w	d2,d3
000115EE 6B00 0000                  		bmi.w	loc_FB92
000115F2 3802                       		move.w	d2,d4
000115F4 D844                       		add.w	d4,d4
000115F6 B644                       		cmp.w	d4,d3
000115F8 6400 0000                  		bcc.w	loc_FB92
000115FC                            
000115FC                            loc_FB0E:
000115FC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00011600 6B00 0000                  		bmi.w	loc_FB92
00011604 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001160A 6400 0000                  		bcc.w	loc_FB92
0001160E 4A78 FE08                  		tst.w	($FFFFFE08).w
00011612 6600 0000                  		bne.w	loc_FBAC
00011616 3A00                       		move.w	d0,d5
00011618 B240                       		cmp.w	d0,d1
0001161A 6400                       		bcc.s	loc_FB36
0001161C D241                       		add.w	d1,d1
0001161E 9041                       		sub.w	d1,d0
00011620 3A00                       		move.w	d0,d5
00011622 4445                       		neg.w	d5
00011624                            
00011624                            loc_FB36:
00011624 3203                       		move.w	d3,d1
00011626 B443                       		cmp.w	d3,d2
00011628 6400                       		bcc.s	loc_FB44
0001162A 5943                       		subq.w	#4,d3
0001162C 9644                       		sub.w	d4,d3
0001162E 3203                       		move.w	d3,d1
00011630 4441                       		neg.w	d1
00011632                            
00011632                            loc_FB44:
00011632 BA41                       		cmp.w	d1,d5
00011634 6200 0000                  		bhi.w	loc_FBB0
00011638 0C41 0004                  		cmpi.w	#4,d1
0001163C 6300                       		bls.s	loc_FB8C
0001163E 4A40                       		tst.w	d0
00011640 6700                       		beq.s	loc_FB70
00011642 6B00                       		bmi.s	loc_FB5E
00011644 4A69 0010                  		tst.w	$10(a1)
00011648 6B00                       		bmi.s	loc_FB70
0001164A 6000                       		bra.s	loc_FB64
0001164C                            ; ===========================================================================
0001164C                            
0001164C                            loc_FB5E:
0001164C 4A69 0010                  		tst.w	$10(a1)
00011650 6A00                       		bpl.s	loc_FB70
00011652                            
00011652                            loc_FB64:
00011652 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00011658 337C 0000 0010             		move.w	#0,$10(a1)
0001165E                            
0001165E                            loc_FB70:
0001165E 9169 0008                  		sub.w	d0,8(a1)
00011662 0829 0001 0022             		btst	#1,$22(a1)
00011668 6600                       		bne.s	loc_FB8C
0001166A 08E9 0005 0022             		bset	#5,$22(a1)
00011670 08E8 0005 0022             		bset	#5,$22(a0)
00011676 7801                       		moveq	#1,d4
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            loc_FB8C:
0001167A 6100                       		bsr.s	loc_FBA0
0001167C 7801                       		moveq	#1,d4
0001167E 4E75                       		rts	
00011680                            ; ===========================================================================
00011680                            
00011680                            loc_FB92:
00011680 0828 0005 0022             		btst	#5,$22(a0)
00011686 6700                       		beq.s	loc_FBAC
00011688 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001168E 6700                       		beq.s	loc_FBA0
00011690 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011696 6700                       		beq.s	loc_FBA0
00011698 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001169E 6700                       		beq.s	loc_FBA0
000116A0 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000116A6                            
000116A6                            loc_FBA0:
000116A6 08A8 0005 0022             		bclr	#5,$22(a0)
000116AC 08A9 0005 0022             		bclr	#5,$22(a1)
000116B2                            
000116B2                            loc_FBAC:
000116B2 7800                       		moveq	#0,d4
000116B4 4E75                       		rts	
000116B6                            ; ===========================================================================
000116B6                            
000116B6                            loc_FBB0:
000116B6 4A43                       		tst.w	d3
000116B8 6B00                       		bmi.s	loc_FBBC
000116BA 0C43 0010                  		cmpi.w	#$10,d3
000116BE 6500                       		bcs.s	loc_FBEE
000116C0 60BE                       		bra.s	loc_FB92
000116C2                            ; ===========================================================================
000116C2                            
000116C2                            loc_FBBC:
000116C2 4A69 0012                  		tst.w	$12(a1)
000116C6 6700                       		beq.s	loc_FBD6
000116C8 6A00                       		bpl.s	loc_FBD2
000116CA 4A43                       		tst.w	d3
000116CC 6A00                       		bpl.s	loc_FBD2
000116CE 9769 000C                  		sub.w	d3,$C(a1)
000116D2 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000116D8                            
000116D8                            loc_FBD2:
000116D8 78FF                       		moveq	#-1,d4
000116DA 4E75                       		rts	
000116DC                            ; ===========================================================================
000116DC                            
000116DC                            loc_FBD6:
000116DC 0829 0001 0022             		btst	#1,$22(a1)
000116E2 66F4                       		bne.s	loc_FBD2
000116E4 2F08                       		move.l	a0,-(sp)
000116E6 2049                       		movea.l	a1,a0
000116E8 4EB9 0000 0000             		jsr	KillSonic
000116EE 205F                       		movea.l	(sp)+,a0
000116F0 78FF                       		moveq	#-1,d4
000116F2 4E75                       		rts	
000116F4                            ; ===========================================================================
000116F4                            
000116F4                            loc_FBEE:
000116F4 5943                       		subq.w	#4,d3
000116F6 7200                       		moveq	#0,d1
000116F8 1228 0019                  		move.b	$19(a0),d1
000116FC 3401                       		move.w	d1,d2
000116FE D442                       		add.w	d2,d2
00011700 D269 0008                  		add.w	8(a1),d1
00011704 9268 0008                  		sub.w	8(a0),d1
00011708 6B00                       		bmi.s	loc_FC28
0001170A B242                       		cmp.w	d2,d1
0001170C 6400                       		bcc.s	loc_FC28
0001170E 4A69 0012                  		tst.w	$12(a1)
00011712 6B00                       		bmi.s	loc_FC28
00011714 9769 000C                  		sub.w	d3,$C(a1)
00011718 5369 000C                  		subq.w	#1,$C(a1)
0001171C 6100                       		bsr.s	sub_FC2C
0001171E 117C 0002 0025             		move.b	#2,$25(a0)
00011724 08E8 0003 0022             		bset	#3,$22(a0)
0001172A 78FF                       		moveq	#-1,d4
0001172C 4E75                       		rts	
0001172E                            ; ===========================================================================
0001172E                            
0001172E                            loc_FC28:
0001172E 7800                       		moveq	#0,d4
00011730 4E75                       		rts	
00011732                            ; End of function SolidObject
00011732                            
00011732                            
00011732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011732                            
00011732                            
00011732                            sub_FC2C:				; XREF: SolidObject
00011732 0829 0003 0022             		btst	#3,$22(a1)
00011738 6700                       		beq.s	loc_FC4E
0001173A 7000                       		moveq	#0,d0
0001173C 1029 003D                  		move.b	$3D(a1),d0
00011740 ED48                       		lsl.w	#6,d0
00011742 0680 00FF D000             		addi.l	#$FFD000,d0
00011748 2440                       		movea.l	d0,a2
0001174A 08AA 0003 0022             		bclr	#3,$22(a2)
00011750 422A 0025                  		clr.b	$25(a2)
00011754                            
00011754                            loc_FC4E:
00011754 3008                       		move.w	a0,d0
00011756 0440 D000                  		subi.w	#-$3000,d0
0001175A EC48                       		lsr.w	#6,d0
0001175C 0240 007F                  		andi.w	#$7F,d0
00011760 1340 003D                  		move.b	d0,$3D(a1)
00011764 137C 0000 0026             		move.b	#0,$26(a1)
0001176A 337C 0000 0012             		move.w	#0,$12(a1)
00011770 3369 0010 0014             		move.w	$10(a1),$14(a1)
00011776 0829 0001 0022             		btst	#1,$22(a1)
0001177C 6700                       		beq.s	loc_FC84
0001177E 2F08                       		move.l	a0,-(sp)
00011780 2049                       		movea.l	a1,a0
00011782 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011788 205F                       		movea.l	(sp)+,a0
0001178A                            
0001178A                            loc_FC84:
0001178A 08E9 0003 0022             		bset	#3,$22(a1)
00011790 08E8 0003 0022             		bset	#3,$22(a0)
00011796 4E75                       		rts	
00011798                            ; End of function sub_FC2C
00011798                            
00011798                            ; ===========================================================================
00011798                            ; ---------------------------------------------------------------------------
00011798                            ; Object 51 - smashable	green block (MZ)
00011798                            ; ---------------------------------------------------------------------------
00011798                            
00011798                            Obj51:					; XREF: Obj_Index
00011798 7000                       		moveq	#0,d0
0001179A 1028 0024                  		move.b	$24(a0),d0
0001179E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000117A2 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000117A6 6000 F9F2                  		bra.w	MarkObjGone
000117AA                            ; ===========================================================================
000117AA 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000117AC 0000                       		dc.w Obj51_Solid-Obj51_Index
000117AE 0000                       		dc.w Obj51_Display-Obj51_Index
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj51_Main:				; XREF: Obj51_Index
000117B0 5428 0024                  		addq.b	#2,$24(a0)
000117B4 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000117BC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000117C2 117C 0004 0001             		move.b	#4,1(a0)
000117C8 117C 0010 0019             		move.b	#$10,$19(a0)
000117CE 117C 0004 0018             		move.b	#4,$18(a0)
000117D4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000117DA                            
000117DA                            Obj51_Solid:				; XREF: Obj51_Index
000117DA 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000117E0 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000117E6 323C 001B                  		move.w	#$1B,d1
000117EA 343C 0010                  		move.w	#$10,d2
000117EE 363C 0011                  		move.w	#$11,d3
000117F2 3828 0008                  		move.w	8(a0),d4
000117F6 6100 FCCA                  		bsr.w	SolidObject
000117FA 0828 0003 0022             		btst	#3,$22(a0)
00011800 6600                       		bne.s	Obj51_Smash
00011802                            
00011802                            locret_FCFC:
00011802 4E75                       		rts	
00011804                            ; ===========================================================================
00011804                            
00011804                            Obj51_Smash:				; XREF: Obj51_Solid
00011804                            	;	cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00011804                            	;	bne.s	locret_FCFC	; if not, branch
00011804 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001180A 08E9 0002 0022             		bset	#2,$22(a1)
00011810 137C 000E 0016             		move.b	#$E,$16(a1)
00011816 137C 0007 0017             		move.b	#7,$17(a1)
0001181C 137C 0002 001C             		move.b	#2,$1C(a1)
00011822 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011828 08E9 0001 0022             		bset	#1,$22(a1)
0001182E 08A9 0003 0022             		bclr	#3,$22(a1)
00011834 137C 0002 0024             		move.b	#2,$24(a1)
0001183A 08A8 0003 0022             		bclr	#3,$22(a0)
00011840 4228 0025                  		clr.b	$25(a0)
00011844 117C 0001 001A             		move.b	#1,$1A(a0)
0001184A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011850 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011852 343C 0038                  		move.w	#$38,d2
00011856 6100 D48A                  		bsr.w	SmashObject
0001185A 6100 DD1C                  		bsr.w	SingleObjLoad
0001185E 6600                       		bne.s	Obj51_Display
00011860 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011864 3368 0008 0008             		move.w	8(a0),8(a1)
0001186A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011870 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011874 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011878 0C42 0006                  		cmpi.w	#6,d2
0001187C 6500                       		bcs.s	Obj51_Bonus
0001187E 7406                       		moveq	#6,d2
00011880                            
00011880                            Obj51_Bonus:
00011880 7000                       		moveq	#0,d0
00011882 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011886 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001188C 6500                       		bcs.s	loc_FD98	; if not, branch
0001188E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011892 740A                       		moveq	#10,d2
00011894                            
00011894                            loc_FD98:
00011894 4EB9 0000 0000             		jsr	AddPoints
0001189A E24A                       		lsr.w	#1,d2
0001189C 1342 001A                  		move.b	d2,$1A(a1)
000118A0                            
000118A0                            Obj51_Display:				; XREF: Obj51_Index
000118A0 6100 D828                  		bsr.w	SpeedToPos
000118A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000118AA 6100 D838                  		bsr.w	DisplaySprite
000118AE 4A28 0001                  		tst.b	1(a0)
000118B2 6A00 D86C                  		bpl.w	DeleteObject
000118B6 4E75                       		rts	
000118B8                            ; ===========================================================================
000118B8 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000118BC FF00 FF00                  		dc.w $FF00, $FF00
000118C0 0200 FE00                  		dc.w $200, $FE00
000118C4 0100 FF00                  		dc.w $100, $FF00
000118C8                            
000118C8 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            ; Sprite mappings - smashable green block (MZ)
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            Map_obj51:
000118D0                            	include "_maps\obj51.asm"
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            ; Sprite mappings - smashable green block (MZ)
000118D0                            ; ---------------------------------------------------------------------------
000118D0 0000                       		dc.w byte_FDD8-Map_obj51
000118D2 0000                       		dc.w byte_FDE3-Map_obj51
000118D4 02                         byte_FDD8:	dc.b 2
000118D5 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000118DA 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000118DF 04                         byte_FDE3:	dc.b 4
000118E0 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000118E5 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000118EA F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000118EF 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000118F4                            		even
000118F4                            		even
000118F4                            
000118F4                            ; ===========================================================================
000118F4                            ; ---------------------------------------------------------------------------
000118F4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000118F4                            ; ---------------------------------------------------------------------------
000118F4                            
000118F4                            Obj52:					; XREF: Obj_Index
000118F4 7000                       		moveq	#0,d0
000118F6 1028 0024                  		move.b	$24(a0),d0
000118FA 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000118FE 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00011902                            ; ===========================================================================
00011902 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00011904 0000                       		dc.w Obj52_Platform-Obj52_Index
00011906 0000                       		dc.w Obj52_StandOn-Obj52_Index
00011908                            
00011908 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001190A 2001                       		dc.b $20, 1
0001190C 2002                       		dc.b $20, 2
0001190E 4003                       		dc.b $40, 3
00011910 3004                       		dc.b $30, 4
00011912                            ; ===========================================================================
00011912                            
00011912                            Obj52_Main:				; XREF: Obj52_Index
00011912 5428 0024                  		addq.b	#2,$24(a0)
00011916 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001191E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011924 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001192A 6600                       		bne.s	loc_FE44
0001192C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011934 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001193A 117C 0007 0016             		move.b	#7,$16(a0)
00011940                            
00011940                            loc_FE44:
00011940 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011946 6600                       		bne.s	loc_FE60
00011948 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001194E 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011954 6700                       		beq.s	loc_FE60	; if yes, branch
00011956 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001195C                            
0001195C                            loc_FE60:
0001195C 117C 0004 0001             		move.b	#4,1(a0)
00011962 7000                       		moveq	#0,d0
00011964 1028 0028                  		move.b	$28(a0),d0
00011968 E648                       		lsr.w	#3,d0
0001196A 0240 001E                  		andi.w	#$1E,d0
0001196E 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011972 115A 0019                  		move.b	(a2)+,$19(a0)
00011976 115A 001A                  		move.b	(a2)+,$1A(a0)
0001197A 117C 0004 0018             		move.b	#4,$18(a0)
00011980 3168 0008 0030             		move.w	8(a0),$30(a0)
00011986 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001198C 0228 000F 0028             		andi.b	#$F,$28(a0)
00011992                            
00011992                            Obj52_Platform:				; XREF: Obj52_Index
00011992 6100 0000                  		bsr.w	Obj52_Move
00011996 7200                       		moveq	#0,d1
00011998 1228 0019                  		move.b	$19(a0),d1
0001199C 4EB9 0000 8E42             		jsr	(PlatformObject).l
000119A2 6000                       		bra.s	Obj52_ChkDel
000119A4                            ; ===========================================================================
000119A4                            
000119A4                            Obj52_StandOn:				; XREF: Obj52_Index
000119A4 7200                       		moveq	#0,d1
000119A6 1228 0019                  		move.b	$19(a0),d1
000119AA 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
000119B0 3F28 0008                  		move.w	8(a0),-(sp)
000119B4 6100 0000                  		bsr.w	Obj52_Move
000119B8 341F                       		move.w	(sp)+,d2
000119BA 4EB9 0000 9520             		jsr	(MvSonicOnPtfm2).l
000119C0                            
000119C0                            Obj52_ChkDel:				; XREF: Obj52_Platform
000119C0 3028 0030                  		move.w	$30(a0),d0
000119C4 0240 FF80                  		andi.w	#$FF80,d0
000119C8 3238 F700                  		move.w	($FFFFF700).w,d1
000119CC 0441 0080                  		subi.w	#$80,d1
000119D0 0241 FF80                  		andi.w	#$FF80,d1
000119D4 9041                       		sub.w	d1,d0
000119D6 0C40 0280                  		cmpi.w	#$280,d0
000119DA 6200 D744                  		bhi.w	DeleteObject
000119DE 6000 D704                  		bra.w	DisplaySprite
000119E2                            ; ===========================================================================
000119E2                            
000119E2                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000119E2 7000                       		moveq	#0,d0
000119E4 1028 0028                  		move.b	$28(a0),d0
000119E8 0240 000F                  		andi.w	#$F,d0
000119EC D040                       		add.w	d0,d0
000119EE 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000119F2 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000119F6                            ; ===========================================================================
000119F6 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000119FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000119FE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011A02 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011A06 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011A0A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011A0C 4E75                       		rts	
00011A0E                            ; ===========================================================================
00011A0E                            
00011A0E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011A0E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011A12 323C 0060                  		move.w	#$60,d1
00011A16 0828 0000 0022             		btst	#0,$22(a0)
00011A1C 6700                       		beq.s	loc_FF26
00011A1E 4440                       		neg.w	d0
00011A20 D041                       		add.w	d1,d0
00011A22                            
00011A22                            loc_FF26:
00011A22 3228 0030                  		move.w	$30(a0),d1
00011A26 9240                       		sub.w	d0,d1
00011A28 3141 0008                  		move.w	d1,8(a0)
00011A2C 4E75                       		rts	
00011A2E                            ; ===========================================================================
00011A2E                            
00011A2E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011A2E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011A34 6600                       		bne.s	Obj52_02_Wait
00011A36 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011A3A                            
00011A3A                            Obj52_02_Wait:
00011A3A 4E75                       		rts	
00011A3C                            ; ===========================================================================
00011A3C                            
00011A3C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011A3C 7600                       		moveq	#0,d3
00011A3E 1628 0019                  		move.b	$19(a0),d3
00011A42 6100 0000                  		bsr.w	ObjHitWallRight
00011A46 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A48 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011A4A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A4E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A54 4E75                       		rts	
00011A56                            ; ===========================================================================
00011A56                            
00011A56                            Obj52_03_End:
00011A56 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011A5A 4E75                       		rts	
00011A5C                            ; ===========================================================================
00011A5C                            
00011A5C                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011A5C 7600                       		moveq	#0,d3
00011A5E 1628 0019                  		move.b	$19(a0),d3
00011A62 6100 0000                  		bsr.w	ObjHitWallRight
00011A66 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A68 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011A6A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A6E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A74 4E75                       		rts	
00011A76                            ; ===========================================================================
00011A76                            
00011A76                            Obj52_05_End:
00011A76 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011A7A 4E75                       		rts	
00011A7C                            ; ===========================================================================
00011A7C                            
00011A7C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011A7C 6100 D64C                  		bsr.w	SpeedToPos
00011A80 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011A86 6100 0000                  		bsr.w	ObjHitFloor
00011A8A 4A41                       		tst.w	d1		; has platform hit the floor?
00011A8C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011A90 D368 000C                  		add.w	d1,$C(a0)
00011A94 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011A98 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011A9C                            
00011A9C                            locret_FFA0:
00011A9C 4E75                       		rts	
00011A9E                            ; ===========================================================================
00011A9E                            
00011A9E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011A9E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011AA2 6700                       		beq.s	Obj52_07_ChkDel
00011AA4 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011AA8                            
00011AA8                            Obj52_07_ChkDel:
00011AA8 588F                       		addq.l	#4,sp
00011AAA 3028 0030                  		move.w	$30(a0),d0
00011AAE 0240 FF80                  		andi.w	#$FF80,d0
00011AB2 3238 F700                  		move.w	($FFFFF700).w,d1
00011AB6 0441 0080                  		subi.w	#$80,d1
00011ABA 0241 FF80                  		andi.w	#$FF80,d1
00011ABE 9041                       		sub.w	d1,d0
00011AC0 0C40 0280                  		cmpi.w	#$280,d0
00011AC4 6200 D65A                  		bhi.w	DeleteObject
00011AC8 4E75                       		rts	
00011ACA                            ; ===========================================================================
00011ACA                            
00011ACA                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011ACA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011ACE 323C 0080                  		move.w	#$80,d1
00011AD2 0828 0000 0022             		btst	#0,$22(a0)
00011AD8 6700                       		beq.s	loc_FFE2
00011ADA 4440                       		neg.w	d0
00011ADC D041                       		add.w	d1,d0
00011ADE                            
00011ADE                            loc_FFE2:
00011ADE 3228 0032                  		move.w	$32(a0),d1
00011AE2 9240                       		sub.w	d0,d1
00011AE4 3141 000C                  		move.w	d1,$C(a0)
00011AE8 4E75                       		rts	
00011AEA                            ; ===========================================================================
00011AEA                            
00011AEA                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011AEA 7600                       		moveq	#0,d3
00011AEC 1628 0019                  		move.b	$19(a0),d3
00011AF0 D643                       		add.w	d3,d3
00011AF2 7208                       		moveq	#8,d1
00011AF4 0828 0000 0022             		btst	#0,$22(a0)
00011AFA 6700                       		beq.s	loc_10004
00011AFC 4441                       		neg.w	d1
00011AFE 4443                       		neg.w	d3
00011B00                            
00011B00                            loc_10004:
00011B00 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011B04 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011B06 3028 0008                  		move.w	8(a0),d0
00011B0A 9068 0030                  		sub.w	$30(a0),d0
00011B0E B043                       		cmp.w	d3,d0
00011B10 6700                       		beq.s	Obj52_0A_Wait
00011B12 D368 0008                  		add.w	d1,8(a0)	; move platform
00011B16 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011B1C 4E75                       		rts	
00011B1E                            ; ===========================================================================
00011B1E                            
00011B1E                            Obj52_0A_Wait:
00011B1E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011B22 6600                       		bne.s	locret_1002E	; if time remains, branch
00011B24 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011B2A                            
00011B2A                            locret_1002E:
00011B2A 4E75                       		rts	
00011B2C                            ; ===========================================================================
00011B2C                            
00011B2C                            Obj52_0A_Back:
00011B2C 3028 0008                  		move.w	8(a0),d0
00011B30 9068 0030                  		sub.w	$30(a0),d0
00011B34 6700                       		beq.s	Obj52_0A_Reset
00011B36 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011B3A 4E75                       		rts	
00011B3C                            ; ===========================================================================
00011B3C                            
00011B3C                            Obj52_0A_Reset:
00011B3C 4268 0036                  		clr.w	$36(a0)
00011B40 5328 0028                  		subq.b	#1,$28(a0)
00011B44 4E75                       		rts	
00011B46                            ; ===========================================================================
00011B46                            ; ---------------------------------------------------------------------------
00011B46                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B46                            ; ---------------------------------------------------------------------------
00011B46                            Map_obj52:
00011B46                            	include "_maps\obj52mz.asm"
00011B46                            ; ---------------------------------------------------------------------------
00011B46                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B46                            ; ---------------------------------------------------------------------------
00011B46 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011B4A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011B4E 0000                       		dc.w byte_1008F-Map_obj52
00011B50 01                         byte_10054:	dc.b 1
00011B51 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B56 02                         byte_1005A:	dc.b 2
00011B57 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011B5C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011B61 04                         byte_10065:	dc.b 4
00011B62 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011B67 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011B6C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011B71 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011B76 04                         byte_1007A:	dc.b 4
00011B77 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011B7C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011B81 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011B86 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011B8B 03                         byte_1008F:	dc.b 3
00011B8C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011B91 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B96 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011B9C 00                         		even
00011B9C 00                         		even
00011B9C                            
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            ; Sprite mappings - moving block (LZ)
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            Map_obj52a:
00011B9C                            	include "_maps\obj52lz.asm"
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            ; Sprite mappings - moving block (LZ)
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C 0000                       		dc.w byte_100A2-Map_obj52a
00011B9E 01                         byte_100A2:	dc.b 1
00011B9F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011BA4                            		even
00011BA4                            		even
00011BA4                            
00011BA4                            ; ===========================================================================
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4                            ; Object 55 - Basaran enemy (MZ)
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4                            
00011BA4                            Obj55:					; XREF: Obj_Index
00011BA4 7000                       		moveq	#0,d0
00011BA6 1028 0024                  		move.b	$24(a0),d0
00011BAA 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011BAE 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011BB2                            ; ===========================================================================
00011BB2 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011BB4 0000                       		dc.w Obj55_Action-Obj55_Index
00011BB6                            ; ===========================================================================
00011BB6                            
00011BB6                            Obj55_Main:				; XREF: Obj55_Index
00011BB6 5428 0024                  		addq.b	#2,$24(a0)
00011BBA 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011BC2 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011BC8 117C 0004 0001             		move.b	#4,1(a0)
00011BCE 117C 000C 0016             		move.b	#$C,$16(a0)
00011BD4 117C 0002 0018             		move.b	#2,$18(a0)
00011BDA 117C 000B 0020             		move.b	#$B,$20(a0)
00011BE0 117C 0010 0019             		move.b	#$10,$19(a0)
00011BE6                            
00011BE6                            Obj55_Action:				; XREF: Obj55_Index
00011BE6 7000                       		moveq	#0,d0
00011BE8 1028 0025                  		move.b	$25(a0),d0
00011BEC 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011BF0 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011BF4 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011BFA 6100 A53C                  		bsr.w	AnimateSprite
00011BFE 6000 F59A                  		bra.w	MarkObjGone
00011C02                            ; ===========================================================================
00011C02 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011C04 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011C06 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011C08 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011C0A                            ; ===========================================================================
00011C0A                            
00011C0A                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011C0A 343C 0080                  		move.w	#$80,d2
00011C0E 6100 0000                  		bsr.w	Obj55_ChkSonic
00011C12 6400                       		bcc.s	Obj55_NoDrop
00011C14 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011C18 3140 0036                  		move.w	d0,$36(a0)
00011C1C 9068 000C                  		sub.w	$C(a0),d0
00011C20 6500                       		bcs.s	Obj55_NoDrop
00011C22 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011C26 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011C28 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011C2C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011C2E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C32 D007                       		add.b	d7,d0
00011C34 0200 0007                  		andi.b	#7,d0
00011C38 6600                       		bne.s	Obj55_NoDrop
00011C3A 117C 0001 001C             		move.b	#1,$1C(a0)
00011C40 5428 0025                  		addq.b	#2,$25(a0)
00011C44                            
00011C44                            Obj55_NoDrop:
00011C44 4E75                       		rts	
00011C46                            ; ===========================================================================
00011C46                            
00011C46                            Obj55_DropFly:				; XREF: Obj55_Index2
00011C46 6100 D482                  		bsr.w	SpeedToPos
00011C4A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011C50 343C 0080                  		move.w	#$80,d2
00011C54 6100 0000                  		bsr.w	Obj55_ChkSonic
00011C58 3028 0036                  		move.w	$36(a0),d0
00011C5C 9068 000C                  		sub.w	$C(a0),d0
00011C60 6500                       		bcs.s	Obj55_ChkDel
00011C62 0C40 0010                  		cmpi.w	#$10,d0
00011C66 6400                       		bcc.s	locret_10180
00011C68 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011C6C 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011C72 117C 0002 001C             		move.b	#2,$1C(a0)
00011C78 5428 0025                  		addq.b	#2,$25(a0)
00011C7C                            
00011C7C                            locret_10180:
00011C7C 4E75                       		rts	
00011C7E                            ; ===========================================================================
00011C7E                            
00011C7E                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011C7E 4A28 0001                  		tst.b	1(a0)
00011C82 6A00 D49C                  		bpl.w	DeleteObject
00011C86 4E75                       		rts	
00011C88                            ; ===========================================================================
00011C88                            
00011C88                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011C88 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C8C 0200 000F                  		andi.b	#$F,d0
00011C90 6600                       		bne.s	loc_101A0
00011C92 303C 00C0                  		move.w	#$C0,d0
00011C96 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flapping sound
00011C9C                            
00011C9C                            loc_101A0:
00011C9C 6100 D42C                  		bsr.w	SpeedToPos
00011CA0 3038 D008                  		move.w	($FFFFD008).w,d0
00011CA4 9068 0008                  		sub.w	8(a0),d0
00011CA8 6400                       		bcc.s	loc_101B0
00011CAA 4440                       		neg.w	d0
00011CAC                            
00011CAC                            loc_101B0:
00011CAC 0C40 0080                  		cmpi.w	#$80,d0
00011CB0 6500                       		bcs.s	locret_101C6
00011CB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011CB6 D007                       		add.b	d7,d0
00011CB8 0200 0007                  		andi.b	#7,d0
00011CBC 6600                       		bne.s	locret_101C6
00011CBE 5428 0025                  		addq.b	#2,$25(a0)
00011CC2                            
00011CC2                            locret_101C6:
00011CC2 4E75                       		rts	
00011CC4                            ; ===========================================================================
00011CC4                            
00011CC4                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011CC4 6100 D404                  		bsr.w	SpeedToPos
00011CC8 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011CCE 6100 0000                  		bsr.w	ObjHitCeiling
00011CD2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011CD4 6A00                       		bpl.s	locret_101F4	; if not, branch
00011CD6 9368 000C                  		sub.w	d1,$C(a0)
00011CDA 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011CE0 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011CE4 4268 0012                  		clr.w	$12(a0)
00011CE8 4228 001C                  		clr.b	$1C(a0)
00011CEC 4228 0025                  		clr.b	$25(a0)
00011CF0                            
00011CF0                            locret_101F4:
00011CF0 4E75                       		rts	
00011CF2                            ; ===========================================================================
00011CF2                            
00011CF2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011CF2 323C 0100                  		move.w	#$100,d1
00011CF6 08E8 0000 0022             		bset	#0,$22(a0)
00011CFC 3038 D008                  		move.w	($FFFFD008).w,d0
00011D00 9068 0008                  		sub.w	8(a0),d0
00011D04 6400                       		bcc.s	loc_10214
00011D06 4440                       		neg.w	d0
00011D08 4441                       		neg.w	d1
00011D0A 08A8 0000 0022             		bclr	#0,$22(a0)
00011D10                            
00011D10                            loc_10214:
00011D10 B042                       		cmp.w	d2,d0
00011D12 4E75                       		rts	
00011D14                            ; ===========================================================================
00011D14 6100 D3B4                  		bsr.w	SpeedToPos
00011D18 6100 D3CA                  		bsr.w	DisplaySprite
00011D1C 4A28 0001                  		tst.b	1(a0)
00011D20 6A00 D3FE                  		bpl.w	DeleteObject
00011D24 4E75                       		rts	
00011D26                            ; ===========================================================================
00011D26                            Ani_obj55:
00011D26                            	include "_anim\obj55.asm"
00011D26                            ; ---------------------------------------------------------------------------
00011D26                            ; Animation script - Basaran enemy
00011D26                            ; ---------------------------------------------------------------------------
00011D26 0000                       		dc.w byte_10230-Ani_obj55
00011D28 0000                       		dc.w byte_10234-Ani_obj55
00011D2A 0000                       		dc.w byte_10238-Ani_obj55
00011D2C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011D30 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011D34 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011D3A                            		even
00011D3A                            		even
00011D3A                            
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            ; Sprite mappings - Basaran enemy (MZ)
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            Map_obj55:
00011D3A                            	include "_maps\obj55.asm"
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            ; Sprite mappings - Basaran enemy (MZ)
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011D3E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011D42 01                         byte_10246:	dc.b 1
00011D43 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011D48 03                         byte_1024C:	dc.b 3
00011D49 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011D4E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011D53 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011D58 04                         byte_1025C:	dc.b 4
00011D59 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011D5E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011D63 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011D68 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011D6D 04                         byte_10271:	dc.b 4
00011D6E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011D73 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011D78 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011D7D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011D82                            		even
00011D82                            		even
00011D82                            
00011D82                            ; ===========================================================================
00011D82                            ; ---------------------------------------------------------------------------
00011D82                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011D82                            ; ---------------------------------------------------------------------------
00011D82                            
00011D82                            Obj56:					; XREF: Obj_Index
00011D82 7000                       		moveq	#0,d0
00011D84 1028 0024                  		move.b	$24(a0),d0
00011D88 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011D8C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011D90                            ; ===========================================================================
00011D90 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011D92 0000                       		dc.w Obj56_Action-Obj56_Index
00011D94                            
00011D94 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011D96 2020                       		dc.b  $20, $20
00011D98 1020                       		dc.b  $10, $20
00011D9A 201A                       		dc.b  $20, $1A
00011D9C 1027                       		dc.b  $10, $27
00011D9E 1010                       		dc.b  $10, $10
00011DA0 0820                       		dc.b	8, $20
00011DA2 4010                       		dc.b  $40, $10
00011DA4                            ; ===========================================================================
00011DA4                            
00011DA4                            Obj56_Main:				; XREF: Obj56_Index
00011DA4 5428 0024                  		addq.b	#2,$24(a0)
00011DA8 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011DB0 317C 4000 0002             		move.w	#$4000,2(a0)
00011DB6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DBC 6600                       		bne.s	loc_102C8
00011DBE 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011DC4                            
00011DC4                            loc_102C8:
00011DC4 117C 0004 0001             		move.b	#4,1(a0)
00011DCA 117C 0003 0018             		move.b	#3,$18(a0)
00011DD0 7000                       		moveq	#0,d0
00011DD2 1028 0028                  		move.b	$28(a0),d0
00011DD6 E648                       		lsr.w	#3,d0
00011DD8 0240 000E                  		andi.w	#$E,d0
00011DDC 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011DE0 115A 0019                  		move.b	(a2)+,$19(a0)
00011DE4 1152 0016                  		move.b	(a2),$16(a0)
00011DE8 E248                       		lsr.w	#1,d0
00011DEA 1140 001A                  		move.b	d0,$1A(a0)
00011DEE 3168 0008 0034             		move.w	8(a0),$34(a0)
00011DF4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011DFA 7000                       		moveq	#0,d0
00011DFC 1012                       		move.b	(a2),d0
00011DFE D040                       		add.w	d0,d0
00011E00 3140 003A                  		move.w	d0,$3A(a0)
00011E04 7000                       		moveq	#0,d0
00011E06 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E0C 6700                       		beq.s	loc_10332
00011E0E 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011E12 0240 000F                  		andi.w	#$F,d0
00011E16 5140                       		subq.w	#8,d0
00011E18 6500                       		bcs.s	loc_10332
00011E1A E548                       		lsl.w	#2,d0
00011E1C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011E20 45F2 0000                  		lea	(a2,d0.w),a2
00011E24 4A52                       		tst.w	(a2)
00011E26 6A00                       		bpl.s	loc_10332
00011E28 0868 0000 0022             		bchg	#0,$22(a0)
00011E2E                            
00011E2E                            loc_10332:
00011E2E 1028 0028                  		move.b	$28(a0),d0
00011E32 6A00                       		bpl.s	Obj56_Action
00011E34 0200 000F                  		andi.b	#$F,d0
00011E38 1140 003C                  		move.b	d0,$3C(a0)
00011E3C 117C 0005 0028             		move.b	#5,$28(a0)
00011E42 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011E48 6600                       		bne.s	Obj56_ChkGone
00011E4A 117C 000C 0028             		move.b	#$C,$28(a0)
00011E50 317C 0080 003A             		move.w	#$80,$3A(a0)
00011E56                            
00011E56                            Obj56_ChkGone:
00011E56 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011E5A 7000                       		moveq	#0,d0
00011E5C 1028 0023                  		move.b	$23(a0),d0
00011E60 6700                       		beq.s	Obj56_Action
00011E62 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011E68 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011E6E 6700                       		beq.s	Obj56_Action
00011E70 5228 0028                  		addq.b	#1,$28(a0)
00011E74 4268 003A                  		clr.w	$3A(a0)
00011E78                            
00011E78                            Obj56_Action:				; XREF: Obj56_Index
00011E78 3F28 0008                  		move.w	8(a0),-(sp)
00011E7C 7000                       		moveq	#0,d0
00011E7E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E82 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011E86 D040                       		add.w	d0,d0
00011E88 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011E8C 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011E90 381F                       		move.w	(sp)+,d4
00011E92 4A28 0001                  		tst.b	1(a0)
00011E96 6A00                       		bpl.s	Obj56_ChkDel
00011E98 7200                       		moveq	#0,d1
00011E9A 1228 0019                  		move.b	$19(a0),d1
00011E9E 0641 000B                  		addi.w	#$B,d1
00011EA2 7400                       		moveq	#0,d2
00011EA4 1428 0016                  		move.b	$16(a0),d2
00011EA8 3602                       		move.w	d2,d3
00011EAA 5243                       		addq.w	#1,d3
00011EAC 6100 F614                  		bsr.w	SolidObject
00011EB0                            
00011EB0                            Obj56_ChkDel:
00011EB0 3028 0034                  		move.w	$34(a0),d0
00011EB4 0240 FF80                  		andi.w	#$FF80,d0
00011EB8 3238 F700                  		move.w	($FFFFF700).w,d1
00011EBC 0441 0080                  		subi.w	#$80,d1
00011EC0 0241 FF80                  		andi.w	#$FF80,d1
00011EC4 9041                       		sub.w	d1,d0
00011EC6 0C40 0280                  		cmpi.w	#$280,d0
00011ECA 6200 D254                  		bhi.w	DeleteObject
00011ECE 6000 D214                  		bra.w	DisplaySprite
00011ED2                            ; ===========================================================================
00011ED2 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011ED6 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011EDA 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011EDE 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011EE2 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011EE6 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011EEA 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011EEE                            ; ===========================================================================
00011EEE                            
00011EEE                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011EEE 4E75                       		rts	
00011EF0                            ; ===========================================================================
00011EF0                            
00011EF0                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011EF0 323C 0040                  		move.w	#$40,d1
00011EF4 7000                       		moveq	#0,d0
00011EF6 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011EFA 6000                       		bra.s	Obj56_Move_LR
00011EFC                            ; ===========================================================================
00011EFC                            
00011EFC                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011EFC 323C 0080                  		move.w	#$80,d1
00011F00 7000                       		moveq	#0,d0
00011F02 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011F06                            
00011F06                            Obj56_Move_LR:
00011F06 0828 0000 0022             		btst	#0,$22(a0)
00011F0C 6700                       		beq.s	loc_10416
00011F0E 4440                       		neg.w	d0
00011F10 D041                       		add.w	d1,d0
00011F12                            
00011F12                            loc_10416:
00011F12 3228 0034                  		move.w	$34(a0),d1
00011F16 9240                       		sub.w	d0,d1
00011F18 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011F1C 4E75                       		rts	
00011F1E                            ; ===========================================================================
00011F1E                            
00011F1E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011F1E 323C 0040                  		move.w	#$40,d1
00011F22 7000                       		moveq	#0,d0
00011F24 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011F28 6000                       		bra.s	Obj56_Move_UD
00011F2A                            ; ===========================================================================
00011F2A                            
00011F2A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011F2A 323C 0080                  		move.w	#$80,d1
00011F2E 7000                       		moveq	#0,d0
00011F30 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011F34                            
00011F34                            Obj56_Move_UD:
00011F34 0828 0000 0022             		btst	#0,$22(a0)
00011F3A 6700                       		beq.s	loc_10444
00011F3C 4440                       		neg.w	d0
00011F3E D041                       		add.w	d1,d0
00011F40                            
00011F40                            loc_10444:
00011F40 3228 0030                  		move.w	$30(a0),d1
00011F44 9240                       		sub.w	d0,d1
00011F46 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011F4A 4E75                       		rts	
00011F4C                            ; ===========================================================================
00011F4C                            
00011F4C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011F4C 4A28 0038                  		tst.b	$38(a0)
00011F50 6600                       		bne.s	loc_104A4
00011F52 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F58 6600                       		bne.s	loc_1047A	; if not, branch
00011F5A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011F60 6600                       		bne.s	loc_1047A
00011F62 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F66 3038 D008                  		move.w	($FFFFD008).w,d0
00011F6A B068 0008                  		cmp.w	8(a0),d0
00011F6E 6400                       		bcc.s	loc_1047A
00011F70 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011F76                            
00011F76                            loc_1047A:
00011F76 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F7A 7000                       		moveq	#0,d0
00011F7C 1028 003C                  		move.b	$3C(a0),d0
00011F80 0832 0000 0000             		btst	#0,(a2,d0.w)
00011F86 6700                       		beq.s	loc_104AE
00011F88 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F8E 6600                       		bne.s	loc_1049E	; if not, branch
00011F90 0C00 0003                  		cmpi.b	#3,d0
00011F94 6600                       		bne.s	loc_1049E
00011F96 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F9A                            
00011F9A                            loc_1049E:
00011F9A 117C 0001 0038             		move.b	#1,$38(a0)
00011FA0                            
00011FA0                            loc_104A4:
00011FA0 4A68 003A                  		tst.w	$3A(a0)
00011FA4 6700                       		beq.s	loc_104C8
00011FA6 5568 003A                  		subq.w	#2,$3A(a0)
00011FAA                            
00011FAA                            loc_104AE:
00011FAA 3028 003A                  		move.w	$3A(a0),d0
00011FAE 0828 0000 0022             		btst	#0,$22(a0)
00011FB4 6700                       		beq.s	loc_104BC
00011FB6 4440                       		neg.w	d0
00011FB8                            
00011FB8                            loc_104BC:
00011FB8 3228 0030                  		move.w	$30(a0),d1
00011FBC D240                       		add.w	d0,d1
00011FBE 3141 000C                  		move.w	d1,$C(a0)
00011FC2 4E75                       		rts	
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            loc_104C8:
00011FC4 5228 0028                  		addq.b	#1,$28(a0)
00011FC8 4228 0038                  		clr.b	$38(a0)
00011FCC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011FD0 7000                       		moveq	#0,d0
00011FD2 1028 0023                  		move.b	$23(a0),d0
00011FD6 67D2                       		beq.s	loc_104AE
00011FD8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011FDE 60CA                       		bra.s	loc_104AE
00011FE0                            ; ===========================================================================
00011FE0                            
00011FE0                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011FE0 4A28 0038                  		tst.b	$38(a0)
00011FE4 6600                       		bne.s	loc_10500
00011FE6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011FEA 7000                       		moveq	#0,d0
00011FEC 1028 003C                  		move.b	$3C(a0),d0
00011FF0 4A32 0000                  		tst.b	(a2,d0.w)
00011FF4 6A00                       		bpl.s	loc_10512
00011FF6 117C 0001 0038             		move.b	#1,$38(a0)
00011FFC                            
00011FFC                            loc_10500:
00011FFC 7000                       		moveq	#0,d0
00011FFE 1028 0016                  		move.b	$16(a0),d0
00012002 D040                       		add.w	d0,d0
00012004 B068 003A                  		cmp.w	$3A(a0),d0
00012008 6700                       		beq.s	loc_1052C
0001200A 5468 003A                  		addq.w	#2,$3A(a0)
0001200E                            
0001200E                            loc_10512:
0001200E 3028 003A                  		move.w	$3A(a0),d0
00012012 0828 0000 0022             		btst	#0,$22(a0)
00012018 6700                       		beq.s	loc_10520
0001201A 4440                       		neg.w	d0
0001201C                            
0001201C                            loc_10520:
0001201C 3228 0030                  		move.w	$30(a0),d1
00012020 D240                       		add.w	d0,d1
00012022 3141 000C                  		move.w	d1,$C(a0)
00012026 4E75                       		rts	
00012028                            ; ===========================================================================
00012028                            
00012028                            loc_1052C:
00012028 5328 0028                  		subq.b	#1,$28(a0)
0001202C 4228 0038                  		clr.b	$38(a0)
00012030 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012034 7000                       		moveq	#0,d0
00012036 1028 0023                  		move.b	$23(a0),d0
0001203A 67D2                       		beq.s	loc_10512
0001203C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012042 60CA                       		bra.s	loc_10512
00012044                            ; ===========================================================================
00012044                            
00012044                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00012044 4A28 0038                  		tst.b	$38(a0)
00012048 6600                       		bne.s	loc_1055E
0001204A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001204E 6700                       		beq.s	locret_10578
00012050 117C 0001 0038             		move.b	#1,$38(a0)
00012056 4268 003A                  		clr.w	$3A(a0)
0001205A                            
0001205A                            loc_1055E:
0001205A 5268 0008                  		addq.w	#1,8(a0)
0001205E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012064 5268 003A                  		addq.w	#1,$3A(a0)
00012068 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001206E 6600                       		bne.s	locret_10578
00012070 4228 0028                  		clr.b	$28(a0)
00012074                            
00012074                            locret_10578:
00012074 4E75                       		rts	
00012076                            ; ===========================================================================
00012076                            
00012076                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00012076 4A28 0038                  		tst.b	$38(a0)
0001207A 6600                       		bne.s	loc_10598
0001207C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012080 7000                       		moveq	#0,d0
00012082 1028 003C                  		move.b	$3C(a0),d0
00012086 0832 0000 0000             		btst	#0,(a2,d0.w)
0001208C 6700                       		beq.s	loc_105A2
0001208E 117C 0001 0038             		move.b	#1,$38(a0)
00012094                            
00012094                            loc_10598:
00012094 4A68 003A                  		tst.w	$3A(a0)
00012098 6700                       		beq.s	loc_105C0
0001209A 5568 003A                  		subq.w	#2,$3A(a0)
0001209E                            
0001209E                            loc_105A2:
0001209E 3028 003A                  		move.w	$3A(a0),d0
000120A2 0828 0000 0022             		btst	#0,$22(a0)
000120A8 6700                       		beq.s	loc_105B4
000120AA 4440                       		neg.w	d0
000120AC 0640 0080                  		addi.w	#$80,d0
000120B0                            
000120B0                            loc_105B4:
000120B0 3228 0034                  		move.w	$34(a0),d1
000120B4 D240                       		add.w	d0,d1
000120B6 3141 0008                  		move.w	d1,8(a0)
000120BA 4E75                       		rts	
000120BC                            ; ===========================================================================
000120BC                            
000120BC                            loc_105C0:
000120BC 5228 0028                  		addq.b	#1,$28(a0)
000120C0 4228 0038                  		clr.b	$38(a0)
000120C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000120C8 7000                       		moveq	#0,d0
000120CA 1028 0023                  		move.b	$23(a0),d0
000120CE 67CE                       		beq.s	loc_105A2
000120D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000120D6 60C6                       		bra.s	loc_105A2
000120D8                            ; ===========================================================================
000120D8                            
000120D8                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000120D8 4A28 0038                  		tst.b	$38(a0)
000120DC 6600                       		bne.s	loc_105F8
000120DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000120E2 7000                       		moveq	#0,d0
000120E4 1028 003C                  		move.b	$3C(a0),d0
000120E8 4A32 0000                  		tst.b	(a2,d0.w)
000120EC 6A00                       		bpl.s	loc_10606
000120EE 117C 0001 0038             		move.b	#1,$38(a0)
000120F4                            
000120F4                            loc_105F8:
000120F4 303C 0080                  		move.w	#$80,d0
000120F8 B068 003A                  		cmp.w	$3A(a0),d0
000120FC 6700                       		beq.s	loc_10624
000120FE 5468 003A                  		addq.w	#2,$3A(a0)
00012102                            
00012102                            loc_10606:
00012102 3028 003A                  		move.w	$3A(a0),d0
00012106 0828 0000 0022             		btst	#0,$22(a0)
0001210C 6700                       		beq.s	loc_10618
0001210E 4440                       		neg.w	d0
00012110 0640 0080                  		addi.w	#$80,d0
00012114                            
00012114                            loc_10618:
00012114 3228 0034                  		move.w	$34(a0),d1
00012118 D240                       		add.w	d0,d1
0001211A 3141 0008                  		move.w	d1,8(a0)
0001211E 4E75                       		rts	
00012120                            ; ===========================================================================
00012120                            
00012120                            loc_10624:
00012120 5328 0028                  		subq.b	#1,$28(a0)
00012124 4228 0038                  		clr.b	$38(a0)
00012128 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001212C 7000                       		moveq	#0,d0
0001212E 1028 0023                  		move.b	$23(a0),d0
00012132 67CE                       		beq.s	loc_10606
00012134 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001213A 60C6                       		bra.s	loc_10606
0001213C                            ; ===========================================================================
0001213C                            
0001213C                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001213C 323C 0010                  		move.w	#$10,d1
00012140 7000                       		moveq	#0,d0
00012142 1038 FE88                  		move.b	($FFFFFE88).w,d0
00012146 E248                       		lsr.w	#1,d0
00012148 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001214C 6000                       		bra.s	Obj56_Move_Sqr
0001214E                            ; ===========================================================================
0001214E                            
0001214E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001214E 323C 0030                  		move.w	#$30,d1
00012152 7000                       		moveq	#0,d0
00012154 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00012158 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001215C 6000                       		bra.s	Obj56_Move_Sqr
0001215E                            ; ===========================================================================
0001215E                            
0001215E                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001215E 323C 0050                  		move.w	#$50,d1
00012162 7000                       		moveq	#0,d0
00012164 1038 FE90                  		move.b	($FFFFFE90).w,d0
00012168 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001216C 6000                       		bra.s	Obj56_Move_Sqr
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001216E 323C 0070                  		move.w	#$70,d1
00012172 7000                       		moveq	#0,d0
00012174 1038 FE94                  		move.b	($FFFFFE94).w,d0
00012178 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001217C                            
0001217C                            Obj56_Move_Sqr:
0001217C 4A43                       		tst.w	d3
0001217E 6600                       		bne.s	loc_1068E
00012180 5228 0022                  		addq.b	#1,$22(a0)
00012184 0228 0003 0022             		andi.b	#3,$22(a0)
0001218A                            
0001218A                            loc_1068E:
0001218A 1428 0022                  		move.b	$22(a0),d2
0001218E 0202 0003                  		andi.b	#3,d2
00012192 6600                       		bne.s	loc_106AE
00012194 9041                       		sub.w	d1,d0
00012196 D068 0034                  		add.w	$34(a0),d0
0001219A 3140 0008                  		move.w	d0,8(a0)
0001219E 4441                       		neg.w	d1
000121A0 D268 0030                  		add.w	$30(a0),d1
000121A4 3141 000C                  		move.w	d1,$C(a0)
000121A8 4E75                       		rts	
000121AA                            ; ===========================================================================
000121AA                            
000121AA                            loc_106AE:
000121AA 5302                       		subq.b	#1,d2
000121AC 6600                       		bne.s	loc_106CC
000121AE 5341                       		subq.w	#1,d1
000121B0 9041                       		sub.w	d1,d0
000121B2 4440                       		neg.w	d0
000121B4 D068 0030                  		add.w	$30(a0),d0
000121B8 3140 000C                  		move.w	d0,$C(a0)
000121BC 5241                       		addq.w	#1,d1
000121BE D268 0034                  		add.w	$34(a0),d1
000121C2 3141 0008                  		move.w	d1,8(a0)
000121C6 4E75                       		rts	
000121C8                            ; ===========================================================================
000121C8                            
000121C8                            loc_106CC:
000121C8 5302                       		subq.b	#1,d2
000121CA 6600                       		bne.s	loc_106EA
000121CC 5341                       		subq.w	#1,d1
000121CE 9041                       		sub.w	d1,d0
000121D0 4440                       		neg.w	d0
000121D2 D068 0034                  		add.w	$34(a0),d0
000121D6 3140 0008                  		move.w	d0,8(a0)
000121DA 5241                       		addq.w	#1,d1
000121DC D268 0030                  		add.w	$30(a0),d1
000121E0 3141 000C                  		move.w	d1,$C(a0)
000121E4 4E75                       		rts	
000121E6                            ; ===========================================================================
000121E6                            
000121E6                            loc_106EA:
000121E6 9041                       		sub.w	d1,d0
000121E8 D068 0030                  		add.w	$30(a0),d0
000121EC 3140 000C                  		move.w	d0,$C(a0)
000121F0 4441                       		neg.w	d1
000121F2 D268 0034                  		add.w	$34(a0),d1
000121F6 3141 0008                  		move.w	d1,8(a0)
000121FA 4E75                       		rts	
000121FC                            ; ===========================================================================
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            Map_obj56:
000121FC                            	include "_maps\obj56.asm"
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121FC                            ; ---------------------------------------------------------------------------
000121FC 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00012200 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00012204 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00012208 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001220C 01                         byte_10710:	dc.b 1
0001220D F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00012212 04                         byte_10716:	dc.b 4
00012213 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012218 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001221D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012222 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012227 02                         byte_1072B:	dc.b 2
00012228 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001222D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012232 04                         byte_10736:	dc.b 4
00012233 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012238 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001223D 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012242 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012247 03                         byte_1074B:	dc.b 3
00012248 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001224D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012252 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012257 01                         byte_1075B:	dc.b 1
00012258 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001225D 02                         byte_10761:	dc.b 2
0001225E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012263 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012268 04                         byte_1076C:	dc.b 4
00012269 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001226E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012273 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012278 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001227E 00                         		even
0001227E 00                         		even
0001227E                            
0001227E                            ; ===========================================================================
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            ; Object 57 - spiked balls (SYZ, LZ)
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            
0001227E                            Obj57:					; XREF: Obj_Index
0001227E 7000                       		moveq	#0,d0
00012280 1028 0024                  		move.b	$24(a0),d0
00012284 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012288 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001228C                            ; ===========================================================================
0001228C 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001228E 0000                       		dc.w Obj57_Move-Obj57_Index
00012290 0000                       		dc.w Obj57_Display-Obj57_Index
00012292                            ; ===========================================================================
00012292                            
00012292                            Obj57_Main:				; XREF: Obj57_Index
00012292 5428 0024                  		addq.b	#2,$24(a0)
00012296 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001229E 317C 03BA 0002             		move.w	#$3BA,2(a0)
000122A4 117C 0004 0001             		move.b	#4,1(a0)
000122AA 117C 0004 0018             		move.b	#4,$18(a0)
000122B0 117C 0008 0019             		move.b	#8,$19(a0)
000122B6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122C2 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000122C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122CE 6600                       		bne.s	loc_107E8
000122D0 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000122D6 317C 0310 0002             		move.w	#$310,2(a0)
000122DC 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000122E4                            
000122E4                            loc_107E8:
000122E4 1228 0028                  		move.b	$28(a0),d1	; get object type
000122E8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122EC 4881                       		ext.w	d1
000122EE E741                       		asl.w	#3,d1		; multiply by 8
000122F0 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000122F4 1028 0022                  		move.b	$22(a0),d0
000122F8 E418                       		ror.b	#2,d0
000122FA 0200 00C0                  		andi.b	#-$40,d0
000122FE 1140 0026                  		move.b	d0,$26(a0)
00012302 45E8 0029                  		lea	$29(a0),a2
00012306 1228 0028                  		move.b	$28(a0),d1	; get object type
0001230A 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001230E 14FC 0000                  		move.b	#0,(a2)+
00012312 3601                       		move.w	d1,d3
00012314 E94B                       		lsl.w	#4,d3
00012316 1143 003C                  		move.b	d3,$3C(a0)
0001231A 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001231C 6500                       		bcs.s	loc_10894
0001231E 0828 0003 0028             		btst	#3,$28(a0)
00012324 6700                       		beq.s	Obj57_MakeChain
00012326 5341                       		subq.w	#1,d1
00012328 6500                       		bcs.s	loc_10894
0001232A                            
0001232A                            Obj57_MakeChain:
0001232A 6100 D24C                  		bsr.w	SingleObjLoad
0001232E 6600                       		bne.s	loc_10894
00012330 5228 0029                  		addq.b	#1,$29(a0)
00012334 3A09                       		move.w	a1,d5
00012336 0445 D000                  		subi.w	#-$3000,d5
0001233A EC4D                       		lsr.w	#6,d5
0001233C 0245 007F                  		andi.w	#$7F,d5
00012340 14C5                       		move.b	d5,(a2)+
00012342 137C 0004 0024             		move.b	#4,$24(a1)
00012348 1290                       		move.b	0(a0),0(a1)
0001234A 2368 0004 0004             		move.l	4(a0),4(a1)
00012350 3368 0002 0002             		move.w	2(a0),2(a1)
00012356 1368 0001 0001             		move.b	1(a0),1(a1)
0001235C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012362 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012368 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001236E 0403 0010                  		subi.b	#$10,d3
00012372 1343 003C                  		move.b	d3,$3C(a1)
00012376 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001237C 6600                       		bne.s	loc_10890
0001237E 4A03                       		tst.b	d3
00012380 6600                       		bne.s	loc_10890
00012382 137C 0002 001A             		move.b	#2,$1A(a1)
00012388                            
00012388                            loc_10890:
00012388 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001238C                            
0001238C                            loc_10894:
0001238C 3A08                       		move.w	a0,d5
0001238E 0445 D000                  		subi.w	#-$3000,d5
00012392 EC4D                       		lsr.w	#6,d5
00012394 0245 007F                  		andi.w	#$7F,d5
00012398 14C5                       		move.b	d5,(a2)+
0001239A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000123A0 6600                       		bne.s	Obj57_Move
000123A2 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000123A8 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000123AE                            
000123AE                            Obj57_Move:				; XREF: Obj57_Index
000123AE 6100 0000                  		bsr.w	Obj57_MoveSub
000123B2 6000 0000                  		bra.w	Obj57_ChkDel
000123B6                            ; ===========================================================================
000123B6                            
000123B6                            Obj57_MoveSub:				; XREF: Obj57_Move
000123B6 3028 003E                  		move.w	$3E(a0),d0
000123BA D168 0026                  		add.w	d0,$26(a0)
000123BE 1028 0026                  		move.b	$26(a0),d0
000123C2 4EB9 0000 2B7A             		jsr	(CalcSine).l
000123C8 3428 0038                  		move.w	$38(a0),d2
000123CC 3628 003A                  		move.w	$3A(a0),d3
000123D0 45E8 0029                  		lea	$29(a0),a2
000123D4 7C00                       		moveq	#0,d6
000123D6 1C1A                       		move.b	(a2)+,d6
000123D8                            
000123D8                            Obj57_MoveLoop:
000123D8 7800                       		moveq	#0,d4
000123DA 181A                       		move.b	(a2)+,d4
000123DC ED4C                       		lsl.w	#6,d4
000123DE 0684 00FF D000             		addi.l	#$FFD000,d4
000123E4 2244                       		movea.l	d4,a1
000123E6 7800                       		moveq	#0,d4
000123E8 1829 003C                  		move.b	$3C(a1),d4
000123EC 2A04                       		move.l	d4,d5
000123EE C9C0                       		muls.w	d0,d4
000123F0 E084                       		asr.l	#8,d4
000123F2 CBC1                       		muls.w	d1,d5
000123F4 E085                       		asr.l	#8,d5
000123F6 D842                       		add.w	d2,d4
000123F8 DA43                       		add.w	d3,d5
000123FA 3344 000C                  		move.w	d4,$C(a1)
000123FE 3345 0008                  		move.w	d5,8(a1)
00012402 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00012406 4E75                       		rts	
00012408                            ; ===========================================================================
00012408                            
00012408                            Obj57_ChkDel:				; XREF: Obj57_Move
00012408 3028 003A                  		move.w	$3A(a0),d0
0001240C 0240 FF80                  		andi.w	#$FF80,d0
00012410 3238 F700                  		move.w	($FFFFF700).w,d1
00012414 0441 0080                  		subi.w	#$80,d1
00012418 0241 FF80                  		andi.w	#$FF80,d1
0001241C 9041                       		sub.w	d1,d0
0001241E 0C40 0280                  		cmpi.w	#$280,d0
00012422 6200 0000                  		bhi.w	Obj57_Delete
00012426 6000 CCBC                  		bra.w	DisplaySprite
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001242A 7400                       		moveq	#0,d2
0001242C 45E8 0029                  		lea	$29(a0),a2
00012430 141A                       		move.b	(a2)+,d2
00012432                            
00012432                            Obj57_DelLoop:
00012432 7000                       		moveq	#0,d0
00012434 101A                       		move.b	(a2)+,d0
00012436 ED48                       		lsl.w	#6,d0
00012438 0680 00FF D000             		addi.l	#$FFD000,d0
0001243E 2240                       		movea.l	d0,a1
00012440 6100 CCE0                  		bsr.w	DeleteObject2
00012444 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012448                            
00012448 4E75                       		rts	
0001244A                            ; ===========================================================================
0001244A                            
0001244A                            Obj57_Display:				; XREF: Obj57_Index
0001244A 6000 CC98                  		bra.w	DisplaySprite
0001244E                            ; ===========================================================================
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            Map_obj57:
0001244E                            	include "_maps\obj57syz.asm"
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001244E                            ; ---------------------------------------------------------------------------
0001244E 0000                       		dc.w byte_10958-Map_obj57
00012450 01                         byte_10958:	dc.b 1
00012451 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012456                            		even
00012456                            		even
00012456                            
00012456                            ; ---------------------------------------------------------------------------
00012456                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012456                            ; ---------------------------------------------------------------------------
00012456                            Map_obj57a:
00012456                            	include "_maps\obj57lz.asm"
00012456                            ; ---------------------------------------------------------------------------
00012456                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012456                            ; ---------------------------------------------------------------------------
00012456 0000                       		dc.w byte_10964-Map_obj57a
00012458 0000                       		dc.w byte_1096A-Map_obj57a
0001245A 0000                       		dc.w byte_10970-Map_obj57a
0001245C 01                         byte_10964:	dc.b 1
0001245D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012462 01                         byte_1096A:	dc.b 1
00012463 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012468 01                         byte_10970:	dc.b 1
00012469 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001246E                            		even
0001246E                            		even
0001246E                            
0001246E                            ; ===========================================================================
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            ; Object 58 - giant spiked balls (SYZ)
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            
0001246E                            Obj58:					; XREF: Obj_Index
0001246E 7000                       		moveq	#0,d0
00012470 1028 0024                  		move.b	$24(a0),d0
00012474 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00012478 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001247C                            ; ===========================================================================
0001247C 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001247E 0000                       		dc.w Obj58_Move-Obj58_Index
00012480                            ; ===========================================================================
00012480                            
00012480                            Obj58_Main:				; XREF: Obj58_Index
00012480 5428 0024                  		addq.b	#2,$24(a0)
00012484 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001248C 317C 0396 0002             		move.w	#$396,2(a0)
00012492 117C 0004 0001             		move.b	#4,1(a0)
00012498 117C 0004 0018             		move.b	#4,$18(a0)
0001249E 117C 0018 0019             		move.b	#$18,$19(a0)
000124A4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000124AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000124B0 117C 0086 0020             		move.b	#$86,$20(a0)
000124B6 1228 0028                  		move.b	$28(a0),d1	; get object type
000124BA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000124BE 4881                       		ext.w	d1
000124C0 E741                       		asl.w	#3,d1		; multiply by 8
000124C2 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000124C6 1028 0022                  		move.b	$22(a0),d0
000124CA E418                       		ror.b	#2,d0
000124CC 0200 00C0                  		andi.b	#$C0,d0
000124D0 1140 0026                  		move.b	d0,$26(a0)
000124D4 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000124DA                            
000124DA                            Obj58_Move:				; XREF: Obj58_Index
000124DA 7000                       		moveq	#0,d0
000124DC 1028 0028                  		move.b	$28(a0),d0	; get object type
000124E0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000124E4 D040                       		add.w	d0,d0
000124E6 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000124EA 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000124EE 3028 003A                  		move.w	$3A(a0),d0
000124F2 0240 FF80                  		andi.w	#$FF80,d0
000124F6 3238 F700                  		move.w	($FFFFF700).w,d1
000124FA 0441 0080                  		subi.w	#$80,d1
000124FE 0241 FF80                  		andi.w	#$FF80,d1
00012502 9041                       		sub.w	d1,d0
00012504 0C40 0280                  		cmpi.w	#$280,d0
00012508 6200 CC16                  		bhi.w	DeleteObject
0001250C 6000 CBD6                  		bra.w	DisplaySprite
00012510                            ; ===========================================================================
00012510 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00012512 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012514 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00012516 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00012518                            ; ===========================================================================
00012518                            
00012518                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00012518 4E75                       		rts	
0001251A                            ; ===========================================================================
0001251A                            
0001251A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001251A 323C 0060                  		move.w	#$60,d1
0001251E 7000                       		moveq	#0,d0
00012520 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012524 0828 0000 0022             		btst	#0,$22(a0)
0001252A 6700                       		beq.s	loc_10A38
0001252C 4440                       		neg.w	d0
0001252E D041                       		add.w	d1,d0
00012530                            
00012530                            loc_10A38:
00012530 3228 003A                  		move.w	$3A(a0),d1
00012534 9240                       		sub.w	d0,d1
00012536 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001253A 4E75                       		rts	
0001253C                            ; ===========================================================================
0001253C                            
0001253C                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001253C 323C 0060                  		move.w	#$60,d1
00012540 7000                       		moveq	#0,d0
00012542 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012546 0828 0000 0022             		btst	#0,$22(a0)
0001254C 6700                       		beq.s	loc_10A5C
0001254E 4440                       		neg.w	d0
00012550 0640 0080                  		addi.w	#$80,d0
00012554                            
00012554                            loc_10A5C:
00012554 3228 0038                  		move.w	$38(a0),d1
00012558 9240                       		sub.w	d0,d1
0001255A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001255E 4E75                       		rts	
00012560                            ; ===========================================================================
00012560                            
00012560                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012560 3028 003E                  		move.w	$3E(a0),d0
00012564 D168 0026                  		add.w	d0,$26(a0)
00012568 1028 0026                  		move.b	$26(a0),d0
0001256C 4EB9 0000 2B7A             		jsr	(CalcSine).l
00012572 3428 0038                  		move.w	$38(a0),d2
00012576 3628 003A                  		move.w	$3A(a0),d3
0001257A 7800                       		moveq	#0,d4
0001257C 1828 003C                  		move.b	$3C(a0),d4
00012580 2A04                       		move.l	d4,d5
00012582 C9C0                       		muls.w	d0,d4
00012584 E084                       		asr.l	#8,d4
00012586 CBC1                       		muls.w	d1,d5
00012588 E085                       		asr.l	#8,d5
0001258A D842                       		add.w	d2,d4
0001258C DA43                       		add.w	d3,d5
0001258E 3144 000C                  		move.w	d4,$C(a0)
00012592 3145 0008                  		move.w	d5,8(a0)
00012596 4E75                       		rts	
00012598                            ; ===========================================================================
00012598                            ; ---------------------------------------------------------------------------
00012598                            ; Sprite mappings - SBZ	spiked ball on a chain
00012598                            ; ---------------------------------------------------------------------------
00012598                            Map_obj15b:
00012598                            	include "_maps\obj15sbz.asm"
00012598                            ; ---------------------------------------------------------------------------
00012598                            ; Sprite mappings - spiked ball on a chain (SBZ)
00012598                            ; ---------------------------------------------------------------------------
00012598 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001259C 0000                       		dc.w byte_10AC6-Map_obj15b
0001259E 05                         byte_10AA6:	dc.b 5
0001259F E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000125A4 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000125A9 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000125AE F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000125B3 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000125B8 01                         byte_10AC0:	dc.b 1
000125B9 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000125BE 02                         byte_10AC6:	dc.b 2
000125BF F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000125C4 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000125CA 00                         		even
000125CA 00                         		even
000125CA                            
000125CA                            ; ===========================================================================
000125CA                            ; ---------------------------------------------------------------------------
000125CA                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000125CA                            ; ---------------------------------------------------------------------------
000125CA                            
000125CA                            Obj59:					; XREF: Obj_Index
000125CA 7000                       		moveq	#0,d0
000125CC 1028 0024                  		move.b	$24(a0),d0
000125D0 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000125D4 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000125D8 3028 0032                  		move.w	$32(a0),d0
000125DC 0240 FF80                  		andi.w	#$FF80,d0
000125E0 3238 F700                  		move.w	($FFFFF700).w,d1
000125E4 0441 0080                  		subi.w	#$80,d1
000125E8 0241 FF80                  		andi.w	#$FF80,d1
000125EC 9041                       		sub.w	d1,d0
000125EE 0C40 0280                  		cmpi.w	#$280,d0
000125F2 6200 CB2C                  		bhi.w	DeleteObject
000125F6 6000 CAEC                  		bra.w	DisplaySprite
000125FA                            ; ===========================================================================
000125FA 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000125FC 0000                       		dc.w Obj59_Platform-Obj59_Index
000125FE 0000                       		dc.w Obj59_Action-Obj59_Index
00012600 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00012602                            
00012602 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012604                            
00012604 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012606 2001                       		dc.b $20, 1
00012608 3401                       		dc.b $34, 1
0001260A 1003                       		dc.b $10, 3
0001260C 2003                       		dc.b $20, 3
0001260E 3403                       		dc.b $34, 3
00012610 1401                       		dc.b $14, 1
00012612 2401                       		dc.b $24, 1
00012614 2C01                       		dc.b $2C, 1
00012616 1403                       		dc.b $14, 3
00012618 2403                       		dc.b $24, 3
0001261A 2C03                       		dc.b $2C, 3
0001261C 2005                       		dc.b $20, 5
0001261E 2007                       		dc.b $20, 7
00012620 3009                       		dc.b $30, 9
00012622                            ; ===========================================================================
00012622                            
00012622                            Obj59_Main:				; XREF: Obj59_Index
00012622 5428 0024                  		addq.b	#2,$24(a0)
00012626 7000                       		moveq	#0,d0
00012628 1028 0028                  		move.b	$28(a0),d0
0001262C 6A00                       		bpl.s	Obj59_Main2
0001262E 5828 0024                  		addq.b	#4,$24(a0)
00012632 0240 007F                  		andi.w	#$7F,d0
00012636 C0FC 0006                  		mulu.w	#6,d0
0001263A 3140 003C                  		move.w	d0,$3C(a0)
0001263E 3140 003E                  		move.w	d0,$3E(a0)
00012642 588F                       		addq.l	#4,sp
00012644 4E75                       		rts	
00012646                            ; ===========================================================================
00012646                            
00012646                            Obj59_Main2:
00012646 E648                       		lsr.w	#3,d0
00012648 0240 001E                  		andi.w	#$1E,d0
0001264C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012650 115A 0019                  		move.b	(a2)+,$19(a0)
00012654 115A 001A                  		move.b	(a2)+,$1A(a0)
00012658 7000                       		moveq	#0,d0
0001265A 1028 0028                  		move.b	$28(a0),d0
0001265E D040                       		add.w	d0,d0
00012660 0240 001E                  		andi.w	#$1E,d0
00012664 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012668 101A                       		move.b	(a2)+,d0
0001266A E548                       		lsl.w	#2,d0
0001266C 3140 003C                  		move.w	d0,$3C(a0)
00012670 115A 0028                  		move.b	(a2)+,$28(a0)
00012674 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001267C 317C 4000 0002             		move.w	#$4000,2(a0)
00012682 117C 0004 0001             		move.b	#4,1(a0)
00012688 117C 0004 0018             		move.b	#4,$18(a0)
0001268E 3168 0008 0032             		move.w	8(a0),$32(a0)
00012694 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001269A                            
0001269A                            Obj59_Platform:				; XREF: Obj59_Index
0001269A 7200                       		moveq	#0,d1
0001269C 1228 0019                  		move.b	$19(a0),d1
000126A0 4EB9 0000 8E42             		jsr	(PlatformObject).l
000126A6 6000 0000                  		bra.w	Obj59_Types
000126AA                            ; ===========================================================================
000126AA                            
000126AA                            Obj59_Action:				; XREF: Obj59_Index
000126AA 7200                       		moveq	#0,d1
000126AC 1228 0019                  		move.b	$19(a0),d1
000126B0 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
000126B6 3F28 0008                  		move.w	8(a0),-(sp)
000126BA 6100 0000                  		bsr.w	Obj59_Types
000126BE 341F                       		move.w	(sp)+,d2
000126C0 4A10                       		tst.b	0(a0)
000126C2 6700                       		beq.s	locret_10BD4
000126C4 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
000126CA                            ; ===========================================================================
000126CA                            
000126CA                            locret_10BD4:
000126CA 4E75                       		rts	
000126CC                            ; ===========================================================================
000126CC                            
000126CC                            Obj59_Types:
000126CC 7000                       		moveq	#0,d0
000126CE 1028 0028                  		move.b	$28(a0),d0
000126D2 0240 000F                  		andi.w	#$F,d0
000126D6 D040                       		add.w	d0,d0
000126D8 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000126DC 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000126E0                            ; ===========================================================================
000126E0 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126E4 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126E8 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126EC 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126F0 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000126F4                            ; ===========================================================================
000126F4                            
000126F4                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000126F4 4E75                       		rts	
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000126F6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000126FC 6600                       		bne.s	locret_10C0C
000126FE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012702                            
00012702                            locret_10C0C:
00012702 4E75                       		rts	
00012704                            ; ===========================================================================
00012704                            
00012704                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012704 6100 0000                  		bsr.w	Obj59_Move
00012708 3028 0034                  		move.w	$34(a0),d0
0001270C 4440                       		neg.w	d0
0001270E D068 0030                  		add.w	$30(a0),d0
00012712 3140 000C                  		move.w	d0,$C(a0)
00012716 4E75                       		rts	
00012718                            ; ===========================================================================
00012718                            
00012718                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00012718 6100 0000                  		bsr.w	Obj59_Move
0001271C 3028 0034                  		move.w	$34(a0),d0
00012720 D068 0030                  		add.w	$30(a0),d0
00012724 3140 000C                  		move.w	d0,$C(a0)
00012728 4E75                       		rts	
0001272A                            ; ===========================================================================
0001272A                            
0001272A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001272A 6100 0000                  		bsr.w	Obj59_Move
0001272E 3028 0034                  		move.w	$34(a0),d0
00012732 E240                       		asr.w	#1,d0
00012734 4440                       		neg.w	d0
00012736 D068 0030                  		add.w	$30(a0),d0
0001273A 3140 000C                  		move.w	d0,$C(a0)
0001273E 3028 0034                  		move.w	$34(a0),d0
00012742 D068 0032                  		add.w	$32(a0),d0
00012746 3140 0008                  		move.w	d0,8(a0)
0001274A 4E75                       		rts	
0001274C                            ; ===========================================================================
0001274C                            
0001274C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001274C 6100 0000                  		bsr.w	Obj59_Move
00012750 3028 0034                  		move.w	$34(a0),d0
00012754 E240                       		asr.w	#1,d0
00012756 D068 0030                  		add.w	$30(a0),d0
0001275A 3140 000C                  		move.w	d0,$C(a0)
0001275E 3028 0034                  		move.w	$34(a0),d0
00012762 4440                       		neg.w	d0
00012764 D068 0032                  		add.w	$32(a0),d0
00012768 3140 0008                  		move.w	d0,8(a0)
0001276C 4E75                       		rts	
0001276E                            ; ===========================================================================
0001276E                            
0001276E                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001276E 6100 0000                  		bsr.w	Obj59_Move
00012772 3028 0034                  		move.w	$34(a0),d0
00012776 4440                       		neg.w	d0
00012778 D068 0030                  		add.w	$30(a0),d0
0001277C 3140 000C                  		move.w	d0,$C(a0)
00012780 4A28 0028                  		tst.b	$28(a0)
00012784 6700 0000                  		beq.w	loc_10C94
00012788 4E75                       		rts	
0001278A                            ; ===========================================================================
0001278A                            
0001278A                            loc_10C94:
0001278A 0828 0003 0022             		btst	#3,$22(a0)
00012790 6700                       		beq.s	Obj59_Delete
00012792 08E9 0001 0022             		bset	#1,$22(a1)
00012798 08A9 0003 0022             		bclr	#3,$22(a1)
0001279E 137C 0002 0024             		move.b	#2,$24(a1)
000127A4                            
000127A4                            Obj59_Delete:
000127A4 6000 C97A                  		bra.w	DeleteObject
000127A8                            
000127A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000127A8                            
000127A8                            
000127A8                            Obj59_Move:				; XREF: Obj59_Type02; et al
000127A8 3028 0038                  		move.w	$38(a0),d0
000127AC 4A28 003A                  		tst.b	$3A(a0)
000127B0 6600                       		bne.s	loc_10CC8
000127B2 0C40 0800                  		cmpi.w	#$800,d0
000127B6 6400                       		bcc.s	loc_10CD0
000127B8 0640 0010                  		addi.w	#$10,d0
000127BC 6000                       		bra.s	loc_10CD0
000127BE                            ; ===========================================================================
000127BE                            
000127BE                            loc_10CC8:
000127BE 4A40                       		tst.w	d0
000127C0 6700                       		beq.s	loc_10CD0
000127C2 0440 0010                  		subi.w	#$10,d0
000127C6                            
000127C6                            loc_10CD0:
000127C6 3140 0038                  		move.w	d0,$38(a0)
000127CA 48C0                       		ext.l	d0
000127CC E180                       		asl.l	#8,d0
000127CE D0A8 0034                  		add.l	$34(a0),d0
000127D2 2140 0034                  		move.l	d0,$34(a0)
000127D6 4840                       		swap	d0
000127D8 3428 003C                  		move.w	$3C(a0),d2
000127DC B042                       		cmp.w	d2,d0
000127DE 6300                       		bls.s	loc_10CF0
000127E0 117C 0001 003A             		move.b	#1,$3A(a0)
000127E6                            
000127E6                            loc_10CF0:
000127E6 D442                       		add.w	d2,d2
000127E8 B042                       		cmp.w	d2,d0
000127EA 6600                       		bne.s	locret_10CFA
000127EC 4228 0028                  		clr.b	$28(a0)
000127F0                            
000127F0                            locret_10CFA:
000127F0 4E75                       		rts	
000127F2                            ; End of function Obj59_Move
000127F2                            
000127F2                            ; ===========================================================================
000127F2                            
000127F2                            Obj59_MakeMulti:			; XREF: Obj59_Index
000127F2 5368 003C                  		subq.w	#1,$3C(a0)
000127F6 6600                       		bne.s	Obj59_ChkDel
000127F8 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000127FE 6100 CD78                  		bsr.w	SingleObjLoad
00012802 6600                       		bne.s	Obj59_ChkDel
00012804 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00012808 3368 0008 0008             		move.w	8(a0),8(a1)
0001280E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012814 137C 000E 0028             		move.b	#$E,$28(a1)
0001281A                            
0001281A                            Obj59_ChkDel:
0001281A 588F                       		addq.l	#4,sp
0001281C 3028 0008                  		move.w	8(a0),d0
00012820 0240 FF80                  		andi.w	#$FF80,d0
00012824 3238 F700                  		move.w	($FFFFF700).w,d1
00012828 0441 0080                  		subi.w	#$80,d1
0001282C 0241 FF80                  		andi.w	#$FF80,d1
00012830 9041                       		sub.w	d1,d0
00012832 0C40 0280                  		cmpi.w	#$280,d0
00012836 6200 C8E8                  		bhi.w	DeleteObject
0001283A 4E75                       		rts	
0001283C                            ; ===========================================================================
0001283C                            ; ---------------------------------------------------------------------------
0001283C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001283C                            ; ---------------------------------------------------------------------------
0001283C                            Map_obj59:
0001283C                            	include "_maps\obj59.asm"
0001283C                            ; ---------------------------------------------------------------------------
0001283C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001283C                            ; ---------------------------------------------------------------------------
0001283C 0000                       		dc.w byte_10D4A-Map_obj59
0001283E 03                         byte_10D4A:	dc.b 3
0001283F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012844 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012849 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001284E                            		even
0001284E                            		even
0001284E                            
0001284E                            ; ===========================================================================
0001284E                            ; ---------------------------------------------------------------------------
0001284E                            ; Object 5A - platforms	moving in circles (SLZ)
0001284E                            ; ---------------------------------------------------------------------------
0001284E                            
0001284E                            Obj5A:					; XREF: Obj_Index
0001284E 7000                       		moveq	#0,d0
00012850 1028 0024                  		move.b	$24(a0),d0
00012854 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012858 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001285C 3028 0032                  		move.w	$32(a0),d0
00012860 0240 FF80                  		andi.w	#$FF80,d0
00012864 3238 F700                  		move.w	($FFFFF700).w,d1
00012868 0441 0080                  		subi.w	#$80,d1
0001286C 0241 FF80                  		andi.w	#$FF80,d1
00012870 9041                       		sub.w	d1,d0
00012872 0C40 0280                  		cmpi.w	#$280,d0
00012876 6200 C8A8                  		bhi.w	DeleteObject
0001287A 6000 C868                  		bra.w	DisplaySprite
0001287E                            ; ===========================================================================
0001287E 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012880 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012882 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012884                            ; ===========================================================================
00012884                            
00012884                            Obj5A_Main:				; XREF: Obj5A_Index
00012884 5428 0024                  		addq.b	#2,$24(a0)
00012888 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012890 317C 4000 0002             		move.w	#$4000,2(a0)
00012896 117C 0004 0001             		move.b	#4,1(a0)
0001289C 117C 0004 0018             		move.b	#4,$18(a0)
000128A2 117C 0018 0019             		move.b	#$18,$19(a0)
000128A8 3168 0008 0032             		move.w	8(a0),$32(a0)
000128AE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000128B4                            
000128B4                            Obj5A_Platform:				; XREF: Obj5A_Index
000128B4 7200                       		moveq	#0,d1
000128B6 1228 0019                  		move.b	$19(a0),d1
000128BA 4EB9 0000 8E42             		jsr	(PlatformObject).l
000128C0 6000 0000                  		bra.w	Obj5A_Types
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            Obj5A_Action:				; XREF: Obj5A_Index
000128C4 7200                       		moveq	#0,d1
000128C6 1228 0019                  		move.b	$19(a0),d1
000128CA 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
000128D0 3F28 0008                  		move.w	8(a0),-(sp)
000128D4 6100 0000                  		bsr.w	Obj5A_Types
000128D8 341F                       		move.w	(sp)+,d2
000128DA 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            Obj5A_Types:
000128E0 7000                       		moveq	#0,d0
000128E2 1028 0028                  		move.b	$28(a0),d0
000128E6 0240 000C                  		andi.w	#$C,d0
000128EA E248                       		lsr.w	#1,d0
000128EC 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000128F0 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000128F4                            ; ===========================================================================
000128F4 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000128F6 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000128F8                            ; ===========================================================================
000128F8                            
000128F8                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000128F8 1238 FE80                  		move.b	($FFFFFE80).w,d1
000128FC 0401 0050                  		subi.b	#$50,d1
00012900 4881                       		ext.w	d1
00012902 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012906 0402 0050                  		subi.b	#$50,d2
0001290A 4882                       		ext.w	d2
0001290C 0828 0000 0028             		btst	#0,$28(a0)
00012912 6700                       		beq.s	loc_10E24
00012914 4441                       		neg.w	d1
00012916 4442                       		neg.w	d2
00012918                            
00012918                            loc_10E24:
00012918 0828 0001 0028             		btst	#1,$28(a0)
0001291E 6700                       		beq.s	loc_10E30
00012920 4441                       		neg.w	d1
00012922 C342                       		exg	d1,d2
00012924                            
00012924                            loc_10E30:
00012924 D268 0032                  		add.w	$32(a0),d1
00012928 3141 0008                  		move.w	d1,8(a0)
0001292C D468 0030                  		add.w	$30(a0),d2
00012930 3142 000C                  		move.w	d2,$C(a0)
00012934 4E75                       		rts	
00012936                            ; ===========================================================================
00012936                            
00012936                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012936 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001293A 0401 0050                  		subi.b	#$50,d1
0001293E 4881                       		ext.w	d1
00012940 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012944 0402 0050                  		subi.b	#$50,d2
00012948 4882                       		ext.w	d2
0001294A 0828 0000 0028             		btst	#0,$28(a0)
00012950 6700                       		beq.s	loc_10E62
00012952 4441                       		neg.w	d1
00012954 4442                       		neg.w	d2
00012956                            
00012956                            loc_10E62:
00012956 0828 0001 0028             		btst	#1,$28(a0)
0001295C 6700                       		beq.s	loc_10E6E
0001295E 4441                       		neg.w	d1
00012960 C342                       		exg	d1,d2
00012962                            
00012962                            loc_10E6E:
00012962 4441                       		neg.w	d1
00012964 D268 0032                  		add.w	$32(a0),d1
00012968 3141 0008                  		move.w	d1,8(a0)
0001296C D468 0030                  		add.w	$30(a0),d2
00012970 3142 000C                  		move.w	d2,$C(a0)
00012974 4E75                       		rts	
00012976                            ; ===========================================================================
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012976                            ; ---------------------------------------------------------------------------
00012976                            Map_obj5A:
00012976                            	include "_maps\obj5A.asm"
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012976                            ; ---------------------------------------------------------------------------
00012976 0000                       		dc.w byte_10E84-Map_obj5A
00012978 02                         byte_10E84:	dc.b 2
00012979 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001297E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012984 00                         		even
00012984 00                         		even
00012984                            
00012984                            ; ===========================================================================
00012984                            ; ---------------------------------------------------------------------------
00012984                            ; Object 5B - blocks that form a staircase (SLZ)
00012984                            ; ---------------------------------------------------------------------------
00012984                            
00012984                            Obj5B:					; XREF: Obj_Index
00012984 7000                       		moveq	#0,d0
00012986 1028 0024                  		move.b	$24(a0),d0
0001298A 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001298E 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012992 3028 0030                  		move.w	$30(a0),d0
00012996 0240 FF80                  		andi.w	#$FF80,d0
0001299A 3238 F700                  		move.w	($FFFFF700).w,d1
0001299E 0441 0080                  		subi.w	#$80,d1
000129A2 0241 FF80                  		andi.w	#$FF80,d1
000129A6 9041                       		sub.w	d1,d0
000129A8 0C40 0280                  		cmpi.w	#$280,d0
000129AC 6200 C772                  		bhi.w	DeleteObject
000129B0 6000 C732                  		bra.w	DisplaySprite
000129B4                            ; ===========================================================================
000129B4 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000129B6 0000                       		dc.w Obj5B_Move-Obj5B_Index
000129B8 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            Obj5B_Main:				; XREF: Obj5B_Index
000129BA 5428 0024                  		addq.b	#2,$24(a0)
000129BE 7638                       		moveq	#$38,d3
000129C0 7801                       		moveq	#1,d4
000129C2 0828 0000 0022             		btst	#0,$22(a0)
000129C8 6700                       		beq.s	loc_10EDA
000129CA 763B                       		moveq	#$3B,d3
000129CC 78FF                       		moveq	#-1,d4
000129CE                            
000129CE                            loc_10EDA:
000129CE 3428 0008                  		move.w	8(a0),d2
000129D2 2248                       		movea.l	a0,a1
000129D4 7203                       		moveq	#3,d1
000129D6 6000                       		bra.s	Obj5B_MakeBlocks
000129D8                            ; ===========================================================================
000129D8                            
000129D8                            Obj5B_Loop:
000129D8 6100 CBB4                  		bsr.w	SingleObjLoad2
000129DC 6600 0000                  		bne.w	Obj5B_Move
000129E0 137C 0004 0024             		move.b	#4,$24(a1)
000129E6                            
000129E6                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000129E6 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000129EA 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000129F2 337C 4000 0002             		move.w	#$4000,2(a1)
000129F8 137C 0004 0001             		move.b	#4,1(a1)
000129FE 137C 0003 0018             		move.b	#3,$18(a1)
00012A04 137C 0010 0019             		move.b	#$10,$19(a1)
00012A0A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012A10 3342 0008                  		move.w	d2,8(a1)
00012A14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A1A 3368 0008 0030             		move.w	8(a0),$30(a1)
00012A20 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012A26 0642 0020                  		addi.w	#$20,d2
00012A2A 1343 0037                  		move.b	d3,$37(a1)
00012A2E 2348 003C                  		move.l	a0,$3C(a1)
00012A32 D604                       		add.b	d4,d3
00012A34 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012A38                            
00012A38                            Obj5B_Move:				; XREF: Obj5B_Index
00012A38 7000                       		moveq	#0,d0
00012A3A 1028 0028                  		move.b	$28(a0),d0
00012A3E 0240 0007                  		andi.w	#7,d0
00012A42 D040                       		add.w	d0,d0
00012A44 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012A48 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012A4C                            
00012A4C                            Obj5B_Solid:				; XREF: Obj5B_Index
00012A4C 2468 003C                  		movea.l	$3C(a0),a2
00012A50 7000                       		moveq	#0,d0
00012A52 1028 0037                  		move.b	$37(a0),d0
00012A56 1032 0000                  		move.b	(a2,d0.w),d0
00012A5A D068 0032                  		add.w	$32(a0),d0
00012A5E 3140 000C                  		move.w	d0,$C(a0)
00012A62 7200                       		moveq	#0,d1
00012A64 1228 0019                  		move.b	$19(a0),d1
00012A68 0641 000B                  		addi.w	#$B,d1
00012A6C 343C 0010                  		move.w	#$10,d2
00012A70 363C 0011                  		move.w	#$11,d3
00012A74 3828 0008                  		move.w	8(a0),d4
00012A78 6100 EA48                  		bsr.w	SolidObject
00012A7C 4A04                       		tst.b	d4
00012A7E 6A00                       		bpl.s	loc_10F92
00012A80 1544 0036                  		move.b	d4,$36(a2)
00012A84                            
00012A84                            loc_10F92:
00012A84 0828 0003 0022             		btst	#3,$22(a0)
00012A8A 6700                       		beq.s	locret_10FA0
00012A8C 157C 0001 0036             		move.b	#1,$36(a2)
00012A92                            
00012A92                            locret_10FA0:
00012A92 4E75                       		rts	
00012A94                            ; ===========================================================================
00012A94 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012A96 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012A98 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012A9A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012A9C                            ; ===========================================================================
00012A9C                            
00012A9C                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012A9C 4A68 0034                  		tst.w	$34(a0)
00012AA0 6600                       		bne.s	loc_10FC0
00012AA2 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012AA8 6600                       		bne.s	locret_10FBE
00012AAA 317C 001E 0034             		move.w	#$1E,$34(a0)
00012AB0                            
00012AB0                            locret_10FBE:
00012AB0 4E75                       		rts	
00012AB2                            ; ===========================================================================
00012AB2                            
00012AB2                            loc_10FC0:
00012AB2 5368 0034                  		subq.w	#1,$34(a0)
00012AB6 66F8                       		bne.s	locret_10FBE
00012AB8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012ABC 4E75                       		rts	
00012ABE                            ; ===========================================================================
00012ABE                            
00012ABE                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012ABE 4A68 0034                  		tst.w	$34(a0)
00012AC2 6600                       		bne.s	loc_10FE0
00012AC4 4A28 0036                  		tst.b	$36(a0)
00012AC8 6A00                       		bpl.s	locret_10FDE
00012ACA 317C 003C 0034             		move.w	#$3C,$34(a0)
00012AD0                            
00012AD0                            locret_10FDE:
00012AD0 4E75                       		rts	
00012AD2                            ; ===========================================================================
00012AD2                            
00012AD2                            loc_10FE0:
00012AD2 5368 0034                  		subq.w	#1,$34(a0)
00012AD6 6600                       		bne.s	loc_10FEC
00012AD8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            loc_10FEC:
00012ADE 43E8 0038                  		lea	$38(a0),a1
00012AE2 3028 0034                  		move.w	$34(a0),d0
00012AE6 E408                       		lsr.b	#2,d0
00012AE8 0200 0001                  		andi.b	#1,d0
00012AEC 12C0                       		move.b	d0,(a1)+
00012AEE 0A00 0001                  		eori.b	#1,d0
00012AF2 12C0                       		move.b	d0,(a1)+
00012AF4 0A00 0001                  		eori.b	#1,d0
00012AF8 12C0                       		move.b	d0,(a1)+
00012AFA 0A00 0001                  		eori.b	#1,d0
00012AFE 12C0                       		move.b	d0,(a1)+
00012B00 4E75                       		rts	
00012B02                            ; ===========================================================================
00012B02                            
00012B02                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012B02 43E8 0038                  		lea	$38(a0),a1
00012B06 0C11 0080                  		cmpi.b	#$80,(a1)
00012B0A 6700                       		beq.s	locret_11038
00012B0C 5211                       		addq.b	#1,(a1)
00012B0E 7200                       		moveq	#0,d1
00012B10 1219                       		move.b	(a1)+,d1
00012B12 4841                       		swap	d1
00012B14 E289                       		lsr.l	#1,d1
00012B16 2401                       		move.l	d1,d2
00012B18 E289                       		lsr.l	#1,d1
00012B1A 2601                       		move.l	d1,d3
00012B1C D682                       		add.l	d2,d3
00012B1E 4841                       		swap	d1
00012B20 4842                       		swap	d2
00012B22 4843                       		swap	d3
00012B24 12C3                       		move.b	d3,(a1)+
00012B26 12C2                       		move.b	d2,(a1)+
00012B28 12C1                       		move.b	d1,(a1)+
00012B2A                            
00012B2A                            locret_11038:
00012B2A 4E75                       		rts	
00012B2C 4E75                       		rts	
00012B2E                            ; ===========================================================================
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            Map_obj5B:
00012B2E                            	include "_maps\obj5B.asm"
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E 0000                       		dc.w byte_1103E-Map_obj5B
00012B30 01                         byte_1103E:	dc.b 1
00012B31 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012B36                            		even
00012B36                            		even
00012B36                            
00012B36                            ; ===========================================================================
00012B36                            ; ---------------------------------------------------------------------------
00012B36                            ; Object 5C - metal girders in foreground (SLZ)
00012B36                            ; ---------------------------------------------------------------------------
00012B36                            
00012B36                            Obj5C:					; XREF: Obj_Index
00012B36 7000                       		moveq	#0,d0
00012B38 1028 0024                  		move.b	$24(a0),d0
00012B3C 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012B40 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012B44                            ; ===========================================================================
00012B44 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012B46 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012B48                            ; ===========================================================================
00012B48                            
00012B48                            Obj5C_Main:				; XREF: Obj5C_Index
00012B48 5428 0024                  		addq.b	#2,$24(a0)
00012B4C 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012B54 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012B5A 117C 0010 0019             		move.b	#$10,$19(a0)
00012B60                            
00012B60                            Obj5C_Display:				; XREF: Obj5C_Index
00012B60 2238 F700                  		move.l	($FFFFF700).w,d1
00012B64 D281                       		add.l	d1,d1
00012B66 4841                       		swap	d1
00012B68 4441                       		neg.w	d1
00012B6A 3141 0008                  		move.w	d1,8(a0)
00012B6E 2238 F704                  		move.l	($FFFFF704).w,d1
00012B72 D281                       		add.l	d1,d1
00012B74 4841                       		swap	d1
00012B76 0241 003F                  		andi.w	#$3F,d1
00012B7A 4441                       		neg.w	d1
00012B7C 0641 0100                  		addi.w	#$100,d1
00012B80 3141 000A                  		move.w	d1,$A(a0)
00012B84 6000 C55E                  		bra.w	DisplaySprite
00012B88                            ; ===========================================================================
00012B88                            ; ---------------------------------------------------------------------------
00012B88                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012B88                            ; ---------------------------------------------------------------------------
00012B88                            Map_obj5C:
00012B88                            	include "_maps\obj5C.asm"
00012B88                            ; ---------------------------------------------------------------------------
00012B88                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012B88                            ; ---------------------------------------------------------------------------
00012B88 0000                       		dc.w byte_11098-Map_obj5C
00012B8A 09                         byte_11098:	dc.b 9
00012B8B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012B90 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012B95 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012B9A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012B9F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012BA4 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012BA9 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012BAE 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012BB3 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012BB8                            		even
00012BB8                            		even
00012BB8                            
00012BB8                            ; ===========================================================================
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            ; Object 1B - water surface (LZ)
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            
00012BB8                            Obj1B:					; XREF: Obj_Index
00012BB8 7000                       		moveq	#0,d0
00012BBA 1028 0024                  		move.b	$24(a0),d0
00012BBE 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012BC2 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012BC6                            ; ===========================================================================
00012BC6 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012BC8 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012BCA                            ; ===========================================================================
00012BCA                            
00012BCA                            Obj1B_Main:				; XREF: Obj1B_Index
00012BCA 5428 0024                  		addq.b	#2,$24(a0)
00012BCE 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012BD6 317C C300 0002             		move.w	#$C300,2(a0)
00012BDC 117C 0004 0001             		move.b	#4,1(a0)
00012BE2 117C 0080 0019             		move.b	#$80,$19(a0)
00012BE8 3168 0008 0030             		move.w	8(a0),$30(a0)
00012BEE                            
00012BEE                            Obj1B_Action:				; XREF: Obj1B_Index
00012BEE 3238 F700                  		move.w	($FFFFF700).w,d1
00012BF2 0241 FFE0                  		andi.w	#$FFE0,d1
00012BF6 D268 0030                  		add.w	$30(a0),d1
00012BFA 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012C00 6700                       		beq.s	loc_11114
00012C02 0641 0020                  		addi.w	#$20,d1
00012C06                            
00012C06                            loc_11114:
00012C06 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012C0A 3238 F646                  		move.w	($FFFFF646).w,d1
00012C0E 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012C12 4A28 0032                  		tst.b	$32(a0)
00012C16 6600                       		bne.s	Obj1B_Animate
00012C18 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012C1E 6700                       		beq.s	loc_1114A	; if not, branch
00012C20 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012C24 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012C2A 6000                       		bra.s	Obj1B_Display
00012C2C                            ; ===========================================================================
00012C2C                            
00012C2C                            Obj1B_Animate:				; XREF: loc_11114
00012C2C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012C30 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012C32 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012C38 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012C3C                            
00012C3C                            loc_1114A:				; XREF: loc_11114
00012C3C 5328 001E                  		subq.b	#1,$1E(a0)
00012C40 6A00                       		bpl.s	Obj1B_Display
00012C42 117C 0007 001E             		move.b	#7,$1E(a0)
00012C48 5228 001A                  		addq.b	#1,$1A(a0)
00012C4C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012C52 6500                       		bcs.s	Obj1B_Display
00012C54 117C 0000 001A             		move.b	#0,$1A(a0)
00012C5A                            
00012C5A                            Obj1B_Display:
00012C5A 6000 C488                  		bra.w	DisplaySprite
00012C5E                            ; ===========================================================================
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            ; Sprite mappings - water surface (LZ)
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            Map_obj1B:
00012C5E                            	include "_maps\obj1B.asm"
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            ; Sprite mappings - water surface (LZ)
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012C62 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012C66 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012C6A 03                         byte_11178:	dc.b 3
00012C6B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012C70 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012C75 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012C7A 03                         byte_11188:	dc.b 3
00012C7B FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012C80 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012C85 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012C8A 03                         byte_11198:	dc.b 3
00012C8B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012C90 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012C95 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012C9A 06                         byte_111A8:	dc.b 6
00012C9B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012CA0 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012CA5 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012CAA FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012CAF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012CB4 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012CB9 06                         byte_111C7:	dc.b 6
00012CBA FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012CBF FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012CC4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012CC9 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012CCE FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012CD3 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012CD8 06                         byte_111E6:	dc.b 6
00012CD9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012CDE FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012CE3 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012CE8 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012CED FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012CF2 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012CF8 00                         		even
00012CF8 00                         		even
00012CF8                            
00012CF8                            ; ===========================================================================
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            ; Object 0B - pole that	breaks (LZ)
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            
00012CF8                            Obj0B:					; XREF: Obj_Index
00012CF8 7000                       		moveq	#0,d0
00012CFA 1028 0024                  		move.b	$24(a0),d0
00012CFE 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012D02 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012D06                            ; ===========================================================================
00012D06 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012D08 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012D0A 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012D0C                            ; ===========================================================================
00012D0C                            
00012D0C                            Obj0B_Main:				; XREF: Obj0B_Index
00012D0C 5428 0024                  		addq.b	#2,$24(a0)
00012D10 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012D18 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012D1E 117C 0004 0001             		move.b	#4,1(a0)
00012D24 117C 0008 0019             		move.b	#8,$19(a0)
00012D2A 117C 0004 0018             		move.b	#4,$18(a0)
00012D30 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012D36 7000                       		moveq	#0,d0
00012D38 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D3C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012D40 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012D44                            
00012D44                            Obj0B_Action:				; XREF: Obj0B_Index
00012D44 4A28 0032                  		tst.b	$32(a0)
00012D48 6700                       		beq.s	Obj0B_Grab
00012D4A 4A68 0030                  		tst.w	$30(a0)
00012D4E 6700                       		beq.s	Obj0B_MoveUp
00012D50 5368 0030                  		subq.w	#1,$30(a0)
00012D54 6600                       		bne.s	Obj0B_MoveUp
00012D56 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012D5C 6000                       		bra.s	Obj0B_Release
00012D5E                            ; ===========================================================================
00012D5E                            
00012D5E                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012D5E 43F8 D000                  		lea	($FFFFD000).w,a1
00012D62 3028 000C                  		move.w	$C(a0),d0
00012D66 0440 0018                  		subi.w	#$18,d0
00012D6A 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012D70 6700                       		beq.s	Obj0B_MoveDown
00012D72 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012D76 B069 000C                  		cmp.w	$C(a1),d0
00012D7A 6500                       		bcs.s	Obj0B_MoveDown
00012D7C 3340 000C                  		move.w	d0,$C(a1)
00012D80                            
00012D80                            Obj0B_MoveDown:
00012D80 0640 0024                  		addi.w	#$24,d0
00012D84 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012D8A 6700                       		beq.s	Obj0B_LetGo
00012D8C 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012D90 B069 000C                  		cmp.w	$C(a1),d0
00012D94 6400                       		bcc.s	Obj0B_LetGo
00012D96 3340 000C                  		move.w	d0,$C(a1)
00012D9A                            
00012D9A                            Obj0B_LetGo:
00012D9A 1038 F603                  		move.b	($FFFFF603).w,d0
00012D9E 0240 0070                  		andi.w	#$70,d0
00012DA2 6700                       		beq.s	Obj0B_Display
00012DA4                            
00012DA4                            Obj0B_Release:				; XREF: Obj0B_Action
00012DA4 4228 0020                  		clr.b	$20(a0)
00012DA8 5428 0024                  		addq.b	#2,$24(a0)
00012DAC 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012DB0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012DB4 4228 0032                  		clr.b	$32(a0)
00012DB8 6000                       		bra.s	Obj0B_Display
00012DBA                            ; ===========================================================================
00012DBA                            
00012DBA                            Obj0B_Grab:				; XREF: Obj0B_Action
00012DBA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012DBE 6700                       		beq.s	Obj0B_Display	; if not, branch
00012DC0 43F8 D000                  		lea	($FFFFD000).w,a1
00012DC4 3028 0008                  		move.w	8(a0),d0
00012DC8 0640 0014                  		addi.w	#$14,d0
00012DCC B069 0008                  		cmp.w	8(a1),d0
00012DD0 6400                       		bcc.s	Obj0B_Display
00012DD2 4228 0021                  		clr.b	$21(a0)
00012DD6 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012DDC 6400                       		bcc.s	Obj0B_Display
00012DDE 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012DE2 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012DE6 3028 0008                  		move.w	8(a0),d0
00012DEA 0640 0014                  		addi.w	#$14,d0
00012DEE 3340 0008                  		move.w	d0,8(a1)
00012DF2 08A9 0000 0022             		bclr	#0,$22(a1)
00012DF8 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012DFE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012E04 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012E0A 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012E10                            
00012E10                            Obj0B_Display:				; XREF: Obj0B_Index
00012E10 6000 E388                  		bra.w	MarkObjGone
00012E14                            ; ===========================================================================
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            ; Sprite mappings - pole that breaks (LZ)
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            Map_obj0B:
00012E14                            	include "_maps\obj0B.asm"
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            ; Sprite mappings - pole that breaks (LZ)
00012E14                            ; ---------------------------------------------------------------------------
00012E14 0000                       		dc.w byte_11326-Map_obj0B
00012E16 0000                       		dc.w byte_11331-Map_obj0B
00012E18 02                         byte_11326:	dc.b 2			; normal pole
00012E19 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012E1E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012E23 04                         byte_11331:	dc.b 4			; broken pole
00012E24 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012E29 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012E2E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012E33 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012E38                            		even
00012E38                            		even
00012E38                            
00012E38                            ; ===========================================================================
00012E38                            ; ---------------------------------------------------------------------------
00012E38                            ; Object 0C - flapping door (LZ)
00012E38                            ; ---------------------------------------------------------------------------
00012E38                            
00012E38                            Obj0C:					; XREF: Obj_Index
00012E38 7000                       		moveq	#0,d0
00012E3A 1028 0024                  		move.b	$24(a0),d0
00012E3E 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012E42 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012E46                            ; ===========================================================================
00012E46 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012E48 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012E4A                            ; ===========================================================================
00012E4A                            
00012E4A                            Obj0C_Main:				; XREF: Obj0C_Index
00012E4A 5428 0024                  		addq.b	#2,$24(a0)
00012E4E 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012E56 317C 4328 0002             		move.w	#$4328,2(a0)
00012E5C 0028 0004 0001             		ori.b	#4,1(a0)
00012E62 117C 0028 0019             		move.b	#$28,$19(a0)
00012E68 7000                       		moveq	#0,d0
00012E6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E6E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012E72 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012E76                            
00012E76                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012E76 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E7A 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012E7C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012E82 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012E88 4A28 0001                  		tst.b	1(a0)
00012E8C 6A00                       		bpl.s	Obj0C_Solid
00012E8E 303C 00BB                  		move.w	#$BB,d0
00012E92 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
00012E98                            
00012E98                            Obj0C_Solid:
00012E98 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012E9E 6100 9298                  		bsr.w	AnimateSprite
00012EA2 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012EA6 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012EAA 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012EAC 3038 D008                  		move.w	($FFFFD008).w,d0
00012EB0 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012EB4 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012EB6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012EBC 323C 0013                  		move.w	#$13,d1
00012EC0 343C 0020                  		move.w	#$20,d2
00012EC4 3602                       		move.w	d2,d3
00012EC6 5243                       		addq.w	#1,d3
00012EC8 3828 0008                  		move.w	8(a0),d4
00012ECC 6100 E5F4                  		bsr.w	SolidObject	; make the door	solid
00012ED0                            
00012ED0                            Obj0C_Display:
00012ED0 6000 E2C8                  		bra.w	MarkObjGone
00012ED4                            ; ===========================================================================
00012ED4                            Ani_obj0C:
00012ED4                            	include "_anim\obj0C.asm"
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            ; Animation script - flapping door (LZ)
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4 0000                       		dc.w byte_113E6-Ani_obj0C
00012ED6 0000                       		dc.w byte_113EC-Ani_obj0C
00012ED8 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012EDE 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012EE4                            		even
00012EE4                            		even
00012EE4                            
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4                            ; Sprite mappings - flapping door (LZ)
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4                            Map_obj0C:
00012EE4                            	include "_maps\obj0C.asm"
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4                            ; Sprite mappings - flapping door (LZ)
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4 0000                       		dc.w byte_113F8-Map_obj0C
00012EE6 0000                       		dc.w byte_11403-Map_obj0C
00012EE8 0000                       		dc.w byte_1140E-Map_obj0C
00012EEA 02                         byte_113F8:	dc.b 2
00012EEB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012EF0 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012EF5 02                         byte_11403:	dc.b 2
00012EF6 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012EFB 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012F00 02                         byte_1140E:	dc.b 2
00012F01 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012F06 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012F0C 00                         		even
00012F0C 00                         		even
00012F0C                            
00012F0C                            ; ===========================================================================
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            ; Object 71 - invisible	solid blocks
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            
00012F0C                            Obj71:					; XREF: Obj_Index
00012F0C 7000                       		moveq	#0,d0
00012F0E 1028 0024                  		move.b	$24(a0),d0
00012F12 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012F16 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012F1A                            ; ===========================================================================
00012F1A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012F1C 0000                       		dc.w Obj71_Solid-Obj71_Index
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            Obj71_Main:				; XREF: Obj71_Index
00012F1E 5428 0024                  		addq.b	#2,$24(a0)
00012F22 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012F2A 317C 8680 0002             		move.w	#$8680,2(a0)
00012F30 0028 0004 0001             		ori.b	#4,1(a0)
00012F36 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F3A 1200                       		move.b	d0,d1
00012F3C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012F40 0640 0010                  		addi.w	#$10,d0
00012F44 E248                       		lsr.w	#1,d0
00012F46 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012F4A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012F4E 5241                       		addq.w	#1,d1
00012F50 E749                       		lsl.w	#3,d1
00012F52 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012F56                            
00012F56                            Obj71_Solid:				; XREF: Obj71_Index
00012F56 6100 C406                  		bsr.w	ChkObjOnScreen
00012F5A 6600                       		bne.s	Obj71_ChkDel
00012F5C 7200                       		moveq	#0,d1
00012F5E 1228 0019                  		move.b	$19(a0),d1
00012F62 0641 000B                  		addi.w	#$B,d1
00012F66 7400                       		moveq	#0,d2
00012F68 1428 0016                  		move.b	$16(a0),d2
00012F6C 3602                       		move.w	d2,d3
00012F6E 5243                       		addq.w	#1,d3
00012F70 3828 0008                  		move.w	8(a0),d4
00012F74 6100 E592                  		bsr.w	SolidObject71
00012F78                            
00012F78                            Obj71_ChkDel:
00012F78 3028 0008                  		move.w	8(a0),d0
00012F7C 0240 FF80                  		andi.w	#$FF80,d0
00012F80 3238 F700                  		move.w	($FFFFF700).w,d1
00012F84 0441 0080                  		subi.w	#$80,d1
00012F88 0241 FF80                  		andi.w	#$FF80,d1
00012F8C 9041                       		sub.w	d1,d0
00012F8E 0C40 0280                  		cmpi.w	#$280,d0
00012F92 6200                       		bhi.s	Obj71_Delete
00012F94 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012F98 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012F9A 4EFA C148                  		jmp	DisplaySprite	; if yes, display the object
00012F9E                            ; ===========================================================================
00012F9E                            
00012F9E                            Obj71_NoDisplay:
00012F9E 4E75                       		rts	
00012FA0                            ; ===========================================================================
00012FA0                            
00012FA0                            Obj71_Delete:
00012FA0 4EFA C17E                  		jmp	DeleteObject
00012FA4                            ; ===========================================================================
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4                            ; Sprite mappings - invisible solid blocks
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4                            Map_obj71:
00012FA4                            	include "_maps\obj71.asm"
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4                            ; Sprite mappings - invisible solid blocks
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4 0000                       		dc.w byte_114BC-Map_obj71
00012FA6 0000                       		dc.w byte_114D1-Map_obj71
00012FA8 0000                       		dc.w byte_114E6-Map_obj71
00012FAA 04                         byte_114BC:	dc.b 4
00012FAB F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012FB0 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012FB5 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012FBA 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012FBF 04                         byte_114D1:	dc.b 4
00012FC0 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012FC5 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012FCA 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012FCF 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012FD4 04                         byte_114E6:	dc.b 4
00012FD5 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012FDA E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012FDF 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012FE4 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012FEA 00                         		even
00012FEA 00                         		even
00012FEA                            
00012FEA                            ; ===========================================================================
00012FEA                            ; ---------------------------------------------------------------------------
00012FEA                            ; Object 5D - fans (SLZ)
00012FEA                            ; ---------------------------------------------------------------------------
00012FEA                            
00012FEA                            Obj5D:					; XREF: Obj_Index
00012FEA 7000                       		moveq	#0,d0
00012FEC 1028 0024                  		move.b	$24(a0),d0
00012FF0 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012FF4 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012FF8                            ; ===========================================================================
00012FF8 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012FFA 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012FFC                            ; ===========================================================================
00012FFC                            
00012FFC                            Obj5D_Main:				; XREF: Obj5D_Index
00012FFC 5428 0024                  		addq.b	#2,$24(a0)
00013000 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00013008 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001300E 0028 0004 0001             		ori.b	#4,1(a0)
00013014 117C 0010 0019             		move.b	#$10,$19(a0)
0001301A 117C 0004 0018             		move.b	#4,$18(a0)
00013020                            
00013020                            Obj5D_Delay:				; XREF: Obj5D_Index
00013020 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00013026 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00013028 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001302C 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001302E 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00013034 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001303A 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001303C 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00013042                            
00013042                            Obj5D_Blow:
00013042 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00013046 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001304A 43F8 D000                  		lea	($FFFFD000).w,a1
0001304E 3029 0008                  		move.w	8(a1),d0
00013052 9068 0008                  		sub.w	8(a0),d0
00013056 0828 0000 0022             		btst	#0,$22(a0)
0001305C 6600                       		bne.s	Obj5D_ChkSonic
0001305E 4440                       		neg.w	d0
00013060                            
00013060                            Obj5D_ChkSonic:
00013060 0640 0050                  		addi.w	#$50,d0
00013064 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013068 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001306A 3229 000C                  		move.w	$C(a1),d1
0001306E 0641 0060                  		addi.w	#$60,d1
00013072 9268 000C                  		sub.w	$C(a0),d1
00013076 6500                       		bcs.s	Obj5D_Animate
00013078 0C41 0070                  		cmpi.w	#$70,d1
0001307C 6400                       		bcc.s	Obj5D_Animate
0001307E 0440 0050                  		subi.w	#$50,d0
00013082 6400                       		bcc.s	loc_1159A
00013084 4640                       		not.w	d0
00013086 D040                       		add.w	d0,d0
00013088                            
00013088                            loc_1159A:
00013088 0640 0060                  		addi.w	#$60,d0
0001308C 0828 0000 0022             		btst	#0,$22(a0)
00013092 6600                       		bne.s	loc_115A8
00013094 4440                       		neg.w	d0
00013096                            
00013096                            loc_115A8:
00013096 4400                       		neg.b	d0
00013098 E840                       		asr.w	#4,d0
0001309A 0828 0000 0028             		btst	#0,$28(a0)
000130A0 6700                       		beq.s	Obj5D_MoveSonic
000130A2 4440                       		neg.w	d0
000130A4                            
000130A4                            Obj5D_MoveSonic:
000130A4 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000130A8                            
000130A8                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000130A8 5328 001E                  		subq.b	#1,$1E(a0)
000130AC 6A00                       		bpl.s	Obj5D_ChkDel
000130AE 117C 0000 001E             		move.b	#0,$1E(a0)
000130B4 5228 001B                  		addq.b	#1,$1B(a0)
000130B8 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000130BE 6500                       		bcs.s	loc_115D8
000130C0 117C 0000 001B             		move.b	#0,$1B(a0)
000130C6                            
000130C6                            loc_115D8:
000130C6 7000                       		moveq	#0,d0
000130C8 0828 0000 0028             		btst	#0,$28(a0)
000130CE 6700                       		beq.s	loc_115E4
000130D0 7002                       		moveq	#2,d0
000130D2                            
000130D2                            loc_115E4:
000130D2 D028 001B                  		add.b	$1B(a0),d0
000130D6 1140 001A                  		move.b	d0,$1A(a0)
000130DA                            
000130DA                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000130DA 6100 C008                  		bsr.w	DisplaySprite
000130DE 3028 0008                  		move.w	8(a0),d0
000130E2 0240 FF80                  		andi.w	#$FF80,d0
000130E6 3238 F700                  		move.w	($FFFFF700).w,d1
000130EA 0441 0080                  		subi.w	#$80,d1
000130EE 0241 FF80                  		andi.w	#$FF80,d1
000130F2 9041                       		sub.w	d1,d0
000130F4 0C40 0280                  		cmpi.w	#$280,d0
000130F8 6200 C026                  		bhi.w	DeleteObject
000130FC 4E75                       		rts	
000130FE                            ; ===========================================================================
000130FE                            ; ---------------------------------------------------------------------------
000130FE                            ; Sprite mappings - fans (SLZ)
000130FE                            ; ---------------------------------------------------------------------------
000130FE                            Map_obj5D:
000130FE                            	include "_maps\obj5D.asm"
000130FE                            ; ---------------------------------------------------------------------------
000130FE                            ; Sprite mappings - fans (SLZ)
000130FE                            ; ---------------------------------------------------------------------------
000130FE 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00013102 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00013106 0000                       		dc.w byte_1161A-Map_obj5D
00013108 02                         byte_1161A:	dc.b 2
00013109 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001310E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013113 02                         byte_11625:	dc.b 2
00013114 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013119 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001311E 02                         byte_11630:	dc.b 2
0001311F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013124 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001312A 00                         		even
0001312A 00                         		even
0001312A                            
0001312A                            ; ===========================================================================
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            ; Object 5E - seesaws (SLZ)
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            
0001312A                            Obj5E:					; XREF: Obj_Index
0001312A 7000                       		moveq	#0,d0
0001312C 1028 0024                  		move.b	$24(a0),d0
00013130 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00013134 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00013138 3028 0030                  		move.w	$30(a0),d0
0001313C 0240 FF80                  		andi.w	#$FF80,d0
00013140 3238 F700                  		move.w	($FFFFF700).w,d1
00013144 0441 0080                  		subi.w	#$80,d1
00013148 0241 FF80                  		andi.w	#$FF80,d1
0001314C 9041                       		sub.w	d1,d0
0001314E 6B00 BFD0                  		bmi.w	DeleteObject
00013152 0C40 0280                  		cmpi.w	#$280,d0
00013156 6200 BFC8                  		bhi.w	DeleteObject
0001315A 6000 BF88                  		bra.w	DisplaySprite
0001315E                            ; ===========================================================================
0001315E 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00013160 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00013162 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013164 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00013166 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00013168 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001316A                            ; ===========================================================================
0001316A                            
0001316A                            Obj5E_Main:				; XREF: Obj5E_Index
0001316A 5428 0024                  		addq.b	#2,$24(a0)
0001316E 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00013176 317C 0374 0002             		move.w	#$374,2(a0)
0001317C 0028 0004 0001             		ori.b	#4,1(a0)
00013182 117C 0004 0018             		move.b	#4,$18(a0)
00013188 117C 0030 0019             		move.b	#$30,$19(a0)
0001318E 3168 0008 0030             		move.w	8(a0),$30(a0)
00013194 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00013198 6600                       		bne.s	loc_116D2	; if not, branch
0001319A 6100 C3F2                  		bsr.w	SingleObjLoad2
0001319E 6600                       		bne.s	loc_116D2
000131A0 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000131A4 5C29 0024                  		addq.b	#6,$24(a1)
000131A8 3368 0008 0008             		move.w	8(a0),8(a1)
000131AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000131B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000131BA 2348 003C                  		move.l	a0,$3C(a1)
000131BE                            
000131BE                            loc_116D2:
000131BE 0828 0000 0022             		btst	#0,$22(a0)
000131C4 6700                       		beq.s	loc_116E0
000131C6 117C 0002 001A             		move.b	#2,$1A(a0)
000131CC                            
000131CC                            loc_116E0:
000131CC 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000131D2                            
000131D2                            Obj5E_Slope:				; XREF: Obj5E_Index
000131D2 1228 003A                  		move.b	$3A(a0),d1
000131D6 6100 0000                  		bsr.w	loc_11766
000131DA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000131E0 0828 0000 001A             		btst	#0,$1A(a0)
000131E6 6700                       		beq.s	loc_11702
000131E8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000131EE                            
000131EE                            loc_11702:
000131EE 43F8 D000                  		lea	($FFFFD000).w,a1
000131F2 3169 0012 0038             		move.w	$12(a1),$38(a0)
000131F8 323C 0030                  		move.w	#$30,d1
000131FC 4EB9 0000 8F16             		jsr	(SlopeObject).l
00013202 4E75                       		rts	
00013204                            ; ===========================================================================
00013204                            
00013204                            Obj5E_Slope2:				; XREF: Obj5E_Index
00013204 6100 0000                  		bsr.w	loc_1174A
00013208 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001320E 0828 0000 001A             		btst	#0,$1A(a0)
00013214 6700                       		beq.s	loc_11730
00013216 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001321C                            
0001321C                            loc_11730:
0001321C 323C 0030                  		move.w	#$30,d1
00013220 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
00013226 323C 0030                  		move.w	#$30,d1
0001322A 3428 0008                  		move.w	8(a0),d2
0001322E 4EB9 0000 9F14             		jsr	SlopeObject2
00013234 4E75                       		rts	
00013236                            ; ===========================================================================
00013236                            
00013236                            loc_1174A:				; XREF: Obj5E_Slope2
00013236 7202                       		moveq	#2,d1
00013238 43F8 D000                  		lea	($FFFFD000).w,a1
0001323C 3028 0008                  		move.w	8(a0),d0
00013240 9069 0008                  		sub.w	8(a1),d0
00013244 6400                       		bcc.s	loc_1175E
00013246 4440                       		neg.w	d0
00013248 7200                       		moveq	#0,d1
0001324A                            
0001324A                            loc_1175E:
0001324A 0C40 0008                  		cmpi.w	#8,d0
0001324E 6400                       		bcc.s	loc_11766
00013250 7201                       		moveq	#1,d1
00013252                            
00013252                            loc_11766:
00013252 1028 001A                  		move.b	$1A(a0),d0
00013256 B001                       		cmp.b	d1,d0
00013258 6700                       		beq.s	locret_11790
0001325A 6400                       		bcc.s	loc_11772
0001325C 5400                       		addq.b	#2,d0
0001325E                            
0001325E                            loc_11772:
0001325E 5300                       		subq.b	#1,d0
00013260 1140 001A                  		move.b	d0,$1A(a0)
00013264 1141 003A                  		move.b	d1,$3A(a0)
00013268 08A8 0000 0001             		bclr	#0,1(a0)
0001326E 0828 0001 001A             		btst	#1,$1A(a0)
00013274 6700                       		beq.s	locret_11790
00013276 08E8 0000 0001             		bset	#0,1(a0)
0001327C                            
0001327C                            locret_11790:
0001327C 4E75                       		rts	
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001327E 5428 0024                  		addq.b	#2,$24(a0)
00013282 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001328A 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013290 0028 0004 0001             		ori.b	#4,1(a0)
00013296 117C 0004 0018             		move.b	#4,$18(a0)
0001329C 117C 008B 0020             		move.b	#$8B,$20(a0)
000132A2 117C 000C 0019             		move.b	#$C,$19(a0)
000132A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000132AE 0668 0028 0008             		addi.w	#$28,8(a0)
000132B4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000132BA 117C 0001 001A             		move.b	#1,$1A(a0)
000132C0 0828 0000 0022             		btst	#0,$22(a0)
000132C6 6700                       		beq.s	Obj5E_MoveSpike
000132C8 0468 0050 0008             		subi.w	#$50,8(a0)
000132CE 117C 0002 003A             		move.b	#2,$3A(a0)
000132D4                            
000132D4                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000132D4 2268 003C                  		movea.l	$3C(a0),a1
000132D8 7000                       		moveq	#0,d0
000132DA 1028 003A                  		move.b	$3A(a0),d0
000132DE 9029 003A                  		sub.b	$3A(a1),d0
000132E2 6700                       		beq.s	loc_1183E
000132E4 6400                       		bcc.s	loc_117FC
000132E6 4400                       		neg.b	d0
000132E8                            
000132E8                            loc_117FC:
000132E8 323C F7E8                  		move.w	#-$818,d1
000132EC 343C FEEC                  		move.w	#-$114,d2
000132F0 0C00 0001                  		cmpi.b	#1,d0
000132F4 6700                       		beq.s	loc_11822
000132F6 323C F510                  		move.w	#-$AF0,d1
000132FA 343C FF34                  		move.w	#-$CC,d2
000132FE 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013304 6D00                       		blt.s	loc_11822
00013306 323C F200                  		move.w	#-$E00,d1
0001330A 343C FF60                  		move.w	#-$A0,d2
0001330E                            
0001330E                            loc_11822:
0001330E 3141 0012                  		move.w	d1,$12(a0)
00013312 3142 0010                  		move.w	d2,$10(a0)
00013316 3028 0008                  		move.w	8(a0),d0
0001331A 9068 0030                  		sub.w	$30(a0),d0
0001331E 6400                       		bcc.s	loc_11838
00013320 4468 0010                  		neg.w	$10(a0)
00013324                            
00013324                            loc_11838:
00013324 5428 0024                  		addq.b	#2,$24(a0)
00013328 6000                       		bra.s	Obj5E_SpikeFall
0001332A                            ; ===========================================================================
0001332A                            
0001332A                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001332A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013330 7000                       		moveq	#0,d0
00013332 1029 001A                  		move.b	$1A(a1),d0
00013336 343C 0028                  		move.w	#$28,d2
0001333A 3228 0008                  		move.w	8(a0),d1
0001333E 9268 0030                  		sub.w	$30(a0),d1
00013342 6400                       		bcc.s	loc_1185C
00013344 4442                       		neg.w	d2
00013346 5440                       		addq.w	#2,d0
00013348                            
00013348                            loc_1185C:
00013348 D040                       		add.w	d0,d0
0001334A 3228 0034                  		move.w	$34(a0),d1
0001334E D272 0000                  		add.w	(a2,d0.w),d1
00013352 3141 000C                  		move.w	d1,$C(a0)
00013356 D468 0030                  		add.w	$30(a0),d2
0001335A 3142 0008                  		move.w	d2,8(a0)
0001335E 4268 000E                  		clr.w	$E(a0)
00013362 4268 000A                  		clr.w	$A(a0)
00013366 4E75                       		rts	
00013368                            ; ===========================================================================
00013368                            
00013368                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00013368 4A68 0012                  		tst.w	$12(a0)
0001336C 6A00                       		bpl.s	loc_1189A
0001336E 6100 BD3A                  		bsr.w	ObjectFall
00013372 3028 0034                  		move.w	$34(a0),d0
00013376 0440 002F                  		subi.w	#$2F,d0
0001337A B068 000C                  		cmp.w	$C(a0),d0
0001337E 6E00                       		bgt.s	locret_11898
00013380 6100 BD28                  		bsr.w	ObjectFall
00013384                            
00013384                            locret_11898:
00013384 4E75                       		rts	
00013386                            ; ===========================================================================
00013386                            
00013386                            loc_1189A:				; XREF: Obj5E_SpikeFall
00013386 6100 BD22                  		bsr.w	ObjectFall
0001338A 2268 003C                  		movea.l	$3C(a0),a1
0001338E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013394 7000                       		moveq	#0,d0
00013396 1029 001A                  		move.b	$1A(a1),d0
0001339A 3228 0008                  		move.w	8(a0),d1
0001339E 9268 0030                  		sub.w	$30(a0),d1
000133A2 6400                       		bcc.s	loc_118BA
000133A4 5440                       		addq.w	#2,d0
000133A6                            
000133A6                            loc_118BA:
000133A6 D040                       		add.w	d0,d0
000133A8 3228 0034                  		move.w	$34(a0),d1
000133AC D272 0000                  		add.w	(a2,d0.w),d1
000133B0 B268 000C                  		cmp.w	$C(a0),d1
000133B4 6E00                       		bgt.s	locret_11938
000133B6 2268 003C                  		movea.l	$3C(a0),a1
000133BA 7202                       		moveq	#2,d1
000133BC 4A68 0010                  		tst.w	$10(a0)
000133C0 6B00                       		bmi.s	Obj5E_Spring
000133C2 7200                       		moveq	#0,d1
000133C4                            
000133C4                            Obj5E_Spring:
000133C4 1341 003A                  		move.b	d1,$3A(a1)
000133C8 1141 003A                  		move.b	d1,$3A(a0)
000133CC B229 001A                  		cmp.b	$1A(a1),d1
000133D0 6700                       		beq.s	loc_1192C
000133D2 08A9 0003 0022             		bclr	#3,$22(a1)
000133D8 6700                       		beq.s	loc_1192C
000133DA 4229 0025                  		clr.b	$25(a1)
000133DE 137C 0002 0024             		move.b	#2,$24(a1)
000133E4 45F8 D000                  		lea	($FFFFD000).w,a2
000133E8 3568 0012 0012             		move.w	$12(a0),$12(a2)
000133EE 446A 0012                  		neg.w	$12(a2)
000133F2 08EA 0001 0022             		bset	#1,$22(a2)
000133F8 08AA 0003 0022             		bclr	#3,$22(a2)
000133FE 422A 003C                  		clr.b	$3C(a2)
00013402 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013408 157C 0002 0024             		move.b	#2,$24(a2)
0001340E 303C 00CC                  		move.w	#$CC,d0
00013412 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
00013418                            
00013418                            loc_1192C:
00013418 4268 0010                  		clr.w	$10(a0)
0001341C 4268 0012                  		clr.w	$12(a0)
00013420 5528 0024                  		subq.b	#2,$24(a0)
00013424                            
00013424                            locret_11938:
00013424 4E75                       		rts	
00013426                            ; ===========================================================================
00013426 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00013430                            
00013430                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00013460                            		even
00013460                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013490                            		even
00013490                            ; ---------------------------------------------------------------------------
00013490                            ; Sprite mappings - seesaws (SLZ)
00013490                            ; ---------------------------------------------------------------------------
00013490                            Map_obj5E:
00013490                            	include "_maps\obj5E.asm"
00013490                            ; ---------------------------------------------------------------------------
00013490                            ; Sprite mappings - seesaws (SLZ)
00013490                            ; ---------------------------------------------------------------------------
00013490 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013494 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013498 07                         byte_119AC:	dc.b 7
00013499 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001349E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000134A3 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000134A8 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000134AD FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000134B2 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000134B7 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000134BC 04                         byte_119D0:	dc.b 4
000134BD E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000134C2 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000134C7 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000134CC E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000134D2 00                         		even
000134D2 00                         		even
000134D2                            
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            Map_obj5Ea:
000134D2                            	include "_maps\obj5Eballs.asm"
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000134D2                            ; ---------------------------------------------------------------------------
000134D2 0000                       		dc.w byte_119EA-Map_obj5Ea
000134D4 0000                       		dc.w byte_119F0-Map_obj5Ea
000134D6 01                         byte_119EA:	dc.b 1
000134D7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000134DC 01                         byte_119F0:	dc.b 1
000134DD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000134E2                            		even
000134E2                            		even
000134E2                            
000134E2                            ; ===========================================================================
000134E2                            ; ---------------------------------------------------------------------------
000134E2                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000134E2                            ; ---------------------------------------------------------------------------
000134E2                            
000134E2                            Obj5F:					; XREF: Obj_Index
000134E2 7000                       		moveq	#0,d0
000134E4 1028 0024                  		move.b	$24(a0),d0
000134E8 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000134EC 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000134F0                            ; ===========================================================================
000134F0 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000134F2 0000                       		dc.w Obj5F_Action-Obj5F_Index
000134F4 0000                       		dc.w Obj5F_Display-Obj5F_Index
000134F6 0000                       		dc.w Obj5F_End-Obj5F_Index
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            Obj5F_Main:				; XREF: Obj5F_Index
000134F8 5428 0024                  		addq.b	#2,$24(a0)
000134FC 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00013504 317C 0400 0002             		move.w	#$400,2(a0)
0001350A 0028 0004 0001             		ori.b	#4,1(a0)
00013510 117C 0003 0018             		move.b	#3,$18(a0)
00013516 117C 000C 0019             		move.b	#$C,$19(a0)
0001351C 1028 0028                  		move.b	$28(a0),d0
00013520 6700                       		beq.s	loc_11A3C
00013522 1140 0024                  		move.b	d0,$24(a0)
00013526 4E75                       		rts	
00013528                            ; ===========================================================================
00013528                            
00013528                            loc_11A3C:
00013528 117C 009A 0020             		move.b	#$9A,$20(a0)
0001352E 0868 0000 0022             		bchg	#0,$22(a0)
00013534                            
00013534                            Obj5F_Action:				; XREF: Obj5F_Index
00013534 7000                       		moveq	#0,d0
00013536 1028 0025                  		move.b	$25(a0),d0
0001353A 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001353E 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00013542 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013548 6100 8BEE                  		bsr.w	AnimateSprite
0001354C 6000 DC4C                  		bra.w	MarkObjGone
00013550                            ; ===========================================================================
00013550 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00013552 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00013554 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00013556                            ; ===========================================================================
00013556                            
00013556                            Obj5F_Walk:				; XREF: Obj5F_Index2
00013556 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001355A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001355E 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00013560 5428 0025                  		addq.b	#2,$25(a0)
00013564 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001356A 317C 0010 0010             		move.w	#$10,$10(a0)
00013570 117C 0001 001C             		move.b	#1,$1C(a0)
00013576 0868 0000 0022             		bchg	#0,$22(a0)
0001357C 6700                       		beq.s	locret_11A96
0001357E 4468 0010                  		neg.w	$10(a0)		; change direction
00013582                            
00013582                            locret_11A96:
00013582 4E75                       		rts	
00013584                            ; ===========================================================================
00013584                            
00013584                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013584 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013588 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001358C 6B00                       		bmi.s	loc_11AA8
0001358E 6100 BB3A                  		bsr.w	SpeedToPos
00013592 4E75                       		rts	
00013594                            ; ===========================================================================
00013594                            
00013594                            loc_11AA8:
00013594 5528 0025                  		subq.b	#2,$25(a0)
00013598 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001359E 4268 0010                  		clr.w	$10(a0)		; stop walking
000135A2 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000135A8 4E75                       		rts	
000135AA                            ; ===========================================================================
000135AA                            
000135AA                            Obj5F_Explode:				; XREF: Obj5F_Index2
000135AA 5368 0030                  		subq.w	#1,$30(a0)
000135AE 6A00                       		bpl.s	locret_11AD0
000135B0 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000135B4 117C 0000 0024             		move.b	#0,$24(a0)
000135BA                            
000135BA                            locret_11AD0:
000135BA 4E75                       		rts	
000135BC                            ; ===========================================================================
000135BC                            
000135BC                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000135BC 3038 D008                  		move.w	($FFFFD008).w,d0
000135C0 9068 0008                  		sub.w	8(a0),d0
000135C4 6400                       		bcc.s	loc_11ADE
000135C6 4440                       		neg.w	d0
000135C8                            
000135C8                            loc_11ADE:
000135C8 0C40 0060                  		cmpi.w	#$60,d0
000135CC 6400                       		bcc.s	locret_11B5E
000135CE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000135D2 9068 000C                  		sub.w	$C(a0),d0
000135D6 6400                       		bcc.s	Obj5F_MakeFuse
000135D8 4440                       		neg.w	d0
000135DA                            
000135DA                            Obj5F_MakeFuse:
000135DA 0C40 0060                  		cmpi.w	#$60,d0
000135DE 6400                       		bcc.s	locret_11B5E
000135E0 4A78 FE08                  		tst.w	($FFFFFE08).w
000135E4 6600                       		bne.s	locret_11B5E
000135E6 117C 0004 0025             		move.b	#4,$25(a0)
000135EC 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000135F2 4268 0010                  		clr.w	$10(a0)
000135F6 117C 0002 001C             		move.b	#2,$1C(a0)
000135FC 6100 BF90                  		bsr.w	SingleObjLoad2
00013600 6600                       		bne.s	locret_11B5E
00013602 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00013606 3368 0008 0008             		move.w	8(a0),8(a1)
0001360C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013612 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013618 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001361E 137C 0004 0028             		move.b	#4,$28(a1)
00013624 137C 0003 001C             		move.b	#3,$1C(a1)
0001362A 337C 0010 0012             		move.w	#$10,$12(a1)
00013630 0828 0001 0022             		btst	#1,$22(a0)
00013636 6700                       		beq.s	loc_11B54
00013638 4469 0012                  		neg.w	$12(a1)
0001363C                            
0001363C                            loc_11B54:
0001363C 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00013642 2348 003C                  		move.l	a0,$3C(a1)
00013646                            
00013646                            locret_11B5E:
00013646 4E75                       		rts	
00013648                            ; ===========================================================================
00013648                            
00013648                            Obj5F_Display:				; XREF: Obj5F_Index
00013648 6100                       		bsr.s	loc_11B70
0001364A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013650 6100 8AE6                  		bsr.w	AnimateSprite
00013654 6000 DB44                  		bra.w	MarkObjGone
00013658                            ; ===========================================================================
00013658                            
00013658                            loc_11B70:
00013658 5368 0030                  		subq.w	#1,$30(a0)
0001365C 6B00                       		bmi.s	loc_11B7C
0001365E 6100 BA6A                  		bsr.w	SpeedToPos
00013662 4E75                       		rts	
00013664                            ; ===========================================================================
00013664                            
00013664                            loc_11B7C:
00013664 4268 0030                  		clr.w	$30(a0)
00013668 4228 0024                  		clr.b	$24(a0)
0001366C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00013672 7203                       		moveq	#3,d1
00013674 2248                       		movea.l	a0,a1
00013676 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001367C 6000                       		bra.s	Obj5F_MakeShrap
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            Obj5F_Loop:
0001367E 6100 BF0E                  		bsr.w	SingleObjLoad2
00013682 6600                       		bne.s	loc_11BCE
00013684                            
00013684                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013684 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00013688 3368 0008 0008             		move.w	8(a0),8(a1)
0001368E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013694 137C 0006 0028             		move.b	#6,$28(a1)
0001369A 137C 0004 001C             		move.b	#4,$1C(a1)
000136A0 335A 0010                  		move.w	(a2)+,$10(a1)
000136A4 335A 0012                  		move.w	(a2)+,$12(a1)
000136A8 137C 0098 0020             		move.b	#$98,$20(a1)
000136AE 08E9 0007 0001             		bset	#7,1(a1)
000136B4                            
000136B4                            loc_11BCE:
000136B4 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000136B8                            
000136B8 117C 0006 0024             		move.b	#6,$24(a0)
000136BE                            
000136BE                            Obj5F_End:				; XREF: Obj5F_Index
000136BE 6100 BA0A                  		bsr.w	SpeedToPos
000136C2 0668 0018 0012             		addi.w	#$18,$12(a0)
000136C8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000136CE 6100 8A68                  		bsr.w	AnimateSprite
000136D2 4A28 0001                  		tst.b	1(a0)
000136D6 6A00 BA48                  		bpl.w	DeleteObject
000136DA 6000 BA08                  		bra.w	DisplaySprite
000136DE                            ; ===========================================================================
000136DE FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000136EE                            
000136EE                            Ani_obj5F:
000136EE                            	include "_anim\obj5F.asm"
000136EE                            ; ---------------------------------------------------------------------------
000136EE                            ; Animation script - Bomb enemy
000136EE                            ; ---------------------------------------------------------------------------
000136EE 0000                       		dc.w byte_11C12-Ani_obj5F
000136F0 0000                       		dc.w byte_11C16-Ani_obj5F
000136F2 0000                       		dc.w byte_11C1C-Ani_obj5F
000136F4 0000                       		dc.w byte_11C20-Ani_obj5F
000136F6 0000                       		dc.w byte_11C24-Ani_obj5F
000136F8 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000136FC 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00013702 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00013706 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001370A 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001370E                            		even
0001370E                            		even
0001370E                            
0001370E                            ; ---------------------------------------------------------------------------
0001370E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001370E                            ; ---------------------------------------------------------------------------
0001370E                            Map_obj5F:
0001370E                            	include "_maps\obj5F.asm"
0001370E                            ; ---------------------------------------------------------------------------
0001370E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001370E                            ; ---------------------------------------------------------------------------
0001370E 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00013712 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00013716 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001371A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001371E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00013722 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013726 03                         byte_11C40:	dc.b 3
00013727 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001372C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013731 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013736 03                         byte_11C50:	dc.b 3
00013737 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001373C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013741 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013746 03                         byte_11C60:	dc.b 3
00013747 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001374C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013751 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013756 03                         byte_11C70:	dc.b 3
00013757 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001375C 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013761 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013766 03                         byte_11C80:	dc.b 3
00013767 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001376C 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013771 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013776 03                         byte_11C90:	dc.b 3
00013777 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001377C 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013781 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013786 02                         byte_11CA0:	dc.b 2
00013787 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001378C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013791 02                         byte_11CAB:	dc.b 2
00013792 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013797 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001379C 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001379D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000137A2 01                         byte_11CBC:	dc.b 1			; fuse
000137A3 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000137A8 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000137A9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000137AE 01                         byte_11CC8:	dc.b 1			; fireball
000137AF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000137B4                            		even
000137B4                            		even
000137B4                            
000137B4                            ; ===========================================================================
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            
000137B4                            Obj60:					; XREF: Obj_Index
000137B4 7000                       		moveq	#0,d0
000137B6 1028 0024                  		move.b	$24(a0),d0
000137BA 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000137BE 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000137C2                            ; ===========================================================================
000137C2 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000137C4 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000137C6 0000                       		dc.w Obj60_Display-Obj60_Index
000137C8 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000137CA 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000137CC                            ; ===========================================================================
000137CC                            
000137CC                            Obj60_Main:				; XREF: Obj60_Index
000137CC 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000137D4 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000137DA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000137E0 6700                       		beq.s	loc_11D02
000137E2 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000137E8                            
000137E8                            loc_11D02:
000137E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000137EE 6600                       		bne.s	loc_11D10
000137F0 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000137F6                            
000137F6                            loc_11D10:
000137F6 0028 0004 0001             		ori.b	#4,1(a0)
000137FC 117C 0004 0018             		move.b	#4,$18(a0)
00013802 117C 000B 0020             		move.b	#$B,$20(a0)
00013808 117C 000C 0019             		move.b	#$C,$19(a0)
0001380E 7400                       		moveq	#0,d2
00013810 45E8 0037                  		lea	$37(a0),a2
00013814 264A                       		movea.l	a2,a3
00013816 524A                       		addq.w	#1,a2
00013818 7203                       		moveq	#3,d1
0001381A                            
0001381A                            Obj60_MakeOrbs:
0001381A 6100 BD72                  		bsr.w	SingleObjLoad2
0001381E 6600                       		bne.s	loc_11D90
00013820 5213                       		addq.b	#1,(a3)
00013822 3A09                       		move.w	a1,d5
00013824 0445 D000                  		subi.w	#-$3000,d5
00013828 EC4D                       		lsr.w	#6,d5
0001382A 0245 007F                  		andi.w	#$7F,d5
0001382E 14C5                       		move.b	d5,(a2)+
00013830 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013832 137C 0006 0024             		move.b	#6,$24(a1)
00013838 2368 0004 0004             		move.l	4(a0),4(a1)
0001383E 3368 0002 0002             		move.w	2(a0),2(a1)
00013844 0029 0004 0001             		ori.b	#4,1(a1)
0001384A 137C 0004 0018             		move.b	#4,$18(a1)
00013850 137C 0008 0019             		move.b	#8,$19(a1)
00013856 137C 0003 001A             		move.b	#3,$1A(a1)
0001385C 137C 0098 0020             		move.b	#$98,$20(a1)
00013862 1342 0026                  		move.b	d2,$26(a1)
00013866 0602 0040                  		addi.b	#$40,d2
0001386A 2348 003C                  		move.l	a0,$3C(a1)
0001386E 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00013872                            
00013872                            loc_11D90:
00013872 7001                       		moveq	#1,d0
00013874 0828 0000 0022             		btst	#0,$22(a0)
0001387A 6700                       		beq.s	Obj60_Move
0001387C 4440                       		neg.w	d0
0001387E                            
0001387E                            Obj60_Move:
0001387E 1140 0036                  		move.b	d0,$36(a0)
00013882 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00013888 5428 0024                  		addq.b	#2,$24(a0)
0001388C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013892 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00013898 6700                       		beq.s	locret_11DBC	; if not, branch
0001389A 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001389E                            
0001389E                            locret_11DBC:
0001389E 4E75                       		rts	
000138A0                            ; ===========================================================================
000138A0                            
000138A0                            Obj60_ChkSonic:				; XREF: Obj60_Index
000138A0 3038 D008                  		move.w	($FFFFD008).w,d0
000138A4 9068 0008                  		sub.w	8(a0),d0
000138A8 6400                       		bcc.s	loc_11DCA
000138AA 4440                       		neg.w	d0
000138AC                            
000138AC                            loc_11DCA:
000138AC 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000138B0 6400                       		bcc.s	Obj60_Animate	; if not, branch
000138B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000138B6 9068 000C                  		sub.w	$C(a0),d0
000138BA 6400                       		bcc.s	loc_11DDC
000138BC 4440                       		neg.w	d0
000138BE                            
000138BE                            loc_11DDC:
000138BE 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000138C2 6400                       		bcc.s	Obj60_Animate	; if not, branch
000138C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000138C8 6600                       		bne.s	Obj60_Animate	; if yes, branch
000138CA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000138D0                            
000138D0                            Obj60_Animate:
000138D0 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000138D6 6100 8860                  		bsr.w	AnimateSprite
000138DA 6000 0000                  		bra.w	Obj60_ChkDel
000138DE                            ; ===========================================================================
000138DE                            
000138DE                            Obj60_Display:				; XREF: Obj60_Index
000138DE 6100 B7EA                  		bsr.w	SpeedToPos
000138E2                            
000138E2                            Obj60_ChkDel:				; XREF: Obj60_Animate
000138E2 3028 0008                  		move.w	8(a0),d0
000138E6 0240 FF80                  		andi.w	#$FF80,d0
000138EA 3238 F700                  		move.w	($FFFFF700).w,d1
000138EE 0441 0080                  		subi.w	#$80,d1
000138F2 0241 FF80                  		andi.w	#$FF80,d1
000138F6 9041                       		sub.w	d1,d0
000138F8 0C40 0280                  		cmpi.w	#$280,d0
000138FC 6200 0000                  		bhi.w	Obj60_ChkGone
00013900 6000 B7E2                  		bra.w	DisplaySprite
00013904                            ; ===========================================================================
00013904                            
00013904                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00013904 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013908 7000                       		moveq	#0,d0
0001390A 1028 0023                  		move.b	$23(a0),d0
0001390E 6700                       		beq.s	loc_11E34
00013910 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013916                            
00013916                            loc_11E34:
00013916 45E8 0037                  		lea	$37(a0),a2
0001391A 7400                       		moveq	#0,d2
0001391C 141A                       		move.b	(a2)+,d2
0001391E 5342                       		subq.w	#1,d2
00013920 6500                       		bcs.s	Obj60_Delete
00013922                            
00013922                            loc_11E40:
00013922 7000                       		moveq	#0,d0
00013924 101A                       		move.b	(a2)+,d0
00013926 ED48                       		lsl.w	#6,d0
00013928 0680 00FF D000             		addi.l	#$FFD000,d0
0001392E 2240                       		movea.l	d0,a1
00013930 6100 B7F0                  		bsr.w	DeleteObject2
00013934 51CA FFEC                  		dbf	d2,loc_11E40
00013938                            
00013938                            Obj60_Delete:
00013938 6000 B7E6                  		bra.w	DeleteObject
0001393C                            ; ===========================================================================
0001393C                            
0001393C                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001393C 2268 003C                  		movea.l	$3C(a0),a1
00013940 0C11 0060                  		cmpi.b	#$60,0(a1)
00013944 6600 B7DA                  		bne.w	DeleteObject
00013948 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001394E 6600                       		bne.s	Obj60_Circle
00013950 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00013956 6600                       		bne.s	Obj60_Circle
00013958 5428 0024                  		addq.b	#2,$24(a0)
0001395C 5329 0037                  		subq.b	#1,$37(a1)
00013960 6600                       		bne.s	Obj60_FireOrb
00013962 5429 0024                  		addq.b	#2,$24(a1)
00013966                            
00013966                            Obj60_FireOrb:
00013966 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001396C 0829 0000 0022             		btst	#0,$22(a1)
00013972 6700                       		beq.s	Obj60_Display2
00013974 4468 0010                  		neg.w	$10(a0)
00013978                            
00013978                            Obj60_Display2:
00013978 6000 B76A                  		bra.w	DisplaySprite
0001397C                            ; ===========================================================================
0001397C                            
0001397C                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001397C 1028 0026                  		move.b	$26(a0),d0
00013980 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013986 E841                       		asr.w	#4,d1
00013988 D269 0008                  		add.w	8(a1),d1
0001398C 3141 0008                  		move.w	d1,8(a0)
00013990 E840                       		asr.w	#4,d0
00013992 D069 000C                  		add.w	$C(a1),d0
00013996 3140 000C                  		move.w	d0,$C(a0)
0001399A 1029 0036                  		move.b	$36(a1),d0
0001399E D128 0026                  		add.b	d0,$26(a0)
000139A2 6000 B740                  		bra.w	DisplaySprite
000139A6                            ; ===========================================================================
000139A6                            
000139A6                            Obj60_ChkDel2:				; XREF: Obj60_Index
000139A6 6100 B722                  		bsr.w	SpeedToPos
000139AA 4A28 0001                  		tst.b	1(a0)
000139AE 6A00 B770                  		bpl.w	DeleteObject
000139B2 6000 B730                  		bra.w	DisplaySprite
000139B6                            ; ===========================================================================
000139B6                            Ani_obj60:
000139B6                            	include "_anim\obj60.asm"
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            ; Animation script - Orbinaut enemy
000139B6                            ; ---------------------------------------------------------------------------
000139B6 0000                       		dc.w byte_11EDA-Ani_obj60
000139B8 0000                       		dc.w byte_11EDE-Ani_obj60
000139BA 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000139BE 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000139C4                            		even
000139C4                            		even
000139C4                            
000139C4                            ; ---------------------------------------------------------------------------
000139C4                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000139C4                            ; ---------------------------------------------------------------------------
000139C4                            Map_obj60:
000139C4                            	include "_maps\obj60.asm"
000139C4                            ; ---------------------------------------------------------------------------
000139C4                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000139C4                            ; ---------------------------------------------------------------------------
000139C4 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000139C8 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000139CC 01                         byte_11EEC:	dc.b 1
000139CD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000139D2 01                         byte_11EF2:	dc.b 1
000139D3 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000139D8 01                         byte_11EF8:	dc.b 1
000139D9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000139DE 01                         byte_11EFE:	dc.b 1
000139DF F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000139E4                            		even
000139E4                            		even
000139E4                            
000139E4                            ; ===========================================================================
000139E4                            ; ---------------------------------------------------------------------------
000139E4                            ; Object 16 - harpoon (LZ)
000139E4                            ; ---------------------------------------------------------------------------
000139E4                            
000139E4                            Obj16:					; XREF: Obj_Index
000139E4 7000                       		moveq	#0,d0
000139E6 1028 0024                  		move.b	$24(a0),d0
000139EA 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000139EE 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000139F2                            ; ===========================================================================
000139F2 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000139F4 0000                       		dc.w Obj16_Move-Obj16_Index
000139F6 0000                       		dc.w Obj16_Wait-Obj16_Index
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            Obj16_Main:				; XREF: Obj16_Index
000139F8 5428 0024                  		addq.b	#2,$24(a0)
000139FC 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013A04 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013A0A 0028 0004 0001             		ori.b	#4,1(a0)
00013A10 117C 0004 0018             		move.b	#4,$18(a0)
00013A16 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013A1C 117C 0014 0019             		move.b	#$14,$19(a0)
00013A22 317C 003C 0030             		move.w	#60,$30(a0)
00013A28                            
00013A28                            Obj16_Move:				; XREF: Obj16_Index
00013A28 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013A2E 6100 8708                  		bsr.w	AnimateSprite
00013A32 7000                       		moveq	#0,d0
00013A34 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013A38 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013A3E 6000 D75A                  		bra.w	MarkObjGone
00013A42                            ; ===========================================================================
00013A42 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013A48                            ; ===========================================================================
00013A48                            
00013A48                            Obj16_Wait:				; XREF: Obj16_Index
00013A48 5368 0030                  		subq.w	#1,$30(a0)
00013A4C 6A00                       		bpl.s	Obj16_ChkDel
00013A4E 317C 003C 0030             		move.w	#60,$30(a0)
00013A54 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013A58 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013A5E                            
00013A5E                            Obj16_ChkDel:
00013A5E 6000 D73A                  		bra.w	MarkObjGone
00013A62                            ; ===========================================================================
00013A62                            Ani_obj16:
00013A62                            	include "_anim\obj16.asm"
00013A62                            ; ---------------------------------------------------------------------------
00013A62                            ; Animation script - harpoon (LZ)
00013A62                            ; ---------------------------------------------------------------------------
00013A62 0000                       		dc.w byte_11F8A-Ani_obj16
00013A64 0000                       		dc.w byte_11F8E-Ani_obj16
00013A66 0000                       		dc.w byte_11F92-Ani_obj16
00013A68 0000                       		dc.w byte_11F96-Ani_obj16
00013A6A 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013A6E 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013A72 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013A76 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013A7A                            		even
00013A7A                            		even
00013A7A                            
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            ; Sprite mappings - harpoon (LZ)
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            Map_obj16:
00013A7A                            	include "_maps\obj16.asm"
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            ; Sprite mappings - harpoon (LZ)
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013A7E 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013A82 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013A86 01                         byte_11FA6:	dc.b 1
00013A87 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013A8C 01                         byte_11FAC:	dc.b 1
00013A8D FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013A92 02                         byte_11FB2:	dc.b 2
00013A93 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013A98 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013A9D 01                         byte_11FBD:	dc.b 1
00013A9E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013AA3 01                         byte_11FC3:	dc.b 1
00013AA4 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013AA9 02                         byte_11FC9:	dc.b 2
00013AAA D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013AAF F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013AB4                            		even
00013AB4                            		even
00013AB4                            
00013AB4                            ; ===========================================================================
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4                            ; Object 61 - blocks (LZ)
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4                            
00013AB4                            Obj61:					; XREF: Obj_Index
00013AB4 7000                       		moveq	#0,d0
00013AB6 1028 0024                  		move.b	$24(a0),d0
00013ABA 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013ABE 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013AC2                            ; ===========================================================================
00013AC2 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013AC4 0000                       		dc.w Obj61_Action-Obj61_Index
00013AC6                            
00013AC6 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013AC8 200C                       		dc.b $20, $C
00013ACA 1010                       		dc.b $10, $10
00013ACC 1010                       		dc.b $10, $10
00013ACE                            ; ===========================================================================
00013ACE                            
00013ACE                            Obj61_Main:				; XREF: Obj61_Index
00013ACE 5428 0024                  		addq.b	#2,$24(a0)
00013AD2 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013ADA 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013AE0 117C 0004 0001             		move.b	#4,1(a0)
00013AE6 117C 0003 0018             		move.b	#3,$18(a0)
00013AEC 7000                       		moveq	#0,d0
00013AEE 1028 0028                  		move.b	$28(a0),d0
00013AF2 E648                       		lsr.w	#3,d0
00013AF4 0240 000E                  		andi.w	#$E,d0
00013AF8 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013AFC 115A 0019                  		move.b	(a2)+,$19(a0)
00013B00 1152 0016                  		move.b	(a2),$16(a0)
00013B04 E248                       		lsr.w	#1,d0
00013B06 1140 001A                  		move.b	d0,$1A(a0)
00013B0A 3168 0008 0034             		move.w	8(a0),$34(a0)
00013B10 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013B16 1028 0028                  		move.b	$28(a0),d0
00013B1A 0200 000F                  		andi.b	#$F,d0
00013B1E 6700                       		beq.s	Obj61_Action
00013B20 0C00 0007                  		cmpi.b	#7,d0
00013B24 6700                       		beq.s	Obj61_Action
00013B26 117C 0001 0038             		move.b	#1,$38(a0)
00013B2C                            
00013B2C                            Obj61_Action:				; XREF: Obj61_Index
00013B2C 3F28 0008                  		move.w	8(a0),-(sp)
00013B30 7000                       		moveq	#0,d0
00013B32 1028 0028                  		move.b	$28(a0),d0
00013B36 0240 000F                  		andi.w	#$F,d0
00013B3A D040                       		add.w	d0,d0
00013B3C 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013B40 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013B44 381F                       		move.w	(sp)+,d4
00013B46 4A28 0001                  		tst.b	1(a0)
00013B4A 6A00                       		bpl.s	Obj61_ChkDel
00013B4C 7200                       		moveq	#0,d1
00013B4E 1228 0019                  		move.b	$19(a0),d1
00013B52 0641 000B                  		addi.w	#$B,d1
00013B56 7400                       		moveq	#0,d2
00013B58 1428 0016                  		move.b	$16(a0),d2
00013B5C 3602                       		move.w	d2,d3
00013B5E 5243                       		addq.w	#1,d3
00013B60 6100 D960                  		bsr.w	SolidObject
00013B64 1144 003F                  		move.b	d4,$3F(a0)
00013B68 6100 0000                  		bsr.w	loc_12180
00013B6C                            
00013B6C                            Obj61_ChkDel:
00013B6C 3028 0034                  		move.w	$34(a0),d0
00013B70 0240 FF80                  		andi.w	#$FF80,d0
00013B74 3238 F700                  		move.w	($FFFFF700).w,d1
00013B78 0441 0080                  		subi.w	#$80,d1
00013B7C 0241 FF80                  		andi.w	#$FF80,d1
00013B80 9041                       		sub.w	d1,d0
00013B82 0C40 0280                  		cmpi.w	#$280,d0
00013B86 6200 B598                  		bhi.w	DeleteObject
00013B8A 6000 B558                  		bra.w	DisplaySprite
00013B8E                            ; ===========================================================================
00013B8E 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013B92 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013B96 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013B9A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013B9E                            ; ===========================================================================
00013B9E                            
00013B9E                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013B9E 4E75                       		rts	
00013BA0                            ; ===========================================================================
00013BA0                            
00013BA0                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013BA0 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013BA4 6600                       		bne.s	loc_120D6	; if yes, branch
00013BA6 0828 0003 0022             		btst	#3,$22(a0)
00013BAC 6700                       		beq.s	locret_120D4
00013BAE 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013BB4                            
00013BB4                            locret_120D4:
00013BB4 4E75                       		rts	
00013BB6                            ; ===========================================================================
00013BB6                            
00013BB6                            loc_120D6:
00013BB6 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013BBA 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013BBC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013BC0 4228 0038                  		clr.b	$38(a0)
00013BC4 4E75                       		rts	
00013BC6                            ; ===========================================================================
00013BC6                            
00013BC6                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013BC6 6100 B502                  		bsr.w	SpeedToPos
00013BCA 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013BCE 6100 0000                  		bsr.w	ObjHitFloor
00013BD2 4A41                       		tst.w	d1
00013BD4 6A00 0000                  		bpl.w	locret_12106
00013BD8 5241                       		addq.w	#1,d1
00013BDA D368 000C                  		add.w	d1,$C(a0)
00013BDE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013BE2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013BE6                            
00013BE6                            locret_12106:
00013BE6 4E75                       		rts	
00013BE8                            ; ===========================================================================
00013BE8                            
00013BE8                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013BE8 6100 B4E0                  		bsr.w	SpeedToPos
00013BEC 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013BF0 6100 0000                  		bsr.w	ObjHitCeiling
00013BF4 4A41                       		tst.w	d1
00013BF6 6A00 0000                  		bpl.w	locret_12126
00013BFA 9368 000C                  		sub.w	d1,$C(a0)
00013BFE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013C02 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013C06                            
00013C06                            locret_12126:
00013C06 4E75                       		rts	
00013C08                            ; ===========================================================================
00013C08                            
00013C08                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013C08 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013C0E 6600                       		bne.s	locret_12138	; if not, branch
00013C10 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013C14 4228 0038                  		clr.b	$38(a0)
00013C18                            
00013C18                            locret_12138:
00013C18 4E75                       		rts	
00013C1A                            ; ===========================================================================
00013C1A                            
00013C1A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013C1A 3038 F646                  		move.w	($FFFFF646).w,d0
00013C1E 9068 000C                  		sub.w	$C(a0),d0
00013C22 6700                       		beq.s	locret_1217E
00013C24 6400                       		bcc.s	loc_12162
00013C26 0C40 FFFE                  		cmpi.w	#-2,d0
00013C2A 6C00                       		bge.s	loc_1214E
00013C2C 70FE                       		moveq	#-2,d0
00013C2E                            
00013C2E                            loc_1214E:
00013C2E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013C32 6100 0000                  		bsr.w	ObjHitCeiling
00013C36 4A41                       		tst.w	d1
00013C38 6A00 0000                  		bpl.w	locret_12160
00013C3C 9368 000C                  		sub.w	d1,$C(a0)
00013C40                            
00013C40                            locret_12160:
00013C40 4E75                       		rts	
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            loc_12162:				; XREF: Obj61_Type07
00013C42 0C40 0002                  		cmpi.w	#2,d0
00013C46 6F00                       		ble.s	loc_1216A
00013C48 7002                       		moveq	#2,d0
00013C4A                            
00013C4A                            loc_1216A:
00013C4A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013C4E 6100 0000                  		bsr.w	ObjHitFloor
00013C52 4A41                       		tst.w	d1
00013C54 6A00 0000                  		bpl.w	locret_1217E
00013C58 5241                       		addq.w	#1,d1
00013C5A D368 000C                  		add.w	d1,$C(a0)
00013C5E                            
00013C5E                            locret_1217E:
00013C5E 4E75                       		rts	
00013C60                            ; ===========================================================================
00013C60                            
00013C60                            loc_12180:				; XREF: Obj61_Action
00013C60 4A28 0038                  		tst.b	$38(a0)
00013C64 6700                       		beq.s	locret_121C0
00013C66 0828 0003 0022             		btst	#3,$22(a0)
00013C6C 6600                       		bne.s	loc_1219A
00013C6E 4A28 003E                  		tst.b	$3E(a0)
00013C72 6700                       		beq.s	locret_121C0
00013C74 5928 003E                  		subq.b	#4,$3E(a0)
00013C78 6000                       		bra.s	loc_121A6
00013C7A                            ; ===========================================================================
00013C7A                            
00013C7A                            loc_1219A:
00013C7A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013C80 6700                       		beq.s	locret_121C0
00013C82 5828 003E                  		addq.b	#4,$3E(a0)
00013C86                            
00013C86                            loc_121A6:
00013C86 1028 003E                  		move.b	$3E(a0),d0
00013C8A 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013C90 323C 0400                  		move.w	#$400,d1
00013C94 C1C1                       		muls.w	d1,d0
00013C96 4840                       		swap	d0
00013C98 D068 0030                  		add.w	$30(a0),d0
00013C9C 3140 000C                  		move.w	d0,$C(a0)
00013CA0                            
00013CA0                            locret_121C0:
00013CA0 4E75                       		rts	
00013CA2                            ; ===========================================================================
00013CA2                            ; ---------------------------------------------------------------------------
00013CA2                            ; Sprite mappings - blocks (LZ)
00013CA2                            ; ---------------------------------------------------------------------------
00013CA2                            Map_obj61:
00013CA2                            	include "_maps\obj61.asm"
00013CA2                            ; ---------------------------------------------------------------------------
00013CA2                            ; Sprite mappings - blocks (LZ)
00013CA2                            ; ---------------------------------------------------------------------------
00013CA2 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013CA6 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013CAA 01                         byte_121CA:	dc.b 1
00013CAB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013CB0 02                         byte_121D0:	dc.b 2
00013CB1 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013CB6 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013CBB 01                         byte_121DB:	dc.b 1
00013CBC F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013CC1 01                         byte_121E1:	dc.b 1
00013CC2 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013CC8 00                         		even
00013CC8 00                         		even
00013CC8                            
00013CC8                            ; ===========================================================================
00013CC8                            ; ---------------------------------------------------------------------------
00013CC8                            ; Object 62 - gargoyle head (LZ)
00013CC8                            ; ---------------------------------------------------------------------------
00013CC8                            
00013CC8                            Obj62:					; XREF: Obj_Index
00013CC8 7000                       		moveq	#0,d0
00013CCA 1028 0024                  		move.b	$24(a0),d0
00013CCE 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013CD2 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013CD6 6000 D4C2                  		bra.w	MarkObjGone
00013CDA                            ; ===========================================================================
00013CDA 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013CDC 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013CDE 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013CE0 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013CE2                            
00013CE2 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013CEA                            ; ===========================================================================
00013CEA                            
00013CEA                            Obj62_Main:				; XREF: Obj62_Index
00013CEA 5428 0024                  		addq.b	#2,$24(a0)
00013CEE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013CF6 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013CFC 0028 0004 0001             		ori.b	#4,1(a0)
00013D02 117C 0003 0018             		move.b	#3,$18(a0)
00013D08 117C 0010 0019             		move.b	#$10,$19(a0)
00013D0E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013D12 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013D16 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013D1C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D22 0228 000F 0028             		andi.b	#$F,$28(a0)
00013D28                            
00013D28                            Obj62_MakeFire:				; XREF: Obj62_Index
00013D28 5328 001E                  		subq.b	#1,$1E(a0)
00013D2C 6600                       		bne.s	Obj62_NoFire
00013D2E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D34 6100 B628                  		bsr.w	ChkObjOnScreen
00013D38 6600                       		bne.s	Obj62_NoFire
00013D3A 6100 B83C                  		bsr.w	SingleObjLoad
00013D3E 6600                       		bne.s	Obj62_NoFire
00013D40 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013D44 5829 0024                  		addq.b	#4,$24(a1)
00013D48 3368 0008 0008             		move.w	8(a0),8(a1)
00013D4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013D54 1368 0001 0001             		move.b	1(a0),1(a1)
00013D5A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013D60                            
00013D60                            Obj62_NoFire:
00013D60 4E75                       		rts	
00013D62                            ; ===========================================================================
00013D62                            
00013D62                            Obj62_FireBall:				; XREF: Obj62_Index
00013D62 5428 0024                  		addq.b	#2,$24(a0)
00013D66 117C 0008 0016             		move.b	#8,$16(a0)
00013D6C 117C 0008 0017             		move.b	#8,$17(a0)
00013D72 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013D7A 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013D80 0028 0004 0001             		ori.b	#4,1(a0)
00013D86 117C 0004 0018             		move.b	#4,$18(a0)
00013D8C 117C 0098 0020             		move.b	#$98,$20(a0)
00013D92 117C 0008 0019             		move.b	#8,$19(a0)
00013D98 117C 0002 001A             		move.b	#2,$1A(a0)
00013D9E 5068 000C                  		addq.w	#8,$C(a0)
00013DA2 317C 0200 0010             		move.w	#$200,$10(a0)
00013DA8 0828 0000 0022             		btst	#0,$22(a0)
00013DAE 6600                       		bne.s	Obj62_Sound
00013DB0 4468 0010                  		neg.w	$10(a0)
00013DB4                            
00013DB4                            Obj62_Sound:
00013DB4 303C 00AE                  		move.w	#$AE,d0
00013DB8 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013DBE                            
00013DBE                            Obj62_AniFire:				; XREF: Obj62_Index
00013DBE 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013DC2 0200 0007                  		andi.b	#7,d0
00013DC6 6600                       		bne.s	Obj62_StopFire
00013DC8 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013DCE                            
00013DCE                            Obj62_StopFire:
00013DCE 6100 B2FA                  		bsr.w	SpeedToPos
00013DD2 0828 0000 0022             		btst	#0,$22(a0)
00013DD8 6600                       		bne.s	Obj62_StopFire2
00013DDA 76F8                       		moveq	#-8,d3
00013DDC 6100 0000                  		bsr.w	ObjHitWallLeft
00013DE0 4A41                       		tst.w	d1
00013DE2 6B00 B33C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013DE6 4E75                       		rts	
00013DE8                            ; ===========================================================================
00013DE8                            
00013DE8                            Obj62_StopFire2:
00013DE8 7608                       		moveq	#8,d3
00013DEA 6100 0000                  		bsr.w	ObjHitWallRight
00013DEE 4A41                       		tst.w	d1
00013DF0 6B00 B32E                  		bmi.w	DeleteObject
00013DF4 4E75                       		rts	
00013DF6                            ; ===========================================================================
00013DF6                            ; ---------------------------------------------------------------------------
00013DF6                            ; Sprite mappings - gargoyle head (LZ)
00013DF6                            ; ---------------------------------------------------------------------------
00013DF6                            Map_obj62:
00013DF6                            	include "_maps\obj62.asm"
00013DF6                            ; ---------------------------------------------------------------------------
00013DF6                            ; Sprite mappings - gargoyle head (LZ)
00013DF6                            ; ---------------------------------------------------------------------------
00013DF6 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013DFA 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013DFE 03                         byte_12320:	dc.b 3
00013DFF F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013E04 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013E09 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013E0E 01                         byte_12330:	dc.b 1
00013E0F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013E14 01                         byte_12336:	dc.b 1
00013E15 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013E1A                            		even
00013E1A                            		even
00013E1A                            
00013E1A                            ; ===========================================================================
00013E1A                            ; ---------------------------------------------------------------------------
00013E1A                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013E1A                            ; ---------------------------------------------------------------------------
00013E1A                            
00013E1A                            Obj63:					; XREF: Obj_Index
00013E1A 7000                       		moveq	#0,d0
00013E1C 1028 0024                  		move.b	$24(a0),d0
00013E20 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013E24 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013E28 3028 0030                  		move.w	$30(a0),d0
00013E2C 0240 FF80                  		andi.w	#$FF80,d0
00013E30 3238 F700                  		move.w	($FFFFF700).w,d1
00013E34 0441 0080                  		subi.w	#$80,d1
00013E38 0241 FF80                  		andi.w	#$FF80,d1
00013E3C 9041                       		sub.w	d1,d0
00013E3E 0C40 0280                  		cmpi.w	#$280,d0
00013E42 6200                       		bhi.s	loc_1236A
00013E44                            
00013E44                            Obj63_Display:				; XREF: loc_1236A
00013E44 6000 B29E                  		bra.w	DisplaySprite
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            loc_1236A:				; XREF: Obj63
00013E48 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013E4E 6600                       		bne.s	loc_12378
00013E50 0C40 FF80                  		cmpi.w	#-$80,d0
00013E54 64EE                       		bcc.s	Obj63_Display
00013E56                            
00013E56                            loc_12378:
00013E56 1028 002F                  		move.b	$2F(a0),d0
00013E5A 6A00 B2C4                  		bpl.w	DeleteObject
00013E5E 0240 007F                  		andi.w	#$7F,d0
00013E62 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013E66 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013E6C 6000 B2B2                  		bra.w	DeleteObject
00013E70                            ; ===========================================================================
00013E70 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013E72 0000                       		dc.w loc_124B2-Obj63_Index
00013E74 0000                       		dc.w loc_124C2-Obj63_Index
00013E76 0000                       		dc.w loc_124DE-Obj63_Index
00013E78                            ; ===========================================================================
00013E78                            
00013E78                            Obj63_Main:				; XREF: Obj63_Index
00013E78 1028 0028                  		move.b	$28(a0),d0
00013E7C 6B00 0000                  		bmi.w	loc_12460
00013E80 5428 0024                  		addq.b	#2,$24(a0)
00013E84 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013E8C 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013E92 0028 0004 0001             		ori.b	#4,1(a0)
00013E98 117C 0010 0019             		move.b	#$10,$19(a0)
00013E9E 117C 0004 0018             		move.b	#4,$18(a0)
00013EA4 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013EAA 6600                       		bne.s	loc_123E2
00013EAC 5828 0024                  		addq.b	#4,$24(a0)
00013EB0 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013EB6 117C 0001 0018             		move.b	#1,$18(a0)
00013EBC 6000 0000                  		bra.w	loc_124DE
00013EC0                            ; ===========================================================================
00013EC0                            
00013EC0                            loc_123E2:
00013EC0 117C 0004 001A             		move.b	#4,$1A(a0)
00013EC6 7000                       		moveq	#0,d0
00013EC8 1028 0028                  		move.b	$28(a0),d0
00013ECC 3200                       		move.w	d0,d1
00013ECE E648                       		lsr.w	#3,d0
00013ED0 0240 001E                  		andi.w	#$1E,d0
00013ED4 45FA 0000                  		lea	Obj63_Data(pc),a2
00013ED8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013EDC 315A 0038                  		move.w	(a2)+,$38(a0)
00013EE0 315A 0030                  		move.w	(a2)+,$30(a0)
00013EE4 214A 003C                  		move.l	a2,$3C(a0)
00013EE8 0241 000F                  		andi.w	#$F,d1
00013EEC E549                       		lsl.w	#2,d1
00013EEE 1141 0038                  		move.b	d1,$38(a0)
00013EF2 117C 0004 003A             		move.b	#4,$3A(a0)
00013EF8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013EFC 6700                       		beq.s	loc_1244C
00013EFE 117C 0001 003B             		move.b	#1,$3B(a0)
00013F04 4428 003A                  		neg.b	$3A(a0)
00013F08 7200                       		moveq	#0,d1
00013F0A 1228 0038                  		move.b	$38(a0),d1
00013F0E D228 003A                  		add.b	$3A(a0),d1
00013F12 B228 0039                  		cmp.b	$39(a0),d1
00013F16 6500                       		bcs.s	loc_12448
00013F18 1001                       		move.b	d1,d0
00013F1A 7200                       		moveq	#0,d1
00013F1C 4A00                       		tst.b	d0
00013F1E 6A00                       		bpl.s	loc_12448
00013F20 1228 0039                  		move.b	$39(a0),d1
00013F24 5901                       		subq.b	#4,d1
00013F26                            
00013F26                            loc_12448:
00013F26 1141 0038                  		move.b	d1,$38(a0)
00013F2A                            
00013F2A                            loc_1244C:
00013F2A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013F30 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013F36 6100 0000                  		bsr.w	Obj63_ChangeDir
00013F3A 6000 0000                  		bra.w	loc_124B2
00013F3E                            ; ===========================================================================
00013F3E                            
00013F3E                            loc_12460:				; XREF: Obj63_Main
00013F3E 1140 002F                  		move.b	d0,$2F(a0)
00013F42 0240 007F                  		andi.w	#$7F,d0
00013F46 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013F4A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013F50 6600 B1CE                  		bne.w	DeleteObject
00013F54 D040                       		add.w	d0,d0
00013F56 0240 001E                  		andi.w	#$1E,d0
00013F5A 0640 0070                  		addi.w	#$70,d0
00013F5E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013F64 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013F68 321A                       		move.w	(a2)+,d1
00013F6A 2248                       		movea.l	a0,a1
00013F6C 6000                       		bra.s	Obj63_MakePtfms
00013F6E                            ; ===========================================================================
00013F6E                            
00013F6E                            Obj63_Loop:
00013F6E 6100 B608                  		bsr.w	SingleObjLoad
00013F72 6600                       		bne.s	loc_124AA
00013F74                            
00013F74                            Obj63_MakePtfms:			; XREF: loc_12460
00013F74 12BC 0063                  		move.b	#$63,0(a1)
00013F78 335A 0008                  		move.w	(a2)+,8(a1)
00013F7C 335A 000C                  		move.w	(a2)+,$C(a1)
00013F80 301A                       		move.w	(a2)+,d0
00013F82 1340 0028                  		move.b	d0,$28(a1)
00013F86                            
00013F86                            loc_124AA:
00013F86 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013F8A                            
00013F8A 588F                       		addq.l	#4,sp
00013F8C 4E75                       		rts	
00013F8E                            ; ===========================================================================
00013F8E                            
00013F8E                            loc_124B2:				; XREF: Obj63_Index
00013F8E 7200                       		moveq	#0,d1
00013F90 1228 0019                  		move.b	$19(a0),d1
00013F94 4EB9 0000 8E42             		jsr	(PlatformObject).l
00013F9A 6000 0000                  		bra.w	sub_12502
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            loc_124C2:				; XREF: Obj63_Index
00013F9E 7200                       		moveq	#0,d1
00013FA0 1228 0019                  		move.b	$19(a0),d1
00013FA4 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
00013FAA 3F28 0008                  		move.w	8(a0),-(sp)
00013FAE 6100 0000                  		bsr.w	sub_12502
00013FB2 341F                       		move.w	(sp)+,d2
00013FB4 4EF9 0000 9520             		jmp	(MvSonicOnPtfm2).l
00013FBA                            ; ===========================================================================
00013FBA                            
00013FBA                            loc_124DE:				; XREF: Obj63_Index
00013FBA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013FBE 0240 0003                  		andi.w	#3,d0
00013FC2 6600                       		bne.s	loc_124FC
00013FC4 7201                       		moveq	#1,d1
00013FC6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013FCA 6700                       		beq.s	loc_124F2
00013FCC 4401                       		neg.b	d1
00013FCE                            
00013FCE                            loc_124F2:
00013FCE D328 001A                  		add.b	d1,$1A(a0)
00013FD2 0228 0003 001A             		andi.b	#3,$1A(a0)
00013FD8                            
00013FD8                            loc_124FC:
00013FD8 588F                       		addq.l	#4,sp
00013FDA 6000 D1BE                  		bra.w	MarkObjGone
00013FDE                            
00013FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FDE                            
00013FDE                            
00013FDE                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013FDE 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013FE2 6700                       		beq.s	loc_12520
00013FE4 4A28 003B                  		tst.b	$3B(a0)
00013FE8 6600                       		bne.s	loc_12520
00013FEA 117C 0001 003B             		move.b	#1,$3B(a0)
00013FF0 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013FF6 4428 003A                  		neg.b	$3A(a0)
00013FFA 6000                       		bra.s	loc_12534
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            loc_12520:
00013FFC 3028 0008                  		move.w	8(a0),d0
00014000 B068 0034                  		cmp.w	$34(a0),d0
00014004 6600                       		bne.s	loc_1256A
00014006 3028 000C                  		move.w	$C(a0),d0
0001400A B068 0036                  		cmp.w	$36(a0),d0
0001400E 6600                       		bne.s	loc_1256A
00014010                            
00014010                            loc_12534:
00014010 7200                       		moveq	#0,d1
00014012 1228 0038                  		move.b	$38(a0),d1
00014016 D228 003A                  		add.b	$3A(a0),d1
0001401A B228 0039                  		cmp.b	$39(a0),d1
0001401E 6500                       		bcs.s	loc_12552
00014020 1001                       		move.b	d1,d0
00014022 7200                       		moveq	#0,d1
00014024 4A00                       		tst.b	d0
00014026 6A00                       		bpl.s	loc_12552
00014028 1228 0039                  		move.b	$39(a0),d1
0001402C 5901                       		subq.b	#4,d1
0001402E                            
0001402E                            loc_12552:
0001402E 1141 0038                  		move.b	d1,$38(a0)
00014032 2268 003C                  		movea.l	$3C(a0),a1
00014036 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001403C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014042 6100 0000                  		bsr.w	Obj63_ChangeDir
00014046                            
00014046                            loc_1256A:
00014046 6100 B082                  		bsr.w	SpeedToPos
0001404A 4E75                       		rts	
0001404C                            ; End of function sub_12502
0001404C                            
0001404C                            
0001404C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001404C                            
0001404C                            
0001404C                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001404C 7000                       		moveq	#0,d0
0001404E 343C FF00                  		move.w	#-$100,d2
00014052 3028 0008                  		move.w	8(a0),d0
00014056 9068 0034                  		sub.w	$34(a0),d0
0001405A 6400                       		bcc.s	loc_12584
0001405C 4440                       		neg.w	d0
0001405E 4442                       		neg.w	d2
00014060                            
00014060                            loc_12584:
00014060 7200                       		moveq	#0,d1
00014062 363C FF00                  		move.w	#-$100,d3
00014066 3228 000C                  		move.w	$C(a0),d1
0001406A 9268 0036                  		sub.w	$36(a0),d1
0001406E 6400                       		bcc.s	loc_12598
00014070 4441                       		neg.w	d1
00014072 4443                       		neg.w	d3
00014074                            
00014074                            loc_12598:
00014074 B240                       		cmp.w	d0,d1
00014076 6500                       		bcs.s	loc_125C2
00014078 3028 0008                  		move.w	8(a0),d0
0001407C 9068 0034                  		sub.w	$34(a0),d0
00014080 6700                       		beq.s	loc_125AE
00014082 48C0                       		ext.l	d0
00014084 E180                       		asl.l	#8,d0
00014086 81C1                       		divs.w	d1,d0
00014088 4440                       		neg.w	d0
0001408A                            
0001408A                            loc_125AE:
0001408A 3140 0010                  		move.w	d0,$10(a0)
0001408E 3143 0012                  		move.w	d3,$12(a0)
00014092 4840                       		swap	d0
00014094 3140 000A                  		move.w	d0,$A(a0)
00014098 4268 000E                  		clr.w	$E(a0)
0001409C 4E75                       		rts	
0001409E                            ; ===========================================================================
0001409E                            
0001409E                            loc_125C2:				; XREF: Obj63_ChangeDir
0001409E 3228 000C                  		move.w	$C(a0),d1
000140A2 9268 0036                  		sub.w	$36(a0),d1
000140A6 6700                       		beq.s	loc_125D4
000140A8 48C1                       		ext.l	d1
000140AA E181                       		asl.l	#8,d1
000140AC 83C0                       		divs.w	d0,d1
000140AE 4441                       		neg.w	d1
000140B0                            
000140B0                            loc_125D4:
000140B0 3141 0012                  		move.w	d1,$12(a0)
000140B4 3142 0010                  		move.w	d2,$10(a0)
000140B8 4841                       		swap	d1
000140BA 3141 000E                  		move.w	d1,$E(a0)
000140BE 4268 000A                  		clr.w	$A(a0)
000140C2 4E75                       		rts	
000140C4                            ; End of function Obj63_ChangeDir
000140C4                            
000140C4                            ; ===========================================================================
000140C4 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000140C6 0000                       		dc.w word_12610-Obj63_Data
000140C8 0000                       		dc.w word_12628-Obj63_Data
000140CA 0000                       		dc.w word_1263C-Obj63_Data
000140CC 0000                       		dc.w word_12650-Obj63_Data
000140CE 0000                       		dc.w word_12668-Obj63_Data
000140D0 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000140E0 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000140EC 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000140FC 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014104 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014118 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001412C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014144 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014158                            
00014158                            ; ---------------------------------------------------------------------------
00014158                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014158                            ; ---------------------------------------------------------------------------
00014158                            Map_obj63:
00014158                            	include "_maps\obj63.asm"
00014158                            ; ---------------------------------------------------------------------------
00014158                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014158                            ; ---------------------------------------------------------------------------
00014158 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001415C 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00014160 0000                       		dc.w byte_1269E-Map_obj63
00014162 01                         byte_12686:	dc.b 1
00014163 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014168 01                         byte_1268C:	dc.b 1
00014169 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001416E 01                         byte_12692:	dc.b 1
0001416F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014174 01                         byte_12698:	dc.b 1
00014175 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001417A 01                         byte_1269E:	dc.b 1
0001417B F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014180                            		even
00014180                            		even
00014180                            
00014180                            ; ===========================================================================
00014180                            ; ---------------------------------------------------------------------------
00014180                            ; Object 64 - bubbles (LZ)
00014180                            ; ---------------------------------------------------------------------------
00014180                            
00014180                            Obj64:					; XREF: Obj_Index
00014180 7000                       		moveq	#0,d0
00014182 1028 0024                  		move.b	$24(a0),d0
00014186 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001418A 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001418E                            ; ===========================================================================
0001418E 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00014190 0000                       		dc.w Obj64_Animate-Obj64_Index
00014192 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014194 0000                       		dc.w Obj64_Display2-Obj64_Index
00014196 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014198 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001419A                            ; ===========================================================================
0001419A                            
0001419A                            Obj64_Main:				; XREF: Obj64_Index
0001419A 5428 0024                  		addq.b	#2,$24(a0)
0001419E 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000141A6 317C 8348 0002             		move.w	#$8348,2(a0)
000141AC 117C 0084 0001             		move.b	#$84,1(a0)
000141B2 117C 0010 0019             		move.b	#$10,$19(a0)
000141B8 117C 0001 0018             		move.b	#1,$18(a0)
000141BE 1028 0028                  		move.b	$28(a0),d0	; get object type
000141C2 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000141C4 5028 0024                  		addq.b	#8,$24(a0)
000141C8 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000141CC 1140 0032                  		move.b	d0,$32(a0)
000141D0 1140 0033                  		move.b	d0,$33(a0)
000141D4 117C 0006 001C             		move.b	#6,$1C(a0)
000141DA 6000 0000                  		bra.w	Obj64_BblMaker
000141DE                            ; ===========================================================================
000141DE                            
000141DE                            Obj64_Bubble:				; XREF: Obj64_Main
000141DE 1140 001C                  		move.b	d0,$1C(a0)
000141E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000141E8 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000141EE 4EB9 0000 2B54             		jsr	(RandomNumber).l
000141F4 1140 0026                  		move.b	d0,$26(a0)
000141F8                            
000141F8                            Obj64_Animate:				; XREF: Obj64_Index
000141F8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000141FE 4EB9 0000 C138             		jsr	AnimateSprite
00014204 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001420A 6600                       		bne.s	Obj64_ChkWater
0001420C 117C 0001 002E             		move.b	#1,$2E(a0)
00014212                            
00014212                            Obj64_ChkWater:				; XREF: Obj64_Index
00014212 3038 F646                  		move.w	($FFFFF646).w,d0
00014216 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001421A 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001421C                            
0001421C                            Obj64_Burst:				; XREF: Obj64_Wobble
0001421C 117C 0006 0024             		move.b	#6,$24(a0)
00014222 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014226 6000 0000                  		bra.w	Obj64_Display2
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001422A 1028 0026                  		move.b	$26(a0),d0
0001422E 5228 0026                  		addq.b	#1,$26(a0)
00014232 0240 007F                  		andi.w	#$7F,d0
00014236 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001423C 1031 0000                  		move.b	(a1,d0.w),d0
00014240 4880                       		ext.w	d0
00014242 D068 0030                  		add.w	$30(a0),d0
00014246 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001424A 4A28 002E                  		tst.b	$2E(a0)
0001424E 6700                       		beq.s	Obj64_Display
00014250 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00014254 6700                       		beq.s	Obj64_Display	; if not, branch
00014256                            
00014256 6100 0000                  		bsr.w	StopDrowning	; cancel countdown music
0001425A 303C 00AD                  		move.w	#$AD,d0
0001425E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00014264 43F8 D000                  		lea	($FFFFD000).w,a1
00014268 4269 0010                  		clr.w	$10(a1)
0001426C 4269 0012                  		clr.w	$12(a1)
00014270 4269 0014                  		clr.w	$14(a1)
00014274 137C 0015 001C             		move.b	#$15,$1C(a1)
0001427A 337C 0023 003E             		move.w	#$23,$3E(a1)
00014280 137C 0000 003C             		move.b	#0,$3C(a1)
00014286 08A9 0005 0022             		bclr	#5,$22(a1)
0001428C 08A9 0004 0022             		bclr	#4,$22(a1)
00014292 0829 0002 0022             		btst	#2,$22(a1)
00014298 6700 FF82                  		beq.w	Obj64_Burst
0001429C 08A9 0002 0022             		bclr	#2,$22(a1)
000142A2 137C 0013 0016             		move.b	#$13,$16(a1)
000142A8 137C 0009 0017             		move.b	#9,$17(a1)
000142AE 5B69 000C                  		subq.w	#5,$C(a1)
000142B2 6000 FF68                  		bra.w	Obj64_Burst
000142B6                            ; ===========================================================================
000142B6                            
000142B6                            Obj64_Display:				; XREF: Obj64_Wobble
000142B6 6100 AE12                  		bsr.w	SpeedToPos
000142BA 4A28 0001                  		tst.b	1(a0)
000142BE 6A00                       		bpl.s	Obj64_Delete
000142C0 4EFA AE22                  		jmp	DisplaySprite
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            Obj64_Delete:
000142C4 4EFA AE5A                  		jmp	DeleteObject
000142C8                            ; ===========================================================================
000142C8                            
000142C8                            Obj64_Display2:				; XREF: Obj64_Index
000142C8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142CE 4EB9 0000 C138             		jsr	AnimateSprite
000142D4 4A28 0001                  		tst.b	1(a0)
000142D8 6A00                       		bpl.s	Obj64_Delete2
000142DA 4EFA AE08                  		jmp	DisplaySprite
000142DE                            ; ===========================================================================
000142DE                            
000142DE                            Obj64_Delete2:
000142DE 4EFA AE40                  		jmp	DeleteObject
000142E2                            ; ===========================================================================
000142E2                            
000142E2                            Obj64_Delete3:				; XREF: Obj64_Index
000142E2 6000 AE3C                  		bra.w	DeleteObject
000142E6                            ; ===========================================================================
000142E6                            
000142E6                            Obj64_BblMaker:				; XREF: Obj64_Index
000142E6 4A68 0036                  		tst.w	$36(a0)
000142EA 6600                       		bne.s	loc_12874
000142EC 3038 F646                  		move.w	($FFFFF646).w,d0
000142F0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142F4 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000142F8 4A28 0001                  		tst.b	1(a0)
000142FC 6A00 0000                  		bpl.w	Obj64_ChkDel
00014300 5368 0038                  		subq.w	#1,$38(a0)
00014304 6A00 0000                  		bpl.w	loc_12914
00014308 317C 0001 0036             		move.w	#1,$36(a0)
0001430E                            
0001430E                            loc_1283A:
0001430E 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014314 3200                       		move.w	d0,d1
00014316 0240 0007                  		andi.w	#7,d0
0001431A 0C40 0006                  		cmpi.w	#6,d0
0001431E 64EE                       		bcc.s	loc_1283A
00014320                            
00014320 1140 0034                  		move.b	d0,$34(a0)
00014324 0241 000C                  		andi.w	#$C,d1
00014328 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001432E D2C1                       		adda.w	d1,a1
00014330 2149 003C                  		move.l	a1,$3C(a0)
00014334 5328 0032                  		subq.b	#1,$32(a0)
00014338 6A00                       		bpl.s	loc_12872
0001433A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014340 08E8 0007 0036             		bset	#7,$36(a0)
00014346                            
00014346                            loc_12872:
00014346 6000                       		bra.s	loc_1287C
00014348                            ; ===========================================================================
00014348                            
00014348                            loc_12874:				; XREF: Obj64_BblMaker
00014348 5368 0038                  		subq.w	#1,$38(a0)
0001434C 6A00 0000                  		bpl.w	loc_12914
00014350                            
00014350                            loc_1287C:
00014350 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014356 0240 001F                  		andi.w	#$1F,d0
0001435A 3140 0038                  		move.w	d0,$38(a0)
0001435E 6100 B218                  		bsr.w	SingleObjLoad
00014362 6600                       		bne.s	loc_128F8
00014364 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014368 3368 0008 0008             		move.w	8(a0),8(a1)
0001436E 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014374 0240 000F                  		andi.w	#$F,d0
00014378 5140                       		subq.w	#8,d0
0001437A D169 0008                  		add.w	d0,8(a1)
0001437E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014384 7000                       		moveq	#0,d0
00014386 1028 0034                  		move.b	$34(a0),d0
0001438A 2468 003C                  		movea.l	$3C(a0),a2
0001438E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014394 0828 0007 0036             		btst	#7,$36(a0)
0001439A 6700                       		beq.s	loc_128F8
0001439C 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143A2 0240 0003                  		andi.w	#3,d0
000143A6 6600                       		bne.s	loc_128E4
000143A8 08E8 0006 0036             		bset	#6,$36(a0)
000143AE 6600                       		bne.s	loc_128F8
000143B0 137C 0002 0028             		move.b	#2,$28(a1)
000143B6                            
000143B6                            loc_128E4:
000143B6 4A28 0034                  		tst.b	$34(a0)
000143BA 6600                       		bne.s	loc_128F8
000143BC 08E8 0006 0036             		bset	#6,$36(a0)
000143C2 6600                       		bne.s	loc_128F8
000143C4 137C 0002 0028             		move.b	#2,$28(a1)
000143CA                            
000143CA                            loc_128F8:
000143CA 5328 0034                  		subq.b	#1,$34(a0)
000143CE 6A00                       		bpl.s	loc_12914
000143D0 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143D6 0240 007F                  		andi.w	#$7F,d0
000143DA 0640 0080                  		addi.w	#$80,d0
000143DE D168 0038                  		add.w	d0,$38(a0)
000143E2 4268 0036                  		clr.w	$36(a0)
000143E6                            
000143E6                            loc_12914:
000143E6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000143EC 4EB9 0000 C138             		jsr	AnimateSprite
000143F2                            
000143F2                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000143F2 3028 0008                  		move.w	8(a0),d0
000143F6 0240 FF80                  		andi.w	#$FF80,d0
000143FA 3238 F700                  		move.w	($FFFFF700).w,d1
000143FE 0441 0080                  		subi.w	#$80,d1
00014402 0241 FF80                  		andi.w	#$FF80,d1
00014406 9041                       		sub.w	d1,d0
00014408 0C40 0280                  		cmpi.w	#$280,d0
0001440C 6200 AD12                  		bhi.w	DeleteObject
00014410 3038 F646                  		move.w	($FFFFF646).w,d0
00014414 B068 000C                  		cmp.w	$C(a0),d0
00014418 6500 ACCA                  		bcs.w	DisplaySprite
0001441C 4E75                       		rts	
0001441E                            ; ===========================================================================
0001441E                            ; bubble production sequence
0001441E                            
0001441E                            ; 0 = small bubble, 1 =	large bubble
0001441E                            
0001441E 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014430                            
00014430                            ; ===========================================================================
00014430                            
00014430                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00014430 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014434 6B00                       		bmi.s	loc_12998
00014436 43F8 D000                  		lea	($FFFFD000).w,a1
0001443A 3029 0008                  		move.w	8(a1),d0
0001443E 3228 0008                  		move.w	8(a0),d1
00014442 0441 0010                  		subi.w	#$10,d1
00014446 B240                       		cmp.w	d0,d1
00014448 6400                       		bcc.s	loc_12998
0001444A 0641 0020                  		addi.w	#$20,d1
0001444E B240                       		cmp.w	d0,d1
00014450 6500                       		bcs.s	loc_12998
00014452 3029 000C                  		move.w	$C(a1),d0
00014456 3228 000C                  		move.w	$C(a0),d1
0001445A B240                       		cmp.w	d0,d1
0001445C 6400                       		bcc.s	loc_12998
0001445E 0641 0010                  		addi.w	#$10,d1
00014462 B240                       		cmp.w	d0,d1
00014464 6500                       		bcs.s	loc_12998
00014466 7001                       		moveq	#1,d0
00014468 4E75                       		rts	
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            loc_12998:
0001446A 7000                       		moveq	#0,d0
0001446C 4E75                       		rts	
0001446E                            ; ===========================================================================
0001446E                            Ani_obj64:
0001446E                            	include "_anim\obj64.asm"
0001446E                            ; ---------------------------------------------------------------------------
0001446E                            ; Animation script - bubbles (LZ)
0001446E                            ; ---------------------------------------------------------------------------
0001446E 0000                       		dc.w byte_129AA-Ani_obj64
00014470 0000                       		dc.w byte_129B0-Ani_obj64
00014472 0000                       		dc.w byte_129B6-Ani_obj64
00014474 0000                       		dc.w byte_129BE-Ani_obj64
00014476 0000                       		dc.w byte_129BE-Ani_obj64
00014478 0000                       		dc.w byte_129C0-Ani_obj64
0001447A 0000                       		dc.w byte_129C6-Ani_obj64
0001447C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014482 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00014488 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014490 04FC                       byte_129BE:	dc.b 4,	$FC
00014492 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00014498 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001449E 00                         		even
0001449E 00                         		even
0001449E                            
0001449E                            ; ---------------------------------------------------------------------------
0001449E                            ; Sprite mappings - bubbles (LZ)
0001449E                            ; ---------------------------------------------------------------------------
0001449E                            Map_obj64:
0001449E                            	include "_maps\obj64.asm"
0001449E                            ; ---------------------------------------------------------------------------
0001449E                            ; Sprite mappings - bubbles (LZ)
0001449E                            ; ---------------------------------------------------------------------------
0001449E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000144A2 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000144A6 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000144AA 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000144AE 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000144B2 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000144B6 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000144BA 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000144BE 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000144C2 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000144C6 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000144CA 0000                       		dc.w byte_12A9C-Map_obj64
000144CC 01                         byte_129FA:	dc.b 1
000144CD FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000144D2 01                         byte_12A00:	dc.b 1
000144D3 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000144D8 01                         byte_12A06:	dc.b 1
000144D9 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000144DE 01                         byte_12A0C:	dc.b 1
000144DF F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000144E4 01                         byte_12A12:	dc.b 1
000144E5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000144EA 01                         byte_12A18:	dc.b 1
000144EB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000144F0 01                         byte_12A1E:	dc.b 1
000144F1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000144F6 04                         byte_12A24:	dc.b 4
000144F7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000144FC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014501 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014506 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001450B 04                         byte_12A39:	dc.b 4
0001450C F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014511 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014516 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001451B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014520 01                         byte_12A4E:	dc.b 1
00014521 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00014526 01                         byte_12A54:	dc.b 1
00014527 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001452C 01                         byte_12A5A:	dc.b 1
0001452D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014532 01                         byte_12A60:	dc.b 1
00014533 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014538 01                         byte_12A66:	dc.b 1
00014539 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001453E 01                         byte_12A6C:	dc.b 1
0001453F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014544 01                         byte_12A72:	dc.b 1
00014545 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001454A 01                         byte_12A78:	dc.b 1
0001454B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014550 01                         byte_12A7E:	dc.b 1
00014551 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014556 01                         byte_12A84:	dc.b 1
00014557 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001455C 01                         byte_12A8A:	dc.b 1
0001455D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014562 01                         byte_12A90:	dc.b 1
00014563 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014568 01                         byte_12A96:	dc.b 1
00014569 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001456E 00                         byte_12A9C:	dc.b 0
00014570 00                         		even
00014570 00                         		even
00014570                            
00014570                            ; ===========================================================================
00014570                            ; ---------------------------------------------------------------------------
00014570                            ; Object 65 - waterfalls (LZ)
00014570                            ; ---------------------------------------------------------------------------
00014570                            
00014570                            Obj65:					; XREF: Obj_Index
00014570 7000                       		moveq	#0,d0
00014572 1028 0024                  		move.b	$24(a0),d0
00014576 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001457A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001457E                            ; ===========================================================================
0001457E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014580 0000                       		dc.w Obj65_Animate-Obj65_Index
00014582 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014584 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014586 0000                       		dc.w loc_12B36-Obj65_Index
00014588                            ; ===========================================================================
00014588                            
00014588                            Obj65_Main:				; XREF: Obj65_Index
00014588 5828 0024                  		addq.b	#4,$24(a0)
0001458C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014594 317C 4259 0002             		move.w	#$4259,2(a0)
0001459A 0028 0004 0001             		ori.b	#4,1(a0)
000145A0 117C 0018 0019             		move.b	#$18,$19(a0)
000145A6 117C 0001 0018             		move.b	#1,$18(a0)
000145AC 1028 0028                  		move.b	$28(a0),d0	; get object type
000145B0 6A00                       		bpl.s	loc_12AE6
000145B2 08E8 0007 0002             		bset	#7,2(a0)
000145B8                            
000145B8                            loc_12AE6:
000145B8 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000145BC 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000145C0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000145C4 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000145C6 4228 0018                  		clr.b	$18(a0)
000145CA 5528 0024                  		subq.b	#2,$24(a0)
000145CE 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000145D4 6700                       		beq.s	loc_12B0A	; if not, branch
000145D6 117C 0006 0024             		move.b	#6,$24(a0)
000145DC                            
000145DC                            loc_12B0A:
000145DC 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000145E2 6700                       		beq.s	Obj65_Animate	; if not, branch
000145E4 117C 0008 0024             		move.b	#8,$24(a0)
000145EA                            
000145EA                            Obj65_Animate:				; XREF: Obj65_Index
000145EA 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000145F0 4EB9 0000 C138             		jsr	AnimateSprite
000145F6                            
000145F6                            Obj65_ChkDel:				; XREF: Obj65_Index
000145F6 6000 CBA2                  		bra.w	MarkObjGone
000145FA                            ; ===========================================================================
000145FA                            
000145FA                            Obj65_FixHeight:			; XREF: Obj65_Index
000145FA 3038 F646                  		move.w	($FFFFF646).w,d0
000145FE 0440 0010                  		subi.w	#$10,d0
00014602 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00014606 60E2                       		bra.s	Obj65_Animate
00014608                            ; ===========================================================================
00014608                            
00014608                            loc_12B36:				; XREF: Obj65_Index
00014608 08A8 0007 0002             		bclr	#7,2(a0)
0001460E 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00014614 6600                       		bne.s	Obj65_Animate2
00014616 08E8 0007 0002             		bset	#7,2(a0)
0001461C                            
0001461C                            Obj65_Animate2:
0001461C 60CC                       		bra.s	Obj65_Animate
0001461E                            ; ===========================================================================
0001461E                            Ani_obj65:
0001461E                            	include "_anim\obj65.asm"
0001461E                            ; ---------------------------------------------------------------------------
0001461E                            ; Animation script - waterfall (LZ)
0001461E                            ; ---------------------------------------------------------------------------
0001461E 0000                       		dc.w byte_12B4E-Ani_obj65
00014620 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014626 00                         		even
00014626 00                         		even
00014626                            
00014626                            ; ---------------------------------------------------------------------------
00014626                            ; Sprite mappings - waterfalls (LZ)
00014626                            ; ---------------------------------------------------------------------------
00014626                            Map_obj65:
00014626                            	include "_maps\obj65.asm"
00014626                            ; ---------------------------------------------------------------------------
00014626                            ; Sprite mappings - waterfalls (LZ)
00014626                            ; ---------------------------------------------------------------------------
00014626 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001462A 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001462E 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00014632 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014636 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001463A 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001463E 01                         byte_12B6C:	dc.b 1
0001463F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014644 02                         byte_12B72:	dc.b 2
00014645 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001464A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001464F 02                         byte_12B7D:	dc.b 2
00014650 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014655 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001465A 01                         byte_12B88:	dc.b 1
0001465B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014660 02                         byte_12B8E:	dc.b 2
00014661 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014666 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001466B 01                         byte_12B99:	dc.b 1
0001466C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014671 01                         byte_12B9F:	dc.b 1
00014672 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014677 01                         byte_12BA5:	dc.b 1
00014678 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001467D 02                         byte_12BAB:	dc.b 2
0001467E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014683 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014688 02                         byte_12BB6:	dc.b 2
00014689 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001468E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014693 02                         byte_12BC1:	dc.b 2
00014694 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014699 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001469E 02                         byte_12BCC:	dc.b 2
0001469F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000146A4 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000146AA 00                         		even
000146AA 00                         		even
000146AA                            
000146AA                            SpinDash_dust:
000146AA                            	include "_inc\spindash_dust.asm"
000146AA                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
000146AA 7000                       		moveq	#0,d0
000146AC 1028 0024                  		move.b	$24(a0),d0
000146B0 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
000146B4 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
000146B8                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146B8 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
000146BA 0000                       		dc loc_1DD90-off_1DD2E; 1
000146BC 0000                       		dc loc_1DE46-off_1DD2E; 2
000146BE 0000                       		dc loc_1DE4A-off_1DD2E; 3
000146C0                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000146C0                            
000146C0                            loc_1DD36:				; DATA XREF: h+6DBA?o
000146C0 5428 0024                  		addq.b	#2,$24(a0)
000146C4 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
000146CC 0028 0004 0001             		or.b	#4,1(a0)
000146D2 117C 0001 0018             		move.b	#1,$18(a0)
000146D8 117C 0010 0019             		move.b	#$10,$19(a0)
000146DE 317C 07A0 0002             		move	#$7A0,2(a0)
000146E4 317C D000 003E             		move	#-$3000,$3E(a0)
000146EA 317C F400 003C             		move	#$F400,$3C(a0)
000146F0 B0FC D1C0                  		cmp	#-$2E40,a0
000146F4 6700                       		beq.s	loc_1DD8C
000146F6 117C 0001 0034             		move.b	#1,$34(a0)
000146FC                            ;		cmp	#2,($FFFFFF70).w
000146FC                            ;		beq.s	loc_1DD8C
000146FC                            ;		move	#$48C,2(a0)
000146FC                            ;		move	#-$4FC0,$3E(a0)
000146FC                            ;		move	#-$6E80,$3C(a0)
000146FC                            
000146FC                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000146FC                            ;		bsr.w	sub_16D6E
000146FC                            
000146FC                            loc_1DD90:				; DATA XREF: h+6DBA?o
000146FC 3468 003E                  		movea.w	$3E(a0),a2
00014700 7000                       		moveq	#0,d0
00014702 1028 001C                  		move.b	$1C(a0),d0
00014706 D040                       		add	d0,d0
00014708 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001470C 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014710                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014710 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014712 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014714 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014716 0000                       		dc loc_1DE20-off_1DDA4; 3
00014718                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014718                            
00014718                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014718 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001471E 4A28 001D                  		tst.b	$1D(a0)
00014722 6600                       		bne.s	loc_1DE28
00014724 316A 0008 0008             		move	8(a2),8(a0)
0001472A 117C 0000 0022             		move.b	#0,$22(a0)
00014730 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014736 6000                       		bra.s	loc_1DE28
00014738                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014738                            
00014738                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014738                            ;		cmp.b	#$C,$28(a2)
00014738                            ;		bcs.s	loc_1DE3E
00014738 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001473E 6400                       		bcc.s	loc_1DE3E
00014740 4A2A 0039                  		tst.b	$39(a2)
00014744 6700                       		beq.s	loc_1DE3E
00014746 316A 0008 0008             		move	8(a2),8(a0)
0001474C 316A 000C 000C             		move	$C(a2),$C(a0)
00014752 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014758 0228 0001 0022             		and.b	#1,$22(a0)
0001475E 4A28 0034                  		tst.b	$34(a0)
00014762 6700                       		beq.s	loc_1DE06
00014764 5968 000C                  		sub	#4,$C(a0)
00014768                            
00014768                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014768 4A28 001D                  		tst.b	$1D(a0)
0001476C 6600                       		bne.s	loc_1DE28
0001476E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014774 4A6A 0002                  		tst	2(a2)
00014778 6A00                       		bpl.s	loc_1DE28
0001477A 0068 8000 0002             		or	#-$8000,2(a0)
00014780                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014780                            
00014780                            loc_1DE20:				; DATA XREF: h+6E30?o
00014780                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014780 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014786 4EB9 0000 C138             		jsr	AnimateSprite
0001478C 6100 0000                  		bsr.w	loc_1DEE4
00014790 4EFA A952                  		jmp	DisplaySprite
00014794                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014794                            
00014794                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014794 117C 0000 001C             		move.b	#0,$1C(a0)
0001479A 4E75                       		rts	
0001479C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001479C                            
0001479C                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001479C 6000 A982                  		bra.w	DeleteObject
000147A0                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147A0                            
000147A0                            
000147A0                            
000147A0                            loc_1DE4A:
000147A0 3468 003E                  	movea.w	$3E(a0),a2
000147A4 7210                       	moveq	#$10,d1
000147A6 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000147AC 6700                       	beq.s	loc_1DE64
000147AE 7206                       	moveq	#$6,d1
000147B0 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000147B6 6700                       	beq.s	loc_1DE64
000147B8 117C 0002 0024             	move.b	#2,$24(a0)
000147BE 117C 0000 0032             	move.b	#0,$32(a0)
000147C4 4E75                       	rts
000147C6                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147C6                            
000147C6                            loc_1DE64:				; CODE XREF: h+6EE0?j
000147C6 5328 0032                  		subq.b	#1,$32(a0)
000147CA 6A00                       		bpl.s	loc_1DEE0
000147CC 117C 0003 0032             		move.b	#3,$32(a0)
000147D2 4EBA ADA4                  		jsr	SingleObjLoad
000147D6 6600                       		bne.s	loc_1DEE0
000147D8 1290                       		move.b	0(a0),0(a1)
000147DA 336A 0008 0008             		move	8(a2),8(a1)
000147E0 336A 000C 000C             		move	$C(a2),$C(a1)
000147E6 4A28 0034                  		tst.b	$34(a0)
000147EA 6700                       		beq.s	loc_1DE9A
000147EC 5941                       		sub	#4,d1
000147EE                            
000147EE                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000147EE D369 000C                  		add	d1,$C(a1)
000147F2 137C 0000 0022             		move.b	#0,$22(a1)
000147F8 137C 0003 001C             		move.b	#3,$1C(a1)
000147FE 5429 0024                  		addq.b	#2,$24(a1)
00014802 2368 0004 0004             		move.l	4(a0),4(a1)
00014808 1368 0001 0001             		move.b	1(a0),1(a1)
0001480E 137C 0001 0018             		move.b	#1,$18(a1)
00014814 137C 0004 0019             		move.b	#4,$19(a1)
0001481A 3368 0002 0002             		move	2(a0),2(a1)
00014820 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014826 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001482C 4A6A 0002                  		tst	2(a2)
00014830 6A00                       		bpl.s	loc_1DEE0
00014832 0069 8000 0002             		or	#-$8000,2(a1)
00014838                            
00014838                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014838 6100                       		bsr.s	loc_1DEE4
0001483A 4E75                       		rts	
0001483C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001483C                            
0001483C                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001483C 7000                       		moveq	#0,d0
0001483E 1028 001A                  		move.b	$1A(a0),d0
00014842 B028 0030                  		cmp.b	$30(a0),d0
00014846 6700 0000                  		beq.w	locret_1DF36
0001484A 1140 0030                  		move.b	d0,$30(a0)
0001484E 45F9 0000 0000             		lea	(off_1E074).l,a2
00014854 D040                       		add	d0,d0
00014856 D4F2 0000                  		add	(a2,d0.w),a2
0001485A 3A1A                       		move	(a2)+,d5
0001485C 5345                       		subq	#1,d5
0001485E 6B00 0000                  		bmi.w	locret_1DF36
00014862 3828 003C                  		move $3C(a0),d4
00014866                            
00014866                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014866 7200                       		moveq	#0,d1
00014868 321A                       		move	(a2)+,d1
0001486A 3601                       		move	d1,d3
0001486C E04B                       		lsr.w	#8,d3
0001486E 0243 00F0                  		and	#$F0,d3	; 'Ã°'
00014872 0643 0010                  		add	#$10,d3
00014876 0241 0FFF                  		and	#$FFF,d1
0001487A EB89                       		lsl.l	#5,d1
0001487C 0681 0000 0000             		add.l	#Art_Dust,d1
00014882 3404                       		move	d4,d2
00014884 D843                       		add	d3,d4
00014886 D843                       		add	d3,d4
00014888 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
0001488E 51CD FFD6                  		dbf	d5,loc_1DF0A
00014892 4E75                           rts
00014894                            
00014894                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014894 4E75                       		rts	
00014896                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014896 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014898 0000                       		dc byte_1DF43-off_1DF38; 1
0001489A 0000                       		dc byte_1DF4F-off_1DF38; 2
0001489C 0000                       		dc byte_1DF58-off_1DF38; 3
0001489E 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000148A1 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000148AD 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000148B6 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000148BC                            ; -------------------------------------------------------------------------------
000148BC                            ; Unknown Sprite Mappings
000148BC                            ; -------------------------------------------------------------------------------
000148BC                            MapUnc_1DF5E:
000148BC 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000148BE 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000148C0 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000148C2 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000148C4 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000148C6 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000148C8 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000148CA 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000148CC 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000148CE 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000148D0 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000148D2 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000148D4 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000148D6 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000148D8 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000148DA 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000148DC 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000148DE 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000148E0 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000148E2 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000148E4 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000148E6 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000148E8 00                         word_1DF8A:	dc.b 0
000148E9 01                         word_1DF8C:	dc.b 1
000148EA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000148EF 01                         word_1DF96:	dc.b 1
000148F0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148F5 01                         word_1DFA0:	dc.b 1
000148F6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000148FB 01                         word_1DFAA:	dc.b 1
000148FC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014901 01                         word_1DFB4:	dc.b 1
00014902 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014907 01                         word_1DFBE:	dc.b 1
00014908 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001490D 01                         word_1DFC8:	dc.b 1
0001490E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014913 01                         word_1DFD2:	dc.b 1
00014914 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014919 01                         word_1DFDC:	dc.b 1
0001491A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001491F 01                         word_1DFE6:	dc.b 1
00014920 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014925 01                         word_1DFF0:	dc.b 1
00014926 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001492B 01                         word_1DFFA:	dc.b 1
0001492C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014931 02                         word_1E004:	dc.b 2
00014932 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014937 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001493C 02                         word_1E016:	dc.b 2
0001493D F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014942 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014947 02                         word_1E028:	dc.b 2
00014948 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001494D 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014952 02                         word_1E03A:	dc.b 2
00014953 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014958 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001495D 01                         word_1E04C:	dc.b 1
0001495E F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014963 01                         word_1E056:	dc.b 1
00014964 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014969 01                         word_1E060:	dc.b 1
0001496A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001496F 01                         word_1E06A:	dc.b 1
00014970 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014975 00                         	dc.b 0
00014976 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014978 0000                       	dc word_1E0A2-off_1E074; 1
0001497A 0000                       	dc word_1E0A6-off_1E074; 2
0001497C 0000                       	dc word_1E0AA-off_1E074; 3
0001497E 0000                       	dc word_1E0AE-off_1E074; 4
00014980 0000                       	dc word_1E0B2-off_1E074; 5
00014982 0000                       	dc word_1E0B6-off_1E074; 6
00014984 0000                       	dc word_1E0BA-off_1E074; 7
00014986 0000                       	dc word_1E0BE-off_1E074; 8
00014988 0000                       	dc word_1E0C2-off_1E074; 9
0001498A 0000                       	dc word_1E0C6-off_1E074; 10
0001498C 0000                       	dc word_1E0CA-off_1E074; 11
0001498E 0000                       	dc word_1E0CE-off_1E074; 12
00014990 0000                       	dc word_1E0D2-off_1E074; 13
00014992 0000                       	dc word_1E0D8-off_1E074; 14
00014994 0000                       	dc word_1E0DE-off_1E074; 15
00014996 0000                       	dc word_1E0E4-off_1E074; 16
00014998 0000                       	dc word_1E0EA-off_1E074; 17
0001499A 0000                       	dc word_1E0EA-off_1E074; 18
0001499C 0000                       	dc word_1E0EA-off_1E074; 19
0001499E 0000                       	dc word_1E0EA-off_1E074; 20
000149A0 0000                       	dc word_1E0EC-off_1E074; 21
000149A2 0000                       word_1E0A0:	dc 0
000149A4 0001                       word_1E0A2:	dc 1
000149A6 7000                       	dc $7000
000149A8 0001                       word_1E0A6:	dc 1
000149AA F008                       	dc $F008
000149AC 0001                       word_1E0AA:	dc 1
000149AE F018                       	dc $F018
000149B0 0001                       word_1E0AE:	dc 1
000149B2 F028                       	dc $F028
000149B4 0001                       word_1E0B2:	dc 1
000149B6 F038                       	dc $F038
000149B8 0001                       word_1E0B6:	dc 1
000149BA F048                       	dc $F048
000149BC 0001                       word_1E0BA:	dc 1
000149BE 7058                       	dc $7058
000149C0 0001                       word_1E0BE:	dc 1
000149C2 7060                       	dc $7060
000149C4 0001                       word_1E0C2:	dc 1
000149C6 7068                       	dc $7068
000149C8 0001                       word_1E0C6:	dc 1
000149CA 7070                       	dc $7070
000149CC 0001                       word_1E0CA:	dc 1
000149CE 7078                       	dc $7078
000149D0 0001                       word_1E0CE:	dc 1
000149D2 7080                       	dc $7080
000149D4 0002                       word_1E0D2:	dc 2
000149D6 1088                       	dc $1088
000149D8 708A                       	dc $708A
000149DA 0002                       word_1E0D8:	dc 2
000149DC 3092                       	dc $3092
000149DE 7096                       	dc $7096
000149E0 0002                       word_1E0DE:	dc 2
000149E2 509E                       	dc $509E
000149E4 70A4                       	dc $70A4
000149E6 0002                       word_1E0E4:	dc 2
000149E8 50AC                       	dc $50AC
000149EA 70B2                       	dc $70B2
000149EC 0000                       word_1E0EA:	dc 0
000149EE 0001                       word_1E0EC:	dc 1
000149F0 F0BA                       	dc $F0BA
000149F2                            	even
000149F2                            	even
000149F2                            
000149F2                            ; ===========================================================================
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            ; Object 01 - Sonic
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            ; ===========================================================================
000149F2 =00000039                  crawling								= $39			; CRAWLING IN MY SKIN!
000149F2 =0000003A                  biting									= $3A
000149F2                            ; ===========================================================================
000149F2                            Obj01_PhysicsTable:
000149F2 0600 000C 0080             		dc.w $600,   $C,  $80			; Normal
000149F8 0300 0006 0040             		dc.w $300,    6,  $40			; Underwater
000149FE 0C00 0018 0080             		dc.w $C00,  $18,  $80			; Speed shoes
00014A04 0600 000C 0080             		dc.w $600,   $C,  $80			; Speed shoes underwater
00014A0A 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling
00014A10 0060 000C 0012             		dc.w  $60,   $C,  $12			; Crawling underwater
00014A16 0180 0030 0048             		dc.w $180,  $30,  $48			; Crawling with speed shoes
00014A1C 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling with speed shoes underwater
00014A22                            ; ===========================================================================
00014A22                            ; Get physics for Sonic
00014A22                            ; ===========================================================================
00014A22                            Obj01_GetPhysics:
00014A22 7000                       		moveq	#0,d0
00014A24 1028 0039                  		move.b	crawling(a0),d0
00014A28 E300                       		asl.b	#1,d0
00014A2A 8038 FE2E                  		or.b	($FFFFFE2E).w,d0
00014A2E E300                       		asl.b	#1,d0
00014A30 0828 0006 0022             		btst	#6,$22(a0)
00014A36 6700                       		beq.s	@not_underwater
00014A38 0000 0001                  		or.b	#1,d0
00014A3C                            		
00014A3C                            @not_underwater:
00014A3C C0FC 0006                  		mulu.w	#6,d0
00014A40 43FB 00B0                  		lea	Obj01_PhysicsTable(pc,d0.w),a1
00014A44 31D9 F760                  		move.w	(a1)+,($FFFFF760).w
00014A48 31D9 F762                  		move.w	(a1)+,($FFFFF762).w
00014A4C 31D1 F764                  		move.w	(a1),($FFFFF764).w
00014A50 4E75                       		rts
00014A52                            ; ===========================================================================
00014A52                            ; Apply speed cap for Sonic
00014A52                            ; ===========================================================================
00014A52                            Obj01_ApplySpeedCap:
00014A52 3228 0014                  		move.w	$14(a0),d1
00014A56 4A41                       		tst.w	d1
00014A58 6A00                       		bpl.s	@not_negative
00014A5A 4441                       		neg.w	d1
00014A5C                            		
00014A5C                            @not_negative:
00014A5C 3438 F760                  		move.w	($FFFFF760).w,d2
00014A60 B242                       		cmp.w	d2,d1
00014A62 6F00                       		ble.s	@no_cap
00014A64 9278 F762                  		sub.w	($FFFFF762).w,d1
00014A68 4A68 0014                  		tst.w	$14(a0)
00014A6C 6A00                       		bpl.s	@not_negative2
00014A6E 4441                       		neg.w	d1
00014A70                            		
00014A70                            @not_negative2:
00014A70 3141 0014                  		move.w	d1,$14(a0)
00014A74                            		
00014A74                            @no_cap:
00014A74 4E75                       		rts
00014A76                            ; ===========================================================================
00014A76                            
00014A76                            Obj01:					; XREF: Obj_Index
00014A76 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014A7A 6700                       		beq.s	Obj01_Normal	; if not, branch
00014A7C 4EF9 0000 0000             		jmp	DebugMode
00014A82                            ; ===========================================================================
00014A82                            
00014A82                            Obj01_Normal:
00014A82 7000                       		moveq	#0,d0
00014A84 1028 0024                  		move.b	$24(a0),d0
00014A88 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014A8C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014A90                            ; ===========================================================================
00014A90 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014A92 0000                       		dc.w Obj01_Control-Obj01_Index
00014A94 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014A96 0000                       		dc.w Obj01_Death-Obj01_Index
00014A98 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014A9A 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            Obj01_Main:				; XREF: Obj01_Index
00014A9C 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
00014AA2 5428 0024                  		addq.b	#2,$24(a0)
00014AA6 117C 0013 0016             		move.b	#$13,$16(a0)
00014AAC 117C 0009 0017             		move.b	#9,$17(a0)
00014AB2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014ABA 317C 0780 0002             		move.w	#$780,2(a0)
00014AC0 117C 0002 0018             		move.b	#2,$18(a0)
00014AC6 117C 0018 0019             		move.b	#$18,$19(a0)
00014ACC 117C 0004 0001             		move.b	#4,1(a0)
00014AD2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014AD8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014ADE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00014AE4 11FC 0005 D1C0             		move.b	#5,($FFFFD1C0).w
00014AEA                            
00014AEA                            Obj01_Control:				; XREF: Obj01_Index
00014AEA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014AEE 6700                       		beq.s	loc_12C58	; if not, branch
00014AF0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00014AF6 6700                       		beq.s	loc_12C58	; if not, branch
00014AF8 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014AFE 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014B02 4E75                       		rts	
00014B04                            ; ===========================================================================
00014B04                            
00014B04                            loc_12C58:
00014B04 6100 FF1C                  		bsr.w	Obj01_GetPhysics
00014B08 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014B0C 6600                       		bne.s	loc_12C64	; if yes, branch
00014B0E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014B14                            
00014B14                            loc_12C64:
00014B14 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014B1A 6600                       		bne.s	loc_12C7E	; if yes, branch
00014B1C 6100 0000                  		bsr.w	Obj01_DoModes
00014B20                            
00014B20                            loc_12C7E:
00014B20 4A28 0039                  		tst.b	crawling(a0)
00014B24 6600                       		bne.s	@no_bite
00014B26 4A28 003A                  		tst.b	biting(a0)
00014B2A 6600                       		bne.s	@chk_bite
00014B2C 0838 0006 F602             		btst	#6,($FFFFF602).w
00014B32 6700                       		beq.s	@no_bite
00014B34 4A38 FFBD                  		tst.b	($FFFFFFBD).w
00014B38 6600                       		bne.s	@chk_bite
00014B3A 08A8 0005 0022             		bclr	#5,$22(a0)
00014B40 117C 000D 003A             		move.b	#13,biting(a0)
00014B46 11FC 0001 FFBD             		move.b	#1,($FFFFFFBD).w
00014B4C                            
00014B4C                            @chk_bite:
00014B4C 4A28 003A                  		tst.b	biting(a0)
00014B50 6700                       		beq.s	@no_dec
00014B52 117C 0009 001C             		move.b	#9,$1C(a0) ; Use "biting" animation
00014B58 5328 003A                  		subq.b	#1,biting(a0)
00014B5C 6000                       		bra.s	@no_dec
00014B5E                            		
00014B5E                            @no_bite:
00014B5E 11FC 0000 FFBD             		move.b	#0,($FFFFFFBD).w
00014B64 117C 0000 003A             		move.b	#0,biting(a0)
00014B6A                            		
00014B6A                            @no_dec:
00014B6A 6100                       		bsr.s	Sonic_Display
00014B6C 6100 0000                  		bsr.w	Sonic_RecordPos
00014B70 6100 0000                  		bsr.w	Sonic_Water
00014B74 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014B7A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014B80 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014B84 6700                       		beq.s	loc_12CA6
00014B86 4A28 001C                  		tst.b	$1C(a0)
00014B8A 6600                       		bne.s	loc_12CA6
00014B8C 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014B92                            
00014B92                            loc_12CA6:
00014B92 6100 0000                  		bsr.w	Sonic_Animate
00014B96 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014B9A 6B00                       		bmi.s	loc_12CB6
00014B9C 4EB9 0000 0000             		jsr	TouchResponse
00014BA2                            
00014BA2                            loc_12CB6:
00014BA2 6000 0000                  		bra.w	LoadSonicDynPLC
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            Obj01_DoModes:
00014BA6 7000                       		moveq	#0,d0
00014BA8 1028 0022                  		move.b	$22(a0),d0
00014BAC 0240 0006                  		andi.w	#6,d0
00014BB0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014BB4 4EFB 1000                  		jmp	Obj01_Modes(pc,d1.w)
00014BB8                            ; ===========================================================================
00014BB8                            
00014BB8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014BBA 0000                       		dc.w Obj01_MdAir-Obj01_Modes
00014BBC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014BBE 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014BC0                            ; ===========================================================================
00014BC0                            
00014BC0                            Sonic_Display:				; XREF: loc_12C7E
00014BC0 3028 0030                  		move.w	$30(a0),d0
00014BC4 6700                       		beq.s	Obj01_Display
00014BC6 5368 0030                  		subq.w	#1,$30(a0)
00014BCA E648                       		lsr.w	#3,d0
00014BCC 6400                       		bcc.s	Obj01_ChkInvin
00014BCE                            
00014BCE                            Obj01_Display:
00014BCE 4EBA A514                  		jsr	DisplaySprite
00014BD2                            
00014BD2                            Obj01_ChkInvin:
00014BD2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014BD6 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014BD8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014BDC 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014BDE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014BE2 6600                       		bne.b	Obj01_ChkShoes
00014BE4 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014BEA                            
00014BEA                            Obj01_ChkShoes:
00014BEA 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014BEE 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014BF0 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014BF4 6700                       		beq.s	Obj01_ExitChk
00014BF6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014BFA 6600                       		bne.s	Obj01_ExitChk
00014BFC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014C02 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014C08 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014C0E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014C14                            ; ===========================================================================
00014C14                            
00014C14                            Obj01_ExitChk:
00014C14 4E75                       		rts
00014C16                            
00014C16                            ; ---------------------------------------------------------------------------
00014C16                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014C16                            ; ---------------------------------------------------------------------------
00014C16                            
00014C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C16                            
00014C16                            
00014C16                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014C16 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014C1A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014C1E 43F1 0000                  		lea	(a1,d0.w),a1
00014C22 32E8 0008                  		move.w	8(a0),(a1)+
00014C26 32E8 000C                  		move.w	$C(a0),(a1)+
00014C2A 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014C2E 4E75                       		rts	
00014C30                            ; End of function Sonic_RecordPos
00014C30                            
00014C30                            ; ---------------------------------------------------------------------------
00014C30                            ; Subroutine for Sonic when he's underwater
00014C30                            ; ---------------------------------------------------------------------------
00014C30                            
00014C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C30                            
00014C30                            
00014C30                            Sonic_Water:				; XREF: loc_12C7E
00014C30 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014C36 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014C38                            
00014C38                            locret_12D80:
00014C38 4E75                       		rts	
00014C3A                            ; ===========================================================================
00014C3A                            
00014C3A                            Obj01_InWater:
00014C3A 3038 F646                  		move.w	($FFFFF646).w,d0
00014C3E B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014C42 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014C44 08E8 0006 0022             		bset	#6,$22(a0)
00014C4A 66EC                       		bne.s	locret_12D80
00014C4C 6100 0000                  		bsr.w	StopDrowning
00014C50 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014C56 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014C5C E0E8 0010                  		asr	$10(a0)
00014C60 E0E8 0012                  		asr	$12(a0)
00014C64 E0E8 0012                  		asr	$12(a0)
00014C68 67CE                       		beq.s	locret_12D80
00014C6A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014C70 303C 00AA                  		move.w	#$AA,d0
00014C74 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014C7A                            ; ===========================================================================
00014C7A                            
00014C7A                            Obj01_OutWater:
00014C7A 08A8 0006 0022             		bclr	#6,$22(a0)
00014C80 67B6                       		beq.s	locret_12D80
00014C82 6100 0000                  		bsr.w	StopDrowning
00014C86 E1E8 0012                  		asl	$12(a0)
00014C8A 6700 FFAC                  		beq.w	locret_12D80
00014C8E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014C94 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014C9A 6E00                       		bgt.s	loc_12E0E
00014C9C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014CA2                            
00014CA2                            loc_12E0E:
00014CA2 303C 00AA                  		move.w	#$AA,d0
00014CA6 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014CAC                            ; End of function Sonic_Water
00014CAC                            
00014CAC                            ; ===========================================================================
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Modes	for controlling	Sonic
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            
00014CAC                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014CAC 6100 0000                  		bsr.w	Sonic_Jump
00014CB0 4A28 0039                  		tst.b	crawling(a0)
00014CB4 6600                       		bne.s	@is_crawling
00014CB6 6100 0000                  		bsr.w	Sonic_SlopeResist
00014CBA                            		
00014CBA                            @is_crawling:
00014CBA 6100 0000                  		bsr.w	Sonic_Move
00014CBE 6100 0000                  		bsr.w	Sonic_LevelBound
00014CC2 4EBA A406                  		jsr	SpeedToPos
00014CC6 6100 0000                  		bsr.w	Sonic_AnglePos
00014CCA 4A28 0039                  		tst.b	crawling(a0)
00014CCE 6600                       		bne.s	@is_crawling2
00014CD0 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014CD4                            		
00014CD4                            @is_crawling2:
00014CD4 4A68 003E                  		tst.w	$3E(a0)
00014CD8 6700                       		beq.s	@no_movelock
00014CDA 5368 003E                  		subq.w	#1,$3E(a0)
00014CDE                            		
00014CDE                            @no_movelock:
00014CDE 103C 0000                  		move.b	#0,d0
00014CE2 0838 0001 F602             		btst	#1,($FFFFF602).w
00014CE8 6700                       		beq.s	@not_crawling
00014CEA 6100 FD66                  		bsr.w	Obj01_ApplySpeedCap
00014CEE 103C 0001                  		move.b	#1,d0
00014CF2                            		
00014CF2                            @not_crawling:
00014CF2 1140 0039                  		move.b	d0,crawling(a0)
00014CF6 4E75                       		rts	
00014CF8                            ; ===========================================================================
00014CF8                            
00014CF8                            Obj01_MdAir:				; XREF: Obj01_Modes
00014CF8 117C 0000 0039             		move.b	#0,crawling(a0)
00014CFE 6100 0000                  		bsr.w	Sonic_JumpHeight
00014D02 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014D06 6100 0000                  		bsr.w	Sonic_LevelBound
00014D0A 4EBA A39E                  		jsr	ObjectFall
00014D0E 0828 0006 0022             		btst	#6,$22(a0)
00014D14 6700                       		beq.s	loc_12E5C
00014D16 0468 0028 0012             		subi.w	#$28,$12(a0)
00014D1C                            
00014D1C                            loc_12E5C:
00014D1C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014D20 6100 0000                  		bsr.w	Sonic_Floor
00014D24 4E75                       		rts	
00014D26                            ; ===========================================================================
00014D26                            
00014D26                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014D26 4E75                       		rts					; Nothing to see here
00014D28                            ; ===========================================================================
00014D28                            
00014D28                            Obj01_MdJump:				; XREF: Obj01_Modes
00014D28 117C 0000 0039             		move.b	#0,crawling(a0)
00014D2E 6100 0000                  		bsr.w	Sonic_JumpHeight
00014D32 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014D36 6100 0000                  		bsr.w	Sonic_LevelBound
00014D3A 6100 0000                  		bsr.w 	Sonic_JumpAnimate
00014D3E 4EBA A36A                  		jsr	ObjectFall
00014D42 0828 0006 0022             		btst	#6,$22(a0)
00014D48 6700                       		beq.s	loc_12EA6
00014D4A 0468 0028 0012             		subi.w	#$28,$12(a0)
00014D50                            
00014D50                            loc_12EA6:
00014D50 6100 0000                  		bsr.w	Sonic_JumpAngle
00014D54 6100 0000                  		bsr.w	Sonic_Floor
00014D58 4E75                       		rts	
00014D5A                            ; ---------------------------------------------------------------------------
00014D5A                            ; Subroutine to	make Sonic walk/run
00014D5A                            ; ---------------------------------------------------------------------------
00014D5A                            
00014D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D5A                            
00014D5A                            
00014D5A                            Sonic_Move:				; XREF: Obj01_MdNormal
00014D5A 3C38 F760                  		move.w	($FFFFF760).w,d6
00014D5E 3A38 F762                  		move.w	($FFFFF762).w,d5
00014D62 3838 F764                  		move.w	($FFFFF764).w,d4
00014D66 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D6A 6600 0000                  		bne.w	loc_12FEE
00014D6E 4A68 003E                  		tst.w	$3E(a0)
00014D72 6600 0000                  		bne.w	Obj01_ResetScr
00014D76 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014D7C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014D7E 6100 0000                  		bsr.w	Sonic_MoveLeft
00014D82                            
00014D82                            Obj01_NotLeft:
00014D82 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014D88 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014D8A 6100 0000                  		bsr.w	Sonic_MoveRight
00014D8E                            
00014D8E                            Obj01_NotRight:
00014D8E 1028 0026                  		move.b	$26(a0),d0
00014D92 0600 0020                  		addi.b	#$20,d0
00014D96 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014D9A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014D9E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014DA2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014DA6 08A8 0005 0022             		bclr	#5,$22(a0)
00014DAC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014DB2 0828 0003 0022             		btst	#3,$22(a0)
00014DB8 6700                       		beq.s	Sonic_Balance
00014DBA 7000                       		moveq	#0,d0
00014DBC 1028 003D                  		move.b	$3D(a0),d0
00014DC0 ED48                       		lsl.w	#6,d0
00014DC2 43F8 D000                  		lea	($FFFFD000).w,a1
00014DC6 43F1 0000                  		lea	(a1,d0.w),a1
00014DCA 4A29 0022                  		tst.b	$22(a1)
00014DCE 6B00                       		bmi.s	Sonic_LookUp
00014DD0 7200                       		moveq	#0,d1
00014DD2 1229 0019                  		move.b	$19(a1),d1
00014DD6 3401                       		move.w	d1,d2
00014DD8 D442                       		add.w	d2,d2
00014DDA 5942                       		subq.w	#4,d2
00014DDC D268 0008                  		add.w	8(a0),d1
00014DE0 9269 0008                  		sub.w	8(a1),d1
00014DE4 0C41 0004                  		cmpi.w	#4,d1
00014DE8 6D00                       		blt.s	loc_12F6A
00014DEA B242                       		cmp.w	d2,d1
00014DEC 6C00                       		bge.s	loc_12F5A
00014DEE 6000                       		bra.s	Sonic_LookUp
00014DF0                            ; ===========================================================================
00014DF0                            
00014DF0                            Sonic_Balance:
00014DF0 4EB9 0000 0000             		jsr	ObjHitFloor
00014DF6 0C41 000C                  		cmpi.w	#$C,d1
00014DFA 6D00                       		blt.s	Sonic_LookUp
00014DFC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014E02 6600                       		bne.s	loc_12F62
00014E04                            
00014E04                            loc_12F5A:
00014E04 08A8 0000 0022             		bclr	#0,$22(a0)
00014E0A 6000                       		bra.s	loc_12F70
00014E0C                            ; ===========================================================================
00014E0C                            
00014E0C                            loc_12F62:
00014E0C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014E12 6600                       		bne.s	Sonic_LookUp
00014E14                            
00014E14                            loc_12F6A:
00014E14 08E8 0000 0022             		bset	#0,$22(a0)
00014E1A                            
00014E1A                            loc_12F70:
00014E1A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014E20 6000                       		bra.s	Obj01_ResetScr
00014E22                            ; ===========================================================================
00014E22                            
00014E22                            Sonic_LookUp:
00014E22 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014E28 6700                       		beq.s	Sonic_Duck	; if not, branch
00014E2A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014E30 5238 C903                  		addq.b	#1,($FFFFC903).w
00014E34 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014E3A 6500                       		bcs.s	Obj01_ResetScr_Part2
00014E3C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014E42 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014E48 6700                       		beq.s	loc_12FC2
00014E4A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014E4E 6000                       		bra.s	loc_12FC2
00014E50                            ; ===========================================================================
00014E50                            
00014E50                            Sonic_Duck:
00014E50 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014E56 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014E58 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014E5E 5238 C903                  		addq.b	#1,($FFFFC903).w
00014E62 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014E68 6500                       		bcs.s	Obj01_ResetScr_Part2
00014E6A 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014E70 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014E76 6700                       		beq.s	loc_12FC2
00014E78 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014E7C 6000                       		bra.s	loc_12FC2
00014E7E                            ; ===========================================================================
00014E7E                            
00014E7E                            Obj01_ResetScr:
00014E7E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00014E84                            		
00014E84                            Obj01_ResetScr_Part2:
00014E84 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014E8A 6700                       		beq.s	loc_12FC2	; if yes, branch
00014E8C 6400                       		bcc.s	loc_12FBE
00014E8E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014E92                            
00014E92                            loc_12FBE:
00014E92 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014E96                            
00014E96                            loc_12FC2:
00014E96 1038 F602                  		move.b	($FFFFF602).w,d0
00014E9A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014E9E 6600                       		bne.s	loc_12FEE	; if yes, branch
00014EA0 3028 0014                  		move.w	$14(a0),d0
00014EA4 6700                       		beq.s	loc_12FEE
00014EA6 6B00                       		bmi.s	loc_12FE2
00014EA8 9045                       		sub.w	d5,d0
00014EAA 6400                       		bcc.s	loc_12FDC
00014EAC 303C 0000                  		move.w	#0,d0
00014EB0                            
00014EB0                            loc_12FDC:
00014EB0 3140 0014                  		move.w	d0,$14(a0)
00014EB4 6000                       		bra.s	loc_12FEE
00014EB6                            ; ===========================================================================
00014EB6                            
00014EB6                            loc_12FE2:
00014EB6 D045                       		add.w	d5,d0
00014EB8 6400                       		bcc.s	loc_12FEA
00014EBA 303C 0000                  		move.w	#0,d0
00014EBE                            
00014EBE                            loc_12FEA:
00014EBE 3140 0014                  		move.w	d0,$14(a0)
00014EC2                            
00014EC2                            loc_12FEE:
00014EC2 1028 0026                  		move.b	$26(a0),d0
00014EC6 4EB9 0000 2B7A             		jsr	(CalcSine).l
00014ECC C3E8 0014                  		muls.w	$14(a0),d1
00014ED0 E081                       		asr.l	#8,d1
00014ED2 3141 0010                  		move.w	d1,$10(a0)
00014ED6 C1E8 0014                  		muls.w	$14(a0),d0
00014EDA E080                       		asr.l	#8,d0
00014EDC 3140 0012                  		move.w	d0,$12(a0)
00014EE0                            
00014EE0                            loc_1300C:
00014EE0 1028 0026                  		move.b	$26(a0),d0
00014EE4 0600 0040                  		addi.b	#$40,d0
00014EE8 6B00                       		bmi.s	locret_1307C
00014EEA 123C 0040                  		move.b	#$40,d1
00014EEE 4A68 0014                  		tst.w	$14(a0)
00014EF2 6700                       		beq.s	locret_1307C
00014EF4 6B00                       		bmi.s	loc_13024
00014EF6 4441                       		neg.w	d1
00014EF8                            
00014EF8                            loc_13024:
00014EF8 1028 0026                  		move.b	$26(a0),d0
00014EFC D001                       		add.b	d1,d0
00014EFE 3F00                       		move.w	d0,-(sp)
00014F00 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014F04 301F                       		move.w	(sp)+,d0
00014F06 4A41                       		tst.w	d1
00014F08 6A00                       		bpl.s	locret_1307C
00014F0A E141                       		asl.w	#8,d1
00014F0C 0600 0020                  		addi.b	#$20,d0
00014F10 0200 00C0                  		andi.b	#$C0,d0
00014F14 6700                       		beq.s	loc_13078
00014F16 0C00 0040                  		cmpi.b	#$40,d0
00014F1A 6700                       		beq.s	loc_13066
00014F1C 0C00 0080                  		cmpi.b	#$80,d0
00014F20 6700                       		beq.s	loc_13060
00014F22 D368 0010                  		add.w	d1,$10(a0)
00014F26 08E8 0005 0022             		bset	#5,$22(a0)
00014F2C 317C 0000 0014             		move.w	#0,$14(a0)
00014F32 4E75                       		rts	
00014F34                            ; ===========================================================================
00014F34                            
00014F34                            loc_13060:
00014F34 9368 0012                  		sub.w	d1,$12(a0)
00014F38 4E75                       		rts	
00014F3A                            ; ===========================================================================
00014F3A                            
00014F3A                            loc_13066:
00014F3A 9368 0010                  		sub.w	d1,$10(a0)
00014F3E 08E8 0005 0022             		bset	#5,$22(a0)
00014F44 317C 0000 0014             		move.w	#0,$14(a0)
00014F4A 4E75                       		rts	
00014F4C                            ; ===========================================================================
00014F4C                            
00014F4C                            loc_13078:
00014F4C D368 0012                  		add.w	d1,$12(a0)
00014F50                            
00014F50                            locret_1307C:
00014F50 4E75                       		rts	
00014F52                            ; End of function Sonic_Move
00014F52                            
00014F52                            
00014F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F52                            
00014F52                            
00014F52                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014F52 3028 0014                  		move.w	$14(a0),d0
00014F56 6700                       		beq.s	loc_13086
00014F58 6A00                       		bpl.s	loc_130B2
00014F5A                            
00014F5A                            loc_13086:
00014F5A 08E8 0000 0022             		bset	#0,$22(a0)
00014F60 6600                       		bne.s	loc_1309A
00014F62 08A8 0005 0022             		bclr	#5,$22(a0)
00014F68 117C 0001 001D             		move.b	#1,$1D(a0)
00014F6E                            
00014F6E                            loc_1309A:
00014F6E 9045                       		sub.w	d5,d0
00014F70 3206                       		move.w	d6,d1
00014F72 4441                       		neg.w	d1
00014F74 B041                       		cmp.w	d1,d0
00014F76 6E00                       		bgt.s	loc_130A6
00014F78 D045                       		add.w	d5,d0
00014F7A B041                       		cmp.w	d1,d0
00014F7C 6F00                       		ble.s	loc_130A6
00014F7E 3001                       		move.w	d1,d0
00014F80                            
00014F80                            loc_130A6:
00014F80 3140 0014                  		move.w	d0,$14(a0)
00014F84 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014F8A 4E75                       		rts
00014F8C                            ; ===========================================================================
00014F8C                            
00014F8C                            loc_130B2:				; XREF: Sonic_MoveLeft
00014F8C 9044                       		sub.w	d4,d0
00014F8E 6400                       		bcc.s	loc_130BA
00014F90 303C FF80                  		move.w	#-$80,d0
00014F94                            
00014F94                            loc_130BA:
00014F94 3140 0014                  		move.w	d0,$14(a0)
00014F98 1028 0026                  		move.b	$26(a0),d0
00014F9C 0600 0020                  		addi.b	#$20,d0
00014FA0 0200 00C0                  		andi.b	#$C0,d0
00014FA4 6600                       		bne.s	locret_130E8
00014FA6 0C40 0400                  		cmpi.w	#$400,d0
00014FAA 6D00                       		blt.s	locret_130E8
00014FAC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014FB2 08A8 0000 0022             		bclr	#0,$22(a0)
00014FB8 303C 00A4                  		move.w	#$A4,d0
00014FBC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
00014FC2                            
00014FC2                            locret_130E8:
00014FC2 4E75                       		rts	
00014FC4                            ; End of function Sonic_MoveLeft
00014FC4                            
00014FC4                            
00014FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FC4                            
00014FC4                            
00014FC4                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00014FC4 3028 0014                  		move.w	$14(a0),d0
00014FC8 6B00                       		bmi.s	loc_13118
00014FCA 08A8 0000 0022             		bclr	#0,$22(a0)
00014FD0 6700                       		beq.s	loc_13104
00014FD2 08A8 0005 0022             		bclr	#5,$22(a0)
00014FD8 117C 0001 001D             		move.b	#1,$1D(a0)
00014FDE                            
00014FDE                            loc_13104:
00014FDE D045                       		add.w	d5,d0
00014FE0 B046                       		cmp.w	d6,d0
00014FE2 6D00                       		blt.s	loc_1310C
00014FE4 9045                       		sub.w	d5,d0
00014FE6 B046                       		cmp.w	d6,d0
00014FE8 6C00                       		bge.s	loc_1310C
00014FEA 3006                       		move.w	d6,d0
00014FEC                            
00014FEC                            loc_1310C:
00014FEC 3140 0014                  		move.w	d0,$14(a0)
00014FF0 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014FF6 4E75                       		rts
00014FF8                            ; ===========================================================================
00014FF8                            
00014FF8                            loc_13118:				; XREF: Sonic_MoveRight
00014FF8 D044                       		add.w	d4,d0
00014FFA 6400                       		bcc.s	loc_13120
00014FFC 303C 0080                  		move.w	#$80,d0
00015000                            
00015000                            loc_13120:
00015000 3140 0014                  		move.w	d0,$14(a0)
00015004 1028 0026                  		move.b	$26(a0),d0
00015008 0600 0020                  		addi.b	#$20,d0
0001500C 0200 00C0                  		andi.b	#$C0,d0
00015010 6600                       		bne.s	locret_1314E
00015012 0C40 FC00                  		cmpi.w	#-$400,d0
00015016 6E00                       		bgt.s	locret_1314E
00015018 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001501E 08E8 0000 0022             		bset	#0,$22(a0)
00015024 303C 00A4                  		move.w	#$A4,d0
00015028 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
0001502E                            
0001502E                            locret_1314E:
0001502E 4E75                       		rts	
00015030                            ; End of function Sonic_MoveRight
00015030                            
00015030                            ; ---------------------------------------------------------------------------
00015030                            ; Subroutine to	change Sonic's speed as he rolls
00015030                            ; ---------------------------------------------------------------------------
00015030                            
00015030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015030                            
00015030                            
00015030                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00015030 3C38 F760                  		move.w	($FFFFF760).w,d6
00015034 E346                       		asl.w	#1,d6
00015036 3A38 F762                  		move.w	($FFFFF762).w,d5
0001503A E245                       		asr.w	#1,d5
0001503C 3838 F764                  		move.w	($FFFFF764).w,d4
00015040 E444                       		asr.w	#2,d4
00015042 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00015046 6600 0000                  		bne.w	loc_131CC
0001504A 4A68 003E                  		tst.w	$3E(a0)
0001504E 6600                       		bne.s	loc_13188
00015050 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00015056 6700                       		beq.s	loc_1317C	; if not, branch
00015058 6100 0000                  		bsr.w	Sonic_RollLeft
0001505C                            
0001505C                            loc_1317C:
0001505C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00015062 6700                       		beq.s	loc_13188	; if not, branch
00015064 6100 0000                  		bsr.w	Sonic_RollRight
00015068                            
00015068                            loc_13188:
00015068 3028 0014                  		move.w	$14(a0),d0
0001506C 6700                       		beq.s	loc_131AA
0001506E 6B00                       		bmi.s	loc_1319E
00015070 9045                       		sub.w	d5,d0
00015072 6400                       		bcc.s	loc_13198
00015074 303C 0000                  		move.w	#0,d0
00015078                            
00015078                            loc_13198:
00015078 3140 0014                  		move.w	d0,$14(a0)
0001507C 6000                       		bra.s	loc_131AA
0001507E                            ; ===========================================================================
0001507E                            
0001507E                            loc_1319E:				; XREF: Sonic_RollSpeed
0001507E D045                       		add.w	d5,d0
00015080 6400                       		bcc.s	loc_131A6
00015082 303C 0000                  		move.w	#0,d0
00015086                            
00015086                            loc_131A6:
00015086 3140 0014                  		move.w	d0,$14(a0)
0001508A                            
0001508A                            loc_131AA:
0001508A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001508E 6600                       		bne.s	loc_131CC	; if yes, branch
00015090 08A8 0002 0022             		bclr	#2,$22(a0)
00015096 117C 0013 0016             		move.b	#$13,$16(a0)
0001509C 117C 0009 0017             		move.b	#9,$17(a0)
000150A2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000150A8 5B68 000C                  		subq.w	#5,$C(a0)
000150AC                            
000150AC                            loc_131CC:
000150AC 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
000150B2 6700                       		beq.s	@cont2
000150B4 6400                       		bcc.s	@cont1
000150B6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000150BA                            		
000150BA                            @cont1:
000150BA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000150BE                            		
000150BE                            @cont2:
000150BE 1028 0026                  		move.b	$26(a0),d0
000150C2 4EB9 0000 2B7A             		jsr	(CalcSine).l
000150C8 C1E8 0014                  		muls.w	$14(a0),d0
000150CC E080                       		asr.l	#8,d0
000150CE 3140 0012                  		move.w	d0,$12(a0)
000150D2 C3E8 0014                  		muls.w	$14(a0),d1
000150D6 E081                       		asr.l	#8,d1
000150D8 0C41 1000                  		cmpi.w	#$1000,d1
000150DC 6F00                       		ble.s	loc_131F0
000150DE 323C 1000                  		move.w	#$1000,d1
000150E2                            
000150E2                            loc_131F0:
000150E2 0C41 F000                  		cmpi.w	#-$1000,d1
000150E6 6C00                       		bge.s	loc_131FA
000150E8 323C F000                  		move.w	#-$1000,d1
000150EC                            
000150EC                            loc_131FA:
000150EC 3141 0010                  		move.w	d1,$10(a0)
000150F0 6000 FDEE                  		bra.w	loc_1300C
000150F4                            ; End of function Sonic_RollSpeed
000150F4                            
000150F4                            
000150F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150F4                            
000150F4                            
000150F4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000150F4 3028 0014                  		move.w	$14(a0),d0
000150F8 6700                       		beq.s	loc_1320A
000150FA 6A00                       		bpl.s	loc_13218
000150FC                            
000150FC                            loc_1320A:
000150FC 08E8 0000 0022             		bset	#0,$22(a0)
00015102 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00015108 4E75                       		rts	
0001510A                            ; ===========================================================================
0001510A                            
0001510A                            loc_13218:
0001510A 9044                       		sub.w	d4,d0
0001510C 6400                       		bcc.s	loc_13220
0001510E 303C FF80                  		move.w	#-$80,d0
00015112                            
00015112                            loc_13220:
00015112 3140 0014                  		move.w	d0,$14(a0)
00015116 4E75                       		rts	
00015118                            ; End of function Sonic_RollLeft
00015118                            
00015118                            
00015118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015118                            
00015118                            
00015118                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00015118 3028 0014                  		move.w	$14(a0),d0
0001511C 6B00                       		bmi.s	loc_1323A
0001511E 08A8 0000 0022             		bclr	#0,$22(a0)
00015124 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001512A 4E75                       		rts	
0001512C                            ; ===========================================================================
0001512C                            
0001512C                            loc_1323A:
0001512C D044                       		add.w	d4,d0
0001512E 6400                       		bcc.s	loc_13242
00015130 303C 0080                  		move.w	#$80,d0
00015134                            
00015134                            loc_13242:
00015134 3140 0014                  		move.w	d0,$14(a0)
00015138 4E75                       		rts	
0001513A                            ; End of function Sonic_RollRight
0001513A                            
0001513A                            ; ---------------------------------------------------------------------------
0001513A                            ; Subroutine to	change Sonic's direction while jumping
0001513A                            ; ---------------------------------------------------------------------------
0001513A                            
0001513A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001513A                            
0001513A                            
0001513A                            Sonic_ChgJumpDir:		; XREF: Obj01_MdAir; Obj01_MdJump
0001513A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001513E 3A38 F762                  		move.w	($FFFFF762).w,d5
00015142 E345                       		asl.w	#1,d5
00015144 0828 0004 0022             		btst	#4,$22(a0)	
0001514A 6600                       		bne.s	Obj01_ResetScr2	
0001514C 3028 0010                  		move.w	$10(a0),d0	
00015150 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015156 6700                       		beq.s	loc_13278; if not, branch	
00015158 08E8 0000 0022             		bset	#0,$22(a0)	
0001515E 9045                       		sub.w	d5,d0	
00015160 3206                       		move.w	d6,d1	
00015162 4441                       		neg.w	d1	
00015164 B041                       		cmp.w	d1,d0	
00015166 6E00                       		bgt.s	loc_13278	
00015168 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001516A B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001516C 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001516E 3001                       		move.w	d1,d0
00015170                            
00015170                            loc_13278:
00015170 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015176 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015178 08A8 0000 0022             		bclr	#0,$22(a0)	
0001517E D045                       		add.w	d5,d0	
00015180 B046                       		cmp.w	d6,d0	
00015182 6D00                       		blt.s	Obj01_JumpMove
00015184 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015186 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015188 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001518A 3006                       		move.w	d6,d0
0001518C                            
0001518C                            Obj01_JumpMove:
0001518C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00015190                            
00015190                            Obj01_ResetScr2:
00015190 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00015196 6700                       		beq.s	loc_132A4	; if yes, branch
00015198 6400                       		bcc.s	loc_132A0
0001519A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001519E                            
0001519E                            loc_132A0:
0001519E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000151A2                            
000151A2                            loc_132A4:
000151A2 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000151A8 6500                       		bcs.s	locret_132D2	; if yes, branch
000151AA 3028 0010                  		move.w	$10(a0),d0
000151AE 3200                       		move.w	d0,d1
000151B0 EA41                       		asr.w	#5,d1
000151B2 6700                       		beq.s	locret_132D2
000151B4 6B00                       		bmi.s	loc_132C6
000151B6 9041                       		sub.w	d1,d0
000151B8 6400                       		bcc.s	loc_132C0
000151BA 303C 0000                  		move.w	#0,d0
000151BE                            
000151BE                            loc_132C0:
000151BE 3140 0010                  		move.w	d0,$10(a0)
000151C2 4E75                       		rts	
000151C4                            ; ===========================================================================
000151C4                            
000151C4                            loc_132C6:
000151C4 9041                       		sub.w	d1,d0
000151C6 6500                       		bcs.s	loc_132CE
000151C8 303C 0000                  		move.w	#0,d0
000151CC                            
000151CC                            loc_132CE:
000151CC 3140 0010                  		move.w	d0,$10(a0)
000151D0                            
000151D0                            locret_132D2:
000151D0 4E75                       		rts	
000151D2                            ; End of function Sonic_ChgJumpDir
000151D2                            
000151D2                            ; ===========================================================================
000151D2                            ; ---------------------------------------------------------------------------
000151D2                            ; Unused subroutine to squash Sonic
000151D2                            ; ---------------------------------------------------------------------------
000151D2 1028 0026                  		move.b	$26(a0),d0
000151D6 0600 0020                  		addi.b	#$20,d0
000151DA 0200 00C0                  		andi.b	#$C0,d0
000151DE 6600                       		bne.s	locret_13302
000151E0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000151E4 4A41                       		tst.w	d1
000151E6 6A00                       		bpl.s	locret_13302
000151E8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000151EE 317C 0000 0010             		move.w	#0,$10(a0)
000151F4 317C 0000 0012             		move.w	#0,$12(a0)
000151FA 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00015200                            
00015200                            locret_13302:
00015200 4E75                       		rts	
00015202                            ; ---------------------------------------------------------------------------
00015202                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015202                            ; ---------------------------------------------------------------------------
00015202                            
00015202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015202                            
00015202                            
00015202                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00015202 2228 0008                  		move.l	8(a0),d1
00015206 3028 0010                  		move.w	$10(a0),d0
0001520A 48C0                       		ext.l	d0
0001520C E180                       		asl.l	#8,d0
0001520E D280                       		add.l	d0,d1
00015210 4841                       		swap	d1
00015212 3038 F728                  		move.w	($FFFFF728).w,d0
00015216 0640 0010                  		addi.w	#$10,d0
0001521A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001521C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001521E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00015222 0640 0128                  		addi.w	#$128,d0
00015226 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001522A 6600                       		bne.s	loc_13332
0001522C 0640 0040                  		addi.w	#$40,d0
00015230                            
00015230                            loc_13332:
00015230 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015232 6300                       		bls.s	Boundary_Sides	; if yes, branch
00015234                            
00015234                            loc_13336:
00015234 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015238 0640 00E0                  		addi.w	#$E0,d0
0001523C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00015240 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00015242 4E75                       		rts	
00015244                            ; ===========================================================================
00015244                            
00015244                            Boundary_Bottom:
00015244 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001524A 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001524E 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00015254 6500 0000                  		bcs.w	KillSonic
00015258 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001525C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015262 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00015268 4E75                       		rts	
0001526A                            ; ===========================================================================
0001526A                            
0001526A                            Boundary_Sides:
0001526A 3140 0008                  		move.w	d0,8(a0)
0001526E 317C 0000 000A             		move.w	#0,$A(a0)
00015274 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001527A 317C 0000 0014             		move.w	#0,$14(a0)
00015280 60B2                       		bra.s	loc_13336
00015282                            ; End of function Sonic_LevelBound
00015282                            
00015282                            ; ---------------------------------------------------------------------------
00015282                            ; Subroutine allowing Sonic to jump
00015282                            ; ---------------------------------------------------------------------------
00015282                            
00015282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015282                            
00015282                            
00015282                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015282 1038 F603                  		move.b	($FFFFF603).w,d0
00015286 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001528A 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001528E 7000                       		moveq	#0,d0
00015290 1028 0026                  		move.b	$26(a0),d0
00015294 0600 0080                  		addi.b	#$80,d0
00015298 6100 0000                  		bsr.w	sub_14D48
0001529C 0C41 0006                  		cmpi.w	#6,d1
000152A0 6D00 0000                  		blt.w	locret_1348E
000152A4 343C 0680                  		move.w	#$680,d2
000152A8 0828 0006 0022             		btst	#6,$22(a0)
000152AE 6700                       		beq.s	loc_1341C
000152B0 343C 0380                  		move.w	#$380,d2
000152B4                            
000152B4                            loc_1341C:
000152B4 7000                       		moveq	#0,d0
000152B6 1028 0026                  		move.b	$26(a0),d0
000152BA 0400 0040                  		subi.b	#$40,d0
000152BE 4EB9 0000 2B7A             		jsr	(CalcSine).l
000152C4 C3C2                       		muls.w	d2,d1
000152C6 E081                       		asr.l	#8,d1
000152C8 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000152CC C1C2                       		muls.w	d2,d0
000152CE E080                       		asr.l	#8,d0
000152D0 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000152D4 08E8 0001 0022             		bset	#1,$22(a0)
000152DA 08A8 0005 0022             		bclr	#5,$22(a0)
000152E0 588F                       		addq.l	#4,sp
000152E2 117C 0001 003C             		move.b	#1,$3C(a0)
000152E8 4228 0038                  		clr.b	$38(a0)
000152EC 303C 00A0                  		move.w	#$A0,d0
000152F0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
000152F6 117C 0013 0016             		move.b	#$13,$16(a0)
000152FC 117C 0009 0017             		move.b	#9,$17(a0)
00015302 0828 0002 0022             		btst	#2,$22(a0)
00015308 6600                       		bne.s	loc_13490
0001530A 117C 000E 0016             		move.b	#$E,$16(a0)
00015310 117C 0007 0017             		move.b	#7,$17(a0)
00015316 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "jumping"	animation
0001531C 08E8 0002 0022             		bset	#2,$22(a0)
00015322 5A68 000C                  		addq.w	#5,$C(a0)
00015326                            
00015326                            locret_1348E:
00015326 4E75                       		rts	
00015328                            ; ===========================================================================
00015328                            
00015328                            loc_13490:
00015328 08E8 0004 0022             		bset	#4,$22(a0)
0001532E 4E75                       		rts	
00015330                            ; End of function Sonic_Jump
00015330                            
00015330                            
00015330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015330                            
00015330                            
00015330                            Sonic_JumpAnimate:
00015330 103C 0020                  		move.b #$20,d0 ;animation down
00015334 4A68 0012                  		tst.w $12(a0)
00015338 6A00                       		bpl.s @positive
0001533A 103C 001F                  		move.b #$1F,d0 ;animation up
0001533E                            
0001533E                            @positive:
0001533E 1140 001C                  		move.b d0,$1C(a0)
00015342 4E75                       		rts
00015344                            
00015344                            Sonic_JumpHeight:			; XREF: Obj01_MdAir; Obj01_MdJump
00015344 4A28 003C                  		tst.b	$3C(a0)
00015348 6700                       		beq.s	loc_134C4
0001534A 323C FC00                  		move.w	#-$400,d1
0001534E 0828 0006 0022             		btst	#6,$22(a0)
00015354 6700                       		beq.s	loc_134AE
00015356 323C FE00                  		move.w	#-$200,d1
0001535A                            
0001535A                            loc_134AE:
0001535A B268 0012                  		cmp.w	$12(a0),d1
0001535E 6F00                       		ble.s	locret_134C2
00015360 1038 F602                  		move.b	($FFFFF602).w,d0
00015364 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
00015368 6600                       		bne.s	locret_134C2	; if yes, branch
0001536A 3141 0012                  		move.w	d1,$12(a0)
0001536E                            
0001536E                            locret_134C2:
0001536E 4E75                       		rts	
00015370                            ; ===========================================================================
00015370                            
00015370                            loc_134C4:
00015370 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00015376 6C00                       		bge.s	locret_134D2
00015378 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001537E                            
0001537E                            locret_134D2:
0001537E 4E75                       		rts	
00015380                            ; End of function Sonic_JumpHeight
00015380                            
00015380                            ; ---------------------------------------------------------------------------
00015380                            ; Subroutine to	slow Sonic walking up a	slope
00015380                            ; ---------------------------------------------------------------------------
00015380                            
00015380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015380                            
00015380                            
00015380                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00015380 1028 0026                  		move.b	$26(a0),d0
00015384 0600 0060                  		addi.b	#$60,d0
00015388 0C00 00C0                  		cmpi.b	#$C0,d0
0001538C 6400                       		bcc.s	locret_13508
0001538E 1028 0026                  		move.b	$26(a0),d0
00015392 4EB9 0000 2B7A             		jsr	(CalcSine).l
00015398 C1FC 0020                  		muls.w	#$20,d0
0001539C E080                       		asr.l	#8,d0
0001539E 4A68 0014                  		tst.w	$14(a0)
000153A2 6700                       		beq.s	locret_13508
000153A4 6B00                       		bmi.s	loc_13504
000153A6 4A40                       		tst.w	d0
000153A8 6700                       		beq.s	locret_13502
000153AA D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000153AE                            
000153AE                            locret_13502:
000153AE 4E75                       		rts	
000153B0                            ; ===========================================================================
000153B0                            
000153B0                            loc_13504:
000153B0 D168 0014                  		add.w	d0,$14(a0)
000153B4                            
000153B4                            locret_13508:
000153B4 4E75                       		rts	
000153B6                            ; End of function Sonic_SlopeResist
000153B6                            
000153B6                            ; ---------------------------------------------------------------------------
000153B6                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000153B6                            ; ---------------------------------------------------------------------------
000153B6                            
000153B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B6                            
000153B6                            
000153B6                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000153B6 1028 0026                  		move.b	$26(a0),d0
000153BA 0600 0060                  		addi.b	#$60,d0
000153BE 0C00 00C0                  		cmpi.b	#-$40,d0
000153C2 6400                       		bcc.s	locret_13544
000153C4 1028 0026                  		move.b	$26(a0),d0
000153C8 4EB9 0000 2B7A             		jsr	(CalcSine).l
000153CE C1FC 0050                  		muls.w	#$50,d0
000153D2 E080                       		asr.l	#8,d0
000153D4 4A68 0014                  		tst.w	$14(a0)
000153D8 6B00                       		bmi.s	loc_1353A
000153DA 4A40                       		tst.w	d0
000153DC 6A00                       		bpl.s	loc_13534
000153DE E480                       		asr.l	#2,d0
000153E0                            
000153E0                            loc_13534:
000153E0 D168 0014                  		add.w	d0,$14(a0)
000153E4 4E75                       		rts	
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            loc_1353A:
000153E6 4A40                       		tst.w	d0
000153E8 6B00                       		bmi.s	loc_13540
000153EA E480                       		asr.l	#2,d0
000153EC                            
000153EC                            loc_13540:
000153EC D168 0014                  		add.w	d0,$14(a0)
000153F0                            
000153F0                            locret_13544:
000153F0 4E75                       		rts	
000153F2                            ; End of function Sonic_RollRepel
000153F2                            
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            ; Subroutine to	push Sonic down	a slope
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            
000153F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F2                            
000153F2                            
000153F2                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000153F2 4E71                       		nop	
000153F4 4A28 0038                  		tst.b	$38(a0)
000153F8 6600                       		bne.s	locret_13580
000153FA 4A68 003E                  		tst.w	$3E(a0)
000153FE 6600                       		bne.s	locret_13580
00015400 1028 0026                  		move.b	$26(a0),d0
00015404 0600 0020                  		addi.b	#$20,d0
00015408 0200 00C0                  		andi.b	#$C0,d0
0001540C 6700                       		beq.s	locret_13580
0001540E 3028 0014                  		move.w	$14(a0),d0
00015412 6A00                       		bpl.s	loc_1356A
00015414 4440                       		neg.w	d0
00015416                            
00015416                            loc_1356A:
00015416 0C40 0280                  		cmpi.w	#$280,d0
0001541A 6400                       		bcc.s	locret_13580
0001541C 4268 0014                  		clr.w	$14(a0)
00015420 08E8 0001 0022             		bset	#1,$22(a0)
00015426 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001542C                            
0001542C                            locret_13580:
0001542C 4E75                       		rts	
0001542E                            ; ===========================================================================
0001542E                            
0001542E                            loc_13582:
0001542E 4E75                       		rts	
00015430                            ; End of function Sonic_SlopeRepel
00015430                            
00015430                            ; ---------------------------------------------------------------------------
00015430                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015430                            ; ---------------------------------------------------------------------------
00015430                            
00015430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015430                            
00015430                            
00015430                            Sonic_JumpAngle:			; XREF: Obj01_MdAir; Obj01_MdJump
00015430 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015434 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015436 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015438                            
00015438 5400                       		addq.b	#2,d0		; increase angle
0001543A 6400                       		bcc.s	loc_13596
0001543C 7000                       		moveq	#0,d0
0001543E                            
0001543E                            loc_13596:
0001543E 6000                       		bra.s	loc_1359E
00015440                            ; ===========================================================================
00015440                            
00015440                            loc_13598:
00015440 5500                       		subq.b	#2,d0		; decrease angle
00015442 6400                       		bcc.s	loc_1359E
00015444 7000                       		moveq	#0,d0
00015446                            
00015446                            loc_1359E:
00015446 1140 0026                  		move.b	d0,$26(a0)
0001544A                            
0001544A                            locret_135A2:
0001544A 4E75                       		rts	
0001544C                            ; End of function Sonic_JumpAngle
0001544C                            
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            
0001544C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001544C                            
0001544C                            
0001544C                            Sonic_Floor:				; XREF: Obj01_MdAir; Obj01_MdJump
0001544C 3228 0010                  		move.w	$10(a0),d1
00015450 3428 0012                  		move.w	$12(a0),d2
00015454 4EB9 0000 2E48             		jsr	(CalcAngle).l
0001545A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001545E 0400 0020                  		subi.b	#$20,d0
00015462 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015466 0200 00C0                  		andi.b	#$C0,d0
0001546A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001546E 0C00 0040                  		cmpi.b	#$40,d0
00015472 6700 0000                  		beq.w	loc_13680
00015476 0C00 0080                  		cmpi.b	#$80,d0
0001547A 6700 0000                  		beq.w	loc_136E2
0001547E 0C00 00C0                  		cmpi.b	#-$40,d0
00015482 6700 0000                  		beq.w	loc_1373E
00015486 6100 0000                  		bsr.w	Sonic_HitWall
0001548A 4A41                       		tst.w	d1
0001548C 6A00                       		bpl.s	loc_135F0
0001548E 9368 0008                  		sub.w	d1,8(a0)
00015492 317C 0000 0010             		move.w	#0,$10(a0)
00015498                            
00015498                            loc_135F0:
00015498 6100 0000                  		bsr.w	sub_14EB4
0001549C 4A41                       		tst.w	d1
0001549E 6A00                       		bpl.s	loc_13602
000154A0 D368 0008                  		add.w	d1,8(a0)
000154A4 317C 0000 0010             		move.w	#0,$10(a0)
000154AA                            
000154AA                            loc_13602:
000154AA 6100 0000                  		bsr.w	Sonic_HitFloor
000154AE 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000154B2 4A41                       		tst.w	d1
000154B4 6A00                       		bpl.s	locret_1367E
000154B6 1428 0012                  		move.b	$12(a0),d2
000154BA 5002                       		addq.b	#8,d2
000154BC 4402                       		neg.b	d2
000154BE B202                       		cmp.b	d2,d1
000154C0 6C00                       		bge.s	loc_1361E
000154C2 B002                       		cmp.b	d2,d0
000154C4 6D00                       		blt.s	locret_1367E
000154C6                            
000154C6                            loc_1361E:
000154C6 D368 000C                  		add.w	d1,$C(a0)
000154CA 1143 0026                  		move.b	d3,$26(a0)
000154CE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000154D2 117C 0000 001C             		move.b	#0,$1C(a0)
000154D8 1003                       		move.b	d3,d0
000154DA 0600 0020                  		addi.b	#$20,d0
000154DE 0200 0040                  		andi.b	#$40,d0
000154E2 6600                       		bne.s	loc_1365C
000154E4 1003                       		move.b	d3,d0
000154E6 0600 0010                  		addi.b	#$10,d0
000154EA 0200 0020                  		andi.b	#$20,d0
000154EE 6700                       		beq.s	loc_1364E
000154F0 E0E8 0012                  		asr	$12(a0)
000154F4 6000                       		bra.s	loc_13670
000154F6                            ; ===========================================================================
000154F6                            
000154F6                            loc_1364E:
000154F6 317C 0000 0012             		move.w	#0,$12(a0)
000154FC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015502 4E75                       		rts	
00015504                            ; ===========================================================================
00015504                            
00015504                            loc_1365C:
00015504 317C 0000 0010             		move.w	#0,$10(a0)
0001550A 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00015510 6F00                       		ble.s	loc_13670
00015512 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00015518                            
00015518                            loc_13670:
00015518 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001551E 4A03                       		tst.b	d3
00015520 6A00                       		bpl.s	locret_1367E
00015522 4468 0014                  		neg.w	$14(a0)
00015526                            
00015526                            locret_1367E:
00015526 4E75                       		rts	
00015528                            ; ===========================================================================
00015528                            
00015528                            loc_13680:
00015528 6100 0000                  		bsr.w	Sonic_HitWall
0001552C 4A41                       		tst.w	d1
0001552E 6A00                       		bpl.s	loc_1369A
00015530 9368 0008                  		sub.w	d1,8(a0)
00015534 317C 0000 0010             		move.w	#0,$10(a0)
0001553A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015540 4E75                       		rts	
00015542                            ; ===========================================================================
00015542                            
00015542                            loc_1369A:
00015542 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015546 4A41                       		tst.w	d1
00015548 6A00                       		bpl.s	loc_136B4
0001554A 9368 000C                  		sub.w	d1,$C(a0)
0001554E 4A68 0012                  		tst.w	$12(a0)
00015552 6A00                       		bpl.s	locret_136B2
00015554 317C 0000 0012             		move.w	#0,$12(a0)
0001555A                            
0001555A                            locret_136B2:
0001555A 4E75                       		rts	
0001555C                            ; ===========================================================================
0001555C                            
0001555C                            loc_136B4:
0001555C 4A68 0012                  		tst.w	$12(a0)
00015560 6B00                       		bmi.s	locret_136E0
00015562 6100 0000                  		bsr.w	Sonic_HitFloor
00015566 4A41                       		tst.w	d1
00015568 6A00                       		bpl.s	locret_136E0
0001556A D368 000C                  		add.w	d1,$C(a0)
0001556E 1143 0026                  		move.b	d3,$26(a0)
00015572 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015576 117C 0000 001C             		move.b	#0,$1C(a0)
0001557C 317C 0000 0012             		move.w	#0,$12(a0)
00015582 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015588                            
00015588                            locret_136E0:
00015588 4E75                       		rts	
0001558A                            ; ===========================================================================
0001558A                            
0001558A                            loc_136E2:
0001558A 6100 0000                  		bsr.w	Sonic_HitWall
0001558E 4A41                       		tst.w	d1
00015590 6A00                       		bpl.s	loc_136F4
00015592 9368 0008                  		sub.w	d1,8(a0)
00015596 317C 0000 0010             		move.w	#0,$10(a0)
0001559C                            
0001559C                            loc_136F4:
0001559C 6100 0000                  		bsr.w	sub_14EB4
000155A0 4A41                       		tst.w	d1
000155A2 6A00                       		bpl.s	loc_13706
000155A4 D368 0008                  		add.w	d1,8(a0)
000155A8 317C 0000 0010             		move.w	#0,$10(a0)
000155AE                            
000155AE                            loc_13706:
000155AE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000155B2 4A41                       		tst.w	d1
000155B4 6A00                       		bpl.s	locret_1373C
000155B6 9368 000C                  		sub.w	d1,$C(a0)
000155BA 1003                       		move.b	d3,d0
000155BC 0600 0020                  		addi.b	#$20,d0
000155C0 0200 0040                  		andi.b	#$40,d0
000155C4 6600                       		bne.s	loc_13726
000155C6 317C 0000 0012             		move.w	#0,$12(a0)
000155CC 4E75                       		rts	
000155CE                            ; ===========================================================================
000155CE                            
000155CE                            loc_13726:
000155CE 1143 0026                  		move.b	d3,$26(a0)
000155D2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000155D6 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155DC 4A03                       		tst.b	d3
000155DE 6A00                       		bpl.s	locret_1373C
000155E0 4468 0014                  		neg.w	$14(a0)
000155E4                            
000155E4                            locret_1373C:
000155E4 4E75                       		rts	
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_1373E:
000155E6 6100 0000                  		bsr.w	sub_14EB4
000155EA 4A41                       		tst.w	d1
000155EC 6A00                       		bpl.s	loc_13758
000155EE D368 0008                  		add.w	d1,8(a0)
000155F2 317C 0000 0010             		move.w	#0,$10(a0)
000155F8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155FE 4E75                       		rts	
00015600                            ; ===========================================================================
00015600                            
00015600                            loc_13758:
00015600 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015604 4A41                       		tst.w	d1
00015606 6A00                       		bpl.s	loc_13772
00015608 9368 000C                  		sub.w	d1,$C(a0)
0001560C 4A68 0012                  		tst.w	$12(a0)
00015610 6A00                       		bpl.s	locret_13770
00015612 317C 0000 0012             		move.w	#0,$12(a0)
00015618                            
00015618                            locret_13770:
00015618 4E75                       		rts	
0001561A                            ; ===========================================================================
0001561A                            
0001561A                            loc_13772:
0001561A 4A68 0012                  		tst.w	$12(a0)
0001561E 6B00                       		bmi.s	locret_1379E
00015620 6100 0000                  		bsr.w	Sonic_HitFloor
00015624 4A41                       		tst.w	d1
00015626 6A00                       		bpl.s	locret_1379E
00015628 D368 000C                  		add.w	d1,$C(a0)
0001562C 1143 0026                  		move.b	d3,$26(a0)
00015630 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015634 117C 0000 001C             		move.b	#0,$1C(a0)
0001563A 317C 0000 0012             		move.w	#0,$12(a0)
00015640 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015646                            
00015646                            locret_1379E:
00015646 4E75                       		rts	
00015648                            ; End of function Sonic_Floor
00015648                            
00015648                            ; ---------------------------------------------------------------------------
00015648                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015648                            ; ---------------------------------------------------------------------------
00015648                            
00015648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015648                            
00015648                            
00015648                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00015648 0828 0004 0022             		btst	#4,$22(a0)
0001564E 6700                       		beq.s	loc_137AE
00015650 4E71                       		nop	
00015652 4E71                       		nop	
00015654 4E71                       		nop	
00015656                            
00015656                            loc_137AE:
00015656 08A8 0005 0022             		bclr	#5,$22(a0)
0001565C 08A8 0001 0022             		bclr	#1,$22(a0)
00015662 08A8 0004 0022             		bclr	#4,$22(a0)
00015668 0828 0002 0022             		btst	#2,$22(a0)
0001566E 6700                       		beq.s	loc_137E4
00015670 08A8 0002 0022             		bclr	#2,$22(a0)
00015676 117C 0013 0016             		move.b	#$13,$16(a0)
0001567C 117C 0009 0017             		move.b	#9,$17(a0)
00015682 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00015688 5B68 000C                  		subq.w	#5,$C(a0)
0001568C                            
0001568C                            loc_137E4:
0001568C 117C 0000 003C             		move.b	#0,$3C(a0)
00015692 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015698 4E75                       		rts	
0001569A                            ; End of function Sonic_ResetOnFloor
0001569A                            
0001569A                            ; ===========================================================================
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Sonic	when he	gets hurt
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            Obj01_Hurt:				; XREF: Obj01_Index
0001569A 4EBA 9A2E                  		jsr	SpeedToPos
0001569E 0668 0030 0012             		addi.w	#$30,$12(a0)
000156A4 0828 0006 0022             		btst	#6,$22(a0)
000156AA 6700                       		beq.s	loc_1380C
000156AC 0468 0020 0012             		subi.w	#$20,$12(a0)
000156B2                            
000156B2                            loc_1380C:
000156B2 6100 0000                  		bsr.w	Sonic_HurtStop
000156B6 6100 FB4A                  		bsr.w	Sonic_LevelBound
000156BA 6100 F55A                  		bsr.w	Sonic_RecordPos
000156BE 6100 0000                  		bsr.w	Sonic_Animate
000156C2 6100 0000                  		bsr.w	LoadSonicDynPLC
000156C6 4EFA 9A1C                  		jmp	DisplaySprite
000156CA                            
000156CA                            ; ---------------------------------------------------------------------------
000156CA                            ; Subroutine to	stop Sonic falling after he's been hurt
000156CA                            ; ---------------------------------------------------------------------------
000156CA                            
000156CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156CA                            
000156CA                            
000156CA                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000156CA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000156CE 0640 00E0                  		addi.w	#$E0,d0
000156D2 B068 000C                  		cmp.w	$C(a0),d0
000156D6 6500 0000                  		bcs.w	KillSonic
000156DA 6100 FD70                  		bsr.w	Sonic_Floor
000156DE 0828 0001 0022             		btst	#1,$22(a0)
000156E4 6600                       		bne.s	locret_13860
000156E6 7000                       		moveq	#0,d0
000156E8 3140 0012                  		move.w	d0,$12(a0)
000156EC 3140 0010                  		move.w	d0,$10(a0)
000156F0 3140 0014                  		move.w	d0,$14(a0)
000156F4 117C 0000 001C             		move.b	#0,$1C(a0)
000156FA 5528 0024                  		subq.b	#2,$24(a0)
000156FE 317C 0078 0030             		move.w	#$78,$30(a0)
00015704                            
00015704                            locret_13860:
00015704 4E75                       		rts	
00015706                            ; End of function Sonic_HurtStop
00015706                            
00015706                            ; ===========================================================================
00015706                            ; ---------------------------------------------------------------------------
00015706                            ; Sonic	when he	dies
00015706                            ; ---------------------------------------------------------------------------
00015706                            
00015706                            Obj01_Death:				; XREF: Obj01_Index
00015706 6100 0000                  		bsr.w	GameOver
0001570A 4EBA 999E                  		jsr	ObjectFall
0001570E 6100 F506                  		bsr.w	Sonic_RecordPos
00015712 6100 0000                  		bsr.w	Sonic_Animate
00015716 6100 0000                  		bsr.w	LoadSonicDynPLC
0001571A 4EFA 99C8                  		jmp	DisplaySprite
0001571E                            
0001571E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001571E                            
0001571E                            
0001571E                            GameOver:				; XREF: Obj01_Death
0001571E 3038 F704                  		move.w	($FFFFF704).w,d0
00015722 0640 0100                  		addi.w	#$100,d0
00015726 B068 000C                  		cmp.w	$C(a0),d0
0001572A 6A00 0000                  		bpl.w	locret_13900
0001572E 317C FFC8 0012             		move.w	#-$38,$12(a0)
00015734 5428 0024                  		addq.b	#2,$24(a0)
00015738 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001573C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00015740 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00015744 6600                       		bne.s	loc_138D4
00015746 317C 0000 003A             		move.w	#0,$3A(a0)
0001574C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00015752 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015758 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001575E 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015762                            
00015762                            loc_138C2:
00015762 303C 008F                  		move.w	#$8F,d0
00015766 4EB9 0000 12C6             		jsr	(PlaySound).l	; play game over music
0001576C 7003                       		moveq	#3,d0
0001576E 4EF9 0000 1586             		jmp	(LoadPLC).l	; load game over patterns
00015774                            ; ===========================================================================
00015774                            
00015774                            loc_138D4:
00015774 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001577A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001577E 6700                       		beq.s	locret_13900	; if not, branch
00015780 317C 0000 003A             		move.w	#0,$3A(a0)
00015786 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001578C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015792 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015798 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001579E 60C2                       		bra.s	loc_138C2
000157A0                            ; ===========================================================================
000157A0                            
000157A0                            locret_13900:
000157A0 4E75                       		rts	
000157A2                            ; End of function GameOver
000157A2                            
000157A2                            ; ===========================================================================
000157A2                            ; ---------------------------------------------------------------------------
000157A2                            ; Sonic	when the level is restarted
000157A2                            ; ---------------------------------------------------------------------------
000157A2                            
000157A2                            Obj01_ResetLevel:			; XREF: Obj01_Index
000157A2 4A68 003A                  		tst.w	$3A(a0)
000157A6 6700                       		beq.s	locret_13914
000157A8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000157AC 6600                       		bne.s	locret_13914
000157AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000157B4                            
000157B4                            locret_13914:
000157B4 4E75                       		rts	
000157B6                            
000157B6                            ; ---------------------------------------------------------------------------
000157B6                            ; Sonic when he's drowning
000157B6                            ; ---------------------------------------------------------------------------
000157B6                             
000157B6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000157B6                             
000157B6                             
000157B6                            Sonic_Drowned:
000157B6 6100 9912                          bsr.w   SpeedToPos              ; Make Sonic able to move
000157BA 0668 0010 0012                     addi.w  #$10,$12(a0)          ; Apply gravity
000157C0 6100 F454                          bsr.w   Sonic_RecordPos    ; Record position
000157C4 6100                               bsr.s   Sonic_Animate           ; Animate Sonic
000157C6 6100 0000                          bsr.w   LoadSonicDynPLC           ; Load Sonic's DPLCs
000157CA 6000 9918                          bra.w   DisplaySprite           ; And finally, display Sonic
000157CE                            
000157CE                            ; ---------------------------------------------------------------------------
000157CE                            ; Subroutine to	animate	Sonic's sprites
000157CE                            ; ---------------------------------------------------------------------------
000157CE                            
000157CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CE                            
000157CE                            
000157CE                            Sonic_Animate:				; XREF: Obj01_Control; et al
000157CE 43F9 0000 0000             		lea	(SonicAniData).l,a1
000157D4 7000                       		moveq	#0,d0
000157D6 1028 001C                  		move.b	$1C(a0),d0
000157DA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000157DE 6700                       		beq.s	SAnim_Do	; if not, branch
000157E0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000157E4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000157EA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000157F0                            
000157F0                            SAnim_Do:
000157F0 D040                       		add.w	d0,d0
000157F2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000157F6 1011                       		move.b	(a1),d0
000157F8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000157FA 1228 0022                  		move.b	$22(a0),d1
000157FE 0201 0001                  		andi.b	#1,d1
00015802 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015808 8328 0001                  		or.b	d1,1(a0)
0001580C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015810 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015812 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015816                            
00015816                            SAnim_Do2:
00015816 7200                       		moveq	#0,d1
00015818 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001581C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015820 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015822                            
00015822                            SAnim_Next:
00015822 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015826 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001582A                            
0001582A                            SAnim_Delay:
0001582A 4E75                       		rts	
0001582C                            ; ===========================================================================
0001582C                            
0001582C                            SAnim_End_FF:
0001582C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001582E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015830 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015836 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001583A 60E6                       		bra.s	SAnim_Next
0001583C                            ; ===========================================================================
0001583C                            
0001583C                            SAnim_End_FE:
0001583C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001583E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015840 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015844 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00015848 9200                       		sub.b	d0,d1
0001584A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001584E 60D2                       		bra.s	SAnim_Next
00015850                            ; ===========================================================================
00015850                            
00015850                            SAnim_End_FD:
00015850 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015852 6600                       		bne.s	SAnim_End	; if not, branch
00015854 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001585A                            
0001585A                            SAnim_End:
0001585A 4E75                       		rts	
0001585C                            ; ===========================================================================
0001585C                            
0001585C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001585C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015860 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015862 5200                       		addq.b	#1,d0		; is animation walking/running?
00015864 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00015868 7200                       		moveq	#0,d1
0001586A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001586E 1428 0022                  		move.b	$22(a0),d2
00015872 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015876 6600                       		bne.s	loc_13A70	; if yes, branch
00015878 4600                       		not.b	d0		; reverse angle
0001587A                            
0001587A                            loc_13A70:
0001587A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001587E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015880 7203                       		moveq	#3,d1
00015882                            
00015882                            loc_13A78:
00015882 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015888 B302                       		eor.b	d1,d2
0001588A 8528 0001                  		or.b	d2,1(a0)
0001588E 0828 0005 0022             		btst	#5,$22(a0)
00015894 6600 0000                  		bne.w	SAnim_Push
00015898 E808                       		lsr.b	#4,d0		; divide angle by $10
0001589A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001589E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158A2 6A00                       		bpl.s	loc_13A9C
000158A4 4442                       		neg.w	d2
000158A6                            
000158A6                            loc_13A9C:
000158A6 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000158AC 4A28 0039                  		tst.b	crawling(a0)
000158B0 6600                       		bne.s	loc_13AB4
000158B2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000158B6 6400                       		bcc.s	loc_13AB4	; if yes, branch
000158B8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000158BE 1200                       		move.b	d0,d1
000158C0 E209                       		lsr.b	#1,d1
000158C2 D001                       		add.b	d1,d0
000158C4                            
000158C4                            loc_13AB4:
000158C4 D000                       		add.b	d0,d0
000158C6 1600                       		move.b	d0,d3
000158C8 4442                       		neg.w	d2
000158CA 0642 0800                  		addi.w	#$800,d2
000158CE 6A00                       		bpl.s	loc_13AC2
000158D0 7400                       		moveq	#0,d2
000158D2                            
000158D2                            loc_13AC2:
000158D2 E04A                       		lsr.w	#8,d2
000158D4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000158D8 6100 FF3C                  		bsr.w	SAnim_Do2
000158DC D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000158E0 4E75                       		rts	
000158E2                            ; ===========================================================================
000158E2                            
000158E2                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000158E2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000158E4 6600                       		bne.s	SAnim_Push	; if not, branch
000158E6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000158EA 6A00                       		bpl.s	loc_13ADE
000158EC 4442                       		neg.w	d2
000158EE                            
000158EE                            loc_13ADE:
000158EE                            	;	lea	(SonAni_Roll2).l,a1 ; use fast animation
000158EE                            	;	cmpi.w	#$600,d2	; is Sonic moving fast?
000158EE                            	;	bcc.s	loc_13AF0	; if yes, branch
000158EE                            	;	lea	(SonAni_Roll).l,a1 ; use slower	animation
000158EE                            
000158EE                            loc_13AF0:
000158EE 4442                       		neg.w	d2
000158F0 0642 0400                  		addi.w	#$400,d2
000158F4 6A00                       		bpl.s	loc_13AFA
000158F6 7400                       		moveq	#0,d2
000158F8                            
000158F8                            loc_13AFA:
000158F8 E04A                       		lsr.w	#8,d2
000158FA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000158FE 1228 0022                  		move.b	$22(a0),d1
00015902 0201 0001                  		andi.b	#1,d1
00015906 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001590C 8328 0001                  		or.b	d1,1(a0)
00015910 6000 FF04                  		bra.w	SAnim_Do2
00015914                            ; ===========================================================================
00015914                            
00015914                            SAnim_Push:				; XREF: SAnim_RollJump
00015914 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015918 6B00                       		bmi.s	loc_13B1E
0001591A 4442                       		neg.w	d2
0001591C                            
0001591C                            loc_13B1E:
0001591C 0642 0800                  		addi.w	#$800,d2
00015920 6A00                       		bpl.s	loc_13B26
00015922 7400                       		moveq	#0,d2
00015924                            
00015924                            loc_13B26:
00015924 EC4A                       		lsr.w	#6,d2
00015926 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001592A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00015930 1228 0022                  		move.b	$22(a0),d1
00015934 0201 0001                  		andi.b	#1,d1
00015938 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001593E 8328 0001                  		or.b	d1,1(a0)
00015942 6000 FED2                  		bra.w	SAnim_Do2
00015946                            ; End of function Sonic_Animate
00015946                            
00015946                            ; ===========================================================================
00015946                            SonicAniData:
00015946                            	include "_anim\Sonic.asm"
00015946                            ; ---------------------------------------------------------------------------
00015946                            ; Animation script - Sonic
00015946                            ; ---------------------------------------------------------------------------
00015946 0000                       		dc.w SonAni_Walk-SonicAniData ;0
00015948 0000                       		dc.w SonAni_Run-SonicAniData ;1
0001594A 0000                       		dc.w SonAni_Blank-SonicAniData ;2
0001594C 0000                       		dc.w SonAni_Blank-SonicAniData ;3
0001594E 0000                       		dc.w SonAni_Push-SonicAniData ;4
00015950 0000                       		dc.w SonAni_Wait-SonicAniData ;5
00015952 0000                       		dc.w SonAni_Balance-SonicAniData ;6
00015954 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
00015956 0000                       		dc.w SonAni_Duck-SonicAniData ;8
00015958 0000                       		dc.w SonAni_Bite-SonicAniData ;9
0001595A 0000                       		dc.w SonAni_Blank-SonicAniData ;A
0001595C 0000                       		dc.w SonAni_Blank-SonicAniData ;B
0001595E 0000                       		dc.w SonAni_Blank-SonicAniData ;C
00015960 0000                       		dc.w SonAni_Stop-SonicAniData ;D
00015962 0000                       		dc.w SonAni_Float1-SonicAniData ;E
00015964 0000                       		dc.w SonAni_Float2-SonicAniData ;F
00015966 0000                       		dc.w SonAni_Spring-SonicAniData ;10
00015968 0000                       		dc.w SonAni_LZHang-SonicAniData ;11
0001596A 0000                       		dc.w SonAni_Blank-SonicAniData ;12
0001596C 0000                       		dc.w SonAni_Blank-SonicAniData ;13
0001596E 0000                       		dc.w SonAni_Blank-SonicAniData ;14
00015970 0000                       		dc.w SonAni_Bubble-SonicAniData ;15
00015972 0000                       		dc.w SonAni_Blank-SonicAniData ;16
00015974 0000                       		dc.w SonAni_Drown-SonicAniData ;17
00015976 0000                       		dc.w SonAni_Death-SonicAniData ;18
00015978 0000                       		dc.w SonAni_Blank-SonicAniData ;19
0001597A 0000                       		dc.w SonAni_Hurt-SonicAniData ;1A
0001597C 0000                       		dc.w SonAni_LZSlide-SonicAniData ;1B
0001597E 0000                       		dc.w SonAni_Blank-SonicAniData ;1C
00015980 0000                       		dc.w SonAni_Float3-SonicAniData ;1D
00015982 0000                       		dc.w SonAni_Float4-SonicAniData ;1E
00015984 0000                       		dc.w SonAni_Jump1-SonicAniData ;1F
00015986 0000                       		dc.w SonAni_Jump2-SonicAniData ;20
00015988 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0 ;Unused
0001598C FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015994 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001599C FD3C 3D3E 3FFF FFFF        SonAni_Push:	dc.b $FD, $3C, $3D, $3E, $3F, $FF, $FF,	$FF
000159A4 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000159BA 1F34 35FF                  SonAni_Balance:	dc.b $1F, $34, $35, $FF
000159BE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000159C2 3F33 FF00                  SonAni_Duck:	dc.b $3F, $33, $FF, 0
000159C6 0201 2E2F 30FD 00          SonAni_Bite:	dc.b 2, 1, $2E, $2F, $30, $FD, 0
000159CD 0731 32FF                  SonAni_Stop:	dc.b 7,	$31, $32, $FF
000159D1 0736 FF                    SonAni_Float1:	dc.b 7,	$36, $FF
000159D4 0736 3742 3843 FF00        SonAni_Float2:	dc.b 7,	$36, $37, $42, $38, $43, $FF, 0
000159DC 2F39 FD00                  SonAni_Spring:	dc.b $2F, $39, $FD, 0
000159E0 043A 3BFF                  SonAni_LZHang:	dc.b 4,	$3A, $3B, $FF
000159E4 0B46 460A 0BFD 0000        SonAni_Bubble:	dc.b $B, $46, $46, $A, $B, $FD,	0, 0
000159EC 2F40 FF00                  SonAni_Drown:	dc.b $2F, $40, $FF, 0
000159F0 0341 FF00                  SonAni_Death:	dc.b 3,	$41, $FF, 0
000159F4 0744 45FF                  SonAni_Hurt:	dc.b 7, $44, $45, $FF
000159F8 0744 45FF                  SonAni_LZSlide:	dc.b 7, $44, $45, $FF
000159FC 0336 3742 3843 FF00        SonAni_Float3:	dc.b 3,	$36, $37, $42, $38, $43, $FF, 0
00015A04 0336 FD00                  SonAni_Float4:	dc.b 3,	$36, $FD, 0 ;Unused?
00015A08 0C47 48FE 0100             SonAni_Jump1:	dc.b $C, $47, $48, $FE, 1, 0
00015A0E 2F49 FD00                  SonAni_Jump2:	dc.b $2F, $49, $FD, 0
00015A12                            		even
00015A12                            		even
00015A12                            
00015A12                            ; ---------------------------------------------------------------------------
00015A12                            ; Sonic	pattern	loading	subroutine
00015A12                            ; ---------------------------------------------------------------------------
00015A12                            
00015A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A12                            
00015A12                            
00015A12                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015A12 7000                       		moveq	#0,d0
00015A14 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015A18 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015A1C 6700                       		beq.s	locret_13C96
00015A1E 11C0 F766                  		move.b	d0,($FFFFF766).w
00015A22 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015A28 D040                       		add.w	d0,d0
00015A2A D4F2 0000                  		adda.w	(a2,d0.w),a2
00015A2E 7A00                       		moveq	#0,d5
00015A30 1A1A                       		move.b	(a2)+,d5
00015A32 5345                       		subq.w	#1,d5
00015A34 6B00                       		bmi.s	locret_13C96
00015A36 383C F000                  		move.w	#$F000,d4
00015A3A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015A40                            
00015A40                            SPLC_ReadEntry:
00015A40 7200                       		moveq	#0,d1
00015A42 121A                       		move.b	(a2)+,d1
00015A44 E149                       		lsl.w	#8,d1
00015A46 121A                       		move.b	(a2)+,d1
00015A48 3601                       		move.w	d1,d3
00015A4A E04B                       		lsr.w	#8,d3
00015A4C 0243 00F0                  		andi.w	#$F0,d3
00015A50 0643 0010                  		addi.w	#$10,d3
00015A54 0241 0FFF                  		andi.w	#$FFF,d1
00015A58 EB89                       		lsl.l	#5,d1
00015A5A D286                       		add.l	d6,d1
00015A5C 3404                       		move.w	d4,d2
00015A5E D843                       		add.w	d3,d4
00015A60 D843                       		add.w	d3,d4
00015A62 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00015A68 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015A6C                            
00015A6C                            locret_13C96:
00015A6C 4E75                       		rts	
00015A6E                            ; End of function LoadSonicDynPLC
00015A6E                            
00015A6E                            ; ===========================================================================
00015A6E                            ; ---------------------------------------------------------------------------
00015A6E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015A6E                            ; ---------------------------------------------------------------------------
00015A6E                            
00015A6E                            Obj0A:					; XREF: Obj_Index
00015A6E 7000                       		moveq	#0,d0
00015A70 1028 0024                  		move.b	$24(a0),d0
00015A74 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015A78 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015A7C                            ; ===========================================================================
00015A7C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015A80 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015A84 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015A88 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015A8C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015A8E                            ; ===========================================================================
00015A8E                            
00015A8E                            Obj0A_Main:				; XREF: Obj0A_Index
00015A8E 5428 0024                  		addq.b	#2,$24(a0)
00015A92 217C 0001 449E 0004        		move.l	#Map_obj64,4(a0)
00015A9A 317C 8348 0002             		move.w	#$8348,2(a0)
00015AA0 117C 0084 0001             		move.b	#$84,1(a0)
00015AA6 117C 0010 0019             		move.b	#$10,$19(a0)
00015AAC 117C 0001 0018             		move.b	#1,$18(a0)
00015AB2 1028 0028                  		move.b	$28(a0),d0
00015AB6 6A00                       		bpl.s	loc_13D00
00015AB8 5028 0024                  		addq.b	#8,$24(a0)
00015ABC 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015AC4 317C 0440 0002             		move.w	#$440,2(a0)
00015ACA 0240 007F                  		andi.w	#$7F,d0
00015ACE 1140 0033                  		move.b	d0,$33(a0)
00015AD2 6000 0000                  		bra.w	Obj0A_Countdown
00015AD6                            ; ===========================================================================
00015AD6                            
00015AD6                            loc_13D00:
00015AD6 1140 001C                  		move.b	d0,$1C(a0)
00015ADA 3168 0008 0030             		move.w	8(a0),$30(a0)
00015AE0 317C FF78 0012             		move.w	#-$88,$12(a0)
00015AE6                            
00015AE6                            Obj0A_Animate:				; XREF: Obj0A_Index
00015AE6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015AEC 4EB9 0000 C138             		jsr	AnimateSprite
00015AF2                            
00015AF2                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015AF2 3038 F646                  		move.w	($FFFFF646).w,d0
00015AF6 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015AFA 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015AFC 117C 0006 0024             		move.b	#6,$24(a0)
00015B02 5E28 001C                  		addq.b	#7,$1C(a0)
00015B06 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015B0C 6700                       		beq.s	Obj0A_Display
00015B0E 6000                       		bra.s	Obj0A_Display
00015B10                            ; ===========================================================================
00015B10                            
00015B10                            Obj0A_Wobble:
00015B10 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015B14 6700                       		beq.s	loc_13D44
00015B16 5868 0030                  		addq.w	#4,$30(a0)
00015B1A                            
00015B1A                            loc_13D44:
00015B1A 1028 0026                  		move.b	$26(a0),d0
00015B1E 5228 0026                  		addq.b	#1,$26(a0)
00015B22 0240 007F                  		andi.w	#$7F,d0
00015B26 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015B2C 1031 0000                  		move.b	(a1,d0.w),d0
00015B30 4880                       		ext.w	d0
00015B32 D068 0030                  		add.w	$30(a0),d0
00015B36 3140 0008                  		move.w	d0,8(a0)
00015B3A 6100                       		bsr.s	Obj0A_ShowNumber
00015B3C 4EBA 958C                  		jsr	SpeedToPos
00015B40 4A28 0001                  		tst.b	1(a0)
00015B44 6A00                       		bpl.s	Obj0A_Delete
00015B46 4EFA 959C                  		jmp	DisplaySprite
00015B4A                            ; ===========================================================================
00015B4A                            
00015B4A                            Obj0A_Delete:
00015B4A 4EFA 95D4                  		jmp	DeleteObject
00015B4E                            ; ===========================================================================
00015B4E                            
00015B4E                            Obj0A_Display:				; XREF: Obj0A_Index
00015B4E 6100                       		bsr.s	Obj0A_ShowNumber
00015B50 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B56 4EB9 0000 C138             		jsr	AnimateSprite
00015B5C 4EFA 9586                  		jmp	DisplaySprite
00015B60                            ; ===========================================================================
00015B60                            
00015B60                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015B60 4EFA 95BE                  		jmp	DeleteObject
00015B64                            ; ===========================================================================
00015B64                            
00015B64                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015B64 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015B6A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015B6C 5368 0038                  		subq.w	#1,$38(a0)
00015B70 6600                       		bne.s	Obj0A_Display2
00015B72 117C 000E 0024             		move.b	#$E,$24(a0)
00015B78 5E28 001C                  		addq.b	#7,$1C(a0)
00015B7C 60D0                       		bra.s	Obj0A_Display
00015B7E                            ; ===========================================================================
00015B7E                            
00015B7E                            Obj0A_Display2:
00015B7E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B84 4EB9 0000 C138             		jsr	AnimateSprite
00015B8A 4A28 0001                  		tst.b	1(a0)
00015B8E 6A00                       		bpl.s	Obj0A_Delete3
00015B90 4EFA 9552                  		jmp	DisplaySprite
00015B94                            ; ===========================================================================
00015B94                            
00015B94                            Obj0A_Delete3:
00015B94 4EFA 958A                  		jmp	DeleteObject
00015B98                            ; ===========================================================================
00015B98                            
00015B98                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015B98 4A68 0038                  		tst.w	$38(a0)
00015B9C 6700                       		beq.s	locret_13E1A
00015B9E 5368 0038                  		subq.w	#1,$38(a0)
00015BA2 6600                       		bne.s	locret_13E1A
00015BA4 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015BAA 6400                       		bcc.s	locret_13E1A
00015BAC 317C 000F 0038             		move.w	#$F,$38(a0)
00015BB2 4268 0012                  		clr.w	$12(a0)
00015BB6 117C 0080 0001             		move.b	#$80,1(a0)
00015BBC 3028 0008                  		move.w	8(a0),d0
00015BC0 9078 F700                  		sub.w	($FFFFF700).w,d0
00015BC4 0640 0080                  		addi.w	#$80,d0
00015BC8 3140 0008                  		move.w	d0,8(a0)
00015BCC 3028 000C                  		move.w	$C(a0),d0
00015BD0 9078 F704                  		sub.w	($FFFFF704).w,d0
00015BD4 0640 0080                  		addi.w	#$80,d0
00015BD8 3140 000A                  		move.w	d0,$A(a0)
00015BDC 117C 000C 0024             		move.b	#$C,$24(a0)
00015BE2                            
00015BE2                            locret_13E1A:
00015BE2 4E75                       		rts	
00015BE4                            ; ===========================================================================
00015BE4                            Obj0A_WobbleData:
00015BE4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015BF5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015C06 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015C17 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015C27 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015C34 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C41 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015C4E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015C5B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015C64                            ; ===========================================================================
00015C64                            
00015C64                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015C64 4A68 002C                  		tst.w	$2C(a0)
00015C68 6600 0000                  		bne.w	loc_13F86
00015C6C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015C72 6400 0000                  		bcc.w	locret_1408C
00015C76 0838 0006 D022             		btst	#6,($FFFFD022).w
00015C7C 6700 0000                  		beq.w	locret_1408C
00015C80 5368 0038                  		subq.w	#1,$38(a0)
00015C84 6A00 0000                  		bpl.w	loc_13FAC
00015C88 317C 003B 0038             		move.w	#59,$38(a0)
00015C8E 317C 0001 0036             		move.w	#1,$36(a0)
00015C94 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015C9A 0240 0001                  		andi.w	#1,d0
00015C9E 1140 0034                  		move.b	d0,$34(a0)
00015CA2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015CA6 0C40 0019                  		cmpi.w	#$19,d0
00015CAA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015CAC 0C40 0014                  		cmpi.w	#$14,d0
00015CB0 6700                       		beq.s	Obj0A_WarnSound
00015CB2 0C40 000F                  		cmpi.w	#$F,d0
00015CB6 6700                       		beq.s	Obj0A_WarnSound
00015CB8 0C40 000C                  		cmpi.w	#$C,d0
00015CBC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015CBE 5328 0032                  		subq.b	#1,$32(a0)
00015CC2 6A00                       		bpl.s	Obj0A_ReduceAir
00015CC4 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015CCA 08E8 0007 0036             		bset	#7,$36(a0)
00015CD0 6000                       		bra.s	Obj0A_ReduceAir
00015CD2                            ; ===========================================================================
00015CD2                            
00015CD2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015CD2 303C 00C2                  		move.w	#$C2,d0
00015CD6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015CDC                            
00015CDC                            Obj0A_ReduceAir:
00015CDC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015CE0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015CE4 6100 0000                  		bsr.w	StopDrowning
00015CE8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015CEE 303C 00B2                  		move.w	#$B2,d0
00015CF2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play drowning sound
00015CF8 117C 000A 0034             		move.b	#$A,$34(a0)
00015CFE 317C 0001 0036             		move.w	#1,$36(a0)
00015D04 317C 0078 002C             		move.w	#$78,$2C(a0)
00015D0A 2F08                       		move.l	a0,-(sp)
00015D0C 41F8 D000                  		lea	($FFFFD000).w,a0
00015D10 6100 F936                  		bsr.w	Sonic_ResetOnFloor
00015D14 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015D1A 08E8 0001 0022             		bset	#1,$22(a0)
00015D20 08E8 0007 0002             		bset	#7,2(a0)
00015D26 317C 0000 0012             		move.w	#0,$12(a0)
00015D2C 317C 0000 0010             		move.w	#0,$10(a0)
00015D32 317C 0000 0014             		move.w	#0,$14(a0)
00015D38 117C 000A 0024             		move.b  #$A,$24(a0)       ; Force the character to drown
00015D3E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015D44 11FC 0000 FE1E             		move.b  #0,($FFFFFE1E).w      ; Stop the timer immediately
00015D4A 11FC 0001 FFBC             		move.b	#1,($FFFFFFBC).w	; Sonic drowned flag
00015D50 205F                       		movea.l	(sp)+,a0
00015D52 4E75                       		rts	
00015D54                            ; ===========================================================================
00015D54                            
00015D54                            loc_13F86:
00015D54 5368 002C                  		subq.w  #1,$2C(a0)
00015D58 6600                       		bne.s   loc_13FAC                       ; Make it jump straight to this location
00015D5A 11FC 0006 D024             		move.b  #6,($FFFFD024).w
00015D60 4E75                       		rts
00015D62                            ; ===========================================================================
00015D62                            
00015D62                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015D62 6000                       		bra.s	Obj0A_MakeItem
00015D64                            ; ===========================================================================
00015D64                            
00015D64                            loc_13FAC:
00015D64 4A68 0036                  		tst.w	$36(a0)
00015D68 6700 0000                  		beq.w	locret_1408C
00015D6C 5368 003A                  		subq.w	#1,$3A(a0)
00015D70 6A00 0000                  		bpl.w	locret_1408C
00015D74                            
00015D74                            Obj0A_MakeItem:
00015D74 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015D7A 0240 000F                  		andi.w	#$F,d0
00015D7E 3140 003A                  		move.w	d0,$3A(a0)
00015D82 4EBA 97F4                  		jsr	SingleObjLoad
00015D86 6600 0000                  		bne.w	locret_1408C
00015D8A 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015D8E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015D94 7006                       		moveq	#6,d0
00015D96 0838 0000 D022             		btst	#0,($FFFFD022).w
00015D9C 6700                       		beq.s	loc_13FF2
00015D9E 4440                       		neg.w	d0
00015DA0 137C 0040 0026             		move.b	#$40,$26(a1)
00015DA6                            
00015DA6                            loc_13FF2:
00015DA6 D169 0008                  		add.w	d0,8(a1)
00015DAA 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015DB0 137C 0006 0028             		move.b	#6,$28(a1)
00015DB6 4A68 002C                  		tst.w	$2C(a0)
00015DBA 6700 0000                  		beq.w	loc_1403E
00015DBE 0268 0007 003A             		andi.w	#7,$3A(a0)
00015DC4 0668 0000 003A             		addi.w	#0,$3A(a0)
00015DCA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015DCE 0440 000C                  		subi.w	#$C,d0
00015DD2 3340 000C                  		move.w	d0,$C(a1)
00015DD6 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015DDC 1340 0026                  		move.b	d0,$26(a1)
00015DE0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015DE4 0200 0003                  		andi.b	#3,d0
00015DE8 6600                       		bne.s	loc_14082
00015DEA 137C 000E 0028             		move.b	#$E,$28(a1)
00015DF0 6000                       		bra.s	loc_14082
00015DF2                            ; ===========================================================================
00015DF2                            
00015DF2                            loc_1403E:
00015DF2 0828 0007 0036             		btst	#7,$36(a0)
00015DF8 6700                       		beq.s	loc_14082
00015DFA 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015DFE E24A                       		lsr.w	#1,d2
00015E00 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015E06 0240 0003                  		andi.w	#3,d0
00015E0A 6600                       		bne.s	loc_1406A
00015E0C 08E8 0006 0036             		bset	#6,$36(a0)
00015E12 6600                       		bne.s	loc_14082
00015E14 1342 0028                  		move.b	d2,$28(a1)
00015E18 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E1E                            
00015E1E                            loc_1406A:
00015E1E 4A28 0034                  		tst.b	$34(a0)
00015E22 6600                       		bne.s	loc_14082
00015E24 08E8 0006 0036             		bset	#6,$36(a0)
00015E2A 6600                       		bne.s	loc_14082
00015E2C 1342 0028                  		move.b	d2,$28(a1)
00015E30 337C 001C 0038             		move.w	#$1C,$38(a1)
00015E36                            
00015E36                            loc_14082:
00015E36 5328 0034                  		subq.b	#1,$34(a0)
00015E3A 6A00                       		bpl.s	locret_1408C
00015E3C 4268 0036                  		clr.w	$36(a0)
00015E40                            
00015E40                            locret_1408C:
00015E40 4E75                       		rts	
00015E42                            
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            
00015E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E42                            
00015E42                            
00015E42                            StopDrowning:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015E42 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015E48 4238 D372                  		clr.b	($FFFFD372).w
00015E4C 4E75                       		rts	
00015E4E                            ; End of function StopDrowning
00015E4E                            
00015E4E                            ; ===========================================================================
00015E4E                            Ani_obj0A:
00015E4E                            	include "_anim\obj0A.asm"
00015E4E                            ; ---------------------------------------------------------------------------
00015E4E                            ; Animation script - countdown numbers and bubbles (LZ)
00015E4E                            ; ---------------------------------------------------------------------------
00015E4E 0000                       		dc.w byte_140D6-Ani_obj0A
00015E50 0000                       		dc.w byte_140E0-Ani_obj0A
00015E52 0000                       		dc.w byte_140EA-Ani_obj0A
00015E54 0000                       		dc.w byte_140F4-Ani_obj0A
00015E56 0000                       		dc.w byte_140FE-Ani_obj0A
00015E58 0000                       		dc.w byte_14108-Ani_obj0A
00015E5A 0000                       		dc.w byte_14112-Ani_obj0A
00015E5C 0000                       		dc.w byte_14118-Ani_obj0A
00015E5E 0000                       		dc.w byte_14120-Ani_obj0A
00015E60 0000                       		dc.w byte_14128-Ani_obj0A
00015E62 0000                       		dc.w byte_14130-Ani_obj0A
00015E64 0000                       		dc.w byte_14138-Ani_obj0A
00015E66 0000                       		dc.w byte_14140-Ani_obj0A
00015E68 0000                       		dc.w byte_14148-Ani_obj0A
00015E6A 0000                       		dc.w byte_1414A-Ani_obj0A
00015E6C 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015E76 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015E80 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015E8A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015E94 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015E9E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015EA8 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015EAE 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015EB6 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015EBE 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015EC6 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015ECE 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015ED6 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015EDE 0EFC                       byte_14148:	dc.b $E, $FC
00015EE0 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015EE6                            		even
00015EE6                            		even
00015EE6                            
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6                            ; Sprite mappings - drowning countdown numbers (LZ)
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6                            Map_obj0A:
00015EE6                            	include "_maps\obj0A.asm"
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6                            ; Sprite mappings - drowning countdown numbers (LZ)
00015EE6                            ; ---------------------------------------------------------------------------
00015EE6 0000                       		dc.w byte_14152-Map_obj0A
00015EE8 01                         byte_14152:	dc.b 1
00015EE9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015EEE                            		even
00015EEE                            		even
00015EEE                            ; ===========================================================================
00015EEE                            LoadShieldDPLC:
00015EEE 2C3C 0000 0000             		move.l	#Art_Shield,d6
00015EF4 6000                       		bra.s	LoadShieldStarsDPLC
00015EF6                            		
00015EF6                            LoadStarsDPLC:
00015EF6 2C3C 0000 0000             		move.l	#Art_Stars,d6
00015EFC                            
00015EFC                            LoadShieldStarsDPLC:
00015EFC 45F9 0000 0000             		lea	(ShieldStarsDPLC).l,a2
00015F02 383C A820                  		move.w	#$541*$20,d4
00015F06 4EF9 0000 0000             		jmp	LoadDPLC
00015F0C                            ; ===========================================================================
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            ; Object 38 - shield and invincibility stars
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            
00015F0C                            Obj38:					; XREF: Obj_Index
00015F0C 7000                       		moveq	#0,d0
00015F0E 1028 0024                  		move.b	$24(a0),d0
00015F12 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015F16 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015F1A                            ; ===========================================================================
00015F1A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015F1C 0000                       		dc.w Obj38_Shield-Obj38_Index
00015F1E 0000                       		dc.w Obj38_Stars-Obj38_Index
00015F20                            ; ===========================================================================
00015F20                            
00015F20                            Obj38_Main:				; XREF: Obj38_Index
00015F20 5428 0024                  		addq.b	#2,$24(a0)
00015F24 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015F2C 117C 0004 0001             		move.b	#4,1(a0)
00015F32 117C 0001 0018             		move.b	#1,$18(a0)
00015F38 117C 0010 0019             		move.b	#$10,$19(a0)
00015F3E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015F44 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015F48 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015F4A 4E75                       		rts	
00015F4C                            ; ===========================================================================
00015F4C                            
00015F4C                            Obj38_DoStars:
00015F4C 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015F50 4E75                       		rts	
00015F52                            ; ===========================================================================
00015F52                            
00015F52                            Obj38_Shield:				; XREF: Obj38_Index
00015F52 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015F56 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015F58 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015F5C 6700                       		beq.s	Obj38_Delete	; if not, branch
00015F5E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015F64 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015F6A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015F70 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015F76 4EB9 0000 C138             		jsr	AnimateSprite
00015F7C 4EBA FF70                  		jsr	LoadShieldDPLC
00015F80 4EFA 9162                  		jmp	DisplaySprite
00015F84                            ; ===========================================================================
00015F84                            
00015F84                            Obj38_RmvShield:
00015F84 4E75                       		rts	
00015F86                            ; ===========================================================================
00015F86                            
00015F86                            Obj38_Delete:
00015F86 4EFA 9198                  		jmp	DeleteObject
00015F8A                            ; ===========================================================================
00015F8A                            
00015F8A                            Obj38_Stars:				; XREF: Obj38_Index
00015F8A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015F8E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015F90 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015F94 1228 001C                  		move.b	$1C(a0),d1
00015F98 5301                       		subq.b	#1,d1
00015F9A 6000                       		bra.s	Obj38_StarTrail
00015F9C                            ; ===========================================================================
00015F9C E909                       		lsl.b	#4,d1
00015F9E 5801                       		addq.b	#4,d1
00015FA0 9001                       		sub.b	d1,d0
00015FA2 1228 0030                  		move.b	$30(a0),d1
00015FA6 9001                       		sub.b	d1,d0
00015FA8 5801                       		addq.b	#4,d1
00015FAA 0201 000F                  		andi.b	#$F,d1
00015FAE 1141 0030                  		move.b	d1,$30(a0)
00015FB2 6000                       		bra.s	Obj38_StarTrail2a
00015FB4                            ; ===========================================================================
00015FB4                            
00015FB4                            Obj38_StarTrail:			; XREF: Obj38_Stars
00015FB4 E709                       		lsl.b	#3,d1
00015FB6 1401                       		move.b	d1,d2
00015FB8 D201                       		add.b	d1,d1
00015FBA D202                       		add.b	d2,d1
00015FBC 5801                       		addq.b	#4,d1
00015FBE 9001                       		sub.b	d1,d0
00015FC0 1228 0030                  		move.b	$30(a0),d1
00015FC4 9001                       		sub.b	d1,d0
00015FC6 5801                       		addq.b	#4,d1
00015FC8 0C01 0018                  		cmpi.b	#$18,d1
00015FCC 6500                       		bcs.s	Obj38_StarTrail2
00015FCE 7200                       		moveq	#0,d1
00015FD0                            
00015FD0                            Obj38_StarTrail2:
00015FD0 1141 0030                  		move.b	d1,$30(a0)
00015FD4                            
00015FD4                            Obj38_StarTrail2a:
00015FD4 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015FD8 43F1 0000                  		lea	(a1,d0.w),a1
00015FDC 3159 0008                  		move.w	(a1)+,8(a0)
00015FE0 3159 000C                  		move.w	(a1)+,$C(a0)
00015FE4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015FEA 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015FF0 4EB9 0000 C138             		jsr	AnimateSprite
00015FF6 4EBA FEFE                  		jsr	LoadStarsDPLC
00015FFA 4EFA 90E8                  		jmp	DisplaySprite
00015FFE                            ; ===========================================================================
00015FFE                            
00015FFE                            Obj38_Delete2:				; XREF: Obj38_Stars
00015FFE 4EFA 9120                  		jmp	DeleteObject
00016002                            ; ===========================================================================
00016002                            	
00016002                            ShieldStarsDPLC:
00016002                            		include "_inc/obj38_DPLC.asm"
00016002                            ; --------------------------------------------------------------------------------
00016002                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00016002                            
00016002                            SME_wct8N:	
00016002 0000 0000                  		dc.w SME_wct8N_84-SME_wct8N, SME_wct8N_85-SME_wct8N	
00016006 0000 0000                  		dc.w SME_wct8N_8E-SME_wct8N, SME_wct8N_97-SME_wct8N	
0001600A 0000 0000                  		dc.w SME_wct8N_A0-SME_wct8N, SME_wct8N_A9-SME_wct8N	
0001600E 0000 0000                  		dc.w SME_wct8N_B2-SME_wct8N, SME_wct8N_BB-SME_wct8N	
00016012 0000 0000                  		dc.w SME_wct8N_C4-SME_wct8N, SME_wct8N_C9-SME_wct8N	
00016016 0000 0000                  		dc.w SME_wct8N_D2-SME_wct8N, SME_wct8N_D7-SME_wct8N	
0001601A 0000 0000                  		dc.w SME_wct8N_DE-SME_wct8N, SME_wct8N_E9-SME_wct8N	
0001601E 0000 0000                  		dc.w SME_wct8N_F6-SME_wct8N, SME_wct8N_FF-SME_wct8N	
00016022 0000 0000                  		dc.w SME_wct8N_10A-SME_wct8N, SME_wct8N_113-SME_wct8N	
00016026 0000 0000                  		dc.w SME_wct8N_11E-SME_wct8N, SME_wct8N_127-SME_wct8N	
0001602A 0000 0000                  		dc.w SME_wct8N_12C-SME_wct8N, SME_wct8N_131-SME_wct8N	
0001602E 0000 0000                  		dc.w SME_wct8N_13A-SME_wct8N, SME_wct8N_13F-SME_wct8N	
00016032 0000 0000                  		dc.w SME_wct8N_146-SME_wct8N, SME_wct8N_153-SME_wct8N	
00016036 0000 0000                  		dc.w SME_wct8N_160-SME_wct8N, SME_wct8N_169-SME_wct8N	
0001603A 0000 0000                  		dc.w SME_wct8N_174-SME_wct8N, SME_wct8N_17D-SME_wct8N	
0001603E 0000 0000                  		dc.w SME_wct8N_188-SME_wct8N, SME_wct8N_18D-SME_wct8N	
00016042 0000 0000                  		dc.w SME_wct8N_192-SME_wct8N, SME_wct8N_197-SME_wct8N	
00016046 0000 0000                  		dc.w SME_wct8N_19C-SME_wct8N, SME_wct8N_1A5-SME_wct8N	
0001604A 0000 0000                  		dc.w SME_wct8N_1AE-SME_wct8N, SME_wct8N_1BB-SME_wct8N	
0001604E 0000 0000                  		dc.w SME_wct8N_1C8-SME_wct8N, SME_wct8N_1CD-SME_wct8N	
00016052 0000 0000                  		dc.w SME_wct8N_1D2-SME_wct8N, SME_wct8N_1D7-SME_wct8N	
00016056 0000 0000                  		dc.w SME_wct8N_1DC-SME_wct8N, SME_wct8N_1E5-SME_wct8N	
0001605A 0000 0000                  		dc.w SME_wct8N_1EC-SME_wct8N, SME_wct8N_1F5-SME_wct8N	
0001605E 0000 0000                  		dc.w SME_wct8N_1FC-SME_wct8N, SME_wct8N_201-SME_wct8N	
00016062 0000 0000                  		dc.w SME_wct8N_20A-SME_wct8N, SME_wct8N_211-SME_wct8N	
00016066 0000 0000                  		dc.w SME_wct8N_216-SME_wct8N, SME_wct8N_21F-SME_wct8N	
0001606A 0000 0000                  		dc.w SME_wct8N_228-SME_wct8N, SME_wct8N_22F-SME_wct8N	
0001606E 0000 0000                  		dc.w SME_wct8N_236-SME_wct8N, SME_wct8N_23D-SME_wct8N	
00016072 0000 0000                  		dc.w SME_wct8N_240-SME_wct8N, SME_wct8N_247-SME_wct8N	
00016076 0000 0000                  		dc.w SME_wct8N_24E-SME_wct8N, SME_wct8N_257-SME_wct8N	
0001607A 0000 0000                  		dc.w SME_wct8N_260-SME_wct8N, SME_wct8N_265-SME_wct8N	
0001607E 0000 0000                  		dc.w SME_wct8N_26C-SME_wct8N, SME_wct8N_271-SME_wct8N	
00016082 0000 0000                  		dc.w SME_wct8N_278-SME_wct8N, SME_wct8N_283-SME_wct8N	
00016086 00                         SME_wct8N_84:	dc.b 0	
00016087 0480 0080 0980 0080 09     SME_wct8N_85:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016090 0480 1280 1280 1280 12     SME_wct8N_8E:	dc.b 4, $80, $12, $80, $12, $80, $12, $80, $12	
00016099 0480 0080 0980 0080 09     SME_wct8N_97:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
000160A2 0480 0080 0980 0080 09     SME_wct8N_A0:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
000160AB 0480 0080 0980 0080 09     SME_wct8N_A9:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
000160B4 0480 1280 1B80 1280 1B     SME_wct8N_B2:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
000160BD 0480 1280 1B80 1280 1B     SME_wct8N_BB:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
000160C6 0250 5280 58               SME_wct8N_C4:	dc.b 2, $50, $52, $80, $58	
000160CB 0450 5250 6150 6710 6D     SME_wct8N_C9:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
000160D4 0250 52B0 6F               SME_wct8N_D2:	dc.b 2, $50, $52, $B0, $6F	
000160D9 0370 3030 7B50 7F          SME_wct8N_D7:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
000160E0 0550 8B20 9150 9400 9A53+  SME_wct8N_DE:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
000160EB 0650 8510 9B30 9D50 A130+  SME_wct8N_E9:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
000160F8 0450 AC10 B270 B420 BC     SME_wct8N_F6:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00016101 0530 C570 C920 D110 D453+  SME_wct8N_FF:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
0001610C 0450 BF10 D670 D820 E0     SME_wct8N_10A:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00016115 0550 8510 9B00 9170 E320+  SME_wct8N_113:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00016120 0470 EE50 F610 FC50 FE     SME_wct8N_11E:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00016129 0270 EEB1 04               SME_wct8N_127:	dc.b 2, $70, $EE, $B1, 4	
0001612E 0251 1081 16               SME_wct8N_12C:	dc.b 2, $51, $10, $81, $16	
00016133 0451 1051 1F11 2551 27     SME_wct8N_131:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
0001613C 0251 10B1 2D               SME_wct8N_13A:	dc.b 2, $51, $10, $B1, $2D	
00016141 0370 EE01 0481 39          SME_wct8N_13F:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00016148 0611 4811 4A81 4C01 5501+  SME_wct8N_146:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00016155 0651 4221 5711 5A11 5C81+  SME_wct8N_153:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00016162 0451 6711 6D81 6F11 78     SME_wct8N_160:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
0001616B 0521 8011 8371 8521 8D53+  SME_wct8N_169:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00016176 0451 7A11 9081 9211 9B     SME_wct8N_174:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
0001617F 0551 4281 9D11 5C11 A603+  SME_wct8N_17D:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
0001618A 0251 A8B1 AE               SME_wct8N_188:	dc.b 2, $51, $A8, $B1, $AE	
0001618F 0250 52B1 BA               SME_wct8N_18D:	dc.b 2, $50, $52, $B1, $BA	
00016194 0251 A8B1 C6               SME_wct8N_192:	dc.b 2, $51, $A8, $B1, $C6	
00016199 0250 52B1 D2               SME_wct8N_197:	dc.b 2, $50, $52, $B1, $D2	
0001619E 0451 DE11 E4B1 E601 F2     SME_wct8N_19C:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
000161A7 0451 F311 F9B1 FB03 26     SME_wct8N_1A5:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
000161B0 0612 07B2 0913 9803 9A13+  SME_wct8N_1AE:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
000161BD 06B2 1513 2713 A313 C913+  SME_wct8N_1BB:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
000161CA 0252 21B2 27               SME_wct8N_1C8:	dc.b 2, $52, $21, $B2, $27	
000161CF 0251 10B2 33               SME_wct8N_1CD:	dc.b 2, $51, $10, $B2, $33	
000161D4 0252 21B2 3F               SME_wct8N_1D2:	dc.b 2, $52, $21, $B2, $3F	
000161D9 0251 10B2 4B               SME_wct8N_1D7:	dc.b 2, $51, $10, $B2, $4B	
000161DE 0452 5712 5DB2 5F02 6B     SME_wct8N_1DC:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
000161E7 0372 6CB2 7403 DF          SME_wct8N_1E5:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
000161EE 0412 80B2 8202 6B53 D9     SME_wct8N_1EC:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
000161F7 03B2 8E03 D073 D1          SME_wct8N_1F5:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
000161FE 0234 57B4 4B               SME_wct8N_1FC:	dc.b 2, $34, $57, $B4, $4B	
00016203 0434 6A74 5B34 6324 67     SME_wct8N_201:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
0001620C 0334 7DB4 6E24 7A          SME_wct8N_20A:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00016213 0252 9AB2 A0               SME_wct8N_211:	dc.b 2, $52, $9A, $B2, $A0	
00016218 0452 AC72 B212 BA02 BC     SME_wct8N_216:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00016221 0412 BD72 BF22 C702 CA     SME_wct8N_21F:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
0001622A 0322 CB22 CEF2 D1          SME_wct8N_228:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00016231 03B2 E172 ED00 6F          SME_wct8N_22F:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00016238 0372 F532 FD23 01          SME_wct8N_236:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
0001623F 0183 04                    SME_wct8N_23D:	dc.b 1, $83, 4	
00016242 0373 0D03 1533 16          SME_wct8N_240:	dc.b 3, $73, $D, 3, $15, $33, $16	
00016249 03B3 2913 3503 37          SME_wct8N_247:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00016250 04B3 3833 4403 4803 49     SME_wct8N_24E:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00016259 04B3 4A33 5603 5A03 5B     SME_wct8N_257:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00016262 0283 5C73 65               SME_wct8N_260:	dc.b 2, $83, $5C, $73, $65	
00016267 0383 6D23 7613 79          SME_wct8N_265:	dc.b 3, $83, $6D, $23, $76, $13, $79	
0001626E 0283 7B73 84               SME_wct8N_26C:	dc.b 2, $83, $7B, $73, $84	
00016273 0383 6D23 8C13 8F          SME_wct8N_271:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
0001627A 0573 A613 AE53 B033 B603+  SME_wct8N_278:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00016285 0573 BB13 AE53 C333 B603+  SME_wct8N_283:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00016290                            		even
00016290                            		even
00016290                            ; ===========================================================================
00016290                            ; ---------------------------------------------------------------------------
00016290                            ; Object 4A - special stage entry from beta
00016290                            ; ---------------------------------------------------------------------------
00016290                            
00016290                            Obj4A:					; XREF: Obj_Index
00016290 7000                       		moveq	#0,d0
00016292 1028 0024                  		move.b	$24(a0),d0
00016296 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001629A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001629E                            ; ===========================================================================
0001629E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000162A0 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000162A2 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000162A4                            ; ===========================================================================
000162A4                            
000162A4                            Obj4A_Main:				; XREF: Obj4A_Index
000162A4 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000162A8 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000162AA 4E75                       		rts	
000162AC                            ; ===========================================================================
000162AC                            
000162AC                            Obj4A_Main2:
000162AC 5428 0024                  		addq.b	#2,$24(a0)
000162B0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000162B8 117C 0004 0001             		move.b	#4,1(a0)
000162BE 117C 0001 0018             		move.b	#1,$18(a0)
000162C4 117C 0038 0019             		move.b	#$38,$19(a0)
000162CA 317C 0541 0002             		move.w	#$541,2(a0)
000162D0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000162D6                            
000162D6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000162D6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000162DC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000162E2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000162E8 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000162EE 4EB9 0000 C138             		jsr	AnimateSprite
000162F4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000162FA 6600                       		bne.s	Obj4A_Display
000162FC 4A38 D000                  		tst.b	($FFFFD000).w
00016300 6700                       		beq.s	Obj4A_Display
00016302 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00016308 303C 00A8                  		move.w	#$A8,d0
0001630C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00016312                            
00016312                            Obj4A_Display:
00016312 4EFA 8DD0                  		jmp	DisplaySprite
00016316                            ; ===========================================================================
00016316                            
00016316                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00016316 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001631A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001631C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00016322 4EFA 8DFC                  		jmp	DeleteObject
00016326                            ; ===========================================================================
00016326                            
00016326                            Obj4A_Wait:
00016326 4E75                       		rts	
00016328                            ; ===========================================================================
00016328                            ; ---------------------------------------------------------------------------
00016328                            ; Object 08 - water splash (LZ)
00016328                            ; ---------------------------------------------------------------------------
00016328                            
00016328                            Obj08:					; XREF: Obj_Index
00016328 7000                       		moveq	#0,d0
0001632A 1028 0024                  		move.b	$24(a0),d0
0001632E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00016332 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00016336                            ; ===========================================================================
00016336 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00016338 0000                       		dc.w Obj08_Display-Obj08_Index
0001633A 0000                       		dc.w Obj08_Delete-Obj08_Index
0001633C                            ; ===========================================================================
0001633C                            
0001633C                            Obj08_Main:				; XREF: Obj08_Index
0001633C 5428 0024                  		addq.b	#2,$24(a0)
00016340 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00016348 0028 0004 0001             		ori.b	#4,1(a0)
0001634E 117C 0001 0018             		move.b	#1,$18(a0)
00016354 117C 0010 0019             		move.b	#$10,$19(a0)
0001635A 317C 4259 0002             		move.w	#$4259,2(a0)
00016360 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016366                            
00016366                            Obj08_Display:				; XREF: Obj08_Index
00016366 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001636C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016372 4EB9 0000 C138             		jsr	AnimateSprite
00016378 4EFA 8D6A                  		jmp	DisplaySprite
0001637C                            ; ===========================================================================
0001637C                            
0001637C                            Obj08_Delete:				; XREF: Obj08_Index
0001637C 4EFA 8DA2                  		jmp	DeleteObject	; delete when animation	is complete
00016380                            ; ===========================================================================
00016380                            Ani_obj38:
00016380                            	include "_anim\obj38.asm"
00016380                            ; ---------------------------------------------------------------------------
00016380                            ; Animation script - shield and invincibility stars
00016380                            ; ---------------------------------------------------------------------------
00016380 0000                       		dc.w byte_14356-Ani_obj38
00016382 0000                       		dc.w byte_1435E-Ani_obj38
00016384 0000                       		dc.w byte_14364-Ani_obj38
00016386 0000                       		dc.w byte_1437E-Ani_obj38
00016388 0000                       		dc.w byte_14398-Ani_obj38
0001638A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016392 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016398 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000163A9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000163B2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000163C3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000163CC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000163DD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000163E6                            		even
000163E6                            		even
000163E6                            
000163E6                            ; ---------------------------------------------------------------------------
000163E6                            ; Sprite mappings - shield and invincibility stars
000163E6                            ; ---------------------------------------------------------------------------
000163E6                            Map_obj38:
000163E6                            	include "_maps\obj38.asm"
000163E6                            ; --------------------------------------------------------------------------------
000163E6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000163E6                            ; --------------------------------------------------------------------------------
000163E6                            
000163E6                            SME_yYnGN:	
000163E6 0000 0000                  		dc.w SME_yYnGN_10-SME_yYnGN, SME_yYnGN_11-SME_yYnGN	
000163EA 0000 0000                  		dc.w SME_yYnGN_26-SME_yYnGN, SME_yYnGN_3B-SME_yYnGN	
000163EE 0000 0000                  		dc.w SME_yYnGN_50-SME_yYnGN, SME_yYnGN_65-SME_yYnGN	
000163F2 0000 0000                  		dc.w SME_yYnGN_7A-SME_yYnGN, SME_yYnGN_8F-SME_yYnGN	
000163F6 00                         SME_yYnGN_10:	dc.b 0	
000163F7 04                         SME_yYnGN_11:	dc.b 4	
000163F8 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000163FD E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00016402 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016407 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001640C 04                         SME_yYnGN_26:	dc.b 4	
0001640D E80A 0800 E8               		dc.b $E8, $A, 8, 0, $E8	
00016412 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00016417 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001641C 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016421 04                         SME_yYnGN_3B:	dc.b 4	
00016422 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016427 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001642C 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016431 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016436 04                         SME_yYnGN_50:	dc.b 4	
00016437 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001643C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00016441 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016446 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
0001644B 04                         SME_yYnGN_65:	dc.b 4	
0001644C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016451 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016456 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
0001645B 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
00016460 04                         SME_yYnGN_7A:	dc.b 4	
00016461 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00016466 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001646B 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016470 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016475 04                         SME_yYnGN_8F:	dc.b 4	
00016476 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001647B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016480 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016485 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001648A                            		even
0001648A                            		even
0001648A                            
0001648A                            Ani_obj4A:
0001648A                            	include "_anim\obj4A.asm"
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Animation script - special stage entry effect from beta
0001648A                            ; ---------------------------------------------------------------------------
0001648A 0000                       		dc.w byte_14458-Ani_obj4A
0001648C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000164A0                            		even
000164A0                            		even
000164A0                            
000164A0                            ; ---------------------------------------------------------------------------
000164A0                            ; Sprite mappings - special stage entry	from beta
000164A0                            ; ---------------------------------------------------------------------------
000164A0                            Map_obj4A:
000164A0                            	include "_maps\obj4A.asm"
000164A0                            ; ---------------------------------------------------------------------------
000164A0                            ; Sprite mappings - special stage entry	from beta
000164A0                            ; ---------------------------------------------------------------------------
000164A0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000164A4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000164A8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000164AC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000164B0 03                         byte_1447C:	dc.b 3
000164B1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000164B6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000164BB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000164C0 03                         byte_1448C:	dc.b 3
000164C1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000164C6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000164CB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000164D0 05                         byte_1449C:	dc.b 5
000164D1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000164D6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000164DB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000164E0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000164E5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000164EA 09                         byte_144B6:	dc.b 9
000164EB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000164F0 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000164F5 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000164FA 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000164FF F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00016504 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00016509 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001650E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00016513 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00016518 12                         byte_144E4:	dc.b $12
00016519 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001651E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00016523 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00016528 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001652D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00016532 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00016537 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001653C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00016541 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00016546 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001654B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00016550 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00016555 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001655A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001655F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016564 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00016569 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001656E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00016573 11                         byte_1453F:	dc.b $11
00016574 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00016579 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001657E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00016583 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00016588 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001658D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00016592 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00016597 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001659C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000165A1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000165A6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000165AB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000165B0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000165B5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000165BA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000165BF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000165C4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000165C9 09                         byte_14595:	dc.b 9
000165CA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000165CF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000165D4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000165D9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000165DE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000165E3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000165E8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000165ED 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000165F2 04                         		dc.b 4
000165F3 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000165F8                            		even
000165F8                            		even
000165F8                            
000165F8                            Ani_obj08:
000165F8                            	include "_anim\obj08.asm"
000165F8                            ; ---------------------------------------------------------------------------
000165F8                            ; Animation script - water splash (LZ)
000165F8                            ; ---------------------------------------------------------------------------
000165F8 0000                       		dc.w byte_145C6-Ani_obj08
000165FA 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00016600                            		even
00016600                            		even
00016600                            
00016600                            ; ---------------------------------------------------------------------------
00016600                            ; Sprite mappings - water splash (LZ)
00016600                            ; ---------------------------------------------------------------------------
00016600                            Map_obj08:
00016600                            	include "_maps\obj08.asm"
00016600                            ; ---------------------------------------------------------------------------
00016600                            ; Sprite mappings - water splash (LZ)
00016600                            ; ---------------------------------------------------------------------------
00016600 0000                       		dc.w byte_145D2-Map_obj08
00016602 0000                       		dc.w byte_145DD-Map_obj08
00016604 0000                       		dc.w byte_145E8-Map_obj08
00016606 02                         byte_145D2:	dc.b 2
00016607 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001660C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00016611 02                         byte_145DD:	dc.b 2
00016612 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00016617 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001661C 01                         byte_145E8:	dc.b 1
0001661D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00016622                            		even
00016622                            		even
00016622                            
00016622                            
00016622                            
00016622                            
00016622                            
00016622                            
00016622                            ; ===========================================================================
00016622                            ; ---------------------------------------------------------------------------
00016622                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00016622                            ; ---------------------------------------------------------------------------
00016622                            
00016622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016622                            
00016622                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00016622 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
00016628 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
0001662C 6700                       		beq.s	SAP_First				; MJ: if not, branch
0001662E 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
00016634                            
00016634                            SAP_First:
00016634 0828 0003 0022             		btst	#3,$22(a0)
0001663A 6700                       		beq.s	loc_14602
0001663C 7000                       		moveq	#0,d0
0001663E 11C0 F768                  		move.b	d0,($FFFFF768).w
00016642 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016646 4E75                       		rts	
00016648                            ; ===========================================================================
00016648                            
00016648                            loc_14602:
00016648 7003                       		moveq	#3,d0
0001664A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001664E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016652 1028 0026                  		move.b	$26(a0),d0
00016656 0600 0020                  		addi.b	#$20,d0
0001665A 6A00                       		bpl.s	loc_14624
0001665C 1028 0026                  		move.b	$26(a0),d0
00016660 6A00                       		bpl.s	loc_1461E
00016662 5300                       		subq.b	#1,d0
00016664                            
00016664                            loc_1461E:
00016664 0600 0020                  		addi.b	#$20,d0
00016668 6000                       		bra.s	loc_14630
0001666A                            ; ===========================================================================
0001666A                            
0001666A                            loc_14624:
0001666A 1028 0026                  		move.b	$26(a0),d0
0001666E 6A00                       		bpl.s	loc_1462C
00016670 5200                       		addq.b	#1,d0
00016672                            
00016672                            loc_1462C:
00016672 0600 001F                  		addi.b	#$1F,d0
00016676                            
00016676                            loc_14630:
00016676 0200 00C0                  		andi.b	#$C0,d0
0001667A 0C00 0040                  		cmpi.b	#$40,d0
0001667E 6700 0000                  		beq.w	Sonic_WalkVertL
00016682 0C00 0080                  		cmpi.b	#$80,d0
00016686 6700 0000                  		beq.w	Sonic_WalkCeiling
0001668A 0C00 00C0                  		cmpi.b	#$C0,d0
0001668E 6700 0000                  		beq.w	Sonic_WalkVertR
00016692 3428 000C                  		move.w	$C(a0),d2
00016696 3628 0008                  		move.w	8(a0),d3
0001669A 7000                       		moveq	#0,d0
0001669C 1028 0016                  		move.b	$16(a0),d0
000166A0 4880                       		ext.w	d0
000166A2 D440                       		add.w	d0,d2
000166A4 1028 0017                  		move.b	$17(a0),d0
000166A8 4880                       		ext.w	d0
000166AA D640                       		add.w	d0,d3
000166AC 49F8 F768                  		lea	($FFFFF768).w,a4
000166B0 367C 0010                  		movea.w	#$10,a3
000166B4 3C3C 0000                  		move.w	#0,d6
000166B8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000166BA 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000166BE 3F01                       		move.w	d1,-(sp)
000166C0 3428 000C                  		move.w	$C(a0),d2
000166C4 3628 0008                  		move.w	8(a0),d3
000166C8 7000                       		moveq	#0,d0
000166CA 1028 0016                  		move.b	$16(a0),d0
000166CE 4880                       		ext.w	d0
000166D0 D440                       		add.w	d0,d2
000166D2 1028 0017                  		move.b	$17(a0),d0
000166D6 4880                       		ext.w	d0
000166D8 4440                       		neg.w	d0
000166DA D640                       		add.w	d0,d3
000166DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000166E0 367C 0010                  		movea.w	#$10,a3
000166E4 3C3C 0000                  		move.w	#0,d6
000166E8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000166EA 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000166EE 301F                       		move.w	(sp)+,d0
000166F0 6100 0000                  		bsr.w	Sonic_Angle
000166F4 4A41                       		tst.w	d1
000166F6 6700                       		beq.s	locret_146BE
000166F8 6A00                       		bpl.s	loc_146C0
000166FA 0C41 FFF2                  		cmpi.w	#-$E,d1
000166FE 6D00                       		blt.s	locret_146E6
00016700 D368 000C                  		add.w	d1,$C(a0)
00016704                            
00016704                            locret_146BE:
00016704 4E75                       		rts	
00016706                            ; ===========================================================================
00016706                            
00016706                            loc_146C0:
00016706 0C41 000E                  		cmpi.w	#$E,d1
0001670A 6E00                       		bgt.s	loc_146CC
0001670C                            
0001670C                            loc_146C6:
0001670C D368 000C                  		add.w	d1,$C(a0)
00016710 4E75                       		rts	
00016712                            ; ===========================================================================
00016712                            
00016712                            loc_146CC:
00016712 4A28 0038                  		tst.b	$38(a0)
00016716 66F4                       		bne.s	loc_146C6
00016718 08E8 0001 0022             		bset	#1,$22(a0)
0001671E 08A8 0005 0022             		bclr	#5,$22(a0)
00016724 117C 0001 001D             		move.b	#1,$1D(a0)
0001672A 4E75                       		rts	
0001672C                            ; ===========================================================================
0001672C                            
0001672C                            locret_146E6:
0001672C 4E75                       		rts	
0001672E                            ; End of function Sonic_AnglePos
0001672E                            
0001672E                            ; ===========================================================================
0001672E 2428 0008                  		move.l	8(a0),d2
00016732 3028 0010                  		move.w	$10(a0),d0
00016736 48C0                       		ext.l	d0
00016738 E180                       		asl.l	#8,d0
0001673A 9480                       		sub.l	d0,d2
0001673C 2142 0008                  		move.l	d2,8(a0)
00016740 303C 0038                  		move.w	#$38,d0
00016744 48C0                       		ext.l	d0
00016746 E180                       		asl.l	#8,d0
00016748 9680                       		sub.l	d0,d3
0001674A 2143 000C                  		move.l	d3,$C(a0)
0001674E 4E75                       		rts	
00016750                            ; ===========================================================================
00016750                            
00016750                            locret_1470A:
00016750 4E75                       		rts	
00016752                            ; ===========================================================================
00016752 2628 000C                  		move.l	$C(a0),d3
00016756 3028 0012                  		move.w	$12(a0),d0
0001675A 0440 0038                  		subi.w	#$38,d0
0001675E 3140 0012                  		move.w	d0,$12(a0)
00016762 48C0                       		ext.l	d0
00016764 E180                       		asl.l	#8,d0
00016766 9680                       		sub.l	d0,d3
00016768 2143 000C                  		move.l	d3,$C(a0)
0001676C 4E75                       		rts	
0001676E 4E75                       		rts	
00016770                            ; ===========================================================================
00016770 2428 0008                  		move.l	8(a0),d2
00016774 2628 000C                  		move.l	$C(a0),d3
00016778 3028 0010                  		move.w	$10(a0),d0
0001677C 48C0                       		ext.l	d0
0001677E E180                       		asl.l	#8,d0
00016780 9480                       		sub.l	d0,d2
00016782 3028 0012                  		move.w	$12(a0),d0
00016786 48C0                       		ext.l	d0
00016788 E180                       		asl.l	#8,d0
0001678A 9680                       		sub.l	d0,d3
0001678C 2142 0008                  		move.l	d2,8(a0)
00016790 2143 000C                  		move.l	d3,$C(a0)
00016794 4E75                       		rts	
00016796                            
00016796                            ; ---------------------------------------------------------------------------
00016796                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016796                            ; ---------------------------------------------------------------------------
00016796                            
00016796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016796                            
00016796                            
00016796                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016796 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001679A B240                       		cmp.w	d0,d1
0001679C 6F00                       		ble.s	loc_1475E
0001679E 1438 F768                  		move.b	($FFFFF768).w,d2
000167A2 3200                       		move.w	d0,d1
000167A4                            
000167A4                            loc_1475E:
000167A4 0802 0000                  		btst	#0,d2
000167A8 6600                       		bne.s	loc_1476A
000167AA 1142 0026                  		move.b	d2,$26(a0)
000167AE 4E75                       		rts	
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            loc_1476A:
000167B0 1428 0026                  		move.b	$26(a0),d2
000167B4 0602 0020                  		addi.b	#$20,d2
000167B8 0202 00C0                  		andi.b	#$C0,d2
000167BC 1142 0026                  		move.b	d2,$26(a0)
000167C0 4E75                       		rts	
000167C2                            ; End of function Sonic_Angle
000167C2                            
000167C2                            ; ---------------------------------------------------------------------------
000167C2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000167C2                            ; ---------------------------------------------------------------------------
000167C2                            
000167C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167C2                            
000167C2                            
000167C2                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000167C2 3428 000C                  		move.w	$C(a0),d2
000167C6 3628 0008                  		move.w	8(a0),d3
000167CA 7000                       		moveq	#0,d0
000167CC 1028 0017                  		move.b	$17(a0),d0
000167D0 4880                       		ext.w	d0
000167D2 4440                       		neg.w	d0
000167D4 D440                       		add.w	d0,d2
000167D6 1028 0016                  		move.b	$16(a0),d0
000167DA 4880                       		ext.w	d0
000167DC D640                       		add.w	d0,d3
000167DE 49F8 F768                  		lea	($FFFFF768).w,a4
000167E2 367C 0010                  		movea.w	#$10,a3
000167E6 3C3C 0000                  		move.w	#0,d6
000167EA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000167EC 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000167F0 3F01                       		move.w	d1,-(sp)
000167F2 3428 000C                  		move.w	$C(a0),d2
000167F6 3628 0008                  		move.w	8(a0),d3
000167FA 7000                       		moveq	#0,d0
000167FC 1028 0017                  		move.b	$17(a0),d0
00016800 4880                       		ext.w	d0
00016802 D440                       		add.w	d0,d2
00016804 1028 0016                  		move.b	$16(a0),d0
00016808 4880                       		ext.w	d0
0001680A D640                       		add.w	d0,d3
0001680C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016810 367C 0010                  		movea.w	#$10,a3
00016814 3C3C 0000                  		move.w	#0,d6
00016818 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001681A 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001681E 301F                       		move.w	(sp)+,d0
00016820 6100 FF74                  		bsr.w	Sonic_Angle
00016824 4A41                       		tst.w	d1
00016826 6700                       		beq.s	locret_147F0
00016828 6A00                       		bpl.s	loc_147F2
0001682A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001682E 6D00 FF20                  		blt.w	locret_1470A
00016832 D368 0008                  		add.w	d1,8(a0)
00016836                            
00016836                            locret_147F0:
00016836 4E75                       		rts	
00016838                            ; ===========================================================================
00016838                            
00016838                            loc_147F2:
00016838 0C41 000E                  		cmpi.w	#$E,d1
0001683C 6E00                       		bgt.s	loc_147FE
0001683E                            
0001683E                            loc_147F8:
0001683E D368 0008                  		add.w	d1,8(a0)
00016842 4E75                       		rts	
00016844                            ; ===========================================================================
00016844                            
00016844                            loc_147FE:
00016844 4A28 0038                  		tst.b	$38(a0)
00016848 66F4                       		bne.s	loc_147F8
0001684A 08E8 0001 0022             		bset	#1,$22(a0)
00016850 08A8 0005 0022             		bclr	#5,$22(a0)
00016856 117C 0001 001D             		move.b	#1,$1D(a0)
0001685C 4E75                       		rts	
0001685E                            ; End of function Sonic_WalkVertR
0001685E                            
0001685E                            ; ---------------------------------------------------------------------------
0001685E                            ; Subroutine allowing Sonic to walk upside-down
0001685E                            ; ---------------------------------------------------------------------------
0001685E                            
0001685E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001685E                            
0001685E                            
0001685E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001685E 3428 000C                  		move.w	$C(a0),d2
00016862 3628 0008                  		move.w	8(a0),d3
00016866 7000                       		moveq	#0,d0
00016868 1028 0016                  		move.b	$16(a0),d0
0001686C 4880                       		ext.w	d0
0001686E 9440                       		sub.w	d0,d2
00016870 0A42 000F                  		eori.w	#$F,d2
00016874 1028 0017                  		move.b	$17(a0),d0
00016878 4880                       		ext.w	d0
0001687A D640                       		add.w	d0,d3
0001687C 49F8 F768                  		lea	($FFFFF768).w,a4
00016880 367C FFF0                  		movea.w	#-$10,a3
00016884 3C3C 0800                  		move.w	#$0800,d6
00016888 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001688A 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001688E 3F01                       		move.w	d1,-(sp)
00016890 3428 000C                  		move.w	$C(a0),d2
00016894 3628 0008                  		move.w	8(a0),d3
00016898 7000                       		moveq	#0,d0
0001689A 1028 0016                  		move.b	$16(a0),d0
0001689E 4880                       		ext.w	d0
000168A0 9440                       		sub.w	d0,d2
000168A2 0A42 000F                  		eori.w	#$F,d2
000168A6 1028 0017                  		move.b	$17(a0),d0
000168AA 4880                       		ext.w	d0
000168AC 9640                       		sub.w	d0,d3
000168AE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000168B2 367C FFF0                  		movea.w	#-$10,a3
000168B6 3C3C 0800                  		move.w	#$0800,d6
000168BA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000168BC 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000168C0 301F                       		move.w	(sp)+,d0
000168C2 6100 FED2                  		bsr.w	Sonic_Angle
000168C6 4A41                       		tst.w	d1
000168C8 6700                       		beq.s	locret_14892
000168CA 6A00                       		bpl.s	loc_14894
000168CC 0C41 FFF2                  		cmpi.w	#-$E,d1
000168D0 6D00 FE5A                  		blt.w	locret_146E6
000168D4 9368 000C                  		sub.w	d1,$C(a0)
000168D8                            
000168D8                            locret_14892:
000168D8 4E75                       		rts	
000168DA                            ; ===========================================================================
000168DA                            
000168DA                            loc_14894:
000168DA 0C41 000E                  		cmpi.w	#$E,d1
000168DE 6E00                       		bgt.s	loc_148A0
000168E0                            
000168E0                            loc_1489A:
000168E0 9368 000C                  		sub.w	d1,$C(a0)
000168E4 4E75                       		rts	
000168E6                            ; ===========================================================================
000168E6                            
000168E6                            loc_148A0:
000168E6 4A28 0038                  		tst.b	$38(a0)
000168EA 66F4                       		bne.s	loc_1489A
000168EC 08E8 0001 0022             		bset	#1,$22(a0)
000168F2 08A8 0005 0022             		bclr	#5,$22(a0)
000168F8 117C 0001 001D             		move.b	#1,$1D(a0)
000168FE 4E75                       		rts	
00016900                            ; End of function Sonic_WalkCeiling
00016900                            
00016900                            ; ---------------------------------------------------------------------------
00016900                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016900                            ; ---------------------------------------------------------------------------
00016900                            
00016900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016900                            
00016900                            
00016900                            Sonic_WalkVertL:
00016900 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
00016904 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
00016908 7000                       		moveq	#0,d0					; MJ: clear d0
0001690A 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
0001690E 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00016910 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
00016912 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
00016916 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00016918 9640                       		sub.w	d0,d3					; MJ: subtract from X position
0001691A 0A43 000F                  		eori.w	#$F,d3
0001691E 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
00016922 367C FFF0                  		movea.w	#-$10,a3
00016926 3C3C 0400                  		move.w	#$400,d6
0001692A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001692C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016930 3F01                       		move.w	d1,-(sp)
00016932 3428 000C                  		move.w	$C(a0),d2
00016936 3628 0008                  		move.w	8(a0),d3
0001693A 7000                       		moveq	#0,d0
0001693C 1028 0017                  		move.b	$17(a0),d0
00016940 4880                       		ext.w	d0
00016942 D440                       		add.w	d0,d2
00016944 1028 0016                  		move.b	$16(a0),d0
00016948 4880                       		ext.w	d0
0001694A 9640                       		sub.w	d0,d3
0001694C 0A43 000F                  		eori.w	#$F,d3
00016950 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016954 367C FFF0                  		movea.w	#-$10,a3
00016958 3C3C 0400                  		move.w	#$400,d6
0001695C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001695E 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016962 301F                       		move.w	(sp)+,d0
00016964 6100 FE30                  		bsr.w	Sonic_Angle
00016968 4A41                       		tst.w	d1
0001696A 6700                       		beq.s	locret_14934
0001696C 6A00                       		bpl.s	loc_14936
0001696E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016972 6D00 FDDC                  		blt.w	locret_1470A
00016976 9368 0008                  		sub.w	d1,8(a0)
0001697A                            
0001697A                            locret_14934:
0001697A 4E75                       		rts
0001697C                            
0001697C                            ; ===========================================================================
0001697C                            
0001697C                            loc_14936:
0001697C 0C41 000E                  		cmpi.w	#$E,d1
00016980 6E00                       		bgt.s	loc_14942
00016982                            
00016982                            loc_1493C:
00016982 9368 0008                  		sub.w	d1,8(a0)
00016986 4E75                       		rts	
00016988                            
00016988                            ; ===========================================================================
00016988                            
00016988                            loc_14942:
00016988 4A28 0038                  		tst.b	$38(a0)
0001698C 66F4                       		bne.s	loc_1493C
0001698E 08E8 0001 0022             		bset	#1,$22(a0)
00016994 08A8 0005 0022             		bclr	#5,$22(a0)
0001699A 117C 0001 001D             		move.b	#1,$1D(a0)
000169A0 4E75                       		rts	
000169A2                            ; End of function Sonic_WalkVertL
000169A2                            
000169A2                            ; ---------------------------------------------------------------------------
000169A2                            ; Subroutine to	find which tile	the object is standing on
000169A2                            ; ---------------------------------------------------------------------------
000169A2                            
000169A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169A2                            
000169A2                            Floor_ChkTile:				; XREF: FindFloor; et al
000169A2 3002                       		move.w	d2,d0					; MJ: load Y position
000169A4 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
000169A8 D040                       		add.w	d0,d0					; MJ: multiply by 2
000169AA 3203                       		move.w	d3,d1					; MJ: load X position
000169AC EE49                       		lsr.w	#7,d1					; MJ: shift to right side
000169AE 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
000169B2 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
000169B4 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
000169B6 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
000169BA 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
000169BE 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
000169C2 EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
000169C4 3002                       		move.w	d2,d0					; MJ: load Y position
000169C6 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
000169CA D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000169CC 3003                       		move.w	d3,d0					; MJ: load X position
000169CE E648                       		lsr.w	#3,d0					; MJ: divide by 8
000169D0 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
000169D4 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000169D6                            
000169D6                            loc_14996:
000169D6 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
000169D8 4E75                       		rts						; MJ: return
000169DA                            ; ===========================================================================
000169DA                            
000169DA                            loc_1499A:
000169DA 0241 007F                  		andi.w	#$7F,d1
000169DE 0828 0006 0001             		btst	#6,1(a0)
000169E4 6700                       		beq.s	loc_149B2
000169E6 5241                       		addq.w	#1,d1
000169E8 0C41 0029                  		cmpi.w	#$29,d1
000169EC 6600                       		bne.s	loc_149B2
000169EE 323C 0051                  		move.w	#$51,d1
000169F2                            
000169F2                            loc_149B2:
000169F2 EE59                       		ror.w	#7,d1
000169F4 E459                       		ror.w	#2,d1
000169F6 3002                       		move.w	d2,d0
000169F8 D040                       		add.w	d0,d0
000169FA 0240 0070                  		andi.w	#$070,d0
000169FE D240                       		add.w	d0,d1
00016A00 3003                       		move.w	d3,d0
00016A02 E648                       		lsr.w	#3,d0
00016A04 0240 000E                  		andi.w	#$0E,d0
00016A08 D240                       		add.w	d0,d1
00016A0A 2241                       		movea.l	d1,a1
00016A0C 4E75                       		rts
00016A0E                            ; End of function Floor_ChkTile
00016A0E                            
00016A0E                            
00016A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A0E                            
00016A0E                            
00016A0E                            ColisionChkLayer:
00016A0E 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
00016A12 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
00016A14 3800                       		move.w	d0,d4					; MJ: load block ID to d4
00016A16 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
00016A1A 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00016A1E E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00016A20 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00016A22                            
00016A22                            CCL_NoChange:
00016A22 4E75                       		rts						; MJ: return
00016A24                            
00016A24                            
00016A24                            FindFloor:
00016A24 6100 FF7C                  		bsr.w	Floor_ChkTile
00016A28 3011                       		move.w	(a1),d0
00016A2A 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00016A2C 3800                       		move.w	d0,d4
00016A2E 0240 03FF                  		andi.w	#$3FF,d0
00016A32 6700                       		beq.s	loc_149DE
00016A34 0B04                       		btst	d5,d4
00016A36 6600                       		bne.s	loc_149EC
00016A38                            
00016A38                            loc_149DE:
00016A38 D44B                       		add.w	a3,d2
00016A3A 6100 0000                  		bsr.w	FindFloor2
00016A3E 944B                       		sub.w	a3,d2
00016A40 0641 0010                  		addi.w	#$10,d1
00016A44 4E75                       		rts	
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            loc_149EC:
00016A46 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
00016A4A 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00016A4E 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
00016A52 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00016A54 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016A5A 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00016A5E E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00016A60 3203                       		move.w	d3,d1					; MJ: load X position
00016A62 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
00016A66 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00016A68 4641                       		not.w	d1					; MJ: reverse bits of the X position
00016A6A 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00016A6C                            
00016A6C                            loc_14A12:
00016A6C 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00016A70 6700                       		beq.s	loc_14A22				; MJ: if not, branch
00016A72 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
00016A76 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00016A78 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00016A7C                            
00016A7C                            loc_14A22:
00016A7C 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00016A80 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
00016A82 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00016A88 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00016A8C 4880                       		ext.w	d0					; MJ: clear left byte
00016A8E BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
00016A90 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
00016A94 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
00016A96 4440                       		neg.w	d0					; MJ: reverse solid value
00016A98                            
00016A98                            loc_14A3E:
00016A98 4A40                       		tst.w	d0					; MJ: is the solid data null?
00016A9A 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00016A9C 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00016A9E 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
00016AA2 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00016AA4 3202                       		move.w	d2,d1					; MJ: load Y position
00016AA6 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00016AAA D041                       		add.w	d1,d0					; MJ: add to solid value
00016AAC 323C 000F                  		move.w	#$F,d1					; MJ: set F
00016AB0 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
00016AB2 4E75                       		rts			; d1 = position?	; MJ: return
00016AB4                            
00016AB4                            ; ===========================================================================
00016AB4                            
00016AB4                            loc_14A5A:
00016AB4 3202                       		move.w	d2,d1
00016AB6 0241 000F                  		andi.w	#$F,d1
00016ABA D041                       		add.w	d1,d0
00016ABC 6A00 FF7A                  		bpl.w	loc_149DE
00016AC0                            
00016AC0                            loc_14A66:
00016AC0 944B                       		sub.w	a3,d2
00016AC2 6100 0000                  		bsr.w	FindFloor2
00016AC6 D44B                       		add.w	a3,d2
00016AC8 0441 0010                  		subi.w	#$10,d1
00016ACC 4E75                       		rts	
00016ACE                            ; End of function FindFloor
00016ACE                            
00016ACE                            
00016ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ACE                            
00016ACE                            
00016ACE                            FindFloor2:				; XREF: FindFloor
00016ACE 6100 FED2                  		bsr.w	Floor_ChkTile
00016AD2 3011                       		move.w	(a1),d0
00016AD4 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016AD8 3800                       		move.w	d0,d4
00016ADA 0240 03FF                  		andi.w	#$3FF,d0
00016ADE 6700                       		beq.s	loc_14A86
00016AE0 0B04                       		btst	d5,d4
00016AE2 6600                       		bne.s	loc_14A94
00016AE4                            
00016AE4                            loc_14A86:
00016AE4 323C 000F                  		move.w	#$F,d1
00016AE8 3002                       		move.w	d2,d0
00016AEA 0240 000F                  		andi.w	#$F,d0
00016AEE 9240                       		sub.w	d0,d1
00016AF0 4E75                       		rts	
00016AF2                            ; ===========================================================================
00016AF2                            
00016AF2                            loc_14A94:
00016AF2 2478 F796                  		movea.l	($FFFFF796).w,a2
00016AF6 1032 0000                  		move.b	(a2,d0.w),d0
00016AFA 0240 00FF                  		andi.w	#$FF,d0
00016AFE 67E4                       		beq.s	loc_14A86
00016B00 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B06 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B0A E948                       		lsl.w	#4,d0
00016B0C 3203                       		move.w	d3,d1
00016B0E 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016B12 6700                       		beq.s	loc_14ABA
00016B14 4641                       		not.w	d1
00016B16 4414                       		neg.b	(a4)
00016B18                            
00016B18                            loc_14ABA:
00016B18 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016B1C 6700                       		beq.s	loc_14ACA
00016B1E 0614 0040                  		addi.b	#$40,(a4)
00016B22 4414                       		neg.b	(a4)
00016B24 0414 0040                  		subi.b	#$40,(a4)
00016B28                            
00016B28                            loc_14ACA:
00016B28 0241 000F                  		andi.w	#$F,d1
00016B2C D240                       		add.w	d0,d1
00016B2E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016B34 1032 1000                  		move.b	(a2,d1.w),d0
00016B38 4880                       		ext.w	d0
00016B3A BD44                       		eor.w	d6,d4
00016B3C 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016B40 6700                       		beq.s	loc_14AE6
00016B42 4440                       		neg.w	d0
00016B44                            
00016B44                            loc_14AE6:
00016B44 4A40                       		tst.w	d0
00016B46 679C                       		beq.s	loc_14A86
00016B48 6B00                       		bmi.s	loc_14AFC
00016B4A 3202                       		move.w	d2,d1
00016B4C 0241 000F                  		andi.w	#$F,d1
00016B50 D041                       		add.w	d1,d0
00016B52 323C 000F                  		move.w	#$F,d1
00016B56 9240                       		sub.w	d0,d1
00016B58 4E75                       		rts	
00016B5A                            ; ===========================================================================
00016B5A                            
00016B5A                            loc_14AFC:
00016B5A 3202                       		move.w	d2,d1
00016B5C 0241 000F                  		andi.w	#$F,d1
00016B60 D041                       		add.w	d1,d0
00016B62 6A00 FF80                  		bpl.w	loc_14A86
00016B66 4641                       		not.w	d1
00016B68 4E75                       		rts	
00016B6A                            ; End of function FindFloor2
00016B6A                            
00016B6A                            
00016B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B6A                            
00016B6A                            
00016B6A                            FindWall:
00016B6A 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00016B6E 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00016B70 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016B74 3800                       		move.w	d0,d4					; MJ: copy to d4
00016B76 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00016B7A 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00016B7C 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00016B7E 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00016B80                            
00016B80                            loc_14B1E:
00016B80 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00016B82 6100 0000                  		bsr.w	FindWall2
00016B86 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00016B88 0641 0010                  		addi.w	#$10,d1
00016B8C 4E75                       		rts	
00016B8E                            ; ===========================================================================
00016B8E                            
00016B8E                            loc_14B2C:
00016B8E 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
00016B92 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00016B96 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00016B9A 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00016B9C 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016BA2 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00016BA6 E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00016BA8 3202                       		move.w	d2,d1					; MJ: load Y position
00016BAA 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00016BAE 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00016BB0 4641                       		not.w	d1
00016BB2 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00016BB6 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016BB8 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00016BBC                            
00016BBC                            loc_14B5A:
00016BBC 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00016BC0 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00016BC2 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016BC4                            
00016BC4                            loc_14B62:
00016BC4 0241 000F                  		andi.w	#$F,d1
00016BC8 D240                       		add.w	d0,d1
00016BCA 45F9 0000 0000             		lea	(CollArray2).l,a2
00016BD0 1032 1000                  		move.b	(a2,d1.w),d0
00016BD4 4880                       		ext.w	d0
00016BD6 BD44                       		eor.w	d6,d4
00016BD8 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016BDC 6700                       		beq.s	loc_14B7E
00016BDE 4440                       		neg.w	d0
00016BE0                            
00016BE0                            loc_14B7E:
00016BE0 4A40                       		tst.w	d0
00016BE2 679C                       		beq.s	loc_14B1E
00016BE4 6B00                       		bmi.s	loc_14B9A
00016BE6 0C00 0010                  		cmpi.b	#$10,d0
00016BEA 6700                       		beq.s	loc_14BA6
00016BEC 3203                       		move.w	d3,d1
00016BEE 0241 000F                  		andi.w	#$F,d1
00016BF2 D041                       		add.w	d1,d0
00016BF4 323C 000F                  		move.w	#$F,d1
00016BF8 9240                       		sub.w	d0,d1
00016BFA 4E75                       		rts	
00016BFC                            ; ===========================================================================
00016BFC                            
00016BFC                            loc_14B9A:
00016BFC 3203                       		move.w	d3,d1
00016BFE 0241 000F                  		andi.w	#$F,d1
00016C02 D041                       		add.w	d1,d0
00016C04 6A00 FF7A                  		bpl.w	loc_14B1E
00016C08                            
00016C08                            loc_14BA6:
00016C08 964B                       		sub.w	a3,d3
00016C0A 6100 0000                  		bsr.w	FindWall2
00016C0E D64B                       		add.w	a3,d3
00016C10 0441 0010                  		subi.w	#$10,d1
00016C14 4E75                       		rts	
00016C16                            ; End of function FindWall
00016C16                            
00016C16                            
00016C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C16                            
00016C16                            
00016C16                            FindWall2:				; XREF: FindWall
00016C16 6100 FD8A                  		bsr.w	Floor_ChkTile
00016C1A 3011                       		move.w	(a1),d0
00016C1C 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016C20 3800                       		move.w	d0,d4
00016C22 0240 03FF                  		andi.w	#$3FF,d0
00016C26 6700                       		beq.s	loc_14BC6
00016C28 0B04                       		btst	d5,d4
00016C2A 6600                       		bne.s	loc_14BD4
00016C2C                            
00016C2C                            loc_14BC6:
00016C2C 323C 000F                  		move.w	#$F,d1
00016C30 3003                       		move.w	d3,d0
00016C32 0240 000F                  		andi.w	#$F,d0
00016C36 9240                       		sub.w	d0,d1
00016C38 4E75                       		rts	
00016C3A                            ; ===========================================================================
00016C3A                            
00016C3A                            loc_14BD4:
00016C3A 2478 F796                  		movea.l	($FFFFF796).w,a2
00016C3E 1032 0000                  		move.b	(a2,d0.w),d0
00016C42 0240 00FF                  		andi.w	#$FF,d0
00016C46 67E4                       		beq.s	loc_14BC6
00016C48 45F9 0000 0000             		lea	(AngleMap).l,a2
00016C4E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016C52 E948                       		lsl.w	#4,d0
00016C54 3202                       		move.w	d2,d1
00016C56 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016C5A 6700                       		beq.s	loc_14C02
00016C5C 4641                       		not.w	d1
00016C5E 0614 0040                  		addi.b	#$40,(a4)
00016C62 4414                       		neg.b	(a4)
00016C64 0414 0040                  		subi.b	#$40,(a4)
00016C68                            
00016C68                            loc_14C02:
00016C68 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C6C 6700                       		beq.s	loc_14C0A
00016C6E 4414                       		neg.b	(a4)
00016C70                            
00016C70                            loc_14C0A:
00016C70 0241 000F                  		andi.w	#$F,d1
00016C74 D240                       		add.w	d0,d1
00016C76 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C7C 1032 1000                  		move.b	(a2,d1.w),d0
00016C80 4880                       		ext.w	d0
00016C82 BD44                       		eor.w	d6,d4
00016C84 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C88 6700                       		beq.s	loc_14C26
00016C8A 4440                       		neg.w	d0
00016C8C                            
00016C8C                            loc_14C26:
00016C8C 4A40                       		tst.w	d0
00016C8E 679C                       		beq.s	loc_14BC6
00016C90 6B00                       		bmi.s	loc_14C3C
00016C92 3203                       		move.w	d3,d1
00016C94 0241 000F                  		andi.w	#$F,d1
00016C98 D041                       		add.w	d1,d0
00016C9A 323C 000F                  		move.w	#$F,d1
00016C9E 9240                       		sub.w	d0,d1
00016CA0 4E75                       		rts	
00016CA2                            ; ===========================================================================
00016CA2                            
00016CA2                            loc_14C3C:
00016CA2 3203                       		move.w	d3,d1
00016CA4 0241 000F                  		andi.w	#$F,d1
00016CA8 D041                       		add.w	d1,d0
00016CAA 6A00 FF80                  		bpl.w	loc_14BC6
00016CAE 4641                       		not.w	d1
00016CB0 4E75                       		rts	
00016CB2                            ; End of function FindWall2
00016CB2                            
00016CB2                            ; ---------------------------------------------------------------------------
00016CB2                            ; Unused floor/wall subroutine - logs something	to do with collision
00016CB2                            ; ---------------------------------------------------------------------------
00016CB2                            
00016CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CB2                            
00016CB2                            
00016CB2                            FloorLog_Unk:				; XREF: Level
00016CB2 4E75                       		rts	
00016CB4                            
00016CB4 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CBA 45F9 0000 0000             		lea	(CollArray1).l,a2
00016CC0 363C 00FF                  		move.w	#$FF,d3
00016CC4                            
00016CC4                            loc_14C5E:
00016CC4 7A10                       		moveq	#$10,d5
00016CC6 343C 000F                  		move.w	#$F,d2
00016CCA                            
00016CCA                            loc_14C64:
00016CCA 7800                       		moveq	#0,d4
00016CCC 323C 000F                  		move.w	#$F,d1
00016CD0                            
00016CD0                            loc_14C6A:
00016CD0 3019                       		move.w	(a1)+,d0
00016CD2 EAA8                       		lsr.l	d5,d0
00016CD4 D944                       		addx.w	d4,d4
00016CD6 51C9 FFF8                  		dbf	d1,loc_14C6A
00016CDA                            
00016CDA 34C4                       		move.w	d4,(a2)+
00016CDC 92FC 0020                  		suba.w	#$20,a1
00016CE0 5345                       		subq.w	#1,d5
00016CE2 51CA FFE6                  		dbf	d2,loc_14C64
00016CE6                            
00016CE6 D2FC 0020                  		adda.w	#$20,a1
00016CEA 51CB FFD8                  		dbf	d3,loc_14C5E
00016CEE                            
00016CEE 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CF4 45F9 0000 0000             		lea	(CollArray2).l,a2
00016CFA 6100                       		bsr.s	FloorLog_Unk2
00016CFC 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D02 45F9 0000 0000             		lea	(CollArray1).l,a2
00016D08                            
00016D08                            ; End of function FloorLog_Unk
00016D08                            
00016D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D08                            
00016D08                            
00016D08                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016D08 363C 0FFF                  		move.w	#$FFF,d3
00016D0C                            
00016D0C                            loc_14CA6:
00016D0C 7400                       		moveq	#0,d2
00016D0E 323C 000F                  		move.w	#$F,d1
00016D12 3019                       		move.w	(a1)+,d0
00016D14 6700                       		beq.s	loc_14CD4
00016D16 6B00                       		bmi.s	loc_14CBE
00016D18                            
00016D18                            loc_14CB2:
00016D18 E248                       		lsr.w	#1,d0
00016D1A 6400                       		bcc.s	loc_14CB8
00016D1C 5202                       		addq.b	#1,d2
00016D1E                            
00016D1E                            loc_14CB8:
00016D1E 51C9 FFF8                  		dbf	d1,loc_14CB2
00016D22                            
00016D22 6000                       		bra.s	loc_14CD6
00016D24                            ; ===========================================================================
00016D24                            
00016D24                            loc_14CBE:
00016D24 0C40 FFFF                  		cmpi.w	#-1,d0
00016D28 6700                       		beq.s	loc_14CD0
00016D2A                            
00016D2A                            loc_14CC4:
00016D2A E348                       		lsl.w	#1,d0
00016D2C 6400                       		bcc.s	loc_14CCA
00016D2E 5302                       		subq.b	#1,d2
00016D30                            
00016D30                            loc_14CCA:
00016D30 51C9 FFF8                  		dbf	d1,loc_14CC4
00016D34                            
00016D34 6000                       		bra.s	loc_14CD6
00016D36                            ; ===========================================================================
00016D36                            
00016D36                            loc_14CD0:
00016D36 303C 0010                  		move.w	#$10,d0
00016D3A                            
00016D3A                            loc_14CD4:
00016D3A 3400                       		move.w	d0,d2
00016D3C                            
00016D3C                            loc_14CD6:
00016D3C 14C2                       		move.b	d2,(a2)+
00016D3E 51CB FFCC                  		dbf	d3,loc_14CA6
00016D42                            
00016D42 4E75                       		rts	
00016D44                            
00016D44                            ; End of function FloorLog_Unk2
00016D44                            
00016D44                            
00016D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D44                            
00016D44                            
00016D44                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016D44 2628 0008                  		move.l	8(a0),d3
00016D48 2428 000C                  		move.l	$C(a0),d2
00016D4C 3228 0010                  		move.w	$10(a0),d1
00016D50 48C1                       		ext.l	d1
00016D52 E181                       		asl.l	#8,d1
00016D54 D681                       		add.l	d1,d3
00016D56 3228 0012                  		move.w	$12(a0),d1
00016D5A 48C1                       		ext.l	d1
00016D5C E181                       		asl.l	#8,d1
00016D5E D481                       		add.l	d1,d2
00016D60 4842                       		swap	d2
00016D62 4843                       		swap	d3
00016D64 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D68 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D6C 1200                       		move.b	d0,d1
00016D6E 0600 0020                  		addi.b	#$20,d0
00016D72 6A00                       		bpl.s	loc_14D1A
00016D74 1001                       		move.b	d1,d0
00016D76 6A00                       		bpl.s	loc_14D14
00016D78 5300                       		subq.b	#1,d0
00016D7A                            
00016D7A                            loc_14D14:
00016D7A 0600 0020                  		addi.b	#$20,d0
00016D7E 6000                       		bra.s	loc_14D24
00016D80                            ; ===========================================================================
00016D80                            
00016D80                            loc_14D1A:
00016D80 1001                       		move.b	d1,d0
00016D82 6A00                       		bpl.s	loc_14D20
00016D84 5200                       		addq.b	#1,d0
00016D86                            
00016D86                            loc_14D20:
00016D86 0600 001F                  		addi.b	#$1F,d0
00016D8A                            
00016D8A                            loc_14D24:
00016D8A 0200 00C0                  		andi.b	#$C0,d0
00016D8E 6700 0000                  		beq.w	loc_14DF0
00016D92 0C00 0080                  		cmpi.b	#$80,d0
00016D96 6700 0000                  		beq.w	loc_14F7C
00016D9A 0201 0038                  		andi.b	#$38,d1
00016D9E 6600                       		bne.s	loc_14D3C
00016DA0 5042                       		addq.w	#8,d2
00016DA2                            
00016DA2                            loc_14D3C:
00016DA2 0C00 0040                  		cmpi.b	#$40,d0
00016DA6 6700 0000                  		beq.w	loc_1504A
00016DAA 6000 0000                  		bra.w	loc_14EBC
00016DAE                            
00016DAE                            ; End of function Sonic_WalkSpeed
00016DAE                            
00016DAE                            
00016DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DAE                            
00016DAE                            
00016DAE                            sub_14D48:				; XREF: Sonic_Jump
00016DAE 11C0 F768                  		move.b	d0,($FFFFF768).w
00016DB2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016DB6 0600 0020                  		addi.b	#$20,d0
00016DBA 0200 00C0                  		andi.b	#$C0,d0
00016DBE 0C00 0040                  		cmpi.b	#$40,d0
00016DC2 6700 0000                  		beq.w	loc_14FD6
00016DC6 0C00 0080                  		cmpi.b	#$80,d0
00016DCA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016DCE 0C00 00C0                  		cmpi.b	#$C0,d0
00016DD2 6700 0000                  		beq.w	sub_14E50
00016DD6                            
00016DD6                            ; End of function sub_14D48
00016DD6                            
00016DD6                            ; ---------------------------------------------------------------------------
00016DD6                            ; Subroutine to	make Sonic land	on the floor after jumping
00016DD6                            ; ---------------------------------------------------------------------------
00016DD6                            
00016DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DD6                            
00016DD6                            
00016DD6                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016DD6 3428 000C                  		move.w	$C(a0),d2
00016DDA 3628 0008                  		move.w	8(a0),d3
00016DDE 7000                       		moveq	#0,d0
00016DE0 1028 0016                  		move.b	$16(a0),d0
00016DE4 4880                       		ext.w	d0
00016DE6 D440                       		add.w	d0,d2
00016DE8 1028 0017                  		move.b	$17(a0),d0
00016DEC 4880                       		ext.w	d0
00016DEE D640                       		add.w	d0,d3
00016DF0 49F8 F768                  		lea	($FFFFF768).w,a4
00016DF4 367C 0010                  		movea.w	#$10,a3
00016DF8 3C3C 0000                  		move.w	#0,d6
00016DFC 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016DFE 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00016E02 3F01                       		move.w	d1,-(sp)
00016E04 3428 000C                  		move.w	$C(a0),d2
00016E08 3628 0008                  		move.w	8(a0),d3
00016E0C 7000                       		moveq	#0,d0
00016E0E 1028 0016                  		move.b	$16(a0),d0
00016E12 4880                       		ext.w	d0
00016E14 D440                       		add.w	d0,d2
00016E16 1028 0017                  		move.b	$17(a0),d0
00016E1A 4880                       		ext.w	d0
00016E1C 9640                       		sub.w	d0,d3
00016E1E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E22 367C 0010                  		movea.w	#$10,a3
00016E26 3C3C 0000                  		move.w	#0,d6
00016E2A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016E2C 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00016E30 301F                       		move.w	(sp)+,d0
00016E32 143C 0000                  		move.b	#0,d2
00016E36                            
00016E36                            loc_14DD0:
00016E36 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016E3A B240                       		cmp.w	d0,d1
00016E3C 6F00                       		ble.s	loc_14DDE
00016E3E 1638 F768                  		move.b	($FFFFF768).w,d3
00016E42 C141                       		exg	d0,d1
00016E44                            
00016E44                            loc_14DDE:
00016E44 0803 0000                  		btst	#0,d3
00016E48 6700                       		beq.s	locret_14DE6
00016E4A 1602                       		move.b	d2,d3
00016E4C                            
00016E4C                            locret_14DE6:
00016E4C 4E75                       		rts	
00016E4E                            
00016E4E                            ; End of function Sonic_HitFloor
00016E4E                            
00016E4E                            ; ===========================================================================
00016E4E 3428 000C                  		move.w	$C(a0),d2
00016E52 3628 0008                  		move.w	8(a0),d3
00016E56                            
00016E56                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016E56 0642 000A                  		addi.w	#$A,d2
00016E5A 49F8 F768                  		lea	($FFFFF768).w,a4
00016E5E 367C 0010                  		movea.w	#$10,a3
00016E62 3C3C 0000                  		move.w	#0,d6
00016E66 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016E68 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00016E6C 143C 0000                  		move.b	#0,d2
00016E70                            
00016E70                            loc_14E0A:				; XREF: sub_14EB4
00016E70 1638 F768                  		move.b	($FFFFF768).w,d3
00016E74 0803 0000                  		btst	#0,d3
00016E78 6700                       		beq.s	locret_14E16
00016E7A 1602                       		move.b	d2,d3
00016E7C                            
00016E7C                            locret_14E16:
00016E7C 4E75                       		rts	
00016E7E                            
00016E7E                            ; ---------------------------------------------------------------------------
00016E7E                            ; Subroutine allowing objects to interact with the floor
00016E7E                            ; ---------------------------------------------------------------------------
00016E7E                            
00016E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E7E                            
00016E7E                            
00016E7E                            ObjHitFloor:
00016E7E 3628 0008                  		move.w	8(a0),d3
00016E82                            
00016E82                            ; End of function ObjHitFloor
00016E82                            
00016E82                            
00016E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E82                            
00016E82                            
00016E82                            ObjHitFloor2:
00016E82 3428 000C                  		move.w	$C(a0),d2
00016E86 7000                       		moveq	#0,d0
00016E88 1028 0016                  		move.b	$16(a0),d0
00016E8C 4880                       		ext.w	d0
00016E8E D440                       		add.w	d0,d2
00016E90 49F8 F768                  		lea	($FFFFF768).w,a4
00016E94 18BC 0000                  		move.b	#0,(a4)
00016E98 367C 0010                  		movea.w	#$10,a3
00016E9C 3C3C 0000                  		move.w	#0,d6
00016EA0 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016EA2 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00016EA6 1638 F768                  		move.b	($FFFFF768).w,d3
00016EAA 0803 0000                  		btst	#0,d3
00016EAE 6700                       		beq.s	locret_14E4E
00016EB0 163C 0000                  		move.b	#0,d3
00016EB4                            
00016EB4                            locret_14E4E:
00016EB4 4E75                       		rts	
00016EB6                            ; End of function ObjHitFloor2
00016EB6                            
00016EB6                            
00016EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EB6                            
00016EB6                            
00016EB6                            sub_14E50:				; XREF: sub_14D48
00016EB6 3428 000C                  		move.w	$C(a0),d2
00016EBA 3628 0008                  		move.w	8(a0),d3
00016EBE 7000                       		moveq	#0,d0
00016EC0 1028 0017                  		move.b	$17(a0),d0
00016EC4 4880                       		ext.w	d0
00016EC6 9440                       		sub.w	d0,d2
00016EC8 1028 0016                  		move.b	$16(a0),d0
00016ECC 4880                       		ext.w	d0
00016ECE D640                       		add.w	d0,d3
00016ED0 49F8 F768                  		lea	($FFFFF768).w,a4
00016ED4 367C 0010                  		movea.w	#$10,a3
00016ED8 3C3C 0000                  		move.w	#0,d6
00016EDC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016EDE 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00016EE2 3F01                       		move.w	d1,-(sp)
00016EE4 3428 000C                  		move.w	$C(a0),d2
00016EE8 3628 0008                  		move.w	8(a0),d3
00016EEC 7000                       		moveq	#0,d0
00016EEE 1028 0017                  		move.b	$17(a0),d0
00016EF2 4880                       		ext.w	d0
00016EF4 D440                       		add.w	d0,d2
00016EF6 1028 0016                  		move.b	$16(a0),d0
00016EFA 4880                       		ext.w	d0
00016EFC D640                       		add.w	d0,d3
00016EFE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016F02 367C 0010                  		movea.w	#$10,a3
00016F06 3C3C 0000                  		move.w	#0,d6
00016F0A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F0C 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00016F10 301F                       		move.w	(sp)+,d0
00016F12 143C 00C0                  		move.b	#-$40,d2
00016F16 6000 FF1E                  		bra.w	loc_14DD0
00016F1A                            
00016F1A                            ; End of function sub_14E50
00016F1A                            
00016F1A                            
00016F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F1A                            
00016F1A                            
00016F1A                            sub_14EB4:				; XREF: Sonic_Floor
00016F1A 3428 000C                  		move.w	$C(a0),d2
00016F1E 3628 0008                  		move.w	8(a0),d3
00016F22                            
00016F22                            loc_14EBC:
00016F22 0643 000A                  		addi.w	#$A,d3
00016F26 49F8 F768                  		lea	($FFFFF768).w,a4
00016F2A 367C 0010                  		movea.w	#$10,a3
00016F2E 3C3C 0000                  		move.w	#0,d6
00016F32 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F34 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00016F38 143C 00C0                  		move.b	#-$40,d2
00016F3C 6000 FF32                  		bra.w	loc_14E0A
00016F40                            
00016F40                            ; End of function sub_14EB4
00016F40                            
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            ; Subroutine to	detect when an object hits a wall to its right
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            
00016F40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F40                            
00016F40                            
00016F40                            ObjHitWallRight:
00016F40 D668 0008                  		add.w	8(a0),d3
00016F44 3428 000C                  		move.w	$C(a0),d2
00016F48 49F8 F768                  		lea	($FFFFF768).w,a4
00016F4C 18BC 0000                  		move.b	#0,(a4)
00016F50 367C 0010                  		movea.w	#$10,a3
00016F54 3C3C 0000                  		move.w	#0,d6
00016F58 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F5A 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00016F5E 1638 F768                  		move.b	($FFFFF768).w,d3
00016F62 0803 0000                  		btst	#0,d3
00016F66 6700                       		beq.s	locret_14F06
00016F68 163C 00C0                  		move.b	#-$40,d3
00016F6C                            
00016F6C                            locret_14F06:
00016F6C 4E75                       		rts	
00016F6E                            
00016F6E                            ; End of function ObjHitWallRight
00016F6E                            
00016F6E                            ; ---------------------------------------------------------------------------
00016F6E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016F6E                            ; touches them
00016F6E                            ; ---------------------------------------------------------------------------
00016F6E                            
00016F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F6E                            
00016F6E                            
00016F6E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016F6E 3428 000C                  		move.w	$C(a0),d2
00016F72 3628 0008                  		move.w	8(a0),d3
00016F76 7000                       		moveq	#0,d0
00016F78 1028 0016                  		move.b	$16(a0),d0
00016F7C 4880                       		ext.w	d0
00016F7E 9440                       		sub.w	d0,d2
00016F80 0A42 000F                  		eori.w	#$F,d2
00016F84 1028 0017                  		move.b	$17(a0),d0
00016F88 4880                       		ext.w	d0
00016F8A D640                       		add.w	d0,d3
00016F8C 49F8 F768                  		lea	($FFFFF768).w,a4
00016F90 367C FFF0                  		movea.w	#-$10,a3
00016F94 3C3C 0800                  		move.w	#$0800,d6
00016F98 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F9A 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
00016F9E 3F01                       		move.w	d1,-(sp)
00016FA0 3428 000C                  		move.w	$C(a0),d2
00016FA4 3628 0008                  		move.w	8(a0),d3
00016FA8 7000                       		moveq	#0,d0
00016FAA 1028 0016                  		move.b	$16(a0),d0
00016FAE 4880                       		ext.w	d0
00016FB0 9440                       		sub.w	d0,d2
00016FB2 0A42 000F                  		eori.w	#$F,d2
00016FB6 1028 0017                  		move.b	$17(a0),d0
00016FBA 4880                       		ext.w	d0
00016FBC 9640                       		sub.w	d0,d3
00016FBE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FC2 367C FFF0                  		movea.w	#-$10,a3
00016FC6 3C3C 0800                  		move.w	#$0800,d6
00016FCA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FCC 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00016FD0 301F                       		move.w	(sp)+,d0
00016FD2 143C 0080                  		move.b	#-$80,d2
00016FD6 6000 FE5E                  		bra.w	loc_14DD0
00016FDA                            ; End of function Sonic_DontRunOnWalls
00016FDA                            
00016FDA                            ; ===========================================================================
00016FDA 3428 000C                  		move.w	$C(a0),d2
00016FDE 3628 0008                  		move.w	8(a0),d3
00016FE2                            
00016FE2                            loc_14F7C:
00016FE2 0442 000A                  		subi.w	#$A,d2
00016FE6 0A42 000F                  		eori.w	#$F,d2
00016FEA 49F8 F768                  		lea	($FFFFF768).w,a4
00016FEE 367C FFF0                  		movea.w	#-$10,a3
00016FF2 3C3C 0800                  		move.w	#$0800,d6
00016FF6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FF8 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00016FFC 143C 0080                  		move.b	#-$80,d2
00017000 6000 FE6E                  		bra.w	loc_14E0A
00017004                            
00017004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017004                            
00017004                            
00017004                            ObjHitCeiling:
00017004 3428 000C                  		move.w	$C(a0),d2
00017008 3628 0008                  		move.w	8(a0),d3
0001700C 7000                       		moveq	#0,d0
0001700E 1028 0016                  		move.b	$16(a0),d0
00017012 4880                       		ext.w	d0
00017014 9440                       		sub.w	d0,d2
00017016 0A42 000F                  		eori.w	#$F,d2
0001701A 49F8 F768                  		lea	($FFFFF768).w,a4
0001701E 367C FFF0                  		movea.w	#-$10,a3
00017022 3C3C 0800                  		move.w	#$0800,d6
00017026 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017028 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
0001702C 1638 F768                  		move.b	($FFFFF768).w,d3
00017030 0803 0000                  		btst	#0,d3
00017034 6700                       		beq.s	locret_14FD4
00017036 163C 0080                  		move.b	#-$80,d3
0001703A                            
0001703A                            locret_14FD4:
0001703A 4E75                       		rts	
0001703C                            ; End of function ObjHitCeiling
0001703C                            
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            loc_14FD6:				; XREF: sub_14D48
0001703C 3428 000C                  		move.w	$C(a0),d2
00017040 3628 0008                  		move.w	8(a0),d3
00017044 7000                       		moveq	#0,d0
00017046 1028 0017                  		move.b	$17(a0),d0
0001704A 4880                       		ext.w	d0
0001704C 9440                       		sub.w	d0,d2
0001704E 1028 0016                  		move.b	$16(a0),d0
00017052 4880                       		ext.w	d0
00017054 9640                       		sub.w	d0,d3
00017056 0A43 000F                  		eori.w	#$F,d3
0001705A 49F8 F768                  		lea	($FFFFF768).w,a4
0001705E 367C FFF0                  		movea.w	#-$10,a3
00017062 3C3C 0400                  		move.w	#$400,d6
00017066 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017068 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
0001706C 3F01                       		move.w	d1,-(sp)
0001706E 3428 000C                  		move.w	$C(a0),d2
00017072 3628 0008                  		move.w	8(a0),d3
00017076 7000                       		moveq	#0,d0
00017078 1028 0017                  		move.b	$17(a0),d0
0001707C 4880                       		ext.w	d0
0001707E D440                       		add.w	d0,d2
00017080 1028 0016                  		move.b	$16(a0),d0
00017084 4880                       		ext.w	d0
00017086 9640                       		sub.w	d0,d3
00017088 0A43 000F                  		eori.w	#$F,d3
0001708C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017090 367C FFF0                  		movea.w	#-$10,a3
00017094 3C3C 0400                  		move.w	#$400,d6
00017098 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001709A 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
0001709E 301F                       		move.w	(sp)+,d0
000170A0 143C 0040                  		move.b	#$40,d2
000170A4 6000 FD90                  		bra.w	loc_14DD0
000170A8                            
000170A8                            ; ---------------------------------------------------------------------------
000170A8                            ; Subroutine to	stop Sonic when	he jumps at a wall
000170A8                            ; ---------------------------------------------------------------------------
000170A8                            
000170A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170A8                            
000170A8                            
000170A8                            Sonic_HitWall:				; XREF: Sonic_Floor
000170A8 3428 000C                  		move.w	$C(a0),d2
000170AC 3628 0008                  		move.w	8(a0),d3
000170B0                            
000170B0                            loc_1504A:
000170B0 0443 000A                  		subi.w	#$A,d3
000170B4 0A43 000F                  		eori.w	#$F,d3
000170B8 49F8 F768                  		lea	($FFFFF768).w,a4
000170BC 367C FFF0                  		movea.w	#-$10,a3
000170C0 3C3C 0400                  		move.w	#$400,d6
000170C4 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170C6 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
000170CA 143C 0040                  		move.b	#$40,d2
000170CE 6000 FDA0                  		bra.w	loc_14E0A
000170D2                            ; End of function Sonic_HitWall
000170D2                            
000170D2                            ; ---------------------------------------------------------------------------
000170D2                            ; Subroutine to	detect when an object hits a wall to its left
000170D2                            ; ---------------------------------------------------------------------------
000170D2                            
000170D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170D2                            
000170D2                            
000170D2                            ObjHitWallLeft:
000170D2 D668 0008                  		add.w	8(a0),d3
000170D6 3428 000C                  		move.w	$C(a0),d2
000170DA 49F8 F768                  		lea	($FFFFF768).w,a4
000170DE 18BC 0000                  		move.b	#0,(a4)
000170E2 367C FFF0                  		movea.w	#-$10,a3
000170E6 3C3C 0400                  		move.w	#$400,d6
000170EA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170EC 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
000170F0 1638 F768                  		move.b	($FFFFF768).w,d3
000170F4 0803 0000                  		btst	#0,d3
000170F8 6700                       		beq.s	locret_15098
000170FA 163C 0040                  		move.b	#$40,d3
000170FE                            
000170FE                            locret_15098:
000170FE 4E75                       		rts	
00017100                            ; End of function ObjHitWallLeft
00017100                            
00017100                            ; ===========================================================================
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            
00017100                            ; ===========================================================================
00017100                            ; ---------------------------------------------------------------------------
00017100                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00017100                            ; ---------------------------------------------------------------------------
00017100                            
00017100                            Obj66:					; XREF: Obj_Index
00017100 7000                       		moveq	#0,d0
00017102 1028 0024                  		move.b	$24(a0),d0
00017106 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001710A 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001710E                            ; ===========================================================================
0001710E 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00017110 0000                       		dc.w Obj66_Action-Obj66_Index
00017112 0000                       		dc.w Obj66_Display-Obj66_Index
00017114 0000                       		dc.w Obj66_Release-Obj66_Index
00017116                            ; ===========================================================================
00017116                            
00017116                            Obj66_Main:				; XREF: Obj66_Index
00017116 5428 0024                  		addq.b	#2,$24(a0)
0001711A 323C 0001                  		move.w	#1,d1
0001711E 2248                       		movea.l	a0,a1
00017120 6000                       		bra.s	Obj66_MakeItem
00017122                            ; ===========================================================================
00017122                            
00017122                            Obj66_Loop:
00017122 6100 8454                  		bsr.w	SingleObjLoad
00017126 6600                       		bne.s	loc_150FE
00017128 12BC 0066                  		move.b	#$66,0(a1)
0001712C 5829 0024                  		addq.b	#4,$24(a1)
00017130 3368 0008 0008             		move.w	8(a0),8(a1)
00017136 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001713C 137C 0003 0018             		move.b	#3,$18(a1)
00017142 137C 0010 001A             		move.b	#$10,$1A(a1)
00017148                            
00017148                            Obj66_MakeItem:				; XREF: Obj66_Main
00017148 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00017150 337C 4348 0002             		move.w	#$4348,2(a1)
00017156 0029 0004 0001             		ori.b	#4,1(a1)
0001715C 137C 0038 0019             		move.b	#$38,$19(a1)
00017162                            
00017162                            loc_150FE:
00017162 51C9 FFBE                  		dbf	d1,Obj66_Loop
00017166                            
00017166 117C 0030 0019             		move.b	#$30,$19(a0)
0001716C 117C 0004 0018             		move.b	#4,$18(a0)
00017172 317C 003C 0030             		move.w	#$3C,$30(a0)
00017178 117C 0001 0034             		move.b	#1,$34(a0)
0001717E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017184                            
00017184                            Obj66_Action:				; XREF: Obj66_Index
00017184 6100 0000                  		bsr.w	Obj66_ChkSwitch
00017188 4A28 0001                  		tst.b	1(a0)
0001718C 6A00 0000                  		bpl.w	Obj66_Display
00017190 323C 0030                  		move.w	#$30,d1
00017194 3401                       		move.w	d1,d2
00017196 3602                       		move.w	d2,d3
00017198 5243                       		addq.w	#1,d3
0001719A 3828 0008                  		move.w	8(a0),d4
0001719E 6100 A322                  		bsr.w	SolidObject
000171A2 0828 0005 0022             		btst	#5,$22(a0)
000171A8 6700 0000                  		beq.w	Obj66_Display
000171AC 43F8 D000                  		lea	($FFFFD000).w,a1
000171B0 720E                       		moveq	#$E,d1
000171B2 3029 0008                  		move.w	8(a1),d0
000171B6 B068 0008                  		cmp.w	8(a0),d0
000171BA 6500                       		bcs.s	Obj66_GrabSonic
000171BC 7207                       		moveq	#7,d1
000171BE                            
000171BE                            Obj66_GrabSonic:
000171BE B228 001A                  		cmp.b	$1A(a0),d1
000171C2 6600                       		bne.s	Obj66_Display
000171C4 1141 0032                  		move.b	d1,$32(a0)
000171C8 5828 0024                  		addq.b	#4,$24(a0)
000171CC 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000171D2 137C 0015 001C             		move.b	#$15,$1C(a1)	; make Sonic use "bubble" animation
000171D8 337C 0800 0014             		move.w	#$800,$14(a1)
000171DE 337C 0000 0010             		move.w	#0,$10(a1)
000171E4 337C 0000 0012             		move.w	#0,$12(a1)
000171EA 08A8 0005 0022             		bclr	#5,$22(a0)
000171F0 08A9 0005 0022             		bclr	#5,$22(a1)
000171F6 08E9 0001 0022             		bset	#1,$22(a1)
000171FC 3429 0008                  		move.w	8(a1),d2
00017200 3629 000C                  		move.w	$C(a1),d3
00017204 6100 0000                  		bsr.w	Obj66_ChgPos
00017208 D569 0008                  		add.w	d2,8(a1)
0001720C D769 000C                  		add.w	d3,$C(a1)
00017210 E0E9 0008                  		asr	8(a1)
00017214 E0E9 000C                  		asr	$C(a1)
00017218                            
00017218                            Obj66_Display:				; XREF: Obj66_Index
00017218 6000 9F80                  		bra.w	MarkObjGone
0001721C                            ; ===========================================================================
0001721C                            
0001721C                            Obj66_Release:				; XREF: Obj66_Index
0001721C 1028 001A                  		move.b	$1A(a0),d0
00017220 0C00 0004                  		cmpi.b	#4,d0
00017224 6700                       		beq.s	loc_151C8
00017226 0C00 0007                  		cmpi.b	#7,d0
0001722A 6600                       		bne.s	loc_151F8
0001722C                            
0001722C                            loc_151C8:
0001722C B028 0032                  		cmp.b	$32(a0),d0
00017230 6700                       		beq.s	loc_151F8
00017232 43F8 D000                  		lea	($FFFFD000).w,a1
00017236 337C 0000 0010             		move.w	#0,$10(a1)
0001723C 337C 0800 0012             		move.w	#$800,$12(a1)
00017242 0C00 0004                  		cmpi.b	#4,d0
00017246 6700                       		beq.s	loc_151F0
00017248 337C 0800 0010             		move.w	#$800,$10(a1)
0001724E 337C 0800 0012             		move.w	#$800,$12(a1)
00017254                            
00017254                            loc_151F0:
00017254 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017258 5928 0024                  		subq.b	#4,$24(a0)
0001725C                            
0001725C                            loc_151F8:
0001725C 6100                       		bsr.s	Obj66_ChkSwitch
0001725E 6100                       		bsr.s	Obj66_ChgPos
00017260 6000 9F38                  		bra.w	MarkObjGone
00017264                            
00017264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017264                            
00017264                            
00017264                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017264 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017268 7000                       		moveq	#0,d0
0001726A 1028 0038                  		move.b	$38(a0),d0
0001726E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017274 6700                       		beq.s	loc_15224	; if not, branch
00017276 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001727A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001727C 4428 0034                  		neg.b	$34(a0)
00017280 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017286 6000                       		bra.s	Obj66_Animate
00017288                            ; ===========================================================================
00017288                            
00017288                            loc_15224:
00017288 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001728C                            
0001728C                            Obj66_Animate:
0001728C 5328 001E                  		subq.b	#1,$1E(a0)
00017290 6A00                       		bpl.s	locret_15246
00017292 117C 0007 001E             		move.b	#7,$1E(a0)
00017298 1228 0034                  		move.b	$34(a0),d1
0001729C 1028 001A                  		move.b	$1A(a0),d0
000172A0 D001                       		add.b	d1,d0
000172A2 0200 000F                  		andi.b	#$F,d0
000172A6 1140 001A                  		move.b	d0,$1A(a0)
000172AA                            
000172AA                            locret_15246:
000172AA 4E75                       		rts	
000172AC                            ; End of function Obj66_ChkSwitch
000172AC                            
000172AC                            
000172AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000172AC                            
000172AC                            
000172AC                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000172AC 43F8 D000                  		lea	($FFFFD000).w,a1
000172B0 7000                       		moveq	#0,d0
000172B2 1028 001A                  		move.b	$1A(a0),d0
000172B6 D040                       		add.w	d0,d0
000172B8 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000172BC 101A                       		move.b	(a2)+,d0
000172BE 4880                       		ext.w	d0
000172C0 D068 0008                  		add.w	8(a0),d0
000172C4 3340 0008                  		move.w	d0,8(a1)
000172C8 101A                       		move.b	(a2)+,d0
000172CA 4880                       		ext.w	d0
000172CC D068 000C                  		add.w	$C(a0),d0
000172D0 3340 000C                  		move.w	d0,$C(a1)
000172D4 4E75                       		rts	
000172D6                            ; End of function Obj66_ChgPos
000172D6                            
000172D6                            ; ===========================================================================
000172D6 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000172DA E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000172DE 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000172E2 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000172E6 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000172EA 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000172EE 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000172F2 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            Map_obj66:
000172F6                            	include "_maps\obj66.asm"
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172F6                            ; ---------------------------------------------------------------------------
000172F6 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000172FA 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000172FE 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00017302 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00017306 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001730A 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
0001730E 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00017312 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00017316 0000                       		dc.w byte_154A4-Map_obj66
00017318 06                         byte_152B4:	dc.b 6
00017319 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001731E 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00017323 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00017328 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001732D 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00017332 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00017337 06                         byte_152D3:	dc.b 6
00017338 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001733D 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00017342 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00017347 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001734C 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00017351 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017356 06                         byte_152F2:	dc.b 6
00017357 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001735C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017361 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017366 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001736B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017370 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017375 06                         byte_15311:	dc.b 6
00017376 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001737B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017380 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017385 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001738A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001738F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017394 06                         byte_15330:	dc.b 6
00017395 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001739A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001739F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000173A4 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000173A9 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000173AE 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000173B3 06                         byte_1534F:	dc.b 6
000173B4 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000173B9 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000173BE 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000173C3 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000173C8 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000173CD 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000173D2 06                         byte_1536E:	dc.b 6
000173D3 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000173D8 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000173DD 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000173E2 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000173E7 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000173EC 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000173F1 06                         byte_1538D:	dc.b 6
000173F2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000173F7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000173FC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00017401 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00017406 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001740B 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00017410 06                         byte_153AC:	dc.b 6
00017411 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00017416 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001741B E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00017420 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00017425 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001742A 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001742F 06                         byte_153CB:	dc.b 6
00017430 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00017435 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001743A DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001743F DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00017444 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00017449 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001744E 06                         byte_153EA:	dc.b 6
0001744F D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017454 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017459 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001745E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017463 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017468 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001746D 06                         byte_15409:	dc.b 6
0001746E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017473 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017478 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001747D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017482 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017487 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001748C 06                         byte_15428:	dc.b 6
0001748D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017492 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017497 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001749C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000174A1 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000174A6 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000174AB 06                         byte_15447:	dc.b 6
000174AC D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000174B1 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000174B6 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000174BB CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000174C0 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000174C5 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000174CA 06                         byte_15466:	dc.b 6
000174CB E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000174D0 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000174D5 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000174DA D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000174DF E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000174E4 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000174E9 06                         byte_15485:	dc.b 6
000174EA E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000174EF D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000174F4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000174F9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000174FE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00017503 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00017508 0C                         byte_154A4:	dc.b $C
00017509 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
0001750E D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00017513 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00017518 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001751D D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00017522 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00017527 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001752C 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00017531 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00017536 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001753B 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00017540 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00017546 00                         		even
00017546 00                         		even
00017546                            
00017546                            ; ===========================================================================
00017546                            ; ---------------------------------------------------------------------------
00017546                            ; Object 67 - disc that	you run	around (SBZ)
00017546                            ; ---------------------------------------------------------------------------
00017546                            
00017546                            Obj67:					; XREF: Obj_Index
00017546 7000                       		moveq	#0,d0
00017548 1028 0024                  		move.b	$24(a0),d0
0001754C 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00017550 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017554                            ; ===========================================================================
00017554 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017556 0000                       		dc.w Obj67_Action-Obj67_Index
00017558                            ; ===========================================================================
00017558                            
00017558                            Obj67_Main:				; XREF: Obj67_Index
00017558 5428 0024                  		addq.b	#2,$24(a0)
0001755C 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017564 317C C344 0002             		move.w	#$C344,2(a0)
0001756A 117C 0004 0001             		move.b	#4,1(a0)
00017570 117C 0004 0018             		move.b	#4,$18(a0)
00017576 117C 0008 0019             		move.b	#8,$19(a0)
0001757C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017582 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017588 117C 0018 0034             		move.b	#$18,$34(a0)
0001758E 117C 0048 0038             		move.b	#$48,$38(a0)
00017594 1228 0028                  		move.b	$28(a0),d1	; get object type
00017598 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001759C 6700                       		beq.s	loc_15546
0001759E 117C 0010 0034             		move.b	#$10,$34(a0)
000175A4 117C 0038 0038             		move.b	#$38,$38(a0)
000175AA                            
000175AA                            loc_15546:
000175AA 1228 0028                  		move.b	$28(a0),d1	; get object type
000175AE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000175B2 4881                       		ext.w	d1
000175B4 E741                       		asl.w	#3,d1
000175B6 3141 0036                  		move.w	d1,$36(a0)
000175BA 1028 0022                  		move.b	$22(a0),d0
000175BE E418                       		ror.b	#2,d0
000175C0 0200 00C0                  		andi.b	#-$40,d0
000175C4 1140 0026                  		move.b	d0,$26(a0)
000175C8                            
000175C8                            Obj67_Action:				; XREF: Obj67_Index
000175C8 6100 0000                  		bsr.w	Obj67_MoveSonic
000175CC 6100 0000                  		bsr.w	Obj67_MoveSpot
000175D0 6000 0000                  		bra.w	Obj67_ChkDel
000175D4                            ; ===========================================================================
000175D4                            
000175D4                            Obj67_MoveSonic:			; XREF: Obj67_Action
000175D4 7400                       		moveq	#0,d2
000175D6 1428 0038                  		move.b	$38(a0),d2
000175DA 3602                       		move.w	d2,d3
000175DC D643                       		add.w	d3,d3
000175DE 43F8 D000                  		lea	($FFFFD000).w,a1
000175E2 3029 0008                  		move.w	8(a1),d0
000175E6 9068 0032                  		sub.w	$32(a0),d0
000175EA D042                       		add.w	d2,d0
000175EC B043                       		cmp.w	d3,d0
000175EE 6400                       		bcc.s	loc_155A8
000175F0 3229 000C                  		move.w	$C(a1),d1
000175F4 9268 0030                  		sub.w	$30(a0),d1
000175F8 D242                       		add.w	d2,d1
000175FA B243                       		cmp.w	d3,d1
000175FC 6400                       		bcc.s	loc_155A8
000175FE 0829 0001 0022             		btst	#1,$22(a1)
00017604 6700                       		beq.s	loc_155B8
00017606 4228 003A                  		clr.b	$3A(a0)
0001760A 4E75                       		rts	
0001760C                            ; ===========================================================================
0001760C                            
0001760C                            loc_155A8:
0001760C 4A28 003A                  		tst.b	$3A(a0)
00017610 6700                       		beq.s	locret_155B6
00017612 4229 0038                  		clr.b	$38(a1)
00017616 4228 003A                  		clr.b	$3A(a0)
0001761A                            
0001761A                            locret_155B6:
0001761A 4E75                       		rts	
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            loc_155B8:
0001761C 4A28 003A                  		tst.b	$3A(a0)
00017620 6600                       		bne.s	loc_155E2
00017622 117C 0001 003A             		move.b	#1,$3A(a0)
00017628 0829 0002 0022             		btst	#2,$22(a1)
0001762E 6600                       		bne.s	loc_155D0
00017630 4229 001C                  		clr.b	$1C(a1)
00017634                            
00017634                            loc_155D0:
00017634 08A9 0005 0022             		bclr	#5,$22(a1)
0001763A 137C 0001 001D             		move.b	#1,$1D(a1)
00017640 137C 0001 0038             		move.b	#1,$38(a1)
00017646                            
00017646                            loc_155E2:
00017646 3029 0014                  		move.w	$14(a1),d0
0001764A 4A68 0036                  		tst.w	$36(a0)
0001764E 6A00                       		bpl.s	loc_15608
00017650 0C40 FC00                  		cmpi.w	#-$400,d0
00017654 6F00                       		ble.s	loc_155FA
00017656 337C FC00 0014             		move.w	#-$400,$14(a1)
0001765C 4E75                       		rts	
0001765E                            ; ===========================================================================
0001765E                            
0001765E                            loc_155FA:
0001765E 0C40 F100                  		cmpi.w	#-$F00,d0
00017662 6C00                       		bge.s	locret_15606
00017664 337C F100 0014             		move.w	#-$F00,$14(a1)
0001766A                            
0001766A                            locret_15606:
0001766A 4E75                       		rts	
0001766C                            ; ===========================================================================
0001766C                            
0001766C                            loc_15608:
0001766C 0C40 0400                  		cmpi.w	#$400,d0
00017670 6C00                       		bge.s	loc_15616
00017672 337C 0400 0014             		move.w	#$400,$14(a1)
00017678 4E75                       		rts	
0001767A                            ; ===========================================================================
0001767A                            
0001767A                            loc_15616:
0001767A 0C40 0F00                  		cmpi.w	#$F00,d0
0001767E 6F00                       		ble.s	locret_15622
00017680 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017686                            
00017686                            locret_15622:
00017686 4E75                       		rts	
00017688                            ; ===========================================================================
00017688                            
00017688                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017688 3028 0036                  		move.w	$36(a0),d0
0001768C D168 0026                  		add.w	d0,$26(a0)
00017690 1028 0026                  		move.b	$26(a0),d0
00017694 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001769A 3428 0030                  		move.w	$30(a0),d2
0001769E 3628 0032                  		move.w	$32(a0),d3
000176A2 7800                       		moveq	#0,d4
000176A4 1828 0034                  		move.b	$34(a0),d4
000176A8 E14C                       		lsl.w	#8,d4
000176AA 2A04                       		move.l	d4,d5
000176AC C9C0                       		muls.w	d0,d4
000176AE 4844                       		swap	d4
000176B0 CBC1                       		muls.w	d1,d5
000176B2 4845                       		swap	d5
000176B4 D842                       		add.w	d2,d4
000176B6 DA43                       		add.w	d3,d5
000176B8 3144 000C                  		move.w	d4,$C(a0)
000176BC 3145 0008                  		move.w	d5,8(a0)
000176C0 4E75                       		rts	
000176C2                            ; ===========================================================================
000176C2                            
000176C2                            Obj67_ChkDel:				; XREF: Obj67_Action
000176C2 3028 0032                  		move.w	$32(a0),d0
000176C6 0240 FF80                  		andi.w	#-$80,d0
000176CA 3238 F700                  		move.w	($FFFFF700).w,d1
000176CE 0441 0080                  		subi.w	#$80,d1
000176D2 0241 FF80                  		andi.w	#-$80,d1
000176D6 9041                       		sub.w	d1,d0
000176D8 0C40 0280                  		cmpi.w	#$280,d0
000176DC 6200                       		bhi.s	Obj67_Delete
000176DE 4EF9 0000 F0E4             		jmp	DisplaySprite
000176E4                            ; ===========================================================================
000176E4                            
000176E4                            Obj67_Delete:
000176E4 4EF9 0000 F120             		jmp	DeleteObject
000176EA                            ; ===========================================================================
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; Sprite mappings - disc that you run around (SBZ)
000176EA                            ; (It's just a small blob that moves around in a circle. The disc itself is
000176EA                            ; part of the level tiles.)
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            Map_obj67:
000176EA                            	include "_maps\obj67.asm"
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; Sprite mappings - disc that you run around (SBZ)
000176EA                            ; (It's just a small blob that moves around in a circle. The disc itself is
000176EA                            ; part of the level tiles.)
000176EA                            ; ---------------------------------------------------------------------------
000176EA 0000                       		dc.w byte_15688-Map_obj67
000176EC 01                         byte_15688:	dc.b 1
000176ED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000176F2                            		even
000176F2                            		even
000176F2                            
000176F2                            ; ===========================================================================
000176F2                            ; ---------------------------------------------------------------------------
000176F2                            ; Object 68 - conveyor belts (SBZ)
000176F2                            ; ---------------------------------------------------------------------------
000176F2                            
000176F2                            Obj68:					; XREF: Obj_Index
000176F2 7000                       		moveq	#0,d0
000176F4 1028 0024                  		move.b	$24(a0),d0
000176F8 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000176FC 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017700                            ; ===========================================================================
00017700 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017702 0000                       		dc.w Obj68_Action-Obj68_Index
00017704                            ; ===========================================================================
00017704                            
00017704                            Obj68_Main:				; XREF: Obj68_Index
00017704 5428 0024                  		addq.b	#2,$24(a0)
00017708 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001770E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017712 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017716 6700                       		beq.s	loc_156BA	; if zero, branch
00017718 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001771E                            
0001771E                            loc_156BA:
0001771E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017722 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017726 4881                       		ext.w	d1
00017728 E841                       		asr.w	#4,d1
0001772A 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001772E                            
0001772E                            Obj68_Action:				; XREF: Obj68_Index
0001772E 6100                       		bsr.s	Obj68_MoveSonic
00017730 3028 0008                  		move.w	8(a0),d0
00017734 0240 FF80                  		andi.w	#$FF80,d0
00017738 3238 F700                  		move.w	($FFFFF700).w,d1
0001773C 0441 0080                  		subi.w	#$80,d1
00017740 0241 FF80                  		andi.w	#$FF80,d1
00017744 9041                       		sub.w	d1,d0
00017746 0C40 0280                  		cmpi.w	#$280,d0
0001774A 6200                       		bhi.s	Obj68_Delete
0001774C 4E75                       		rts	
0001774E                            ; ===========================================================================
0001774E                            
0001774E                            Obj68_Delete:
0001774E 4EF9 0000 F120             		jmp	DeleteObject
00017754                            ; ===========================================================================
00017754                            
00017754                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017754 7400                       		moveq	#0,d2
00017756 1428 0038                  		move.b	$38(a0),d2
0001775A 3602                       		move.w	d2,d3
0001775C D643                       		add.w	d3,d3
0001775E 43F8 D000                  		lea	($FFFFD000).w,a1
00017762 3029 0008                  		move.w	8(a1),d0
00017766 9068 0008                  		sub.w	8(a0),d0
0001776A D042                       		add.w	d2,d0
0001776C B043                       		cmp.w	d3,d0
0001776E 6400                       		bcc.s	locret_1572E
00017770 3229 000C                  		move.w	$C(a1),d1
00017774 9268 000C                  		sub.w	$C(a0),d1
00017778 0641 0030                  		addi.w	#$30,d1
0001777C 0C41 0030                  		cmpi.w	#$30,d1
00017780 6400                       		bcc.s	locret_1572E
00017782 0829 0001 0022             		btst	#1,$22(a1)
00017788 6600                       		bne.s	locret_1572E
0001778A 3028 0036                  		move.w	$36(a0),d0
0001778E D169 0008                  		add.w	d0,8(a1)
00017792                            
00017792                            locret_1572E:
00017792 4E75                       		rts	
00017794                            
00017794                            ; ===========================================================================
00017794                            ; ---------------------------------------------------------------------------
00017794                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017794                            ; ---------------------------------------------------------------------------
00017794                            
00017794                            Obj69:					; XREF: Obj_Index
00017794 7000                       		moveq	#0,d0
00017796 1028 0024                  		move.b	$24(a0),d0
0001779A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001779E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000177A2                            ; ===========================================================================
000177A2 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000177A4 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000177A6 0000                       		dc.w Obj69_Spinner-Obj69_Index
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            Obj69_Main:				; XREF: Obj69_Index
000177A8 5428 0024                  		addq.b	#2,$24(a0)
000177AC 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000177B4 317C 4492 0002             		move.w	#$4492,2(a0)
000177BA 0028 0004 0001             		ori.b	#4,1(a0)
000177C0 117C 0080 0019             		move.b	#$80,$19(a0)
000177C6 7000                       		moveq	#0,d0
000177C8 1028 0028                  		move.b	$28(a0),d0
000177CC 0240 000F                  		andi.w	#$F,d0
000177D0 C0FC 003C                  		mulu.w	#$3C,d0
000177D4 3140 0032                  		move.w	d0,$32(a0)
000177D8 4A28 0028                  		tst.b	$28(a0)
000177DC 6A00                       		bpl.s	Obj69_Trapdoor
000177DE 5428 0024                  		addq.b	#2,$24(a0)
000177E2 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000177EA 317C 04DF 0002             		move.w	#$4DF,2(a0)
000177F0 117C 0010 0019             		move.b	#$10,$19(a0)
000177F6 117C 0002 001C             		move.b	#2,$1C(a0)
000177FC 7000                       		moveq	#0,d0
000177FE 1028 0028                  		move.b	$28(a0),d0	; get object type
00017802 3200                       		move.w	d0,d1
00017804 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017808 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001780C 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017810 3140 0032                  		move.w	d0,$32(a0)
00017814 0241 0070                  		andi.w	#$70,d1
00017818 0641 0010                  		addi.w	#$10,d1
0001781C E549                       		lsl.w	#2,d1
0001781E 5341                       		subq.w	#1,d1
00017820 3141 0036                  		move.w	d1,$36(a0)
00017824 6000                       		bra.s	Obj69_Spinner
00017826                            ; ===========================================================================
00017826                            
00017826                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017826 5368 0030                  		subq.w	#1,$30(a0)
0001782A 6A00                       		bpl.s	Obj69_Animate
0001782C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017832 0868 0000 001C             		bchg	#0,$1C(a0)
00017838 4A28 0001                  		tst.b	1(a0)
0001783C 6A00                       		bpl.s	Obj69_Animate
0001783E 303C 00BB                  		move.w	#$BB,d0
00017842 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
00017848                            
00017848                            Obj69_Animate:
00017848 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001784E 4EB9 0000 C138             		jsr	AnimateSprite
00017854 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017858 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001785A 323C 004B                  		move.w	#$4B,d1
0001785E 343C 000C                  		move.w	#$C,d2
00017862 3602                       		move.w	d2,d3
00017864 5243                       		addq.w	#1,d3
00017866 3828 0008                  		move.w	8(a0),d4
0001786A 6100 9C56                  		bsr.w	SolidObject
0001786E 6000 992A                  		bra.w	MarkObjGone
00017872                            ; ===========================================================================
00017872                            
00017872                            Obj69_NotSolid:
00017872 0828 0003 0022             		btst	#3,$22(a0)
00017878 6700                       		beq.s	Obj69_Display
0001787A 43F8 D000                  		lea	($FFFFD000).w,a1
0001787E 08A9 0003 0022             		bclr	#3,$22(a1)
00017884 08A8 0003 0022             		bclr	#3,$22(a0)
0001788A 4228 0025                  		clr.b	$25(a0)
0001788E                            
0001788E                            Obj69_Display:
0001788E 6000 990A                  		bra.w	MarkObjGone
00017892                            ; ===========================================================================
00017892                            
00017892                            Obj69_Spinner:				; XREF: Obj69_Index
00017892 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017896 C068 0036                  		and.w	$36(a0),d0
0001789A 6600                       		bne.s	Obj69_Delay
0001789C 117C 0001 0034             		move.b	#1,$34(a0)
000178A2                            
000178A2                            Obj69_Delay:
000178A2 4A28 0034                  		tst.b	$34(a0)
000178A6 6700                       		beq.s	Obj69_Animate2
000178A8 5368 0030                  		subq.w	#1,$30(a0)
000178AC 6A00                       		bpl.s	Obj69_Animate2
000178AE 3168 0032 0030             		move.w	$32(a0),$30(a0)
000178B4 4228 0034                  		clr.b	$34(a0)
000178B8 0868 0000 001C             		bchg	#0,$1C(a0)
000178BE                            
000178BE                            Obj69_Animate2:
000178BE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000178C4 4EB9 0000 C138             		jsr	AnimateSprite
000178CA 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000178CE 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000178D0 323C 001B                  		move.w	#$1B,d1
000178D4 343C 0007                  		move.w	#7,d2
000178D8 3602                       		move.w	d2,d3
000178DA 5243                       		addq.w	#1,d3
000178DC 3828 0008                  		move.w	8(a0),d4
000178E0 6100 9BE0                  		bsr.w	SolidObject
000178E4 6000 98B4                  		bra.w	MarkObjGone
000178E8                            ; ===========================================================================
000178E8                            
000178E8                            Obj69_NotSolid2:
000178E8 0828 0003 0022             		btst	#3,$22(a0)
000178EE 6700                       		beq.s	Obj69_Display2
000178F0 43F8 D000                  		lea	($FFFFD000).w,a1
000178F4 08A9 0003 0022             		bclr	#3,$22(a1)
000178FA 08A8 0003 0022             		bclr	#3,$22(a0)
00017900 4228 0025                  		clr.b	$25(a0)
00017904                            
00017904                            Obj69_Display2:
00017904 6000 9894                  		bra.w	MarkObjGone
00017908                            ; ===========================================================================
00017908                            Ani_obj69:
00017908                            	include "_anim\obj69.asm"
00017908                            ; ---------------------------------------------------------------------------
00017908                            ; Animation script - trapdoor (SBZ)
00017908                            ; ---------------------------------------------------------------------------
00017908 0000                       		dc.w byte_158AC-Ani_obj69
0001790A 0000                       		dc.w byte_158B2-Ani_obj69
0001790C 0000                       		dc.w byte_158B8-Ani_obj69
0001790E 0000                       		dc.w byte_158CC-Ani_obj69
00017910 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017916 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001791C 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017929 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017930 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001793D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017944                            		even
00017944                            		even
00017944                            
00017944                            ; ---------------------------------------------------------------------------
00017944                            ; Sprite mappings - trapdoor (SBZ)
00017944                            ; ---------------------------------------------------------------------------
00017944                            Map_obj69:
00017944                            	include "_maps\obj69.asm"
00017944                            ; ---------------------------------------------------------------------------
00017944                            ; Sprite mappings - trapdoor (SBZ)
00017944                            ; ---------------------------------------------------------------------------
00017944 0000                       		dc.w byte_158E6-Map_obj69
00017946 0000                       		dc.w byte_158FB-Map_obj69
00017948 0000                       		dc.w byte_15924-Map_obj69
0001794A 04                         byte_158E6:	dc.b 4
0001794B F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017950 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017955 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001795A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001795F 08                         byte_158FB:	dc.b 8
00017960 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017965 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001796A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001796F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017974 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017979 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001797E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017983 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017988 04                         byte_15924:	dc.b 4
00017989 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001798E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017993 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017998 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001799E 00                         		even
0001799E 00                         		even
0001799E                            
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            ; Sprite mappings - spinning platforms (SBZ)
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            Map_obj69a:
0001799E                            	include "_maps\obj69a.asm"
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            ; Sprite mappings - spinning platforms (SBZ)
0001799E                            ; ---------------------------------------------------------------------------
0001799E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000179A2 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000179A6 0000                       		dc.w byte_15970-Map_obj69a
000179A8 02                         byte_15944:	dc.b 2
000179A9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000179AE F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000179B3 02                         byte_1594F:	dc.b 2
000179B4 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000179B9 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000179BE 02                         byte_1595A:	dc.b 2
000179BF F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000179C4 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000179C9 02                         byte_15965:	dc.b 2
000179CA F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000179CF 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000179D4 02                         byte_15970:	dc.b 2
000179D5 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000179DA 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000179E0 00                         		even
000179E0 00                         		even
000179E0                            
000179E0                            ; ===========================================================================
000179E0                            ; ---------------------------------------------------------------------------
000179E0                            ; Object 6A - ground saws and pizza cutters (SBZ)
000179E0                            ; ---------------------------------------------------------------------------
000179E0                            
000179E0                            Obj6A:					; XREF: Obj_Index
000179E0 7000                       		moveq	#0,d0
000179E2 1028 0024                  		move.b	$24(a0),d0
000179E6 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000179EA 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000179EE                            ; ===========================================================================
000179EE 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000179F0 0000                       		dc.w Obj6A_Action-Obj6A_Index
000179F2                            ; ===========================================================================
000179F2                            
000179F2                            Obj6A_Main:				; XREF: Obj6A_Index
000179F2 5428 0024                  		addq.b	#2,$24(a0)
000179F6 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000179FE 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017A04 117C 0004 0001             		move.b	#4,1(a0)
00017A0A 117C 0004 0018             		move.b	#4,$18(a0)
00017A10 117C 0020 0019             		move.b	#$20,$19(a0)
00017A16 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017A1C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017A22 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017A28 6400                       		bcc.s	Obj6A_Action
00017A2A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017A30                            
00017A30                            Obj6A_Action:				; XREF: Obj6A_Index
00017A30 7000                       		moveq	#0,d0
00017A32 1028 0028                  		move.b	$28(a0),d0
00017A36 0240 0007                  		andi.w	#7,d0
00017A3A D040                       		add.w	d0,d0
00017A3C 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017A40 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017A44 3028 003A                  		move.w	$3A(a0),d0
00017A48 0240 FF80                  		andi.w	#$FF80,d0
00017A4C 3238 F700                  		move.w	($FFFFF700).w,d1
00017A50 0441 0080                  		subi.w	#$80,d1
00017A54 0241 FF80                  		andi.w	#$FF80,d1
00017A58 9041                       		sub.w	d1,d0
00017A5A 0C40 0280                  		cmpi.w	#$280,d0
00017A5E 6200                       		bhi.s	Obj6A_Delete
00017A60 4EF9 0000 F0E4             		jmp	DisplaySprite
00017A66                            ; ===========================================================================
00017A66                            
00017A66                            Obj6A_Delete:
00017A66 4EF9 0000 F120             		jmp	DeleteObject
00017A6C                            ; ===========================================================================
00017A6C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017A70 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017A74 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017A76                            ; ===========================================================================
00017A76                            
00017A76                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017A76 4E75                       		rts	
00017A78                            ; ===========================================================================
00017A78                            
00017A78                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017A78 323C 0060                  		move.w	#$60,d1
00017A7C 7000                       		moveq	#0,d0
00017A7E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017A82 0828 0000 0022             		btst	#0,$22(a0)
00017A88 6700                       		beq.s	Obj6A_Animate01
00017A8A 4440                       		neg.w	d0
00017A8C D041                       		add.w	d1,d0
00017A8E                            
00017A8E                            Obj6A_Animate01:
00017A8E 3228 003A                  		move.w	$3A(a0),d1
00017A92 9240                       		sub.w	d0,d1
00017A94 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017A98 5328 001E                  		subq.b	#1,$1E(a0)
00017A9C 6A00                       		bpl.s	loc_15A46
00017A9E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017AA4 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017AAA                            
00017AAA                            loc_15A46:
00017AAA 4A28 0001                  		tst.b	1(a0)
00017AAE 6A00                       		bpl.s	locret_15A60
00017AB0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017AB4 0240 000F                  		andi.w	#$F,d0
00017AB8 6600                       		bne.s	locret_15A60
00017ABA 303C 00B0                  		move.w	#$B0,d0
00017ABE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017AC4                            
00017AC4                            locret_15A60:
00017AC4 4E75                       		rts	
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017AC6 323C 0030                  		move.w	#$30,d1
00017ACA 7000                       		moveq	#0,d0
00017ACC 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AD0 0828 0000 0022             		btst	#0,$22(a0)
00017AD6 6700                       		beq.s	Obj6A_Animate02
00017AD8 4440                       		neg.w	d0
00017ADA 0640 0080                  		addi.w	#$80,d0
00017ADE                            
00017ADE                            Obj6A_Animate02:
00017ADE 3228 0038                  		move.w	$38(a0),d1
00017AE2 9240                       		sub.w	d0,d1
00017AE4 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017AE8 5328 001E                  		subq.b	#1,$1E(a0)
00017AEC 6A00                       		bpl.s	loc_15A96
00017AEE 117C 0002 001E             		move.b	#2,$1E(a0)
00017AF4 0868 0000 001A             		bchg	#0,$1A(a0)
00017AFA                            
00017AFA                            loc_15A96:
00017AFA 4A28 0001                  		tst.b	1(a0)
00017AFE 6A00                       		bpl.s	locret_15AB0
00017B00 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017B04 0C00 0018                  		cmpi.b	#$18,d0
00017B08 6600                       		bne.s	locret_15AB0
00017B0A 303C 00B0                  		move.w	#$B0,d0
00017B0E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017B14                            
00017B14                            locret_15AB0:
00017B14 4E75                       		rts	
00017B16                            ; ===========================================================================
00017B16                            
00017B16                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017B16 4A28 003D                  		tst.b	$3D(a0)
00017B1A 6600                       		bne.s	Obj6A_Animate03
00017B1C 3038 D008                  		move.w	($FFFFD008).w,d0
00017B20 0440 00C0                  		subi.w	#$C0,d0
00017B24 6500                       		bcs.s	loc_15B02
00017B26 9068 0008                  		sub.w	8(a0),d0
00017B2A 6500                       		bcs.s	loc_15B02
00017B2C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B30 0440 0080                  		subi.w	#$80,d0
00017B34 B068 000C                  		cmp.w	$C(a0),d0
00017B38 6400                       		bcc.s	locret_15B04
00017B3A 0640 0100                  		addi.w	#$100,d0
00017B3E B068 000C                  		cmp.w	$C(a0),d0
00017B42 6500                       		bcs.s	locret_15B04
00017B44 117C 0001 003D             		move.b	#1,$3D(a0)
00017B4A 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017B50 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B56 117C 0002 001A             		move.b	#2,$1A(a0)
00017B5C 303C 00B0                  		move.w	#$B0,d0
00017B60 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017B66                            
00017B66                            loc_15B02:
00017B66 588F                       		addq.l	#4,sp
00017B68                            
00017B68                            locret_15B04:
00017B68 4E75                       		rts	
00017B6A                            ; ===========================================================================
00017B6A                            
00017B6A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017B6A 4EB9 0000 F0CA             		jsr	SpeedToPos
00017B70 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B76 5328 001E                  		subq.b	#1,$1E(a0)
00017B7A 6A00                       		bpl.s	locret_15B24
00017B7C 117C 0002 001E             		move.b	#2,$1E(a0)
00017B82 0868 0000 001A             		bchg	#0,$1A(a0)
00017B88                            
00017B88                            locret_15B24:
00017B88 4E75                       		rts	
00017B8A                            ; ===========================================================================
00017B8A                            
00017B8A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017B8A 4A28 003D                  		tst.b	$3D(a0)
00017B8E 6600                       		bne.s	Obj6A_Animate04
00017B90 3038 D008                  		move.w	($FFFFD008).w,d0
00017B94 0640 00E0                  		addi.w	#$E0,d0
00017B98 9068 0008                  		sub.w	8(a0),d0
00017B9C 6400                       		bcc.s	loc_15B74
00017B9E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017BA2 0440 0080                  		subi.w	#$80,d0
00017BA6 B068 000C                  		cmp.w	$C(a0),d0
00017BAA 6400                       		bcc.s	locret_15B76
00017BAC 0640 0100                  		addi.w	#$100,d0
00017BB0 B068 000C                  		cmp.w	$C(a0),d0
00017BB4 6500                       		bcs.s	locret_15B76
00017BB6 117C 0001 003D             		move.b	#1,$3D(a0)
00017BBC 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017BC2 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017BC8 117C 0002 001A             		move.b	#2,$1A(a0)
00017BCE 303C 00B0                  		move.w	#$B0,d0
00017BD2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017BD8                            
00017BD8                            loc_15B74:
00017BD8 588F                       		addq.l	#4,sp
00017BDA                            
00017BDA                            locret_15B76:
00017BDA 4E75                       		rts	
00017BDC                            ; ===========================================================================
00017BDC                            
00017BDC                            Obj6A_Animate04:
00017BDC 4EB9 0000 F0CA             		jsr	SpeedToPos
00017BE2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017BE8 5328 001E                  		subq.b	#1,$1E(a0)
00017BEC 6A00                       		bpl.s	locret_15B96
00017BEE 117C 0002 001E             		move.b	#2,$1E(a0)
00017BF4 0868 0000 001A             		bchg	#0,$1A(a0)
00017BFA                            
00017BFA                            locret_15B96:
00017BFA 4E75                       		rts	
00017BFC                            ; ===========================================================================
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            Map_obj6A:
00017BFC                            	include "_maps\obj6A.asm"
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BFC                            ; ---------------------------------------------------------------------------
00017BFC 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017C00 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017C04 07                         byte_15BA0:	dc.b 7
00017C05 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017C0A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017C0F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017C14 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C19 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C1E 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C23 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C28 07                         byte_15BC4:	dc.b 7
00017C29 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017C2E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017C33 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017C38 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C3D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C42 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C47 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C4C 04                         byte_15BE8:	dc.b 4
00017C4D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C52 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C57 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C5C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C61 04                         byte_15BFD:	dc.b 4
00017C62 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C67 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C6C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C71 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C76                            		even
00017C76                            		even
00017C76                            
00017C76                            ; ===========================================================================
00017C76                            ; ---------------------------------------------------------------------------
00017C76                            ; Object 6B - stomper (SBZ)
00017C76                            ; ---------------------------------------------------------------------------
00017C76                            
00017C76                            Obj6B:					; XREF: Obj_Index
00017C76 7000                       		moveq	#0,d0
00017C78 1028 0024                  		move.b	$24(a0),d0
00017C7C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017C80 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017C84                            ; ===========================================================================
00017C84 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017C86 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017C88                            
00017C88 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017C8C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017C90 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017C94 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017C98 8040 0005                  		dc.b  $80, $40,	  0,   5
00017C9C                            ; ===========================================================================
00017C9C                            
00017C9C                            Obj6B_Main:				; XREF: Obj6B_Index
00017C9C 5428 0024                  		addq.b	#2,$24(a0)
00017CA0 7000                       		moveq	#0,d0
00017CA2 1028 0028                  		move.b	$28(a0),d0
00017CA6 E448                       		lsr.w	#2,d0
00017CA8 0240 001C                  		andi.w	#$1C,d0
00017CAC 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017CB0 115B 0019                  		move.b	(a3)+,$19(a0)
00017CB4 115B 0016                  		move.b	(a3)+,$16(a0)
00017CB8 E448                       		lsr.w	#2,d0
00017CBA 1140 001A                  		move.b	d0,$1A(a0)
00017CBE 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017CC6 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017CCC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017CD2 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017CD4 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017CDA 6700                       		beq.s	Obj6B_SBZ3
00017CDC                            
00017CDC                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017CDC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CE0 7000                       		moveq	#0,d0
00017CE2 1028 0023                  		move.b	$23(a0),d0
00017CE6 6700                       		beq.s	Obj6B_Delete
00017CE8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017CEE                            
00017CEE                            Obj6B_Delete:
00017CEE 4EF9 0000 F120             		jmp	DeleteObject
00017CF4                            ; ===========================================================================
00017CF4                            
00017CF4                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017CF4 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017CFA 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017D00 6600                       		bne.s	Obj6B_SBZ12
00017D02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D06 7000                       		moveq	#0,d0
00017D08 1028 0023                  		move.b	$23(a0),d0
00017D0C 6700                       		beq.s	Obj6B_SBZ12
00017D0E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017D14 6700                       		beq.s	Obj6B_SBZ12
00017D16 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017D1A 60C0                       		bra.s	Obj6B_ChkGone
00017D1C                            ; ===========================================================================
00017D1C                            
00017D1C                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017D1C 0028 0004 0001             		ori.b	#4,1(a0)
00017D22 117C 0004 0018             		move.b	#4,$18(a0)
00017D28 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D2E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017D34 7000                       		moveq	#0,d0
00017D36 101B                       		move.b	(a3)+,d0
00017D38 3140 003C                  		move.w	d0,$3C(a0)
00017D3C 7000                       		moveq	#0,d0
00017D3E 1028 0028                  		move.b	$28(a0),d0
00017D42 6A00                       		bpl.s	Obj6B_Action
00017D44 0200 000F                  		andi.b	#$F,d0
00017D48 1140 003E                  		move.b	d0,$3E(a0)
00017D4C 1153 0028                  		move.b	(a3),$28(a0)
00017D50 0C13 0005                  		cmpi.b	#5,(a3)
00017D54 6600                       		bne.s	Obj6B_ChkGone2
00017D56 08E8 0004 0001             		bset	#4,1(a0)
00017D5C                            
00017D5C                            Obj6B_ChkGone2:
00017D5C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D60 7000                       		moveq	#0,d0
00017D62 1028 0023                  		move.b	$23(a0),d0
00017D66 6700                       		beq.s	Obj6B_Action
00017D68 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D6E                            
00017D6E                            Obj6B_Action:				; XREF: Obj6B_Index
00017D6E 3F28 0008                  		move.w	8(a0),-(sp)
00017D72 7000                       		moveq	#0,d0
00017D74 1028 0028                  		move.b	$28(a0),d0
00017D78 0240 000F                  		andi.w	#$F,d0
00017D7C D040                       		add.w	d0,d0
00017D7E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017D82 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017D86 381F                       		move.w	(sp)+,d4
00017D88 4A28 0001                  		tst.b	1(a0)
00017D8C 6A00                       		bpl.s	Obj6B_ChkDel
00017D8E 7200                       		moveq	#0,d1
00017D90 1228 0019                  		move.b	$19(a0),d1
00017D94 0641 000B                  		addi.w	#$B,d1
00017D98 7400                       		moveq	#0,d2
00017D9A 1428 0016                  		move.b	$16(a0),d2
00017D9E 3602                       		move.w	d2,d3
00017DA0 5243                       		addq.w	#1,d3
00017DA2 6100 971E                  		bsr.w	SolidObject
00017DA6                            
00017DA6                            Obj6B_ChkDel:
00017DA6 3028 0034                  		move.w	$34(a0),d0
00017DAA 0240 FF80                  		andi.w	#$FF80,d0
00017DAE 3238 F700                  		move.w	($FFFFF700).w,d1
00017DB2 0441 0080                  		subi.w	#$80,d1
00017DB6 0241 FF80                  		andi.w	#$FF80,d1
00017DBA 9041                       		sub.w	d1,d0
00017DBC 0C40 0280                  		cmpi.w	#$280,d0
00017DC0 6200                       		bhi.s	loc_15D64
00017DC2 4EF9 0000 F0E4             		jmp	DisplaySprite
00017DC8                            ; ===========================================================================
00017DC8                            
00017DC8                            loc_15D64:
00017DC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017DCE 6600                       		bne.s	Obj6B_Delete2
00017DD0 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017DD4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017DD8 7000                       		moveq	#0,d0
00017DDA 1028 0023                  		move.b	$23(a0),d0
00017DDE 6700                       		beq.s	Obj6B_Delete2
00017DE0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017DE6                            
00017DE6                            Obj6B_Delete2:
00017DE6 4EF9 0000 F120             		jmp	DeleteObject
00017DEC                            ; ===========================================================================
00017DEC 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017DF0 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017DF4 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017DF8                            ; ===========================================================================
00017DF8                            
00017DF8                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017DF8 4E75                       		rts	
00017DFA                            ; ===========================================================================
00017DFA                            
00017DFA                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017DFA 4A28 0038                  		tst.b	$38(a0)
00017DFE 6600                       		bne.s	loc_15DB4
00017E00 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017E04 7000                       		moveq	#0,d0
00017E06 1028 003E                  		move.b	$3E(a0),d0
00017E0A 0832 0000 0000             		btst	#0,(a2,d0.w)
00017E10 6700                       		beq.s	loc_15DC2
00017E12 117C 0001 0038             		move.b	#1,$38(a0)
00017E18                            
00017E18                            loc_15DB4:
00017E18 3028 003C                  		move.w	$3C(a0),d0
00017E1C B068 003A                  		cmp.w	$3A(a0),d0
00017E20 6700                       		beq.s	loc_15DE0
00017E22 5468 003A                  		addq.w	#2,$3A(a0)
00017E26                            
00017E26                            loc_15DC2:
00017E26 3028 003A                  		move.w	$3A(a0),d0
00017E2A 0828 0000 0022             		btst	#0,$22(a0)
00017E30 6700                       		beq.s	loc_15DD4
00017E32 4440                       		neg.w	d0
00017E34 0640 0080                  		addi.w	#$80,d0
00017E38                            
00017E38                            loc_15DD4:
00017E38 3228 0034                  		move.w	$34(a0),d1
00017E3C 9240                       		sub.w	d0,d1
00017E3E 3141 0008                  		move.w	d1,8(a0)
00017E42 4E75                       		rts	
00017E44                            ; ===========================================================================
00017E44                            
00017E44                            loc_15DE0:
00017E44 5228 0028                  		addq.b	#1,$28(a0)
00017E48 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017E4E 4228 0038                  		clr.b	$38(a0)
00017E52 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E56 7000                       		moveq	#0,d0
00017E58 1028 0023                  		move.b	$23(a0),d0
00017E5C 67C8                       		beq.s	loc_15DC2
00017E5E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017E64 60C0                       		bra.s	loc_15DC2
00017E66                            ; ===========================================================================
00017E66                            
00017E66                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017E66 4A28 0038                  		tst.b	$38(a0)
00017E6A 6600                       		bne.s	loc_15E14
00017E6C 5368 0036                  		subq.w	#1,$36(a0)
00017E70 6600                       		bne.s	loc_15E1E
00017E72 117C 0001 0038             		move.b	#1,$38(a0)
00017E78                            
00017E78                            loc_15E14:
00017E78 4A68 003A                  		tst.w	$3A(a0)
00017E7C 6700                       		beq.s	loc_15E3C
00017E7E 5568 003A                  		subq.w	#2,$3A(a0)
00017E82                            
00017E82                            loc_15E1E:
00017E82 3028 003A                  		move.w	$3A(a0),d0
00017E86 0828 0000 0022             		btst	#0,$22(a0)
00017E8C 6700                       		beq.s	loc_15E30
00017E8E 4440                       		neg.w	d0
00017E90 0640 0080                  		addi.w	#$80,d0
00017E94                            
00017E94                            loc_15E30:
00017E94 3228 0034                  		move.w	$34(a0),d1
00017E98 9240                       		sub.w	d0,d1
00017E9A 3141 0008                  		move.w	d1,8(a0)
00017E9E 4E75                       		rts	
00017EA0                            ; ===========================================================================
00017EA0                            
00017EA0                            loc_15E3C:
00017EA0 5328 0028                  		subq.b	#1,$28(a0)
00017EA4 4228 0038                  		clr.b	$38(a0)
00017EA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017EAC 7000                       		moveq	#0,d0
00017EAE 1028 0023                  		move.b	$23(a0),d0
00017EB2 67CE                       		beq.s	loc_15E1E
00017EB4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017EBA 60C6                       		bra.s	loc_15E1E
00017EBC                            ; ===========================================================================
00017EBC                            
00017EBC                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017EBC 4A28 0038                  		tst.b	$38(a0)
00017EC0 6600                       		bne.s	loc_15E7C
00017EC2 4A68 003A                  		tst.w	$3A(a0)
00017EC6 6700                       		beq.s	loc_15E6A
00017EC8 5368 003A                  		subq.w	#1,$3A(a0)
00017ECC 6000                       		bra.s	loc_15E8E
00017ECE                            ; ===========================================================================
00017ECE                            
00017ECE                            loc_15E6A:
00017ECE 5368 0036                  		subq.w	#1,$36(a0)
00017ED2 6A00                       		bpl.s	loc_15E8E
00017ED4 317C 003C 0036             		move.w	#$3C,$36(a0)
00017EDA 117C 0001 0038             		move.b	#1,$38(a0)
00017EE0                            
00017EE0                            loc_15E7C:
00017EE0 5068 003A                  		addq.w	#8,$3A(a0)
00017EE4 3028 003A                  		move.w	$3A(a0),d0
00017EE8 B068 003C                  		cmp.w	$3C(a0),d0
00017EEC 6600                       		bne.s	loc_15E8E
00017EEE 4228 0038                  		clr.b	$38(a0)
00017EF2                            
00017EF2                            loc_15E8E:
00017EF2 3028 003A                  		move.w	$3A(a0),d0
00017EF6 0828 0000 0022             		btst	#0,$22(a0)
00017EFC 6700                       		beq.s	loc_15EA0
00017EFE 4440                       		neg.w	d0
00017F00 0640 0038                  		addi.w	#$38,d0
00017F04                            
00017F04                            loc_15EA0:
00017F04 3228 0030                  		move.w	$30(a0),d1
00017F08 D240                       		add.w	d0,d1
00017F0A 3141 000C                  		move.w	d1,$C(a0)
00017F0E 4E75                       		rts	
00017F10                            ; ===========================================================================
00017F10                            
00017F10                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017F10 4A28 0038                  		tst.b	$38(a0)
00017F14 6600                       		bne.s	loc_15ED0
00017F16 4A68 003A                  		tst.w	$3A(a0)
00017F1A 6700                       		beq.s	loc_15EBE
00017F1C 5168 003A                  		subq.w	#8,$3A(a0)
00017F20 6000                       		bra.s	loc_15EF0
00017F22                            ; ===========================================================================
00017F22                            
00017F22                            loc_15EBE:
00017F22 5368 0036                  		subq.w	#1,$36(a0)
00017F26 6A00                       		bpl.s	loc_15EF0
00017F28 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F2E 117C 0001 0038             		move.b	#1,$38(a0)
00017F34                            
00017F34                            loc_15ED0:
00017F34 3028 003A                  		move.w	$3A(a0),d0
00017F38 B068 003C                  		cmp.w	$3C(a0),d0
00017F3C 6700                       		beq.s	loc_15EE0
00017F3E 5068 003A                  		addq.w	#8,$3A(a0)
00017F42 6000                       		bra.s	loc_15EF0
00017F44                            ; ===========================================================================
00017F44                            
00017F44                            loc_15EE0:
00017F44 5368 0036                  		subq.w	#1,$36(a0)
00017F48 6A00                       		bpl.s	loc_15EF0
00017F4A 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F50 4228 0038                  		clr.b	$38(a0)
00017F54                            
00017F54                            loc_15EF0:
00017F54 3028 003A                  		move.w	$3A(a0),d0
00017F58 0828 0000 0022             		btst	#0,$22(a0)
00017F5E 6700                       		beq.s	loc_15F02
00017F60 4440                       		neg.w	d0
00017F62 0640 0038                  		addi.w	#$38,d0
00017F66                            
00017F66                            loc_15F02:
00017F66 3228 0030                  		move.w	$30(a0),d1
00017F6A D240                       		add.w	d0,d1
00017F6C 3141 000C                  		move.w	d1,$C(a0)
00017F70 4E75                       		rts	
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017F72 4A28 0038                  		tst.b	$38(a0)
00017F76 6600                       		bne.s	loc_15F3E
00017F78 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017F7C 7000                       		moveq	#0,d0
00017F7E 1028 003E                  		move.b	$3E(a0),d0
00017F82 0832 0000 0000             		btst	#0,(a2,d0.w)
00017F88 6700                       		beq.s	locret_15F5C
00017F8A 117C 0001 0038             		move.b	#1,$38(a0)
00017F90 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017F94 7000                       		moveq	#0,d0
00017F96 1028 0023                  		move.b	$23(a0),d0
00017F9A 6700                       		beq.s	loc_15F3E
00017F9C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017FA2                            
00017FA2                            loc_15F3E:
00017FA2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017FAA 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017FB2 3168 0008 0034             		move.w	8(a0),$34(a0)
00017FB8 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017FBE 6700                       		beq.s	loc_15F5E
00017FC0                            
00017FC0                            locret_15F5C:
00017FC0 4E75                       		rts	
00017FC2                            ; ===========================================================================
00017FC2                            
00017FC2                            loc_15F5E:
00017FC2 4228 0028                  		clr.b	$28(a0)
00017FC6 4228 0038                  		clr.b	$38(a0)
00017FCA 4E75                       		rts	
00017FCC                            ; ===========================================================================
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            Map_obj6B:
00017FCC                            	include "_maps\obj6B.asm"
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017FD0 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017FD4 0000                       		dc.w byte_15FB0-Map_obj6B
00017FD6 04                         byte_15F72:	dc.b 4
00017FD7 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017FDC F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017FE1 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017FE6 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017FEB 08                         byte_15F87:	dc.b 8
00017FEC E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017FF1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017FF6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017FFB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018000 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018005 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001800A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001800F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018014 0E                         byte_15FB0:	dc.b $E
00018015 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001801A C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001801F C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018024 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018029 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001802E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018033 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018038 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001803D E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018042 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018047 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001804C 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018051 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018056 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001805C 00                         		even
0001805C 00                         		even
0001805C                            
0001805C                            ; ===========================================================================
0001805C                            ; ---------------------------------------------------------------------------
0001805C                            ; Object 6C - vanishing	platforms (SBZ)
0001805C                            ; ---------------------------------------------------------------------------
0001805C                            
0001805C                            Obj6C:					; XREF: Obj_Index
0001805C 7000                       		moveq	#0,d0
0001805E 1028 0024                  		move.b	$24(a0),d0
00018062 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00018066 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001806A                            ; ===========================================================================
0001806A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001806C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001806E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018070 0000                       		dc.w loc_16068-Obj6C_Index
00018072                            ; ===========================================================================
00018072                            
00018072                            Obj6C_Main:				; XREF: Obj6C_Index
00018072 5C28 0024                  		addq.b	#6,$24(a0)
00018076 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001807E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018084 0028 0004 0001             		ori.b	#4,1(a0)
0001808A 117C 0010 0019             		move.b	#$10,$19(a0)
00018090 117C 0004 0018             		move.b	#4,$18(a0)
00018096 7000                       		moveq	#0,d0
00018098 1028 0028                  		move.b	$28(a0),d0	; get object type
0001809C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000180A0 5240                       		addq.w	#1,d0		; add 1
000180A2 EF48                       		lsl.w	#7,d0		; multiply by $80
000180A4 3200                       		move.w	d0,d1
000180A6 5340                       		subq.w	#1,d0
000180A8 3140 0030                  		move.w	d0,$30(a0)
000180AC 3140 0032                  		move.w	d0,$32(a0)
000180B0 7000                       		moveq	#0,d0
000180B2 1028 0028                  		move.b	$28(a0),d0	; get object type
000180B6 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000180BA 0641 0080                  		addi.w	#$80,d1
000180BE C0C1                       		mulu.w	d1,d0
000180C0 E088                       		lsr.l	#8,d0
000180C2 3140 0036                  		move.w	d0,$36(a0)
000180C6 5341                       		subq.w	#1,d1
000180C8 3141 0038                  		move.w	d1,$38(a0)
000180CC                            
000180CC                            loc_16068:				; XREF: Obj6C_Index
000180CC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000180D0 9068 0036                  		sub.w	$36(a0),d0
000180D4 C068 0038                  		and.w	$38(a0),d0
000180D8 6600                       		bne.s	Obj6C_Animate
000180DA 5928 0024                  		subq.b	#4,$24(a0)
000180DE 6000                       		bra.s	Obj6C_Vanish
000180E0                            ; ===========================================================================
000180E0                            
000180E0                            Obj6C_Animate:
000180E0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000180E6 4EB9 0000 C138             		jsr	AnimateSprite
000180EC 6000 90AC                  		bra.w	MarkObjGone
000180F0                            ; ===========================================================================
000180F0                            
000180F0                            Obj6C_Vanish:				; XREF: Obj6C_Index
000180F0 5368 0030                  		subq.w	#1,$30(a0)
000180F4 6A00                       		bpl.s	loc_160AA
000180F6 317C 007F 0030             		move.w	#127,$30(a0)
000180FC 4A28 001C                  		tst.b	$1C(a0)
00018100 6700                       		beq.s	loc_160A4
00018102 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018108                            
00018108                            loc_160A4:
00018108 0868 0000 001C             		bchg	#0,$1C(a0)
0001810E                            
0001810E                            loc_160AA:
0001810E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018114 4EB9 0000 C138             		jsr	AnimateSprite
0001811A 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00018120 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00018122 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00018128 6600                       		bne.s	loc_160D6
0001812A 7200                       		moveq	#0,d1
0001812C 1228 0019                  		move.b	$19(a0),d1
00018130 4EB9 0000 8E42             		jsr	(PlatformObject).l
00018136 6000 9062                  		bra.w	MarkObjGone
0001813A                            ; ===========================================================================
0001813A                            
0001813A                            loc_160D6:
0001813A 7200                       		moveq	#0,d1
0001813C 1228 0019                  		move.b	$19(a0),d1
00018140 4EB9 0000 8FB6             		jsr	(ExitPlatform).l
00018146 3428 0008                  		move.w	8(a0),d2
0001814A 4EB9 0000 9520             		jsr	(MvSonicOnPtfm2).l
00018150 6000 9048                  		bra.w	MarkObjGone
00018154                            ; ===========================================================================
00018154                            
00018154                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018154 0828 0003 0022             		btst	#3,$22(a0)
0001815A 6700                       		beq.s	Obj6C_Display
0001815C 43F8 D000                  		lea	($FFFFD000).w,a1
00018160 08A9 0003 0022             		bclr	#3,$22(a1)
00018166 08A8 0003 0022             		bclr	#3,$22(a0)
0001816C 117C 0002 0024             		move.b	#2,$24(a0)
00018172 4228 0025                  		clr.b	$25(a0)
00018176                            
00018176                            Obj6C_Display:
00018176 6000 9022                  		bra.w	MarkObjGone
0001817A                            ; ===========================================================================
0001817A                            Ani_obj6C:
0001817A                            	include "_anim\obj6C.asm"
0001817A                            ; ---------------------------------------------------------------------------
0001817A                            ; Animation script - vanishing platforms (SBZ)
0001817A                            ; ---------------------------------------------------------------------------
0001817A 0000                       		dc.w byte_1611A-Ani_obj6C
0001817C 0000                       		dc.w byte_16122-Ani_obj6C
0001817E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00018186 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001818E                            		even
0001818E                            		even
0001818E                            
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            Map_obj6C:
0001818E                            	include "_maps\obj6C.asm"
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001818E                            ; ---------------------------------------------------------------------------
0001818E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018192 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00018196 01                         byte_16132:	dc.b 1
00018197 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001819C 01                         byte_16138:	dc.b 1
0001819D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000181A2 01                         byte_1613E:	dc.b 1
000181A3 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000181A8 00                         byte_16144:	dc.b 0
000181AA 00                         		even
000181AA 00                         		even
000181AA                            
000181AA                            ; ===========================================================================
000181AA                            ; ---------------------------------------------------------------------------
000181AA                            ; Object 6E - electrocution orbs (SBZ)
000181AA                            ; ---------------------------------------------------------------------------
000181AA                            
000181AA                            Obj6E:					; XREF: Obj_Index
000181AA 7000                       		moveq	#0,d0
000181AC 1028 0024                  		move.b	$24(a0),d0
000181B0 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000181B4 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000181B8                            ; ===========================================================================
000181B8 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000181BA 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000181BC                            ; ===========================================================================
000181BC                            
000181BC                            Obj6E_Main:				; XREF: Obj6E_Index
000181BC 5428 0024                  		addq.b	#2,$24(a0)
000181C0 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000181C8 317C 047E 0002             		move.w	#$47E,2(a0)
000181CE 0028 0004 0001             		ori.b	#4,1(a0)
000181D4 117C 0028 0019             		move.b	#$28,$19(a0)
000181DA 7000                       		moveq	#0,d0
000181DC 1028 0028                  		move.b	$28(a0),d0	; read object type
000181E0 E948                       		lsl.w	#4,d0		; multiply by $10
000181E2 5340                       		subq.w	#1,d0
000181E4 3140 0034                  		move.w	d0,$34(a0)
000181E8                            
000181E8                            Obj6E_Shock:				; XREF: Obj6E_Index
000181E8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000181EC C068 0034                  		and.w	$34(a0),d0
000181F0 6600                       		bne.s	Obj6E_Animate
000181F2 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000181F8 4A28 0001                  		tst.b	1(a0)
000181FC 6A00                       		bpl.s	Obj6E_Animate
000181FE 303C 00B1                  		move.w	#$B1,d0
00018202 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play electricity sound
00018208                            
00018208                            Obj6E_Animate:
00018208 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001820E 4EB9 0000 C138             		jsr	AnimateSprite
00018214 117C 0000 0020             		move.b	#0,$20(a0)
0001821A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00018220 6600                       		bne.s	Obj6E_Display	; if not, branch
00018222 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00018228                            
00018228                            Obj6E_Display:
00018228 6000 8F70                  		bra.w	MarkObjGone
0001822C                            ; ===========================================================================
0001822C                            Ani_obj6E:
0001822C                            	include "_anim\obj6E.asm"
0001822C                            ; ---------------------------------------------------------------------------
0001822C                            ; Animation script - electrocution orbs (SBZ)
0001822C                            ; ---------------------------------------------------------------------------
0001822C 0000                       		dc.w byte_161CC-Ani_obj6E
0001822E 0000                       		dc.w byte_161D0-Ani_obj6E
00018230 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00018234 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018244                            		even
00018244                            		even
00018244                            
00018244                            ; ---------------------------------------------------------------------------
00018244                            ; Sprite mappings - electrocution orbs (SBZ)
00018244                            ; ---------------------------------------------------------------------------
00018244                            Map_obj6E:
00018244                            	include "_maps\obj6E.asm"
00018244                            ; ---------------------------------------------------------------------------
00018244                            ; Sprite mappings - electrocution orbs (SBZ)
00018244                            ; ---------------------------------------------------------------------------
00018244 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00018248 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001824C 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018250 02                         byte_161EC:	dc.b 2
00018251 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018256 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001825B 03                         byte_161F7:	dc.b 3
0001825C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018261 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018266 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001826B 05                         byte_16207:	dc.b 5
0001826C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018271 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018276 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001827B F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018280 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018285 04                         byte_16221:	dc.b 4
00018286 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001828B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018290 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018295 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001829A 06                         byte_16236:	dc.b 6
0001829B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182A0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182A5 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000182AA F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000182AF F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000182B4 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000182B9 04                         byte_16255:	dc.b 4
000182BA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182BF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182C4 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000182C9 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000182CE                            		even
000182CE                            		even
000182CE                            
000182CE                            ; ===========================================================================
000182CE                            ; ---------------------------------------------------------------------------
000182CE                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000182CE                            ; ---------------------------------------------------------------------------
000182CE                            
000182CE                            Obj6F:					; XREF: Obj_Index
000182CE 7000                       		moveq	#0,d0
000182D0 1028 0024                  		move.b	$24(a0),d0
000182D4 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000182D8 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000182DC 3028 0030                  		move.w	$30(a0),d0
000182E0 0240 FF80                  		andi.w	#$FF80,d0
000182E4 3238 F700                  		move.w	($FFFFF700).w,d1
000182E8 0441 0080                  		subi.w	#$80,d1
000182EC 0241 FF80                  		andi.w	#$FF80,d1
000182F0 9041                       		sub.w	d1,d0
000182F2 0C40 0280                  		cmpi.w	#$280,d0
000182F6 6200                       		bhi.s	loc_1629A
000182F8                            
000182F8                            Obj6F_Display:
000182F8 4EF9 0000 F0E4             		jmp	DisplaySprite
000182FE                            ; ===========================================================================
000182FE                            
000182FE                            loc_1629A:
000182FE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00018304 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00018306 0C40 FF80                  		cmpi.w	#-$80,d0
0001830A 64EC                       		bcc.s	Obj6F_Display
0001830C                            
0001830C                            Obj6F_Act1or2:
0001830C 1028 002F                  		move.b	$2F(a0),d0
00018310 6A00                       		bpl.s	Obj6F_Delete
00018312 0240 007F                  		andi.w	#$7F,d0
00018316 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001831A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018320                            
00018320                            Obj6F_Delete:
00018320 4EF9 0000 F120             		jmp	DeleteObject
00018326                            ; ===========================================================================
00018326 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00018328 0000                       		dc.w loc_163D8-Obj6F_Index
0001832A                            ; ===========================================================================
0001832A                            
0001832A                            Obj6F_Main:				; XREF: Obj6F_Index
0001832A 1028 0028                  		move.b	$28(a0),d0
0001832E 6B00 0000                  		bmi.w	loc_16380
00018332 5428 0024                  		addq.b	#2,$24(a0)
00018336 217C 0001 799E 0004        		move.l	#Map_obj69a,4(a0)
0001833E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018344 117C 0010 0019             		move.b	#$10,$19(a0)
0001834A 0028 0004 0001             		ori.b	#4,1(a0)
00018350 117C 0004 0018             		move.b	#4,$18(a0)
00018356 7000                       		moveq	#0,d0
00018358 1028 0028                  		move.b	$28(a0),d0
0001835C 3200                       		move.w	d0,d1
0001835E E648                       		lsr.w	#3,d0
00018360 0240 001E                  		andi.w	#$1E,d0
00018364 45FA 0000                  		lea	off_164A6(pc),a2
00018368 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001836C 315A 0038                  		move.w	(a2)+,$38(a0)
00018370 315A 0030                  		move.w	(a2)+,$30(a0)
00018374 214A 003C                  		move.l	a2,$3C(a0)
00018378 0241 000F                  		andi.w	#$F,d1
0001837C E549                       		lsl.w	#2,d1
0001837E 1141 0038                  		move.b	d1,$38(a0)
00018382 117C 0004 003A             		move.b	#4,$3A(a0)
00018388 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001838C 6700                       		beq.s	loc_16356
0001838E 117C 0001 003B             		move.b	#1,$3B(a0)
00018394 4428 003A                  		neg.b	$3A(a0)
00018398 7200                       		moveq	#0,d1
0001839A 1228 0038                  		move.b	$38(a0),d1
0001839E D228 003A                  		add.b	$3A(a0),d1
000183A2 B228 0039                  		cmp.b	$39(a0),d1
000183A6 6500                       		bcs.s	loc_16352
000183A8 1001                       		move.b	d1,d0
000183AA 7200                       		moveq	#0,d1
000183AC 4A00                       		tst.b	d0
000183AE 6A00                       		bpl.s	loc_16352
000183B0 1228 0039                  		move.b	$39(a0),d1
000183B4 5901                       		subq.b	#4,d1
000183B6                            
000183B6                            loc_16352:
000183B6 1141 0038                  		move.b	d1,$38(a0)
000183BA                            
000183BA                            loc_16356:
000183BA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000183C0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000183C6 4A41                       		tst.w	d1
000183C8 6600                       		bne.s	loc_1636C
000183CA 117C 0001 001C             		move.b	#1,$1C(a0)
000183D0                            
000183D0                            loc_1636C:
000183D0 0C41 0008                  		cmpi.w	#8,d1
000183D4 6600                       		bne.s	loc_16378
000183D6 117C 0000 001C             		move.b	#0,$1C(a0)
000183DC                            
000183DC                            loc_16378:
000183DC 6100 BC6E                  		bsr.w	Obj63_ChangeDir
000183E0 6000 0000                  		bra.w	loc_163D8
000183E4                            ; ===========================================================================
000183E4                            
000183E4                            loc_16380:				; XREF: Obj6F_Main
000183E4 1140 002F                  		move.b	d0,$2F(a0)
000183E8 0240 007F                  		andi.w	#$7F,d0
000183EC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000183F0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000183F6 6700                       		beq.s	loc_1639A
000183F8 4EF9 0000 F120             		jmp	DeleteObject
000183FE                            ; ===========================================================================
000183FE                            
000183FE                            loc_1639A:
000183FE D040                       		add.w	d0,d0
00018400 0240 001E                  		andi.w	#$1E,d0
00018404 0640 0080                  		addi.w	#$80,d0
00018408 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001840E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018412 321A                       		move.w	(a2)+,d1
00018414 2248                       		movea.l	a0,a1
00018416 6000                       		bra.s	Obj6F_LoadPform
00018418                            ; ===========================================================================
00018418                            
00018418                            Obj6F_Loop:
00018418 4EB9 0000 F578             		jsr	SingleObjLoad
0001841E 6600                       		bne.s	loc_163D0
00018420                            
00018420                            Obj6F_LoadPform:			; XREF: loc_1639A
00018420 12BC 006F                  		move.b	#$6F,0(a1)
00018424 335A 0008                  		move.w	(a2)+,8(a1)
00018428 335A 000C                  		move.w	(a2)+,$C(a1)
0001842C 301A                       		move.w	(a2)+,d0
0001842E 1340 0028                  		move.b	d0,$28(a1)
00018432                            
00018432                            loc_163D0:
00018432 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00018436                            
00018436 588F                       		addq.l	#4,sp
00018438 4E75                       		rts	
0001843A                            ; ===========================================================================
0001843A                            
0001843A                            loc_163D8:				; XREF: Obj6F_Index
0001843A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018440 4EB9 0000 C138             		jsr	AnimateSprite
00018446 4A28 001A                  		tst.b	$1A(a0)
0001844A 6600                       		bne.s	loc_16404
0001844C 3F28 0008                  		move.w	8(a0),-(sp)
00018450 6100 0000                  		bsr.w	loc_16424
00018454 323C 001B                  		move.w	#$1B,d1
00018458 343C 0007                  		move.w	#7,d2
0001845C 3602                       		move.w	d2,d3
0001845E 5243                       		addq.w	#1,d3
00018460 381F                       		move.w	(sp)+,d4
00018462 6000 905E                  		bra.w	SolidObject
00018466                            ; ===========================================================================
00018466                            
00018466                            loc_16404:
00018466 0828 0003 0022             		btst	#3,$22(a0)
0001846C 6700                       		beq.s	loc_16420
0001846E 43F8 D000                  		lea	($FFFFD000).w,a1
00018472 08A9 0003 0022             		bclr	#3,$22(a1)
00018478 08A8 0003 0022             		bclr	#3,$22(a0)
0001847E 4228 0025                  		clr.b	$25(a0)
00018482                            
00018482                            loc_16420:
00018482 6000 0002                  		bra.w	*+4
00018486                            
00018486                            loc_16424:
00018486 3028 0008                  		move.w	8(a0),d0
0001848A B068 0034                  		cmp.w	$34(a0),d0
0001848E 6600                       		bne.s	loc_16484
00018490 3028 000C                  		move.w	$C(a0),d0
00018494 B068 0036                  		cmp.w	$36(a0),d0
00018498 6600                       		bne.s	loc_16484
0001849A 7200                       		moveq	#0,d1
0001849C 1228 0038                  		move.b	$38(a0),d1
000184A0 D228 003A                  		add.b	$3A(a0),d1
000184A4 B228 0039                  		cmp.b	$39(a0),d1
000184A8 6500                       		bcs.s	loc_16456
000184AA 1001                       		move.b	d1,d0
000184AC 7200                       		moveq	#0,d1
000184AE 4A00                       		tst.b	d0
000184B0 6A00                       		bpl.s	loc_16456
000184B2 1228 0039                  		move.b	$39(a0),d1
000184B6 5901                       		subq.b	#4,d1
000184B8                            
000184B8                            loc_16456:
000184B8 1141 0038                  		move.b	d1,$38(a0)
000184BC 2268 003C                  		movea.l	$3C(a0),a1
000184C0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000184C6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000184CC 4A41                       		tst.w	d1
000184CE 6600                       		bne.s	loc_16474
000184D0 117C 0001 001C             		move.b	#1,$1C(a0)
000184D6                            
000184D6                            loc_16474:
000184D6 0C41 0008                  		cmpi.w	#8,d1
000184DA 6600                       		bne.s	loc_16480
000184DC 117C 0000 001C             		move.b	#0,$1C(a0)
000184E2                            
000184E2                            loc_16480:
000184E2 6100 BB68                  		bsr.w	Obj63_ChangeDir
000184E6                            
000184E6                            loc_16484:
000184E6 4EF9 0000 F0CA             		jmp	SpeedToPos
000184EC                            ; ===========================================================================
000184EC                            Ani_obj6F:
000184EC                            	include "_anim\obj6F.asm"
000184EC                            ; ---------------------------------------------------------------------------
000184EC                            ; Animation script - platform on conveyor belt (SBZ)
000184EC                            ; ---------------------------------------------------------------------------
000184EC 0000                       		dc.w byte_1648E-Ani_obj6F
000184EE 0000                       		dc.w byte_164A2-Ani_obj6F
000184F0 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000184FD 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00018504 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00018508 00                         		even
00018508 00                         		even
00018508                            
00018508 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001850E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00018514 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00018528 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001853C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018550 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018564 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018578 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001858C                            ; ===========================================================================
0001858C                            ; ---------------------------------------------------------------------------
0001858C                            ; Object 70 - large girder block (SBZ)
0001858C                            ; ---------------------------------------------------------------------------
0001858C                            
0001858C                            Obj70:					; XREF: Obj_Index
0001858C 7000                       		moveq	#0,d0
0001858E 1028 0024                  		move.b	$24(a0),d0
00018592 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018596 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001859A                            ; ===========================================================================
0001859A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001859C 0000                       		dc.w Obj70_Action-Obj70_Index
0001859E                            ; ===========================================================================
0001859E                            
0001859E                            Obj70_Main:				; XREF: Obj70_Index
0001859E 5428 0024                  		addq.b	#2,$24(a0)
000185A2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000185AA 317C 42F0 0002             		move.w	#$42F0,2(a0)
000185B0 0028 0004 0001             		ori.b	#4,1(a0)
000185B6 117C 0004 0018             		move.b	#4,$18(a0)
000185BC 117C 0060 0019             		move.b	#$60,$19(a0)
000185C2 117C 0018 0016             		move.b	#$18,$16(a0)
000185C8 3168 0008 0032             		move.w	8(a0),$32(a0)
000185CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000185D4 6100 0000                  		bsr.w	Obj70_Move2
000185D8                            
000185D8                            Obj70_Action:				; XREF: Obj70_Index
000185D8 3F28 0008                  		move.w	8(a0),-(sp)
000185DC 4A68 003A                  		tst.w	$3A(a0)
000185E0 6700                       		beq.s	Obj70_Move
000185E2 5368 003A                  		subq.w	#1,$3A(a0)
000185E6 6600                       		bne.s	Obj70_Solid
000185E8                            
000185E8                            Obj70_Move:
000185E8 4EB9 0000 F0CA             		jsr	SpeedToPos
000185EE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000185F2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000185F4 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000185F8                            
000185F8                            Obj70_Solid:
000185F8 381F                       		move.w	(sp)+,d4
000185FA 4A28 0001                  		tst.b	1(a0)
000185FE 6A00                       		bpl.s	Obj70_ChkDel
00018600 7200                       		moveq	#0,d1
00018602 1228 0019                  		move.b	$19(a0),d1
00018606 0641 000B                  		addi.w	#$B,d1
0001860A 7400                       		moveq	#0,d2
0001860C 1428 0016                  		move.b	$16(a0),d2
00018610 3602                       		move.w	d2,d3
00018612 5243                       		addq.w	#1,d3
00018614 6100 8EAC                  		bsr.w	SolidObject
00018618                            
00018618                            Obj70_ChkDel:
00018618 3028 0032                  		move.w	$32(a0),d0
0001861C 0240 FF80                  		andi.w	#$FF80,d0
00018620 3238 F700                  		move.w	($FFFFF700).w,d1
00018624 0441 0080                  		subi.w	#$80,d1
00018628 0241 FF80                  		andi.w	#$FF80,d1
0001862C 9041                       		sub.w	d1,d0
0001862E 0C40 0280                  		cmpi.w	#$280,d0
00018632 6200                       		bhi.s	Obj70_Delete
00018634 4EF9 0000 F0E4             		jmp	DisplaySprite
0001863A                            ; ===========================================================================
0001863A                            
0001863A                            Obj70_Delete:
0001863A 4EF9 0000 F120             		jmp	DeleteObject
00018640                            ; ===========================================================================
00018640                            
00018640                            Obj70_Move2:				; XREF: Obj70_Main
00018640 1028 0038                  		move.b	$38(a0),d0
00018644 0240 0018                  		andi.w	#$18,d0
00018648 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001864E 43F1 0000                  		lea	(a1,d0.w),a1
00018652 3159 0010                  		move.w	(a1)+,$10(a0)
00018656 3159 0012                  		move.w	(a1)+,$12(a0)
0001865A 3159 0034                  		move.w	(a1)+,$34(a0)
0001865E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018662 317C 0007 003A             		move.w	#7,$3A(a0)
00018668 4E75                       		rts	
0001866A                            ; ===========================================================================
0001866A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018672 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001867A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018682 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001868A                            ; ---------------------------------------------------------------------------
0001868A                            ; Sprite mappings - large girder block (SBZ)
0001868A                            ; ---------------------------------------------------------------------------
0001868A                            Map_obj70:
0001868A                            	include "_maps\obj70.asm"
0001868A                            ; ---------------------------------------------------------------------------
0001868A                            ; Sprite mappings - large girder block (SBZ)
0001868A                            ; ---------------------------------------------------------------------------
0001868A 0000                       		dc.w byte_1662A-Map_obj70
0001868C 0C                         byte_1662A:	dc.b $C
0001868D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018692 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018697 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001869C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000186A1 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000186A6 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000186AB E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000186B0 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000186B5 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000186BA 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000186BF E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000186C4 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000186CA 00                         		even
000186CA 00                         		even
000186CA                            
000186CA                            ; ===========================================================================
000186CA                            ; ---------------------------------------------------------------------------
000186CA                            ; Object 72 - teleporter (SBZ)
000186CA                            ; ---------------------------------------------------------------------------
000186CA                            
000186CA                            Obj72:					; XREF: Obj_Index
000186CA 7000                       		moveq	#0,d0
000186CC 1028 0024                  		move.b	$24(a0),d0
000186D0 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000186D4 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000186D8 3028 0008                  		move.w	8(a0),d0
000186DC 0240 FF80                  		andi.w	#$FF80,d0
000186E0 3238 F700                  		move.w	($FFFFF700).w,d1
000186E4 0441 0080                  		subi.w	#$80,d1
000186E8 0241 FF80                  		andi.w	#$FF80,d1
000186EC 9041                       		sub.w	d1,d0
000186EE 0C40 0280                  		cmpi.w	#$280,d0
000186F2 6200                       		bhi.s	Obj72_Delete
000186F4 4E75                       		rts	
000186F6                            ; ===========================================================================
000186F6                            
000186F6                            Obj72_Delete:
000186F6 4EF9 0000 F120             		jmp	DeleteObject
000186FC                            ; ===========================================================================
000186FC 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000186FE 0000                       		dc.w loc_166C8-Obj72_Index
00018700 0000                       		dc.w loc_1675E-Obj72_Index
00018702 0000                       		dc.w loc_16798-Obj72_Index
00018704                            ; ===========================================================================
00018704                            
00018704                            Obj72_Main:				; XREF: Obj72_Index
00018704 5428 0024                  		addq.b	#2,$24(a0)
00018708 1028 0028                  		move.b	$28(a0),d0
0001870C D040                       		add.w	d0,d0
0001870E 0240 001E                  		andi.w	#$1E,d0
00018712 45FA 0000                  		lea	Obj72_Data(pc),a2
00018716 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001871A 315A 003A                  		move.w	(a2)+,$3A(a0)
0001871E 214A 003C                  		move.l	a2,$3C(a0)
00018722 315A 0036                  		move.w	(a2)+,$36(a0)
00018726 315A 0038                  		move.w	(a2)+,$38(a0)
0001872A                            
0001872A                            loc_166C8:				; XREF: Obj72_Index
0001872A 43F8 D000                  		lea	($FFFFD000).w,a1
0001872E 3029 0008                  		move.w	8(a1),d0
00018732 9068 0008                  		sub.w	8(a0),d0
00018736 0828 0000 0022             		btst	#0,$22(a0)
0001873C 6700                       		beq.s	loc_166E0
0001873E 0640 000F                  		addi.w	#$F,d0
00018742                            
00018742                            loc_166E0:
00018742 0C40 0010                  		cmpi.w	#$10,d0
00018746 6400                       		bcc.s	locret_1675C
00018748 3229 000C                  		move.w	$C(a1),d1
0001874C 9268 000C                  		sub.w	$C(a0),d1
00018750 0641 0020                  		addi.w	#$20,d1
00018754 0C41 0040                  		cmpi.w	#$40,d1
00018758 6400                       		bcc.s	locret_1675C
0001875A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001875E 6600                       		bne.s	locret_1675C
00018760 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018766 6600                       		bne.s	loc_1670E
00018768 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001876E 6500                       		bcs.s	locret_1675C
00018770                            
00018770                            loc_1670E:
00018770 5428 0024                  		addq.b	#2,$24(a0)
00018774 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001877A 137C 001A 001C             		move.b	#$1A,$1C(a1)	; use Sonic's hurt animation
00018780 337C 0800 0014             		move.w	#$800,$14(a1)
00018786 337C 0000 0010             		move.w	#0,$10(a1)
0001878C 337C 0000 0012             		move.w	#0,$12(a1)
00018792 08A8 0005 0022             		bclr	#5,$22(a0)
00018798 08A9 0005 0022             		bclr	#5,$22(a1)
0001879E 08E9 0001 0022             		bset	#1,$22(a1)
000187A4 3368 0008 0008             		move.w	8(a0),8(a1)
000187AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187B0 4228 0032                  		clr.b	$32(a0)
000187B4 303C 00BE                  		move.w	#$BE,d0
000187B8 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000187BE                            
000187BE                            locret_1675C:
000187BE 4E75                       		rts	
000187C0                            ; ===========================================================================
000187C0                            
000187C0                            loc_1675E:				; XREF: Obj72_Index
000187C0 43F8 D000                  		lea	($FFFFD000).w,a1
000187C4 1028 0032                  		move.b	$32(a0),d0
000187C8 5428 0032                  		addq.b	#2,$32(a0)
000187CC 4EB9 0000 2B7A             		jsr	(CalcSine).l
000187D2 EA40                       		asr.w	#5,d0
000187D4 3428 000C                  		move.w	$C(a0),d2
000187D8 9440                       		sub.w	d0,d2
000187DA 3342 000C                  		move.w	d2,$C(a1)
000187DE 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000187E4 6600                       		bne.s	locret_16796
000187E6 6100 0000                  		bsr.w	sub_1681C
000187EA 5428 0024                  		addq.b	#2,$24(a0)
000187EE 303C 00BC                  		move.w	#$BC,d0
000187F2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play teleport sound
000187F8                            
000187F8                            locret_16796:
000187F8 4E75                       		rts	
000187FA                            ; ===========================================================================
000187FA                            
000187FA                            loc_16798:				; XREF: Obj72_Index
000187FA 588F                       		addq.l	#4,sp
000187FC 43F8 D000                  		lea	($FFFFD000).w,a1
00018800 5328 002E                  		subq.b	#1,$2E(a0)
00018804 6A00                       		bpl.s	loc_167DA
00018806 3368 0036 0008             		move.w	$36(a0),8(a1)
0001880C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018812 7200                       		moveq	#0,d1
00018814 1228 003A                  		move.b	$3A(a0),d1
00018818 5801                       		addq.b	#4,d1
0001881A B228 003B                  		cmp.b	$3B(a0),d1
0001881E 6500                       		bcs.s	loc_167C2
00018820 7200                       		moveq	#0,d1
00018822 6000                       		bra.s	loc_16800
00018824                            ; ===========================================================================
00018824                            
00018824                            loc_167C2:
00018824 1141 003A                  		move.b	d1,$3A(a0)
00018828 2468 003C                  		movea.l	$3C(a0),a2
0001882C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018832 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018838 6000 0000                  		bra.w	sub_1681C
0001883C                            ; ===========================================================================
0001883C                            
0001883C                            loc_167DA:
0001883C 2429 0008                  		move.l	8(a1),d2
00018840 2629 000C                  		move.l	$C(a1),d3
00018844 3029 0010                  		move.w	$10(a1),d0
00018848 48C0                       		ext.l	d0
0001884A E180                       		asl.l	#8,d0
0001884C D480                       		add.l	d0,d2
0001884E 3029 0012                  		move.w	$12(a1),d0
00018852 48C0                       		ext.l	d0
00018854 E180                       		asl.l	#8,d0
00018856 D680                       		add.l	d0,d3
00018858 2342 0008                  		move.l	d2,8(a1)
0001885C 2343 000C                  		move.l	d3,$C(a1)
00018860 4E75                       		rts	
00018862                            ; ===========================================================================
00018862                            
00018862                            loc_16800:
00018862 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018868 4228 0024                  		clr.b	$24(a0)
0001886C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018870 337C 0000 0010             		move.w	#0,$10(a1)
00018876 337C 0200 0012             		move.w	#$200,$12(a1)
0001887C 4E75                       		rts	
0001887E                            
0001887E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001887E                            
0001887E                            
0001887E                            sub_1681C:
0001887E 7000                       		moveq	#0,d0
00018880 343C 1000                  		move.w	#$1000,d2
00018884 3028 0036                  		move.w	$36(a0),d0
00018888 9069 0008                  		sub.w	8(a1),d0
0001888C 6C00                       		bge.s	loc_16830
0001888E 4440                       		neg.w	d0
00018890 4442                       		neg.w	d2
00018892                            
00018892                            loc_16830:
00018892 7200                       		moveq	#0,d1
00018894 363C 1000                  		move.w	#$1000,d3
00018898 3228 0038                  		move.w	$38(a0),d1
0001889C 9269 000C                  		sub.w	$C(a1),d1
000188A0 6C00                       		bge.s	loc_16844
000188A2 4441                       		neg.w	d1
000188A4 4443                       		neg.w	d3
000188A6                            
000188A6                            loc_16844:
000188A6 B240                       		cmp.w	d0,d1
000188A8 6500                       		bcs.s	loc_1687A
000188AA 7200                       		moveq	#0,d1
000188AC 3228 0038                  		move.w	$38(a0),d1
000188B0 9269 000C                  		sub.w	$C(a1),d1
000188B4 4841                       		swap	d1
000188B6 83C3                       		divs.w	d3,d1
000188B8 7000                       		moveq	#0,d0
000188BA 3028 0036                  		move.w	$36(a0),d0
000188BE 9069 0008                  		sub.w	8(a1),d0
000188C2 6700                       		beq.s	loc_16866
000188C4 4840                       		swap	d0
000188C6 81C1                       		divs.w	d1,d0
000188C8                            
000188C8                            loc_16866:
000188C8 3340 0010                  		move.w	d0,$10(a1)
000188CC 3343 0012                  		move.w	d3,$12(a1)
000188D0 4A41                       		tst.w	d1
000188D2 6A00                       		bpl.s	loc_16874
000188D4 4441                       		neg.w	d1
000188D6                            
000188D6                            loc_16874:
000188D6 3141 002E                  		move.w	d1,$2E(a0)
000188DA 4E75                       		rts	
000188DC                            ; ===========================================================================
000188DC                            
000188DC                            loc_1687A:
000188DC 7000                       		moveq	#0,d0
000188DE 3028 0036                  		move.w	$36(a0),d0
000188E2 9069 0008                  		sub.w	8(a1),d0
000188E6 4840                       		swap	d0
000188E8 81C2                       		divs.w	d2,d0
000188EA 7200                       		moveq	#0,d1
000188EC 3228 0038                  		move.w	$38(a0),d1
000188F0 9269 000C                  		sub.w	$C(a1),d1
000188F4 6700                       		beq.s	loc_16898
000188F6 4841                       		swap	d1
000188F8 83C0                       		divs.w	d0,d1
000188FA                            
000188FA                            loc_16898:
000188FA 3341 0012                  		move.w	d1,$12(a1)
000188FE 3342 0010                  		move.w	d2,$10(a1)
00018902 4A40                       		tst.w	d0
00018904 6A00                       		bpl.s	loc_168A6
00018906 4440                       		neg.w	d0
00018908                            
00018908                            loc_168A6:
00018908 3140 002E                  		move.w	d0,$2E(a0)
0001890C 4E75                       		rts	
0001890E                            ; End of function sub_1681C
0001890E                            
0001890E                            ; ===========================================================================
0001890E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018914 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001891A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001891E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018924 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001892A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018930 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018936 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001893C 0884 0298 0894             		dc.w $884, $298, $894
00018942 0270 0894 0190             		dc.w $270, $894, $190
00018948 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001894E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018954 1184 0498 1158             		dc.w $1184, $498, $1158
0001895A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018960 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018966 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001896C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018972 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018978 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001897E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018984 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001898A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018990 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018996                            ; ===========================================================================
00018996                            ; ---------------------------------------------------------------------------
00018996                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018996                            ; ---------------------------------------------------------------------------
00018996                            
00018996                            Obj78:					; XREF: Obj_Index
00018996 7000                       		moveq	#0,d0
00018998 1028 0024                  		move.b	$24(a0),d0
0001899C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000189A0 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000189A4                            ; ===========================================================================
000189A4 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000189A6 0000                       		dc.w Obj78_Action-Obj78_Index
000189A8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000189AA 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000189AC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000189AE 0000                       		dc.w Obj78_Delete-Obj78_Index
000189B0 0000                       		dc.w loc_16CC0-Obj78_Index
000189B2                            ; ===========================================================================
000189B2                            
000189B2                            locret_16950:
000189B2 4E75                       		rts	
000189B4                            ; ===========================================================================
000189B4                            
000189B4                            Obj78_Main:				; XREF: Obj78_Index
000189B4 117C 0007 0016             		move.b	#7,$16(a0)
000189BA 117C 0008 0017             		move.b	#8,$17(a0)
000189C0 4EB9 0000 F0AA             		jsr	ObjectFall
000189C6 4EBA E4B6                  		jsr	ObjHitFloor
000189CA 4A41                       		tst.w	d1
000189CC 6AE4                       		bpl.s	locret_16950
000189CE D368 000C                  		add.w	d1,$C(a0)
000189D2 4268 0012                  		clr.w	$12(a0)
000189D6 5428 0024                  		addq.b	#2,$24(a0)
000189DA 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000189E2 317C 22B0 0002             		move.w	#$22B0,2(a0)
000189E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000189EE 6700                       		beq.s	loc_16996
000189F0 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000189F6                            
000189F6                            loc_16996:
000189F6 0228 0003 0001             		andi.b	#3,1(a0)
000189FC 0028 0004 0001             		ori.b	#4,1(a0)
00018A02 1168 0001 0022             		move.b	1(a0),$22(a0)
00018A08 117C 0004 0018             		move.b	#4,$18(a0)
00018A0E 117C 0008 0019             		move.b	#8,$19(a0)
00018A14 117C 000B 0020             		move.b	#$B,$20(a0)
00018A1A 3428 0008                  		move.w	8(a0),d2
00018A1E 7A0C                       		moveq	#$C,d5
00018A20 0828 0000 0022             		btst	#0,$22(a0)
00018A26 6700                       		beq.s	loc_169CA
00018A28 4445                       		neg.w	d5
00018A2A                            
00018A2A                            loc_169CA:
00018A2A 1C3C 0004                  		move.b	#4,d6
00018A2E 7600                       		moveq	#0,d3
00018A30 7804                       		moveq	#4,d4
00018A32 2448                       		movea.l	a0,a2
00018A34 7202                       		moveq	#2,d1
00018A36                            
00018A36                            Obj78_LoadBody:
00018A36 4EB9 0000 F58E             		jsr	SingleObjLoad2
00018A3C 6600                       		bne.s	Obj78_QuitLoad
00018A3E 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018A42 1346 0024                  		move.b	d6,$24(a1)
00018A46 5406                       		addq.b	#2,d6
00018A48 2368 0004 0004             		move.l	4(a0),4(a1)
00018A4E 3368 0002 0002             		move.w	2(a0),2(a1)
00018A54 137C 0005 0018             		move.b	#5,$18(a1)
00018A5A 137C 0008 0019             		move.b	#8,$19(a1)
00018A60 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018A66 D445                       		add.w	d5,d2
00018A68 3342 0008                  		move.w	d2,8(a1)
00018A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A72 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018A78 1368 0022 0001             		move.b	$22(a0),1(a1)
00018A7E 137C 0008 001A             		move.b	#8,$1A(a1)
00018A84 234A 003C                  		move.l	a2,$3C(a1)
00018A88 1344 003C                  		move.b	d4,$3C(a1)
00018A8C 5804                       		addq.b	#4,d4
00018A8E 2449                       		movea.l	a1,a2
00018A90                            
00018A90                            Obj78_QuitLoad:
00018A90 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018A94                            
00018A94 117C 0007 002A             		move.b	#7,$2A(a0)
00018A9A 4228 003C                  		clr.b	$3C(a0)
00018A9E                            
00018A9E                            Obj78_Action:				; XREF: Obj78_Index
00018A9E 4A28 0022                  		tst.b	$22(a0)
00018AA2 6B00 0000                  		bmi.w	loc_16C96
00018AA6 7000                       		moveq	#0,d0
00018AA8 1028 0025                  		move.b	$25(a0),d0
00018AAC 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018AB0 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018AB4 1228 002B                  		move.b	$2B(a0),d1
00018AB8 6A00                       		bpl.s	Obj78_Display
00018ABA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018AC0 1028 0026                  		move.b	$26(a0),d0
00018AC4 0240 007F                  		andi.w	#$7F,d0
00018AC8 5828 0026                  		addq.b	#4,$26(a0)
00018ACC 1031 0000                  		move.b	(a1,d0.w),d0
00018AD0 6A00                       		bpl.s	Obj78_AniHead
00018AD2 08A8 0007 002B             		bclr	#7,$2B(a0)
00018AD8 6000                       		bra.s	Obj78_Display
00018ADA                            ; ===========================================================================
00018ADA                            
00018ADA                            Obj78_AniHead:
00018ADA 0201 0010                  		andi.b	#$10,d1
00018ADE D001                       		add.b	d1,d0
00018AE0 1140 001A                  		move.b	d0,$1A(a0)
00018AE4                            
00018AE4                            Obj78_Display:
00018AE4 3028 0008                  		move.w	8(a0),d0
00018AE8 0240 FF80                  		andi.w	#$FF80,d0
00018AEC 3238 F700                  		move.w	($FFFFF700).w,d1
00018AF0 0441 0080                  		subi.w	#$80,d1
00018AF4 0241 FF80                  		andi.w	#$FF80,d1
00018AF8 9041                       		sub.w	d1,d0
00018AFA 0C40 0280                  		cmpi.w	#$280,d0
00018AFE 6200 0000                  		bhi.w	Obj78_ChkGone
00018B02 4EF9 0000 F0E4             		jmp	DisplaySprite
00018B08                            ; ===========================================================================
00018B08                            
00018B08                            Obj78_ChkGone:
00018B08 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018B0C 7000                       		moveq	#0,d0
00018B0E 1028 0023                  		move.b	$23(a0),d0
00018B12 6700                       		beq.s	loc_16ABC
00018B14 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B1A                            
00018B1A                            loc_16ABC:
00018B1A 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018B20 4E75                       		rts	
00018B22                            ; ===========================================================================
00018B22                            
00018B22                            Obj78_Delete:				; XREF: Obj78_Index
00018B22 4EF9 0000 F120             		jmp	DeleteObject
00018B28                            ; ===========================================================================
00018B28 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018B2A 0000                       		dc.w loc_16B02-Obj78_Index2
00018B2C                            ; ===========================================================================
00018B2C                            
00018B2C                            Obj78_Move:				; XREF: Obj78_Index2
00018B2C 5328 002A                  		subq.b	#1,$2A(a0)
00018B30 6B00                       		bmi.s	Obj78_Move2
00018B32 4E75                       		rts	
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            Obj78_Move2:
00018B34 5428 0025                  		addq.b	#2,$25(a0)
00018B38 117C 0010 002A             		move.b	#$10,$2A(a0)
00018B3E 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018B44 317C 0040 0014             		move.w	#$40,$14(a0)
00018B4A 0868 0004 002B             		bchg	#4,$2B(a0)
00018B50 6600                       		bne.s	loc_16AFC
00018B52 4268 0010                  		clr.w	$10(a0)
00018B56 4468 0014                  		neg.w	$14(a0)
00018B5A                            
00018B5A                            loc_16AFC:
00018B5A 08E8 0007 002B             		bset	#7,$2B(a0)
00018B60                            
00018B60                            loc_16B02:				; XREF: Obj78_Index2
00018B60 5328 002A                  		subq.b	#1,$2A(a0)
00018B64 6B00                       		bmi.s	loc_16B5E
00018B66 2F28 0008                  		move.l	8(a0),-(sp)
00018B6A 2428 0008                  		move.l	8(a0),d2
00018B6E 3028 0010                  		move.w	$10(a0),d0
00018B72 0828 0000 0022             		btst	#0,$22(a0)
00018B78 6700                       		beq.s	loc_16B1E
00018B7A 4440                       		neg.w	d0
00018B7C                            
00018B7C                            loc_16B1E:
00018B7C 48C0                       		ext.l	d0
00018B7E E180                       		asl.l	#8,d0
00018B80 D480                       		add.l	d0,d2
00018B82 2142 0008                  		move.l	d2,8(a0)
00018B86 4EBA E2F6                  		jsr	ObjHitFloor
00018B8A 241F                       		move.l	(sp)+,d2
00018B8C 0C41 FFF8                  		cmpi.w	#-8,d1
00018B90 6D00                       		blt.s	loc_16B70
00018B92 0C41 000C                  		cmpi.w	#$C,d1
00018B96 6C00                       		bge.s	loc_16B70
00018B98 D368 000C                  		add.w	d1,$C(a0)
00018B9C 4842                       		swap	d2
00018B9E B468 0008                  		cmp.w	8(a0),d2
00018BA2 6700                       		beq.s	locret_16B5C
00018BA4 7000                       		moveq	#0,d0
00018BA6 1028 003C                  		move.b	$3C(a0),d0
00018BAA 5228 003C                  		addq.b	#1,$3C(a0)
00018BAE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BB4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018BB8                            
00018BB8                            locret_16B5C:
00018BB8 4E75                       		rts	
00018BBA                            ; ===========================================================================
00018BBA                            
00018BBA                            loc_16B5E:
00018BBA 5528 0025                  		subq.b	#2,$25(a0)
00018BBE 117C 0007 002A             		move.b	#7,$2A(a0)
00018BC4 317C 0000 0010             		move.w	#0,$10(a0)
00018BCA 4E75                       		rts	
00018BCC                            ; ===========================================================================
00018BCC                            
00018BCC                            loc_16B70:
00018BCC 2142 0008                  		move.l	d2,8(a0)
00018BD0 0868 0000 0022             		bchg	#0,$22(a0)
00018BD6 1168 0022 0001             		move.b	$22(a0),1(a0)
00018BDC 7000                       		moveq	#0,d0
00018BDE 1028 003C                  		move.b	$3C(a0),d0
00018BE2 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018BE8 5228 003C                  		addq.b	#1,$3C(a0)
00018BEC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BF2 4E75                       		rts	
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018BF4 2268 003C                  		movea.l	$3C(a0),a1
00018BF8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018BFE 6A00                       		bpl.s	Obj78_BodySeg1
00018C00 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018C06 1028 0026                  		move.b	$26(a0),d0
00018C0A 0240 007F                  		andi.w	#$7F,d0
00018C0E 5828 0026                  		addq.b	#4,$26(a0)
00018C12 4A31 0004                  		tst.b	4(a1,d0.w)
00018C16 6A00                       		bpl.s	Obj78_AniBody
00018C18 5828 0026                  		addq.b	#4,$26(a0)
00018C1C                            
00018C1C                            Obj78_AniBody:
00018C1C 1031 0000                  		move.b	(a1,d0.w),d0
00018C20 5000                       		addq.b	#8,d0
00018C22 1140 001A                  		move.b	d0,$1A(a0)
00018C26                            
00018C26                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018C26 2268 003C                  		movea.l	$3C(a0),a1
00018C2A 4A28 0022                  		tst.b	$22(a0)
00018C2E 6B00 0000                  		bmi.w	loc_16C90
00018C32 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018C38 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018C3E 6700 0000                  		beq.w	loc_16C64
00018C42 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018C48 3029 0010                  		move.w	$10(a1),d0
00018C4C D069 0014                  		add.w	$14(a1),d0
00018C50 3140 0010                  		move.w	d0,$10(a0)
00018C54 2428 0008                  		move.l	8(a0),d2
00018C58 2602                       		move.l	d2,d3
00018C5A 3028 0010                  		move.w	$10(a0),d0
00018C5E 0828 0000 0022             		btst	#0,$22(a0)
00018C64 6700                       		beq.s	loc_16C0C
00018C66 4440                       		neg.w	d0
00018C68                            
00018C68                            loc_16C0C:
00018C68 48C0                       		ext.l	d0
00018C6A E180                       		asl.l	#8,d0
00018C6C D480                       		add.l	d0,d2
00018C6E 2142 0008                  		move.l	d2,8(a0)
00018C72 4843                       		swap	d3
00018C74 B668 0008                  		cmp.w	8(a0),d3
00018C78 6700                       		beq.s	loc_16C64
00018C7A 7000                       		moveq	#0,d0
00018C7C 1028 003C                  		move.b	$3C(a0),d0
00018C80 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018C84 0C01 0080                  		cmpi.b	#-$80,d1
00018C88 6600                       		bne.s	loc_16C50
00018C8A 4843                       		swap	d3
00018C8C 2143 0008                  		move.l	d3,8(a0)
00018C90 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C94 0868 0000 0022             		bchg	#0,$22(a0)
00018C9A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018CA0 5228 003C                  		addq.b	#1,$3C(a0)
00018CA4 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018CAA 6000                       		bra.s	loc_16C64
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            loc_16C50:
00018CAC 4881                       		ext.w	d1
00018CAE D368 000C                  		add.w	d1,$C(a0)
00018CB2 5228 003C                  		addq.b	#1,$3C(a0)
00018CB6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018CBC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018CC0                            
00018CC0                            loc_16C64:
00018CC0 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018CC6 6700                       		beq.s	loc_16C90
00018CC8 0C11 0027                  		cmpi.b	#$27,0(a1)
00018CCC 6700                       		beq.s	loc_16C7C
00018CCE 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018CD4 6600                       		bne.s	loc_16C82
00018CD6                            
00018CD6                            loc_16C7C:
00018CD6 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018CDA 117C 000A 0024             		move.b	#$A,$24(a0)
00018CE0                            
00018CE0                            loc_16C82:
00018CE0 4EF9 0000 F0E4             		jmp	DisplaySprite
00018CE6                            
00018CE6                            ; ===========================================================================
00018CE6 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018CEE                            ; ===========================================================================
00018CEE                            
00018CEE                            loc_16C90:
00018CEE 08E9 0007 0022             		bset	#7,$22(a1)
00018CF4                            
00018CF4                            loc_16C96:
00018CF4 7000                       		moveq	#0,d0
00018CF6 1028 0024                  		move.b	$24(a0),d0
00018CFA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018CFE 0828 0000 0022             		btst	#0,$22(a0)
00018D04 6700                       		beq.s	loc_16CAA
00018D06 4440                       		neg.w	d0
00018D08                            
00018D08                            loc_16CAA:
00018D08 3140 0010                  		move.w	d0,$10(a0)
00018D0C 317C FC00 0012             		move.w	#-$400,$12(a0)
00018D12 117C 000C 0024             		move.b	#$C,$24(a0)
00018D18 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018D1E                            
00018D1E                            loc_16CC0:				; XREF: Obj78_Index
00018D1E 4EB9 0000 F0AA             		jsr	ObjectFall
00018D24 4A68 0012                  		tst.w	$12(a0)
00018D28 6B00                       		bmi.s	loc_16CE0
00018D2A 4EBA E152                  		jsr	ObjHitFloor
00018D2E 4A41                       		tst.w	d1
00018D30 6A00                       		bpl.s	loc_16CE0
00018D32 D368 000C                  		add.w	d1,$C(a0)
00018D36 317C FC00 0012             		move.w	#-$400,$12(a0)
00018D3C                            
00018D3C                            loc_16CE0:
00018D3C 4A28 0001                  		tst.b	1(a0)
00018D40 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018D44 4EF9 0000 F0E4             		jmp	DisplaySprite
00018D4A                            ; ===========================================================================
00018D4A                            Ani_obj78:
00018D4A                            	include "_anim\obj78.asm"
00018D4A                            ; ---------------------------------------------------------------------------
00018D4A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018D4A                            ; ---------------------------------------------------------------------------
00018D4A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018D5A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018D6A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018D7A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018D8A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018D9A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018DAA 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018DBA 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018DCA                            	even
00018DCA                            	even
00018DCA                            
00018DCA                            ; ---------------------------------------------------------------------------
00018DCA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DCA                            ; ---------------------------------------------------------------------------
00018DCA                            Map_obj78:
00018DCA                            	include "_maps\obj78.asm"
00018DCA                            ; ---------------------------------------------------------------------------
00018DCA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DCA                            ; ---------------------------------------------------------------------------
00018DCA 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018DCE 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018DD2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018DD6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018DDA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018DDE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018DE2 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018DE6 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018DEA 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018DEE 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018DF2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018DF6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018DFA 01                         byte_16D9E:	dc.b 1
00018DFB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018E00 01                         byte_16DA4:	dc.b 1
00018E01 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018E06 01                         byte_16DAA:	dc.b 1
00018E07 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018E0C 01                         byte_16DB0:	dc.b 1
00018E0D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018E12 01                         byte_16DB6:	dc.b 1
00018E13 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018E18 01                         byte_16DBC:	dc.b 1
00018E19 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018E1E 01                         byte_16DC2:	dc.b 1
00018E1F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018E24 01                         byte_16DC8:	dc.b 1
00018E25 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018E2A 01                         byte_16DCE:	dc.b 1
00018E2B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018E30 01                         byte_16DD4:	dc.b 1
00018E31 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018E36 01                         byte_16DDA:	dc.b 1
00018E37 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018E3C 01                         byte_16DE0:	dc.b 1
00018E3D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018E42 01                         byte_16DE6:	dc.b 1
00018E43 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018E48 01                         byte_16DEC:	dc.b 1
00018E49 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018E4E 01                         byte_16DF2:	dc.b 1
00018E4F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018E54 01                         byte_16DF8:	dc.b 1
00018E55 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018E5A 01                         byte_16DFE:	dc.b 1
00018E5B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018E60 01                         byte_16E04:	dc.b 1
00018E61 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018E66 01                         byte_16E0A:	dc.b 1
00018E67 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018E6C 01                         byte_16E10:	dc.b 1
00018E6D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018E72 01                         byte_16E16:	dc.b 1
00018E73 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018E78 01                         byte_16E1C:	dc.b 1
00018E79 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018E7E 01                         byte_16E22:	dc.b 1
00018E7F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018E84 01                         byte_16E28:	dc.b 1
00018E85 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018E8A                            		even
00018E8A                            		even
00018E8A                            
00018E8A                            ; ===========================================================================
00018E8A                            ; ---------------------------------------------------------------------------
00018E8A                            ; Object 79 - lamppost
00018E8A                            ; ---------------------------------------------------------------------------
00018E8A                            
00018E8A                            Obj79:					; XREF: Obj_Index
00018E8A 7000                       		moveq	#0,d0
00018E8C 1028 0024                  		move.b	$24(a0),d0
00018E90 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018E94 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018E98 4EFA 8300                  		jmp	MarkObjGone
00018E9C                            ; ===========================================================================
00018E9C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018E9E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018EA0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018EA2 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018EA4                            ; ===========================================================================
00018EA4                            
00018EA4                            Obj79_Main:				; XREF: Obj79_Index
00018EA4 5428 0024                  		addq.b	#2,$24(a0)
00018EA8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018EB0 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018EB6 117C 0004 0001             		move.b	#4,1(a0)
00018EBC 117C 0008 0019             		move.b	#8,$19(a0)
00018EC2 117C 0005 0018             		move.b	#5,$18(a0)
00018EC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018ECC 7000                       		moveq	#0,d0
00018ECE 1028 0023                  		move.b	$23(a0),d0
00018ED2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018ED8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018EDE 6600                       		bne.s	Obj79_RedLamp
00018EE0 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018EE4 0201 007F                  		andi.b	#$7F,d1
00018EE8 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018EEC 0202 007F                  		andi.b	#$7F,d2
00018EF0 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018EF2 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018EF4                            
00018EF4                            Obj79_RedLamp:
00018EF4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EFA 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018F00 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018F06 4E75                       		rts	
00018F08                            ; ===========================================================================
00018F08                            
00018F08                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018F08 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018F0C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018F10 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018F14 6B00 0000                  		bmi.w	locret_16F90
00018F18 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018F1C 0201 007F                  		andi.b	#$7F,d1
00018F20 1428 0028                  		move.b	$28(a0),d2
00018F24 0202 007F                  		andi.b	#$7F,d2
00018F28 B202                       		cmp.b	d2,d1
00018F2A 6500                       		bcs.s	Obj79_HitLamp
00018F2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018F30 7000                       		moveq	#0,d0
00018F32 1028 0023                  		move.b	$23(a0),d0
00018F36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F3C 117C 0004 0024             		move.b	#4,$24(a0)
00018F42 117C 0003 001A             		move.b	#3,$1A(a0)
00018F48 6000 0000                  		bra.w	locret_16F90
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            Obj79_HitLamp:
00018F4C 3038 D008                  		move.w	($FFFFD008).w,d0
00018F50 9068 0008                  		sub.w	8(a0),d0
00018F54 5040                       		addq.w	#8,d0
00018F56 0C40 0010                  		cmpi.w	#$10,d0
00018F5A 6400 0000                  		bcc.w	locret_16F90
00018F5E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018F62 9068 000C                  		sub.w	$C(a0),d0
00018F66 0640 0040                  		addi.w	#$40,d0
00018F6A 0C40 0068                  		cmpi.w	#$68,d0
00018F6E 6400                       		bcc.s	locret_16F90
00018F70 303C 00A1                  		move.w	#$A1,d0
00018F74 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018F7A 5428 0024                  		addq.b	#2,$24(a0)
00018F7E 4EB9 0000 F578             		jsr	SingleObjLoad
00018F84 6600                       		bne.s	loc_16F76
00018F86 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018F8A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018F90 3368 0008 0030             		move.w	8(a0),$30(a1)
00018F96 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018F9C 0469 0018 0032             		subi.w	#$18,$32(a1)
00018FA2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018FAA 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018FB0 137C 0004 0001             		move.b	#4,1(a1)
00018FB6 137C 0008 0019             		move.b	#8,$19(a1)
00018FBC 137C 0004 0018             		move.b	#4,$18(a1)
00018FC2 137C 0002 001A             		move.b	#2,$1A(a1)
00018FC8 337C 0020 0036             		move.w	#$20,$36(a1)
00018FCE                            
00018FCE                            loc_16F76:
00018FCE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018FD4 6100 0000                  		bsr.w	Obj79_StoreInfo
00018FD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018FDC 7000                       		moveq	#0,d0
00018FDE 1028 0023                  		move.b	$23(a0),d0
00018FE2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018FE8                            
00018FE8                            locret_16F90:
00018FE8 4E75                       		rts	
00018FEA                            ; ===========================================================================
00018FEA                            
00018FEA                            Obj79_AfterHit:				; XREF: Obj79_Index
00018FEA 4E75                       		rts	
00018FEC                            ; ===========================================================================
00018FEC                            
00018FEC                            Obj79_Twirl:				; XREF: Obj79_Index
00018FEC 5368 0036                  		subq.w	#1,$36(a0)
00018FF0 6A00                       		bpl.s	loc_16FA0
00018FF2 117C 0004 0024             		move.b	#4,$24(a0)
00018FF8                            
00018FF8                            loc_16FA0:
00018FF8 1028 0026                  		move.b	$26(a0),d0
00018FFC 0428 0010 0026             		subi.b	#$10,$26(a0)
00019002 0400 0040                  		subi.b	#$40,d0
00019006 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001900C C3FC 0C00                  		muls.w	#$C00,d1
00019010 4841                       		swap	d1
00019012 D268 0030                  		add.w	$30(a0),d1
00019016 3141 0008                  		move.w	d1,8(a0)
0001901A C1FC 0C00                  		muls.w	#$C00,d0
0001901E 4840                       		swap	d0
00019020 D068 0032                  		add.w	$32(a0),d0
00019024 3140 000C                  		move.w	d0,$C(a0)
00019028 4E75                       		rts	
0001902A                            ; ===========================================================================
0001902A                            ; ---------------------------------------------------------------------------
0001902A                            ; Subroutine to	store information when you hit a lamppost
0001902A                            ; ---------------------------------------------------------------------------
0001902A                            
0001902A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001902A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00019030 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00019036 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001903C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00019042 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00019048 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001904E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00019054 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001905A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019060 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00019066 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001906C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019072 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00019078 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001907E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00019084 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001908A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019090 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00019096 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001909C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000190A2 4E75                       		rts	
000190A4                            
000190A4                            ; ---------------------------------------------------------------------------
000190A4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000190A4                            ; ---------------------------------------------------------------------------
000190A4                            
000190A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000190A4                            
000190A4                            
000190A4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000190A4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000190AA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000190B0 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000190B6 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000190BC 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000190C2 4278 FE20                  		clr.w	($FFFFFE20).w
000190C6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000190CA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000190D0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000190D6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000190DA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000190E0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000190E6 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000190EC 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000190F2 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000190F8 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000190FE 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00019104 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001910A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00019110 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00019116 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001911C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00019122 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019128 6600                       		bne.s	loc_170E4
0001912A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00019130 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019136 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001913C                            
0001913C                            loc_170E4:
0001913C 4A38 FE30                  		tst.b	($FFFFFE30).w
00019140 6A00                       		bpl.s	locret_170F6
00019142 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019146 0440 00A0                  		subi.w	#$A0,d0
0001914A 31C0 F728                  		move.w	d0,($FFFFF728).w
0001914E                            
0001914E                            locret_170F6:
0001914E 4E75                       		rts	
00019150                            ; End of function Obj79_LoadInfo
00019150                            
00019150                            ; ===========================================================================
00019150                            ; ---------------------------------------------------------------------------
00019150                            ; Sprite mappings - lamppost
00019150                            ; ---------------------------------------------------------------------------
00019150                            Map_obj79:
00019150                            	include "_maps\obj79.asm"
00019150                            ; ---------------------------------------------------------------------------
00019150                            ; Sprite mappings - lamppost
00019150                            ; ---------------------------------------------------------------------------
00019150 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00019154 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00019158 06                         byte_17100:	dc.b 6
00019159 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001915E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019163 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019168 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001916D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019172 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019177 04                         byte_1711F:	dc.b 4
00019178 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001917D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019182 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019187 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001918C 02                         byte_17134:	dc.b 2
0001918D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019192 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019197 06                         byte_1713F:	dc.b 6
00019198 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001919D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000191A2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000191A7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000191AC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000191B1 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000191B6                            		even
000191B6                            		even
000191B6                            
000191B6                            ; ===========================================================================
000191B6                            ; ---------------------------------------------------------------------------
000191B6                            ; Object 7D - hidden points at the end of a level
000191B6                            ; ---------------------------------------------------------------------------
000191B6                            
000191B6                            Obj7D:					; XREF: Obj_Index
000191B6 7000                       		moveq	#0,d0
000191B8 1028 0024                  		move.b	$24(a0),d0
000191BC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000191C0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000191C4                            ; ===========================================================================
000191C4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000191C6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000191C8                            ; ===========================================================================
000191C8                            
000191C8                            Obj7D_Main:				; XREF: Obj7D_Index
000191C8 7410                       		moveq	#$10,d2
000191CA 3602                       		move.w	d2,d3
000191CC D643                       		add.w	d3,d3
000191CE 43F8 D000                  		lea	($FFFFD000).w,a1
000191D2 3029 0008                  		move.w	8(a1),d0
000191D6 9068 0008                  		sub.w	8(a0),d0
000191DA D042                       		add.w	d2,d0
000191DC B043                       		cmp.w	d3,d0
000191DE 6400                       		bcc.s	Obj7D_ChkDel
000191E0 3229 000C                  		move.w	$C(a1),d1
000191E4 9268 000C                  		sub.w	$C(a0),d1
000191E8 D242                       		add.w	d2,d1
000191EA B243                       		cmp.w	d3,d1
000191EC 6400                       		bcc.s	Obj7D_ChkDel
000191EE 4A78 FE08                  		tst.w	($FFFFFE08).w
000191F2 6600                       		bne.s	Obj7D_ChkDel
000191F4 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000191F8 6600                       		bne.s	Obj7D_ChkDel
000191FA 5428 0024                  		addq.b	#2,$24(a0)
000191FE 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00019206 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001920C 0028 0004 0001             		ori.b	#4,1(a0)
00019212 117C 0000 0018             		move.b	#0,$18(a0)
00019218 117C 0010 0019             		move.b	#$10,$19(a0)
0001921E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00019224 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001922A 303C 00C9                  		move.w	#$C9,d0
0001922E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bonus sound
00019234 7000                       		moveq	#0,d0
00019236 1028 0028                  		move.b	$28(a0),d0
0001923A D040                       		add.w	d0,d0
0001923C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00019240 4EB9 0000 0000             		jsr	AddPoints
00019246                            
00019246                            Obj7D_ChkDel:
00019246 3028 0008                  		move.w	8(a0),d0
0001924A 0240 FF80                  		andi.w	#$FF80,d0
0001924E 3238 F700                  		move.w	($FFFFF700).w,d1
00019252 0441 0080                  		subi.w	#$80,d1
00019256 0241 FF80                  		andi.w	#$FF80,d1
0001925A 9041                       		sub.w	d1,d0
0001925C 0C40 0280                  		cmpi.w	#$280,d0
00019260 6200                       		bhi.s	Obj7D_Delete
00019262 4E75                       		rts	
00019264                            ; ===========================================================================
00019264                            
00019264                            Obj7D_Delete:
00019264 4EF9 0000 F120             		jmp	DeleteObject
0001926A                            ; ===========================================================================
0001926A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001926C 03E8                       		dc.w 1000
0001926E 0064                       		dc.w 100
00019270 000A                       		dc.w 10
00019272                            ; ===========================================================================
00019272                            
00019272                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019272 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019276 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019278 3028 0008                  		move.w	8(a0),d0
0001927C 0240 FF80                  		andi.w	#-$80,d0
00019280 3238 F700                  		move.w	($FFFFF700).w,d1
00019284 0441 0080                  		subi.w	#$80,d1
00019288 0241 FF80                  		andi.w	#-$80,d1
0001928C 9041                       		sub.w	d1,d0
0001928E 0C40 0280                  		cmpi.w	#$280,d0
00019292 6200                       		bhi.s	Obj7D_Delete2
00019294 4EF9 0000 F0E4             		jmp	DisplaySprite
0001929A                            ; ===========================================================================
0001929A                            
0001929A                            Obj7D_Delete2:
0001929A 4EF9 0000 F120             		jmp	DeleteObject
000192A0                            ; ===========================================================================
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            ; Sprite mappings - hidden points at the end of	a level
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            Map_obj7D:
000192A0                            	include "_maps\obj7D.asm"
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            ; Sprite mappings - hidden points at the end of	a level
000192A0                            ; ---------------------------------------------------------------------------
000192A0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000192A4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000192A8 00                         byte_17250:	dc.b 0
000192A9 01                         byte_17251:	dc.b 1
000192AA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000192AF 01                         byte_17257:	dc.b 1
000192B0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000192B5 01                         byte_1725D:	dc.b 1
000192B6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000192BC 00                         		even
000192BC 00                         		even
000192BC                            
000192BC                            ; ===========================================================================
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            
000192BC                            Obj8A:					; XREF: Obj_Index
000192BC 7000                       		moveq	#0,d0
000192BE 1028 0024                  		move.b	$24(a0),d0
000192C2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000192C6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000192CA                            ; ===========================================================================
000192CA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000192CC 0000                       		dc.w Obj8A_Display-Obj8A_Index
000192CE                            ; ===========================================================================
000192CE                            
000192CE                            Obj8A_Main:				; XREF: Obj8A_Index
000192CE 5428 0024                  		addq.b	#2,$24(a0)
000192D2 317C 0120 0008             		move.w	#$120,8(a0)
000192D8 317C 00F0 000A             		move.w	#$F0,$A(a0)
000192DE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000192E6 317C 05A0 0002             		move.w	#$5A0,2(a0)
000192EC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000192F0 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000192F4 117C 0000 0001             		move.b	#0,1(a0)
000192FA 117C 0000 0018             		move.b	#0,$18(a0)
00019300 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00019306 6600                       		bne.s	Obj8A_Display	; if not, branch
00019308 317C 00A6 0002             		move.w	#$A6,2(a0)
0001930E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00019314 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00019318 6700                       		beq.s	Obj8A_Display	; if not, branch
0001931A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00019320 6600                       		bne.s	Obj8A_Display	; if not, branch
00019322 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
00019328 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
0001932E 4EF9 0000 F120             		jmp	DeleteObject
00019334                            ; ===========================================================================
00019334                            
00019334                            Obj8A_Display:				; XREF: Obj8A_Index
00019334 4EF9 0000 F0E4             		jmp	DisplaySprite
0001933A                            ; ===========================================================================
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            Map_obj8A:
0001933A                            	include "_maps\obj8A.asm"
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001933A                            ; ---------------------------------------------------------------------------
0001933A 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001933E 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019342 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00019346 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001934A 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001934E 0000                       		dc.w byte_176A9-Map_obj8A
00019350 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019351 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019356 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001935B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019360 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019365 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001936A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001936F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019374 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019379 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001937E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019383 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019388 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001938D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019392 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019397 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019398 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001939D D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000193A2 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000193A7 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000193AC D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000193B1 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000193B6 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000193BB D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000193C0 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000193C5 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000193CA 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000193CF 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000193D4 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000193D9 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000193DE 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000193E3 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000193E8 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000193E9 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000193EE D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000193F3 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000193F8 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000193FD D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00019402 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00019407 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001940C 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00019411 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00019416 0805 0036 08               		dc.b 8,	5, 0, $36, 8
0001941B 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001941C D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00019421 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00019426 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001942B D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00019430 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019435 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001943A D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
0001943F D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019444 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019449 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
0001944E D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019453 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019458 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001945D D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019462 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019467 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001946C 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019471 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019476 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001947B 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019480 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019485 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001948A 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001948F 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019494 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019495 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001949A D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001949F D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000194A4 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000194A9 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000194AE D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000194B3 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000194B8 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000194BD 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000194C2 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000194C7 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000194CC 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000194D1 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000194D6 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000194DB 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000194E0 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000194E5 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000194EA 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000194EF 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000194F4 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000194F9 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000194FA D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000194FF D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00019504 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00019509 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
0001950E D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00019513 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00019518 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001951D D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00019522 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00019527 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001952C D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00019531 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00019536 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001953B 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019540 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019545 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001954A 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
0001954F 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019554 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019559 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001955E 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019563 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019568 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001956D 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019572 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019577 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001957C 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001957D D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019582 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019587 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001958C D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019591 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019596 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001959B D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000195A0 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000195A5 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000195AA D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000195AF D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000195B4 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000195B9 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000195BE 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000195C3 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000195C8 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000195CD 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000195D2 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000195D7 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000195DC 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000195E1 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000195E6 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000195EB 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000195F0 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000195F1 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000195F6 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000195FB D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00019600 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00019605 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
0001960A D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
0001960F D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00019614 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00019619 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
0001961E D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00019623 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00019628 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001962D D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00019632 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00019637 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001963C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019641 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019646 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001964B 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019650 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019655 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001965A 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001965F 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019664 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019669 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001966E 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019673 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019678 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001967D 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019682 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019687 2005 0004 28               		dc.b $20, 5, 0,	4, $28
0001968C 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001968D F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019692 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019697 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001969C F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000196A1 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000196A6 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000196AB F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000196B0 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000196B5 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000196BA F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000196BF F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000196C4 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000196C9 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000196CE F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000196D3 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000196D8 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000196D9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000196DE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000196E3 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000196E8 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000196ED 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000196F2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000196F7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000196FC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019701 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019702 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019707 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001970C E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019711 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019716 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001971B E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019720 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019725 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001972A E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001972F 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019734 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019739 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001973E 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019743 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019748 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001974D 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019752 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019758 00                         		even
00019758 00                         		even
00019758                            
00019758                            ; ===========================================================================
00019758                            ; ---------------------------------------------------------------------------
00019758                            ; Object 3D - Eggman (GHZ)
00019758                            ; ---------------------------------------------------------------------------
00019758                            
00019758                            Obj3D:					; XREF: Obj_Index
00019758 7000                       		moveq	#0,d0
0001975A 1028 0024                  		move.b	$24(a0),d0
0001975E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019762 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019766                            ; ===========================================================================
00019766 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019768 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001976A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001976C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001976E                            
0001976E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019770 0401                       		dc.b 4,	1
00019772 0607                       		dc.b 6,	7
00019774                            ; ===========================================================================
00019774                            
00019774                            Obj3D_Main:				; XREF: Obj3D_Index
00019774 45F9 0001 976E             		lea	(Obj3D_ObjData).l,a2
0001977A 2248                       		movea.l	a0,a1
0001977C 7202                       		moveq	#2,d1
0001977E 6000                       		bra.s	Obj3D_LoadBoss
00019780                            ; ===========================================================================
00019780                            
00019780                            Obj3D_Loop:
00019780 4EB9 0000 F58E             		jsr	SingleObjLoad2
00019786 6600                       		bne.s	loc_17772
00019788                            
00019788                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019788 135A 0024                  		move.b	(a2)+,$24(a1)
0001978C 12BC 003D                  		move.b	#$3D,0(a1)
00019790 3368 0008 0008             		move.w	8(a0),8(a1)
00019796 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001979C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000197A4 337C 0400 0002             		move.w	#$400,2(a1)
000197AA 137C 0004 0001             		move.b	#4,1(a1)
000197B0 137C 0020 0019             		move.b	#$20,$19(a1)
000197B6 137C 0003 0018             		move.b	#3,$18(a1)
000197BC 135A 001C                  		move.b	(a2)+,$1C(a1)
000197C0 2348 0034                  		move.l	a0,$34(a1)
000197C4 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000197C8                            
000197C8                            loc_17772:
000197C8 3168 0008 0030             		move.w	8(a0),$30(a0)
000197CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000197D4 117C 000F 0020             		move.b	#$F,$20(a0)
000197DA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000197E0                            
000197E0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000197E0 7000                       		moveq	#0,d0
000197E2 1028 0025                  		move.b	$25(a0),d0
000197E6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000197EA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000197EE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000197F4 4EB9 0000 C138             		jsr	AnimateSprite
000197FA 1028 0022                  		move.b	$22(a0),d0
000197FE 0200 0003                  		andi.b	#3,d0
00019802 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019808 8128 0001                  		or.b	d0,1(a0)
0001980C 4EF9 0000 F0E4             		jmp	DisplaySprite
00019812                            ; ===========================================================================
00019812 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019814 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019816 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019818 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001981A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001981C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001981E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019820                            ; ===========================================================================
00019820                            
00019820                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019820 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019826 6100 0000                  		bsr.w	BossMove
0001982A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019830 6600                       		bne.s	loc_177E6
00019832 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019838 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001983C                            
0001983C                            loc_177E6:
0001983C 1028 003F                  		move.b	$3F(a0),d0
00019840 4EB9 0000 2B7A             		jsr	(CalcSine).l
00019846 EC40                       		asr.w	#6,d0
00019848 D068 0038                  		add.w	$38(a0),d0
0001984C 3140 000C                  		move.w	d0,$C(a0)
00019850 3168 0030 0008             		move.w	$30(a0),8(a0)
00019856 5428 003F                  		addq.b	#2,$3F(a0)
0001985A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019860 6400                       		bcc.s	locret_1784A
00019862 4A28 0022                  		tst.b	$22(a0)
00019866 6B00                       		bmi.s	loc_1784C
00019868 4A28 0020                  		tst.b	$20(a0)
0001986C 6600                       		bne.s	locret_1784A
0001986E 4A28 003E                  		tst.b	$3E(a0)
00019872 6600                       		bne.s	Obj3D_ShipFlash
00019874 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001987A 303C 00AC                  		move.w	#$AC,d0
0001987E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019884                            
00019884                            Obj3D_ShipFlash:
00019884 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
00019888 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001988A 4A51                       		tst.w	(a1)
0001988C 6600                       		bne.s	loc_1783C
0001988E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019892                            
00019892                            loc_1783C:
00019892 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019894 5328 003E                  		subq.b	#1,$3E(a0)
00019898 6600                       		bne.s	locret_1784A
0001989A 117C 000F 0020             		move.b	#$F,$20(a0)
000198A0                            
000198A0                            locret_1784A:
000198A0 4E75                       		rts	
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            loc_1784C:				; XREF: loc_177E6
000198A2 7064                       		moveq	#100,d0
000198A4 6100 0000                  		bsr.w	AddPoints
000198A8 117C 0008 0025             		move.b	#8,$25(a0)
000198AE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000198B4 4E75                       		rts	
000198B6                            
000198B6                            ; ---------------------------------------------------------------------------
000198B6                            ; Defeated boss	subroutine
000198B6                            ; ---------------------------------------------------------------------------
000198B6                            
000198B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198B6                            
000198B6                            
000198B6                            BossDefeated:
000198B6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000198BA 0200 0007                  		andi.b	#7,d0
000198BE 6600                       		bne.s	locret_178A2
000198C0 4EB9 0000 F578             		jsr	SingleObjLoad
000198C6 6600                       		bne.s	locret_178A2
000198C8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000198CC 3368 0008 0008             		move.w	8(a0),8(a1)
000198D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198D8 4EB9 0000 2B54             		jsr	(RandomNumber).l
000198DE 3200                       		move.w	d0,d1
000198E0 7200                       		moveq	#0,d1
000198E2 1200                       		move.b	d0,d1
000198E4 E409                       		lsr.b	#2,d1
000198E6 0441 0020                  		subi.w	#$20,d1
000198EA D369 0008                  		add.w	d1,8(a1)
000198EE E048                       		lsr.w	#8,d0
000198F0 E608                       		lsr.b	#3,d0
000198F2 D169 000C                  		add.w	d0,$C(a1)
000198F6                            
000198F6                            locret_178A2:
000198F6 4E75                       		rts	
000198F8                            ; End of function BossDefeated
000198F8                            
000198F8                            ; ---------------------------------------------------------------------------
000198F8                            ; Subroutine to	move a boss
000198F8                            ; ---------------------------------------------------------------------------
000198F8                            
000198F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F8                            
000198F8                            
000198F8                            BossMove:
000198F8 2428 0030                  		move.l	$30(a0),d2
000198FC 2628 0038                  		move.l	$38(a0),d3
00019900 3028 0010                  		move.w	$10(a0),d0
00019904 48C0                       		ext.l	d0
00019906 E180                       		asl.l	#8,d0
00019908 D480                       		add.l	d0,d2
0001990A 3028 0012                  		move.w	$12(a0),d0
0001990E 48C0                       		ext.l	d0
00019910 E180                       		asl.l	#8,d0
00019912 D680                       		add.l	d0,d3
00019914 2142 0030                  		move.l	d2,$30(a0)
00019918 2143 0038                  		move.l	d3,$38(a0)
0001991C 4E75                       		rts	
0001991E                            ; End of function BossMove
0001991E                            
0001991E                            ; ===========================================================================
0001991E                            
0001991E                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001991E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019924 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001992A 6100 FFCC                  		bsr.w	BossMove
0001992E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019934 6600                       		bne.s	loc_17916
00019936 317C 0000 0010             		move.w	#0,$10(a0)
0001993C 317C 0000 0012             		move.w	#0,$12(a0)
00019942 5428 0025                  		addq.b	#2,$25(a0)
00019946 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001994C 6600                       		bne.s	loc_17910
0001994E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019952 3368 0030 0008             		move.w	$30(a0),8(a1)
00019958 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001995E 2348 0034                  		move.l	a0,$34(a1)
00019962                            
00019962                            loc_17910:
00019962 317C 0077 003C             		move.w	#$77,$3C(a0)
00019968                            
00019968                            loc_17916:
00019968 6000 FED2                  		bra.w	loc_177E6
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001996C 5368 003C                  		subq.w	#1,$3C(a0)
00019970 6A00                       		bpl.s	Obj3D_Reverse
00019972 5428 0025                  		addq.b	#2,$25(a0)
00019976 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001997C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019982 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019988 6600                       		bne.s	Obj3D_Reverse
0001998A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019990 317C 0040 0010             		move.w	#$40,$10(a0)
00019996                            
00019996                            Obj3D_Reverse:
00019996 0828 0000 0022             		btst	#0,$22(a0)
0001999C 6600                       		bne.s	loc_17950
0001999E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000199A2                            
000199A2                            loc_17950:
000199A2 6000 FE98                  		bra.w	loc_177E6
000199A6                            ; ===========================================================================
000199A6                            
000199A6                            loc_17954:				; XREF: Obj3D_ShipIndex
000199A6 5368 003C                  		subq.w	#1,$3C(a0)
000199AA 6B00                       		bmi.s	loc_17960
000199AC 6100 FF4A                  		bsr.w	BossMove
000199B0 6000                       		bra.s	loc_17976
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            loc_17960:
000199B2 0868 0000 0022             		bchg	#0,$22(a0)
000199B8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000199BE 5528 0025                  		subq.b	#2,$25(a0)
000199C2 317C 0000 0010             		move.w	#0,$10(a0)
000199C8                            
000199C8                            loc_17976:
000199C8 6000 FE72                  		bra.w	loc_177E6
000199CC                            ; ===========================================================================
000199CC                            
000199CC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000199CC 5368 003C                  		subq.w	#1,$3C(a0)
000199D0 6B00                       		bmi.s	loc_17984
000199D2 6000 FEE2                  		bra.w	BossDefeated
000199D6                            ; ===========================================================================
000199D6                            
000199D6                            loc_17984:
000199D6 08E8 0000 0022             		bset	#0,$22(a0)
000199DC 08A8 0007 0022             		bclr	#7,$22(a0)
000199E2 4268 0010                  		clr.w	$10(a0)
000199E6 5428 0025                  		addq.b	#2,$25(a0)
000199EA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000199F0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000199F4 6600                       		bne.s	locret_179AA
000199F6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000199FC                            
000199FC                            locret_179AA:
000199FC 4E75                       		rts	
000199FE                            ; ===========================================================================
000199FE                            
000199FE                            loc_179AC:				; XREF: Obj3D_ShipIndex
000199FE 5268 003C                  		addq.w	#1,$3C(a0)
00019A02 6700                       		beq.s	loc_179BC
00019A04 6A00                       		bpl.s	loc_179C2
00019A06 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A0C 6000                       		bra.s	loc_179EE
00019A0E                            ; ===========================================================================
00019A0E                            
00019A0E                            loc_179BC:
00019A0E 4268 0012                  		clr.w	$12(a0)
00019A12 6000                       		bra.s	loc_179EE
00019A14                            ; ===========================================================================
00019A14                            
00019A14                            loc_179C2:
00019A14 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019A1A 6500                       		bcs.s	loc_179DA
00019A1C 6700                       		beq.s	loc_179E0
00019A1E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019A24 6500                       		bcs.s	loc_179EE
00019A26 5428 0025                  		addq.b	#2,$25(a0)
00019A2A 6000                       		bra.s	loc_179EE
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            loc_179DA:
00019A2C 5168 0012                  		subq.w	#8,$12(a0)
00019A30 6000                       		bra.s	loc_179EE
00019A32                            ; ===========================================================================
00019A32                            
00019A32                            loc_179E0:
00019A32 4268 0012                  		clr.w	$12(a0)
00019A36                            		
00019A36 6100 0000                  		bsr.w	BossEnd
00019A3A                            
00019A3A                            loc_179EE:
00019A3A 6100 FEBC                  		bsr.w	BossMove
00019A3E 6000 FDFC                  		bra.w	loc_177E6
00019A42                            ; ===========================================================================
00019A42                            
00019A42                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019A42 317C 0400 0010             		move.w	#$400,$10(a0)
00019A48 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019A4E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019A54 6700                       		beq.s	loc_17A10
00019A56 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019A5A 6000                       		bra.s	loc_17A16
00019A5C                            ; ===========================================================================
00019A5C                            
00019A5C                            loc_17A10:
00019A5C 4A28 0001                  		tst.b	1(a0)
00019A60 6A00                       		bpl.s	Obj3D_ShipDel
00019A62                            
00019A62                            loc_17A16:
00019A62 6100 FE94                  		bsr.w	BossMove
00019A66 6000 FDD4                  		bra.w	loc_177E6
00019A6A                            ; ===========================================================================
00019A6A                            
00019A6A                            Obj3D_ShipDel:
00019A6A 4EF9 0000 F120             		jmp	DeleteObject
00019A70                            ; ===========================================================================
00019A70                            
00019A70                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019A70 7000                       		moveq	#0,d0
00019A72 7201                       		moveq	#1,d1
00019A74 2268 0034                  		movea.l	$34(a0),a1
00019A78 1029 0025                  		move.b	$25(a1),d0
00019A7C 5900                       		subq.b	#4,d0
00019A7E 6600                       		bne.s	loc_17A3E
00019A80 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019A86 6600                       		bne.s	loc_17A46
00019A88 7204                       		moveq	#4,d1
00019A8A                            
00019A8A                            loc_17A3E:
00019A8A 5D00                       		subq.b	#6,d0
00019A8C 6B00                       		bmi.s	loc_17A46
00019A8E 720A                       		moveq	#$A,d1
00019A90 6000                       		bra.s	loc_17A5A
00019A92                            ; ===========================================================================
00019A92                            
00019A92                            loc_17A46:
00019A92 4A29 0020                  		tst.b	$20(a1)
00019A96 6600                       		bne.s	loc_17A50
00019A98 7205                       		moveq	#5,d1
00019A9A 6000                       		bra.s	loc_17A5A
00019A9C                            ; ===========================================================================
00019A9C                            
00019A9C                            loc_17A50:
00019A9C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019AA2 6500                       		bcs.s	loc_17A5A
00019AA4 7204                       		moveq	#4,d1
00019AA6                            
00019AA6                            loc_17A5A:
00019AA6 1141 001C                  		move.b	d1,$1C(a0)
00019AAA 5500                       		subq.b	#2,d0
00019AAC 6600                       		bne.s	Obj3D_FaceDisp
00019AAE 117C 0006 001C             		move.b	#6,$1C(a0)
00019AB4 4A28 0001                  		tst.b	1(a0)
00019AB8 6A00                       		bpl.s	Obj3D_FaceDel
00019ABA                            
00019ABA                            Obj3D_FaceDisp:
00019ABA 6000                       		bra.s	Obj3D_Display
00019ABC                            ; ===========================================================================
00019ABC                            
00019ABC                            Obj3D_FaceDel:
00019ABC 4EF9 0000 F120             		jmp	DeleteObject
00019AC2                            ; ===========================================================================
00019AC2                            
00019AC2                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019AC2 117C 0007 001C             		move.b	#7,$1C(a0)
00019AC8 2268 0034                  		movea.l	$34(a0),a1
00019ACC 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019AD2 6600                       		bne.s	loc_17A96
00019AD4 117C 000B 001C             		move.b	#$B,$1C(a0)
00019ADA 4A28 0001                  		tst.b	1(a0)
00019ADE 6A00                       		bpl.s	Obj3D_FlameDel
00019AE0 6000                       		bra.s	Obj3D_FlameDisp
00019AE2                            ; ===========================================================================
00019AE2                            
00019AE2                            loc_17A96:
00019AE2 3029 0010                  		move.w	$10(a1),d0
00019AE6 6700                       		beq.s	Obj3D_FlameDisp
00019AE8 117C 0008 001C             		move.b	#8,$1C(a0)
00019AEE                            
00019AEE                            Obj3D_FlameDisp:
00019AEE 6000                       		bra.s	Obj3D_Display
00019AF0                            ; ===========================================================================
00019AF0                            
00019AF0                            Obj3D_FlameDel:
00019AF0 4EF9 0000 F120             		jmp	DeleteObject
00019AF6                            ; ===========================================================================
00019AF6                            
00019AF6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019AF6 2268 0034                  		movea.l	$34(a0),a1
00019AFA 3169 0008 0008             		move.w	8(a1),8(a0)
00019B00 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B06 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019B0C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019B12 4EB9 0000 C138             		jsr	AnimateSprite
00019B18 1028 0022                  		move.b	$22(a0),d0
00019B1C 0200 0003                  		andi.b	#3,d0
00019B20 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B26 8128 0001                  		or.b	d0,1(a0)
00019B2A 4EF9 0000 F0E4             		jmp	DisplaySprite
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            BossEnd:
00019B30 7000                       		moveq	#0,d0
00019B32 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00019B36 4E75                       		rts
00019B38                            ; ===========================================================================
00019B38                            ; LEVEL MUSIC CONTROLLER
00019B38                            ; ===========================================================================
00019B38                            
00019B38                            CtrlLevelMusic:
00019B38 4A38 FFBC                  		tst.b	($FFFFFFBC).w		; Has Sonic drowned?
00019B3C 6600                       		bne.s	@end				; If so, skip all this
00019B3E 1038 FFFE                  		move.b	($FFFFFFFE).w,d0	; Level music
00019B42 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019B46 6700                       		beq.s	@chk_spdshoes		; If not, check if he has speed shoes
00019B48 103C 0087                  		move.b	#$87,d0				; Invincibility music
00019B4C                            		
00019B4C                            @chk_spdshoes:
00019B4C 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does he have speed shoes?
00019B50 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019B52 103C 0095                  		move.b	#$95,d0				; Speed shoes music
00019B56 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019B5A 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019B5C 103C 0096                  		move.b	#$96,d0				; Speed shoes + invincibility music
00019B60                            		
00019B60                            @chk_boss:
00019B60 4A38 FFFF                  		tst.b	($FFFFFFFF).w		; Is there a boss?
00019B64 6700                       		beq.s	@chk_drowning		; If not, check if Sonic is drowning
00019B66 7200                       		moveq	#0,d1				; Clear d1
00019B68 1238 FE10                  		move.b	($FFFFFE10).w,d1	; Set boss number
00019B6C 43F9 0000 50FC             		lea	(MusicList_Bosses).l,a1	; Load Music Playlist for bosses
00019B72 1031 1000                  		move.b	(a1,d1.w),d0		; Set music ID
00019B76                            		
00019B76                            @chk_drowning:
00019B76 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; Check air remaining
00019B7C 6400                       		bcc.s	@chk_value			; If air is above $C, branch
00019B7E 103C 0092                  		move.b	#$92,d0				; Drowning music
00019B82                            		
00019B82                            @chk_value:
00019B82 1238 FFFC                  		move.b	($FFFFFFFC).w,d1	; Get current music playing
00019B86 B200                       		cmp.b	d0,d1				; If the value is the same,
00019B88 6600                       		bne.s	@play				; don't play it again
00019B8A                            		
00019B8A                            @end:
00019B8A 4E75                       		rts							; Return
00019B8C                            		
00019B8C                            @play:
00019B8C 4EF9 0000 12B6             		jmp	(PlayMusic).l			; Play music and return
00019B92                            ; ===========================================================================
00019B92                            ; ---------------------------------------------------------------------------
00019B92                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019B92                            ; ---------------------------------------------------------------------------
00019B92                            
00019B92                            Obj48:					; XREF: Obj_Index
00019B92 7000                       		moveq	#0,d0
00019B94 1028 0024                  		move.b	$24(a0),d0
00019B98 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019B9C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019BA0                            ; ===========================================================================
00019BA0 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019BA2 0000                       		dc.w Obj48_Base-Obj48_Index
00019BA4 0000                       		dc.w Obj48_Display2-Obj48_Index
00019BA6 0000                       		dc.w loc_17C68-Obj48_Index
00019BA8 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019BAA                            ; ===========================================================================
00019BAA                            
00019BAA                            Obj48_Main:				; XREF: Obj48_Index
00019BAA 5428 0024                  		addq.b	#2,$24(a0)
00019BAE 317C 4080 0026             		move.w	#$4080,$26(a0)
00019BB4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019BBA 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019BC2 317C 046C 0002             		move.w	#$46C,2(a0)
00019BC8 45E8 0028                  		lea	$28(a0),a2
00019BCC 14FC 0000                  		move.b	#0,(a2)+
00019BD0 7205                       		moveq	#5,d1
00019BD2 2248                       		movea.l	a0,a1
00019BD4 6000                       		bra.s	loc_17B60
00019BD6                            ; ===========================================================================
00019BD6                            
00019BD6                            Obj48_MakeLinks:
00019BD6 4EB9 0000 F58E             		jsr	SingleObjLoad2
00019BDC 6600                       		bne.s	Obj48_MakeBall
00019BDE 3368 0008 0008             		move.w	8(a0),8(a1)
00019BE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BEA 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019BEE 137C 0006 0024             		move.b	#6,$24(a1)
00019BF4 237C 0000 963A 0004        		move.l	#Map_obj15,4(a1)
00019BFC 337C 0380 0002             		move.w	#$380,2(a1)
00019C02 137C 0001 001A             		move.b	#1,$1A(a1)
00019C08 5228 0028                  		addq.b	#1,$28(a0)
00019C0C                            
00019C0C                            loc_17B60:				; XREF: Obj48_Main
00019C0C 3A09                       		move.w	a1,d5
00019C0E 0445 D000                  		subi.w	#$D000,d5
00019C12 EC4D                       		lsr.w	#6,d5
00019C14 0245 007F                  		andi.w	#$7F,d5
00019C18 14C5                       		move.b	d5,(a2)+
00019C1A 137C 0004 0001             		move.b	#4,1(a1)
00019C20 137C 0008 0019             		move.b	#8,$19(a1)
00019C26 137C 0006 0018             		move.b	#6,$18(a1)
00019C2C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019C32 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019C36                            
00019C36                            Obj48_MakeBall:
00019C36 137C 0008 0024             		move.b	#8,$24(a1)
00019C3C 237C 0000 9B98 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019C44 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019C4A 137C 0001 001A             		move.b	#1,$1A(a1)
00019C50 137C 0005 0018             		move.b	#5,$18(a1)
00019C56 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019C5C 4E75                       		rts	
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019C64                            
00019C64                            ; ===========================================================================
00019C64                            
00019C64                            Obj48_Base:				; XREF: Obj48_Index
00019C64 47F9 0001 9C5E             		lea	(Obj48_PosData).l,a3
00019C6A 45E8 0028                  		lea	$28(a0),a2
00019C6E 7C00                       		moveq	#0,d6
00019C70 1C1A                       		move.b	(a2)+,d6
00019C72                            
00019C72                            loc_17BC6:
00019C72 7800                       		moveq	#0,d4
00019C74 181A                       		move.b	(a2)+,d4
00019C76 ED4C                       		lsl.w	#6,d4
00019C78 0684 00FF D000             		addi.l	#$FFD000,d4
00019C7E 2244                       		movea.l	d4,a1
00019C80 101B                       		move.b	(a3)+,d0
00019C82 B029 003C                  		cmp.b	$3C(a1),d0
00019C86 6700                       		beq.s	loc_17BE0
00019C88 5229 003C                  		addq.b	#1,$3C(a1)
00019C8C                            
00019C8C                            loc_17BE0:
00019C8C 51CE FFE4                  		dbf	d6,loc_17BC6
00019C90                            
00019C90 B029 003C                  		cmp.b	$3C(a1),d0
00019C94 6600                       		bne.s	loc_17BFA
00019C96 2268 0034                  		movea.l	$34(a0),a1
00019C9A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019CA0 6600                       		bne.s	loc_17BFA
00019CA2 5428 0024                  		addq.b	#2,$24(a0)
00019CA6                            
00019CA6                            loc_17BFA:
00019CA6 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019CAC 6700                       		beq.s	Obj48_Display
00019CAE 5268 0032                  		addq.w	#1,$32(a0)
00019CB2                            
00019CB2                            Obj48_Display:
00019CB2 6100 0000                  		bsr.w	sub_17C2A
00019CB6 1028 0026                  		move.b	$26(a0),d0
00019CBA 4EB9 0000 95AC             		jsr	(Obj15_Move2).l
00019CC0 4EF9 0000 F0E4             		jmp	DisplaySprite
00019CC6                            ; ===========================================================================
00019CC6                            
00019CC6                            Obj48_Display2:				; XREF: Obj48_Index
00019CC6 6100 0000                  		bsr.w	sub_17C2A
00019CCA 4EB9 0000 956C             		jsr	(Obj48_Move).l
00019CD0 4EF9 0000 F0E4             		jmp	DisplaySprite
00019CD6                            
00019CD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CD6                            
00019CD6                            
00019CD6                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019CD6 2268 0034                  		movea.l	$34(a0),a1
00019CDA 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019CE0 6400                       		bcc.s	loc_17C3C
00019CE2 0868 0000 001A             		bchg	#0,$1A(a0)
00019CE8                            
00019CE8                            loc_17C3C:
00019CE8 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019CEE 3029 000C                  		move.w	$C(a1),d0
00019CF2 D068 0032                  		add.w	$32(a0),d0
00019CF6 3140 0038                  		move.w	d0,$38(a0)
00019CFA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019D00 4A29 0022                  		tst.b	$22(a1)
00019D04 6A00                       		bpl.s	locret_17C66
00019D06 10BC 003F                  		move.b	#$3F,0(a0)
00019D0A 117C 0000 0024             		move.b	#0,$24(a0)
00019D10                            
00019D10                            locret_17C66:
00019D10 4E75                       		rts	
00019D12                            ; End of function sub_17C2A
00019D12                            
00019D12                            ; ===========================================================================
00019D12                            
00019D12                            loc_17C68:				; XREF: Obj48_Index
00019D12 2268 0034                  		movea.l	$34(a0),a1
00019D16 4A29 0022                  		tst.b	$22(a1)
00019D1A 6A00                       		bpl.s	Obj48_Display3
00019D1C 10BC 003F                  		move.b	#$3F,0(a0)
00019D20 117C 0000 0024             		move.b	#0,$24(a0)
00019D26                            
00019D26                            Obj48_Display3:
00019D26 4EF9 0000 F0E4             		jmp	DisplaySprite
00019D2C                            ; ===========================================================================
00019D2C                            
00019D2C                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019D2C 7000                       		moveq	#0,d0
00019D2E 4A28 001A                  		tst.b	$1A(a0)
00019D32 6600                       		bne.s	Obj48_Vanish
00019D34 5200                       		addq.b	#1,d0
00019D36                            
00019D36                            Obj48_Vanish:
00019D36 1140 001A                  		move.b	d0,$1A(a0)
00019D3A 2268 0034                  		movea.l	$34(a0),a1
00019D3E 4A29 0022                  		tst.b	$22(a1)
00019D42 6A00                       		bpl.s	Obj48_Display4
00019D44 117C 0000 0020             		move.b	#0,$20(a0)
00019D4A 6100 FB6A                  		bsr.w	BossDefeated
00019D4E 5328 003C                  		subq.b	#1,$3C(a0)
00019D52 6A00                       		bpl.s	Obj48_Display4
00019D54 10BC 003F                  		move.b	#$3F,(a0)
00019D58 117C 0000 0024             		move.b	#0,$24(a0)
00019D5E                            
00019D5E                            Obj48_Display4:
00019D5E 4EF9 0000 F0E4             		jmp	DisplaySprite
00019D64                            ; ===========================================================================
00019D64                            Ani_Eggman:
00019D64                            	include "_anim\Eggman.asm"
00019D64                            ; ---------------------------------------------------------------------------
00019D64                            ; Animation script - Eggman (bosses)
00019D64                            ; ---------------------------------------------------------------------------
00019D64 0000                       		dc.w byte_17CD4-Ani_Eggman
00019D66 0000                       		dc.w byte_17CD8-Ani_Eggman
00019D68 0000                       		dc.w byte_17CDC-Ani_Eggman
00019D6A 0000                       		dc.w byte_17CE0-Ani_Eggman
00019D6C 0000                       		dc.w byte_17CE4-Ani_Eggman
00019D6E 0000                       		dc.w byte_17CE8-Ani_Eggman
00019D70 0000                       		dc.w byte_17CEC-Ani_Eggman
00019D72 0000                       		dc.w byte_17CF0-Ani_Eggman
00019D74 0000                       		dc.w byte_17CF4-Ani_Eggman
00019D76 0000                       		dc.w byte_17CF8-Ani_Eggman
00019D78 0000                       		dc.w byte_17CFC-Ani_Eggman
00019D7A 0000                       		dc.w byte_17D00-Ani_Eggman
00019D7C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019D80 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019D84 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019D88 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019D8C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019D90 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019D94 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019D98 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019D9C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019DA0 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019DA4 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019DA8 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019DB4                            		even
00019DB4                            		even
00019DB4                            
00019DB4                            ; ---------------------------------------------------------------------------
00019DB4                            ; Sprite mappings - Eggman (boss levels)
00019DB4                            ; ---------------------------------------------------------------------------
00019DB4                            Map_Eggman:
00019DB4                            	include "_maps\Eggman.asm"
00019DB4                            ; ---------------------------------------------------------------------------
00019DB4                            ; Sprite mappings - Eggman (boss levels)
00019DB4                            ; ---------------------------------------------------------------------------
00019DB4 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019DB8 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019DBC 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019DC0 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019DC4 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019DC8 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019DCC 0000                       		dc.w byte_17DC8-Map_Eggman
00019DCE 06                         byte_17D26:	dc.b 6
00019DCF EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019DD4 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019DD9 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019DDE FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019DE3 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019DE8 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019DED 02                         byte_17D45:	dc.b 2
00019DEE E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019DF3 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019DF8 02                         byte_17D50:	dc.b 2
00019DF9 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019DFE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019E03 03                         byte_17D5B:	dc.b 3
00019E04 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019E09 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019E0E EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019E13 03                         byte_17D6B:	dc.b 3
00019E14 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019E19 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019E1E EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019E23 03                         byte_17D7B:	dc.b 3
00019E24 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E29 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E2E EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E33 03                         byte_17D8B:	dc.b 3
00019E34 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019E39 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E3E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019E43 04                         byte_17D9B:	dc.b 4
00019E44 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019E49 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E4E EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E53 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E58 01                         byte_17DB0:	dc.b 1
00019E59 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019E5E 01                         byte_17DB6:	dc.b 1
00019E5F 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019E64 00                         byte_17DBC:	dc.b 0
00019E65 02                         byte_17DBD:	dc.b 2
00019E66 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019E6B 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019E70 02                         byte_17DC8:	dc.b 2
00019E71 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019E76 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019E7C 00                         		even
00019E7C 00                         		even
00019E7C                            
00019E7C                            ; ---------------------------------------------------------------------------
00019E7C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E7C                            ; ---------------------------------------------------------------------------
00019E7C                            Map_BossItems:
00019E7C                            	include "_maps\Boss items.asm"
00019E7C                            ; ---------------------------------------------------------------------------
00019E7C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E7C                            ; ---------------------------------------------------------------------------
00019E7C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019E80 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019E84 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019E88 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019E8C 01                         byte_17DE4:	dc.b 1
00019E8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E92 02                         byte_17DEA:	dc.b 2
00019E93 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019E98 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E9D 00                         		dc.b 0
00019E9E 01                         byte_17DF6:	dc.b 1
00019E9F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019EA4 01                         byte_17DFC:	dc.b 1
00019EA5 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019EAA 01                         byte_17E02:	dc.b 1
00019EAB 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019EB0 04                         byte_17E08:	dc.b 4
00019EB1 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019EB6 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019EBB F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019EC0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019EC5 00                         		dc.b 0
00019EC6 02                         byte_17E1E:	dc.b 2
00019EC7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019ECC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019ED1 00                         		dc.b 0
00019ED2 02                         byte_17E2A:	dc.b 2
00019ED3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019ED8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019EDE 00                         		even
00019EDE 00                         		even
00019EDE                            
00019EDE                            ; ===========================================================================
00019EDE                            ; ---------------------------------------------------------------------------
00019EDE                            ; Object 77 - Eggman (LZ)
00019EDE                            ; ---------------------------------------------------------------------------
00019EDE                            
00019EDE                            Obj77:					; XREF: Obj_Index
00019EDE 7000                       		moveq	#0,d0
00019EE0 1028 0024                  		move.b	$24(a0),d0
00019EE4 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019EE8 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019EEC                            ; ===========================================================================
00019EEC 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019EEE 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019EF0 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019EF2 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019EF4                            
00019EF4 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019EF6 0401                       		dc.b 4,	1
00019EF8 0607                       		dc.b 6,	7
00019EFA                            ; ===========================================================================
00019EFA                            
00019EFA                            Obj77_Main:				; XREF: Obj77_Index
00019EFA 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019F00 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019F06 3168 0008 0030             		move.w	8(a0),$30(a0)
00019F0C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019F12 117C 000F 0020             		move.b	#$F,$20(a0)
00019F18 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F1E 117C 0004 0018             		move.b	#4,$18(a0)
00019F24 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019F28 2248                       		movea.l	a0,a1
00019F2A 7202                       		moveq	#2,d1
00019F2C 6000                       		bra.s	Obj77_LoadBoss
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            Obj77_Loop:
00019F2E 4EB9 0000 F58E             		jsr	SingleObjLoad2
00019F34 6600                       		bne.s	Obj77_ShipMain
00019F36 12BC 0077                  		move.b	#$77,0(a1)
00019F3A 3368 0008 0008             		move.w	8(a0),8(a1)
00019F40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F46                            
00019F46                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019F46 08A8 0000 0022             		bclr	#0,$22(a0)
00019F4C 4229 0025                  		clr.b	$25(a1)
00019F50 135A 0024                  		move.b	(a2)+,$24(a1)
00019F54 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F58 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019F5E 237C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a1)
00019F66 337C 0400 0002             		move.w	#$400,2(a1)
00019F6C 137C 0004 0001             		move.b	#4,1(a1)
00019F72 137C 0020 0019             		move.b	#$20,$19(a1)
00019F78 2348 0034                  		move.l	a0,$34(a1)
00019F7C 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019F80                            
00019F80                            Obj77_ShipMain:
00019F80 43F8 D000                  		lea	($FFFFD000).w,a1
00019F84 7000                       		moveq	#0,d0
00019F86 1028 0025                  		move.b	$25(a0),d0
00019F8A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019F8E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019F92 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
00019F98 4EB9 0000 C138             		jsr	AnimateSprite
00019F9E 7003                       		moveq	#3,d0
00019FA0 C028 0022                  		and.b	$22(a0),d0
00019FA4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019FAA 8128 0001                  		or.b	d0,1(a0)
00019FAE 4EF9 0000 F0E4             		jmp	DisplaySprite
00019FB4                            ; ===========================================================================
00019FB4 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019FB8 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019FBC 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019FC0 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019FC4                            ; ===========================================================================
00019FC4                            
00019FC4                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019FC4 3029 0008                  		move.w	8(a1),d0
00019FC8 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019FCC 6500                       		bcs.s	loc_17F38
00019FCE 317C FE80 0012             		move.w	#-$180,$12(a0)
00019FD4 317C 0060 0010             		move.w	#$60,$10(a0)
00019FDA 5428 0025                  		addq.b	#2,$25(a0)
00019FDE                            
00019FDE                            loc_17F38:
00019FDE 6100 F918                  		bsr.w	BossMove
00019FE2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019FE8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019FEE                            
00019FEE                            loc_17F48:
00019FEE 4A28 003D                  		tst.b	$3D(a0)
00019FF2 6600                       		bne.s	loc_17F8E
00019FF4 4A28 0022                  		tst.b	$22(a0)
00019FF8 6B00                       		bmi.s	loc_17F92
00019FFA 4A28 0020                  		tst.b	$20(a0)
00019FFE 6600                       		bne.s	locret_17F8C
0001A000 4A28 003E                  		tst.b	$3E(a0)
0001A004 6600                       		bne.s	loc_17F70
0001A006 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A00C 303C 00AC                  		move.w	#$AC,d0
0001A010 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001A016                            
0001A016                            loc_17F70:
0001A016 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A01A 7000                       		moveq	#0,d0
0001A01C 4A51                       		tst.w	(a1)
0001A01E 6600                       		bne.s	loc_17F7E
0001A020 303C 0EEE                  		move.w	#$EEE,d0
0001A024                            
0001A024                            loc_17F7E:
0001A024 3280                       		move.w	d0,(a1)
0001A026 5328 003E                  		subq.b	#1,$3E(a0)
0001A02A 6600                       		bne.s	locret_17F8C
0001A02C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A032                            
0001A032                            locret_17F8C:
0001A032 4E75                       		rts	
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            loc_17F8E:				; XREF: loc_17F48
0001A034 6000 F880                  		bra.w	BossDefeated
0001A038                            ; ===========================================================================
0001A038                            
0001A038                            loc_17F92:				; XREF: loc_17F48
0001A038 7064                       		moveq	#100,d0
0001A03A 6100 0000                  		bsr.w	AddPoints
0001A03E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A044 4E75                       		rts	
0001A046                            ; ===========================================================================
0001A046                            
0001A046                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A046 70FE                       		moveq	#-2,d0
0001A048 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A04E 6500                       		bcs.s	loc_17FB6
0001A050 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A056 4268 0010                  		clr.w	$10(a0)
0001A05A 5240                       		addq.w	#1,d0
0001A05C                            
0001A05C                            loc_17FB6:
0001A05C 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A062 6E00                       		bgt.s	loc_17FCA
0001A064 317C 0500 0038             		move.w	#$500,$38(a0)
0001A06A 4268 0012                  		clr.w	$12(a0)
0001A06E 5240                       		addq.w	#1,d0
0001A070                            
0001A070                            loc_17FCA:
0001A070 6600                       		bne.s	loc_17FDC
0001A072 317C 0140 0010             		move.w	#$140,$10(a0)
0001A078 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A07E 5428 0025                  		addq.b	#2,$25(a0)
0001A082                            
0001A082                            loc_17FDC:
0001A082 6000 FF5A                  		bra.w	loc_17F38
0001A086                            ; ===========================================================================
0001A086                            
0001A086                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A086 70FE                       		moveq	#-2,d0
0001A088 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A08E 6500                       		bcs.s	loc_17FF6
0001A090 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A096 4268 0010                  		clr.w	$10(a0)
0001A09A 5240                       		addq.w	#1,d0
0001A09C                            
0001A09C                            loc_17FF6:
0001A09C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A0A2 6E00                       		bgt.s	loc_1800A
0001A0A4 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A0AA 4268 0012                  		clr.w	$12(a0)
0001A0AE 5240                       		addq.w	#1,d0
0001A0B0                            
0001A0B0                            loc_1800A:
0001A0B0 6600                       		bne.s	loc_1801A
0001A0B2 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A0B8 5428 0025                  		addq.b	#2,$25(a0)
0001A0BC 4228 003F                  		clr.b	$3F(a0)
0001A0C0                            
0001A0C0                            loc_1801A:
0001A0C0 6000 FF1C                  		bra.w	loc_17F38
0001A0C4                            ; ===========================================================================
0001A0C4                            
0001A0C4                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A0C4 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A0CA 6E00                       		bgt.s	loc_1804E
0001A0CC 317C 0100 0038             		move.w	#$100,$38(a0)
0001A0D2 317C 0140 0010             		move.w	#$140,$10(a0)
0001A0D8 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A0DE 4A28 003D                  		tst.b	$3D(a0)
0001A0E2 6700                       		beq.s	loc_18046
0001A0E4 E1E8 0010                  		asl	$10(a0)
0001A0E8 E1E8 0012                  		asl	$12(a0)
0001A0EC                            
0001A0EC                            loc_18046:
0001A0EC 5428 0025                  		addq.b	#2,$25(a0)
0001A0F0 6000 FEEC                  		bra.w	loc_17F38
0001A0F4                            ; ===========================================================================
0001A0F4                            
0001A0F4                            loc_1804E:
0001A0F4 08E8 0000 0022             		bset	#0,$22(a0)
0001A0FA 5428 003F                  		addq.b	#2,$3F(a0)
0001A0FE 1028 003F                  		move.b	$3F(a0),d0
0001A102 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A108 4A41                       		tst.w	d1
0001A10A 6A00                       		bpl.s	loc_1806C
0001A10C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A112                            
0001A112                            loc_1806C:
0001A112 E840                       		asr.w	#4,d0
0001A114 4840                       		swap	d0
0001A116 4240                       		clr.w	d0
0001A118 D0A8 0030                  		add.l	$30(a0),d0
0001A11C 4840                       		swap	d0
0001A11E 3140 0008                  		move.w	d0,8(a0)
0001A122 3028 0012                  		move.w	$12(a0),d0
0001A126 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A12A 9268 000C                  		sub.w	$C(a0),d1
0001A12E 6500                       		bcs.s	loc_180A2
0001A130 0441 0048                  		subi.w	#$48,d1
0001A134 6500                       		bcs.s	loc_180A2
0001A136 E240                       		asr.w	#1,d0
0001A138 0441 0028                  		subi.w	#$28,d1
0001A13C 6500                       		bcs.s	loc_180A2
0001A13E E240                       		asr.w	#1,d0
0001A140 0441 0028                  		subi.w	#$28,d1
0001A144 6500                       		bcs.s	loc_180A2
0001A146 7000                       		moveq	#0,d0
0001A148                            
0001A148                            loc_180A2:
0001A148 48C0                       		ext.l	d0
0001A14A E180                       		asl.l	#8,d0
0001A14C 4A28 003D                  		tst.b	$3D(a0)
0001A150 6700                       		beq.s	loc_180AE
0001A152 D080                       		add.l	d0,d0
0001A154                            
0001A154                            loc_180AE:
0001A154 D1A8 0038                  		add.l	d0,$38(a0)
0001A158 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A15E 6000 FE8E                  		bra.w	loc_17F48
0001A162                            ; ===========================================================================
0001A162                            
0001A162                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A162 70FE                       		moveq	#-2,d0
0001A164 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A16A 6500                       		bcs.s	loc_180D2
0001A16C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A172 4268 0010                  		clr.w	$10(a0)
0001A176 5240                       		addq.w	#1,d0
0001A178                            
0001A178                            loc_180D2:
0001A178 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A17E 6E00                       		bgt.s	loc_180E6
0001A180 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A186 4268 0012                  		clr.w	$12(a0)
0001A18A 5240                       		addq.w	#1,d0
0001A18C                            
0001A18C                            loc_180E6:
0001A18C 6600                       		bne.s	loc_180F2
0001A18E 5428 0025                  		addq.b	#2,$25(a0)
0001A192 08A8 0000 0022             		bclr	#0,$22(a0)
0001A198                            
0001A198                            loc_180F2:
0001A198 6000 FE44                  		bra.w	loc_17F38
0001A19C                            ; ===========================================================================
0001A19C                            
0001A19C                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A19C 4A28 003D                  		tst.b	$3D(a0)
0001A1A0 6600                       		bne.s	loc_18112
0001A1A2 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A1A8 6D00                       		blt.s	loc_18126
0001A1AA 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A1B0 6E00                       		bgt.s	loc_18126
0001A1B2 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A1B8                            
0001A1B8                            loc_18112:
0001A1B8                            		
0001A1B8 6100 F976                  		bsr.w	BossEnd
0001A1BC                            		
0001A1BC 08E8 0000 0022             		bset	#0,$22(a0)
0001A1C2 5428 0025                  		addq.b	#2,$25(a0)
0001A1C6                            
0001A1C6                            loc_18126:
0001A1C6 6000 FE16                  		bra.w	loc_17F38
0001A1CA                            ; ===========================================================================
0001A1CA                            
0001A1CA                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A1CA 4A28 003D                  		tst.b	$3D(a0)
0001A1CE 6600                       		bne.s	loc_18136
0001A1D0 5328 003C                  		subq.b	#1,$3C(a0)
0001A1D4 6600                       		bne.s	loc_1814E
0001A1D6                            
0001A1D6                            loc_18136:
0001A1D6 4228 003C                  		clr.b	$3C(a0)
0001A1DA 317C 0400 0010             		move.w	#$400,$10(a0)
0001A1E0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A1E6 4228 003D                  		clr.b	$3D(a0)
0001A1EA 5428 0025                  		addq.b	#2,$25(a0)
0001A1EE                            
0001A1EE                            loc_1814E:
0001A1EE 6000 FDEE                  		bra.w	loc_17F38
0001A1F2                            ; ===========================================================================
0001A1F2                            
0001A1F2                            loc_18152:				; XREF: Obj77_ShipIndex
0001A1F2 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A1F8 6400                       		bcc.s	loc_18160
0001A1FA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A1FE 6000                       		bra.s	loc_18166
0001A200                            ; ===========================================================================
0001A200                            
0001A200                            loc_18160:
0001A200 4A28 0001                  		tst.b	1(a0)
0001A204 6A00                       		bpl.s	Obj77_ShipDel
0001A206                            
0001A206                            loc_18166:
0001A206 6000 FDD6                  		bra.w	loc_17F38
0001A20A                            ; ===========================================================================
0001A20A                            
0001A20A                            Obj77_ShipDel:
0001A20A 4EF9 0000 F120             		jmp	DeleteObject
0001A210                            ; ===========================================================================
0001A210                            
0001A210                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A210 2268 0034                  		movea.l	$34(a0),a1
0001A214 1011                       		move.b	(a1),d0
0001A216 B010                       		cmp.b	(a0),d0
0001A218 6600                       		bne.s	Obj77_FaceDel
0001A21A 7000                       		moveq	#0,d0
0001A21C 1029 0025                  		move.b	$25(a1),d0
0001A220 7201                       		moveq	#1,d1
0001A222 4A28 003D                  		tst.b	$3D(a0)
0001A226 6700                       		beq.s	loc_1818C
0001A228 720A                       		moveq	#$A,d1
0001A22A 6000                       		bra.s	loc_181A0
0001A22C                            ; ===========================================================================
0001A22C                            
0001A22C                            loc_1818C:
0001A22C 4A29 0020                  		tst.b	$20(a1)
0001A230 6600                       		bne.s	loc_18196
0001A232 7205                       		moveq	#5,d1
0001A234 6000                       		bra.s	loc_181A0
0001A236                            ; ===========================================================================
0001A236                            
0001A236                            loc_18196:
0001A236 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A23C 6500                       		bcs.s	loc_181A0
0001A23E 7204                       		moveq	#4,d1
0001A240                            
0001A240                            loc_181A0:
0001A240 1141 001C                  		move.b	d1,$1C(a0)
0001A244 0C00 000E                  		cmpi.b	#$E,d0
0001A248 6600                       		bne.s	loc_181B6
0001A24A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A250 4A28 0001                  		tst.b	1(a0)
0001A254 6A00                       		bpl.s	Obj77_FaceDel
0001A256                            
0001A256                            loc_181B6:
0001A256 6000                       		bra.s	Obj77_Display
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            Obj77_FaceDel:
0001A258 4EF9 0000 F120             		jmp	DeleteObject
0001A25E                            ; ===========================================================================
0001A25E                            
0001A25E                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A25E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A264 2268 0034                  		movea.l	$34(a0),a1
0001A268 1011                       		move.b	(a1),d0
0001A26A B010                       		cmp.b	(a0),d0
0001A26C 6600                       		bne.s	Obj77_FlameDel
0001A26E 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A274 6600                       		bne.s	loc_181F0
0001A276 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A27C 4A28 0001                  		tst.b	1(a0)
0001A280 6A00                       		bpl.s	Obj77_FlameDel
0001A282 6000                       		bra.s	loc_181F0
0001A284                            ; ===========================================================================
0001A284 4A69 0010                  		tst.w	$10(a1)
0001A288 6700                       		beq.s	loc_181F0
0001A28A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A290                            
0001A290                            loc_181F0:
0001A290 6000                       		bra.s	Obj77_Display
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A292 4EF9 0000 F120             		jmp	DeleteObject
0001A298                            ; ===========================================================================
0001A298                            
0001A298                            Obj77_Display:
0001A298 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001A29E 4EB9 0000 C138             		jsr	AnimateSprite
0001A2A4 2268 0034                  		movea.l	$34(a0),a1
0001A2A8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A2AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A2B4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A2BA 7003                       		moveq	#3,d0
0001A2BC C028 0022                  		and.b	$22(a0),d0
0001A2C0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A2C6 8128 0001                  		or.b	d0,1(a0)
0001A2CA 4EF9 0000 F0E4             		jmp	DisplaySprite
0001A2D0                            ; ===========================================================================
0001A2D0                            ; ---------------------------------------------------------------------------
0001A2D0                            ; Object 73 - Eggman (MZ)
0001A2D0                            ; ---------------------------------------------------------------------------
0001A2D0                            
0001A2D0                            Obj73:					; XREF: Obj_Index
0001A2D0 7000                       		moveq	#0,d0
0001A2D2 1028 0024                  		move.b	$24(a0),d0
0001A2D6 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A2DA 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A2DE                            ; ===========================================================================
0001A2DE 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A2E0 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A2E2 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A2E4 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A2E6 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A2E8                            
0001A2E8 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A2EB 0401 04                    		dc.b 4,	1, 4
0001A2EE 0607 04                    		dc.b 6,	7, 4
0001A2F1 0800 03                    		dc.b 8,	0, 3
0001A2F4                            ; ===========================================================================
0001A2F4                            
0001A2F4                            Obj73_Main:				; XREF: Obj73_Index
0001A2F4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A300 117C 000F 0020             		move.b	#$F,$20(a0)
0001A306 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A30C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A310 2248                       		movea.l	a0,a1
0001A312 7203                       		moveq	#3,d1
0001A314 6000                       		bra.s	Obj73_LoadBoss
0001A316                            ; ===========================================================================
0001A316                            
0001A316                            Obj73_Loop:
0001A316 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001A31C 6600                       		bne.s	Obj73_ShipMain
0001A31E 12BC 0073                  		move.b	#$73,0(a1)
0001A322 3368 0008 0008             		move.w	8(a0),8(a1)
0001A328 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A32E                            
0001A32E                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A32E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A334 4229 0025                  		clr.b	$25(a1)
0001A338 135A 0024                  		move.b	(a2)+,$24(a1)
0001A33C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A340 135A 0018                  		move.b	(a2)+,$18(a1)
0001A344 237C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a1)
0001A34C 337C 0400 0002             		move.w	#$400,2(a1)
0001A352 137C 0004 0001             		move.b	#4,1(a1)
0001A358 137C 0020 0019             		move.b	#$20,$19(a1)
0001A35E 2348 0034                  		move.l	a0,$34(a1)
0001A362 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A366                            
0001A366                            Obj73_ShipMain:
0001A366 7000                       		moveq	#0,d0
0001A368 1028 0025                  		move.b	$25(a0),d0
0001A36C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A370 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A374 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001A37A 4EB9 0000 C138             		jsr	AnimateSprite
0001A380 7003                       		moveq	#3,d0
0001A382 C028 0022                  		and.b	$22(a0),d0
0001A386 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A38C 8128 0001                  		or.b	d0,1(a0)
0001A390 4EF9 0000 F0E4             		jmp	DisplaySprite
0001A396                            ; ===========================================================================
0001A396 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A398 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A39A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A39C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A39E 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A3A0                            ; ===========================================================================
0001A3A0                            
0001A3A0                            loc_18302:				; XREF: Obj73_ShipIndex
0001A3A0 1028 003F                  		move.b	$3F(a0),d0
0001A3A4 5428 003F                  		addq.b	#2,$3F(a0)
0001A3A8 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A3AE E440                       		asr.w	#2,d0
0001A3B0 3140 0012                  		move.w	d0,$12(a0)
0001A3B4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A3BA 6100 F53C                  		bsr.w	BossMove
0001A3BE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A3C4 6600                       		bne.s	loc_18334
0001A3C6 5428 0025                  		addq.b	#2,$25(a0)
0001A3CA 4228 0028                  		clr.b	$28(a0)
0001A3CE 42A8 0010                  		clr.l	$10(a0)
0001A3D2                            
0001A3D2                            loc_18334:
0001A3D2 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A3D8 1140 0034                  		move.b	d0,$34(a0)
0001A3DC                            
0001A3DC                            loc_1833E:
0001A3DC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3E2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3E8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A3EE 6400                       		bcc.s	locret_18390
0001A3F0 4A28 0022                  		tst.b	$22(a0)
0001A3F4 6B00                       		bmi.s	loc_18392
0001A3F6 4A28 0020                  		tst.b	$20(a0)
0001A3FA 6600                       		bne.s	locret_18390
0001A3FC 4A28 003E                  		tst.b	$3E(a0)
0001A400 6600                       		bne.s	loc_18374
0001A402 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A408 303C 00AC                  		move.w	#$AC,d0
0001A40C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A412                            
0001A412                            loc_18374:
0001A412 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A416 7000                       		moveq	#0,d0
0001A418 4A51                       		tst.w	(a1)
0001A41A 6600                       		bne.s	loc_18382
0001A41C 303C 0EEE                  		move.w	#$EEE,d0
0001A420                            
0001A420                            loc_18382:
0001A420 3280                       		move.w	d0,(a1)
0001A422 5328 003E                  		subq.b	#1,$3E(a0)
0001A426 6600                       		bne.s	locret_18390
0001A428 117C 000F 0020             		move.b	#$F,$20(a0)
0001A42E                            
0001A42E                            locret_18390:
0001A42E 4E75                       		rts	
0001A430                            ; ===========================================================================
0001A430                            
0001A430                            loc_18392:				; XREF: loc_1833E
0001A430 7064                       		moveq	#100,d0
0001A432 6100 0000                  		bsr.w	AddPoints
0001A436 117C 0004 0025             		move.b	#4,$25(a0)
0001A43C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A442 4268 0010                  		clr.w	$10(a0)
0001A446 4E75                       		rts	
0001A448                            ; ===========================================================================
0001A448                            
0001A448                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A448 7000                       		moveq	#0,d0
0001A44A 1028 0028                  		move.b	$28(a0),d0
0001A44E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A452 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A456 0228 0006 0028             		andi.b	#6,$28(a0)
0001A45C 6000 FF7E                  		bra.w	loc_1833E
0001A460                            ; ===========================================================================
0001A460 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A462 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A464 0000                       		dc.w loc_183CA-off_183C2
0001A466 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A468                            ; ===========================================================================
0001A468                            
0001A468                            loc_183CA:				; XREF: off_183C2
0001A468 4A68 0010                  		tst.w	$10(a0)
0001A46C 6600                       		bne.s	loc_183FE
0001A46E 7040                       		moveq	#$40,d0
0001A470 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A476 6700                       		beq.s	loc_183E6
0001A478 6500                       		bcs.s	loc_183DE
0001A47A 4440                       		neg.w	d0
0001A47C                            
0001A47C                            loc_183DE:
0001A47C 3140 0012                  		move.w	d0,$12(a0)
0001A480 6000 F476                  		bra.w	BossMove
0001A484                            ; ===========================================================================
0001A484                            
0001A484                            loc_183E6:
0001A484 317C 0200 0010             		move.w	#$200,$10(a0)
0001A48A 317C 0100 0012             		move.w	#$100,$12(a0)
0001A490 0828 0000 0022             		btst	#0,$22(a0)
0001A496 6600                       		bne.s	loc_183FE
0001A498 4468 0010                  		neg.w	$10(a0)
0001A49C                            
0001A49C                            loc_183FE:
0001A49C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A4A2 6400                       		bcc.s	Obj73_MakeLava
0001A4A4 6100 F452                  		bsr.w	BossMove
0001A4A8 5968 0012                  		subq.w	#4,$12(a0)
0001A4AC                            
0001A4AC                            Obj73_MakeLava:
0001A4AC 5328 0034                  		subq.b	#1,$34(a0)
0001A4B0 6400                       		bcc.s	loc_1845C
0001A4B2 4EB9 0000 F578             		jsr	SingleObjLoad
0001A4B8 6600                       		bne.s	loc_1844A
0001A4BA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A4BE 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A4C4 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A4CA 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A4D0 80FC 0050                  		divu.w	#$50,d0
0001A4D4 4840                       		swap	d0
0001A4D6 0640 1878                  		addi.w	#$1878,d0
0001A4DA 3340 0008                  		move.w	d0,8(a1)
0001A4DE EE09                       		lsr.b	#7,d1
0001A4E0 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A4E6                            
0001A4E6                            loc_1844A:
0001A4E6 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A4EC 0200 001F                  		andi.b	#$1F,d0
0001A4F0 0600 0040                  		addi.b	#$40,d0
0001A4F4 1140 0034                  		move.b	d0,$34(a0)
0001A4F8                            
0001A4F8                            loc_1845C:
0001A4F8 0828 0000 0022             		btst	#0,$22(a0)
0001A4FE 6700                       		beq.s	loc_18474
0001A500 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A506 6D00                       		blt.s	locret_1849C
0001A508 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A50E 6000                       		bra.s	loc_18482
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            loc_18474:
0001A510 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A516 6E00                       		bgt.s	locret_1849C
0001A518 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A51E                            
0001A51E                            loc_18482:
0001A51E 4268 0010                  		clr.w	$10(a0)
0001A522 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A528 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A52E 6400                       		bcc.s	loc_18498
0001A530 4468 0012                  		neg.w	$12(a0)
0001A534                            
0001A534                            loc_18498:
0001A534 5428 0028                  		addq.b	#2,$28(a0)
0001A538                            
0001A538                            locret_1849C:
0001A538 4E75                       		rts	
0001A53A                            ; ===========================================================================
0001A53A                            
0001A53A                            Obj73_MakeLava2:			; XREF: off_183C2
0001A53A 6100 F3BC                  		bsr.w	BossMove
0001A53E 3028 0038                  		move.w	$38(a0),d0
0001A542 0440 022C                  		subi.w	#$22C,d0
0001A546 6E00                       		bgt.s	locret_184F4
0001A548 303C 022C                  		move.w	#$22C,d0
0001A54C 4A68 0012                  		tst.w	$12(a0)
0001A550 6700                       		beq.s	loc_184EA
0001A552 4268 0012                  		clr.w	$12(a0)
0001A556 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A55C 0868 0000 0022             		bchg	#0,$22(a0)
0001A562 4EB9 0000 F578             		jsr	SingleObjLoad
0001A568 6600                       		bne.s	loc_184EA
0001A56A 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A570 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A576 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A57C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A580 137C 0001 0028             		move.b	#1,$28(a1)
0001A586                            
0001A586                            loc_184EA:
0001A586 5368 003C                  		subq.w	#1,$3C(a0)
0001A58A 6600                       		bne.s	locret_184F4
0001A58C 5428 0028                  		addq.b	#2,$28(a0)
0001A590                            
0001A590                            locret_184F4:
0001A590 4E75                       		rts	
0001A592                            ; ===========================================================================
0001A592                            
0001A592                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A592 5368 003C                  		subq.w	#1,$3C(a0)
0001A596 6B00                       		bmi.s	loc_18500
0001A598 6000 F31C                  		bra.w	BossDefeated
0001A59C                            ; ===========================================================================
0001A59C                            
0001A59C                            loc_18500:
0001A59C 08E8 0000 0022             		bset	#0,$22(a0)
0001A5A2 08A8 0007 0022             		bclr	#7,$22(a0)
0001A5A8 4268 0010                  		clr.w	$10(a0)
0001A5AC 5428 0025                  		addq.b	#2,$25(a0)
0001A5B0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A5B6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A5BA 6600                       		bne.s	locret_1852A
0001A5BC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A5C2 4268 0012                  		clr.w	$12(a0)
0001A5C6                            
0001A5C6                            locret_1852A:
0001A5C6 4E75                       		rts	
0001A5C8                            ; ===========================================================================
0001A5C8                            
0001A5C8                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A5C8 5268 003C                  		addq.w	#1,$3C(a0)
0001A5CC 6700                       		beq.s	loc_18544
0001A5CE 6A00                       		bpl.s	loc_1854E
0001A5D0 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A5D6 6400                       		bcc.s	loc_18544
0001A5D8 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A5DE 6000                       		bra.s	loc_1857A
0001A5E0                            ; ===========================================================================
0001A5E0                            
0001A5E0                            loc_18544:
0001A5E0 4268 0012                  		clr.w	$12(a0)
0001A5E4 4268 003C                  		clr.w	$3C(a0)
0001A5E8 6000                       		bra.s	loc_1857A
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            loc_1854E:
0001A5EA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A5F0 6500                       		bcs.s	loc_18566
0001A5F2 6700                       		beq.s	loc_1856C
0001A5F4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A5FA 6500                       		bcs.s	loc_1857A
0001A5FC 5428 0025                  		addq.b	#2,$25(a0)
0001A600 6000                       		bra.s	loc_1857A
0001A602                            ; ===========================================================================
0001A602                            
0001A602                            loc_18566:
0001A602 5168 0012                  		subq.w	#8,$12(a0)
0001A606 6000                       		bra.s	loc_1857A
0001A608                            ; ===========================================================================
0001A608                            
0001A608                            loc_1856C:
0001A608 4268 0012                  		clr.w	$12(a0)
0001A60C 6100 F522                  		bsr.w	BossEnd
0001A610                            
0001A610                            loc_1857A:
0001A610 6100 F2E6                  		bsr.w	BossMove
0001A614 6000 FDC6                  		bra.w	loc_1833E
0001A618                            ; ===========================================================================
0001A618                            
0001A618                            loc_18582:				; XREF: Obj73_ShipIndex
0001A618 317C 0500 0010             		move.w	#$500,$10(a0)
0001A61E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A624 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A62A 6400                       		bcc.s	loc_1859C
0001A62C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A630 6000                       		bra.s	loc_185A2
0001A632                            ; ===========================================================================
0001A632                            
0001A632                            loc_1859C:
0001A632 4A28 0001                  		tst.b	1(a0)
0001A636 6A00                       		bpl.s	Obj73_ShipDel
0001A638                            
0001A638                            loc_185A2:
0001A638 6100 F2BE                  		bsr.w	BossMove
0001A63C 6000 FD9E                  		bra.w	loc_1833E
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            Obj73_ShipDel:
0001A640 4EF9 0000 F120             		jmp	DeleteObject
0001A646                            ; ===========================================================================
0001A646                            
0001A646                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A646 7000                       		moveq	#0,d0
0001A648 7201                       		moveq	#1,d1
0001A64A 2268 0034                  		movea.l	$34(a0),a1
0001A64E 1029 0025                  		move.b	$25(a1),d0
0001A652 5540                       		subq.w	#2,d0
0001A654 6600                       		bne.s	loc_185D2
0001A656 0829 0001 0028             		btst	#1,$28(a1)
0001A65C 6700                       		beq.s	loc_185DA
0001A65E 4A69 0012                  		tst.w	$12(a1)
0001A662 6600                       		bne.s	loc_185DA
0001A664 7204                       		moveq	#4,d1
0001A666 6000                       		bra.s	loc_185EE
0001A668                            ; ===========================================================================
0001A668                            
0001A668                            loc_185D2:
0001A668 5500                       		subq.b	#2,d0
0001A66A 6B00                       		bmi.s	loc_185DA
0001A66C 720A                       		moveq	#$A,d1
0001A66E 6000                       		bra.s	loc_185EE
0001A670                            ; ===========================================================================
0001A670                            
0001A670                            loc_185DA:
0001A670 4A29 0020                  		tst.b	$20(a1)
0001A674 6600                       		bne.s	loc_185E4
0001A676 7205                       		moveq	#5,d1
0001A678 6000                       		bra.s	loc_185EE
0001A67A                            ; ===========================================================================
0001A67A                            
0001A67A                            loc_185E4:
0001A67A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A680 6500                       		bcs.s	loc_185EE
0001A682 7204                       		moveq	#4,d1
0001A684                            
0001A684                            loc_185EE:
0001A684 1141 001C                  		move.b	d1,$1C(a0)
0001A688 5900                       		subq.b	#4,d0
0001A68A 6600                       		bne.s	loc_18602
0001A68C 117C 0006 001C             		move.b	#6,$1C(a0)
0001A692 4A28 0001                  		tst.b	1(a0)
0001A696 6A00                       		bpl.s	Obj73_FaceDel
0001A698                            
0001A698                            loc_18602:
0001A698 6000                       		bra.s	Obj73_Display
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            Obj73_FaceDel:
0001A69A 4EF9 0000 F120             		jmp	DeleteObject
0001A6A0                            ; ===========================================================================
0001A6A0                            
0001A6A0                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A6A0 117C 0007 001C             		move.b	#7,$1C(a0)
0001A6A6 2268 0034                  		movea.l	$34(a0),a1
0001A6AA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A6B0 6D00                       		blt.s	loc_1862A
0001A6B2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A6B8 4A28 0001                  		tst.b	1(a0)
0001A6BC 6A00                       		bpl.s	Obj73_FlameDel
0001A6BE 6000                       		bra.s	loc_18636
0001A6C0                            ; ===========================================================================
0001A6C0                            
0001A6C0                            loc_1862A:
0001A6C0 4A69 0010                  		tst.w	$10(a1)
0001A6C4 6700                       		beq.s	loc_18636
0001A6C6 117C 0008 001C             		move.b	#8,$1C(a0)
0001A6CC                            
0001A6CC                            loc_18636:
0001A6CC 6000                       		bra.s	Obj73_Display
0001A6CE                            ; ===========================================================================
0001A6CE                            
0001A6CE                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A6CE 4EF9 0000 F120             		jmp	DeleteObject
0001A6D4                            ; ===========================================================================
0001A6D4                            
0001A6D4                            Obj73_Display:
0001A6D4 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001A6DA 4EB9 0000 C138             		jsr	AnimateSprite
0001A6E0                            
0001A6E0                            loc_1864A:
0001A6E0 2268 0034                  		movea.l	$34(a0),a1
0001A6E4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A6EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A6F0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A6F6 7003                       		moveq	#3,d0
0001A6F8 C028 0022                  		and.b	$22(a0),d0
0001A6FC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A702 8128 0001                  		or.b	d0,1(a0)
0001A706 4EF9 0000 F0E4             		jmp	DisplaySprite
0001A70C                            ; ===========================================================================
0001A70C                            
0001A70C                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A70C 2268 0034                  		movea.l	$34(a0),a1
0001A710 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A716 6600                       		bne.s	loc_18688
0001A718 4A28 0001                  		tst.b	1(a0)
0001A71C 6A00                       		bpl.s	Obj73_TubeDel
0001A71E                            
0001A71E                            loc_18688:
0001A71E 217C 0001 9E7C 0004        		move.l	#Map_BossItems,4(a0)
0001A726 317C 246C 0002             		move.w	#$246C,2(a0)
0001A72C 117C 0004 001A             		move.b	#4,$1A(a0)
0001A732 60AC                       		bra.s	loc_1864A
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            Obj73_TubeDel:
0001A734 4EF9 0000 F120             		jmp	DeleteObject
0001A73A                            ; ===========================================================================
0001A73A                            ; ---------------------------------------------------------------------------
0001A73A                            ; Object 74 - lava that	Eggman drops (MZ)
0001A73A                            ; ---------------------------------------------------------------------------
0001A73A                            
0001A73A                            Obj74:					; XREF: Obj_Index
0001A73A 7000                       		moveq	#0,d0
0001A73C 1028 0024                  		move.b	$24(a0),d0
0001A740 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A744 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A748 4EF9 0000 F0E4             		jmp	DisplaySprite
0001A74E                            ; ===========================================================================
0001A74E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A750 0000                       		dc.w Obj74_Action-Obj74_Index
0001A752 0000                       		dc.w loc_18886-Obj74_Index
0001A754 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A756                            ; ===========================================================================
0001A756                            
0001A756                            Obj74_Main:				; XREF: Obj74_Index
0001A756 117C 0008 0016             		move.b	#8,$16(a0)
0001A75C 117C 0008 0017             		move.b	#8,$17(a0)
0001A762 217C 0000 CD8A 0004        		move.l	#Map_obj14,4(a0)
0001A76A 317C 0345 0002             		move.w	#$345,2(a0)
0001A770 117C 0004 0001             		move.b	#4,1(a0)
0001A776 117C 0005 0018             		move.b	#5,$18(a0)
0001A77C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A782 117C 0008 0019             		move.b	#8,$19(a0)
0001A788 5428 0024                  		addq.b	#2,$24(a0)
0001A78C 4A28 0028                  		tst.b	$28(a0)
0001A790 6600                       		bne.s	loc_1870A
0001A792 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A798 5428 0024                  		addq.b	#2,$24(a0)
0001A79C 6000 0000                  		bra.w	loc_18886
0001A7A0                            ; ===========================================================================
0001A7A0                            
0001A7A0                            loc_1870A:
0001A7A0 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A7A6 303C 00AE                  		move.w	#$AE,d0
0001A7AA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava sound
0001A7B0                            
0001A7B0                            Obj74_Action:				; XREF: Obj74_Index
0001A7B0 7000                       		moveq	#0,d0
0001A7B2 1028 0025                  		move.b	$25(a0),d0
0001A7B6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A7BA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A7BE 4EB9 0000 F0CA             		jsr	SpeedToPos
0001A7C4 43F9 0000 FFBC             		lea	(Ani_obj14).l,a1
0001A7CA 4EB9 0000 C138             		jsr	AnimateSprite
0001A7D0 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A7D6 6200                       		bhi.s	Obj74_Delete
0001A7D8 4E75                       		rts	
0001A7DA                            ; ===========================================================================
0001A7DA                            
0001A7DA                            Obj74_Delete:
0001A7DA 4EF9 0000 F120             		jmp	DeleteObject
0001A7E0                            ; ===========================================================================
0001A7E0 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A7E2 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A7E4 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A7E6 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A7E8                            ; ===========================================================================
0001A7E8                            
0001A7E8                            Obj74_Drop:				; XREF: Obj74_Index2
0001A7E8 08E8 0001 0022             		bset	#1,$22(a0)
0001A7EE 5328 0029                  		subq.b	#1,$29(a0)
0001A7F2 6A00                       		bpl.s	locret_18780
0001A7F4 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A7FA 4228 0028                  		clr.b	$28(a0)
0001A7FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A804 08A8 0001 0022             		bclr	#1,$22(a0)
0001A80A 6100 C672                  		bsr.w	ObjHitFloor
0001A80E 4A41                       		tst.w	d1
0001A810 6A00                       		bpl.s	locret_18780
0001A812 5428 0025                  		addq.b	#2,$25(a0)
0001A816                            
0001A816                            locret_18780:
0001A816 4E75                       		rts	
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A818 5568 000C                  		subq.w	#2,$C(a0)
0001A81C 08E8 0007 0002             		bset	#7,2(a0)
0001A822 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A828 4268 0012                  		clr.w	$12(a0)
0001A82C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A832 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A838 117C 0003 0029             		move.b	#3,$29(a0)
0001A83E 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001A844 6600                       		bne.s	loc_187CA
0001A846 47D1                       		lea	(a1),a3
0001A848 45D0                       		lea	(a0),a2
0001A84A 7003                       		moveq	#3,d0
0001A84C                            
0001A84C                            Obj74_Loop:
0001A84C 26DA                       		move.l	(a2)+,(a3)+
0001A84E 26DA                       		move.l	(a2)+,(a3)+
0001A850 26DA                       		move.l	(a2)+,(a3)+
0001A852 26DA                       		move.l	(a2)+,(a3)+
0001A854 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A858                            
0001A858 4469 0010                  		neg.w	$10(a1)
0001A85C 5429 0025                  		addq.b	#2,$25(a1)
0001A860                            
0001A860                            loc_187CA:
0001A860 5428 0025                  		addq.b	#2,$25(a0)
0001A864 4E75                       		rts	
0001A866                            
0001A866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A866                            
0001A866                            
0001A866                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A866 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001A86C 6600                       		bne.s	locret_187EE
0001A86E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A874 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A87A 12BC 0074                  		move.b	#$74,(a1)
0001A87E 337C 0067 0028             		move.w	#$67,$28(a1)
0001A884                            
0001A884                            locret_187EE:
0001A884 4E75                       		rts	
0001A886                            ; End of function Obj74_Duplicate2
0001A886                            
0001A886                            ; ===========================================================================
0001A886                            
0001A886                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A886 6100 C5F6                  		bsr.w	ObjHitFloor
0001A88A 4A41                       		tst.w	d1
0001A88C 6A00                       		bpl.s	loc_18826
0001A88E 3028 0008                  		move.w	8(a0),d0
0001A892 0C40 1940                  		cmpi.w	#$1940,d0
0001A896 6E00                       		bgt.s	loc_1882C
0001A898 3228 0030                  		move.w	$30(a0),d1
0001A89C B240                       		cmp.w	d0,d1
0001A89E 6700                       		beq.s	loc_1881E
0001A8A0 0240 0010                  		andi.w	#$10,d0
0001A8A4 0241 0010                  		andi.w	#$10,d1
0001A8A8 B240                       		cmp.w	d0,d1
0001A8AA 6700                       		beq.s	loc_1881E
0001A8AC 61B8                       		bsr.s	Obj74_Duplicate2
0001A8AE 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A8B4                            
0001A8B4                            loc_1881E:
0001A8B4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A8BA 4E75                       		rts	
0001A8BC                            ; ===========================================================================
0001A8BC                            
0001A8BC                            loc_18826:
0001A8BC 5428 0025                  		addq.b	#2,$25(a0)
0001A8C0 4E75                       		rts	
0001A8C2                            ; ===========================================================================
0001A8C2                            
0001A8C2                            loc_1882C:
0001A8C2 5428 0024                  		addq.b	#2,$24(a0)
0001A8C6 4E75                       		rts	
0001A8C8                            ; ===========================================================================
0001A8C8                            
0001A8C8                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A8C8 08A8 0001 0022             		bclr	#1,$22(a0)
0001A8CE 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A8D4 3028 0008                  		move.w	8(a0),d0
0001A8D8 9068 0032                  		sub.w	$32(a0),d0
0001A8DC 6A00                       		bpl.s	loc_1884A
0001A8DE 4440                       		neg.w	d0
0001A8E0                            
0001A8E0                            loc_1884A:
0001A8E0 0C40 0012                  		cmpi.w	#$12,d0
0001A8E4 6600                       		bne.s	loc_18856
0001A8E6 08A8 0007 0002             		bclr	#7,2(a0)
0001A8EC                            
0001A8EC                            loc_18856:
0001A8EC 6100 C590                  		bsr.w	ObjHitFloor
0001A8F0 4A41                       		tst.w	d1
0001A8F2 6A00                       		bpl.s	locret_1887E
0001A8F4 5328 0029                  		subq.b	#1,$29(a0)
0001A8F8 6700                       		beq.s	Obj74_Delete2
0001A8FA 4268 0012                  		clr.w	$12(a0)
0001A8FE 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A904 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A90A 08E8 0007 0002             		bset	#7,2(a0)
0001A910 5528 0025                  		subq.b	#2,$25(a0)
0001A914                            
0001A914                            locret_1887E:
0001A914 4E75                       		rts	
0001A916                            ; ===========================================================================
0001A916                            
0001A916                            Obj74_Delete2:
0001A916 4EF9 0000 F120             		jmp	DeleteObject
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_18886:				; XREF: Obj74_Index
0001A91C 08E8 0007 0002             		bset	#7,2(a0)
0001A922 5328 0029                  		subq.b	#1,$29(a0)
0001A926 6600                       		bne.s	Obj74_Animate
0001A928 117C 0001 001C             		move.b	#1,$1C(a0)
0001A92E 5968 000C                  		subq.w	#4,$C(a0)
0001A932 4228 0020                  		clr.b	$20(a0)
0001A936                            
0001A936                            Obj74_Animate:
0001A936 43F9 0000 FFBC             		lea	(Ani_obj14).l,a1
0001A93C 4EF9 0000 C138             		jmp	AnimateSprite
0001A942                            ; ===========================================================================
0001A942                            
0001A942                            Obj74_Delete3:				; XREF: Obj74_Index
0001A942 4EF9 0000 F120             		jmp	DeleteObject
0001A948                            ; ===========================================================================
0001A948                            
0001A948                            Obj7A_Delete:
0001A948 4EF9 0000 F120             		jmp	DeleteObject
0001A94E                            ; ===========================================================================
0001A94E                            ; ---------------------------------------------------------------------------
0001A94E                            ; Object 7A - Eggman (SLZ)
0001A94E                            ; ---------------------------------------------------------------------------
0001A94E                            
0001A94E                            Obj7A:					; XREF: Obj_Index
0001A94E 7000                       		moveq	#0,d0
0001A950 1028 0024                  		move.b	$24(a0),d0
0001A954 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A958 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A95C                            ; ===========================================================================
0001A95C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A95E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A960 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A962 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A964 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A966                            
0001A966 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A969 0401 04                    		dc.b 4,	1, 4
0001A96C 0607 04                    		dc.b 6,	7, 4
0001A96F 0800 03                    		dc.b 8,	0, 3
0001A972                            ; ===========================================================================
0001A972                            
0001A972                            Obj7A_Main:				; XREF: Obj7A_Index
0001A972 317C 2188 0008             		move.w	#$2188,8(a0)
0001A978 317C 0228 000C             		move.w	#$228,$C(a0)
0001A97E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A984 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A98A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A990 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A996 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A99A 2248                       		movea.l	a0,a1
0001A99C 7203                       		moveq	#3,d1
0001A99E 6000                       		bra.s	Obj7A_LoadBoss
0001A9A0                            ; ===========================================================================
0001A9A0                            
0001A9A0                            Obj7A_Loop:
0001A9A0 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001A9A6 6600                       		bne.s	loc_1895C
0001A9A8 12BC 007A                  		move.b	#$7A,0(a1)
0001A9AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001A9B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A9B8                            
0001A9B8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A9B8 08A8 0000 0022             		bclr	#0,$22(a0)
0001A9BE 4229 0025                  		clr.b	$25(a1)
0001A9C2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A9C6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A9CA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A9CE 237C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a1)
0001A9D6 337C 0400 0002             		move.w	#$400,2(a1)
0001A9DC 137C 0004 0001             		move.b	#4,1(a1)
0001A9E2 137C 0020 0019             		move.b	#$20,$19(a1)
0001A9E8 2348 0034                  		move.l	a0,$34(a1)
0001A9EC 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A9F0                            
0001A9F0                            loc_1895C:
0001A9F0 43F8 D040                  		lea	($FFFFD040).w,a1
0001A9F4 45E8 002A                  		lea	$2A(a0),a2
0001A9F8 705E                       		moveq	#$5E,d0
0001A9FA 723E                       		moveq	#$3E,d1
0001A9FC                            
0001A9FC                            loc_18968:
0001A9FC B011                       		cmp.b	(a1),d0
0001A9FE 6600                       		bne.s	loc_18974
0001AA00 4A29 0028                  		tst.b	$28(a1)
0001AA04 6700                       		beq.s	loc_18974
0001AA06 34C9                       		move.w	a1,(a2)+
0001AA08                            
0001AA08                            loc_18974:
0001AA08 D2FC 0040                  		adda.w	#$40,a1
0001AA0C 51C9 FFEE                  		dbf	d1,loc_18968
0001AA10                            
0001AA10                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001AA10 7000                       		moveq	#0,d0
0001AA12 1028 0025                  		move.b	$25(a0),d0
0001AA16 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001AA1A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AA1E 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001AA24 4EB9 0000 C138             		jsr	AnimateSprite
0001AA2A 7003                       		moveq	#3,d0
0001AA2C C028 0022                  		and.b	$22(a0),d0
0001AA30 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AA36 8128 0001                  		or.b	d0,1(a0)
0001AA3A 4EF9 0000 F0E4             		jmp	DisplaySprite
0001AA40                            ; ===========================================================================
0001AA40 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AA42 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AA44 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AA46 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AA48 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AA4A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AA4C                            ; ===========================================================================
0001AA4C                            
0001AA4C                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AA4C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AA52 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AA58 6400                       		bcc.s	loc_189CA
0001AA5A 5428 0025                  		addq.b	#2,$25(a0)
0001AA5E                            
0001AA5E                            loc_189CA:
0001AA5E 6100 EE98                  		bsr.w	BossMove
0001AA62 1028 003F                  		move.b	$3F(a0),d0
0001AA66 5428 003F                  		addq.b	#2,$3F(a0)
0001AA6A 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001AA70 EC40                       		asr.w	#6,d0
0001AA72 D068 0038                  		add.w	$38(a0),d0
0001AA76 3140 000C                  		move.w	d0,$C(a0)
0001AA7A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AA80 6000                       		bra.s	loc_189FE
0001AA82                            ; ===========================================================================
0001AA82                            
0001AA82                            loc_189EE:
0001AA82 6100 EE74                  		bsr.w	BossMove
0001AA86 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AA8C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AA92                            
0001AA92                            loc_189FE:
0001AA92 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AA98 6400                       		bcc.s	locret_18A44
0001AA9A 4A28 0022                  		tst.b	$22(a0)
0001AA9E 6B00                       		bmi.s	loc_18A46
0001AAA0 4A28 0020                  		tst.b	$20(a0)
0001AAA4 6600                       		bne.s	locret_18A44
0001AAA6 4A28 003E                  		tst.b	$3E(a0)
0001AAAA 6600                       		bne.s	loc_18A28
0001AAAC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AAB2 303C 00AC                  		move.w	#$AC,d0
0001AAB6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AABC                            
0001AABC                            loc_18A28:
0001AABC 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AAC0 7000                       		moveq	#0,d0
0001AAC2 4A51                       		tst.w	(a1)
0001AAC4 6600                       		bne.s	loc_18A36
0001AAC6 303C 0EEE                  		move.w	#$EEE,d0
0001AACA                            
0001AACA                            loc_18A36:
0001AACA 3280                       		move.w	d0,(a1)
0001AACC 5328 003E                  		subq.b	#1,$3E(a0)
0001AAD0 6600                       		bne.s	locret_18A44
0001AAD2 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAD8                            
0001AAD8                            locret_18A44:
0001AAD8 4E75                       		rts	
0001AADA                            ; ===========================================================================
0001AADA                            
0001AADA                            loc_18A46:
0001AADA 7064                       		moveq	#100,d0
0001AADC 6100 0000                  		bsr.w	AddPoints
0001AAE0 117C 0006 0025             		move.b	#6,$25(a0)
0001AAE6 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AAEC 4268 0010                  		clr.w	$10(a0)
0001AAF0 4E75                       		rts	
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001AAF2 3028 0030                  		move.w	$30(a0),d0
0001AAF6 317C 0200 0010             		move.w	#$200,$10(a0)
0001AAFC 0828 0000 0022             		btst	#0,$22(a0)
0001AB02 6600                       		bne.s	loc_18A7C
0001AB04 4468 0010                  		neg.w	$10(a0)
0001AB08 0C40 2008                  		cmpi.w	#$2008,d0
0001AB0C 6E00                       		bgt.s	loc_18A88
0001AB0E 6000                       		bra.s	loc_18A82
0001AB10                            ; ===========================================================================
0001AB10                            
0001AB10                            loc_18A7C:
0001AB10 0C40 2138                  		cmpi.w	#$2138,d0
0001AB14 6D00                       		blt.s	loc_18A88
0001AB16                            
0001AB16                            loc_18A82:
0001AB16 0868 0000 0022             		bchg	#0,$22(a0)
0001AB1C                            
0001AB1C                            loc_18A88:
0001AB1C 3028 0008                  		move.w	8(a0),d0
0001AB20 72FF                       		moveq	#-1,d1
0001AB22 7402                       		moveq	#2,d2
0001AB24 45E8 002A                  		lea	$2A(a0),a2
0001AB28 7828                       		moveq	#$28,d4
0001AB2A 4A68 0010                  		tst.w	$10(a0)
0001AB2E 6A00                       		bpl.s	loc_18A9E
0001AB30 4444                       		neg.w	d4
0001AB32                            
0001AB32                            loc_18A9E:
0001AB32 321A                       		move.w	(a2)+,d1
0001AB34 2641                       		movea.l	d1,a3
0001AB36 082B 0003 0022             		btst	#3,$22(a3)
0001AB3C 6600                       		bne.s	loc_18AB4
0001AB3E 362B 0008                  		move.w	8(a3),d3
0001AB42 D644                       		add.w	d4,d3
0001AB44 9640                       		sub.w	d0,d3
0001AB46 6700                       		beq.s	loc_18AC0
0001AB48                            
0001AB48                            loc_18AB4:
0001AB48 51CA FFE8                  		dbf	d2,loc_18A9E
0001AB4C                            
0001AB4C 1142 0028                  		move.b	d2,$28(a0)
0001AB50 6000 FF0C                  		bra.w	loc_189CA
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            loc_18AC0:
0001AB54 1142 0028                  		move.b	d2,$28(a0)
0001AB58 5428 0025                  		addq.b	#2,$25(a0)
0001AB5C 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AB62 6000 FEFA                  		bra.w	loc_189CA
0001AB66                            ; ===========================================================================
0001AB66                            
0001AB66                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AB66 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AB6C 6600                       		bne.s	loc_18B36
0001AB6E 70FF                       		moveq	#-1,d0
0001AB70 1028 0028                  		move.b	$28(a0),d0
0001AB74 4880                       		ext.w	d0
0001AB76 6B00                       		bmi.s	loc_18B40
0001AB78 5540                       		subq.w	#2,d0
0001AB7A 4440                       		neg.w	d0
0001AB7C D040                       		add.w	d0,d0
0001AB7E 43E8 002A                  		lea	$2A(a0),a1
0001AB82 3031 0000                  		move.w	(a1,d0.w),d0
0001AB86 2440                       		movea.l	d0,a2
0001AB88 43F8 D040                  		lea	($FFFFD040).w,a1
0001AB8C 723E                       		moveq	#$3E,d1
0001AB8E                            
0001AB8E                            loc_18AFA:
0001AB8E B0A9 003C                  		cmp.l	$3C(a1),d0
0001AB92 6700                       		beq.s	loc_18B40
0001AB94 D2FC 0040                  		adda.w	#$40,a1
0001AB98 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AB9C                            
0001AB9C 2F08                       		move.l	a0,-(sp)
0001AB9E 41D2                       		lea	(a2),a0
0001ABA0 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001ABA6 205F                       		movea.l	(sp)+,a0
0001ABA8 6600                       		bne.s	loc_18B40
0001ABAA 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001ABAE 3368 0008 0008             		move.w	8(a0),8(a1)
0001ABB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ABBA 0669 0020 000C             		addi.w	#$20,$C(a1)
0001ABC0 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001ABC6 234A 003C                  		move.l	a2,$3C(a1)
0001ABCA                            
0001ABCA                            loc_18B36:
0001ABCA 5328 003C                  		subq.b	#1,$3C(a0)
0001ABCE 6700                       		beq.s	loc_18B40
0001ABD0 6000 FEC0                  		bra.w	loc_189FE
0001ABD4                            ; ===========================================================================
0001ABD4                            
0001ABD4                            loc_18B40:
0001ABD4 5528 0025                  		subq.b	#2,$25(a0)
0001ABD8 6000 FE84                  		bra.w	loc_189CA
0001ABDC                            ; ===========================================================================
0001ABDC                            
0001ABDC                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001ABDC 5328 003C                  		subq.b	#1,$3C(a0)
0001ABE0 6B00                       		bmi.s	loc_18B52
0001ABE2 6000 ECD2                  		bra.w	BossDefeated
0001ABE6                            ; ===========================================================================
0001ABE6                            
0001ABE6                            loc_18B52:
0001ABE6 5428 0025                  		addq.b	#2,$25(a0)
0001ABEA 4268 0012                  		clr.w	$12(a0)
0001ABEE 08E8 0000 0022             		bset	#0,$22(a0)
0001ABF4 08A8 0007 0022             		bclr	#7,$22(a0)
0001ABFA 4268 0010                  		clr.w	$10(a0)
0001ABFE 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AC04 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AC08 6600                       		bne.s	loc_18B7C
0001AC0A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AC10                            
0001AC10                            loc_18B7C:
0001AC10 6000 FE80                  		bra.w	loc_189FE
0001AC14                            ; ===========================================================================
0001AC14                            
0001AC14                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AC14 5228 003C                  		addq.b	#1,$3C(a0)
0001AC18 6700                       		beq.s	loc_18B90
0001AC1A 6A00                       		bpl.s	loc_18B96
0001AC1C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AC22 6000                       		bra.s	loc_18BC2
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            loc_18B90:
0001AC24 4268 0012                  		clr.w	$12(a0)
0001AC28 6000                       		bra.s	loc_18BC2
0001AC2A                            ; ===========================================================================
0001AC2A                            
0001AC2A                            loc_18B96:
0001AC2A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AC30 6500                       		bcs.s	loc_18BAE
0001AC32 6700                       		beq.s	loc_18BB4
0001AC34 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AC3A 6500                       		bcs.s	loc_18BC2
0001AC3C 5428 0025                  		addq.b	#2,$25(a0)
0001AC40 6000                       		bra.s	loc_18BC2
0001AC42                            ; ===========================================================================
0001AC42                            
0001AC42                            loc_18BAE:
0001AC42 5168 0012                  		subq.w	#8,$12(a0)
0001AC46 6000                       		bra.s	loc_18BC2
0001AC48                            ; ===========================================================================
0001AC48                            
0001AC48                            loc_18BB4:
0001AC48 4268 0012                  		clr.w	$12(a0)
0001AC4C 6100 EEE2                  		bsr.w	BossEnd
0001AC50                            
0001AC50                            loc_18BC2:
0001AC50 6000 FE30                  		bra.w	loc_189EE
0001AC54                            ; ===========================================================================
0001AC54                            
0001AC54                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AC54 317C 0400 0010             		move.w	#$400,$10(a0)
0001AC5A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AC60 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AC66 6400                       		bcc.s	loc_18BE0
0001AC68 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC6C 6000                       		bra.s	loc_18BE8
0001AC6E                            ; ===========================================================================
0001AC6E                            
0001AC6E                            loc_18BE0:
0001AC6E 4A28 0001                  		tst.b	1(a0)
0001AC72 6A00 FCD4                  		bpl.w	Obj7A_Delete
0001AC76                            
0001AC76                            loc_18BE8:
0001AC76 6100 EC80                  		bsr.w	BossMove
0001AC7A 6000 FDE2                  		bra.w	loc_189CA
0001AC7E                            ; ===========================================================================
0001AC7E                            
0001AC7E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AC7E 7000                       		moveq	#0,d0
0001AC80 7201                       		moveq	#1,d1
0001AC82 2268 0034                  		movea.l	$34(a0),a1
0001AC86 1029 0025                  		move.b	$25(a1),d0
0001AC8A 0C00 0006                  		cmpi.b	#6,d0
0001AC8E 6B00                       		bmi.s	loc_18C06
0001AC90 720A                       		moveq	#$A,d1
0001AC92 6000                       		bra.s	loc_18C1A
0001AC94                            ; ===========================================================================
0001AC94                            
0001AC94                            loc_18C06:
0001AC94 4A29 0020                  		tst.b	$20(a1)
0001AC98 6600                       		bne.s	loc_18C10
0001AC9A 7205                       		moveq	#5,d1
0001AC9C 6000                       		bra.s	loc_18C1A
0001AC9E                            ; ===========================================================================
0001AC9E                            
0001AC9E                            loc_18C10:
0001AC9E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001ACA4 6500                       		bcs.s	loc_18C1A
0001ACA6 7204                       		moveq	#4,d1
0001ACA8                            
0001ACA8                            loc_18C1A:
0001ACA8 1141 001C                  		move.b	d1,$1C(a0)
0001ACAC 0C00 000A                  		cmpi.b	#$A,d0
0001ACB0 6600                       		bne.s	loc_18C32
0001ACB2 117C 0006 001C             		move.b	#6,$1C(a0)
0001ACB8 4A28 0001                  		tst.b	1(a0)
0001ACBC 6A00 FC8A                  		bpl.w	Obj7A_Delete
0001ACC0                            
0001ACC0                            loc_18C32:
0001ACC0 6000                       		bra.s	loc_18C6C
0001ACC2                            ; ===========================================================================
0001ACC2                            
0001ACC2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001ACC2 117C 0008 001C             		move.b	#8,$1C(a0)
0001ACC8 2268 0034                  		movea.l	$34(a0),a1
0001ACCC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ACD2 6600                       		bne.s	loc_18C56
0001ACD4 4A28 0001                  		tst.b	1(a0)
0001ACD8 6A00 FC6E                  		bpl.w	Obj7A_Delete
0001ACDC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ACE2 6000                       		bra.s	loc_18C6C
0001ACE4                            ; ===========================================================================
0001ACE4                            
0001ACE4                            loc_18C56:
0001ACE4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001ACEA 6E00                       		bgt.s	loc_18C6C
0001ACEC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ACF2 6D00                       		blt.s	loc_18C6C
0001ACF4 117C 0007 001C             		move.b	#7,$1C(a0)
0001ACFA                            
0001ACFA                            loc_18C6C:
0001ACFA 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001AD00 4EB9 0000 C138             		jsr	AnimateSprite
0001AD06                            
0001AD06                            loc_18C78:
0001AD06 2268 0034                  		movea.l	$34(a0),a1
0001AD0A 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD10 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD16 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AD1C 7003                       		moveq	#3,d0
0001AD1E C028 0022                  		and.b	$22(a0),d0
0001AD22 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD28 8128 0001                  		or.b	d0,1(a0)
0001AD2C 4EF9 0000 F0E4             		jmp	DisplaySprite
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AD32 2268 0034                  		movea.l	$34(a0),a1
0001AD36 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AD3C 6600                       		bne.s	loc_18CB8
0001AD3E 4A28 0001                  		tst.b	1(a0)
0001AD42 6A00 FC04                  		bpl.w	Obj7A_Delete
0001AD46                            
0001AD46                            loc_18CB8:
0001AD46 217C 0001 9E7C 0004        		move.l	#Map_BossItems,4(a0)
0001AD4E 317C 246C 0002             		move.w	#$246C,2(a0)
0001AD54 117C 0003 001A             		move.b	#3,$1A(a0)
0001AD5A 60AA                       		bra.s	loc_18C78
0001AD5C                            ; ===========================================================================
0001AD5C                            ; ---------------------------------------------------------------------------
0001AD5C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AD5C                            ; ---------------------------------------------------------------------------
0001AD5C                            
0001AD5C                            Obj7B:					; XREF: Obj_Index
0001AD5C 7000                       		moveq	#0,d0
0001AD5E 1028 0024                  		move.b	$24(a0),d0
0001AD62 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AD66 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AD6A 3028 0030                  		move.w	$30(a0),d0
0001AD6E 0240 FF80                  		andi.w	#$FF80,d0
0001AD72 3238 F700                  		move.w	($FFFFF700).w,d1
0001AD76 0441 0080                  		subi.w	#$80,d1
0001AD7A 0241 FF80                  		andi.w	#$FF80,d1
0001AD7E 9041                       		sub.w	d1,d0
0001AD80 6B00 FBC6                  		bmi.w	Obj7A_Delete
0001AD84 0C40 0280                  		cmpi.w	#$280,d0
0001AD88 6200 FBBE                  		bhi.w	Obj7A_Delete
0001AD8C 4EF9 0000 F0E4             		jmp	DisplaySprite
0001AD92                            ; ===========================================================================
0001AD92 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AD94 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AD96 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AD98 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AD9A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AD9C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AD9E                            ; ===========================================================================
0001AD9E                            
0001AD9E                            Obj7B_Main:				; XREF: Obj7B_Index
0001AD9E 217C 0001 34D2 0004        		move.l	#Map_obj5Ea,4(a0)
0001ADA6 317C 0518 0002             		move.w	#$518,2(a0)
0001ADAC 117C 0001 001A             		move.b	#1,$1A(a0)
0001ADB2 0028 0004 0001             		ori.b	#4,1(a0)
0001ADB8 117C 0004 0018             		move.b	#4,$18(a0)
0001ADBE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001ADC4 117C 000C 0019             		move.b	#$C,$19(a0)
0001ADCA 2268 003C                  		movea.l	$3C(a0),a1
0001ADCE 3169 0008 0030             		move.w	8(a1),$30(a0)
0001ADD4 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001ADDA 08E8 0000 0022             		bset	#0,$22(a0)
0001ADE0 3028 0008                  		move.w	8(a0),d0
0001ADE4 B069 0008                  		cmp.w	8(a1),d0
0001ADE8 6E00                       		bgt.s	loc_18D68
0001ADEA 08A8 0000 0022             		bclr	#0,$22(a0)
0001ADF0 117C 0002 003A             		move.b	#2,$3A(a0)
0001ADF6                            
0001ADF6                            loc_18D68:
0001ADF6 5428 0024                  		addq.b	#2,$24(a0)
0001ADFA                            
0001ADFA                            Obj7B_Fall:				; XREF: Obj7B_Index
0001ADFA 4EB9 0000 F0AA             		jsr	ObjectFall
0001AE00 2268 003C                  		movea.l	$3C(a0),a1
0001AE04 45F9 0000 0000             		lea	(word_19018).l,a2
0001AE0A 7000                       		moveq	#0,d0
0001AE0C 1029 001A                  		move.b	$1A(a1),d0
0001AE10 3228 0008                  		move.w	8(a0),d1
0001AE14 9268 0030                  		sub.w	$30(a0),d1
0001AE18 6400                       		bcc.s	loc_18D8E
0001AE1A 5440                       		addq.w	#2,d0
0001AE1C                            
0001AE1C                            loc_18D8E:
0001AE1C D040                       		add.w	d0,d0
0001AE1E 3228 0034                  		move.w	$34(a0),d1
0001AE22 D272 0000                  		add.w	(a2,d0.w),d1
0001AE26 B268 000C                  		cmp.w	$C(a0),d1
0001AE2A 6E00                       		bgt.s	locret_18DC4
0001AE2C 2268 003C                  		movea.l	$3C(a0),a1
0001AE30 7202                       		moveq	#2,d1
0001AE32 0828 0000 0022             		btst	#0,$22(a0)
0001AE38 6700                       		beq.s	loc_18DAE
0001AE3A 7200                       		moveq	#0,d1
0001AE3C                            
0001AE3C                            loc_18DAE:
0001AE3C 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AE42 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AE48 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AE4E 6000 0000                  		bra.w	loc_18FA2
0001AE52                            ; ===========================================================================
0001AE52                            
0001AE52                            locret_18DC4:
0001AE52 4E75                       		rts	
0001AE54                            ; ===========================================================================
0001AE54                            
0001AE54                            loc_18DC6:				; XREF: Obj7B_Index
0001AE54 2268 003C                  		movea.l	$3C(a0),a1
0001AE58 7000                       		moveq	#0,d0
0001AE5A 1028 003A                  		move.b	$3A(a0),d0
0001AE5E 9029 003A                  		sub.b	$3A(a1),d0
0001AE62 6700                       		beq.s	loc_18E2A
0001AE64 6400                       		bcc.s	loc_18DDA
0001AE66 4400                       		neg.b	d0
0001AE68                            
0001AE68                            loc_18DDA:
0001AE68 323C F7E8                  		move.w	#-$818,d1
0001AE6C 343C FEEC                  		move.w	#-$114,d2
0001AE70 0C00 0001                  		cmpi.b	#1,d0
0001AE74 6700                       		beq.s	loc_18E00
0001AE76 323C F6A0                  		move.w	#-$960,d1
0001AE7A 343C FF0C                  		move.w	#-$F4,d2
0001AE7E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AE84 6D00                       		blt.s	loc_18E00
0001AE86 323C F5E0                  		move.w	#-$A20,d1
0001AE8A 343C FF80                  		move.w	#-$80,d2
0001AE8E                            
0001AE8E                            loc_18E00:
0001AE8E 3141 0012                  		move.w	d1,$12(a0)
0001AE92 3142 0010                  		move.w	d2,$10(a0)
0001AE96 3028 0008                  		move.w	8(a0),d0
0001AE9A 9068 0030                  		sub.w	$30(a0),d0
0001AE9E 6400                       		bcc.s	loc_18E16
0001AEA0 4468 0010                  		neg.w	$10(a0)
0001AEA4                            
0001AEA4                            loc_18E16:
0001AEA4 117C 0001 001A             		move.b	#1,$1A(a0)
0001AEAA 317C 0020 0028             		move.w	#$20,$28(a0)
0001AEB0 5428 0024                  		addq.b	#2,$24(a0)
0001AEB4 6000 0000                  		bra.w	loc_18EAA
0001AEB8                            ; ===========================================================================
0001AEB8                            
0001AEB8                            loc_18E2A:				; XREF: loc_18DC6
0001AEB8 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEBE 7000                       		moveq	#0,d0
0001AEC0 1029 001A                  		move.b	$1A(a1),d0
0001AEC4 343C 0028                  		move.w	#$28,d2
0001AEC8 3228 0008                  		move.w	8(a0),d1
0001AECC 9268 0030                  		sub.w	$30(a0),d1
0001AED0 6400                       		bcc.s	loc_18E48
0001AED2 4442                       		neg.w	d2
0001AED4 5440                       		addq.w	#2,d0
0001AED6                            
0001AED6                            loc_18E48:
0001AED6 D040                       		add.w	d0,d0
0001AED8 3228 0034                  		move.w	$34(a0),d1
0001AEDC D272 0000                  		add.w	(a2,d0.w),d1
0001AEE0 3141 000C                  		move.w	d1,$C(a0)
0001AEE4 D468 0030                  		add.w	$30(a0),d2
0001AEE8 3142 0008                  		move.w	d2,8(a0)
0001AEEC 4268 000E                  		clr.w	$E(a0)
0001AEF0 4268 000A                  		clr.w	$A(a0)
0001AEF4 5368 0028                  		subq.w	#1,$28(a0)
0001AEF8 6600                       		bne.s	loc_18E7A
0001AEFA 317C 0020 0028             		move.w	#$20,$28(a0)
0001AF00 117C 0008 0024             		move.b	#8,$24(a0)
0001AF06 4E75                       		rts	
0001AF08                            ; ===========================================================================
0001AF08                            
0001AF08                            loc_18E7A:
0001AF08 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AF0E 6600                       		bne.s	loc_18E88
0001AF10 117C 0005 001F             		move.b	#5,$1F(a0)
0001AF16                            
0001AF16                            loc_18E88:
0001AF16 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AF1C 6600                       		bne.s	loc_18E96
0001AF1E 117C 0002 001F             		move.b	#2,$1F(a0)
0001AF24                            
0001AF24                            loc_18E96:
0001AF24 5328 001E                  		subq.b	#1,$1E(a0)
0001AF28 6E00                       		bgt.s	locret_18EA8
0001AF2A 0868 0000 001A             		bchg	#0,$1A(a0)
0001AF30 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AF36                            
0001AF36                            locret_18EA8:
0001AF36 4E75                       		rts	
0001AF38                            ; ===========================================================================
0001AF38                            
0001AF38                            loc_18EAA:				; XREF: Obj7B_Index
0001AF38 43F8 D040                  		lea	($FFFFD040).w,a1
0001AF3C 707A                       		moveq	#$7A,d0
0001AF3E 7240                       		moveq	#$40,d1
0001AF40 743E                       		moveq	#$3E,d2
0001AF42                            
0001AF42                            loc_18EB4:
0001AF42 B011                       		cmp.b	(a1),d0
0001AF44 6700                       		beq.s	loc_18EC0
0001AF46 D2C1                       		adda.w	d1,a1
0001AF48 51CA FFF8                  		dbf	d2,loc_18EB4
0001AF4C                            
0001AF4C 6000                       		bra.s	loc_18F38
0001AF4E                            ; ===========================================================================
0001AF4E                            
0001AF4E                            loc_18EC0:
0001AF4E 3029 0008                  		move.w	8(a1),d0
0001AF52 3229 000C                  		move.w	$C(a1),d1
0001AF56 3428 0008                  		move.w	8(a0),d2
0001AF5A 3628 000C                  		move.w	$C(a0),d3
0001AF5E 45FA 0000                  		lea	byte_19022(pc),a2
0001AF62 47FA 0000                  		lea	byte_19026(pc),a3
0001AF66 181A                       		move.b	(a2)+,d4
0001AF68 4884                       		ext.w	d4
0001AF6A D044                       		add.w	d4,d0
0001AF6C 181B                       		move.b	(a3)+,d4
0001AF6E 4884                       		ext.w	d4
0001AF70 D444                       		add.w	d4,d2
0001AF72 B440                       		cmp.w	d0,d2
0001AF74 6500                       		bcs.s	loc_18F38
0001AF76 181A                       		move.b	(a2)+,d4
0001AF78 4884                       		ext.w	d4
0001AF7A D044                       		add.w	d4,d0
0001AF7C 181B                       		move.b	(a3)+,d4
0001AF7E 4884                       		ext.w	d4
0001AF80 D444                       		add.w	d4,d2
0001AF82 B042                       		cmp.w	d2,d0
0001AF84 6500                       		bcs.s	loc_18F38
0001AF86 181A                       		move.b	(a2)+,d4
0001AF88 4884                       		ext.w	d4
0001AF8A D244                       		add.w	d4,d1
0001AF8C 181B                       		move.b	(a3)+,d4
0001AF8E 4884                       		ext.w	d4
0001AF90 D644                       		add.w	d4,d3
0001AF92 B641                       		cmp.w	d1,d3
0001AF94 6500                       		bcs.s	loc_18F38
0001AF96 181A                       		move.b	(a2)+,d4
0001AF98 4884                       		ext.w	d4
0001AF9A D244                       		add.w	d4,d1
0001AF9C 181B                       		move.b	(a3)+,d4
0001AF9E 4884                       		ext.w	d4
0001AFA0 D644                       		add.w	d4,d3
0001AFA2 B243                       		cmp.w	d3,d1
0001AFA4 6500                       		bcs.s	loc_18F38
0001AFA6 5428 0024                  		addq.b	#2,$24(a0)
0001AFAA 4268 0028                  		clr.w	$28(a0)
0001AFAE 4229 0020                  		clr.b	$20(a1)
0001AFB2 5329 0021                  		subq.b	#1,$21(a1)
0001AFB6 6600                       		bne.s	loc_18F38
0001AFB8 08E9 0007 0022             		bset	#7,$22(a1)
0001AFBE 4268 0010                  		clr.w	$10(a0)
0001AFC2 4268 0012                  		clr.w	$12(a0)
0001AFC6                            
0001AFC6                            loc_18F38:
0001AFC6 4A68 0012                  		tst.w	$12(a0)
0001AFCA 6A00                       		bpl.s	loc_18F5C
0001AFCC 4EB9 0000 F0AA             		jsr	ObjectFall
0001AFD2 3028 0034                  		move.w	$34(a0),d0
0001AFD6 0440 002F                  		subi.w	#$2F,d0
0001AFDA B068 000C                  		cmp.w	$C(a0),d0
0001AFDE 6E00                       		bgt.s	loc_18F58
0001AFE0 4EB9 0000 F0AA             		jsr	ObjectFall
0001AFE6                            
0001AFE6                            loc_18F58:
0001AFE6 6000 FF20                  		bra.w	loc_18E7A
0001AFEA                            ; ===========================================================================
0001AFEA                            
0001AFEA                            loc_18F5C:
0001AFEA 4EB9 0000 F0AA             		jsr	ObjectFall
0001AFF0 2268 003C                  		movea.l	$3C(a0),a1
0001AFF4 45F9 0000 0000             		lea	(word_19018).l,a2
0001AFFA 7000                       		moveq	#0,d0
0001AFFC 1029 001A                  		move.b	$1A(a1),d0
0001B000 3228 0008                  		move.w	8(a0),d1
0001B004 9268 0030                  		sub.w	$30(a0),d1
0001B008 6400                       		bcc.s	loc_18F7E
0001B00A 5440                       		addq.w	#2,d0
0001B00C                            
0001B00C                            loc_18F7E:
0001B00C D040                       		add.w	d0,d0
0001B00E 3228 0034                  		move.w	$34(a0),d1
0001B012 D272 0000                  		add.w	(a2,d0.w),d1
0001B016 B268 000C                  		cmp.w	$C(a0),d1
0001B01A 6ECA                       		bgt.s	loc_18F58
0001B01C 2268 003C                  		movea.l	$3C(a0),a1
0001B020 7202                       		moveq	#2,d1
0001B022 4A68 0010                  		tst.w	$10(a0)
0001B026 6B00                       		bmi.s	loc_18F9C
0001B028 7200                       		moveq	#0,d1
0001B02A                            
0001B02A                            loc_18F9C:
0001B02A 317C 0000 0028             		move.w	#0,$28(a0)
0001B030                            
0001B030                            loc_18FA2:
0001B030 1341 003A                  		move.b	d1,$3A(a1)
0001B034 1141 003A                  		move.b	d1,$3A(a0)
0001B038 B229 001A                  		cmp.b	$1A(a1),d1
0001B03C 6700                       		beq.s	loc_19008
0001B03E 08A9 0003 0022             		bclr	#3,$22(a1)
0001B044 6700                       		beq.s	loc_19008
0001B046 4229 0025                  		clr.b	$25(a1)
0001B04A 137C 0002 0024             		move.b	#2,$24(a1)
0001B050 45F8 D000                  		lea	($FFFFD000).w,a2
0001B054 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B05A 446A 0012                  		neg.w	$12(a2)
0001B05E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B064 6600                       		bne.s	loc_18FDC
0001B066 E0EA 0012                  		asr	$12(a2)
0001B06A                            
0001B06A                            loc_18FDC:
0001B06A 08EA 0001 0022             		bset	#1,$22(a2)
0001B070 08AA 0003 0022             		bclr	#3,$22(a2)
0001B076 422A 003C                  		clr.b	$3C(a2)
0001B07A 2F08                       		move.l	a0,-(sp)
0001B07C 41D2                       		lea	(a2),a0
0001B07E                            	;	jsr	Obj01_ChkRoll
0001B07E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001B084 205F                       		movea.l	(sp)+,a0
0001B086 157C 0002 0024             		move.b	#2,$24(a2)
0001B08C 303C 00CC                  		move.w	#$CC,d0
0001B090 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B096                            
0001B096                            loc_19008:
0001B096 4268 0010                  		clr.w	$10(a0)
0001B09A 4268 0012                  		clr.w	$12(a0)
0001B09E 5428 0024                  		addq.b	#2,$24(a0)
0001B0A2 6000 FE64                  		bra.w	loc_18E7A
0001B0A6                            ; ===========================================================================
0001B0A6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B0B0                            		even
0001B0B0 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B0B4                            		even
0001B0B4 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B0B8                            		even
0001B0B8                            ; ===========================================================================
0001B0B8                            
0001B0B8                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B0B8 10BC 003F                  		move.b	#$3F,(a0)
0001B0BC 4228 0024                  		clr.b	$24(a0)
0001B0C0 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B0C6 6700                       		beq.s	Obj7B_MakeFrag
0001B0C8 4E75                       		rts	
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            Obj7B_MakeFrag:
0001B0CA 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B0D0 7203                       		moveq	#3,d1
0001B0D2 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B0D6                            
0001B0D6                            Obj7B_Loop:
0001B0D6 4EB9 0000 F578             		jsr	SingleObjLoad
0001B0DC 6600                       		bne.s	loc_1909A
0001B0DE 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B0E2 137C 000A 0024             		move.b	#$A,$24(a1)
0001B0E8 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B0F0 137C 0003 0018             		move.b	#3,$18(a1)
0001B0F6 337C 0518 0002             		move.w	#$518,2(a1)
0001B0FC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B102 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B108 335A 0010                  		move.w	(a2)+,$10(a1)
0001B10C 335A 0012                  		move.w	(a2)+,$12(a1)
0001B110 137C 0098 0020             		move.b	#$98,$20(a1)
0001B116 0029 0004 0001             		ori.b	#4,1(a1)
0001B11C 08E9 0007 0001             		bset	#7,1(a1)
0001B122 137C 000C 0019             		move.b	#$C,$19(a1)
0001B128                            
0001B128                            loc_1909A:
0001B128 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B12C                            
0001B12C 4E75                       		rts	
0001B12E                            ; ===========================================================================
0001B12E FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B132 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B136 0100 FCC0                  		dc.w $100, $FCC0
0001B13A 00A0 FDC0                  		dc.w $A0, $FDC0
0001B13E                            ; ===========================================================================
0001B13E                            
0001B13E                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B13E 4EB9 0000 F0CA             		jsr	SpeedToPos
0001B144 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B14A 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B150 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B156 7004                       		moveq	#4,d0
0001B158 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B15C E448                       		lsr.w	#2,d0
0001B15E 1140 001A                  		move.b	d0,$1A(a0)
0001B162 4A28 0001                  		tst.b	1(a0)
0001B166 6A00 F7E0                  		bpl.w	Obj7A_Delete
0001B16A 4E75                       		rts	
0001B16C                            ; ===========================================================================
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C                            Map_obj7B:
0001B16C                            	include "_maps\obj7B.asm"
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B16C                            ; ---------------------------------------------------------------------------
0001B16C 0000                       		dc.w byte_190E2-Map_obj7B
0001B16E 0000                       		dc.w byte_190E8-Map_obj7B
0001B170 01                         byte_190E2:	dc.b 1
0001B171 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B176 01                         byte_190E8:	dc.b 1
0001B177 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B17C                            		even
0001B17C                            		even
0001B17C                            
0001B17C                            ; ===========================================================================
0001B17C                            ; ---------------------------------------------------------------------------
0001B17C                            ; Object 75 - Eggman (SYZ)
0001B17C                            ; ---------------------------------------------------------------------------
0001B17C                            
0001B17C                            Obj75:					; XREF: Obj_Index
0001B17C 7000                       		moveq	#0,d0
0001B17E 1028 0024                  		move.b	$24(a0),d0
0001B182 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B186 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B18A                            ; ===========================================================================
0001B18A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B18C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B18E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B190 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B192 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B194                            
0001B194 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B197 0401 05                    		dc.b 4,	1, 5
0001B19A 0607 05                    		dc.b 6,	7, 5
0001B19D 0800 05                    		dc.b 8,	0, 5
0001B1A0                            ; ===========================================================================
0001B1A0                            
0001B1A0                            Obj75_Main:				; XREF: Obj75_Index
0001B1A0 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B1A6 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B1AC 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B1B2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B1B8 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1BE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B1C4 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B1C8 2248                       		movea.l	a0,a1
0001B1CA 7203                       		moveq	#3,d1
0001B1CC 6000                       		bra.s	Obj75_LoadBoss
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            Obj75_Loop:
0001B1CE 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001B1D4 6600                       		bne.s	Obj75_ShipMain
0001B1D6 12BC 0075                  		move.b	#$75,(a1)
0001B1DA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1E6                            
0001B1E6                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B1E6 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1EC 4229 0025                  		clr.b	$25(a1)
0001B1F0 135A 0024                  		move.b	(a2)+,$24(a1)
0001B1F4 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B1F8 135A 0018                  		move.b	(a2)+,$18(a1)
0001B1FC 237C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a1)
0001B204 337C 0400 0002             		move.w	#$400,2(a1)
0001B20A 137C 0004 0001             		move.b	#4,1(a1)
0001B210 137C 0020 0019             		move.b	#$20,$19(a1)
0001B216 2348 0034                  		move.l	a0,$34(a1)
0001B21A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B21E                            
0001B21E                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B21E 7000                       		moveq	#0,d0
0001B220 1028 0025                  		move.b	$25(a0),d0
0001B224 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B228 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B22C 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001B232 4EB9 0000 C138             		jsr	AnimateSprite
0001B238 7003                       		moveq	#3,d0
0001B23A C028 0022                  		and.b	$22(a0),d0
0001B23E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B244 8128 0001                  		or.b	d0,1(a0)
0001B248 4EF9 0000 F0E4             		jmp	DisplaySprite
0001B24E                            ; ===========================================================================
0001B24E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B252 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B256 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B25A                            ; ===========================================================================
0001B25A                            
0001B25A                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B25A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B260 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B266 6400                       		bcc.s	loc_191DE
0001B268 5428 0025                  		addq.b	#2,$25(a0)
0001B26C                            
0001B26C                            loc_191DE:
0001B26C 1028 003F                  		move.b	$3F(a0),d0
0001B270 5428 003F                  		addq.b	#2,$3F(a0)
0001B274 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001B27A E440                       		asr.w	#2,d0
0001B27C 3140 0012                  		move.w	d0,$12(a0)
0001B280                            
0001B280                            loc_191F2:
0001B280 6100 E676                  		bsr.w	BossMove
0001B284 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B28A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B290                            
0001B290                            loc_19202:
0001B290 3028 0008                  		move.w	8(a0),d0
0001B294 0440 2C00                  		subi.w	#$2C00,d0
0001B298 EA48                       		lsr.w	#5,d0
0001B29A 1140 0034                  		move.b	d0,$34(a0)
0001B29E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B2A4 6400                       		bcc.s	locret_19256
0001B2A6 4A28 0022                  		tst.b	$22(a0)
0001B2AA 6B00                       		bmi.s	loc_19258
0001B2AC 4A28 0020                  		tst.b	$20(a0)
0001B2B0 6600                       		bne.s	locret_19256
0001B2B2 4A28 003E                  		tst.b	$3E(a0)
0001B2B6 6600                       		bne.s	loc_1923A
0001B2B8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B2BE 303C 00AC                  		move.w	#$AC,d0
0001B2C2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B2C8                            
0001B2C8                            loc_1923A:
0001B2C8 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B2CC 7000                       		moveq	#0,d0
0001B2CE 4A51                       		tst.w	(a1)
0001B2D0 6600                       		bne.s	loc_19248
0001B2D2 303C 0EEE                  		move.w	#$EEE,d0
0001B2D6                            
0001B2D6                            loc_19248:
0001B2D6 3280                       		move.w	d0,(a1)
0001B2D8 5328 003E                  		subq.b	#1,$3E(a0)
0001B2DC 6600                       		bne.s	locret_19256
0001B2DE 117C 000F 0020             		move.b	#$F,$20(a0)
0001B2E4                            
0001B2E4                            locret_19256:
0001B2E4 4E75                       		rts	
0001B2E6                            ; ===========================================================================
0001B2E6                            
0001B2E6                            loc_19258:				; XREF: loc_19202
0001B2E6 7064                       		moveq	#100,d0
0001B2E8 6100 0000                  		bsr.w	AddPoints
0001B2EC 117C 0006 0025             		move.b	#6,$25(a0)
0001B2F2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B2F8 4268 0010                  		clr.w	$10(a0)
0001B2FC 4E75                       		rts	
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            loc_19270:				; XREF: Obj75_ShipIndex
0001B2FE 3028 0030                  		move.w	$30(a0),d0
0001B302 317C 0140 0010             		move.w	#$140,$10(a0)
0001B308 0828 0000 0022             		btst	#0,$22(a0)
0001B30E 6600                       		bne.s	loc_1928E
0001B310 4468 0010                  		neg.w	$10(a0)
0001B314 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B318 6E00                       		bgt.s	loc_1929E
0001B31A 6000                       		bra.s	loc_19294
0001B31C                            ; ===========================================================================
0001B31C                            
0001B31C                            loc_1928E:
0001B31C 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B320 6D00                       		blt.s	loc_1929E
0001B322                            
0001B322                            loc_19294:
0001B322 0868 0000 0022             		bchg	#0,$22(a0)
0001B328 4228 003D                  		clr.b	$3D(a0)
0001B32C                            
0001B32C                            loc_1929E:
0001B32C 0440 2C10                  		subi.w	#$2C10,d0
0001B330 0240 001F                  		andi.w	#$1F,d0
0001B334 0440 001F                  		subi.w	#$1F,d0
0001B338 6A00                       		bpl.s	loc_192AE
0001B33A 4440                       		neg.w	d0
0001B33C                            
0001B33C                            loc_192AE:
0001B33C 5340                       		subq.w	#1,d0
0001B33E 6E00                       		bgt.s	loc_192E8
0001B340 4A28 003D                  		tst.b	$3D(a0)
0001B344 6600                       		bne.s	loc_192E8
0001B346 3238 D008                  		move.w	($FFFFD008).w,d1
0001B34A 0441 2C00                  		subi.w	#$2C00,d1
0001B34E EA41                       		asr.w	#5,d1
0001B350 B228 0034                  		cmp.b	$34(a0),d1
0001B354 6600                       		bne.s	loc_192E8
0001B356 7000                       		moveq	#0,d0
0001B358 1028 0034                  		move.b	$34(a0),d0
0001B35C EB40                       		asl.w	#5,d0
0001B35E 0640 2C10                  		addi.w	#$2C10,d0
0001B362 3140 0030                  		move.w	d0,$30(a0)
0001B366 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B36A 5428 0025                  		addq.b	#2,$25(a0)
0001B36E 4268 0028                  		clr.w	$28(a0)
0001B372 4268 0010                  		clr.w	$10(a0)
0001B376                            
0001B376                            loc_192E8:
0001B376 6000 FEF4                  		bra.w	loc_191DE
0001B37A                            ; ===========================================================================
0001B37A                            
0001B37A                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B37A 7000                       		moveq	#0,d0
0001B37C 1028 0028                  		move.b	$28(a0),d0
0001B380 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B384 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B388                            ; ===========================================================================
0001B388 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B38A 0000                       		dc.w loc_19348-off_192FA
0001B38C 0000                       		dc.w loc_1938E-off_192FA
0001B38E 0000                       		dc.w loc_193D0-off_192FA
0001B390                            ; ===========================================================================
0001B390                            
0001B390                            loc_19302:				; XREF: off_192FA
0001B390 317C 0180 0012             		move.w	#$180,$12(a0)
0001B396 3028 0038                  		move.w	$38(a0),d0
0001B39A 0C40 0556                  		cmpi.w	#$556,d0
0001B39E 6500                       		bcs.s	loc_19344
0001B3A0 317C 0556 0038             		move.w	#$556,$38(a0)
0001B3A6 4268 003C                  		clr.w	$3C(a0)
0001B3AA 70FF                       		moveq	#-1,d0
0001B3AC 3028 0036                  		move.w	$36(a0),d0
0001B3B0 6700                       		beq.s	loc_1933C
0001B3B2 2240                       		movea.l	d0,a1
0001B3B4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B3BA 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B3C0 2348 0034                  		move.l	a0,$34(a1)
0001B3C4 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B3CA                            
0001B3CA                            loc_1933C:
0001B3CA 4268 0012                  		clr.w	$12(a0)
0001B3CE 5428 0028                  		addq.b	#2,$28(a0)
0001B3D2                            
0001B3D2                            loc_19344:
0001B3D2 6000 FEAC                  		bra.w	loc_191F2
0001B3D6                            ; ===========================================================================
0001B3D6                            
0001B3D6                            loc_19348:				; XREF: off_192FA
0001B3D6 5368 003C                  		subq.w	#1,$3C(a0)
0001B3DA 6A00                       		bpl.s	loc_19366
0001B3DC 5428 0028                  		addq.b	#2,$28(a0)
0001B3E0 317C F800 0012             		move.w	#-$800,$12(a0)
0001B3E6 4A68 0036                  		tst.w	$36(a0)
0001B3EA 6600                       		bne.s	loc_19362
0001B3EC E0E8 0012                  		asr	$12(a0)
0001B3F0                            
0001B3F0                            loc_19362:
0001B3F0 7000                       		moveq	#0,d0
0001B3F2 6000                       		bra.s	loc_1937C
0001B3F4                            ; ===========================================================================
0001B3F4                            
0001B3F4                            loc_19366:
0001B3F4 7000                       		moveq	#0,d0
0001B3F6 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B3FC 6E00                       		bgt.s	loc_1937C
0001B3FE 7002                       		moveq	#2,d0
0001B400 0828 0001 003D             		btst	#1,$3D(a0)
0001B406 6700                       		beq.s	loc_1937C
0001B408 4440                       		neg.w	d0
0001B40A                            
0001B40A                            loc_1937C:
0001B40A D068 0038                  		add.w	$38(a0),d0
0001B40E 3140 000C                  		move.w	d0,$C(a0)
0001B412 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B418 6000 FE76                  		bra.w	loc_19202
0001B41C                            ; ===========================================================================
0001B41C                            
0001B41C                            loc_1938E:				; XREF: off_192FA
0001B41C 303C 04DA                  		move.w	#$4DA,d0
0001B420 4A68 0036                  		tst.w	$36(a0)
0001B424 6700                       		beq.s	loc_1939C
0001B426 0440 0018                  		subi.w	#$18,d0
0001B42A                            
0001B42A                            loc_1939C:
0001B42A B068 0038                  		cmp.w	$38(a0),d0
0001B42E 6D00                       		blt.s	loc_193BE
0001B430 317C 0008 003C             		move.w	#8,$3C(a0)
0001B436 4A68 0036                  		tst.w	$36(a0)
0001B43A 6700                       		beq.s	loc_193B4
0001B43C 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B442                            
0001B442                            loc_193B4:
0001B442 5428 0028                  		addq.b	#2,$28(a0)
0001B446 4268 0012                  		clr.w	$12(a0)
0001B44A 6000                       		bra.s	loc_193CC
0001B44C                            ; ===========================================================================
0001B44C                            
0001B44C                            loc_193BE:
0001B44C 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B452 6C00                       		bge.s	loc_193CC
0001B454 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B45A                            
0001B45A                            loc_193CC:
0001B45A 6000 FE24                  		bra.w	loc_191F2
0001B45E                            ; ===========================================================================
0001B45E                            
0001B45E                            loc_193D0:				; XREF: off_192FA
0001B45E 5368 003C                  		subq.w	#1,$3C(a0)
0001B462 6E00                       		bgt.s	loc_19406
0001B464 6B00                       		bmi.s	loc_193EE
0001B466 70FF                       		moveq	#-1,d0
0001B468 3028 0036                  		move.w	$36(a0),d0
0001B46C 6700                       		beq.s	loc_193E8
0001B46E 2240                       		movea.l	d0,a1
0001B470 137C 000A 0029             		move.b	#$A,$29(a1)
0001B476                            
0001B476                            loc_193E8:
0001B476 4268 0036                  		clr.w	$36(a0)
0001B47A 6000                       		bra.s	loc_19406
0001B47C                            ; ===========================================================================
0001B47C                            
0001B47C                            loc_193EE:
0001B47C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B482 6600                       		bne.s	loc_19406
0001B484 4228 0029                  		clr.b	$29(a0)
0001B488 5528 0025                  		subq.b	#2,$25(a0)
0001B48C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B492 6000                       		bra.s	loc_19446
0001B494                            ; ===========================================================================
0001B494                            
0001B494                            loc_19406:
0001B494 7001                       		moveq	#1,d0
0001B496 4A68 0036                  		tst.w	$36(a0)
0001B49A 6700                       		beq.s	loc_19410
0001B49C 7002                       		moveq	#2,d0
0001B49E                            
0001B49E                            loc_19410:
0001B49E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B4A4 6700                       		beq.s	loc_19424
0001B4A6 6D00                       		blt.s	loc_1941C
0001B4A8 4440                       		neg.w	d0
0001B4AA                            
0001B4AA                            loc_1941C:
0001B4AA 4A68 0036                  		tst.w	$36(a0)
0001B4AE D168 0038                  		add.w	d0,$38(a0)
0001B4B2                            
0001B4B2                            loc_19424:
0001B4B2 7000                       		moveq	#0,d0
0001B4B4 4A68 0036                  		tst.w	$36(a0)
0001B4B8 6700                       		beq.s	loc_19438
0001B4BA 7002                       		moveq	#2,d0
0001B4BC 0828 0000 003D             		btst	#0,$3D(a0)
0001B4C2 6700                       		beq.s	loc_19438
0001B4C4 4440                       		neg.w	d0
0001B4C6                            
0001B4C6                            loc_19438:
0001B4C6 D068 0038                  		add.w	$38(a0),d0
0001B4CA 3140 000C                  		move.w	d0,$C(a0)
0001B4CE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B4D4                            
0001B4D4                            loc_19446:
0001B4D4 6000 FDBA                  		bra.w	loc_19202
0001B4D8                            
0001B4D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4D8                            
0001B4D8                            
0001B4D8                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B4D8 4268 0036                  		clr.w	$36(a0)
0001B4DC 43F8 D040                  		lea	($FFFFD040).w,a1
0001B4E0 703E                       		moveq	#$3E,d0
0001B4E2 7276                       		moveq	#$76,d1
0001B4E4 1428 0034                  		move.b	$34(a0),d2
0001B4E8                            
0001B4E8                            Obj75_FindLoop:
0001B4E8 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B4EA 6600                       		bne.s	loc_1946A	; if not, branch
0001B4EC B429 0028                  		cmp.b	$28(a1),d2
0001B4F0 6600                       		bne.s	loc_1946A
0001B4F2 3149 0036                  		move.w	a1,$36(a0)
0001B4F6 6000                       		bra.s	locret_19472
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            loc_1946A:
0001B4F8 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B4FC 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B500                            
0001B500                            locret_19472:
0001B500 4E75                       		rts	
0001B502                            ; End of function Obj75_FindBlocks
0001B502                            
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            loc_19474:				; XREF: Obj75_ShipIndex
0001B502 5368 003C                  		subq.w	#1,$3C(a0)
0001B506 6B00                       		bmi.s	loc_1947E
0001B508 6000 E3AC                  		bra.w	BossDefeated
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            loc_1947E:
0001B50C 5428 0025                  		addq.b	#2,$25(a0)
0001B510 4268 0012                  		clr.w	$12(a0)
0001B514 08E8 0000 0022             		bset	#0,$22(a0)
0001B51A 08A8 0007 0022             		bclr	#7,$22(a0)
0001B520 4268 0010                  		clr.w	$10(a0)
0001B524 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B52A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B52E 6600                       		bne.s	loc_194A8
0001B530 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B536                            
0001B536                            loc_194A8:
0001B536 6000 FD58                  		bra.w	loc_19202
0001B53A                            ; ===========================================================================
0001B53A                            
0001B53A                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B53A 5268 003C                  		addq.w	#1,$3C(a0)
0001B53E 6700                       		beq.s	loc_194BC
0001B540 6A00                       		bpl.s	loc_194C2
0001B542 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B548 6000                       		bra.s	loc_194EE
0001B54A                            ; ===========================================================================
0001B54A                            
0001B54A                            loc_194BC:
0001B54A 4268 0012                  		clr.w	$12(a0)
0001B54E 6000                       		bra.s	loc_194EE
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            loc_194C2:
0001B550 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B556 6500                       		bcs.s	loc_194DA
0001B558 6700                       		beq.s	loc_194E0
0001B55A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B560 6500                       		bcs.s	loc_194EE
0001B562 5428 0025                  		addq.b	#2,$25(a0)
0001B566 6000                       		bra.s	loc_194EE
0001B568                            ; ===========================================================================
0001B568                            
0001B568                            loc_194DA:
0001B568 5168 0012                  		subq.w	#8,$12(a0)
0001B56C 6000                       		bra.s	loc_194EE
0001B56E                            ; ===========================================================================
0001B56E                            
0001B56E                            loc_194E0:
0001B56E 4268 0012                  		clr.w	$12(a0)
0001B572 6100 E5BC                  		bsr.w	BossEnd
0001B576                            
0001B576                            loc_194EE:
0001B576 6000 FD08                  		bra.w	loc_191F2
0001B57A                            ; ===========================================================================
0001B57A                            
0001B57A                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B57A 317C 0400 0010             		move.w	#$400,$10(a0)
0001B580 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B586 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B58C 6400                       		bcc.s	loc_1950C
0001B58E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B592 6000                       		bra.s	loc_19512
0001B594                            ; ===========================================================================
0001B594                            
0001B594                            loc_1950C:
0001B594 4A28 0001                  		tst.b	1(a0)
0001B598 6A00                       		bpl.s	Obj75_ShipDelete
0001B59A                            
0001B59A                            loc_19512:
0001B59A 6100 E35C                  		bsr.w	BossMove
0001B59E 6000 FCCC                  		bra.w	loc_191DE
0001B5A2                            ; ===========================================================================
0001B5A2                            
0001B5A2                            Obj75_ShipDelete:
0001B5A2 4EF9 0000 F120             		jmp	DeleteObject
0001B5A8                            ; ===========================================================================
0001B5A8                            
0001B5A8                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B5A8 7201                       		moveq	#1,d1
0001B5AA 2268 0034                  		movea.l	$34(a0),a1
0001B5AE 7000                       		moveq	#0,d0
0001B5B0 1029 0025                  		move.b	$25(a1),d0
0001B5B4 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B5B8 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B5BC 1141 001C                  		move.b	d1,$1C(a0)
0001B5C0 1010                       		move.b	(a0),d0
0001B5C2 B011                       		cmp.b	(a1),d0
0001B5C4 6600                       		bne.s	Obj75_FaceDelete
0001B5C6 6000                       		bra.s	loc_195BE
0001B5C8                            ; ===========================================================================
0001B5C8                            
0001B5C8                            Obj75_FaceDelete:
0001B5C8 4EF9 0000 F120             		jmp	DeleteObject
0001B5CE                            ; ===========================================================================
0001B5CE 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B5D2 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B5D6 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B5DA                            ; ===========================================================================
0001B5DA                            
0001B5DA                            loc_19552:				; XREF: off_19546
0001B5DA 720A                       		moveq	#$A,d1
0001B5DC 4E75                       		rts	
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_19556:				; XREF: off_19546
0001B5DE 7206                       		moveq	#6,d1
0001B5E0 4E75                       		rts	
0001B5E2                            ; ===========================================================================
0001B5E2                            
0001B5E2                            loc_1955A:				; XREF: off_19546
0001B5E2 7000                       		moveq	#0,d0
0001B5E4 1029 0028                  		move.b	$28(a1),d0
0001B5E8 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B5EC 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B5F0                            ; ===========================================================================
0001B5F0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B5F4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_19570:				; XREF: off_19568
0001B5F8 6000                       		bra.s	loc_19574
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            loc_19572:				; XREF: off_19568
0001B5FA 7206                       		moveq	#6,d1
0001B5FC                            
0001B5FC                            loc_19574:				; XREF: off_19546
0001B5FC 4A29 0020                  		tst.b	$20(a1)
0001B600 6600                       		bne.s	loc_1957E
0001B602 7205                       		moveq	#5,d1
0001B604 4E75                       		rts	
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            loc_1957E:
0001B606 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B60C 6500                       		bcs.s	locret_19588
0001B60E 7204                       		moveq	#4,d1
0001B610                            
0001B610                            locret_19588:
0001B610 4E75                       		rts	
0001B612                            ; ===========================================================================
0001B612                            
0001B612                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B612 117C 0007 001C             		move.b	#7,$1C(a0)
0001B618 2268 0034                  		movea.l	$34(a0),a1
0001B61C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B622 6600                       		bne.s	loc_195AA
0001B624 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B62A 4A28 0001                  		tst.b	1(a0)
0001B62E 6A00                       		bpl.s	Obj75_FlameDelete
0001B630 6000                       		bra.s	loc_195B6
0001B632                            ; ===========================================================================
0001B632                            
0001B632                            loc_195AA:
0001B632 4A69 0010                  		tst.w	$10(a1)
0001B636 6700                       		beq.s	loc_195B6
0001B638 117C 0008 001C             		move.b	#8,$1C(a0)
0001B63E                            
0001B63E                            loc_195B6:
0001B63E 6000                       		bra.s	loc_195BE
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            Obj75_FlameDelete:
0001B640 4EF9 0000 F120             		jmp	DeleteObject
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            loc_195BE:
0001B646 43F9 0001 9D64             		lea	(Ani_Eggman).l,a1
0001B64C 4EB9 0000 C138             		jsr	AnimateSprite
0001B652 2268 0034                  		movea.l	$34(a0),a1
0001B656 3169 0008 0008             		move.w	8(a1),8(a0)
0001B65C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B662                            
0001B662                            loc_195DA:
0001B662 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B668 7003                       		moveq	#3,d0
0001B66A C028 0022                  		and.b	$22(a0),d0
0001B66E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B674 8128 0001                  		or.b	d0,1(a0)
0001B678 4EF9 0000 F0E4             		jmp	DisplaySprite
0001B67E                            ; ===========================================================================
0001B67E                            
0001B67E                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B67E 217C 0001 9E7C 0004        		move.l	#Map_BossItems,4(a0)
0001B686 317C 246C 0002             		move.w	#$246C,2(a0)
0001B68C 117C 0005 001A             		move.b	#5,$1A(a0)
0001B692 2268 0034                  		movea.l	$34(a0),a1
0001B696 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B69C 6600                       		bne.s	loc_1961C
0001B69E 4A28 0001                  		tst.b	1(a0)
0001B6A2 6A00                       		bpl.s	Obj75_SpikeDelete
0001B6A4                            
0001B6A4                            loc_1961C:
0001B6A4 3169 0008 0008             		move.w	8(a1),8(a0)
0001B6AA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B6B0 3028 003C                  		move.w	$3C(a0),d0
0001B6B4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B6BA 6600                       		bne.s	loc_19652
0001B6BC 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B6C2 6700                       		beq.s	loc_1964C
0001B6C4 4A29 0028                  		tst.b	$28(a1)
0001B6C8 6600                       		bne.s	loc_19658
0001B6CA 0C40 0094                  		cmpi.w	#$94,d0
0001B6CE 6C00                       		bge.s	loc_19658
0001B6D0 5E40                       		addq.w	#7,d0
0001B6D2 6000                       		bra.s	loc_19658
0001B6D4                            ; ===========================================================================
0001B6D4                            
0001B6D4                            loc_1964C:
0001B6D4 4A69 003C                  		tst.w	$3C(a1)
0001B6D8 6A00                       		bpl.s	loc_19658
0001B6DA                            
0001B6DA                            loc_19652:
0001B6DA 4A40                       		tst.w	d0
0001B6DC 6F00                       		ble.s	loc_19658
0001B6DE 5B40                       		subq.w	#5,d0
0001B6E0                            
0001B6E0                            loc_19658:
0001B6E0 3140 003C                  		move.w	d0,$3C(a0)
0001B6E4 E440                       		asr.w	#2,d0
0001B6E6 D168 000C                  		add.w	d0,$C(a0)
0001B6EA 117C 0008 0019             		move.b	#8,$19(a0)
0001B6F0 117C 000C 0016             		move.b	#$C,$16(a0)
0001B6F6 4228 0020                  		clr.b	$20(a0)
0001B6FA 2268 0034                  		movea.l	$34(a0),a1
0001B6FE 4A29 0020                  		tst.b	$20(a1)
0001B702 6700                       		beq.s	loc_19688
0001B704 4A29 0029                  		tst.b	$29(a1)
0001B708 6600                       		bne.s	loc_19688
0001B70A 117C 0084 0020             		move.b	#$84,$20(a0)
0001B710                            
0001B710                            loc_19688:
0001B710 6000 FF50                  		bra.w	loc_195DA
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            Obj75_SpikeDelete:
0001B714 4EF9 0000 F120             		jmp	DeleteObject
0001B71A                            ; ===========================================================================
0001B71A                            ; ---------------------------------------------------------------------------
0001B71A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B71A                            ; ---------------------------------------------------------------------------
0001B71A                            
0001B71A                            Obj76:					; XREF: Obj_Index
0001B71A 7000                       		moveq	#0,d0
0001B71C 1028 0024                  		move.b	$24(a0),d0
0001B720 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B724 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B728                            ; ===========================================================================
0001B728 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B72A 0000                       		dc.w Obj76_Action-Obj76_Index
0001B72C 0000                       		dc.w loc_19762-Obj76_Index
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            Obj76_Main:				; XREF: Obj76_Index
0001B72E 7800                       		moveq	#0,d4
0001B730 3A3C 2C10                  		move.w	#$2C10,d5
0001B734 7C09                       		moveq	#9,d6
0001B736 43D0                       		lea	(a0),a1
0001B738 6000                       		bra.s	Obj76_MakeBlock
0001B73A                            ; ===========================================================================
0001B73A                            
0001B73A                            Obj76_Loop:
0001B73A 4EB9 0000 F578             		jsr	SingleObjLoad
0001B740 6600                       		bne.s	Obj76_ExitLoop
0001B742                            
0001B742                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B742 12BC 0076                  		move.b	#$76,(a1)
0001B746 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B74E 337C 4000 0002             		move.w	#$4000,2(a1)
0001B754 137C 0004 0001             		move.b	#4,1(a1)
0001B75A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B760 137C 0010 0016             		move.b	#$10,$16(a1)
0001B766 137C 0003 0018             		move.b	#3,$18(a1)
0001B76C 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B770 337C 0582 000C             		move.w	#$582,$C(a1)
0001B776 3344 0028                  		move.w	d4,$28(a1)
0001B77A 0644 0101                  		addi.w	#$101,d4
0001B77E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B782 5429 0024                  		addq.b	#2,$24(a1)
0001B786 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B78A                            
0001B78A                            Obj76_ExitLoop:
0001B78A 4E75                       		rts	
0001B78C                            ; ===========================================================================
0001B78C                            
0001B78C                            Obj76_Action:				; XREF: Obj76_Index
0001B78C 1028 0029                  		move.b	$29(a0),d0
0001B790 B028 0028                  		cmp.b	$28(a0),d0
0001B794 6700                       		beq.s	Obj76_Solid
0001B796 4A00                       		tst.b	d0
0001B798 6B00                       		bmi.s	loc_19718
0001B79A                            
0001B79A                            loc_19712:
0001B79A 6100 0000                  		bsr.w	Obj76_Break
0001B79E 6000                       		bra.s	Obj76_Display
0001B7A0                            ; ===========================================================================
0001B7A0                            
0001B7A0                            loc_19718:
0001B7A0 2268 0034                  		movea.l	$34(a0),a1
0001B7A4 4A29 0021                  		tst.b	$21(a1)
0001B7A8 67F0                       		beq.s	loc_19712
0001B7AA 3169 0008 0008             		move.w	8(a1),8(a0)
0001B7B0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B7B6 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B7BC B2C8                       		cmpa.w	a0,a1
0001B7BE 6500                       		bcs.s	Obj76_Display
0001B7C0 3029 0012                  		move.w	$12(a1),d0
0001B7C4 48C0                       		ext.l	d0
0001B7C6 E080                       		asr.l	#8,d0
0001B7C8 D168 000C                  		add.w	d0,$C(a0)
0001B7CC 6000                       		bra.s	Obj76_Display
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            Obj76_Solid:				; XREF: Obj76_Action
0001B7CE 323C 001B                  		move.w	#$1B,d1
0001B7D2 343C 0010                  		move.w	#$10,d2
0001B7D6 363C 0011                  		move.w	#$11,d3
0001B7DA 3828 0008                  		move.w	8(a0),d4
0001B7DE 4EB9 0001 14C2             		jsr	SolidObject
0001B7E4                            
0001B7E4                            Obj76_Display:				; XREF: Obj76_Action
0001B7E4 4EF9 0000 F0E4             		jmp	DisplaySprite
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            loc_19762:				; XREF: Obj76_Index
0001B7EA 4A28 0001                  		tst.b	1(a0)
0001B7EE 6A00                       		bpl.s	Obj76_Delete
0001B7F0 4EB9 0000 F0AA             		jsr	ObjectFall
0001B7F6 4EF9 0000 F0E4             		jmp	DisplaySprite
0001B7FC                            ; ===========================================================================
0001B7FC                            
0001B7FC                            Obj76_Delete:
0001B7FC 4EF9 0000 F120             		jmp	DeleteObject
0001B802                            
0001B802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B802                            
0001B802                            
0001B802                            Obj76_Break:				; XREF: Obj76_Action
0001B802 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B806 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B80A 7801                       		moveq	#1,d4
0001B80C 7203                       		moveq	#3,d1
0001B80E 7438                       		moveq	#$38,d2
0001B810 5428 0024                  		addq.b	#2,$24(a0)
0001B814 117C 0008 0019             		move.b	#8,$19(a0)
0001B81A 117C 0008 0016             		move.b	#8,$16(a0)
0001B820 43D0                       		lea	(a0),a1
0001B822 6000                       		bra.s	Obj76_MakeFrag
0001B824                            ; ===========================================================================
0001B824                            
0001B824                            Obj76_LoopFrag:
0001B824 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001B82A 6600                       		bne.s	loc_197D4
0001B82C                            
0001B82C                            Obj76_MakeFrag:
0001B82C 45D0                       		lea	(a0),a2
0001B82E 47D1                       		lea	(a1),a3
0001B830 7603                       		moveq	#3,d3
0001B832                            
0001B832                            loc_197AA:
0001B832 26DA                       		move.l	(a2)+,(a3)+
0001B834 26DA                       		move.l	(a2)+,(a3)+
0001B836 26DA                       		move.l	(a2)+,(a3)+
0001B838 26DA                       		move.l	(a2)+,(a3)+
0001B83A 51CB FFF6                  		dbf	d3,loc_197AA
0001B83E                            
0001B83E 335C 0010                  		move.w	(a4)+,$10(a1)
0001B842 335C 0012                  		move.w	(a4)+,$12(a1)
0001B846 361D                       		move.w	(a5)+,d3
0001B848 D769 0008                  		add.w	d3,8(a1)
0001B84C 361D                       		move.w	(a5)+,d3
0001B84E D769 000C                  		add.w	d3,$C(a1)
0001B852 1344 001A                  		move.b	d4,$1A(a1)
0001B856 5244                       		addq.w	#1,d4
0001B858 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B85C                            
0001B85C                            loc_197D4:
0001B85C 303C 00CB                  		move.w	#$CB,d0
0001B860 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B866                            ; End of function Obj76_Break
0001B866                            
0001B866                            ; ===========================================================================
0001B866 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B86A 0180 FE00                  		dc.w $180, $FE00
0001B86E FF00 FF00                  		dc.w $FF00, $FF00
0001B872 0100 FF00                  		dc.w $100, $FF00
0001B876 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B87A 0010 0000                  		dc.w $10, 0
0001B87E 0000 0010                  		dc.w 0,	$10
0001B882 0010 0010                  		dc.w $10, $10
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            Map_obj76:
0001B886                            	include "_maps\obj76.asm"
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B886                            ; ---------------------------------------------------------------------------
0001B886 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B88A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B88E 0000                       		dc.w byte_19826-Map_obj76
0001B890 02                         byte_19808:	dc.b 2
0001B891 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B896 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B89B 00                         		dc.b 0
0001B89C 01                         byte_19814:	dc.b 1
0001B89D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B8A2 01                         byte_1981A:	dc.b 1
0001B8A3 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B8A8 01                         byte_19820:	dc.b 1
0001B8A9 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B8AE 01                         byte_19826:	dc.b 1
0001B8AF F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B8B4                            		even
0001B8B4                            		even
0001B8B4                            
0001B8B4                            ; ===========================================================================
0001B8B4                            
0001B8B4                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B8B4 4EF9 0000 F120             		jmp	DeleteObject
0001B8BA                            ; ===========================================================================
0001B8BA                            ; ---------------------------------------------------------------------------
0001B8BA                            ; Object 82 - Eggman (SBZ2)
0001B8BA                            ; ---------------------------------------------------------------------------
0001B8BA                            
0001B8BA                            Obj82:					; XREF: Obj_Index
0001B8BA 7000                       		moveq	#0,d0
0001B8BC 1028 0024                  		move.b	$24(a0),d0
0001B8C0 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B8C4 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B8C8                            ; ===========================================================================
0001B8C8 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B8CA 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B8CC 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B8CE                            
0001B8CE 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B8D1 0400 03                    		dc.b 4,	0, 3
0001B8D4                            ; ===========================================================================
0001B8D4                            
0001B8D4                            Obj82_Main:				; XREF: Obj82_Index
0001B8D4 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B8D8 317C 2160 0008             		move.w	#$2160,8(a0)
0001B8DE 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B8E4 117C 000F 0020             		move.b	#$F,$20(a0)
0001B8EA 117C 0010 0021             		move.b	#$10,$21(a0)
0001B8F0 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8F6 4228 0025                  		clr.b	$25(a0)
0001B8FA 115A 0024                  		move.b	(a2)+,$24(a0)
0001B8FE 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B902 115A 0018                  		move.b	(a2)+,$18(a0)
0001B906 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B90E 317C 0400 0002             		move.w	#$400,2(a0)
0001B914 117C 0004 0001             		move.b	#4,1(a0)
0001B91A 08E8 0007 0001             		bset	#7,1(a0)
0001B920 117C 0020 0019             		move.b	#$20,$19(a0)
0001B926 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001B92C 6600                       		bne.s	Obj82_Eggman
0001B92E 2348 0034                  		move.l	a0,$34(a1)
0001B932 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B936 337C 2130 0008             		move.w	#$2130,8(a1)
0001B93C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B942 4228 0025                  		clr.b	$25(a0)
0001B946 135A 0024                  		move.b	(a2)+,$24(a1)
0001B94A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B94E 135A 0018                  		move.b	(a2)+,$18(a1)
0001B952 237C 0000 D8BA 0004        		move.l	#Map_obj32,4(a1)
0001B95A 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B960 137C 0004 0001             		move.b	#4,1(a1)
0001B966 08E9 0007 0001             		bset	#7,1(a1)
0001B96C 137C 0010 0019             		move.b	#$10,$19(a1)
0001B972 137C 0000 001A             		move.b	#0,$1A(a1)
0001B978                            
0001B978                            Obj82_Eggman:				; XREF: Obj82_Index
0001B978 7000                       		moveq	#0,d0
0001B97A 1028 0025                  		move.b	$25(a0),d0
0001B97E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B982 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B986 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B98A 4EB9 0000 C138             		jsr	AnimateSprite
0001B990 4EF9 0000 F0E4             		jmp	DisplaySprite
0001B996                            ; ===========================================================================
0001B996 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B998 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B99A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B99C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B99E                            ; ===========================================================================
0001B99E                            
0001B99E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B99E 3028 0008                  		move.w	8(a0),d0
0001B9A2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B9A6 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B9AA 6400                       		bcc.s	loc_19934	; if not, branch
0001B9AC 5428 0025                  		addq.b	#2,$25(a0)
0001B9B0 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B9B6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B9BC                            
0001B9BC                            loc_19934:				; XREF: Obj82_EggIndex
0001B9BC 4EF9 0000 F0CA             		jmp	SpeedToPos
0001B9C2                            ; ===========================================================================
0001B9C2                            
0001B9C2                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B9C2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B9C6 6600                       		bne.s	loc_19954	; if time remains, branch
0001B9C8 5428 0025                  		addq.b	#2,$25(a0)
0001B9CC 117C 0002 001C             		move.b	#2,$1C(a0)
0001B9D2 5868 000C                  		addq.w	#4,$C(a0)
0001B9D6 317C 000F 003C             		move.w	#15,$3C(a0)
0001B9DC                            
0001B9DC                            loc_19954:
0001B9DC 60DE                       		bra.s	loc_19934
0001B9DE                            ; ===========================================================================
0001B9DE                            
0001B9DE                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B9DE 5368 003C                  		subq.w	#1,$3C(a0)
0001B9E2 6E00                       		bgt.s	loc_199D0
0001B9E4 6600                       		bne.s	loc_1996A
0001B9E6 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B9EC 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B9F2                            
0001B9F2                            loc_1996A:
0001B9F2 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B9F8 6E00                       		bgt.s	loc_19976
0001B9FA 4268 0010                  		clr.w	$10(a0)
0001B9FE                            
0001B9FE                            loc_19976:
0001B9FE 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BA04 4A68 0012                  		tst.w	$12(a0)
0001BA08 6B00                       		bmi.s	Obj82_FindBlocks
0001BA0A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BA10 6500                       		bcs.s	Obj82_FindBlocks
0001BA12 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BA18 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BA1E 6500                       		bcs.s	Obj82_FindBlocks
0001BA20 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BA26 4268 0012                  		clr.w	$12(a0)
0001BA2A                            
0001BA2A                            Obj82_FindBlocks:
0001BA2A 3028 0010                  		move.w	$10(a0),d0
0001BA2E 8068 0012                  		or.w	$12(a0),d0
0001BA32 6600                       		bne.s	loc_199D0
0001BA34 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BA38 703E                       		moveq	#$3E,d0
0001BA3A 7240                       		moveq	#$40,d1
0001BA3C                            
0001BA3C                            Obj82_FindLoop:	
0001BA3C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BA3E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BA42 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BA46                            
0001BA46 6600                       		bne.s	loc_199D0
0001BA48 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BA4E 5428 0025                  		addq.b	#2,$25(a0)
0001BA52 117C 0001 001C             		move.b	#1,$1C(a0)
0001BA58                            
0001BA58                            loc_199D0:
0001BA58 6000 FF62                  		bra.w	loc_19934
0001BA5C                            ; ===========================================================================
0001BA5C                            
0001BA5C                            Obj82_Switch:				; XREF: Obj82_Index
0001BA5C 7000                       		moveq	#0,d0
0001BA5E 1028 0025                  		move.b	$25(a0),d0
0001BA62 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BA66 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BA6A                            ; ===========================================================================
0001BA6A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BA6C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BA6E                            ; ===========================================================================
0001BA6E                            
0001BA6E                            loc_199E6:				; XREF: Obj82_SwIndex
0001BA6E 2268 0034                  		movea.l	$34(a0),a1
0001BA72 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BA78 6600                       		bne.s	Obj82_SwDisplay
0001BA7A 117C 0001 001A             		move.b	#1,$1A(a0)
0001BA80 5428 0025                  		addq.b	#2,$25(a0)
0001BA84                            
0001BA84                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BA84 4EF9 0000 F0E4             		jmp	DisplaySprite
0001BA8A                            ; ===========================================================================
0001BA8A                            Ani_obj82:
0001BA8A                            	include "_anim\obj82.asm"
0001BA8A                            ; ---------------------------------------------------------------------------
0001BA8A                            ; Animation script - Eggman (SBZ2)
0001BA8A                            ; ---------------------------------------------------------------------------
0001BA8A 0000                       		dc.w byte_19A10-Ani_obj82
0001BA8C 0000                       		dc.w byte_19A14-Ani_obj82
0001BA8E 0000                       		dc.w byte_19A18-Ani_obj82
0001BA90 0000                       		dc.w byte_19A20-Ani_obj82
0001BA92 0000                       		dc.w byte_19A24-Ani_obj82
0001BA94 0000                       		dc.w byte_19A2A-Ani_obj82
0001BA96 0000                       		dc.w byte_19A30-Ani_obj82
0001BA98 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BA9C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BAA0 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BAA8 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BAAC 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BAB2 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BAB8 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BABC                            		even
0001BABC                            		even
0001BABC                            
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Sprite mappings - Eggman (SBZ2)
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            Map_obj82:
0001BABC                            	include "_maps\obj82.asm"
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Sprite mappings - Eggman (SBZ2)
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BAC0 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BAC4 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BAC8 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BACC 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BAD0 0000                       		dc.w byte_19B4F-Map_obj82
0001BAD2 03                         byte_19A4A:	dc.b 3
0001BAD3 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BAD8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BADD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BAE2 04                         byte_19A5A:	dc.b 4
0001BAE3 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BAE8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BAED 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BAF2 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BAF7 00                         		dc.b 0
0001BAF8 04                         byte_19A70:	dc.b 4
0001BAF9 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BAFE E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BB03 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BB08 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BB0D 00                         		dc.b 0
0001BB0E 04                         byte_19A86:	dc.b 4
0001BB0F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BB14 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BB19 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BB1E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BB23 00                         		dc.b 0
0001BB24 04                         byte_19A9C:	dc.b 4
0001BB25 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB2A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BB2F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BB34 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB39 00                         		dc.b 0
0001BB3A 04                         byte_19AB2:	dc.b 4
0001BB3B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BB40 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BB45 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB4A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB4F 00                         		dc.b 0
0001BB50 07                         byte_19AC8:	dc.b 7
0001BB51 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BB56 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BB5B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BB60 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BB65 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB6A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BB6F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BB74 05                         byte_19AEC:	dc.b 5
0001BB75 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BB7A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BB7F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BB84 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BB89 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB8E 06                         byte_19B06:	dc.b 6
0001BB8F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BB94 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BB99 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BB9E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BBA3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BBA8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BBAD 00                         		dc.b 0
0001BBAE 08                         byte_19B26:	dc.b 8
0001BBAF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BBB4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BBB9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBBE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BBC3 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BBC8 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BBCD 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BBD2 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BBD7 03                         byte_19B4F:	dc.b 3
0001BBD8 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BBDD F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BBE2 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BBE8 00                         		even
0001BBE8 00                         		even
0001BBE8                            
0001BBE8                            ; ===========================================================================
0001BBE8                            ; ---------------------------------------------------------------------------
0001BBE8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BBE8                            ; ---------------------------------------------------------------------------
0001BBE8                            
0001BBE8                            Obj83:					; XREF: Obj_Index
0001BBE8 7000                       		moveq	#0,d0
0001BBEA 1028 0024                  		move.b	$24(a0),d0
0001BBEE 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BBF2 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BBF6                            ; ===========================================================================
0001BBF6 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BBF8 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BBFA 0000                       		dc.w loc_19C36-Obj83_Index
0001BBFC 0000                       		dc.w loc_19C62-Obj83_Index
0001BBFE 0000                       		dc.w loc_19C72-Obj83_Index
0001BC00 0000                       		dc.w loc_19C80-Obj83_Index
0001BC02                            ; ===========================================================================
0001BC02                            
0001BC02                            Obj83_Main:				; XREF: Obj83_Index
0001BC02 317C 2080 0008             		move.w	#$2080,8(a0)
0001BC08 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BC0E 117C 0080 0019             		move.b	#$80,$19(a0)
0001BC14 117C 0010 0016             		move.b	#$10,$16(a0)
0001BC1A 117C 0004 0001             		move.b	#4,1(a0)
0001BC20 08E8 0007 0001             		bset	#7,1(a0)
0001BC26 7800                       		moveq	#0,d4
0001BC28 3A3C 2010                  		move.w	#$2010,d5
0001BC2C 7C07                       		moveq	#7,d6
0001BC2E 45E8 0030                  		lea	$30(a0),a2
0001BC32                            
0001BC32                            Obj83_MakeBlock:
0001BC32 4EB9 0000 F578             		jsr	SingleObjLoad
0001BC38 6600                       		bne.s	Obj83_ExitMake
0001BC3A 34C9                       		move.w	a1,(a2)+
0001BC3C 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BC40 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BC48 337C 4518 0002             		move.w	#$4518,2(a1)
0001BC4E 137C 0004 0001             		move.b	#4,1(a1)
0001BC54 137C 0010 0019             		move.b	#$10,$19(a1)
0001BC5A 137C 0010 0016             		move.b	#$10,$16(a1)
0001BC60 137C 0003 0018             		move.b	#3,$18(a1)
0001BC66 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BC6A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BC70 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BC74 137C 0008 0024             		move.b	#8,$24(a1)
0001BC7A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BC7E                            
0001BC7E                            Obj83_ExitMake:
0001BC7E 5428 0024                  		addq.b	#2,$24(a0)
0001BC82 4E75                       		rts	
0001BC84                            ; ===========================================================================
0001BC84                            
0001BC84                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BC84 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BC8A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BC8C 4228 001A                  		clr.b	$1A(a0)
0001BC90 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BC94                            
0001BC94                            Obj83_Solid:
0001BC94 7000                       		moveq	#0,d0
0001BC96 1028 001A                  		move.b	$1A(a0),d0
0001BC9A 4400                       		neg.b	d0
0001BC9C 4880                       		ext.w	d0
0001BC9E 5040                       		addq.w	#8,d0
0001BCA0 E940                       		asl.w	#4,d0
0001BCA2 383C 2100                  		move.w	#$2100,d4
0001BCA6 9840                       		sub.w	d0,d4
0001BCA8 1140 0019                  		move.b	d0,$19(a0)
0001BCAC 3144 0008                  		move.w	d4,8(a0)
0001BCB0 720B                       		moveq	#$B,d1
0001BCB2 D240                       		add.w	d0,d1
0001BCB4 7410                       		moveq	#$10,d2
0001BCB6 7611                       		moveq	#$11,d3
0001BCB8 4EF9 0001 14C2             		jmp	SolidObject
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            loc_19C36:				; XREF: Obj83_Index
0001BCBE 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BCC4 6400                       		bcc.s	Obj83_Solid2
0001BCC6 70FF                       		moveq	#-1,d0
0001BCC8 1028 001A                  		move.b	$1A(a0),d0
0001BCCC 4880                       		ext.w	d0
0001BCCE D040                       		add.w	d0,d0
0001BCD0 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BCD4 2240                       		movea.l	d0,a1
0001BCD6 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BCDC 5228 001A                  		addq.b	#1,$1A(a0)
0001BCE0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BCE6 6700                       		beq.s	loc_19C62
0001BCE8                            
0001BCE8                            Obj83_Solid2:
0001BCE8 60AA                       		bra.s	Obj83_Solid
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            loc_19C62:				; XREF: Obj83_Index
0001BCEA 08A8 0003 0022             		bclr	#3,$22(a0)
0001BCF0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BCF6 6000 FBBC                  		bra.w	loc_1982C
0001BCFA                            ; ===========================================================================
0001BCFA                            
0001BCFA                            loc_19C72:				; XREF: Obj83_Index
0001BCFA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BD00 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BD02 4EF9 0000 F0E4             		jmp	DisplaySprite
0001BD08                            ; ===========================================================================
0001BD08                            
0001BD08                            loc_19C80:				; XREF: Obj83_Index
0001BD08 4A28 0001                  		tst.b	1(a0)
0001BD0C 6A00 FBA6                  		bpl.w	loc_1982C
0001BD10 4EB9 0000 F0AA             		jsr	ObjectFall
0001BD16 4EF9 0000 F0E4             		jmp	DisplaySprite
0001BD1C                            ; ===========================================================================
0001BD1C                            
0001BD1C                            Obj83_Break:				; XREF: loc_19C72
0001BD1C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BD20 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BD24 7801                       		moveq	#1,d4
0001BD26 7203                       		moveq	#3,d1
0001BD28 7438                       		moveq	#$38,d2
0001BD2A 5428 0024                  		addq.b	#2,$24(a0)
0001BD2E 117C 0008 0019             		move.b	#8,$19(a0)
0001BD34 117C 0008 0016             		move.b	#8,$16(a0)
0001BD3A 43D0                       		lea	(a0),a1
0001BD3C 6000                       		bra.s	Obj83_MakeFrag
0001BD3E                            ; ===========================================================================
0001BD3E                            
0001BD3E                            Obj83_LoopFrag:
0001BD3E 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001BD44 6600                       		bne.s	Obj83_BreakSnd
0001BD46                            
0001BD46                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BD46 45D0                       		lea	(a0),a2
0001BD48 47D1                       		lea	(a1),a3
0001BD4A 7603                       		moveq	#3,d3
0001BD4C                            
0001BD4C                            loc_19CC4:
0001BD4C 26DA                       		move.l	(a2)+,(a3)+
0001BD4E 26DA                       		move.l	(a2)+,(a3)+
0001BD50 26DA                       		move.l	(a2)+,(a3)+
0001BD52 26DA                       		move.l	(a2)+,(a3)+
0001BD54 51CB FFF6                  		dbf	d3,loc_19CC4
0001BD58                            
0001BD58 335C 0012                  		move.w	(a4)+,$12(a1)
0001BD5C 361D                       		move.w	(a5)+,d3
0001BD5E D769 0008                  		add.w	d3,8(a1)
0001BD62 361D                       		move.w	(a5)+,d3
0001BD64 D769 000C                  		add.w	d3,$C(a1)
0001BD68 1344 001A                  		move.b	d4,$1A(a1)
0001BD6C 5244                       		addq.w	#1,d4
0001BD6E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BD72                            
0001BD72                            Obj83_BreakSnd:
0001BD72 303C 00CB                  		move.w	#$CB,d0
0001BD76 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BD7C 4EF9 0000 F0E4             		jmp	DisplaySprite
0001BD82                            ; ===========================================================================
0001BD82 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BD86 0120 00C0                  		dc.w $120, $C0
0001BD8A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BD8E 0010 0000                  		dc.w $10, 0
0001BD92 0000 0010                  		dc.w 0,	$10
0001BD96 0010 0010                  		dc.w $10, $10
0001BD9A                            ; ---------------------------------------------------------------------------
0001BD9A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BD9A                            ; ---------------------------------------------------------------------------
0001BD9A                            Map_obj83:
0001BD9A                            	include "_maps\obj83.asm"
0001BD9A                            ; ---------------------------------------------------------------------------
0001BD9A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BD9A                            ; ---------------------------------------------------------------------------
0001BD9A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BD9E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BDA2 0000                       		dc.w byte_19D46-Map_obj83
0001BDA4 01                         byte_19D1C:	dc.b 1
0001BDA5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BDAA 02                         byte_19D22:	dc.b 2
0001BDAB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BDB0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BDB5 00                         		dc.b 0
0001BDB6 02                         byte_19D2E:	dc.b 2
0001BDB7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BDBC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BDC1 00                         		dc.b 0
0001BDC2 02                         byte_19D3A:	dc.b 2
0001BDC3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BDC8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BDCD 00                         		dc.b 0
0001BDCE 02                         byte_19D46:	dc.b 2
0001BDCF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BDD4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BDDA 00                         		even
0001BDDA 00                         		even
0001BDDA                            
0001BDDA                            ; ===========================================================================
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            ; Object 85 - Eggman (FZ)
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            
0001BDDA                            Obj85_Delete:
0001BDDA 4EF9 0000 F120             		jmp	DeleteObject
0001BDE0                            ; ===========================================================================
0001BDE0                            
0001BDE0                            Obj85:					; XREF: Obj_Index
0001BDE0 7000                       		moveq	#0,d0
0001BDE2 1028 0024                  		move.b	$24(a0),d0
0001BDE6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BDEA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BDEE                            ; ===========================================================================
0001BDEE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BDF0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BDF2 0000                       		dc.w loc_1A38E-Obj85_Index
0001BDF4 0000                       		dc.w loc_1A346-Obj85_Index
0001BDF6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BDF8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BDFA 0000                       		dc.w loc_1A264-Obj85_Index
0001BDFC                            
0001BDFC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BE02 0001 BABC                  		dc.l Map_obj82		; mappings pointer
0001BE06 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BE0C 0000 0000                  		dc.l Map_obj84
0001BE10 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BE16 0000 0000                  		dc.l Map_FZBoss
0001BE1A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BE20 0001 BABC                  		dc.l Map_obj82
0001BE24 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BE2A 0001 9DB4                  		dc.l Map_Eggman
0001BE2E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BE34 0001 9DB4                  		dc.l Map_Eggman
0001BE38                            
0001BE38 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BE3D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BE42 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BE47 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BE4C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BE51 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BE56                            ; ===========================================================================
0001BE56                            
0001BE56                            Obj85_Main:				; XREF: Obj85_Index
0001BE56 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BE5A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BE5E 2248                       		movea.l	a0,a1
0001BE60 7205                       		moveq	#5,d1
0001BE62 6000                       		bra.s	Obj85_LoadBoss
0001BE64                            ; ===========================================================================
0001BE64                            
0001BE64                            Obj85_Loop:
0001BE64 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001BE6A 6600                       		bne.s	loc_19E20
0001BE6C                            
0001BE6C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BE6C 12BC 0085                  		move.b	#$85,(a1)
0001BE70 335A 0008                  		move.w	(a2)+,8(a1)
0001BE74 335A 000C                  		move.w	(a2)+,$C(a1)
0001BE78 335A 0002                  		move.w	(a2)+,2(a1)
0001BE7C 235A 0004                  		move.l	(a2)+,4(a1)
0001BE80 135B 0024                  		move.b	(a3)+,$24(a1)
0001BE84 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BE88 135B 0018                  		move.b	(a3)+,$18(a1)
0001BE8C 135B 0017                  		move.b	(a3)+,$17(a1)
0001BE90 135B 0016                  		move.b	(a3)+,$16(a1)
0001BE94 137C 0004 0001             		move.b	#4,1(a1)
0001BE9A 08E8 0007 0001             		bset	#7,1(a0)
0001BEA0 2348 0034                  		move.l	a0,$34(a1)
0001BEA4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BEA8                            
0001BEA8                            loc_19E20:
0001BEA8 45E8 0036                  		lea	$36(a0),a2
0001BEAC 4EB9 0000 F578             		jsr	SingleObjLoad
0001BEB2 6600                       		bne.s	loc_19E5A
0001BEB4 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BEB8 3489                       		move.w	a1,(a2)
0001BEBA 2348 0034                  		move.l	a0,$34(a1)
0001BEBE 45E8 0038                  		lea	$38(a0),a2
0001BEC2 7400                       		moveq	#0,d2
0001BEC4 7203                       		moveq	#3,d1
0001BEC6                            
0001BEC6                            loc_19E3E:
0001BEC6 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001BECC 6600                       		bne.s	loc_19E5A
0001BECE 34C9                       		move.w	a1,(a2)+
0001BED0 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BED4 2348 0034                  		move.l	a0,$34(a1)
0001BED8 1342 0028                  		move.b	d2,$28(a1)
0001BEDC 5442                       		addq.w	#2,d2
0001BEDE 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BEE2                            
0001BEE2                            loc_19E5A:
0001BEE2 317C 0000 0034             		move.w	#0,$34(a0)
0001BEE8 117C 0001 0021             		move.b	#1,$21(a0)	; set number of	hits to	1
0001BEEE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BEF4                            
0001BEF4                            Obj85_Eggman:				; XREF: Obj85_Index
0001BEF4 7000                       		moveq	#0,d0
0001BEF6 1028 0034                  		move.b	$34(a0),d0
0001BEFA 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BEFE 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BF02 4EF9 0000 F0E4             		jmp	DisplaySprite
0001BF08                            ; ===========================================================================
0001BF08 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BF0C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BF10 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BF14 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            loc_19E90:				; XREF: off_19E80
0001BF18 4AB8 F680                  		tst.l	($FFFFF680).w
0001BF1C 6600                       		bne.s	loc_19EA2
0001BF1E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BF24 6500                       		bcs.s	loc_19EA2
0001BF26 5428 0034                  		addq.b	#2,$34(a0)
0001BF2A                            
0001BF2A                            loc_19EA2:
0001BF2A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BF2E 4E75                       		rts	
0001BF30                            ; ===========================================================================
0001BF30                            
0001BF30                            loc_19EA8:				; XREF: off_19E80
0001BF30 4A68 0030                  		tst.w	$30(a0)
0001BF34 6A00                       		bpl.s	loc_19F10
0001BF36 4268 0030                  		clr.w	$30(a0)
0001BF3A 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001BF40 0240 000C                  		andi.w	#$C,d0
0001BF44 3200                       		move.w	d0,d1
0001BF46 5441                       		addq.w	#2,d1
0001BF48 4A80                       		tst.l	d0
0001BF4A 6A00                       		bpl.s	loc_19EC6
0001BF4C C141                       		exg	d1,d0
0001BF4E                            
0001BF4E                            loc_19EC6:
0001BF4E 43FA 0000                  		lea	word_19FD6(pc),a1
0001BF52 3031 0000                  		move.w	(a1,d0.w),d0
0001BF56 3231 1000                  		move.w	(a1,d1.w),d1
0001BF5A 3140 0030                  		move.w	d0,$30(a0)
0001BF5E 74FF                       		moveq	#-1,d2
0001BF60 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BF64 2242                       		movea.l	d2,a1
0001BF66 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BF6C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BF72 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BF76 2242                       		movea.l	d2,a1
0001BF78 137C 0001 0029             		move.b	#1,$29(a1)
0001BF7E 337C 0000 0030             		move.w	#0,$30(a1)
0001BF84 317C 0001 0032             		move.w	#1,$32(a0)
0001BF8A 4228 0035                  		clr.b	$35(a0)
0001BF8E 303C 00B7                  		move.w	#$B7,d0
0001BF92 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BF98                            
0001BF98                            loc_19F10:
0001BF98 4A68 0032                  		tst.w	$32(a0)
0001BF9C 6B00 0000                  		bmi.w	loc_19FA6
0001BFA0 08A8 0000 0022             		bclr	#0,$22(a0)
0001BFA6 3038 D008                  		move.w	($FFFFD008).w,d0
0001BFAA 9068 0008                  		sub.w	8(a0),d0
0001BFAE 6500                       		bcs.s	loc_19F2E
0001BFB0 08E8 0000 0022             		bset	#0,$22(a0)
0001BFB6                            
0001BFB6                            loc_19F2E:
0001BFB6 323C 002B                  		move.w	#$2B,d1
0001BFBA 343C 0014                  		move.w	#$14,d2
0001BFBE 363C 0014                  		move.w	#$14,d3
0001BFC2 3828 0008                  		move.w	8(a0),d4
0001BFC6 4EB9 0001 14C2             		jsr	SolidObject
0001BFCC 4A44                       		tst.w	d4
0001BFCE 6E00                       		bgt.s	loc_19F50
0001BFD0                            
0001BFD0                            loc_19F48:
0001BFD0 4A28 0035                  		tst.b	$35(a0)
0001BFD4 6600                       		bne.s	loc_19F88
0001BFD6 6000                       		bra.s	loc_19F96
0001BFD8                            ; ===========================================================================
0001BFD8                            
0001BFD8                            loc_19F50:
0001BFD8 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BFDC 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BFE2 66EC                       		bne.s	loc_19F48
0001BFE4 303C 0300                  		move.w	#$300,d0
0001BFE8 0828 0000 0022             		btst	#0,$22(a0)
0001BFEE 6600                       		bne.s	loc_19F6A
0001BFF0 4440                       		neg.w	d0
0001BFF2                            
0001BFF2                            loc_19F6A:
0001BFF2 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BFF6 4A28 0035                  		tst.b	$35(a0)
0001BFFA 6600                       		bne.s	loc_19F88
0001BFFC 5328 0021                  		subq.b	#1,$21(a0)
0001C000 117C 0064 0035             		move.b	#$64,$35(a0)
0001C006 303C 00AC                  		move.w	#$AC,d0
0001C00A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C010                            
0001C010                            loc_19F88:
0001C010 5328 0035                  		subq.b	#1,$35(a0)
0001C014 6700                       		beq.s	loc_19F96
0001C016 117C 0003 001C             		move.b	#3,$1C(a0)
0001C01C 6000                       		bra.s	loc_19F9C
0001C01E                            ; ===========================================================================
0001C01E                            
0001C01E                            loc_19F96:
0001C01E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C024                            
0001C024                            loc_19F9C:
0001C024 43FA FA64                  		lea	Ani_obj82(pc),a1
0001C028 4EF9 0000 C138             		jmp	AnimateSprite
0001C02E                            ; ===========================================================================
0001C02E                            
0001C02E                            loc_19FA6:
0001C02E 4A28 0021                  		tst.b	$21(a0)
0001C032 6700                       		beq.s	loc_19FBC
0001C034 5428 0034                  		addq.b	#2,$34(a0)
0001C038 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C03E 4268 0032                  		clr.w	$32(a0)
0001C042 4E75                       		rts	
0001C044                            ; ===========================================================================
0001C044                            
0001C044                            loc_19FBC:
0001C044 117C 0006 0034             		move.b	#6,$34(a0)
0001C04A 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C050 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C056 117C 0014 0016             		move.b	#$14,$16(a0)
0001C05C 4E75                       		rts	
0001C05E                            ; ===========================================================================
0001C05E 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C06E                            ; ===========================================================================
0001C06E                            
0001C06E                            loc_19FE6:				; XREF: off_19E80
0001C06E 70FF                       		moveq	#-1,d0
0001C070 3028 0036                  		move.w	$36(a0),d0
0001C074 2240                       		movea.l	d0,a1
0001C076 4A68 0030                  		tst.w	$30(a0)
0001C07A 6A00                       		bpl.s	loc_1A000
0001C07C 4268 0030                  		clr.w	$30(a0)
0001C080 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C086 6100                       		bsr.s	loc_1A020
0001C088                            
0001C088                            loc_1A000:
0001C088 700F                       		moveq	#$F,d0
0001C08A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C08E 6600                       		bne.s	loc_1A00A
0001C090 6100                       		bsr.s	loc_1A020
0001C092                            
0001C092                            loc_1A00A:
0001C092 4A68 0032                  		tst.w	$32(a0)
0001C096 6700                       		beq.s	locret_1A01E
0001C098 5528 0034                  		subq.b	#2,$34(a0)
0001C09C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C0A2 4268 0032                  		clr.w	$32(a0)
0001C0A6                            
0001C0A6                            locret_1A01E:
0001C0A6 4E75                       		rts	
0001C0A8                            ; ===========================================================================
0001C0A8                            
0001C0A8                            loc_1A020:
0001C0A8 303C 00B1                  		move.w	#$B1,d0
0001C0AC 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C0B2                            ; ===========================================================================
0001C0B2                            
0001C0B2                            loc_1A02A:				; XREF: off_19E80
0001C0B2 117C 0030 0017             		move.b	#$30,$17(a0)
0001C0B8 08E8 0000 0022             		bset	#0,$22(a0)
0001C0BE 4EB9 0000 F0CA             		jsr	SpeedToPos
0001C0C4 117C 0006 001A             		move.b	#6,$1A(a0)
0001C0CA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C0D0 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C0D6 6500                       		bcs.s	loc_1A070
0001C0D8 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C0DE 5428 0034                  		addq.b	#2,$34(a0)
0001C0E2 117C 0020 0017             		move.b	#$20,$17(a0)
0001C0E8 317C 0100 0010             		move.w	#$100,$10(a0)
0001C0EE 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C0F4 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C0F8                            
0001C0F8                            loc_1A070:
0001C0F8 6000 0000                  		bra.w	loc_1A166
0001C0FC                            ; ===========================================================================
0001C0FC                            
0001C0FC                            loc_1A074:				; XREF: off_19E80
0001C0FC 08E8 0000 0022             		bset	#0,$22(a0)
0001C102 117C 0004 001C             		move.b	#4,$1C(a0)
0001C108 4EB9 0000 F0CA             		jsr	SpeedToPos
0001C10E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C114 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C11A 6500                       		bcs.s	loc_1A09A
0001C11C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C122                            
0001C122                            loc_1A09A:
0001C122 317C 0400 0010             		move.w	#$400,$10(a0)
0001C128 3028 0008                  		move.w	8(a0),d0
0001C12C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C130 6A00                       		bpl.s	loc_1A0B4
0001C132 317C 0500 0010             		move.w	#$500,$10(a0)
0001C138 6000 0000                  		bra.w	loc_1A0F2
0001C13C                            ; ===========================================================================
0001C13C                            
0001C13C                            loc_1A0B4:
0001C13C 0440 0070                  		subi.w	#$70,d0
0001C140 6500                       		bcs.s	loc_1A0F2
0001C142 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C148 5140                       		subq.w	#8,d0
0001C14A 6500                       		bcs.s	loc_1A0F2
0001C14C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C152 5140                       		subq.w	#8,d0
0001C154 6500                       		bcs.s	loc_1A0F2
0001C156 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C15C 5140                       		subq.w	#8,d0
0001C15E 6500                       		bcs.s	loc_1A0F2
0001C160 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C166 5140                       		subq.w	#8,d0
0001C168 6500                       		bcs.s	loc_1A0F2
0001C16A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C170 0440 0038                  		subi.w	#$38,d0
0001C174 6500                       		bcs.s	loc_1A0F2
0001C176 4268 0010                  		clr.w	$10(a0)
0001C17A                            
0001C17A                            loc_1A0F2:
0001C17A 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C180 6500                       		bcs.s	loc_1A110
0001C182 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C188 317C 0240 0010             		move.w	#$240,$10(a0)
0001C18E 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C194 5428 0034                  		addq.b	#2,$34(a0)
0001C198                            
0001C198                            loc_1A110:
0001C198 6000                       		bra.s	loc_1A15C
0001C19A                            ; ===========================================================================
0001C19A                            
0001C19A                            loc_1A112:				; XREF: off_19E80
0001C19A 4EB9 0000 F0CA             		jsr	SpeedToPos
0001C1A0 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C1A6 6500                       		bcs.s	loc_1A124
0001C1A8 4268 0010                  		clr.w	$10(a0)
0001C1AC                            
0001C1AC                            loc_1A124:
0001C1AC 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C1B2 4A68 0012                  		tst.w	$12(a0)
0001C1B6 6B00                       		bmi.s	loc_1A142
0001C1B8 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C1BE 6500                       		bcs.s	loc_1A142
0001C1C0 317C 0592 000C             		move.w	#$592,$C(a0)
0001C1C6 4268 0012                  		clr.w	$12(a0)
0001C1CA                            
0001C1CA                            loc_1A142:
0001C1CA 3028 0010                  		move.w	$10(a0),d0
0001C1CE 8068 0012                  		or.w	$12(a0),d0
0001C1D2 6600                       		bne.s	loc_1A15C
0001C1D4 5428 0034                  		addq.b	#2,$34(a0)
0001C1D8 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C1DE 117C 0001 0021             		move.b	#1,$21(a0)
0001C1E4                            
0001C1E4                            loc_1A15C:
0001C1E4 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001C1E8 4EB9 0000 C138             		jsr	AnimateSprite
0001C1EE                            
0001C1EE                            loc_1A166:
0001C1EE 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C1F4 6C00                       		bge.s	loc_1A172
0001C1F6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C1FA                            
0001C1FA                            loc_1A172:
0001C1FA 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C200 6C00                       		bge.s	locret_1A190
0001C202 323C 001B                  		move.w	#$1B,d1
0001C206 343C 0070                  		move.w	#$70,d2
0001C20A 363C 0071                  		move.w	#$71,d3
0001C20E 3828 0008                  		move.w	8(a0),d4
0001C212 4EF9 0001 14C2             		jmp	SolidObject
0001C218                            ; ===========================================================================
0001C218                            
0001C218                            locret_1A190:
0001C218 4E75                       		rts	
0001C21A                            ; ===========================================================================
0001C21A                            
0001C21A                            loc_1A192:				; XREF: off_19E80
0001C21A 217C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a0)
0001C222 317C 0400 0002             		move.w	#$400,2(a0)
0001C228 117C 0000 001C             		move.b	#0,$1C(a0)
0001C22E 08E8 0000 0022             		bset	#0,$22(a0)
0001C234 4EB9 0000 F0CA             		jsr	SpeedToPos
0001C23A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C240 6400                       		bcc.s	loc_1A1D0
0001C242 317C 0180 0010             		move.w	#$180,$10(a0)
0001C248 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C24E 117C 000F 0020             		move.b	#$F,$20(a0)
0001C254 5428 0034                  		addq.b	#2,$34(a0)
0001C258                            
0001C258                            loc_1A1D0:
0001C258 6000 FF8A                  		bra.w	loc_1A15C
0001C25C                            ; ===========================================================================
0001C25C                            
0001C25C                            loc_1A1D4:				; XREF: off_19E80
0001C25C 08E8 0000 0022             		bset	#0,$22(a0)
0001C262 4EB9 0000 F0CA             		jsr	SpeedToPos
0001C268 4A68 0030                  		tst.w	$30(a0)
0001C26C 6600                       		bne.s	loc_1A1FC
0001C26E 4A28 0020                  		tst.b	$20(a0)
0001C272 6600                       		bne.s	loc_1A216
0001C274 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C27A 303C 00AC                  		move.w	#$AC,d0
0001C27E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C284                            
0001C284                            loc_1A1FC:
0001C284 5368 0030                  		subq.w	#1,$30(a0)
0001C288 6600                       		bne.s	loc_1A216
0001C28A 4A28 0022                  		tst.b	$22(a0)
0001C28E 6A00                       		bpl.s	loc_1A210
0001C290 317C 0060 0012             		move.w	#$60,$12(a0)
0001C296 6000                       		bra.s	loc_1A216
0001C298                            ; ===========================================================================
0001C298                            
0001C298                            loc_1A210:
0001C298 117C 000F 0020             		move.b	#$F,$20(a0)
0001C29E                            
0001C29E                            loc_1A216:
0001C29E 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C2A4 6D00                       		blt.s	loc_1A23A
0001C2A6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C2AC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C2B2 4278 D014                  		clr.w	($FFFFD014).w
0001C2B6 4A68 0012                  		tst.w	$12(a0)
0001C2BA 6A00                       		bpl.s	loc_1A248
0001C2BC 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C2C2                            
0001C2C2                            loc_1A23A:
0001C2C2 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C2C8 6D00                       		blt.s	loc_1A248
0001C2CA 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C2D0                            
0001C2D0                            loc_1A248:
0001C2D0 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C2D6 6500                       		bcs.s	loc_1A260
0001C2D8 4A28 0001                  		tst.b	1(a0)
0001C2DC 6B00                       		bmi.s	loc_1A260
0001C2DE 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C2E4 6000 FAF4                  		bra.w	Obj85_Delete
0001C2E8                            ; ===========================================================================
0001C2E8                            
0001C2E8                            loc_1A260:
0001C2E8 6000 FEFA                  		bra.w	loc_1A15C
0001C2EC                            ; ===========================================================================
0001C2EC                            
0001C2EC                            loc_1A264:				; XREF: Obj85_Index
0001C2EC 2268 0034                  		movea.l	$34(a0),a1
0001C2F0 1011                       		move.b	(a1),d0
0001C2F2 B010                       		cmp.b	(a0),d0
0001C2F4 6600 FAE4                  		bne.w	Obj85_Delete
0001C2F8 117C 0007 001C             		move.b	#7,$1C(a0)
0001C2FE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C304 6C00                       		bge.s	loc_1A280
0001C306 6000                       		bra.s	loc_1A2A6
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            loc_1A280:
0001C308 4A69 0010                  		tst.w	$10(a1)
0001C30C 6700                       		beq.s	loc_1A28C
0001C30E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C314                            
0001C314                            loc_1A28C:
0001C314 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001C318 4EB9 0000 C138             		jsr	AnimateSprite
0001C31E                            
0001C31E                            loc_1A296:
0001C31E 2268 0034                  		movea.l	$34(a0),a1
0001C322 3169 0008 0008             		move.w	8(a1),8(a0)
0001C328 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C32E                            
0001C32E                            loc_1A2A6:
0001C32E 2268 0034                  		movea.l	$34(a0),a1
0001C332 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C338 7003                       		moveq	#3,d0
0001C33A C028 0022                  		and.b	$22(a0),d0
0001C33E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C344 8128 0001                  		or.b	d0,1(a0)
0001C348 4EF9 0000 F0E4             		jmp	DisplaySprite
0001C34E                            ; ===========================================================================
0001C34E                            
0001C34E                            loc_1A2C6:				; XREF: Obj85_Index
0001C34E 2268 0034                  		movea.l	$34(a0),a1
0001C352 1011                       		move.b	(a1),d0
0001C354 B010                       		cmp.b	(a0),d0
0001C356 6600 FA82                  		bne.w	Obj85_Delete
0001C35A 0CA9 0001 9DB4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C362 6700                       		beq.s	loc_1A2E4
0001C364 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C36A 60C2                       		bra.s	loc_1A2A6
0001C36C                            ; ===========================================================================
0001C36C                            
0001C36C                            loc_1A2E4:
0001C36C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C372 4A29 0021                  		tst.b	$21(a1)
0001C376 6F00                       		ble.s	loc_1A312
0001C378 117C 0006 001C             		move.b	#6,$1C(a0)
0001C37E 217C 0001 9DB4 0004        		move.l	#Map_Eggman,4(a0)
0001C386 317C 0400 0002             		move.w	#$400,2(a0)
0001C38C 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001C390 4EB9 0000 C138             		jsr	AnimateSprite
0001C396 6000 FF86                  		bra.w	loc_1A296
0001C39A                            ; ===========================================================================
0001C39A                            
0001C39A                            loc_1A312:
0001C39A 4A28 0001                  		tst.b	1(a0)
0001C39E 6A00 FA3A                  		bpl.w	Obj85_Delete
0001C3A2 6100 D512                  		bsr.w	BossDefeated
0001C3A6 117C 0002 0018             		move.b	#2,$18(a0)
0001C3AC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C3B2 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C3BA 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C3C0 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C3C4 4EB9 0000 C138             		jsr	AnimateSprite
0001C3CA 6000 FF52                  		bra.w	loc_1A296
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            loc_1A346:				; XREF: Obj85_Index
0001C3CE 08E8 0000 0022             		bset	#0,$22(a0)
0001C3D4 2268 0034                  		movea.l	$34(a0),a1
0001C3D8 0CA9 0001 9DB4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C3E0 6700                       		beq.s	loc_1A35E
0001C3E2 6000 FF4A                  		bra.w	loc_1A2A6
0001C3E6                            ; ===========================================================================
0001C3E6                            
0001C3E6                            loc_1A35E:
0001C3E6 3169 0008 0008             		move.w	8(a1),8(a0)
0001C3EC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C3F2 4A28 001E                  		tst.b	$1E(a0)
0001C3F6 6600                       		bne.s	loc_1A376
0001C3F8 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C3FE                            
0001C3FE                            loc_1A376:
0001C3FE 5328 001E                  		subq.b	#1,$1E(a0)
0001C402 6E00                       		bgt.s	loc_1A38A
0001C404 5228 001A                  		addq.b	#1,$1A(a0)
0001C408 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C40E 6E00 F9CA                  		bgt.w	Obj85_Delete
0001C412                            
0001C412                            loc_1A38A:
0001C412 6000 FF0A                  		bra.w	loc_1A296
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            loc_1A38E:				; XREF: Obj85_Index
0001C416 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C41C 3038 D008                  		move.w	($FFFFD008).w,d0
0001C420 9068 0008                  		sub.w	8(a0),d0
0001C424 6500                       		bcs.s	loc_1A3A6
0001C426 4A28 0001                  		tst.b	1(a0)
0001C42A 6A00 F9AE                  		bpl.w	Obj85_Delete
0001C42E                            
0001C42E                            loc_1A3A6:
0001C42E 4EF9 0000 F0E4             		jmp	DisplaySprite
0001C434                            ; ===========================================================================
0001C434                            
0001C434                            loc_1A3AC:				; XREF: Obj85_Index
0001C434 117C 0000 001A             		move.b	#0,$1A(a0)
0001C43A 08E8 0000 0022             		bset	#0,$22(a0)
0001C440 2268 0034                  		movea.l	$34(a0),a1
0001C444 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C44A 6600                       		bne.s	loc_1A3D0
0001C44C 0CA9 0001 9DB4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C454 6700 F984                  		beq.w	Obj85_Delete
0001C458                            
0001C458                            loc_1A3D0:
0001C458 6000 FED4                  		bra.w	loc_1A2A6
0001C45C                            ; ===========================================================================
0001C45C                            Ani_obj85:
0001C45C                            	include "_anim\obj85.asm"
0001C45C                            ; ---------------------------------------------------------------------------
0001C45C                            ; Animation script - Eggman (FZ)
0001C45C                            ; ---------------------------------------------------------------------------
0001C45C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C45E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C462                            		even
0001C462                            		even
0001C462                            
0001C462                            Map_Eggman2:
0001C462                            	include "_maps\Eggman2.asm"
0001C462                            ; ---------------------------------------------------------------------------
0001C462                            ; Sprite mappings - Eggman (FZ)
0001C462                            ; ---------------------------------------------------------------------------
0001C462 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C464 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C466 06                         byte_1A3DE:	dc.b 6
0001C467 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C46C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C471 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C476 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C47B FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C480 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C485 06                         byte_1A3FD:	dc.b 6
0001C486 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C48B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C490 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C495 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C49A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C49F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C4A4                            		even
0001C4A4                            		even
0001C4A4                            
0001C4A4                            Map_FZBoss:
0001C4A4                            	include "_maps\FZ boss.asm"
0001C4A4                            ; ---------------------------------------------------------------------------
0001C4A4                            ; Sprite mappings - boss (FZ)
0001C4A4                            ; ---------------------------------------------------------------------------
0001C4A4 0000                       		dc.w byte_1A422-Map_FZBoss
0001C4A6 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C4A8 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C4AA 02                         byte_1A422:	dc.b 2
0001C4AB 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C4B0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C4B5 03                         byte_1A42D:	dc.b 3
0001C4B6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C4BB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C4C0 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C4C5 02                         byte_1A43D:	dc.b 2
0001C4C6 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C4CB 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C4D0                            		even
0001C4D0                            		even
0001C4D0                            
0001C4D0                            ; ===========================================================================
0001C4D0                            
0001C4D0                            Obj84_Delete:
0001C4D0 4EF9 0000 F120             		jmp	DeleteObject
0001C4D6                            ; ===========================================================================
0001C4D6                            ; ---------------------------------------------------------------------------
0001C4D6                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C4D6                            ; ---------------------------------------------------------------------------
0001C4D6                            
0001C4D6                            Obj84:					; XREF: Obj_Index
0001C4D6 7000                       		moveq	#0,d0
0001C4D8 1028 0024                  		move.b	$24(a0),d0
0001C4DC 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C4E0 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C4E4                            ; ===========================================================================
0001C4E4 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C4E6 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C4E8 0000                       		dc.w loc_1A57E-Obj84_Index
0001C4EA                            
0001C4EA 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C4EE 2550 0620                  		dc.w $2550, $620
0001C4F2 2490 04C0                  		dc.w $2490, $4C0
0001C4F6 2510 04C0                  		dc.w $2510, $4C0
0001C4FA                            ; ===========================================================================
0001C4FA                            
0001C4FA                            Obj84_Main:				; XREF: Obj84_Index
0001C4FA 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C4FE 7000                       		moveq	#0,d0
0001C500 1028 0028                  		move.b	$28(a0),d0
0001C504 D040                       		add.w	d0,d0
0001C506 D2C0                       		adda.w	d0,a1
0001C508 117C 0004 0001             		move.b	#4,1(a0)
0001C50E 08E8 0007 0001             		bset	#7,1(a0)
0001C514 08E8 0004 0001             		bset	#4,1(a0)
0001C51A 317C 0300 0002             		move.w	#$300,2(a0)
0001C520 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C528 3159 0008                  		move.w	(a1)+,8(a0)
0001C52C 3151 000C                  		move.w	(a1),$C(a0)
0001C530 3159 0038                  		move.w	(a1)+,$38(a0)
0001C534 117C 0020 0016             		move.b	#$20,$16(a0)
0001C53A 117C 0060 0017             		move.b	#$60,$17(a0)
0001C540 117C 0020 0019             		move.b	#$20,$19(a0)
0001C546 117C 0060 0016             		move.b	#$60,$16(a0)
0001C54C 117C 0003 0018             		move.b	#3,$18(a0)
0001C552 5428 0024                  		addq.b	#2,$24(a0)
0001C556                            
0001C556                            loc_1A4CE:				; XREF: Obj84_Index
0001C556 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C55C 6F00                       		ble.s	loc_1A4DC
0001C55E 08E8 0001 0001             		bset	#1,1(a0)
0001C564                            
0001C564                            loc_1A4DC:
0001C564 42A8 003C                  		clr.l	$3C(a0)
0001C568 4A28 0029                  		tst.b	$29(a0)
0001C56C 6700                       		beq.s	loc_1A4EA
0001C56E 5428 0024                  		addq.b	#2,$24(a0)
0001C572                            
0001C572                            loc_1A4EA:
0001C572 2028 003C                  		move.l	$3C(a0),d0
0001C576 2228 0038                  		move.l	$38(a0),d1
0001C57A D280                       		add.l	d0,d1
0001C57C 4841                       		swap	d1
0001C57E 3141 000C                  		move.w	d1,$C(a0)
0001C582 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C588 6600                       		bne.s	loc_1A524
0001C58A 4A68 0030                  		tst.w	$30(a0)
0001C58E 6A00                       		bpl.s	loc_1A524
0001C590 70F6                       		moveq	#-$A,d0
0001C592 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C598 6F00                       		ble.s	loc_1A514
0001C59A 700E                       		moveq	#$E,d0
0001C59C                            
0001C59C                            loc_1A514:
0001C59C D240                       		add.w	d0,d1
0001C59E 2268 0034                  		movea.l	$34(a0),a1
0001C5A2 3341 000C                  		move.w	d1,$C(a1)
0001C5A6 3368 0008 0008             		move.w	8(a0),8(a1)
0001C5AC                            
0001C5AC                            loc_1A524:
0001C5AC 323C 002B                  		move.w	#$2B,d1
0001C5B0 343C 0060                  		move.w	#$60,d2
0001C5B4 363C 0061                  		move.w	#$61,d3
0001C5B8 3828 0008                  		move.w	8(a0),d4
0001C5BC 4EB9 0001 14C2             		jsr	SolidObject
0001C5C2 7000                       		moveq	#0,d0
0001C5C4 3228 003C                  		move.w	$3C(a0),d1
0001C5C8 6A00                       		bpl.s	loc_1A550
0001C5CA 4441                       		neg.w	d1
0001C5CC 5141                       		subq.w	#8,d1
0001C5CE 6500                       		bcs.s	loc_1A55C
0001C5D0 5200                       		addq.b	#1,d0
0001C5D2 E841                       		asr.w	#4,d1
0001C5D4 D041                       		add.w	d1,d0
0001C5D6 6000                       		bra.s	loc_1A55C
0001C5D8                            ; ===========================================================================
0001C5D8                            
0001C5D8                            loc_1A550:
0001C5D8 0441 0027                  		subi.w	#$27,d1
0001C5DC 6500                       		bcs.s	loc_1A55C
0001C5DE 5200                       		addq.b	#1,d0
0001C5E0 E841                       		asr.w	#4,d1
0001C5E2 D041                       		add.w	d1,d0
0001C5E4                            
0001C5E4                            loc_1A55C:
0001C5E4 1140 001A                  		move.b	d0,$1A(a0)
0001C5E8 3038 D008                  		move.w	($FFFFD008).w,d0
0001C5EC 9068 0008                  		sub.w	8(a0),d0
0001C5F0 6B00                       		bmi.s	loc_1A578
0001C5F2 0440 0140                  		subi.w	#$140,d0
0001C5F6 6B00                       		bmi.s	loc_1A578
0001C5F8 4A28 0001                  		tst.b	1(a0)
0001C5FC 6A00 FED2                  		bpl.w	Obj84_Delete
0001C600                            
0001C600                            loc_1A578:
0001C600 4EF9 0000 F0E4             		jmp	DisplaySprite
0001C606                            ; ===========================================================================
0001C606                            
0001C606                            loc_1A57E:				; XREF: Obj84_Index
0001C606 7000                       		moveq	#0,d0
0001C608 1028 0028                  		move.b	$28(a0),d0
0001C60C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C610 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C614 6000 FF5C                  		bra.w	loc_1A4EA
0001C618                            ; ===========================================================================
0001C618 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C61A 0000                       		dc.w loc_1A598-off_1A590
0001C61C 0000                       		dc.w loc_1A604-off_1A590
0001C61E 0000                       		dc.w loc_1A604-off_1A590
0001C620                            ; ===========================================================================
0001C620                            
0001C620                            loc_1A598:				; XREF: off_1A590
0001C620 4A28 0029                  		tst.b	$29(a0)
0001C624 6600                       		bne.s	loc_1A5D4
0001C626 2268 0034                  		movea.l	$34(a0),a1
0001C62A 4A29 0021                  		tst.b	$21(a1)
0001C62E 6600                       		bne.s	loc_1A5B4
0001C630 6100 D284                  		bsr.w	BossDefeated
0001C634 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C63C                            
0001C63C                            loc_1A5B4:
0001C63C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C644 6400                       		bcc.s	locret_1A602
0001C646 42A8 003C                  		clr.l	$3C(a0)
0001C64A 2268 0034                  		movea.l	$34(a0),a1
0001C64E 5369 0032                  		subq.w	#1,$32(a1)
0001C652 4269 0030                  		clr.w	$30(a1)
0001C656 5528 0024                  		subq.b	#2,$24(a0)
0001C65A 4E75                       		rts	
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            loc_1A5D4:
0001C65C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C662 6C00                       		bge.s	loc_1A5E4
0001C664 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C66C                            
0001C66C                            loc_1A5E4:
0001C66C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C674 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C67A 6E00                       		bgt.s	locret_1A602
0001C67C 4268 003E                  		clr.w	$3E(a0)
0001C680 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C686 4228 0029                  		clr.b	$29(a0)
0001C68A                            
0001C68A                            locret_1A602:
0001C68A 4E75                       		rts	
0001C68C                            ; ===========================================================================
0001C68C                            
0001C68C                            loc_1A604:				; XREF: off_1A590
0001C68C 08E8 0001 0001             		bset	#1,1(a0)
0001C692 4A28 0029                  		tst.b	$29(a0)
0001C696 6600                       		bne.s	loc_1A646
0001C698 2268 0034                  		movea.l	$34(a0),a1
0001C69C 4A29 0021                  		tst.b	$21(a1)
0001C6A0 6600                       		bne.s	loc_1A626
0001C6A2 6100 D212                  		bsr.w	BossDefeated
0001C6A6 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C6AE                            
0001C6AE                            loc_1A626:
0001C6AE 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C6B6 6400                       		bcc.s	locret_1A674
0001C6B8 42A8 003C                  		clr.l	$3C(a0)
0001C6BC 2268 0034                  		movea.l	$34(a0),a1
0001C6C0 5369 0032                  		subq.w	#1,$32(a1)
0001C6C4 4269 0030                  		clr.w	$30(a1)
0001C6C8 5528 0024                  		subq.b	#2,$24(a0)
0001C6CC 4E75                       		rts	
0001C6CE                            ; ===========================================================================
0001C6CE                            
0001C6CE                            loc_1A646:
0001C6CE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C6D4 6D00                       		blt.s	loc_1A656
0001C6D6 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C6DE                            
0001C6DE                            loc_1A656:
0001C6DE 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C6E6 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C6EC 6D00                       		blt.s	locret_1A674
0001C6EE 4268 003E                  		clr.w	$3E(a0)
0001C6F2 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C6F8 4228 0029                  		clr.b	$29(a0)
0001C6FC                            
0001C6FC                            locret_1A674:
0001C6FC 4E75                       		rts	
0001C6FE                            ; ===========================================================================
0001C6FE                            ; ---------------------------------------------------------------------------
0001C6FE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C6FE                            ; ---------------------------------------------------------------------------
0001C6FE                            Map_obj84:
0001C6FE                            	include "_maps\obj84.asm"
0001C6FE                            ; ---------------------------------------------------------------------------
0001C6FE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C6FE                            ; ---------------------------------------------------------------------------
0001C6FE 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C702 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C706 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C70A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C70E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C712 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C716 06                         byte_1A68E:	dc.b 6
0001C717 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C71C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C721 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C726 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C72B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C730 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C735 08                         byte_1A6AD:	dc.b 8
0001C736 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C73B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C740 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C745 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C74A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C74F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C754 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C759 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C75E 0A                         byte_1A6D6:	dc.b $A
0001C75F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C764 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C769 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C76E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C773 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C778 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C77D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C782 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C787 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C78C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C791 0C                         byte_1A709:	dc.b $C
0001C792 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C797 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C79C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7A1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7A6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7AB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7B0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C7B5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C7BA F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C7BF F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C7C4 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C7C9 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C7CE 0D                         byte_1A746:	dc.b $D
0001C7CF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7D4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7D9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7DE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7E3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7E8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7ED D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C7F2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C7F7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C7FC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C801 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C806 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C80B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C810 0E                         byte_1A788:	dc.b $E
0001C811 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C816 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C81B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C820 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C825 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C82A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C82F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C834 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C839 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C83E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C843 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C848 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C84D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C852 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C857 02                         byte_1A7CF:	dc.b 2
0001C858 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C85D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C862                            		even
0001C862                            		even
0001C862                            
0001C862                            ; ===========================================================================
0001C862                            ; ---------------------------------------------------------------------------
0001C862                            ; Object 86 - energy balls (FZ)
0001C862                            ; ---------------------------------------------------------------------------
0001C862                            
0001C862                            Obj86:					; XREF: Obj_Index
0001C862 7000                       		moveq	#0,d0
0001C864 1028 0024                  		move.b	$24(a0),d0
0001C868 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C86C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C870                            ; ===========================================================================
0001C870 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C872 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C874 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C876 0000                       		dc.w loc_1A962-Obj86_Index
0001C878 0000                       		dc.w loc_1A982-Obj86_Index
0001C87A                            ; ===========================================================================
0001C87A                            
0001C87A                            Obj86_Main:				; XREF: Obj86_Index
0001C87A 317C 2588 0008             		move.w	#$2588,8(a0)
0001C880 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C886 317C 0300 0002             		move.w	#$300,2(a0)
0001C88C 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C894 117C 0000 001C             		move.b	#0,$1C(a0)
0001C89A 117C 0003 0018             		move.b	#3,$18(a0)
0001C8A0 117C 0008 0017             		move.b	#8,$17(a0)
0001C8A6 117C 0008 0016             		move.b	#8,$16(a0)
0001C8AC 117C 0004 0001             		move.b	#4,1(a0)
0001C8B2 08E8 0007 0001             		bset	#7,1(a0)
0001C8B8 5428 0024                  		addq.b	#2,$24(a0)
0001C8BC                            
0001C8BC                            Obj86_Generator:			; XREF: Obj86_Index
0001C8BC 2268 0034                  		movea.l	$34(a0),a1
0001C8C0 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C8C6 6600                       		bne.s	loc_1A850
0001C8C8 10BC 003F                  		move.b	#$3F,(a0)
0001C8CC 117C 0000 0024             		move.b	#0,$24(a0)
0001C8D2 4EF9 0000 F0E4             		jmp	DisplaySprite
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            loc_1A850:
0001C8D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001C8DE 4A28 0029                  		tst.b	$29(a0)
0001C8E2 6700                       		beq.s	loc_1A86C
0001C8E4 5428 0024                  		addq.b	#2,$24(a0)
0001C8E8 117C 0001 001C             		move.b	#1,$1C(a0)
0001C8EE 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C8F4                            
0001C8F4                            loc_1A86C:
0001C8F4 323C 0013                  		move.w	#$13,d1
0001C8F8 343C 0008                  		move.w	#8,d2
0001C8FC 363C 0011                  		move.w	#$11,d3
0001C900 3828 0008                  		move.w	8(a0),d4
0001C904 4EB9 0001 14C2             		jsr	SolidObject
0001C90A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C90E 9068 0008                  		sub.w	8(a0),d0
0001C912 6B00                       		bmi.s	loc_1A89A
0001C914 0440 0140                  		subi.w	#$140,d0
0001C918 6B00                       		bmi.s	loc_1A89A
0001C91A 4A28 0001                  		tst.b	1(a0)
0001C91E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C922                            
0001C922                            loc_1A89A:
0001C922 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C926 4EB9 0000 C138             		jsr	AnimateSprite
0001C92C 4EF9 0000 F0E4             		jmp	DisplaySprite
0001C932                            ; ===========================================================================
0001C932                            
0001C932                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C932 4A28 0029                  		tst.b	$29(a0)
0001C936 6700 0000                  		beq.w	loc_1A954
0001C93A 4228 0029                  		clr.b	$29(a0)
0001C93E D068 0030                  		add.w	$30(a0),d0
0001C942 0240 001E                  		andi.w	#$1E,d0
0001C946 D4C0                       		adda.w	d0,a2
0001C948 5868 0030                  		addq.w	#4,$30(a0)
0001C94C 4268 0032                  		clr.w	$32(a0)
0001C950 7403                       		moveq	#3,d2
0001C952                            
0001C952                            Obj86_Loop:
0001C952 4EB9 0000 F58E             		jsr	SingleObjLoad2
0001C958 6600 0000                  		bne.w	loc_1A954
0001C95C 12BC 0086                  		move.b	#$86,(a1)
0001C960 3368 0008 0008             		move.w	8(a0),8(a1)
0001C966 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C96C 137C 0008 0024             		move.b	#8,$24(a1)
0001C972 337C 2300 0002             		move.w	#$2300,2(a1)
0001C978 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C980 137C 000C 0016             		move.b	#$C,$16(a1)
0001C986 137C 000C 0017             		move.b	#$C,$17(a1)
0001C98C 137C 0000 0020             		move.b	#0,$20(a1)
0001C992 137C 0003 0018             		move.b	#3,$18(a1)
0001C998 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C99E 137C 0004 0001             		move.b	#4,1(a1)
0001C9A4 08E9 0007 0001             		bset	#7,1(a1)
0001C9AA 2348 0034                  		move.l	a0,$34(a1)
0001C9AE 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001C9B4 3228 0032                  		move.w	$32(a0),d1
0001C9B8 C3FC FFB1                  		muls.w	#-$4F,d1
0001C9BC 0641 2578                  		addi.w	#$2578,d1
0001C9C0 0240 001F                  		andi.w	#$1F,d0
0001C9C4 0440 0010                  		subi.w	#$10,d0
0001C9C8 D041                       		add.w	d1,d0
0001C9CA 3340 0030                  		move.w	d0,$30(a1)
0001C9CE 5268 0032                  		addq.w	#1,$32(a0)
0001C9D2 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C9D8 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C9DC                            
0001C9DC                            loc_1A954:
0001C9DC 4A68 0032                  		tst.w	$32(a0)
0001C9E0 6600                       		bne.s	loc_1A95E
0001C9E2 5428 0024                  		addq.b	#2,$24(a0)
0001C9E6                            
0001C9E6                            loc_1A95E:
0001C9E6 6000 FF0C                  		bra.w	loc_1A86C
0001C9EA                            ; ===========================================================================
0001C9EA                            
0001C9EA                            loc_1A962:				; XREF: Obj86_Index
0001C9EA 117C 0002 001C             		move.b	#2,$1C(a0)
0001C9F0 4A68 0038                  		tst.w	$38(a0)
0001C9F4 6600                       		bne.s	loc_1A97E
0001C9F6 117C 0002 0024             		move.b	#2,$24(a0)
0001C9FC 2268 0034                  		movea.l	$34(a0),a1
0001CA00 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CA06                            
0001CA06                            loc_1A97E:
0001CA06 6000 FEEC                  		bra.w	loc_1A86C
0001CA0A                            ; ===========================================================================
0001CA0A                            
0001CA0A                            loc_1A982:				; XREF: Obj86_Index
0001CA0A 7000                       		moveq	#0,d0
0001CA0C 1028 0025                  		move.b	$25(a0),d0
0001CA10 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CA14 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CA18 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CA1C 4EB9 0000 C138             		jsr	AnimateSprite
0001CA22 4EF9 0000 F0E4             		jmp	DisplaySprite
0001CA28                            ; ===========================================================================
0001CA28 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CA2A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CA2C 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CA2E                            ; ===========================================================================
0001CA2E                            
0001CA2E                            loc_1A9A6:				; XREF: Obj86_Index2
0001CA2E 3028 0030                  		move.w	$30(a0),d0
0001CA32 9068 0008                  		sub.w	8(a0),d0
0001CA36 E940                       		asl.w	#4,d0
0001CA38 3140 0010                  		move.w	d0,$10(a0)
0001CA3C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CA42 5428 0025                  		addq.b	#2,$25(a0)
0001CA46 4E75                       		rts	
0001CA48                            ; ===========================================================================
0001CA48                            
0001CA48                            loc_1A9C0:				; XREF: Obj86_Index2
0001CA48 4A68 0010                  		tst.w	$10(a0)
0001CA4C 6700                       		beq.s	loc_1A9E6
0001CA4E 4EB9 0000 F0CA             		jsr	SpeedToPos
0001CA54 3028 0008                  		move.w	8(a0),d0
0001CA58 9068 0030                  		sub.w	$30(a0),d0
0001CA5C 6400                       		bcc.s	loc_1A9E6
0001CA5E 4268 0010                  		clr.w	$10(a0)
0001CA62 D168 0008                  		add.w	d0,8(a0)
0001CA66 2268 0034                  		movea.l	$34(a0),a1
0001CA6A 5369 0032                  		subq.w	#1,$32(a1)
0001CA6E                            
0001CA6E                            loc_1A9E6:
0001CA6E 117C 0000 001C             		move.b	#0,$1C(a0)
0001CA74 5368 0028                  		subq.w	#1,$28(a0)
0001CA78 6600                       		bne.s	locret_1AA1C
0001CA7A 5428 0025                  		addq.b	#2,$25(a0)
0001CA7E 117C 0001 001C             		move.b	#1,$1C(a0)
0001CA84 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CA8A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CA90 7000                       		moveq	#0,d0
0001CA92 3038 D008                  		move.w	($FFFFD008).w,d0
0001CA96 9068 0008                  		sub.w	8(a0),d0
0001CA9A 3140 0010                  		move.w	d0,$10(a0)
0001CA9E 317C 0140 0012             		move.w	#$140,$12(a0)
0001CAA4                            
0001CAA4                            locret_1AA1C:
0001CAA4 4E75                       		rts	
0001CAA6                            ; ===========================================================================
0001CAA6                            
0001CAA6                            loc_1AA1E:				; XREF: Obj86_Index2
0001CAA6 4EB9 0000 F0CA             		jsr	SpeedToPos
0001CAAC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CAB2 6400                       		bcc.s	loc_1AA34
0001CAB4 5368 0028                  		subq.w	#1,$28(a0)
0001CAB8 6700                       		beq.s	loc_1AA34
0001CABA 4E75                       		rts	
0001CABC                            ; ===========================================================================
0001CABC                            
0001CABC                            loc_1AA34:
0001CABC 2268 0034                  		movea.l	$34(a0),a1
0001CAC0 5369 0038                  		subq.w	#1,$38(a1)
0001CAC4 6000 FA0A                  		bra.w	Obj84_Delete
0001CAC8                            ; ===========================================================================
0001CAC8                            Ani_obj86:
0001CAC8                            	include "_anim\obj86.asm"
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8                            ; Animation script - energy ball launcher (FZ)
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8 0000                       		dc.w byte_1AA46-Ani_obj86
0001CACA 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CACC 0000                       		dc.w byte_1AA50-Ani_obj86
0001CACE 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CAD2 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CAD8 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CADE                            		even
0001CADE                            		even
0001CADE                            
0001CADE                            ; ---------------------------------------------------------------------------
0001CADE                            ; Sprite mappings - energy ball	launcher (FZ)
0001CADE                            ; ---------------------------------------------------------------------------
0001CADE                            Map_obj86:
0001CADE                            	include "_maps\obj86.asm"
0001CADE                            ; ---------------------------------------------------------------------------
0001CADE                            ; Sprite mappings - energy ball	launcher (FZ)
0001CADE                            ; ---------------------------------------------------------------------------
0001CADE 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CAE2 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CAE6 01                         byte_1AA5E:	dc.b 1
0001CAE7 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CAEC 01                         byte_1AA64:	dc.b 1
0001CAED F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CAF2 01                         byte_1AA6A:	dc.b 1
0001CAF3 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CAF8 01                         byte_1AA70:	dc.b 1
0001CAF9 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CAFE                            		even
0001CAFE                            		even
0001CAFE                            
0001CAFE                            Ani_obj86a:
0001CAFE                            	include "_anim\obj86a.asm"
0001CAFE                            ; ---------------------------------------------------------------------------
0001CAFE                            ; Animation script - energy balls (FZ)
0001CAFE                            ; ---------------------------------------------------------------------------
0001CAFE 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CB00 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CB02 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CB11 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CB20 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CB24 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CB2E                            		even
0001CB2E                            		even
0001CB2E                            
0001CB2E                            ; ---------------------------------------------------------------------------
0001CB2E                            ; Sprite mappings - energy balls (FZ)
0001CB2E                            ; ---------------------------------------------------------------------------
0001CB2E                            Map_obj86a:
0001CB2E                            	include "_maps\obj86a.asm"
0001CB2E                            ; ---------------------------------------------------------------------------
0001CB2E                            ; Sprite mappings - energy balls (FZ)
0001CB2E                            ; ---------------------------------------------------------------------------
0001CB2E 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CB32 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CB36 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CB3A 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CB3E 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CB42 0000                       		dc.w byte_1AB20-Map_obj86a
0001CB44 02                         byte_1AABC:	dc.b 2
0001CB45 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CB4A 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CB4F 02                         byte_1AAC7:	dc.b 2
0001CB50 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CB55 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CB5A 02                         byte_1AAD2:	dc.b 2
0001CB5B F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CB60 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CB65 02                         byte_1AADD:	dc.b 2
0001CB66 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CB6B 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CB70 02                         byte_1AAE8:	dc.b 2
0001CB71 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CB76 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CB7B 02                         byte_1AAF3:	dc.b 2
0001CB7C F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CB81 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CB86 01                         byte_1AAFE:	dc.b 1
0001CB87 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CB8C 01                         byte_1AB04:	dc.b 1
0001CB8D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CB92 02                         byte_1AB0A:	dc.b 2
0001CB93 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CB98 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CB9D 02                         byte_1AB15:	dc.b 2
0001CB9E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CBA3 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CBA8 00                         byte_1AB20:	dc.b 0
0001CBAA 00                         		even
0001CBAA 00                         		even
0001CBAA                            
0001CBAA                            ; ===========================================================================
0001CBAA                            ; ---------------------------------------------------------------------------
0001CBAA                            ; Object 3E - prison capsule
0001CBAA                            ; ---------------------------------------------------------------------------
0001CBAA                            
0001CBAA                            Obj3E:					; XREF: Obj_Index
0001CBAA 7000                       		moveq	#0,d0
0001CBAC 1028 0024                  		move.b	$24(a0),d0
0001CBB0 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CBB4 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CBB8 3028 0008                  		move.w	8(a0),d0
0001CBBC 0240 FF80                  		andi.w	#$FF80,d0
0001CBC0 3238 F700                  		move.w	($FFFFF700).w,d1
0001CBC4 0441 0080                  		subi.w	#$80,d1
0001CBC8 0241 FF80                  		andi.w	#$FF80,d1
0001CBCC 9041                       		sub.w	d1,d0
0001CBCE 0C40 0280                  		cmpi.w	#$280,d0
0001CBD2 6200                       		bhi.s	Obj3E_Delete
0001CBD4 4EF9 0000 F0E4             		jmp	DisplaySprite
0001CBDA                            ; ===========================================================================
0001CBDA                            
0001CBDA                            Obj3E_Delete:
0001CBDA 4EF9 0000 F120             		jmp	DeleteObject
0001CBE0                            ; ===========================================================================
0001CBE0 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CBE2 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CBE4 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CBE6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBE8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBEA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CBEC 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CBEE 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CBF0                            
0001CBF0 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CBF4 040C 0501                  		dc.b 4,	$C, 5, 1
0001CBF8 0610 0403                  		dc.b 6,	$10, 4,	3
0001CBFC 0810 0305                  		dc.b 8,	$10, 3,	5
0001CC00                            ; ===========================================================================
0001CC00                            
0001CC00                            Obj3E_Main:				; XREF: Obj3E_Index
0001CC00 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CC08 317C 049D 0002             		move.w	#$49D,2(a0)
0001CC0E 117C 0004 0001             		move.b	#4,1(a0)
0001CC14 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CC1A 7000                       		moveq	#0,d0
0001CC1C 1028 0028                  		move.b	$28(a0),d0
0001CC20 E548                       		lsl.w	#2,d0
0001CC22 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CC26 1159 0024                  		move.b	(a1)+,$24(a0)
0001CC2A 1159 0019                  		move.b	(a1)+,$19(a0)
0001CC2E 1159 0018                  		move.b	(a1)+,$18(a0)
0001CC32 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CC36 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CC3A 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CC3C 117C 0006 0020             		move.b	#6,$20(a0)
0001CC42 117C 0008 0021             		move.b	#8,$21(a0)
0001CC48                            
0001CC48                            Obj3E_Not02:
0001CC48 4E75                       		rts	
0001CC4A                            ; ===========================================================================
0001CC4A                            
0001CC4A                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CC4A 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CC50 6700                       		beq.s	Obj3E_ChkOpened
0001CC52 323C 002B                  		move.w	#$2B,d1
0001CC56 343C 0018                  		move.w	#$18,d2
0001CC5A 363C 0018                  		move.w	#$18,d3
0001CC5E 3828 0008                  		move.w	8(a0),d4
0001CC62 4EF9 0001 14C2             		jmp	SolidObject
0001CC68                            ; ===========================================================================
0001CC68                            
0001CC68                            Obj3E_ChkOpened:
0001CC68 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CC6C 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CC6E 4228 0025                  		clr.b	$25(a0)
0001CC72 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CC78 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CC7E                            
0001CC7E                            Obj3E_DoOpen:
0001CC7E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CC84 4E75                       		rts	
0001CC86                            ; ===========================================================================
0001CC86                            
0001CC86                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CC86 323C 0017                  		move.w	#$17,d1
0001CC8A 343C 0008                  		move.w	#8,d2
0001CC8E 363C 0008                  		move.w	#8,d3
0001CC92 3828 0008                  		move.w	8(a0),d4
0001CC96 4EB9 0001 14C2             		jsr	SolidObject
0001CC9C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CCA2 4EB9 0000 C138             		jsr	AnimateSprite
0001CCA8 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CCAE 4A28 0025                  		tst.b	$25(a0)
0001CCB2 6700                       		beq.s	locret_1AC60
0001CCB4 5068 000C                  		addq.w	#8,$C(a0)
0001CCB8 117C 000A 0024             		move.b	#$A,$24(a0)
0001CCBE 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CCC4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CCC8 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CCCC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CCD2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CCD8 4228 0025                  		clr.b	$25(a0)
0001CCDC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CCE2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CCE8                            
0001CCE8                            locret_1AC60:
0001CCE8 4E75                       		rts	
0001CCEA                            ; ===========================================================================
0001CCEA                            
0001CCEA                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CCEA 7007                       		moveq	#7,d0
0001CCEC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CCF0 6600                       		bne.s	loc_1ACA0
0001CCF2 4EB9 0000 F578             		jsr	SingleObjLoad
0001CCF8 6600                       		bne.s	loc_1ACA0
0001CCFA 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CCFE 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD04 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD0A 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CD10 7200                       		moveq	#0,d1
0001CD12 1200                       		move.b	d0,d1
0001CD14 E409                       		lsr.b	#2,d1
0001CD16 0441 0020                  		subi.w	#$20,d1
0001CD1A D369 0008                  		add.w	d1,8(a1)
0001CD1E E048                       		lsr.w	#8,d0
0001CD20 E608                       		lsr.b	#3,d0
0001CD22 D169 000C                  		add.w	d0,$C(a1)
0001CD26                            
0001CD26                            loc_1ACA0:
0001CD26 5368 001E                  		subq.w	#1,$1E(a0)
0001CD2A 6700                       		beq.s	Obj3E_MakeAnimal
0001CD2C 4E75                       		rts	
0001CD2E                            ; ===========================================================================
0001CD2E                            
0001CD2E                            Obj3E_MakeAnimal:
0001CD2E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CD34 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CD3A 117C 0006 001A             		move.b	#6,$1A(a0)
0001CD40 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CD46 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CD4C 7C07                       		moveq	#7,d6
0001CD4E 3A3C 009A                  		move.w	#$9A,d5
0001CD52 78E4                       		moveq	#-$1C,d4
0001CD54                            
0001CD54                            Obj3E_Loop:
0001CD54 4EB9 0000 F578             		jsr	SingleObjLoad
0001CD5A 6600                       		bne.s	locret_1ACF8
0001CD5C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CD60 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD66 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD6C D969 0008                  		add.w	d4,8(a1)
0001CD70 5E44                       		addq.w	#7,d4
0001CD72 3345 0036                  		move.w	d5,$36(a1)
0001CD76 5145                       		subq.w	#8,d5
0001CD78 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CD7C                            
0001CD7C                            locret_1ACF8:
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CD7E 7007                       		moveq	#7,d0
0001CD80 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CD84 6600                       		bne.s	loc_1AD38
0001CD86 4EB9 0000 F578             		jsr	SingleObjLoad
0001CD8C 6600                       		bne.s	loc_1AD38
0001CD8E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CD92 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD98 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD9E 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CDA4 0240 001F                  		andi.w	#$1F,d0
0001CDA8 5D40                       		subq.w	#6,d0
0001CDAA 4A41                       		tst.w	d1
0001CDAC 6A00                       		bpl.s	loc_1AD2E
0001CDAE 4440                       		neg.w	d0
0001CDB0                            
0001CDB0                            loc_1AD2E:
0001CDB0 D169 0008                  		add.w	d0,8(a1)
0001CDB4 337C 000C 0036             		move.w	#$C,$36(a1)
0001CDBA                            
0001CDBA                            loc_1AD38:
0001CDBA 5368 001E                  		subq.w	#1,$1E(a0)
0001CDBE 6600                       		bne.s	locret_1AD48
0001CDC0 5428 0024                  		addq.b	#2,$24(a0)
0001CDC4 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CDCA                            
0001CDCA                            locret_1AD48:
0001CDCA 4E75                       		rts	
0001CDCC                            ; ===========================================================================
0001CDCC                            
0001CDCC                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CDCC 703E                       		moveq	#$3E,d0
0001CDCE 7228                       		moveq	#$28,d1
0001CDD0 7440                       		moveq	#$40,d2
0001CDD2 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CDD6                            
0001CDD6                            Obj3E_FindObj28:
0001CDD6 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CDD8 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CDDA D2C2                       		adda.w	d2,a1		; next object RAM
0001CDDC 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CDE0                            
0001CDE0 4EB9 0001 077E             		jsr	GotThroughAct
0001CDE6 4EF9 0000 F120             		jmp	DeleteObject
0001CDEC                            ; ===========================================================================
0001CDEC                            
0001CDEC                            Obj3E_Obj28Found:
0001CDEC 4E75                       		rts	
0001CDEE                            ; ===========================================================================
0001CDEE                            Ani_obj3E:
0001CDEE                            	include "_anim\obj3E.asm"
0001CDEE                            ; ---------------------------------------------------------------------------
0001CDEE                            ; Animation script - prison capsule
0001CDEE                            ; ---------------------------------------------------------------------------
0001CDEE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CDF0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CDF2 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CDF6                            		even
0001CDF6                            		even
0001CDF6                            
0001CDF6                            ; ---------------------------------------------------------------------------
0001CDF6                            ; Sprite mappings - prison capsule
0001CDF6                            ; ---------------------------------------------------------------------------
0001CDF6                            Map_obj3E:
0001CDF6                            	include "_maps\obj3E.asm"
0001CDF6                            ; ---------------------------------------------------------------------------
0001CDF6                            ; Sprite mappings - prison capsule
0001CDF6                            ; ---------------------------------------------------------------------------
0001CDF6 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CDFA 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CDFE 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CE02 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CE04 07                         byte_1AD82:	dc.b 7
0001CE05 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CE0A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CE0F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CE14 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CE19 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CE1E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CE23 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CE28 01                         byte_1ADA6:	dc.b 1
0001CE29 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CE2E 06                         byte_1ADAC:	dc.b 6
0001CE2F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CE34 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CE39 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CE3E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CE43 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CE48 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CE4D 01                         byte_1ADCB:	dc.b 1
0001CE4E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CE53 02                         byte_1ADD1:	dc.b 2
0001CE54 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CE59 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CE5E 01                         byte_1ADDC:	dc.b 1
0001CE5F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CE64 00                         byte_1ADE2:	dc.b 0
0001CE66 00                         		even
0001CE66 00                         		even
0001CE66                            
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66                            
0001CE66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE66                            
0001CE66                            
0001CE66                            TouchResponse:				; XREF: Obj01
0001CE66 4E71                       		nop	
0001CE68 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CE6C 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CE70 5142                       		subq.w	#8,d2
0001CE72 7A00                       		moveq	#0,d5
0001CE74 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CE78 5705                       		subq.b	#3,d5
0001CE7A 9645                       		sub.w	d5,d3
0001CE7C 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CE82 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CE84 0643 000C                  		addi.w	#$C,d3
0001CE88 7A0A                       		moveq	#$A,d5
0001CE8A                            
0001CE8A                            Touch_NoDuck:
0001CE8A 383C 0010                  		move.w	#$10,d4
0001CE8E DA45                       		add.w	d5,d5
0001CE90 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CE94 3C3C 005F                  		move.w	#$5F,d6
0001CE98                            
0001CE98                            Touch_Loop:
0001CE98 4A29 0001                  		tst.b	1(a1)
0001CE9C 6A00                       		bpl.s	Touch_NextObj
0001CE9E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CEA2 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CEA4                            
0001CEA4                            Touch_NextObj:
0001CEA4 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CEA8 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CEAC                            
0001CEAC 7000                       		moveq	#0,d0
0001CEAE 4E75                       		rts	
0001CEB0                            ; ===========================================================================
0001CEB0 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CEB2 0C14                       		dc.b   $C, $14
0001CEB4 140C                       		dc.b  $14,  $C
0001CEB6 0410                       		dc.b	4, $10
0001CEB8 0C12                       		dc.b   $C, $12
0001CEBA 1010                       		dc.b  $10, $10
0001CEBC 0606                       		dc.b	6,   6
0001CEBE 180C                       		dc.b  $18,  $C
0001CEC0 0C10                       		dc.b   $C, $10
0001CEC2 100C                       		dc.b  $10,  $C
0001CEC4 0808                       		dc.b	8,   8
0001CEC6 1410                       		dc.b  $14, $10
0001CEC8 1408                       		dc.b  $14,   8
0001CECA 0E0E                       		dc.b   $E,  $E
0001CECC 1818                       		dc.b  $18, $18
0001CECE 2810                       		dc.b  $28, $10
0001CED0 1018                       		dc.b  $10, $18
0001CED2 0810                       		dc.b	8, $10
0001CED4 2070                       		dc.b  $20, $70
0001CED6 4020                       		dc.b  $40, $20
0001CED8 8020                       		dc.b  $80, $20
0001CEDA 2020                       		dc.b  $20, $20
0001CEDC 0808                       		dc.b	8,   8
0001CEDE 0404                       		dc.b	4,   4
0001CEE0 2008                       		dc.b  $20,   8
0001CEE2 0C0C                       		dc.b   $C,  $C
0001CEE4 0804                       		dc.b	8,   4
0001CEE6 1804                       		dc.b  $18,   4
0001CEE8 2804                       		dc.b  $28,   4
0001CEEA 0408                       		dc.b	4,   8
0001CEEC 0418                       		dc.b	4, $18
0001CEEE 0428                       		dc.b	4, $28
0001CEF0 0420                       		dc.b	4, $20
0001CEF2 1818                       		dc.b  $18, $18
0001CEF4 0C18                       		dc.b   $C, $18
0001CEF6 4808                       		dc.b  $48,   8
0001CEF8                            ; ===========================================================================
0001CEF8                            
0001CEF8                            Touch_Height:				; XREF: TouchResponse
0001CEF8 0240 003F                  		andi.w	#$3F,d0
0001CEFC D040                       		add.w	d0,d0
0001CEFE 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CF02 7200                       		moveq	#0,d1
0001CF04 121A                       		move.b	(a2)+,d1
0001CF06 4A28 003A                  		tst.b	biting(a0)
0001CF0A 6700                       		beq.s	@not_biting
0001CF0C 5801                       		addq.b	#4,d1
0001CF0E                            		
0001CF0E                            @not_biting:
0001CF0E 3029 0008                  		move.w	8(a1),d0
0001CF12 9041                       		sub.w	d1,d0
0001CF14 9042                       		sub.w	d2,d0
0001CF16 6400                       		bcc.s	loc_1AE98
0001CF18 D241                       		add.w	d1,d1
0001CF1A D041                       		add.w	d1,d0
0001CF1C 6500                       		bcs.s	Touch_Width
0001CF1E 6000 FF84                  		bra.w	Touch_NextObj
0001CF22                            ; ===========================================================================
0001CF22                            
0001CF22                            loc_1AE98:
0001CF22 B044                       		cmp.w	d4,d0
0001CF24 6200 FF7E                  		bhi.w	Touch_NextObj
0001CF28                            
0001CF28                            Touch_Width:
0001CF28 7200                       		moveq	#0,d1
0001CF2A 121A                       		move.b	(a2)+,d1
0001CF2C 3029 000C                  		move.w	$C(a1),d0
0001CF30 9041                       		sub.w	d1,d0
0001CF32 9043                       		sub.w	d3,d0
0001CF34 6400                       		bcc.s	loc_1AEB6
0001CF36 D241                       		add.w	d1,d1
0001CF38 D240                       		add.w	d0,d1
0001CF3A 6500                       		bcs.s	Touch_ChkValue
0001CF3C 6000 FF66                  		bra.w	Touch_NextObj
0001CF40                            ; ===========================================================================
0001CF40                            
0001CF40                            loc_1AEB6:
0001CF40 B045                       		cmp.w	d5,d0
0001CF42 6200 FF60                  		bhi.w	Touch_NextObj
0001CF46                            
0001CF46                            Touch_ChkValue:
0001CF46 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CF4A 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CF4E 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CF52 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CF56 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CF5A 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CF5C 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CF60                            
0001CF60                            ; touch	response is $40-$7F
0001CF60                            
0001CF60 1029 0020                  		move.b	$20(a1),d0
0001CF64 0200 003F                  		andi.b	#$3F,d0
0001CF68 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CF6C 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CF6E 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CF74 6400 0000                  		bcc.w	locret_1AEF2
0001CF78 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CF7C                            
0001CF7C                            locret_1AEF2:
0001CF7C 4E75                       		rts	
0001CF7E                            ; ===========================================================================
0001CF7E                            
0001CF7E                            Touch_Monitor:
0001CF7E 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CF82 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CF84 3028 000C                  		move.w	$C(a0),d0
0001CF88 0440 0010                  		subi.w	#$10,d0
0001CF8C B069 000C                  		cmp.w	$C(a1),d0
0001CF90 6500                       		bcs.s	locret_1AF2E
0001CF92 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CF96 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CF9C 4A29 0025                  		tst.b	$25(a1)
0001CFA0 6600                       		bne.s	locret_1AF2E
0001CFA2 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CFA6 4E75                       		rts
0001CFA8                            ; ===========================================================================
0001CFA8                            
0001CFA8                            loc_1AF1E:
0001CFA8 4A28 003A                  		tst.b	biting(a0)
0001CFAC 6700 0000                  		beq.w	locret_1AF2E
0001CFB0 3029 0008                  		move.w	8(a1),d0
0001CFB4 3228 0008                  		move.w	8(a0),d1
0001CFB8 0828 0000 0022             		btst	#0,$22(a0)
0001CFBE 6600                       		bne.s	@left
0001CFC0 B240                       		cmp.w	d0,d1
0001CFC2 6F00                       		ble.s	@do
0001CFC4 4E75                       		rts
0001CFC6                            		
0001CFC6                            	@left:
0001CFC6 B240                       		cmp.w	d0,d1
0001CFC8 6C00                       		bge.s	@do
0001CFCA 4E75                       		rts
0001CFCC                            		
0001CFCC                            	@do:
0001CFCC 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CFD0                            
0001CFD0                            locret_1AF2E:
0001CFD0 4E75                       		rts	
0001CFD2                            ; ===========================================================================
0001CFD2                            
0001CFD2                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CFD2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CFD6 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CFD8 4A28 003A                  		tst.b	biting(a0)
0001CFDC 6700 0000                  		beq.w	Touch_ChkHurt
0001CFE0 3029 0008                  		move.w	8(a1),d0
0001CFE4 3228 0008                  		move.w	8(a0),d1
0001CFE8 0828 0000 0022             		btst	#0,$22(a0)
0001CFEE 6600                       		bne.s	@left
0001CFF0 B240                       		cmp.w	d0,d1
0001CFF2 6F00                       		ble.s	loc_1AF40
0001CFF4 6000 0000                  		bra.w	Touch_ChkHurt
0001CFF8                            		
0001CFF8                            	@left:
0001CFF8 B240                       		cmp.w	d0,d1
0001CFFA 6C00                       		bge.s	loc_1AF40
0001CFFC 6000 0000                  		bra.w	Touch_ChkHurt
0001D000                            
0001D000                            loc_1AF40:
0001D000 4A29 0021                  		tst.b	$21(a1)
0001D004 6700                       		beq.s	Touch_KillEnemy
0001D006 137C 0000 0020             		move.b	#0,$20(a1)
0001D00C 5329 0021                  		subq.b	#1,$21(a1)
0001D010 6600                       		bne.s	locret_1AF68
0001D012 08E9 0007 0022             		bset	#7,$22(a1)
0001D018                            
0001D018                            locret_1AF68:
0001D018 4E75                       		rts	
0001D01A                            ; ===========================================================================
0001D01A                            
0001D01A                            Touch_KillEnemy:
0001D01A 08E9 0007 0022             		bset	#7,$22(a1)
0001D020 7000                       		moveq	#0,d0
0001D022 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D026 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D02A 0C40 0006                  		cmpi.w	#6,d0
0001D02E 6500                       		bcs.s	loc_1AF82
0001D030 7006                       		moveq	#6,d0
0001D032                            
0001D032                            loc_1AF82:
0001D032 3340 003E                  		move.w	d0,$3E(a1)
0001D036 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D03A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D040 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D042 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D046 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D04C                            
0001D04C                            loc_1AF9C:
0001D04C 6100 0000                  		bsr.w	AddPoints
0001D050 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D054 137C 0000 0024             		move.b	#0,$24(a1)
0001D05A 4E75                       		rts	
0001D05C                            ; ===========================================================================
0001D05C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D064                            ; ===========================================================================
0001D064                            
0001D064                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D064 08E9 0007 0022             		bset	#7,$22(a1)
0001D06A                            
0001D06A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D06A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D06E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D070                            
0001D070                            loc_1AFE6:				; XREF: Touch_Hurt
0001D070 70FF                       		moveq	#-1,d0
0001D072 4E75                       		rts	
0001D074                            ; ===========================================================================
0001D074                            
0001D074                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D074 4E71                       		nop	
0001D076 4A68 0030                  		tst.w	$30(a0)
0001D07A 66F4                       		bne.s	loc_1AFE6
0001D07C 2449                       		movea.l	a1,a2
0001D07E                            
0001D07E                            ; End of function TouchResponse
0001D07E                            ; continue straight to HurtSonic
0001D07E                            
0001D07E                            ; ---------------------------------------------------------------------------
0001D07E                            ; Hurting Sonic	subroutine
0001D07E                            ; ---------------------------------------------------------------------------
0001D07E                            
0001D07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D07E                            
0001D07E                            
0001D07E                            HurtSonic:
0001D07E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D082 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D084 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D088 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D08C 4EB9 0000 F578             		jsr	SingleObjLoad
0001D092 6600                       		bne.s	Hurt_Shield
0001D094 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D098 3368 0008 0008             		move.w	8(a0),8(a1)
0001D09E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D0A4                            
0001D0A4                            Hurt_Shield:
0001D0A4 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D0AA 117C 0004 0024             		move.b	#4,$24(a0)
0001D0B0 6100 8596                  		bsr.w	Sonic_ResetOnFloor
0001D0B4 08E8 0001 0022             		bset	#1,$22(a0)
0001D0BA 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D0C0 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D0C6 0828 0006 0022             		btst	#6,$22(a0)
0001D0CC 6700                       		beq.s	Hurt_Reverse
0001D0CE 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D0D4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D0DA                            
0001D0DA                            Hurt_Reverse:
0001D0DA 3028 0008                  		move.w	8(a0),d0
0001D0DE B06A 0008                  		cmp.w	8(a2),d0
0001D0E2 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D0E4 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D0E8                            
0001D0E8                            Hurt_ChkSpikes:
0001D0E8 317C 0000 0014             		move.w	#0,$14(a0)
0001D0EE 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D0F4 317C 0078 0030             		move.w	#$78,$30(a0)
0001D0FA 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D0FE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D102 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D104 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D108 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D10A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D10E                            
0001D10E                            Hurt_Sound:
0001D10E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D114 70FF                       		moveq	#-1,d0
0001D116 4E75                       		rts	
0001D118                            ; ===========================================================================
0001D118                            
0001D118                            Hurt_NoRings:
0001D118 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D11C 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D120                            ; End of function HurtSonic
0001D120                            
0001D120                            ; ---------------------------------------------------------------------------
0001D120                            ; Subroutine to	kill Sonic
0001D120                            ; ---------------------------------------------------------------------------
0001D120                            
0001D120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D120                            
0001D120                            
0001D120                            KillSonic:
0001D120 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D124 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001D126 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D12C 117C 0006 0024             		move.b	#6,$24(a0)
0001D132 6100 8514                  		bsr.w	Sonic_ResetOnFloor
0001D136 08E8 0001 0022             		bset	#1,$22(a0)
0001D13C 317C F900 0012             		move.w	#-$700,$12(a0)
0001D142 317C 0000 0010             		move.w	#0,$10(a0)
0001D148 317C 0000 0014             		move.w	#0,$14(a0)
0001D14E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D154 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D15A 08E8 0007 0002             		bset	#7,2(a0)
0001D160 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D164 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D168 6600                       		bne.s	Kill_Sound
0001D16A 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D16E                            
0001D16E                            Kill_Sound:
0001D16E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D174                            
0001D174                            Kill_NoDeath:
0001D174 70FF                       		moveq	#-1,d0
0001D176 4E75                       		rts	
0001D178                            ; End of function KillSonic
0001D178                            
0001D178                            
0001D178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D178                            
0001D178                            
0001D178                            Touch_Special:				; XREF: Touch_ChkValue
0001D178 1229 0020                  		move.b	$20(a1),d1
0001D17C 0201 003F                  		andi.b	#$3F,d1
0001D180 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D184 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D186 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D18A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D18C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D190 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D192 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D196 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D198 4E75                       		rts	
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            Touch_CatKiller:			; XREF: Touch_Special
0001D19A 6000 FEC8                  		bra.w	loc_1AFDA
0001D19E                            ; ===========================================================================
0001D19E                            
0001D19E                            Touch_Yadrin:				; XREF: Touch_Special
0001D19E 9A40                       		sub.w	d0,d5
0001D1A0 0C45 0008                  		cmpi.w	#8,d5
0001D1A4 6400                       		bcc.s	loc_1B144
0001D1A6 3029 0008                  		move.w	8(a1),d0
0001D1AA 5940                       		subq.w	#4,d0
0001D1AC 0829 0000 0022             		btst	#0,$22(a1)
0001D1B2 6700                       		beq.s	loc_1B130
0001D1B4 0440 0010                  		subi.w	#$10,d0
0001D1B8                            
0001D1B8                            loc_1B130:
0001D1B8 9042                       		sub.w	d2,d0
0001D1BA 6400                       		bcc.s	loc_1B13C
0001D1BC 0640 0018                  		addi.w	#$18,d0
0001D1C0 6500                       		bcs.s	loc_1B140
0001D1C2 6000                       		bra.s	loc_1B144
0001D1C4                            ; ===========================================================================
0001D1C4                            
0001D1C4                            loc_1B13C:
0001D1C4 B044                       		cmp.w	d4,d0
0001D1C6 6200                       		bhi.s	loc_1B144
0001D1C8                            
0001D1C8                            loc_1B140:
0001D1C8 6000 FEA0                  		bra.w	Touch_ChkHurt
0001D1CC                            ; ===========================================================================
0001D1CC                            
0001D1CC                            loc_1B144:
0001D1CC 6000 FE04                  		bra.w	Touch_Enemy
0001D1D0                            ; ===========================================================================
0001D1D0                            
0001D1D0                            Touch_D7orE1:				; XREF: Touch_Special
0001D1D0 5229 0021                  		addq.b	#1,$21(a1)
0001D1D4 4E75                       		rts	
0001D1D6                            ; End of function Touch_Special
0001D1D6                            
0001D1D6                            ; ---------------------------------------------------------------------------
0001D1D6                            ; Subroutine to	show the special stage layout
0001D1D6                            ; ---------------------------------------------------------------------------
0001D1D6                            
0001D1D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1D6                            
0001D1D6                            
0001D1D6                            SS_ShowLayout:				; XREF: SpecialStage
0001D1D6 6100 0000                  		bsr.w	SS_AniWallsRings
0001D1DA 6100 0000                  		bsr.w	SS_AniItems
0001D1DE 3F05                       		move.w	d5,-(sp)
0001D1E0 43F8 8000                  		lea	($FFFF8000).w,a1
0001D1E4 1038 F780                  		move.b	($FFFFF780).w,d0
0001D1E8 0200 00FC                  		andi.b	#$FC,d0
0001D1EC 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001D1F2 3800                       		move.w	d0,d4
0001D1F4 3A01                       		move.w	d1,d5
0001D1F6 C9FC 0018                  		muls.w	#$18,d4
0001D1FA CBFC 0018                  		muls.w	#$18,d5
0001D1FE 7400                       		moveq	#0,d2
0001D200 3438 F700                  		move.w	($FFFFF700).w,d2
0001D204 84FC 0018                  		divu.w	#$18,d2
0001D208 4842                       		swap	d2
0001D20A 4442                       		neg.w	d2
0001D20C 0642 FF4C                  		addi.w	#-$B4,d2
0001D210 7600                       		moveq	#0,d3
0001D212 3638 F704                  		move.w	($FFFFF704).w,d3
0001D216 86FC 0018                  		divu.w	#$18,d3
0001D21A 4843                       		swap	d3
0001D21C 4443                       		neg.w	d3
0001D21E 0643 FF4C                  		addi.w	#-$B4,d3
0001D222 3E3C 000F                  		move.w	#$F,d7
0001D226                            
0001D226                            loc_1B19E:
0001D226 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D22A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D22E 4440                       		neg.w	d0
0001D230 C3C2                       		muls.w	d2,d1
0001D232 C1C3                       		muls.w	d3,d0
0001D234 2C00                       		move.l	d0,d6
0001D236 DC81                       		add.l	d1,d6
0001D238 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D23C C1C2                       		muls.w	d2,d0
0001D23E C3C3                       		muls.w	d3,d1
0001D240 D280                       		add.l	d0,d1
0001D242 2406                       		move.l	d6,d2
0001D244 3C3C 000F                  		move.w	#$F,d6
0001D248                            
0001D248                            loc_1B1C0:
0001D248 2002                       		move.l	d2,d0
0001D24A E080                       		asr.l	#8,d0
0001D24C 32C0                       		move.w	d0,(a1)+
0001D24E 2001                       		move.l	d1,d0
0001D250 E080                       		asr.l	#8,d0
0001D252 32C0                       		move.w	d0,(a1)+
0001D254 D485                       		add.l	d5,d2
0001D256 D284                       		add.l	d4,d1
0001D258 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D25C                            
0001D25C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D260 0643 0018                  		addi.w	#$18,d3
0001D264 51CF FFC0                  		dbf	d7,loc_1B19E
0001D268                            
0001D268 3A1F                       		move.w	(sp)+,d5
0001D26A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D270 7000                       		moveq	#0,d0
0001D272 3038 F704                  		move.w	($FFFFF704).w,d0
0001D276 80FC 0018                  		divu.w	#$18,d0
0001D27A C0FC 0080                  		mulu.w	#$80,d0
0001D27E D1C0                       		adda.l	d0,a0
0001D280 7000                       		moveq	#0,d0
0001D282 3038 F700                  		move.w	($FFFFF700).w,d0
0001D286 80FC 0018                  		divu.w	#$18,d0
0001D28A D0C0                       		adda.w	d0,a0
0001D28C 49F8 8000                  		lea	($FFFF8000).w,a4
0001D290 3E3C 000F                  		move.w	#$F,d7
0001D294                            
0001D294                            loc_1B20C:
0001D294 3C3C 000F                  		move.w	#$F,d6
0001D298                            
0001D298                            loc_1B210:
0001D298 7000                       		moveq	#0,d0
0001D29A 1018                       		move.b	(a0)+,d0
0001D29C 6700                       		beq.s	loc_1B268
0001D29E 0C00 004E                  		cmpi.b	#$4E,d0
0001D2A2 6200                       		bhi.s	loc_1B268
0001D2A4 3614                       		move.w	(a4),d3
0001D2A6 0643 0120                  		addi.w	#$120,d3
0001D2AA 0C43 0070                  		cmpi.w	#$70,d3
0001D2AE 6500                       		bcs.s	loc_1B268
0001D2B0 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D2B4 6400                       		bcc.s	loc_1B268
0001D2B6 342C 0002                  		move.w	2(a4),d2
0001D2BA 0642 00F0                  		addi.w	#$F0,d2
0001D2BE 0C42 0070                  		cmpi.w	#$70,d2
0001D2C2 6500                       		bcs.s	loc_1B268
0001D2C4 0C42 0170                  		cmpi.w	#$170,d2
0001D2C8 6400                       		bcc.s	loc_1B268
0001D2CA 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D2D0 E748                       		lsl.w	#3,d0
0001D2D2 4BF5 0000                  		lea	(a5,d0.w),a5
0001D2D6 225D                       		movea.l	(a5)+,a1
0001D2D8 321D                       		move.w	(a5)+,d1
0001D2DA D241                       		add.w	d1,d1
0001D2DC D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D2E0 365D                       		movea.w	(a5)+,a3
0001D2E2 7200                       		moveq	#0,d1
0001D2E4 1219                       		move.b	(a1)+,d1
0001D2E6 5301                       		subq.b	#1,d1
0001D2E8 6B00                       		bmi.s	loc_1B268
0001D2EA 4EB9 0000 F242             		jsr	sub_D762
0001D2F0                            
0001D2F0                            loc_1B268:
0001D2F0 584C                       		addq.w	#4,a4
0001D2F2 51CE FFA4                  		dbf	d6,loc_1B210
0001D2F6                            
0001D2F6 41E8 0070                  		lea	$70(a0),a0
0001D2FA 51CF FF98                  		dbf	d7,loc_1B20C
0001D2FE                            
0001D2FE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D302 0C05 0050                  		cmpi.b	#$50,d5
0001D306 6700                       		beq.s	loc_1B288
0001D308 24BC 0000 0000             		move.l	#0,(a2)
0001D30E 4E75                       		rts	
0001D310                            ; ===========================================================================
0001D310                            
0001D310                            loc_1B288:
0001D310 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D316 4E75                       		rts	
0001D318                            ; End of function SS_ShowLayout
0001D318                            
0001D318                            ; ---------------------------------------------------------------------------
0001D318                            ; Subroutine to	animate	walls and rings	in the special stage
0001D318                            ; ---------------------------------------------------------------------------
0001D318                            
0001D318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D318                            
0001D318                            
0001D318                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D318 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D31E 7000                       		moveq	#0,d0
0001D320 1038 F780                  		move.b	($FFFFF780).w,d0
0001D324 E408                       		lsr.b	#2,d0
0001D326 0240 000F                  		andi.w	#$F,d0
0001D32A 7223                       		moveq	#$23,d1
0001D32C                            
0001D32C                            loc_1B2A4:
0001D32C 3280                       		move.w	d0,(a1)
0001D32E 5049                       		addq.w	#8,a1
0001D330 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D334                            
0001D334 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D33A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D33E 6A00                       		bpl.s	loc_1B2C8
0001D340 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D346 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D34A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D350                            
0001D350                            loc_1B2C8:
0001D350 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D356 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D35A 6A00                       		bpl.s	loc_1B2E4
0001D35C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D362 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D366 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D36C                            
0001D36C                            loc_1B2E4:
0001D36C 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D370 1340 0138                  		move.b	d0,$138(a1)
0001D374 1340 0160                  		move.b	d0,$160(a1)
0001D378 1340 0148                  		move.b	d0,$148(a1)
0001D37C 1340 0150                  		move.b	d0,$150(a1)
0001D380 1340 01D8                  		move.b	d0,$1D8(a1)
0001D384 1340 01E0                  		move.b	d0,$1E0(a1)
0001D388 1340 01E8                  		move.b	d0,$1E8(a1)
0001D38C 1340 01F0                  		move.b	d0,$1F0(a1)
0001D390 1340 01F8                  		move.b	d0,$1F8(a1)
0001D394 1340 0200                  		move.b	d0,$200(a1)
0001D398 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D39C 6A00                       		bpl.s	loc_1B326
0001D39E 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D3A4 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D3A8 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D3AE                            
0001D3AE                            loc_1B326:
0001D3AE 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D3B2 1340 0168                  		move.b	d0,$168(a1)
0001D3B6 1340 0170                  		move.b	d0,$170(a1)
0001D3BA 1340 0178                  		move.b	d0,$178(a1)
0001D3BE 1340 0180                  		move.b	d0,$180(a1)
0001D3C2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D3C6 6A00                       		bpl.s	loc_1B350
0001D3C8 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D3CE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D3D2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D3D8                            
0001D3D8                            loc_1B350:
0001D3D8 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D3DE 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D3E4 7000                       		moveq	#0,d0
0001D3E6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D3EA D040                       		add.w	d0,d0
0001D3EC 41F0 0000                  		lea	(a0,d0.w),a0
0001D3F0 3290                       		move.w	(a0),(a1)
0001D3F2 3368 0002 0008             		move.w	2(a0),8(a1)
0001D3F8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D3FE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D404 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D40A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D410 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D416 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D41C D0FC 0020                  		adda.w	#$20,a0
0001D420 D2FC 0048                  		adda.w	#$48,a1
0001D424 3290                       		move.w	(a0),(a1)
0001D426 3368 0002 0008             		move.w	2(a0),8(a1)
0001D42C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D432 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D438 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D43E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D444 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D44A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D450 D0FC 0020                  		adda.w	#$20,a0
0001D454 D2FC 0048                  		adda.w	#$48,a1
0001D458 3290                       		move.w	(a0),(a1)
0001D45A 3368 0002 0008             		move.w	2(a0),8(a1)
0001D460 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D466 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D46C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D472 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D478 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D47E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D484 D0FC 0020                  		adda.w	#$20,a0
0001D488 D2FC 0048                  		adda.w	#$48,a1
0001D48C 3290                       		move.w	(a0),(a1)
0001D48E 3368 0002 0008             		move.w	2(a0),8(a1)
0001D494 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D49A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D4A0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D4A6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D4AC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D4B2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D4B8 D0FC 0020                  		adda.w	#$20,a0
0001D4BC D2FC 0048                  		adda.w	#$48,a1
0001D4C0 4E75                       		rts	
0001D4C2                            ; End of function SS_AniWallsRings
0001D4C2                            
0001D4C2                            ; ===========================================================================
0001D4C2 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D4D2 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D4E2 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D4F2 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D502 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D512 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D522 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D532 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; Subroutine to	remove items when you collect them in the special stage
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            
0001D542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D542                            
0001D542                            
0001D542                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D542 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D548 303C 001F                  		move.w	#$1F,d0
0001D54C                            
0001D54C                            loc_1B4C4:
0001D54C 4A12                       		tst.b	(a2)
0001D54E 6700                       		beq.s	locret_1B4CE
0001D550 504A                       		addq.w	#8,a2
0001D552 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D556                            
0001D556                            locret_1B4CE:
0001D556 4E75                       		rts	
0001D558                            ; End of function SS_RemoveCollectedItem
0001D558                            
0001D558                            ; ---------------------------------------------------------------------------
0001D558                            ; Subroutine to	animate	special	stage items when you touch them
0001D558                            ; ---------------------------------------------------------------------------
0001D558                            
0001D558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D558                            
0001D558                            
0001D558                            SS_AniItems:				; XREF: SS_ShowLayout
0001D558 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D55E 3E3C 001F                  		move.w	#$1F,d7
0001D562                            
0001D562                            loc_1B4DA:
0001D562 7000                       		moveq	#0,d0
0001D564 1010                       		move.b	(a0),d0
0001D566 6700                       		beq.s	loc_1B4E8
0001D568 E548                       		lsl.w	#2,d0
0001D56A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D56E 4E91                       		jsr	(a1)
0001D570                            
0001D570                            loc_1B4E8:
0001D570 5048                       		addq.w	#8,a0
0001D572                            
0001D572                            loc_1B4EA:
0001D572 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D576                            
0001D576 4E75                       		rts	
0001D578                            ; End of function SS_AniItems
0001D578                            
0001D578                            ; ===========================================================================
0001D578 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D57C 0000 0000                  		dc.l SS_AniBumper
0001D580 0000 0000                  		dc.l SS_Ani1Up
0001D584 0000 0000                  		dc.l SS_AniReverse
0001D588 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D58C 0000 0000                  		dc.l SS_AniGlassBlock
0001D590                            ; ===========================================================================
0001D590                            
0001D590                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D590 5328 0002                  		subq.b	#1,2(a0)
0001D594 6A00                       		bpl.s	locret_1B530
0001D596 117C 0005 0002             		move.b	#5,2(a0)
0001D59C 7000                       		moveq	#0,d0
0001D59E 1028 0003                  		move.b	3(a0),d0
0001D5A2 5228 0003                  		addq.b	#1,3(a0)
0001D5A6 2268 0004                  		movea.l	4(a0),a1
0001D5AA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D5AE 1280                       		move.b	d0,(a1)
0001D5B0 6600                       		bne.s	locret_1B530
0001D5B2 4290                       		clr.l	(a0)
0001D5B4 42A8 0004                  		clr.l	4(a0)
0001D5B8                            
0001D5B8                            locret_1B530:
0001D5B8 4E75                       		rts	
0001D5BA                            ; ===========================================================================
0001D5BA 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D5C0                            ; ===========================================================================
0001D5C0                            
0001D5C0                            SS_AniBumper:				; XREF: SS_AniIndex
0001D5C0 5328 0002                  		subq.b	#1,2(a0)
0001D5C4 6A00                       		bpl.s	locret_1B566
0001D5C6 117C 0007 0002             		move.b	#7,2(a0)
0001D5CC 7000                       		moveq	#0,d0
0001D5CE 1028 0003                  		move.b	3(a0),d0
0001D5D2 5228 0003                  		addq.b	#1,3(a0)
0001D5D6 2268 0004                  		movea.l	4(a0),a1
0001D5DA 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D5DE 6600                       		bne.s	loc_1B564
0001D5E0 4290                       		clr.l	(a0)
0001D5E2 42A8 0004                  		clr.l	4(a0)
0001D5E6 12BC 0025                  		move.b	#$25,(a1)
0001D5EA 4E75                       		rts	
0001D5EC                            ; ===========================================================================
0001D5EC                            
0001D5EC                            loc_1B564:
0001D5EC 1280                       		move.b	d0,(a1)
0001D5EE                            
0001D5EE                            locret_1B566:
0001D5EE 4E75                       		rts	
0001D5F0                            ; ===========================================================================
0001D5F0 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D5F6                            ; ===========================================================================
0001D5F6                            
0001D5F6                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D5F6 5328 0002                  		subq.b	#1,2(a0)
0001D5FA 6A00                       		bpl.s	locret_1B596
0001D5FC 117C 0005 0002             		move.b	#5,2(a0)
0001D602 7000                       		moveq	#0,d0
0001D604 1028 0003                  		move.b	3(a0),d0
0001D608 5228 0003                  		addq.b	#1,3(a0)
0001D60C 2268 0004                  		movea.l	4(a0),a1
0001D610 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D614 1280                       		move.b	d0,(a1)
0001D616 6600                       		bne.s	locret_1B596
0001D618 4290                       		clr.l	(a0)
0001D61A 42A8 0004                  		clr.l	4(a0)
0001D61E                            
0001D61E                            locret_1B596:
0001D61E 4E75                       		rts	
0001D620                            ; ===========================================================================
0001D620 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D626                            ; ===========================================================================
0001D626                            
0001D626                            SS_AniReverse:				; XREF: SS_AniIndex
0001D626 5328 0002                  		subq.b	#1,2(a0)
0001D62A 6A00                       		bpl.s	locret_1B5CC
0001D62C 117C 0007 0002             		move.b	#7,2(a0)
0001D632 7000                       		moveq	#0,d0
0001D634 1028 0003                  		move.b	3(a0),d0
0001D638 5228 0003                  		addq.b	#1,3(a0)
0001D63C 2268 0004                  		movea.l	4(a0),a1
0001D640 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D644 6600                       		bne.s	loc_1B5CA
0001D646 4290                       		clr.l	(a0)
0001D648 42A8 0004                  		clr.l	4(a0)
0001D64C 12BC 002B                  		move.b	#$2B,(a1)
0001D650 4E75                       		rts	
0001D652                            ; ===========================================================================
0001D652                            
0001D652                            loc_1B5CA:
0001D652 1280                       		move.b	d0,(a1)
0001D654                            
0001D654                            locret_1B5CC:
0001D654 4E75                       		rts	
0001D656                            ; ===========================================================================
0001D656 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D65C                            ; ===========================================================================
0001D65C                            
0001D65C                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D65C 5328 0002                  		subq.b	#1,2(a0)
0001D660 6A00                       		bpl.s	locret_1B60C
0001D662 117C 0005 0002             		move.b	#5,2(a0)
0001D668 7000                       		moveq	#0,d0
0001D66A 1028 0003                  		move.b	3(a0),d0
0001D66E 5228 0003                  		addq.b	#1,3(a0)
0001D672 2268 0004                  		movea.l	4(a0),a1
0001D676 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D67A 1280                       		move.b	d0,(a1)
0001D67C 6600                       		bne.s	locret_1B60C
0001D67E 4290                       		clr.l	(a0)
0001D680 42A8 0004                  		clr.l	4(a0)
0001D684 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D68A 303C 00A8                  		move.w	#$A8,d0
0001D68E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D694                            
0001D694                            locret_1B60C:
0001D694 4E75                       		rts	
0001D696                            ; ===========================================================================
0001D696 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D69C                            ; ===========================================================================
0001D69C                            
0001D69C                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D69C 5328 0002                  		subq.b	#1,2(a0)
0001D6A0 6A00                       		bpl.s	locret_1B640
0001D6A2 117C 0001 0002             		move.b	#1,2(a0)
0001D6A8 7000                       		moveq	#0,d0
0001D6AA 1028 0003                  		move.b	3(a0),d0
0001D6AE 5228 0003                  		addq.b	#1,3(a0)
0001D6B2 2268 0004                  		movea.l	4(a0),a1
0001D6B6 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D6BA 1280                       		move.b	d0,(a1)
0001D6BC 6600                       		bne.s	locret_1B640
0001D6BE 12A8 0004                  		move.b	4(a0),(a1)
0001D6C2 4290                       		clr.l	(a0)
0001D6C4 42A8 0004                  		clr.l	4(a0)
0001D6C8                            
0001D6C8                            locret_1B640:
0001D6C8 4E75                       		rts	
0001D6CA                            ; ===========================================================================
0001D6CA 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D6D4                            ; ---------------------------------------------------------------------------
0001D6D4                            ; Special stage	layout pointers
0001D6D4                            ; ---------------------------------------------------------------------------
0001D6D4                            SS_LayoutIndex:
0001D6D4                            	include "_inc\Special stage layout pointers.asm"
0001D6D4                            ; ---------------------------------------------------------------------------
0001D6D4                            ; Special stage	layout pointers
0001D6D4                            ; ---------------------------------------------------------------------------
0001D6D4 0000 0000                  	dc.l SS_1
0001D6D8 0000 0000                  	dc.l SS_2
0001D6DC 0000 0000                  	dc.l SS_3
0001D6E0 0000 0000                  	dc.l SS_4
0001D6E4 0000 0000                  	dc.l SS_5
0001D6E8 0000 0000                  	dc.l SS_6
0001D6EC                            	even
0001D6EC                            	even
0001D6EC                            
0001D6EC                            ; ---------------------------------------------------------------------------
0001D6EC                            ; Special stage	start locations
0001D6EC                            ; ---------------------------------------------------------------------------
0001D6EC                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D704                            		even
0001D704                            
0001D704                            ; ---------------------------------------------------------------------------
0001D704                            ; Subroutine to	load special stage layout
0001D704                            ; ---------------------------------------------------------------------------
0001D704                            
0001D704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D704                            
0001D704                            
0001D704                            SS_Load:				; XREF: SpecialStage
0001D704 7000                       		moveq	#0,d0
0001D706 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D70A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D70E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D714 6500                       		bcs.s	SS_ChkEmldNum
0001D716 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D71C                            
0001D71C                            SS_ChkEmldNum:
0001D71C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D722 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D724 7200                       		moveq	#0,d1
0001D726 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D72A 5301                       		subq.b	#1,d1
0001D72C 6500                       		bcs.s	SS_LoadData
0001D72E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D732                            
0001D732                            SS_ChkEmldLoop:	
0001D732 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D736 6600                       		bne.s	SS_ChkEmldRepeat
0001D738 60CA                       		bra.s	SS_Load
0001D73A                            ; ===========================================================================
0001D73A                            
0001D73A                            SS_ChkEmldRepeat:
0001D73A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D73E                            
0001D73E                            SS_LoadData:
0001D73E E548                       		lsl.w	#2,d0
0001D740 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D744 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D748 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D74C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D750 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D756 303C 0000                  		move.w	#0,d0
0001D75A 4EB9 0000 1724             		jsr	(EniDec).l
0001D760 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D766 303C 0FFF                  		move.w	#$FFF,d0
0001D76A                            
0001D76A                            SS_ClrRAM3:
0001D76A 4299                       		clr.l	(a1)+
0001D76C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D770                            
0001D770 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D776 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D77C 723F                       		moveq	#$3F,d1
0001D77E                            
0001D77E                            loc_1B6F6:
0001D77E 743F                       		moveq	#$3F,d2
0001D780                            
0001D780                            loc_1B6F8:
0001D780 12D8                       		move.b	(a0)+,(a1)+
0001D782 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D786                            
0001D786 43E9 0040                  		lea	$40(a1),a1
0001D78A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D78E                            
0001D78E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D794 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D79A 724D                       		moveq	#$4D,d1
0001D79C                            
0001D79C                            loc_1B714:
0001D79C 22D8                       		move.l	(a0)+,(a1)+
0001D79E 32FC 0000                  		move.w	#0,(a1)+
0001D7A2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D7A8 32D8                       		move.w	(a0)+,(a1)+
0001D7AA 51C9 FFF0                  		dbf	d1,loc_1B714
0001D7AE                            
0001D7AE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D7B4 323C 003F                  		move.w	#$3F,d1
0001D7B8                            
0001D7B8                            loc_1B730:
0001D7B8                            
0001D7B8 4299                       		clr.l	(a1)+
0001D7BA 51C9 FFFC                  		dbf	d1,loc_1B730
0001D7BE                            
0001D7BE 4E75                       		rts	
0001D7C0                            ; End of function SS_Load
0001D7C0                            
0001D7C0                            ; ===========================================================================
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Special stage	mappings and VRAM pointers
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            SS_MapIndex:
0001D7C0                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Special stage	mappings and VRAM pointers
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D7C4 0142                       	dc.w $142		; VRAM setting
0001D7C6 0000 0000                  	dc.l Map_SSWalls
0001D7CA 0142                       	dc.w $142
0001D7CC 0000 0000                  	dc.l Map_SSWalls
0001D7D0 0142                       	dc.w $142
0001D7D2 0000 0000                  	dc.l Map_SSWalls
0001D7D6 0142                       	dc.w $142
0001D7D8 0000 0000                  	dc.l Map_SSWalls
0001D7DC 0142                       	dc.w $142
0001D7DE 0000 0000                  	dc.l Map_SSWalls
0001D7E2 0142                       	dc.w $142
0001D7E4 0000 0000                  	dc.l Map_SSWalls
0001D7E8 0142                       	dc.w $142
0001D7EA 0000 0000                  	dc.l Map_SSWalls
0001D7EE 0142                       	dc.w $142
0001D7F0 0000 0000                  	dc.l Map_SSWalls
0001D7F4 0142                       	dc.w $142
0001D7F6 0000 0000                  	dc.l Map_SSWalls
0001D7FA 2142                       	dc.w $2142
0001D7FC 0000 0000                  	dc.l Map_SSWalls
0001D800 2142                       	dc.w $2142
0001D802 0000 0000                  	dc.l Map_SSWalls
0001D806 2142                       	dc.w $2142
0001D808 0000 0000                  	dc.l Map_SSWalls
0001D80C 2142                       	dc.w $2142
0001D80E 0000 0000                  	dc.l Map_SSWalls
0001D812 2142                       	dc.w $2142
0001D814 0000 0000                  	dc.l Map_SSWalls
0001D818 2142                       	dc.w $2142
0001D81A 0000 0000                  	dc.l Map_SSWalls
0001D81E 2142                       	dc.w $2142
0001D820 0000 0000                  	dc.l Map_SSWalls
0001D824 2142                       	dc.w $2142
0001D826 0000 0000                  	dc.l Map_SSWalls
0001D82A 2142                       	dc.w $2142
0001D82C 0000 0000                  	dc.l Map_SSWalls
0001D830 4142                       	dc.w $4142
0001D832 0000 0000                  	dc.l Map_SSWalls
0001D836 4142                       	dc.w $4142
0001D838 0000 0000                  	dc.l Map_SSWalls
0001D83C 4142                       	dc.w $4142
0001D83E 0000 0000                  	dc.l Map_SSWalls
0001D842 4142                       	dc.w $4142
0001D844 0000 0000                  	dc.l Map_SSWalls
0001D848 4142                       	dc.w $4142
0001D84A 0000 0000                  	dc.l Map_SSWalls
0001D84E 4142                       	dc.w $4142
0001D850 0000 0000                  	dc.l Map_SSWalls
0001D854 4142                       	dc.w $4142
0001D856 0000 0000                  	dc.l Map_SSWalls
0001D85A 4142                       	dc.w $4142
0001D85C 0000 0000                  	dc.l Map_SSWalls
0001D860 4142                       	dc.w $4142
0001D862 0000 0000                  	dc.l Map_SSWalls
0001D866 6142                       	dc.w $6142
0001D868 0000 0000                  	dc.l Map_SSWalls
0001D86C 6142                       	dc.w $6142
0001D86E 0000 0000                  	dc.l Map_SSWalls
0001D872 6142                       	dc.w $6142
0001D874 0000 0000                  	dc.l Map_SSWalls
0001D878 6142                       	dc.w $6142
0001D87A 0000 0000                  	dc.l Map_SSWalls
0001D87E 6142                       	dc.w $6142
0001D880 0000 0000                  	dc.l Map_SSWalls
0001D884 6142                       	dc.w $6142
0001D886 0000 0000                  	dc.l Map_SSWalls
0001D88A 6142                       	dc.w $6142
0001D88C 0000 0000                  	dc.l Map_SSWalls
0001D890 6142                       	dc.w $6142
0001D892 0000 0000                  	dc.l Map_SSWalls
0001D896 6142                       	dc.w $6142
0001D898 0001 05F6                  	dc.l Map_obj47
0001D89C 023B                       	dc.w $23B
0001D89E 0000 0000                  	dc.l Map_SS_R
0001D8A2 0570                       	dc.w $570
0001D8A4 0000 0000                  	dc.l Map_SS_R
0001D8A8 0251                       	dc.w $251
0001D8AA 0000 0000                  	dc.l Map_SS_R
0001D8AE 0370                       	dc.w $370
0001D8B0 0000 0000                  	dc.l Map_SS_Up
0001D8B4 0263                       	dc.w $263
0001D8B6 0000 0000                  	dc.l Map_SS_Down
0001D8BA 0263                       	dc.w $263
0001D8BC 0000 0000                  	dc.l Map_SS_R
0001D8C0 22F0                       	dc.w $22F0
0001D8C2 0000 0000                  	dc.l Map_SS_Glass
0001D8C6 0470                       	dc.w $470
0001D8C8 0000 0000                  	dc.l Map_SS_Glass
0001D8CC 05F0                       	dc.w $5F0
0001D8CE 0000 0000                  	dc.l Map_SS_Glass
0001D8D2 65F0                       	dc.w $65F0
0001D8D4 0000 0000                  	dc.l Map_SS_Glass
0001D8D8 25F0                       	dc.w $25F0
0001D8DA 0000 0000                  	dc.l Map_SS_Glass
0001D8DE 45F0                       	dc.w $45F0
0001D8E0 0000 0000                  	dc.l Map_SS_R
0001D8E4 02F0                       	dc.w $2F0
0001D8E6 0101 05F6                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D8EA 023B                       	dc.w $23B
0001D8EC 0201 05F6                  	dc.l Map_obj47+$2000000
0001D8F0 023B                       	dc.w $23B
0001D8F2 0000 0000                  	dc.l Map_SS_R
0001D8F6 0797                       	dc.w $797
0001D8F8 0000 0000                  	dc.l Map_SS_R
0001D8FC 07A0                       	dc.w $7A0
0001D8FE 0000 0000                  	dc.l Map_SS_R
0001D902 07A9                       	dc.w $7A9
0001D904 0000 0000                  	dc.l Map_SS_R
0001D908 0797                       	dc.w $797
0001D90A 0000 0000                  	dc.l Map_SS_R
0001D90E 07A0                       	dc.w $7A0
0001D910 0000 0000                  	dc.l Map_SS_R
0001D914 07A9                       	dc.w $7A9
0001D916 0000 B9AE                  	dc.l Map_obj25
0001D91A 27B2                       	dc.w $27B2
0001D91C 0000 0000                  	dc.l Map_SS_Chaos3
0001D920 0770                       	dc.w $770
0001D922 0000 0000                  	dc.l Map_SS_Chaos3
0001D926 2770                       	dc.w $2770
0001D928 0000 0000                  	dc.l Map_SS_Chaos3
0001D92C 4770                       	dc.w $4770
0001D92E 0000 0000                  	dc.l Map_SS_Chaos3
0001D932 6770                       	dc.w $6770
0001D934 0000 0000                  	dc.l Map_SS_Chaos1
0001D938 0770                       	dc.w $770
0001D93A 0000 0000                  	dc.l Map_SS_Chaos2
0001D93E 0770                       	dc.w $770
0001D940 0000 0000                  	dc.l Map_SS_R
0001D944 04F0                       	dc.w $4F0
0001D946 0400 B9AE                  	dc.l Map_obj25+$4000000
0001D94A 27B2                       	dc.w $27B2
0001D94C 0500 B9AE                  	dc.l Map_obj25+$5000000
0001D950 27B2                       	dc.w $27B2
0001D952 0600 B9AE                  	dc.l Map_obj25+$6000000
0001D956 27B2                       	dc.w $27B2
0001D958 0700 B9AE                  	dc.l Map_obj25+$7000000
0001D95C 27B2                       	dc.w $27B2
0001D95E 0000 0000                  	dc.l Map_SS_Glass
0001D962 23F0                       	dc.w $23F0
0001D964 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D968 23F0                       	dc.w $23F0
0001D96A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D96E 23F0                       	dc.w $23F0
0001D970 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D974 23F0                       	dc.w $23F0
0001D976 0000 0000                  	dc.l Map_SS_R+$2000000
0001D97A 04F0                       	dc.w $4F0
0001D97C 0000 0000                  	dc.l Map_SS_Glass
0001D980 05F0                       	dc.w $5F0
0001D982 0000 0000                  	dc.l Map_SS_Glass
0001D986 65F0                       	dc.w $65F0
0001D988 0000 0000                  	dc.l Map_SS_Glass
0001D98C 25F0                       	dc.w $25F0
0001D98E 0000 0000                  	dc.l Map_SS_Glass
0001D992 45F0                       	dc.w $45F0
0001D992 45F0                       	dc.w $45F0
0001D994                            
0001D994                            ; ---------------------------------------------------------------------------
0001D994                            ; Sprite mappings - special stage "R" block
0001D994                            ; ---------------------------------------------------------------------------
0001D994                            Map_SS_R:
0001D994                            	include "_maps\SSRblock.asm"
0001D994                            ; ---------------------------------------------------------------------------
0001D994                            ; Sprite mappings - special stage "R" block
0001D994                            ; ---------------------------------------------------------------------------
0001D994 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D998 0000                       		dc.w byte_1B91E-Map_SS_R
0001D99A 01                         byte_1B912:	dc.b 1
0001D99B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D9A0 01                         byte_1B918:	dc.b 1
0001D9A1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D9A6 00                         byte_1B91E:	dc.b 0
0001D9A8 00                         		even
0001D9A8 00                         		even
0001D9A8                            
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            Map_SS_Glass:
0001D9A8                            	include "_maps\SSglassblock.asm"
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D9AC 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D9B0 01                         byte_1B928:	dc.b 1
0001D9B1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D9B6 01                         byte_1B92E:	dc.b 1
0001D9B7 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D9BC 01                         byte_1B934:	dc.b 1
0001D9BD F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D9C2 01                         byte_1B93A:	dc.b 1
0001D9C3 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D9C8                            		even
0001D9C8                            		even
0001D9C8                            
0001D9C8                            ; ---------------------------------------------------------------------------
0001D9C8                            ; Sprite mappings - special stage "UP" block
0001D9C8                            ; ---------------------------------------------------------------------------
0001D9C8                            Map_SS_Up:
0001D9C8                            	include "_maps\SSUPblock.asm"
0001D9C8                            ; ---------------------------------------------------------------------------
0001D9C8                            ; Sprite mappings - special stage "UP" block
0001D9C8                            ; ---------------------------------------------------------------------------
0001D9C8 0000                       		dc.w byte_1B944-Map_SS_Up
0001D9CA 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D9CC 01                         byte_1B944:	dc.b 1
0001D9CD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D9D2 01                         byte_1B94A:	dc.b 1
0001D9D3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D9D8                            		even
0001D9D8                            		even
0001D9D8                            
0001D9D8                            ; ---------------------------------------------------------------------------
0001D9D8                            ; Sprite mappings - special stage "DOWN" block
0001D9D8                            ; ---------------------------------------------------------------------------
0001D9D8                            Map_SS_Down:
0001D9D8                            	include "_maps\SSDOWNblock.asm"
0001D9D8                            ; ---------------------------------------------------------------------------
0001D9D8                            ; Sprite mappings - special stage "DOWN" block
0001D9D8                            ; ---------------------------------------------------------------------------
0001D9D8 0000                       		dc.w byte_1B954-Map_SS_Down
0001D9DA 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D9DC 01                         byte_1B954:	dc.b 1
0001D9DD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D9E2 01                         byte_1B95A:	dc.b 1
0001D9E3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D9E8                            		even
0001D9E8                            		even
0001D9E8                            
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            ; Sprite mappings - special stage chaos	emeralds
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D9EA 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D9EC 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D9EE 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D9F0 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D9F2 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D9F4 01                         byte_1B96C:	dc.b 1
0001D9F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D9FA 01                         byte_1B972:	dc.b 1
0001D9FB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DA00 01                         byte_1B978:	dc.b 1
0001DA01 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DA06 01                         byte_1B97E:	dc.b 1
0001DA07 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DA0C                            		even
0001DA0C                            ; ===========================================================================
0001DA0C                            ; ---------------------------------------------------------------------------
0001DA0C                            ; Object 09 - Sonic (special stage)
0001DA0C                            ; ---------------------------------------------------------------------------
0001DA0C                            
0001DA0C                            Obj09:					; XREF: Obj_Index
0001DA0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DA10 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DA12 6100 0000                  		bsr.w	SS_FixCamera
0001DA16 6000 0000                  		bra.w	DebugMode
0001DA1A                            ; ===========================================================================
0001DA1A                            
0001DA1A                            Obj09_Normal:
0001DA1A 7000                       		moveq	#0,d0
0001DA1C 1028 0024                  		move.b	$24(a0),d0
0001DA20 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DA24 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DA28                            ; ===========================================================================
0001DA28 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DA2A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DA2C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DA2E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DA30                            ; ===========================================================================
0001DA30                            
0001DA30                            Obj09_Main:				; XREF: Obj09_Index
0001DA30 5428 0024                  		addq.b	#2,$24(a0)
0001DA34 117C 000E 0016             		move.b	#$E,$16(a0)
0001DA3A 117C 0007 0017             		move.b	#7,$17(a0)
0001DA40 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DA48 317C 0780 0002             		move.w	#$780,2(a0)
0001DA4E 117C 0004 0001             		move.b	#4,1(a0)
0001DA54 117C 0000 0018             		move.b	#0,$18(a0)
0001DA5A 117C 0018 001C             		move.b	#$18,$1C(a0)
0001DA60 08E8 0002 0022             		bset	#2,$22(a0)
0001DA66 08E8 0001 0022             		bset	#1,$22(a0)
0001DA6C                            
0001DA6C                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DA6C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DA70 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA72 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA78 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA7A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DA80                            
0001DA80                            Obj09_NoDebug:
0001DA80 117C 0000 0030             		move.b	#0,$30(a0)
0001DA86 7000                       		moveq	#0,d0
0001DA88 1028 0022                  		move.b	$22(a0),d0
0001DA8C 0240 0002                  		andi.w	#2,d0
0001DA90 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DA94 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DA98 4EB9 0001 5A12             		jsr	LoadSonicDynPLC
0001DA9E 4EF9 0000 F0E4             		jmp	DisplaySprite
0001DAA4                            ; ===========================================================================
0001DAA4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DAA6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DAA8                            ; ===========================================================================
0001DAA8                            
0001DAA8                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DAA8 6100 0000                  		bsr.w	Obj09_Jump
0001DAAC 6100 0000                  		bsr.w	Obj09_Move
0001DAB0 6100 0000                  		bsr.w	Obj09_Fall
0001DAB4 6000                       		bra.s	Obj09_Display
0001DAB6                            ; ===========================================================================
0001DAB6                            
0001DAB6                            Obj09_InAir:				; XREF: Obj09_Modes
0001DAB6 6100 0000                  		bsr.w	nullsub_2
0001DABA 6100 0000                  		bsr.w	Obj09_Move
0001DABE 6100 0000                  		bsr.w	Obj09_Fall
0001DAC2                            
0001DAC2                            Obj09_Display:				; XREF: Obj09_OnWall
0001DAC2 6100 0000                  		bsr.w	Obj09_ChkItems
0001DAC6 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DACA 4EB9 0000 F0CA             		jsr	SpeedToPos
0001DAD0 6100 0000                  		bsr.w	SS_FixCamera
0001DAD4 3038 F780                  		move.w	($FFFFF780).w,d0
0001DAD8 D078 F782                  		add.w	($FFFFF782).w,d0
0001DADC 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DAE0 4EB9 0001 57CE             		jsr	Sonic_Animate
0001DAE6 4E75                       		rts	
0001DAE8                            
0001DAE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAE8                            
0001DAE8                            
0001DAE8                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DAE8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DAEE 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DAF0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DAF4                            
0001DAF4                            Obj09_ChkRight:
0001DAF4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DAFA 6700                       		beq.s	loc_1BA78	; if not, branch
0001DAFC 6100 0000                  		bsr.w	Obj09_MoveRight
0001DB00                            
0001DB00                            loc_1BA78:
0001DB00 1038 F602                  		move.b	($FFFFF602).w,d0
0001DB04 0200 000C                  		andi.b	#$C,d0
0001DB08 6600                       		bne.s	loc_1BAA8
0001DB0A 3028 0014                  		move.w	$14(a0),d0
0001DB0E 6700                       		beq.s	loc_1BAA8
0001DB10 6B00                       		bmi.s	loc_1BA9A
0001DB12 0440 000C                  		subi.w	#$C,d0
0001DB16 6400                       		bcc.s	loc_1BA94
0001DB18 303C 0000                  		move.w	#0,d0
0001DB1C                            
0001DB1C                            loc_1BA94:
0001DB1C 3140 0014                  		move.w	d0,$14(a0)
0001DB20 6000                       		bra.s	loc_1BAA8
0001DB22                            ; ===========================================================================
0001DB22                            
0001DB22                            loc_1BA9A:
0001DB22 0640 000C                  		addi.w	#$C,d0
0001DB26 6400                       		bcc.s	loc_1BAA4
0001DB28 303C 0000                  		move.w	#0,d0
0001DB2C                            
0001DB2C                            loc_1BAA4:
0001DB2C 3140 0014                  		move.w	d0,$14(a0)
0001DB30                            
0001DB30                            loc_1BAA8:
0001DB30 1038 F780                  		move.b	($FFFFF780).w,d0
0001DB34 0600 0020                  		addi.b	#$20,d0
0001DB38 0200 00C0                  		andi.b	#$C0,d0
0001DB3C 4400                       		neg.b	d0
0001DB3E 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DB44 C3E8 0014                  		muls.w	$14(a0),d1
0001DB48 D3A8 0008                  		add.l	d1,8(a0)
0001DB4C C1E8 0014                  		muls.w	$14(a0),d0
0001DB50 D1A8 000C                  		add.l	d0,$C(a0)
0001DB54 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DB58 2428 000C                  		move.l	$C(a0),d2
0001DB5C 2628 0008                  		move.l	8(a0),d3
0001DB60 6100 0000                  		bsr.w	sub_1BCE8
0001DB64 6700                       		beq.s	loc_1BAF2
0001DB66 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB6A 93A8 0008                  		sub.l	d1,8(a0)
0001DB6E 91A8 000C                  		sub.l	d0,$C(a0)
0001DB72 317C 0000 0014             		move.w	#0,$14(a0)
0001DB78 4E75                       		rts	
0001DB7A                            ; ===========================================================================
0001DB7A                            
0001DB7A                            loc_1BAF2:
0001DB7A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB7E 4E75                       		rts	
0001DB80                            ; End of function Obj09_Move
0001DB80                            
0001DB80                            
0001DB80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB80                            
0001DB80                            
0001DB80                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DB80 08E8 0000 0022             		bset	#0,$22(a0)
0001DB86 3028 0014                  		move.w	$14(a0),d0
0001DB8A 6700                       		beq.s	loc_1BB06
0001DB8C 6A00                       		bpl.s	loc_1BB1A
0001DB8E                            
0001DB8E                            loc_1BB06:
0001DB8E 0440 000C                  		subi.w	#$C,d0
0001DB92 0C40 F800                  		cmpi.w	#-$800,d0
0001DB96 6E00                       		bgt.s	loc_1BB14
0001DB98 303C F800                  		move.w	#-$800,d0
0001DB9C                            
0001DB9C                            loc_1BB14:
0001DB9C 3140 0014                  		move.w	d0,$14(a0)
0001DBA0 4E75                       		rts	
0001DBA2                            ; ===========================================================================
0001DBA2                            
0001DBA2                            loc_1BB1A:
0001DBA2 0440 0040                  		subi.w	#$40,d0
0001DBA6 6400                       		bcc.s	loc_1BB22
0001DBA8 4E71                       		nop	
0001DBAA                            
0001DBAA                            loc_1BB22:
0001DBAA 3140 0014                  		move.w	d0,$14(a0)
0001DBAE 4E75                       		rts	
0001DBB0                            ; End of function Obj09_MoveLeft
0001DBB0                            
0001DBB0                            
0001DBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBB0                            
0001DBB0                            
0001DBB0                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DBB0 08A8 0000 0022             		bclr	#0,$22(a0)
0001DBB6 3028 0014                  		move.w	$14(a0),d0
0001DBBA 6B00                       		bmi.s	loc_1BB48
0001DBBC 0640 000C                  		addi.w	#$C,d0
0001DBC0 0C40 0800                  		cmpi.w	#$800,d0
0001DBC4 6D00                       		blt.s	loc_1BB42
0001DBC6 303C 0800                  		move.w	#$800,d0
0001DBCA                            
0001DBCA                            loc_1BB42:
0001DBCA 3140 0014                  		move.w	d0,$14(a0)
0001DBCE 6000                       		bra.s	locret_1BB54
0001DBD0                            ; ===========================================================================
0001DBD0                            
0001DBD0                            loc_1BB48:
0001DBD0 0640 0040                  		addi.w	#$40,d0
0001DBD4 6400                       		bcc.s	loc_1BB50
0001DBD6 4E71                       		nop	
0001DBD8                            
0001DBD8                            loc_1BB50:
0001DBD8 3140 0014                  		move.w	d0,$14(a0)
0001DBDC                            
0001DBDC                            locret_1BB54:
0001DBDC 4E75                       		rts	
0001DBDE                            ; End of function Obj09_MoveRight
0001DBDE                            
0001DBDE                            
0001DBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBDE                            
0001DBDE                            
0001DBDE                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DBDE 1038 F603                  		move.b	($FFFFF603).w,d0
0001DBE2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DBE6 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DBE8 1038 F780                  		move.b	($FFFFF780).w,d0
0001DBEC 0200 00FC                  		andi.b	#$FC,d0
0001DBF0 4400                       		neg.b	d0
0001DBF2 0400 0040                  		subi.b	#$40,d0
0001DBF6 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DBFC C3FC 0680                  		muls.w	#$680,d1
0001DC00 E081                       		asr.l	#8,d1
0001DC02 3141 0010                  		move.w	d1,$10(a0)
0001DC06 C1FC 0680                  		muls.w	#$680,d0
0001DC0A E080                       		asr.l	#8,d0
0001DC0C 3140 0012                  		move.w	d0,$12(a0)
0001DC10 08E8 0001 0022             		bset	#1,$22(a0)
0001DC16 303C 00A0                  		move.w	#$A0,d0
0001DC1A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DC20                            
0001DC20                            Obj09_NoJump:
0001DC20 4E75                       		rts	
0001DC22                            ; End of function Obj09_Jump
0001DC22                            
0001DC22                            
0001DC22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC22                            
0001DC22                            
0001DC22                            nullsub_2:				; XREF: Obj09_InAir
0001DC22 4E75                       		rts	
0001DC24                            ; End of function nullsub_2
0001DC24                            
0001DC24                            ; ===========================================================================
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; unused subroutine to limit Sonic's upward vertical speed
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24 323C FC00                  		move.w	#-$400,d1
0001DC28 B268 0012                  		cmp.w	$12(a0),d1
0001DC2C 6F00                       		ble.s	locret_1BBB4
0001DC2E 1038 F602                  		move.b	($FFFFF602).w,d0
0001DC32 0200 0070                  		andi.b	#$70,d0
0001DC36 6600                       		bne.s	locret_1BBB4
0001DC38 3141 0012                  		move.w	d1,$12(a0)
0001DC3C                            
0001DC3C                            locret_1BBB4:
0001DC3C 4E75                       		rts	
0001DC3E                            ; ---------------------------------------------------------------------------
0001DC3E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DC3E                            ; ---------------------------------------------------------------------------
0001DC3E                            
0001DC3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC3E                            
0001DC3E                            
0001DC3E                            SS_FixCamera:				; XREF: Obj09
0001DC3E 3428 000C                  		move.w	$C(a0),d2
0001DC42 3628 0008                  		move.w	8(a0),d3
0001DC46 3038 F700                  		move.w	($FFFFF700).w,d0
0001DC4A 0443 00A0                  		subi.w	#$A0,d3
0001DC4E 6500                       		bcs.s	loc_1BBCE
0001DC50 9043                       		sub.w	d3,d0
0001DC52 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DC56                            
0001DC56                            loc_1BBCE:
0001DC56 3038 F704                  		move.w	($FFFFF704).w,d0
0001DC5A 0442 0070                  		subi.w	#$70,d2
0001DC5E 6500                       		bcs.s	locret_1BBDE
0001DC60 9042                       		sub.w	d2,d0
0001DC62 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DC66                            
0001DC66                            locret_1BBDE:
0001DC66 4E75                       		rts	
0001DC68                            ; End of function SS_FixCamera
0001DC68                            
0001DC68                            ; ===========================================================================
0001DC68                            
0001DC68                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DC68 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DC6E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DC74 6600                       		bne.s	loc_1BBF4
0001DC76 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DC7C                            
0001DC7C                            loc_1BBF4:
0001DC7C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DC82 6D00                       		blt.s	loc_1BC12
0001DC84 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DC8A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DC90 5428 0024                  		addq.b	#2,$24(a0)
0001DC94 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DC9A                            
0001DC9A                            loc_1BC12:
0001DC9A 3038 F780                  		move.w	($FFFFF780).w,d0
0001DC9E D078 F782                  		add.w	($FFFFF782).w,d0
0001DCA2 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DCA6 4EB9 0001 57CE             		jsr	Sonic_Animate
0001DCAC 4EB9 0001 5A12             		jsr	LoadSonicDynPLC
0001DCB2 6100 FF8A                  		bsr.w	SS_FixCamera
0001DCB6 4EF9 0000 F0E4             		jmp	DisplaySprite
0001DCBC                            ; ===========================================================================
0001DCBC                            
0001DCBC                            Obj09_Exit2:				; XREF: Obj09_Index
0001DCBC 5368 0038                  		subq.w	#1,$38(a0)
0001DCC0 6600                       		bne.s	loc_1BC40
0001DCC2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DCC8                            
0001DCC8                            loc_1BC40:
0001DCC8 4EB9 0001 57CE             		jsr	Sonic_Animate
0001DCCE 4EB9 0001 5A12             		jsr	LoadSonicDynPLC
0001DCD4 6100 FF68                  		bsr.w	SS_FixCamera
0001DCD8 4EF9 0000 F0E4             		jmp	DisplaySprite
0001DCDE                            
0001DCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCDE                            
0001DCDE                            
0001DCDE                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DCDE 2428 000C                  		move.l	$C(a0),d2
0001DCE2 2628 0008                  		move.l	8(a0),d3
0001DCE6 1038 F780                  		move.b	($FFFFF780).w,d0
0001DCEA 0200 00FC                  		andi.b	#$FC,d0
0001DCEE 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DCF4 3828 0010                  		move.w	$10(a0),d4
0001DCF8 48C4                       		ext.l	d4
0001DCFA E184                       		asl.l	#8,d4
0001DCFC C1FC 002A                  		muls.w	#$2A,d0
0001DD00 D084                       		add.l	d4,d0
0001DD02 3828 0012                  		move.w	$12(a0),d4
0001DD06 48C4                       		ext.l	d4
0001DD08 E184                       		asl.l	#8,d4
0001DD0A C3FC 002A                  		muls.w	#$2A,d1
0001DD0E D284                       		add.l	d4,d1
0001DD10 D680                       		add.l	d0,d3
0001DD12 6100 0000                  		bsr.w	sub_1BCE8
0001DD16 6700                       		beq.s	loc_1BCB0
0001DD18 9680                       		sub.l	d0,d3
0001DD1A 7000                       		moveq	#0,d0
0001DD1C 3140 0010                  		move.w	d0,$10(a0)
0001DD20 08A8 0001 0022             		bclr	#1,$22(a0)
0001DD26 D481                       		add.l	d1,d2
0001DD28 6100 0000                  		bsr.w	sub_1BCE8
0001DD2C 6700                       		beq.s	loc_1BCC6
0001DD2E 9481                       		sub.l	d1,d2
0001DD30 7200                       		moveq	#0,d1
0001DD32 3141 0012                  		move.w	d1,$12(a0)
0001DD36 4E75                       		rts	
0001DD38                            ; ===========================================================================
0001DD38                            
0001DD38                            loc_1BCB0:
0001DD38 D481                       		add.l	d1,d2
0001DD3A 6100 0000                  		bsr.w	sub_1BCE8
0001DD3E 6700                       		beq.s	loc_1BCD4
0001DD40 9481                       		sub.l	d1,d2
0001DD42 7200                       		moveq	#0,d1
0001DD44 3141 0012                  		move.w	d1,$12(a0)
0001DD48 08A8 0001 0022             		bclr	#1,$22(a0)
0001DD4E                            
0001DD4E                            loc_1BCC6:
0001DD4E E080                       		asr.l	#8,d0
0001DD50 E081                       		asr.l	#8,d1
0001DD52 3140 0010                  		move.w	d0,$10(a0)
0001DD56 3141 0012                  		move.w	d1,$12(a0)
0001DD5A 4E75                       		rts	
0001DD5C                            ; ===========================================================================
0001DD5C                            
0001DD5C                            loc_1BCD4:
0001DD5C E080                       		asr.l	#8,d0
0001DD5E E081                       		asr.l	#8,d1
0001DD60 3140 0010                  		move.w	d0,$10(a0)
0001DD64 3141 0012                  		move.w	d1,$12(a0)
0001DD68 08E8 0001 0022             		bset	#1,$22(a0)
0001DD6E 4E75                       		rts	
0001DD70                            ; End of function Obj09_Fall
0001DD70                            
0001DD70                            
0001DD70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD70                            
0001DD70                            
0001DD70                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DD70 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DD76 7800                       		moveq	#0,d4
0001DD78 4842                       		swap	d2
0001DD7A 3802                       		move.w	d2,d4
0001DD7C 4842                       		swap	d2
0001DD7E 0644 0044                  		addi.w	#$44,d4
0001DD82 88FC 0018                  		divu.w	#$18,d4
0001DD86 C8FC 0080                  		mulu.w	#$80,d4
0001DD8A D3C4                       		adda.l	d4,a1
0001DD8C 7800                       		moveq	#0,d4
0001DD8E 4843                       		swap	d3
0001DD90 3803                       		move.w	d3,d4
0001DD92 4843                       		swap	d3
0001DD94 0644 0014                  		addi.w	#$14,d4
0001DD98 88FC 0018                  		divu.w	#$18,d4
0001DD9C D2C4                       		adda.w	d4,a1
0001DD9E 7A00                       		moveq	#0,d5
0001DDA0 1819                       		move.b	(a1)+,d4
0001DDA2 6100                       		bsr.s	sub_1BD30
0001DDA4 1819                       		move.b	(a1)+,d4
0001DDA6 6100                       		bsr.s	sub_1BD30
0001DDA8 D2FC 007E                  		adda.w	#$7E,a1
0001DDAC 1819                       		move.b	(a1)+,d4
0001DDAE 6100                       		bsr.s	sub_1BD30
0001DDB0 1819                       		move.b	(a1)+,d4
0001DDB2 6100                       		bsr.s	sub_1BD30
0001DDB4 4A05                       		tst.b	d5
0001DDB6 4E75                       		rts	
0001DDB8                            ; End of function sub_1BCE8
0001DDB8                            
0001DDB8                            
0001DDB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDB8                            
0001DDB8                            
0001DDB8                            sub_1BD30:				; XREF: sub_1BCE8
0001DDB8 6700                       		beq.s	locret_1BD44
0001DDBA 0C04 0028                  		cmpi.b	#$28,d4
0001DDBE 6700                       		beq.s	locret_1BD44
0001DDC0 0C04 003A                  		cmpi.b	#$3A,d4
0001DDC4 6500                       		bcs.s	loc_1BD46
0001DDC6 0C04 004B                  		cmpi.b	#$4B,d4
0001DDCA 6400                       		bcc.s	loc_1BD46
0001DDCC                            
0001DDCC                            locret_1BD44:
0001DDCC 4E75                       		rts	
0001DDCE                            ; ===========================================================================
0001DDCE                            
0001DDCE                            loc_1BD46:
0001DDCE 1144 0030                  		move.b	d4,$30(a0)
0001DDD2 2149 0032                  		move.l	a1,$32(a0)
0001DDD6 7AFF                       		moveq	#-1,d5
0001DDD8 4E75                       		rts	
0001DDDA                            ; End of function sub_1BD30
0001DDDA                            
0001DDDA                            
0001DDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDDA                            
0001DDDA                            
0001DDDA                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DDDA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DDE0 7800                       		moveq	#0,d4
0001DDE2 3828 000C                  		move.w	$C(a0),d4
0001DDE6 0644 0050                  		addi.w	#$50,d4
0001DDEA 88FC 0018                  		divu.w	#$18,d4
0001DDEE C8FC 0080                  		mulu.w	#$80,d4
0001DDF2 D3C4                       		adda.l	d4,a1
0001DDF4 7800                       		moveq	#0,d4
0001DDF6 3828 0008                  		move.w	8(a0),d4
0001DDFA 0644 0020                  		addi.w	#$20,d4
0001DDFE 88FC 0018                  		divu.w	#$18,d4
0001DE02 D2C4                       		adda.w	d4,a1
0001DE04 1811                       		move.b	(a1),d4
0001DE06 6600                       		bne.s	Obj09_ChkCont
0001DE08 4A28 003A                  		tst.b	$3A(a0)
0001DE0C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DE10 7800                       		moveq	#0,d4
0001DE12 4E75                       		rts	
0001DE14                            ; ===========================================================================
0001DE14                            
0001DE14                            Obj09_ChkCont:
0001DE14 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DE18 6600                       		bne.s	Obj09_Chk1Up
0001DE1A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DE1E 6600                       		bne.s	Obj09_GetCont
0001DE20 14BC 0001                  		move.b	#1,(a2)
0001DE24 2549 0004                  		move.l	a1,4(a2)
0001DE28                            
0001DE28                            Obj09_GetCont:
0001DE28 4EB9 0000 B64A             		jsr	CollectRing
0001DE2E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DE34 6500                       		bcs.s	Obj09_NoCont
0001DE36 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DE3C 6600                       		bne.s	Obj09_NoCont
0001DE3E 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DE42 303C 00BF                  		move.w	#$BF,d0
0001DE46 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra continue sound
0001DE4C                            
0001DE4C                            Obj09_NoCont:
0001DE4C 7800                       		moveq	#0,d4
0001DE4E 4E75                       		rts	
0001DE50                            ; ===========================================================================
0001DE50                            
0001DE50                            Obj09_Chk1Up:
0001DE50 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DE54 6600                       		bne.s	Obj09_ChkEmer
0001DE56 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001DE5A 6600                       		bne.s	Obj09_Get1Up
0001DE5C 14BC 0003                  		move.b	#3,(a2)
0001DE60 2549 0004                  		move.l	a1,4(a2)
0001DE64                            
0001DE64                            Obj09_Get1Up:
0001DE64 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DE68 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DE6C 303C 0088                  		move.w	#$88,d0
0001DE70 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra life music
0001DE76 7800                       		moveq	#0,d4
0001DE78 4E75                       		rts	
0001DE7A                            ; ===========================================================================
0001DE7A                            
0001DE7A                            Obj09_ChkEmer:
0001DE7A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DE7E 6500                       		bcs.s	Obj09_ChkGhost
0001DE80 0C04 0040                  		cmpi.b	#$40,d4
0001DE84 6200                       		bhi.s	Obj09_ChkGhost
0001DE86 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001DE8A 6600                       		bne.s	Obj09_GetEmer
0001DE8C 14BC 0005                  		move.b	#5,(a2)
0001DE90 2549 0004                  		move.l	a1,4(a2)
0001DE94                            
0001DE94                            Obj09_GetEmer:
0001DE94 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DE9A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DE9C 0404 003B                  		subi.b	#$3B,d4
0001DEA0 7000                       		moveq	#0,d0
0001DEA2 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DEA6 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DEAA 1584 0000                  		move.b	d4,(a2,d0.w)
0001DEAE 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DEB2                            
0001DEB2                            Obj09_NoEmer:
0001DEB2 303C 0093                  		move.w	#$93,d0
0001DEB6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play emerald music
0001DEBC 7800                       		moveq	#0,d4
0001DEBE 4E75                       		rts	
0001DEC0                            ; ===========================================================================
0001DEC0                            
0001DEC0                            Obj09_ChkGhost:
0001DEC0 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DEC4 6600                       		bne.s	Obj09_ChkGhostTag
0001DEC6 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DECC                            
0001DECC                            Obj09_ChkGhostTag:
0001DECC 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DED0 6600                       		bne.s	Obj09_NoGhost
0001DED2 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DED8 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DEDA 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DEE0                            
0001DEE0                            Obj09_NoGhost:
0001DEE0 78FF                       		moveq	#-1,d4
0001DEE2 4E75                       		rts	
0001DEE4                            ; ===========================================================================
0001DEE4                            
0001DEE4                            Obj09_MakeGhostSolid:
0001DEE4 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DEEA 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DEEC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DEF2 723F                       		moveq	#$3F,d1
0001DEF4                            
0001DEF4                            Obj09_GhostLoop2:
0001DEF4 743F                       		moveq	#$3F,d2
0001DEF6                            
0001DEF6                            Obj09_GhostLoop:
0001DEF6 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DEFA 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DEFC 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DF00                            
0001DF00                            Obj09_NoReplace:
0001DF00 5249                       		addq.w	#1,a1
0001DF02 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DF06 43E9 0040                  		lea	$40(a1),a1
0001DF0A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DF0E                            
0001DF0E                            Obj09_GhostNotSolid:
0001DF0E 4228 003A                  		clr.b	$3A(a0)
0001DF12 7800                       		moveq	#0,d4
0001DF14 4E75                       		rts	
0001DF16                            ; End of function Obj09_ChkItems
0001DF16                            
0001DF16                            
0001DF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF16                            
0001DF16                            
0001DF16                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DF16 1028 0030                  		move.b	$30(a0),d0
0001DF1A 6600                       		bne.s	Obj09_ChkBumper
0001DF1C 5328 0036                  		subq.b	#1,$36(a0)
0001DF20 6A00                       		bpl.s	loc_1BEA0
0001DF22 117C 0000 0036             		move.b	#0,$36(a0)
0001DF28                            
0001DF28                            loc_1BEA0:
0001DF28 5328 0037                  		subq.b	#1,$37(a0)
0001DF2C 6A00                       		bpl.s	locret_1BEAC
0001DF2E 117C 0000 0037             		move.b	#0,$37(a0)
0001DF34                            
0001DF34                            locret_1BEAC:
0001DF34 4E75                       		rts	
0001DF36                            ; ===========================================================================
0001DF36                            
0001DF36                            Obj09_ChkBumper:
0001DF36 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DF3A 6600                       		bne.s	Obj09_GOAL
0001DF3C 2228 0032                  		move.l	$32(a0),d1
0001DF40 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DF46 3401                       		move.w	d1,d2
0001DF48 0241 007F                  		andi.w	#$7F,d1
0001DF4C C2FC 0018                  		mulu.w	#$18,d1
0001DF50 0441 0014                  		subi.w	#$14,d1
0001DF54 EE4A                       		lsr.w	#7,d2
0001DF56 0242 007F                  		andi.w	#$7F,d2
0001DF5A C4FC 0018                  		mulu.w	#$18,d2
0001DF5E 0442 0044                  		subi.w	#$44,d2
0001DF62 9268 0008                  		sub.w	8(a0),d1
0001DF66 9468 000C                  		sub.w	$C(a0),d2
0001DF6A 4EB9 0000 2E48             		jsr	(CalcAngle).l
0001DF70 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DF76 C3FC F900                  		muls.w	#-$700,d1
0001DF7A E081                       		asr.l	#8,d1
0001DF7C 3141 0010                  		move.w	d1,$10(a0)
0001DF80 C1FC F900                  		muls.w	#-$700,d0
0001DF84 E080                       		asr.l	#8,d0
0001DF86 3140 0012                  		move.w	d0,$12(a0)
0001DF8A 08E8 0001 0022             		bset	#1,$22(a0)
0001DF90 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001DF94 6600                       		bne.s	Obj09_BumpSnd
0001DF96 14BC 0002                  		move.b	#2,(a2)
0001DF9A 2028 0032                  		move.l	$32(a0),d0
0001DF9E 5380                       		subq.l	#1,d0
0001DFA0 2540 0004                  		move.l	d0,4(a2)
0001DFA4                            
0001DFA4                            Obj09_BumpSnd:
0001DFA4 303C 00B4                  		move.w	#$B4,d0
0001DFA8 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play bumper sound
0001DFAE                            ; ===========================================================================
0001DFAE                            
0001DFAE                            Obj09_GOAL:
0001DFAE 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001DFB2 6600                       		bne.s	Obj09_UPblock
0001DFB4 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001DFB8 303C 00A8                  		move.w	#$A8,d0		; change item
0001DFBC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001DFC2 4E75                       		rts	
0001DFC4                            ; ===========================================================================
0001DFC4                            
0001DFC4                            Obj09_UPblock:
0001DFC4 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001DFC8 6600                       		bne.s	Obj09_DOWNblock
0001DFCA 4A28 0036                  		tst.b	$36(a0)
0001DFCE 6600 0000                  		bne.w	Obj09_NoGlass
0001DFD2 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DFD8 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DFDE 6700                       		beq.s	Obj09_UPsnd
0001DFE0 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001DFE4 2268 0032                  		movea.l	$32(a0),a1
0001DFE8 5389                       		subq.l	#1,a1
0001DFEA 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001DFEE                            
0001DFEE                            Obj09_UPsnd:
0001DFEE 303C 00A9                  		move.w	#$A9,d0
0001DFF2 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DFF8                            ; ===========================================================================
0001DFF8                            
0001DFF8                            Obj09_DOWNblock:
0001DFF8 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001DFFC 6600                       		bne.s	Obj09_Rblock
0001DFFE 4A28 0036                  		tst.b	$36(a0)
0001E002 6600 0000                  		bne.w	Obj09_NoGlass
0001E006 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E00C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E012 6600                       		bne.s	Obj09_DOWNsnd
0001E014 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E018 2268 0032                  		movea.l	$32(a0),a1
0001E01C 5389                       		subq.l	#1,a1
0001E01E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E022                            
0001E022                            Obj09_DOWNsnd:
0001E022 303C 00A9                  		move.w	#$A9,d0
0001E026 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E02C                            ; ===========================================================================
0001E02C                            
0001E02C                            Obj09_Rblock:
0001E02C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E030 6600                       		bne.s	Obj09_ChkGlass
0001E032 4A28 0037                  		tst.b	$37(a0)
0001E036 6600 0000                  		bne.w	Obj09_NoGlass
0001E03A 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E040 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001E044 6600                       		bne.s	Obj09_RevStage
0001E046 14BC 0004                  		move.b	#4,(a2)
0001E04A 2028 0032                  		move.l	$32(a0),d0
0001E04E 5380                       		subq.l	#1,d0
0001E050 2540 0004                  		move.l	d0,4(a2)
0001E054                            
0001E054                            Obj09_RevStage:
0001E054 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E058 303C 00A9                  		move.w	#$A9,d0
0001E05C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play sound
0001E062                            ; ===========================================================================
0001E062                            
0001E062                            Obj09_ChkGlass:
0001E062 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E066 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E068 0C00 002E                  		cmpi.b	#$2E,d0
0001E06C 6700                       		beq.s	Obj09_Glass
0001E06E 0C00 002F                  		cmpi.b	#$2F,d0
0001E072 6700                       		beq.s	Obj09_Glass
0001E074 0C00 0030                  		cmpi.b	#$30,d0
0001E078 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001E07A                            
0001E07A                            Obj09_Glass:
0001E07A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001E07E 6600                       		bne.s	Obj09_GlassSnd
0001E080 14BC 0006                  		move.b	#6,(a2)
0001E084 2268 0032                  		movea.l	$32(a0),a1
0001E088 5389                       		subq.l	#1,a1
0001E08A 2549 0004                  		move.l	a1,4(a2)
0001E08E 1011                       		move.b	(a1),d0
0001E090 5200                       		addq.b	#1,d0		; change glass type when touched
0001E092 0C00 0030                  		cmpi.b	#$30,d0
0001E096 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E098 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E09A                            
0001E09A                            Obj09_GlassUpdate:
0001E09A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E09E                            
0001E09E                            Obj09_GlassSnd:
0001E09E 303C 00BA                  		move.w	#$BA,d0
0001E0A2 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E0A8                            ; ===========================================================================
0001E0A8                            
0001E0A8                            Obj09_NoGlass:
0001E0A8 4E75                       		rts	
0001E0AA                            ; End of function Obj09_ChkItems2
0001E0AA                            
0001E0AA                            ; ===========================================================================
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            ; Object 10 - blank
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            
0001E0AA                            Obj10:					; XREF: Obj_Index
0001E0AA 4E75                       		rts	
0001E0AC                            
0001E0AC                            ; ===========================================================================
0001E0AC                            ; ---------------------------------------------------------------------------
0001E0AC                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001E0AC                            ; ---------------------------------------------------------------------------
0001E0AC                            
0001E0AC                            Obj03:
0001E0AC 7000                       		moveq	#0,d0
0001E0AE 1028 0024                  		move.b	$24(a0),d0
0001E0B2 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001E0B6 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001E0BA 3028 0008                  		move.w	8(a0),d0
0001E0BE 0240 FF80                  		andi.w	#$FF80,d0
0001E0C2 3238 F700                  		move.w	($FFFFF700).w,d1
0001E0C6 0441 0080                  		subi.w	#$80,d1
0001E0CA 0241 FF80                  		andi.w	#$FF80,d1
0001E0CE 9041                       		sub.w	d1,d0
0001E0D0 0C40 0280                  		cmpi.w	#$280,d0
0001E0D4 6200                       		bhi.s	Obj03_MarkChkGone
0001E0D6 4E75                       		rts
0001E0D8                            
0001E0D8                            Obj03_MarkChkGone:
0001E0D8 4EF9 0001 11BC             		jmp	Mark_ChkGone
0001E0DE                            ; ===========================================================================
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001E0E0 0000                       		dc.w Obj03_MainX-Obj03_Index
0001E0E2 0000                       		dc.w Obj03_MainY-Obj03_Index
0001E0E4                            ; ---------------------------------------------------------------------------
0001E0E4                            ; ===========================================================================
0001E0E4                            ; ---------------------------------------------------------------------------
0001E0E4                            ; Initiation
0001E0E4                            ; ---------------------------------------------------------------------------
0001E0E4                            
0001E0E4                            Obj03_Init:
0001E0E4 5428 0024                  		addq.b	#2,$24(a0)
0001E0E8 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001E0F0 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001E0F6 0028 0004 0001             		ori.b	#4,$01(a0)
0001E0FC 117C 0010 0019             		move.b	#$10,$19(a0)
0001E102 117C 0005 0018             		move.b	#5,$18(a0)
0001E108 1028 0028                  		move.b	$28(a0),d0
0001E10C 0800 0002                  		btst	#2,d0
0001E110 6700                       		beq.s	Obj03_Init_CheckX
0001E112                            
0001E112                            ;Obj03_Init_CheckY:
0001E112 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001E116 0240 0007                  		andi.w	#7,d0
0001E11A 1140 001A                  		move.b	d0,$1A(a0)
0001E11E 0240 0003                  		andi.w	#3,d0
0001E122 D040                       		add.w	d0,d0
0001E124 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E12A 3228 000C                  		move.w	$0C(a0),d1
0001E12E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E132 B269 000C                  		cmp.w	$0C(a1),d1
0001E136 6400                       		bcc.s	Obj03_Init_Next
0001E138 117C 0001 0034             		move.b	#1,$34(a0)
0001E13E                            Obj03_Init_Next:
0001E13E                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E13E                            	;	cmp.w	$0C(a1),d1
0001E13E                            	;	bcc.s	+
0001E13E                            	;	move.b	#1,$35(a0)
0001E13E                            ;+
0001E13E 6000 0000                  		bra.w	Obj03_MainY
0001E142                            ; ===========================================================================
0001E142                            word_1FD68:
0001E142 0020                       	dc.w  $020
0001E144 0040                       	dc.w  $040	; 1
0001E146 0080                       	dc.w  $080	; 2
0001E148 0100                       	dc.w  $100	; 3
0001E14A                            ; ===========================================================================
0001E14A                            ; loc_1FD70:
0001E14A                            Obj03_Init_CheckX:
0001E14A 0240 0003                  		andi.w	#3,d0
0001E14E 1140 001A                  		move.b	d0,$1A(a0)
0001E152 D040                       		add.w	d0,d0
0001E154 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E15A 3228 0008                  		move.w	$08(a0),d1
0001E15E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E162 B269 0008                  		cmp.w	$08(a1),d1
0001E166 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001E168 117C 0001 0034             		move.b	#1,$34(a0)
0001E16E                            Obj03_Init_CheckX_Next:
0001E16E                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E16E                            	;	cmp.w	$08(a1),d1
0001E16E                            	;	bcc.s	+
0001E16E                            	;	move.b	#1,$35(a0)
0001E16E                            ;+
0001E16E                            
0001E16E                            Obj03_MainX:
0001E16E 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E172 6600 0000                  		bne.w	return_1FEAC
0001E176 3228 0008                  		move.w	$08(a0),d1
0001E17A 45E8 0034                  		lea	$34(a0),a2
0001E17E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E182                            ;		bsr.s	+
0001E182                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E182                            
0001E182                            ;+
0001E182 4A1A                       		tst.b	(a2)+
0001E184 6600                       		bne.s	Obj03_MainX_Alt
0001E186 B269 0008                  		cmp.w	$08(a1),d1
0001E18A 6200 0000                  		bhi.w	return_1FEAC
0001E18E 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E194 3428 000C                  		move.w	$0C(a0),d2
0001E198 3602                       		move.w	d2,d3
0001E19A 3828 0032                  		move.w	$32(a0),d4
0001E19E 9444                       		sub.w	d4,d2
0001E1A0 D644                       		add.w	d4,d3
0001E1A2 3829 000C                  		move.w	$0C(a1),d4
0001E1A6 B842                       		cmp.w	d2,d4
0001E1A8 6D00 0000                  		blt.w	return_1FEAC
0001E1AC B843                       		cmp.w	d3,d4
0001E1AE 6C00 0000                  		bge.w	return_1FEAC
0001E1B2 1028 0028                  		move.b	$28(a0),d0
0001E1B6 6A00                       		bpl.s	Obj03_ICX_B1
0001E1B8 0829 0001 002B             		btst	#1,$2B(a1)
0001E1BE 6600 0000                  		bne.w	return_1FEAC
0001E1C2                            
0001E1C2                            Obj03_ICX_B1:
0001E1C2 0828 0000 0001             		btst	#0,$01(a0)
0001E1C8 6600                       		bne.s	Obj03_ICX_B2
0001E1CA 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E1D0                            	;	move.b	#$C,$3E(a1)
0001E1D0                            	;	move.b	#$D,$3F(a1)
0001E1D0 0800 0003                  		btst	#3,d0
0001E1D4 6700                       		beq.s	Obj03_ICX_B2
0001E1D6 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E1DC                            	;	move.b	#$E,$3E(a1)
0001E1DC                            	;	move.b	#$F,$3F(a1)
0001E1DC                            
0001E1DC                            Obj03_ICX_B2:
0001E1DC 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E1E2 0800 0005                  		btst	#5,d0
0001E1E6 6700                       		beq.s	return_1FEAC
0001E1E8 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E1EE 6000                       		bra.s	return_1FEAC
0001E1F0                            ; ===========================================================================
0001E1F0                            
0001E1F0                            Obj03_MainX_Alt:
0001E1F0 B269 0008                  		cmp.w	$08(a1),d1
0001E1F4 6300 0000                  		bls.w	return_1FEAC
0001E1F8 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E1FE 3428 000C                  		move.w	$0C(a0),d2
0001E202 3602                       		move.w	d2,d3
0001E204 3828 0032                  		move.w	$32(a0),d4
0001E208 9444                       		sub.w	d4,d2
0001E20A D644                       		add.w	d4,d3
0001E20C 3829 000C                  		move.w	$0C(a1),d4
0001E210 B842                       		cmp.w	d2,d4
0001E212 6D00 0000                  		blt.w	return_1FEAC
0001E216 B843                       		cmp.w	d3,d4
0001E218 6C00 0000                  		bge.w	return_1FEAC
0001E21C 1028 0028                  		move.b	$28(a0),d0
0001E220 6A00                       		bpl.s	Obj03_MXA_B1
0001E222 0829 0001 002B             		btst	#1,$2B(a1)
0001E228 6600 0000                  		bne.w	return_1FEAC
0001E22C                            
0001E22C                            Obj03_MXA_B1:
0001E22C 0828 0000 0001             		btst	#0,$01(a0)
0001E232 6600                       		bne.s	Obj03_MXA_B2
0001E234 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E23A                            	;	move.b	#$C,$3E(a1)
0001E23A                            	;	move.b	#$D,$3F(a1)
0001E23A 0800 0004                  		btst	#4,d0
0001E23E 6700                       		beq.s	Obj03_MXA_B2
0001E240 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E246                            	;	move.b	#$E,$3E(a1)
0001E246                            	;	move.b	#$F,$3F(a1)
0001E246                            
0001E246                            Obj03_MXA_B2:
0001E246 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E24C 0800 0006                  		btst	#6,d0
0001E250 6700                       		beq.s	return_1FEAC
0001E252 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E258                            
0001E258                            return_1FEAC:
0001E258 4E75                       		rts
0001E25A                            
0001E25A                            ; ===========================================================================
0001E25A                            
0001E25A                            Obj03_MainY:
0001E25A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E25E 6600 0000                  		bne.w	return_1FFB6
0001E262 3228 000C                  		move.w	$0C(a0),d1
0001E266 45E8 0034                  		lea	$34(a0),a2
0001E26A 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E26E                            ;		bsr.s	+
0001E26E                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E26E                            
0001E26E                            ;+
0001E26E 4A1A                       		tst.b	(a2)+
0001E270 6600                       		bne.s	Obj03_MainY_Alt
0001E272 B269 000C                  		cmp.w	$0C(a1),d1
0001E276 6200 0000                  		bhi.w	return_1FFB6
0001E27A 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E280 3428 0008                  		move.w	$08(a0),d2
0001E284 3602                       		move.w	d2,d3
0001E286 3828 0032                  		move.w	$32(a0),d4
0001E28A 9444                       		sub.w	d4,d2
0001E28C D644                       		add.w	d4,d3
0001E28E 3829 0008                  		move.w	$08(a1),d4
0001E292 B842                       		cmp.w	d2,d4
0001E294 6D00 0000                  		blt.w	return_1FFB6
0001E298 B843                       		cmp.w	d3,d4
0001E29A 6C00 0000                  		bge.w	return_1FFB6
0001E29E 1028 0028                  		move.b	$28(a0),d0
0001E2A2 6A00                       		bpl.s	Obj03_MY_B1
0001E2A4 0829 0001 002B             		btst	#1,$2B(a1)
0001E2AA 6600 0000                  		bne.w	return_1FFB6
0001E2AE                            
0001E2AE                            Obj03_MY_B1:
0001E2AE 0828 0000 0001             		btst	#0,$01(a0)
0001E2B4 6600                       		bne.s	Obj03_MY_B2
0001E2B6 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E2BC                            	;	move.b	#$C,$3E(a1)
0001E2BC                            	;	move.b	#$D,$3F(a1)
0001E2BC 0800 0003                  		btst	#3,d0
0001E2C0 6700                       		beq.s	Obj03_MY_B2
0001E2C2 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E2C8                            	;	move.b	#$E,$3E(a1)
0001E2C8                            	;	move.b	#$F,$3F(a1)
0001E2C8                            
0001E2C8                            Obj03_MY_B2:
0001E2C8 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E2CE 0800 0005                  		btst	#5,d0
0001E2D2 6700                       		beq.s	return_1FFB6
0001E2D4 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E2DA 6000                       		bra.s	return_1FFB6
0001E2DC                            
0001E2DC                            ; ===========================================================================
0001E2DC                            
0001E2DC                            Obj03_MainY_Alt:
0001E2DC B269 000C                  		cmp.w	$0C(a1),d1
0001E2E0 6300 0000                  		bls.w	return_1FFB6
0001E2E4 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E2EA 3428 0008                  		move.w	$08(a0),d2
0001E2EE 3602                       		move.w	d2,d3
0001E2F0 3828 0032                  		move.w	$32(a0),d4
0001E2F4 9444                       		sub.w	d4,d2
0001E2F6 D644                       		add.w	d4,d3
0001E2F8 3829 0008                  		move.w	$08(a1),d4
0001E2FC B842                       		cmp.w	d2,d4
0001E2FE 6D00 0000                  		blt.w	return_1FFB6
0001E302 B843                       		cmp.w	d3,d4
0001E304 6C00 0000                  		bge.w	return_1FFB6
0001E308 1028 0028                  		move.b	$28(a0),d0
0001E30C 6A00                       		bpl.s	Obj03_MYA_B1
0001E30E 0829 0001 002B             		btst	#1,$2B(a1)
0001E314 6600 0000                  		bne.w	return_1FFB6
0001E318                            
0001E318                            Obj03_MYA_B1
0001E318 0828 0000 0001             		btst	#0,$01(a0)
0001E31E 6600                       		bne.s	Obj03_MYA_B2
0001E320 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E326                            	;	move.b	#$C,$3E(a1)
0001E326                            	;	move.b	#$D,$3F(a1)
0001E326 0800 0004                  		btst	#4,d0
0001E32A 6700                       		beq.s	Obj03_MYA_B2
0001E32C 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E332                            	;	move.b	#$E,$3E(a1)
0001E332                            	;	move.b	#$F,$3F(a1)
0001E332                            
0001E332                            Obj03_MYA_B2:
0001E332 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E338 0800 0006                  		btst	#6,d0
0001E33C 6700                       		beq.s	return_1FFB6
0001E33E 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E344                            
0001E344                            return_1FFB6:
0001E344 4E75                       		rts
0001E346                            
0001E346                            ; ===========================================================================
0001E346                            ; ---------------------------------------------------------------------------
0001E346                            ; Subroutine to	animate	level graphics
0001E346                            ; ---------------------------------------------------------------------------
0001E346                            
0001E346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E346                            
0001E346                            
0001E346                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E346 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E34A 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E34C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E352 6100 0000                  		bsr.w	AniArt_GiantRing
0001E356 7000                       		moveq	#0,d0
0001E358 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E35C D040                       		add.w	d0,d0
0001E35E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E362 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E366                            ; ===========================================================================
0001E366                            
0001E366                            AniArt_Pause:
0001E366 4E75                       		rts	
0001E368                            ; End of function AniArt_Load
0001E368                            
0001E368                            ; ===========================================================================
0001E368 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E36C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E370 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E374 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E376                            ; ===========================================================================
0001E376                            ; ---------------------------------------------------------------------------
0001E376                            ; Animated pattern routine - Green Hill
0001E376                            ; ---------------------------------------------------------------------------
0001E376                            
0001E376                            AniArt_GHZ:				; XREF: AniArt_Index
0001E376 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E37A 6A00                       		bpl.s	loc_1C08A
0001E37C 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E382 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E388 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E38C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E390 0240 0001                  		andi.w	#1,d0
0001E394 6700                       		beq.s	loc_1C078
0001E396 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E39A                            
0001E39A                            loc_1C078:
0001E39A 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E3A4 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E3A8 6000 0000                  		bra.w	LoadTiles
0001E3AC                            ; ===========================================================================
0001E3AC                            
0001E3AC                            loc_1C08A:
0001E3AC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E3B0 6A00                       		bpl.s	loc_1C0C0
0001E3B2 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E3B8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E3BE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E3C2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E3C6 0240 0001                  		andi.w	#1,d0
0001E3CA 6700                       		beq.s	loc_1C0AE
0001E3CC 43E9 0200                  		lea	$200(a1),a1
0001E3D0                            
0001E3D0                            loc_1C0AE:
0001E3D0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E3DA 323C 000F                  		move.w	#$F,d1
0001E3DE 6000 0000                  		bra.w	LoadTiles
0001E3E2                            ; ===========================================================================
0001E3E2                            
0001E3E2                            loc_1C0C0:
0001E3E2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E3E6 6A00                       		bpl.s	locret_1C10C
0001E3E8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E3EE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E3F2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E3F6 0240 0003                  		andi.w	#3,d0
0001E3FA 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E3FE 0800 0000                  		btst	#0,d0
0001E402 6600                       		bne.s	loc_1C0E8
0001E404 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E40A                            
0001E40A                            loc_1C0E8:
0001E40A EF48                       		lsl.w	#7,d0
0001E40C 3200                       		move.w	d0,d1
0001E40E D040                       		add.w	d0,d0
0001E410 D041                       		add.w	d1,d0
0001E412 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E41C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E422 43F1 0000                  		lea	(a1,d0.w),a1
0001E426 323C 000B                  		move.w	#$B,d1
0001E42A 6100 0000                  		bsr.w	LoadTiles
0001E42E                            
0001E42E                            locret_1C10C:
0001E42E 4E75                       		rts	
0001E430                            ; ===========================================================================
0001E430 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E434                            ; ===========================================================================
0001E434                            ; ---------------------------------------------------------------------------
0001E434                            ; Animated pattern routine - Marble
0001E434                            ; ---------------------------------------------------------------------------
0001E434                            
0001E434                            AniArt_MZ:				; XREF: AniArt_Index
0001E434 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E438 6A00                       		bpl.s	loc_1C150
0001E43A 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E440 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E446 7000                       		moveq	#0,d0
0001E448 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E44C 5200                       		addq.b	#1,d0
0001E44E 0C00 0003                  		cmpi.b	#3,d0
0001E452 6600                       		bne.s	loc_1C134
0001E454 7000                       		moveq	#0,d0
0001E456                            
0001E456                            loc_1C134:
0001E456 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E45A C0FC 0100                  		mulu.w	#$100,d0
0001E45E D2C0                       		adda.w	d0,a1
0001E460 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E46A 323C 0007                  		move.w	#7,d1
0001E46E 6100 0000                  		bsr.w	LoadTiles
0001E472                            
0001E472                            loc_1C150:
0001E472 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E476 6A00                       		bpl.s	loc_1C1AE
0001E478 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E47E 7000                       		moveq	#0,d0
0001E480 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E484 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E48A EE58                       		ror.w	#7,d0
0001E48C D8C0                       		adda.w	d0,a4
0001E48E 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E498 7600                       		moveq	#0,d3
0001E49A 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E49E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E4A2 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E4A6 343C 0003                  		move.w	#3,d2
0001E4AA                            
0001E4AA                            loc_1C188:
0001E4AA 3003                       		move.w	d3,d0
0001E4AC D040                       		add.w	d0,d0
0001E4AE 0240 001E                  		andi.w	#$1E,d0
0001E4B2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E4B8 3033 0000                  		move.w	(a3,d0.w),d0
0001E4BC 47F3 0000                  		lea	(a3,d0.w),a3
0001E4C0 224C                       		movea.l	a4,a1
0001E4C2 323C 001F                  		move.w	#$1F,d1
0001E4C6 4E93                       		jsr	(a3)
0001E4C8 5843                       		addq.w	#4,d3
0001E4CA 51CA FFDE                  		dbf	d2,loc_1C188
0001E4CE 4E75                       		rts	
0001E4D0                            ; ===========================================================================
0001E4D0                            
0001E4D0                            loc_1C1AE:
0001E4D0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E4D4 6A00 0000                  		bpl.w	locret_1C1EA
0001E4D8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E4DE 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E4E4 7000                       		moveq	#0,d0
0001E4E6 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E4EA 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E4EE 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E4F4 C0FC 00C0                  		mulu.w	#$C0,d0
0001E4F8 D2C0                       		adda.w	d0,a1
0001E4FA 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E504 323C 0005                  		move.w	#5,d1
0001E508 6000 0000                  		bra.w	LoadTiles
0001E50C                            ; ===========================================================================
0001E50C                            
0001E50C                            locret_1C1EA:
0001E50C 4E75                       		rts	
0001E50E                            ; ===========================================================================
0001E50E                            ; ---------------------------------------------------------------------------
0001E50E                            ; Animated pattern routine - Scrap Brain
0001E50E                            ; ---------------------------------------------------------------------------
0001E50E                            
0001E50E                            AniArt_SBZ:				; XREF: AniArt_Index
0001E50E 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E512 6700                       		beq.s	loc_1C1F8
0001E514 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E518 6000                       		bra.s	loc_1C250
0001E51A                            ; ===========================================================================
0001E51A                            
0001E51A                            loc_1C1F8:
0001E51A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E51E 6A00                       		bpl.s	loc_1C250
0001E520 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E526 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E52C 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E536 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E53A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E53E 0240 0007                  		andi.w	#7,d0
0001E542 6700                       		beq.s	loc_1C234
0001E544 5340                       		subq.w	#1,d0
0001E546 C0FC 0180                  		mulu.w	#$180,d0
0001E54A 43F1 0000                  		lea	(a1,d0.w),a1
0001E54E 323C 000B                  		move.w	#$B,d1
0001E552 6000 0000                  		bra.w	LoadTiles
0001E556                            ; ===========================================================================
0001E556                            
0001E556                            loc_1C234:
0001E556 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E55C                            
0001E55C                            loc_1C23A:
0001E55C 323C 0005                  		move.w	#5,d1
0001E560 6100 0000                  		bsr.w	LoadTiles
0001E564 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E56A 323C 0005                  		move.w	#5,d1
0001E56E 6000 0000                  		bra.w	LoadTiles
0001E572                            ; ===========================================================================
0001E572                            
0001E572                            loc_1C250:
0001E572 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E576 6700                       		beq.s	loc_1C25C
0001E578 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E57C 6000                       		bra.s	locret_1C2A0
0001E57E                            ; ===========================================================================
0001E57E                            
0001E57E                            loc_1C25C:
0001E57E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E582 6A00                       		bpl.s	locret_1C2A0
0001E584 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E58A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E590 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E59A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E59E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E5A2 0240 0007                  		andi.w	#7,d0
0001E5A6 6700                       		beq.s	loc_1C298
0001E5A8 5340                       		subq.w	#1,d0
0001E5AA C0FC 0180                  		mulu.w	#$180,d0
0001E5AE 43F1 0000                  		lea	(a1,d0.w),a1
0001E5B2 323C 000B                  		move.w	#$B,d1
0001E5B6 6000 0000                  		bra.w	LoadTiles
0001E5BA                            ; ===========================================================================
0001E5BA                            
0001E5BA                            loc_1C298:
0001E5BA 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E5C0 609A                       		bra.s	loc_1C23A
0001E5C2                            ; ===========================================================================
0001E5C2                            
0001E5C2                            locret_1C2A0:
0001E5C2 4E75                       		rts	
0001E5C4                            ; ===========================================================================
0001E5C4                            ; ---------------------------------------------------------------------------
0001E5C4                            ; Animated pattern routine - ending sequence
0001E5C4                            ; ---------------------------------------------------------------------------
0001E5C4                            
0001E5C4                            AniArt_Ending:				; XREF: AniArt_Index
0001E5C4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E5C8 6A00                       		bpl.s	loc_1C2F4
0001E5CA 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E5D0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E5D6 45F8 9400                  		lea	($FFFF9400).w,a2
0001E5DA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E5DE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E5E2 0240 0001                  		andi.w	#1,d0
0001E5E6 6700                       		beq.s	loc_1C2CE
0001E5E8 43E9 0200                  		lea	$200(a1),a1
0001E5EC 45EA 0200                  		lea	$200(a2),a2
0001E5F0                            
0001E5F0                            loc_1C2CE:
0001E5F0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E5FA 323C 000F                  		move.w	#$F,d1
0001E5FE 6100 0000                  		bsr.w	LoadTiles
0001E602 224A                       		movea.l	a2,a1
0001E604 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E60E 323C 000F                  		move.w	#$F,d1
0001E612 6000 0000                  		bra.w	LoadTiles
0001E616                            ; ===========================================================================
0001E616                            
0001E616                            loc_1C2F4:
0001E616 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E61A 6A00                       		bpl.s	loc_1C33C
0001E61C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E622 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E626 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E62A 0240 0007                  		andi.w	#7,d0
0001E62E 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E632 EF48                       		lsl.w	#7,d0
0001E634 3200                       		move.w	d0,d1
0001E636 D040                       		add.w	d0,d0
0001E638 D041                       		add.w	d1,d0
0001E63A 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E644 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E64A 43F1 0000                  		lea	(a1,d0.w),a1
0001E64E 323C 000B                  		move.w	#$B,d1
0001E652 6000 0000                  		bra.w	LoadTiles
0001E656                            ; ===========================================================================
0001E656 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E65E                            ; ===========================================================================
0001E65E                            
0001E65E                            loc_1C33C:
0001E65E 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E662 6A00                       		bpl.s	loc_1C37A
0001E664 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E66A 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E66E 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E672 0240 0003                  		andi.w	#3,d0
0001E676 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E67A E148                       		lsl.w	#8,d0
0001E67C D040                       		add.w	d0,d0
0001E67E 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E688 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E68C 43F1 0000                  		lea	(a1,d0.w),a1
0001E690 323C 000F                  		move.w	#$F,d1
0001E694 6000 0000                  		bra.w	LoadTiles
0001E698                            ; ===========================================================================
0001E698 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E69C                            ; ===========================================================================
0001E69C                            
0001E69C                            loc_1C37A:
0001E69C 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E6A0 6A00                       		bpl.s	locret_1C3B4
0001E6A2 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E6A8 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E6AC 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E6B0 0240 0003                  		andi.w	#3,d0
0001E6B4 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E6B8 E148                       		lsl.w	#8,d0
0001E6BA D040                       		add.w	d0,d0
0001E6BC 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E6C6 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E6CA 43F1 0000                  		lea	(a1,d0.w),a1
0001E6CE 323C 000F                  		move.w	#$F,d1
0001E6D2 6000 0000                  		bra.w	LoadTiles
0001E6D6                            ; ===========================================================================
0001E6D6                            
0001E6D6                            locret_1C3B4:
0001E6D6 4E75                       		rts	
0001E6D8                            ; ===========================================================================
0001E6D8                            
0001E6D8                            AniArt_none:				; XREF: AniArt_Index
0001E6D8 4E75                       		rts	
0001E6DA                            
0001E6DA                            ; ---------------------------------------------------------------------------
0001E6DA                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E6DA                            ; ---------------------------------------------------------------------------
0001E6DA                            
0001E6DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6DA                            
0001E6DA                            
0001E6DA                            LoadTiles:
0001E6DA 2C99                       		move.l	(a1)+,(a6)
0001E6DC 2C99                       		move.l	(a1)+,(a6)
0001E6DE 2C99                       		move.l	(a1)+,(a6)
0001E6E0 2C99                       		move.l	(a1)+,(a6)
0001E6E2 2C99                       		move.l	(a1)+,(a6)
0001E6E4 2C99                       		move.l	(a1)+,(a6)
0001E6E6 2C99                       		move.l	(a1)+,(a6)
0001E6E8 2C99                       		move.l	(a1)+,(a6)
0001E6EA 51C9 FFEE                  		dbf	d1,LoadTiles
0001E6EE 4E75                       		rts	
0001E6F0                            ; End of function LoadTiles
0001E6F0                            
0001E6F0                            ; ===========================================================================
0001E6F0                            ; ---------------------------------------------------------------------------
0001E6F0                            ; Animated pattern routine - more Marble Zone
0001E6F0                            ; ---------------------------------------------------------------------------
0001E6F0 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E6F4 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E6F8 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E6FC 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E700 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E704 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E708 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E70C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E710                            ; ===========================================================================
0001E710                            
0001E710                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E710 2C91                       		move.l	(a1),(a6)
0001E712 43E9 0010                  		lea	$10(a1),a1
0001E716 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E71A 4E75                       		rts	
0001E71C                            ; ===========================================================================
0001E71C                            
0001E71C                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E71C 2029 0002                  		move.l	2(a1),d0
0001E720 1029 0001                  		move.b	1(a1),d0
0001E724 E098                       		ror.l	#8,d0
0001E726 2C80                       		move.l	d0,(a6)
0001E728 43E9 0010                  		lea	$10(a1),a1
0001E72C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E730 4E75                       		rts	
0001E732                            ; ===========================================================================
0001E732                            
0001E732                            loc_1C410:				; XREF: AniArt_MZextra
0001E732 2CA9 0002                  		move.l	2(a1),(a6)
0001E736 43E9 0010                  		lea	$10(a1),a1
0001E73A 51C9 FFF6                  		dbf	d1,loc_1C410
0001E73E 4E75                       		rts	
0001E740                            ; ===========================================================================
0001E740                            
0001E740                            loc_1C41E:				; XREF: AniArt_MZextra
0001E740 2029 0004                  		move.l	4(a1),d0
0001E744 1029 0003                  		move.b	3(a1),d0
0001E748 E098                       		ror.l	#8,d0
0001E74A 2C80                       		move.l	d0,(a6)
0001E74C 43E9 0010                  		lea	$10(a1),a1
0001E750 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E754 4E75                       		rts	
0001E756                            ; ===========================================================================
0001E756                            
0001E756                            loc_1C434:				; XREF: AniArt_MZextra
0001E756 2CA9 0004                  		move.l	4(a1),(a6)
0001E75A 43E9 0010                  		lea	$10(a1),a1
0001E75E 51C9 FFF6                  		dbf	d1,loc_1C434
0001E762 4E75                       		rts	
0001E764                            ; ===========================================================================
0001E764                            
0001E764                            loc_1C442:				; XREF: AniArt_MZextra
0001E764 2029 0006                  		move.l	6(a1),d0
0001E768 1029 0005                  		move.b	5(a1),d0
0001E76C E098                       		ror.l	#8,d0
0001E76E 2C80                       		move.l	d0,(a6)
0001E770 43E9 0010                  		lea	$10(a1),a1
0001E774 51C9 FFEE                  		dbf	d1,loc_1C442
0001E778 4E75                       		rts	
0001E77A                            ; ===========================================================================
0001E77A                            
0001E77A                            loc_1C458:				; XREF: AniArt_MZextra
0001E77A 2CA9 0006                  		move.l	6(a1),(a6)
0001E77E 43E9 0010                  		lea	$10(a1),a1
0001E782 51C9 FFF6                  		dbf	d1,loc_1C458
0001E786 4E75                       		rts	
0001E788                            ; ===========================================================================
0001E788                            
0001E788                            loc_1C466:				; XREF: AniArt_MZextra
0001E788 2029 0008                  		move.l	8(a1),d0
0001E78C 1029 0007                  		move.b	7(a1),d0
0001E790 E098                       		ror.l	#8,d0
0001E792 2C80                       		move.l	d0,(a6)
0001E794 43E9 0010                  		lea	$10(a1),a1
0001E798 51C9 FFEE                  		dbf	d1,loc_1C466
0001E79C 4E75                       		rts	
0001E79E                            ; ===========================================================================
0001E79E                            
0001E79E                            loc_1C47C:				; XREF: AniArt_MZextra
0001E79E 2CA9 0008                  		move.l	8(a1),(a6)
0001E7A2 43E9 0010                  		lea	$10(a1),a1
0001E7A6 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E7AA 4E75                       		rts	
0001E7AC                            ; ===========================================================================
0001E7AC                            
0001E7AC                            loc_1C48A:				; XREF: AniArt_MZextra
0001E7AC 2029 000A                  		move.l	$A(a1),d0
0001E7B0 1029 0009                  		move.b	9(a1),d0
0001E7B4 E098                       		ror.l	#8,d0
0001E7B6 2C80                       		move.l	d0,(a6)
0001E7B8 43E9 0010                  		lea	$10(a1),a1
0001E7BC 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E7C0 4E75                       		rts	
0001E7C2                            ; ===========================================================================
0001E7C2                            
0001E7C2                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E7C2 2CA9 000A                  		move.l	$A(a1),(a6)
0001E7C6 43E9 0010                  		lea	$10(a1),a1
0001E7CA 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E7CE 4E75                       		rts	
0001E7D0                            ; ===========================================================================
0001E7D0                            
0001E7D0                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E7D0 2029 000C                  		move.l	$C(a1),d0
0001E7D4 1029 000B                  		move.b	$B(a1),d0
0001E7D8 E098                       		ror.l	#8,d0
0001E7DA 2C80                       		move.l	d0,(a6)
0001E7DC 43E9 0010                  		lea	$10(a1),a1
0001E7E0 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E7E4 4E75                       		rts	
0001E7E6                            ; ===========================================================================
0001E7E6                            
0001E7E6                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E7E6 2CA9 000C                  		move.l	$C(a1),(a6)
0001E7EA 43E9 0010                  		lea	$10(a1),a1
0001E7EE 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E7F2 4E75                       		rts	
0001E7F4                            ; ===========================================================================
0001E7F4                            
0001E7F4                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E7F4 2029 000C                  		move.l	$C(a1),d0
0001E7F8 E198                       		rol.l	#8,d0
0001E7FA 1011                       		move.b	0(a1),d0
0001E7FC 2C80                       		move.l	d0,(a6)
0001E7FE 43E9 0010                  		lea	$10(a1),a1
0001E802 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E806 4E75                       		rts	
0001E808                            ; ===========================================================================
0001E808                            
0001E808                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E808 3CA9 000E                  		move.w	$E(a1),(a6)
0001E80C 3C91                       		move.w	0(a1),(a6)
0001E80E 43E9 0010                  		lea	$10(a1),a1
0001E812 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E816 4E75                       		rts	
0001E818                            ; ===========================================================================
0001E818                            
0001E818                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E818 2011                       		move.l	0(a1),d0
0001E81A 1029 000F                  		move.b	$F(a1),d0
0001E81E E098                       		ror.l	#8,d0
0001E820 2C80                       		move.l	d0,(a6)
0001E822 43E9 0010                  		lea	$10(a1),a1
0001E826 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E82A 4E75                       		rts	
0001E82C                            
0001E82C                            ; ---------------------------------------------------------------------------
0001E82C                            ; Animated pattern routine - giant ring
0001E82C                            ; ---------------------------------------------------------------------------
0001E82C                            
0001E82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E82C                            
0001E82C                            
0001E82C                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E82C 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E830 6600                       		bne.s	loc_1C518
0001E832 4E75                       		rts	
0001E834                            ; ===========================================================================
0001E834                            
0001E834                            loc_1C518:
0001E834 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E83A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E840 7000                       		moveq	#0,d0
0001E842 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E846 43F1 0000                  		lea	(a1,d0.w),a1
0001E84A 0640 8000                  		addi.w	#$8000,d0
0001E84E E588                       		lsl.l	#2,d0
0001E850 E448                       		lsr.w	#2,d0
0001E852 0040 4000                  		ori.w	#$4000,d0
0001E856 4840                       		swap	d0
0001E858 2D40 0004                  		move.l	d0,4(a6)
0001E85C 323C 000D                  		move.w	#$D,d1
0001E860 6000 FE78                  		bra.w	LoadTiles
0001E864                            ; End of function AniArt_GiantRing
0001E864                            
0001E864                            ; ===========================================================================
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            ; Object 21 - SCORE, TIME, RINGS
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            
0001E864                            Obj21:					; XREF: Obj_Index
0001E864 7000                       		moveq	#0,d0
0001E866 1028 0024                  		move.b	$24(a0),d0
0001E86A 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E86E 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E872                            ; ===========================================================================
0001E872 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E874 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E876                            ; ===========================================================================
0001E876                            
0001E876                            Obj21_Main:				; XREF: Obj21_Main
0001E876 5428 0024                  		addq.b	#2,$24(a0)
0001E87A 317C 0090 0008             		move.w	#$90,8(a0)
0001E880 317C 0108 000A             		move.w	#$108,$A(a0)
0001E886 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E88E 317C 86CA 0002             		move.w	#$86CA,2(a0)
0001E894 117C 0000 0001             		move.b	#0,1(a0)
0001E89A 117C 0000 0018             		move.b	#0,$18(a0)
0001E8A0                            
0001E8A0                            Obj21_Flash:				; XREF: Obj21_Main
0001E8A0 7000                       		moveq	#0,d0
0001E8A2 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E8A8 6600                       		bne.s	Obj21_Display
0001E8AA 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E8AE 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001E8B0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E8B2                            
0001E8B2                            Obj21_Flash2:
0001E8B2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E8B8 6600                       		bne.s	Obj21_Display	; if not, branch
0001E8BA 5440                       		addq.w	#2,d0		; make time counter flash red
0001E8BC                            
0001E8BC                            Obj21_Display:
0001E8BC 1140 001A                  		move.b	d0,$1A(a0)
0001E8C0 4EF9 0000 F0E4             		jmp	DisplaySprite
0001E8C6                            ; ===========================================================================
0001E8C6                            ; ---------------------------------------------------------------------------
0001E8C6                            ; Sprite mappings - SCORE, TIME, RINGS
0001E8C6                            ; ---------------------------------------------------------------------------
0001E8C6                            Map_obj21:
0001E8C6                            	include "_maps\obj21.asm"
0001E8C6                            ; --------------------------------------------------------------------------------
0001E8C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E8C6                            ; --------------------------------------------------------------------------------
0001E8C6                            
0001E8C6                            SME_u7N7y:	
0001E8C6 0000 0000                  		dc.w SME_u7N7y_8-SME_u7N7y, SME_u7N7y_36-SME_u7N7y	
0001E8CA 0000 0000                  		dc.w SME_u7N7y_64-SME_u7N7y, SME_u7N7y_92-SME_u7N7y	
0001E8CE 0A                         SME_u7N7y_8:	dc.b $A
0001E8CF 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E8D4 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E8D9 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E8DE 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E8E3 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E8E8 A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E8ED A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E8F2 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E8F7 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E8FC 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E901 0A                         SME_u7N7y_36:	dc.b $A
0001E902 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E907 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E90C 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E911 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E916 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E91B A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E920 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E925 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E92A 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E92F 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E934 0A                         SME_u7N7y_64:	dc.b $A
0001E935 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E93A 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E93F 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E944 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E949 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E94E A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E953 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E958 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E95D 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E962 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E967 0A                         SME_u7N7y_92:	dc.b $A
0001E968 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E96D 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E972 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E977 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E97C 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E981 A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E986 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E98B 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E990 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E995 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E99A                            		even
0001E99A                            		even
0001E99A                            
0001E99A                            ; ---------------------------------------------------------------------------
0001E99A                            ; Add points subroutine
0001E99A                            ; ---------------------------------------------------------------------------
0001E99A                            
0001E99A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E99A                            
0001E99A                            
0001E99A                            AddPoints:
0001E99A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E9A0 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E9A4 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E9A8 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E9AA 223C 000F 423F             		move.l	#999999,d1
0001E9B0 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E9B2 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E9B6 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E9B8 2481                       		move.l	d1,(a2)
0001E9BA                            
0001E9BA                            loc_1C6AC:
0001E9BA 2013                       		move.l	(a3),d0
0001E9BC B092                       		cmp.l	(a2),d0
0001E9BE 6500 0000                  		bcs.w	locret_1C6B6
0001E9C2 2480                       		move.l	d0,(a2)
0001E9C4                            
0001E9C4                            locret_1C6B6:
0001E9C4 4E75                       		rts	
0001E9C6                            ; End of function AddPoints
0001E9C6                            
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            ; Subroutine to	update the HUD
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            
0001E9C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9C6                            
0001E9C6                            
0001E9C6                            HudUpdate:
0001E9C6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E9CA 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E9CE 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E9D2 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E9D4 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E9D8 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E9DE 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E9E2 6100 0000                  		bsr.w	Hud_Score
0001E9E6                            
0001E9E6                            Hud_ChkRings:
0001E9E6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E9EA 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E9EC 6A00                       		bpl.s	loc_1C6E4
0001E9EE 6100 0000                  		bsr.w	Hud_LoadZero
0001E9F2                            
0001E9F2                            loc_1C6E4:
0001E9F2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E9F6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E9FC 7200                       		moveq	#0,d1
0001E9FE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EA02 6100 0000                  		bsr.w	Hud_Rings
0001EA06                            
0001EA06                            Hud_ChkTime:
0001EA06 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EA0A 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EA0C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EA10 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EA12 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EA16 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EA1C 6700                       		beq.s	TimeOver	; if yes, branch
0001EA1E 5221                       		addq.b	#1,-(a1)
0001EA20 0C11 003C                  		cmpi.b	#60,(a1)
0001EA24 6500                       		bcs.s	Hud_ChkLives
0001EA26 12BC 0000                  		move.b	#0,(a1)
0001EA2A 5221                       		addq.b	#1,-(a1)
0001EA2C 0C11 003C                  		cmpi.b	#60,(a1)
0001EA30 6500                       		bcs.s	loc_1C734
0001EA32 12BC 0000                  		move.b	#0,(a1)
0001EA36 5221                       		addq.b	#1,-(a1)
0001EA38 0C11 0009                  		cmpi.b	#9,(a1)
0001EA3C 6500                       		bcs.s	loc_1C734
0001EA3E 12BC 0009                  		move.b	#9,(a1)
0001EA42                            
0001EA42                            loc_1C734:
0001EA42 203C 5E40 0003             		move.l	#$5E400003,d0
0001EA48 7200                       		moveq	#0,d1
0001EA4A 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EA4E 6100 0000                  		bsr.w	Hud_Mins
0001EA52 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EA58 7200                       		moveq	#0,d1
0001EA5A 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EA5E 6100 0000                  		bsr.w	Hud_Secs
0001EA62                            
0001EA62                            Hud_ChkLives:
0001EA62 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EA66 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EA68 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EA6C 6100 0000                  		bsr.w	Hud_Lives
0001EA70                            
0001EA70                            Hud_ChkBonus:
0001EA70 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EA74 6700                       		beq.s	Hud_End		; if not, branch
0001EA76 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EA7A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EA84 7200                       		moveq	#0,d1
0001EA86 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EA8A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA8E 7200                       		moveq	#0,d1
0001EA90 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EA94 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA98                            
0001EA98                            Hud_End:
0001EA98 4E75                       		rts	
0001EA9A                            ; ===========================================================================
0001EA9A                            
0001EA9A                            TimeOver:				; XREF: Hud_ChkTime
0001EA9A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EA9E 41F8 D000                  		lea	($FFFFD000).w,a0
0001EAA2 2448                       		movea.l	a0,a2
0001EAA4 6100 E67A                  		bsr.w	KillSonic
0001EAA8 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EAAE 4E75                       		rts	
0001EAB0                            ; ===========================================================================
0001EAB0                            
0001EAB0                            HudDebug:				; XREF: HudUpdate
0001EAB0 6100 0000                  		bsr.w	HudDb_XY
0001EAB4 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EAB8 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EABA 6A00                       		bpl.s	HudDb_Rings
0001EABC 6100 0000                  		bsr.w	Hud_LoadZero
0001EAC0                            
0001EAC0                            HudDb_Rings:
0001EAC0 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EAC4 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EACA 7200                       		moveq	#0,d1
0001EACC 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EAD0 6100 0000                  		bsr.w	Hud_Rings
0001EAD4                            
0001EAD4                            HudDb_ObjCount:
0001EAD4 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EADA 7200                       		moveq	#0,d1
0001EADC 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EAE0 6100 0000                  		bsr.w	Hud_Secs
0001EAE4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EAE8 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EAEA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EAEE 6100 0000                  		bsr.w	Hud_Lives
0001EAF2                            
0001EAF2                            HudDb_ChkBonus:
0001EAF2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EAF6 6700                       		beq.s	HudDb_End	; if not, branch
0001EAF8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EAFC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EB06 7200                       		moveq	#0,d1
0001EB08 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EB0C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB10 7200                       		moveq	#0,d1
0001EB12 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EB16 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB1A                            
0001EB1A                            HudDb_End:
0001EB1A 4E75                       		rts	
0001EB1C                            ; End of function HudUpdate
0001EB1C                            
0001EB1C                            ; ---------------------------------------------------------------------------
0001EB1C                            ; Subroutine to	load "0" on the	HUD
0001EB1C                            ; ---------------------------------------------------------------------------
0001EB1C                            
0001EB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB1C                            
0001EB1C                            
0001EB1C                            Hud_LoadZero:				; XREF: HudUpdate
0001EB1C 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EB26 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EB2A 343C 0002                  		move.w	#2,d2
0001EB2E 6000                       		bra.s	loc_1C83E
0001EB30                            ; End of function Hud_LoadZero
0001EB30                            
0001EB30                            ; ---------------------------------------------------------------------------
0001EB30                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EB30                            ; ---------------------------------------------------------------------------
0001EB30                            
0001EB30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB30                            
0001EB30                            
0001EB30                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EB30 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EB36 6100 0000                  		bsr.w	Hud_Lives
0001EB3A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EB44 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EB48 343C 000E                  		move.w	#$E,d2
0001EB4C                            
0001EB4C                            loc_1C83E:				; XREF: Hud_LoadZero
0001EB4C 43FA 0000                  		lea	Art_Hud(pc),a1
0001EB50                            
0001EB50                            loc_1C842:
0001EB50 323C 000F                  		move.w	#$F,d1
0001EB54 101A                       		move.b	(a2)+,d0
0001EB56 6B00                       		bmi.s	loc_1C85E
0001EB58 4880                       		ext.w	d0
0001EB5A EB48                       		lsl.w	#5,d0
0001EB5C 47F1 0000                  		lea	(a1,d0.w),a3
0001EB60                            
0001EB60                            loc_1C852:
0001EB60 2C9B                       		move.l	(a3)+,(a6)
0001EB62 51C9 FFFC                  		dbf	d1,loc_1C852
0001EB66                            
0001EB66                            loc_1C858:
0001EB66 51CA FFE8                  		dbf	d2,loc_1C842
0001EB6A                            
0001EB6A 4E75                       		rts	
0001EB6C                            ; ===========================================================================
0001EB6C                            
0001EB6C                            loc_1C85E:
0001EB6C 2CBC 0000 0000             		move.l	#0,(a6)
0001EB72 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EB76                            
0001EB76 60EE                       		bra.s	loc_1C858
0001EB78                            ; End of function Hud_Base
0001EB78                            
0001EB78                            ; ===========================================================================
0001EB78 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EB84 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EB88                            ; ---------------------------------------------------------------------------
0001EB88                            ; Subroutine to	load debug mode	numbers	patterns
0001EB88                            ; ---------------------------------------------------------------------------
0001EB88                            
0001EB88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB88                            
0001EB88                            
0001EB88                            HudDb_XY:				; XREF: HudDebug
0001EB88 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EB92 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EB96 4841                       		swap	d1
0001EB98 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EB9C 6100                       		bsr.s	HudDb_XY2
0001EB9E 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EBA2 4841                       		swap	d1
0001EBA4 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EBA8                            ; End of function HudDb_XY
0001EBA8                            
0001EBA8                            
0001EBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBA8                            
0001EBA8                            
0001EBA8                            HudDb_XY2:
0001EBA8 7C07                       		moveq	#7,d6
0001EBAA 43F9 0000 058E             		lea	(Art_Text).l,a1
0001EBB0                            
0001EBB0                            HudDb_XYLoop:
0001EBB0 E959                       		rol.w	#4,d1
0001EBB2 3401                       		move.w	d1,d2
0001EBB4 0242 000F                  		andi.w	#$F,d2
0001EBB8 0C42 000A                  		cmpi.w	#$A,d2
0001EBBC 6500                       		bcs.s	loc_1C8B2
0001EBBE 5E42                       		addq.w	#7,d2
0001EBC0                            
0001EBC0                            loc_1C8B2:
0001EBC0 EB4A                       		lsl.w	#5,d2
0001EBC2 47F1 2000                  		lea	(a1,d2.w),a3
0001EBC6 2C9B                       		move.l	(a3)+,(a6)
0001EBC8 2C9B                       		move.l	(a3)+,(a6)
0001EBCA 2C9B                       		move.l	(a3)+,(a6)
0001EBCC 2C9B                       		move.l	(a3)+,(a6)
0001EBCE 2C9B                       		move.l	(a3)+,(a6)
0001EBD0 2C9B                       		move.l	(a3)+,(a6)
0001EBD2 2C9B                       		move.l	(a3)+,(a6)
0001EBD4 2C9B                       		move.l	(a3)+,(a6)
0001EBD6 4841                       		swap	d1
0001EBD8 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EBDC                            
0001EBDC 4E75                       		rts	
0001EBDE                            ; End of function HudDb_XY2
0001EBDE                            
0001EBDE                            ; ---------------------------------------------------------------------------
0001EBDE                            ; Subroutine to	load rings numbers patterns
0001EBDE                            ; ---------------------------------------------------------------------------
0001EBDE                            
0001EBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBDE                            
0001EBDE                            
0001EBDE                            Hud_Rings:				; XREF: HudUpdate
0001EBDE 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EBE4 7C02                       		moveq	#2,d6
0001EBE6 6000                       		bra.s	Hud_LoadArt
0001EBE8                            ; End of function Hud_Rings
0001EBE8                            
0001EBE8                            ; ---------------------------------------------------------------------------
0001EBE8                            ; Subroutine to	load score numbers patterns
0001EBE8                            ; ---------------------------------------------------------------------------
0001EBE8                            
0001EBE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBE8                            
0001EBE8                            
0001EBE8                            Hud_Score:				; XREF: HudUpdate
0001EBE8 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EBEE 7C05                       		moveq	#5,d6
0001EBF0                            
0001EBF0                            Hud_LoadArt:
0001EBF0 7800                       		moveq	#0,d4
0001EBF2 43FA 0000                  		lea	Art_Hud(pc),a1
0001EBF6                            
0001EBF6                            Hud_ScoreLoop:
0001EBF6 7400                       		moveq	#0,d2
0001EBF8 261A                       		move.l	(a2)+,d3
0001EBFA                            
0001EBFA                            loc_1C8EC:
0001EBFA 9283                       		sub.l	d3,d1
0001EBFC 6500                       		bcs.s	loc_1C8F4
0001EBFE 5242                       		addq.w	#1,d2
0001EC00 60F8                       		bra.s	loc_1C8EC
0001EC02                            ; ===========================================================================
0001EC02                            
0001EC02                            loc_1C8F4:
0001EC02 D283                       		add.l	d3,d1
0001EC04 4A42                       		tst.w	d2
0001EC06 6700                       		beq.s	loc_1C8FE
0001EC08 383C 0001                  		move.w	#1,d4
0001EC0C                            
0001EC0C                            loc_1C8FE:
0001EC0C 4A44                       		tst.w	d4
0001EC0E 6700                       		beq.s	loc_1C92C
0001EC10 ED4A                       		lsl.w	#6,d2
0001EC12 2D40 0004                  		move.l	d0,4(a6)
0001EC16 47F1 2000                  		lea	(a1,d2.w),a3
0001EC1A 2C9B                       		move.l	(a3)+,(a6)
0001EC1C 2C9B                       		move.l	(a3)+,(a6)
0001EC1E 2C9B                       		move.l	(a3)+,(a6)
0001EC20 2C9B                       		move.l	(a3)+,(a6)
0001EC22 2C9B                       		move.l	(a3)+,(a6)
0001EC24 2C9B                       		move.l	(a3)+,(a6)
0001EC26 2C9B                       		move.l	(a3)+,(a6)
0001EC28 2C9B                       		move.l	(a3)+,(a6)
0001EC2A 2C9B                       		move.l	(a3)+,(a6)
0001EC2C 2C9B                       		move.l	(a3)+,(a6)
0001EC2E 2C9B                       		move.l	(a3)+,(a6)
0001EC30 2C9B                       		move.l	(a3)+,(a6)
0001EC32 2C9B                       		move.l	(a3)+,(a6)
0001EC34 2C9B                       		move.l	(a3)+,(a6)
0001EC36 2C9B                       		move.l	(a3)+,(a6)
0001EC38 2C9B                       		move.l	(a3)+,(a6)
0001EC3A                            
0001EC3A                            loc_1C92C:
0001EC3A 0680 0040 0000             		addi.l	#$400000,d0
0001EC40 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EC44                            
0001EC44 4E75                       		rts	
0001EC46                            ; End of function Hud_Score
0001EC46                            
0001EC46                            ; ---------------------------------------------------------------------------
0001EC46                            ; Subroutine to	load countdown numbers on the continue screen
0001EC46                            ; ---------------------------------------------------------------------------
0001EC46                            
0001EC46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC46                            
0001EC46                            
0001EC46                            ContScrCounter:				; XREF: ContinueScreen
0001EC46 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EC50 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EC56 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EC5C 7C01                       		moveq	#1,d6
0001EC5E 7800                       		moveq	#0,d4
0001EC60 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EC64                            
0001EC64                            ContScr_Loop:
0001EC64 7400                       		moveq	#0,d2
0001EC66 261A                       		move.l	(a2)+,d3
0001EC68                            
0001EC68                            loc_1C95A:
0001EC68 9283                       		sub.l	d3,d1
0001EC6A 6500                       		bcs.s	loc_1C962
0001EC6C 5242                       		addq.w	#1,d2
0001EC6E 60F8                       		bra.s	loc_1C95A
0001EC70                            ; ===========================================================================
0001EC70                            
0001EC70                            loc_1C962:
0001EC70 D283                       		add.l	d3,d1
0001EC72 ED4A                       		lsl.w	#6,d2
0001EC74 47F1 2000                  		lea	(a1,d2.w),a3
0001EC78 2C9B                       		move.l	(a3)+,(a6)
0001EC7A 2C9B                       		move.l	(a3)+,(a6)
0001EC7C 2C9B                       		move.l	(a3)+,(a6)
0001EC7E 2C9B                       		move.l	(a3)+,(a6)
0001EC80 2C9B                       		move.l	(a3)+,(a6)
0001EC82 2C9B                       		move.l	(a3)+,(a6)
0001EC84 2C9B                       		move.l	(a3)+,(a6)
0001EC86 2C9B                       		move.l	(a3)+,(a6)
0001EC88 2C9B                       		move.l	(a3)+,(a6)
0001EC8A 2C9B                       		move.l	(a3)+,(a6)
0001EC8C 2C9B                       		move.l	(a3)+,(a6)
0001EC8E 2C9B                       		move.l	(a3)+,(a6)
0001EC90 2C9B                       		move.l	(a3)+,(a6)
0001EC92 2C9B                       		move.l	(a3)+,(a6)
0001EC94 2C9B                       		move.l	(a3)+,(a6)
0001EC96 2C9B                       		move.l	(a3)+,(a6)
0001EC98 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EC9C                            
0001EC9C 4E75                       		rts	
0001EC9E                            ; End of function ContScrCounter
0001EC9E                            
0001EC9E                            ; ===========================================================================
0001EC9E                            ; ---------------------------------------------------------------------------
0001EC9E                            ; HUD counter sizes
0001EC9E                            ; ---------------------------------------------------------------------------
0001EC9E 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001ECA2 0000 2710                  Hud_10000:	dc.l 10000
0001ECA6 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001ECAA 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001ECAE 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001ECB2 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001ECB6                            
0001ECB6                            ; ---------------------------------------------------------------------------
0001ECB6                            ; Subroutine to	load time numbers patterns
0001ECB6                            ; ---------------------------------------------------------------------------
0001ECB6                            
0001ECB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECB6                            
0001ECB6                            
0001ECB6                            Hud_Mins:				; XREF: Hud_ChkTime
0001ECB6 45F9 0001 ECB2             		lea	(Hud_1).l,a2
0001ECBC 7C00                       		moveq	#0,d6
0001ECBE 6000                       		bra.s	loc_1C9BA
0001ECC0                            ; End of function Hud_Mins
0001ECC0                            
0001ECC0                            
0001ECC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECC0                            
0001ECC0                            
0001ECC0                            Hud_Secs:				; XREF: Hud_ChkTime
0001ECC0 45F9 0001 ECAE             		lea	(Hud_10).l,a2
0001ECC6 7C01                       		moveq	#1,d6
0001ECC8                            
0001ECC8                            loc_1C9BA:
0001ECC8 7800                       		moveq	#0,d4
0001ECCA 43FA 0000                  		lea	Art_Hud(pc),a1
0001ECCE                            
0001ECCE                            Hud_TimeLoop:
0001ECCE 7400                       		moveq	#0,d2
0001ECD0 261A                       		move.l	(a2)+,d3
0001ECD2                            
0001ECD2                            loc_1C9C4:
0001ECD2 9283                       		sub.l	d3,d1
0001ECD4 6500                       		bcs.s	loc_1C9CC
0001ECD6 5242                       		addq.w	#1,d2
0001ECD8 60F8                       		bra.s	loc_1C9C4
0001ECDA                            ; ===========================================================================
0001ECDA                            
0001ECDA                            loc_1C9CC:
0001ECDA D283                       		add.l	d3,d1
0001ECDC 4A42                       		tst.w	d2
0001ECDE 6700                       		beq.s	loc_1C9D6
0001ECE0 383C 0001                  		move.w	#1,d4
0001ECE4                            
0001ECE4                            loc_1C9D6:
0001ECE4 ED4A                       		lsl.w	#6,d2
0001ECE6 2D40 0004                  		move.l	d0,4(a6)
0001ECEA 47F1 2000                  		lea	(a1,d2.w),a3
0001ECEE 2C9B                       		move.l	(a3)+,(a6)
0001ECF0 2C9B                       		move.l	(a3)+,(a6)
0001ECF2 2C9B                       		move.l	(a3)+,(a6)
0001ECF4 2C9B                       		move.l	(a3)+,(a6)
0001ECF6 2C9B                       		move.l	(a3)+,(a6)
0001ECF8 2C9B                       		move.l	(a3)+,(a6)
0001ECFA 2C9B                       		move.l	(a3)+,(a6)
0001ECFC 2C9B                       		move.l	(a3)+,(a6)
0001ECFE 2C9B                       		move.l	(a3)+,(a6)
0001ED00 2C9B                       		move.l	(a3)+,(a6)
0001ED02 2C9B                       		move.l	(a3)+,(a6)
0001ED04 2C9B                       		move.l	(a3)+,(a6)
0001ED06 2C9B                       		move.l	(a3)+,(a6)
0001ED08 2C9B                       		move.l	(a3)+,(a6)
0001ED0A 2C9B                       		move.l	(a3)+,(a6)
0001ED0C 2C9B                       		move.l	(a3)+,(a6)
0001ED0E 0680 0040 0000             		addi.l	#$400000,d0
0001ED14 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001ED18                            
0001ED18 4E75                       		rts	
0001ED1A                            ; End of function Hud_Secs
0001ED1A                            
0001ED1A                            ; ---------------------------------------------------------------------------
0001ED1A                            ; Subroutine to	load time/ring bonus numbers patterns
0001ED1A                            ; ---------------------------------------------------------------------------
0001ED1A                            
0001ED1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED1A                            
0001ED1A                            
0001ED1A                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001ED1A 45F9 0001 ECA6             		lea	(Hud_1000).l,a2
0001ED20 7C03                       		moveq	#3,d6
0001ED22 7800                       		moveq	#0,d4
0001ED24 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED28                            
0001ED28                            Hud_BonusLoop:
0001ED28 7400                       		moveq	#0,d2
0001ED2A 261A                       		move.l	(a2)+,d3
0001ED2C                            
0001ED2C                            loc_1CA1E:
0001ED2C 9283                       		sub.l	d3,d1
0001ED2E 6500                       		bcs.s	loc_1CA26
0001ED30 5242                       		addq.w	#1,d2
0001ED32 60F8                       		bra.s	loc_1CA1E
0001ED34                            ; ===========================================================================
0001ED34                            
0001ED34                            loc_1CA26:
0001ED34 D283                       		add.l	d3,d1
0001ED36 4A42                       		tst.w	d2
0001ED38 6700                       		beq.s	loc_1CA30
0001ED3A 383C 0001                  		move.w	#1,d4
0001ED3E                            
0001ED3E                            loc_1CA30:
0001ED3E 4A44                       		tst.w	d4
0001ED40 6700                       		beq.s	Hud_ClrBonus
0001ED42 ED4A                       		lsl.w	#6,d2
0001ED44 47F1 2000                  		lea	(a1,d2.w),a3
0001ED48 2C9B                       		move.l	(a3)+,(a6)
0001ED4A 2C9B                       		move.l	(a3)+,(a6)
0001ED4C 2C9B                       		move.l	(a3)+,(a6)
0001ED4E 2C9B                       		move.l	(a3)+,(a6)
0001ED50 2C9B                       		move.l	(a3)+,(a6)
0001ED52 2C9B                       		move.l	(a3)+,(a6)
0001ED54 2C9B                       		move.l	(a3)+,(a6)
0001ED56 2C9B                       		move.l	(a3)+,(a6)
0001ED58 2C9B                       		move.l	(a3)+,(a6)
0001ED5A 2C9B                       		move.l	(a3)+,(a6)
0001ED5C 2C9B                       		move.l	(a3)+,(a6)
0001ED5E 2C9B                       		move.l	(a3)+,(a6)
0001ED60 2C9B                       		move.l	(a3)+,(a6)
0001ED62 2C9B                       		move.l	(a3)+,(a6)
0001ED64 2C9B                       		move.l	(a3)+,(a6)
0001ED66 2C9B                       		move.l	(a3)+,(a6)
0001ED68                            
0001ED68                            loc_1CA5A:
0001ED68 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001ED6C                            
0001ED6C 4E75                       		rts	
0001ED6E                            ; ===========================================================================
0001ED6E                            
0001ED6E                            Hud_ClrBonus:
0001ED6E 7A0F                       		moveq	#$F,d5
0001ED70                            
0001ED70                            Hud_ClrBonusLoop:
0001ED70 2CBC 0000 0000             		move.l	#0,(a6)
0001ED76 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001ED7A                            
0001ED7A 60EC                       		bra.s	loc_1CA5A
0001ED7C                            ; End of function Hud_TimeRingBonus
0001ED7C                            
0001ED7C                            ; ---------------------------------------------------------------------------
0001ED7C                            ; Subroutine to	load uncompressed lives	counter	patterns
0001ED7C                            ; ---------------------------------------------------------------------------
0001ED7C                            
0001ED7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED7C                            
0001ED7C                            
0001ED7C                            Hud_Lives:				; XREF: Hud_ChkLives
0001ED7C 203C 7B20 0003             		move.l	#$7B200003,d0	; set VRAM address
0001ED82 7200                       		moveq	#0,d1
0001ED84 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001ED88 45F9 0001 ECAE             		lea	(Hud_10).l,a2
0001ED8E 7C01                       		moveq	#1,d6
0001ED90 7800                       		moveq	#0,d4
0001ED92 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001ED96 2D40 0004                  		move.l	d0,4(a6)
0001ED9A                            
0001ED9A                            Hud_LivesLoop:
0001ED9A 7400                       		moveq	#0,d2
0001ED9C 261A                       		move.l	(a2)+,d3
0001ED9E                            
0001ED9E                            loc_1CA90:
0001ED9E 9283                       		sub.l	d3,d1
0001EDA0 6500                       		bcs.s	loc_1CA98
0001EDA2 5242                       		addq.w	#1,d2
0001EDA4 60F8                       		bra.s	loc_1CA90
0001EDA6                            ; ===========================================================================
0001EDA6                            
0001EDA6                            loc_1CA98:
0001EDA6 D283                       		add.l	d3,d1
0001EDA8 4A42                       		tst.w	d2
0001EDAA 6700                       		beq.s	loc_1CAA2
0001EDAC 383C 0001                  		move.w	#1,d4
0001EDB0                            
0001EDB0                            loc_1CAA2:
0001EDB0 4A44                       		tst.w	d4
0001EDB2 6700                       		beq.s	@chk
0001EDB4 4A46                       		tst.w	d6
0001EDB6 6700                       		beq.s	loc_1CAA6
0001EDB8 0C42 0001                  		cmpi.w	#1,d2
0001EDBC 6700                       		beq.s	Hud_Lives_Draw10
0001EDBE 6000                       		bra.s	loc_1CAA6
0001EDC0                            
0001EDC0                            @chk:
0001EDC0 4A46                       		tst.w	d6
0001EDC2 6700                       		beq.s	Hud_Lives_DrawDigit
0001EDC4 6000                       		bra.s	Hud_Lives_End
0001EDC6                            
0001EDC6                            loc_1CAA6:
0001EDC6 4A46                       		tst.w	d6
0001EDC8 6600                       		bne.s	Hud_Lives_DrawDigit
0001EDCA 7200                       		moveq	#0,d1
0001EDCC 1238 FE12                  		move.b	($FFFFFE12).w,d1
0001EDD0 82FC 000A                  		divu.w	#10,d1
0001EDD4 4841                       		swap	d1
0001EDD6 4A41                       		tst.w	d1
0001EDD8 6700                       		beq.s	Hud_Lives_DrawBlank
0001EDDA                            
0001EDDA                            Hud_Lives_DrawDigit:
0001EDDA EB4A                       		lsl.w	#5,d2
0001EDDC 47F1 2000                  		lea	(a1,d2.w),a3
0001EDE0 2C9B                       		move.l	(a3)+,(a6)
0001EDE2 2C9B                       		move.l	(a3)+,(a6)
0001EDE4 2C9B                       		move.l	(a3)+,(a6)
0001EDE6 2C9B                       		move.l	(a3)+,(a6)
0001EDE8 2C9B                       		move.l	(a3)+,(a6)
0001EDEA 2C9B                       		move.l	(a3)+,(a6)
0001EDEC 2C9B                       		move.l	(a3)+,(a6)
0001EDEE 2C9B                       		move.l	(a3)+,(a6)
0001EDF0 0680 0040 0000             		addi.l	#$400000,d0
0001EDF6 2D40 0004                  		move.l	d0,4(a6)
0001EDFA                            		
0001EDFA                            Hud_Lives_Draw10:
0001EDFA 4A46                       		tst.w	d6
0001EDFC 6700                       		beq.s	Hud_Lives_End
0001EDFE 343C 0140                  		move.w	#10*$20,d2
0001EE02 47F1 2000                  		lea	(a1,d2.w),a3
0001EE06 2C9B                       		move.l	(a3)+,(a6)
0001EE08 2C9B                       		move.l	(a3)+,(a6)
0001EE0A 2C9B                       		move.l	(a3)+,(a6)
0001EE0C 2C9B                       		move.l	(a3)+,(a6)
0001EE0E 2C9B                       		move.l	(a3)+,(a6)
0001EE10 2C9B                       		move.l	(a3)+,(a6)
0001EE12 2C9B                       		move.l	(a3)+,(a6)
0001EE14 2C9B                       		move.l	(a3)+,(a6)
0001EE16 0680 0040 0000             		addi.l	#$400000,d0
0001EE1C 2D40 0004                  		move.l	d0,4(a6)
0001EE20                            		
0001EE20                            Hud_Lives_End:
0001EE20 51CE FF78                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EE24 4E75                       		rts	
0001EE26                            ; ===========================================================================
0001EE26                            
0001EE26                            Hud_Lives_DrawBlank:
0001EE26 7A07                       		moveq	#7,d5
0001EE28                            
0001EE28                            Hud_Lives_DrawBlankLoop:
0001EE28 2CBC 0000 0000             		move.l	#0,(a6)
0001EE2E 51CD FFF8                  		dbf	d5,Hud_Lives_DrawBlankLoop
0001EE32 0680 0040 0000             		addi.l	#$400000,d0
0001EE38 2D40 0004                  		move.l	d0,4(a6)
0001EE3C 60E2                       		bra.s	Hud_Lives_End
0001EE3E                            ; End of function Hud_Lives
0001EE3E                            
0001EE3E                            ; ===========================================================================
0001EE3E                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F13E                            		even
0001F13E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F29E                            		even
0001F29E                            ; ===========================================================================
0001F29E                            ; ---------------------------------------------------------------------------
0001F29E                            ; When debug mode is currently in use
0001F29E                            ; ---------------------------------------------------------------------------
0001F29E                            
0001F29E                            DebugMode:				; XREF: Obj01; Obj09
0001F29E 7000                       		moveq	#0,d0
0001F2A0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F2A4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F2A8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F2AC                            ; ===========================================================================
0001F2AC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F2AE 0000                       		dc.w Debug_Skip-Debug_Index
0001F2B0                            ; ===========================================================================
0001F2B0                            
0001F2B0                            Debug_Main:				; XREF: Debug_Index
0001F2B0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F2B4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F2BA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F2C0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F2C6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F2CC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F2D2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F2D8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F2DE 117C 0000 001A             		move.b	#0,$1A(a0)
0001F2E4 117C 0000 001C             		move.b	#0,$1C(a0)
0001F2EA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F2F0 6600                       		bne.s	Debug_Zone	; if not, branch
0001F2F2 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F2F8 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F2FE 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F300 6000                       		bra.s	Debug_UseList
0001F302                            ; ===========================================================================
0001F302                            
0001F302                            Debug_Zone:
0001F302 7000                       		moveq	#0,d0
0001F304 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F308                            
0001F308                            Debug_UseList:
0001F308 45F9 0000 0000             		lea	(DebugList).l,a2
0001F30E D040                       		add.w	d0,d0
0001F310 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F314 3C1A                       		move.w	(a2)+,d6
0001F316 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F31A 6200                       		bhi.s	loc_1CF9E
0001F31C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F322                            
0001F322                            loc_1CF9E:
0001F322 6100 0000                  		bsr.w	Debug_ShowItem
0001F326 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F32C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F332                            
0001F332                            Debug_Skip:				; XREF: Debug_Index
0001F332 7006                       		moveq	#6,d0
0001F334 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F33A 6700                       		beq.s	loc_1CFBE
0001F33C 7000                       		moveq	#0,d0
0001F33E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F342                            
0001F342                            loc_1CFBE:
0001F342 45F9 0000 0000             		lea	(DebugList).l,a2
0001F348 D040                       		add.w	d0,d0
0001F34A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F34E 3C1A                       		move.w	(a2)+,d6
0001F350 6100 0000                  		bsr.w	Debug_Control
0001F354 4EF9 0000 F0E4             		jmp	DisplaySprite
0001F35A                            
0001F35A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F35A                            
0001F35A                            
0001F35A                            Debug_Control:
0001F35A 7800                       		moveq	#0,d4
0001F35C 323C 0001                  		move.w	#1,d1
0001F360 1838 F605                  		move.b	($FFFFF605).w,d4
0001F364 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F368 6600                       		bne.s	loc_1D018	; if yes, branch
0001F36A 1038 F604                  		move.b	($FFFFF604).w,d0
0001F36E 0240 000F                  		andi.w	#$F,d0
0001F372 6600                       		bne.s	loc_1D000
0001F374 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F37A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F380 6000 0000                  		bra.w	Debug_BackItem
0001F384                            ; ===========================================================================
0001F384                            
0001F384                            loc_1D000:
0001F384 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F388 6600                       		bne.s	loc_1D01C
0001F38A 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F390 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F394 6600                       		bne.s	loc_1D018
0001F396 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F39C                            
0001F39C                            loc_1D018:
0001F39C 1838 F604                  		move.b	($FFFFF604).w,d4
0001F3A0                            
0001F3A0                            loc_1D01C:
0001F3A0 7200                       		moveq	#0,d1
0001F3A2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F3A6 5241                       		addq.w	#1,d1
0001F3A8 4841                       		swap	d1
0001F3AA E881                       		asr.l	#4,d1
0001F3AC 2428 000C                  		move.l	$C(a0),d2
0001F3B0 2628 0008                  		move.l	8(a0),d3
0001F3B4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F3B8 6700                       		beq.s	loc_1D03C	; if not, branch
0001F3BA 9481                       		sub.l	d1,d2
0001F3BC 6400                       		bcc.s	loc_1D03C
0001F3BE 7400                       		moveq	#0,d2
0001F3C0                            
0001F3C0                            loc_1D03C:
0001F3C0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F3C4 6700                       		beq.s	loc_1D052	; if not, branch
0001F3C6 D481                       		add.l	d1,d2
0001F3C8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F3CE 6500                       		bcs.s	loc_1D052
0001F3D0 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F3D6                            
0001F3D6                            loc_1D052:
0001F3D6 0804 0002                  		btst	#2,d4
0001F3DA 6700                       		beq.s	loc_1D05E
0001F3DC 9681                       		sub.l	d1,d3
0001F3DE 6400                       		bcc.s	loc_1D05E
0001F3E0 7600                       		moveq	#0,d3
0001F3E2                            
0001F3E2                            loc_1D05E:
0001F3E2 0804 0003                  		btst	#3,d4
0001F3E6 6700                       		beq.s	loc_1D066
0001F3E8 D681                       		add.l	d1,d3
0001F3EA                            
0001F3EA                            loc_1D066:
0001F3EA 2142 000C                  		move.l	d2,$C(a0)
0001F3EE 2143 0008                  		move.l	d3,8(a0)
0001F3F2                            
0001F3F2                            Debug_BackItem:
0001F3F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F3F8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F3FA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F400 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F402 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F406 6400                       		bcc.s	Debug_NoLoop
0001F408 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F40C 6000                       		bra.s	Debug_NoLoop
0001F40E                            ; ===========================================================================
0001F40E                            
0001F40E                            Debug_NextItem:
0001F40E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F414 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F416 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F41A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F41E 6200                       		bhi.s	Debug_NoLoop
0001F420 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F426                            
0001F426                            Debug_NoLoop:
0001F426 6000 0000                  		bra.w	Debug_ShowItem
0001F42A                            ; ===========================================================================
0001F42A                            
0001F42A                            Debug_MakeItem:
0001F42A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F430 6700                       		beq.s	Debug_Exit	; if not, branch
0001F432 4EB9 0000 F578             		jsr	SingleObjLoad
0001F438 6600                       		bne.s	Debug_Exit
0001F43A 3368 0008 0008             		move.w	8(a0),8(a1)
0001F440 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F446 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F44A 1368 0001 0001             		move.b	1(a0),1(a1)
0001F450 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F456 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F45C 7000                       		moveq	#0,d0
0001F45E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F462 E748                       		lsl.w	#3,d0
0001F464 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F46A 4E75                       		rts	
0001F46C                            ; ===========================================================================
0001F46C                            
0001F46C                            Debug_Exit:
0001F46C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F472 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F474 7000                       		moveq	#0,d0
0001F476 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F47A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F482 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F488 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F48C 3140 000A                  		move.w	d0,$A(a0)
0001F490 3140 000E                  		move.w	d0,$E(a0)
0001F494 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F49A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F4A0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F4A6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F4A8 4278 F780                  		clr.w	($FFFFF780).w
0001F4AC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F4B2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F4BA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F4C0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F4C6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F4CC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F4D2                            
0001F4D2                            Debug_DoNothing:
0001F4D2 4E75                       		rts	
0001F4D4                            ; End of function Debug_Control
0001F4D4                            
0001F4D4                            
0001F4D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4D4                            
0001F4D4                            
0001F4D4                            Debug_ShowItem:				; XREF: Debug_Main
0001F4D4 7000                       		moveq	#0,d0
0001F4D6 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F4DA E748                       		lsl.w	#3,d0
0001F4DC 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F4E2 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F4E8 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F4EE 4E75                       		rts	
0001F4F0                            ; End of function Debug_ShowItem
0001F4F0                            
0001F4F0                            ; ===========================================================================
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            ; Debug	list pointers
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            DebugList:
0001F4F0                            	include "_inc\Debug list pointers.asm"
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0                            ; Debug	list pointers
0001F4F0                            ; ---------------------------------------------------------------------------
0001F4F0 0000                       	dc.w Debug_GHZ-DebugList
0001F4F2 0000                       	dc.w Debug_LZ-DebugList
0001F4F4 0000                       	dc.w Debug_MZ-DebugList
0001F4F6 0000                       	dc.w Debug_SLZ-DebugList
0001F4F8 0000                       	dc.w Debug_SYZ-DebugList
0001F4FA 0000                       	dc.w Debug_SBZ-DebugList
0001F4FC 0000                       	dc.w Debug_Ending-DebugList
0001F4FC 0000                       	dc.w Debug_Ending-DebugList
0001F4FE                            
0001F4FE                            ; ---------------------------------------------------------------------------
0001F4FE                            ; Debug	list - Green Hill
0001F4FE                            ; ---------------------------------------------------------------------------
0001F4FE                            Debug_GHZ:
0001F4FE                            	include "_inc\Debug list - GHZ.asm"
0001F4FE                            ; ---------------------------------------------------------------------------
0001F4FE                            ; Debug	list - Green Hill
0001F4FE                            ; ---------------------------------------------------------------------------
0001F4FE 0010                       	dc.w $10			; number of items in list
0001F500 2500 B9AE                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F504 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001F508 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F50C 0000 0680                  	dc.b 0,	0, 6, $80
0001F510 1F00 B12C                  	dc.l Map_obj1F+$1F000000
0001F514 0000 0400                  	dc.b 0,	0, 4, 0
0001F518 2200 B40C                  	dc.l Map_obj22+$22000000
0001F51C 0000 0444                  	dc.b 0,	0, 4, $44
0001F520 2B00 C5EA                  	dc.l Map_obj2B+$2B000000
0001F524 0000 047B                  	dc.b 0,	0, 4, $7B
0001F528 3600 EAE4                  	dc.l Map_obj36+$36000000
0001F52C 0000 051B                  	dc.b 0,	0, 5, $1B
0001F530 1800 9B2A                  	dc.l Map_obj18+$18000000
0001F534 0000 4000                  	dc.b 0,	0, $40,	0
0001F538 3B00 EC0A                  	dc.l Map_obj3B+$3B000000
0001F53C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F540 4001 128C                  	dc.l Map_obj40+$40000000
0001F544 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F548 4100 F816                  	dc.l Map_obj41+$41000000
0001F54C 0000 0523                  	dc.b 0,	0, 5, $23
0001F550 4200 FA3C                  	dc.l Map_obj42+$42000000
0001F554 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F558 4400 FD4A                  	dc.l Map_obj44+$44000000
0001F55C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F560 1900 9B98                  	dc.l Map_obj48+$19000000
0001F564 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F568 7901 9150                  	dc.l Map_obj79+$79000000
0001F56C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F570 4B00 B9EE                  	dc.l Map_obj4B+$4B000000
0001F574 0000 2400                  	dc.b 0,	0, $24,	0
0001F578 7D01 92A0                  	dc.l Map_obj7D+$7D000000
0001F57C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F580                            	even
0001F580                            	even
0001F580                            
0001F580                            ; ---------------------------------------------------------------------------
0001F580                            ; Debug	list - Labyrinth
0001F580                            ; ---------------------------------------------------------------------------
0001F580                            Debug_LZ:
0001F580                            	include "_inc\Debug list - LZ.asm"
0001F580                            ; ---------------------------------------------------------------------------
0001F580                            ; Debug	list - Labyrinth
0001F580                            ; ---------------------------------------------------------------------------
0001F580 0019                       	dc.w $19
0001F582 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F586 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F58A 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F58E 0000 0680                  	dc.b 0,	0, 6, $80
0001F592 4100 F816                  	dc.l Map_obj41+$41000000
0001F596 0000 0523                  	dc.b 0,	0, 5, $23
0001F59A 2C00 C690                  	dc.l Map_obj2C+$2C000000
0001F59E 0800 2486                  	dc.b 8,	0, $24,	$86
0001F5A2 2D00 C87C                  	dc.l Map_obj2D+$2D000000
0001F5A6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F5AA 1601 3A7A                  	dc.l Map_obj16+$16000000
0001F5AE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F5B2 1601 3A7A                  	dc.l Map_obj16+$16000000
0001F5B6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F5BA 3300 DCFA                  	dc.l Map_obj33+$33000000
0001F5BE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F5C2 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F5C6 0000 0513                  	dc.b 0,	0, 5, $13
0001F5CA 3600 EAE4                  	dc.l Map_obj36+$36000000
0001F5CE 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5D2 5201 1B9C                  	dc.l Map_obj52a+$52000000
0001F5D6 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F5DA 6101 3CA2                  	dc.l Map_obj61+$61000000
0001F5DE 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F5E2 6101 3CA2                  	dc.l Map_obj61+$61000000
0001F5E6 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F5EA 6101 3CA2                  	dc.l Map_obj61+$61000000
0001F5EE 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F5F2 6201 3DF6                  	dc.l Map_obj62+$62000000
0001F5F6 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F5FA 6101 3CA2                  	dc.l Map_obj61+$61000000
0001F5FE 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F602 6101 3CA2                  	dc.l Map_obj61+$61000000
0001F606 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F60A 6301 4158                  	dc.l Map_obj63+$63000000
0001F60E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F612 6001 39C4                  	dc.l Map_obj60+$60000000
0001F616 0000 0467                  	dc.b 0,	0, 4, $67
0001F61A 6401 449E                  	dc.l Map_obj64+$64000000
0001F61E 8413 8348                  	dc.b $84, $13, $83, $48
0001F622 6501 4626                  	dc.l Map_obj65+$65000000
0001F626 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F62A 6501 4626                  	dc.l Map_obj65+$65000000
0001F62E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F632 0B01 2E14                  	dc.l Map_obj0B+$B000000
0001F636 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F63A 0C01 2EE4                  	dc.l Map_obj0C+$C000000
0001F63E 0200 4328                  	dc.b 2,	0, $43,	$28
0001F642 7901 9150                  	dc.l Map_obj79+$79000000
0001F646 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F64A                            	even
0001F64A                            	even
0001F64A                            
0001F64A                            ; ---------------------------------------------------------------------------
0001F64A                            ; Debug	list - Marble
0001F64A                            ; ---------------------------------------------------------------------------
0001F64A                            Debug_MZ:
0001F64A                            	include "_inc\Debug list - MZ.asm"
0001F64A                            ; ---------------------------------------------------------------------------
0001F64A                            ; Debug	list - Marble
0001F64A                            ; ---------------------------------------------------------------------------
0001F64A 0012                       	dc.w $12
0001F64C 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F650 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F654 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F658 0000 0680                  	dc.b 0,	0, 6, $80
0001F65C 2200 B40C                  	dc.l Map_obj22+$22000000
0001F660 0000 0444                  	dc.b 0,	0, 4, $44
0001F664 3600 EAE4                  	dc.l Map_obj36+$36000000
0001F668 0000 051B                  	dc.b 0,	0, 5, $1B
0001F66C 4100 F816                  	dc.l Map_obj41+$41000000
0001F670 0000 0523                  	dc.b 0,	0, 5, $23
0001F674 1300 CD8A                  	dc.l Map_obj14+$13000000
0001F678 0000 0345                  	dc.b 0,	0, 3, $45
0001F67C 4601 03FC                  	dc.l Map_obj46+$46000000
0001F680 0000 4000                  	dc.b 0,	0, $40,	0
0001F684 4C01 0D38                  	dc.l Map_obj4C+$4C000000
0001F688 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F68C 4E01 101C                  	dc.l Map_obj4E+$4E000000
0001F690 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F694 3300 DCFA                  	dc.l Map_obj33+$33000000
0001F698 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F69C 5001 141A                  	dc.l Map_obj50+$50000000
0001F6A0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F6A4 5101 18D0                  	dc.l Map_obj51+$51000000
0001F6A8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F6AC 5201 1B46                  	dc.l Map_obj52+$52000000
0001F6B0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F6B4 5300 A130                  	dc.l Map_obj53+$53000000
0001F6B8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F6BC 5401 0CFE                  	dc.l Map_obj54+$54000000
0001F6C0 0000 8680                  	dc.b 0,	0, $86,	$80
0001F6C4 5501 1D3A                  	dc.l Map_obj55+$55000000
0001F6C8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F6CC 7801 8DCA                  	dc.l Map_obj78+$78000000
0001F6D0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F6D4 7901 9150                  	dc.l Map_obj79+$79000000
0001F6D8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F6DC                            	even
0001F6DC                            	even
0001F6DC                            
0001F6DC                            ; ---------------------------------------------------------------------------
0001F6DC                            ; Debug	list - Star Light
0001F6DC                            ; ---------------------------------------------------------------------------
0001F6DC                            Debug_SLZ:
0001F6DC                            	include "_inc\Debug list - SLZ.asm"
0001F6DC                            ; ---------------------------------------------------------------------------
0001F6DC                            ; Debug	list - Star Light
0001F6DC                            ; ---------------------------------------------------------------------------
0001F6DC 000F                       	dc.w $F
0001F6DE 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F6E2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F6E6 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F6EA 0000 0680                  	dc.b 0,	0, 6, $80
0001F6EE 5901 283C                  	dc.l Map_obj59+$59000000
0001F6F2 0000 4000                  	dc.b 0,	0, $40,	0
0001F6F6 5300 A130                  	dc.l Map_obj53+$53000000
0001F6FA 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F6FE 1800 9B88                  	dc.l Map_obj18b+$18000000
0001F702 0000 4000                  	dc.b 0,	0, $40,	0
0001F706 5A01 2976                  	dc.l Map_obj5A+$5A000000
0001F70A 0000 4000                  	dc.b 0,	0, $40,	0
0001F70E 5B01 2B2E                  	dc.l Map_obj5B+$5B000000
0001F712 0000 4000                  	dc.b 0,	0, $40,	0
0001F716 5D01 30FE                  	dc.l Map_obj5D+$5D000000
0001F71A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F71E 5E01 3490                  	dc.l Map_obj5E+$5E000000
0001F722 0000 0374                  	dc.b 0,	0, 3, $74
0001F726 4100 F816                  	dc.l Map_obj41+$41000000
0001F72A 0000 0523                  	dc.b 0,	0, 5, $23
0001F72E 1300 CD8A                  	dc.l Map_obj14+$13000000
0001F732 0000 0480                  	dc.b 0,	0, 4, $80
0001F736 1C00 A240                  	dc.l Map_obj1C+$1C000000
0001F73A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F73E 5F01 370E                  	dc.l Map_obj5F+$5F000000
0001F742 0000 0400                  	dc.b 0,	0, 4, 0
0001F746 6001 39C4                  	dc.l Map_obj60+$60000000
0001F74A 0000 2429                  	dc.b 0,	0, $24,	$29
0001F74E 7901 9150                  	dc.l Map_obj79+$79000000
0001F752 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F756                            	even
0001F756                            	even
0001F756                            
0001F756                            ; ---------------------------------------------------------------------------
0001F756                            ; Debug	list - Spring Yard
0001F756                            ; ---------------------------------------------------------------------------
0001F756                            Debug_SYZ:
0001F756                            	include "_inc\Debug list - SYZ.asm"
0001F756                            ; ---------------------------------------------------------------------------
0001F756                            ; Debug	list - Spring Yard
0001F756                            ; ---------------------------------------------------------------------------
0001F756 000F                       	dc.w $F
0001F758 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F75C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F760 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F764 0000 0680                  	dc.b 0,	0, 6, $80
0001F768 3600 EAE4                  	dc.l Map_obj36+$36000000
0001F76C 0000 051B                  	dc.b 0,	0, 5, $1B
0001F770 4100 F816                  	dc.l Map_obj41+$41000000
0001F774 0000 0523                  	dc.b 0,	0, 5, $23
0001F778 4300 FC9C                  	dc.l Map_obj43+$43000000
0001F77C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F780 1201 047A                  	dc.l Map_obj12+$12000000
0001F784 0000 0000                  	dc.b 0,	0, 0, 0
0001F788 4701 05F6                  	dc.l Map_obj47+$47000000
0001F78C 0000 0380                  	dc.b 0,	0, 3, $80
0001F790 1F00 B12C                  	dc.l Map_obj1F+$1F000000
0001F794 0000 0400                  	dc.b 0,	0, 4, 0
0001F798 2200 B40C                  	dc.l Map_obj22+$22000000
0001F79C 0000 0444                  	dc.b 0,	0, 4, $44
0001F7A0 5001 141A                  	dc.l Map_obj50+$50000000
0001F7A4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F7A8 1800 9B76                  	dc.l Map_obj18a+$18000000
0001F7AC 0000 4000                  	dc.b 0,	0, $40,	0
0001F7B0 5601 21FC                  	dc.l Map_obj56+$56000000
0001F7B4 0000 4000                  	dc.b 0,	0, $40,	0
0001F7B8 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F7BC 0000 0513                  	dc.b 0,	0, 5, $13
0001F7C0 7801 8DCA                  	dc.l Map_obj78+$78000000
0001F7C4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F7C8 7901 9150                  	dc.l Map_obj79+$79000000
0001F7CC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F7D0                            	even
0001F7D0                            	even
0001F7D0                            
0001F7D0                            ; ---------------------------------------------------------------------------
0001F7D0                            ; Debug	list - Scrap Brain
0001F7D0                            ; ---------------------------------------------------------------------------
0001F7D0                            Debug_SBZ:
0001F7D0                            	include "_inc\Debug list - SBZ.asm"
0001F7D0                            ; ---------------------------------------------------------------------------
0001F7D0                            ; Debug	list - Scrap Brain
0001F7D0                            ; ---------------------------------------------------------------------------
0001F7D0 001D                       	dc.w $1D
0001F7D2 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F7D6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F7DA 2600 BFAA                  	dc.l Map_obj26+$26000000
0001F7DE 0000 0680                  	dc.b 0,	0, 6, $80
0001F7E2 5F01 370E                  	dc.l Map_obj5F+$5F000000
0001F7E6 0000 0400                  	dc.b 0,	0, 4, 0
0001F7EA 6001 39C4                  	dc.l Map_obj60+$60000000
0001F7EE 0000 0429                  	dc.b 0,	0, 4, $29
0001F7F2 7801 8DCA                  	dc.l Map_obj78+$78000000
0001F7F6 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F7FA 1501 2598                  	dc.l Map_obj15b+$15000000
0001F7FE 0702 4391                  	dc.b 7,	2, $43,	$91
0001F802 6701 76EA                  	dc.l Map_obj67+$67000000
0001F806 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F80A 5201 1B46                  	dc.l Map_obj52+$52000000
0001F80E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F812 3200 D8BA                  	dc.l Map_obj32+$32000000
0001F816 0000 0513                  	dc.b 0,	0, 5, $13
0001F81A 6901 7944                  	dc.l Map_obj69+$69000000
0001F81E 0300 4492                  	dc.b 3,	0, $44,	$92
0001F822 6901 799E                  	dc.l Map_obj69a+$69000000
0001F826 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F82A 6A01 7BFC                  	dc.l Map_obj6A+$6A000000
0001F82E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F832 5300 A130                  	dc.l Map_obj53+$53000000
0001F836 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F83A 5201 1B46                  	dc.l Map_obj52+$52000000
0001F83E 3903 4460                  	dc.b $39, 3, $44, $60
0001F842 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001F846 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F84A 2A00 A3D6                  	dc.l Map_obj2A+$2A000000
0001F84E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F852 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001F856 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F85A 6A01 7BFC                  	dc.l Map_obj6A+$6A000000
0001F85E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F862 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001F866 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F86A 6A01 7BFC                  	dc.l Map_obj6A+$6A000000
0001F86E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F872 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001F876 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F87A 6C01 818E                  	dc.l Map_obj6C+$6C000000
0001F87E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F882 6D01 00EC                  	dc.l Map_obj6D+$6D000000
0001F886 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F88A 6D01 00EC                  	dc.l Map_obj6D+$6D000000
0001F88E 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F892 6E01 8244                  	dc.l Map_obj6E+$6E000000
0001F896 0400 047E                  	dc.b 4,	0, 4, $7E
0001F89A 7001 868A                  	dc.l Map_obj70+$70000000
0001F89E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F8A2 7101 2FA4                  	dc.l Map_obj71+$71000000
0001F8A6 1100 8680                  	dc.b $11, 0, $86, $80
0001F8AA 1E00 A844                  	dc.l Map_obj1E+$1E000000
0001F8AE 0400 2302                  	dc.b 4,	0, $23,	2
0001F8B2 7901 9150                  	dc.l Map_obj79+$79000000
0001F8B6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F8BA                            	even
0001F8BA                            	even
0001F8BA                            
0001F8BA                            ; ---------------------------------------------------------------------------
0001F8BA                            ; Debug	list - ending sequence / special stage
0001F8BA                            ; ---------------------------------------------------------------------------
0001F8BA                            Debug_Ending:
0001F8BA                            	include "_inc\Debug list - Ending and SS.asm"
0001F8BA                            ; ---------------------------------------------------------------------------
0001F8BA                            ; Debug	list - ending sequence / special stage
0001F8BA                            ; ---------------------------------------------------------------------------
0001F8BA 000D                       	dc.w $D
0001F8BC 2500 B9AE                  	dc.l Map_obj25+$25000000
0001F8C0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F8C4 4701 05F6                  	dc.l Map_obj47+$47000000
0001F8C8 0000 0380                  	dc.b 0,	0, 3, $80
0001F8CC 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F8D0 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F8D4 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F8D8 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F8DC 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F8E0 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F8E4 2800 AE46                  	dc.l Map_obj28+$28000000
0001F8E8 0D00 0553                  	dc.b $D, 0, 5, $53
0001F8EC 2800 AE46                  	dc.l Map_obj28+$28000000
0001F8F0 0E00 0553                  	dc.b $E, 0, 5, $53
0001F8F4 2800 AE46                  	dc.l Map_obj28+$28000000
0001F8F8 0F00 0573                  	dc.b $F, 0, 5, $73
0001F8FC 2800 AE46                  	dc.l Map_obj28+$28000000
0001F900 1000 0573                  	dc.b $10, 0, 5,	$73
0001F904 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F908 1100 0585                  	dc.b $11, 0, 5,	$85
0001F90C 2800 AE76                  	dc.l Map_obj28b+$28000000
0001F910 1200 0593                  	dc.b $12, 0, 5,	$93
0001F914 2800 AE5E                  	dc.l Map_obj28a+$28000000
0001F918 1300 0565                  	dc.b $13, 0, 5,	$65
0001F91C 2800 AE76                  	dc.l Map_obj28b+$28000000
0001F920 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F924                            	even
0001F924                            	even
0001F924                            
0001F924                            ; ---------------------------------------------------------------------------
0001F924                            ; Main level load blocks
0001F924                            ; ---------------------------------------------------------------------------
0001F924                            MainLoadBlocks:
0001F924                            	include "_inc\Main level load blocks.asm"
0001F924                            ; ---------------------------------------------------------------------------
0001F924                            ; Main level load blocks
0001F924                            ;
0001F924                            ; ===FORMAT===
0001F924                            ; level	patterns + (1st	PLC num	* 10^6)
0001F924                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F924                            ; 256x256 mappings
0001F924                            ; blank, music (unused), pal index (unused), pal index
0001F924                            ; ---------------------------------------------------------------------------
0001F924 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F928 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F92C 0000 0000                  	dc.l Blk256_GHZ
0001F930 0081 0404                  	dc.b 0,	$81, 4,	4
0001F934 0000 0000                  	dc.l Nem_LZ+$6000000
0001F938 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F93C 0000 0000                  	dc.l Blk256_LZ
0001F940 0082 0505                  	dc.b 0,	$82, 5,	5
0001F944 0000 0000                  	dc.l Nem_MZ+$8000000
0001F948 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F94C 0000 0000                  	dc.l Blk256_MZ
0001F950 0083 0606                  	dc.b 0,	$83, 6,	6
0001F954 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F958 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F95C 0000 0000                  	dc.l Blk256_SLZ
0001F960 0084 0707                  	dc.b 0,	$84, 7,	7
0001F964 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F968 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F96C 0000 0000                  	dc.l Blk256_SYZ
0001F970 0085 0808                  	dc.b 0,	$85, 8,	8
0001F974 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F978 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F97C 0000 0000                  	dc.l Blk256_SBZ
0001F980 0086 0909                  	dc.b 0,	$86, 9,	9
0001F984 0000 0000                  	dc.l Nem_GHZ	; main load block for ending
0001F988 0000 0000                  	dc.l Blk16_GHZ
0001F98C 0000 0000                  	dc.l Blk256_GHZ
0001F990 0086 1313                  	dc.b 0,	$86, $13, $13
0001F994                            	even
0001F994                            	even
0001F994                            
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            ; Pattern load cues
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            ArtLoadCues:
0001F994                            	include "_inc\Pattern load cues.asm"
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            ; Pattern load cues - index
0001F994                            ; ---------------------------------------------------------------------------
0001F994 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F998 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F99C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F9A0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F9A4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F9A8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F9AC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F9B0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F9B4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F9B8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F9BC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F9C0 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F9C4 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F9C8 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F9CC 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F9D0 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4                            ; Pattern load cues - standard block 1
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4 0005                       PLC_Main:	dc.w 5
0001F9D6 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F9DA D800                       		dc.w $D800
0001F9DC 0000 0000                  		dc.l Nem_Hud		; HUD
0001F9E0 D940                       		dc.w $D940
0001F9E2 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F9E6 FA80                       		dc.w $FA80
0001F9E8 0000 0000                  		dc.l Nem_LivesPic	; lives	counter pic
0001F9EC ACA0                       		dc.w $ACA0
0001F9EE 0000 0000                  		dc.l Nem_Ring		; rings
0001F9F2 F640                       		dc.w $F640
0001F9F4 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F9F8 F2E0                       		dc.w $F2E0
0001F9FA                            ; ---------------------------------------------------------------------------
0001F9FA                            ; Pattern load cues - standard block 2
0001F9FA                            ; ---------------------------------------------------------------------------
0001F9FA 0000                       PLC_Main2:	dc.w 0
0001F9FC 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FA00 D000                       		dc.w $D000
0001FA02                            ; ---------------------------------------------------------------------------
0001FA02                            ; Pattern load cues - explosion
0001FA02                            ; ---------------------------------------------------------------------------
0001FA02 0000                       PLC_Explode:	dc.w 0
0001FA04 0000 0000                  		dc.l Nem_Explode	; explosion
0001FA08 B400                       		dc.w $B400
0001FA0A                            ; ---------------------------------------------------------------------------
0001FA0A                            ; Pattern load cues - game/time	over
0001FA0A                            ; ---------------------------------------------------------------------------
0001FA0A 0000                       PLC_GameOver:	dc.w 0
0001FA0C 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FA10 ABC0                       		dc.w $ABC0
0001FA12                            ; ---------------------------------------------------------------------------
0001FA12                            ; Pattern load cues - Green Hill
0001FA12                            ; ---------------------------------------------------------------------------
0001FA12 000A                       PLC_GHZ:	dc.w $A
0001FA14 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001FA18 0000                       		dc.w 0
0001FA1A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FA1E 6B00                       		dc.w $6B00
0001FA20 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FA24 7A00                       		dc.w $7A00
0001FA26 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FA2A 8000                       		dc.w $8000
0001FA2C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA30 8880                       		dc.w $8880
0001FA32 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FA36 8F60                       		dc.w $8F60
0001FA38 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FA3C 9360                       		dc.w $9360
0001FA3E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FA42 9E00                       		dc.w $9E00
0001FA44 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA48 A360                       		dc.w $A360
0001FA4A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA4E A460                       		dc.w $A460
0001FA50 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA54 A660                       		dc.w $A660
0001FA56 0005                       PLC_GHZ2:	dc.w 5
0001FA58 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FA5C 7000                       		dc.w $7000
0001FA5E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FA62 71C0                       		dc.w $71C0
0001FA64 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FA68 7300                       		dc.w $7300
0001FA6A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FA6E 7540                       		dc.w $7540
0001FA70 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FA74 A1E0                       		dc.w $A1E0
0001FA76 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FA7A 6980                       		dc.w $6980
0001FA7C                            ; ---------------------------------------------------------------------------
0001FA7C                            ; Pattern load cues - Labyrinth
0001FA7C                            ; ---------------------------------------------------------------------------
0001FA7C 000B                       PLC_LZ:		dc.w $B
0001FA7E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001FA82 0000                       		dc.w 0
0001FA84 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FA88 3C00                       		dc.w $3C00
0001FA8A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FA8E 3E00                       		dc.w $3E00
0001FA90 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FA94 4B20                       		dc.w $4B20
0001FA96 0000 0000                  		dc.l Nem_Water		; water	surface
0001FA9A 6000                       		dc.w $6000
0001FA9C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FAA0 6200                       		dc.w $6200
0001FAA2 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FAA6 6500                       		dc.w $6500
0001FAA8 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FAAC 6900                       		dc.w $6900
0001FAAE 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FAB2 7780                       		dc.w $7780
0001FAB4 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FAB8 7880                       		dc.w $7880
0001FABA 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FABE 7980                       		dc.w $7980
0001FAC0 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FAC4 94C0                       		dc.w $94C0
0001FAC6 000C                       PLC_LZ2:	dc.w $C
0001FAC8 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FACC 7BC0                       		dc.w $7BC0
0001FACE 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FAD2 7CC0                       		dc.w $7CC0
0001FAD4 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FAD8 7EC0                       		dc.w $7EC0
0001FADA 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FADE 5D20                       		dc.w $5D20
0001FAE0 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FAE4 8800                       		dc.w $8800
0001FAE6 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FAEA 89E0                       		dc.w $89E0
0001FAEC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FAF0 8CE0                       		dc.w $8CE0
0001FAF2 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FAF6 90C0                       		dc.w $90C0
0001FAF8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FAFC A1E0                       		dc.w $A1E0
0001FAFE 0000 0000                  		dc.l Nem_Cork		; cork block
0001FB02 A000                       		dc.w $A000
0001FB04 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB08 A360                       		dc.w $A360
0001FB0A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB0E A460                       		dc.w $A460
0001FB10 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB14 A660                       		dc.w $A660
0001FB16                            ; ---------------------------------------------------------------------------
0001FB16                            ; Pattern load cues - Marble
0001FB16                            ; ---------------------------------------------------------------------------
0001FB16 0009                       PLC_MZ:		dc.w 9
0001FB18 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001FB1C 0000                       		dc.w 0
0001FB1E 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FB22 6000                       		dc.w $6000
0001FB24 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FB28 68A0                       		dc.w $68A0
0001FB2A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FB2E 7000                       		dc.w $7000
0001FB30 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FB34 71C0                       		dc.w $71C0
0001FB36 0000 0000                  		dc.l Nem_Lava		; lava
0001FB3A 7500                       		dc.w $7500
0001FB3C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FB40 8880                       		dc.w $8880
0001FB42 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FB46 8F60                       		dc.w $8F60
0001FB48 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FB4C 9700                       		dc.w $9700
0001FB4E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FB52 9FE0                       		dc.w $9FE0
0001FB54 0004                       PLC_MZ2:	dc.w 4
0001FB56 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FB5A A260                       		dc.w $A260
0001FB5C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB60 A360                       		dc.w $A360
0001FB62 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB66 A460                       		dc.w $A460
0001FB68 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB6C A660                       		dc.w $A660
0001FB6E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FB72 5700                       		dc.w $5700
0001FB74                            ; ---------------------------------------------------------------------------
0001FB74                            ; Pattern load cues - Star Light
0001FB74                            ; ---------------------------------------------------------------------------
0001FB74 0008                       PLC_SLZ:	dc.w 8
0001FB76 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001FB7A 0000                       		dc.w 0
0001FB7C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FB80 8000                       		dc.w $8000
0001FB82 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB86 8520                       		dc.w $8520
0001FB88 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FB8C 9000                       		dc.w $9000
0001FB8E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FB92 9C00                       		dc.w $9C00
0001FB94 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FB98 A260                       		dc.w $A260
0001FB9A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB9E A360                       		dc.w $A360
0001FBA0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBA4 A460                       		dc.w $A460
0001FBA6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBAA A660                       		dc.w $A660
0001FBAC 0005                       PLC_SLZ2:	dc.w 5
0001FBAE 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FBB2 6E80                       		dc.w $6E80
0001FBB4 0000 0000                  		dc.l Nem_Fan		; fan
0001FBB8 7400                       		dc.w $7400
0001FBBA 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FBBE 7980                       		dc.w $7980
0001FBC0 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FBC4 7B80                       		dc.w $7B80
0001FBC6 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FBCA 9B00                       		dc.w $9B00
0001FBCC 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FBD0 9E00                       		dc.w $9E00
0001FBD2                            ; ---------------------------------------------------------------------------
0001FBD2                            ; Pattern load cues - Spring Yard
0001FBD2                            ; ---------------------------------------------------------------------------
0001FBD2 0004                       PLC_SYZ:	dc.w 4
0001FBD4 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001FBD8 0000                       		dc.w 0
0001FBDA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FBDE 8000                       		dc.w $8000
0001FBE0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FBE4 8880                       		dc.w $8880
0001FBE6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FBEA 8F60                       		dc.w $8F60
0001FBEC 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FBF0 9700                       		dc.w $9700
0001FBF2 0007                       PLC_SYZ2:	dc.w 7
0001FBF4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FBF8 7000                       		dc.w $7000
0001FBFA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FBFE 72C0                       		dc.w $72C0
0001FC00 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FC04 7740                       		dc.w $7740
0001FC06 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FC0A 9FE0                       		dc.w $9FE0
0001FC0C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC10 A1E0                       		dc.w $A1E0
0001FC12 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC16 A360                       		dc.w $A360
0001FC18 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC1C A460                       		dc.w $A460
0001FC1E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC22 A660                       		dc.w $A660
0001FC24                            ; ---------------------------------------------------------------------------
0001FC24                            ; Pattern load cues - Scrap Brain
0001FC24                            ; ---------------------------------------------------------------------------
0001FC24 000B                       PLC_SBZ:	dc.w $B
0001FC26 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001FC2A 0000                       		dc.w 0
0001FC2C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FC30 5800                       		dc.w $5800
0001FC32 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FC36 5D00                       		dc.w $5D00
0001FC38 0000 0000                  		dc.l Nem_Girder		; girder
0001FC3C 5E00                       		dc.w $5E00
0001FC3E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FC42 6040                       		dc.w $6040
0001FC44 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FC48 6880                       		dc.w $6880
0001FC4A 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FC4E 6900                       		dc.w $6900
0001FC50 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FC54 7220                       		dc.w $7220
0001FC56 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FC5A 76A0                       		dc.w $76A0
0001FC5C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FC60 7B20                       		dc.w $7B20
0001FC62 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC66 7EA0                       		dc.w $7EA0
0001FC68 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FC6C 9860                       		dc.w $9860
0001FC6E 000C                       PLC_SBZ2:	dc.w $C
0001FC70 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FC74 5600                       		dc.w $5600
0001FC76 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FC7A 8000                       		dc.w $8000
0001FC7C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC80 8520                       		dc.w $8520
0001FC82 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FC86 8C00                       		dc.w $8C00
0001FC88 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FC8C 8DE0                       		dc.w $8DE0
0001FC8E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FC92 8FC0                       		dc.w $8FC0
0001FC94 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FC98 9240                       		dc.w $9240
0001FC9A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC9E 7F20                       		dc.w $7F20
0001FCA0 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FCA4 9BE0                       		dc.w $9BE0
0001FCA6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FCAA A1E0                       		dc.w $A1E0
0001FCAC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCB0 A360                       		dc.w $A360
0001FCB2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCB6 A460                       		dc.w $A460
0001FCB8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCBC A660                       		dc.w $A660
0001FCBE                            ; ---------------------------------------------------------------------------
0001FCBE                            ; Pattern load cues - title card
0001FCBE                            ; ---------------------------------------------------------------------------
0001FCBE 0000                       PLC_TitleCard:	dc.w 0
0001FCC0 0000 0000                  		dc.l Nem_TitleCard
0001FCC4 B000                       		dc.w $B000
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6                            ; Pattern load cues - act 3 boss
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6 0005                       PLC_Boss:	dc.w 5
0001FCC8 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FCCC 8000                       		dc.w $8000
0001FCCE 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FCD2 8D80                       		dc.w $8D80
0001FCD4 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FCD8 93A0                       		dc.w $93A0
0001FCDA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FCDE A300                       		dc.w $A300
0001FCE0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FCE4 A300                       		dc.w $A300
0001FCE6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FCEA A540                       		dc.w $A540
0001FCEC                            ; ---------------------------------------------------------------------------
0001FCEC                            ; Pattern load cues - act 1/2 signpost
0001FCEC                            ; ---------------------------------------------------------------------------
0001FCEC 0002                       PLC_Signpost:	dc.w 2
0001FCEE 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FCF2 D000                       		dc.w $680*$20
0001FCF4 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FCF8 96C0                       		dc.w $96C0
0001FCFA 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FCFE 8C40                       		dc.w $8C40
0001FD00                            ; ---------------------------------------------------------------------------
0001FD00                            ; Pattern load cues - beta special stage warp effect
0001FD00                            ; ---------------------------------------------------------------------------
0001FD00 0000                       PLC_Warp:	dc.w 0
0001FD02 0000 0000                  		dc.l Nem_Warp
0001FD06 A820                       		dc.w $A820
0001FD08                            ; ---------------------------------------------------------------------------
0001FD08                            ; Pattern load cues - special stage
0001FD08                            ; ---------------------------------------------------------------------------
0001FD08 0010                       PLC_SpeStage:	dc.w $10
0001FD0A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FD0E 0000                       		dc.w 0
0001FD10 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FD14 0A20                       		dc.w $A20
0001FD16 0000 0000                  		dc.l Nem_SSWalls	; walls
0001FD1A 2840                       		dc.w $2840
0001FD1C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FD20 4760                       		dc.w $4760
0001FD22 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FD26 4A20                       		dc.w $4A20
0001FD28 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FD2C 4C60                       		dc.w $4C60
0001FD2E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FD32 5E00                       		dc.w $5E00
0001FD34 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FD38 6E00                       		dc.w $6E00
0001FD3A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FD3E 7E00                       		dc.w $7E00
0001FD40 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FD44 8E00                       		dc.w $8E00
0001FD46 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FD4A 9E00                       		dc.w $9E00
0001FD4C 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001FD50 AE00                       		dc.w $AE00
0001FD52 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FD56 BE00                       		dc.w $BE00
0001FD58 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FD5C EE00                       		dc.w $EE00
0001FD5E 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001FD62 F2E0                       		dc.w $F2E0
0001FD64 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001FD68 F400                       		dc.w $F400
0001FD6A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001FD6E F520                       		dc.w $F520
0001FD70 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001FD74 F2E0                       		dc.w $F2E0
0001FD76 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001FD7A F400                       		dc.w $F400
0001FD7C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001FD80 F520                       		dc.w $F520
0001FD82                            ; ---------------------------------------------------------------------------
0001FD82                            ; Pattern load cues - GHZ animals
0001FD82                            ; ---------------------------------------------------------------------------
0001FD82 0001                       PLC_GHZAnimals:	dc.w 1
0001FD84 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FD88 B000                       		dc.w $B000
0001FD8A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FD8E B240                       		dc.w $B240
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            ; Pattern load cues - LZ animals
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90 0001                       PLC_LZAnimals:	dc.w 1
0001FD92 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FD96 B000                       		dc.w $B000
0001FD98 0000 0000                  		dc.l Nem_Seal		; seal
0001FD9C B240                       		dc.w $B240
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E                            ; Pattern load cues - MZ animals
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E 0001                       PLC_MZAnimals:	dc.w 1
0001FDA0 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FDA4 B000                       		dc.w $B000
0001FDA6 0000 0000                  		dc.l Nem_Seal		; seal
0001FDAA B240                       		dc.w $B240
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC                            ; Pattern load cues - SLZ animals
0001FDAC                            ; ---------------------------------------------------------------------------
0001FDAC 0001                       PLC_SLZAnimals:	dc.w 1
0001FDAE 0000 0000                  		dc.l Nem_Pig		; pig
0001FDB2 B000                       		dc.w $B000
0001FDB4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FDB8 B240                       		dc.w $B240
0001FDBA                            ; ---------------------------------------------------------------------------
0001FDBA                            ; Pattern load cues - SYZ animals
0001FDBA                            ; ---------------------------------------------------------------------------
0001FDBA 0001                       PLC_SYZAnimals:	dc.w 1
0001FDBC 0000 0000                  		dc.l Nem_Pig		; pig
0001FDC0 B000                       		dc.w $B000
0001FDC2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FDC6 B240                       		dc.w $B240
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8                            ; Pattern load cues - SBZ animals
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8 0001                       PLC_SBZAnimals:	dc.w 1
0001FDCA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FDCE B000                       		dc.w $B000
0001FDD0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FDD4 B240                       		dc.w $B240
0001FDD6                            ; ---------------------------------------------------------------------------
0001FDD6                            ; Pattern load cues - special stage results screen
0001FDD6                            ; ---------------------------------------------------------------------------
0001FDD6 0001                       PLC_SpeStResult:dc.w 1
0001FDD8 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FDDC A820                       		dc.w $A820
0001FDDE 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FDE2 AA20                       		dc.w $AA20
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4                            ; Pattern load cues - ending sequence
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4 000E                       PLC_Ending:	dc.w $E
0001FDE6 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001FDEA 0000                       		dc.w 0
0001FDEC 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001FDF0 39A0                       		dc.w $39A0
0001FDF2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FDF6 6B00                       		dc.w $6B00
0001FDF8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FDFC 7400                       		dc.w $7400
0001FDFE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FE02 78A0                       		dc.w $78A0
0001FE04 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FE08 7C20                       		dc.w $7C20
0001FE0A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FE0E A480                       		dc.w $A480
0001FE10 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE14 AA60                       		dc.w $AA60
0001FE16 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE1A ACA0                       		dc.w $ACA0
0001FE1C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FE20 AE60                       		dc.w $AE60
0001FE22 0000 0000                  		dc.l Nem_Seal		; seal
0001FE26 B0A0                       		dc.w $B0A0
0001FE28 0000 0000                  		dc.l Nem_Pig		; pig
0001FE2C B260                       		dc.w $B260
0001FE2E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE32 B4A0                       		dc.w $B4A0
0001FE34 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FE38 B660                       		dc.w $B660
0001FE3A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FE3E B8A0                       		dc.w $B8A0
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40 0002                       PLC_TryAgain:	dc.w 2
0001FE42 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FE46 78A0                       		dc.w $78A0
0001FE48 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FE4C 7C20                       		dc.w $7C20
0001FE4E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FE52 B400                       		dc.w $B400
0001FE54                            ; ---------------------------------------------------------------------------
0001FE54                            ; Pattern load cues - Eggman on SBZ 2
0001FE54                            ; ---------------------------------------------------------------------------
0001FE54 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FE56 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FE5A A300                       		dc.w $A300
0001FE5C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FE60 8000                       		dc.w $8000
0001FE62 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FE66 9400                       		dc.w $9400
0001FE68                            ; ---------------------------------------------------------------------------
0001FE68                            ; Pattern load cues - final boss
0001FE68                            ; ---------------------------------------------------------------------------
0001FE68 0004                       PLC_FZBoss:	dc.w 4
0001FE6A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FE6E 7400                       		dc.w $7400
0001FE70 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FE74 6000                       		dc.w $6000
0001FE76 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FE7A 8000                       		dc.w $8000
0001FE7C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FE80 8E00                       		dc.w $8E00
0001FE82 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FE86 A540                       		dc.w $A540
0001FE88                            		even
0001FE88                            		even
0001FE88                            	even
0001FE88                            
0001FE88                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000202EA                            		even
000202EA                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000203E2                            		even
000203E2                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000204F6                            		even
000204F6                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021502                            		even
00021502                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022ED0                            		even
00022ED0                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022F04                            		even
00022F04                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022FC2                            		even
00022FC2                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002346A                            		even
0002346A                            ; ---------------------------------------------------------------------------
0002346A                            ; Sprite mappings - Sonic
0002346A                            ; ---------------------------------------------------------------------------
0002346A                            Map_Sonic:
0002346A                            	include "_maps\Sonic.asm"
0002346A                            ; --------------------------------------------------------------------------------
0002346A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002346A                            ; --------------------------------------------------------------------------------
0002346A                            
0002346A                            SME_igx_h:	
0002346A 0000 0000                  		dc.w SME_igx_h_94-SME_igx_h, SME_igx_h_95-SME_igx_h	
0002346E 0000 0000                  		dc.w SME_igx_h_AA-SME_igx_h, SME_igx_h_CE-SME_igx_h	
00023472 0000 0000                  		dc.w SME_igx_h_DE-SME_igx_h, SME_igx_h_EE-SME_igx_h	
00023476 0000 0000                  		dc.w SME_igx_h_FE-SME_igx_h, SME_igx_h_113-SME_igx_h	
0002347A 0000 0000                  		dc.w SME_igx_h_11E-SME_igx_h, SME_igx_h_129-SME_igx_h	
0002347E 0000 0000                  		dc.w SME_igx_h_13E-SME_igx_h, SME_igx_h_149-SME_igx_h	
00023482 0000 0000                  		dc.w SME_igx_h_159-SME_igx_h, SME_igx_h_173-SME_igx_h	
00023486 0000 0000                  		dc.w SME_igx_h_192-SME_igx_h, SME_igx_h_1A7-SME_igx_h	
0002348A 0000 0000                  		dc.w SME_igx_h_1C1-SME_igx_h, SME_igx_h_1D6-SME_igx_h	
0002348E 0000 0000                  		dc.w SME_igx_h_1F0-SME_igx_h, SME_igx_h_205-SME_igx_h	
00023492 0000 0000                  		dc.w SME_igx_h_210-SME_igx_h, SME_igx_h_21B-SME_igx_h	
00023496 0000 0000                  		dc.w SME_igx_h_230-SME_igx_h, SME_igx_h_23B-SME_igx_h	
0002349A 0000 0000                  		dc.w SME_igx_h_24B-SME_igx_h, SME_igx_h_26A-SME_igx_h	
0002349E 0000 0000                  		dc.w SME_igx_h_289-SME_igx_h, SME_igx_h_29E-SME_igx_h	
000234A2 0000 0000                  		dc.w SME_igx_h_2B8-SME_igx_h, SME_igx_h_2CD-SME_igx_h	
000234A6 0000 0000                  		dc.w SME_igx_h_2E7-SME_igx_h, SME_igx_h_2F2-SME_igx_h	
000234AA 0000 0000                  		dc.w SME_igx_h_2FD-SME_igx_h, SME_igx_h_308-SME_igx_h	
000234AE 0000 0000                  		dc.w SME_igx_h_313-SME_igx_h, SME_igx_h_328-SME_igx_h	
000234B2 0000 0000                  		dc.w SME_igx_h_33D-SME_igx_h, SME_igx_h_35C-SME_igx_h	
000234B6 0000 0000                  		dc.w SME_igx_h_37B-SME_igx_h, SME_igx_h_386-SME_igx_h	
000234BA 0000 0000                  		dc.w SME_igx_h_391-SME_igx_h, SME_igx_h_39C-SME_igx_h	
000234BE 0000 0000                  		dc.w SME_igx_h_3A7-SME_igx_h, SME_igx_h_3BC-SME_igx_h	
000234C2 0000 0000                  		dc.w SME_igx_h_3CC-SME_igx_h, SME_igx_h_3E1-SME_igx_h	
000234C6 0000 0000                  		dc.w SME_igx_h_3F1-SME_igx_h, SME_igx_h_3FC-SME_igx_h	
000234CA 0000 0000                  		dc.w SME_igx_h_411-SME_igx_h, SME_igx_h_421-SME_igx_h	
000234CE 0000 0000                  		dc.w SME_igx_h_42C-SME_igx_h, SME_igx_h_441-SME_igx_h	
000234D2 0000 0000                  		dc.w SME_igx_h_456-SME_igx_h, SME_igx_h_466-SME_igx_h	
000234D6 0000 0000                  		dc.w SME_igx_h_476-SME_igx_h, SME_igx_h_486-SME_igx_h	
000234DA 0000 0000                  		dc.w SME_igx_h_491-SME_igx_h, SME_igx_h_4A1-SME_igx_h	
000234DE 0000 0000                  		dc.w SME_igx_h_4B1-SME_igx_h, SME_igx_h_4C6-SME_igx_h	
000234E2 0000 0000                  		dc.w SME_igx_h_4DB-SME_igx_h, SME_igx_h_4E6-SME_igx_h	
000234E6 0000 0000                  		dc.w SME_igx_h_4F6-SME_igx_h, SME_igx_h_501-SME_igx_h	
000234EA 0000 0000                  		dc.w SME_igx_h_511-SME_igx_h, SME_igx_h_52B-SME_igx_h	
000234EE 0000 0000                  		dc.w SME_igx_h_545-SME_igx_h, SME_igx_h_555-SME_igx_h	
000234F2 0000 0000                  		dc.w SME_igx_h_565-SME_igx_h, SME_igx_h_575-SME_igx_h	
000234F6 0000 0000                  		dc.w SME_igx_h_580-SME_igx_h, SME_igx_h_590-SME_igx_h	
000234FA 0000 0000                  		dc.w SME_igx_h_5A5-SME_igx_h, SME_igx_h_5CE-SME_igx_h	
000234FE 00                         SME_igx_h_94:	dc.b 0	
000234FF 04                         SME_igx_h_95:	dc.b 4	
00023500 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00023505 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002350A 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
0002350F F409 0009 F0               		dc.b $F4, 9, 0, 9, $F0	
00023514 07                         SME_igx_h_AA:	dc.b 7	
00023515 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002351A EC09 0003 F0               		dc.b $EC, 9, 0, 3, $F0	
0002351F 0400 0009 00               		dc.b 4, 0, 0, 9, 0	
00023524 FC00 000A 00               		dc.b $FC, 0, 0, $A, 0	
00023529 FC01 000B F0               		dc.b $FC, 1, 0, $B, $F0	
0002352E 0400 000D F8               		dc.b 4, 0, 0, $D, $F8	
00023533 FC00 000E F8               		dc.b $FC, 0, 0, $E, $F8	
00023538 03                         SME_igx_h_CE:	dc.b 3	
00023539 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002353E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023543 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023548 03                         SME_igx_h_DE:	dc.b 3	
00023549 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002354E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023553 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023558 03                         SME_igx_h_EE:	dc.b 3	
00023559 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
0002355E 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00023563 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023568 04                         SME_igx_h_FE:	dc.b 4	
00023569 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
0002356E FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
00023573 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
00023578 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
0002357D 02                         SME_igx_h_113:	dc.b 2	
0002357E EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023583 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
00023588 02                         SME_igx_h_11E:	dc.b 2	
00023589 ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
0002358E FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
00023593 04                         SME_igx_h_129:	dc.b 4	
00023594 EB09 0000 F3               		dc.b $EB, 9, 0, 0, $F3	
00023599 FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
0002359E FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
000235A3 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
000235A8 02                         SME_igx_h_13E:	dc.b 2	
000235A9 EC09 0000 F2               		dc.b $EC, 9, 0, 0, $F2	
000235AE FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
000235B3 03                         SME_igx_h_149:	dc.b 3	
000235B4 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
000235B9 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
000235BE 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
000235C3 05                         SME_igx_h_159:	dc.b 5	
000235C4 EB06 0000 03               		dc.b $EB, 6, 0, 0, 3	
000235C9 FB08 0006 EB               		dc.b $FB, 8, 0, 6, $EB	
000235CE 0309 0009 F3               		dc.b 3, 9, 0, 9, $F3	
000235D3 1300 000F FB               		dc.b $13, 0, 0, $F, $FB	
000235D8 EB09 0010 EB               		dc.b $EB, 9, 0, $10, $EB	
000235DD 06                         SME_igx_h_173:	dc.b 6	
000235DE EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000235E3 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
000235E8 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
000235ED 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
000235F2 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
000235F7 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
000235FC 04                         SME_igx_h_192:	dc.b 4	
000235FD ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023602 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00023607 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
0002360C 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
00023611 05                         SME_igx_h_1A7:	dc.b 5	
00023612 EB05 0000 03               		dc.b $EB, 5, 0, 0, 3	
00023617 FB0D 0004 F3               		dc.b $FB, $D, 0, 4, $F3	
0002361C 0B08 000C F3               		dc.b $B, 8, 0, $C, $F3	
00023621 1304 000F FB               		dc.b $13, 4, 0, $F, $FB	
00023626 EB09 0011 EB               		dc.b $EB, 9, 0, $11, $EB	
0002362B 04                         SME_igx_h_1C1:	dc.b 4	
0002362C EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023631 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00023636 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002363B 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
00023640 05                         SME_igx_h_1D6:	dc.b 5	
00023641 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023646 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002364B FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
00023650 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
00023655 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
0002365A 04                         SME_igx_h_1F0:	dc.b 4	
0002365B F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00023660 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023665 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
0002366A 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
0002366F 02                         SME_igx_h_205:	dc.b 2	
00023670 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023675 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002367A 02                         SME_igx_h_210:	dc.b 2	
0002367B F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
00023680 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
00023685 04                         SME_igx_h_21B:	dc.b 4	
00023686 F506 0000 EB               		dc.b $F5, 6, 0, 0, $EB	
0002368B EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
00023690 FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
00023695 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
0002369A 02                         SME_igx_h_230:	dc.b 2	
0002369B F506 0000 EC               		dc.b $F5, 6, 0, 0, $EC	
000236A0 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
000236A5 03                         SME_igx_h_23B:	dc.b 3	
000236A6 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000236AB EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000236B0 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000236B5 06                         SME_igx_h_24B:	dc.b 6	
000236B6 ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
000236BB F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
000236C0 F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
000236C5 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
000236CA FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
000236CF FD06 000F EB               		dc.b $FD, 6, 0, $F, $EB	
000236D4 06                         SME_igx_h_26A:	dc.b 6	
000236D5 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000236DA E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
000236DF EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
000236E4 F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
000236E9 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
000236EE 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
000236F3 04                         SME_igx_h_289:	dc.b 4	
000236F4 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
000236F9 F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
000236FE EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
00023703 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00023708 05                         SME_igx_h_29E:	dc.b 5	
00023709 ED08 0000 F3               		dc.b $ED, 8, 0, 0, $F3	
0002370E F504 0003 EB               		dc.b $F5, 4, 0, 3, $EB	
00023713 F50D 0005 FB               		dc.b $F5, $D, 0, 5, $FB	
00023718 0508 000D FB               		dc.b 5, 8, 0, $D, $FB	
0002371D FD06 0010 EB               		dc.b $FD, 6, 0, $10, $EB	
00023722 04                         SME_igx_h_2B8:	dc.b 4	
00023723 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
00023728 F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
0002372D EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
00023732 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
00023737 05                         SME_igx_h_2CD:	dc.b 5	
00023738 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002373D EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
00023742 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
00023747 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002374C 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
00023751 02                         SME_igx_h_2E7:	dc.b 2	
00023752 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023757 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002375C 02                         SME_igx_h_2F2:	dc.b 2	
0002375D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023762 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00023767 02                         SME_igx_h_2FD:	dc.b 2	
00023768 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002376D FE0E 0006 ED               		dc.b $FE, $E, 0, 6, $ED	
00023772 02                         SME_igx_h_308:	dc.b 2	
00023773 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023778 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002377D 04                         SME_igx_h_313:	dc.b 4	
0002377E EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023783 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00023788 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002378D FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023792 04                         SME_igx_h_328:	dc.b 4	
00023793 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023798 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002379D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000237A2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000237A7 06                         SME_igx_h_33D:	dc.b 6	
000237A8 EE01 0000 06               		dc.b $EE, 1, 0, 0, 6	
000237AD FE0E 0002 F6               		dc.b $FE, $E, 0, 2, $F6	
000237B2 EE01 000E FE               		dc.b $EE, 1, 0, $E, $FE	
000237B7 FE00 0010 EE               		dc.b $FE, 0, 0, $10, $EE	
000237BC EE01 0011 F6               		dc.b $EE, 1, 0, $11, $F6	
000237C1 EE01 0013 EE               		dc.b $EE, 1, 0, $13, $EE	
000237C6 06                         SME_igx_h_35C:	dc.b 6	
000237C7 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000237CC F604 000C F6               		dc.b $F6, 4, 0, $C, $F6	
000237D1 EE04 000E F6               		dc.b $EE, 4, 0, $E, $F6	
000237D6 EE01 0010 EE               		dc.b $EE, 1, 0, $10, $EE	
000237DB EE01 0012 06               		dc.b $EE, 1, 0, $12, 6	
000237E0 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000237E5 02                         SME_igx_h_37B:	dc.b 2	
000237E6 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237EB F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000237F0 02                         SME_igx_h_386:	dc.b 2	
000237F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000237F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000237FB 02                         SME_igx_h_391:	dc.b 2	
000237FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00023801 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023806 02                         SME_igx_h_39C:	dc.b 2	
00023807 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002380C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00023811 04                         SME_igx_h_3A7:	dc.b 4	
00023812 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00023817 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002381C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023821 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023826 03                         SME_igx_h_3BC:	dc.b 3	
00023827 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002382C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023831 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023836 04                         SME_igx_h_3CC:	dc.b 4	
00023837 F204 0000 EE               		dc.b $F2, 4, 0, 0, $EE	
0002383C EA0B 0002 FE               		dc.b $EA, $B, 0, 2, $FE	
00023841 0A00 000E FE               		dc.b $A, 0, 0, $E, $FE	
00023846 FA06 000F EE               		dc.b $FA, 6, 0, $F, $EE	
0002384B 03                         SME_igx_h_3E1:	dc.b 3	
0002384C EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00023851 0A00 000C FE               		dc.b $A, 0, 0, $C, $FE	
00023856 F207 000D EE               		dc.b $F2, 7, 0, $D, $EE	
0002385B 02                         SME_igx_h_3F1:	dc.b 2	
0002385C 100C 0000 F4               		dc.b $10, $C, 0, 0, $F4	
00023861 F00B 0004 F4               		dc.b $F0, $B, 0, 4, $F4	
00023866 04                         SME_igx_h_3FC:	dc.b 4	
00023867 0F0C 0000 F3               		dc.b $F, $C, 0, 0, $F3	
0002386C EF07 0004 F3               		dc.b $EF, 7, 0, 4, $F3	
00023871 EF03 000C 03               		dc.b $EF, 3, 0, $C, 3	
00023876 EF02 0010 0B               		dc.b $EF, 2, 0, $10, $B	
0002387B 03                         SME_igx_h_411:	dc.b 3	
0002387C 0D0C 0000 F3               		dc.b $D, $C, 0, 0, $F3	
00023881 ED0B 0004 F3               		dc.b $ED, $B, 0, 4, $F3	
00023886 ED02 0010 0B               		dc.b $ED, 2, 0, $10, $B	
0002388B 02                         SME_igx_h_421:	dc.b 2	
0002388C ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00023891 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00023896 04                         SME_igx_h_42C:	dc.b 4	
00023897 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002389C FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000238A1 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000238A6 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
000238AB 04                         SME_igx_h_441:	dc.b 4	
000238AC F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
000238B1 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
000238B6 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
000238BB 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
000238C0 03                         SME_igx_h_456:	dc.b 3	
000238C1 EC08 0800 E0               		dc.b $EC, 8, 8, 0, $E0	
000238C6 F402 0803 F8               		dc.b $F4, 2, 8, 3, $F8	
000238CB F40F 0806 D8               		dc.b $F4, $F, 8, 6, $D8	
000238D0 03                         SME_igx_h_466:	dc.b 3	
000238D1 EC0E 0800 E0               		dc.b $EC, $E, 8, 0, $E0	
000238D6 040D 080C D8               		dc.b 4, $D, 8, $C, $D8	
000238DB 0C00 1814 F8               		dc.b $C, 0, $18, $14, $F8	
000238E0 03                         SME_igx_h_476:	dc.b 3	
000238E1 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000238E6 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000238EB 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000238F0 02                         SME_igx_h_486:	dc.b 2	
000238F1 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
000238F6 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
000238FB 03                         SME_igx_h_491:	dc.b 3	
000238FC F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
00023901 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
00023906 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
0002390B 03                         SME_igx_h_4A1:	dc.b 3	
0002390C E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
00023911 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
00023916 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
0002391B 04                         SME_igx_h_4B1:	dc.b 4	
0002391C F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023921 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00023926 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
0002392B F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023930 04                         SME_igx_h_4C6:	dc.b 4	
00023931 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023936 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
0002393B F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00023940 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023945 02                         SME_igx_h_4DB:	dc.b 2	
00023946 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002394B 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023950 03                         SME_igx_h_4E6:	dc.b 3	
00023951 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023956 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002395B 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023960 02                         SME_igx_h_4F6:	dc.b 2	
00023961 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00023966 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002396B 03                         SME_igx_h_501:	dc.b 3	
0002396C EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023971 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00023976 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002397B 05                         SME_igx_h_511:	dc.b 5	
0002397C E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023981 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023986 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
0002398B 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023990 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023995 05                         SME_igx_h_52B:	dc.b 5	
00023996 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002399B E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000239A0 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000239A5 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
000239AA 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
000239AF 03                         SME_igx_h_545:	dc.b 3	
000239B0 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
000239B5 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
000239BA 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
000239BF 03                         SME_igx_h_555:	dc.b 3	
000239C0 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000239C5 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000239CA 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000239CF 03                         SME_igx_h_565:	dc.b 3	
000239D0 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
000239D5 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
000239DA 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
000239DF 02                         SME_igx_h_575:	dc.b 2	
000239E0 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
000239E5 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
000239EA 03                         SME_igx_h_580:	dc.b 3	
000239EB EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000239F0 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000239F5 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
000239FA 04                         SME_igx_h_590:	dc.b 4	
000239FB F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023A00 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00023A05 F800 0012 0C               		dc.b $F8, 0, 0, $12, $C	
00023A0A 0801 0013 0C               		dc.b 8, 1, 0, $13, $C	
00023A0F 08                         SME_igx_h_5A5:	dc.b 8	
00023A10 1100 0000 F4               		dc.b $11, 0, 0, 0, $F4	
00023A15 0908 0001 F4               		dc.b 9, 8, 0, 1, $F4	
00023A1A F901 0004 0C               		dc.b $F9, 1, 0, 4, $C	
00023A1F F101 0006 EC               		dc.b $F1, 1, 0, 6, $EC	
00023A24 F102 0008 F4               		dc.b $F1, 2, 0, 8, $F4	
00023A29 E903 000B FC               		dc.b $E9, 3, 0, $B, $FC	
00023A2E F102 000F 04               		dc.b $F1, 2, 0, $F, 4	
00023A33 E900 0012 04               		dc.b $E9, 0, 0, $12, 4	
00023A38 01                         SME_igx_h_5CE:	dc.b 1	
00023A39 EA0B 0000 F3               		dc.b $EA, $B, 0, 0, $F3	
00023A3E                            		even
00023A3E                            		even
00023A3E                            
00023A3E                            ; ---------------------------------------------------------------------------
00023A3E                            ; Uncompressed graphics	loading	array for Sonic
00023A3E                            ; ---------------------------------------------------------------------------
00023A3E                            SonicDynPLC:
00023A3E                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023A3E                            ; --------------------------------------------------------------------------------
00023A3E                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023A3E                            
00023A3E                            SME_Z3Iyr:	
00023A3E 0000 0000                  		dc.w SME_Z3Iyr_94-SME_Z3Iyr, SME_Z3Iyr_95-SME_Z3Iyr	
00023A42 0000 0000                  		dc.w SME_Z3Iyr_9E-SME_Z3Iyr, SME_Z3Iyr_AD-SME_Z3Iyr	
00023A46 0000 0000                  		dc.w SME_Z3Iyr_B4-SME_Z3Iyr, SME_Z3Iyr_BB-SME_Z3Iyr	
00023A4A 0000 0000                  		dc.w SME_Z3Iyr_C2-SME_Z3Iyr, SME_Z3Iyr_CB-SME_Z3Iyr	
00023A4E 0000 0000                  		dc.w SME_Z3Iyr_D0-SME_Z3Iyr, SME_Z3Iyr_D5-SME_Z3Iyr	
00023A52 0000 0000                  		dc.w SME_Z3Iyr_DE-SME_Z3Iyr, SME_Z3Iyr_E3-SME_Z3Iyr	
00023A56 0000 0000                  		dc.w SME_Z3Iyr_EA-SME_Z3Iyr, SME_Z3Iyr_F5-SME_Z3Iyr	
00023A5A 0000 0000                  		dc.w SME_Z3Iyr_102-SME_Z3Iyr, SME_Z3Iyr_10B-SME_Z3Iyr	
00023A5E 0000 0000                  		dc.w SME_Z3Iyr_116-SME_Z3Iyr, SME_Z3Iyr_11F-SME_Z3Iyr	
00023A62 0000 0000                  		dc.w SME_Z3Iyr_12A-SME_Z3Iyr, SME_Z3Iyr_133-SME_Z3Iyr	
00023A66 0000 0000                  		dc.w SME_Z3Iyr_138-SME_Z3Iyr, SME_Z3Iyr_13D-SME_Z3Iyr	
00023A6A 0000 0000                  		dc.w SME_Z3Iyr_146-SME_Z3Iyr, SME_Z3Iyr_14B-SME_Z3Iyr	
00023A6E 0000 0000                  		dc.w SME_Z3Iyr_152-SME_Z3Iyr, SME_Z3Iyr_15F-SME_Z3Iyr	
00023A72 0000 0000                  		dc.w SME_Z3Iyr_16C-SME_Z3Iyr, SME_Z3Iyr_175-SME_Z3Iyr	
00023A76 0000 0000                  		dc.w SME_Z3Iyr_180-SME_Z3Iyr, SME_Z3Iyr_189-SME_Z3Iyr	
00023A7A 0000 0000                  		dc.w SME_Z3Iyr_194-SME_Z3Iyr, SME_Z3Iyr_199-SME_Z3Iyr	
00023A7E 0000 0000                  		dc.w SME_Z3Iyr_19E-SME_Z3Iyr, SME_Z3Iyr_1A3-SME_Z3Iyr	
00023A82 0000 0000                  		dc.w SME_Z3Iyr_1A8-SME_Z3Iyr, SME_Z3Iyr_1B1-SME_Z3Iyr	
00023A86 0000 0000                  		dc.w SME_Z3Iyr_1BA-SME_Z3Iyr, SME_Z3Iyr_1C7-SME_Z3Iyr	
00023A8A 0000 0000                  		dc.w SME_Z3Iyr_1D4-SME_Z3Iyr, SME_Z3Iyr_1D9-SME_Z3Iyr	
00023A8E 0000 0000                  		dc.w SME_Z3Iyr_1DE-SME_Z3Iyr, SME_Z3Iyr_1E3-SME_Z3Iyr	
00023A92 0000 0000                  		dc.w SME_Z3Iyr_1E8-SME_Z3Iyr, SME_Z3Iyr_1F1-SME_Z3Iyr	
00023A96 0000 0000                  		dc.w SME_Z3Iyr_1F8-SME_Z3Iyr, SME_Z3Iyr_201-SME_Z3Iyr	
00023A9A 0000 0000                  		dc.w SME_Z3Iyr_208-SME_Z3Iyr, SME_Z3Iyr_20D-SME_Z3Iyr	
00023A9E 0000 0000                  		dc.w SME_Z3Iyr_216-SME_Z3Iyr, SME_Z3Iyr_21D-SME_Z3Iyr	
00023AA2 0000 0000                  		dc.w SME_Z3Iyr_222-SME_Z3Iyr, SME_Z3Iyr_22B-SME_Z3Iyr	
00023AA6 0000 0000                  		dc.w SME_Z3Iyr_234-SME_Z3Iyr, SME_Z3Iyr_23B-SME_Z3Iyr	
00023AAA 0000 0000                  		dc.w SME_Z3Iyr_242-SME_Z3Iyr, SME_Z3Iyr_249-SME_Z3Iyr	
00023AAE 0000 0000                  		dc.w SME_Z3Iyr_24C-SME_Z3Iyr, SME_Z3Iyr_253-SME_Z3Iyr	
00023AB2 0000 0000                  		dc.w SME_Z3Iyr_25A-SME_Z3Iyr, SME_Z3Iyr_263-SME_Z3Iyr	
00023AB6 0000 0000                  		dc.w SME_Z3Iyr_26C-SME_Z3Iyr, SME_Z3Iyr_271-SME_Z3Iyr	
00023ABA 0000 0000                  		dc.w SME_Z3Iyr_278-SME_Z3Iyr, SME_Z3Iyr_27D-SME_Z3Iyr	
00023ABE 0000 0000                  		dc.w SME_Z3Iyr_284-SME_Z3Iyr, SME_Z3Iyr_28F-SME_Z3Iyr	
00023AC2 0000 0000                  		dc.w SME_Z3Iyr_29A-SME_Z3Iyr, SME_Z3Iyr_2A1-SME_Z3Iyr	
00023AC6 0000 0000                  		dc.w SME_Z3Iyr_2A8-SME_Z3Iyr, SME_Z3Iyr_2AF-SME_Z3Iyr	
00023ACA 0000 0000                  		dc.w SME_Z3Iyr_2B4-SME_Z3Iyr, SME_Z3Iyr_2BB-SME_Z3Iyr	
00023ACE 0000 0000                  		dc.w SME_Z3Iyr_2C4-SME_Z3Iyr, SME_Z3Iyr_2D5-SME_Z3Iyr	
00023AD2 00                         SME_Z3Iyr_94:	dc.b 0	
00023AD3 0420 0020 0920 0C50 03     SME_Z3Iyr_95:	dc.b 4, $20, 0, $20, 9, $20, $C, $50, 3	
00023ADC 0720 1B50 0F00 1A03 9110+  SME_Z3Iyr_9E:	dc.b 7, $20, $1B, $50, $F, 0, $1A, 3, $91, $10, $15, 0, $18, 4, $81	
00023AEB 0350 1E50 1520 1B          SME_Z3Iyr_AD:	dc.b 3, $50, $1E, $50, $15, $20, $1B	
00023AF2 0350 1E50 1520 24          SME_Z3Iyr_B4:	dc.b 3, $50, $1E, $50, $15, $20, $24	
00023AF9 0380 2720 0920 0C          SME_Z3Iyr_BB:	dc.b 3, $80, $27, $20, 9, $20, $C	
00023B00 0470 3050 3850 3E10 44     SME_Z3Iyr_C2:	dc.b 4, $70, $30, $50, $38, $50, $3E, $10, $44	
00023B09 0270 30B0 46               SME_Z3Iyr_CB:	dc.b 2, $70, $30, $B0, $46	
00023B0E 0250 5280 58               SME_Z3Iyr_D0:	dc.b 2, $50, $52, $80, $58	
00023B13 0450 5250 6150 6710 6D     SME_Z3Iyr_D5:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00023B1C 0250 52B0 6F               SME_Z3Iyr_DE:	dc.b 2, $50, $52, $B0, $6F	
00023B21 0370 3030 7B50 7F          SME_Z3Iyr_E3:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00023B28 0550 8B20 9150 9400 9A53+  SME_Z3Iyr_EA:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00023B33 0650 8510 9B30 9D50 A130+  SME_Z3Iyr_F5:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00023B40 0450 AC10 B270 B420 BC     SME_Z3Iyr_102:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00023B49 0530 C570 C920 D110 D453+  SME_Z3Iyr_10B:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00023B54 0450 BF10 D670 D820 E0     SME_Z3Iyr_116:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00023B5D 0550 8510 9B00 9170 E320+  SME_Z3Iyr_11F:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00023B68 0470 EE50 F610 FC50 FE     SME_Z3Iyr_12A:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00023B71 0270 EEB1 04               SME_Z3Iyr_133:	dc.b 2, $70, $EE, $B1, 4	
00023B76 0251 1081 16               SME_Z3Iyr_138:	dc.b 2, $51, $10, $81, $16	
00023B7B 0451 1051 1F11 2551 27     SME_Z3Iyr_13D:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00023B84 0251 10B1 2D               SME_Z3Iyr_146:	dc.b 2, $51, $10, $B1, $2D	
00023B89 0370 EE01 0481 39          SME_Z3Iyr_14B:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00023B90 0611 4811 4A81 4C01 5501+  SME_Z3Iyr_152:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00023B9D 0651 4221 5711 5A11 5C81+  SME_Z3Iyr_15F:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00023BAA 0451 6711 6D81 6F11 78     SME_Z3Iyr_16C:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00023BB3 0521 8011 8371 8521 8D53+  SME_Z3Iyr_175:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00023BBE 0451 7A11 9081 9211 9B     SME_Z3Iyr_180:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00023BC7 0551 4281 9D11 5C11 A603+  SME_Z3Iyr_189:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00023BD2 0251 A8B1 AE               SME_Z3Iyr_194:	dc.b 2, $51, $A8, $B1, $AE	
00023BD7 0250 52B1 BA               SME_Z3Iyr_199:	dc.b 2, $50, $52, $B1, $BA	
00023BDC 0251 A8B1 C6               SME_Z3Iyr_19E:	dc.b 2, $51, $A8, $B1, $C6	
00023BE1 0250 52B1 D2               SME_Z3Iyr_1A3:	dc.b 2, $50, $52, $B1, $D2	
00023BE6 0451 DE11 E4B1 E601 F2     SME_Z3Iyr_1A8:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00023BEF 0451 F311 F9B1 FB03 26     SME_Z3Iyr_1B1:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00023BF8 0612 07B2 0913 9803 9A13+  SME_Z3Iyr_1BA:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00023C05 06B2 1513 2713 A313 C913+  SME_Z3Iyr_1C7:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00023C12 0252 21B2 27               SME_Z3Iyr_1D4:	dc.b 2, $52, $21, $B2, $27	
00023C17 0251 10B2 33               SME_Z3Iyr_1D9:	dc.b 2, $51, $10, $B2, $33	
00023C1C 0252 21B2 3F               SME_Z3Iyr_1DE:	dc.b 2, $52, $21, $B2, $3F	
00023C21 0251 10B2 4B               SME_Z3Iyr_1E3:	dc.b 2, $51, $10, $B2, $4B	
00023C26 0452 5712 5DB2 5F02 6B     SME_Z3Iyr_1E8:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00023C2F 0372 6CB2 7403 DF          SME_Z3Iyr_1F1:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00023C36 0412 80B2 8202 6B53 D9     SME_Z3Iyr_1F8:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00023C3F 03B2 8E03 D073 D1          SME_Z3Iyr_201:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00023C46 0234 57B4 4B               SME_Z3Iyr_208:	dc.b 2, $34, $57, $B4, $4B	
00023C4B 0434 6A74 5B34 6324 67     SME_Z3Iyr_20D:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00023C54 0334 7DB4 6E24 7A          SME_Z3Iyr_216:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00023C5B 0252 9AB2 A0               SME_Z3Iyr_21D:	dc.b 2, $52, $9A, $B2, $A0	
00023C60 0452 AC72 B212 BA02 BC     SME_Z3Iyr_222:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00023C69 0412 BD72 BF22 C702 CA     SME_Z3Iyr_22B:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023C72 0322 CB22 CEF2 D1          SME_Z3Iyr_234:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00023C79 03B2 E172 ED00 6F          SME_Z3Iyr_23B:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00023C80 0372 F532 FD23 01          SME_Z3Iyr_242:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023C87 0183 04                    SME_Z3Iyr_249:	dc.b 1, $83, 4	
00023C8A 0373 0D03 1533 16          SME_Z3Iyr_24C:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023C91 03B3 2913 3503 37          SME_Z3Iyr_253:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00023C98 04B3 3833 4403 4803 49     SME_Z3Iyr_25A:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00023CA1 04B3 4A33 5603 5A03 5B     SME_Z3Iyr_263:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00023CAA 0283 5C73 65               SME_Z3Iyr_26C:	dc.b 2, $83, $5C, $73, $65	
00023CAF 0383 6D23 7613 79          SME_Z3Iyr_271:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00023CB6 0283 7B73 84               SME_Z3Iyr_278:	dc.b 2, $83, $7B, $73, $84	
00023CBB 0383 6D23 8C13 8F          SME_Z3Iyr_27D:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00023CC2 0573 A613 AE53 B033 B603+  SME_Z3Iyr_284:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00023CCD 0573 BB13 AE53 C333 B603+  SME_Z3Iyr_28F:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00023CD8 0372 F532 FD23 01          SME_Z3Iyr_29A:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023CDF 0373 0D03 1533 16          SME_Z3Iyr_2A1:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023CE6 03B3 E013 EC33 EE          SME_Z3Iyr_2A8:	dc.b 3, $B3, $E0, $13, $EC, $33, $EE	
00023CED 02F4 0424 14               SME_Z3Iyr_2AF:	dc.b 2, $F4, 4, $24, $14	
00023CF2 0353 F2B3 F810 6B          SME_Z3Iyr_2B4:	dc.b 3, $53, $F2, $B3, $F8, $10, $6B	
00023CF9 04F4 1714 2704 2914 2A     SME_Z3Iyr_2BB:	dc.b 4, $F4, $17, $14, $27, 4, $29, $14, $2A	
00023D02 0804 3E24 3914 3C14 2C24+  SME_Z3Iyr_2C4:	dc.b 8, 4, $3E, $24, $39, $14, $3C, $14, $2C, $24, $2E, $34, $31, $24, $36, 4, $35	
00023D13 01B4 3F                    SME_Z3Iyr_2D5:	dc.b 1, $B4, $3F	
00023D16                            		even
00023D16                            		even
00023D16                            
00023D16                            ; ---------------------------------------------------------------------------
00023D16                            ; Uncompressed graphics	- Sonic
00023D16                            ; ---------------------------------------------------------------------------
00023D16                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002CD56                            		even
0002CD56                            ; ---------------------------------------------------------------------------
0002CD56                            ; Compressed graphics - various
0002CD56                            ; ---------------------------------------------------------------------------
0002CD56                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002CE5A                            		even
0002CE5A                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002CE94                            		even
0002CE94                            Art_Shield:	incbin	artunc\shield.bin	; shield
0002D1F4                            		even
0002D1F4                            Art_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002D674                            		even
0002D674                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002D77E                            		even
0002D77E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002D7D0                            		even
0002D7D0                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002DA18                            		even
0002DA18                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002DB9E                            		even
0002DB9E                            ; ---------------------------------------------------------------------------
0002DB9E                            ; Sprite mappings - walls of the special stage
0002DB9E                            ; ---------------------------------------------------------------------------
0002DB9E                            Map_SSWalls:
0002DB9E                            	include "_maps\SSwalls.asm"
0002DB9E                            ; ---------------------------------------------------------------------------
0002DB9E                            ; Sprite mappings - walls of the special stage
0002DB9E                            ; ---------------------------------------------------------------------------
0002DB9E 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002DBA2 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002DBA6 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002DBAA 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002DBAE 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002DBB2 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002DBB6 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002DBBA 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002DBBE 01                         byte_2C584:	dc.b 1
0002DBBF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002DBC4 01                         byte_2C58A:	dc.b 1
0002DBC5 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002DBCA 01                         byte_2C590:	dc.b 1
0002DBCB F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002DBD0 01                         byte_2C596:	dc.b 1
0002DBD1 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002DBD6 01                         byte_2C59C:	dc.b 1
0002DBD7 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002DBDC 01                         byte_2C5A2:	dc.b 1
0002DBDD F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002DBE2 01                         byte_2C5A8:	dc.b 1
0002DBE3 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002DBE8 01                         byte_2C5AE:	dc.b 1
0002DBE9 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002DBEE 01                         byte_2C5B4:	dc.b 1
0002DBEF F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002DBF4 01                         byte_2C5BA:	dc.b 1
0002DBF5 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002DBFA 01                         byte_2C5C0:	dc.b 1
0002DBFB F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002DC00 01                         byte_2C5C6:	dc.b 1
0002DC01 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002DC06 01                         byte_2C5CC:	dc.b 1
0002DC07 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002DC0C 01                         byte_2C5D2:	dc.b 1
0002DC0D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002DC12 01                         byte_2C5D8:	dc.b 1
0002DC13 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002DC18 01                         byte_2C5DE:	dc.b 1
0002DC19 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002DC1E                            		even
0002DC1E                            		even
0002DC1E                            ; ---------------------------------------------------------------------------
0002DC1E                            ; Compressed graphics - special stage
0002DC1E                            ; ---------------------------------------------------------------------------
0002DC1E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002E556                            		even
0002E556                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002E68A                            		even
0002E68A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002F31A                            		even
0002F31A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002F61A                            		even
0002F61A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002FB0E                            		even
0002FB0E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002FBFC                            		even
0002FBFC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002FCCC                            		even
0002FCCC                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002FDC2                            		even
0002FDC2                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002FE20                            		even
0002FE20                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002FEB2                            		even
0002FEB2                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002FF74                            		even
0002FF74                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00030042                            		even
00030042                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003010E                            		even
0003010E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000301D6                            		even
000301D6                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000302A0                            		even
000302A0                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030370                            		even
00030370                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030564                            		even
00030564                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000306CC                            		even
000306CC                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003077C                            		even
0003077C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00030856                            		even
00030856                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000308DA                            		even
000308DA                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00030A58                            		even
00030A58                            ; ---------------------------------------------------------------------------
00030A58                            ; Compressed graphics - GHZ stuff
00030A58                            ; ---------------------------------------------------------------------------
00030A58                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00030AA2                            		even
00030AA2                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00030BBC                            		even
00030BBC                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00030CA8                            		even
00030CA8                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00030CF0                            		even
00030CF0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00030E8E                            		even
00030E8E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00030F0A                            		even
00030F0A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003111E                            		even
0003111E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003124A                            		even
0003124A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031378                            		even
00031378                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031416                            		even
00031416                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031476                            		even
00031476                            ; ---------------------------------------------------------------------------
00031476                            ; Compressed graphics - LZ stuff
00031476                            ; ---------------------------------------------------------------------------
00031476                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003159A                            		even
0003159A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00031D8E                            		even
00031D8E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00031F0E                            		even
00031F0E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00032078                            		even
00032078                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000326CE                            		even
000326CE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032784                            		even
00032784                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00032826                            		even
00032826                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00032982                            		even
00032982                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000329E6                            		even
000329E6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00032B38                            		even
00032B38                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003301A                            		even
0003301A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003318A                            		even
0003318A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033442                            		even
00033442                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003357A                            		even
0003357A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000336A4                            		even
000336A4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000337B4                            		even
000337B4                            ; ---------------------------------------------------------------------------
000337B4                            ; Compressed graphics - MZ stuff
000337B4                            ; ---------------------------------------------------------------------------
000337B4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00033A42                            		even
00033A42                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00033B00                            		even
00033B00                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00033BB8                            		even
00033BB8                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00033C0C                            		even
00033C0C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00033EEA                            		even
00033EEA                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00034800                            		even
00034800                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00034964                            		even
00034964                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000349EC                            		even
000349EC                            ; ---------------------------------------------------------------------------
000349EC                            ; Compressed graphics - SLZ stuff
000349EC                            ; ---------------------------------------------------------------------------
000349EC                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00034C28                            		even
00034C28                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00034D6E                            		even
00034D6E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00034FB2                            		even
00034FB2                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00035014                            		even
00035014                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000350F6                            		even
000350F6                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000352D8                            		even
000352D8                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000353E4                            		even
000353E4                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035488                            		even
00035488                            ; ---------------------------------------------------------------------------
00035488                            ; Compressed graphics - SYZ stuff
00035488                            ; ---------------------------------------------------------------------------
00035488                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000355F2                            		even
000355F2                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035654                            		even
00035654                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00035736                            		even
00035736                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000359C4                            		even
000359C4                            ; ---------------------------------------------------------------------------
000359C4                            ; Compressed graphics - SBZ stuff
000359C4                            ; ---------------------------------------------------------------------------
000359C4                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00035A18                            		even
00035A18                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00035CB4                            		even
00035CB4                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00035EB8                            		even
00035EB8                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00036056                            		even
00036056                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036386                            		even
00036386                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036564                            		even
00036564                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000365BC                            		even
000365BC                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003673C                            		even
0003673C                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003683A                            		even
0003683A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000369C6                            		even
000369C6                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00036A16                            		even
00036A16                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00036A6E                            		even
00036A6E                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00036B6A                            		even
00036B6A                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00036C80                            		even
00036C80                            ; ---------------------------------------------------------------------------
00036C80                            ; Compressed graphics - enemies
00036C80                            ; ---------------------------------------------------------------------------
00036C80                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037040                            		even
00037040                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003752E                            		even
0003752E                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000378D4                            		even
000378D4                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00037ABC                            		even
00037ABC                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000381A6                            		even
000381A6                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003840E                            		even
0003840E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00038698                            		even
00038698                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00038BBC                            		even
00038BBC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00038E46                            		even
00038E46                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039464                            		even
00039464                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003984C                            		even
0003984C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00039B48                            		even
00039B48                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00039D90                            		even
00039D90                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A028                            		even
0003A028                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A206                            		even
0003A206                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003A394                            		even
0003A394                            ; ---------------------------------------------------------------------------
0003A394                            ; Compressed graphics - various
0003A394                            ; ---------------------------------------------------------------------------
0003A394                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003A9A2 00                         		even
0003A9A2                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003AAF2                            		even
0003AAF2                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003AB74                            		even
0003AB74                            Nem_LivesPic:	incbin	artnem\lifeiconpic.bin	; life counter icon picture
0003ABE4                            		even
0003ABE4                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003ACF0 00                         		even
0003ACF0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B14A                            		even
0003B14A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003B7B0                            		even
0003B7B0                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003B860                            		even
0003B860                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003B9F2                            		even
0003B9F2                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003BAF4                            		even
0003BAF4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003BBD0                            		even
0003BBD0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C04C                            		even
0003C04C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C10C                            		even
0003C10C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C280                            		even
0003C280                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003C582                            		even
0003C582                            ; ---------------------------------------------------------------------------
0003C582                            ; Compressed graphics - continue screen
0003C582                            ; ---------------------------------------------------------------------------
0003C582                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003C832                            		even
0003C832                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003CA6C                            		even
0003CA6C                            ; ---------------------------------------------------------------------------
0003CA6C                            ; Compressed graphics - animals
0003CA6C                            ; ---------------------------------------------------------------------------
0003CA6C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003CBC4                            		even
0003CBC4                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003CD20                            		even
0003CD20                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003CE9C                            		even
0003CE9C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003CFB8                            		even
0003CFB8                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D0EE                            		even
0003D0EE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D228                            		even
0003D228                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D384                            		even
0003D384                            ; ---------------------------------------------------------------------------
0003D384                            ; Compressed graphics - primary patterns and block mappings
0003D384                            ; ---------------------------------------------------------------------------
0003D384                            
0003D384                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
0003E9E4                            		even
0003E9E4                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
0003FD8C                            		even
0003FD8C                            Blk16_TS:	incbin	map16\ts.bin
000406AA                            		even
000406AA                            Blk256_TS:	incbin	map256\ts.bin
000427A2                            		even
000427A2                            Blk16_GHZ:	incbin	map16\ghz.bin
000430C0                            		even
000430C0                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
00045A62                            		even
00045A62                            Blk256_GHZ:	incbin	map256\ghz.bin
00047B5A                            		even
00047B5A                            Blk16_LZ:	incbin	map16\lz.bin
00047E5A 00                         		even
00047E5A                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000498E0                            		even
000498E0                            Blk256_LZ:	incbin	map256\lz.bin
0004BD68                            		even
0004BD68                            Blk16_MZ:	incbin	map16\mz.bin
0004C4DE 00                         		even
0004C4DE                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EC32                            		even
0004EC32                            Blk256_MZ:	incbin	map256\mz.bin
0005036A                            		even
0005036A                            Blk16_SLZ:	incbin	map16\slz.bin
00050AFC 00                         		even
00050AFC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000544EC 00                         		even
000544EC                            Blk256_SLZ:	incbin	map256\slz.bin
00056468                            		even
00056468                            Blk16_SYZ:	incbin	map16\syz.bin
00056D16 00                         		even
00056D16                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005A2FC                            		even
0005A2FC                            Blk256_SYZ:	incbin	map256\syz.bin
0005C5E6                            		even
0005C5E6                            Blk16_SBZ:	incbin	map16\sbz.bin
0005D394                            		even
0005D394                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005FA62                            		even
0005FA62                            Blk256_SBZ:	incbin	map256\sbz.bin
000625E6 00                         		even
000625E6                            ; ---------------------------------------------------------------------------
000625E6                            ; Compressed graphics - bosses and ending sequence
000625E6                            ; ---------------------------------------------------------------------------
000625E6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00062E4A                            		even
00062E4A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00063134                            		even
00063134                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000639B8                            		even
000639B8                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000641E4                            		even
000641E4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006494C                            		even
0006494C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00064ECC                            		even
00064ECC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00064FEC                            		even
00064FEC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000651EA                            		even
000651EA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000663C8                            		even
000663C8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00066D0C                            		even
00066D0C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000670E2                            		even
000670E2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00067672                            		even
00067672                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000678FA                            		even
000678FA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00067EF8                            		even
00067EF8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00068180                            		even
00068180                            ; ---------------------------------------------------------------------------
00068180                            ; Collision data
00068180                            ; ---------------------------------------------------------------------------
00068180                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00068280                            		even
00068280                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00069280                            		even
00069280                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006A280                            		even
0006A280                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0006A43A 00                         		even
0006A43A                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0006A5F2                            		even
0006A5F2                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0006A6B6                            		even
0006A6B6                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0006A77A                            		even
0006A77A                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0006A90A                            		even
0006A90A                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0006AA9A                            		even
0006AA9A                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0006AC38                            		even
0006AC38                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0006ADD6                            		even
0006ADD6                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0006AFCA                            		even
0006AFCA                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0006B1BE                            		even
0006B1BE                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0006B416                            		even
0006B416                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0006B66E                            		even
0006B66E                            ; ---------------------------------------------------------------------------
0006B66E                            ; Special layouts
0006B66E                            ; ---------------------------------------------------------------------------
0006B66E                            SS_1:		incbin	sslayout\1.bin
0006B8E8                            		even
0006B8E8                            SS_2:		incbin	sslayout\2.bin
0006BCFA                            		even
0006BCFA                            SS_3:		incbin	sslayout\3.bin
0006C056                            		even
0006C056                            SS_4:		incbin	sslayout\4.bin
0006C530                            		even
0006C530                            SS_5:		incbin	sslayout\5.bin
0006CA02                            		even
0006CA02                            SS_6:		incbin	sslayout\6.bin
0006CD12                            		even
0006CD12                            ; ---------------------------------------------------------------------------
0006CD12                            ; Animated uncompressed graphics
0006CD12                            ; ---------------------------------------------------------------------------
0006CD12                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006CF12                            		even
0006CF12                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006D312                            		even
0006D312                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006D792                            		even
0006D792                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006DA92                            		even
0006DA92                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006E092                            		even
0006E092                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006E392                            		even
0006E392                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006EE12                            		even
0006EE12                            
0006EE12                            ; ---------------------------------------------------------------------------
0006EE12                            ; Level	layout index
0006EE12                            ; ---------------------------------------------------------------------------
0006EE12 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0006EE1E 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
0006EE2A 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
0006EE36 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
0006EE42 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0006EE4E 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
0006EE5A 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
0006EE66 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
0006EE72 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0006EE7E 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
0006EE8A 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
0006EE96 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
0006EEA2 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
0006EEAE 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
0006EEBA 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
0006EEC6 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
0006EED2 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
0006EEDE 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
0006EEEA 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
0006EEF6 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
0006EF02 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0006EF0E 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
0006EF1A 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
0006EF26 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
0006EF32 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EF3E 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006EF4A 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF56 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006EF62                            
0006EF62                            Level_GHZ1:	incbin	levels\ghz1.bin
0006FF62                            		even
0006FF62 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006FF66                            Level_GHZ2:	incbin	levels\ghz2.bin
00070F66                            		even
00070F66 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00070F6A                            Level_GHZ3:	incbin	levels\ghz3.bin
00071F6A                            		even
00071F6A                            Level_GHZbg:	incbin	levels\ghzbg.bin
00071F8C                            		even
00071F8C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00071F90 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00071F94                            
00071F94                            Level_LZ1:	incbin	levels\lz1.bin
00072F94                            		even
00072F94                            Level_LZbg:	incbin	levels\lzbg.bin
00073096                            		even
00073096 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007309A                            Level_LZ2:	incbin	levels\lz2.bin
0007409A                            		even
0007409A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007409E                            Level_LZ3:	incbin	levels\lz3.bin
0007509E                            		even
0007509E                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
0007609E                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
0007609E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000760A2                            Level_SBZ3:	incbin	levels\sbz3.bin
000770A2                            		even
000770A2 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000770A6                            
000770A6                            Level_MZ1:	incbin	levels\mz1.bin
000780A6                            		even
000780A6                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00078120                            		even
00078120                            Level_MZ2:	incbin	levels\mz2.bin
00079120                            		even
00079120                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000791B2                            		even
000791B2 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000791B6                            Level_MZ3:	incbin	levels\mz3.bin
0007A1B6                            		even
0007A1B6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007A25A                            		even
0007A25A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007A25E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007A262                            
0007A262                            Level_SLZ1:	incbin	levels\slz1.bin
0007B262                            		even
0007B262                            Level_SLZbg:	incbin	levels\slzbg.bin
0007B2DC                            		even
0007B2DC                            Level_SLZ2:	incbin	levels\slz2.bin
0007C2DC                            		even
0007C2DC                            Level_SLZ3:	incbin	levels\slz3.bin
0007D2DC                            		even
0007D2DC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007D2E0                            
0007D2E0                            Level_SYZ1:	incbin	levels\syz1.bin
0007E2E0                            		even
0007E2E0                            Level_SYZbg:	incbin	levels\syzbg.bin
0007E31A                            		even
0007E31A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007E31E                            Level_SYZ2:	incbin	levels\syz2.bin
0007F31E                            		even
0007F31E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F322                            Level_SYZ3:	incbin	levels\syz3.bin
00080322                            		even
00080322 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00080326 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0008032A                            
0008032A                            Level_SBZ1:	incbin	levels\sbz1.bin
0008132A                            		even
0008132A                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00081368                            		even
00081368                            Level_SBZ2:	incbin	levels\sbz2.bin
00082368                            		even
00082368                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000824D2                            		even
000824D2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000824D6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000824DA                            Level_End:	incbin	levels\ending.bin
000834DA                            		even
000834DA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000834DE                            
000834DE                            ; ---------------------------------------------------------------------------
000834DE                            ; Animated uncompressed giant ring graphics
000834DE                            ; ---------------------------------------------------------------------------
000834DE                            Art_BigRing:	incbin	artunc\bigring.bin
0008411E                            		even
0008411E                            ; ---------------------------------------------------------------------------
0008411E                            ; Sprite locations index
0008411E                            ; ---------------------------------------------------------------------------
0008411E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084122 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084126 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008412A 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008412E 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084132 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084136 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008413A 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008413E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084142 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084146 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008414A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008414E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084152 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084156 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008415A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008415E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084162 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084166 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008416A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008416E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084172 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084176 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008417A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008417E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084182 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084186 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008418A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008418E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00084192 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00084196 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008419A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0008419E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000841A2 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000841A6 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000841AA 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000841AE FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000841B4                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00084202                            		even
00084202                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000847D2                            		even
000847D2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00084E9E                            		even
00084E9E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0008530C                            		even
0008530C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0008564E                            		even
0008564E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00085C30                            		even
00085C30                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000860C8                            		even
000860C8                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000860FA                            		even
000860FA                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0008612C                            		even
0008612C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0008615E                            		even
0008615E                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00086190                            		even
00086190                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000861DA                            		even
000861DA                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00086218                            		even
00086218                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00086584                            		even
00086584                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00086A2E                            		even
00086A2E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00086FA4                            		even
00086FA4                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000874FC                            		even
000874FC                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000879B8                            		even
000879B8                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00087FE2                            		even
00087FE2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0008846E                            		even
0008846E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000889D8                            		even
000889D8                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00088FDE                            		even
00088FDE                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0008971C                            		even
0008971C                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00089DFA                            		even
00089DFA                            ObjPos_FZ:	incbin	objpos\fz.bin
00089E0C                            		even
00089E0C                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00089E3E                            		even
00089E3E                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00089E70                            		even
00089E70                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00089EA2                            		even
00089EA2                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00089ED4                            		even
00089ED4                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00089F06                            		even
00089F06                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00089F3E                            		even
00089F3E                            ObjPos_End:	incbin	objpos\ending.bin
0008A09A                            		even
0008A09A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008A0A0                            ; ---------------------------------------------------------------------------
0008A0A0 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0008A0A4 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0008A0A8 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008A0AC 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008A0B0 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0008A0B4 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0008A0B8                            ; ---------------------------------------------------------------------------
0008A0B8                            ; PSG instruments used in music
0008A0B8                            ; ---------------------------------------------------------------------------
0008A0B8 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008A0C4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008A0D0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008A0DC                            PSG1:		incbin	sound\psg1.bin
0008A0F3                            PSG2:		incbin	sound\psg2.bin
0008A0FA                            PSG3:		incbin	sound\psg3.bin
0008A10B                            PSG4:		incbin	sound\psg4.bin
0008A116                            PSG6:		incbin	sound\psg6.bin
0008A125                            PSG5:		incbin	sound\psg5.bin
0008A14F                            PSG7:		incbin	sound\psg7.bin
0008A16B                            PSG8:		incbin	sound\psg8.bin
0008A193                            PSG9:		incbin	sound\psg9.bin
0008A1A4                            
0008A1A4 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008A1AC                            ; ---------------------------------------------------------------------------
0008A1AC                            ; Music	Pointers
0008A1AC                            ; ---------------------------------------------------------------------------
0008A1AC 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0008A1B4 0000 0000 0000 0000        		dc.l Music83, Music84
0008A1BC 0000 0000 0000 0000        		dc.l Music85, Music86
0008A1C4 0000 0000 0000 0000        		dc.l Music87, Music88
0008A1CC 0000 0000 0000 0000        		dc.l Music89, Music8A
0008A1D4 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008A1DC 0000 0000 0000 0000        		dc.l Music8D, Music8E
0008A1E4 0000 0000 0000 0000        		dc.l Music8F, Music90
0008A1EC 0000 0000 0000 0000        		dc.l Music91, Music92
0008A1F4 0000 0000 0000 0000        		dc.l Music93, Music94
0008A1FC 0000 0000 0000 0000        		dc.l Music95, Music96
0008A204 0000 0000                  		dc.l Music97
0008A208                            ; ---------------------------------------------------------------------------
0008A208                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0008A208                            ; ---------------------------------------------------------------------------
0008A208 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0008A218 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0008A228 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0008A238 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0008A248 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0008A258 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0008A268 9090 9090 90               		dc.b $90, $90, $90, $90, $90
0008A26E 00                         		even
0008A26E                            
0008A26E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A26E                            
0008A26E                            
0008A26E                            sub_71B4C:				; XREF: V_Int; H_Int
0008A26E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0008A276 4E71                       		nop	
0008A278 4E71                       		nop	
0008A27A 4E71                       		nop	
0008A27C                            
0008A27C                            loc_71B5A:
0008A27C 4DF9 00FF F000             		lea	($FFF000).l,a6
0008A282 422E 000E                  		clr.b	$E(a6)
0008A286 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0008A28A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008A28E 532E 0001                  		subq.b	#1,1(a6)
0008A292 6600                       		bne.s	loc_71B9E
0008A294 4EBA 0000                  		jsr	sub_7260C(pc)
0008A298                            
0008A298                            loc_71B9E:
0008A298 102E 0004                  		move.b	4(a6),d0
0008A29C 6700                       		beq.s	loc_71BA8
0008A29E 4EBA 0000                  		jsr	sub_72504(pc)
0008A2A2                            
0008A2A2                            loc_71BA8:
0008A2A2 4A2E 0024                  		tst.b	$24(a6)
0008A2A6 6700                       		beq.s	loc_71BB2
0008A2A8 4EBA 0000                  		jsr	sub_7267C(pc)
0008A2AC                            
0008A2AC                            loc_71BB2:
0008A2AC 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008A2B0 6700                       		beq.s	loc_71BBC	; if not, branch
0008A2B2 4EBA 0000                  		jsr	Sound_Play(pc)
0008A2B6                            
0008A2B6                            loc_71BBC:
0008A2B6 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008A2BC 6700                       		beq.s	loc_71BC8
0008A2BE 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0008A2C2                            
0008A2C2                            loc_71BC8:
0008A2C2 4BEE 0040                  		lea	$40(a6),a5
0008A2C6 4A15                       		tst.b	(a5)
0008A2C8 6A00                       		bpl.s	loc_71BD4
0008A2CA 4EBA 0000                  		jsr	sub_71C4E(pc)
0008A2CE                            
0008A2CE                            loc_71BD4:
0008A2CE 422E 0008                  		clr.b	8(a6)
0008A2D2 7E05                       		moveq	#5,d7
0008A2D4                            
0008A2D4                            loc_71BDA:
0008A2D4 DAFC 0030                  		adda.w	#$30,a5
0008A2D8 4A15                       		tst.b	(a5)
0008A2DA 6A00                       		bpl.s	loc_71BE6
0008A2DC 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A2E0                            
0008A2E0                            loc_71BE6:
0008A2E0 51CF FFF2                  		dbf	d7,loc_71BDA
0008A2E4                            
0008A2E4 7E02                       		moveq	#2,d7
0008A2E6                            
0008A2E6                            loc_71BEC:
0008A2E6 DAFC 0030                  		adda.w	#$30,a5
0008A2EA 4A15                       		tst.b	(a5)
0008A2EC 6A00                       		bpl.s	loc_71BF8
0008A2EE 4EBA 0000                  		jsr	sub_72850(pc)
0008A2F2                            
0008A2F2                            loc_71BF8:
0008A2F2 51CF FFF2                  		dbf	d7,loc_71BEC
0008A2F6                            
0008A2F6 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008A2FC 7E02                       		moveq	#2,d7
0008A2FE                            
0008A2FE                            loc_71C04:
0008A2FE DAFC 0030                  		adda.w	#$30,a5
0008A302 4A15                       		tst.b	(a5)
0008A304 6A00                       		bpl.s	loc_71C10
0008A306 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A30A                            
0008A30A                            loc_71C10:
0008A30A 51CF FFF2                  		dbf	d7,loc_71C04
0008A30E                            
0008A30E 7E02                       		moveq	#2,d7
0008A310                            
0008A310                            loc_71C16:
0008A310 DAFC 0030                  		adda.w	#$30,a5
0008A314 4A15                       		tst.b	(a5)
0008A316 6A00                       		bpl.s	loc_71C22
0008A318 4EBA 0000                  		jsr	sub_72850(pc)
0008A31C                            
0008A31C                            loc_71C22:
0008A31C 51CF FFF2                  		dbf	d7,loc_71C16
0008A320 1D7C 0040 000E             		move.b	#$40,$E(a6)
0008A326 DAFC 0030                  		adda.w	#$30,a5
0008A32A 4A15                       		tst.b	(a5)
0008A32C 6A00                       		bpl.s	loc_71C38
0008A32E 4EBA 0000                  		jsr	sub_71CCA(pc)
0008A332                            
0008A332                            loc_71C38:
0008A332 DAFC 0030                  		adda.w	#$30,a5
0008A336 4A15                       		tst.b	(a5)
0008A338 6A00                       		bpl.s	loc_71C44
0008A33A 4EBA 0000                  		jsr	sub_72850(pc)
0008A33E                            
0008A33E                            loc_71C44:
0008A33E 1439 00A0 4000             		move.b	($A04000).l,d2
0008A344 0802 0007                  		btst	#7,d2
0008A348 66F4                       		bne.s	loc_71C44
0008A34A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
0008A352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0008A35A 4E75                       		rts	
0008A35C                            ; End of function sub_71B4C
0008A35C                            
0008A35C                            
0008A35C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A35C                            
0008A35C                            
0008A35C                            sub_71C4E:				; XREF: sub_71B4C
0008A35C 532D 000E                  		subq.b	#1,$E(a5)
0008A360 6600                       		bne.s	locret_71CAA
0008A362 1D7C 0080 0008             		move.b	#$80,8(a6)
0008A368 286D 0004                  		movea.l	4(a5),a4
0008A36C                            
0008A36C                            loc_71C5E:
0008A36C 7A00                       		moveq	#0,d5
0008A36E 1A1C                       		move.b	(a4)+,d5
0008A370 0C05 00E0                  		cmpi.b	#-$20,d5
0008A374 6500                       		bcs.s	loc_71C6E
0008A376 4EBA 0000                  		jsr	sub_72A5A(pc)
0008A37A 60F0                       		bra.s	loc_71C5E
0008A37C                            ; ===========================================================================
0008A37C                            
0008A37C                            loc_71C6E:
0008A37C 4A05                       		tst.b	d5
0008A37E 6A00                       		bpl.s	loc_71C84
0008A380 1B45 0010                  		move.b	d5,$10(a5)
0008A384 1A1C                       		move.b	(a4)+,d5
0008A386 6A00                       		bpl.s	loc_71C84
0008A388 534C                       		subq.w	#1,a4
0008A38A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008A390 6000                       		bra.s	loc_71C88
0008A392                            ; ===========================================================================
0008A392                            
0008A392                            loc_71C84:
0008A392 4EBA 0000                  		jsr	sub_71D40(pc)
0008A396                            
0008A396                            loc_71C88:
0008A396 2B4C 0004                  		move.l	a4,4(a5)
0008A39A 0815 0002                  		btst	#2,(a5)
0008A39E 6600                       		bne.s	locret_71CAA
0008A3A0 7000                       		moveq	#0,d0
0008A3A2 102D 0010                  		move.b	$10(a5),d0
0008A3A6 0C00 0080                  		cmpi.b	#$80,d0
0008A3AA 6700                       		beq.s	locret_71CAA
0008A3AC 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0008A3B2                            
0008A3B2                            locret_71CAA:
0008A3B2 4E75                       		rts	
0008A3B4                            ; ===========================================================================
0008A3B4                            
0008A3B4                            loc_71CAC:
0008A3B4 0400 0088                  		subi.b	#$88,d0
0008A3B8 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0008A3BC 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0008A3C2 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008A3CA 4E75                       		rts	
0008A3CC                            ; End of function sub_71C4E
0008A3CC                            
0008A3CC                            ; ===========================================================================
0008A3CC 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0008A3D2                            
0008A3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A3D2                            
0008A3D2                            
0008A3D2                            sub_71CCA:				; XREF: sub_71B4C
0008A3D2 532D 000E                  		subq.b	#1,$E(a5)
0008A3D6 6600                       		bne.s	loc_71CE0
0008A3D8 0895 0004                  		bclr	#4,(a5)
0008A3DC 4EBA 0000                  		jsr	sub_71CEC(pc)
0008A3E0 4EBA 0000                  		jsr	sub_71E18(pc)
0008A3E4 6000 0000                  		bra.w	loc_726E2
0008A3E8                            ; ===========================================================================
0008A3E8                            
0008A3E8                            loc_71CE0:
0008A3E8 4EBA 0000                  		jsr	sub_71D9E(pc)
0008A3EC 4EBA 0000                  		jsr	sub_71DC6(pc)
0008A3F0 6000 0000                  		bra.w	loc_71E24
0008A3F4                            ; End of function sub_71CCA
0008A3F4                            
0008A3F4                            
0008A3F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A3F4                            
0008A3F4                            
0008A3F4                            sub_71CEC:				; XREF: sub_71CCA
0008A3F4 286D 0004                  		movea.l	4(a5),a4
0008A3F8 0895 0001                  		bclr	#1,(a5)
0008A3FC                            
0008A3FC                            loc_71CF4:
0008A3FC 7A00                       		moveq	#0,d5
0008A3FE 1A1C                       		move.b	(a4)+,d5
0008A400 0C05 00E0                  		cmpi.b	#-$20,d5
0008A404 6500                       		bcs.s	loc_71D04
0008A406 4EBA 0000                  		jsr	sub_72A5A(pc)
0008A40A 60F0                       		bra.s	loc_71CF4
0008A40C                            ; ===========================================================================
0008A40C                            
0008A40C                            loc_71D04:
0008A40C 4EBA 0000                  		jsr	sub_726FE(pc)
0008A410 4A05                       		tst.b	d5
0008A412 6A00                       		bpl.s	loc_71D1A
0008A414 4EBA 0000                  		jsr	sub_71D22(pc)
0008A418 1A1C                       		move.b	(a4)+,d5
0008A41A 6A00                       		bpl.s	loc_71D1A
0008A41C 534C                       		subq.w	#1,a4
0008A41E 6000 0000                  		bra.w	sub_71D60
0008A422                            ; ===========================================================================
0008A422                            
0008A422                            loc_71D1A:
0008A422 4EBA 0000                  		jsr	sub_71D40(pc)
0008A426 6000 0000                  		bra.w	sub_71D60
0008A42A                            ; End of function sub_71CEC
0008A42A                            
0008A42A                            
0008A42A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A42A                            
0008A42A                            
0008A42A                            sub_71D22:				; XREF: sub_71CEC
0008A42A 0405 0080                  		subi.b	#$80,d5
0008A42E 6700                       		beq.s	loc_71D58
0008A430 DA2D 0008                  		add.b	8(a5),d5
0008A434 0245 007F                  		andi.w	#$7F,d5
0008A438 E34D                       		lsl.w	#1,d5
0008A43A 41FA 0000                  		lea	word_72790(pc),a0
0008A43E 3C30 5000                  		move.w	(a0,d5.w),d6
0008A442 3B46 0010                  		move.w	d6,$10(a5)
0008A446 4E75                       		rts	
0008A448                            ; End of function sub_71D22
0008A448                            
0008A448                            
0008A448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A448                            
0008A448                            
0008A448                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008A448 1005                       		move.b	d5,d0
0008A44A 122D 0002                  		move.b	2(a5),d1
0008A44E                            
0008A44E                            loc_71D46:
0008A44E 5301                       		subq.b	#1,d1
0008A450 6700                       		beq.s	loc_71D4E
0008A452 D005                       		add.b	d5,d0
0008A454 60F8                       		bra.s	loc_71D46
0008A456                            ; ===========================================================================
0008A456                            
0008A456                            loc_71D4E:
0008A456 1B40 000F                  		move.b	d0,$F(a5)
0008A45A 1B40 000E                  		move.b	d0,$E(a5)
0008A45E 4E75                       		rts	
0008A460                            ; End of function sub_71D40
0008A460                            
0008A460                            ; ===========================================================================
0008A460                            
0008A460                            loc_71D58:				; XREF: sub_71D22
0008A460 08D5 0001                  		bset	#1,(a5)
0008A464 426D 0010                  		clr.w	$10(a5)
0008A468                            
0008A468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A468                            
0008A468                            
0008A468                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008A468 2B4C 0004                  		move.l	a4,4(a5)
0008A46C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008A472 0815 0004                  		btst	#4,(a5)
0008A476 6600                       		bne.s	locret_71D9C
0008A478 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008A47E 422D 000C                  		clr.b	$C(a5)
0008A482 0815 0003                  		btst	#3,(a5)
0008A486 6700                       		beq.s	locret_71D9C
0008A488 206D 0014                  		movea.l	$14(a5),a0
0008A48C 1B58 0018                  		move.b	(a0)+,$18(a5)
0008A490 1B58 0019                  		move.b	(a0)+,$19(a5)
0008A494 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008A498 1018                       		move.b	(a0)+,d0
0008A49A E208                       		lsr.b	#1,d0
0008A49C 1B40 001B                  		move.b	d0,$1B(a5)
0008A4A0 426D 001C                  		clr.w	$1C(a5)
0008A4A4                            
0008A4A4                            locret_71D9C:
0008A4A4 4E75                       		rts	
0008A4A6                            ; End of function sub_71D60
0008A4A6                            
0008A4A6                            
0008A4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A4A6                            
0008A4A6                            
0008A4A6                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008A4A6 4A2D 0012                  		tst.b	$12(a5)
0008A4AA 6700                       		beq.s	locret_71DC4
0008A4AC 532D 0012                  		subq.b	#1,$12(a5)
0008A4B0 6600                       		bne.s	locret_71DC4
0008A4B2 08D5 0001                  		bset	#1,(a5)
0008A4B6 4A2D 0001                  		tst.b	1(a5)
0008A4BA 6B00 0000                  		bmi.w	loc_71DBE
0008A4BE 4EBA 0000                  		jsr	sub_726FE(pc)
0008A4C2 584F                       		addq.w	#4,sp
0008A4C4 4E75                       		rts	
0008A4C6                            ; ===========================================================================
0008A4C6                            
0008A4C6                            loc_71DBE:
0008A4C6 4EBA 0000                  		jsr	sub_729A0(pc)
0008A4CA 584F                       		addq.w	#4,sp
0008A4CC                            
0008A4CC                            locret_71DC4:
0008A4CC 4E75                       		rts	
0008A4CE                            ; End of function sub_71D9E
0008A4CE                            
0008A4CE                            
0008A4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A4CE                            
0008A4CE                            
0008A4CE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008A4CE 584F                       		addq.w	#4,sp
0008A4D0 0815 0003                  		btst	#3,(a5)
0008A4D4 6700                       		beq.s	locret_71E16
0008A4D6 4A2D 0018                  		tst.b	$18(a5)
0008A4DA 6700                       		beq.s	loc_71DDA
0008A4DC 532D 0018                  		subq.b	#1,$18(a5)
0008A4E0 4E75                       		rts	
0008A4E2                            ; ===========================================================================
0008A4E2                            
0008A4E2                            loc_71DDA:
0008A4E2 532D 0019                  		subq.b	#1,$19(a5)
0008A4E6 6700                       		beq.s	loc_71DE2
0008A4E8 4E75                       		rts	
0008A4EA                            ; ===========================================================================
0008A4EA                            
0008A4EA                            loc_71DE2:
0008A4EA 206D 0014                  		movea.l	$14(a5),a0
0008A4EE 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008A4F4 4A2D 001B                  		tst.b	$1B(a5)
0008A4F8 6600                       		bne.s	loc_71DFE
0008A4FA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008A500 442D 001A                  		neg.b	$1A(a5)
0008A504 4E75                       		rts	
0008A506                            ; ===========================================================================
0008A506                            
0008A506                            loc_71DFE:
0008A506 532D 001B                  		subq.b	#1,$1B(a5)
0008A50A 1C2D 001A                  		move.b	$1A(a5),d6
0008A50E 4886                       		ext.w	d6
0008A510 DC6D 001C                  		add.w	$1C(a5),d6
0008A514 3B46 001C                  		move.w	d6,$1C(a5)
0008A518 DC6D 0010                  		add.w	$10(a5),d6
0008A51C 594F                       		subq.w	#4,sp
0008A51E                            
0008A51E                            locret_71E16:
0008A51E 4E75                       		rts	
0008A520                            ; End of function sub_71DC6
0008A520                            
0008A520                            
0008A520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A520                            
0008A520                            
0008A520                            sub_71E18:				; XREF: sub_71CCA
0008A520 0815 0001                  		btst	#1,(a5)
0008A524 6600                       		bne.s	locret_71E48
0008A526 3C2D 0010                  		move.w	$10(a5),d6
0008A52A 6700                       		beq.s	loc_71E4A
0008A52C                            
0008A52C                            loc_71E24:				; XREF: sub_71CCA
0008A52C 102D 001E                  		move.b	$1E(a5),d0
0008A530 4880                       		ext.w	d0
0008A532 DC40                       		add.w	d0,d6
0008A534 0815 0002                  		btst	#2,(a5)
0008A538 6600                       		bne.s	locret_71E48
0008A53A 3206                       		move.w	d6,d1
0008A53C E049                       		lsr.w	#8,d1
0008A53E 103C 00A4                  		move.b	#-$5C,d0
0008A542 4EBA 0000                  		jsr	sub_72722(pc)
0008A546 1206                       		move.b	d6,d1
0008A548 103C 00A0                  		move.b	#-$60,d0
0008A54C 4EBA 0000                  		jsr	sub_72722(pc)
0008A550                            
0008A550                            locret_71E48:
0008A550 4E75                       		rts	
0008A552                            ; ===========================================================================
0008A552                            
0008A552                            loc_71E4A:
0008A552 08D5 0001                  		bset	#1,(a5)
0008A556 4E75                       		rts	
0008A558                            ; End of function sub_71E18
0008A558                            
0008A558                            ; ===========================================================================
0008A558                            
0008A558                            loc_71E50:				; XREF: sub_71B4C
0008A558 6B00                       		bmi.s	loc_71E94
0008A55A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008A560 6700 0000                  		beq.w	loc_71EFE
0008A564 1D7C 0002 0003             		move.b	#2,3(a6)
0008A56A 7602                       		moveq	#2,d3
0008A56C 103C 00B4                  		move.b	#-$4C,d0
0008A570 7200                       		moveq	#0,d1
0008A572                            
0008A572                            loc_71E6A:
0008A572 4EBA 0000                  		jsr	sub_7272E(pc)
0008A576 4EBA 0000                  		jsr	sub_72764(pc)
0008A57A 5200                       		addq.b	#1,d0
0008A57C 51CB FFF4                  		dbf	d3,loc_71E6A
0008A580                            
0008A580 7602                       		moveq	#2,d3
0008A582 7028                       		moveq	#$28,d0
0008A584                            
0008A584                            loc_71E7C:
0008A584 1203                       		move.b	d3,d1
0008A586 4EBA 0000                  		jsr	sub_7272E(pc)
0008A58A 5801                       		addq.b	#4,d1
0008A58C 4EBA 0000                  		jsr	sub_7272E(pc)
0008A590 51CB FFF2                  		dbf	d3,loc_71E7C
0008A594                            
0008A594 4EBA 0000                  		jsr	sub_729B6(pc)
0008A598 13FC 007F 00A0 1FFF        		move.b	#$7F,($A01FFF).l; pause DAC
0008A5A0 6000 FD9C                  		bra.w	loc_71C44
0008A5A4                            ; ===========================================================================
0008A5A4                            
0008A5A4                            loc_71E94:				; XREF: loc_71E50
0008A5A4 422E 0003                  		clr.b	3(a6)
0008A5A8 7630                       		moveq	#$30,d3
0008A5AA 4BEE 0040                  		lea	$40(a6),a5
0008A5AE 7806                       		moveq	#6,d4
0008A5B0                            
0008A5B0                            loc_71EA0:
0008A5B0 0815 0007                  		btst	#7,(a5)
0008A5B4 6700                       		beq.s	loc_71EB8
0008A5B6 0815 0002                  		btst	#2,(a5)
0008A5BA 6600                       		bne.s	loc_71EB8
0008A5BC 103C 00B4                  		move.b	#-$4C,d0
0008A5C0 122D 000A                  		move.b	$A(a5),d1
0008A5C4 4EBA 0000                  		jsr	sub_72722(pc)
0008A5C8                            
0008A5C8                            loc_71EB8:
0008A5C8 DAC3                       		adda.w	d3,a5
0008A5CA 51CC FFE4                  		dbf	d4,loc_71EA0
0008A5CE                            
0008A5CE 4BEE 0220                  		lea	$220(a6),a5
0008A5D2 7802                       		moveq	#2,d4
0008A5D4                            
0008A5D4                            loc_71EC4:
0008A5D4 0815 0007                  		btst	#7,(a5)
0008A5D8 6700                       		beq.s	loc_71EDC
0008A5DA 0815 0002                  		btst	#2,(a5)
0008A5DE 6600                       		bne.s	loc_71EDC
0008A5E0 103C 00B4                  		move.b	#-$4C,d0
0008A5E4 122D 000A                  		move.b	$A(a5),d1
0008A5E8 4EBA 0000                  		jsr	sub_72722(pc)
0008A5EC                            
0008A5EC                            loc_71EDC:
0008A5EC DAC3                       		adda.w	d3,a5
0008A5EE 51CC FFE4                  		dbf	d4,loc_71EC4
0008A5F2                            
0008A5F2 4BEE 0340                  		lea	$340(a6),a5
0008A5F6 0815 0007                  		btst	#7,(a5)
0008A5FA 6700                       		beq.s	@UnpauseDAC
0008A5FC 0815 0002                  		btst	#2,(a5)
0008A600 6600                       		bne.s	@UnpauseDAC
0008A602 103C 00B4                  		move.b	#-$4C,d0
0008A606 122D 000A                  		move.b	$A(a5),d1
0008A60A 4EBA 0000                  		jsr	sub_72722(pc)
0008A60E                            
0008A60E                            @UnpauseDAC:
0008A60E 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
0008A616                            
0008A616                            loc_71EFE:
0008A616 6000 FD26                  		bra.w	loc_71C44
0008A61A                            
0008A61A                            ; ---------------------------------------------------------------------------
0008A61A                            ; Subroutine to	play a sound or	music track
0008A61A                            ; ---------------------------------------------------------------------------
0008A61A                            
0008A61A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A61A                            
0008A61A                            
0008A61A                            Sound_Play:				; XREF: sub_71B4C
0008A61A 2079 0008 A0A0             		movea.l	(Go_SoundTypes).l,a0
0008A620 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008A624 1616                       		move.b	0(a6),d3
0008A626 7802                       		moveq	#2,d4
0008A628                            
0008A628                            loc_71F12:
0008A628 1011                       		move.b	(a1),d0		; move track number to d0
0008A62A 1200                       		move.b	d0,d1
0008A62C 4219                       		clr.b	(a1)+
0008A62E 0400 0081                  		subi.b	#$81,d0
0008A632 6500                       		bcs.s	loc_71F3E
0008A634 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008A63A 6700                       		beq.s	loc_71F2C
0008A63C 1D41 000A                  		move.b	d1,$A(a6)
0008A640 6000                       		bra.s	loc_71F3E
0008A642                            ; ===========================================================================
0008A642                            
0008A642                            loc_71F2C:
0008A642 0240 007F                  		andi.w	#$7F,d0
0008A646 1430 0000                  		move.b	(a0,d0.w),d2
0008A64A B403                       		cmp.b	d3,d2
0008A64C 6500                       		bcs.s	loc_71F3E
0008A64E 1602                       		move.b	d2,d3
0008A650 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008A654                            
0008A654                            loc_71F3E:
0008A654 51CC FFD2                  		dbf	d4,loc_71F12
0008A658                            
0008A658 4A03                       		tst.b	d3
0008A65A 6B00                       		bmi.s	locret_71F4A
0008A65C 1C83                       		move.b	d3,0(a6)
0008A65E                            
0008A65E                            locret_71F4A:
0008A65E 4E75                       		rts	
0008A660                            ; End of function Sound_Play
0008A660                            
0008A660                            
0008A660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008A660                            
0008A660                            
0008A660                            Sound_ChkValue:				; XREF: sub_71B4C
0008A660 7E00                       		moveq	#0,d7
0008A662 1E2E 0009                  		move.b	9(a6),d7
0008A666 6700 0000                  		beq.w	Sound_E4
0008A66A 6A00                       		bpl.s	locret_71F8C
0008A66C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008A672 0C07 009F                  		cmpi.b	#$9F,d7
0008A676 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008A67A 0C07 00A0                  		cmpi.b	#$A0,d7
0008A67E 6500 0000                  		bcs.w	locret_71F8C
0008A682 0C07 00CF                  		cmpi.b	#$CF,d7
0008A686 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008A68A 0C07 00D0                  		cmpi.b	#$D0,d7
0008A68E 6500 0000                  		bcs.w	locret_71F8C
0008A692 0C07 00D1                  		cmpi.b	#$D1,d7
0008A696 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
0008A69A 0C07 00DF                  		cmpi.b	#$DF,d7
0008A69E 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008A6A2 0C07 00E4                  		cmpi.b	#$E4,d7
0008A6A6 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008A6A8                            
0008A6A8                            locret_71F8C:
0008A6A8 4E75                       		rts	
0008A6AA                            ; ===========================================================================
0008A6AA                            
0008A6AA                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008A6AA 0407 00E0                  		subi.b	#$E0,d7
0008A6AE E54F                       		lsl.w	#2,d7
0008A6B0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008A6B4                            ; ===========================================================================
0008A6B4                            
0008A6B4                            Sound_ExIndex:
0008A6B4 6000 0000                  		bra.w	Sound_E0
0008A6B8                            ; ===========================================================================
0008A6B8 6000 0000                  		bra.w	Sound_E1
0008A6BC                            ; ===========================================================================
0008A6BC 6000 0000                  		bra.w	Sound_E2
0008A6C0                            ; ===========================================================================
0008A6C0 6000 0000                  		bra.w	Sound_E3
0008A6C4                            ; ===========================================================================
0008A6C4 6000 0000                  		bra.w	Sound_E4
0008A6C8                            ; ===========================================================================
0008A6C8                            ; ---------------------------------------------------------------------------
0008A6C8                            ; Play "Say-gaa" PCM sound
0008A6C8                            ; ---------------------------------------------------------------------------
0008A6C8                            
0008A6C8                            Sound_E1:				  
0008A6C8 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008A6CE 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0008A6D4 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0008A6DC                            PlayPCM_Loop:	  
0008A6DC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0008A6E2 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0008A6E6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0008A6EA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0008A6EC 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0008A6EE 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0008A6F2 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008A6F8 4EB8 10F0                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0008A6FC 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0008A702 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008A704 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008A706                            return_PlayPCM: 
0008A706 584F                       		addq.w	#4,sp 
0008A708 4E75                       		rts
0008A70A                            
0008A70A                            ; ===========================================================================
0008A70A                            ; ---------------------------------------------------------------------------
0008A70A                            ; Play music track $81-$9F
0008A70A                            ; ---------------------------------------------------------------------------
0008A70A                            
0008A70A                            Sound_81to9F:				; XREF: Sound_ChkValue
0008A70A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008A70E 6600                       		bne.s	loc_72024	; if not, branch
0008A710 4A2E 0027                  		tst.b	$27(a6)
0008A714 6600 0000                  		bne.w	loc_721B6
0008A718 4BEE 0040                  		lea	$40(a6),a5
0008A71C 7009                       		moveq	#9,d0
0008A71E                            
0008A71E                            loc_71FE6:
0008A71E 0895 0002                  		bclr	#2,(a5)
0008A722 DAFC 0030                  		adda.w	#$30,a5
0008A726 51C8 FFF6                  		dbf	d0,loc_71FE6
0008A72A                            
0008A72A 4BEE 0220                  		lea	$220(a6),a5
0008A72E 7005                       		moveq	#5,d0
0008A730                            
0008A730                            loc_71FF8:
0008A730 0895 0007                  		bclr	#7,(a5)
0008A734 DAFC 0030                  		adda.w	#$30,a5
0008A738 51C8 FFF6                  		dbf	d0,loc_71FF8
0008A73C 4216                       		clr.b	0(a6)
0008A73E 204E                       		movea.l	a6,a0
0008A740 43EE 03A0                  		lea	$3A0(a6),a1
0008A744 303C 0087                  		move.w	#$87,d0
0008A748                            
0008A748                            loc_72012:
0008A748 22D8                       		move.l	(a0)+,(a1)+
0008A74A 51C8 FFFC                  		dbf	d0,loc_72012
0008A74E                            
0008A74E 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008A754 4216                       		clr.b	0(a6)
0008A756 6000                       		bra.s	loc_7202C
0008A758                            ; ===========================================================================
0008A758                            
0008A758                            loc_72024:
0008A758 422E 0027                  		clr.b	$27(a6)
0008A75C 422E 0026                  		clr.b	$26(a6)
0008A760                            
0008A760                            loc_7202C:
0008A760 4EBA 0000                  		jsr	sub_725CA(pc)
0008A764 2879 0008 A0B0             		movea.l	(off_719A0).l,a4
0008A76A 0407 0081                  		subi.b	#$81,d7
0008A76E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0008A774 2879 0008 A0A8             		movea.l	(Go_MusicIndex).l,a4
0008A77A E54F                       		lsl.w	#2,d7
0008A77C 2874 7000                  		movea.l	(a4,d7.w),a4
0008A780 7000                       		moveq	#0,d0
0008A782 3014                       		move.w	(a4),d0
0008A784 D08C                       		add.l	a4,d0
0008A786 2D40 0018                  		move.l	d0,$18(a6)
0008A78A 102C 0005                  		move.b	5(a4),d0
0008A78E 1D40 0028                  		move.b	d0,$28(a6)
0008A792 4A2E 002A                  		tst.b	$2A(a6)
0008A796 6700                       		beq.s	loc_72068
0008A798 102E 0029                  		move.b	$29(a6),d0
0008A79C                            
0008A79C                            loc_72068:
0008A79C 1D40 0002                  		move.b	d0,2(a6)
0008A7A0 1D40 0001                  		move.b	d0,1(a6)
0008A7A4 7200                       		moveq	#0,d1
0008A7A6 264C                       		movea.l	a4,a3
0008A7A8 5C4C                       		addq.w	#6,a4
0008A7AA 7E00                       		moveq	#0,d7
0008A7AC 1E2B 0002                  		move.b	2(a3),d7
0008A7B0 6700 0000                  		beq.w	loc_72114
0008A7B4 5307                       		subq.b	#1,d7
0008A7B6 123C 00C0                  		move.b	#-$40,d1
0008A7BA 182B 0004                  		move.b	4(a3),d4
0008A7BE 7C30                       		moveq	#$30,d6
0008A7C0 1A3C 0001                  		move.b	#1,d5
0008A7C4 43EE 0040                  		lea	$40(a6),a1
0008A7C8 45FA 0000                  		lea	byte_721BA(pc),a2
0008A7CC                            
0008A7CC                            loc_72098:
0008A7CC 08D1 0007                  		bset	#7,(a1)
0008A7D0 135A 0001                  		move.b	(a2)+,1(a1)
0008A7D4 1344 0002                  		move.b	d4,2(a1)
0008A7D8 1346 000D                  		move.b	d6,$D(a1)
0008A7DC 1341 000A                  		move.b	d1,$A(a1)
0008A7E0 1345 000E                  		move.b	d5,$E(a1)
0008A7E4 7000                       		moveq	#0,d0
0008A7E6 301C                       		move.w	(a4)+,d0
0008A7E8 D08B                       		add.l	a3,d0
0008A7EA 2340 0004                  		move.l	d0,4(a1)
0008A7EE 335C 0008                  		move.w	(a4)+,8(a1)
0008A7F2 D2C6                       		adda.w	d6,a1
0008A7F4 51CF FFD6                  		dbf	d7,loc_72098
0008A7F8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008A7FE 6600                       		bne.s	loc_720D8
0008A800 702B                       		moveq	#$2B,d0
0008A802 7200                       		moveq	#0,d1
0008A804 4EBA 0000                  		jsr	sub_7272E(pc)
0008A808 6000 0000                  		bra.w	loc_72114
0008A80C                            ; ===========================================================================
0008A80C                            
0008A80C                            loc_720D8:
0008A80C 7028                       		moveq	#$28,d0
0008A80E 7206                       		moveq	#6,d1
0008A810 4EBA 0000                  		jsr	sub_7272E(pc)
0008A814 103C 0042                  		move.b	#$42,d0
0008A818 727F                       		moveq	#$7F,d1
0008A81A 4EBA 0000                  		jsr	sub_72764(pc)
0008A81E 103C 004A                  		move.b	#$4A,d0
0008A822 727F                       		moveq	#$7F,d1
0008A824 4EBA 0000                  		jsr	sub_72764(pc)
0008A828 103C 0046                  		move.b	#$46,d0
0008A82C 727F                       		moveq	#$7F,d1
0008A82E 4EBA 0000                  		jsr	sub_72764(pc)
0008A832 103C 004E                  		move.b	#$4E,d0
0008A836 727F                       		moveq	#$7F,d1
0008A838 4EBA 0000                  		jsr	sub_72764(pc)
0008A83C 103C 00B6                  		move.b	#-$4A,d0
0008A840 123C 00C0                  		move.b	#-$40,d1
0008A844 4EBA 0000                  		jsr	sub_72764(pc)
0008A848                            
0008A848                            loc_72114:
0008A848 7E00                       		moveq	#0,d7
0008A84A 1E2B 0003                  		move.b	3(a3),d7
0008A84E 6700                       		beq.s	loc_72154
0008A850 5307                       		subq.b	#1,d7
0008A852 43EE 0190                  		lea	$190(a6),a1
0008A856 45FA 0000                  		lea	byte_721C2(pc),a2
0008A85A                            
0008A85A                            loc_72126:
0008A85A 08D1 0007                  		bset	#7,(a1)
0008A85E 135A 0001                  		move.b	(a2)+,1(a1)
0008A862 1344 0002                  		move.b	d4,2(a1)
0008A866 1346 000D                  		move.b	d6,$D(a1)
0008A86A 1345 000E                  		move.b	d5,$E(a1)
0008A86E 7000                       		moveq	#0,d0
0008A870 301C                       		move.w	(a4)+,d0
0008A872 D08B                       		add.l	a3,d0
0008A874 2340 0004                  		move.l	d0,4(a1)
0008A878 335C 0008                  		move.w	(a4)+,8(a1)
0008A87C 101C                       		move.b	(a4)+,d0
0008A87E 135C 000B                  		move.b	(a4)+,$B(a1)
0008A882 D2C6                       		adda.w	d6,a1
0008A884 51CF FFD4                  		dbf	d7,loc_72126
0008A888                            
0008A888                            loc_72154:
0008A888 43EE 0220                  		lea	$220(a6),a1
0008A88C 7E05                       		moveq	#5,d7
0008A88E                            
0008A88E                            loc_7215A:
0008A88E 4A11                       		tst.b	(a1)
0008A890 6A00 0000                  		bpl.w	loc_7217C
0008A894 7000                       		moveq	#0,d0
0008A896 1029 0001                  		move.b	1(a1),d0
0008A89A 6B00                       		bmi.s	loc_7216E
0008A89C 5500                       		subq.b	#2,d0
0008A89E E508                       		lsl.b	#2,d0
0008A8A0 6000                       		bra.s	loc_72170
0008A8A2                            ; ===========================================================================
0008A8A2                            
0008A8A2                            loc_7216E:
0008A8A2 E608                       		lsr.b	#3,d0
0008A8A4                            
0008A8A4                            loc_72170:
0008A8A4 41FA 0000                  		lea	dword_722CC(pc),a0
0008A8A8 2070 0000                  		movea.l	(a0,d0.w),a0
0008A8AC 08D0 0002                  		bset	#2,(a0)
0008A8B0                            
0008A8B0                            loc_7217C:
0008A8B0 D2C6                       		adda.w	d6,a1
0008A8B2 51CF FFDA                  		dbf	d7,loc_7215A
0008A8B6                            
0008A8B6 4A6E 0340                  		tst.w	$340(a6)
0008A8BA 6A00                       		bpl.s	loc_7218E
0008A8BC 08EE 0002 0100             		bset	#2,$100(a6)
0008A8C2                            
0008A8C2                            loc_7218E:
0008A8C2 4A6E 0370                  		tst.w	$370(a6)
0008A8C6 6A00                       		bpl.s	loc_7219A
0008A8C8 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008A8CE                            
0008A8CE                            loc_7219A:
0008A8CE 4BEE 0070                  		lea	$70(a6),a5
0008A8D2 7805                       		moveq	#5,d4
0008A8D4                            
0008A8D4                            loc_721A0:
0008A8D4 4EBA 0000                  		jsr	sub_726FE(pc)
0008A8D8 DAC6                       		adda.w	d6,a5
0008A8DA 51CC FFF8                  		dbf	d4,loc_721A0
0008A8DE 7802                       		moveq	#2,d4
0008A8E0                            
0008A8E0                            loc_721AC:
0008A8E0 4EBA 0000                  		jsr	sub_729A0(pc)
0008A8E4 DAC6                       		adda.w	d6,a5
0008A8E6 51CC FFF8                  		dbf	d4,loc_721AC
0008A8EA                            
0008A8EA                            loc_721B6:
0008A8EA 584F                       		addq.w	#4,sp
0008A8EC 4E75                       		rts	
0008A8EE                            ; ===========================================================================
0008A8EE 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0008A8F6                            		even
0008A8F6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008A8FA                            		even
0008A8FA                            ; ===========================================================================
0008A8FA                            ; ---------------------------------------------------------------------------
0008A8FA                            ; Play normal sound effect
0008A8FA                            ; ---------------------------------------------------------------------------
0008A8FA                            
0008A8FA                            Sound_D1toDF:
0008A8FA 4A2E 0027                  		tst.b	$27(a6)
0008A8FE 6600 0000                  		bne.w	loc_722C6
0008A902 4A2E 0004                  		tst.b	4(a6)
0008A906 6600 0000                  		bne.w	loc_722C6
0008A90A 4A2E 0024                  		tst.b	$24(a6)
0008A90E 6600 0000                  		bne.w	loc_722C6
0008A912 2079 0008 A0AC             		movea.l	(Go_SoundIndex).l,a0
0008A918 0407 00A1                  		sub.b	#$A1,d7
0008A91C 6000 0000                  		bra	SoundEffects_Common
0008A920                            
0008A920                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008A920 4A2E 0027                  		tst.b	$27(a6)
0008A924 6600 0000                  		bne.w	loc_722C6
0008A928 4A2E 0004                  		tst.b	4(a6)
0008A92C 6600 0000                  		bne.w	loc_722C6
0008A930 4A2E 0024                  		tst.b	$24(a6)
0008A934 6600 0000                  		bne.w	loc_722C6
0008A938 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008A93C 6600                       		bne.s	Sound_notB5	; if not, branch
0008A93E 4A2E 002B                  		tst.b	$2B(a6)
0008A942 6600                       		bne.s	loc_721EE
0008A944 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008A948                            
0008A948                            loc_721EE:
0008A948 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008A94E                            
0008A94E                            Sound_notB5:
0008A94E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0008A952 6600                       		bne.s	Sound_notA7	; if not, branch
0008A954 4A2E 002C                  		tst.b	$2C(a6)
0008A958 6600 0000                  		bne.w	locret_722C4
0008A95C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0008A962                            
0008A962                            Sound_notA7:
0008A962 2079 0008 A0AC             		movea.l	(Go_SoundIndex).l,a0
0008A968 0407 00A0                  		subi.b	#$A0,d7
0008A96C                            
0008A96C                            SoundEffects_Common:
0008A96C E54F                       		lsl.w	#2,d7
0008A96E 2670 7000                  		movea.l	(a0,d7.w),a3
0008A972 224B                       		movea.l	a3,a1
0008A974 7200                       		moveq	#0,d1
0008A976 3219                       		move.w	(a1)+,d1
0008A978 D28B                       		add.l	a3,d1
0008A97A 1A19                       		move.b	(a1)+,d5
0008A97C 1E19                       		move.b	(a1)+,d7
0008A97E 5307                       		subq.b	#1,d7
0008A980 7C30                       		moveq	#$30,d6
0008A982                            
0008A982                            loc_72228:
0008A982 7600                       		moveq	#0,d3
0008A984 1629 0001                  		move.b	1(a1),d3
0008A988 1803                       		move.b	d3,d4
0008A98A 6B00                       		bmi.s	loc_72244
0008A98C 5543                       		subq.w	#2,d3
0008A98E E54B                       		lsl.w	#2,d3
0008A990 4BFA 0000                  		lea	dword_722CC(pc),a5
0008A994 2A75 3000                  		movea.l	(a5,d3.w),a5
0008A998 08D5 0002                  		bset	#2,(a5)
0008A99C 6000                       		bra.s	loc_7226E
0008A99E                            ; ===========================================================================
0008A99E                            
0008A99E                            loc_72244:
0008A99E E64B                       		lsr.w	#3,d3
0008A9A0 4BFA 0000                  		lea	dword_722CC(pc),a5
0008A9A4 2A75 3000                  		movea.l	(a5,d3.w),a5
0008A9A8 08D5 0002                  		bset	#2,(a5)
0008A9AC 0C04 00C0                  		cmpi.b	#$C0,d4
0008A9B0 6600                       		bne.s	loc_7226E
0008A9B2 1004                       		move.b	d4,d0
0008A9B4 0000 001F                  		ori.b	#$1F,d0
0008A9B8 13C0 00C0 0011             		move.b	d0,($C00011).l
0008A9BE 0840 0005                  		bchg	#5,d0
0008A9C2 13C0 00C0 0011             		move.b	d0,($C00011).l
0008A9C8                            
0008A9C8                            loc_7226E:
0008A9C8 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0008A9CC 244D                       		movea.l	a5,a2
0008A9CE 700B                       		moveq	#$B,d0
0008A9D0                            
0008A9D0                            loc_72276:
0008A9D0 429A                       		clr.l	(a2)+
0008A9D2 51C8 FFFC                  		dbf	d0,loc_72276
0008A9D6                            
0008A9D6 3A99                       		move.w	(a1)+,(a5)
0008A9D8 1B45 0002                  		move.b	d5,2(a5)
0008A9DC 7000                       		moveq	#0,d0
0008A9DE 3019                       		move.w	(a1)+,d0
0008A9E0 D08B                       		add.l	a3,d0
0008A9E2 2B40 0004                  		move.l	d0,4(a5)
0008A9E6 3B59 0008                  		move.w	(a1)+,8(a5)
0008A9EA 1B7C 0001 000E             		move.b	#1,$E(a5)
0008A9F0 1B46 000D                  		move.b	d6,$D(a5)
0008A9F4 4A04                       		tst.b	d4
0008A9F6 6B00                       		bmi.s	loc_722A8
0008A9F8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008A9FE 2B41 0020                  		move.l	d1,$20(a5)
0008AA02                            
0008AA02                            loc_722A8:
0008AA02 51CF FF7E                  		dbf	d7,loc_72228
0008AA06                            
0008AA06 4A2E 0250                  		tst.b	$250(a6)
0008AA0A 6A00                       		bpl.s	loc_722B8
0008AA0C 08EE 0002 0340             		bset	#2,$340(a6)
0008AA12                            
0008AA12                            loc_722B8:
0008AA12 4A2E 0310                  		tst.b	$310(a6)
0008AA16 6A00                       		bpl.s	locret_722C4
0008AA18 08EE 0002 0370             		bset	#2,$370(a6)
0008AA1E                            
0008AA1E                            locret_722C4:
0008AA1E 4E75                       		rts	
0008AA20                            ; ===========================================================================
0008AA20                            
0008AA20                            loc_722C6:
0008AA20 4216                       		clr.b	0(a6)
0008AA22 4E75                       		rts	
0008AA24                            ; ===========================================================================
0008AA24 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008AA28 0000 0000                  		dc.l 0
0008AA2C 00FF F100                  		dc.l $FFF100
0008AA30 00FF F130                  		dc.l $FFF130
0008AA34 00FF F190                  		dc.l $FFF190
0008AA38 00FF F1C0                  		dc.l $FFF1C0
0008AA3C 00FF F1F0                  		dc.l $FFF1F0
0008AA40 00FF F1F0                  		dc.l $FFF1F0
0008AA44 00FF F220                  dword_722EC:	dc.l $FFF220
0008AA48 0000 0000                  		dc.l 0
0008AA4C 00FF F250                  		dc.l $FFF250
0008AA50 00FF F280                  		dc.l $FFF280
0008AA54 00FF F2B0                  		dc.l $FFF2B0
0008AA58 00FF F2E0                  		dc.l $FFF2E0
0008AA5C 00FF F310                  		dc.l $FFF310
0008AA60 00FF F310                  		dc.l $FFF310
0008AA64                            ; ===========================================================================
0008AA64                            ; ---------------------------------------------------------------------------
0008AA64                            ; Play GHZ waterfall sound
0008AA64                            ; ---------------------------------------------------------------------------
0008AA64                            
0008AA64                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008AA64 4A2E 0027                  		tst.b	$27(a6)
0008AA68 6600 0000                  		bne.w	locret_723C6
0008AA6C 4A2E 0004                  		tst.b	4(a6)
0008AA70 6600 0000                  		bne.w	locret_723C6
0008AA74 4A2E 0024                  		tst.b	$24(a6)
0008AA78 6600 0000                  		bne.w	locret_723C6
0008AA7C 2079 0008 A0A4             		movea.l	(Go_SoundD0).l,a0
0008AA82 0407 00D0                  		subi.b	#$D0,d7
0008AA86 E54F                       		lsl.w	#2,d7
0008AA88 2670 7000                  		movea.l	(a0,d7.w),a3
0008AA8C 224B                       		movea.l	a3,a1
0008AA8E 7000                       		moveq	#0,d0
0008AA90 3019                       		move.w	(a1)+,d0
0008AA92 D08B                       		add.l	a3,d0
0008AA94 2D40 0020                  		move.l	d0,$20(a6)
0008AA98 1A19                       		move.b	(a1)+,d5
0008AA9A 1E19                       		move.b	(a1)+,d7
0008AA9C 5307                       		subq.b	#1,d7
0008AA9E 7C30                       		moveq	#$30,d6
0008AAA0                            
0008AAA0                            loc_72348:
0008AAA0 1829 0001                  		move.b	1(a1),d4
0008AAA4 6B00                       		bmi.s	loc_7235A
0008AAA6 08EE 0002 0100             		bset	#2,$100(a6)
0008AAAC 4BEE 0340                  		lea	$340(a6),a5
0008AAB0 6000                       		bra.s	loc_72364
0008AAB2                            ; ===========================================================================
0008AAB2                            
0008AAB2                            loc_7235A:
0008AAB2 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008AAB8 4BEE 0370                  		lea	$370(a6),a5
0008AABC                            
0008AABC                            loc_72364:
0008AABC 244D                       		movea.l	a5,a2
0008AABE 700B                       		moveq	#$B,d0
0008AAC0                            
0008AAC0                            loc_72368:
0008AAC0 429A                       		clr.l	(a2)+
0008AAC2 51C8 FFFC                  		dbf	d0,loc_72368
0008AAC6                            
0008AAC6 3A99                       		move.w	(a1)+,(a5)
0008AAC8 1B45 0002                  		move.b	d5,2(a5)
0008AACC 7000                       		moveq	#0,d0
0008AACE 3019                       		move.w	(a1)+,d0
0008AAD0 D08B                       		add.l	a3,d0
0008AAD2 2B40 0004                  		move.l	d0,4(a5)
0008AAD6 3B59 0008                  		move.w	(a1)+,8(a5)
0008AADA 1B7C 0001 000E             		move.b	#1,$E(a5)
0008AAE0 1B46 000D                  		move.b	d6,$D(a5)
0008AAE4 4A04                       		tst.b	d4
0008AAE6 6B00                       		bmi.s	loc_72396
0008AAE8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008AAEE                            
0008AAEE                            loc_72396:
0008AAEE 51CF FFB0                  		dbf	d7,loc_72348
0008AAF2                            
0008AAF2 4A2E 0250                  		tst.b	$250(a6)
0008AAF6 6A00                       		bpl.s	loc_723A6
0008AAF8 08EE 0002 0340             		bset	#2,$340(a6)
0008AAFE                            
0008AAFE                            loc_723A6:
0008AAFE 4A2E 0310                  		tst.b	$310(a6)
0008AB02 6A00                       		bpl.s	locret_723C6
0008AB04 08EE 0002 0370             		bset	#2,$370(a6)
0008AB0A 0004 001F                  		ori.b	#$1F,d4
0008AB0E 13C4 00C0 0011             		move.b	d4,($C00011).l
0008AB14 0844 0005                  		bchg	#5,d4
0008AB18 13C4 00C0 0011             		move.b	d4,($C00011).l
0008AB1E                            
0008AB1E                            locret_723C6:
0008AB1E 4E75                       		rts	
0008AB20                            ; End of function Sound_ChkValue
0008AB20                            
0008AB20                            ; ===========================================================================
0008AB20 00FF F100                  		dc.l $FFF100
0008AB24 00FF F1F0                  		dc.l $FFF1F0
0008AB28 00FF F250                  		dc.l $FFF250
0008AB2C 00FF F310                  		dc.l $FFF310
0008AB30 00FF F340                  		dc.l $FFF340
0008AB34 00FF F370                  		dc.l $FFF370
0008AB38                            
0008AB38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AB38                            
0008AB38                            
0008AB38                            Snd_FadeOut1:				; XREF: Sound_E0
0008AB38 4216                       		clr.b	0(a6)
0008AB3A 4BEE 0220                  		lea	$220(a6),a5
0008AB3E 7E05                       		moveq	#5,d7
0008AB40                            
0008AB40                            loc_723EA:
0008AB40 4A15                       		tst.b	(a5)
0008AB42 6A00 0000                  		bpl.w	loc_72472
0008AB46 0895 0007                  		bclr	#7,(a5)
0008AB4A 7600                       		moveq	#0,d3
0008AB4C 162D 0001                  		move.b	1(a5),d3
0008AB50 6B00                       		bmi.s	loc_7243C
0008AB52 4EBA 0000                  		jsr	sub_726FE(pc)
0008AB56 0C03 0004                  		cmpi.b	#4,d3
0008AB5A 6600                       		bne.s	loc_72416
0008AB5C 4A2E 0340                  		tst.b	$340(a6)
0008AB60 6A00                       		bpl.s	loc_72416
0008AB62 4BEE 0340                  		lea	$340(a6),a5
0008AB66 226E 0020                  		movea.l	$20(a6),a1
0008AB6A 6000                       		bra.s	loc_72428
0008AB6C                            ; ===========================================================================
0008AB6C                            
0008AB6C                            loc_72416:
0008AB6C 5503                       		subq.b	#2,d3
0008AB6E E50B                       		lsl.b	#2,d3
0008AB70 41FA FEB2                  		lea	dword_722CC(pc),a0
0008AB74 264D                       		movea.l	a5,a3
0008AB76 2A70 3000                  		movea.l	(a0,d3.w),a5
0008AB7A 226E 0018                  		movea.l	$18(a6),a1
0008AB7E                            
0008AB7E                            loc_72428:
0008AB7E 0895 0002                  		bclr	#2,(a5)
0008AB82 08D5 0001                  		bset	#1,(a5)
0008AB86 102D 000B                  		move.b	$B(a5),d0
0008AB8A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008AB8E 2A4B                       		movea.l	a3,a5
0008AB90 6000                       		bra.s	loc_72472
0008AB92                            ; ===========================================================================
0008AB92                            
0008AB92                            loc_7243C:
0008AB92 4EBA 0000                  		jsr	sub_729A0(pc)
0008AB96 41EE 0370                  		lea	$370(a6),a0
0008AB9A 0C03 00E0                  		cmpi.b	#$E0,d3
0008AB9E 6700                       		beq.s	loc_7245A
0008ABA0 0C03 00C0                  		cmpi.b	#$C0,d3
0008ABA4 6700                       		beq.s	loc_7245A
0008ABA6 E60B                       		lsr.b	#3,d3
0008ABA8 41FA FE7A                  		lea	dword_722CC(pc),a0
0008ABAC 2070 3000                  		movea.l	(a0,d3.w),a0
0008ABB0                            
0008ABB0                            loc_7245A:
0008ABB0 0890 0002                  		bclr	#2,(a0)
0008ABB4 08D0 0001                  		bset	#1,(a0)
0008ABB8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008ABBE 6600                       		bne.s	loc_72472
0008ABC0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008ABC8                            
0008ABC8                            loc_72472:
0008ABC8 DAFC 0030                  		adda.w	#$30,a5
0008ABCC 51CF FF72                  		dbf	d7,loc_723EA
0008ABD0                            
0008ABD0 4E75                       		rts	
0008ABD2                            ; End of function Snd_FadeOut1
0008ABD2                            
0008ABD2                            
0008ABD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008ABD2                            
0008ABD2                            
0008ABD2                            Snd_FadeOut2:				; XREF: Sound_E0
0008ABD2 4BEE 0340                  		lea	$340(a6),a5
0008ABD6 4A15                       		tst.b	(a5)
0008ABD8 6A00                       		bpl.s	loc_724AE
0008ABDA 0895 0007                  		bclr	#7,(a5)
0008ABDE 0815 0002                  		btst	#2,(a5)
0008ABE2 6600                       		bne.s	loc_724AE
0008ABE4 4EBA 0000                  		jsr	loc_7270A(pc)
0008ABE8 4BEE 0100                  		lea	$100(a6),a5
0008ABEC 0895 0002                  		bclr	#2,(a5)
0008ABF0 08D5 0001                  		bset	#1,(a5)
0008ABF4 4A15                       		tst.b	(a5)
0008ABF6 6A00                       		bpl.s	loc_724AE
0008ABF8 226E 0018                  		movea.l	$18(a6),a1
0008ABFC 102D 000B                  		move.b	$B(a5),d0
0008AC00 4EBA 0000                  		jsr	sub_72C4E(pc)
0008AC04                            
0008AC04                            loc_724AE:
0008AC04 4BEE 0370                  		lea	$370(a6),a5
0008AC08 4A15                       		tst.b	(a5)
0008AC0A 6A00                       		bpl.s	locret_724E4
0008AC0C 0895 0007                  		bclr	#7,(a5)
0008AC10 0815 0002                  		btst	#2,(a5)
0008AC14 6600                       		bne.s	locret_724E4
0008AC16 4EBA 0000                  		jsr	loc_729A6(pc)
0008AC1A 4BEE 01F0                  		lea	$1F0(a6),a5
0008AC1E 0895 0002                  		bclr	#2,(a5)
0008AC22 08D5 0001                  		bset	#1,(a5)
0008AC26 4A15                       		tst.b	(a5)
0008AC28 6A00                       		bpl.s	locret_724E4
0008AC2A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008AC30 6600                       		bne.s	locret_724E4
0008AC32 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0008AC3A                            
0008AC3A                            locret_724E4:
0008AC3A 4E75                       		rts	
0008AC3C                            ; End of function Snd_FadeOut2
0008AC3C                            
0008AC3C                            ; ===========================================================================
0008AC3C                            ; ---------------------------------------------------------------------------
0008AC3C                            ; Fade out music
0008AC3C                            ; ---------------------------------------------------------------------------
0008AC3C                            
0008AC3C                            Sound_E0:				; XREF: Sound_ExIndex
0008AC3C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008AC40 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008AC44 1D7C 0003 0006             		move.b	#3,6(a6)
0008AC4A 1D7C 0028 0004             		move.b	#$28,4(a6)
0008AC50 422E 0040                  		clr.b	$40(a6)
0008AC54 422E 002A                  		clr.b	$2A(a6)
0008AC58 4E75                       		rts	
0008AC5A                            
0008AC5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AC5A                            
0008AC5A                            
0008AC5A                            sub_72504:				; XREF: sub_71B4C
0008AC5A 102E 0006                  		move.b	6(a6),d0
0008AC5E 6700                       		beq.s	loc_72510
0008AC60 532E 0006                  		subq.b	#1,6(a6)
0008AC64 4E75                       		rts	
0008AC66                            ; ===========================================================================
0008AC66                            
0008AC66                            loc_72510:
0008AC66 532E 0004                  		subq.b	#1,4(a6)
0008AC6A 6700 0000                  		beq.w	Sound_E4
0008AC6E 1D7C 0003 0006             		move.b	#3,6(a6)
0008AC74 4BEE 0070                  		lea	$70(a6),a5
0008AC78 7E05                       		moveq	#5,d7
0008AC7A                            
0008AC7A                            loc_72524:
0008AC7A 4A15                       		tst.b	(a5)
0008AC7C 6A00                       		bpl.s	loc_72538
0008AC7E 522D 0009                  		addq.b	#1,9(a5)
0008AC82 6A00                       		bpl.s	loc_72534
0008AC84 0895 0007                  		bclr	#7,(a5)
0008AC88 6000                       		bra.s	loc_72538
0008AC8A                            ; ===========================================================================
0008AC8A                            
0008AC8A                            loc_72534:
0008AC8A 4EBA 0000                  		jsr	sub_72CB4(pc)
0008AC8E                            
0008AC8E                            loc_72538:
0008AC8E DAFC 0030                  		adda.w	#$30,a5
0008AC92 51CF FFE6                  		dbf	d7,loc_72524
0008AC96                            
0008AC96 7E02                       		moveq	#2,d7
0008AC98                            
0008AC98                            loc_72542:
0008AC98 4A15                       		tst.b	(a5)
0008AC9A 6A00                       		bpl.s	loc_72560
0008AC9C 522D 0009                  		addq.b	#1,9(a5)
0008ACA0 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008ACA6 6500                       		bcs.s	loc_72558
0008ACA8 0895 0007                  		bclr	#7,(a5)
0008ACAC 6000                       		bra.s	loc_72560
0008ACAE                            ; ===========================================================================
0008ACAE                            
0008ACAE                            loc_72558:
0008ACAE 1C2D 0009                  		move.b	9(a5),d6
0008ACB2 4EBA 0000                  		jsr	sub_7296A(pc)
0008ACB6                            
0008ACB6                            loc_72560:
0008ACB6 DAFC 0030                  		adda.w	#$30,a5
0008ACBA 51CF FFDC                  		dbf	d7,loc_72542
0008ACBE                            
0008ACBE 4E75                       		rts	
0008ACC0                            ; End of function sub_72504
0008ACC0                            
0008ACC0                            
0008ACC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008ACC0                            
0008ACC0                            
0008ACC0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0008ACC0 7602                       		moveq	#2,d3
0008ACC2 7028                       		moveq	#$28,d0
0008ACC4                            
0008ACC4                            loc_7256E:
0008ACC4 1203                       		move.b	d3,d1
0008ACC6 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACCA 5801                       		addq.b	#4,d1
0008ACCC 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACD0 51CB FFF2                  		dbf	d3,loc_7256E
0008ACD4                            
0008ACD4 7040                       		moveq	#$40,d0
0008ACD6 727F                       		moveq	#$7F,d1
0008ACD8 7802                       		moveq	#2,d4
0008ACDA                            
0008ACDA                            loc_72584:
0008ACDA 7603                       		moveq	#3,d3
0008ACDC                            
0008ACDC                            loc_72586:
0008ACDC 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACE0 4EBA 0000                  		jsr	sub_72764(pc)
0008ACE4 5840                       		addq.w	#4,d0
0008ACE6 51CB FFF4                  		dbf	d3,loc_72586
0008ACEA                            
0008ACEA 0400 000F                  		subi.b	#$F,d0
0008ACEE 51CC FFEA                  		dbf	d4,loc_72584
0008ACF2                            
0008ACF2 4E75                       		rts	
0008ACF4                            ; End of function sub_7256A
0008ACF4                            
0008ACF4                            ; ===========================================================================
0008ACF4                            ; ---------------------------------------------------------------------------
0008ACF4                            ; Stop music
0008ACF4                            ; ---------------------------------------------------------------------------
0008ACF4                            
0008ACF4                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008ACF4 702B                       		moveq	#$2B,d0
0008ACF6 123C 0080                  		move.b	#$80,d1
0008ACFA 4EBA 0000                  		jsr	sub_7272E(pc)
0008ACFE 7027                       		moveq	#$27,d0
0008AD00 7200                       		moveq	#0,d1
0008AD02 4EBA 0000                  		jsr	sub_7272E(pc)
0008AD06 204E                       		movea.l	a6,a0
0008AD08 303C 00E3                  		move.w	#$E3,d0
0008AD0C                            
0008AD0C                            loc_725B6:
0008AD0C 4298                       		clr.l	(a0)+
0008AD0E 51C8 FFFC                  		dbf	d0,loc_725B6
0008AD12                            
0008AD12 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008AD18 4EBA FFA6                  		jsr	sub_7256A(pc)
0008AD1C 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
0008AD24 6000 0000                  		bra.w	sub_729B6
0008AD28                            
0008AD28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AD28                            
0008AD28                            
0008AD28                            sub_725CA:				; XREF: Sound_ChkValue
0008AD28 204E                       		movea.l	a6,a0
0008AD2A 1216                       		move.b	0(a6),d1
0008AD2C 142E 0027                  		move.b	$27(a6),d2
0008AD30 162E 002A                  		move.b	$2A(a6),d3
0008AD34 182E 0026                  		move.b	$26(a6),d4
0008AD38 3A2E 000A                  		move.w	$A(a6),d5
0008AD3C 303C 0087                  		move.w	#$87,d0
0008AD40                            
0008AD40                            loc_725E4:
0008AD40 4298                       		clr.l	(a0)+
0008AD42 51C8 FFFC                  		dbf	d0,loc_725E4
0008AD46                            
0008AD46 1C81                       		move.b	d1,0(a6)
0008AD48 1D42 0027                  		move.b	d2,$27(a6)
0008AD4C 1D43 002A                  		move.b	d3,$2A(a6)
0008AD50 1D44 0026                  		move.b	d4,$26(a6)
0008AD54 3D45 000A                  		move.w	d5,$A(a6)
0008AD58 1D7C 0080 0009             		move.b	#$80,9(a6)
0008AD5E 4EBA FF60                  		jsr	sub_7256A(pc)
0008AD62 6000 0000                  		bra.w	sub_729B6
0008AD66                            ; End of function sub_725CA
0008AD66                            
0008AD66                            
0008AD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AD66                            
0008AD66                            
0008AD66                            sub_7260C:				; XREF: sub_71B4C
0008AD66 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008AD6C 41EE 004E                  		lea	$4E(a6),a0
0008AD70 7030                       		moveq	#$30,d0
0008AD72 7209                       		moveq	#9,d1
0008AD74                            
0008AD74                            loc_7261A:
0008AD74 5210                       		addq.b	#1,(a0)
0008AD76 D0C0                       		adda.w	d0,a0
0008AD78 51C9 FFFA                  		dbf	d1,loc_7261A
0008AD7C                            
0008AD7C 4E75                       		rts	
0008AD7E                            ; End of function sub_7260C
0008AD7E                            
0008AD7E                            ; ===========================================================================
0008AD7E                            ; ---------------------------------------------------------------------------
0008AD7E                            ; Speed	up music
0008AD7E                            ; ---------------------------------------------------------------------------
0008AD7E                            
0008AD7E                            Sound_E2:				; XREF: Sound_ExIndex
0008AD7E 4A2E 0027                  		tst.b	$27(a6)
0008AD82 6600                       		bne.s	loc_7263E
0008AD84 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0008AD8A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008AD90 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008AD96 4E75                       		rts	
0008AD98                            ; ===========================================================================
0008AD98                            
0008AD98                            loc_7263E:
0008AD98 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0008AD9E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0008ADA4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0008ADAA 4E75                       		rts	
0008ADAC                            ; ===========================================================================
0008ADAC                            ; ---------------------------------------------------------------------------
0008ADAC                            ; Change music back to normal speed
0008ADAC                            ; ---------------------------------------------------------------------------
0008ADAC                            
0008ADAC                            Sound_E3:				; XREF: Sound_ExIndex
0008ADAC 4A2E 0027                  		tst.b	$27(a6)
0008ADB0 6600                       		bne.s	loc_7266A
0008ADB2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0008ADB8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008ADBE 422E 002A                  		clr.b	$2A(a6)
0008ADC2 4E75                       		rts	
0008ADC4                            ; ===========================================================================
0008ADC4                            
0008ADC4                            loc_7266A:
0008ADC4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0008ADCA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0008ADD0 422E 03CA                  		clr.b	$3CA(a6)
0008ADD4 4E75                       		rts	
0008ADD6                            
0008ADD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008ADD6                            
0008ADD6                            
0008ADD6                            sub_7267C:				; XREF: sub_71B4C
0008ADD6 4A2E 0025                  		tst.b	$25(a6)
0008ADDA 6700                       		beq.s	loc_72688
0008ADDC 532E 0025                  		subq.b	#1,$25(a6)
0008ADE0 4E75                       		rts	
0008ADE2                            ; ===========================================================================
0008ADE2                            
0008ADE2                            loc_72688:
0008ADE2 4A2E 0026                  		tst.b	$26(a6)
0008ADE6 6700                       		beq.s	loc_726D6
0008ADE8 532E 0026                  		subq.b	#1,$26(a6)
0008ADEC 1D7C 0002 0025             		move.b	#2,$25(a6)
0008ADF2 4BEE 0070                  		lea	$70(a6),a5
0008ADF6 7E05                       		moveq	#5,d7
0008ADF8                            
0008ADF8                            loc_7269E:
0008ADF8 4A15                       		tst.b	(a5)
0008ADFA 6A00                       		bpl.s	loc_726AA
0008ADFC 532D 0009                  		subq.b	#1,9(a5)
0008AE00 4EBA 0000                  		jsr	sub_72CB4(pc)
0008AE04                            
0008AE04                            loc_726AA:
0008AE04 DAFC 0030                  		adda.w	#$30,a5
0008AE08 51CF FFEE                  		dbf	d7,loc_7269E
0008AE0C 7E02                       		moveq	#2,d7
0008AE0E                            
0008AE0E                            loc_726B4:
0008AE0E 4A15                       		tst.b	(a5)
0008AE10 6A00                       		bpl.s	loc_726CC
0008AE12 532D 0009                  		subq.b	#1,9(a5)
0008AE16 1C2D 0009                  		move.b	9(a5),d6
0008AE1A 0C06 0010                  		cmpi.b	#$10,d6
0008AE1E 6500                       		bcs.s	loc_726C8
0008AE20 7C0F                       		moveq	#$F,d6
0008AE22                            
0008AE22                            loc_726C8:
0008AE22 4EBA 0000                  		jsr	sub_7296A(pc)
0008AE26                            
0008AE26                            loc_726CC:
0008AE26 DAFC 0030                  		adda.w	#$30,a5
0008AE2A 51CF FFE2                  		dbf	d7,loc_726B4
0008AE2E 4E75                       		rts	
0008AE30                            ; ===========================================================================
0008AE30                            
0008AE30                            loc_726D6:
0008AE30 08AE 0002 0040             		bclr	#2,$40(a6)
0008AE36 422E 0024                  		clr.b	$24(a6)
0008AE3A                            
0008AE3A 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
0008AE3E 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
0008AE40                            
0008AE40 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
0008AE42 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
0008AE46 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
0008AE4A                            
0008AE4A                            Resume_NoDAC:
0008AE4A 4E75                       		rts
0008AE4C                            
0008AE4C                            ; ===========================================================================
0008AE4C                            
0008AE4C                            loc_726E2:				; XREF: sub_71CCA
0008AE4C 0815 0001                  		btst	#1,(a5)
0008AE50 6600                       		bne.s	locret_726FC
0008AE52 0815 0002                  		btst	#2,(a5)
0008AE56 6600                       		bne.s	locret_726FC
0008AE58 7028                       		moveq	#$28,d0
0008AE5A 122D 0001                  		move.b	1(a5),d1
0008AE5E 0001 00F0                  		ori.b	#-$10,d1
0008AE62 6000 0000                  		bra.w	sub_7272E
0008AE66                            ; ===========================================================================
0008AE66                            
0008AE66                            locret_726FC:
0008AE66 4E75                       		rts	
0008AE68                            
0008AE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE68                            
0008AE68                            
0008AE68                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008AE68 0815 0004                  		btst	#4,(a5)
0008AE6C 6600                       		bne.s	locret_72714
0008AE6E 0815 0002                  		btst	#2,(a5)
0008AE72 6600                       		bne.s	locret_72714
0008AE74                            
0008AE74                            loc_7270A:				; XREF: Snd_FadeOut2
0008AE74 7028                       		moveq	#$28,d0
0008AE76 122D 0001                  		move.b	1(a5),d1
0008AE7A 6000 0000                  		bra.w	sub_7272E
0008AE7E                            ; ===========================================================================
0008AE7E                            
0008AE7E                            locret_72714:
0008AE7E 4E75                       		rts	
0008AE80                            ; End of function sub_726FE
0008AE80                            
0008AE80                            ; ===========================================================================
0008AE80                            
0008AE80                            loc_72716:				; XREF: sub_72A5A
0008AE80 0815 0002                  		btst	#2,(a5)
0008AE84 6600                       		bne.s	locret_72720
0008AE86 6000 0000                  		bra.w	sub_72722
0008AE8A                            ; ===========================================================================
0008AE8A                            
0008AE8A                            locret_72720:
0008AE8A 4E75                       		rts	
0008AE8C                            
0008AE8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE8C                            
0008AE8C                            
0008AE8C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008AE8C 082D 0002 0001             		btst	#2,1(a5)
0008AE92 6600                       		bne.s	loc_7275A
0008AE94 D02D 0001                  		add.b	1(a5),d0
0008AE98                            ; End of function sub_72722
0008AE98                            
0008AE98                            
0008AE98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE98                            
0008AE98                            
0008AE98                            sub_7272E:				; XREF: loc_71E6A
0008AE98 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE9E 0802 0007                  		btst	#7,d2
0008AEA2 66F4                       		bne.s	sub_7272E
0008AEA4 13C0 00A0 4000             		move.b	d0,($A04000).l
0008AEAA 4E71                       		nop	
0008AEAC 4E71                       		nop	
0008AEAE 4E71                       		nop	
0008AEB0                            
0008AEB0                            loc_72746:
0008AEB0 1439 00A0 4000             		move.b	($A04000).l,d2
0008AEB6 0802 0007                  		btst	#7,d2
0008AEBA 66F4                       		bne.s	loc_72746
0008AEBC                            
0008AEBC 13C1 00A0 4001             		move.b	d1,($A04001).l
0008AEC2 4E75                       		rts	
0008AEC4                            ; End of function sub_7272E
0008AEC4                            
0008AEC4                            ; ===========================================================================
0008AEC4                            
0008AEC4                            loc_7275A:				; XREF: sub_72722
0008AEC4 142D 0001                  		move.b	1(a5),d2
0008AEC8 0882 0002                  		bclr	#2,d2
0008AECC D002                       		add.b	d2,d0
0008AECE                            
0008AECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AECE                            
0008AECE                            
0008AECE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0008AECE 1439 00A0 4000             		move.b	($A04000).l,d2
0008AED4 0802 0007                  		btst	#7,d2
0008AED8 66F4                       		bne.s	sub_72764
0008AEDA 13C0 00A0 4002             		move.b	d0,($A04002).l
0008AEE0 4E71                       		nop	
0008AEE2 4E71                       		nop	
0008AEE4 4E71                       		nop	
0008AEE6                            
0008AEE6                            loc_7277C:
0008AEE6 1439 00A0 4000             		move.b	($A04000).l,d2
0008AEEC 0802 0007                  		btst	#7,d2
0008AEF0 66F4                       		bne.s	loc_7277C
0008AEF2                            
0008AEF2 13C1 00A0 4003             		move.b	d1,($A04003).l
0008AEF8 4E75                       		rts	
0008AEFA                            ; End of function sub_72764
0008AEFA                            
0008AEFA                            ; ===========================================================================
0008AEFA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008AF0C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008AF1E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008AF2E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008AF3E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008AF4E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008AF5E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008AF6E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008AF7E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008AF8E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008AF9E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0008AFAE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0008AFBA                            
0008AFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFBA                            
0008AFBA                            
0008AFBA                            sub_72850:				; XREF: sub_71B4C
0008AFBA 532D 000E                  		subq.b	#1,$E(a5)
0008AFBE 6600                       		bne.s	loc_72866
0008AFC0 0895 0004                  		bclr	#4,(a5)
0008AFC4 4EBA 0000                  		jsr	sub_72878(pc)
0008AFC8 4EBA 0000                  		jsr	sub_728DC(pc)
0008AFCC 6000 0000                  		bra.w	loc_7292E
0008AFD0                            ; ===========================================================================
0008AFD0                            
0008AFD0                            loc_72866:
0008AFD0 4EBA F4D4                  		jsr	sub_71D9E(pc)
0008AFD4 4EBA 0000                  		jsr	sub_72926(pc)
0008AFD8 4EBA F4F4                  		jsr	sub_71DC6(pc)
0008AFDC 4EBA 0000                  		jsr	sub_728E2(pc)
0008AFE0 4E75                       		rts	
0008AFE2                            ; End of function sub_72850
0008AFE2                            
0008AFE2                            
0008AFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFE2                            
0008AFE2                            
0008AFE2                            sub_72878:				; XREF: sub_72850
0008AFE2 0895 0001                  		bclr	#1,(a5)
0008AFE6 286D 0004                  		movea.l	4(a5),a4
0008AFEA                            
0008AFEA                            loc_72880:
0008AFEA 7A00                       		moveq	#0,d5
0008AFEC 1A1C                       		move.b	(a4)+,d5
0008AFEE 0C05 00E0                  		cmpi.b	#$E0,d5
0008AFF2 6500                       		bcs.s	loc_72890
0008AFF4 4EBA 0000                  		jsr	sub_72A5A(pc)
0008AFF8 60F0                       		bra.s	loc_72880
0008AFFA                            ; ===========================================================================
0008AFFA                            
0008AFFA                            loc_72890:
0008AFFA 4A05                       		tst.b	d5
0008AFFC 6A00                       		bpl.s	loc_728A4
0008AFFE 4EBA 0000                  		jsr	sub_728AC(pc)
0008B002 1A1C                       		move.b	(a4)+,d5
0008B004 4A05                       		tst.b	d5
0008B006 6A00                       		bpl.s	loc_728A4
0008B008 534C                       		subq.w	#1,a4
0008B00A 6000 F45C                  		bra.w	sub_71D60
0008B00E                            ; ===========================================================================
0008B00E                            
0008B00E                            loc_728A4:
0008B00E 4EBA F438                  		jsr	sub_71D40(pc)
0008B012 6000 F454                  		bra.w	sub_71D60
0008B016                            ; End of function sub_72878
0008B016                            
0008B016                            
0008B016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B016                            
0008B016                            
0008B016                            sub_728AC:				; XREF: sub_72878
0008B016 0405 0081                  		subi.b	#$81,d5
0008B01A 6500                       		bcs.s	loc_728CA
0008B01C DA2D 0008                  		add.b	8(a5),d5
0008B020 0245 007F                  		andi.w	#$7F,d5
0008B024 E34D                       		lsl.w	#1,d5
0008B026 41FA 0000                  		lea	word_729CE(pc),a0
0008B02A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008B030 6000 F436                  		bra.w	sub_71D60
0008B034                            ; ===========================================================================
0008B034                            
0008B034                            loc_728CA:
0008B034 08D5 0001                  		bset	#1,(a5)
0008B038 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008B03E 4EBA F428                  		jsr	sub_71D60(pc)
0008B042 6000 0000                  		bra.w	sub_729A0
0008B046                            ; End of function sub_728AC
0008B046                            
0008B046                            
0008B046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B046                            
0008B046                            
0008B046                            sub_728DC:				; XREF: sub_72850
0008B046 3C2D 0010                  		move.w	$10(a5),d6
0008B04A 6B00                       		bmi.s	loc_72920
0008B04C                            ; End of function sub_728DC
0008B04C                            
0008B04C                            
0008B04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B04C                            
0008B04C                            
0008B04C                            sub_728E2:				; XREF: sub_72850
0008B04C 102D 001E                  		move.b	$1E(a5),d0
0008B050 4880                       		ext.w	d0
0008B052 DC40                       		add.w	d0,d6
0008B054 0815 0002                  		btst	#2,(a5)
0008B058 6600                       		bne.s	locret_7291E
0008B05A 0815 0001                  		btst	#1,(a5)
0008B05E 6600                       		bne.s	locret_7291E
0008B060 102D 0001                  		move.b	1(a5),d0
0008B064 0C00 00E0                  		cmpi.b	#$E0,d0
0008B068 6600                       		bne.s	loc_72904
0008B06A 103C 00C0                  		move.b	#$C0,d0
0008B06E                            
0008B06E                            loc_72904:
0008B06E 3206                       		move.w	d6,d1
0008B070 0201 000F                  		andi.b	#$F,d1
0008B074 8001                       		or.b	d1,d0
0008B076 E84E                       		lsr.w	#4,d6
0008B078 0206 003F                  		andi.b	#$3F,d6
0008B07C 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B082 13C6 00C0 0011             		move.b	d6,($C00011).l
0008B088                            
0008B088                            locret_7291E:
0008B088 4E75                       		rts	
0008B08A                            ; End of function sub_728E2
0008B08A                            
0008B08A                            ; ===========================================================================
0008B08A                            
0008B08A                            loc_72920:				; XREF: sub_728DC
0008B08A 08D5 0001                  		bset	#1,(a5)
0008B08E 4E75                       		rts	
0008B090                            
0008B090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B090                            
0008B090                            
0008B090                            sub_72926:				; XREF: sub_72850
0008B090 4A2D 000B                  		tst.b	$B(a5)
0008B094 6700 0000                  		beq.w	locret_7298A
0008B098                            
0008B098                            loc_7292E:				; XREF: sub_72850
0008B098 1C2D 0009                  		move.b	9(a5),d6
0008B09C 7000                       		moveq	#0,d0
0008B09E 102D 000B                  		move.b	$B(a5),d0
0008B0A2 6700                       		beq.s	sub_7296A
0008B0A4 2079 0008 A0B4             		movea.l	(Go_PSGIndex).l,a0
0008B0AA 5340                       		subq.w	#1,d0
0008B0AC E548                       		lsl.w	#2,d0
0008B0AE 2070 0000                  		movea.l	(a0,d0.w),a0
0008B0B2 102D 000C                  		move.b	$C(a5),d0
0008B0B6 1030 0000                  		move.b	(a0,d0.w),d0
0008B0BA 522D 000C                  		addq.b	#1,$C(a5)
0008B0BE 0800 0007                  		btst	#7,d0
0008B0C2 6700                       		beq.s	loc_72960
0008B0C4 0C00 0080                  		cmpi.b	#$80,d0
0008B0C8 6700                       		beq.s	loc_7299A
0008B0CA                            
0008B0CA                            loc_72960:
0008B0CA DC40                       		add.w	d0,d6
0008B0CC 0C06 0010                  		cmpi.b	#$10,d6
0008B0D0 6500                       		bcs.s	sub_7296A
0008B0D2 7C0F                       		moveq	#$F,d6
0008B0D4                            ; End of function sub_72926
0008B0D4                            
0008B0D4                            
0008B0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B0D4                            
0008B0D4                            
0008B0D4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0008B0D4 0815 0001                  		btst	#1,(a5)
0008B0D8 6600                       		bne.s	locret_7298A
0008B0DA 0815 0002                  		btst	#2,(a5)
0008B0DE 6600                       		bne.s	locret_7298A
0008B0E0 0815 0004                  		btst	#4,(a5)
0008B0E4 6600                       		bne.s	loc_7298C
0008B0E6                            
0008B0E6                            loc_7297C:
0008B0E6 8C2D 0001                  		or.b	1(a5),d6
0008B0EA 0606 0010                  		addi.b	#$10,d6
0008B0EE 13C6 00C0 0011             		move.b	d6,($C00011).l
0008B0F4                            
0008B0F4                            locret_7298A:
0008B0F4 4E75                       		rts	
0008B0F6                            ; ===========================================================================
0008B0F6                            
0008B0F6                            loc_7298C:
0008B0F6 4A2D 0013                  		tst.b	$13(a5)
0008B0FA 67EA                       		beq.s	loc_7297C
0008B0FC 4A2D 0012                  		tst.b	$12(a5)
0008B100 66E4                       		bne.s	loc_7297C
0008B102 4E75                       		rts	
0008B104                            ; End of function sub_7296A
0008B104                            
0008B104                            ; ===========================================================================
0008B104                            
0008B104                            loc_7299A:				; XREF: sub_72926
0008B104 532D 000C                  		subq.b	#1,$C(a5)
0008B108 4E75                       		rts	
0008B10A                            
0008B10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B10A                            
0008B10A                            
0008B10A                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0008B10A 0815 0002                  		btst	#2,(a5)
0008B10E 6600                       		bne.s	locret_729B4
0008B110                            
0008B110                            loc_729A6:				; XREF: Snd_FadeOut2
0008B110 102D 0001                  		move.b	1(a5),d0
0008B114 0000 001F                  		ori.b	#$1F,d0
0008B118 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B11E                            
0008B11E                            locret_729B4:
0008B11E 4E75                       		rts	
0008B120                            ; End of function sub_729A0
0008B120                            
0008B120                            
0008B120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B120                            
0008B120                            
0008B120                            sub_729B6:				; XREF: loc_71E7C
0008B120 41F9 00C0 0011             		lea	($C00011).l,a0
0008B126 10BC 009F                  		move.b	#$9F,(a0)
0008B12A 10BC 00BF                  		move.b	#$BF,(a0)
0008B12E 10BC 00DF                  		move.b	#$DF,(a0)
0008B132 10BC 00FF                  		move.b	#$FF,(a0)
0008B136 4E75                       		rts	
0008B138                            ; End of function sub_729B6
0008B138                            
0008B138                            ; ===========================================================================
0008B138 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0008B14A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008B15C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008B170 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0008B184 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0008B198 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008B1AC 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008B1C0 0011 0000                  		dc.w $11, 0
0008B1C4                            
0008B1C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B1C4                            
0008B1C4                            
0008B1C4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008B1C4 0445 00E0                  		subi.w	#$E0,d5
0008B1C8 E54D                       		lsl.w	#2,d5
0008B1CA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008B1CE                            ; End of function sub_72A5A
0008B1CE                            
0008B1CE                            ; ===========================================================================
0008B1CE                            
0008B1CE                            loc_72A64:
0008B1CE 6000 0000                  		bra.w	loc_72ACC
0008B1D2                            ; ===========================================================================
0008B1D2 6000 0000                  		bra.w	loc_72AEC
0008B1D6                            ; ===========================================================================
0008B1D6 6000 0000                  		bra.w	loc_72AF2
0008B1DA                            ; ===========================================================================
0008B1DA 6000 0000                  		bra.w	loc_72AF8
0008B1DE                            ; ===========================================================================
0008B1DE 6000 0000                  		bra.w	loc_72B14
0008B1E2                            ; ===========================================================================
0008B1E2 6000 0000                  		bra.w	loc_72B9E
0008B1E6                            ; ===========================================================================
0008B1E6 6000 0000                  		bra.w	loc_72BA4
0008B1EA                            ; ===========================================================================
0008B1EA 6000 0000                  		bra.w	loc_72BAE
0008B1EE                            ; ===========================================================================
0008B1EE 6000 0000                  		bra.w	loc_72BB4
0008B1F2                            ; ===========================================================================
0008B1F2 6000 0000                  		bra.w	loc_72BBE
0008B1F6                            ; ===========================================================================
0008B1F6 6000 0000                  		bra.w	loc_72BC6
0008B1FA                            ; ===========================================================================
0008B1FA 6000 0000                  		bra.w	loc_72BD0
0008B1FE                            ; ===========================================================================
0008B1FE 6000 0000                  		bra.w	loc_72BE6
0008B202                            ; ===========================================================================
0008B202 6000 0000                  		bra.w	loc_72BEE
0008B206                            ; ===========================================================================
0008B206 6000 0000                  		bra.w	loc_72BF4
0008B20A                            ; ===========================================================================
0008B20A 6000 0000                  		bra.w	loc_72C26
0008B20E                            ; ===========================================================================
0008B20E 6000 0000                  		bra.w	loc_72D30
0008B212                            ; ===========================================================================
0008B212 6000 0000                  		bra.w	loc_72D52
0008B216                            ; ===========================================================================
0008B216 6000 0000                  		bra.w	loc_72D58
0008B21A                            ; ===========================================================================
0008B21A 6000 0000                  		bra.w	loc_72E06
0008B21E                            ; ===========================================================================
0008B21E 6000 0000                  		bra.w	loc_72E20
0008B222                            ; ===========================================================================
0008B222 6000 0000                  		bra.w	loc_72E26
0008B226                            ; ===========================================================================
0008B226 6000 0000                  		bra.w	loc_72E2C
0008B22A                            ; ===========================================================================
0008B22A 6000 0000                  		bra.w	loc_72E38
0008B22E                            ; ===========================================================================
0008B22E 6000 0000                  		bra.w	loc_72E52
0008B232                            ; ===========================================================================
0008B232 6000 0000                  		bra.w	loc_72E64
0008B236                            ; ===========================================================================
0008B236                            
0008B236                            loc_72ACC:				; XREF: loc_72A64
0008B236 121C                       		move.b	(a4)+,d1
0008B238 4A2D 0001                  		tst.b	1(a5)
0008B23C 6B00                       		bmi.s	locret_72AEA
0008B23E 102D 000A                  		move.b	$A(a5),d0
0008B242 0200 0037                  		andi.b	#$37,d0
0008B246 8200                       		or.b	d0,d1
0008B248 1B41 000A                  		move.b	d1,$A(a5)
0008B24C 103C 00B4                  		move.b	#$B4,d0
0008B250 6000 FC2E                  		bra.w	loc_72716
0008B254                            ; ===========================================================================
0008B254                            
0008B254                            locret_72AEA:
0008B254 4E75                       		rts	
0008B256                            ; ===========================================================================
0008B256                            
0008B256                            loc_72AEC:				; XREF: loc_72A64
0008B256 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008B25A 4E75                       		rts	
0008B25C                            ; ===========================================================================
0008B25C                            
0008B25C                            loc_72AF2:				; XREF: loc_72A64
0008B25C 1D5C 0007                  		move.b	(a4)+,7(a6)
0008B260 4E75                       		rts	
0008B262                            ; ===========================================================================
0008B262                            
0008B262                            loc_72AF8:				; XREF: loc_72A64
0008B262 7000                       		moveq	#0,d0
0008B264 102D 000D                  		move.b	$D(a5),d0
0008B268 2875 0000                  		movea.l	(a5,d0.w),a4
0008B26C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0008B274 544C                       		addq.w	#2,a4
0008B276 5800                       		addq.b	#4,d0
0008B278 1B40 000D                  		move.b	d0,$D(a5)
0008B27C 4E75                       		rts	
0008B27E                            ; ===========================================================================
0008B27E                            
0008B27E                            loc_72B14:				; XREF: loc_72A64
0008B27E 204E                       		movea.l	a6,a0
0008B280 43EE 03A0                  		lea	$3A0(a6),a1
0008B284 303C 0087                  		move.w	#$87,d0
0008B288                            
0008B288                            loc_72B1E:
0008B288 20D9                       		move.l	(a1)+,(a0)+
0008B28A 51C8 FFFC                  		dbf	d0,loc_72B1E
0008B28E                            
0008B28E 08EE 0002 0040             		bset	#2,$40(a6)
0008B294 264D                       		movea.l	a5,a3
0008B296 1C3C 0028                  		move.b	#$28,d6
0008B29A 9C2E 0026                  		sub.b	$26(a6),d6
0008B29E 7E05                       		moveq	#5,d7
0008B2A0 4BEE 0070                  		lea	$70(a6),a5
0008B2A4                            
0008B2A4                            loc_72B3A:
0008B2A4 0815 0007                  		btst	#7,(a5)
0008B2A8 6700                       		beq.s	loc_72B5C
0008B2AA 08D5 0001                  		bset	#1,(a5)
0008B2AE DD2D 0009                  		add.b	d6,9(a5)
0008B2B2 0815 0002                  		btst	#2,(a5)
0008B2B6 6600                       		bne.s	loc_72B5C
0008B2B8 7000                       		moveq	#0,d0
0008B2BA 102D 000B                  		move.b	$B(a5),d0
0008B2BE 226E 0018                  		movea.l	$18(a6),a1
0008B2C2 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B2C6                            
0008B2C6                            loc_72B5C:
0008B2C6 DAFC 0030                  		adda.w	#$30,a5
0008B2CA 51CF FFD8                  		dbf	d7,loc_72B3A
0008B2CE                            
0008B2CE 7E02                       		moveq	#2,d7
0008B2D0                            
0008B2D0                            loc_72B66:
0008B2D0 0815 0007                  		btst	#7,(a5)
0008B2D4 6700                       		beq.s	loc_72B78
0008B2D6 08D5 0001                  		bset	#1,(a5)
0008B2DA 4EBA FE2E                  		jsr	sub_729A0(pc)
0008B2DE DD2D 0009                  		add.b	d6,9(a5)
0008B2E2                            
0008B2E2                            loc_72B78:
0008B2E2 DAFC 0030                  		adda.w	#$30,a5
0008B2E6 51CF FFE8                  		dbf	d7,loc_72B66
0008B2EA 2A4B                       		movea.l	a3,a5
0008B2EC 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
0008B2F0 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
0008B2F2                            
0008B2F2 702B                       		moveq	#$2B,d0			; DAC enable/disable register
0008B2F4 7200                       		moveq	#0,d1			; Disable DAC
0008B2F6 4EBA FBA0                  		jsr	sub_7272E(pc)
0008B2FA                            
0008B2FA                            Restore_NoFM6
0008B2FA 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008B300 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008B306 422E 0027                  		clr.b	$27(a6)
0008B30A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0008B312 504F                       		addq.w	#8,sp
0008B314 4E75                       		rts	
0008B316                            ; ===========================================================================
0008B316                            
0008B316                            loc_72B9E:				; XREF: loc_72A64
0008B316 1B5C 0002                  		move.b	(a4)+,2(a5)
0008B31A 4E75                       		rts	
0008B31C                            ; ===========================================================================
0008B31C                            
0008B31C                            loc_72BA4:				; XREF: loc_72A64
0008B31C 101C                       		move.b	(a4)+,d0
0008B31E D12D 0009                  		add.b	d0,9(a5)
0008B322 6000 0000                  		bra.w	sub_72CB4
0008B326                            ; ===========================================================================
0008B326                            
0008B326                            loc_72BAE:				; XREF: loc_72A64
0008B326 08D5 0004                  		bset	#4,(a5)
0008B32A 4E75                       		rts	
0008B32C                            ; ===========================================================================
0008B32C                            
0008B32C                            loc_72BB4:				; XREF: loc_72A64
0008B32C 1B54 0012                  		move.b	(a4),$12(a5)
0008B330 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008B334 4E75                       		rts	
0008B336                            ; ===========================================================================
0008B336                            
0008B336                            loc_72BBE:				; XREF: loc_72A64
0008B336 101C                       		move.b	(a4)+,d0
0008B338 D12D 0008                  		add.b	d0,8(a5)
0008B33C 4E75                       		rts	
0008B33E                            ; ===========================================================================
0008B33E                            
0008B33E                            loc_72BC6:				; XREF: loc_72A64
0008B33E 1D54 0002                  		move.b	(a4),2(a6)
0008B342 1D5C 0001                  		move.b	(a4)+,1(a6)
0008B346 4E75                       		rts	
0008B348                            ; ===========================================================================
0008B348                            
0008B348                            loc_72BD0:				; XREF: loc_72A64
0008B348 41EE 0040                  		lea	$40(a6),a0
0008B34C 101C                       		move.b	(a4)+,d0
0008B34E 7230                       		moveq	#$30,d1
0008B350 7409                       		moveq	#9,d2
0008B352                            
0008B352                            loc_72BDA:
0008B352 1140 0002                  		move.b	d0,2(a0)
0008B356 D0C1                       		adda.w	d1,a0
0008B358 51CA FFF8                  		dbf	d2,loc_72BDA
0008B35C                            
0008B35C 4E75                       		rts	
0008B35E                            ; ===========================================================================
0008B35E                            
0008B35E                            loc_72BE6:				; XREF: loc_72A64
0008B35E 101C                       		move.b	(a4)+,d0
0008B360 D12D 0009                  		add.b	d0,9(a5)
0008B364 4E75                       		rts	
0008B366                            ; ===========================================================================
0008B366                            
0008B366                            loc_72BEE:				; XREF: loc_72A64
0008B366 422E 002C                  		clr.b	$2C(a6)
0008B36A 4E75                       		rts	
0008B36C                            ; ===========================================================================
0008B36C                            
0008B36C                            loc_72BF4:				; XREF: loc_72A64
0008B36C 0895 0007                  		bclr	#7,(a5)
0008B370 0895 0004                  		bclr	#4,(a5)
0008B374 4EBA FAF2                  		jsr	sub_726FE(pc)
0008B378 4A2E 0250                  		tst.b	$250(a6)
0008B37C 6B00                       		bmi.s	loc_72C22
0008B37E 264D                       		movea.l	a5,a3
0008B380 4BEE 0100                  		lea	$100(a6),a5
0008B384 226E 0018                  		movea.l	$18(a6),a1
0008B388 0895 0002                  		bclr	#2,(a5)
0008B38C 08D5 0001                  		bset	#1,(a5)
0008B390 102D 000B                  		move.b	$B(a5),d0
0008B394 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B398 2A4B                       		movea.l	a3,a5
0008B39A                            
0008B39A                            loc_72C22:
0008B39A 504F                       		addq.w	#8,sp
0008B39C 4E75                       		rts	
0008B39E                            ; ===========================================================================
0008B39E                            
0008B39E                            loc_72C26:				; XREF: loc_72A64
0008B39E 7000                       		moveq	#0,d0
0008B3A0 101C                       		move.b	(a4)+,d0
0008B3A2 1B40 000B                  		move.b	d0,$B(a5)
0008B3A6 0815 0002                  		btst	#2,(a5)
0008B3AA 6600 0000                  		bne.w	locret_72CAA
0008B3AE 226E 0018                  		movea.l	$18(a6),a1
0008B3B2 4A2E 000E                  		tst.b	$E(a6)
0008B3B6 6700                       		beq.s	sub_72C4E
0008B3B8 226D 0020                  		movea.l	$20(a5),a1
0008B3BC 4A2E 000E                  		tst.b	$E(a6)
0008B3C0 6B00                       		bmi.s	sub_72C4E
0008B3C2 226E 0020                  		movea.l	$20(a6),a1
0008B3C6                            
0008B3C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B3C6                            
0008B3C6                            
0008B3C6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008B3C6 5340                       		subq.w	#1,d0
0008B3C8 6B00                       		bmi.s	loc_72C5C
0008B3CA 323C 0019                  		move.w	#$19,d1
0008B3CE                            
0008B3CE                            loc_72C56:
0008B3CE D2C1                       		adda.w	d1,a1
0008B3D0 51C8 FFFC                  		dbf	d0,loc_72C56
0008B3D4                            
0008B3D4                            loc_72C5C:
0008B3D4 1219                       		move.b	(a1)+,d1
0008B3D6 1B41 001F                  		move.b	d1,$1F(a5)
0008B3DA 1801                       		move.b	d1,d4
0008B3DC 103C 00B0                  		move.b	#$B0,d0
0008B3E0 4EBA FAAA                  		jsr	sub_72722(pc)
0008B3E4 45FA 0000                  		lea	byte_72D18(pc),a2
0008B3E8 7613                       		moveq	#$13,d3
0008B3EA                            
0008B3EA                            loc_72C72:
0008B3EA 101A                       		move.b	(a2)+,d0
0008B3EC 1219                       		move.b	(a1)+,d1
0008B3EE 4EBA FA9C                  		jsr	sub_72722(pc)
0008B3F2 51CB FFF6                  		dbf	d3,loc_72C72
0008B3F6 7A03                       		moveq	#3,d5
0008B3F8 0244 0007                  		andi.w	#7,d4
0008B3FC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008B400 162D 0009                  		move.b	9(a5),d3
0008B404                            
0008B404                            loc_72C8C:
0008B404 101A                       		move.b	(a2)+,d0
0008B406 1219                       		move.b	(a1)+,d1
0008B408 E20C                       		lsr.b	#1,d4
0008B40A 6400                       		bcc.s	loc_72C96
0008B40C D203                       		add.b	d3,d1
0008B40E                            
0008B40E                            loc_72C96:
0008B40E 4EBA FA7C                  		jsr	sub_72722(pc)
0008B412 51CD FFF0                  		dbf	d5,loc_72C8C
0008B416 103C 00B4                  		move.b	#$B4,d0
0008B41A 122D 000A                  		move.b	$A(a5),d1
0008B41E 4EBA FA6C                  		jsr	sub_72722(pc)
0008B422                            
0008B422                            locret_72CAA:
0008B422 4E75                       		rts	
0008B424                            ; End of function sub_72C4E
0008B424                            
0008B424                            ; ===========================================================================
0008B424 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008B42C                            
0008B42C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B42C                            
0008B42C                            
0008B42C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008B42C 0815 0002                  		btst	#2,(a5)
0008B430 6600                       		bne.s	locret_72D16
0008B432 7000                       		moveq	#0,d0
0008B434 102D 000B                  		move.b	$B(a5),d0
0008B438 226E 0018                  		movea.l	$18(a6),a1
0008B43C 4A2E 000E                  		tst.b	$E(a6)
0008B440 6700                       		beq.s	loc_72CD8
0008B442 226E 0020                  		movea.l	$20(a6),a1
0008B446 4A2E 000E                  		tst.b	$E(a6)
0008B44A 6B00                       		bmi.s	loc_72CD8
0008B44C 226E 0020                  		movea.l	$20(a6),a1
0008B450                            
0008B450                            loc_72CD8:
0008B450 5340                       		subq.w	#1,d0
0008B452 6B00                       		bmi.s	loc_72CE6
0008B454 323C 0019                  		move.w	#$19,d1
0008B458                            
0008B458                            loc_72CE0:
0008B458 D2C1                       		adda.w	d1,a1
0008B45A 51C8 FFFC                  		dbf	d0,loc_72CE0
0008B45E                            
0008B45E                            loc_72CE6:
0008B45E D2FC 0015                  		adda.w	#$15,a1
0008B462 45FA 0000                  		lea	byte_72D2C(pc),a2
0008B466 102D 001F                  		move.b	$1F(a5),d0
0008B46A 0240 0007                  		andi.w	#7,d0
0008B46E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008B472 162D 0009                  		move.b	9(a5),d3
0008B476 6B00                       		bmi.s	locret_72D16
0008B478 7A03                       		moveq	#3,d5
0008B47A                            
0008B47A                            loc_72D02:
0008B47A 101A                       		move.b	(a2)+,d0
0008B47C 1219                       		move.b	(a1)+,d1
0008B47E E20C                       		lsr.b	#1,d4
0008B480 6400                       		bcc.s	loc_72D12
0008B482 D203                       		add.b	d3,d1
0008B484 6500                       		bcs.s	loc_72D12
0008B486 4EBA FA04                  		jsr	sub_72722(pc)
0008B48A                            
0008B48A                            loc_72D12:
0008B48A 51CD FFEE                  		dbf	d5,loc_72D02
0008B48E                            
0008B48E                            locret_72D16:
0008B48E 4E75                       		rts	
0008B490                            ; End of function sub_72CB4
0008B490                            
0008B490                            ; ===========================================================================
0008B490 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008B49A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008B4A4 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008B4A8                            ; ===========================================================================
0008B4A8                            
0008B4A8                            loc_72D30:				; XREF: loc_72A64
0008B4A8 08D5 0003                  		bset	#3,(a5)
0008B4AC 2B4C 0014                  		move.l	a4,$14(a5)
0008B4B0 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008B4B4 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008B4B8 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008B4BC 101C                       		move.b	(a4)+,d0
0008B4BE E208                       		lsr.b	#1,d0
0008B4C0 1B40 001B                  		move.b	d0,$1B(a5)
0008B4C4 426D 001C                  		clr.w	$1C(a5)
0008B4C8 4E75                       		rts	
0008B4CA                            ; ===========================================================================
0008B4CA                            
0008B4CA                            loc_72D52:				; XREF: loc_72A64
0008B4CA 08D5 0003                  		bset	#3,(a5)
0008B4CE 4E75                       		rts	
0008B4D0                            ; ===========================================================================
0008B4D0                            
0008B4D0                            loc_72D58:				; XREF: loc_72A64
0008B4D0 0895 0007                  		bclr	#7,(a5)
0008B4D4 0895 0004                  		bclr	#4,(a5)
0008B4D8 4A2D 0001                  		tst.b	1(a5)
0008B4DC 6B00                       		bmi.s	loc_72D74
0008B4DE 4A2E 0008                  		tst.b	8(a6)
0008B4E2 6B00 0000                  		bmi.w	loc_72E02
0008B4E6 4EBA F980                  		jsr	sub_726FE(pc)
0008B4EA 6000                       		bra.s	loc_72D78
0008B4EC                            ; ===========================================================================
0008B4EC                            
0008B4EC                            loc_72D74:
0008B4EC 4EBA FC1C                  		jsr	sub_729A0(pc)
0008B4F0                            
0008B4F0                            loc_72D78:
0008B4F0 4A2E 000E                  		tst.b	$E(a6)
0008B4F4 6A00 0000                  		bpl.w	loc_72E02
0008B4F8 4216                       		clr.b	0(a6)
0008B4FA 7000                       		moveq	#0,d0
0008B4FC 102D 0001                  		move.b	1(a5),d0
0008B500 6B00                       		bmi.s	loc_72DCC
0008B502 41FA F520                  		lea	dword_722CC(pc),a0
0008B506 264D                       		movea.l	a5,a3
0008B508 0C00 0004                  		cmpi.b	#4,d0
0008B50C 6600                       		bne.s	loc_72DA8
0008B50E 4A2E 0340                  		tst.b	$340(a6)
0008B512 6A00                       		bpl.s	loc_72DA8
0008B514 4BEE 0340                  		lea	$340(a6),a5
0008B518 226E 0020                  		movea.l	$20(a6),a1
0008B51C 6000                       		bra.s	loc_72DB8
0008B51E                            ; ===========================================================================
0008B51E                            
0008B51E                            loc_72DA8:
0008B51E 5500                       		subq.b	#2,d0
0008B520 E508                       		lsl.b	#2,d0
0008B522 2A70 0000                  		movea.l	(a0,d0.w),a5
0008B526 4A15                       		tst.b	(a5)
0008B528 6A00                       		bpl.s	loc_72DC8
0008B52A 226E 0018                  		movea.l	$18(a6),a1
0008B52E                            
0008B52E                            loc_72DB8:
0008B52E 0895 0002                  		bclr	#2,(a5)
0008B532 08D5 0001                  		bset	#1,(a5)
0008B536 102D 000B                  		move.b	$B(a5),d0
0008B53A 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008B53E                            
0008B53E                            loc_72DC8:
0008B53E 2A4B                       		movea.l	a3,a5
0008B540 6000                       		bra.s	loc_72E02
0008B542                            ; ===========================================================================
0008B542                            
0008B542                            loc_72DCC:
0008B542 41EE 0370                  		lea	$370(a6),a0
0008B546 4A10                       		tst.b	(a0)
0008B548 6A00                       		bpl.s	loc_72DE0
0008B54A 0C00 00E0                  		cmpi.b	#$E0,d0
0008B54E 6700                       		beq.s	loc_72DEA
0008B550 0C00 00C0                  		cmpi.b	#$C0,d0
0008B554 6700                       		beq.s	loc_72DEA
0008B556                            
0008B556                            loc_72DE0:
0008B556 41FA F4CC                  		lea	dword_722CC(pc),a0
0008B55A E608                       		lsr.b	#3,d0
0008B55C 2070 0000                  		movea.l	(a0,d0.w),a0
0008B560                            
0008B560                            loc_72DEA:
0008B560 0890 0002                  		bclr	#2,(a0)
0008B564 08D0 0001                  		bset	#1,(a0)
0008B568 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008B56E 6600                       		bne.s	loc_72E02
0008B570 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008B578                            
0008B578                            loc_72E02:
0008B578 504F                       		addq.w	#8,sp
0008B57A 4E75                       		rts	
0008B57C                            ; ===========================================================================
0008B57C                            
0008B57C                            loc_72E06:				; XREF: loc_72A64
0008B57C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0008B582 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0008B586 0815 0002                  		btst	#2,(a5)
0008B58A 6600                       		bne.s	locret_72E1E
0008B58C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0008B594                            
0008B594                            locret_72E1E:
0008B594 4E75                       		rts	
0008B596                            ; ===========================================================================
0008B596                            
0008B596                            loc_72E20:				; XREF: loc_72A64
0008B596 0895 0003                  		bclr	#3,(a5)
0008B59A 4E75                       		rts	
0008B59C                            ; ===========================================================================
0008B59C                            
0008B59C                            loc_72E26:				; XREF: loc_72A64
0008B59C 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008B5A0 4E75                       		rts	
0008B5A2                            ; ===========================================================================
0008B5A2                            
0008B5A2                            loc_72E2C:				; XREF: loc_72A64
0008B5A2 101C                       		move.b	(a4)+,d0
0008B5A4 E148                       		lsl.w	#8,d0
0008B5A6 101C                       		move.b	(a4)+,d0
0008B5A8 D8C0                       		adda.w	d0,a4
0008B5AA 534C                       		subq.w	#1,a4
0008B5AC 4E75                       		rts	
0008B5AE                            ; ===========================================================================
0008B5AE                            
0008B5AE                            loc_72E38:				; XREF: loc_72A64
0008B5AE 7000                       		moveq	#0,d0
0008B5B0 101C                       		move.b	(a4)+,d0
0008B5B2 121C                       		move.b	(a4)+,d1
0008B5B4 4A35 0024                  		tst.b	$24(a5,d0.w)
0008B5B8 6600                       		bne.s	loc_72E48
0008B5BA 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008B5BE                            
0008B5BE                            loc_72E48:
0008B5BE 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008B5C2 66DE                       		bne.s	loc_72E2C
0008B5C4 544C                       		addq.w	#2,a4
0008B5C6 4E75                       		rts	
0008B5C8                            ; ===========================================================================
0008B5C8                            
0008B5C8                            loc_72E52:				; XREF: loc_72A64
0008B5C8 7000                       		moveq	#0,d0
0008B5CA 102D 000D                  		move.b	$D(a5),d0
0008B5CE 5900                       		subq.b	#4,d0
0008B5D0 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008B5D4 1B40 000D                  		move.b	d0,$D(a5)
0008B5D8 60C8                       		bra.s	loc_72E2C
0008B5DA                            ; ===========================================================================
0008B5DA                            
0008B5DA                            loc_72E64:				; XREF: loc_72A64
0008B5DA 103C 0088                  		move.b	#$88,d0
0008B5DE 123C 000F                  		move.b	#$F,d1
0008B5E2 4EBA F8B4                  		jsr	sub_7272E(pc)
0008B5E6 103C 008C                  		move.b	#$8C,d0
0008B5EA 123C 000F                  		move.b	#$F,d1
0008B5EE 6000 F8A8                  		bra.w	sub_7272E
0008B5F2                            ; ===========================================================================
0008B5F2                            Kos_Z80:	include    'MegaPCM.asm'
0008B5F2                            
0008B5F2                            ; ===============================================================
0008B5F2                            ; Mega PCM Driver Include File
0008B5F2                            ; (c) 2012, Vladikcomper
0008B5F2                            ; ===============================================================
0008B5F2                            
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            ; Variables used in DAC table
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            
0008B5F2                            ; flags
0008B5F2 =000000C0                  panLR	= $C0
0008B5F2 =00000080                  panL	= $80
0008B5F2 =00000040                  panR	= $40
0008B5F2 =00000000                  pcm	= 0
0008B5F2 =00000004                  dpcm	= 4
0008B5F2 =00000002                  loop	= 2
0008B5F2 =00000001                  pri	= 1
0008B5F2                            
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            ; Macros
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            
0008B5F2                            z80word macro Value
0008B5F2                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
0008B5F2                            	endm
0008B5F2                            
0008B5F2                            DAC_Entry macro Pitch,Offset,Flags
0008B5F2                            	dc.b	\Flags			; 00h	- Flags
0008B5F2                            	dc.b	\Pitch			; 01h	- Pitch
0008B5F2                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
0008B5F2                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
0008B5F2                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
0008B5F2                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
0008B5F2                            	endm
0008B5F2                            	
0008B5F2                            IncludeDAC macro Name,Extension
0008B5F2                            \Name:
0008B5F2                            	if strcmp('\extension','wav')
0008B5F2                            		incbin	'dac/\Name\.\Extension\',$3A
0008B5F2                            	else
0008B5F2                            		incbin	'dac/\Name\.\Extension\'
0008B5F2                            	endc
0008B5F2                            \Name\_End:
0008B5F2                            	endm
0008B5F2                            
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            ; Driver's code
0008B5F2                            ; ---------------------------------------------------------------
0008B5F2                            
0008B5F2                            MegaPCM:
0008B5F2                            	incbin	'MegaPCM.z80'
0008B802                            
0008B802                            ; ---------------------------------------------------------------
0008B802                            ; DAC Samples Table
0008B802                            ; ---------------------------------------------------------------
0008B802                            
0008B802 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
0008B80A 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
0008B812 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
0008B81A 0000 0000 0000 0000        	dc.l	0,0					; $84	- <Free>
0008B822 0000 0000 0000 0000        	dc.l	0,0					; $85	- <Free>
0008B82A 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
0008B832 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
0008B83A 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
0008B842 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
0008B84A 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
0008B852 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
0008B85A                            
0008B85A                            MegaPCM_End:
0008B85A                            
0008B85A                            ; ---------------------------------------------------------------
0008B85A                            ; DAC Samples Files
0008B85A                            ; ---------------------------------------------------------------
0008B85A                            
0008CE5C                            	even
0008CE5C                            
0008CE5C                            
0008CE5C                            
0008CE5C                            Music81:	incbin	"sound\Mind In The Gutter I.bin"
0008E20A                            		even
0008E20A                            Music82:	incbin	sound\music82.bin
0008E65A                            		even
0008E65A                            Music83:	incbin	"sound\Tutorial With Attitude.bin"
0008F17E 00                         		even
0008F17E                            Music84:	incbin	sound\music84.bin
0008F5EC                            		even
0008F5EC                            Music85:	incbin	sound\music85.bin
0008FA38                            		even
0008FA38                            Music86:	incbin	sound\music86.bin
0008FF88                            		even
0008FF88                            Music87:	incbin	sound\Jeopardyinv.bin
00090462                            		even
00090462                            Music88:	incbin	sound\music88.bin
00090550                            		even
00090550                            Music89:	incbin	sound\music89.bin
0009087C                            		even
0009087C                            Music8A:	incbin	sound\Jeopardy.bin
00090D84 00                         		even
00090D84                            Music8B:	incbin	sound\music8B.bin
0009101E                            		even
0009101E                            Music8C:	incbin	sound\music8C.bin
00091BD0 00                         		even
00091BD0                            Music8D:	incbin	sound\music8D.bin
00091DEC                            		even
00091DEC                            Music8E:	incbin	sound\music8E.bin
00091F42                            		even
00091F42                            Music8F:	incbin	sound\music8F.bin
0009244C 00                         		even
0009244C                            Music90:	incbin	sound\music90.bin
000925AA                            		even
000925AA                            Music91:	incbin	sound\music91.bin
00093878                            		even
00093878                            Music92:	incbin	sound\music92.bin
000939A2                            		even
000939A2                            Music93:	incbin	sound\music93.bin
00093A70                            		even
00093A70                            Music94:	incbin	"#Owarisoft\owarisoft logo Sound.bin"
00093BAE                            		even
00093BAE                            Music95:	incbin	sound\SpeedShoes.bin
00093D94                            		even
00093D94                            Music96:	incbin	sound\SpeedShoesInv.bin
00093F7A                            		even
00093F7A                            Music97:	incbin	"sound\Mind In The Gutter II.bin"
00094EA4                            		even
00094EA4                            		
00094EA4                            ; ---------------------------------------------------------------------------
00094EA4                            ; Sound	effect pointers
00094EA4                            ; ---------------------------------------------------------------------------
00094EA4 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00094EB0 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00094EBC 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00094EC8 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00094ED4 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00094EE0 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00094EEC 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00094EF8 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00094F04 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00094F10 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00094F1C 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00094F28 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00094F34 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00094F40 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00094F4C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00094F58 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00094F64 0000 0000                  SoundD0Index:	dc.l SoundD0
00094F68                            SoundA0:	incbin	sound\soundA0.bin
00094F7E                            		even
00094F7E                            SoundA1:	incbin	sound\soundA1.bin
00094FA8                            		even
00094FA8                            SoundA2:	incbin	sound\soundA2.bin
00094FC8                            		even
00094FC8                            SoundA3:	incbin	sound\soundA3.bin
00094FFA                            		even
00094FFA                            SoundA4:	incbin	sound\soundA4.bin
00095030                            		even
00095030                            SoundA5:	incbin	sound\soundA5.bin
0009505C                            		even
0009505C                            SoundA6:	incbin	sound\soundA6.bin
0009508C                            		even
0009508C                            SoundA7:	incbin	sound\soundA7.bin
000950BC                            		even
000950BC                            SoundA8:	incbin	sound\soundA8.bin
000950F0                            		even
000950F0                            SoundA9:	incbin	sound\soundA9.bin
00095102                            		even
00095102                            SoundAA:	incbin	sound\soundAA.bin
00095144                            		even
00095144                            SoundAB:	incbin	sound\soundAB.bin
00095164                            		even
00095164                            SoundAC:	incbin	sound\soundAC.bin
00095198                            		even
00095198                            SoundAD:	incbin	sound\soundAD.bin
000951CE                            		even
000951CE                            SoundAE:	incbin	sound\soundAE.bin
00095218                            		even
00095218                            SoundAF:	incbin	sound\soundAF.bin
00095246                            		even
00095246                            SoundB0:	incbin	sound\soundB0.bin
00095278                            		even
00095278                            SoundB1:	incbin	sound\soundB1.bin
000952A4                            		even
000952A4                            SoundB2:	incbin	sound\soundB2.bin
000952F4                            		even
000952F4                            SoundB3:	incbin	sound\soundB3.bin
0009533E                            		even
0009533E                            SoundB4:	incbin	sound\soundB4.bin
0009539A                            		even
0009539A                            SoundB5:	incbin	sound\soundB5.bin
000953C8                            		even
000953C8                            SoundB6:	incbin	sound\soundB6.bin
000953E6                            		even
000953E6                            SoundB7:	incbin	sound\soundB7.bin
00095422                            		even
00095422                            SoundB8:	incbin	sound\soundB8.bin
00095440                            		even
00095440                            SoundB9:	incbin	sound\soundB9.bin
000954A4                            		even
000954A4                            SoundBA:	incbin	sound\soundBA.bin
000954CC                            		even
000954CC                            SoundBB:	incbin	sound\soundBB.bin
000954F8                            		even
000954F8                            SoundBC:	incbin	sound\soundBC.bin
0009553A                            		even
0009553A                            SoundBD:	incbin	sound\soundBD.bin
0009558E                            		even
0009558E                            SoundBE:	incbin	sound\soundBE.bin
000955C8                            		even
000955C8                            SoundBF:	incbin	sound\soundBF.bin
0009563A                            		even
0009563A                            SoundC0:	incbin	sound\soundC0.bin
00095668                            		even
00095668                            SoundC1:	incbin	sound\soundC1.bin
000956A2                            		even
000956A2                            SoundC2:	incbin	sound\soundC2.bin
000956CC                            		even
000956CC                            SoundC3:	incbin	sound\soundC3.bin
00095746                            		even
00095746                            SoundC4:	incbin	sound\soundC4.bin
0009576E                            		even
0009576E                            SoundC5:	incbin	sound\soundC5.bin
000957D6                            		even
000957D6                            SoundC6:	incbin	sound\soundC6.bin
00095818                            		even
00095818                            SoundC7:	incbin	sound\soundC7.bin
00095846                            		even
00095846                            SoundC8:	incbin	sound\soundC8.bin
00095858                            		even
00095858                            SoundC9:	incbin	sound\soundC9.bin
00095886                            		even
00095886                            SoundCA:	incbin	sound\soundCA.bin
000958B4                            		even
000958B4                            SoundCB:	incbin	sound\soundCB.bin
00095900                            		even
00095900                            SoundCC:	incbin	sound\soundCC.bin
0009593A                            		even
0009593A                            SoundCD:	incbin	sound\soundCD.bin
00095948                            		even
00095948                            SoundCE:	incbin	sound\soundCE.bin
00095976                            		even
00095976                            SoundCF:	incbin	sound\soundCF.bin
000959AE                            		even
000959AE                            SoundD0:	incbin	sound\soundD0.bin
000959E8                            		even
000959E8                            SegaPCM:	incbin	sound\segapcm.bin
0009C360                            SegaPCM_End	even
0009C360                            ; ===========================================================================
0009C360                            Art_Dust	incbin	artunc\spindust.bin
0009DCA0                            ; ===========================================================================
0009DCA0                            
0009DCA0                            LoadDPLC:
0009DCA0 7000                       		moveq	#0,d0
0009DCA2 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0009DCA6 D040                       		add.w	d0,d0
0009DCA8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0009DCAC 7A00                       		moveq	#0,d5
0009DCAE 1A1A                       		move.b	(a2)+,d5
0009DCB0 5345                       		subq.w	#1,d5
0009DCB2 6B00                       		bmi.s	DPLC_End
0009DCB4                            
0009DCB4                            DPLC_ReadEntry:
0009DCB4 7200                       		moveq	#0,d1
0009DCB6 121A                       		move.b	(a2)+,d1
0009DCB8 E149                       		lsl.w	#8,d1
0009DCBA 121A                       		move.b	(a2)+,d1
0009DCBC 3601                       		move.w	d1,d3
0009DCBE E04B                       		lsr.w	#8,d3
0009DCC0 0243 00F0                  		andi.w	#$F0,d3
0009DCC4 0643 0010                  		addi.w	#$10,d3
0009DCC8 0241 0FFF                  		andi.w	#$FFF,d1
0009DCCC EB89                       		lsl.l	#5,d1
0009DCCE D286                       		add.l	d6,d1
0009DCD0 3404                       		move.w	d4,d2
0009DCD2 D843                       		add.w	d3,d4
0009DCD4 D843                       		add.w	d3,d4
0009DCD6 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
0009DCDC 51CD FFD6                  		dbf	d5,DPLC_ReadEntry	; repeat for number of entries
0009DCE0                            
0009DCE0                            DPLC_End:
0009DCE0 4E75                       		rts	
0009DCE2                            ; End of function LoadSonicDynPLC
0009DCE2                            
0009DCE2                            ; ===========================================================================
0009DCE2                            
0009DCE2                            	include "#Owarisoft/main.asm"
0009DCE2                            ; ===========================================================================
0009DCE2                            owsf_txPal:	EQUR a6
0009DCE2                            owsf_VDP:	EQUR a5
0009DCE2                            
0009DCE2                            owsf_PalOff:	EQUR d7
0009DCE2                            owsf_Timer:	EQUR d6
0009DCE2                            owsf_Fades:	EQUR d4
0009DCE2                            
0009DCE2 =00000001                  owsf_TimerDef:	EQU 2-1
0009DCE2 =00000001                  owsf_FadeDef:	EQU 2-1
0009DCE2 =00000001                  owsf_url:	EQU 1	; if set to 0, Owarisoft url will not be shown
0009DCE2                            ; ===========================================================================
0009DCE2 =00C00000                  VDP_Data_Port		equ $C00000
0009DCE2 =00C00004                  VDP_Control_Port	equ $C00004
0009DCE2 =00C00008                  VDP_Counter		equ $C00008
0009DCE2                            
0009DCE2                            ; ===========================================================================
0009DCE2                            owsf_dma68kToVDP macro source,dest,length,type
0009DCE2                            	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(owsf_VDP)
0009DCE2                            	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(owsf_VDP)
0009DCE2                            	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(owsf_VDP)
0009DCE2                            	move.w	#((dest)&$3FFF)|((type&1)<<15)|$4000,(owsf_VDP)
0009DCE2                            	move.w	#$80|(((dest)&$C000)>>14)|((type&2)<<3),(owsf_VDP)
0009DCE2                                endm
0009DCE2                            
0009DCE2                            ; values for the type argument
0009DCE2 =00000000                  VRAM =	$0
0009DCE2 =00000001                  CRAM =	$1
0009DCE2 =00000002                  VSRAM =	$2
0009DCE2                            
0009DCE2                            ; ===========================================================================
0009DCE2 4EF9 0000 0000             Owari_ints:	jmp	OwariVBlank
0009DCE8 4EF9 0000 0000             Owari_ints2:	jmp	OwariVBlank2
0009DCEE                            ; ===========================================================================
0009DCEE                            Owarisoft:
0009DCEE 4EB8 1FE6                  		jsr	Pal_FadeFrom		; fadeout palette
0009DCF2 4EB8 11C0                  		jsr	ClearScreen		; clear screen data
0009DCF6                            
0009DCF6 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP
0009DCFC 3ABC 8004                  		move.w	#$8004,(owsf_VDP)	; $8004 - Disable HInt, HV Counter
0009DD00 3ABC 8230                  		move.w	#$8230,(owsf_VDP)	; $8230 - Nametable A at $C000
0009DD04 3ABC 8407                  		move.w	#$8407,(owsf_VDP)	; $8407 - Nametable B at $E000
0009DD08 3ABC 9001                  		move.w	#$9001,(owsf_VDP)	; $9001 - 64x32 cell nametable area
0009DD0C 3ABC 9200                  		move.w	#$9200,(owsf_VDP)	; $9200 - Window V position at default
0009DD10 3ABC 8B03                  		move.w	#$8B03,(owsf_VDP)	; $8B02 - Vscroll full, HScroll 8px
0009DD14 3ABC 8700                  		move.w	#$8700,(owsf_VDP)	; $8700 - BG color is Pal 0 Color 0
0009DD18                            
0009DD18                            	; load FG mappings
0009DD18 43F9 00FF 0000             		lea	$FF0000,a1
0009DD1E 41F9 0000 0000             		lea	Owari_mapFG,a0
0009DD24 303C 0001                  		move.w	#1,d0
0009DD28 4EB8 1724                  		jsr	EniDec
0009DD2C 43F9 00FF 0000             		lea	$FF0000,a1
0009DD32 203C 4604 0003             		move.l	#$46040003,d0
0009DD38 7222                       		moveq	#35-1,d1
0009DD3A 7404                       		moveq	#5-1,d2
0009DD3C 4EB8 136A                  		jsr	ShowVDPGraphics
0009DD40                            
0009DD40                            	; load BG mappings
0009DD40 43F9 00FF 0000             		lea	$FF0000,a1
0009DD46 41F9 0000 0000             		lea	Owari_mapBG,a0
0009DD4C 303C 005B                  		move.w	#$5B,d0
0009DD50 4EB8 1724                  		jsr	EniDec
0009DD54 43F9 00FF 0000             		lea	$FF0000,a1
0009DD5A 203C 659A 0003             		move.l	#$659A0003,d0
0009DD60 720F                       		moveq	#16-1,d1
0009DD62 7407                       		moveq	#8-1,d2
0009DD64 4EB8 136A                  		jsr	ShowVDPGraphics
0009DD68                            
0009DD68                            	; decompress art
0009DD68 41F9 0000 0000             		lea	Owari_tiles,a0
0009DD6E 43F9 00FF 0200             		lea	$FF0200,a1
0009DD74 4EB8 18A2                  		jsr	KosDec
0009DD78                            
0009DD78                            	; load tiles, HScroll and initial palette
0009DD78 2ABC 940A 9370 2ABC 9681+  	owsf_dma68kToVDP $FF0200, $20, $14E0, VRAM
0009DD90 2ABC 9400 9380 2ABC 0000+  	owsf_dma68kToVDP Owari_HScroll,$FD5C,$100,VRAM
0009DDA8 2ABC 9400 9340 2ABC 0000+  	owsf_dma68kToVDP Owari_Blank, 0, $80, CRAM
0009DDC0                            
0009DDC0                            	; clear url palette
0009DDC0                            
0009DDC0 7094                       		moveq 	#$FFFFFF94,d0 ; play music 94
0009DDC2 4EB8 12C6                  		jsr	PlaySound			; play music
0009DDC6                            
0009DDC6 41F8 FFC4 43FA FF16 20D9+  	loadJumps Owari_ints				; load the HBI and VBI jumps
0009DDD4 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009DDD6 7801                       		moveq	#owsf_FadeDef,owsf_Fades	; set the fades count
0009DDD8 4DF9 0000 0000             		lea	Owari_txPalette,owsf_txPal
0009DDDE                            
0009DDDE                            ; ===========================================================================
0009DDDE 4E72 2300                  .mainloop	STOP	#$2300				; stop CPU
0009DDE2 1038 F604                  		move.b	$FFFFF604.w,d0			; get player 1's held buttons
0009DDE6 8038 F606                  		or.b	$FFFFF606.w,d0			; get player 2's held buttons
0009DDEA 6AF2                       		bpl.s	.mainloop			; if start is not pressed, branch
0009DDEC                            
0009DDEC 6100 0000                  		bsr	OwariOutFade
0009DDF0 7E00                       		moveq	#0,owsf_PalOff			; clear palette offset
0009DDF2                            
0009DDF2 41F8 FFC4 43FA FEF0 20D9+  	loadJumps Owari_ints2				; load the HBI and VBI jumps
0009DE00 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009DE04 4DF9 0000 0000             		lea	Owari_txPalette_end,owsf_txPal
0009DE0A                            
0009DE0A 4E72 2300                  .mainloop2	STOP	#$2300				; stop CPU
0009DE0E 4A38 F604                  		tst.b	$FFFFF604.w			; get player 1's held buttons
0009DE12 6AF6                       		bpl.s	.mainloop2			; if start is not pressed, branch
0009DE14                            
0009DE14 41F8 FFC4 43F8 00F4 20D9+  	loadJumps IntMain				; load VBlank and HBlank interrupts
0009DE22 4E75                       		rts
0009DE24                            
0009DE24                            ; ===========================================================================
0009DE24                            OwariOutFade:
0009DE24 43F9 00FF 0000             		lea	$FF0000,a1		; get fadeout pal
0009DE2A 41F9 0000 0000             		lea	Owari_Palette,a0	; get palette
0009DE30 D0C7                       		add.w	owsf_PalOff,a0		;
0009DE32 D0C7                       		add.w	owsf_PalOff,a0		; add palette offset twice
0009DE34 7015                       		moveq	#($2D/2)-1,d0		; get repeat times
0009DE36                            
0009DE36 22D8                       .loadPal	move.l	(a0)+,(a1)+		; load 2 palettes
0009DE38 51C8 FFFC                  		dbf	d0,.loadPal		; loop
0009DE3C                            
0009DE3C 3029 FFFE                  		move.w	-2(a1),d0		; get last color
0009DE40 1200                       		move.b	d0,d1			;
0009DE42 1400                       		move.b	d0,d2			; copy it over
0009DE44                            
0009DE44 0240 0F00                  		and.w	#$F00,d0		; get bleu
0009DE48 0241 00F0                  		and.w	#$F0,d1			; get green
0009DE4C 0242 000F                  		and.w	#$F,d2			; get red
0009DE50 7607                       		moveq	#8-1,d3			; 8 different shades
0009DE52                            
0009DE52                            ; d0 = blue, d1 = green, d2 = red
0009DE52 4A40                       .loadfade	tst.w	d0			;
0009DE54 6700                       		beq.s	.notBleu		; bleu is 0, dont decrement
0009DE56 0440 0200                  		sub.w	#$200,d0		; decrement to next shade
0009DE5A                            
0009DE5A 4A01                       .notBleu	tst.b	d1			;
0009DE5C 6700                       		beq.s	.notGreen		; green is 0, dont decrement
0009DE5E 0401 0020                  		sub.b	#$20,d1			; decrement to next shade
0009DE62                            
0009DE62 4A02                       .notGreen	tst.b	d2			;
0009DE64 6700                       		beq.s	.notRed			; red is 0, dont decrement
0009DE66 5502                       		subq.b	#2,d2			; decrement to next shade
0009DE68                            
0009DE68 3800                       .notRed		move.w	d0,d4			; get bleu to d4
0009DE6A D841                       		add.w	d1,d4			; add green to d4
0009DE6C D842                       		add.w	d2,d4			; add red to d4
0009DE6E                            
0009DE6E 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE70 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE72 32C4                       		move.w	d4,(a1)+		; transfer color to mem
0009DE74 51CB FFDC                  		dbf	d3,.loadfade		; load next fade
0009DE78                            
0009DE78 700E                       		moveq	#(10*3/2)-1,d0		; repeat times
0009DE7A 7200                       		moveq	#0,d1			; black
0009DE7C                            
0009DE7C 22C1                       .loadBlack	move.l	d1,(a1)+		; transfer color
0009DE7E 51C8 FFFC                  		dbf	d0,.loadBlack		; loopdeloop
0009DE82 4E75                       		rts
0009DE84                            
0009DE84                            ; ===========================================================================
0009DE84                            OwariVBlank2:
0009DE84 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009DE88 4EB9 0008 A26E             		jsr	sub_71B4C			; sound driver code
0009DE8E 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009DE94 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009DE98                            
0009DE98 5306                       		subq.b	#1,owsf_Timer			; sub 1 from timer
0009DE9A 6A00                       		bpl.s	.end2				; if positive, skip
0009DE9C 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009DE9E 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009DEA0                            
0009DEA0 0C47 0000                  		cmp.w	#Owari_po_3,owsf_PalOff		; is the limit reached,
0009DEA4 5EF8 F604                  		sgt	$FFFFF604.w			; force start button press
0009DEA8                            
0009DEA8 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009DEAE 3B66 FFFC                  		move.w	-(owsf_txPal),-4(owsf_VDP)	; write next palette
0009DEB2                            
0009DEB2 303C 9500                  		move.w	#$9500|((($FF0000)>>1)&$FF),d0; get DMA offset
0009DEB6 D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009DEB8 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009DEBA                            
0009DEBA 303C 9680                  		move.w	#$9600|(((($FF0000)>>1)&$FF00)>>8),d0
0009DEBE 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009DEC0 E049                       		lsr.w	#8,d1				; get high byte
0009DEC2 D001                       		add.b	d1,d0				; add to VDP command
0009DEC4 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009DEC6                            
0009DEC6 3ABC 977F                  		move.w	#$9700|((((($FF0000)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009DECA 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009DED0 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009DED2 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009DED8 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009DEDA 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009DEE0 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009DEE2 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009DEE8 4E73                       .end2		rte
0009DEEA                            ; ===========================================================================
0009DEEA                            OwariVBlank:
0009DEEA 48E7 0F02                  		movem.l	owsf_Fades-owsf_PalOff/owsf_txPal,-(sp)	; store vars
0009DEEE 4EB8 10E2                  		jsr	ReadJoypads			; get button presses
0009DEF2 4EB9 0008 A26E             		jsr	sub_71B4C			; sound driver code
0009DEF8 4BF9 00C0 0004             		lea	VDP_control_port,owsf_VDP	; get vdp port
0009DEFE 4CDF 40F0                  		movem.l	(sp)+,owsf_Fades-owsf_PalOff/owsf_txPal	; pop variables
0009DF02                            
0009DF02 0C47 0000                  		cmp.w	#Owari_po_0,owsf_PalOff		; is the limit reached
0009DF06 6C00 0000                  		bge	.st				; if not, skip
0009DF0A 51F8 F606                  		sf	$FFFFF606.w			; force start button press
0009DF0E 51F8 F604                  		sf	$FFFFF604.w			; force start button press
0009DF12                            
0009DF12 5306                       .st		subq.b	#1,owsf_Timer			; sub 1 from timer
0009DF14 6A00                       		bpl.s	.end				; if positive, skip
0009DF16 7C01                       		moveq	#owsf_TimerDef,owsf_Timer	; set timer
0009DF18 5647                       		add.w	#3,owsf_PalOff			; add 3 to advance to next row
0009DF1A                            
0009DF1A 0C47 0000                  		cmp.w	#Owari_po_2,owsf_PalOff		; is the limit reached
0009DF1E 6F00 0000                  		ble	.skp				; if not, skip
0009DF22 3E3C 0000                  		move.w	#Owari_po_1,owsf_PalOff		; reset to start of the fade
0009DF26                            
0009DF26 5304                       		subq.b	#1,owsf_Fades			; sub 1 from the fade times counter
0009DF28 6A00                       		bpl.s	.skp				; if negative, branch
0009DF2A 50F8 F606                  		st	$FFFFF606.w			; force start button press
0009DF2E                            
0009DF2E BDFC 0000 0000             		cmpa.l	#Owari_txPalette_end-2,owsf_txPal; is text fadein done?
0009DF34 6C00                       		bge.s	.noin				; if is, branch
0009DF36 2ABC C062 0000             		move.l	#$C0620000,(owsf_VDP)		; set CRAM write
0009DF3C 3B5E FFFC                  		move.w	(owsf_txPal)+,-4(owsf_VDP)	; write next palette
0009DF40                            
0009DF40 303C 0000                  .noin		move.w	#$9500|(((Owari_Palette)>>1)&$FF),d0; get DMA offset
0009DF44 D007                       		add.b	owsf_PalOff,d0			; add low byte of palette offset
0009DF46 3A80                       		move.w	d0,(owsf_VDP)			; move to VDP
0009DF48                            
0009DF48 303C 0000                  		move.w	#$9600|((((Owari_Palette)>>1)&$FF00)>>8),d0
0009DF4C 3207                       		move.w	owsf_PalOff,d1			; get palette offset
0009DF4E E049                       		lsr.w	#8,d1				; get high byte
0009DF50 D001                       		add.b	d1,d0				; add to VDP command
0009DF52 3A80                       		move.w	d0,(owsf_VDP)			; move to vDP
0009DF54                            
0009DF54 3ABC 0000                  		move.w	#$9700|(((((Owari_Palette)>>1)&$FF0000)>>16)&$7F),(owsf_VDP); set DMA source to RAM
0009DF58 203C 9400 930F             		move.l	#(($9400|((((15*2)>>1)&$FF00)>>8))<<16)|($9300|(((15*2)>>1)&$FF)),d0; set DMA lenght
0009DF5E 2A80                       		move.l	d0,(owsf_VDP)		; line 0
0009DF60 2ABC C002 0080             		move.l	#$C0020080,(owsf_VDP)	; DMA!
0009DF66 2A80                       		move.l	d0,(owsf_VDP)		; line 1
0009DF68 2ABC C022 0080             		move.l	#$C0220080,(owsf_VDP)	; DMA!
0009DF6E 2A80                       		move.l	d0,(owsf_VDP)		; line 2
0009DF70 2ABC C042 0080             		move.l	#$C0420080,(owsf_VDP)	; DMA!
0009DF76                            
0009DF76 4E73                       .end		rte
0009DF78                            ; ===========================================================================
0009DF78                            Owari_tiles:	incbin "#Owarisoft/art.kos"		; Kosinski compressed tiles
0009E6C0                            		even
0009E6C0                            Owari_mapFG:	incbin "#Owarisoft/fgmap.eni"		; Enigma compressed foreground mappings
0009E710                            		even
0009E710                            Owari_mapBG:	incbin "#Owarisoft/bgmap.eni"		; Enigma compressed background mappings
0009E742                            		even
0009E742                            ; ===========================================================================
0009E742                            
0009E742 FFAC FFAC FFAC FFAC FFAC+  Owari_HScroll:	dcb.l 8,$FFACFFAC
0009E762 0000 0000 0000 0000 0000+  		dcb.l 6,0
0009E77A                            ; ===========================================================================
0009E77A 0000 0000 0000 0000 0000+  Owari_Blank:	dcb.w $80/2,0
0009E7FA                            
0009E7FA                            ; ===========================================================================
0009E7FA =0009E7CA                  Owari_txPalette: equ *-$30
0009E7FA 0222 0222 0444 0444 0666+  		dc.w $0222, $0222, $0444, $0444, $0666, $0666, $0888
0009E808 0888 0AAA 0AAA 0CCC 0CCC+  		dc.w $0888, $0AAA, $0AAA, $0CCC, $0CCC, $0EEE, $0EEE
0009E816                            Owari_txPalette_end:
0009E816                            ; ===========================================================================
0009E816 =00000038                  Owari_po_3	equ $70/2
0009E816                            
0009E816                            Owari_PadStart
0009E816                            	align $200000
00200000                            Owari_Palette:
00200000                            	rept (16*2*3)
00200000                            		dc.w 0		; black before fade to white
00200000 0000 0000 0000 0000 0000+  	endr
002000C0                            
002000C0 0444 0222 0000             	dc.w $0444, $0222, $0000
002000C6 0666 0444 0222             	dc.w $0666, $0444, $0222
002000CC 0888 0666 0444             	dc.w $0888, $0666, $0444
002000D2 0AAA 0888 0444             	dc.w $0AAA, $0888, $0444
002000D8 0CCC 0888 0666             	dc.w $0CCC, $0888, $0666
002000DE 0EEE 0AAA 0666             	dc.w $0EEE, $0AAA, $0666		; fade from black
002000E4                            
002000E4 =00000072                  Owari_po_0	equ (*-Owari_Palette)/2
002000E4                            	rept 4
002000E4                            		rept 15/3
002000E4                            			dc.w $EEE, $AAA, $666	; white frame
002000E4                            		endr
002000E4 0EEE 0AAA 0666 0EEE 0AAA+  	endr
0020015C                            
0020015C 0CCC 0AAA 0888                 	dc.w $0CCC, $0AAA, $0888
00200162 0AAC 088A 0668                 	dc.w $0AAC, $088A, $0668
00200168 088C 066A 0448                 	dc.w $088C, $066A, $0448
0020016E 066C 044A 0228                 	dc.w $066C, $044A, $0228
00200174 044C 022A 0008                 	dc.w $044C, $022A, $0008
0020017A 022C 000A 0008                 	dc.w $022C, $000A, $0008		; fade to red
00200180                            
00200180 =000000C0                  Owari_po_1	equ (*-Owari_Palette)/2
00200180                                	incbin	"#Owarisoft/rainbow.bin"	; rainbow effect
002003D8                            
002003D8 =000001EC                  Owari_po_2	equ (*-Owari_Palette)/2
002003D8                                	incbin	"#Owarisoft/rainbow.bin"	; more rainbow effect for reset counter
00200630                            
00200630 =001617EA                  Owari_pad	equ Owari_Palette-Owari_PadStart
00200630                            	inform 0,"OwariSoft Splash: Padded $\$Owari_pad bytes"
00200630                            ; ===========================================================================
00200630                            ; ===========================================================================
00200630                            	inform 0,""
00200630                            
00200630                            EndOfRom:
