00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            stopZ80		macro
00000000                            		move.w    #$100,($A11100).l
00000000                            		nop
00000000                            		nop
00000000                            		nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                            		move.w    #0,($A11100).l    ; start the Z80
00000000                            		endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM		macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                            		btst    #7,d2
00000000                            		bne.s    @wait\@
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000 =FFFFFFC4                  VBlankJump	equ $FFFFFFC4
00000000 =FFFFFFCA                  HBlankJump	equ VBlankJump+6
00000000                            ; ===========================================================================
00000000                            
00000000                            loadJumps	macro fromloc
00000000                            
00000000                            		lea	VBlankJump,a0
00000000                            		lea	fromloc,a1
00000000                            	rept 3
00000000                            		move.l	(a1)+,(a0)+
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000        Vectors:	dc.l $FFFE00, EntryPoint
00000008 6000 FFFE                  ErrorTrap:	bra.w	*
0000000C                            
0000000C 0000 0000 0000 0000 0000+  		dc.l AddressError, IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0008 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FFCA 0000 0008 FFFF+  		dc.l HBlankJump, ErrorTrap, VBlankJump, ErrorTrap
00000080 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0008 0000 0008 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F4                            
000000F4                            ; ===========================================================================
000000F4 4EF9 0000 0000             IntMain:	jmp	V_Int
000000FA 4EF9 0000 0000             			jmp	H_Int
00000100                            ; ===========================================================================
00000100 5345 4741 204D 4547 4120+  Console:		dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 4F57 4152 4920 2020 3230+  Date:			dc.b 'OWARI   2016.NOV' ; Release date
00000120 5975 6E64 6F6E 6720 5A69+  Title_Local:	dc.b 'Yundong Zixingche                               ' ; Domestic name
00000150 5975 6E67 646F 6E67 205A+  Title_Int:		dc.b 'Yungdong Zixingche                              ' ; International name
00000180 474D 2031 3331 3331 3331+  Serial:			dc.b 'GM 13131313-13'   ; Serial/version number
0000018E 0000                       Checksum:		dc.w 0
00000190 4A20 2020 2020 2020 2020+  				dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom			; ROM start
000001A4 0000 0000                  RomEndLoc:		dc.l EndOfRom-1			; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000			; RAM start
000001AC 00FF FFFF                  RamEndLoc:		dc.l $FFFFFF			; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020			; change to $5241E020 to create	SRAM
000001B4 2020 2020                  				dc.l $20202020			; SRAM start
000001B8 2020 2020                  				dc.l $20202020			; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:			dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:			dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            EntryPoint:
00000200 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
00000206 6600                       		bne.s	PortA_Ok
00000208 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
0000020E                            
0000020E                            PortA_Ok:
0000020E 6600                       		bne.s	PortC_Ok
00000210 4BFA 0000                  		lea	SetupValues(pc),a5
00000214 4C9D 00E0                  		movem.w	(a5)+,d5-d7
00000218 4CDD 1F00                  		movem.l	(a5)+,a0-a4
0000021C 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000220 0200 000F                  		andi.b	#$F,d0
00000224 6700                       		beq.s	SkipSecurity
00000226 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
0000022E                            
0000022E                            SkipSecurity:
0000022E 3014                       		move.w	(a4),d0		; check	if VDP works
00000230 7000                       		moveq	#0,d0
00000232 2C40                       		movea.l	d0,a6
00000234 4E66                       		move.l	a6,usp		; set usp to $0
00000236 7217                       		moveq	#$17,d1
00000238                            
00000238                            VDPInitLoop:
00000238 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000023A 3885                       		move.w	d5,(a4)		; move value to	VDP register
0000023C DA47                       		add.w	d7,d5		; next register
0000023E 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000242 289D                       		move.l	(a5)+,(a4)
00000244 3680                       		move.w	d0,(a3)		; clear	the screen
00000246 3287                       		move.w	d7,(a1)		; stop the Z80
00000248 3487                       		move.w	d7,(a2)		; reset	the Z80
0000024A                            
0000024A                            WaitForZ80:
0000024A 0111                       		btst	d0,(a1)		; has the Z80 stopped?
0000024C 66FC                       		bne.s	WaitForZ80	; if not, branch
0000024E 7425                       		moveq	#$25,d2
00000250                            
00000250                            Z80InitLoop:
00000250 10DD                       		move.b	(a5)+,(a0)+
00000252 51CA FFFC                  		dbf	d2,Z80InitLoop
00000256 3480                       		move.w	d0,(a2)
00000258 3280                       		move.w	d0,(a1)		; start	the Z80
0000025A 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025C                            
0000025C                            ClrRAMLoop:
0000025C 2D00                       		move.l	d0,-(a6)
0000025E 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000262 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000264 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
00000266 761F                       		moveq	#$1F,d3
00000268                            
00000268                            ClrCRAMLoop:
00000268 2680                       		move.l	d0,(a3)
0000026A 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
0000026E 289D                       		move.l	(a5)+,(a4)
00000270 7813                       		moveq	#$13,d4
00000272                            
00000272                            ClrVDPStuff:
00000272 2680                       		move.l	d0,(a3)
00000274 51CC FFFC                  		dbf	d4,ClrVDPStuff
00000278 7A03                       		moveq	#3,d5
0000027A                            
0000027A                            PSGInitLoop:
0000027A 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
0000027E 51CD FFFA                  		dbf	d5,PSGInitLoop
00000282 3480                       		move.w	d0,(a2)
00000284 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
00000288 46FC 2700                  		move	#$2700,sr	; set the sr
0000028C                            
0000028C                            PortC_Ok:
0000028C 6000                       		bra.s	GameProgram
0000028E                            ; ===========================================================================
0000028E 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000290 3FFF                       		dc.w $3FFF
00000292 0100                       		dc.w $100
00000294                            
00000294 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
00000298 00A1 1100                  		dc.l $A11100		; Z80 bus request
0000029C 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A0 00C0 0000                  		dc.l $C00000
000002A4 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002A8                            
000002A8 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002AC 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B0 0000 FF00                  		dc.b 0,	0, $FF,	0
000002B4 8137 0001                  		dc.b $81, $37, 0, 1
000002B8 0100 00FF                  		dc.b 1,	0, 0, $FF
000002BC FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C0                            
000002C0 4000 0080                  		dc.l $40000080
000002C4                            
000002C4 AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D0 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002DA D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002E5 ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002EA                            
000002EA 8104                       		dc.w $8104		; value	for VDP	display	mode
000002EC 8F02                       		dc.w $8F02		; value	for VDP	increment
000002EE C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F2 4000 0010                  		dc.l $40000010
000002F6                            
000002F6 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000002FA                            ; ===========================================================================
000002FA                            
000002FA                            GameProgram:
000002FA 4A79 00C0 0004             		tst.w	($C00004).l
00000300 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000306 7E00                       		moveq	#0,d7
00000308 3C3C 3FFF                  		move.w	#$3FFF,d6
0000030C                            
0000030C                            GameClrRAM:
0000030C 2CC7                       		move.l	d7,(a6)+
0000030E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000312                            
00000312 1039 00A1 0001             		move.b	($A10001).l,d0
00000318 0200 00C0                  		andi.b	#$C0,d0
0000031C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000320                            
00000320 41F8 FFC4 43F8 00F4 20D9+  		loadJumps IntMain
0000032E                            		
0000032E 6100 0000                  		bsr.w	VDPSetupGame
00000332 6100 0000                  		bsr.w	InitMegaPCM
00000336 6100 0000                  		bsr.w	JoypadInit
0000033A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Notice Screen
00000340                            
00000340                            MainGameLoop:
00000340 1038 F600                  		move.b	($FFFFF600).w,d0
00000344 0240 007C                  		andi.w	#$7C,d0
00000348 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
0000034C 4E90                       		jsr	(a0)
0000034E 60F0                       		bra.s	MainGameLoop
00000350                            ; ===========================================================================
00000350                            ; ---------------------------------------------------------------------------
00000350                            ; Main game mode array
00000350                            ; ---------------------------------------------------------------------------
00000350                            
00000350                            GameModeArray:
00000350 0000 0000                  		dc.l	NoticeScreen	; Notice Screen ($00)
00000354 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
00000358 0000 0000                  		dc.l	Level		; Demo Mode ($08)
0000035C 0000 0000                  		dc.l	Level		; Normal Level ($0C)
00000360 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
00000364 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
00000368 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
0000036C 0000 0000                  		dc.l	Credits		; Credits ($1C)
00000370 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($20)
00000374                            ; ===========================================================================
00000374                            
00000374                            BusError:
00000374 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000037A 6000                       		bra.s	loc_43A
0000037C                            ; ===========================================================================
0000037C                            
0000037C                            AddressError:
0000037C 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000382 6000                       		bra.s	loc_43A
00000384                            ; ===========================================================================
00000384                            
00000384                            IllegalInstr:
00000384 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000038A 54AF 0002                  		addq.l	#2,2(sp)
0000038E 6000                       		bra.s	loc_462
00000390                            ; ===========================================================================
00000390                            
00000390                            ZeroDivide:
00000390 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000396 6000                       		bra.s	loc_462
00000398                            ; ===========================================================================
00000398                            
00000398                            ChkInstr:
00000398 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000039E 6000                       		bra.s	loc_462
000003A0                            ; ===========================================================================
000003A0                            
000003A0                            TrapvInstr:
000003A0 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003A6 6000                       		bra.s	loc_462
000003A8                            ; ===========================================================================
000003A8                            
000003A8                            PrivilegeViol:
000003A8 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003AE 6000                       		bra.s	loc_462
000003B0                            ; ===========================================================================
000003B0                            
000003B0                            Trace:
000003B0 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003B6 6000                       		bra.s	loc_462
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            Line1010Emu:
000003B8 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003BE 54AF 0002                  		addq.l	#2,2(sp)
000003C2 6000                       		bra.s	loc_462
000003C4                            ; ===========================================================================
000003C4                            
000003C4                            Line1111Emu:
000003C4 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
000003CA 54AF 0002                  		addq.l	#2,2(sp)
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ErrorExcept:
000003D0 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            loc_43A:
000003D8 46FC 2700                  		move	#$2700,sr
000003DC 544F                       		addq.w	#2,sp
000003DE 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E2 544F                       		addq.w	#2,sp
000003E4 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003EA 6100 0000                  		bsr.w	ShowErrorMsg
000003EE 202F 0002                  		move.l	2(sp),d0
000003F2 6100 0000                  		bsr.w	sub_5BA
000003F6 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003FA 6100 0000                  		bsr.w	sub_5BA
000003FE 6000                       		bra.s	loc_478
00000400                            ; ===========================================================================
00000400                            
00000400                            loc_462:
00000400 46FC 2700                  		move	#$2700,sr
00000404 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000040A 6100 0000                  		bsr.w	ShowErrorMsg
0000040E 202F 0002                  		move.l	2(sp),d0
00000412 6100 0000                  		bsr.w	sub_5BA
00000416                            
00000416                            loc_478:
00000416 6100 0000                  		bsr.w	ErrorWaitForC
0000041A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000420 46FC 2300                  		move	#$2300,sr
00000424 4E73                       		rte	
00000426                            
00000426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000426                            
00000426                            
00000426                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000426 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042C 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000436 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043C 323C 027F                  		move.w	#$27F,d1
00000440                            
00000440                            Error_LoadGfx:
00000440 3C98                       		move.w	(a0)+,(a6)
00000442 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000446 7000                       		moveq	#0,d0		; clear	d0
00000448 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000450 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000454 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045E 7212                       		moveq	#$12,d1		; number of characters
00000460                            
00000460                            Error_LoopChars:
00000460 7000                       		moveq	#0,d0
00000462 1018                       		move.b	(a0)+,d0
00000464 0640 0790                  		addi.w	#$790,d0
00000468 3C80                       		move.w	d0,(a6)
0000046A 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046E 4E75                       		rts	
00000470                            ; End of function ShowErrorMsg
00000470                            
00000470                            ; ===========================================================================
00000470 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000474 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000478 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047C 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000480 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000484 0000                       		dc.w asc_5A6-ErrorText
00000486 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000499 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AC 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BF 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D2 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E5 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F8 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000050B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000531 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000544 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000558 00                         		even
00000558                            
00000558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000558                            
00000558                            
00000558                            sub_5BA:				; XREF: loc_43A; loc_462
00000558 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055C 7407                       		moveq	#7,d2
0000055E                            
0000055E                            loc_5C0:
0000055E E998                       		rol.l	#4,d0
00000560 6100                       		bsr.s	sub_5CA
00000562 51CA FFFA                  		dbf	d2,loc_5C0
00000566 4E75                       		rts	
00000568                            ; End of function sub_5BA
00000568                            
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            sub_5CA:				; XREF: sub_5BA
00000568 3200                       		move.w	d0,d1
0000056A 0241 000F                  		andi.w	#$F,d1
0000056E 0C41 000A                  		cmpi.w	#$A,d1
00000572 6500                       		bcs.s	loc_5D8
00000574 5E41                       		addq.w	#7,d1
00000576                            
00000576                            loc_5D8:
00000576 0641 07C0                  		addi.w	#$7C0,d1
0000057A 3C81                       		move.w	d1,(a6)
0000057C 4E75                       		rts	
0000057E                            ; End of function sub_5CA
0000057E                            
0000057E                            
0000057E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057E                            
0000057E                            
0000057E                            ErrorWaitForC:				; XREF: loc_478
0000057E 6100 0000                  		bsr.w	ReadJoypads
00000582 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000588 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058C 4E75                       		rts	
0000058E                            ; End of function ErrorWaitForC
0000058E                            
0000058E                            ; ===========================================================================
0000058E                            
0000058E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAE                            		even
00000AAE                            
00000AAE                            ; ===========================================================================
00000AAE                            
00000AAE                            V_Int:				; XREF: Vectors
00000AAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB2 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB6 6700                       		beq.s	loc_B88
00000AB8 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000AD0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD6 6700                       		beq.s	loc_B42
00000AD8 303C 0700                  		move.w	#$700,d0
00000ADC                            
00000ADC                            loc_B3E:
00000ADC 51C8 FFFE                  		dbf	d0,loc_B3E
00000AE0                            
00000AE0                            loc_B42:
00000AE0 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AEA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AF0 0240 003E                  		andi.w	#$3E,d0
00000AF4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFC                            
00000AFC                            loc_B5E:				; XREF: loc_B88
00000AFC 4EB9 0000 0000             		jsr	sub_71B4C
00000B02                            
00000B02                            loc_B64:				; XREF: loc_D50
00000B02 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B06 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0A 4E73                       		rte	
00000B0C                            ; ===========================================================================
00000B0C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B10 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B14 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B18 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B20 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B24 0000                       		dc.w loc_E72-off_B6E
00000B26                            ; ===========================================================================
00000B26                            
00000B26                            loc_B88:				; XREF: V_Int; off_B6E
00000B26 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2C 6700                       		beq.s	loc_B9A
00000B2E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B34 6600 FFC6                  		bne.w	loc_B5E
00000B38                            
00000B38                            loc_B9A:
00000B38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3E 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B42 3039 00C0 0004             		move.w	($C00004).l,d0
00000B48 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4E 6700                       		beq.s	loc_BBA
00000B50 303C 0700                  		move.w	#$700,d0
00000B54                            
00000B54                            loc_BB6:
00000B54 51C8 FFFE                  		dbf	d0,loc_BB6
00000B58                            
00000B58                            loc_BBA:
00000B58 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B66                            
00000B66                            loc_BC8:
00000B66 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B6E 66F6                       		bne.s	loc_BC8
00000B70 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B74 6600                       		bne.s	loc_BFE
00000B76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B82 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B88 3ABC 977F                  		move.w	#$977F,(a5)
00000B8C 3ABC C000                  		move.w	#$C000,(a5)
00000B90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B9A 6000                       		bra.s	loc_C22
00000B9C                            ; ===========================================================================
00000B9C                            
00000B9C                            loc_BFE:				; XREF: loc_BC8
00000B9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BA2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BA8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BAE 3ABC 977F                  		move.w	#$977F,(a5)
00000BB2 3ABC C000                  		move.w	#$C000,(a5)
00000BB6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BC0                            
00000BC0                            loc_C22:				; XREF: loc_BC8
00000BC0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000BCC 6000 FF2E                  		bra.w	loc_B5E
00000BD0                            ; ===========================================================================
00000BD0                            
00000BD0                            loc_C32:				; XREF: off_B6E
00000BD0 6100 0000                  		bsr.w	sub_106E
00000BD4                            
00000BD4                            loc_C36:				; XREF: off_B6E
00000BD4 4A78 F614                  		tst.w	($FFFFF614).w
00000BD8 6700 0000                  		beq.w	locret_C42
00000BDC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BE0                            
00000BE0                            locret_C42:
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C44:				; XREF: off_B6E
00000BE2 6100 0000                  		bsr.w	sub_106E
00000BE6 6100 0000                  		bsr.w	sub_6886
00000BEA 6100 0000                  		bsr.w	sub_1642
00000BEE 4A78 F614                  		tst.w	($FFFFF614).w
00000BF2 6700 0000                  		beq.w	locret_C5C
00000BF6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BFA                            
00000BFA                            locret_C5C:
00000BFA 4E75                       		rts	
00000BFC                            ; ===========================================================================
00000BFC                            
00000BFC                            loc_C5E:				; XREF: off_B6E
00000BFC 6100 0000                  		bsr.w	sub_106E
00000C00 4E75                       		rts	
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            loc_C64:				; XREF: off_B6E
00000C02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C08 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C0C                            
00000C0C                            loc_C6E:				; XREF: off_B6E
00000C0C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C14                            
00000C14                            loc_C76:
00000C14 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C1C 66F6                       		bne.s	loc_C76		; if not, branch
00000C1E 6100 0000                  		bsr.w	ReadJoypads
00000C22 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C26 6600                       		bne.s	loc_CB0
00000C28 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C2E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C34 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C3A 3ABC 977F                  		move.w	#$977F,(a5)
00000C3E 3ABC C000                  		move.w	#$C000,(a5)
00000C42 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C48 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C4C 6000                       		bra.s	loc_CD4
00000C4E                            ; ===========================================================================
00000C4E                            
00000C4E                            loc_CB0:				; XREF: loc_C76
00000C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C5A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C60 3ABC 977F                  		move.w	#$977F,(a5)
00000C64 3ABC C000                  		move.w	#$C000,(a5)
00000C68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C72                            
00000C72                            loc_CD4:				; XREF: loc_C76
00000C72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C7C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C82 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C88 3ABC 977F                  		move.w	#$977F,(a5)
00000C8C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C90 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CAC 3ABC 977F                  		move.w	#$977F,(a5)
00000CB0 3ABC 7800                  		move.w	#$7800,(a5)
00000CB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC4                            
00000CC4                            loc_D50:
00000CC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000CCC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CD2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CD8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CDE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CE4 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CEA 6400                       		bcc.s	Demo_Time
00000CEC 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF2 588F                       		addq.l	#4,sp
00000CF4 6000 FE0C                  		bra.w	loc_B64
00000CF8                            
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            ; Subroutine to	run a demo for an amount of time
00000CF8                            ; ---------------------------------------------------------------------------
00000CF8                            
00000CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CF8                            
00000CF8                            
00000CF8                            Demo_Time:				; XREF: loc_D50; H_Int
00000CF8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CFC 4EB9 0000 0000             		jsr	AniArt_Load
00000D02 4EB9 0000 0000             		jsr	HudUpdate
00000D08 6100 0000                  		bsr.w	sub_165E
00000D0C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D10 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D14 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D18                            
00000D18                            Demo_TimeEnd:
00000D18 4E75                       		rts	
00000D1A                            ; End of function Demo_Time
00000D1A                            
00000D1A                            ; ===========================================================================
00000D1A                            
00000D1A                            loc_DA6:				; XREF: off_B6E
00000D1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D22                            
00000D22                            loc_DAE:
00000D22 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D2A 66F6                       		bne.s	loc_DAE		; if not, branch
00000D2C 6100 0000                  		bsr.w	ReadJoypads
00000D30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D36 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D3C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D42 3ABC 977F                  		move.w	#$977F,(a5)
00000D46 3ABC C000                  		move.w	#$C000,(a5)
00000D4A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D60 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D66 3ABC 977F                  		move.w	#$977F,(a5)
00000D6A 3ABC 7800                  		move.w	#$7800,(a5)
00000D6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D7E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D84 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8A 3ABC 977F                  		move.w	#$977F,(a5)
00000D8E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DA4 6100 0000                  		bsr.w	PalCycle_SS
00000DA8 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DAE                            
00000DAE                            loc_E64:
00000DAE 4A78 F614                  		tst.w	($FFFFF614).w
00000DB2 6700 0000                  		beq.w	locret_E70
00000DB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DBA                            
00000DBA                            locret_E70:
00000DBA 4E75                       		rts	
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_E72:				; XREF: off_B6E
00000DBC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DC4                            
00000DC4                            loc_E7A:
00000DC4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DCC 66F6                       		bne.s	loc_E7A		; if not, branch
00000DCE 6100 0000                  		bsr.w	ReadJoypads
00000DD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DD6 6600                       		bne.s	loc_EB4
00000DD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DEA 3ABC 977F                  		move.w	#$977F,(a5)
00000DEE 3ABC C000                  		move.w	#$C000,(a5)
00000DF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFC 6000                       		bra.s	loc_ED8
00000DFE                            ; ===========================================================================
00000DFE                            
00000DFE                            loc_EB4:				; XREF: loc_E7A
00000DFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E10 3ABC 977F                  		move.w	#$977F,(a5)
00000E14 3ABC C000                  		move.w	#$C000,(a5)
00000E18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E22                            
00000E22                            loc_ED8:				; XREF: loc_E7A
00000E22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E2C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E32 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E38                            
00000E38                            loc_EEE:
00000E38 3ABC 977F                  		move.w	#$977F,(a5)
00000E3C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E50 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E56 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E5C 3ABC 977F                  		move.w	#$977F,(a5)
00000E60 3ABC 7800                  		move.w	#$7800,(a5)
00000E64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6E 4A38 F767                  		tst.b	($FFFFF767).w
00000E72 6700                       		beq.s	loc_F54
00000E74 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E7A                            
00000E7A                            loc_F54:
00000E7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E9A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9E 4EB9 0000 0000             		jsr	AniArt_Load
00000EA4 4EB9 0000 0000             		jsr	HudUpdate
00000EAA 6100 0000                  		bsr.w	sub_1642
00000EAE 4E75                       		rts	
00000EB0                            ; ===========================================================================
00000EB0                            
00000EB0                            loc_F8A:				; XREF: off_B6E
00000EB0 6100 0000                  		bsr.w	sub_106E
00000EB4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            loc_F9A:				; XREF: off_B6E
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EC8 6000 0000                  		bra.w	sub_1642
00000ECC                            ; ===========================================================================
00000ECC                            
00000ECC                            loc_FA6:				; XREF: off_B6E
00000ECC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000ED4                            
00000ED4                            loc_FAE:
00000ED4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EDC 66F6                       		bne.s	loc_FAE		; if not, branch
00000EDE 6100 0000                  		bsr.w	ReadJoypads
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F18 3ABC 977F                  		move.w	#$977F,(a5)
00000F1C 3ABC 7800                  		move.w	#$7800,(a5)
00000F20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F36 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F56 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F5C                            
00000F5C                            loc_1060:
00000F5C 4A78 F614                  		tst.w	($FFFFF614).w
00000F60 6700 0000                  		beq.w	locret_106C
00000F64 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F68                            
00000F68                            locret_106C:
00000F68 4E75                       		rts	
00000F6A                            
00000F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F6A                            
00000F6A                            
00000F6A                            sub_106E:				; XREF: loc_C32; et al
00000F6A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F72                            
00000F72                            loc_1076:
00000F72 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F7A 66F6                       		bne.s	loc_1076	; if not, branch
00000F7C 6100 0000                  		bsr.w	ReadJoypads
00000F80 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F84 6600                       		bne.s	loc_10B0
00000F86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F98 3ABC 977F                  		move.w	#$977F,(a5)
00000F9C 3ABC C000                  		move.w	#$C000,(a5)
00000FA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FAA 6000                       		bra.s	loc_10D4
00000FAC                            ; ===========================================================================
00000FAC                            
00000FAC                            loc_10B0:				; XREF: sub_106E
00000FAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FB8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FBE 3ABC 977F                  		move.w	#$977F,(a5)
00000FC2 3ABC C000                  		move.w	#$C000,(a5)
00000FC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD0                            
00000FD0                            loc_10D4:				; XREF: sub_106E
00000FD0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE2 3ABC 977F                  		move.w	#$977F,(a5)
00000FE6 3ABC 7800                  		move.w	#$7800,(a5)
00000FEA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001000 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001006 3ABC 977F                  		move.w	#$977F,(a5)
0000100A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000100E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001014 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001018 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001020 4E75                       		rts	
00001022                            ; End of function sub_106E
00001022                            
00001022                            ; ---------------------------------------------------------------------------
00001022                            ; Subroutine to	move Palettes from the RAM to CRAM
00001022                            ; ---------------------------------------------------------------------------
00001022                            
00001022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001022                            
00001022                            
00001022                            H_Int:
00001022 46FC 2700                  		move	#$2700,sr
00001026 4A78 F644                  		tst.w	($FFFFF644).w
0000102A 6700                       		beq.s	locret_119C
0000102C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001032 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001036 43F9 00C0 0000             		lea	($C00000).l,a1
0000103C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
00001040 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001048 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 2298                       		move.l	(a0)+,(a1)
00001054 2298                       		move.l	(a0)+,(a1)
00001056 2298                       		move.l	(a0)+,(a1)
00001058 2298                       		move.l	(a0)+,(a1)
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000108E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001092 4A38 F64F                  		tst.b	($FFFFF64F).w
00001096 6600                       		bne.s	loc_119E
00001098                            
00001098                            locret_119C:
00001098 4E73                       		rte	
0000109A                            ; ===========================================================================
0000109A                            
0000109A                            loc_119E:				; XREF: H_Int
0000109A 4238 F64F                  		clr.b	($FFFFF64F).w
0000109E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010A2 6100 FC54                  		bsr.w	Demo_Time
000010A6 4EB9 0000 0000             		jsr	sub_71B4C
000010AC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010B0 4E73                       		rte	
000010B2                            ; End of function H_Int
000010B2                            
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            ; Subroutine to	initialise joypads
000010B2                            ; ---------------------------------------------------------------------------
000010B2                            
000010B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010B2                            
000010B2                            
000010B2                            JoypadInit:				; XREF: GameClrRAM
000010B2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010BA                            
000010BA                            Joypad_WaitZ80:
000010BA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010C2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010C4 7040                       		moveq	#$40,d0
000010C6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010CC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010D2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010D8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010E0 4E75                       		rts	
000010E2                            ; End of function JoypadInit
000010E2                            
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            ; Subroutine to	read joypad input, and send it to the RAM
000010E2                            ; ---------------------------------------------------------------------------
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            ReadJoypads:
000010E2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010E6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010EC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010EE 5449                       		addq.w	#2,a1		; do the second	joypad
000010F0                            
000010F0                            Joypad_Read:
000010F0 12BC 0000                  		move.b	#0,(a1)
000010F4 4E71                       		nop	
000010F6 4E71                       		nop	
000010F8 1011                       		move.b	(a1),d0
000010FA E508                       		lsl.b	#2,d0
000010FC 0200 00C0                  		andi.b	#$C0,d0
00001100 12BC 0040                  		move.b	#$40,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1211                       		move.b	(a1),d1
0000110A 0201 003F                  		andi.b	#$3F,d1
0000110E 8001                       		or.b	d1,d0
00001110 4600                       		not.b	d0
00001112 1210                       		move.b	(a0),d1
00001114 B101                       		eor.b	d0,d1
00001116 10C0                       		move.b	d0,(a0)+
00001118 C200                       		and.b	d0,d1
0000111A 10C1                       		move.b	d1,(a0)+
0000111C 4E75                       		rts	
0000111E                            ; End of function ReadJoypads
0000111E                            
0000111E                            
0000111E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111E                            
0000111E                            
0000111E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000111E 41F9 00C0 0004             		lea	($C00004).l,a0
00001124 43F9 00C0 0000             		lea	($C00000).l,a1
0000112A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001130 7E12                       		moveq	#$12,d7
00001132                            
00001132                            VDP_Loop:
00001132 309A                       		move.w	(a2)+,(a0)
00001134 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001138                            
00001138 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000113E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001142 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001148 7000                       		moveq	#0,d0
0000114A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001154 3E3C 003F                  		move.w	#$3F,d7
00001158                            
00001158                            VDP_ClrCRAM:
00001158 3280                       		move.w	d0,(a1)
0000115A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000115E                            
0000115E 42B8 F616                  		clr.l	($FFFFF616).w
00001162 42B8 F61A                  		clr.l	($FFFFF61A).w
00001166 2F01                       		move.l	d1,-(sp)
00001168 4BF9 00C0 0004             		lea	($C00004).l,a5
0000116E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001172 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001178 3ABC 9780                  		move.w	#$9780,(a5)
0000117C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001182 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000118A                            
0000118A                            loc_128E:
0000118A 3215                       		move.w	(a5),d1
0000118C 0801 0001                  		btst	#1,d1
00001190 66F8                       		bne.s	loc_128E
00001192                            
00001192 3ABC 8F02                  		move.w	#$8F02,(a5)
00001196 221F                       		move.l	(sp)+,d1
00001198 4E75                       		rts	
0000119A                            ; End of function VDPSetupGame
0000119A                            
0000119A                            ; ===========================================================================
0000119A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011A2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011AA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011B2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011BA 9001 9100 9200             		dc.w $9001, $9100, $9200
000011C0                            
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            ; Subroutine to	clear the screen
000011C0                            ; ---------------------------------------------------------------------------
000011C0                            
000011C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C0                            
000011C0                            
000011C0                            ClearScreen:
000011C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011C6 3ABC 8F01                  		move.w	#$8F01,(a5)
000011CA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011D0 3ABC 9780                  		move.w	#$9780,(a5)
000011D4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011DA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011E2                            
000011E2                            loc_12E6:
000011E2 3215                       		move.w	(a5),d1
000011E4 0801 0001                  		btst	#1,d1
000011E8 66F8                       		bne.s	loc_12E6
000011EA                            
000011EA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000011F8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011FE 3ABC 9780                  		move.w	#$9780,(a5)
00001202 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001208 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001210                            
00001210                            loc_1314:
00001210 3215                       		move.w	(a5),d1
00001212 0801 0001                  		btst	#1,d1
00001216 66F8                       		bne.s	loc_1314
00001218                            
00001218 3ABC 8F02                  		move.w	#$8F02,(a5)
0000121C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001224 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000122C 43F8 F800                  		lea	($FFFFF800).w,a1
00001230 7000                       		moveq	#0,d0
00001232 323C 00A0                  		move.w	#$A0,d1
00001236                            
00001236                            loc_133A:
00001236 22C0                       		move.l	d0,(a1)+
00001238 51C9 FFFC                  		dbf	d1,loc_133A
0000123C                            
0000123C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001240 7000                       		moveq	#0,d0
00001242 323C 0100                  		move.w	#$100,d1
00001246                            
00001246                            loc_134A:
00001246 22C0                       		move.l	d0,(a1)+
00001248 51C9 FFFC                  		dbf	d1,loc_134A
0000124C 4E75                       		rts	
0000124E                            ; End of function ClearScreen
0000124E                            
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	load the sound driver
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            InitMegaPCM:			; XREF: GameClrRAM; TitleScreen
0000124E 4E71                       		nop
00001250 303C 0100                  		move.w	#$100,d0
00001254 33C0 00A1 1100             		move.w	d0,($A11100).l
0000125A 33C0 00A1 1200             		move.w	d0,($A11200).l
00001260 41F9 0000 0000             		lea	(MegaPCM).l,a0
00001266 43F9 00A0 0000             		lea	($A00000).l,a1
0000126C 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
00001270                            
00001270 12D8                       	@Load:	move.b	(a0)+,(a1)+
00001272 51C9 FFFC                  		dbf	d1,@Load
00001276 7200                       		moveq	#0,d1
00001278 33C1 00A1 1200             		move.w	d1,($A11200).l
0000127E 4E71                       		nop
00001280 4E71                       		nop
00001282 4E71                       		nop
00001284 4E71                       		nop
00001286 33C0 00A1 1200             		move.w	d0,($A11200).l
0000128C 33C1 00A1 1100             		move.w	d1,($A11100).l
00001292 4E75                       		rts
00001294                            ; End of function InitMegaPCM
00001294                            
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; Subroutine to	play a DAC sample
00001294                            ; ---------------------------------------------------------------------------
00001294                            ; To use this: 
00001294                            ;		moveq	#$FFFFFFXX,d0
00001294                            ;		jsr	PlaySample
00001294                            ; XX = Sample Number
00001294                            ; ---------------------------------------------------------------------------
00001294                            
00001294                            PlaySample:
00001294 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
0000129C 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000012A4 66F6                       	bne.s	@0
000012A6 13C0 00A0 1FFF             	move.b	d0,$A01FFF
000012AC 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000012B4 4E75                       	rts
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            PlayMusic:
000012B6 0C00 0088                  		cmpi.b	#$88,d0
000012BA 6700                       		beq.s	PlaySound
000012BC 0C00 00A0                  		cmpi.b	#$A0,d0
000012C0 6C00                       		bge.s	PlaySound
000012C2 11C0 FFFC                  		move.b	d0,($FFFFFFFC).w
000012C6                            ; ===========================================================================
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	play a sound or	music track
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            
000012C6                            PlaySound:
000012C6 6100                       		bsr.s	Snd_ChkStop
000012C8 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CC 4E75                       		rts	
000012CE                            ; End of function PlaySound
000012CE                            
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            ; Subroutine to	play a special sound/music (E0-E4)
000012CE                            ;
000012CE                            ; E0 - Fade out
000012CE                            ; E1 - Sega
000012CE                            ; E2 - Speed up
000012CE                            ; E3 - Normal speed
000012CE                            ; E4 - Stop
000012CE                            ; ---------------------------------------------------------------------------
000012CE                            
000012CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CE                            
000012CE                            
000012CE                            PlaySound_Special:
000012CE 6100                       		bsr.s	Snd_ChkStop
000012D0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D4 4E75                       		rts	
000012D6                            ; End of function PlaySound_Special
000012D6                            ; ===========================================================================
000012D6                            
000012D6                            Snd_ChkStop:
000012D6 0C00 00E0                  		cmpi.b	#$E0,d0
000012DA 6700                       		beq.s	@clr
000012DC 0C00 00E4                  		cmpi.b	#$E4,d0
000012E0 6700                       		beq.s	@clr
000012E2 4E75                       		rts
000012E4                            		
000012E4                            @clr:
000012E4 11FC 0000 FFFC             		move.b	#0,($FFFFFFFC).w
000012EA 4E75                       		rts
000012EC                            ; ===========================================================================
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            ; Unused sound/music subroutine
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            
000012EC                            PlaySound_Unk:
000012EC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000012F0 4E75                       		rts	
000012F2                            
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            ; Subroutine to	pause the game
000012F2                            ; ---------------------------------------------------------------------------
000012F2                            
000012F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012F2                            
000012F2                            
000012F2                            PauseGame:				; XREF: Level_MainLoop; et al
000012F2 4E71                       		nop	
000012F4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012F8 6700                       		beq.s	Unpause		; if not, branch
000012FA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012FE 6600                       		bne.s	loc_13BE	; if yes, branch
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001308                            
00001308                            loc_13BE:
00001308 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000130E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001314                            
00001314                            loc_13CA:
00001314 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000131A 6100 0000                  		bsr.w	DelayProgram
0000131E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001322 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001324 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000132A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000132C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001332 4E71                       		nop	
00001334 6000                       		bra.s	loc_1404
00001336                            ; ===========================================================================
00001336                            
00001336                            Pause_ChkBC:				; XREF: PauseGame
00001336 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000133C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000133E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001344 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001346                            
00001346                            Pause_ChkStart:				; XREF: PauseGame
00001346 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000134C 67C6                       		beq.s	loc_13CA	; if not, branch
0000134E                            
0000134E                            loc_1404:				; XREF: PauseGame
0000134E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001354                            
00001354                            Unpause:				; XREF: PauseGame
00001354 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000135A                            
0000135A                            Pause_DoNothing:			; XREF: PauseGame
0000135A 4E75                       		rts	
0000135C                            ; ===========================================================================
0000135C                            
0000135C                            Pause_SlowMo:				; XREF: PauseGame
0000135C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001362 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001368 4E75                       		rts	
0000136A                            ; End of function PauseGame
0000136A                            
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            ; Subroutine to	display	patterns via the VDP
0000136A                            ; ---------------------------------------------------------------------------
0000136A                            
0000136A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136A                            
0000136A                            
0000136A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000136A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001370 283C 0080 0000             		move.l	#$800000,d4
00001376                            
00001376                            loc_142C:
00001376 2D40 0004                  		move.l	d0,4(a6)
0000137A 3601                       		move.w	d1,d3
0000137C                            
0000137C                            loc_1432:
0000137C 3C99                       		move.w	(a1)+,(a6)
0000137E 51CB FFFC                  		dbf	d3,loc_1432
00001382 D084                       		add.l	d4,d0
00001384 51CA FFF0                  		dbf	d2,loc_142C
00001388 4E75                       		rts	
0000138A                            ; End of function ShowVDPGraphics
0000138A                            
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000138A                            ; to be issued the next time ProcessDMAQueue is called.
0000138A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000138A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000138A                            ; ---------------------------------------------------------------------------
0000138A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000138A                            ; registers in which it expects data in:
0000138A                            ; d1.l: Address to data (In 68k address space)
0000138A                            ; d2.w: Destination in VRAM
0000138A                            ; d3.w: Length of data
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000138A                             
0000138A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000138A                            
0000138A                            ; VDP addressses
0000138A =00C00000                  vdp_data_port:		equ $C00000
0000138A =00C00004                  vdp_control_port:	equ $C00004
0000138A =00C00008                  vdp_counter:		equ $C00008
0000138A                            ; Buffer Size Natsumi Credits
0000138A                            ;DMA_Buffer_Start	equ $FFFFA512-2	; the start address of DMA buffer for uncompressed art
0000138A                            ;DMA_Buffer_End		equ $FFFFA912-4	; the end address of DMA buffer for uncompressed art
0000138A                            ; Buffer Size S1 Default
0000138A =FFFFC800                  DMA_Buffer_Start	equ $FFFFC800	; the start address of DMA buffer for uncompressed art
0000138A =FFFFC8FC                  DMA_Buffer_End		equ $FFFFC8FC	; the end address of DMA buffer for uncompressed art
0000138A                            
0000138A                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000138A                            ProcessDMAQueue:
0000138A 4BF9 00C0 0004             		lea	VDP_Control_Port,a5
00001390 43F8 C800                  		lea	DMA_Buffer_Start.w,a1
00001394                            ; loc_14B6:
00001394                            ProcessDMAQueue_Loop:
00001394 3019                       		move.w	(a1)+,d0
00001396 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001398                            		; issue a set of VDP commands...
00001398 3A80                       		move.w	d0,(a5)		; transfer length
0000139A 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000139C 3A99                       		move.w	(a1)+,(a5)	; source address
0000139E 3A99                       		move.w	(a1)+,(a5)	; source address
000013A0 3A99                       		move.w	(a1)+,(a5)	; source address
000013A2 3A99                       		move.w	(a1)+,(a5)	; destination
000013A4 3A99                       		move.w	(a1)+,(a5)	; destination
000013A6 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013AA 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013AC                            ; loc_14CE:
000013AC                            ProcessDMAQueue_Done:
000013AC 31FC 0000 C800             		move.w	#0,DMA_Buffer_Start.w
000013B2 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End.w
000013BA 4E75                       		rts
000013BC                            		
000013BC                            QueueDMATransfer:
000013BC 2278 C8FC                  		movea.l	DMA_Buffer_End.w,a1
000013C0 B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
000013C4 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C6                             
000013C6                            		; piece together some VDP commands and store them for later...
000013C6 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000013CA 1003                       		move.b	d3,d0
000013CC 32C0                       		move.w	d0,(a1)+ ; store command
000013CE                             
000013CE 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000013D2 E04B                       		lsr.w	#8,d3
000013D4 1003                       		move.b	d3,d0
000013D6 32C0                       		move.w	d0,(a1)+ ; store command
000013D8                             
000013D8 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000013DC E289                       		lsr.l	#1,d1
000013DE 1001                       		move.b	d1,d0
000013E0 32C0                       		move.w	d0,(a1)+ ; store command
000013E2                             
000013E2 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000013E6 E089                       		lsr.l	#8,d1
000013E8 1001                       		move.b	d1,d0
000013EA 32C0                       		move.w	d0,(a1)+ ; store command
000013EC                             
000013EC 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $01FE0000
000013F0 E089                       		lsr.l	#8,d1
000013F2 1001                       		move.b	d1,d0
000013F4 32C0                       		move.w	d0,(a1)+ ; store command
000013F6                             
000013F6 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013FC E58A                       		lsl.l	#2,d2
000013FE E44A                       		lsr.w	#2,d2
00001400 4842                       		swap	d2
00001402 0082 4000 0080             		or.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001408 22C2                       		move.l	d2,(a1)+ ; store command
0000140A                             
0000140A 21C9 C8FC                  		move.l	a1,DMA_Buffer_End.w ; set the next free slot address
0000140E B2FC C8FC                  		cmpa.w	#DMA_Buffer_End-$FFFF0000,a1
00001412 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001414 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001418                            ; return_14AA:
00001418                            QueueDMATransfer_Done:
00001418 4E75                       		rts
0000141A                            		
0000141A                            
0000141A 4278 C800                  		clr.w	DMA_Buffer_Start			; clear start of the DMA queue
0000141E 21FC FFFF C800 C8FC        		move.l	#DMA_Buffer_Start,DMA_Buffer_End	; reset address pointer of DMA queue
00001426                            ; End of function ProcessDMAQueue
00001426                            
00001426                            ; ===============================================================
00001426                            ; ---------------------------------------------------------------
00001426                            ; COMPER Decompressor
00001426                            ; ---------------------------------------------------------------
00001426                            ; INPUT:
00001426                            ;       a0      - Source Offset
00001426                            ;       a1      - Destination Offset
00001426                            ; ---------------------------------------------------------------
00001426                             
00001426                            CompDec
00001426                             
00001426                            @newblock
00001426 3018                               move.w  (a0)+,d0                ; fetch description field
00001428 760F                               moveq   #15,d3                  ; set bits counter to 16
0000142A                             
0000142A                            @mainloop
0000142A D040                               add.w   d0,d0                   ; roll description field
0000142C 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000142E 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
00001430 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001434 60F0                               bra.s   @newblock               ; start a new block
00001436                             
00001436                            ; ---------------------------------------------------------------
00001436 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001438 1218                               move.b  (a0)+,d1                ; load displacement
0000143A D241                               add.w   d1,d1
0000143C 7400                               moveq   #0,d2                   ; init copy count
0000143E 1418                               move.b  (a0)+,d2                ; load copy length
00001440 6700                               beq.s   @end                    ; if zero, branch
00001442 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001446                             
00001446 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001448 51CA FFFC                          dbf     d2,@loop                ; repeat
0000144C 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001450 60D4                               bra.s   @newblock               ; start a new block
00001452                             
00001452 4E75                       @end    rts
00001454                            
00001454                            ; ==============================================================================
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Nemesis decompression routine
00001454                            ; ------------------------------------------------------------------------------
00001454                            ; Optimized by vladikcomper
00001454                            ; ------------------------------------------------------------------------------
00001454                             
00001454                            NemDec_RAM:
00001454 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001458 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
0000145C 6000                               bra.s   NemDec_Main
0000145E                             
0000145E                            ; ------------------------------------------------------------------------------
0000145E                            NemDec:
0000145E 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001462 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
00001468 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
0000146C                             
0000146C                            NemDec_Main:
0000146C 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
00001470 3418                               move.w  (a0)+,d2                ; get number of patterns
00001472 6A00                               bpl.s   @0                      ; are we in Mode 0?
00001474 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
00001478 E74A                       @0      lsl.w   #3,d2
0000147A 3A42                               movea.w d2,a5
0000147C 7607                               moveq   #7,d3
0000147E 7400                               moveq   #0,d2
00001480 7800                               moveq   #0,d4
00001482 6100 0000                          bsr.w   NemDec4
00001486 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001488 E145                               asl.w   #8,d5                   ; shift up by a byte
0000148A 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000148C 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
00001490 6100                               bsr.s   NemDec2
00001492 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001496 4E75                               rts
00001498                             
00001498                            ; ---------------------------------------------------------------------------
00001498                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001498                            ; ---------------------------------------------------------------------------
00001498                             
00001498                            NemDec2:
00001498 3E06                               move.w  d6,d7
0000149A 5147                               subq.w  #8,d7                   ; get shift value
0000149C 3205                               move.w  d5,d1
0000149E EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000014A0 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000014A4 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000014A6 0241 00FF                          andi.w  #$FF,d1
000014AA D241                               add.w   d1,d1
000014AC 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000014B0 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000014B4 6400                               bcc.s   @0                      ; if not, branch
000014B6 5046                               addq.w  #8,d6
000014B8 E145                               asl.w   #8,d5
000014BA 1A18                               move.b  (a0)+,d5                ; read next byte
000014BC 1231 1001                  @0      move.b  1(a1,d1.w),d1
000014C0 3001                               move.w  d1,d0
000014C2 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014C6 0240 00F0                          andi.w  #$F0,d0
000014CA                             
000014CA                            NemDec_GetRepeatCount:
000014CA E848                               lsr.w   #4,d0                   ; get repeat count
000014CC                             
000014CC                            NemDec_WritePixel:
000014CC E98C                               lsl.l   #4,d4                   ; shift up by a nybble
000014CE 8801                               or.b    d1,d4                   ; write pixel
000014D0 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
000014D4 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
000014D6                            ; ---------------------------------------------------------------------------
000014D6                             
000014D6                            NemDec3:
000014D6 7800                               moveq   #0,d4                   ; reset row
000014D8 7607                               moveq   #7,d3                   ; reset nybble counter
000014DA                             
000014DA                            NemDec_WritePixelLoop:
000014DA 51C8 FFF0                          dbf     d0,NemDec_WritePixel
000014DE 60B8                               bra.s   NemDec2
000014E0                            ; ---------------------------------------------------------------------------
000014E0                             
000014E0                            NemDec_InlineData:
000014E0 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
000014E2 0C46 0009                          cmpi.w  #9,d6
000014E6 6400                               bcc.s   @0
000014E8 5046                               addq.w  #8,d6
000014EA E145                               asl.w   #8,d5
000014EC 1A18                               move.b  (a0)+,d5
000014EE 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
000014F0 3205                               move.w  d5,d1
000014F2 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
000014F4 3001                               move.w  d1,d0
000014F6 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000014FA 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
000014FE 0C46 0009                          cmpi.w  #9,d6
00001502 64C6                               bcc.s   NemDec_GetRepeatCount
00001504 5046                               addq.w  #8,d6
00001506 E145                               asl.w   #8,d5
00001508 1A18                               move.b  (a0)+,d5
0000150A 60BE                               bra.s   NemDec_GetRepeatCount
0000150C                             
0000150C                            ; ---------------------------------------------------------------------------
0000150C                            ; Subroutines to output decompressed entry
0000150C                            ; Selected depending on current decompression mode
0000150C                            ; ---------------------------------------------------------------------------
0000150C                             
0000150C                            NemDec_WriteRowToVDP:
0000150C                            loc_1502:
0000150C 2884                               move.l  d4,(a4)                 ; write 8-pixel row
0000150E 534D                               subq.w  #1,a5
00001510 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001512 66C2                               bne.s   NemDec3                 ; if not, branch
00001514 4E75                               rts
00001516                            ; ---------------------------------------------------------------------------
00001516                             
00001516                            NemDec_WriteRowToVDP_XOR:
00001516 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001518 2882                               move.l  d2,(a4)                 ; and write the result
0000151A 534D                               subq.w  #1,a5
0000151C 380D                               move.w  a5,d4
0000151E 66B6                               bne.s   NemDec3
00001520 4E75                               rts
00001522                            ; ---------------------------------------------------------------------------
00001522                             
00001522                            NemDec_WriteRowToRAM:
00001522 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00001524 534D                               subq.w  #1,a5
00001526 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001528 66AC                               bne.s   NemDec3                 ; if not, branch
0000152A 4E75                               rts
0000152C                            ; ---------------------------------------------------------------------------
0000152C                             
0000152C                            NemDec_WriteRowToRAM_XOR:
0000152C B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000152E 28C2                               move.l  d2,(a4)+                ; and write the result
00001530 534D                               subq.w  #1,a5
00001532 380D                               move.w  a5,d4
00001534 66A0                               bne.s   NemDec3
00001536 4E75                               rts
00001538                             
00001538                            ; ---------------------------------------------------------------------------
00001538                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001538                            ; ---------------------------------------------------------------------------
00001538                             
00001538                            NemDec4:
00001538 1018                               move.b  (a0)+,d0                ; read first byte
0000153A                             
0000153A                            @ChkEnd:
0000153A 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
0000153E 6600                               bne.s   @NewPalIndex            ; if not, branch
00001540 4E75                               rts
00001542                            ; ---------------------------------------------------------------------------
00001542                             
00001542                            @NewPalIndex:
00001542 3E00                               move.w  d0,d7
00001544                             
00001544                            @ItemLoop:
00001544 1018                               move.b  (a0)+,d0                ; read next byte
00001546 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001548 1200                               move.b  d0,d1
0000154A 0247 000F                          andi.w  #$F,d7                  ; get palette index
0000154E 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
00001552 8E41                               or.w    d1,d7                   ; combine the two
00001554 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00001558 1200                               move.b  d0,d1
0000155A E149                               lsl.w   #8,d1
0000155C 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
0000155E 7208                               moveq   #8,d1
00001560 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
00001562 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
00001564 1018                               move.b  (a0)+,d0                ; get code
00001566 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
00001568 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
0000156C 60D6                               bra.s   @ItemLoop               ; repeat
0000156E                            ; ---------------------------------------------------------------------------
0000156E                             
0000156E                            @ItemShortCode:
0000156E 1018                               move.b  (a0)+,d0                ; get code
00001570 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
00001572 D040                               add.w   d0,d0                   ; get index into code table
00001574 7A01                               moveq   #1,d5
00001576 E36D                               lsl.w   d1,d5
00001578 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
0000157A 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
0000157E                             
0000157E                            @ItemShortCodeLoop:
0000157E 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
00001580 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001584 60BE                               bra.s   @ItemLoop
00001586                            
00001586                            ; ---------------------------------------------------------------------------
00001586                            ; Subroutine to	load pattern load cues
00001586                            ; ---------------------------------------------------------------------------
00001586                            
00001586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001586                            
00001586                            
00001586                            LoadPLC:
00001586 48E7 0060                  		movem.l	a1-a2,-(sp)
0000158A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001590 D040                       		add.w	d0,d0
00001592 3031 0000                  		move.w	(a1,d0.w),d0
00001596 43F1 0000                  		lea	(a1,d0.w),a1
0000159A 45F8 F680                  		lea	($FFFFF680).w,a2
0000159E                            
0000159E                            loc_1598:
0000159E 4A92                       		tst.l	(a2)
000015A0 6700                       		beq.s	loc_15A0
000015A2 5C4A                       		addq.w	#6,a2
000015A4 60F8                       		bra.s	loc_1598
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_15A0:				; XREF: LoadPLC
000015A6 3019                       		move.w	(a1)+,d0
000015A8 6B00                       		bmi.s	loc_15AC
000015AA                            
000015AA                            loc_15A4:
000015AA 24D9                       		move.l	(a1)+,(a2)+
000015AC 34D9                       		move.w	(a1)+,(a2)+
000015AE 51C8 FFFA                  		dbf	d0,loc_15A4
000015B2                            
000015B2                            loc_15AC:
000015B2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B6 4E75                       		rts	
000015B8                            ; End of function LoadPLC
000015B8                            
000015B8                            
000015B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B8                            
000015B8                            
000015B8                            LoadPLC2:
000015B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000015BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015C2 D040                       		add.w	d0,d0
000015C4 3031 0000                  		move.w	(a1,d0.w),d0
000015C8 43F1 0000                  		lea	(a1,d0.w),a1
000015CC 6100                       		bsr.s	ClearPLC
000015CE 45F8 F680                  		lea	($FFFFF680).w,a2
000015D2 3019                       		move.w	(a1)+,d0
000015D4 6B00                       		bmi.s	loc_15D8
000015D6                            
000015D6                            loc_15D0:
000015D6 24D9                       		move.l	(a1)+,(a2)+
000015D8 34D9                       		move.w	(a1)+,(a2)+
000015DA 51C8 FFFA                  		dbf	d0,loc_15D0
000015DE                            
000015DE                            loc_15D8:
000015DE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015E2 4E75                       		rts	
000015E4                            ; End of function LoadPLC2
000015E4                            
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            ; Subroutine to	clear the pattern load cues
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            
000015E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E4                            
000015E4                            
000015E4                            ClearPLC:				; XREF: LoadPLC2
000015E4 45F8 F680                  		lea	($FFFFF680).w,a2
000015E8 701F                       		moveq	#$1F,d0
000015EA                            
000015EA                            ClearPLC_Loop:
000015EA 429A                       		clr.l	(a2)+
000015EC 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015F0 4E75                       		rts	
000015F2                            ; End of function ClearPLC
000015F2                            
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	use graphics listed in a pattern load cue
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            
000015F2                            
000015F2                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015F2 4AB8 F680                  		tst.l	($FFFFF680).w
000015F6 6700                       		beq.s	locret_1640
000015F8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015FC 6600                       		bne.s	locret_1640
000015FE 2078 F680                  		movea.l	($FFFFF680).w,a0
00001602 47F9 0000 150C             		lea	(loc_1502).l,a3
00001608 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000160C 3418                       		move.w	(a0)+,d2
0000160E 6A00                       		bpl.s	loc_160E
00001610 D6FC 000A                  		adda.w	#$A,a3
00001614                            
00001614                            loc_160E:
00001614 0242 7FFF                  		andi.w	#$7FFF,d2
00001618 6100 FF1E                  		bsr.w	NemDec4
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622 7C10                       		moveq	#$10,d6
00001624 7000                       		moveq	#0,d0
00001626 21C8 F680                  		move.l	a0,($FFFFF680).w
0000162A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001632 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001636 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001642 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001646                            
00001646                            locret_1640:
00001646 4E75                       		rts	
00001648                            ; End of function RunPLC_RAM
00001648                            
00001648                            
00001648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            
00001648                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001648 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000164C 6700 0000                  		beq.w	locret_16DA
00001650 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001656 7000                       		moveq	#0,d0
00001658 3038 F684                  		move.w	($FFFFF684).w,d0
0000165C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001662 6000                       		bra.s	loc_1676
00001664                            ; End of function sub_1642
00001664                            
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            sub_165E:				; XREF: Demo_Time
00001664 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001668 6700                       		beq.s	locret_16DA
0000166A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001670 7000                       		moveq	#0,d0
00001672 3038 F684                  		move.w	($FFFFF684).w,d0
00001676 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000167C                            
0000167C                            loc_1676:				; XREF: sub_1642
0000167C 49F9 00C0 0004             		lea	($C00004).l,a4
00001682 E588                       		lsl.l	#2,d0
00001684 E448                       		lsr.w	#2,d0
00001686 0040 4000                  		ori.w	#$4000,d0
0000168A 4840                       		swap	d0
0000168C 2880                       		move.l	d0,(a4)
0000168E 594C                       		subq.w	#4,a4
00001690 2078 F680                  		movea.l	($FFFFF680).w,a0
00001694 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001698 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000169C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016A0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016AC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016B0                            
000016B0                            loc_16AA:				; XREF: sub_165E
000016B0 3A7C 0008                  		movea.w	#8,a5
000016B4 6100 FE20                  		bsr.w	NemDec3
000016B8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016BC 6700                       		beq.s	loc_16DC
000016BE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016C2 66EC                       		bne.s	loc_16AA
000016C4 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016CC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016D0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016DC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016E0                            
000016E0                            locret_16DA:				; XREF: sub_1642
000016E0 4E75                       		rts	
000016E2                            ; ===========================================================================
000016E2                            
000016E2                            loc_16DC:				; XREF: sub_165E
000016E2 41F8 F680                  		lea	($FFFFF680).w,a0
000016E6 7015                       		moveq	#$15,d0
000016E8                            
000016E8                            loc_16E2:				; XREF: sub_165E
000016E8 20E8 0006                  		move.l	6(a0),(a0)+
000016EC 51C8 FFFA                  		dbf	d0,loc_16E2
000016F0 4E75                       		rts	
000016F2                            ; End of function sub_165E
000016F2                            
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	execute	the pattern load cue
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            
000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            
000016F2                            
000016F2                            RunPLC_ROM:
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1
00001702 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001704                            
00001704                            RunPLC_Loop:
00001704 2059                       		movea.l	(a1)+,a0	; get art pointer
00001706 7000                       		moveq	#0,d0
00001708 3019                       		move.w	(a1)+,d0	; get VRAM address
0000170A E588                       		lsl.l	#2,d0		; divide address by $20
0000170C E448                       		lsr.w	#2,d0
0000170E 0040 4000                  		ori.w	#$4000,d0
00001712 4840                       		swap	d0
00001714 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000171A 6100 FD42                  		bsr.w	NemDec		; decompress
0000171E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001722 4E75                       		rts	
00001724                            ; End of function RunPLC_ROM
00001724                            
00001724                            ; ---------------------------------------------------------------------------
00001724                            ; Enigma decompression algorithm
00001724                            ; ---------------------------------------------------------------------------
00001724                            
00001724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001724                            
00001724                            
00001724                            EniDec:
00001724 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001728 3640                       		movea.w	d0,a3
0000172A 1018                       		move.b	(a0)+,d0
0000172C 4880                       		ext.w	d0
0000172E 3A40                       		movea.w	d0,a5
00001730 1818                       		move.b	(a0)+,d4
00001732 E70C                       		lsl.b	#3,d4
00001734 3458                       		movea.w	(a0)+,a2
00001736 D4CB                       		adda.w	a3,a2
00001738 3858                       		movea.w	(a0)+,a4
0000173A D8CB                       		adda.w	a3,a4
0000173C 1A18                       		move.b	(a0)+,d5
0000173E E145                       		asl.w	#8,d5
00001740 1A18                       		move.b	(a0)+,d5
00001742 7C10                       		moveq	#$10,d6
00001744                            
00001744                            loc_173E:				; XREF: loc_1768
00001744 7007                       		moveq	#7,d0
00001746 3E06                       		move.w	d6,d7
00001748 9E40                       		sub.w	d0,d7
0000174A 3205                       		move.w	d5,d1
0000174C EE69                       		lsr.w	d7,d1
0000174E 0241 007F                  		andi.w	#$7F,d1
00001752 3401                       		move.w	d1,d2
00001754 0C41 0040                  		cmpi.w	#$40,d1
00001758 6400                       		bcc.s	loc_1758
0000175A 7006                       		moveq	#6,d0
0000175C E24A                       		lsr.w	#1,d2
0000175E                            
0000175E                            loc_1758:
0000175E 6100 0000                  		bsr.w	sub_188C
00001762 0242 000F                  		andi.w	#$F,d2
00001766 E849                       		lsr.w	#4,d1
00001768 D241                       		add.w	d1,d1
0000176A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000176E                            ; End of function EniDec
0000176E                            
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1768:				; XREF: loc_17B4
0000176E 32CA                       		move.w	a2,(a1)+
00001770 524A                       		addq.w	#1,a2
00001772 51CA FFFA                  		dbf	d2,loc_1768
00001776 60CC                       		bra.s	loc_173E
00001778                            ; ===========================================================================
00001778                            
00001778                            loc_1772:				; XREF: loc_17B4
00001778 32CC                       		move.w	a4,(a1)+
0000177A 51CA FFFC                  		dbf	d2,loc_1772
0000177E 60C4                       		bra.s	loc_173E
00001780                            ; ===========================================================================
00001780                            
00001780                            loc_177A:				; XREF: loc_17B4
00001780 6100 0000                  		bsr.w	loc_17DC
00001784                            
00001784                            loc_177E:
00001784 32C1                       		move.w	d1,(a1)+
00001786 51CA FFFC                  		dbf	d2,loc_177E
0000178A 60B8                       		bra.s	loc_173E
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1786:				; XREF: loc_17B4
0000178C 6100 0000                  		bsr.w	loc_17DC
00001790                            
00001790                            loc_178A:
00001790 32C1                       		move.w	d1,(a1)+
00001792 5241                       		addq.w	#1,d1
00001794 51CA FFFA                  		dbf	d2,loc_178A
00001798 60AA                       		bra.s	loc_173E
0000179A                            ; ===========================================================================
0000179A                            
0000179A                            loc_1794:				; XREF: loc_17B4
0000179A 6100 0000                  		bsr.w	loc_17DC
0000179E                            
0000179E                            loc_1798:
0000179E 32C1                       		move.w	d1,(a1)+
000017A0 5341                       		subq.w	#1,d1
000017A2 51CA FFFA                  		dbf	d2,loc_1798
000017A6 609C                       		bra.s	loc_173E
000017A8                            ; ===========================================================================
000017A8                            
000017A8                            loc_17A2:				; XREF: loc_17B4
000017A8 0C42 000F                  		cmpi.w	#$F,d2
000017AC 6700                       		beq.s	loc_17C4
000017AE                            
000017AE                            loc_17A8:
000017AE 6100 0000                  		bsr.w	loc_17DC
000017B2 32C1                       		move.w	d1,(a1)+
000017B4 51CA FFF8                  		dbf	d2,loc_17A8
000017B8 608A                       		bra.s	loc_173E
000017BA                            ; ===========================================================================
000017BA                            
000017BA                            loc_17B4:				; XREF: EniDec
000017BA 60B2                       		bra.s	loc_1768
000017BC                            ; ===========================================================================
000017BC 60B0                       		bra.s	loc_1768
000017BE                            ; ===========================================================================
000017BE 60B8                       		bra.s	loc_1772
000017C0                            ; ===========================================================================
000017C0 60B6                       		bra.s	loc_1772
000017C2                            ; ===========================================================================
000017C2 60BC                       		bra.s	loc_177A
000017C4                            ; ===========================================================================
000017C4 60C6                       		bra.s	loc_1786
000017C6                            ; ===========================================================================
000017C6 60D2                       		bra.s	loc_1794
000017C8                            ; ===========================================================================
000017C8 60DE                       		bra.s	loc_17A2
000017CA                            ; ===========================================================================
000017CA                            
000017CA                            loc_17C4:				; XREF: loc_17A2
000017CA 5348                       		subq.w	#1,a0
000017CC 0C46 0010                  		cmpi.w	#$10,d6
000017D0 6600                       		bne.s	loc_17CE
000017D2 5348                       		subq.w	#1,a0
000017D4                            
000017D4                            loc_17CE:
000017D4 3008                       		move.w	a0,d0
000017D6 E248                       		lsr.w	#1,d0
000017D8 6400                       		bcc.s	loc_17D6
000017DA 5248                       		addq.w	#1,a0
000017DC                            
000017DC                            loc_17D6:
000017DC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017E0 4E75                       		rts	
000017E2                            ; ===========================================================================
000017E2                            
000017E2                            loc_17DC:				; XREF: loc_17A2
000017E2 360B                       		move.w	a3,d3
000017E4 1204                       		move.b	d4,d1
000017E6 D201                       		add.b	d1,d1
000017E8 6400                       		bcc.s	loc_17EE
000017EA 5346                       		subq.w	#1,d6
000017EC 0D05                       		btst	d6,d5
000017EE 6700                       		beq.s	loc_17EE
000017F0 0043 8000                  		ori.w	#-$8000,d3
000017F4                            
000017F4                            loc_17EE:
000017F4 D201                       		add.b	d1,d1
000017F6 6400                       		bcc.s	loc_17FC
000017F8 5346                       		subq.w	#1,d6
000017FA 0D05                       		btst	d6,d5
000017FC 6700                       		beq.s	loc_17FC
000017FE 0643 4000                  		addi.w	#$4000,d3
00001802                            
00001802                            loc_17FC:
00001802 D201                       		add.b	d1,d1
00001804 6400                       		bcc.s	loc_180A
00001806 5346                       		subq.w	#1,d6
00001808 0D05                       		btst	d6,d5
0000180A 6700                       		beq.s	loc_180A
0000180C 0643 2000                  		addi.w	#$2000,d3
00001810                            
00001810                            loc_180A:
00001810 D201                       		add.b	d1,d1
00001812 6400                       		bcc.s	loc_1818
00001814 5346                       		subq.w	#1,d6
00001816 0D05                       		btst	d6,d5
00001818 6700                       		beq.s	loc_1818
0000181A 0043 1000                  		ori.w	#$1000,d3
0000181E                            
0000181E                            loc_1818:
0000181E D201                       		add.b	d1,d1
00001820 6400                       		bcc.s	loc_1826
00001822 5346                       		subq.w	#1,d6
00001824 0D05                       		btst	d6,d5
00001826 6700                       		beq.s	loc_1826
00001828 0043 0800                  		ori.w	#$800,d3
0000182C                            
0000182C                            loc_1826:
0000182C 3205                       		move.w	d5,d1
0000182E 3E06                       		move.w	d6,d7
00001830 9E4D                       		sub.w	a5,d7
00001832 6400                       		bcc.s	loc_1856
00001834 3C07                       		move.w	d7,d6
00001836 0646 0010                  		addi.w	#$10,d6
0000183A 4447                       		neg.w	d7
0000183C EF69                       		lsl.w	d7,d1
0000183E 1A10                       		move.b	(a0),d5
00001840 EF3D                       		rol.b	d7,d5
00001842 DE47                       		add.w	d7,d7
00001844 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001848 D245                       		add.w	d5,d1
0000184A                            
0000184A                            loc_1844:				; XREF: loc_1868
0000184A 300D                       		move.w	a5,d0
0000184C D040                       		add.w	d0,d0
0000184E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001852 D243                       		add.w	d3,d1
00001854 1A18                       		move.b	(a0)+,d5
00001856 E14D                       		lsl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A 4E75                       		rts	
0000185C                            ; ===========================================================================
0000185C                            
0000185C                            loc_1856:				; XREF: loc_1826
0000185C 6700                       		beq.s	loc_1868
0000185E EE69                       		lsr.w	d7,d1
00001860 300D                       		move.w	a5,d0
00001862 D040                       		add.w	d0,d0
00001864 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001868 D243                       		add.w	d3,d1
0000186A 300D                       		move.w	a5,d0
0000186C 6000                       		bra.s	sub_188C
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            loc_1868:				; XREF: loc_1856
0000186E 7C10                       		moveq	#$10,d6
00001870                            
00001870                            loc_186A:
00001870 60D8                       		bra.s	loc_1844
00001872                            ; ===========================================================================
00001872 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001888 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001892                            
00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            
00001892                            
00001892                            sub_188C:				; XREF: EniDec
00001892 9C40                       		sub.w	d0,d6
00001894 0C46 0009                  		cmpi.w	#9,d6
00001898 6400                       		bcc.s	locret_189A
0000189A 5046                       		addq.w	#8,d6
0000189C E145                       		asl.w	#8,d5
0000189E 1A18                       		move.b	(a0)+,d5
000018A0                            
000018A0                            locret_189A:
000018A0 4E75                       		rts	
000018A2                            ; End of function sub_188C
000018A2                            
000018A2                            ; ===========================================================================
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            ; Kosinski decompression routine
000018A2                            ;
000018A2                            ; Created by vladikcomper
000018A2                            ; Special thanks to flamewing and MarkeyJester
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            _Kos_RunBitStream macro
000018A2                                    dbf     d2,@skip\@
000018A2                                    moveq   #7,d2
000018A2                                    move.b  d1,d0
000018A2                                    swap    d3
000018A2                                    bpl.s   @skip\@
000018A2                                    move.b  (a0)+,d0                        ; get desc. bitfield
000018A2                                    move.b  (a0)+,d1                        ;
000018A2                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018A2                                    move.b  (a4,d1.w),d1                    ;
000018A2                            @skip\@
000018A2                                    endm
000018A2                            ; ---------------------------------------------------------------------------
000018A2                             
000018A2                            KosDec:
000018A2 7E07                               moveq   #7,d7
000018A4 7000                               moveq   #0,d0
000018A6 7200                               moveq   #0,d1
000018A8 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000018AC 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000018AE 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000018B0 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000018B4 1234 1000                          move.b  (a4,d1.w),d1                    ;
000018B8 7407                               moveq   #7,d2                           ; set repeat count to 8
000018BA 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
000018BC 4243                               clr.w   d3                              ;
000018BE 6000                               bra.s   KosDec_FetchNewCode
000018C0                             
000018C0                            KosDec_FetchCodeLoop:
000018C0                                    ; code 1 (Uncompressed byte)
000018C0 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018D8 12D8                               move.b  (a0)+,(a1)+
000018DA                             
000018DA                            KosDec_FetchNewCode:
000018DA D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018DC 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
000018DE                             
000018DE                                    ; codes 00 and 01
000018DE 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018F6 7800                               moveq   #0,d4                           ; d4 will contain copy count
000018F8 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018FA 6500                               bcs.s   KosDec_Code_01
000018FC                             
000018FC                                    ; code 00 (Dictionary ref. short)
000018FC 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001914 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001916 D944                               addx.w  d4,d4
00001918 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001930 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001932 D944                               addx.w  d4,d4
00001934 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000194C 7AFF                               moveq   #-1,d5
0000194E 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00001950                             
00001950                            KosDec_StreamCopy:
00001950 47F1 5000                          lea     (a1,d5),a3
00001954 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001956                             
00001956                            KosDec_copy:
00001956 12DB                               move.b  (a3)+,(a1)+
00001958 51CC FFFC                          dbf     d4,KosDec_copy
0000195C 6000 FF7C                          bra.w   KosDec_FetchNewCode
00001960                            ; ---------------------------------------------------------------------------
00001960                            KosDec_Code_01:
00001960                                    ; code 01 (Dictionary ref. long / special)
00001960 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001978 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
0000197A 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
0000197C 7AFF                               moveq   #-1,d5
0000197E 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00001980 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00001982 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00001984 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00001986 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00001988                             
00001988                                    ; special mode (extended counter)
00001988 1818                               move.b  (a0)+,d4                        ; read cnt
0000198A 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
0000198C 5304                               subq.b  #1,d4
0000198E 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00001992                             
00001992 47F1 5000                          lea     (a1,d5),a3
00001996 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001998 3C04                               move.w  d4,d6
0000199A 4646                               not.w   d6
0000199C CC47                               and.w   d7,d6
0000199E DC46                               add.w   d6,d6
000019A0 E64C                               lsr.w   #3,d4
000019A2 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000019A6                             
000019A6                            KosDec_largecopy:
000019A6                                    rept 8
000019A6                                    move.b  (a3)+,(a1)+
000019A6 12DB 12DB 12DB 12DB 12DB+          endr
000019B6 51CC FFEE                          dbf     d4,KosDec_largecopy
000019BA 6000 FF1E                          bra.w   KosDec_FetchNewCode
000019BE                             
000019BE                            KosDec_Quit:
000019BE 4E75                               rts
000019C0                             
000019C0                            ; ---------------------------------------------------------------------------
000019C0                            ; A look-up table to invert bits order in desc. field bytes
000019C0                            ; ---------------------------------------------------------------------------
000019C0                             
000019C0                            KosDec_ByteMap:
000019C0 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000019D0 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000019E0 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000019F0 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001A00 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001A10 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001A20 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001A30 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001A40 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001A50 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001A60 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001A70 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A80 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A90 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001AA0 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001AB0 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001AC0                             
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Palette cycling routine loading subroutine
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AC0 7400                       		moveq	#0,d2
00001AC2 7000                       		moveq	#0,d0
00001AC4 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AC8 D040                       		add.w	d0,d0		; multiply by 2
00001ACA 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001ACE 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001AD2                            ; End of function PalCycle_Load
00001AD2                            
00001AD2                            ; ===========================================================================
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Palette cycling routines
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AD4 0000                       		dc.w PalCycle_LZ-PalCycle
00001AD6 0000                       		dc.w PalCycle_MZ-PalCycle
00001AD8 0000                       		dc.w PalCycle_SLZ-PalCycle
00001ADA 0000                       		dc.w PalCycle_SYZ-PalCycle
00001ADC 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ADE 0000                       		dc.w PalCycle_GHZ-PalCycle
00001AE0                            
00001AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AE0                            
00001AE0                            
00001AE0                            PalCycle_Title:				; XREF: TitleScreen
00001AE0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AE6 6000                       		bra.s	loc_196A
00001AE8                            ; ===========================================================================
00001AE8                            
00001AE8                            PalCycle_GHZ:				; XREF: PalCycle
00001AE8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001AEE                            
00001AEE                            loc_196A:				; XREF: PalCycle_Title
00001AEE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AF2 6A00                       		bpl.s	locret_1990
00001AF4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AFA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B02 0240 0003                  		andi.w	#3,d0
00001B06 E748                       		lsl.w	#3,d0
00001B08 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B0C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B10 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B14                            
00001B14                            locret_1990:
00001B14 4E75                       		rts	
00001B16                            ; End of function PalCycle_Title
00001B16                            
00001B16                            
00001B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B16                            
00001B16                            
00001B16                            PalCycle_LZ:				; XREF: PalCycle
00001B16 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B1A 6A00                       		bpl.s	loc_19D8
00001B1C 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B22 3038 F632                  		move.w	($FFFFF632).w,d0
00001B26 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B2A 0240 0003                  		andi.w	#3,d0
00001B2E E748                       		lsl.w	#3,d0
00001B30 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B36 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B3C 6600                       		bne.s	loc_19C0
00001B3E 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	Palette instead
00001B44                            
00001B44                            loc_19C0:
00001B44 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B48 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B50 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B54 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B58 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5C                            
00001B5C                            loc_19D8:
00001B5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B60 0240 0007                  		andi.w	#7,d0
00001B64 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B68 6700                       		beq.s	locret_1A3A
00001B6A 7201                       		moveq	#1,d1
00001B6C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B70 6700                       		beq.s	loc_19F0
00001B72 4441                       		neg.w	d1
00001B74                            
00001B74                            loc_19F0:
00001B74 3038 F650                  		move.w	($FFFFF650).w,d0
00001B78 0240 0003                  		andi.w	#3,d0
00001B7C D041                       		add.w	d1,d0
00001B7E 0C40 0003                  		cmpi.w	#3,d0
00001B82 6500                       		bcs.s	loc_1A0A
00001B84 3200                       		move.w	d0,d1
00001B86 7000                       		moveq	#0,d0
00001B88 4A41                       		tst.w	d1
00001B8A 6A00                       		bpl.s	loc_1A0A
00001B8C 7002                       		moveq	#2,d0
00001B8E                            
00001B8E                            loc_1A0A:
00001B8E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B92 D040                       		add.w	d0,d0
00001B94 3200                       		move.w	d0,d1
00001B96 D040                       		add.w	d0,d0
00001B98 D041                       		add.w	d1,d0
00001B9A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001BA0 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001BA4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA8 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001BB2 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BBE                            
00001BBE                            locret_1A3A:
00001BBE 4E75                       		rts	
00001BC0                            ; End of function PalCycle_LZ
00001BC0                            
00001BC0                            ; ===========================================================================
00001BC0 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BC8                            ; ===========================================================================
00001BC8                            
00001BC8                            PalCycle_MZ:				; XREF: PalCycle
00001BC8 4E75                       		rts	
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_SLZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	locret_1A80
00001BD0 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5240                       		addq.w	#1,d0
00001BDC 0C40 0006                  		cmpi.w	#6,d0
00001BE0 6500                       		bcs.s	loc_1A60
00001BE2 7000                       		moveq	#0,d0
00001BE4                            
00001BE4                            loc_1A60:
00001BE4 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BE8 3200                       		move.w	d0,d1
00001BEA D241                       		add.w	d1,d1
00001BEC D041                       		add.w	d1,d0
00001BEE D040                       		add.w	d0,d0
00001BF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001C04                            
00001C04                            locret_1A80:
00001C04 4E75                       		rts	
00001C06                            ; End of function PalCycle_SLZ
00001C06                            
00001C06                            
00001C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C06                            
00001C06                            
00001C06                            PalCycle_SYZ:				; XREF: PalCycle
00001C06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C0A 6A00                       		bpl.s	locret_1AC6
00001C0C 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C12 3038 F632                  		move.w	($FFFFF632).w,d0
00001C16 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C1A 0240 0003                  		andi.w	#3,d0
00001C1E E548                       		lsl.w	#2,d0
00001C20 3200                       		move.w	d0,d1
00001C22 D040                       		add.w	d0,d0
00001C24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C2A 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C4A                            
00001C4A                            locret_1AC6:
00001C4A 4E75                       		rts	
00001C4C                            ; End of function PalCycle_SYZ
00001C4C                            
00001C4C                            
00001C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C4C                            
00001C4C                            
00001C4C                            PalCycle_SBZ:				; XREF: PalCycle
00001C4C 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C52 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C56 6700                       		beq.s	loc_1ADA
00001C58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C5E                            
00001C5E                            loc_1ADA:
00001C5E 43F8 F650                  		lea	($FFFFF650).w,a1
00001C62 321A                       		move.w	(a2)+,d1
00001C64                            
00001C64                            loc_1AE0:
00001C64 5311                       		subq.b	#1,(a1)
00001C66 6B00                       		bmi.s	loc_1AEA
00001C68 5489                       		addq.l	#2,a1
00001C6A 5C8A                       		addq.l	#6,a2
00001C6C 6000                       		bra.s	loc_1B06
00001C6E                            ; ===========================================================================
00001C6E                            
00001C6E                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C6E 12DA                       		move.b	(a2)+,(a1)+
00001C70 1011                       		move.b	(a1),d0
00001C72 5200                       		addq.b	#1,d0
00001C74 B01A                       		cmp.b	(a2)+,d0
00001C76 6500                       		bcs.s	loc_1AF6
00001C78 7000                       		moveq	#0,d0
00001C7A                            
00001C7A                            loc_1AF6:
00001C7A 12C0                       		move.b	d0,(a1)+
00001C7C 0240 000F                  		andi.w	#$F,d0
00001C80 D040                       		add.w	d0,d0
00001C82 305A                       		movea.w	(a2)+,a0
00001C84 365A                       		movea.w	(a2)+,a3
00001C86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C8A                            
00001C8A                            loc_1B06:				; XREF: PalCycle_SBZ
00001C8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C92 6A00                       		bpl.s	locret_1B64
00001C94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C9A 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CA0 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CA4 6700                       		beq.s	loc_1B2E
00001CA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CAC 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CB2                            
00001CB2                            loc_1B2E:
00001CB2 72FF                       		moveq	#-1,d1
00001CB4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CB8 6700                       		beq.s	loc_1B38
00001CBA 4441                       		neg.w	d1
00001CBC                            
00001CBC                            loc_1B38:
00001CBC 3038 F632                  		move.w	($FFFFF632).w,d0
00001CC0 0240 0003                  		andi.w	#3,d0
00001CC4 D041                       		add.w	d1,d0
00001CC6 0C40 0003                  		cmpi.w	#3,d0
00001CCA 6500                       		bcs.s	loc_1B52
00001CCC 3200                       		move.w	d0,d1
00001CCE 7000                       		moveq	#0,d0
00001CD0 4A41                       		tst.w	d1
00001CD2 6A00                       		bpl.s	loc_1B52
00001CD4 7002                       		moveq	#2,d0
00001CD6                            
00001CD6                            loc_1B52:
00001CD6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CDA D040                       		add.w	d0,d0
00001CDC 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CE8                            
00001CE8                            locret_1B64:
00001CE8 4E75                       		rts	
00001CEA                            ; End of function PalCycle_SBZ
00001CEA                            
00001CEA                            ; ===========================================================================
00001CEA                            Pal_TitleCyc:	incbin	Palette\c_title.bin
00001D0A                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001D2A                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001D4A                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001D5C                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001D6E                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001DD6                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001DFA                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001E1A                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001E2A                            
00001E2A                            Pal_SBZCycList:
00001E2A                            	include "_inc\SBZ Palette script 1.asm"
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A                            ; Scrap Brain Zone 1 pallet cycling script
00001E2A                            ; ---------------------------------------------------------------------------
00001E2A 0008                       	dc.w 8			; number of entries - 1
00001E2C 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E2E 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E30 FB50                       	dc.w $FB50		; RAM address
00001E32 0D08                       	dc.b $D, 8
00001E34 0000                       	dc.w Pal_SBZCyc2
00001E36 FB52                       	dc.w $FB52
00001E38 0E08                       	dc.b $E, 8
00001E3A 0000                       	dc.w Pal_SBZCyc3
00001E3C FB6E                       	dc.w $FB6E
00001E3E 0B08                       	dc.b $B, 8
00001E40 0000                       	dc.w Pal_SBZCyc5
00001E42 FB70                       	dc.w $FB70
00001E44 0708                       	dc.b 7,	8
00001E46 0000                       	dc.w Pal_SBZCyc6
00001E48 FB72                       	dc.w $FB72
00001E4A 1C10                       	dc.b $1C, $10
00001E4C 0000                       	dc.w Pal_SBZCyc7
00001E4E FB7E                       	dc.w $FB7E
00001E50 0303                       	dc.b 3,	3
00001E52 0000                       	dc.w Pal_SBZCyc8
00001E54 FB78                       	dc.w $FB78
00001E56 0303                       	dc.b 3,	3
00001E58 0000                       	dc.w Pal_SBZCyc8+2
00001E5A FB7A                       	dc.w $FB7A
00001E5C 0303                       	dc.b 3,	3
00001E5E 0000                       	dc.w Pal_SBZCyc8+4
00001E60 FB7C                       	dc.w $FB7C
00001E62                            	even
00001E62                            	even
00001E62                            
00001E62                            Pal_SBZCycList2:
00001E62                            	include "_inc\SBZ Palette script 2.asm"
00001E62                            ; ---------------------------------------------------------------------------
00001E62                            ; Scrap Brain Zone 2 pallet cycling script
00001E62                            ; ---------------------------------------------------------------------------
00001E62 0006                       	dc.w 6
00001E64 0708                       	dc.b 7,	8
00001E66 0000                       	dc.w Pal_SBZCyc1
00001E68 FB50                       	dc.w $FB50
00001E6A 0D08                       	dc.b $D, 8
00001E6C 0000                       	dc.w Pal_SBZCyc2
00001E6E FB52                       	dc.w $FB52
00001E70 0908                       	dc.b 9,	8
00001E72 0000                       	dc.w Pal_SBZCyc9
00001E74 FB70                       	dc.w $FB70
00001E76 0708                       	dc.b 7,	8
00001E78 0000                       	dc.w Pal_SBZCyc6
00001E7A FB72                       	dc.w $FB72
00001E7C 0303                       	dc.b 3,	3
00001E7E 0000                       	dc.w Pal_SBZCyc8
00001E80 FB78                       	dc.w $FB78
00001E82 0303                       	dc.b 3,	3
00001E84 0000                       	dc.w Pal_SBZCyc8+2
00001E86 FB7A                       	dc.w $FB7A
00001E88 0303                       	dc.b 3,	3
00001E8A 0000                       	dc.w Pal_SBZCyc8+4
00001E8C FB7C                       	dc.w $FB7C
00001E8E                            	even
00001E8E                            	even
00001E8E                            
00001E8E                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001E9E                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001EAE                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001EBE                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001ECA                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001EDA                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001EEA                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001F0A                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001F14                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001F24                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            ; Subroutine to	fade out and fade in
00001F30                            ; ---------------------------------------------------------------------------
00001F30                            
00001F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F30                            
00001F30                            
00001F30                            Pal_FadeTo:
00001F30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F36                            
00001F36                            Pal_FadeTo2:
00001F36 7000                       		moveq	#0,d0
00001F38 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F3C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F40 D0C0                       		adda.w	d0,a0
00001F42 7200                       		moveq	#0,d1
00001F44 1038 F627                  		move.b	($FFFFF627).w,d0
00001F48                            
00001F48                            Pal_ToBlack:
00001F48 30C1                       		move.w	d1,(a0)+
00001F4A 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill Palette with $000	(black)
00001F4E 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001F50 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001F52                            
00001F52                            loc_1DCE:
00001F52 6100 F69E                  		bsr.w	RunPLC_RAM
00001F56 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F5C 6100 0000                  		bsr.w	DelayProgram
00001F60 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001F64 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001F66 6100                       		bsr.s	Pal_FadeIn
00001F68 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001F6A 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001F6C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001F72 6000 0000                  		bra	DelayProgram				; MJ: ''
00001F76                            
00001F76                            ; End of function Pal_FadeTo
00001F76                            
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            ; Palette fade-in subroutine
00001F76                            ; ---------------------------------------------------------------------------
00001F76                            
00001F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F76                            
00001F76                            
00001F76                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001F76 7000                       		moveq	#0,d0
00001F78 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F80 1038 F626                  		move.b	($FFFFF626).w,d0
00001F84 D0C0                       		adda.w	d0,a0
00001F86 D2C0                       		adda.w	d0,a1
00001F88 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8C                            
00001F8C                            loc_1DFA:
00001F8C 6100                       		bsr.s	Pal_AddColor
00001F8E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001F92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F98 6600                       		bne.s	locret_1E24
00001F9A 7000                       		moveq	#0,d0
00001F9C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA0 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FA4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA8 D0C0                       		adda.w	d0,a0
00001FAA D2C0                       		adda.w	d0,a1
00001FAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB0                            
00001FB0                            loc_1E1E:
00001FB0 6100                       		bsr.s	Pal_AddColor
00001FB2 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FB6                            
00001FB6                            locret_1E24:
00001FB6 4E75                       		rts	
00001FB8                            ; End of function Pal_FadeIn
00001FB8                            
00001FB8                            
00001FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB8                            
00001FB8                            
00001FB8                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FB8 1A11                       		move.b	(a1),d5					; MJ: load blue
00001FBA 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001FBC 1401                       		move.b	d1,d2					; MJ: load red
00001FBE E809                       		lsr.b	#$04,d1					; MJ: get only green
00001FC0 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001FC4 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001FC6 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001FC8 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001FCC 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001FD0                            
00001FD0                            FCI_NoBlue:
00001FD0 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001FD2 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001FD6 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001FDA                            
00001FDA                            FCI_NoGreen:
00001FDA B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001FDC 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001FE0 5403                       		addq.b	#$02,d3					; MJ: increase red
00001FE2                            
00001FE2                            FCI_NoRed:
00001FE2 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001FE4 4E75                       		rts						; MJ: return
00001FE6                            
00001FE6                            ; End of function Pal_AddColor
00001FE6                            
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeFrom:
00001FE6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FEC 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001FEE 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001FF0                            
00001FF0                            loc_1E5C:
00001FF0 6100 F600                  		bsr.w	RunPLC_RAM
00001FF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FFA 6100 0000                  		bsr.w	DelayProgram
00001FFE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002002 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00002004 6100                       		bsr.s	Pal_FadeOut
00002006 51CC FFE8                  		dbf	d4,loc_1E5C
0000200A 4E75                       		rts	
0000200C                            ; End of function Pal_FadeFrom
0000200C                            
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            ; Palette fade-out subroutine
0000200C                            ; ---------------------------------------------------------------------------
0000200C                            
0000200C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200C                            
0000200C                            
0000200C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000200C 7000                       		moveq	#0,d0
0000200E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002012 1038 F626                  		move.b	($FFFFF626).w,d0
00002016 D0C0                       		adda.w	d0,a0
00002018 1038 F627                  		move.b	($FFFFF627).w,d0
0000201C                            
0000201C                            loc_1E82:
0000201C 6100                       		bsr.s	Pal_DecColor
0000201E 51C8 FFFC                  		dbf	d0,loc_1E82
00002022                            
00002022 7000                       		moveq	#0,d0
00002024 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002028 1038 F626                  		move.b	($FFFFF626).w,d0
0000202C D0C0                       		adda.w	d0,a0
0000202E 1038 F627                  		move.b	($FFFFF627).w,d0
00002032                            
00002032                            loc_1E98:
00002032 6100                       		bsr.s	Pal_DecColor
00002034 51C8 FFFC                  		dbf	d0,loc_1E98
00002038 4E75                       		rts	
0000203A                            ; End of function Pal_FadeOut
0000203A                            
0000203A                            
0000203A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203A                            
0000203A                            
0000203A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000203A 3A10                       		move.w	(a0),d5					; MJ: load colour
0000203C 3205                       		move.w	d5,d1					; MJ: copy to d1
0000203E 1401                       		move.b	d1,d2					; MJ: load green and red
00002040 1601                       		move.b	d1,d3					; MJ: load red
00002042 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00002046 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000204A 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
0000204E                            
0000204E                            FCO_NoBlue:
0000204E 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00002052 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002056 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000205A                            
0000205A                            FCO_NoGreen:
0000205A 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
0000205E 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002062 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002064                            
00002064                            FCO_NoRed:
00002064 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002066 4E75                       		rts						; MJ: return
00002068                            
00002068                            ; End of function Pal_DecColor
00002068                            
00002068                            ; ---------------------------------------------------------------------------
00002068                            ; Subroutine to	fill the Palette	with white (special stage)
00002068                            ; ---------------------------------------------------------------------------
00002068                            
00002068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002068                            
00002068                            
00002068                            Pal_MakeWhite:				; XREF: SpecialStage
00002068 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 323C 0EEE                  		move.w	#$EEE,d1
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            PalWhite_Loop:
00002082 30C1                       		move.w	d1,(a0)+
00002084 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002088 383C 0015                  		move.w	#$15,d4
0000208C                            
0000208C                            loc_1EF4:
0000208C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002092 6100 0000                  		bsr.w	DelayProgram
00002096 6100                       		bsr.s	Pal_WhiteToBlack
00002098 6100 F558                  		bsr.w	RunPLC_RAM
0000209C 51CC FFEE                  		dbf	d4,loc_1EF4
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_MakeWhite
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020A2 7000                       		moveq	#0,d0
000020A4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020AC 1038 F626                  		move.b	($FFFFF626).w,d0
000020B0 D0C0                       		adda.w	d0,a0
000020B2 D2C0                       		adda.w	d0,a1
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1F20:
000020B8 6100                       		bsr.s	Pal_DecColor2
000020BA 51C8 FFFC                  		dbf	d0,loc_1F20
000020BE                            
000020BE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020C4 6600                       		bne.s	locret_1F4A
000020C6 7000                       		moveq	#0,d0
000020C8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020CC 43F8 FA00                  		lea	($FFFFFA00).w,a1
000020D0 1038 F626                  		move.b	($FFFFF626).w,d0
000020D4 D0C0                       		adda.w	d0,a0
000020D6 D2C0                       		adda.w	d0,a1
000020D8 1038 F627                  		move.b	($FFFFF627).w,d0
000020DC                            
000020DC                            loc_1F44:
000020DC 6100                       		bsr.s	Pal_DecColor2
000020DE 51C8 FFFC                  		dbf	d0,loc_1F44
000020E2                            
000020E2                            locret_1F4A:
000020E2 4E75                       		rts	
000020E4                            ; End of function Pal_WhiteToBlack
000020E4                            
000020E4                            
000020E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E4                            
000020E4                            
000020E4                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000020E4 3419                       		move.w	(a1)+,d2
000020E6 3610                       		move.w	(a0),d3
000020E8 B642                       		cmp.w	d2,d3
000020EA 6700                       		beq.s	loc_1F78
000020EC 3203                       		move.w	d3,d1
000020EE 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000020F2 6500                       		bcs.s	loc_1F64
000020F4 B242                       		cmp.w	d2,d1
000020F6 6500                       		bcs.s	loc_1F64
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 4E75                       		rts	
000020FC                            ; ===========================================================================
000020FC                            
000020FC                            loc_1F64:				; XREF: Pal_DecColor2
000020FC 3203                       		move.w	d3,d1
000020FE 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002102 6500                       		bcs.s	loc_1F74
00002104 B242                       		cmp.w	d2,d1
00002106 6500                       		bcs.s	loc_1F74
00002108 30C1                       		move.w	d1,(a0)+
0000210A 4E75                       		rts	
0000210C                            ; ===========================================================================
0000210C                            
0000210C                            loc_1F74:				; XREF: loc_1F64
0000210C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000210E 4E75                       		rts	
00002110                            ; ===========================================================================
00002110                            
00002110                            loc_1F78:				; XREF: Pal_DecColor2
00002110 5448                       		addq.w	#2,a0
00002112 4E75                       		rts	
00002114                            ; End of function Pal_DecColor2
00002114                            
00002114                            ; ---------------------------------------------------------------------------
00002114                            ; Subroutine to	make a white flash when	you enter a special stage
00002114                            ; ---------------------------------------------------------------------------
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            Pal_MakeFlash:				; XREF: SpecialStage
00002114 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000211A 383C 0015                  		move.w	#$15,d4
0000211E                            
0000211E                            loc_1F86:
0000211E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002124 6100 0000                  		bsr.w	DelayProgram
00002128 6100                       		bsr.s	Pal_ToWhite
0000212A 6100 F4C6                  		bsr.w	RunPLC_RAM
0000212E 51CC FFEE                  		dbf	d4,loc_1F86
00002132 4E75                       		rts	
00002134                            ; End of function Pal_MakeFlash
00002134                            
00002134                            
00002134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002134                            
00002134                            
00002134                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002134 7000                       		moveq	#0,d0
00002136 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 1038 F627                  		move.b	($FFFFF627).w,d0
00002144                            
00002144                            loc_1FAC:
00002144 6100                       		bsr.s	Pal_AddColor2
00002146 51C8 FFFC                  		dbf	d0,loc_1FAC
0000214A 7000                       		moveq	#0,d0
0000214C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002150 1038 F626                  		move.b	($FFFFF626).w,d0
00002154 D0C0                       		adda.w	d0,a0
00002156 1038 F627                  		move.b	($FFFFF627).w,d0
0000215A                            
0000215A                            loc_1FC2:
0000215A 6100                       		bsr.s	Pal_AddColor2
0000215C 51C8 FFFC                  		dbf	d0,loc_1FC2
00002160 4E75                       		rts	
00002162                            ; End of function Pal_ToWhite
00002162                            
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002162 3410                       		move.w	(a0),d2
00002164 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002168 6700                       		beq.s	loc_2006
0000216A 3202                       		move.w	d2,d1
0000216C 0241 000E                  		andi.w	#$E,d1
00002170 0C41 000E                  		cmpi.w	#$E,d1
00002174 6700                       		beq.s	loc_1FE2
00002176 5458                       		addq.w	#2,(a0)+	; increase red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1FE2:				; XREF: Pal_AddColor2
0000217A 3202                       		move.w	d2,d1
0000217C 0241 00E0                  		andi.w	#$E0,d1
00002180 0C41 00E0                  		cmpi.w	#$E0,d1
00002184 6700                       		beq.s	loc_1FF4
00002186 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000218A 4E75                       		rts	
0000218C                            ; ===========================================================================
0000218C                            
0000218C                            loc_1FF4:				; XREF: loc_1FE2
0000218C 3202                       		move.w	d2,d1
0000218E 0241 0E00                  		andi.w	#$E00,d1
00002192 0C41 0E00                  		cmpi.w	#$E00,d1
00002196 6700                       		beq.s	loc_2006
00002198 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000219C 4E75                       		rts	
0000219E                            ; ===========================================================================
0000219E                            
0000219E                            loc_2006:				; XREF: Pal_AddColor2
0000219E 5448                       		addq.w	#2,a0
000021A0 4E75                       		rts	
000021A2                            ; End of function Pal_AddColor2
000021A2                            
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            ; Palette cycling routine - Sega	logo
000021A2                            ; ---------------------------------------------------------------------------
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            PalCycle_Sega:				; XREF: SegaScreen
000021A2 4A38 F635                  		tst.b	($FFFFF635).w
000021A6 6600                       		bne.s	loc_206A
000021A8 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021AC 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021B2 7205                       		moveq	#5,d1
000021B4 3038 F632                  		move.w	($FFFFF632).w,d0
000021B8                            
000021B8                            loc_2020:
000021B8 6A00                       		bpl.s	loc_202A
000021BA 5448                       		addq.w	#2,a0
000021BC 5341                       		subq.w	#1,d1
000021BE 5440                       		addq.w	#2,d0
000021C0 60F6                       		bra.s	loc_2020
000021C2                            ; ===========================================================================
000021C2                            
000021C2                            loc_202A:				; XREF: PalCycle_Sega
000021C2 3400                       		move.w	d0,d2
000021C4 0242 001E                  		andi.w	#$1E,d2
000021C8 6600                       		bne.s	loc_2034
000021CA 5440                       		addq.w	#2,d0
000021CC                            
000021CC                            loc_2034:
000021CC 0C40 0060                  		cmpi.w	#$60,d0
000021D0 6400                       		bcc.s	loc_203E
000021D2 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000021D6                            
000021D6                            loc_203E:
000021D6 5440                       		addq.w	#2,d0
000021D8 51C9 FFE8                  		dbf	d1,loc_202A
000021DC 3038 F632                  		move.w	($FFFFF632).w,d0
000021E0 5440                       		addq.w	#2,d0
000021E2 3400                       		move.w	d0,d2
000021E4 0242 001E                  		andi.w	#$1E,d2
000021E8 6600                       		bne.s	loc_2054
000021EA 5440                       		addq.w	#2,d0
000021EC                            
000021EC                            loc_2054:
000021EC 0C40 0064                  		cmpi.w	#$64,d0
000021F0 6D00                       		blt.s	loc_2062
000021F2 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000021F8 70F4                       		moveq	#-$C,d0
000021FA                            
000021FA                            loc_2062:
000021FA 31C0 F632                  		move.w	d0,($FFFFF632).w
000021FE 7001                       		moveq	#1,d0
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_206A:				; XREF: loc_202A
00002202 5338 F634                  		subq.b	#1,($FFFFF634).w
00002206 6A00                       		bpl.s	loc_20BC
00002208 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 0640 000C                  		addi.w	#$C,d0
00002216 0C40 0030                  		cmpi.w	#$30,d0
0000221A 6500                       		bcs.s	loc_2088
0000221C 7000                       		moveq	#0,d0
0000221E 4E75                       		rts	
00002220                            ; ===========================================================================
00002220                            
00002220                            loc_2088:				; XREF: loc_206A
00002220 31C0 F632                  		move.w	d0,($FFFFF632).w
00002224 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000222A 41F0 0000                  		lea	(a0,d0.w),a0
0000222E 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002232 22D8                       		move.l	(a0)+,(a1)+
00002234 22D8                       		move.l	(a0)+,(a1)+
00002236 3298                       		move.w	(a0)+,(a1)
00002238 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000223C 7000                       		moveq	#0,d0
0000223E 722C                       		moveq	#$2C,d1
00002240                            
00002240                            loc_20A8:
00002240 3400                       		move.w	d0,d2
00002242 0242 001E                  		andi.w	#$1E,d2
00002246 6600                       		bne.s	loc_20B2
00002248 5440                       		addq.w	#2,d0
0000224A                            
0000224A                            loc_20B2:
0000224A 3390 0000                  		move.w	(a0),(a1,d0.w)
0000224E 5440                       		addq.w	#2,d0
00002250 51C9 FFEE                  		dbf	d1,loc_20A8
00002254                            
00002254                            loc_20BC:
00002254 7001                       		moveq	#1,d0
00002256 4E75                       		rts	
00002258                            ; End of function PalCycle_Sega
00002258                            
00002258                            ; ===========================================================================
00002258                            
00002258                            Pal_Sega1:	incbin	Palette\sega1.bin
00002264                            Pal_Sega2:	incbin	Palette\sega2.bin
00002294                            
00002294                            ; ---------------------------------------------------------------------------
00002294                            ; Subroutines to load Palettes
00002294                            ; ---------------------------------------------------------------------------
00002294                            
00002294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002294                            
00002294                            
00002294                            PalLoad1:
00002294 43F9 0000 0000             		lea	(PalPointers).l,a1
0000229A E748                       		lsl.w	#3,d0
0000229C D2C0                       		adda.w	d0,a1
0000229E 2459                       		movea.l	(a1)+,a2
000022A0 3659                       		movea.w	(a1)+,a3
000022A2 D6FC 0080                  		adda.w	#$80,a3
000022A6 3E19                       		move.w	(a1)+,d7
000022A8                            
000022A8                            loc_2110:
000022A8 26DA                       		move.l	(a2)+,(a3)+
000022AA 51CF FFFC                  		dbf	d7,loc_2110
000022AE 4E75                       		rts	
000022B0                            ; End of function PalLoad1
000022B0                            
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PalLoad2:
000022B0 43F9 0000 0000             		lea	(PalPointers).l,a1
000022B6 E748                       		lsl.w	#3,d0
000022B8 D2C0                       		adda.w	d0,a1
000022BA 2459                       		movea.l	(a1)+,a2
000022BC 3659                       		movea.w	(a1)+,a3
000022BE 3E19                       		move.w	(a1)+,d7
000022C0                            
000022C0                            loc_2128:
000022C0 26DA                       		move.l	(a2)+,(a3)+
000022C2 51CF FFFC                  		dbf	d7,loc_2128
000022C6 4E75                       		rts	
000022C8                            ; End of function PalLoad2
000022C8                            
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            ; Underwater Palette loading subroutine
000022C8                            ; ---------------------------------------------------------------------------
000022C8                            
000022C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C8                            
000022C8                            
000022C8                            PalLoad3_Water:
000022C8 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CE E748                       		lsl.w	#3,d0
000022D0 D2C0                       		adda.w	d0,a1
000022D2 2459                       		movea.l	(a1)+,a2
000022D4 3659                       		movea.w	(a1)+,a3
000022D6 96FC 0080                  		suba.w	#$80,a3
000022DA 3E19                       		move.w	(a1)+,d7
000022DC                            
000022DC                            loc_2144:
000022DC 26DA                       		move.l	(a2)+,(a3)+
000022DE 51CF FFFC                  		dbf	d7,loc_2144
000022E2 4E75                       		rts	
000022E4                            ; End of function PalLoad3_Water
000022E4                            
000022E4                            
000022E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E4                            
000022E4                            
000022E4                            PalLoad4_Water:
000022E4 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EA E748                       		lsl.w	#3,d0
000022EC D2C0                       		adda.w	d0,a1
000022EE 2459                       		movea.l	(a1)+,a2
000022F0 3659                       		movea.w	(a1)+,a3
000022F2 96FC 0100                  		suba.w	#$100,a3
000022F6 3E19                       		move.w	(a1)+,d7
000022F8                            
000022F8                            loc_2160:
000022F8 26DA                       		move.l	(a2)+,(a3)+
000022FA 51CF FFFC                  		dbf	d7,loc_2160
000022FE 4E75                       		rts	
00002300                            ; End of function PalLoad4_Water
00002300                            
00002300                            ; ===========================================================================
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Palette pointers
00002300                            ; ---------------------------------------------------------------------------
00002300                            PalPointers:
00002300                            	include "_inc\Palette pointers.asm"
00002300                            ; ---------------------------------------------------------------------------
00002300                            ; Pallet pointers
00002300                            ; ---------------------------------------------------------------------------
00002300 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002304 FB00                       	dc.w $FB00		; RAM address
00002306 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002308 0000 0000                  	dc.l Pal_Title
0000230C FB00                       	dc.w $FB00
0000230E 001F                       	dc.w $1F
00002310 0000 0000                  	dc.l Pal_LevelSel
00002314 FB00                       	dc.w $FB00
00002316 001F                       	dc.w $1F
00002318 0000 0000                  	dc.l Pal_Sonic
0000231C FB00                       	dc.w $FB00
0000231E 0007                       	dc.w 7
00002320 0000 0000                  	dc.l Pal_GHZ
00002324 FB20                       	dc.w $FB20
00002326 0017                       	dc.w $17
00002328 0000 0000                  	dc.l Pal_LZ
0000232C FB20                       	dc.w $FB20
0000232E 0017                       	dc.w $17
00002330 0000 0000                  	dc.l Pal_MZ
00002334 FB20                       	dc.w $FB20
00002336 0017                       	dc.w $17
00002338 0000 0000                  	dc.l Pal_SLZ
0000233C FB20                       	dc.w $FB20
0000233E 0017                       	dc.w $17
00002340 0000 0000                  	dc.l Pal_SYZ
00002344 FB20                       	dc.w $FB20
00002346 0017                       	dc.w $17
00002348 0000 0000                  	dc.l Pal_SBZ1
0000234C FB20                       	dc.w $FB20
0000234E 0017                       	dc.w $17
00002350 0000 0000                  	dc.l Pal_Special
00002354 FB00                       	dc.w $FB00
00002356 001F                       	dc.w $1F
00002358 0000 0000                  	dc.l Pal_LZWater
0000235C FB00                       	dc.w $FB00
0000235E 001F                       	dc.w $1F
00002360 0000 0000                  	dc.l Pal_SBZ3
00002364 FB20                       	dc.w $FB20
00002366 0017                       	dc.w $17
00002368 0000 0000                  	dc.l Pal_SBZ3Water
0000236C FB00                       	dc.w $FB00
0000236E 001F                       	dc.w $1F
00002370 0000 0000                  	dc.l Pal_SBZ2
00002374 FB20                       	dc.w $FB20
00002376 0017                       	dc.w $17
00002378 0000 0000                  	dc.l Pal_LZSonWater
0000237C FB00                       	dc.w $FB00
0000237E 0007                       	dc.w 7
00002380 0000 0000                  	dc.l Pal_SBZ3SonWat
00002384 FB00                       	dc.w $FB00
00002386 0007                       	dc.w 7
00002388 0000 0000                  	dc.l Pal_SpeResult
0000238C FB00                       	dc.w $FB00
0000238E 001F                       	dc.w $1F
00002390 0000 0000                  	dc.l Pal_SpeContinue
00002394 FB00                       	dc.w $FB00
00002396 000F                       	dc.w $F
00002398 0000 0000                  	dc.l Pal_Ending
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Notice
000023A4 FB20                       	dc.w $FB20
000023A6 0017                       	dc.w $17
000023A6 0017                       	dc.w $17
000023A8                            
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            ; Palette data
000023A8                            ; ---------------------------------------------------------------------------
000023A8                            Pal_SegaBG:	incbin	Palette\sega_bg.bin
00002428                            Pal_Title:	incbin	Palette\title.bin
000024A8                            Pal_LevelSel:	incbin	Palette\levelsel.bin
00002528                            Pal_Sonic:	incbin	Palette\sonic.bin
00002548                            Pal_GHZ:	incbin	Palette\ghz.bin
000025A8                            Pal_LZ:		incbin	Palette\lz.bin
00002608                            Pal_LZWater:	incbin	Palette\lz_uw.bin	; LZ underwater Palettes
00002688                            Pal_MZ:		incbin	Palette\mz.bin
000026E8                            Pal_SLZ:	incbin	Palette\slz.bin
00002748                            Pal_SYZ:	incbin	Palette\syz.bin
000027A8                            Pal_SBZ1:	incbin	Palette\sbz_act1.bin	; SBZ act 1 Palettes
00002808                            Pal_SBZ2:	incbin	Palette\sbz_act2.bin	; SBZ act 2 & Final Zone Palettes
00002868                            Pal_Special:	incbin	Palette\special.bin	; special stage Palettes
000028E8                            Pal_SBZ3:	incbin	Palette\sbz_act3.bin	; SBZ act 3 Palettes
00002948                            Pal_SBZ3Water:	incbin	Palette\sbz_a3uw.bin	; SBZ act 3 (underwater) Palettes
000029C8                            Pal_LZSonWater:	incbin	Palette\son_lzuw.bin	; Sonic (underwater in LZ) Palette
000029E8                            Pal_SBZ3SonWat:	incbin	Palette\son_sbzu.bin	; Sonic (underwater in SBZ act 3) Palette
00002A08                            Pal_SpeResult:	incbin	Palette\ssresult.bin	; special stage results screen Palettes
00002A88                            Pal_SpeContinue:incbin	Palette\sscontin.bin	; special stage results screen continue Palette
00002AC8                            Pal_Ending:	incbin	Palette\ending.bin	; ending sequence Palettes
00002B48                            
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B48                            ; ---------------------------------------------------------------------------
00002B48                            
00002B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B48                            
00002B48                            
00002B48                            DelayProgram:				; XREF: PauseGame
00002B48 46FC 2300                  		move	#$2300,sr
00002B4C                            
00002B4C                            loc_29AC:
00002B4C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B50 66FA                       		bne.s	loc_29AC
00002B52 4E75                       		rts	
00002B54                            ; End of function DelayProgram
00002B54                            
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            ; Subroutine to	generate a pseudo-random number	in d0
00002B54                            ; ---------------------------------------------------------------------------
00002B54                            
00002B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B54                            
00002B54                            
00002B54                            RandomNumber:
00002B54 2238 F636                  		move.l	($FFFFF636).w,d1
00002B58 6600                       		bne.s	loc_29C0
00002B5A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B60                            
00002B60                            loc_29C0:
00002B60 2001                       		move.l	d1,d0
00002B62 E581                       		asl.l	#2,d1
00002B64 D280                       		add.l	d0,d1
00002B66 E781                       		asl.l	#3,d1
00002B68 D280                       		add.l	d0,d1
00002B6A 3001                       		move.w	d1,d0
00002B6C 4841                       		swap	d1
00002B6E D041                       		add.w	d1,d0
00002B70 3200                       		move.w	d0,d1
00002B72 4841                       		swap	d1
00002B74 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B78 4E75                       		rts	
00002B7A                            ; End of function RandomNumber
00002B7A                            
00002B7A                            
00002B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B7A                            
00002B7A                            
00002B7A                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B7A 0240 00FF                  		andi.w	#$FF,d0
00002B7E D040                       		add.w	d0,d0
00002B80 0640 0080                  		addi.w	#$80,d0
00002B84 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B88 0440 0080                  		subi.w	#$80,d0
00002B8C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B90 4E75                       		rts	
00002B92                            ; End of function CalcSine
00002B92                            
00002B92                            ; ===========================================================================
00002B92                            
00002B92                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002E12                            
00002E12                            ; ===========================================================================
00002E12 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E16 3200                       		move.w	d0,d1
00002E18 4841                       		swap	d1
00002E1A 7000                       		moveq	#0,d0
00002E1C 3200                       		move.w	d0,d1
00002E1E 7407                       		moveq	#7,d2
00002E20                            
00002E20                            loc_2C80:
00002E20 E599                       		rol.l	#2,d1
00002E22 D040                       		add.w	d0,d0
00002E24 5240                       		addq.w	#1,d0
00002E26 9240                       		sub.w	d0,d1
00002E28 6400                       		bcc.s	loc_2C9A
00002E2A D240                       		add.w	d0,d1
00002E2C 5340                       		subq.w	#1,d0
00002E2E 51CA FFF0                  		dbf	d2,loc_2C80
00002E32 E248                       		lsr.w	#1,d0
00002E34 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E38 4E75                       		rts	
00002E3A                            ; ===========================================================================
00002E3A                            
00002E3A                            loc_2C9A:
00002E3A 5240                       		addq.w	#1,d0
00002E3C 51CA FFE2                  		dbf	d2,loc_2C80
00002E40 E248                       		lsr.w	#1,d0
00002E42 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E46 4E75                       		rts	
00002E48                            
00002E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E48                            
00002E48                            
00002E48                            CalcAngle:
00002E48 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E4C 7600                       		moveq	#0,d3
00002E4E 7800                       		moveq	#0,d4
00002E50 3601                       		move.w	d1,d3
00002E52 3802                       		move.w	d2,d4
00002E54 8843                       		or.w	d3,d4
00002E56 6700                       		beq.s	loc_2D04
00002E58 3802                       		move.w	d2,d4
00002E5A 4A43                       		tst.w	d3
00002E5C 6A00 0000                  		bpl.w	loc_2CC2
00002E60 4443                       		neg.w	d3
00002E62                            
00002E62                            loc_2CC2:
00002E62 4A44                       		tst.w	d4
00002E64 6A00 0000                  		bpl.w	loc_2CCA
00002E68 4444                       		neg.w	d4
00002E6A                            
00002E6A                            loc_2CCA:
00002E6A B843                       		cmp.w	d3,d4
00002E6C 6400 0000                  		bcc.w	loc_2CDC
00002E70 E18C                       		lsl.l	#8,d4
00002E72 88C3                       		divu.w	d3,d4
00002E74 7000                       		moveq	#0,d0
00002E76 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E7A 6000                       		bra.s	loc_2CE6
00002E7C                            ; ===========================================================================
00002E7C                            
00002E7C                            loc_2CDC:				; XREF: CalcAngle
00002E7C E18B                       		lsl.l	#8,d3
00002E7E 86C4                       		divu.w	d4,d3
00002E80 7040                       		moveq	#$40,d0
00002E82 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E86                            
00002E86                            loc_2CE6:
00002E86 4A41                       		tst.w	d1
00002E88 6A00 0000                  		bpl.w	loc_2CF2
00002E8C 4440                       		neg.w	d0
00002E8E 0640 0080                  		addi.w	#$80,d0
00002E92                            
00002E92                            loc_2CF2:
00002E92 4A42                       		tst.w	d2
00002E94 6A00 0000                  		bpl.w	loc_2CFE
00002E98 4440                       		neg.w	d0
00002E9A 0640 0100                  		addi.w	#$100,d0
00002E9E                            
00002E9E                            loc_2CFE:
00002E9E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EA2 4E75                       		rts	
00002EA4                            ; ===========================================================================
00002EA4                            
00002EA4                            loc_2D04:				; XREF: CalcAngle
00002EA4 303C 0040                  		move.w	#$40,d0
00002EA8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002EAC 4E75                       		rts	
00002EAE                            ; End of function CalcAngle
00002EAE                            
00002EAE                            ; ===========================================================================
00002EAE                            
00002EAE                            Angle_Data:	incbin	misc\angles.bin
00002FB0                            
00002FB0                            NoticeScreen: include	"_notice\code.asm"
00002FB0                            
00002FB0                            ;NoticeScreen:				; XREF: GameModeArray
00002FB0 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
00002FB4 4EB8 12CE                      jsr    PlaySound_Special.w      ; play music ID
00002FB8 4EB8 1FE6                      jsr    Pal_FadeFrom.w           ; fade palette out
00002FBC 46FC 2700                      move   #$2700,sr                ; disable interrupts
00002FC0 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00002FC4 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
00002FC8 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
00002FCE 4EB8 15E4                      jsr    ClearPLC.w               ; clear pattern load cues
00002FD2 4EB8 11C0                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
00002FD6 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
00002FDC 41F9 0000 0000                 lea    Map_Notice.l,a0           ; load compressed mappings address
00002FE2 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
00002FE6 4EB8 1724                      jsr    EniDec.w                 ; decompress and dump
00002FEA 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
00002FF0 7227                           moveq  #$28-$01,d1              ; set map box draw width
00002FF2 741D                           moveq  #$1E-$01,d2              ; set map box draw height
00002FF4 6100 E374                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
00002FF8 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
00002FFE 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
00003004 41F9 0000 0000                 lea    Art_Notice.l,a0            ; load compressed art address
0000300A 4EB8 145E                      jsr    NemDec.w                 ; decompress and dump to VDP memory
0000300E 41F9 0000 0000                 lea    Pal_Notice.l,a0         ; load palette address
00003014 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
00003018 700F                           moveq  #$F,d0                   ; set repeat times
0000301A                            
0000301A                            
0000301A                            NoticeScreen_PalLoop:
0000301A 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
0000301C 22D8                           move.l (a0)+,(a1)+              ; ''
0000301E 51C8 FFFA                      dbf    d0,NoticeScreen_PalLoop    ; repeat until done
00003022 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00003026 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
0000302A 3C80                           move.w d0,(a6)                  ; save to VDP
0000302C 4EB8 1F30                      jsr    Pal_FadeTo               ; fade palette in
00003030                            ;	move.b	#$E1,d0
00003030                            ;	bsr.w	PlaySound_Special ; play "Notice"	sound
00003030                            
00003030                            Notice_MainLoop:
00003030 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00003036 4EB8 2B48                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
0000303A 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
0000303E 6B00                           bmi.s  Notice_GotoTitle           ; if so, branch
00003040 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00003046 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
0000304A 66E4                           bne.s  Notice_MainLoop            ; if not, branch
0000304C                            
0000304C                            Notice_GotoTitle:
0000304C 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00003052 4E75                       		rts	
00003054                            ; ---------------------------------------------------------------------------
00003054                            Art_Notice:		incbin	"_notice\Art.bin"		; rename to your needs
0000460C                            			even
0000460C                            Map_Notice:		incbin	"_notice\Map.bin"		; rename to your needs
000046AE 00                         			even
000046AE                            Pal_Notice:		incbin	"_notice\Palette.bin"		; rename to your needs
0000472E                            			even
0000472E                            			even
0000472E                            
0000472E                            ; ===========================================================================
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            ; Sega screen
0000472E                            ; ---------------------------------------------------------------------------
0000472E                            
0000472E                            SegaScreen:				; XREF: GameModeArray
0000472E 103C 00E4                  		move.b	#$E4,d0
00004732 6100 CB9A                  		bsr.w	PlaySound_Special ; stop music
00004736 6100 CEAC                  		bsr.w	ClearPLC
0000473A 6100 D8AA                  		bsr.w	Pal_FadeFrom
0000473E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004744 3CBC 8004                  		move.w	#$8004,(a6)
00004748 3CBC 8230                  		move.w	#$8230,(a6)
0000474C 3CBC 8407                  		move.w	#$8407,(a6)
00004750 3CBC 8700                  		move.w	#$8700,(a6)
00004754 3CBC 8B00                  		move.w	#$8B00,(a6)
00004758 4238 F64E                  		clr.b	($FFFFF64E).w
0000475C 46FC 2700                  		move	#$2700,sr
00004760 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004764 0200 00BF                  		andi.b	#$BF,d0
00004768 33C0 00C0 0004             		move.w	d0,($C00004).l
0000476E 6100 CA50                  		bsr.w	ClearScreen
00004772 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000477C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004782 6100 CCDA                  		bsr.w	NemDec
00004786 43F9 00FF 0000             		lea	($FF0000).l,a1
0000478C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004792 303C 0000                  		move.w	#0,d0
00004796 6100 CF8C                  		bsr.w	EniDec
0000479A 43F9 00FF 0000             		lea	($FF0000).l,a1
000047A0 203C 6510 0003             		move.l	#$65100003,d0
000047A6 7217                       		moveq	#$17,d1
000047A8 7407                       		moveq	#7,d2
000047AA 6100 CBBE                  		bsr.w	ShowVDPGraphics
000047AE 43F9 00FF 0180             		lea	($FF0180).l,a1
000047B4 203C 4000 0003             		move.l	#$40000003,d0
000047BA 7227                       		moveq	#$27,d1
000047BC 741B                       		moveq	#$1B,d2
000047BE 6100 CBAA                  		bsr.w	ShowVDPGraphics
000047C2 7000                       		moveq	#0,d0
000047C4 6100 DAEA                  		bsr.w	PalLoad2	; load Sega logo Palette
000047C8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000047CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000047D4 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000047DA 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000047E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000047E4 0000 0040                  		ori.b	#$40,d0
000047E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000047EE                            
000047EE                            Sega_WaitPalette:
000047EE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000047F4 6100 E352                  		bsr.w	DelayProgram
000047F8 6100 D9A8                  		bsr.w	PalCycle_Sega
000047FC 66F0                       		bne.s	Sega_WaitPalette
000047FE                            
000047FE 103C 00E1                  		move.b	#$E1,d0
00004802 6100 CACA                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00004806 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000480C 6100 E33A                  		bsr.w	DelayProgram
00004810 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004816                            
00004816                            Sega_WaitEnd:
00004816 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000481C 6100 E32A                  		bsr.w	DelayProgram
00004820 4A78 F614                  		tst.w	($FFFFF614).w
00004824 6700                       		beq.s	Sega_GotoTitle
00004826 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000482C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000482E                            
0000482E                            Sega_GotoTitle:
0000482E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00004834                            	;	rts	
00004834                            	;	jmp	Owarisoft
00004834                            ; ===========================================================================
00004834                            
00004834                            ; ---------------------------------------------------------------------------
00004834                            ; Title	screen
00004834                            ; ---------------------------------------------------------------------------
00004834                            
00004834                            TitleScreen:				; XREF: GameModeArray
00004834 103C 00E4                  		move.b	#$E4,d0
00004838 6100 CA94                  		bsr.w	PlaySound_Special ; stop music
0000483C 6100 CDA6                  		bsr.w	ClearPLC
00004840 6100 D7A4                  		bsr.w	Pal_FadeFrom
00004844 46FC 2700                  		move	#$2700,sr
00004848 6100 CA04                  		bsr.w	InitMegaPCM
0000484C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004852 3CBC 8004                  		move.w	#$8004,(a6)
00004856 3CBC 8230                  		move.w	#$8230,(a6)
0000485A 3CBC 8407                  		move.w	#$8407,(a6)
0000485E 3CBC 9001                  		move.w	#$9001,(a6)
00004862 3CBC 9200                  		move.w	#$9200,(a6)
00004866 3CBC 8B03                  		move.w	#$8B03,(a6)
0000486A 3CBC 8720                  		move.w	#$8720,(a6)
0000486E 4238 F64E                  		clr.b	($FFFFF64E).w
00004872 6100 C94C                  		bsr.w	ClearScreen
00004876 43F8 D000                  		lea	($FFFFD000).w,a1
0000487A 7000                       		moveq	#0,d0
0000487C 323C 07FF                  		move.w	#$7FF,d1
00004880                            
00004880                            Title_ClrObjRam:
00004880 22C0                       		move.l	d0,(a1)+
00004882 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00004886                            
00004886 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004890 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00004896 6100 CBC6                  		bsr.w	NemDec
0000489A 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000048A4 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000048AA 6100 CBB2                  		bsr.w	NemDec
000048AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000048B4 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000048BA 303C 0000                  		move.w	#0,d0
000048BE 6100 CE64                  		bsr.w	EniDec
000048C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000048C8 203C 4000 0003             		move.l	#$40000003,d0
000048CE 7227                       		moveq	#$27,d1
000048D0 741B                       		moveq	#$1B,d2
000048D2 6100 CA96                  		bsr.w	ShowVDPGraphics
000048D6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000048DA 7000                       		moveq	#0,d0
000048DC 323C 001F                  		move.w	#$1F,d1
000048E0                            
000048E0                            Title_ClrPalette:
000048E0 22C0                       		move.l	d0,(a1)+
000048E2 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
000048E6                            
000048E6 7003                       		moveq	#3,d0		; load Sonic's Palette
000048E8 6100 D9AA                  		bsr.w	PalLoad1
000048EC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000048F2 4EB9 0000 0000             		jsr	ObjectsLoad
000048F8 4EB9 0000 0000             		jsr	BuildSprites
000048FE 6100 D630                  		bsr.w	Pal_FadeTo
00004902 46FC 2700                  		move	#$2700,sr
00004906 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00004910 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004916 6100 CB46                  		bsr.w	NemDec
0000491A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00004924 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000492A 6100 CB32                  		bsr.w	NemDec
0000492E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00004938 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000493E 6100 CB1E                  		bsr.w	NemDec
00004942 4DF9 00C0 0000             		lea	($C00000).l,a6
00004948 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00004950 4BF9 0000 058E             		lea	(Art_Text).l,a5
00004956 323C 028F                  		move.w	#$28F,d1
0000495A                            
0000495A                            Title_LoadText:
0000495A 3C9D                       		move.w	(a5)+,(a6)
0000495C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00004960                            
00004960 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00004966 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000496C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00004972 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00004978 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000497E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
00004984 6100 0000                  		bsr.w	LevelSizeLoad
00004988 6100 0000                  		bsr.w	DeformBgLayer
0000498C 43F8 B000                  		lea	($FFFFB000).w,a1
00004990 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	TS 16x16 mappings
00004996 303C 0000                  		move.w	#0,d0
0000499A 6100 CD88                  		bsr.w	EniDec
0000499E 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
000049A4 43F9 00FF 0000             		lea	($FF0000).l,a1
000049AA 6100 CEF6                  		bsr.w	KosDec
000049AE 6100 0000                  		bsr.w	LevelLayoutLoad
000049B2 6100 D632                  		bsr.w	Pal_FadeFrom
000049B6 46FC 2700                  		move	#$2700,sr
000049BA 6100 C804                  		bsr.w	ClearScreen
000049BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000049C4 4DF9 00C0 0000             		lea	($C00000).l,a6
000049CA 47F8 F708                  		lea	($FFFFF708).w,a3
000049CE 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000049D2 343C 6000                  		move.w	#$6000,d2
000049D6 6100 0000                  		bsr.w	LoadTilesFromStart2
000049DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000049E0 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000049E6 303C 0000                  		move.w	#0,d0
000049EA 6100 CD38                  		bsr.w	EniDec
000049EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000049F4 203C 4206 0003             		move.l	#$42060003,d0
000049FA 7221                       		moveq	#$21,d1
000049FC 7415                       		moveq	#$15,d2
000049FE 6100 C96A                  		bsr.w	ShowVDPGraphics
00004A02 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00004A0C 41F9 0000 0000             		lea	(Nem_TIT_1st).l,a0 ; load TZ patterns
00004A12 6100 CA4A                  		bsr.w	NemDec
00004A16 7001                       		moveq	#1,d0		; load title screen Palette
00004A18 6100 D87A                  		bsr.w	PalLoad1
00004A1C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00004A20 6100 C8AC                  		bsr.w	PlaySound_Special
00004A24 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00004A2A 31FC 0654 F614             		move.w	#$654,($FFFFF614).w ; run title	screen for $178	frames
00004A30 43F8 D080                  		lea	($FFFFD080).w,a1
00004A34 7000                       		moveq	#0,d0
00004A36 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00004A3A                            
00004A3A                            Title_ClrObjRam2:
00004A3A 22C0                       		move.l	d0,(a1)+
00004A3C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00004A40                            
00004A40 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A46                            
00004A46 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00004A4C 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00004A52 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00004A58 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00004A5E 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00004A64 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00004A6A 4EB9 0000 0000             		jsr	ObjectsLoad
00004A70 6100 0000                  		bsr.w	DeformBgLayer
00004A74 4EB9 0000 0000             		jsr	BuildSprites
00004A7A 7000                       		moveq	#0,d0
00004A7C 6100 CB3A                  		bsr.w	LoadPLC2
00004A80 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004A86 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00004A8C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A90 0000 0040                  		ori.b	#$40,d0
00004A94 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A9A 6100 D494                  		bsr.w	Pal_FadeTo
00004A9E                            
00004A9E                            loc_317C:
00004A9E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004AA4 6100 E0A2                  		bsr.w	DelayProgram
00004AA8 4EB9 0000 0000             		jsr	ObjectsLoad
00004AAE 6100 0000                  		bsr.w	DeformBgLayer
00004AB2 4EB9 0000 0000             		jsr	BuildSprites
00004AB8 6100 D026                  		bsr.w	PalCycle_Title
00004ABC 6100 CB34                  		bsr.w	RunPLC_RAM
00004AC0 3038 D008                  		move.w	($FFFFD008).w,d0
00004AC4 5440                       		addq.w	#2,d0
00004AC6 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00004ACA 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00004ACE 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00004AD0 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
00004AD6 4E75                       		rts	
00004AD8                            ; ===========================================================================
00004AD8                            
00004AD8                            Title_ChkRegion:
00004AD8 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00004ADC 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00004ADE 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00004AE4 6000                       		bra.s	Title_EnterCheat
00004AE6                            ; ===========================================================================
00004AE6                            
00004AE6                            Title_RegionJ:				; XREF: Title_ChkRegion
00004AE6 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00004AEC                            
00004AEC                            Title_EnterCheat:			; XREF: Title_ChkRegion
00004AEC 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00004AF0 D0C0                       		adda.w	d0,a0
00004AF2 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00004AF6 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00004AFA B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004AFC 6600                       		bne.s	loc_3210	; if not, branch
00004AFE 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00004B02 4A00                       		tst.b	d0
00004B04 6600                       		bne.s	Title_CountC
00004B06 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00004B0A 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00004B0E E249                       		lsr.w	#1,d1
00004B10 0241 0003                  		andi.w	#3,d1
00004B14 6700                       		beq.s	Title_PlayRing
00004B16 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00004B1A 6A00                       		bpl.s	Title_PlayRing
00004B1C 7201                       		moveq	#1,d1
00004B1E 1181 1001                  		move.b	d1,1(a0,d1.w)
00004B22                            
00004B22                            Title_PlayRing:
00004B22 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004B28 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
00004B30 103C 00BF                  		move.b	#$BF,d0		; play continue sound when code is entered
00004B34 6100 C798                  		bsr.w	PlaySound_Special
00004B38 6000                       		bra.s	Title_CountC
00004B3A                            ; ===========================================================================
00004B3A                            
00004B3A                            loc_3210:				; XREF: Title_EnterCheat
00004B3A 4A00                       		tst.b	d0
00004B3C 6700                       		beq.s	Title_CountC
00004B3E 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00004B44 6700                       		beq.s	Title_CountC
00004B46 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00004B4C                            
00004B4C                            Title_CountC:
00004B4C 1038 F605                  		move.b	($FFFFF605).w,d0
00004B50 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00004B54 6700                       		beq.s	loc_3230	; if not, branch
00004B56 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00004B5A                            
00004B5A                            loc_3230:
00004B5A 4A78 F614                  		tst.w	($FFFFF614).w
00004B5E 6700 0000                  		beq.w	Demo
00004B62 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00004B68 6700 FF34                  		beq.w	loc_317C	; if not, branch
00004B6C                            
00004B6C                            Title_ChkLevSel:
00004B6C 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00004B70 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B74 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00004B7A 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004B7E 7000                       		moveq	#$00,d0				; clear d0
00004B80 11C0 FF32                  		move.b	d0,($FFFFFF32).w		; clear background strip 1 draw flags
00004B84 11C0 FF34                  		move.b	d0,($FFFFFF34).w		; clear background strip 2 draw flags
00004B88 11C0 FF30                  		move.b	d0,($FFFFFF30).w		; clear foreground strip draw flag
00004B8C 7002                       		moveq	#2,d0
00004B8E 6100 D720                  		bsr.w	PalLoad2	; load level select Palette
00004B92 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004B96 7000                       		moveq	#0,d0
00004B98 323C 00DF                  		move.w	#$DF,d1
00004B9C                            
00004B9C                            Title_ClrScroll:
00004B9C 22C0                       		move.l	d0,(a1)+
00004B9E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00004BA2                            
00004BA2 21C0 F616                  		move.l	d0,($FFFFF616).w
00004BA6 46FC 2700                  		move	#$2700,sr
00004BAA 4DF9 00C0 0000             		lea	($C00000).l,a6
00004BB0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00004BBA 323C 03FF                  		move.w	#$3FF,d1
00004BBE                            
00004BBE                            Title_ClrVram:
00004BBE 2C80                       		move.l	d0,(a6)
00004BC0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00004BC4                            
00004BC4 6100 0000                  		bsr.w	LevSelTextLoad
00004BC8                            
00004BC8                            ; ---------------------------------------------------------------------------
00004BC8                            ; Level	Select
00004BC8                            ; ---------------------------------------------------------------------------
00004BC8                            
00004BC8                            LevelSelect:
00004BC8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004BCE 6100 DF78                  		bsr.w	DelayProgram
00004BD2 6100 0000                  		bsr.w	LevSelControls
00004BD6 6100 CA1A                  		bsr.w	RunPLC_RAM
00004BDA 4AB8 F680                  		tst.l	($FFFFF680).w
00004BDE 66E8                       		bne.s	LevelSelect
00004BE0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004BE6 67E0                       		beq.s	LevelSelect	; if not, branch
00004BE8 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004BEC 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004BF0 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004BF2 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004BF6 0640 0080                  		addi.w	#$80,d0
00004BFA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00004BFE 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00004C00 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004C04 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004C06 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004C0A 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004C0C                            
00004C0C                            LevSel_NoCheat:
00004C0C 0C40 0097                  		cmpi.w	#$97,d0		; is sound $80-$94 being played?
00004C10 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00004C12 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00004C16 65B0                       		bcs.s	LevelSelect	; if yes, branch
00004C18                            
00004C18                            LevSel_PlaySnd:
00004C18 6100 C6B4                  		bsr.w	PlaySound_Special
00004C1C 60AA                       		bra.s	LevelSelect
00004C1E                            ; ===========================================================================
00004C1E                            
00004C1E                            LevSel_Ending:				; XREF: LevelSelect
00004C1E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00004C24 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00004C2A 4E75                       		rts	
00004C2C                            ; ===========================================================================
00004C2C                            
00004C2C                            LevSel_Credits:				; XREF: LevelSelect
00004C2C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00004C32 103C 0091                  		move.b	#$91,d0
00004C36 6100 C696                  		bsr.w	PlaySound_Special ; play credits music
00004C3A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00004C40 4E75                       		rts	
00004C42                            ; ===========================================================================
00004C42                            
00004C42                            LevSel_Level_SS:			; XREF: LevelSelect
00004C42 D040                       		add.w	d0,d0
00004C44 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00004C48 6B00 FF7E                  		bmi.w	LevelSelect
00004C4C 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00004C50 6600                       		bne.s	LevSel_Level	; if not, branch
00004C52 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004C58 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00004C5C 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C62 7000                       		moveq	#0,d0
00004C64 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C68 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C6C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C70 4E75                       		rts	
00004C72                            ; ===========================================================================
00004C72                            
00004C72                            LevSel_Level:				; XREF: LevSel_Level_SS
00004C72 0240 3FFF                  		andi.w	#$3FFF,d0
00004C76 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00004C7A                            
00004C7A                            PlayLevel:				; XREF: ROM:00003246j ...
00004C7A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C80 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004C86 7000                       		moveq	#0,d0
00004C88 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00004C8C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004C90 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004C94 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004C98 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00004C9C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00004CA0 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00004CA4 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00004CA8 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00004CAC 103C 00E0                  		move.b	#$E0,d0
00004CB0 6100 C61C                  		bsr.w	PlaySound_Special ; fade out music
00004CB4 4E75                       		rts	
00004CB6                            ; ===========================================================================
00004CB6                            ; ---------------------------------------------------------------------------
00004CB6                            ; Level	select - level pointers
00004CB6                            ; ---------------------------------------------------------------------------
00004CB6                            LSelectPointers:
00004CB6                            		incbin	misc\ls_point.bin
00004CE0                            		even
00004CE0                            ; ---------------------------------------------------------------------------
00004CE0                            ; Level	select codes
00004CE0                            ; ---------------------------------------------------------------------------
00004CE0                            LevelSelectCode_J:
00004CE0                            		incbin	misc\ls_jcode.bin
00004CE6                            		even
00004CE6                            
00004CE6                            LevelSelectCode_US:
00004CE6                            		incbin	misc\ls_ucode.bin
00004CEC                            		even
00004CEC                            ; ===========================================================================
00004CEC                            
00004CEC                            ; ---------------------------------------------------------------------------
00004CEC                            ; Demo mode
00004CEC                            ; ---------------------------------------------------------------------------
00004CEC                            
00004CEC                            Demo:					; XREF: TitleScreen
00004CEC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00004CF2                            
00004CF2                            loc_33B6:				; XREF: loc_33E4
00004CF2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004CF8 6100 DE4E                  		bsr.w	DelayProgram
00004CFC 6100 0000                  		bsr.w	DeformBgLayer
00004D00 6100 CDBE                  		bsr.w	PalCycle_Load
00004D04 6100 C8EC                  		bsr.w	RunPLC_RAM
00004D08 3038 D008                  		move.w	($FFFFD008).w,d0
00004D0C 5440                       		addq.w	#2,d0
00004D0E 31C0 D008                  		move.w	d0,($FFFFD008).w
00004D12 0C40 1C00                  		cmpi.w	#$1C00,d0
00004D16 6500                       		bcs.s	loc_33E4
00004D18 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00004D1E 4E75                       		rts	
00004D20                            ; ===========================================================================
00004D20                            
00004D20                            loc_33E4:				; XREF: Demo
00004D20 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00004D26 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
00004D2A 4A78 F614                  		tst.w	($FFFFF614).w
00004D2E 6600 FFC2                  		bne.w	loc_33B6
00004D32 103C 00E0                  		move.b	#$E0,d0
00004D36 6100 C596                  		bsr.w	PlaySound_Special ; fade out music
00004D3A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004D3E 0240 0007                  		andi.w	#7,d0
00004D42 D040                       		add.w	d0,d0
00004D44 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004D48 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004D4C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004D50 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00004D56 6500                       		bcs.s	loc_3422	; if yes, branch
00004D58 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004D5E                            
00004D5E                            loc_3422:
00004D5E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00004D64 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00004D6A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004D6E 6600                       		bne.s	Demo_Level	; if not, branch
00004D70 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00004D76 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004D7A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004D7E                            
00004D7E                            Demo_Level:
00004D7E 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
00004D84 7000                       		moveq	#0,d0
00004D86 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004D8A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004D8E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004D92 4E75                       		rts	
00004D94                            ; ===========================================================================
00004D94                            ; ---------------------------------------------------------------------------
00004D94                            ; Levels used in demos
00004D94                            ; ---------------------------------------------------------------------------
00004D94                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004D9C                            		even
00004D9C                            
00004D9C                            ; ---------------------------------------------------------------------------
00004D9C                            ; Subroutine to	change what you're selecting in the level select
00004D9C                            ; ---------------------------------------------------------------------------
00004D9C                            
00004D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D9C                            
00004D9C                            
00004D9C                            LevSelControls:				; XREF: LevelSelect
00004D9C 1238 F605                  		move.b	($FFFFF605).w,d1
00004DA0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004DA4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004DA6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004DAA 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004DAC                            
00004DAC                            LevSel_UpDown:
00004DAC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004DB2 1238 F604                  		move.b	($FFFFF604).w,d1
00004DB6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004DBA 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004DBC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004DC0 0801 0000                  		btst	#0,d1		; is up	pressed?
00004DC4 6700                       		beq.s	LevSel_Down	; if not, branch
00004DC6 5340                       		subq.w	#1,d0		; move up 1 selection
00004DC8 6400                       		bcc.s	LevSel_Down
00004DCA 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004DCC                            
00004DCC                            LevSel_Down:
00004DCC 0801 0001                  		btst	#1,d1		; is down pressed?
00004DD0 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004DD2 5240                       		addq.w	#1,d0		; move down 1 selection
00004DD4 0C40 0015                  		cmpi.w	#$15,d0
00004DD8 6500                       		bcs.s	LevSel_Refresh
00004DDA 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004DDC                            
00004DDC                            LevSel_Refresh:
00004DDC 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00004DE0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004DE4 4E75                       		rts	
00004DE6                            ; ===========================================================================
00004DE6                            
00004DE6                            LevSel_SndTest:				; XREF: LevSelControls
00004DE6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00004DEC 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004DEE 1238 F605                  		move.b	($FFFFF605).w,d1
00004DF2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00004DF6 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004DF8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004DFC 0801 0002                  		btst	#2,d1		; is left pressed?
00004E00 6700                       		beq.s	LevSel_Right	; if not, branch
00004E02 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004E04 6400                       		bcc.s	LevSel_Right
00004E06 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004E08                            
00004E08                            LevSel_Right:
00004E08 0801 0003                  		btst	#3,d1		; is right pressed?
00004E0C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004E0E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004E10 0C40 0050                  		cmpi.w	#$50,d0
00004E14 6500                       		bcs.s	LevSel_Refresh2
00004E16 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004E18                            
00004E18                            LevSel_Refresh2:
00004E18 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00004E1C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004E20                            
00004E20                            LevSel_NoMove:
00004E20 4E75                       		rts	
00004E22                            ; End of function LevSelControls
00004E22                            
00004E22                            ; ---------------------------------------------------------------------------
00004E22                            ; Subroutine to load level select text
00004E22                            ; ---------------------------------------------------------------------------
00004E22                            
00004E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E22                            
00004E22                            
00004E22                            LevSelTextLoad:				; XREF: TitleScreen
00004E22 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E28 4DF9 00C0 0000             		lea	($C00000).l,a6
00004E2E 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004E34 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004E38 7214                       		moveq	#$14,d1		; number of lines of text
00004E3A                            
00004E3A                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004E3A 2D44 0004                  		move.l	d4,4(a6)
00004E3E 6100 0000                  		bsr.w	LevSel_ChgLine
00004E42 0684 0080 0000             		addi.l	#$800000,d4
00004E48 51C9 FFF0                  		dbf	d1,loc_34FE
00004E4C 7000                       		moveq	#0,d0
00004E4E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004E52 3200                       		move.w	d0,d1
00004E54 283C 6210 0003             		move.l	#$62100003,d4
00004E5A EF48                       		lsl.w	#7,d0
00004E5C 4840                       		swap	d0
00004E5E D880                       		add.l	d0,d4
00004E60 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004E66 E749                       		lsl.w	#3,d1
00004E68 3001                       		move.w	d1,d0
00004E6A D241                       		add.w	d1,d1
00004E6C D240                       		add.w	d0,d1
00004E6E D2C1                       		adda.w	d1,a1
00004E70 363C C680                  		move.w	#$C680,d3
00004E74 2D44 0004                  		move.l	d4,4(a6)
00004E78 6100 0000                  		bsr.w	LevSel_ChgLine
00004E7C 363C E680                  		move.w	#$E680,d3
00004E80 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004E86 6600                       		bne.s	loc_3550
00004E88 363C C680                  		move.w	#$C680,d3
00004E8C                            
00004E8C                            loc_3550:
00004E8C 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004E96 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004E9A 0640 0080                  		addi.w	#$80,d0
00004E9E 1400                       		move.b	d0,d2
00004EA0 E808                       		lsr.b	#4,d0
00004EA2 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EA6 1002                       		move.b	d2,d0
00004EA8 6100 0000                  		bsr.w	LevSel_ChgSnd
00004EAC 4E75                       		rts	
00004EAE                            ; End of function LevSelTextLoad
00004EAE                            
00004EAE                            
00004EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EAE                            
00004EAE                            
00004EAE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004EAE 0240 000F                  		andi.w	#$F,d0
00004EB2 0C00 000A                  		cmpi.b	#$A,d0
00004EB6 6500                       		bcs.s	loc_3580
00004EB8 5E00                       		addi.b	#7,d0
00004EBA                            
00004EBA                            loc_3580:
00004EBA D043                       		add.w	d3,d0
00004EBC 3C80                       		move.w	d0,(a6)
00004EBE 4E75                       		rts	
00004EC0                            ; End of function LevSel_ChgSnd
00004EC0                            
00004EC0                            
00004EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EC0                            
00004EC0                            
00004EC0                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004EC0 7417                       		moveq	#$17,d2		; number of characters per line
00004EC2                            
00004EC2                            loc_3588:
00004EC2 7000                       		moveq	#0,d0
00004EC4 1019                       		move.b	(a1)+,d0
00004EC6 6A00                       		bpl.s	loc_3598
00004EC8 3CBC 0000                  		move.w	#0,(a6)
00004ECC 51CA FFF4                  		dbf	d2,loc_3588
00004ED0 4E75                       		rts	
00004ED2                            ; ===========================================================================
00004ED2                            
00004ED2                            loc_3598:				; XREF: LevSel_ChgLine
00004ED2 D043                       		add.w	d3,d0
00004ED4 3C80                       		move.w	d0,(a6)
00004ED6 51CA FFEA                  		dbf	d2,loc_3588
00004EDA 4E75                       		rts	
00004EDC                            ; End of function LevSel_ChgLine
00004EDC                            
00004EDC                            ; ===========================================================================
00004EDC                            ; ---------------------------------------------------------------------------
00004EDC                            ; Level	select menu text
00004EDC                            ; ---------------------------------------------------------------------------
00004EDC                            LevelMenuText:	incbin	misc\menutext.bin
000050D4                            		even
000050D4                            ; ---------------------------------------------------------------------------
000050D4                            ; Music	playlist
000050D4                            ; ---------------------------------------------------------------------------
000050D4                            MusicList_Levels:
000050D4 8383 8383                  		dc.b $83, $83, $83, $83
000050D8 8282 8286                  		dc.b $82, $82, $82, $86
000050DC 8197 8197                  		dc.b $81, $97, $81, $97
000050E0 8484 8484                  		dc.b $84, $84, $84, $84
000050E4 8585 8585                  		dc.b $85, $85, $85, $85
000050E8 8686 8D86                  		dc.b $86, $86, $8D, $86
000050EC                            		even
000050EC                            MusicList_SpecialStages:
000050EC 8989 8989 8989             		dc.b $89, $89, $89, $89, $89, $89
000050F2                            		even
000050F2                            MusicList_Credits:
000050F2 9191                       		dc.b $91, $91
000050F4                            		even
000050F4                            MusicList_Endings:
000050F4 8B8B                       		dc.b $8B, $8B
000050F6                            		even
000050F6                            MusicList_Bosses:
000050F6 8C8C 8C8C 8C8C             		dc.b $8C, $8C, $8C, $8C, $8C, $8C
000050FC                            		even
000050FC                            ; ===========================================================================
000050FC                            
000050FC                            ; ---------------------------------------------------------------------------
000050FC                            ; Level
000050FC                            ; ---------------------------------------------------------------------------
000050FC                            
000050FC                            Level:					; XREF: GameModeArray
000050FC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005102 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005106 6B00                       		bmi.s	loc_37B6
00005108 103C 00E0                  		move.b	#$E0,d0
0000510C 6100 C1C0                  		bsr.w	PlaySound_Special ; fade out music
00005110                            
00005110                            loc_37B6:
00005110 6100 C4D2                  		bsr.w	ClearPLC
00005114 6100 CED0                  		bsr.w	Pal_FadeFrom
00005118 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000511C 6B00                       		bmi.s	Level_ClrRam
0000511E 46FC 2700                  		move	#$2700,sr
00005122 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000512C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005132 6100 C32A                  		bsr.w	NemDec
00005136 46FC 2300                  		move	#$2300,sr
0000513A 7000                       		moveq	#0,d0
0000513C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005140 E948                       		lsl.w	#4,d0
00005142 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00005148 45F2 0000                  		lea	(a2,d0.w),a2
0000514C 7000                       		moveq	#0,d0
0000514E 1012                       		move.b	(a2),d0
00005150 6700                       		beq.s	loc_37FC
00005152 6100 C432                  		bsr.w	LoadPLC		; load level patterns
00005156                            
00005156                            loc_37FC:
00005156 7001                       		moveq	#1,d0
00005158 6100 C42C                  		bsr.w	LoadPLC		; load standard	patterns
0000515C                            
0000515C                            Level_ClrRam:
0000515C 43F8 D000                  		lea	($FFFFD000).w,a1
00005160 7000                       		moveq	#0,d0
00005162 323C 07FF                  		move.w	#$7FF,d1
00005166                            
00005166                            Level_ClrObjRam:
00005166 22C0                       		move.l	d0,(a1)+
00005168 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000516C                            
0000516C 43F8 F628                  		lea	($FFFFF628).w,a1
00005170 7000                       		moveq	#0,d0
00005172 323C 0015                  		move.w	#$15,d1
00005176                            
00005176                            Level_ClrVars:
00005176 22C0                       		move.l	d0,(a1)+
00005178 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000517C                            
0000517C 43F8 F700                  		lea	($FFFFF700).w,a1
00005180 7000                       		moveq	#0,d0
00005182 323C 003F                  		move.w	#$3F,d1
00005186                            
00005186                            Level_ClrVars2:
00005186 22C0                       		move.l	d0,(a1)+
00005188 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000518C                            
0000518C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005190 7000                       		moveq	#0,d0
00005192 323C 0047                  		move.w	#$47,d1
00005196                            
00005196                            Level_ClrVars3:
00005196 22C0                       		move.l	d0,(a1)+
00005198 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000519C                            
0000519C 46FC 2700                  		move	#$2700,sr
000051A0 6100 C01E                  		bsr.w	ClearScreen
000051A4 4DF9 00C0 0004             		lea	($C00004).l,a6
000051AA 3CBC 8B03                  		move.w	#$8B03,(a6)
000051AE 3CBC 8230                  		move.w	#$8230,(a6)
000051B2 3CBC 8407                  		move.w	#$8407,(a6)
000051B6 3CBC 857C                  		move.w	#$857C,(a6)
000051BA 3CBC 9001                  		move.w	#$9001,(a6)
000051BE 3CBC 8004                  		move.w	#$8004,(a6)
000051C2 3CBC 8720                  		move.w	#$8720,(a6)
000051C6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051CC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051D0                            		
000051D0 4278 C800                  		clr.w	($FFFFC800).w
000051D4 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000051DC                            		
000051DC 11FC 0000 FFBC             		move.b	#0,($FFFFFFBC).w				; Clear sonic drowned flag
000051E2                            		
000051E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000051E8 6600                       		bne.s	Level_LoadPal	; if not, branch
000051EA 3CBC 8014                  		move.w	#$8014,(a6)
000051EE 7000                       		moveq	#0,d0
000051F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000051F4 D040                       		add.w	d0,d0
000051F6 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000051FC 3031 0000                  		move.w	(a1,d0.w),d0
00005200 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00005204 31C0 F648                  		move.w	d0,($FFFFF648).w
00005208 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000520C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00005210 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00005214 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000521A                            
0000521A                            Level_LoadPal:
0000521A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005220 46FC 2300                  		move	#$2300,sr
00005224 7003                       		moveq	#3,d0
00005226 6100 D088                  		bsr.w	PalLoad2	; load Sonic's Palette line
0000522A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005230 6600                       		bne.s	Level_GetBgm	; if not, branch
00005232 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
00005234 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000523A 6600                       		bne.s	Level_WaterPal	; if not, branch
0000523C 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
0000523E                            
0000523E                            Level_WaterPal:
0000523E 6100 D088                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
00005242 4A38 FE30                  		tst.b	($FFFFFE30).w
00005246 6700                       		beq.s	Level_GetBgm
00005248 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000524E                            
0000524E                            Level_GetBgm:
0000524E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005252 6B00 0000                  		bmi.w	loc_3946
00005256                            		
00005256 7000                       		moveq	#0,d0
00005258 3238 FE10                  		move.w	($FFFFFE10).w,d1
0000525C E419                       		ror.b	#2,d1
0000525E EC49                       		lsr.w	#6,d1
00005260 43F9 0000 50D4             		lea	(MusicList_Levels).l,a1
00005266 1031 1000                  		move.b	(a1,d1.w),d0		; get d0-th entry from the playlist
0000526A 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
0000526E 4EB9 0000 0000             		jsr	CtrlLevelMusic
00005274                            		
00005274 11FC 0034 D080             		move.b	#$34,($FFFFD080).w 	; load title	card object
0000527A                            
0000527A                            Level_TtlCard:
0000527A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005280 6100 D8C6                  		bsr.w	DelayProgram
00005284 4EB9 0000 0000             		jsr	ObjectsLoad
0000528A 4EB9 0000 0000             		jsr	BuildSprites
00005290 6100 C360                  		bsr.w	RunPLC_RAM
00005294 3038 D108                  		move.w	($FFFFD108).w,d0
00005298 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000529C 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000529E 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000052A2 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000052A4 4EB9 0000 0000             		jsr	Hud_Base
000052AA                            
000052AA                            loc_3946:
000052AA 7003                       		moveq	#3,d0
000052AC 6100 CFE6                  		bsr.w	PalLoad1	; load Sonic's Palette line
000052B0 6100 0000                  		bsr.w	LevelSizeLoad
000052B4 6100 0000                  		bsr.w	DeformBgLayer
000052B8 08F8 0002 F754             		bset	#2,($FFFFF754).w
000052BE 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
000052C2 6100 0000                  		bsr.w	LoadTilesFromStart
000052C6 4EB9 0000 0000             		jsr	FloorLog_Unk
000052CC 6100 0000                  		bsr.w	ColIndexLoad
000052D0 6100 0000                  		bsr.w	LZWaterEffects
000052D4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000052DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000052DE 6B00                       		bmi.s	Level_ChkDebug
000052E0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000052E6                            
000052E6                            Level_ChkDebug:
000052E6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000052EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000052EC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000052F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000052F4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000052FA                            
000052FA                            Level_ChkWater:
000052FA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00005300 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00005306 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000530C 6600                       		bne.s	Level_LoadObj	; if not, branch
0000530E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00005314 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000531A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00005320 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00005326                            
00005326                            Level_LoadObj:
00005326 4EB9 0000 0000             		jsr	ObjPosLoad
0000532C 4EB9 0000 0000             		jsr	ObjectsLoad
00005332 4EB9 0000 0000             		jsr	BuildSprites
00005338 7000                       		moveq	#0,d0
0000533A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000533E 6600                       		bne.s	loc_39E8	; if yes, branch
00005340 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005344 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005348 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000534C                            
0000534C                            loc_39E8:
0000534C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00005350 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00005354 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00005358 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000535C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005360 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005364 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005368 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000536C 6100 0000                  		bsr.w	OscillateNumInit
00005370 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005376 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000537C 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00005382 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005388 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000538E 7000                       		moveq	#0,d0
00005390 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005394 E548                       		lsl.w	#2,d0
00005396 2271 0000                  		movea.l	(a1,d0.w),a1
0000539A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000539E 6A00                       		bpl.s	Level_Demo	; if yes, branch
000053A0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000053A6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000053AA 5340                       		subq.w	#1,d0
000053AC E548                       		lsl.w	#2,d0
000053AE 2271 0000                  		movea.l	(a1,d0.w),a1
000053B2                            
000053B2                            Level_Demo:
000053B2 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000053B8 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000053BC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000053C2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000053C6 6A00                       		bpl.s	Level_ChkWaterPal
000053C8 31FC 021C F614             		move.w	#540,($FFFFF614).w
000053CE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000053D4 6600                       		bne.s	Level_ChkWaterPal
000053D6 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000053DC                            
000053DC                            Level_ChkWaterPal:
000053DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000053E2 6600                       		bne.s	Level_Delay	; if not, branch
000053E4 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
000053E6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000053EC 6600                       		bne.s	Level_WaterPal2	; if not, branch
000053EE 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
000053F0                            
000053F0                            Level_WaterPal2:
000053F0 6100 CEF2                  		bsr.w	PalLoad4_Water
000053F4                            
000053F4                            Level_Delay:
000053F4 323C 0003                  		move.w	#3,d1
000053F8                            
000053F8                            Level_DelayLoop:
000053F8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000053FE 6100 D748                  		bsr.w	DelayProgram
00005402 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00005406                            
00005406 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000540C 6100 CB28                  		bsr.w	Pal_FadeTo2
00005410 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005414 6B00                       		bmi.s	Level_ClrCardArt
00005416 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000541A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000541E 5838 D124                  		addq.b	#4,($FFFFD124).w
00005422 5838 D164                  		addq.b	#4,($FFFFD164).w
00005426 6000                       		bra.s	Level_StartGame
00005428                            ; ===========================================================================
00005428                            
00005428                            Level_ClrCardArt:
00005428 7002                       		moveq	#2,d0
0000542A 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
00005430 7000                       		moveq	#0,d0
00005432 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005436 0640 0015                  		addi.w	#$15,d0
0000543A 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00005440                            
00005440                            Level_StartGame:
00005440 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00005446                            
00005446                            ; ---------------------------------------------------------------------------
00005446                            ; Main level loop (when	all title card and loading sequences are finished)
00005446                            ; ---------------------------------------------------------------------------
00005446                            
00005446                            Level_MainLoop:
00005446 6100 BEAA                  		bsr.w	PauseGame
0000544A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005450 6100 D6F6                  		bsr.w	DelayProgram
00005454 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00005458 6100 0000                  		bsr.w	MoveSonicInDemo
0000545C 6100 0000                  		bsr.w	LZWaterEffects
00005460 4EB9 0000 0000             		jsr	ObjectsLoad
00005466 4A78 FE08                  		tst.w	($FFFFFE08).w
0000546A 6600                       		bne.s	loc_3B10
0000546C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005472 6400                       		bcc.s	loc_3B14
00005474                            
00005474                            loc_3B10:
00005474 6100 0000                  		bsr.w	DeformBgLayer
00005478                            
00005478                            loc_3B14:
00005478 4EB9 0000 0000             		jsr	BuildSprites
0000547E 4EB9 0000 0000             		jsr	ObjPosLoad
00005484 6100 C63A                  		bsr.w	PalCycle_Load
00005488 6100 C168                  		bsr.w	RunPLC_RAM
0000548C 6100 0000                  		bsr.w	OscillateNumDo
00005490 6100 0000                  		bsr.w	ChangeRingFrame
00005494 6100 0000                  		bsr.w	SignpostArtLoad
00005498 4EB9 0000 0000             		jsr	CtrlLevelMusic
0000549E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054A4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000054A6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000054AA 6600 FC50                  		bne.w	Level		; if yes, branch
000054AE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000054B4 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000054B8 4E75                       		rts	
000054BA                            ; ===========================================================================
000054BA                            
000054BA                            Level_ChkDemo:				; XREF: Level_MainLoop
000054BA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054BE 6600                       		bne.s	Level_EndDemo	; if yes, branch
000054C0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054C4 6700                       		beq.s	Level_EndDemo	; if not, branch
000054C6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000054CC 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000054D0 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054D6 4E75                       		rts	
000054D8                            ; ===========================================================================
000054D8                            
000054D8                            Level_EndDemo:				; XREF: Level_ChkDemo
000054D8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000054DE 6600                       		bne.s	loc_3B88	; if not, branch
000054E0 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000054E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054EA 6A00                       		bpl.s	loc_3B88	; if yes, branch
000054EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000054F2                            
000054F2                            loc_3B88:
000054F2 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000054F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000054FE 4278 F794                  		clr.w	($FFFFF794).w
00005502                            
00005502                            loc_3B98:
00005502 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00005508 6100 D63E                  		bsr.w	DelayProgram
0000550C 6100 0000                  		bsr.w	MoveSonicInDemo
00005510 4EB9 0000 0000             		jsr	ObjectsLoad
00005516 4EB9 0000 0000             		jsr	BuildSprites
0000551C 4EB9 0000 0000             		jsr	ObjPosLoad
00005522 5378 F794                  		subq.w	#1,($FFFFF794).w
00005526 6A00                       		bpl.s	loc_3BC8
00005528 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000552E 6100 CADC                  		bsr.w	Pal_FadeOut
00005532                            
00005532                            loc_3BC8:
00005532 4A78 F614                  		tst.w	($FFFFF614).w
00005536 66CA                       		bne.s	loc_3B98
00005538 4E75                       		rts	
0000553A                            ; ===========================================================================
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            LZWaterEffects:				; XREF: Level
0000553A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00005540 6600                       		bne.s	locret_3C28	; if not, branch
00005542 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005548 6400                       		bcc.s	LZMoveWater
0000554A 6100 0000                  		bsr.w	LZWindTunnels
0000554E 6100 0000                  		bsr.w	LZWaterSlides
00005552 6100 0000                  		bsr.w	LZDynamicWater
00005556                            
00005556                            LZMoveWater:
00005556 4238 F64E                  		clr.b	($FFFFF64E).w
0000555A 7000                       		moveq	#0,d0
0000555C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00005560 E248                       		lsr.w	#1,d0
00005562 D078 F648                  		add.w	($FFFFF648).w,d0
00005566 31C0 F646                  		move.w	d0,($FFFFF646).w
0000556A 3038 F646                  		move.w	($FFFFF646).w,d0
0000556E 9078 F704                  		sub.w	($FFFFF704).w,d0
00005572 6400                       		bcc.s	loc_3C1A
00005574 4A40                       		tst.w	d0
00005576 6A00                       		bpl.s	loc_3C1A
00005578 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000557E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00005584                            
00005584                            loc_3C1A:
00005584 0C40 00DF                  		cmpi.w	#$DF,d0
00005588 6500                       		bcs.s	loc_3C24
0000558A 303C 00DF                  		move.w	#$DF,d0
0000558E                            
0000558E                            loc_3C24:
0000558E 11C0 F625                  		move.b	d0,($FFFFF625).w
00005592                            
00005592                            locret_3C28:
00005592 4E75                       		rts	
00005594                            ; ===========================================================================
00005594                            ; ---------------------------------------------------------------------------
00005594                            ; Labyrinth default water heights
00005594                            ; ---------------------------------------------------------------------------
00005594                            WaterHeight:	incbin	misc\lz_heigh.bin
0000559C                            		even
0000559C                            ; ===========================================================================
0000559C                            
0000559C                            ; ---------------------------------------------------------------------------
0000559C                            ; Labyrinth dynamic water routines
0000559C                            ; ---------------------------------------------------------------------------
0000559C                            
0000559C                            LZDynamicWater:				; XREF: LZWaterEffects
0000559C 7000                       		moveq	#0,d0
0000559E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000055A2 D040                       		add.w	d0,d0
000055A4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000055A8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000055AC 7200                       		moveq	#0,d1
000055AE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000055B2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000055B6 9078 F648                  		sub.w	($FFFFF648).w,d0
000055BA 6700                       		beq.s	locret_3C5A
000055BC 6400                       		bcc.s	loc_3C56
000055BE 4441                       		neg.w	d1
000055C0                            
000055C0                            loc_3C56:
000055C0 D378 F648                  		add.w	d1,($FFFFF648).w
000055C4                            
000055C4                            locret_3C5A:
000055C4 4E75                       		rts	
000055C6                            ; ===========================================================================
000055C6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000055C8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000055CA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000055CC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000055CE                            ; ===========================================================================
000055CE                            
000055CE                            DynWater_LZ1:				; XREF: DynWater_Index
000055CE 3038 F700                  		move.w	($FFFFF700).w,d0
000055D2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000055D6 6600                       		bne.s	loc_3CD0
000055D8 323C 00B8                  		move.w	#$B8,d1
000055DC 0C40 0600                  		cmpi.w	#$600,d0
000055E0 6500                       		bcs.s	loc_3CB4
000055E2 323C 0108                  		move.w	#$108,d1
000055E6 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000055EC 6500                       		bcs.s	loc_3CBA
000055EE 0C40 0C00                  		cmpi.w	#$C00,d0
000055F2 6500                       		bcs.s	loc_3CB4
000055F4 323C 0318                  		move.w	#$318,d1
000055F8 0C40 1080                  		cmpi.w	#$1080,d0
000055FC 6500                       		bcs.s	loc_3CB4
000055FE 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00005604 323C 05C8                  		move.w	#$5C8,d1
00005608 0C40 1380                  		cmpi.w	#$1380,d0
0000560C 6500                       		bcs.s	loc_3CB4
0000560E 323C 03A8                  		move.w	#$3A8,d1
00005612 B278 F648                  		cmp.w	($FFFFF648).w,d1
00005616 6600                       		bne.s	loc_3CB4
00005618 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000561E                            
0000561E                            loc_3CB4:
0000561E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005622 4E75                       		rts	
00005624                            ; ===========================================================================
00005624                            
00005624                            loc_3CBA:				; XREF: DynWater_LZ1
00005624 0C40 0C80                  		cmpi.w	#$C80,d0
00005628 65F4                       		bcs.s	loc_3CB4
0000562A 323C 00E8                  		move.w	#$E8,d1
0000562E 0C40 1500                  		cmpi.w	#$1500,d0
00005632 65EA                       		bcs.s	loc_3CB4
00005634 323C 0108                  		move.w	#$108,d1
00005638 60E4                       		bra.s	loc_3CB4
0000563A                            ; ===========================================================================
0000563A                            
0000563A                            loc_3CD0:				; XREF: DynWater_LZ1
0000563A 5302                       		subq.b	#1,d2
0000563C 6600                       		bne.s	locret_3CF4
0000563E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00005644 6400                       		bcc.s	locret_3CF4
00005646 323C 03A8                  		move.w	#$3A8,d1
0000564A 0C40 1300                  		cmpi.w	#$1300,d0
0000564E 6500                       		bcs.s	loc_3CF0
00005650 323C 0108                  		move.w	#$108,d1
00005654 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000565A                            
0000565A                            loc_3CF0:
0000565A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000565E                            
0000565E                            locret_3CF4:
0000565E 4E75                       		rts	
00005660                            ; ===========================================================================
00005660                            
00005660                            DynWater_LZ2:				; XREF: DynWater_Index
00005660 3038 F700                  		move.w	($FFFFF700).w,d0
00005664 323C 0328                  		move.w	#$328,d1
00005668 0C40 0500                  		cmpi.w	#$500,d0
0000566C 6500                       		bcs.s	loc_3D12
0000566E 323C 03C8                  		move.w	#$3C8,d1
00005672 0C40 0B00                  		cmpi.w	#$B00,d0
00005676 6500                       		bcs.s	loc_3D12
00005678 323C 0428                  		move.w	#$428,d1
0000567C                            
0000567C                            loc_3D12:
0000567C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005680 4E75                       		rts	
00005682                            ; ===========================================================================
00005682                            
00005682                            DynWater_LZ3:				; XREF: DynWater_Index
00005682 3038 F700                  		move.w	($FFFFF700).w,d0
00005686 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000568A 6600                       		bne.s	loc_3D5E
0000568C 323C 0900                  		move.w	#$900,d1
00005690 0C40 0600                  		cmpi.w	#$600,d0
00005694 6500                       		bcs.s	loc_3D54
00005696 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000569C 6500                       		bcs.s	loc_3D54
0000569E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056A4 6400                       		bcc.s	loc_3D54
000056A6 323C 04C8                  		move.w	#$4C8,d1
000056AA 21FC 0000 0000 A400        		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
000056B2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000056B8 303C 00B7                  		move.w	#$B7,d0
000056BC 6100 BC10                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000056C0                            
000056C0                            loc_3D54:
000056C0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000056C4 31C1 F648                  		move.w	d1,($FFFFF648).w
000056C8 4E75                       		rts	
000056CA                            ; ===========================================================================
000056CA                            
000056CA                            loc_3D5E:				; XREF: DynWater_LZ3
000056CA 5302                       		subq.b	#1,d2
000056CC 6600                       		bne.s	loc_3DA8
000056CE 323C 04C8                  		move.w	#$4C8,d1
000056D2 0C40 0770                  		cmpi.w	#$770,d0
000056D6 6500                       		bcs.s	loc_3DA2
000056D8 323C 0308                  		move.w	#$308,d1
000056DC 0C40 1400                  		cmpi.w	#$1400,d0
000056E0 6500                       		bcs.s	loc_3DA2
000056E2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000056E8 6700                       		beq.s	loc_3D8E
000056EA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000056F0 6400                       		bcc.s	loc_3D8E
000056F2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000056F8 6400                       		bcc.s	loc_3DA2
000056FA                            
000056FA                            loc_3D8E:
000056FA 323C 0508                  		move.w	#$508,d1
000056FE 31C1 F648                  		move.w	d1,($FFFFF648).w
00005702 0C40 1770                  		cmpi.w	#$1770,d0
00005706 6500                       		bcs.s	loc_3DA2
00005708 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000570E                            
0000570E                            loc_3DA2:
0000570E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005712 4E75                       		rts	
00005714                            ; ===========================================================================
00005714                            
00005714                            loc_3DA8:
00005714 5302                       		subq.b	#1,d2
00005716 6600                       		bne.s	loc_3DD2
00005718 323C 0508                  		move.w	#$508,d1
0000571C 0C40 1860                  		cmpi.w	#$1860,d0
00005720 6500                       		bcs.s	loc_3DCC
00005722 323C 0188                  		move.w	#$188,d1
00005726 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000572A 6400                       		bcc.s	loc_3DC6
0000572C B278 F648                  		cmp.w	($FFFFF648).w,d1
00005730 6600                       		bne.s	loc_3DCC
00005732                            
00005732                            loc_3DC6:
00005732 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00005738                            
00005738                            loc_3DCC:
00005738 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000573C 4E75                       		rts	
0000573E                            ; ===========================================================================
0000573E                            
0000573E                            loc_3DD2:
0000573E 5302                       		subq.b	#1,d2
00005740 6600                       		bne.s	loc_3E0E
00005742 323C 0188                  		move.w	#$188,d1
00005746 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000574A 6500                       		bcs.s	loc_3E04
0000574C 323C 0900                  		move.w	#$900,d1
00005750 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005754 6500                       		bcs.s	loc_3E04
00005756 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000575C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00005762 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00005768 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000576E 4E75                       		rts	
00005770                            ; ===========================================================================
00005770                            
00005770                            loc_3E04:
00005770 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00005774 31C1 F648                  		move.w	d1,($FFFFF648).w
00005778 4E75                       		rts	
0000577A                            ; ===========================================================================
0000577A                            
0000577A                            loc_3E0E:
0000577A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000577E 6500                       		bcs.s	locret_3E1A
00005780 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00005786                            
00005786                            locret_3E1A:
00005786 4E75                       		rts	
00005788                            ; ===========================================================================
00005788                            
00005788                            DynWater_SBZ3:				; XREF: DynWater_Index
00005788 323C 0228                  		move.w	#$228,d1
0000578C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00005792 6500                       		bcs.s	loc_3E2C
00005794 323C 04C8                  		move.w	#$4C8,d1
00005798                            
00005798                            loc_3E2C:
00005798 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000579C 4E75                       		rts
0000579E                            
0000579E                            ; ---------------------------------------------------------------------------
0000579E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000579E                            ; ---------------------------------------------------------------------------
0000579E                            
0000579E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000579E                            
0000579E                            
0000579E                            LZWindTunnels:				; XREF: LZWaterEffects
0000579E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000057A2 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000057A6 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000057AC 7000                       		moveq	#0,d0
000057AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000057B2 E748                       		lsl.w	#3,d0
000057B4 D4C0                       		adda.w	d0,a2
000057B6 7200                       		moveq	#0,d1
000057B8 4A38 FE11                  		tst.b	($FFFFFE11).w
000057BC 6600                       		bne.s	loc_3E56
000057BE 7201                       		moveq	#1,d1
000057C0 514A                       		subq.w	#8,a2
000057C2                            
000057C2                            loc_3E56:
000057C2 43F8 D000                  		lea	($FFFFD000).w,a1
000057C6                            
000057C6                            LZWind_Loop:
000057C6 3029 0008                  		move.w	8(a1),d0
000057CA B052                       		cmp.w	(a2),d0
000057CC 6500 0000                  		bcs.w	loc_3EF4
000057D0 B06A 0004                  		cmp.w	4(a2),d0
000057D4 6400 0000                  		bcc.w	loc_3EF4
000057D8 3429 000C                  		move.w	$C(a1),d2
000057DC B46A 0002                  		cmp.w	2(a2),d2
000057E0 6500                       		bcs.s	loc_3EF4
000057E2 B46A 0006                  		cmp.w	6(a2),d2
000057E6 6400                       		bcc.s	loc_3EF4
000057E8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000057EC 0200 003F                  		andi.b	#$3F,d0
000057F0 6600                       		bne.s	loc_3E90
000057F2 303C 00D0                  		move.w	#$D0,d0
000057F6 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rushing water sound
000057FC                            
000057FC                            loc_3E90:
000057FC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00005800 6600 0000                  		bne.w	locret_3F0A
00005804 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000580A 6400                       		bcc.s	loc_3F06
0000580C 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00005812 0440 0080                  		subi.w	#$80,d0
00005816 B052                       		cmp.w	(a2),d0
00005818 6400                       		bcc.s	LZWind_Move
0000581A 7002                       		moveq	#2,d0
0000581C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00005822 6600                       		bne.s	loc_3EBA
00005824 4440                       		neg.w	d0
00005826                            
00005826                            loc_3EBA:
00005826 D169 000C                  		add.w	d0,$C(a1)
0000582A                            
0000582A                            LZWind_Move:
0000582A 5869 0008                  		addq.w	#4,8(a1)
0000582E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00005834 337C 0000 0012             		move.w	#0,$12(a1)
0000583A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00005840 08E9 0001 0022             		bset	#1,$22(a1)
00005846 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000584C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000584E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00005852                            
00005852                            LZWind_MoveDown:
00005852 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00005858 6700                       		beq.s	locret_3EF2	; if not, branch
0000585A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000585E                            
0000585E                            locret_3EF2:
0000585E 4E75                       		rts	
00005860                            ; ===========================================================================
00005860                            
00005860                            loc_3EF4:				; XREF: LZWindTunnels
00005860 504A                       		addq.w	#8,a2
00005862 51C9 FF62                  		dbf	d1,LZWind_Loop
00005866 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000586A 6700                       		beq.s	locret_3F0A
0000586C 137C 0000 001C             		move.b	#0,$1C(a1)
00005872                            
00005872                            loc_3F06:
00005872 4238 F7C7                  		clr.b	($FFFFF7C7).w
00005876                            
00005876                            locret_3F0A:
00005876 4E75                       		rts	
00005878                            ; End of function LZWindTunnels
00005878                            
00005878                            ; ===========================================================================
00005878 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00005880 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00005892 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000058A0                            					; XREF: LZWindTunnels
000058A0                            		even
000058A0                            
000058A0                            ; ---------------------------------------------------------------------------
000058A0                            ; Labyrinth Zone water slide subroutine
000058A0                            ; ---------------------------------------------------------------------------
000058A0                            
000058A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058A0                            
000058A0                            
000058A0                            LZWaterSlides:				; XREF: LZWaterEffects
000058A0 43F8 D000                  		lea	($FFFFD000).w,a1
000058A4 0829 0001 0022             		btst	#1,$22(a1)
000058AA 6600                       		bne.s	loc_3F6A
000058AC 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
000058B0 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
000058B4 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
000058B8 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
000058BA EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
000058BC 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
000058C0 D041                       		add.w	d1,d0					; MJ: add together
000058C2 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
000058C6 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
000058CA 45FA 0000                  		lea	Slide_Chunks(pc),a2
000058CE 7200                       		moveq	#$00,d1					; MJ: clear d2
000058D0 6000 0000                  		bra	LZLoadChunk				; MJ: continue
000058D4                            
000058D4                            LZFindChunk:
000058D4 B002                       		cmp.b	d2,d0					; MJ: does the chunk match?
000058D6 6700 0000                  		beq	LZSlide_Move				; MJ: if so, branch
000058DA 5241                       		addq.w	#$01,d1					; MJ: increase counter
000058DC                            
000058DC                            LZLoadChunk:
000058DC 141A                       		move.b	(a2)+,d2				; MJ: load chunk ID
000058DE 66F4                       		bne	LZFindChunk				; MJ: if it's not null, branch
000058E0                            
000058E0                            loc_3F6A:
000058E0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000058E4 6700                       		beq.s	locret_3F7A
000058E6 337C 0005 003E             		move.w	#5,$3E(a1)
000058EC 4238 F7CA                  		clr.b	($FFFFF7CA).w
000058F0                            
000058F0                            locret_3F7A:
000058F0 4E75                       		rts	
000058F2                            ; ===========================================================================
000058F2                            
000058F2                            LZSlide_Move:				; XREF: LZWaterSlides
000058F2 0C41 0003                  		cmpi.w	#3,d1
000058F6 6400                       		bcc.s	loc_3F84
000058F8 4E71                       		nop	
000058FA                            
000058FA                            loc_3F84:
000058FA 08A9 0000 0022             		bclr	#0,$22(a1)
00005900 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005904 1340 0014                  		move.b	d0,$14(a1)
00005908 6A00                       		bpl.s	loc_3F9A
0000590A 08E9 0000 0022             		bset	#0,$22(a1)
00005910                            
00005910                            loc_3F9A:
00005910 4229 0015                  		clr.b	$15(a1)
00005914 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000591A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00005920 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005924 0200 001F                  		andi.b	#$1F,d0
00005928 6600                       		bne.s	locret_3FBE
0000592A 303C 00D0                  		move.w	#$D0,d0
0000592E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play water sound
00005934                            
00005934                            locret_3FBE:
00005934 4E75                       		rts	
00005936                            ; End of function LZWaterSlides
00005936                            
00005936                            ; ===========================================================================
00005936                            ; ---------------------------------------------------------------------------
00005936 0506 090A                  Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
0000593A FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
0000593E 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
00005942 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
00005946 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
0000594A 17                         		dc.b	$17
0000594B 00                         		dc.b	$00					; MJ: End marker
0000594C                            		even
0000594C                            ; ---------------------------------------------------------------------------
0000594C 0A0A 0A0A                  Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
00005950 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
00005954 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
00005958 F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
0000595C F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
00005960 F5                         		dc.b	$F5
00005962 00                         		even
00005962                            ; ---------------------------------------------------------------------------
00005962                            ; ===========================================================================
00005962                            ; ---------------------------------------------------------------------------
00005962                            ; Subroutine to	move Sonic in demo mode
00005962                            ; ---------------------------------------------------------------------------
00005962                            
00005962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005962                            
00005962                            
00005962                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00005962 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005966 6600                       		bne.s	MoveDemo_On	; if yes, branch
00005968 4E75                       		rts	
0000596A                            ; ===========================================================================
0000596A                            
0000596A                            ; This is an unused subroutine for recording a demo
0000596A                            
0000596A                            MoveDemo_Record:
0000596A 43F9 0008 0000             		lea	($80000).l,a1
00005970 3038 F790                  		move.w	($FFFFF790).w,d0
00005974 D2C0                       		adda.w	d0,a1
00005976 1038 F604                  		move.b	($FFFFF604).w,d0
0000597A B011                       		cmp.b	(a1),d0
0000597C 6600                       		bne.s	loc_3FFA
0000597E 5229 0001                  		addq.b	#1,1(a1)
00005982 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005988 6700                       		beq.s	loc_3FFA
0000598A 4E75                       		rts	
0000598C                            ; ===========================================================================
0000598C                            
0000598C                            loc_3FFA:				; XREF: MoveDemo_Record
0000598C 1340 0002                  		move.b	d0,2(a1)
00005990 137C 0000 0003             		move.b	#0,3(a1)
00005996 5478 F790                  		addq.w	#2,($FFFFF790).w
0000599A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000059A0 4E75                       		rts	
000059A2                            ; ===========================================================================
000059A2                            
000059A2                            MoveDemo_On:				; XREF: MoveSonicInDemo
000059A2 4A38 F604                  		tst.b	($FFFFF604).w
000059A6 6A00                       		bpl.s	loc_4022
000059A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059AC 6B00                       		bmi.s	loc_4022
000059AE 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000059B4                            
000059B4                            loc_4022:
000059B4 43F9 0000 0000             		lea	(Demo_Index).l,a1
000059BA 7000                       		moveq	#0,d0
000059BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000059C0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000059C6 6600                       		bne.s	loc_4038
000059C8 7006                       		moveq	#6,d0
000059CA                            
000059CA                            loc_4038:
000059CA E548                       		lsl.w	#2,d0
000059CC 2271 0000                  		movea.l	(a1,d0.w),a1
000059D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000059D4 6A00                       		bpl.s	loc_4056
000059D6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000059DC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000059E0 5340                       		subq.w	#1,d0
000059E2 E548                       		lsl.w	#2,d0
000059E4 2271 0000                  		movea.l	(a1,d0.w),a1
000059E8                            
000059E8                            loc_4056:
000059E8 3038 F790                  		move.w	($FFFFF790).w,d0
000059EC D2C0                       		adda.w	d0,a1
000059EE 1011                       		move.b	(a1),d0
000059F0 41F8 F604                  		lea	($FFFFF604).w,a0
000059F4 1200                       		move.b	d0,d1
000059F6 1428 FFFE                  		move.b	-2(a0),d2
000059FA B500                       		eor.b	d2,d0
000059FC 10C1                       		move.b	d1,(a0)+
000059FE C001                       		and.b	d1,d0
00005A00 10C0                       		move.b	d0,(a0)+
00005A02 5338 F792                  		subq.b	#1,($FFFFF792).w
00005A06 6400                       		bcc.s	locret_407E
00005A08 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00005A0E 5478 F790                  		addq.w	#2,($FFFFF790).w
00005A12                            
00005A12                            locret_407E:
00005A12 4E75                       		rts	
00005A14                            ; End of function MoveSonicInDemo
00005A14                            
00005A14                            ; ===========================================================================
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            ; Demo sequence	pointers
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            Demo_Index:
00005A14                            	include "_inc\Demo pointers for intro.asm"
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            ; Demo sequence	pointers
00005A14                            ; ---------------------------------------------------------------------------
00005A14 0000 0000                  	dc.l Demo_GHZ
00005A18 0000 0000                  	dc.l Demo_GHZ
00005A1C 0000 0000                  	dc.l Demo_MZ
00005A20 0000 0000                  	dc.l Demo_MZ
00005A24 0000 0000                  	dc.l Demo_SYZ
00005A28 0000 0000                  	dc.l Demo_SYZ
00005A2C 0000 0000                  	dc.l Demo_SS
00005A30 0000 0000                  	dc.l Demo_SS
00005A30 0000 0000                  	dc.l Demo_SS
00005A34                            
00005A34                            Demo_EndIndex:
00005A34                            	include "_inc\Demo pointers for ending.asm"
00005A34                            ; ---------------------------------------------------------------------------
00005A34                            ; Demo (ending) sequence pointers
00005A34                            ; ---------------------------------------------------------------------------
00005A34 0000 0000                  	dc.l Demo_EndGHZ1
00005A38 0000 0000                  	dc.l Demo_EndMZ
00005A3C 0000 0000                  	dc.l Demo_EndSYZ
00005A40 0000 0000                  	dc.l Demo_EndLZ
00005A44 0000 0000                  	dc.l Demo_EndSLZ
00005A48 0000 0000                  	dc.l Demo_EndSBZ1
00005A4C 0000 0000                  	dc.l Demo_EndSBZ2
00005A50 0000 0000                  	dc.l Demo_EndGHZ2
00005A50 0000 0000                  	dc.l Demo_EndGHZ2
00005A54                            
00005A54 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005A64 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005A74 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005A84                            		even
00005A84                            
00005A84                            ; ---------------------------------------------------------------------------
00005A84                            ; Collision index loading subroutine
00005A84                            ; ---------------------------------------------------------------------------
00005A84                            
00005A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A84                            
00005A84                            
00005A84                            ColIndexLoad:				; XREF: Level
00005A84 7000                       		moveq	#0,d0
00005A86 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A8A E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
00005A8C 21FB 0000 FFD0             		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
00005A92 5840                       		add.w	#$04,d0					; MJ: increase to next location
00005A94 21FB 0000 FFD4             		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
00005A9A 4E75                       		rts	
00005A9C                            ; End of function ColIndexLoad
00005A9C                            
00005A9C                            ; ===========================================================================
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Collision index pointers
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ColPointers:
00005A9C                            	include "_inc\Collision index pointers.asm"
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Collision index pointers
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C 0000 0000                  	dc.l Col_GHZ_1
00005AA0 0000 0000                  	dc.l Col_GHZ_2
00005AA4 0000 0000                  	dc.l Col_LZ_1
00005AA8 0000 0000                  	dc.l Col_LZ_2
00005AAC 0000 0000                  	dc.l Col_MZ_1
00005AB0 0000 0000                  	dc.l Col_MZ_2
00005AB4 0000 0000                  	dc.l Col_SLZ_1
00005AB8 0000 0000                  	dc.l Col_SLZ_2
00005ABC 0000 0000                  	dc.l Col_SYZ_1
00005AC0 0000 0000                  	dc.l Col_SYZ_2
00005AC4 0000 0000                  	dc.l Col_SBZ_1
00005AC8 0000 0000                  	dc.l Col_SBZ_2
00005AC8 0000 0000                  	dc.l Col_SBZ_2
00005ACC                            
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            ; Oscillating number subroutine
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            
00005ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ACC                            
00005ACC                            
00005ACC                            OscillateNumInit:			; XREF: Level
00005ACC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005AD0 45F9 0000 0000             		lea	(Osc_Data).l,a2
00005AD6 7220                       		moveq	#$20,d1
00005AD8                            
00005AD8                            Osc_Loop:
00005AD8 32DA                       		move.w	(a2)+,(a1)+
00005ADA 51C9 FFFC                  		dbf	d1,Osc_Loop
00005ADE 4E75                       		rts	
00005AE0                            ; End of function OscillateNumInit
00005AE0                            
00005AE0                            ; ===========================================================================
00005AE0 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00005AE4 0000 0080                  		dc.w 0,	$80
00005AE8 0000 0080                  		dc.w 0,	$80
00005AEC 0000 0080                  		dc.w 0,	$80
00005AF0 0000 0080                  		dc.w 0,	$80
00005AF4 0000 0080                  		dc.w 0,	$80
00005AF8 0000 0080                  		dc.w 0,	$80
00005AFC 0000 0080                  		dc.w 0,	$80
00005B00 0000 0080                  		dc.w 0,	$80
00005B04 0000 50F0                  		dc.w 0,	$50F0
00005B08 011E 2080                  		dc.w $11E, $2080
00005B0C 00B4 3080                  		dc.w $B4, $3080
00005B10 010E 5080                  		dc.w $10E, $5080
00005B14 01C2 7080                  		dc.w $1C2, $7080
00005B18 0276 0080                  		dc.w $276, $80
00005B1C 0000 0080                  		dc.w 0,	$80
00005B20 0000                       		dc.w 0
00005B22                            		even
00005B22                            
00005B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B22                            
00005B22                            
00005B22                            OscillateNumDo:				; XREF: Level
00005B22 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B28 6400                       		bcc.s	locret_41C4
00005B2A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00005B2E 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00005B34 3619                       		move.w	(a1)+,d3
00005B36 720F                       		moveq	#$F,d1
00005B38                            
00005B38                            loc_4184:
00005B38 341A                       		move.w	(a2)+,d2
00005B3A 381A                       		move.w	(a2)+,d4
00005B3C 0303                       		btst	d1,d3
00005B3E 6600                       		bne.s	loc_41A4
00005B40 3029 0002                  		move.w	2(a1),d0
00005B44 D042                       		add.w	d2,d0
00005B46 3340 0002                  		move.w	d0,2(a1)
00005B4A D151                       		add.w	d0,0(a1)
00005B4C B811                       		cmp.b	0(a1),d4
00005B4E 6200                       		bhi.s	loc_41BA
00005B50 03C3                       		bset	d1,d3
00005B52 6000                       		bra.s	loc_41BA
00005B54                            ; ===========================================================================
00005B54                            
00005B54                            loc_41A4:				; XREF: OscillateNumDo
00005B54 3029 0002                  		move.w	2(a1),d0
00005B58 9042                       		sub.w	d2,d0
00005B5A 3340 0002                  		move.w	d0,2(a1)
00005B5E D151                       		add.w	d0,0(a1)
00005B60 B811                       		cmp.b	0(a1),d4
00005B62 6300                       		bls.s	loc_41BA
00005B64 0383                       		bclr	d1,d3
00005B66                            
00005B66                            loc_41BA:
00005B66 5849                       		addq.w	#4,a1
00005B68 51C9 FFCE                  		dbf	d1,loc_4184
00005B6C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00005B70                            
00005B70                            locret_41C4:
00005B70 4E75                       		rts	
00005B72                            ; End of function OscillateNumDo
00005B72                            
00005B72                            ; ===========================================================================
00005B72 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00005B76 0002 0018                  		dc.w 2,	$18
00005B7A 0002 0020                  		dc.w 2,	$20
00005B7E 0002 0030                  		dc.w 2,	$30
00005B82 0004 0020                  		dc.w 4,	$20
00005B86 0008 0008                  		dc.w 8,	8
00005B8A 0008 0040                  		dc.w 8,	$40
00005B8E 0004 0040                  		dc.w 4,	$40
00005B92 0002 0050                  		dc.w 2,	$50
00005B96 0002 0050                  		dc.w 2,	$50
00005B9A 0002 0020                  		dc.w 2,	$20
00005B9E 0003 0030                  		dc.w 3,	$30
00005BA2 0005 0050                  		dc.w 5,	$50
00005BA6 0007 0070                  		dc.w 7,	$70
00005BAA 0002 0010                  		dc.w 2,	$10
00005BAE 0002 0010                  		dc.w 2,	$10
00005BB2                            		even
00005BB2                            
00005BB2                            ; ---------------------------------------------------------------------------
00005BB2                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00005BB2                            ; ---------------------------------------------------------------------------
00005BB2                            
00005BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BB2                            
00005BB2                            
00005BB2                            ChangeRingFrame:			; XREF: Level
00005BB2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00005BB6 6A00                       		bpl.s	loc_421C
00005BB8 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00005BBE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00005BC2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00005BC8                            
00005BC8                            loc_421C:
00005BC8 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00005BCC 6A00                       		bpl.s	loc_4232
00005BCE 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005BD4 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005BD8 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00005BDE                            
00005BDE                            loc_4232:
00005BDE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00005BE2 6A00                       		bpl.s	loc_4250
00005BE4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005BEA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00005BEE 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005BF4 6500                       		bcs.s	loc_4250
00005BF6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005BFC                            
00005BFC                            loc_4250:
00005BFC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00005C00 6700                       		beq.s	locret_4272
00005C02 7000                       		moveq	#0,d0
00005C04 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005C08 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005C0C 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00005C10 EF58                       		rol.w	#7,d0
00005C12 0240 0003                  		andi.w	#3,d0
00005C16 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005C1A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00005C1E                            
00005C1E                            locret_4272:
00005C1E 4E75                       		rts	
00005C20                            ; End of function ChangeRingFrame
00005C20                            
00005C20                            ; ---------------------------------------------------------------------------
00005C20                            ; End-of-act signpost pattern loading subroutine
00005C20                            ; ---------------------------------------------------------------------------
00005C20                            
00005C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C20                            
00005C20                            
00005C20                            SignpostArtLoad:			; XREF: Level
00005C20 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005C24 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005C28 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00005C2E 6700                       		beq.s	Signpost_Exit	; if yes, branch
00005C30 3038 F700                  		move.w	($FFFFF700).w,d0
00005C34 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005C38 0441 0100                  		subi.w	#$100,d1
00005C3C B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005C3E 6D00                       		blt.s	Signpost_Exit	; if not, branch
00005C40 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005C44 6700                       		beq.s	Signpost_Exit
00005C46 B278 F728                  		cmp.w	($FFFFF728).w,d1
00005C4A 6700                       		beq.s	Signpost_Exit
00005C4C 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00005C50 7012                       		moveq	#$12,d0
00005C52 6000 B964                  		bra.w	LoadPLC2	; load signpost	patterns
00005C56                            ; ===========================================================================
00005C56                            
00005C56                            Signpost_Exit:
00005C56 4E75                       		rts	
00005C58                            ; End of function SignpostArtLoad
00005C58                            
00005C58                            ; ===========================================================================
00005C58                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005CD8                            Demo_MZ:	incbin	demodata\i_mz.bin
00005E08                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005E88                            Demo_SS:	incbin	demodata\i_ss.bin
00005F88                            ; ===========================================================================
00005F88                            
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            ; Special Stage
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            
00005F88                            SpecialStage:				; XREF: GameModeArray
00005F88 303C 00CA                  		move.w	#$CA,d0
00005F8C 6100 B340                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005F90 6100 C182                  		bsr.w	Pal_MakeFlash
00005F94 46FC 2700                  		move	#$2700,sr
00005F98 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F9E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FA2 3CBC 8004                  		move.w	#$8004,(a6)
00005FA6 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005FAC 3CBC 9011                  		move.w	#$9011,(a6)
00005FB0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FB4 0200 00BF                  		andi.b	#$BF,d0
00005FB8 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FBE 6100 B200                  		bsr.w	ClearScreen
00005FC2 46FC 2300                  		move	#$2300,sr
00005FC6 4BF9 00C0 0004             		lea	($C00004).l,a5
00005FCC 3ABC 8F01                  		move.w	#$8F01,(a5)
00005FD0 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005FD6 3ABC 9780                  		move.w	#$9780,(a5)
00005FDA 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005FE0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005FE8                            
00005FE8                            loc_463C:
00005FE8 3215                       		move.w	(a5),d1
00005FEA 0801 0001                  		btst	#1,d1
00005FEE 66F8                       		bne.s	loc_463C
00005FF0 3ABC 8F02                  		move.w	#$8F02,(a5)
00005FF4 6100 0000                  		bsr.w	SS_BGLoad
00005FF8 7014                       		moveq	#$14,d0
00005FFA 6100 B6F6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005FFE 43F8 D000                  		lea	($FFFFD000).w,a1
00006002 7000                       		moveq	#0,d0
00006004 323C 07FF                  		move.w	#$7FF,d1
00006008                            
00006008                            SS_ClrObjRam:
00006008 22C0                       		move.l	d0,(a1)+
0000600A 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000600E                            
0000600E 43F8 F700                  		lea	($FFFFF700).w,a1
00006012 7000                       		moveq	#0,d0
00006014 323C 003F                  		move.w	#$3F,d1
00006018                            
00006018                            SS_ClrRam:
00006018 22C0                       		move.l	d0,(a1)+
0000601A 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000601E                            
0000601E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006022 7000                       		moveq	#0,d0
00006024 323C 0027                  		move.w	#$27,d1
00006028                            
00006028                            SS_ClrRam2:
00006028 22C0                       		move.l	d0,(a1)+
0000602A 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000602E                            
0000602E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006032 7000                       		moveq	#0,d0
00006034 323C 007F                  		move.w	#$7F,d1
00006038                            
00006038                            SS_ClrNemRam:
00006038 22C0                       		move.l	d0,(a1)+
0000603A 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000603E                            
0000603E 4238 F64E                  		clr.b	($FFFFF64E).w
00006042 4278 FE02                  		clr.w	($FFFFFE02).w
00006046 700A                       		moveq	#$A,d0
00006048 6100 C24A                  		bsr.w	PalLoad1	; load special stage Palette
0000604C 4EB9 0000 0000             		jsr	SS_Load
00006052 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000605A 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00006062 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00006068 6100 0000                  		bsr.w	PalCycle_SS
0000606C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00006070 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00006076                            		
00006076 7000                       		moveq	#0,d0
00006078 1038 FE16                  		move.b	($FFFFFE16).w,d0
0000607C 4A00                       		tst.b	d0
0000607E 6700                       		beq.s	SS_Num_Not_Zero
00006080 103C 0006                  		move.b	#6,d0
00006084                            
00006084                            SS_Num_Not_Zero:
00006084 5340                       		subq.w	#1,d0
00006086                            
00006086 43F9 0000 50EC             		lea	(MusicList_SpecialStages).l,a1 ; load Music Playlist for Special Stages
0000608C 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006090 6100 B234                  		bsr.w	PlaySound	; play special stage BG	music
00006094                            		
00006094 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000609A 43F9 0000 5A14             		lea	(Demo_Index).l,a1
000060A0 7006                       		moveq	#6,d0
000060A2 E548                       		lsl.w	#2,d0
000060A4 2271 0000                  		movea.l	(a1,d0.w),a1
000060A8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000060AE 5338 F792                  		subq.b	#1,($FFFFF792).w
000060B2 4278 FE20                  		clr.w	($FFFFFE20).w
000060B6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000060BA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000060C0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000060C6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000060CA 6700                       		beq.s	SS_NoDebug	; if not, branch
000060CC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000060D2 6700                       		beq.s	SS_NoDebug	; if not, branch
000060D4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000060DA                            
000060DA                            SS_NoDebug:
000060DA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000060DE 0000 0040                  		ori.b	#$40,d0
000060E2 33C0 00C0 0004             		move.w	d0,($C00004).l
000060E8 6100 BF7E                  		bsr.w	Pal_MakeWhite
000060EC                            
000060EC                            ; ---------------------------------------------------------------------------
000060EC                            ; Main Special Stage loop
000060EC                            ; ---------------------------------------------------------------------------
000060EC                            
000060EC                            SS_MainLoop:
000060EC 6100 B204                  		bsr.w	PauseGame
000060F0 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000060F6 6100 CA50                  		bsr.w	DelayProgram
000060FA 6100 F866                  		bsr.w	MoveSonicInDemo
000060FE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006104 4EB9 0000 0000             		jsr	ObjectsLoad
0000610A 4EB9 0000 0000             		jsr	BuildSprites
00006110 4EB9 0000 0000             		jsr	SS_ShowLayout
00006116 6100 0000                  		bsr.w	SS_BGAnimate
0000611A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000611E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00006120 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00006124 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00006128                            
00006128                            SS_ChkEnd:
00006128 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000612E 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006132                            
00006132 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006136 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000613A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006140 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00006146 6500                       		bcs.s	SS_End		; if not, branch
00006148 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000614C                            
0000614C                            SS_End:
0000614C 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006152 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006158 4278 F794                  		clr.w	($FFFFF794).w
0000615C                            
0000615C                            SS_EndLoop:
0000615C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006162 6100 C9E4                  		bsr.w	DelayProgram
00006166 6100 F7FA                  		bsr.w	MoveSonicInDemo
0000616A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006170 4EB9 0000 0000             		jsr	ObjectsLoad
00006176 4EB9 0000 0000             		jsr	BuildSprites
0000617C 4EB9 0000 0000             		jsr	SS_ShowLayout
00006182 6100 0000                  		bsr.w	SS_BGAnimate
00006186 5378 F794                  		subq.w	#1,($FFFFF794).w
0000618A 6A00                       		bpl.s	loc_47D4
0000618C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006192 6100 BFA0                  		bsr.w	Pal_ToWhite
00006196                            
00006196                            loc_47D4:
00006196 4A78 F614                  		tst.w	($FFFFF614).w
0000619A 66C0                       		bne.s	SS_EndLoop
0000619C                            
0000619C 46FC 2700                  		move	#$2700,sr
000061A0 4DF9 00C0 0004             		lea	($C00004).l,a6
000061A6 3CBC 8230                  		move.w	#$8230,(a6)
000061AA 3CBC 8407                  		move.w	#$8407,(a6)
000061AE 3CBC 9001                  		move.w	#$9001,(a6)
000061B2 6100 B00C                  		bsr.w	ClearScreen
000061B6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000061C0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000061C6 6100 B296                  		bsr.w	NemDec
000061CA 4EB9 0000 0000             		jsr	Hud_Base
000061D0 4278 C800                  		clr.w	($FFFFC800).w
000061D4 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000061DC 46FC 2300                  		move	#$2300,sr
000061E0 7011                       		moveq	#$11,d0
000061E2 6100 C0CC                  		bsr.w	PalLoad2	; load results screen Palette
000061E6 7000                       		moveq	#0,d0
000061E8 6100 B3CE                  		bsr.w	LoadPLC2
000061EC 701B                       		moveq	#$1B,d0
000061EE 6100 B396                  		bsr.w	LoadPLC		; load results screen patterns
000061F2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000061F8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
000061FE 3038 FE20                  		move.w	($FFFFFE20).w,d0
00006202 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00006206 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000620A 303C 008E                  		move.w	#$8E,d0
0000620E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play end-of-level music
00006214 43F8 D000                  		lea	($FFFFD000).w,a1
00006218 7000                       		moveq	#0,d0
0000621A 323C 07FF                  		move.w	#$7FF,d1
0000621E                            
0000621E                            SS_EndClrObjRam:
0000621E 22C0                       		move.l	d0,(a1)+
00006220 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00006224                            
00006224 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000622A                            
0000622A                            SS_NormalExit:
0000622A 6100 B0C6                  		bsr.w	PauseGame
0000622E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00006234 6100 C912                  		bsr.w	DelayProgram
00006238 4EB9 0000 0000             		jsr	ObjectsLoad
0000623E 4EB9 0000 0000             		jsr	BuildSprites
00006244 6100 B3AC                  		bsr.w	RunPLC_RAM
00006248 4A78 FE02                  		tst.w	($FFFFFE02).w
0000624C 67DC                       		beq.s	SS_NormalExit
0000624E 4AB8 F680                  		tst.l	($FFFFF680).w
00006252 66D6                       		bne.s	SS_NormalExit
00006254 303C 00CA                  		move.w	#$CA,d0
00006258 6100 B074                  		bsr.w	PlaySound_Special ; play special stage exit sound
0000625C 6100 BEB6                  		bsr.w	Pal_MakeFlash
00006260 4E75                       		rts	
00006262                            ; ===========================================================================
00006262                            
00006262                            SS_ToSegaScreen:
00006262 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00006268 4E75                       		rts
0000626A                            
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            ; Special stage	background loading subroutine
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            
0000626A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000626A                            
0000626A                            
0000626A                            SS_BGLoad:				; XREF: SpecialStage
0000626A 43F9 00FF 0000             		lea	($FF0000).l,a1
00006270 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00006276 303C 4051                  		move.w	#$4051,d0
0000627A 6100 B4A8                  		bsr.w	EniDec
0000627E 263C 5000 0001             		move.l	#$50000001,d3
00006284 45F9 00FF 0080             		lea	($FF0080).l,a2
0000628A 7E06                       		moveq	#6,d7
0000628C                            
0000628C                            loc_48BE:
0000628C 2003                       		move.l	d3,d0
0000628E 7C03                       		moveq	#3,d6
00006290 7800                       		moveq	#0,d4
00006292 0C47 0003                  		cmpi.w	#3,d7
00006296 6400                       		bcc.s	loc_48CC
00006298 7801                       		moveq	#1,d4
0000629A                            
0000629A                            loc_48CC:
0000629A 7A07                       		moveq	#7,d5
0000629C                            
0000629C                            loc_48CE:
0000629C 224A                       		movea.l	a2,a1
0000629E 0A04 0001                  		eori.b	#1,d4
000062A2 6600                       		bne.s	loc_48E2
000062A4 0C47 0006                  		cmpi.w	#6,d7
000062A8 6600                       		bne.s	loc_48F2
000062AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000062B0                            
000062B0                            loc_48E2:
000062B0 48E7 F800                  		movem.l	d0-d4,-(sp)
000062B4 7207                       		moveq	#7,d1
000062B6 7407                       		moveq	#7,d2
000062B8 6100 B0B0                  		bsr.w	ShowVDPGraphics
000062BC 4CDF 001F                  		movem.l	(sp)+,d0-d4
000062C0                            
000062C0                            loc_48F2:
000062C0 0680 0010 0000             		addi.l	#$100000,d0
000062C6 51CD FFD4                  		dbf	d5,loc_48CE
000062CA 0680 0380 0000             		addi.l	#$3800000,d0
000062D0 0A04 0001                  		eori.b	#1,d4
000062D4 51CE FFC4                  		dbf	d6,loc_48CC
000062D8 0683 1000 0000             		addi.l	#$10000000,d3
000062DE 6A00                       		bpl.s	loc_491C
000062E0 4843                       		swap	d3
000062E2 0683 0000 C000             		addi.l	#$C000,d3
000062E8 4843                       		swap	d3
000062EA                            
000062EA                            loc_491C:
000062EA D4FC 0080                  		adda.w	#$80,a2
000062EE 51CF FF9C                  		dbf	d7,loc_48BE
000062F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000062F8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000062FE 303C 4000                  		move.w	#$4000,d0
00006302 6100 B420                  		bsr.w	EniDec
00006306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000630C 203C 4000 0003             		move.l	#$40000003,d0
00006312 723F                       		moveq	#$3F,d1
00006314 741F                       		moveq	#$1F,d2
00006316 6100 B052                  		bsr.w	ShowVDPGraphics
0000631A 43F9 00FF 0000             		lea	($FF0000).l,a1
00006320 203C 5000 0003             		move.l	#$50000003,d0
00006326 723F                       		moveq	#$3F,d1
00006328 743F                       		moveq	#$3F,d2
0000632A 6100 B03E                  		bsr.w	ShowVDPGraphics
0000632E 4E75                       		rts	
00006330                            ; End of function SS_BGLoad
00006330                            
00006330                            ; ---------------------------------------------------------------------------
00006330                            ; Palette cycling routine - special stage
00006330                            ; ---------------------------------------------------------------------------
00006330                            
00006330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006330                            
00006330                            
00006330                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00006330 4A78 F63A                  		tst.w	($FFFFF63A).w
00006334 6600                       		bne.s	locret_49E6
00006336 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000633A 6A00                       		bpl.s	locret_49E6
0000633C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006342 3038 F79A                  		move.w	($FFFFF79A).w,d0
00006346 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000634A 0240 001F                  		andi.w	#$1F,d0
0000634E E548                       		lsl.w	#2,d0
00006350 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00006356 D0C0                       		adda.w	d0,a0
00006358 1018                       		move.b	(a0)+,d0
0000635A 6A00                       		bpl.s	loc_4992
0000635C 303C 01FF                  		move.w	#$1FF,d0
00006360                            
00006360                            loc_4992:
00006360 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00006364 7000                       		moveq	#0,d0
00006366 1018                       		move.b	(a0)+,d0
00006368 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000636C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00006372 43F1 0000                  		lea	(a1,d0.w),a1
00006376 303C 8200                  		move.w	#-$7E00,d0
0000637A 1019                       		move.b	(a1)+,d0
0000637C 3C80                       		move.w	d0,(a6)
0000637E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00006382 303C 8400                  		move.w	#-$7C00,d0
00006386 1018                       		move.b	(a0)+,d0
00006388 3C80                       		move.w	d0,(a6)
0000638A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00006394 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000639C 7000                       		moveq	#0,d0
0000639E 1018                       		move.b	(a0)+,d0
000063A0 6B00                       		bmi.s	loc_49E8
000063A2 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000063A8 D2C0                       		adda.w	d0,a1
000063AA 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000063AE 24D9                       		move.l	(a1)+,(a2)+
000063B0 24D9                       		move.l	(a1)+,(a2)+
000063B2 24D9                       		move.l	(a1)+,(a2)+
000063B4                            
000063B4                            locret_49E6:
000063B4 4E75                       		rts	
000063B6                            ; ===========================================================================
000063B6                            
000063B6                            loc_49E8:				; XREF: PalCycle_SS
000063B6 3238 F79E                  		move.w	($FFFFF79E).w,d1
000063BA 0C40 008A                  		cmpi.w	#$8A,d0
000063BE 6500                       		bcs.s	loc_49F4
000063C0 5241                       		addq.w	#1,d1
000063C2                            
000063C2                            loc_49F4:
000063C2 C2FC 002A                  		mulu.w	#$2A,d1
000063C6 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000063CC D2C1                       		adda.w	d1,a1
000063CE 0240 007F                  		andi.w	#$7F,d0
000063D2 0880 0000                  		bclr	#0,d0
000063D6 6700                       		beq.s	loc_4A18
000063D8 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000063DC 24D1                       		move.l	(a1),(a2)+
000063DE 24E9 0004                  		move.l	4(a1),(a2)+
000063E2 24E9 0008                  		move.l	8(a1),(a2)+
000063E6                            
000063E6                            loc_4A18:
000063E6 D2FC 000C                  		adda.w	#$C,a1
000063EA 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000063EE 0C40 000A                  		cmpi.w	#$A,d0
000063F2 6500                       		bcs.s	loc_4A2E
000063F4 0440 000A                  		subi.w	#$A,d0
000063F8 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000063FC                            
000063FC                            loc_4A2E:
000063FC 3200                       		move.w	d0,d1
000063FE D040                       		add.w	d0,d0
00006400 D041                       		add.w	d1,d0
00006402 D2C0                       		adda.w	d0,a1
00006404 24D9                       		move.l	(a1)+,(a2)+
00006406 34D9                       		move.w	(a1)+,(a2)+
00006408 4E75                       		rts	
0000640A                            ; End of function PalCycle_SS
0000640A                            
0000640A                            ; ===========================================================================
0000640A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000641A                            					; XREF: PalCycle_SS
0000641A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000642A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000643A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000644A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000645A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000646A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000647A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000648A                            		even
0000648A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00006498                            					; XREF: PalCycle_SS
00006498                            		even
00006498                            
00006498                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
000064E0                            		even
000064E0                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
000065B2                            		even
000065B2                            
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            ; Subroutine to	make the special stage background animated
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            
000065B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B2                            
000065B2                            
000065B2                            SS_BGAnimate:				; XREF: SpecialStage
000065B2 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000065B6 6600                       		bne.s	loc_4BF6
000065B8 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000065BE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065C4                            
000065C4                            loc_4BF6:
000065C4 0C40 0008                  		cmpi.w	#8,d0
000065C8 6400                       		bcc.s	loc_4C4E
000065CA 0C40 0006                  		cmpi.w	#6,d0
000065CE 6600                       		bne.s	loc_4C10
000065D0 5278 F718                  		addq.w	#1,($FFFFF718).w
000065D4 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000065D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065DE                            
000065DE                            loc_4C10:
000065DE 7000                       		moveq	#0,d0
000065E0 3038 F708                  		move.w	($FFFFF708).w,d0
000065E4 4440                       		neg.w	d0
000065E6 4840                       		swap	d0
000065E8 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000065EE 47F8 AA00                  		lea	($FFFFAA00).w,a3
000065F2 7609                       		moveq	#9,d3
000065F4                            
000065F4                            loc_4C26:
000065F4 302B 0002                  		move.w	2(a3),d0
000065F8 6100 C580                  		bsr.w	CalcSine
000065FC 7400                       		moveq	#0,d2
000065FE 1419                       		move.b	(a1)+,d2
00006600 C1C2                       		muls.w	d2,d0
00006602 E080                       		asr.l	#8,d0
00006604 36C0                       		move.w	d0,(a3)+
00006606 1419                       		move.b	(a1)+,d2
00006608 4882                       		ext.w	d2
0000660A D55B                       		add.w	d2,(a3)+
0000660C 51CB FFE6                  		dbf	d3,loc_4C26
00006610 47F8 AA00                  		lea	($FFFFAA00).w,a3
00006614 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000661A 6000                       		bra.s	loc_4C7E
0000661C                            ; ===========================================================================
0000661C                            
0000661C                            loc_4C4E:				; XREF: SS_BGAnimate
0000661C 0C40 000C                  		cmpi.w	#$C,d0
00006620 6600                       		bne.s	loc_4C74
00006622 5378 F718                  		subq.w	#1,($FFFFF718).w
00006626 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000662A 243C 0001 8000             		move.l	#$18000,d2
00006630 7206                       		moveq	#6,d1
00006632                            
00006632                            loc_4C64:
00006632 2013                       		move.l	(a3),d0
00006634 9082                       		sub.l	d2,d0
00006636 26C0                       		move.l	d0,(a3)+
00006638 0482 0000 2000             		subi.l	#$2000,d2
0000663E 51C9 FFF2                  		dbf	d1,loc_4C64
00006642                            
00006642                            loc_4C74:
00006642 47F8 AB00                  		lea	($FFFFAB00).w,a3
00006646 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000664C                            
0000664C                            loc_4C7E:
0000664C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006650 3038 F718                  		move.w	($FFFFF718).w,d0
00006654 4440                       		neg.w	d0
00006656 4840                       		swap	d0
00006658 7600                       		moveq	#0,d3
0000665A 161A                       		move.b	(a2)+,d3
0000665C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00006660 4442                       		neg.w	d2
00006662 0242 00FF                  		andi.w	#$FF,d2
00006666 E54A                       		lsl.w	#2,d2
00006668                            
00006668                            loc_4C9A:
00006668 301B                       		move.w	(a3)+,d0
0000666A 544B                       		addq.w	#2,a3
0000666C 7200                       		moveq	#0,d1
0000666E 121A                       		move.b	(a2)+,d1
00006670 5341                       		subq.w	#1,d1
00006672                            
00006672                            loc_4CA4:
00006672 2380 2000                  		move.l	d0,(a1,d2.w)
00006676 5842                       		addq.w	#4,d2
00006678 0242 03FC                  		andi.w	#$3FC,d2
0000667C 51C9 FFF4                  		dbf	d1,loc_4CA4
00006680 51CB FFE6                  		dbf	d3,loc_4C9A
00006684 4E75                       		rts	
00006686                            ; End of function SS_BGAnimate
00006686                            
00006686                            ; ===========================================================================
00006686 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00006692                            		even
00006692 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000669A                            		even
0000669A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000066AE                            		even
000066AE                            					; XREF: SS_BGAnimate
000066AE                            ; ===========================================================================
000066AE                            
000066AE                            ; ---------------------------------------------------------------------------
000066AE                            ; Continue screen
000066AE                            ; ---------------------------------------------------------------------------
000066AE                            
000066AE                            ContinueScreen:				; XREF: GameModeArray
000066AE 6100 B936                  		bsr.w	Pal_FadeFrom
000066B2 46FC 2700                  		move	#$2700,sr
000066B6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000066BA 0200 00BF                  		andi.b	#$BF,d0
000066BE 33C0 00C0 0004             		move.w	d0,($C00004).l
000066C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000066CA 3CBC 8004                  		move.w	#$8004,(a6)
000066CE 3CBC 8700                  		move.w	#$8700,(a6)
000066D2 6100 AAEC                  		bsr.w	ClearScreen
000066D6 43F8 D000                  		lea	($FFFFD000).w,a1
000066DA 7000                       		moveq	#0,d0
000066DC 323C 07FF                  		move.w	#$7FF,d1
000066E0                            
000066E0                            Cont_ClrObjRam:
000066E0 22C0                       		move.l	d0,(a1)+
000066E2 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000066E6                            
000066E6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000066F0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000066F6 6100 AD66                  		bsr.w	NemDec
000066FA 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00006704 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000670A 6100 AD52                  		bsr.w	NemDec
0000670E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00006718 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000671E 6100 AD3E                  		bsr.w	NemDec
00006722 720A                       		moveq	#10,d1
00006724 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000672A 7012                       		moveq	#$12,d0
0000672C 6100 BB66                  		bsr.w	PalLoad1	; load continue	screen Palette
00006730 103C 0090                  		move.b	#$90,d0
00006734 6100 AB90                  		bsr.w	PlaySound	; play continue	music
00006738 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000673E 42B8 F700                  		clr.l	($FFFFF700).w
00006742 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000674A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00006750 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00006756 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000675C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00006762 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00006768 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000676E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00006774 4EB9 0000 0000             		jsr	ObjectsLoad
0000677A 4EB9 0000 0000             		jsr	BuildSprites
00006780 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006784 0000 0040                  		ori.b	#$40,d0
00006788 33C0 00C0 0004             		move.w	d0,($C00004).l
0000678E 6100 B7A0                  		bsr.w	Pal_FadeTo
00006792                            
00006792                            ; ---------------------------------------------------------------------------
00006792                            ; Continue screen main loop
00006792                            ; ---------------------------------------------------------------------------
00006792                            
00006792                            Cont_MainLoop:
00006792 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006798 6100 C3AE                  		bsr.w	DelayProgram
0000679C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067A2 6400                       		bcc.s	loc_4DF2
000067A4 46FC 2700                  		move	#$2700,sr
000067A8 3238 F614                  		move.w	($FFFFF614).w,d1
000067AC 82FC 003C                  		divu.w	#$3C,d1
000067B0 0281 0000 000F             		andi.l	#$F,d1
000067B6 4EB9 0000 0000             		jsr	ContScrCounter
000067BC 46FC 2300                  		move	#$2300,sr
000067C0                            
000067C0                            loc_4DF2:
000067C0 4EB9 0000 0000             		jsr	ObjectsLoad
000067C6 4EB9 0000 0000             		jsr	BuildSprites
000067CC 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000067D2 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000067D4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000067DA 64B6                       		bcc.s	Cont_MainLoop
000067DC 4A78 F614                  		tst.w	($FFFFF614).w
000067E0 6600 FFB0                  		bne.w	Cont_MainLoop
000067E4 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000067EA 4E75                       		rts	
000067EC                            ; ===========================================================================
000067EC                            
000067EC                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000067EC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000067F2 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000067F8 7000                       		moveq	#0,d0
000067FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000067FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006802 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006806 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000680A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000680E 4E75                       		rts	
00006810                            ; ===========================================================================
00006810                            
00006810                            ; ---------------------------------------------------------------------------
00006810                            ; Object 80 - Continue screen elements
00006810                            ; ---------------------------------------------------------------------------
00006810                            
00006810                            Obj80:					; XREF: Obj_Index
00006810 7000                       		moveq	#0,d0
00006812 1028 0024                  		move.b	$24(a0),d0
00006816 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000681A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000681E                            ; ===========================================================================
0000681E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00006820 0000                       		dc.w Obj80_Display-Obj80_Index
00006822 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00006824 0000                       		dc.w Obj80_ChkType-Obj80_Index
00006826                            ; ===========================================================================
00006826                            
00006826                            Obj80_Main:				; XREF: Obj80_Index
00006826 5428 0024                  		addq.b	#2,$24(a0)
0000682A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006832 317C 8500 0002             		move.w	#$8500,2(a0)
00006838 117C 0000 0001             		move.b	#0,1(a0)
0000683E 117C 003C 0019             		move.b	#$3C,$19(a0)
00006844 317C 0120 0008             		move.w	#$120,8(a0)
0000684A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00006850 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00006856                            
00006856                            Obj80_Display:				; XREF: Obj80_Index
00006856 4EF9 0000 0000             		jmp	DisplaySprite
0000685C                            ; ===========================================================================
0000685C                            Obj80_MiniSonicPos:
0000685C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000686E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000687A                            ; ===========================================================================
0000687A                            
0000687A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000687A 2248                       		movea.l	a0,a1
0000687C 45F9 0000 685C             		lea	(Obj80_MiniSonicPos).l,a2
00006882 7200                       		moveq	#0,d1
00006884 1238 FE18                  		move.b	($FFFFFE18).w,d1
00006888 5501                       		subq.b	#2,d1
0000688A 6400                       		bcc.s	loc_4EC4
0000688C 4EF9 0000 0000             		jmp	DeleteObject
00006892                            ; ===========================================================================
00006892                            
00006892                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00006892 7601                       		moveq	#1,d3
00006894 0C01 000E                  		cmpi.b	#$E,d1
00006898 6500                       		bcs.s	loc_4ED0
0000689A 7600                       		moveq	#0,d3
0000689C 720E                       		moveq	#$E,d1
0000689E                            
0000689E                            loc_4ED0:
0000689E 1401                       		move.b	d1,d2
000068A0 0202 0001                  		andi.b	#1,d2
000068A4                            
000068A4                            Obj80_MiniSonLoop:
000068A4 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000068A8 335A 0008                  		move.w	(a2)+,8(a1)
000068AC 4A02                       		tst.b	d2
000068AE 6700                       		beq.s	loc_4EEA
000068B0 0469 000A 0008             		subi.w	#$A,8(a1)
000068B6                            
000068B6                            loc_4EEA:
000068B6 337C 00D0 000A             		move.w	#$D0,$A(a1)
000068BC 137C 0006 001A             		move.b	#6,$1A(a1)
000068C2 137C 0006 0024             		move.b	#6,$24(a1)
000068C8 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000068D0 337C 8551 0002             		move.w	#$8551,2(a1)
000068D6 137C 0000 0001             		move.b	#0,1(a1)
000068DC 43E9 0040                  		lea	$40(a1),a1
000068E0 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000068E4 43E9 FFC0                  		lea	-$40(a1),a1
000068E8 1343 0028                  		move.b	d3,$28(a1)
000068EC                            
000068EC                            Obj80_ChkType:				; XREF: Obj80_Index
000068EC 4A28 0028                  		tst.b	$28(a0)
000068F0 6700                       		beq.s	loc_4F40
000068F2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000068F8 6500                       		bcs.s	loc_4F40
000068FA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000068FE 0200 0001                  		andi.b	#1,d0
00006902 6600                       		bne.s	loc_4F40
00006904 4A78 D010                  		tst.w	($FFFFD010).w
00006908 6600                       		bne.s	Obj80_Delete
0000690A 4E75                       		rts	
0000690C                            ; ===========================================================================
0000690C                            
0000690C                            loc_4F40:				; XREF: Obj80_ChkType
0000690C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006910 0200 000F                  		andi.b	#$F,d0
00006914 6600                       		bne.s	Obj80_Display2
00006916 0868 0000 001A             		bchg	#0,$1A(a0)
0000691C                            
0000691C                            Obj80_Display2:
0000691C 4EF9 0000 0000             		jmp	DisplaySprite
00006922                            ; ===========================================================================
00006922                            
00006922                            Obj80_Delete:				; XREF: Obj80_ChkType
00006922 4EF9 0000 0000             		jmp	DeleteObject
00006928                            ; ===========================================================================
00006928                            
00006928                            ; ---------------------------------------------------------------------------
00006928                            ; Object 81 - Sonic on the continue screen
00006928                            ; ---------------------------------------------------------------------------
00006928                            
00006928                            Obj81:					; XREF: Obj_Index
00006928 7000                       		moveq	#0,d0
0000692A 1028 0024                  		move.b	$24(a0),d0
0000692E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00006932 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00006936 4EF9 0000 0000             		jmp	DisplaySprite
0000693C                            ; ===========================================================================
0000693C 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000693E 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00006940 0000                       		dc.w Obj81_Animate-Obj81_Index
00006942 0000                       		dc.w Obj81_Run-Obj81_Index
00006944                            ; ===========================================================================
00006944                            
00006944                            Obj81_Main:				; XREF: Obj81_Index
00006944 5428 0024                  		addq.b	#2,$24(a0)
00006948 317C 00A0 0008             		move.w	#$A0,8(a0)
0000694E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00006954 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000695C 317C 0780 0002             		move.w	#$780,2(a0)
00006962 117C 0004 0001             		move.b	#4,1(a0)
00006968 117C 0002 0018             		move.b	#2,$18(a0)
0000696E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00006974 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000697A                            
0000697A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000697A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00006980 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00006982 5428 0024                  		addq.b	#2,$24(a0)
00006986 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000698A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006992 317C 8500 0002             		move.w	#$8500,2(a0)
00006998 117C 0000 001C             		move.b	#0,$1C(a0)
0000699E 6000                       		bra.s	Obj81_Animate
000069A0                            ; ===========================================================================
000069A0                            
000069A0                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000069A0 4EB9 0000 0000             		jsr	SpeedToPos
000069A6 4EB9 0000 0000             		jsr	Sonic_Animate
000069AC 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000069B2                            ; ===========================================================================
000069B2                            
000069B2                            Obj81_Animate:				; XREF: Obj81_Index
000069B2 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000069B6 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000069B8 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000069BE 4EF9 0000 0000             		jmp	AnimateSprite
000069C4                            ; ===========================================================================
000069C4                            
000069C4                            Obj81_GetUp:				; XREF: Obj81_Animate
000069C4 5428 0024                  		addq.b	#2,$24(a0)
000069C8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000069D0 317C 0780 0002             		move.w	#$780,2(a0)
000069D6 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000069DC 4268 0014                  		clr.w	$14(a0)
000069E0 5168 000C                  		subq.w	#8,$C(a0)
000069E4 103C 00E0                  		move.b	#$E0,d0
000069E8 6100 A8E4                  		bsr.w	PlaySound_Special ; fade out music
000069EC                            
000069EC                            Obj81_Run:				; XREF: Obj81_Index
000069EC 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000069F2 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000069F4 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000069FA 6000                       		bra.s	Obj81_ShowRun
000069FC                            ; ===========================================================================
000069FC                            
000069FC                            Obj81_AddSpeed:				; XREF: Obj81_Run
000069FC 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006A02                            
00006A02                            Obj81_ShowRun:				; XREF: Obj81_Run
00006A02 4EB9 0000 0000             		jsr	SpeedToPos
00006A08 4EB9 0000 0000             		jsr	Sonic_Animate
00006A0E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006A14                            ; ===========================================================================
00006A14                            Ani_obj81:
00006A14                            	include "_anim\obj81.asm"
00006A14                            ; ---------------------------------------------------------------------------
00006A14                            ; Animation script - Sonic on the continue screen
00006A14                            ; ---------------------------------------------------------------------------
00006A14 0000                       		dc.w byte_504A-Ani_obj81
00006A16 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00006A22 00                         		even
00006A22 00                         		even
00006A22                            
00006A22                            ; ---------------------------------------------------------------------------
00006A22                            ; Sprite mappings - Continue screen
00006A22                            ; ---------------------------------------------------------------------------
00006A22                            Map_obj80:
00006A22                            	include "_maps\obj80.asm"
00006A22                            ; ---------------------------------------------------------------------------
00006A22                            ; Sprite mappings - Continue screen
00006A22                            ; ---------------------------------------------------------------------------
00006A22 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00006A26 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00006A2A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00006A2E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00006A32 0B                         byte_5066:	dc.b $B
00006A33 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006A38 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006A3D F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006A42 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006A47 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006A4C F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006A51 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006A56 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006A5B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006A60 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00006A65 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006A6A 03                         byte_509E:	dc.b 3
00006A6B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006A70 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A75 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A7A 03                         byte_50AE:	dc.b 3
00006A7B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006A80 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A85 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A8A 03                         byte_50BE:	dc.b 3
00006A8B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006A90 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006A95 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006A9A 02                         byte_50CE:	dc.b 2
00006A9B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006AA0 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006AA5 01                         byte_50D9:	dc.b 1
00006AA6 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00006AAB 01                         byte_50DF:	dc.b 1
00006AAC 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006AB2 00                         		even
00006AB2 00                         		even
00006AB2                            
00006AB2                            ; ===========================================================================
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            ; Ending sequence in Green Hill	Zone
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            
00006AB2                            EndingSequence:				; XREF: GameModeArray
00006AB2 103C 00E4                  		move.b	#$E4,d0
00006AB6 6100 A816                  		bsr.w	PlaySound_Special ; stop music
00006ABA 6100 B52A                  		bsr.w	Pal_FadeFrom
00006ABE 43F8 D000                  		lea	($FFFFD000).w,a1
00006AC2 7000                       		moveq	#0,d0
00006AC4 323C 07FF                  		move.w	#$7FF,d1
00006AC8                            
00006AC8                            End_ClrObjRam:
00006AC8 22C0                       		move.l	d0,(a1)+
00006ACA 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006ACE                            
00006ACE 43F8 F628                  		lea	($FFFFF628).w,a1
00006AD2 7000                       		moveq	#0,d0
00006AD4 323C 0015                  		move.w	#$15,d1
00006AD8                            
00006AD8                            End_ClrRam:
00006AD8 22C0                       		move.l	d0,(a1)+
00006ADA 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00006ADE                            
00006ADE 43F8 F700                  		lea	($FFFFF700).w,a1
00006AE2 7000                       		moveq	#0,d0
00006AE4 323C 003F                  		move.w	#$3F,d1
00006AE8                            
00006AE8                            End_ClrRam2:
00006AE8 22C0                       		move.l	d0,(a1)+
00006AEA 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006AEE                            
00006AEE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006AF2 7000                       		moveq	#0,d0
00006AF4 323C 0047                  		move.w	#$47,d1
00006AF8                            
00006AF8                            End_ClrRam3:
00006AF8 22C0                       		move.l	d0,(a1)+
00006AFA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006AFE                            
00006AFE 46FC 2700                  		move	#$2700,sr
00006B02 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006B06 0200 00BF                  		andi.b	#$BF,d0
00006B0A 33C0 00C0 0004             		move.w	d0,($C00004).l
00006B10 6100 A6AE                  		bsr.w	ClearScreen
00006B14 4DF9 00C0 0004             		lea	($C00004).l,a6
00006B1A 3CBC 8B03                  		move.w	#$8B03,(a6)
00006B1E 3CBC 8230                  		move.w	#$8230,(a6)
00006B22 3CBC 8407                  		move.w	#$8407,(a6)
00006B26 3CBC 857C                  		move.w	#$857C,(a6)
00006B2A 3CBC 9001                  		move.w	#$9001,(a6)
00006B2E 3CBC 8004                  		move.w	#$8004,(a6)
00006B32 3CBC 8720                  		move.w	#$8720,(a6)
00006B36 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006B3C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006B40 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006B46 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00006B4C 11FC 0000 FFFD             		move.b	#0,($FFFFFFFD).w	; puts a 0 in this flag
00006B52 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006B58 6700                       		beq.s	End_LoadData	; if yes, branch
00006B5A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00006B60 11FC 0001 FFFD             		move.b	#1,($FFFFFFFD).w	; puts a 1 in this flag
00006B66                            
00006B66                            End_LoadData:
00006B66 701C                       		moveq	#$1C,d0
00006B68 6100 AB88                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00006B6C 4EB9 0000 0000             		jsr	Hud_Base
00006B72 6100 0000                  		bsr.w	LevelSizeLoad
00006B76 6100 0000                  		bsr.w	DeformBgLayer
00006B7A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B80 6100 0000                  		bsr.w	MainLoadBlockLoad
00006B84 6100 0000                  		bsr.w	LoadTilesFromStart
00006B88                            	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00006B88 21FC 0000 0000 FFD0        		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
00006B90 21FC 0000 0000 FFD4        		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
00006B98 46FC 2300                  		move	#$2300,sr
00006B9C 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006BA2 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006BA6 6100 ACFA                  		bsr.w	KosDec
00006BAA 7003                       		moveq	#3,d0
00006BAC 6100 B6E6                  		bsr.w	PalLoad1	; load Sonic's Palette
00006BB0 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
00006BB4 43F9 0000 50F4             		lea	(MusicList_Endings).l,a1 ; load Music Playlist for Endings
00006BBA 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00006BBE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00006BC4 6700                       		beq.s	End_LoadSonic	; if not, branch
00006BC6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006BCC                            
00006BCC                            End_LoadSonic:
00006BCC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00006BD2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00006BD8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00006BDE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00006BE4 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006BEA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006BF0 4EB9 0000 0000             		jsr	ObjPosLoad
00006BF6 4EB9 0000 0000             		jsr	ObjectsLoad
00006BFC 4EB9 0000 0000             		jsr	BuildSprites
00006C02 7000                       		moveq	#0,d0
00006C04 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00006C08 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006C0C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006C10 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00006C14 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006C18 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006C1C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006C20 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00006C24 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006C28 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006C2C 6100 EE9E                  		bsr.w	OscillateNumInit
00006C30 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006C36 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006C3C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00006C42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006C48 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C4E 6100 BEF8                  		bsr.w	DelayProgram
00006C52 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006C56 0000 0040                  		ori.b	#$40,d0
00006C5A 33C0 00C0 0004             		move.w	d0,($C00004).l
00006C60 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006C66 6100 B2C8                  		bsr.w	Pal_FadeTo
00006C6A                            
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            ; Main ending sequence loop
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            
00006C6A                            End_MainLoop:
00006C6A 6100 A686                  		bsr.w	PauseGame
00006C6E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006C74 6100 BED2                  		bsr.w	DelayProgram
00006C78 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006C7C 6100 0000                  		bsr.w	End_MoveSonic
00006C80 4EB9 0000 0000             		jsr	ObjectsLoad
00006C86 6100 0000                  		bsr.w	DeformBgLayer
00006C8A 4EB9 0000 0000             		jsr	BuildSprites
00006C90 4EB9 0000 0000             		jsr	ObjPosLoad
00006C96 6100 AE28                  		bsr.w	PalCycle_Load
00006C9A 6100 EE86                  		bsr.w	OscillateNumDo
00006C9E 6100 EF12                  		bsr.w	ChangeRingFrame
00006CA2 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00006CA8 6700                       		beq.s	loc_52DA	; if yes, branch
00006CAA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006CB0 4240                       		clr.w	d0
00006CB2 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
00006CB6 43F9 0000 50F2             		lea	(MusicList_Credits).l,a1	; load Music Playlist for credits
00006CBC 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00006CC0                            
00006CC0 6100 A60C                  		bsr.w	PlaySound_Special ; play credits music
00006CC4 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006CCA 4E75                       		rts
00006CCC                            ; ===========================================================================
00006CCC                            
00006CCC                            loc_52DA:
00006CCC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006CD0 6700 FF98                  		beq.w	End_MainLoop	; if not, branch
00006CD4                            
00006CD4 4278 FE02                  		clr.w	($FFFFFE02).w
00006CD8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006CDE 4278 F794                  		clr.w	($FFFFF794).w
00006CE2                            
00006CE2                            End_AllEmlds:				; XREF: loc_5334
00006CE2 6100 A60E                  		bsr.w	PauseGame
00006CE6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006CEC 6100 BE5A                  		bsr.w	DelayProgram
00006CF0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006CF4 6100 0000                  		bsr.w	End_MoveSonic
00006CF8 4EB9 0000 0000             		jsr	ObjectsLoad
00006CFE 6100 0000                  		bsr.w	DeformBgLayer
00006D02 4EB9 0000 0000             		jsr	BuildSprites
00006D08 4EB9 0000 0000             		jsr	ObjPosLoad
00006D0E 6100 EE12                  		bsr.w	OscillateNumDo
00006D12 6100 EE9E                  		bsr.w	ChangeRingFrame
00006D16 5378 F794                  		subq.w	#1,($FFFFF794).w
00006D1A 6A00                       		bpl.s	loc_5334
00006D1C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006D22 6100 B410                  		bsr.w	Pal_ToWhite
00006D26                            
00006D26                            loc_5334:
00006D26 4A78 FE02                  		tst.w	($FFFFFE02).w
00006D2A 6700 FFB6                  		beq.w	End_AllEmlds
00006D2E 4278 FE02                  		clr.w	($FFFFFE02).w
00006D32 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006D38 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D3E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D44 47F8 F700                  		lea	($FFFFF700).w,a3
00006D48 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00006D4C 343C 4000                  		move.w	#$4000,d2
00006D50 6100 0000                  		bsr.w	LoadTilesFromStart2
00006D54 7013                       		moveq	#$13,d0
00006D56 6100 B53C                  		bsr.w	PalLoad1	; load ending Palette
00006D5A 6100 B30C                  		bsr.w	Pal_MakeWhite
00006D5E 6000 FF0A                  		bra.w	End_MainLoop
00006D62                            
00006D62                            ; ---------------------------------------------------------------------------
00006D62                            ; Subroutine controlling Sonic on the ending sequence
00006D62                            ; ---------------------------------------------------------------------------
00006D62                            
00006D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D62                            
00006D62                            
00006D62                            End_MoveSonic:				; XREF: End_MainLoop
00006D62 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006D66 6600                       		bne.s	End_MoveSonic2
00006D68 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00006D6E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00006D70 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D74 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006D7A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00006D80 4E75                       		rts	
00006D82                            ; ===========================================================================
00006D82                            
00006D82                            End_MoveSonic2:				; XREF: End_MoveSonic
00006D82 5500                       		subq.b	#2,d0
00006D84 6600                       		bne.s	End_MoveSonic3
00006D86 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00006D8C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00006D8E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006D92 7000                       		moveq	#0,d0
00006D94 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006D98 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006D9C 31C0 D014                  		move.w	d0,($FFFFD014).w
00006DA0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006DA6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006DAC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006DB2 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006DB8 4E75                       		rts	
00006DBA                            ; ===========================================================================
00006DBA                            
00006DBA                            End_MoveSonic3:				; XREF: End_MoveSonic
00006DBA 5500                       		subq.b	#2,d0
00006DBC 6600                       		bne.s	End_MoveSonExit
00006DBE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006DC2 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006DC8 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006DCE 4278 D024                  		clr.w	($FFFFD024).w
00006DD2                            
00006DD2                            End_MoveSonExit:
00006DD2 4E75                       		rts	
00006DD4                            ; End of function End_MoveSonic
00006DD4                            
00006DD4                            ; ===========================================================================
00006DD4                            ; ---------------------------------------------------------------------------
00006DD4                            ; Object 87 - Sonic on ending sequence
00006DD4                            ; ---------------------------------------------------------------------------
00006DD4                            
00006DD4                            Obj87:					; XREF: Obj_Index
00006DD4 7000                       		moveq	#0,d0
00006DD6 1028 0025                  		move.b	$25(a0),d0
00006DDA 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006DDE 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00006DE2 4EF9 0000 0000             		jmp	DisplaySprite
00006DE8                            ; ===========================================================================
00006DE8 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006DEC 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00006DF0 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006DF4 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006DF8 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006DFC                            ; ===========================================================================
00006DFC                            
00006DFC                            Obj87_Main:				; XREF: Obj87_Index
00006DFC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006E02 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006E04 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006E0A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00006E10 4E75                       		rts	
00006E12                            ; ===========================================================================
00006E12                            
00006E12                            Obj87_Main2:				; XREF: Obj87_Main
00006E12 5428 0025                  		addq.b	#2,$25(a0)
00006E16 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006E1E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006E24 117C 0004 0001             		move.b	#4,1(a0)
00006E2A 4228 0022                  		clr.b	$22(a0)
00006E2E 117C 0002 0018             		move.b	#2,$18(a0)
00006E34 117C 0000 001A             		move.b	#0,$1A(a0)
00006E3A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00006E40                            
00006E40                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00006E40 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006E44 6600                       		bne.s	Obj87_Wait
00006E46 5428 0025                  		addq.b	#2,$25(a0)
00006E4A 317C 0001 001C             		move.w	#1,$1C(a0)
00006E50 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006E56                            
00006E56                            Obj87_Wait:
00006E56 4E75                       		rts	
00006E58                            ; ===========================================================================
00006E58                            
00006E58                            Obj87_LookUp:				; XREF: Obj87_Index
00006E58 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00006E60 6600                       		bne.s	locret_5480
00006E62 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006E68 317C 005A 0030             		move.w	#$5A,$30(a0)
00006E6E 5428 0025                  		addq.b	#2,$25(a0)
00006E72                            
00006E72                            locret_5480:
00006E72 4E75                       		rts	
00006E74                            ; ===========================================================================
00006E74                            
00006E74                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006E74 5368 0030                  		subq.w	#1,$30(a0)
00006E78 6600                       		bne.s	Obj87_Wait2
00006E7A 43F8 D400                  		lea	($FFFFD400).w,a1
00006E7E 323C 00FF                  		move.w	#$FF,d1
00006E82                            
00006E82                            Obj87_ClrLoop:
00006E82 4299                       		clr.l	(a1)+
00006E84 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006E88 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00006E8E 5428 0025                  		addq.b	#2,$25(a0)
00006E92 117C 0001 001C             		move.b	#1,$1C(a0)
00006E98 317C 003C 0030             		move.w	#$3C,$30(a0)
00006E9E                            
00006E9E                            Obj87_Wait2:
00006E9E 4E75                       		rts	
00006EA0                            ; ===========================================================================
00006EA0                            
00006EA0                            Obj87_MakeLogo:				; XREF: Obj87_Index
00006EA0 5368 0030                  		subq.w	#1,$30(a0)
00006EA4 6600                       		bne.s	Obj87_Wait3
00006EA6 5428 0025                  		addq.b	#2,$25(a0)
00006EAA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00006EB0 117C 0002 001C             		move.b	#2,$1C(a0)
00006EB6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006EBC                            
00006EBC                            Obj87_Wait3:
00006EBC 4E75                       		rts	
00006EBE                            ; ===========================================================================
00006EBE                            
00006EBE                            Obj87_Animate:				; XREF: Obj87_Index
00006EBE 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006EC4 4EF9 0000 0000             		jmp	AnimateSprite
00006ECA                            ; ===========================================================================
00006ECA                            
00006ECA                            Obj87_Leap:				; XREF: Obj87_Index
00006ECA 5368 0030                  		subq.w	#1,$30(a0)
00006ECE 6600                       		bne.s	Obj87_Wait4
00006ED0 5428 0025                  		addq.b	#2,$25(a0)
00006ED4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006EDC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006EE2 117C 0004 0001             		move.b	#4,1(a0)
00006EE8 4228 0022                  		clr.b	$22(a0)
00006EEC 117C 0002 0018             		move.b	#2,$18(a0)
00006EF2 117C 0005 001A             		move.b	#5,$1A(a0)
00006EF8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006EFE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006F04 60B8                       		bra.s	Obj87_Animate
00006F06                            ; ===========================================================================
00006F06                            
00006F06                            Obj87_Wait4:				; XREF: Obj87_Leap
00006F06 4E75                       		rts	
00006F08                            ; ===========================================================================
00006F08                            Ani_obj87:
00006F08                            	include "_anim\obj87.asm"
00006F08                            ; ---------------------------------------------------------------------------
00006F08                            ; Animation script - Sonic on the ending sequence
00006F08                            ; ---------------------------------------------------------------------------
00006F08 0000                       		dc.w byte_551C-Ani_obj87
00006F0A 0000                       		dc.w byte_552A-Ani_obj87
00006F0C 0000                       		dc.w byte_5534-Ani_obj87
00006F0E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006F1C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006F26 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006F2E                            		even
00006F2E                            		even
00006F2E                            
00006F2E                            ; ===========================================================================
00006F2E                            ; ---------------------------------------------------------------------------
00006F2E                            ; Object 88 - chaos emeralds on	the ending sequence
00006F2E                            ; ---------------------------------------------------------------------------
00006F2E                            
00006F2E                            Obj88:					; XREF: Obj_Index
00006F2E 7000                       		moveq	#0,d0
00006F30 1028 0024                  		move.b	$24(a0),d0
00006F34 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006F38 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006F3C 4EF9 0000 0000             		jmp	DisplaySprite
00006F42                            ; ===========================================================================
00006F42 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006F44 0000                       		dc.w Obj88_Move-Obj88_Index
00006F46                            ; ===========================================================================
00006F46                            
00006F46                            Obj88_Main:				; XREF: Obj88_Index
00006F46 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006F4C 6700                       		beq.s	Obj88_Main2
00006F4E 588F                       		addq.l	#4,sp
00006F50 4E75                       		rts	
00006F52                            ; ===========================================================================
00006F52                            
00006F52                            Obj88_Main2:				; XREF: Obj88_Main
00006F52 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006F58 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00006F5E 2248                       		movea.l	a0,a1
00006F60 7600                       		moveq	#0,d3
00006F62 7401                       		moveq	#1,d2
00006F64 7205                       		moveq	#5,d1
00006F66                            
00006F66                            Obj88_MainLoop:
00006F66 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006F6A 5429 0024                  		addq.b	#2,$24(a1)
00006F6E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006F76 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006F7C 137C 0004 0001             		move.b	#4,1(a1)
00006F82 137C 0001 0018             		move.b	#1,$18(a1)
00006F88 3368 0008 0038             		move.w	8(a0),$38(a1)
00006F8E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006F94 1342 001C                  		move.b	d2,$1C(a1)
00006F98 1342 001A                  		move.b	d2,$1A(a1)
00006F9C 5202                       		addq.b	#1,d2
00006F9E 1343 0026                  		move.b	d3,$26(a1)
00006FA2 0603 002A                  		addi.b	#$2A,d3
00006FA6 43E9 0040                  		lea	$40(a1),a1
00006FAA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006FAE                            
00006FAE                            Obj88_Move:				; XREF: Obj88_Index
00006FAE 3028 003E                  		move.w	$3E(a0),d0
00006FB2 D168 0026                  		add.w	d0,$26(a0)
00006FB6 1028 0026                  		move.b	$26(a0),d0
00006FBA 4EB9 0000 2B7A             		jsr	(CalcSine).l
00006FC0 7800                       		moveq	#0,d4
00006FC2 1828 003C                  		move.b	$3C(a0),d4
00006FC6 C3C4                       		muls.w	d4,d1
00006FC8 E081                       		asr.l	#8,d1
00006FCA C1C4                       		muls.w	d4,d0
00006FCC E080                       		asr.l	#8,d0
00006FCE D268 0038                  		add.w	$38(a0),d1
00006FD2 D068 003A                  		add.w	$3A(a0),d0
00006FD6 3141 0008                  		move.w	d1,8(a0)
00006FDA 3140 000C                  		move.w	d0,$C(a0)
00006FDE 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006FE4 6700                       		beq.s	loc_55FA
00006FE6 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006FEC                            
00006FEC                            loc_55FA:
00006FEC 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006FF2 6700                       		beq.s	loc_5608
00006FF4 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006FFA                            
00006FFA                            loc_5608:
00006FFA 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00007000 6700                       		beq.s	locret_5614
00007002 5368 003A                  		subq.w	#1,$3A(a0)
00007006                            
00007006                            locret_5614:
00007006 4E75                       		rts	
00007008                            ; ===========================================================================
00007008                            ; ---------------------------------------------------------------------------
00007008                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00007008                            ; ---------------------------------------------------------------------------
00007008                            
00007008                            Obj89:					; XREF: Obj_Index
00007008 7000                       		moveq	#0,d0
0000700A 1028 0024                  		move.b	$24(a0),d0
0000700E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00007012 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00007016                            ; ===========================================================================
00007016 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00007018 0000                       		dc.w Obj89_Move-Obj89_Index
0000701A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000701C                            ; ===========================================================================
0000701C                            
0000701C                            Obj89_Main:				; XREF: Obj89_Index
0000701C 5428 0024                  		addq.b	#2,$24(a0)
00007020 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00007026 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000702C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00007034 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000703A 117C 0000 0001             		move.b	#0,1(a0)
00007040 117C 0000 0018             		move.b	#0,$18(a0)
00007046                            
00007046                            Obj89_Move:				; XREF: Obj89_Index
00007046 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000704C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000704E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00007054 4EB9 0000 0000             		jsr	DisplaySprite
0000705A                            ; ===========================================================================
0000705A                            
0000705A                            Obj89_Delay:				; XREF: Obj89_Move
0000705A 5428 0024                  		addq.b	#2,$24(a0)
0000705E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00007064                            
00007064                            Obj89_GotoCredits:			; XREF: Obj89_Index
00007064 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007068 6A00                       		bpl.s	Obj89_Display
0000706A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00007070                            
00007070                            Obj89_Display:
00007070 4EB9 0000 0000             		jsr	DisplaySprite
00007076                            ; ===========================================================================
00007076                            ; ---------------------------------------------------------------------------
00007076                            ; Sprite mappings - Sonic on the ending	sequence
00007076                            ; ---------------------------------------------------------------------------
00007076                            Map_obj87:
00007076                            	include "_maps\obj87.asm"
00007076                            ; ---------------------------------------------------------------------------
00007076                            ; Sprite mappings - Sonic on the ending	sequence
00007076                            ; ---------------------------------------------------------------------------
00007076 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000707A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000707E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00007082 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00007086 02                         byte_5690:	dc.b 2
00007087 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000708C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00007091 03                         byte_569B:	dc.b 3
00007092 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00007097 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000709C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000070A1 02                         byte_56AB:	dc.b 2
000070A2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000070A7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000070AC 02                         byte_56B6:	dc.b 2
000070AD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000070B2 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000070B7 02                         byte_56C1:	dc.b 2
000070B8 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000070BD FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000070C2 03                         byte_56CC:	dc.b 3
000070C3 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000070C8 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000070CD 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000070D2 07                         byte_56DC:	dc.b 7
000070D3 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000070D8 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000070DD BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000070E2 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000070E7 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000070EC E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000070F1 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000070F6 18                         byte_5700:	dc.b $18
000070F7 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000070FC 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00007101 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00007106 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000710B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00007110 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00007115 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000711A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000711F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00007124 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00007129 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000712E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00007133 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00007138 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000713D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00007142 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00007147 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000714C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00007151 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00007156 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000715B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00007160 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00007165 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000716A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00007170 00                         		even
00007170 00                         		even
00007170                            
00007170                            ; ---------------------------------------------------------------------------
00007170                            ; Sprite mappings - chaos emeralds on the ending sequence
00007170                            ; ---------------------------------------------------------------------------
00007170                            Map_obj88:
00007170                            	include "_maps\obj88.asm"
00007170                            ; ---------------------------------------------------------------------------
00007170                            ; Sprite mappings - chaos emeralds on the ending sequence
00007170                            ; ---------------------------------------------------------------------------
00007170 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00007174 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00007178 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000717C 0000                       		dc.w byte_57AC-Map_obj88
0000717E 01                         byte_5788:	dc.b 1
0000717F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007184 01                         byte_578E:	dc.b 1
00007185 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000718A 01                         byte_5794:	dc.b 1
0000718B F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00007190 01                         byte_579A:	dc.b 1
00007191 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00007196 01                         byte_57A0:	dc.b 1
00007197 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000719C 01                         byte_57A6:	dc.b 1
0000719D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000071A2 01                         byte_57AC:	dc.b 1
000071A3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000071A8                            		even
000071A8                            		even
000071A8                            
000071A8                            ; ---------------------------------------------------------------------------
000071A8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071A8                            ; ---------------------------------------------------------------------------
000071A8                            Map_obj89:
000071A8                            	include "_maps\obj89.asm"
000071A8                            ; ---------------------------------------------------------------------------
000071A8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000071A8                            ; ---------------------------------------------------------------------------
000071A8 0000                       		dc.w byte_57B4-Map_obj89
000071AA 03                         byte_57B4:	dc.b 3
000071AB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000071B0 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000071B5 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000071BA                            		even
000071BA                            		even
000071BA                            
000071BA                            ; ===========================================================================
000071BA                            ; ---------------------------------------------------------------------------
000071BA                            ; Credits ending sequence
000071BA                            ; ---------------------------------------------------------------------------
000071BA                            
000071BA                            Credits:				; XREF: GameModeArray
000071BA 6100 A428                  		bsr.w	ClearPLC
000071BE 6100 AE26                  		bsr.w	Pal_FadeFrom
000071C2 4DF9 00C0 0004             		lea	($C00004).l,a6
000071C8 3CBC 8004                  		move.w	#$8004,(a6)
000071CC 3CBC 8230                  		move.w	#$8230,(a6)
000071D0 3CBC 8407                  		move.w	#$8407,(a6)
000071D4 3CBC 9001                  		move.w	#$9001,(a6)
000071D8 3CBC 9200                  		move.w	#$9200,(a6)
000071DC 3CBC 8B03                  		move.w	#$8B03,(a6)
000071E0 3CBC 8720                  		move.w	#$8720,(a6)
000071E4 4238 F64E                  		clr.b	($FFFFF64E).w
000071E8 6100 9FD6                  		bsr.w	ClearScreen
000071EC 43F8 D000                  		lea	($FFFFD000).w,a1
000071F0 7000                       		moveq	#0,d0
000071F2 323C 07FF                  		move.w	#$7FF,d1
000071F6                            
000071F6                            Cred_ClrObjRam:
000071F6 22C0                       		move.l	d0,(a1)+
000071F8 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000071FC                            
000071FC 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00007206 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000720C 6100 A250                  		bsr.w	NemDec
00007210 43F8 FB80                  		lea	($FFFFFB80).w,a1
00007214 7000                       		moveq	#0,d0
00007216 323C 001F                  		move.w	#$1F,d1
0000721A                            
0000721A                            Cred_ClrPalette:
0000721A 22C0                       		move.l	d0,(a1)+
0000721C 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
00007220                            
00007220 7003                       		moveq	#3,d0
00007222 6100 B070                  		bsr.w	PalLoad1	; load Sonic's Palette
00007226 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000722C 4EB9 0000 0000             		jsr	ObjectsLoad
00007232 4EB9 0000 0000             		jsr	BuildSprites
00007238 6100 0000                  		bsr.w	EndingDemoLoad
0000723C 7000                       		moveq	#0,d0
0000723E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007242 E948                       		lsl.w	#4,d0
00007244 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000724A 45F2 0000                  		lea	(a2,d0.w),a2
0000724E 7000                       		moveq	#0,d0
00007250 1012                       		move.b	(a2),d0
00007252 6700                       		beq.s	loc_5862
00007254 6100 A330                  		bsr.w	LoadPLC		; load level patterns
00007258                            
00007258                            loc_5862:
00007258 7001                       		moveq	#1,d0
0000725A 6100 A32A                  		bsr.w	LoadPLC		; load standard	level patterns
0000725E 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00007264 6100 ACCA                  		bsr.w	Pal_FadeTo
00007268                            
00007268                            Cred_WaitLoop:
00007268 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000726E 6100 B8D8                  		bsr.w	DelayProgram
00007272 6100 A37E                  		bsr.w	RunPLC_RAM
00007276 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
0000727A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000727C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00007280 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00007282 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00007288 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000728C 4E75                       		rts	
0000728E                            
0000728E                            ; ---------------------------------------------------------------------------
0000728E                            ; Ending sequence demo loading subroutine
0000728E                            ; ---------------------------------------------------------------------------
0000728E                            
0000728E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728E                            
0000728E                            
0000728E                            EndingDemoLoad:				; XREF: Credits
0000728E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007292 0240 000F                  		andi.w	#$F,d0
00007296 D040                       		add.w	d0,d0
00007298 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000729C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000072A0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000072A4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000072AA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000072AC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000072B2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000072B8 11FC 0004 FE12             		move.b	#4,($FFFFFE12).w ; set lives to	3
000072BE 7000                       		moveq	#0,d0
000072C0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000072C4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000072C8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000072CC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000072D0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000072D6 6600                       		bne.s	EndDemo_Exit	; if not, branch
000072D8 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000072DE 45F8 FE30                  		lea	($FFFFFE30).w,a2
000072E2 303C 0008                  		move.w	#8,d0
000072E6                            
000072E6                            EndDemo_LampLoad:
000072E6 24D9                       		move.l	(a1)+,(a2)+
000072E8 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000072EC                            
000072EC                            EndDemo_Exit:
000072EC 4E75                       		rts	
000072EE                            ; End of function EndingDemoLoad
000072EE                            
000072EE                            ; ===========================================================================
000072EE                            ; ---------------------------------------------------------------------------
000072EE                            ; Levels used in the end sequence demos
000072EE                            ; ---------------------------------------------------------------------------
000072EE                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
000072FE                            
000072FE                            ; ---------------------------------------------------------------------------
000072FE                            ; Lamppost variables in the end sequence demo (Star Light Zone)
000072FE                            ; ---------------------------------------------------------------------------
000072FE                            EndDemo_LampVar:
000072FE 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00007300 0A00 062C 000D             		dc.w $A00, $62C, $D
00007306 0000 0000                  		dc.l 0
0000730A 0000                       		dc.b 0,	0
0000730C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00007320 0101                       		dc.b 1,	1
00007322                            ; ===========================================================================
00007322                            ; ---------------------------------------------------------------------------
00007322                            ; "TRY AGAIN" and "END"	screens
00007322                            ; ---------------------------------------------------------------------------
00007322                            
00007322                            TryAgainEnd:				; XREF: Credits
00007322 6100 A2C0                  		bsr.w	ClearPLC
00007326 6100 ACBE                  		bsr.w	Pal_FadeFrom
0000732A 4DF9 00C0 0004             		lea	($C00004).l,a6
00007330 3CBC 8004                  		move.w	#$8004,(a6)
00007334 3CBC 8230                  		move.w	#$8230,(a6)
00007338 3CBC 8407                  		move.w	#$8407,(a6)
0000733C 3CBC 9001                  		move.w	#$9001,(a6)
00007340 3CBC 9200                  		move.w	#$9200,(a6)
00007344 3CBC 8B03                  		move.w	#$8B03,(a6)
00007348 3CBC 8720                  		move.w	#$8720,(a6)
0000734C 4238 F64E                  		clr.b	($FFFFF64E).w
00007350 6100 9E6E                  		bsr.w	ClearScreen
00007354 43F8 D000                  		lea	($FFFFD000).w,a1
00007358 7000                       		moveq	#0,d0
0000735A 323C 07FF                  		move.w	#$7FF,d1
0000735E                            
0000735E                            TryAg_ClrObjRam:
0000735E 22C0                       		move.l	d0,(a1)+
00007360 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00007364                            
00007364 701D                       		moveq	#$1D,d0
00007366 6100 A38A                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000736A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000736E 7000                       		moveq	#0,d0
00007370 323C 001F                  		move.w	#$1F,d1
00007374                            
00007374                            TryAg_ClrPalette:
00007374 22C0                       		move.l	d0,(a1)+
00007376 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
0000737A                            
0000737A 7013                       		moveq	#$13,d0
0000737C 6100 AF16                  		bsr.w	PalLoad1	; load ending Palette
00007380 4278 FBC0                  		clr.w	($FFFFFBC0).w
00007384 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000738A 4EB9 0000 0000             		jsr	ObjectsLoad
00007390 4EB9 0000 0000             		jsr	BuildSprites
00007396 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000739C 6100 AB92                  		bsr.w	Pal_FadeTo
000073A0                            
000073A0                            ; ---------------------------------------------------------------------------
000073A0                            ; "TRY AGAIN" and "END"	screen main loop
000073A0                            ; ---------------------------------------------------------------------------
000073A0                            TryAg_MainLoop:
000073A0 6100 9F50                  		bsr.w	PauseGame
000073A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000073AA 6100 B79C                  		bsr.w	DelayProgram
000073AE 4EB9 0000 0000             		jsr	ObjectsLoad
000073B4 4EB9 0000 0000             		jsr	BuildSprites
000073BA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000073C0 6600                       		bne.s	TryAg_Exit	; if yes, branch
000073C2 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000073C6 6700                       		beq.s	TryAg_Exit	; if yes, branch
000073C8 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000073CE 67D0                       		beq.s	TryAg_MainLoop
000073D0                            
000073D0                            TryAg_Exit:
000073D0 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to Sega screen
000073D6 4E75                       		rts	
000073D8                            
000073D8                            ; ===========================================================================
000073D8                            ; ---------------------------------------------------------------------------
000073D8                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000073D8                            ; ---------------------------------------------------------------------------
000073D8                            
000073D8                            Obj8B:					; XREF: Obj_Index
000073D8 7000                       		moveq	#0,d0
000073DA 1028 0024                  		move.b	$24(a0),d0
000073DE 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000073E2 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000073E6 4EF9 0000 0000             		jmp	DisplaySprite
000073EC                            ; ===========================================================================
000073EC 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000073EE 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000073F0 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000073F2 0000                       		dc.w loc_5A8E-Obj8B_Index
000073F4                            ; ===========================================================================
000073F4                            
000073F4                            Obj8B_Main:				; XREF: Obj8B_Index
000073F4 5428 0024                  		addq.b	#2,$24(a0)
000073F8 317C 0120 0008             		move.w	#$120,8(a0)
000073FE 317C 00F4 000A             		move.w	#$F4,$A(a0)
00007404 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000740C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007412 117C 0000 0001             		move.b	#0,1(a0)
00007418 117C 0002 0018             		move.b	#2,$18(a0)
0000741E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00007424 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000742A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000742C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00007432 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00007438 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000743E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00007444                            
00007444                            Obj8B_Animate:				; XREF: Obj8B_Index
00007444 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000744A 4EF9 0000 0000             		jmp	AnimateSprite
00007450                            ; ===========================================================================
00007450                            
00007450                            Obj8B_Juggle:				; XREF: Obj8B_Index
00007450 5428 0024                  		addq.b	#2,$24(a0)
00007454 7002                       		moveq	#2,d0
00007456 0828 0000 001C             		btst	#0,$1C(a0)
0000745C 6700                       		beq.s	loc_5A6A
0000745E 4440                       		neg.w	d0
00007460                            
00007460                            loc_5A6A:
00007460 43F8 D800                  		lea	($FFFFD800).w,a1
00007464 7205                       		moveq	#5,d1
00007466                            
00007466                            loc_5A70:
00007466 1340 003E                  		move.b	d0,$3E(a1)
0000746A 3400                       		move.w	d0,d2
0000746C E742                       		asl.w	#3,d2
0000746E D529 0026                  		add.b	d2,$26(a1)
00007472 43E9 0040                  		lea	$40(a1),a1
00007476 51C9 FFEE                  		dbf	d1,loc_5A70
0000747A 5228 001A                  		addq.b	#1,$1A(a0)
0000747E 317C 0070 0030             		move.w	#112,$30(a0)
00007484                            
00007484                            loc_5A8E:				; XREF: Obj8B_Index
00007484 5368 0030                  		subq.w	#1,$30(a0)
00007488 6A00                       		bpl.s	locret_5AA0
0000748A 0868 0000 001C             		bchg	#0,$1C(a0)
00007490 117C 0002 0024             		move.b	#2,$24(a0)
00007496                            
00007496                            locret_5AA0:
00007496 4E75                       		rts	
00007498                            ; ===========================================================================
00007498                            Ani_obj8B:
00007498                            	include "_anim\obj8B.asm"
00007498                            ; ---------------------------------------------------------------------------
00007498                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00007498                            ; ---------------------------------------------------------------------------
00007498 0000                       		dc.w byte_5AA8-Ani_obj8B
0000749A 0000                       		dc.w byte_5AAC-Ani_obj8B
0000749C 0000                       		dc.w byte_5AB0-Ani_obj8B
0000749E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000074A2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000074A6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000074B8                            		even
000074B8                            		even
000074B8                            
000074B8                            ; ===========================================================================
000074B8                            ; ---------------------------------------------------------------------------
000074B8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000074B8                            ; ---------------------------------------------------------------------------
000074B8                            
000074B8                            Obj8C:					; XREF: Obj_Index
000074B8 7000                       		moveq	#0,d0
000074BA 1028 0024                  		move.b	$24(a0),d0
000074BE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000074C2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000074C6 4EF9 0000 0000             		jmp	DisplaySprite
000074CC                            ; ===========================================================================
000074CC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000074CE 0000                       		dc.w Obj8C_Move-Obj8C_Index
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            Obj8C_Main:				; XREF: Obj8C_Index
000074D0 2248                       		movea.l	a0,a1
000074D2 7400                       		moveq	#0,d2
000074D4 7600                       		moveq	#0,d3
000074D6 7205                       		moveq	#5,d1
000074D8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000074DC                            
000074DC                            Obj8C_MakeEms:				; XREF: loc_5B42
000074DC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000074E0 5429 0024                  		addq.b	#2,$24(a1)
000074E4 237C 0000 7170 0004        		move.l	#Map_obj88,4(a1)
000074EC 337C 03C5 0002             		move.w	#$3C5,2(a1)
000074F2 137C 0000 0001             		move.b	#0,1(a1)
000074F8 137C 0001 0018             		move.b	#1,$18(a1)
000074FE 337C 0104 0008             		move.w	#$104,8(a1)
00007504 337C 0120 0038             		move.w	#$120,$38(a1)
0000750A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00007510 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00007516 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000751C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00007520                            
00007520                            Obj8C_ChkEms:
00007520 7000                       		moveq	#0,d0
00007522 1038 FE57                  		move.b	($FFFFFE57).w,d0
00007526 5340                       		subq.w	#1,d0
00007528 6500                       		bcs.s	loc_5B42
0000752A                            
0000752A                            Obj8C_ChkEmLoop:
0000752A B433 0000                  		cmp.b	(a3,d0.w),d2
0000752E 6600                       		bne.s	loc_5B3E
00007530 5202                       		addq.b	#1,d2
00007532 60EC                       		bra.s	Obj8C_ChkEms
00007534                            ; ===========================================================================
00007534                            
00007534                            loc_5B3E:
00007534 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00007538                            
00007538                            loc_5B42:
00007538 1342 001A                  		move.b	d2,$1A(a1)
0000753C 5229 001A                  		addq.b	#1,$1A(a1)
00007540 5202                       		addq.b	#1,d2
00007542 137C 0080 0026             		move.b	#$80,$26(a1)
00007548 1343 001E                  		move.b	d3,$1E(a1)
0000754C 1343 001F                  		move.b	d3,$1F(a1)
00007550 0643 000A                  		addi.w	#$A,d3
00007554 43E9 0040                  		lea	$40(a1),a1
00007558 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000755C                            
0000755C                            Obj8C_Move:				; XREF: Obj8C_Index
0000755C 4A68 003E                  		tst.w	$3E(a0)
00007560 6700                       		beq.s	locret_5BBA
00007562 4A28 001E                  		tst.b	$1E(a0)
00007566 6700                       		beq.s	loc_5B78
00007568 5328 001E                  		subq.b	#1,$1E(a0)
0000756C 6600                       		bne.s	loc_5B80
0000756E                            
0000756E                            loc_5B78:
0000756E 3028 003E                  		move.w	$3E(a0),d0
00007572 D168 0026                  		add.w	d0,$26(a0)
00007576                            
00007576                            loc_5B80:
00007576 1028 0026                  		move.b	$26(a0),d0
0000757A 6700                       		beq.s	loc_5B8C
0000757C 0C00 0080                  		cmpi.b	#$80,d0
00007580 6600                       		bne.s	loc_5B96
00007582                            
00007582                            loc_5B8C:
00007582 4268 003E                  		clr.w	$3E(a0)
00007586 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000758C                            
0000758C                            loc_5B96:
0000758C 4EB9 0000 2B7A             		jsr	(CalcSine).l
00007592 7800                       		moveq	#0,d4
00007594 1828 003C                  		move.b	$3C(a0),d4
00007598 C3C4                       		muls.w	d4,d1
0000759A E081                       		asr.l	#8,d1
0000759C C1C4                       		muls.w	d4,d0
0000759E E080                       		asr.l	#8,d0
000075A0 D268 0038                  		add.w	$38(a0),d1
000075A4 D068 003A                  		add.w	$3A(a0),d0
000075A8 3141 0008                  		move.w	d1,8(a0)
000075AC 3140 000A                  		move.w	d0,$A(a0)
000075B0                            
000075B0                            locret_5BBA:
000075B0 4E75                       		rts	
000075B2                            ; ===========================================================================
000075B2                            ; ---------------------------------------------------------------------------
000075B2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000075B2                            ; ---------------------------------------------------------------------------
000075B2                            Map_obj8B:
000075B2                            	include "_maps\obj8B.asm"
000075B2                            ; ---------------------------------------------------------------------------
000075B2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000075B2                            ; ---------------------------------------------------------------------------
000075B2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000075B6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000075BA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000075BE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000075C2 08                         byte_5BCC:	dc.b 8
000075C3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000075C8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000075CD E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000075D2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000075D7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000075DC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000075E1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000075E6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000075EB 08                         byte_5BF5:	dc.b 8
000075EC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000075F1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000075F6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000075FB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00007600 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007605 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000760A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000760F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007614 08                         byte_5C1E:	dc.b 8
00007615 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000761A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000761F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00007624 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00007629 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000762E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00007633 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007638 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000763D 08                         byte_5C47:	dc.b 8
0000763E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00007643 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00007648 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000764D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00007652 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00007657 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000765C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00007661 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00007666 0C                         byte_5C70:	dc.b $C
00007667 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000766C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00007671 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00007676 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000767B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00007680 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00007685 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000768A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000768F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00007694 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00007699 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000769E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000076A3 0A                         byte_5CAD:	dc.b $A
000076A4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000076A9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000076AE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000076B3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000076B8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000076BD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000076C2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076C7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076CC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000076D1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000076D6 0A                         byte_5CE0:	dc.b $A
000076D7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000076DC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000076E1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000076E6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000076EB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000076F0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000076F5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000076FA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000076FF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00007704 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00007709 0C                         byte_5D13:	dc.b $C
0000770A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000770F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00007714 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00007719 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000771E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00007723 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00007728 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000772D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00007732 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00007737 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000773C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00007741 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00007746                            		even
00007746                            		even
00007746                            
00007746                            ; ---------------------------------------------------------------------------
00007746                            ; Ending sequence demos
00007746                            ; ---------------------------------------------------------------------------
00007746                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00007774                            		even
00007774                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000077B4                            		even
000077B4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000077E4                            		even
000077E4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00007814                            		even
00007814                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00007834                            		even
00007834                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00007854                            		even
00007854                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00007884                            		even
00007884                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000078B4                            		even
000078B4                            
000078B4                            ; ---------------------------------------------------------------------------
000078B4                            ; Subroutine to	load level boundaries and start	locations
000078B4                            ; ---------------------------------------------------------------------------
000078B4                            
000078B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078B4                            
000078B4                            
000078B4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000078B4 7000                       		moveq	#0,d0
000078B6 11C0 F740                  		move.b	d0,($FFFFF740).w
000078BA 11C0 F741                  		move.b	d0,($FFFFF741).w
000078BE 11C0 F746                  		move.b	d0,($FFFFF746).w
000078C2 11C0 F748                  		move.b	d0,($FFFFF748).w
000078C6 11C0 F742                  		move.b	d0,($FFFFF742).w
000078CA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000078CE ED08                       		lsl.b	#6,d0
000078D0 E848                       		lsr.w	#4,d0
000078D2 3200                       		move.w	d0,d1
000078D4 D040                       		add.w	d0,d0
000078D6 D041                       		add.w	d1,d0
000078D8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000078DC 3018                       		move.w	(a0)+,d0
000078DE 31C0 F730                  		move.w	d0,($FFFFF730).w
000078E2 2018                       		move.l	(a0)+,d0
000078E4 21C0 F728                  		move.l	d0,($FFFFF728).w
000078E8 21C0 F720                  		move.l	d0,($FFFFF720).w
000078EC 2018                       		move.l	(a0)+,d0
000078EE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000078F2 21C0 F724                  		move.l	d0,($FFFFF724).w
000078F6 3038 F728                  		move.w	($FFFFF728).w,d0
000078FA 0640 0240                  		addi.w	#$240,d0
000078FE 31C0 F732                  		move.w	d0,($FFFFF732).w
00007902 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00007908 3018                       		move.w	(a0)+,d0
0000790A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000790E 6000 0000                  		bra.w	LevSz_ChkLamp
00007912                            ; ===========================================================================
00007912                            ; ---------------------------------------------------------------------------
00007912                            ; Level size array and ending start location array
00007912                            ; ---------------------------------------------------------------------------
00007912                            LevelSizeArray:	incbin	misc\lvl_size.bin
00007A62                            		even
00007A62                            
00007A62                            EndingStLocArray:
00007A62                            		incbin	misc\sloc_end.bin
00007A82                            		even
00007A82                            
00007A82                            ; ===========================================================================
00007A82                            
00007A82                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00007A82 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007A86 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007A88 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007A8E 3238 D008                  		move.w	($FFFFD008).w,d1
00007A92 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007A96 6000                       		bra.s	loc_60D0
00007A98                            ; ===========================================================================
00007A98                            
00007A98                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00007A98 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007A9C ED08                       		lsl.b	#6,d0
00007A9E E848                       		lsr.w	#4,d0
00007AA0 43F9 0000 0000             		lea	(StartLocArray).l,a1			; MJ: load location array
00007AA6 43F1 0000                  		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
00007AAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007AAE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007AB0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00007AB4 5340                       		subq.w	#1,d0
00007AB6 E548                       		lsl.w	#2,d0
00007AB8 43FB 00A8                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007ABC                            
00007ABC                            LevSz_SonicPos:
00007ABC 7200                       		moveq	#0,d1
00007ABE 3219                       		move.w	(a1)+,d1
00007AC0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00007AC4 7000                       		moveq	#0,d0
00007AC6 3011                       		move.w	(a1),d0
00007AC8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00007ACC 1438 F600                  		move.b	($FFFFF600).w,d2			; MJ: load game mode
00007AD0 0242 00FC                  		andi.w	#$00FC,d2				; MJ: keep in range
00007AD4 0C02 0004                  		cmpi.b	#$04,d2					; MJ: is screen mode at title?
00007AD8 6600 0000                  		bne	loc_60D0				; MJ: if not, branch
00007ADC 323C 0050                  		move.w	#$0050,d1				; MJ: set positions for title screen
00007AE0 303C 03B0                  		move.w	#$03B0,d0				; MJ: ''
00007AE4 31C1 D008                  		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
00007AE8 31C0 D00C                  		move.w	d0,($FFFFD00C).w			; MJ: ''
00007AEC                            
00007AEC                            loc_60D0:				; XREF: LevSz_ChkLamp
00007AEC 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00007AF0 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00007AF4 743F                       		moveq	#63,d2				; begin a 64-step loop
00007AF6                            @looppoint:
00007AF6 34C1                       		move.w	d1,(a2)+			; fill in X
00007AF8 34C0                       		move.w	d0,(a2)+			; fill in Y
00007AFA 51CA FFFA                  		dbf	d2,@looppoint		; loop
00007AFE 0441 00A0                  		subi.w	#$A0,d1
00007B02 6400                       		bcc.s	loc_60D8
00007B04 7200                       		moveq	#0,d1
00007B06                            
00007B06                            loc_60D8:
00007B06 3438 F72A                  		move.w	($FFFFF72A).w,d2
00007B0A B242                       		cmp.w	d2,d1
00007B0C 6500                       		bcs.s	loc_60E2
00007B0E 3202                       		move.w	d2,d1
00007B10                            
00007B10                            loc_60E2:
00007B10 31C1 F700                  		move.w	d1,($FFFFF700).w
00007B14 0440 0060                  		subi.w	#$60,d0
00007B18 6400                       		bcc.s	loc_60EE
00007B1A 7000                       		moveq	#0,d0
00007B1C                            
00007B1C                            loc_60EE:
00007B1C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007B20 6D00                       		blt.s	loc_60F8
00007B22 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007B26                            
00007B26                            loc_60F8:
00007B26 31C0 F704                  		move.w	d0,($FFFFF704).w
00007B2A 6100 0000                  		bsr.w	BgScrollSpeed
00007B2E 7000                       		moveq	#0,d0
00007B30 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B34 E508                       		lsl.b	#2,d0
00007B36 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00007B3C 6000 0000                  		bra.w	LevSz_Unk
00007B40                            
00007B40                            ; ===========================================================================
00007B40                            ; ---------------------------------------------------------------------------
00007B40                            ; MJ: Sonic start location array
00007B40                            ; ---------------------------------------------------------------------------
00007B40                            
00007B40                            StartLocArray:	incbin	startpos\ghz1.bin
00007B44                            		incbin	startpos\ghz2.bin
00007B48                            		incbin	startpos\ghz3.bin
00007B4C                            		incbin	startpos\ghz4.bin
00007B50                            		incbin	startpos\lz1.bin
00007B54                            		incbin	startpos\lz2.bin
00007B58                            		incbin	startpos\lz3.bin
00007B5C                            		incbin	startpos\lz4.bin
00007B60                            		incbin	startpos\mz1.bin
00007B64                            		incbin	startpos\mz2.bin
00007B68                            		incbin	startpos\mz3.bin
00007B6C                            		incbin	startpos\mz4.bin
00007B70                            		incbin	startpos\slz1.bin
00007B74                            		incbin	startpos\slz2.bin
00007B78                            		incbin	startpos\slz3.bin
00007B7C                            		incbin	startpos\slz4.bin
00007B80                            		incbin	startpos\syz1.bin
00007B84                            		incbin	startpos\syz2.bin
00007B88                            		incbin	startpos\syz3.bin
00007B8C                            		incbin	startpos\syz4.bin
00007B90                            		incbin	startpos\sbz1.bin
00007B94                            		incbin	startpos\sbz2.bin
00007B98                            		incbin	startpos\sbz3.bin
00007B9C                            		incbin	startpos\sbz4.bin
00007BA0                            		incbin	startpos\end1.bin
00007BA4                            		incbin	startpos\end2.bin
00007BA8                            		incbin	startpos\end3.bin
00007BAC                            		incbin	startpos\end4.bin
00007BB0                            		even
00007BB0                            
00007BB0                            ; ===========================================================================
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            ; Which	256x256	tiles contain loops or roll-tunnels
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00007BB0                            ; loop,	loop, tunnel, tunnel
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            LoopTileNums:	incbin	misc\loopnums.bin
00007BCC                            		even
00007BCC                            
00007BCC                            ; ===========================================================================
00007BCC                            
00007BCC                            LevSz_Unk:				; XREF: LevelSizeLoad
00007BCC 7000                       		moveq	#0,d0
00007BCE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BD2 E748                       		lsl.w	#3,d0
00007BD4 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00007BD8 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00007BDC 24D9                       		move.l	(a1)+,(a2)+
00007BDE 24D9                       		move.l	(a1)+,(a2)+
00007BE0 4E75                       		rts	
00007BE2                            ; End of function LevelSizeLoad
00007BE2                            
00007BE2                            ; ===========================================================================
00007BE2 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00007BEA 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BF2 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007BFA 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C02 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C0A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007C12 0070 0100 0100 0100        		dc.l $700100, $1000100
00007C1A                            
00007C1A                            ; ---------------------------------------------------------------------------
00007C1A                            ; Subroutine to	set scroll speed of some backgrounds
00007C1A                            ; ---------------------------------------------------------------------------
00007C1A                            
00007C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C1A                            
00007C1A                            
00007C1A                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007C1A 4A38 FE30                  		tst.b	($FFFFFE30).w
00007C1E 6600                       		bne.s	loc_6206
00007C20 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C24 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C28 31C1 F708                  		move.w	d1,($FFFFF708).w
00007C2C 31C1 F710                  		move.w	d1,($FFFFF710).w
00007C30 31C1 F718                  		move.w	d1,($FFFFF718).w
00007C34                            
00007C34                            loc_6206:
00007C34 7400                       		moveq	#0,d2
00007C36 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007C3A D442                       		add.w	d2,d2
00007C3C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007C40 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007C44                            ; End of function BgScrollSpeed
00007C44                            
00007C44                            ; ===========================================================================
00007C44 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007C48 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007C4C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007C50 0000                       		dc.w BgScroll_End-BgScroll_Index
00007C52                            ; ===========================================================================
00007C52                            
00007C52                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007C52 6000 0000                  		bra.w	Deform_GHZ
00007C56                            ; ===========================================================================
00007C56                            
00007C56                            BgScroll_LZ:				; XREF: BgScroll_Index
00007C56 E280                       		asr.l	#1,d0
00007C58 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C5C 4E75                       		rts	
00007C5E                            ; ===========================================================================
00007C5E                            
00007C5E                            BgScroll_MZ:				; XREF: BgScroll_Index
00007C5E 4E75                       		rts	
00007C60                            ; ===========================================================================
00007C60                            
00007C60                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007C60 E280                       		asr.l	#1,d0
00007C62 0640 00C0                  		addi.w	#$C0,d0
00007C66 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C6A 4E75                       		rts	
00007C6C                            ; ===========================================================================
00007C6C                            
00007C6C                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007C6C E980                       		asl.l	#4,d0
00007C6E 2400                       		move.l	d0,d2
00007C70 E380                       		asl.l	#1,d0
00007C72 D082                       		add.l	d2,d0
00007C74 E080                       		asr.l	#8,d0
00007C76 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C7A 31C0 F714                  		move.w	d0,($FFFFF714).w
00007C7E 4E75                       		rts	
00007C80                            ; ===========================================================================
00007C80                            
00007C80                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007C80 E980                       		asl.l	#4,d0
00007C82 E380                       		asl.l	#1,d0
00007C84 E080                       		asr.l	#8,d0
00007C86 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007C8A 4E75                       		rts	
00007C8C                            ; ===========================================================================
00007C8C                            
00007C8C                            BgScroll_End:				; XREF: BgScroll_Index
00007C8C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007C92 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007C98 4E75                       		rts	
00007C9A                            ; ===========================================================================
00007C9A 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007CA0 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007CA6 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00007CAC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007CB2 4E75                       		rts
00007CB4                            
00007CB4                            ; ---------------------------------------------------------------------------
00007CB4                            ; Background layer deformation subroutines
00007CB4                            ; ---------------------------------------------------------------------------
00007CB4                            
00007CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CB4                            
00007CB4                            
00007CB4                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007CB4 4A38 F744                  		tst.b	($FFFFF744).w
00007CB8 6700                       		beq.s	loc_628E
00007CBA 4E75                       		rts	
00007CBC                            ; ===========================================================================
00007CBC                            
00007CBC                            loc_628E:
00007CBC 4278 F754                  		clr.w	($FFFFF754).w
00007CC0 4278 F756                  		clr.w	($FFFFF756).w
00007CC4 4278 F758                  		clr.w	($FFFFF758).w
00007CC8 4278 F75A                  		clr.w	($FFFFF75A).w
00007CCC 6100 0000                  		bsr.w	ScrollHoriz
00007CD0 6100 0000                  		bsr.w	ScrollVertical
00007CD4 6100 0000                  		bsr.w	DynScrResizeLoad
00007CD8 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007CDE 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007CE4 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007CEA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007CF0 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007CF6 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007CFC 7000                       		moveq	#0,d0
00007CFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D02 D040                       		add.w	d0,d0
00007D04 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007D08 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007D0C                            ; End of function DeformBgLayer
00007D0C                            
00007D0C                            ; ===========================================================================
00007D0C                            ; ---------------------------------------------------------------------------
00007D0C                            ; Offset index for background layer deformation	code
00007D0C                            ; ---------------------------------------------------------------------------
00007D0C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007D10 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007D14 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007D18 0000                       		dc.w Deform_GHZ-Deform_Index
00007D1A                            ; ---------------------------------------------------------------------------
00007D1A                            ; Green	Hill Zone background layer deformation code
00007D1A                            ; ---------------------------------------------------------------------------
00007D1A                            
00007D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D1A                            
00007D1A                            
00007D1A                            Deform_GHZ:				; XREF: Deform_Index
00007D1A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007D1E 48C4                       		ext.l	d4
00007D20 EB84                       		asl.l	#5,d4
00007D22 2204                       		move.l	d4,d1
00007D24 E384                       		asl.l	#1,d4
00007D26 D881                       		add.l	d1,d4
00007D28 7A00                       		moveq	#0,d5
00007D2A 6100 0000                  		bsr.w	ScrollBlock1
00007D2E 6100 0000                  		bsr.w	ScrollBlock4
00007D32 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007D36 3038 F704                  		move.w	($FFFFF704).w,d0
00007D3A 0240 07FF                  		andi.w	#$7FF,d0
00007D3E EA48                       		lsr.w	#5,d0
00007D40 4440                       		neg.w	d0
00007D42 0640 0026                  		addi.w	#$26,d0
00007D46 31C0 F714                  		move.w	d0,($FFFFF714).w
00007D4A 3800                       		move.w	d0,d4
00007D4C 6100 0000                  		bsr.w	ScrollBlock3
00007D50 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007D56 323C 006F                  		move.w	#$6F,d1
00007D5A 9244                       		sub.w	d4,d1
00007D5C 3038 F700                  		move.w	($FFFFF700).w,d0
00007D60 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007D66 6600                       		bne.s	loc_633C
00007D68 7000                       		moveq	#0,d0
00007D6A                            
00007D6A                            loc_633C:
00007D6A 4440                       		neg.w	d0
00007D6C 4840                       		swap	d0
00007D6E 3038 F708                  		move.w	($FFFFF708).w,d0
00007D72 4440                       		neg.w	d0
00007D74                            
00007D74                            loc_6346:
00007D74 22C0                       		move.l	d0,(a1)+
00007D76 51C9 FFFC                  		dbf	d1,loc_6346
00007D7A 323C 0027                  		move.w	#$27,d1
00007D7E 3038 F710                  		move.w	($FFFFF710).w,d0
00007D82 4440                       		neg.w	d0
00007D84                            
00007D84                            loc_6356:
00007D84 22C0                       		move.l	d0,(a1)+
00007D86 51C9 FFFC                  		dbf	d1,loc_6356
00007D8A 3038 F710                  		move.w	($FFFFF710).w,d0
00007D8E 0640 0000                  		addi.w	#0,d0
00007D92 3438 F700                  		move.w	($FFFFF700).w,d2
00007D96 0642 FE00                  		addi.w	#-$200,d2
00007D9A 9440                       		sub.w	d0,d2
00007D9C 48C2                       		ext.l	d2
00007D9E E182                       		asl.l	#8,d2
00007DA0 85FC 0068                  		divs.w	#$68,d2
00007DA4 48C2                       		ext.l	d2
00007DA6 E182                       		asl.l	#8,d2
00007DA8 7600                       		moveq	#0,d3
00007DAA 3600                       		move.w	d0,d3
00007DAC 323C 0047                  		move.w	#$47,d1
00007DB0 D244                       		add.w	d4,d1
00007DB2                            
00007DB2                            loc_6384:
00007DB2 3003                       		move.w	d3,d0
00007DB4 4440                       		neg.w	d0
00007DB6 22C0                       		move.l	d0,(a1)+
00007DB8 4843                       		swap	d3
00007DBA D682                       		add.l	d2,d3
00007DBC 4843                       		swap	d3
00007DBE 51C9 FFF2                  		dbf	d1,loc_6384
00007DC2 4E75                       		rts	
00007DC4                            ; End of function Deform_GHZ
00007DC4                            
00007DC4                            ; ---------------------------------------------------------------------------
00007DC4                            ; Labyrinth Zone background layer deformation code
00007DC4                            ; ---------------------------------------------------------------------------
00007DC4                            
00007DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC4                            
00007DC4                            
00007DC4                            Deform_LZ:				; XREF: Deform_Index
00007DC4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007DC8 48C4                       		ext.l	d4
00007DCA EF84                       		asl.l	#7,d4
00007DCC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007DD0 48C5                       		ext.l	d5
00007DD2 EF85                       		asl.l	#7,d5
00007DD4 6100 0000                  		bsr.w	ScrollBlock1
00007DD8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007DDE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007DE2 323C 00DF                  		move.w	#$DF,d1
00007DE6 3038 F700                  		move.w	($FFFFF700).w,d0
00007DEA 4440                       		neg.w	d0
00007DEC 4840                       		swap	d0
00007DEE 3038 F708                  		move.w	($FFFFF708).w,d0
00007DF2 4440                       		neg.w	d0
00007DF4                            
00007DF4                            loc_63C6:
00007DF4 22C0                       		move.l	d0,(a1)+
00007DF6 51C9 FFFC                  		dbf	d1,loc_63C6
00007DFA 3038 F646                  		move.w	($FFFFF646).w,d0
00007DFE 9078 F704                  		sub.w	($FFFFF704).w,d0
00007E02 4E75                       		rts	
00007E04                            ; End of function Deform_LZ
00007E04                            
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            ; Marble Zone background layer deformation code
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            
00007E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E04                            
00007E04                            
00007E04                            Deform_MZ:				; XREF: Deform_Index
00007E04 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E08 48C4                       		ext.l	d4
00007E0A ED84                       		asl.l	#6,d4
00007E0C 2204                       		move.l	d4,d1
00007E0E E384                       		asl.l	#1,d4
00007E10 D881                       		add.l	d1,d4
00007E12 7A00                       		moveq	#0,d5
00007E14 6100 0000                  		bsr.w	ScrollBlock1
00007E18 303C 0200                  		move.w	#$200,d0
00007E1C 3238 F704                  		move.w	($FFFFF704).w,d1
00007E20 0441 01C8                  		subi.w	#$1C8,d1
00007E24 6500                       		bcs.s	loc_6402
00007E26 3401                       		move.w	d1,d2
00007E28 D241                       		add.w	d1,d1
00007E2A D242                       		add.w	d2,d1
00007E2C E441                       		asr.w	#2,d1
00007E2E D041                       		add.w	d1,d0
00007E30                            
00007E30                            loc_6402:
00007E30 31C0 F714                  		move.w	d0,($FFFFF714).w
00007E34 6100 0000                  		bsr.w	ScrollBlock3
00007E38 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E3E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E42 323C 00DF                  		move.w	#$DF,d1
00007E46 3038 F700                  		move.w	($FFFFF700).w,d0
00007E4A 4440                       		neg.w	d0
00007E4C 4840                       		swap	d0
00007E4E 3038 F708                  		move.w	($FFFFF708).w,d0
00007E52 4440                       		neg.w	d0
00007E54                            
00007E54                            loc_6426:
00007E54 22C0                       		move.l	d0,(a1)+
00007E56 51C9 FFFC                  		dbf	d1,loc_6426
00007E5A 4E75                       		rts	
00007E5C                            ; End of function Deform_MZ
00007E5C                            
00007E5C                            ; ---------------------------------------------------------------------------
00007E5C                            ; Star Light Zone background layer deformation code
00007E5C                            ; ---------------------------------------------------------------------------
00007E5C                            
00007E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5C                            
00007E5C                            
00007E5C                            Deform_SLZ:				; XREF: Deform_Index
00007E5C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007E60 48C4                       		ext.l	d4
00007E62 EF84                       		asl.l	#7,d4
00007E64 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007E68 48C5                       		ext.l	d5
00007E6A EF85                       		asl.l	#7,d5
00007E6C 6100 0000                  		bsr.w	ScrollBlock2
00007E70 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007E76 6100 0000                  		bsr.w	Deform_SLZ_2
00007E7A 45F8 A800                  		lea	($FFFFA800).w,a2
00007E7E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007E82 3400                       		move.w	d0,d2
00007E84 0440 00C0                  		subi.w	#$C0,d0
00007E88 0240 03F0                  		andi.w	#$3F0,d0
00007E8C E648                       		lsr.w	#3,d0
00007E8E 45F2 0000                  		lea	(a2,d0.w),a2
00007E92 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007E96 323C 000E                  		move.w	#$E,d1
00007E9A 3038 F700                  		move.w	($FFFFF700).w,d0
00007E9E 4440                       		neg.w	d0
00007EA0 4840                       		swap	d0
00007EA2 0242 000F                  		andi.w	#$F,d2
00007EA6 D442                       		add.w	d2,d2
00007EA8 301A                       		move.w	(a2)+,d0
00007EAA 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007EAE                            ; ===========================================================================
00007EAE                            
00007EAE                            loc_6480:				; XREF: Deform_SLZ
00007EAE 301A                       		move.w	(a2)+,d0
00007EB0                            
00007EB0                            loc_6482:
00007EB0 22C0                       		move.l	d0,(a1)+
00007EB2 22C0                       		move.l	d0,(a1)+
00007EB4 22C0                       		move.l	d0,(a1)+
00007EB6 22C0                       		move.l	d0,(a1)+
00007EB8 22C0                       		move.l	d0,(a1)+
00007EBA 22C0                       		move.l	d0,(a1)+
00007EBC 22C0                       		move.l	d0,(a1)+
00007EBE 22C0                       		move.l	d0,(a1)+
00007EC0 22C0                       		move.l	d0,(a1)+
00007EC2 22C0                       		move.l	d0,(a1)+
00007EC4 22C0                       		move.l	d0,(a1)+
00007EC6 22C0                       		move.l	d0,(a1)+
00007EC8 22C0                       		move.l	d0,(a1)+
00007ECA 22C0                       		move.l	d0,(a1)+
00007ECC 22C0                       		move.l	d0,(a1)+
00007ECE 22C0                       		move.l	d0,(a1)+
00007ED0 51C9 FFDC                  		dbf	d1,loc_6480
00007ED4 4E75                       		rts	
00007ED6                            ; End of function Deform_SLZ
00007ED6                            
00007ED6                            
00007ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED6                            
00007ED6                            
00007ED6                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007ED6 43F8 A800                  		lea	($FFFFA800).w,a1
00007EDA 3438 F700                  		move.w	($FFFFF700).w,d2
00007EDE 4442                       		neg.w	d2
00007EE0 3002                       		move.w	d2,d0
00007EE2 E640                       		asr.w	#3,d0
00007EE4 9042                       		sub.w	d2,d0
00007EE6 48C0                       		ext.l	d0
00007EE8 E980                       		asl.l	#4,d0
00007EEA 81FC 001C                  		divs.w	#$1C,d0
00007EEE 48C0                       		ext.l	d0
00007EF0 E980                       		asl.l	#4,d0
00007EF2 E180                       		asl.l	#8,d0
00007EF4 7600                       		moveq	#0,d3
00007EF6 3602                       		move.w	d2,d3
00007EF8 323C 001B                  		move.w	#$1B,d1
00007EFC                            
00007EFC                            loc_64CE:
00007EFC 32C3                       		move.w	d3,(a1)+
00007EFE 4843                       		swap	d3
00007F00 D680                       		add.l	d0,d3
00007F02 4843                       		swap	d3
00007F04 51C9 FFF6                  		dbf	d1,loc_64CE
00007F08 3002                       		move.w	d2,d0
00007F0A E640                       		asr.w	#3,d0
00007F0C 323C 0004                  		move.w	#4,d1
00007F10                            
00007F10                            loc_64E2:
00007F10 32C0                       		move.w	d0,(a1)+
00007F12 51C9 FFFC                  		dbf	d1,loc_64E2
00007F16 3002                       		move.w	d2,d0
00007F18 E440                       		asr.w	#2,d0
00007F1A 323C 0004                  		move.w	#4,d1
00007F1E                            
00007F1E                            loc_64F0:
00007F1E 32C0                       		move.w	d0,(a1)+
00007F20 51C9 FFFC                  		dbf	d1,loc_64F0
00007F24 3002                       		move.w	d2,d0
00007F26 E240                       		asr.w	#1,d0
00007F28 323C 001D                  		move.w	#$1D,d1
00007F2C                            
00007F2C                            loc_64FE:
00007F2C 32C0                       		move.w	d0,(a1)+
00007F2E 51C9 FFFC                  		dbf	d1,loc_64FE
00007F32 4E75                       		rts	
00007F34                            ; End of function Deform_SLZ_2
00007F34                            
00007F34                            ; ---------------------------------------------------------------------------
00007F34                            ; Spring Yard Zone background layer deformation	code
00007F34                            ; ---------------------------------------------------------------------------
00007F34                            
00007F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F34                            
00007F34                            
00007F34                            Deform_SYZ:				; XREF: Deform_Index
00007F34 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F38 48C4                       		ext.l	d4
00007F3A ED84                       		asl.l	#6,d4
00007F3C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F40 48C5                       		ext.l	d5
00007F42 E985                       		asl.l	#4,d5
00007F44 2205                       		move.l	d5,d1
00007F46 E385                       		asl.l	#1,d5
00007F48 DA81                       		add.l	d1,d5
00007F4A 6100 0000                  		bsr.w	ScrollBlock1
00007F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F54 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F58 323C 00DF                  		move.w	#$DF,d1
00007F5C 3038 F700                  		move.w	($FFFFF700).w,d0
00007F60 4440                       		neg.w	d0
00007F62 4840                       		swap	d0
00007F64 3038 F708                  		move.w	($FFFFF708).w,d0
00007F68 4440                       		neg.w	d0
00007F6A                            
00007F6A                            loc_653C:
00007F6A 22C0                       		move.l	d0,(a1)+
00007F6C 51C9 FFFC                  		dbf	d1,loc_653C
00007F70 4E75                       		rts	
00007F72                            ; End of function Deform_SYZ
00007F72                            
00007F72                            ; ---------------------------------------------------------------------------
00007F72                            ; Scrap	Brain Zone background layer deformation	code
00007F72                            ; ---------------------------------------------------------------------------
00007F72                            
00007F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F72                            
00007F72                            
00007F72                            Deform_SBZ:				; XREF: Deform_Index
00007F72 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007F76 48C4                       		ext.l	d4
00007F78 ED84                       		asl.l	#6,d4
00007F7A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007F7E 48C5                       		ext.l	d5
00007F80 E985                       		asl.l	#4,d5
00007F82 E385                       		asl.l	#1,d5
00007F84 6100 0000                  		bsr.w	ScrollBlock1
00007F88 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007F8E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007F92 323C 00DF                  		move.w	#$DF,d1
00007F96 3038 F700                  		move.w	($FFFFF700).w,d0
00007F9A 4440                       		neg.w	d0
00007F9C 4840                       		swap	d0
00007F9E 3038 F708                  		move.w	($FFFFF708).w,d0
00007FA2 4440                       		neg.w	d0
00007FA4                            
00007FA4                            loc_6576:
00007FA4 22C0                       		move.l	d0,(a1)+
00007FA6 51C9 FFFC                  		dbf	d1,loc_6576
00007FAA 4E75                       		rts	
00007FAC                            ; End of function Deform_SBZ
00007FAC                            
00007FAC                            ; ---------------------------------------------------------------------------
00007FAC                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007FAC                            ; ---------------------------------------------------------------------------
00007FAC                            
00007FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FAC                            
00007FAC                            
00007FAC                            ScrollHoriz:				; XREF: DeformBgLayer
00007FAC 3838 F700                  		move.w	($FFFFF700).w,d4
00007FB0 6100                       		bsr.s	ScrollHoriz2
00007FB2 3038 F700                  		move.w	($FFFFF700).w,d0
00007FB6 0240 0010                  		andi.w	#$10,d0
00007FBA 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007FBE B300                       		eor.b	d1,d0
00007FC0 6600                       		bne.s	locret_65B0
00007FC2 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007FC8 3038 F700                  		move.w	($FFFFF700).w,d0
00007FCC 9044                       		sub.w	d4,d0
00007FCE 6A00                       		bpl.s	loc_65AA
00007FD0 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007FD6 4E75                       		rts	
00007FD8                            ; ===========================================================================
00007FD8                            
00007FD8                            loc_65AA:
00007FD8 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007FDE                            
00007FDE                            locret_65B0:
00007FDE 4E75                       		rts	
00007FE0                            ; End of function ScrollHoriz
00007FE0                            
00007FE0                            
00007FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE0                            
00007FE0                            
00007FE0                            ScrollHoriz2:				; XREF: ScrollHoriz
00007FE0 3038 D008                  		move.w	($FFFFD008).w,d0
00007FE4 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FE8 0440 0090                  		subi.w	#$90,d0
00007FEC 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007FEE 0440 0010                  		subi.w	#$10,d0
00007FF2 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
00007FF4 4278 F73A                  		clr.w	($FFFFF73A).w
00007FF8 4E75                       		rts
00007FFA                            ; ===========================================================================
00007FFA                            
00007FFA                            loc_65CC:
00007FFA 0C40 0010                  		cmpi.w	#$10,d0
00007FFE 6500                       		bcs.s	loc_65D6
00008000 303C 0010                  		move.w	#$10,d0
00008004                            
00008004                            loc_65D6:
00008004 D078 F700                  		add.w	($FFFFF700).w,d0
00008008 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000800C 6D00                       		blt.s	loc_65E4
0000800E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00008012                            
00008012                            loc_65E4:
00008012 3200                       		move.w	d0,d1
00008014 9278 F700                  		sub.w	($FFFFF700).w,d1
00008018 E141                       		asl.w	#8,d1
0000801A 31C0 F700                  		move.w	d0,($FFFFF700).w
0000801E 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00008022 4E75                       		rts	
00008024                            ; ===========================================================================
00008024                            
00008024                            loc_65F6:
00008024 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
00008028 6400                       		bcc.s	Left_NoMax				; if not, branch
0000802A 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
0000802E                            
0000802E                            Left_NoMax:
0000802E D078 F700                  		add.w	($FFFFF700).w,d0
00008032 B078 F728                  		cmp.w	($FFFFF728).w,d0
00008036 6EDA                       		bgt.s	loc_65E4
00008038 3038 F728                  		move.w	($FFFFF728).w,d0
0000803C 60D4                       		bra.s	loc_65E4
0000803E                            ; End of function ScrollHoriz2
0000803E                            
0000803E                            ; ===========================================================================
0000803E 4A40                       		tst.w	d0
00008040 6A00                       		bpl.s	loc_6610
00008042 303C FFFE                  		move.w	#-2,d0
00008046 60DC                       		bra.s	loc_65F6
00008048                            ; ===========================================================================
00008048                            
00008048                            loc_6610:
00008048 303C 0002                  		move.w	#2,d0
0000804C 60AC                       		bra.s	loc_65CC
0000804E                            
0000804E                            ; ---------------------------------------------------------------------------
0000804E                            ; Subroutine to	scroll the level vertically as Sonic moves
0000804E                            ; ---------------------------------------------------------------------------
0000804E                            
0000804E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000804E                            
0000804E                            
0000804E                            ScrollVertical:				; XREF: DeformBgLayer
0000804E 7200                       		moveq	#0,d1
00008050 3038 D00C                  		move.w	($FFFFD00C).w,d0
00008054 9078 F704                  		sub.w	($FFFFF704).w,d0
00008058 0838 0002 D022             		btst	#2,($FFFFD022).w
0000805E 6700                       		beq.s	loc_662A
00008060 5B40                       		subq.w	#5,d0
00008062                            
00008062                            loc_662A:
00008062 0838 0001 D022             		btst	#1,($FFFFD022).w
00008068 6700                       		beq.s	loc_664A
0000806A 0640 0020                  		addi.w	#$20,d0
0000806E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00008072 6500                       		bcs.s	loc_6696
00008074 0440 0040                  		subi.w	#$40,d0
00008078 6400                       		bcc.s	loc_6696
0000807A 4A38 F75C                  		tst.b	($FFFFF75C).w
0000807E 6600                       		bne.s	loc_66A8
00008080 6000                       		bra.s	loc_6656
00008082                            ; ===========================================================================
00008082                            
00008082                            loc_664A:
00008082 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00008086 6600                       		bne.s	loc_665C
00008088 4A38 F75C                  		tst.b	($FFFFF75C).w
0000808C 6600                       		bne.s	loc_66A8
0000808E                            
0000808E                            loc_6656:
0000808E 4278 F73C                  		clr.w	($FFFFF73C).w
00008092 4E75                       		rts	
00008094                            ; ===========================================================================
00008094                            
00008094                            loc_665C:
00008094 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000809A 6600                       		bne.s	loc_6684
0000809C 3238 D014                  		move.w	($FFFFD014).w,d1
000080A0 6A00                       		bpl.s	loc_666C
000080A2 4441                       		neg.w	d1
000080A4                            
000080A4                            loc_666C:
000080A4 0C41 0800                  		cmpi.w	#$800,d1
000080A8 6400                       		bcc.s	loc_6696
000080AA 323C 0600                  		move.w	#$600,d1
000080AE 0C40 0006                  		cmpi.w	#6,d0
000080B2 6E00                       		bgt.s	loc_66F6
000080B4 0C40 FFFA                  		cmpi.w	#-6,d0
000080B8 6D00                       		blt.s	loc_66C0
000080BA 6000                       		bra.s	loc_66AE
000080BC                            ; ===========================================================================
000080BC                            
000080BC                            loc_6684:
000080BC 323C 0200                  		move.w	#$200,d1
000080C0 0C40 0002                  		cmpi.w	#2,d0
000080C4 6E00                       		bgt.s	loc_66F6
000080C6 0C40 FFFE                  		cmpi.w	#-2,d0
000080CA 6D00                       		blt.s	loc_66C0
000080CC 6000                       		bra.s	loc_66AE
000080CE                            ; ===========================================================================
000080CE                            
000080CE                            loc_6696:
000080CE 323C 1000                  		move.w	#$1000,d1
000080D2 0C40 0010                  		cmpi.w	#$10,d0
000080D6 6E00                       		bgt.s	loc_66F6
000080D8 0C40 FFF0                  		cmpi.w	#-$10,d0
000080DC 6D00                       		blt.s	loc_66C0
000080DE 6000                       		bra.s	loc_66AE
000080E0                            ; ===========================================================================
000080E0                            
000080E0                            loc_66A8:
000080E0 7000                       		moveq	#0,d0
000080E2 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000080E6                            
000080E6                            loc_66AE:
000080E6 7200                       		moveq	#0,d1
000080E8 3200                       		move.w	d0,d1
000080EA D278 F704                  		add.w	($FFFFF704).w,d1
000080EE 4A40                       		tst.w	d0
000080F0 6A00 0000                  		bpl.w	loc_6700
000080F4 6000 0000                  		bra.w	loc_66CC
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            loc_66C0:
000080F8 4441                       		neg.w	d1
000080FA 48C1                       		ext.l	d1
000080FC E181                       		asl.l	#8,d1
000080FE D2B8 F704                  		add.l	($FFFFF704).w,d1
00008102 4841                       		swap	d1
00008104                            
00008104                            loc_66CC:
00008104 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00008108 6E00                       		bgt.s	loc_6724
0000810A 0C41 FF00                  		cmpi.w	#-$100,d1
0000810E 6E00                       		bgt.s	loc_66F0
00008110 0241 07FF                  		andi.w	#$7FF,d1
00008114 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000811A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00008120 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00008126 6000                       		bra.s	loc_6724
00008128                            ; ===========================================================================
00008128                            
00008128                            loc_66F0:
00008128 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000812C 6000                       		bra.s	loc_6724
0000812E                            ; ===========================================================================
0000812E                            
0000812E                            loc_66F6:
0000812E 48C1                       		ext.l	d1
00008130 E181                       		asl.l	#8,d1
00008132 D2B8 F704                  		add.l	($FFFFF704).w,d1
00008136 4841                       		swap	d1
00008138                            
00008138                            loc_6700:
00008138 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000813C 6D00                       		blt.s	loc_6724
0000813E 0441 0800                  		subi.w	#$800,d1
00008142 6500                       		bcs.s	loc_6720
00008144 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000814A 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00008150 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00008156 6000                       		bra.s	loc_6724
00008158                            ; ===========================================================================
00008158                            
00008158                            loc_6720:
00008158 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000815C                            
0000815C                            loc_6724:
0000815C 3838 F704                  		move.w	($FFFFF704).w,d4
00008160 4841                       		swap	d1
00008162 2601                       		move.l	d1,d3
00008164 96B8 F704                  		sub.l	($FFFFF704).w,d3
00008168 E09B                       		ror.l	#8,d3
0000816A 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000816E 21C1 F704                  		move.l	d1,($FFFFF704).w
00008172 3038 F704                  		move.w	($FFFFF704).w,d0
00008176 0240 0010                  		andi.w	#$10,d0
0000817A 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000817E B300                       		eor.b	d1,d0
00008180 6600                       		bne.s	locret_6766
00008182 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00008188 3038 F704                  		move.w	($FFFFF704).w,d0
0000818C 9044                       		sub.w	d4,d0
0000818E 6A00                       		bpl.s	loc_6760
00008190 08F8 0000 F754             		bset	#0,($FFFFF754).w
00008196 4E75                       		rts	
00008198                            ; ===========================================================================
00008198                            
00008198                            loc_6760:
00008198 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000819E                            
0000819E                            locret_6766:
0000819E 4E75                       		rts	
000081A0                            ; End of function ScrollVertical
000081A0                            
000081A0                            
000081A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A0                            
000081A0                            
000081A0                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000081A0 2438 F708                  		move.l	($FFFFF708).w,d2
000081A4 2002                       		move.l	d2,d0
000081A6 D084                       		add.l	d4,d0
000081A8 21C0 F708                  		move.l	d0,($FFFFF708).w
000081AC 2200                       		move.l	d0,d1
000081AE 4841                       		swap	d1
000081B0 0241 0010                  		andi.w	#$10,d1
000081B4 1638 F74C                  		move.b	($FFFFF74C).w,d3
000081B8 B701                       		eor.b	d3,d1
000081BA 6600                       		bne.s	loc_679C
000081BC 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000081C2 9082                       		sub.l	d2,d0
000081C4 6A00                       		bpl.s	loc_6796
000081C6 08F8 0002 F756             		bset	#2,($FFFFF756).w
000081CC 6000                       		bra.s	loc_679C
000081CE                            ; ===========================================================================
000081CE                            
000081CE                            loc_6796:
000081CE 08F8 0003 F756             		bset	#3,($FFFFF756).w
000081D4                            
000081D4                            loc_679C:
000081D4 2638 F70C                  		move.l	($FFFFF70C).w,d3
000081D8 2003                       		move.l	d3,d0
000081DA D085                       		add.l	d5,d0
000081DC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000081E0 2200                       		move.l	d0,d1
000081E2 4841                       		swap	d1
000081E4 0241 0010                  		andi.w	#$10,d1
000081E8 1438 F74D                  		move.b	($FFFFF74D).w,d2
000081EC B501                       		eor.b	d2,d1
000081EE 6600                       		bne.s	locret_67D0
000081F0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000081F6 9083                       		sub.l	d3,d0
000081F8 6A00                       		bpl.s	loc_67CA
000081FA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008200 4E75                       		rts	
00008202                            ; ===========================================================================
00008202                            
00008202                            loc_67CA:
00008202 08F8 0001 F756             		bset	#1,($FFFFF756).w
00008208                            
00008208                            locret_67D0:
00008208 4E75                       		rts	
0000820A                            ; End of function ScrollBlock1
0000820A                            
0000820A                            
0000820A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000820A                            
0000820A                            
0000820A                            ScrollBlock2:				; XREF: Deform_SLZ
0000820A 2438 F708                  		move.l	($FFFFF708).w,d2
0000820E 2002                       		move.l	d2,d0
00008210 D084                       		add.l	d4,d0
00008212 21C0 F708                  		move.l	d0,($FFFFF708).w
00008216 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000821A 2003                       		move.l	d3,d0
0000821C D085                       		add.l	d5,d0
0000821E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00008222 2200                       		move.l	d0,d1
00008224 4841                       		swap	d1
00008226 0241 0010                  		andi.w	#$10,d1
0000822A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000822E B501                       		eor.b	d2,d1
00008230 6600                       		bne.s	locret_6812
00008232 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00008238 9083                       		sub.l	d3,d0
0000823A 6A00                       		bpl.s	loc_680C
0000823C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008242 4E75                       		rts	
00008244                            ; ===========================================================================
00008244                            
00008244                            loc_680C:
00008244 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000824A                            
0000824A                            locret_6812:
0000824A 4E75                       		rts	
0000824C                            ; End of function ScrollBlock2
0000824C                            
0000824C                            
0000824C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824C                            
0000824C                            
0000824C                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000824C 3638 F70C                  		move.w	($FFFFF70C).w,d3
00008250 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008254 3200                       		move.w	d0,d1
00008256 0241 0010                  		andi.w	#$10,d1
0000825A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000825E B501                       		eor.b	d2,d1
00008260 6600                       		bne.s	locret_6842
00008262 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00008268 9043                       		sub.w	d3,d0
0000826A 6A00                       		bpl.s	loc_683C
0000826C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00008272 4E75                       		rts	
00008274                            ; ===========================================================================
00008274                            
00008274                            loc_683C:
00008274 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000827A                            
0000827A                            locret_6842:
0000827A 4E75                       		rts	
0000827C                            ; End of function ScrollBlock3
0000827C                            
0000827C                            
0000827C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000827C                            
0000827C                            
0000827C                            ScrollBlock4:				; XREF: Deform_GHZ
0000827C 3438 F710                  		move.w	($FFFFF710).w,d2
00008280 3638 F714                  		move.w	($FFFFF714).w,d3
00008284 3038 F73A                  		move.w	($FFFFF73A).w,d0
00008288 48C0                       		ext.l	d0
0000828A EF80                       		asl.l	#7,d0
0000828C D1B8 F710                  		add.l	d0,($FFFFF710).w
00008290 3038 F710                  		move.w	($FFFFF710).w,d0
00008294 0240 0010                  		andi.w	#$10,d0
00008298 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000829C B300                       		eor.b	d1,d0
0000829E 6600                       		bne.s	locret_6884
000082A0 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000082A6 3038 F710                  		move.w	($FFFFF710).w,d0
000082AA 9042                       		sub.w	d2,d0
000082AC 6A00                       		bpl.s	loc_687E
000082AE 08F8 0002 F758             		bset	#2,($FFFFF758).w
000082B4 6000                       		bra.s	locret_6884
000082B6                            ; ===========================================================================
000082B6                            
000082B6                            loc_687E:
000082B6 08F8 0003 F758             		bset	#3,($FFFFF758).w
000082BC                            
000082BC                            locret_6884:
000082BC 4E75                       		rts	
000082BE                            ; End of function ScrollBlock4
000082BE                            
000082BE                            
000082BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082BE                            
000082BE                            
000082BE                            sub_6886:				; XREF: loc_C44
000082BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000082C4 4DF9 00C0 0000             		lea	($C00000).l,a6
000082CA 45F8 F756                  		lea	($FFFFF756).w,a2
000082CE 47F8 F708                  		lea	($FFFFF708).w,a3
000082D2 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000082D6 343C 6000                  		move.w	#$6000,d2
000082DA 6100 0000                  		bsr.w	sub_6954
000082DE 45F8 F758                  		lea	($FFFFF758).w,a2
000082E2 47F8 F710                  		lea	($FFFFF710).w,a3
000082E6 6000 0000                  		bra.w	sub_69F4
000082EA                            ; End of function sub_6886
000082EA                            
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            ; Subroutine to	display	correct	tiles as you move
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            
000082EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EA                            
000082EA                            
000082EA                            LoadTilesAsYouMove:			; XREF: Demo_Time
000082EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000082F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000082F6 45F8 FF32                  		lea	($FFFFFF32).w,a2
000082FA 47F8 FF18                  		lea	($FFFFFF18).w,a3
000082FE 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
00008302 343C 6000                  		move.w	#$6000,d2
00008306 6100 0000                  		bsr.w	sub_6954
0000830A 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000830E 47F8 FF20                  		lea	($FFFFFF20).w,a3
00008312 6100 0000                  		bsr.w	sub_69F4
00008316 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000831A 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000831E 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
00008322 343C 4000                  		move.w	#$4000,d2
00008326 4A12                       		tst.b	(a2)
00008328 6700                       		beq.s	locret_6952
0000832A 0892 0000                  		bclr	#0,(a2)
0000832E 6700                       		beq.s	loc_6908
00008330 78F0                       		moveq	#-$10,d4
00008332 7AF0                       		moveq	#-$10,d5
00008334 6100 0000                  		bsr.w	sub_6C20
00008338 78F0                       		moveq	#-$10,d4
0000833A 7AF0                       		moveq	#-$10,d5
0000833C 6100 0000                  		bsr.w	sub_6AD8
00008340                            
00008340                            loc_6908:
00008340 0892 0001                  		bclr	#1,(a2)
00008344 6700                       		beq.s	loc_6922
00008346 383C 00E0                  		move.w	#$E0,d4
0000834A 7AF0                       		moveq	#-$10,d5
0000834C 6100 0000                  		bsr.w	sub_6C20
00008350 383C 00E0                  		move.w	#$E0,d4
00008354 7AF0                       		moveq	#-$10,d5
00008356 6100 0000                  		bsr.w	sub_6AD8
0000835A                            
0000835A                            loc_6922:
0000835A 0892 0002                  		bclr	#2,(a2)
0000835E 6700                       		beq.s	loc_6938
00008360 78F0                       		moveq	#-$10,d4
00008362 7AF0                       		moveq	#-$10,d5
00008364 6100 0000                  		bsr.w	sub_6C20
00008368 78F0                       		moveq	#-$10,d4
0000836A 7AF0                       		moveq	#-$10,d5
0000836C 6100 0000                  		bsr.w	sub_6B04
00008370                            
00008370                            loc_6938:
00008370 0892 0003                  		bclr	#3,(a2)
00008374 6700                       		beq.s	locret_6952
00008376 78F0                       		moveq	#-$10,d4
00008378 3A3C 0140                  		move.w	#$140,d5
0000837C 6100 0000                  		bsr.w	sub_6C20
00008380 78F0                       		moveq	#-$10,d4
00008382 3A3C 0140                  		move.w	#$140,d5
00008386 6100 0000                  		bsr.w	sub_6B04
0000838A                            
0000838A                            locret_6952:
0000838A 4E75                       		rts	
0000838C                            ; End of function LoadTilesAsYouMove
0000838C                            
0000838C                            
0000838C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000838C                            
0000838C                            
0000838C                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000838C 4A12                       		tst.b	(a2)
0000838E 6700 0000                  		beq.w	locret_69F2
00008392 0892 0000                  		bclr	#0,(a2)
00008396 6700                       		beq.s	loc_6972
00008398 78F0                       		moveq	#-$10,d4
0000839A 7AF0                       		moveq	#-$10,d5
0000839C 6100 0000                  		bsr.w	sub_6C20
000083A0 78F0                       		moveq	#-$10,d4
000083A2 7AF0                       		moveq	#-$10,d5
000083A4 7C1F                       		moveq	#$1F,d6
000083A6 6100 0000                  		bsr.w	sub_6ADA
000083AA                            
000083AA                            loc_6972:
000083AA 0892 0001                  		bclr	#1,(a2)
000083AE 6700                       		beq.s	loc_698E
000083B0 383C 00E0                  		move.w	#$E0,d4
000083B4 7AF0                       		moveq	#-$10,d5
000083B6 6100 0000                  		bsr.w	sub_6C20
000083BA 383C 00E0                  		move.w	#$E0,d4
000083BE 7AF0                       		moveq	#-$10,d5
000083C0 7C1F                       		moveq	#$1F,d6
000083C2 6100 0000                  		bsr.w	sub_6ADA
000083C6                            
000083C6                            loc_698E:
000083C6 0892 0002                  		bclr	#2,(a2)
000083CA 6700                       		beq.s	loc_69BE
000083CC 78F0                       		moveq	#-$10,d4
000083CE 7AF0                       		moveq	#-$10,d5
000083D0 6100 0000                  		bsr.w	sub_6C20
000083D4 78F0                       		moveq	#-$10,d4
000083D6 7AF0                       		moveq	#-$10,d5
000083D8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000083DC 322B 0004                  		move.w	4(a3),d1
000083E0 0241 FFF0                  		andi.w	#-$10,d1
000083E4 9C41                       		sub.w	d1,d6
000083E6 6D00                       		blt.s	loc_69BE
000083E8 E84E                       		lsr.w	#4,d6
000083EA 0C46 000F                  		cmpi.w	#$F,d6
000083EE 6500                       		bcs.s	loc_69BA
000083F0 7C0F                       		moveq	#$F,d6
000083F2                            
000083F2                            loc_69BA:
000083F2 6100 0000                  		bsr.w	sub_6B06
000083F6                            
000083F6                            loc_69BE:
000083F6 0892 0003                  		bclr	#3,(a2)
000083FA 6700                       		beq.s	locret_69F2
000083FC 78F0                       		moveq	#-$10,d4
000083FE 3A3C 0140                  		move.w	#$140,d5
00008402 6100 0000                  		bsr.w	sub_6C20
00008406 78F0                       		moveq	#-$10,d4
00008408 3A3C 0140                  		move.w	#$140,d5
0000840C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00008410 322B 0004                  		move.w	4(a3),d1
00008414 0241 FFF0                  		andi.w	#-$10,d1
00008418 9C41                       		sub.w	d1,d6
0000841A 6D00                       		blt.s	locret_69F2
0000841C E84E                       		lsr.w	#4,d6
0000841E 0C46 000F                  		cmpi.w	#$F,d6
00008422 6500                       		bcs.s	loc_69EE
00008424 7C0F                       		moveq	#$F,d6
00008426                            
00008426                            loc_69EE:
00008426 6100 0000                  		bsr.w	sub_6B06
0000842A                            
0000842A                            locret_69F2:
0000842A 4E75                       		rts	
0000842C                            ; End of function sub_6954
0000842C                            
0000842C                            
0000842C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842C                            
0000842C                            
0000842C                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000842C 4A12                       		tst.b	(a2)
0000842E 6700 0000                  		beq.w	locret_6A80
00008432 0892 0002                  		bclr	#2,(a2)
00008436 6700                       		beq.s	loc_6A3E
00008438 0C53 0010                  		cmpi.w	#$10,(a3)
0000843C 6500                       		bcs.s	loc_6A3E
0000843E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008442 322B 0004                  		move.w	4(a3),d1
00008446 0241 FFF0                  		andi.w	#-$10,d1
0000844A 9841                       		sub.w	d1,d4
0000844C 3F04                       		move.w	d4,-(sp)
0000844E 7AF0                       		moveq	#-$10,d5
00008450 6100 0000                  		bsr.w	sub_6C20
00008454 381F                       		move.w	(sp)+,d4
00008456 7AF0                       		moveq	#-$10,d5
00008458 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000845C 322B 0004                  		move.w	4(a3),d1
00008460 0241 FFF0                  		andi.w	#-$10,d1
00008464 9C41                       		sub.w	d1,d6
00008466 6D00                       		blt.s	loc_6A3E
00008468 E84E                       		lsr.w	#4,d6
0000846A 0446 000E                  		subi.w	#$E,d6
0000846E 6400                       		bcc.s	loc_6A3E
00008470 4446                       		neg.w	d6
00008472 6100 0000                  		bsr.w	sub_6B06
00008476                            
00008476                            loc_6A3E:
00008476 0892 0003                  		bclr	#3,(a2)
0000847A 6700                       		beq.s	locret_6A80
0000847C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00008480 322B 0004                  		move.w	4(a3),d1
00008484 0241 FFF0                  		andi.w	#-$10,d1
00008488 9841                       		sub.w	d1,d4
0000848A 3F04                       		move.w	d4,-(sp)
0000848C 3A3C 0140                  		move.w	#$140,d5
00008490 6100 0000                  		bsr.w	sub_6C20
00008494 381F                       		move.w	(sp)+,d4
00008496 3A3C 0140                  		move.w	#$140,d5
0000849A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000849E 322B 0004                  		move.w	4(a3),d1
000084A2 0241 FFF0                  		andi.w	#-$10,d1
000084A6 9C41                       		sub.w	d1,d6
000084A8 6D00                       		blt.s	locret_6A80
000084AA E84E                       		lsr.w	#4,d6
000084AC 0446 000E                  		subi.w	#$E,d6
000084B0 6400                       		bcc.s	locret_6A80
000084B2 4446                       		neg.w	d6
000084B4 6100 0000                  		bsr.w	sub_6B06
000084B8                            
000084B8                            locret_6A80:
000084B8 4E75                       		rts	
000084BA                            ; End of function sub_69F4
000084BA                            
000084BA                            ; ===========================================================================
000084BA 4A12                       		tst.b	(a2)
000084BC 6700                       		beq.s	locret_6AD6
000084BE 0892 0002                  		bclr	#2,(a2)
000084C2 6700                       		beq.s	loc_6AAC
000084C4 383C 00D0                  		move.w	#$D0,d4
000084C8 322B 0004                  		move.w	4(a3),d1
000084CC 0241 FFF0                  		andi.w	#-$10,d1
000084D0 9841                       		sub.w	d1,d4
000084D2 3F04                       		move.w	d4,-(sp)
000084D4 7AF0                       		moveq	#-$10,d5
000084D6 6100 0000                  		bsr.w	sub_6C3C
000084DA 381F                       		move.w	(sp)+,d4
000084DC 7AF0                       		moveq	#-$10,d5
000084DE 7C02                       		moveq	#2,d6
000084E0 6100 0000                  		bsr.w	sub_6B06
000084E4                            
000084E4                            loc_6AAC:
000084E4 0892 0003                  		bclr	#3,(a2)
000084E8 6700                       		beq.s	locret_6AD6
000084EA 383C 00D0                  		move.w	#$D0,d4
000084EE 322B 0004                  		move.w	4(a3),d1
000084F2 0241 FFF0                  		andi.w	#-$10,d1
000084F6 9841                       		sub.w	d1,d4
000084F8 3F04                       		move.w	d4,-(sp)
000084FA 3A3C 0140                  		move.w	#$140,d5
000084FE 6100 0000                  		bsr.w	sub_6C3C
00008502 381F                       		move.w	(sp)+,d4
00008504 3A3C 0140                  		move.w	#$140,d5
00008508 7C02                       		moveq	#2,d6
0000850A 6100 0000                  		bsr.w	sub_6B06
0000850E                            
0000850E                            locret_6AD6:
0000850E 4E75                       		rts	
00008510                            
00008510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008510                            
00008510                            
00008510                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00008510 7C15                       		moveq	#$15,d6
00008512                            ; End of function sub_6AD8
00008512                            
00008512                            
00008512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008512                            
00008512                            
00008512                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00008512 2E3C 0080 0000             		move.l	#$800000,d7
00008518 2200                       		move.l	d0,d1
0000851A                            
0000851A                            loc_6AE2:
0000851A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000851E 6100 0000                  		bsr.w	sub_6BD6
00008522 2001                       		move.l	d1,d0
00008524 6100 0000                  		bsr.w	sub_6B32
00008528 5801                       		addq.b	#4,d1
0000852A 0201 007F                  		andi.b	#$7F,d1
0000852E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008532 0645 0010                  		addi.w	#$10,d5
00008536 51CE FFE2                  		dbf	d6,loc_6AE2
0000853A 4E75                       		rts	
0000853C                            ; End of function sub_6ADA
0000853C                            
0000853C                            
0000853C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853C                            
0000853C                            
0000853C                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000853C 7C0F                       		moveq	#$F,d6
0000853E                            ; End of function sub_6B04
0000853E                            
0000853E                            
0000853E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853E                            ; main draw section
0000853E                            
0000853E                            sub_6B06:
0000853E 2E3C 0080 0000             		move.l	#$800000,d7
00008544 2200                       		move.l	d0,d1
00008546                            
00008546                            loc_6B0E:
00008546 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000854A 6100 0000                  		bsr.w	sub_6BD6
0000854E 2001                       		move.l	d1,d0
00008550 6100 0000                  		bsr.w	sub_6B32
00008554 0641 0100                  		addi.w	#$100,d1
00008558 0241 0FFF                  		andi.w	#$FFF,d1
0000855C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008560 0644 0010                  		addi.w	#$10,d4
00008564 51CE FFE0                  		dbf	d6,loc_6B0E
00008568 4E75                       		rts	
0000856A                            ; End of function sub_6B06
0000856A                            
0000856A                            
0000856A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000856A                            
0000856A                            
0000856A                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000856A 8042                       		or.w	d2,d0
0000856C 4840                       		swap	d0
0000856E 0810 0003                  		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
00008572 6600                       		bne.s	loc_6B6E
00008574 0810 0002                  		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
00008578 6600                       		bne.s	loc_6B4E
0000857A 2A80                       		move.l	d0,(a5)
0000857C 2C99                       		move.l	(a1)+,(a6)
0000857E D087                       		add.l	d7,d0
00008580 2A80                       		move.l	d0,(a5)
00008582 2C99                       		move.l	(a1)+,(a6)
00008584 4E75                       		rts	
00008586                            ; ===========================================================================
00008586                            
00008586                            loc_6B4E:
00008586 2A80                       		move.l	d0,(a5)
00008588 2819                       		move.l	(a1)+,d4
0000858A 0A84 0800 0800             		eori.l	#$8000800,d4
00008590 4844                       		swap	d4
00008592 2C84                       		move.l	d4,(a6)
00008594 D087                       		add.l	d7,d0
00008596 2A80                       		move.l	d0,(a5)
00008598 2819                       		move.l	(a1)+,d4
0000859A 0A84 0800 0800             		eori.l	#$8000800,d4
000085A0 4844                       		swap	d4
000085A2 2C84                       		move.l	d4,(a6)
000085A4 4E75                       		rts	
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            loc_6B6E:
000085A6 0810 0002                  		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
000085AA 6600                       		bne.s	loc_6B90
000085AC 2A80                       		move.l	d0,(a5)
000085AE 2A19                       		move.l	(a1)+,d5
000085B0 2819                       		move.l	(a1)+,d4
000085B2 0A84 1000 1000             		eori.l	#$10001000,d4
000085B8 2C84                       		move.l	d4,(a6)
000085BA D087                       		add.l	d7,d0
000085BC 2A80                       		move.l	d0,(a5)
000085BE 0A85 1000 1000             		eori.l	#$10001000,d5
000085C4 2C85                       		move.l	d5,(a6)
000085C6 4E75                       		rts	
000085C8                            ; ===========================================================================
000085C8                            
000085C8                            loc_6B90:
000085C8 2A80                       		move.l	d0,(a5)
000085CA 2A19                       		move.l	(a1)+,d5
000085CC 2819                       		move.l	(a1)+,d4
000085CE 0A84 1800 1800             		eori.l	#$18001800,d4
000085D4 4844                       		swap	d4
000085D6 2C84                       		move.l	d4,(a6)
000085D8 D087                       		add.l	d7,d0
000085DA 2A80                       		move.l	d0,(a5)
000085DC 0A85 1800 1800             		eori.l	#$18001800,d5
000085E2 4845                       		swap	d5
000085E4 2C85                       		move.l	d5,(a6)
000085E6 4E75                       		rts	
000085E8                            ; End of function sub_6B32
000085E8                            
000085E8                            ; ===========================================================================
000085E8 4E75                       		rts	
000085EA                            ; ===========================================================================
000085EA 2A80                       		move.l	d0,(a5)
000085EC 3A3C 2000                  		move.w	#$2000,d5
000085F0 3819                       		move.w	(a1)+,d4
000085F2 D845                       		add.w	d5,d4
000085F4 3C84                       		move.w	d4,(a6)
000085F6 3819                       		move.w	(a1)+,d4
000085F8 D845                       		add.w	d5,d4
000085FA 3C84                       		move.w	d4,(a6)
000085FC D087                       		add.l	d7,d0
000085FE 2A80                       		move.l	d0,(a5)
00008600 3819                       		move.w	(a1)+,d4
00008602 D845                       		add.w	d5,d4
00008604 3C84                       		move.w	d4,(a6)
00008606 3819                       		move.w	(a1)+,d4
00008608 D845                       		add.w	d5,d4
0000860A 3C84                       		move.w	d4,(a6)
0000860C 4E75                       		rts	
0000860E                            
0000860E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000860E                            ; Reading from layout
0000860E                            
0000860E                            sub_6BD6:
0000860E 43F8 B000                  		lea	($FFFFB000).w,a1			; MJ: load Block's location
00008612 D86B 0004                  		add.w	4(a3),d4				; MJ: load Y position to d4
00008616 DA53                       		add.w	(a3),d5					; MJ: load X position to d5
00008618 3604                       		move.w	d4,d3					; MJ: copy Y position to d3
0000861A 0243 0780                  		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
0000861E E64D                       		lsr.w	#3,d5					; MJ: divide X position by 8
00008620 3005                       		move.w	d5,d0					; MJ: copy to d0
00008622 E848                       		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
00008624 0240 007F                  		andi.w	#$7F,d0					; MJ: get within 7F
00008628 E34B                       		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
0000862A D043                       		add.w	d3,d0					; MJ: add calc'd Y pos
0000862C 76FF                       		moveq	#-1,d3					; MJ: prepare FFFF in d3
0000862E 1634 0000                  		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
00008632 0243 00FF                  		andi.w	#$FF,d3					; MJ: keep within 7F
00008636 EF4B                       		lsl.w	#$07,d3					; MJ: multiply by 80
00008638 0244 0070                  		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
0000863C 0245 000E                  		andi.w	#$000E,d5				; MJ: keep X pos within 10
00008640 D644                       		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
00008642 D645                       		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
00008644 2043                       		movea.l	d3,a0					; MJ: set address (Chunk to read)
00008646 3610                       		move.w	(a0),d3
00008648 0243 03FF                  		andi.w	#$3FF,d3
0000864C E74B                       		lsl.w	#3,d3
0000864E D2C3                       		adda.w	d3,a1
00008650                            
00008650                            locret_6C1E:
00008650 4E75                       		rts	
00008652                            ; End of function sub_6BD6
00008652                            
00008652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008652                            ; getting VRam location
00008652                            
00008652                            sub_6C20:
00008652 D86B 0004                  		add.w	4(a3),d4
00008656 DA53                       		add.w	(a3),d5
00008658 0244 00F0                  		andi.w	#$F0,d4
0000865C 0245 01F0                  		andi.w	#$1F0,d5
00008660 E94C                       		lsl.w	#4,d4
00008662 E44D                       		lsr.w	#2,d5
00008664 D845                       		add.w	d5,d4
00008666 7003                       		moveq	#3,d0
00008668 4840                       		swap	d0
0000866A 3004                       		move.w	d4,d0
0000866C 4E75                       		rts	
0000866E                            ; End of function sub_6C20
0000866E                            
0000866E                            
0000866E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000866E                            ; not used
0000866E                            
0000866E                            
0000866E                            sub_6C3C:
0000866E D86B 0004                  		add.w	4(a3),d4
00008672 DA53                       		add.w	(a3),d5
00008674 0244 00F0                  		andi.w	#$F0,d4
00008678 0245 01F0                  		andi.w	#$1F0,d5
0000867C E94C                       		lsl.w	#4,d4
0000867E E44D                       		lsr.w	#2,d5
00008680 D845                       		add.w	d5,d4
00008682 7002                       		moveq	#2,d0
00008684 4840                       		swap	d0
00008686 3004                       		move.w	d4,d0
00008688 4E75                       		rts	
0000868A                            ; End of function sub_6C3C
0000868A                            
0000868A                            ; ---------------------------------------------------------------------------
0000868A                            ; Subroutine to	load tiles as soon as the level	appears
0000868A                            ; ---------------------------------------------------------------------------
0000868A                            
0000868A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000868A                            
0000868A                            
0000868A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000868A 4BF9 00C0 0004             		lea	($C00004).l,a5
00008690 4DF9 00C0 0000             		lea	($C00000).l,a6
00008696 47F8 F700                  		lea	($FFFFF700).w,a3
0000869A 2878 A400                  		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
0000869E 343C 4000                  		move.w	#$4000,d2
000086A2 6100                       		bsr.s	LoadTilesFromStart2
000086A4 47F8 F708                  		lea	($FFFFF708).w,a3
000086A8 2878 A404                  		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
000086AC 343C 6000                  		move.w	#$6000,d2
000086B0                            ; End of function LoadTilesFromStart
000086B0                            
000086B0                            
000086B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B0                            
000086B0                            
000086B0                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000086B0 78F0                       		moveq	#-$10,d4
000086B2 7C0F                       		moveq	#$F,d6
000086B4                            
000086B4                            loc_6C82:
000086B4 48E7 0E00                  		movem.l	d4-d6,-(sp)
000086B8 7A00                       		moveq	#0,d5
000086BA 3204                       		move.w	d4,d1
000086BC 6100 FF94                  		bsr.w	sub_6C20
000086C0 3801                       		move.w	d1,d4
000086C2 7A00                       		moveq	#0,d5
000086C4 7C1F                       		moveq	#$1F,d6
000086C6 6100 FE4A                  		bsr.w	sub_6ADA
000086CA 4CDF 0070                  		movem.l	(sp)+,d4-d6
000086CE 0644 0010                  		addi.w	#$10,d4
000086D2 51CE FFE0                  		dbf	d6,loc_6C82
000086D6 4E75                       		rts	
000086D8                            ; End of function LoadTilesFromStart2
000086D8                            
000086D8                            ; ---------------------------------------------------------------------------
000086D8                            ; Main Load Block loading subroutine
000086D8                            ; ---------------------------------------------------------------------------
000086D8                            
000086D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086D8                            
000086D8                            
000086D8                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000086D8 7000                       		moveq	#0,d0
000086DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000086DE E948                       		lsl.w	#4,d0
000086E0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000086E6 45F2 0000                  		lea	(a2,d0.w),a2
000086EA 2F0A                       		move.l	a2,-(sp)
000086EC 588A                       		addq.l	#4,a2
000086EE 205A                       		movea.l	(a2)+,a0
000086F0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000086F4 303C 0000                  		move.w	#0,d0
000086F8 6100 902A                  		bsr.w	EniDec
000086FC 205A                       		movea.l	(a2)+,a0
000086FE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00008704 6100 919C                  		bsr.w	KosDec
00008708 6100 0000                  		bsr.w	LevelLayoutLoad
0000870C 301A                       		move.w	(a2)+,d0
0000870E 3012                       		move.w	(a2),d0
00008710 0240 00FF                  		andi.w	#$FF,d0
00008714 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000871A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000871C 700C                       		moveq	#$C,d0		; use SB3 Palette
0000871E                            
0000871E                            MLB_ChkSBZPal:
0000871E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00008724 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00008726 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000872C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000872E                            
0000872E                            MLB_UsePal0E:
0000872E 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
00008730                            
00008730                            MLB_NormalPal:
00008730 6100 9B62                  		bsr.w	PalLoad1	; load Palette (based on	d0)
00008734 245F                       		movea.l	(sp)+,a2
00008736 584A                       		addq.w	#4,a2
00008738 7000                       		moveq	#0,d0
0000873A 1012                       		move.b	(a2),d0
0000873C 6700                       		beq.s	locret_6D10
0000873E 6100 8E46                  		bsr.w	LoadPLC		; load pattern load cues
00008742                            
00008742                            locret_6D10:
00008742 4E75                       		rts	
00008744                            ; End of function MainLoadBlockLoad
00008744                            
00008744                            ; ---------------------------------------------------------------------------
00008744                            ; Level	layout loading subroutine
00008744                            ; ---------------------------------------------------------------------------
00008744                            
00008744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008744                            ; This method now releases free ram space from A408 - A7FF
00008744                            
00008744                            LevelLayoutLoad:
00008744 3038 FE10                  		move.w	($FFFFFE10).w,d0
00008748 ED08                       		lsl.b	#6,d0
0000874A E848                       		lsr.w	#4,d0
0000874C 3400                       		move.w	d0,d2
0000874E D040                       		add.w	d0,d0
00008750 D042                       		add.w	d2,d0
00008752 43F9 0000 0000             		lea	(Level_Index).l,a1
00008758 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
0000875C 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
00008760 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
00008764 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
00008768 4E75                       		rts						; MJ: Return
0000876A                            
0000876A                            ; End of function LevelLayoutLoad2
0000876A                            
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Dynamic screen resize	loading	subroutine
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000876A                            
0000876A                            
0000876A                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000876A 7000                       		moveq	#0,d0
0000876C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008770 D040                       		add.w	d0,d0
00008772 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00008776 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000877A 7202                       		moveq	#2,d1
0000877C 3038 F726                  		move.w	($FFFFF726).w,d0
00008780 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00008784 6700                       		beq.s	locret_6DAA
00008786 6400                       		bcc.s	loc_6DAC
00008788 4441                       		neg.w	d1
0000878A 3038 F704                  		move.w	($FFFFF704).w,d0
0000878E B078 F726                  		cmp.w	($FFFFF726).w,d0
00008792 6300                       		bls.s	loc_6DA0
00008794 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00008798 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000879E                            
0000879E                            loc_6DA0:
0000879E D378 F72E                  		add.w	d1,($FFFFF72E).w
000087A2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087A8                            
000087A8                            locret_6DAA:
000087A8 4E75                       		rts	
000087AA                            ; ===========================================================================
000087AA                            
000087AA                            loc_6DAC:				; XREF: DynScrResizeLoad
000087AA 3038 F704                  		move.w	($FFFFF704).w,d0
000087AE 5040                       		addq.w	#8,d0
000087B0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000087B4 6500                       		bcs.s	loc_6DC4
000087B6 0838 0001 D022             		btst	#1,($FFFFD022).w
000087BC 6700                       		beq.s	loc_6DC4
000087BE D241                       		add.w	d1,d1
000087C0 D241                       		add.w	d1,d1
000087C2                            
000087C2                            loc_6DC4:
000087C2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000087C6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000087CC 4E75                       		rts	
000087CE                            ; End of function DynScrResizeLoad
000087CE                            
000087CE                            ; ===========================================================================
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Offset index for dynamic screen resizing
000087CE                            ; ---------------------------------------------------------------------------
000087CE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000087D2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000087D6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000087DA 0000                       		dc.w Resize_Ending-Resize_Index
000087DC                            ; ===========================================================================
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            ; Green	Hill Zone dynamic screen resizing
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            
000087DC                            Resize_GHZ:				; XREF: Resize_Index
000087DC 7000                       		moveq	#0,d0
000087DE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000087E2 D040                       		add.w	d0,d0
000087E4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000087E8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000087EC                            ; ===========================================================================
000087EC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000087EE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000087F0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000087F2                            ; ===========================================================================
000087F2                            
000087F2                            Resize_GHZ1:
000087F2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000087F8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000087FE 6500                       		bcs.s	locret_6E08	; if not, branch
00008800 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00008806                            
00008806                            locret_6E08:
00008806 4E75                       		rts	
00008808                            ; ===========================================================================
00008808                            
00008808                            Resize_GHZ2:
00008808 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000880E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00008814 6500                       		bcs.s	locret_6E3A
00008816 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000881C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00008822 6500                       		bcs.s	locret_6E3A
00008824 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000882A 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00008830 6500                       		bcs.s	locret_6E3A
00008832 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008838                            
00008838                            locret_6E3A:
00008838 4E75                       		rts	
0000883A                            ; ===========================================================================
0000883A                            
0000883A                            Resize_GHZ3:
0000883A 7000                       		moveq	#0,d0
0000883C 1038 F742                  		move.b	($FFFFF742).w,d0
00008840 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008844 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008848                            ; ===========================================================================
00008848 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000884A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000884C 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000884E                            ; ===========================================================================
0000884E                            
0000884E                            Resize_GHZ3main:
0000884E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00008854 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000885A 6500                       		bcs.s	locret_6E96
0000885C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00008862 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00008868 6500                       		bcs.s	locret_6E96
0000886A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00008870 6500                       		bcs.s	loc_6E98
00008872 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00008878 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000887E 6400                       		bcc.s	loc_6E8E
00008880 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00008886 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000888C                            
0000888C                            loc_6E8E:
0000888C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008892 6400                       		bcc.s	loc_6E98
00008894                            
00008894                            locret_6E96:
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            loc_6E98:
00008896 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000889C 5438 F742                  		addq.b	#2,($FFFFF742).w
000088A0 4E75                       		rts	
000088A2                            ; ===========================================================================
000088A2                            
000088A2                            Resize_GHZ3boss:
000088A2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000088A8 6400                       		bcc.s	loc_6EB0
000088AA 5538 F742                  		subq.b	#2,($FFFFF742).w
000088AE                            
000088AE                            loc_6EB0:
000088AE 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000088B4 6500                       		bcs.s	locret_6EE8
000088B6 6100 0000                  		bsr.w	SingleObjLoad
000088BA 6600                       		bne.s	loc_6ED0
000088BC 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000088C0 337C 2A60 0008             		move.w	#$2A60,8(a1)
000088C6 337C 0280 000C             		move.w	#$280,$C(a1)
000088CC                            
000088CC                            loc_6ED0:
000088CC 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000088D2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000088D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000088DC 7011                       		moveq	#$11,d0
000088DE 6000 8CA6                  		bra.w	LoadPLC		; load boss patterns
000088E2                            ; ===========================================================================
000088E2                            
000088E2                            locret_6EE8:
000088E2 4E75                       		rts	
000088E4                            ; ===========================================================================
000088E4                            
000088E4                            Resize_GHZ3end:
000088E4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000088EA 4E75                       		rts	
000088EC                            ; ===========================================================================
000088EC                            ; ---------------------------------------------------------------------------
000088EC                            ; Labyrinth Zone dynamic screen	resizing
000088EC                            ; ---------------------------------------------------------------------------
000088EC                            
000088EC                            Resize_LZ:				; XREF: Resize_Index
000088EC 7000                       		moveq	#0,d0
000088EE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000088F2 D040                       		add.w	d0,d0
000088F4 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000088F8 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000088FC                            ; ===========================================================================
000088FC 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000088FE 0000                       		dc.w Resize_LZ12-Resize_LZx
00008900 0000                       		dc.w Resize_LZ3-Resize_LZx
00008902 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008904                            ; ===========================================================================
00008904                            
00008904                            Resize_LZ12:
00008904 4E75                       		rts	
00008906                            ; ===========================================================================
00008906                            
00008906                            Resize_LZ3:
00008906 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
0000890A 6700                       		beq.s	loc_6F28				; if not, branch
0000890C 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
00008910 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
00008916 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
00008918 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
00008920 303C 00B7                  		move.w	#$B7,d0
00008924 6100 89A8                  		bsr.w	PlaySound_Special ; play rumbling sound
00008928                            
00008928                            loc_6F28:
00008928 4A38 F742                  		tst.b	($FFFFF742).w
0000892C 6600                       		bne.s	locret_6F64
0000892E 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008934 6500                       		bcs.s	locret_6F62
00008936 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000893C 6400                       		bcc.s	locret_6F62
0000893E 6100 0000                  		bsr.w	SingleObjLoad
00008942 6600                       		bne.s	loc_6F4A
00008944 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008948                            
00008948                            loc_6F4A:
00008948 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
0000894E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008954 5438 F742                  		addq.b	#2,($FFFFF742).w
00008958 7011                       		moveq	#$11,d0
0000895A 6000 8C2A                  		bra.w	LoadPLC		; load boss patterns
0000895E                            ; ===========================================================================
0000895E                            
0000895E                            locret_6F62:
0000895E 4E75                       		rts	
00008960                            ; ===========================================================================
00008960                            
00008960                            locret_6F64:
00008960 4E75                       		rts	
00008962                            ; ===========================================================================
00008962                            
00008962                            Resize_SBZ3:
00008962 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008968 6500                       		bcs.s	locret_6F8C
0000896A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008970 6400                       		bcc.s	locret_6F8C	; if not, branch
00008972 4238 FE30                  		clr.b	($FFFFFE30).w
00008976 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000897C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008982 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008988                            
00008988                            locret_6F8C:
00008988 4E75                       		rts	
0000898A                            ; ===========================================================================
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Marble Zone dynamic screen resizing
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            
0000898A                            Resize_MZ:				; XREF: Resize_Index
0000898A 7000                       		moveq	#0,d0
0000898C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008990 D040                       		add.w	d0,d0
00008992 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008996 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000899A                            ; ===========================================================================
0000899A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000899C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000899E 0000                       		dc.w Resize_MZ3-Resize_MZx
000089A0                            ; ===========================================================================
000089A0                            
000089A0                            Resize_MZ1:
000089A0 7000                       		moveq	#0,d0
000089A2 1038 F742                  		move.b	($FFFFF742).w,d0
000089A6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000089AA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000089AE                            ; ===========================================================================
000089AE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000089B0 0000                       		dc.w loc_6FEA-off_6FB2
000089B2 0000                       		dc.w loc_702E-off_6FB2
000089B4 0000                       		dc.w loc_7050-off_6FB2
000089B6                            ; ===========================================================================
000089B6                            
000089B6                            loc_6FBA:
000089B6 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000089BC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000089C2 6500                       		bcs.s	locret_6FE8
000089C4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000089CA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000089D0 6500                       		bcs.s	locret_6FE8
000089D2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000089D8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089DE 6500                       		bcs.s	locret_6FE8
000089E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000089E4                            
000089E4                            locret_6FE8:
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            
000089E6                            loc_6FEA:
000089E6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000089EC 6400                       		bcc.s	loc_6FF8
000089EE 5538 F742                  		subq.b	#2,($FFFFF742).w
000089F2 4E75                       		rts	
000089F4                            ; ===========================================================================
000089F4                            
000089F4                            loc_6FF8:
000089F4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000089FA 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008A00 6400                       		bcc.s	locret_702C
00008A02 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008A08 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008A0E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008A14 6400                       		bcc.s	locret_702C
00008A16 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A1C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A22 6500                       		bcs.s	locret_702C
00008A24 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A28                            
00008A28                            locret_702C:
00008A28 4E75                       		rts	
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            loc_702E:
00008A2A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008A30 6400                       		bcc.s	loc_703C
00008A32 5538 F742                  		subq.b	#2,($FFFFF742).w
00008A36 4E75                       		rts	
00008A38                            ; ===========================================================================
00008A38                            
00008A38                            loc_703C:
00008A38 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008A3E 6500                       		bcs.s	locret_704E
00008A40 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008A46 5438 F742                  		addq.b	#2,($FFFFF742).w
00008A4A                            
00008A4A                            locret_704E:
00008A4A 4E75                       		rts	
00008A4C                            ; ===========================================================================
00008A4C                            
00008A4C                            loc_7050:
00008A4C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008A52 6500                       		bcs.s	locret_7072
00008A54 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008A5A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008A60 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008A66 6500                       		bcs.s	locret_7072
00008A68 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008A6E                            
00008A6E                            locret_7072:
00008A6E 4E75                       		rts	
00008A70                            ; ===========================================================================
00008A70                            
00008A70                            Resize_MZ2:
00008A70 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008A76 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008A7C 6500                       		bcs.s	locret_7088
00008A7E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008A84                            
00008A84                            locret_7088:
00008A84 4E75                       		rts	
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            Resize_MZ3:
00008A86 7000                       		moveq	#0,d0
00008A88 1038 F742                  		move.b	($FFFFF742).w,d0
00008A8C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A90 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A94                            ; ===========================================================================
00008A94 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008A96 0000                       		dc.w Resize_MZ3end-off_7098
00008A98                            ; ===========================================================================
00008A98                            
00008A98                            Resize_MZ3boss:
00008A98 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008A9E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008AA4 6500                       		bcs.s	locret_70E8
00008AA6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008AAC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008AB2 6500                       		bcs.s	locret_70E8
00008AB4 6100 0000                  		bsr.w	SingleObjLoad
00008AB8 6600                       		bne.s	loc_70D0
00008ABA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008ABE 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008AC4 337C 022C 000C             		move.w	#$22C,$C(a1)
00008ACA                            
00008ACA                            loc_70D0:
00008ACA 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008AD0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008AD6 5438 F742                  		addq.b	#2,($FFFFF742).w
00008ADA 7011                       		moveq	#$11,d0
00008ADC 6000 8AA8                  		bra.w	LoadPLC		; load boss patterns
00008AE0                            ; ===========================================================================
00008AE0                            
00008AE0                            locret_70E8:
00008AE0 4E75                       		rts	
00008AE2                            ; ===========================================================================
00008AE2                            
00008AE2                            Resize_MZ3end:
00008AE2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008AE8 4E75                       		rts	
00008AEA                            ; ===========================================================================
00008AEA                            ; ---------------------------------------------------------------------------
00008AEA                            ; Star Light Zone dynamic screen resizing
00008AEA                            ; ---------------------------------------------------------------------------
00008AEA                            
00008AEA                            Resize_SLZ:				; XREF: Resize_Index
00008AEA 7000                       		moveq	#0,d0
00008AEC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008AF0 D040                       		add.w	d0,d0
00008AF2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008AF6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008AFA                            ; ===========================================================================
00008AFA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008AFC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008AFE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            Resize_SLZ12:
00008B00 4E75                       		rts	
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            Resize_SLZ3:
00008B02 7000                       		moveq	#0,d0
00008B04 1038 F742                  		move.b	($FFFFF742).w,d0
00008B08 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008B0C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008B10                            ; ===========================================================================
00008B10 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008B12 0000                       		dc.w Resize_SLZ3boss-off_7118
00008B14 0000                       		dc.w Resize_SLZ3end-off_7118
00008B16                            ; ===========================================================================
00008B16                            
00008B16                            Resize_SLZ3main:
00008B16 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008B1C 6500                       		bcs.s	locret_7130
00008B1E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008B24 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B28                            
00008B28                            locret_7130:
00008B28 4E75                       		rts	
00008B2A                            ; ===========================================================================
00008B2A                            
00008B2A                            Resize_SLZ3boss:
00008B2A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008B30 6500                       		bcs.s	locret_715C
00008B32 6100 0000                  		bsr.w	SingleObjLoad
00008B36 6600                       		bne.s	loc_7144
00008B38 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008B3C                            
00008B3C                            loc_7144:
00008B3C 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008B42 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008B48 5438 F742                  		addq.b	#2,($FFFFF742).w
00008B4C 7011                       		moveq	#$11,d0
00008B4E 6000 8A36                  		bra.w	LoadPLC		; load boss patterns
00008B52                            ; ===========================================================================
00008B52                            
00008B52                            locret_715C:
00008B52 4E75                       		rts	
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            Resize_SLZ3end:
00008B54 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008B5A 4E75                       		rts
00008B5C 4E75                       		rts
00008B5E                            ; ===========================================================================
00008B5E                            ; ---------------------------------------------------------------------------
00008B5E                            ; Spring Yard Zone dynamic screen resizing
00008B5E                            ; ---------------------------------------------------------------------------
00008B5E                            
00008B5E                            Resize_SYZ:				; XREF: Resize_Index
00008B5E 7000                       		moveq	#0,d0
00008B60 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008B64 D040                       		add.w	d0,d0
00008B66 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008B6A 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008B6E                            ; ===========================================================================
00008B6E 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008B70 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008B72 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008B74                            ; ===========================================================================
00008B74                            
00008B74                            Resize_SYZ1:
00008B74 4E75                       		rts	
00008B76                            ; ===========================================================================
00008B76                            
00008B76                            Resize_SYZ2:
00008B76 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B7C 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008B82 6500                       		bcs.s	locret_71A2
00008B84 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008B8A 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008B90 6500                       		bcs.s	locret_71A2
00008B92 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008B98                            
00008B98                            locret_71A2:
00008B98 4E75                       		rts	
00008B9A                            ; ===========================================================================
00008B9A                            
00008B9A                            Resize_SYZ3:
00008B9A 7000                       		moveq	#0,d0
00008B9C 1038 F742                  		move.b	($FFFFF742).w,d0
00008BA0 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008BA4 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008BA8                            ; ===========================================================================
00008BA8 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008BAA 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008BAC 0000                       		dc.w Resize_SYZ3end-off_71B2
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            Resize_SYZ3main:
00008BAE 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008BB4 6500                       		bcs.s	locret_71CE
00008BB6 6100 0000                  		bsr.w	SingleObjLoad
00008BBA 6600                       		bne.s	locret_71CE
00008BBC 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008BC0 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BC4                            
00008BC4                            locret_71CE:
00008BC4 4E75                       		rts	
00008BC6                            ; ===========================================================================
00008BC6                            
00008BC6                            Resize_SYZ3boss:
00008BC6 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008BCC 6500                       		bcs.s	locret_7200
00008BCE 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008BD4 6100 0000                  		bsr.w	SingleObjLoad
00008BD8 6600                       		bne.s	loc_71EC
00008BDA 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008BDE 5438 F742                  		addq.b	#2,($FFFFF742).w
00008BE2                            
00008BE2                            loc_71EC:
00008BE2 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008BE8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008BEE 7011                       		moveq	#$11,d0
00008BF0 6000 8994                  		bra.w	LoadPLC		; load boss patterns
00008BF4                            ; ===========================================================================
00008BF4                            
00008BF4                            locret_7200:
00008BF4 4E75                       		rts	
00008BF6                            ; ===========================================================================
00008BF6                            
00008BF6                            Resize_SYZ3end:
00008BF6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008BFC 4E75                       		rts	
00008BFE                            ; ===========================================================================
00008BFE                            ; ---------------------------------------------------------------------------
00008BFE                            ; Scrap	Brain Zone dynamic screen resizing
00008BFE                            ; ---------------------------------------------------------------------------
00008BFE                            
00008BFE                            Resize_SBZ:				; XREF: Resize_Index
00008BFE 7000                       		moveq	#0,d0
00008C00 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008C04 D040                       		add.w	d0,d0
00008C06 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008C0A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008C0E                            ; ===========================================================================
00008C0E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008C10 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008C12 0000                       		dc.w Resize_FZ-Resize_SBZx
00008C14                            ; ===========================================================================
00008C14                            
00008C14                            Resize_SBZ1:
00008C14 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008C1A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008C20 6500                       		bcs.s	locret_7242
00008C22 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008C28 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008C2E 6500                       		bcs.s	locret_7242
00008C30 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008C36                            
00008C36                            locret_7242:
00008C36 4E75                       		rts	
00008C38                            ; ===========================================================================
00008C38                            
00008C38                            Resize_SBZ2:
00008C38 7000                       		moveq	#0,d0
00008C3A 1038 F742                  		move.b	($FFFFF742).w,d0
00008C3E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C42 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C46                            ; ===========================================================================
00008C46 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008C48 0000                       		dc.w Resize_SBZ2boss-off_7252
00008C4A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008C4C 0000                       		dc.w Resize_SBZ2end-off_7252
00008C4E                            ; ===========================================================================
00008C4E                            
00008C4E                            Resize_SBZ2main:
00008C4E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008C54 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008C5A 6500                       		bcs.s	locret_727A
00008C5C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008C62 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008C68 6500                       		bcs.s	locret_727A
00008C6A 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C6E                            
00008C6E                            locret_727A:
00008C6E 4E75                       		rts	
00008C70                            ; ===========================================================================
00008C70                            
00008C70                            Resize_SBZ2boss:
00008C70 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008C76 6500                       		bcs.s	locret_7298
00008C78 6100 0000                  		bsr.w	SingleObjLoad
00008C7C 6600                       		bne.s	locret_7298
00008C7E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008C82 5438 F742                  		addq.b	#2,($FFFFF742).w
00008C86 701E                       		moveq	#$1E,d0
00008C88 6000 88FC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008C8C                            ; ===========================================================================
00008C8C                            
00008C8C                            locret_7298:
00008C8C 4E75                       		rts	
00008C8E                            ; ===========================================================================
00008C8E                            
00008C8E                            Resize_SBZ2boss2:
00008C8E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008C94 6500                       		bcs.s	loc_72B6
00008C96 6100 0000                  		bsr.w	SingleObjLoad
00008C9A 6600                       		bne.s	loc_72B0
00008C9C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008CA0 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CA4                            
00008CA4                            loc_72B0:
00008CA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008CAA                            
00008CAA                            loc_72B6:
00008CAA 6000                       		bra.s	loc_72C2
00008CAC                            ; ===========================================================================
00008CAC                            
00008CAC                            Resize_SBZ2end:
00008CAC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008CB2 6500                       		bcs.s	loc_72C2
00008CB4 4E75                       		rts	
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            loc_72C2:
00008CB6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008CBC 4E75                       		rts	
00008CBE                            ; ===========================================================================
00008CBE                            
00008CBE                            Resize_FZ:
00008CBE 7000                       		moveq	#0,d0
00008CC0 1038 F742                  		move.b	($FFFFF742).w,d0
00008CC4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008CC8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008CCC                            ; ===========================================================================
00008CCC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008CD0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008CD4 0000                       		dc.w Resize_FZend2-off_72D8
00008CD6                            ; ===========================================================================
00008CD6                            
00008CD6                            Resize_FZmain:
00008CD6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00008CDC 6500                       		bcs.s	loc_72F4
00008CDE 5438 F742                  		addq.b	#2,($FFFFF742).w
00008CE2 701F                       		moveq	#$1F,d0
00008CE4 6100 88A0                  		bsr.w	LoadPLC		; load FZ boss patterns
00008CE8                            
00008CE8                            loc_72F4:
00008CE8 60CC                       		bra.s	loc_72C2
00008CEA                            ; ===========================================================================
00008CEA                            
00008CEA                            Resize_FZboss:
00008CEA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008CF0 6500                       		bcs.s	loc_7312
00008CF2 6100 0000                  		bsr.w	SingleObjLoad
00008CF6 6600                       		bne.s	loc_7312
00008CF8 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00008CFC 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D00 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008D06                            
00008D06                            loc_7312:
00008D06 60AE                       		bra.s	loc_72C2
00008D08                            ; ===========================================================================
00008D08                            
00008D08                            Resize_FZend:
00008D08 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008D0E 6500                       		bcs.s	loc_7320
00008D10 5438 F742                  		addq.b	#2,($FFFFF742).w
00008D14                            
00008D14                            loc_7320:
00008D14 60A0                       		bra.s	loc_72C2
00008D16                            ; ===========================================================================
00008D16                            
00008D16                            locret_7322:
00008D16 4E75                       		rts	
00008D18                            ; ===========================================================================
00008D18                            
00008D18                            Resize_FZend2:
00008D18 609C                       		bra.s	loc_72C2
00008D1A                            ; ===========================================================================
00008D1A                            ; ---------------------------------------------------------------------------
00008D1A                            ; Ending sequence dynamic screen resizing (empty)
00008D1A                            ; ---------------------------------------------------------------------------
00008D1A                            
00008D1A                            Resize_Ending:				; XREF: Resize_Index
00008D1A 4E75                       		rts	
00008D1C                            ; ===========================================================================
00008D1C                            ; ---------------------------------------------------------------------------
00008D1C                            ; Object 11 - GHZ bridge
00008D1C                            ; ---------------------------------------------------------------------------
00008D1C                            
00008D1C                            Obj11:					; XREF: Obj_Index
00008D1C 7000                       		moveq	#0,d0
00008D1E 1028 0024                  		move.b	$24(a0),d0
00008D22 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008D26 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008D2A                            ; ===========================================================================
00008D2A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008D2E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008D32 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008D36                            ; ===========================================================================
00008D36                            
00008D36                            Obj11_Main:				; XREF: Obj11_Index
00008D36 5428 0024                  		addq.b	#2,$24(a0)
00008D3A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008D42 317C 438E 0002             		move.w	#$438E,2(a0)
00008D48 117C 0004 0001             		move.b	#4,1(a0)
00008D4E 117C 0003 0018             		move.b	#3,$18(a0)
00008D54 117C 0080 0019             		move.b	#$80,$19(a0)
00008D5A 3428 000C                  		move.w	$C(a0),d2
00008D5E 3628 0008                  		move.w	8(a0),d3
00008D62 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D64 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008D68 7200                       		moveq	#0,d1
00008D6A 1212                       		move.b	(a2),d1		; copy a2 to d1
00008D6C 14FC 0000                  		move.b	#0,(a2)+
00008D70 3001                       		move.w	d1,d0
00008D72 E248                       		lsr.w	#1,d0
00008D74 E948                       		lsl.w	#4,d0
00008D76 9640                       		sub.w	d0,d3
00008D78 5501                       		subq.b	#2,d1
00008D7A 6500                       		bcs.s	Obj11_Action
00008D7C                            
00008D7C                            Obj11_MakeBdg:
00008D7C 6100 0000                  		bsr.w	SingleObjLoad
00008D80 6600                       		bne.s	Obj11_Action
00008D82 5228 0028                  		addq.b	#1,$28(a0)
00008D86 B668 0008                  		cmp.w	8(a0),d3
00008D8A 6600                       		bne.s	loc_73B8
00008D8C 0643 0010                  		addi.w	#$10,d3
00008D90 3142 000C                  		move.w	d2,$C(a0)
00008D94 3142 003C                  		move.w	d2,$3C(a0)
00008D98 3A08                       		move.w	a0,d5
00008D9A 0445 D000                  		subi.w	#-$3000,d5
00008D9E EC4D                       		lsr.w	#6,d5
00008DA0 0245 007F                  		andi.w	#$7F,d5
00008DA4 14C5                       		move.b	d5,(a2)+
00008DA6 5228 0028                  		addq.b	#1,$28(a0)
00008DAA                            
00008DAA                            loc_73B8:				; XREF: ROM:00007398j
00008DAA 3A09                       		move.w	a1,d5
00008DAC 0445 D000                  		subi.w	#-$3000,d5
00008DB0 EC4D                       		lsr.w	#6,d5
00008DB2 0245 007F                  		andi.w	#$7F,d5
00008DB6 14C5                       		move.b	d5,(a2)+
00008DB8 137C 000A 0024             		move.b	#$A,$24(a1)
00008DBE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008DC0 3342 000C                  		move.w	d2,$C(a1)
00008DC4 3342 003C                  		move.w	d2,$3C(a1)
00008DC8 3343 0008                  		move.w	d3,8(a1)
00008DCC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008DD4 337C 438E 0002             		move.w	#$438E,2(a1)
00008DDA 137C 0004 0001             		move.b	#4,1(a1)
00008DE0 137C 0003 0018             		move.b	#3,$18(a1)
00008DE6 137C 0008 0019             		move.b	#8,$19(a1)
00008DEC 0643 0010                  		addi.w	#$10,d3
00008DF0 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008DF4                            
00008DF4                            Obj11_Action:				; XREF: Obj11_Index
00008DF4 6100                       		bsr.s	Obj11_Solid
00008DF6 4A28 003E                  		tst.b	$3E(a0)
00008DFA 6700                       		beq.s	Obj11_Display
00008DFC 5928 003E                  		subq.b	#4,$3E(a0)
00008E00 6100 0000                  		bsr.w	Obj11_Bend
00008E04                            
00008E04                            Obj11_Display:
00008E04 6100 0000                  		bsr.w	DisplaySprite
00008E08 6000 0000                  		bra.w	Obj11_ChkDel
00008E0C                            
00008E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E0C                            
00008E0C                            
00008E0C                            Obj11_Solid:				; XREF: Obj11_Action
00008E0C 7200                       		moveq	#0,d1
00008E0E 1228 0028                  		move.b	$28(a0),d1
00008E12 E749                       		lsl.w	#3,d1
00008E14 3401                       		move.w	d1,d2
00008E16 5041                       		addq.w	#8,d1
00008E18 D442                       		add.w	d2,d2
00008E1A 43F8 D000                  		lea	($FFFFD000).w,a1
00008E1E 4A69 0012                  		tst.w	$12(a1)
00008E22 6B00 0000                  		bmi.w	locret_751E
00008E26 3029 0008                  		move.w	8(a1),d0
00008E2A 9068 0008                  		sub.w	8(a0),d0
00008E2E D041                       		add.w	d1,d0
00008E30 6B00 0000                  		bmi.w	locret_751E
00008E34 B042                       		cmp.w	d2,d0
00008E36 6400 0000                  		bcc.w	locret_751E
00008E3A 6000                       		bra.s	Platform2
00008E3C                            ; End of function Obj11_Solid
00008E3C                            
00008E3C                            ; ---------------------------------------------------------------------------
00008E3C                            ; Platform subroutine
00008E3C                            ; ---------------------------------------------------------------------------
00008E3C                            
00008E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E3C                            
00008E3C                            
00008E3C                            PlatformObject:
00008E3C 43F8 D000                  		lea	($FFFFD000).w,a1
00008E40 4A69 0012                  		tst.w	$12(a1)
00008E44 6B00 0000                  		bmi.w	locret_751E
00008E48 3029 0008                  		move.w	8(a1),d0
00008E4C 9068 0008                  		sub.w	8(a0),d0
00008E50 D041                       		add.w	d1,d0
00008E52 6B00 0000                  		bmi.w	locret_751E
00008E56 D241                       		add.w	d1,d1
00008E58 B041                       		cmp.w	d1,d0
00008E5A 6400 0000                  		bcc.w	locret_751E
00008E5E                            
00008E5E                            Platform2:
00008E5E 3028 000C                  		move.w	$C(a0),d0
00008E62 5140                       		subq.w	#8,d0
00008E64                            
00008E64                            Platform3:
00008E64 3429 000C                  		move.w	$C(a1),d2
00008E68 1229 0016                  		move.b	$16(a1),d1
00008E6C 4881                       		ext.w	d1
00008E6E D242                       		add.w	d2,d1
00008E70 5841                       		addq.w	#4,d1
00008E72 9041                       		sub.w	d1,d0
00008E74 6200 0000                  		bhi.w	locret_751E
00008E78 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E7C 6500 0000                  		bcs.w	locret_751E
00008E80 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008E84 6B00 0000                  		bmi.w	locret_751E
00008E88 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008E8E 6400 0000                  		bcc.w	locret_751E
00008E92 D440                       		add.w	d0,d2
00008E94 5642                       		addq.w	#3,d2
00008E96 3342 000C                  		move.w	d2,$C(a1)
00008E9A 5428 0024                  		addq.b	#2,$24(a0)
00008E9E                            
00008E9E                            loc_74AE:
00008E9E 0829 0003 0022             		btst	#3,$22(a1)
00008EA4 6700                       		beq.s	loc_74DC
00008EA6 7000                       		moveq	#0,d0
00008EA8 1029 003D                  		move.b	$3D(a1),d0
00008EAC ED48                       		lsl.w	#6,d0
00008EAE 0680 00FF D000             		addi.l	#$FFD000,d0
00008EB4 2440                       		movea.l	d0,a2
00008EB6 08AA 0003 0022             		bclr	#3,$22(a2)
00008EBC 422A 0025                  		clr.b	$25(a2)
00008EC0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008EC6 6600                       		bne.s	loc_74DC
00008EC8 552A 0024                  		subq.b	#2,$24(a2)
00008ECC                            
00008ECC                            loc_74DC:
00008ECC 3008                       		move.w	a0,d0
00008ECE 0440 D000                  		subi.w	#-$3000,d0
00008ED2 EC48                       		lsr.w	#6,d0
00008ED4 0240 007F                  		andi.w	#$7F,d0
00008ED8 1340 003D                  		move.b	d0,$3D(a1)
00008EDC 137C 0000 0026             		move.b	#0,$26(a1)
00008EE2 337C 0000 0012             		move.w	#0,$12(a1)
00008EE8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00008EEE 0829 0001 0022             		btst	#1,$22(a1)
00008EF4 6700                       		beq.s	loc_7512
00008EF6 2F08                       		move.l	a0,-(sp)
00008EF8 2049                       		movea.l	a1,a0
00008EFA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008F00 205F                       		movea.l	(sp)+,a0
00008F02                            
00008F02                            loc_7512:
00008F02 08E9 0003 0022             		bset	#3,$22(a1)
00008F08 08E8 0003 0022             		bset	#3,$22(a0)
00008F0E                            
00008F0E                            locret_751E:
00008F0E 4E75                       		rts	
00008F10                            ; End of function PlatformObject
00008F10                            
00008F10                            ; ---------------------------------------------------------------------------
00008F10                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008F10                            ; ---------------------------------------------------------------------------
00008F10                            
00008F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F10                            
00008F10                            
00008F10                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008F10 43F8 D000                  		lea	($FFFFD000).w,a1
00008F14 4A69 0012                  		tst.w	$12(a1)
00008F18 6B00 FFF4                  		bmi.w	locret_751E
00008F1C 3029 0008                  		move.w	8(a1),d0
00008F20 9068 0008                  		sub.w	8(a0),d0
00008F24 D041                       		add.w	d1,d0
00008F26 6BE6                       		bmi.s	locret_751E
00008F28 D241                       		add.w	d1,d1
00008F2A B041                       		cmp.w	d1,d0
00008F2C 64E0                       		bcc.s	locret_751E
00008F2E 0828 0000 0001             		btst	#0,1(a0)
00008F34 6700                       		beq.s	loc_754A
00008F36 4640                       		not.w	d0
00008F38 D041                       		add.w	d1,d0
00008F3A                            
00008F3A                            loc_754A:
00008F3A E248                       		lsr.w	#1,d0
00008F3C 7600                       		moveq	#0,d3
00008F3E 1632 0000                  		move.b	(a2,d0.w),d3
00008F42 3028 000C                  		move.w	$C(a0),d0
00008F46 9043                       		sub.w	d3,d0
00008F48 6000 FF1A                  		bra.w	Platform3
00008F4C                            ; End of function SlopeObject
00008F4C                            
00008F4C                            
00008F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F4C                            
00008F4C                            
00008F4C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008F4C 43F8 D000                  		lea	($FFFFD000).w,a1
00008F50 4A69 0012                  		tst.w	$12(a1)
00008F54 6B00 FFB8                  		bmi.w	locret_751E
00008F58 3029 0008                  		move.w	8(a1),d0
00008F5C 9068 0008                  		sub.w	8(a0),d0
00008F60 D041                       		add.w	d1,d0
00008F62 6B00 FFAA                  		bmi.w	locret_751E
00008F66 D241                       		add.w	d1,d1
00008F68 B041                       		cmp.w	d1,d0
00008F6A 6400 FFA2                  		bcc.w	locret_751E
00008F6E 3028 000C                  		move.w	$C(a0),d0
00008F72 9043                       		sub.w	d3,d0
00008F74 6000 FEEE                  		bra.w	Platform3
00008F78                            ; End of function Obj15_Solid
00008F78                            
00008F78                            ; ===========================================================================
00008F78                            
00008F78                            Obj11_Action2:				; XREF: Obj11_Index
00008F78 6100                       		bsr.s	Obj11_WalkOff
00008F7A 6100 0000                  		bsr.w	DisplaySprite
00008F7E 6000 0000                  		bra.w	Obj11_ChkDel
00008F82                            
00008F82                            ; ---------------------------------------------------------------------------
00008F82                            ; Subroutine allowing Sonic to walk off a bridge
00008F82                            ; ---------------------------------------------------------------------------
00008F82                            
00008F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F82                            
00008F82                            
00008F82                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008F82 7200                       		moveq	#0,d1
00008F84 1228 0028                  		move.b	$28(a0),d1
00008F88 E749                       		lsl.w	#3,d1
00008F8A 3401                       		move.w	d1,d2
00008F8C 5041                       		addq.w	#8,d1
00008F8E 6100                       		bsr.s	ExitPlatform2
00008F90 6400                       		bcc.s	locret_75BE
00008F92 E848                       		lsr.w	#4,d0
00008F94 1140 003F                  		move.b	d0,$3F(a0)
00008F98 1028 003E                  		move.b	$3E(a0),d0
00008F9C 0C00 0040                  		cmpi.b	#$40,d0
00008FA0 6700                       		beq.s	loc_75B6
00008FA2 5828 003E                  		addq.b	#4,$3E(a0)
00008FA6                            
00008FA6                            loc_75B6:
00008FA6 6100 0000                  		bsr.w	Obj11_Bend
00008FAA 6100 0000                  		bsr.w	Obj11_MoveSonic
00008FAE                            
00008FAE                            locret_75BE:
00008FAE 4E75                       		rts	
00008FB0                            ; End of function Obj11_WalkOff
00008FB0                            
00008FB0                            ; ---------------------------------------------------------------------------
00008FB0                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008FB0                            ; ---------------------------------------------------------------------------
00008FB0                            
00008FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB0                            
00008FB0                            
00008FB0                            ExitPlatform:
00008FB0 3401                       		move.w	d1,d2
00008FB2                            
00008FB2                            ExitPlatform2:
00008FB2 D442                       		add.w	d2,d2
00008FB4 43F8 D000                  		lea	($FFFFD000).w,a1
00008FB8 0829 0001 0022             		btst	#1,$22(a1)
00008FBE 6600                       		bne.s	loc_75E0
00008FC0 3029 0008                  		move.w	8(a1),d0
00008FC4 9068 0008                  		sub.w	8(a0),d0
00008FC8 D041                       		add.w	d1,d0
00008FCA 6B00                       		bmi.s	loc_75E0
00008FCC B042                       		cmp.w	d2,d0
00008FCE 6500                       		bcs.s	locret_75F2
00008FD0                            
00008FD0                            loc_75E0:
00008FD0 08A9 0003 0022             		bclr	#3,$22(a1)
00008FD6 117C 0002 0024             		move.b	#2,$24(a0)
00008FDC 08A8 0003 0022             		bclr	#3,$22(a0)
00008FE2                            
00008FE2                            locret_75F2:
00008FE2 4E75                       		rts	
00008FE4                            ; End of function ExitPlatform
00008FE4                            
00008FE4                            
00008FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FE4                            
00008FE4                            
00008FE4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008FE4 7000                       		moveq	#0,d0
00008FE6 1028 003F                  		move.b	$3F(a0),d0
00008FEA 1030 0029                  		move.b	$29(a0,d0.w),d0
00008FEE ED48                       		lsl.w	#6,d0
00008FF0 0680 00FF D000             		addi.l	#$FFD000,d0
00008FF6 2440                       		movea.l	d0,a2
00008FF8 43F8 D000                  		lea	($FFFFD000).w,a1
00008FFC 302A 000C                  		move.w	$C(a2),d0
00009000 5140                       		subq.w	#8,d0
00009002 7200                       		moveq	#0,d1
00009004 1229 0016                  		move.b	$16(a1),d1
00009008 9041                       		sub.w	d1,d0
0000900A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000900E 4E75                       		rts	
00009010                            ; End of function Obj11_MoveSonic
00009010                            
00009010                            
00009010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009010                            
00009010                            
00009010                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00009010 1028 003E                  		move.b	$3E(a0),d0
00009014 6100 9B64                  		bsr.w	CalcSine
00009018 3800                       		move.w	d0,d4
0000901A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009020 7000                       		moveq	#0,d0
00009022 1028 0028                  		move.b	$28(a0),d0
00009026 E948                       		lsl.w	#4,d0
00009028 7600                       		moveq	#0,d3
0000902A 1628 003F                  		move.b	$3F(a0),d3
0000902E 3403                       		move.w	d3,d2
00009030 D640                       		add.w	d0,d3
00009032 7A00                       		moveq	#0,d5
00009034 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000903A 1A35 3000                  		move.b	(a5,d3.w),d5
0000903E 0243 000F                  		andi.w	#$F,d3
00009042 E94B                       		lsl.w	#4,d3
00009044 47F4 3000                  		lea	(a4,d3.w),a3
00009048 45E8 0029                  		lea	$29(a0),a2
0000904C                            
0000904C                            loc_765C:
0000904C 7000                       		moveq	#0,d0
0000904E 101A                       		move.b	(a2)+,d0
00009050 ED48                       		lsl.w	#6,d0
00009052 0680 00FF D000             		addi.l	#$FFD000,d0
00009058 2240                       		movea.l	d0,a1
0000905A 7000                       		moveq	#0,d0
0000905C 101B                       		move.b	(a3)+,d0
0000905E 5240                       		addq.w	#1,d0
00009060 C0C5                       		mulu.w	d5,d0
00009062 C0C4                       		mulu.w	d4,d0
00009064 4840                       		swap	d0
00009066 D069 003C                  		add.w	$3C(a1),d0
0000906A 3340 000C                  		move.w	d0,$C(a1)
0000906E 51CA FFDC                  		dbf	d2,loc_765C
00009072 7000                       		moveq	#0,d0
00009074 1028 0028                  		move.b	$28(a0),d0
00009078 7600                       		moveq	#0,d3
0000907A 1628 003F                  		move.b	$3F(a0),d3
0000907E 5203                       		addq.b	#1,d3
00009080 9600                       		sub.b	d0,d3
00009082 4403                       		neg.b	d3
00009084 6B00                       		bmi.s	locret_76CA
00009086 3403                       		move.w	d3,d2
00009088 E94B                       		lsl.w	#4,d3
0000908A 47F4 3000                  		lea	(a4,d3.w),a3
0000908E D6C2                       		adda.w	d2,a3
00009090 5342                       		subq.w	#1,d2
00009092 6500                       		bcs.s	locret_76CA
00009094                            
00009094                            loc_76A4:
00009094 7000                       		moveq	#0,d0
00009096 101A                       		move.b	(a2)+,d0
00009098 ED48                       		lsl.w	#6,d0
0000909A 0680 00FF D000             		addi.l	#$FFD000,d0
000090A0 2240                       		movea.l	d0,a1
000090A2 7000                       		moveq	#0,d0
000090A4 1023                       		move.b	-(a3),d0
000090A6 5240                       		addq.w	#1,d0
000090A8 C0C5                       		mulu.w	d5,d0
000090AA C0C4                       		mulu.w	d4,d0
000090AC 4840                       		swap	d0
000090AE D069 003C                  		add.w	$3C(a1),d0
000090B2 3340 000C                  		move.w	d0,$C(a1)
000090B6 51CA FFDC                  		dbf	d2,loc_76A4
000090BA                            
000090BA                            locret_76CA:
000090BA 4E75                       		rts	
000090BC                            ; End of function Obj11_Bend
000090BC                            
000090BC                            ; ===========================================================================
000090BC                            ; ---------------------------------------------------------------------------
000090BC                            ; GHZ bridge-bending data
000090BC                            ; (Defines how the bridge bends	when Sonic walks across	it)
000090BC                            ; ---------------------------------------------------------------------------
000090BC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000091CC                            		even
000091CC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000092CC                            		even
000092CC                            
000092CC                            ; ===========================================================================
000092CC                            
000092CC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000092CC 3028 0008                  		move.w	8(a0),d0
000092D0 0240 FF80                  		andi.w	#$FF80,d0
000092D4 3238 F700                  		move.w	($FFFFF700).w,d1
000092D8 0441 0080                  		subi.w	#$80,d1
000092DC 0241 FF80                  		andi.w	#$FF80,d1
000092E0 9041                       		sub.w	d1,d0
000092E2 0C40 0280                  		cmpi.w	#$280,d0
000092E6 6200 0000                  		bhi.w	Obj11_DelAll
000092EA 4E75                       		rts	
000092EC                            ; ===========================================================================
000092EC                            
000092EC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000092EC 7400                       		moveq	#0,d2
000092EE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000092F2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000092F4 5302                       		subq.b	#1,d2		; subtract 1
000092F6 6500                       		bcs.s	Obj11_Delete
000092F8                            
000092F8                            Obj11_DelLoop:
000092F8 7000                       		moveq	#0,d0
000092FA 101A                       		move.b	(a2)+,d0
000092FC ED48                       		lsl.w	#6,d0
000092FE 0680 00FF D000             		addi.l	#$FFD000,d0
00009304 2240                       		movea.l	d0,a1
00009306 B048                       		cmp.w	a0,d0
00009308 6700                       		beq.s	loc_791E
0000930A 6100 0000                  		bsr.w	DeleteObject2
0000930E                            
0000930E                            loc_791E:
0000930E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00009312                            
00009312                            Obj11_Delete:
00009312 6100 0000                  		bsr.w	DeleteObject
00009316 4E75                       		rts	
00009318                            ; ===========================================================================
00009318                            
00009318                            Obj11_Delete2:				; XREF: Obj11_Index
00009318 6100 0000                  		bsr.w	DeleteObject
0000931C 4E75                       		rts	
0000931E                            ; ===========================================================================
0000931E                            
0000931E                            Obj11_Display2:				; XREF: Obj11_Index
0000931E 6100 0000                  		bsr.w	DisplaySprite
00009322 4E75                       		rts	
00009324                            ; ===========================================================================
00009324                            ; ---------------------------------------------------------------------------
00009324                            ; Sprite mappings - GHZ	bridge
00009324                            ; ---------------------------------------------------------------------------
00009324                            Map_obj11:
00009324                            	include "_maps\obj11.asm"
00009324                            ; ---------------------------------------------------------------------------
00009324                            ; Sprite mappings - GHZ	bridge
00009324                            ; ---------------------------------------------------------------------------
00009324 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00009328 0000                       		dc.w byte_794B-Map_obj11
0000932A 01                         byte_793A:	dc.b 1
0000932B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009330 02                         byte_7940:	dc.b 2
00009331 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00009336 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000933B 01                         byte_794B:	dc.b 1
0000933C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00009342 00                         		even
00009342 00                         		even
00009342                            
00009342                            ; ===========================================================================
00009342                            ; ---------------------------------------------------------------------------
00009342                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009342                            ;	    - spiked ball on a chain (SBZ)
00009342                            ; ---------------------------------------------------------------------------
00009342                            
00009342                            Obj15:					; XREF: Obj_Index
00009342 7000                       		moveq	#0,d0
00009344 1028 0024                  		move.b	$24(a0),d0
00009348 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000934C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00009350                            ; ===========================================================================
00009350 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00009354 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00009358 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000935C 0000                       		dc.w Obj15_Action-Obj15_Index
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj15_Main:				; XREF: Obj15_Index
0000935E 5428 0024                  		addq.b	#2,$24(a0)
00009362 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000936A 317C 4380 0002             		move.w	#$4380,2(a0)
00009370 117C 0004 0001             		move.b	#4,1(a0)
00009376 117C 0003 0018             		move.b	#3,$18(a0)
0000937C 117C 0018 0019             		move.b	#$18,$19(a0)
00009382 117C 0008 0016             		move.b	#8,$16(a0)
00009388 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000938E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00009394 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000939A 6600                       		bne.s	Obj15_NotSLZ
0000939C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000093A4 317C 43DC 0002             		move.w	#$43DC,2(a0)
000093AA 117C 0020 0019             		move.b	#$20,$19(a0)
000093B0 117C 0010 0016             		move.b	#$10,$16(a0)
000093B6 117C 0099 0020             		move.b	#$99,$20(a0)
000093BC                            
000093BC                            Obj15_NotSLZ:
000093BC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000093C2 6600                       		bne.s	Obj15_SetLength
000093C4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000093CC 317C 0391 0002             		move.w	#$391,2(a0)
000093D2 117C 0018 0019             		move.b	#$18,$19(a0)
000093D8 117C 0018 0016             		move.b	#$18,$16(a0)
000093DE 117C 0086 0020             		move.b	#$86,$20(a0)
000093E4 117C 000C 0024             		move.b	#$C,$24(a0)
000093EA                            
000093EA                            Obj15_SetLength:
000093EA 1810                       		move.b	0(a0),d4
000093EC 7200                       		moveq	#0,d1
000093EE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000093F2 1212                       		move.b	(a2),d1		; move a2 to d1
000093F4 3F01                       		move.w	d1,-(sp)
000093F6 0241 000F                  		andi.w	#$F,d1
000093FA 14FC 0000                  		move.b	#0,(a2)+
000093FE 3601                       		move.w	d1,d3
00009400 E94B                       		lsl.w	#4,d3
00009402 5003                       		addq.b	#8,d3
00009404 1143 003C                  		move.b	d3,$3C(a0)
00009408 5103                       		subq.b	#8,d3
0000940A 4A28 001A                  		tst.b	$1A(a0)
0000940E 6700                       		beq.s	Obj15_MakeChain
00009410 5003                       		addq.b	#8,d3
00009412 5341                       		subq.w	#1,d1
00009414                            
00009414                            Obj15_MakeChain:
00009414 6100 0000                  		bsr.w	SingleObjLoad
00009418 6600                       		bne.s	loc_7A92
0000941A 5228 0028                  		addq.b	#1,$28(a0)
0000941E 3A09                       		move.w	a1,d5
00009420 0445 D000                  		subi.w	#-$3000,d5
00009424 EC4D                       		lsr.w	#6,d5
00009426 0245 007F                  		andi.w	#$7F,d5
0000942A 14C5                       		move.b	d5,(a2)+
0000942C 137C 000A 0024             		move.b	#$A,$24(a1)
00009432 1284                       		move.b	d4,0(a1)	; load swinging	object
00009434 2368 0004 0004             		move.l	4(a0),4(a1)
0000943A 3368 0002 0002             		move.w	2(a0),2(a1)
00009440 08A9 0006 0002             		bclr	#6,2(a1)
00009446 137C 0004 0001             		move.b	#4,1(a1)
0000944C 137C 0004 0018             		move.b	#4,$18(a1)
00009452 137C 0008 0019             		move.b	#8,$19(a1)
00009458 137C 0001 001A             		move.b	#1,$1A(a1)
0000945E 1343 003C                  		move.b	d3,$3C(a1)
00009462 0403 0010                  		subi.b	#$10,d3
00009466 6400                       		bcc.s	loc_7A8E
00009468 137C 0002 001A             		move.b	#2,$1A(a1)
0000946E 137C 0003 0018             		move.b	#3,$18(a1)
00009474 08E9 0006 0002             		bset	#6,2(a1)
0000947A                            
0000947A                            loc_7A8E:
0000947A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000947E                            
0000947E                            loc_7A92:
0000947E 3A08                       		move.w	a0,d5
00009480 0445 D000                  		subi.w	#-$3000,d5
00009484 EC4D                       		lsr.w	#6,d5
00009486 0245 007F                  		andi.w	#$7F,d5
0000948A 14C5                       		move.b	d5,(a2)+
0000948C 317C 4080 0026             		move.w	#$4080,$26(a0)
00009492 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009498 321F                       		move.w	(sp)+,d1
0000949A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000949E 6700                       		beq.s	loc_7AD4	; if not, branch
000094A0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000094A8 317C 43AA 0002             		move.w	#$43AA,2(a0)
000094AE 117C 0001 001A             		move.b	#1,$1A(a0)
000094B4 117C 0002 0018             		move.b	#2,$18(a0)
000094BA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000094C0                            
000094C0                            loc_7AD4:
000094C0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000094C6 6700                       		beq.s	Obj15_Action	; if yes, branch
000094C8                            
000094C8                            Obj15_SetSolid:				; XREF: Obj15_Index
000094C8 7200                       		moveq	#0,d1
000094CA 1228 0019                  		move.b	$19(a0),d1
000094CE 7600                       		moveq	#0,d3
000094D0 1628 0016                  		move.b	$16(a0),d3
000094D4 6100 FA76                  		bsr.w	Obj15_Solid
000094D8                            
000094D8                            Obj15_Action:				; XREF: Obj15_Index
000094D8 6100 0000                  		bsr.w	Obj15_Move
000094DC 6100 0000                  		bsr.w	DisplaySprite
000094E0 6000 0000                  		bra.w	Obj15_ChkDel
000094E4                            ; ===========================================================================
000094E4                            
000094E4                            Obj15_Action2:				; XREF: Obj15_Index
000094E4 7200                       		moveq	#0,d1
000094E6 1228 0019                  		move.b	$19(a0),d1
000094EA 6100 FAC4                  		bsr.w	ExitPlatform
000094EE 3F28 0008                  		move.w	8(a0),-(sp)
000094F2 6100 0000                  		bsr.w	Obj15_Move
000094F6 341F                       		move.w	(sp)+,d2
000094F8 7600                       		moveq	#0,d3
000094FA 1628 0016                  		move.b	$16(a0),d3
000094FE 5203                       		addq.b	#1,d3
00009500 6100 0000                  		bsr.w	MvSonicOnPtfm
00009504 6100 0000                  		bsr.w	DisplaySprite
00009508 6000 0000                  		bra.w	Obj15_ChkDel
0000950C                            
0000950C 4E75                       		rts
0000950E                            
0000950E                            ; ---------------------------------------------------------------------------
0000950E                            ; Subroutine to	change Sonic's position with a platform
0000950E                            ; ---------------------------------------------------------------------------
0000950E                            
0000950E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000950E                            
0000950E                            
0000950E                            MvSonicOnPtfm:
0000950E 43F8 D000                  		lea	($FFFFD000).w,a1
00009512 3028 000C                  		move.w	$C(a0),d0
00009516 9043                       		sub.w	d3,d0
00009518 6000                       		bra.s	MvSonic2
0000951A                            ; End of function MvSonicOnPtfm
0000951A                            
0000951A                            ; ---------------------------------------------------------------------------
0000951A                            ; Subroutine to	change Sonic's position with a platform
0000951A                            ; ---------------------------------------------------------------------------
0000951A                            
0000951A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000951A                            
0000951A                            
0000951A                            MvSonicOnPtfm2:
0000951A 43F8 D000                  		lea	($FFFFD000).w,a1
0000951E 3028 000C                  		move.w	$C(a0),d0
00009522 0440 0009                  		subi.w	#9,d0
00009526                            
00009526                            MvSonic2:
00009526 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000952A 6B00                       		bmi.s	locret_7B62
0000952C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009532 6400                       		bcc.s	locret_7B62
00009534 4A78 FE08                  		tst.w	($FFFFFE08).w
00009538 6600                       		bne.s	locret_7B62
0000953A 7200                       		moveq	#0,d1
0000953C 1229 0016                  		move.b	$16(a1),d1
00009540 9041                       		sub.w	d1,d0
00009542 3340 000C                  		move.w	d0,$C(a1)
00009546 9468 0008                  		sub.w	8(a0),d2
0000954A 9569 0008                  		sub.w	d2,8(a1)
0000954E                            
0000954E                            locret_7B62:
0000954E 4E75                       		rts	
00009550                            ; End of function MvSonicOnPtfm2
00009550                            
00009550                            
00009550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009550                            
00009550                            
00009550                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00009550 1038 FE78                  		move.b	($FFFFFE78).w,d0
00009554 323C 0080                  		move.w	#$80,d1
00009558 0828 0000 0022             		btst	#0,$22(a0)
0000955E 6700                       		beq.s	loc_7B78
00009560 4440                       		neg.w	d0
00009562 D041                       		add.w	d1,d0
00009564                            
00009564                            loc_7B78:
00009564 6000                       		bra.s	Obj15_Move2
00009566                            ; End of function Obj15_Move
00009566                            
00009566                            
00009566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009566                            
00009566                            
00009566                            Obj48_Move:				; XREF: Obj48_Display2
00009566 4A28 003D                  		tst.b	$3D(a0)
0000956A 6600                       		bne.s	loc_7B9C
0000956C 3028 003E                  		move.w	$3E(a0),d0
00009570 5040                       		addq.w	#8,d0
00009572 3140 003E                  		move.w	d0,$3E(a0)
00009576 D168 0026                  		add.w	d0,$26(a0)
0000957A 0C40 0200                  		cmpi.w	#$200,d0
0000957E 6600                       		bne.s	loc_7BB6
00009580 117C 0001 003D             		move.b	#1,$3D(a0)
00009586 6000                       		bra.s	loc_7BB6
00009588                            ; ===========================================================================
00009588                            
00009588                            loc_7B9C:
00009588 3028 003E                  		move.w	$3E(a0),d0
0000958C 5140                       		subq.w	#8,d0
0000958E 3140 003E                  		move.w	d0,$3E(a0)
00009592 D168 0026                  		add.w	d0,$26(a0)
00009596 0C40 FE00                  		cmpi.w	#-$200,d0
0000959A 6600                       		bne.s	loc_7BB6
0000959C 117C 0000 003D             		move.b	#0,$3D(a0)
000095A2                            
000095A2                            loc_7BB6:
000095A2 1028 0026                  		move.b	$26(a0),d0
000095A6                            ; End of function Obj48_Move
000095A6                            
000095A6                            
000095A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095A6                            
000095A6                            
000095A6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000095A6 6100 95D2                  		bsr.w	CalcSine
000095AA 3428 0038                  		move.w	$38(a0),d2
000095AE 3628 003A                  		move.w	$3A(a0),d3
000095B2 45E8 0028                  		lea	$28(a0),a2
000095B6 7C00                       		moveq	#0,d6
000095B8 1C1A                       		move.b	(a2)+,d6
000095BA                            
000095BA                            loc_7BCE:
000095BA 7800                       		moveq	#0,d4
000095BC 181A                       		move.b	(a2)+,d4
000095BE ED4C                       		lsl.w	#6,d4
000095C0 0684 00FF D000             		addi.l	#$FFD000,d4
000095C6 2244                       		movea.l	d4,a1
000095C8 7800                       		moveq	#0,d4
000095CA 1829 003C                  		move.b	$3C(a1),d4
000095CE 2A04                       		move.l	d4,d5
000095D0 C9C0                       		muls.w	d0,d4
000095D2 E084                       		asr.l	#8,d4
000095D4 CBC1                       		muls.w	d1,d5
000095D6 E085                       		asr.l	#8,d5
000095D8 D842                       		add.w	d2,d4
000095DA DA43                       		add.w	d3,d5
000095DC 3344 000C                  		move.w	d4,$C(a1)
000095E0 3345 0008                  		move.w	d5,8(a1)
000095E4 51CE FFD4                  		dbf	d6,loc_7BCE
000095E8 4E75                       		rts	
000095EA                            ; End of function Obj15_Move2
000095EA                            
000095EA                            ; ===========================================================================
000095EA                            
000095EA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000095EA 3028 003A                  		move.w	$3A(a0),d0
000095EE 0240 FF80                  		andi.w	#$FF80,d0
000095F2 3238 F700                  		move.w	($FFFFF700).w,d1
000095F6 0441 0080                  		subi.w	#$80,d1
000095FA 0241 FF80                  		andi.w	#$FF80,d1
000095FE 9041                       		sub.w	d1,d0
00009600 0C40 0280                  		cmpi.w	#$280,d0
00009604 6200 0000                  		bhi.w	Obj15_DelAll
00009608 4E75                       		rts	
0000960A                            ; ===========================================================================
0000960A                            
0000960A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000960A 7400                       		moveq	#0,d2
0000960C 45E8 0028                  		lea	$28(a0),a2
00009610 141A                       		move.b	(a2)+,d2
00009612                            
00009612                            Obj15_DelLoop:
00009612 7000                       		moveq	#0,d0
00009614 101A                       		move.b	(a2)+,d0
00009616 ED48                       		lsl.w	#6,d0
00009618 0680 00FF D000             		addi.l	#$FFD000,d0
0000961E 2240                       		movea.l	d0,a1
00009620 6100 0000                  		bsr.w	DeleteObject2
00009624 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00009628 4E75                       		rts	
0000962A                            ; ===========================================================================
0000962A                            
0000962A                            Obj15_Delete:				; XREF: Obj15_Index
0000962A 6100 0000                  		bsr.w	DeleteObject
0000962E 4E75                       		rts	
00009630                            ; ===========================================================================
00009630                            
00009630                            Obj15_Display:				; XREF: Obj15_Index
00009630 6000 0000                  		bra.w	DisplaySprite
00009634                            ; ===========================================================================
00009634                            ; ---------------------------------------------------------------------------
00009634                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009634                            ; ---------------------------------------------------------------------------
00009634                            Map_obj15:
00009634                            	include "_maps\obj15ghz.asm"
00009634                            ; ---------------------------------------------------------------------------
00009634                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009634                            ; ---------------------------------------------------------------------------
00009634 0000                       		dc.w byte_7C4E-Map_obj15
00009636 0000                       		dc.w byte_7C59-Map_obj15
00009638 0000                       		dc.w byte_7C5F-Map_obj15
0000963A 02                         byte_7C4E:	dc.b 2
0000963B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009640 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009645 01                         byte_7C59:	dc.b 1
00009646 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000964B 01                         byte_7C5F:	dc.b 1
0000964C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009652 00                         		even
00009652 00                         		even
00009652                            
00009652                            ; ---------------------------------------------------------------------------
00009652                            ; Sprite mappings - SLZ	swinging platforms
00009652                            ; ---------------------------------------------------------------------------
00009652                            Map_obj15a:
00009652                            	include "_maps\obj15slz.asm"
00009652                            ; ---------------------------------------------------------------------------
00009652                            ; Sprite mappings - SLZ	swinging platforms
00009652                            ; ---------------------------------------------------------------------------
00009652 0000                       		dc.w byte_7C6C-Map_obj15a
00009654 0000                       		dc.w byte_7C95-Map_obj15a
00009656 0000                       		dc.w byte_7C9B-Map_obj15a
00009658 08                         byte_7C6C:	dc.b 8
00009659 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000965E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009663 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009668 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000966D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009672 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009677 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000967C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009681 01                         byte_7C95:	dc.b 1
00009682 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009687 01                         byte_7C9B:	dc.b 1
00009688 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000968E 00                         		even
0000968E 00                         		even
0000968E                            
0000968E                            ; ===========================================================================
0000968E                            ; ---------------------------------------------------------------------------
0000968E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000968E                            ; ---------------------------------------------------------------------------
0000968E                            
0000968E                            Obj17:					; XREF: Obj_Index
0000968E 7000                       		moveq	#0,d0
00009690 1028 0024                  		move.b	$24(a0),d0
00009694 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00009698 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000969C                            ; ===========================================================================
0000969C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000969E 0000                       		dc.w Obj17_Action-Obj17_Index
000096A0 0000                       		dc.w Obj17_Action-Obj17_Index
000096A2 0000                       		dc.w Obj17_Delete-Obj17_Index
000096A4 0000                       		dc.w Obj17_Display-Obj17_Index
000096A6                            ; ===========================================================================
000096A6                            
000096A6                            Obj17_Main:				; XREF: Obj17_Index
000096A6 5428 0024                  		addq.b	#2,$24(a0)
000096AA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000096B2 317C 4398 0002             		move.w	#$4398,2(a0)
000096B8 117C 0007 0022             		move.b	#7,$22(a0)
000096BE 117C 0004 0001             		move.b	#4,1(a0)
000096C4 117C 0003 0018             		move.b	#3,$18(a0)
000096CA 117C 0008 0019             		move.b	#8,$19(a0)
000096D0 3428 000C                  		move.w	$C(a0),d2
000096D4 3628 0008                  		move.w	8(a0),d3
000096D8 1810                       		move.b	0(a0),d4
000096DA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000096DE 7200                       		moveq	#0,d1
000096E0 1212                       		move.b	(a2),d1		; move a2 to d1
000096E2 14FC 0000                  		move.b	#0,(a2)+
000096E6 3001                       		move.w	d1,d0
000096E8 E248                       		lsr.w	#1,d0
000096EA E948                       		lsl.w	#4,d0
000096EC 9640                       		sub.w	d0,d3
000096EE 5501                       		subq.b	#2,d1
000096F0 6500                       		bcs.s	Obj17_Action
000096F2 7C00                       		moveq	#0,d6
000096F4                            
000096F4                            Obj17_MakeHelix:
000096F4 6100 0000                  		bsr.w	SingleObjLoad
000096F8 6600                       		bne.s	Obj17_Action
000096FA 5228 0028                  		addq.b	#1,$28(a0)
000096FE 3A09                       		move.w	a1,d5
00009700 0445 D000                  		subi.w	#$D000,d5
00009704 EC4D                       		lsr.w	#6,d5
00009706 0245 007F                  		andi.w	#$7F,d5
0000970A 14C5                       		move.b	d5,(a2)+
0000970C 137C 0008 0024             		move.b	#8,$24(a1)
00009712 1284                       		move.b	d4,0(a1)
00009714 3342 000C                  		move.w	d2,$C(a1)
00009718 3343 0008                  		move.w	d3,8(a1)
0000971C 2368 0004 0004             		move.l	4(a0),4(a1)
00009722 337C 4398 0002             		move.w	#$4398,2(a1)
00009728 137C 0004 0001             		move.b	#4,1(a1)
0000972E 137C 0003 0018             		move.b	#3,$18(a1)
00009734 137C 0008 0019             		move.b	#8,$19(a1)
0000973A 1346 003E                  		move.b	d6,$3E(a1)
0000973E 5206                       		addq.b	#1,d6
00009740 0206 0007                  		andi.b	#7,d6
00009744 0643 0010                  		addi.w	#$10,d3
00009748 B668 0008                  		cmp.w	8(a0),d3
0000974C 6600                       		bne.s	loc_7D78
0000974E 1146 003E                  		move.b	d6,$3E(a0)
00009752 5206                       		addq.b	#1,d6
00009754 0206 0007                  		andi.b	#7,d6
00009758 0643 0010                  		addi.w	#$10,d3
0000975C 5228 0028                  		addq.b	#1,$28(a0)
00009760                            
00009760                            loc_7D78:
00009760 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00009764                            
00009764                            Obj17_Action:				; XREF: Obj17_Index
00009764 6100 0000                  		bsr.w	Obj17_RotateSpikes
00009768 6100 0000                  		bsr.w	DisplaySprite
0000976C 6000 0000                  		bra.w	Obj17_ChkDel
00009770                            
00009770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009770                            
00009770                            
00009770                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00009770 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00009774 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000977A D028 003E                  		add.b	$3E(a0),d0
0000977E 0200 0007                  		andi.b	#7,d0
00009782 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00009786 6600                       		bne.s	locret_7DA6
00009788 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000978E                            
0000978E                            locret_7DA6:
0000978E 4E75                       		rts	
00009790                            ; End of function Obj17_RotateSpikes
00009790                            
00009790                            ; ===========================================================================
00009790                            
00009790                            Obj17_ChkDel:				; XREF: Obj17_Action
00009790 3028 0008                  		move.w	8(a0),d0
00009794 0240 FF80                  		andi.w	#$FF80,d0
00009798 3238 F700                  		move.w	($FFFFF700).w,d1
0000979C 0441 0080                  		subi.w	#$80,d1
000097A0 0241 FF80                  		andi.w	#$FF80,d1
000097A4 9041                       		sub.w	d1,d0
000097A6 0C40 0280                  		cmpi.w	#$280,d0
000097AA 6200 0000                  		bhi.w	Obj17_DelAll
000097AE 4E75                       		rts	
000097B0                            ; ===========================================================================
000097B0                            
000097B0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000097B0 7400                       		moveq	#0,d2
000097B2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000097B6 141A                       		move.b	(a2)+,d2	; move a2 to d2
000097B8 5502                       		subq.b	#2,d2
000097BA 6500                       		bcs.s	Obj17_Delete
000097BC                            
000097BC                            Obj17_DelLoop:
000097BC 7000                       		moveq	#0,d0
000097BE 101A                       		move.b	(a2)+,d0
000097C0 ED48                       		lsl.w	#6,d0
000097C2 0680 00FF D000             		addi.l	#$FFD000,d0
000097C8 2240                       		movea.l	d0,a1
000097CA 6100 0000                  		bsr.w	DeleteObject2	; delete object
000097CE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000097D2                            
000097D2                            Obj17_Delete:				; XREF: Obj17_Index
000097D2 6100 0000                  		bsr.w	DeleteObject
000097D6 4E75                       		rts	
000097D8                            ; ===========================================================================
000097D8                            
000097D8                            Obj17_Display:				; XREF: Obj17_Index
000097D8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000097DC 6000 0000                  		bra.w	DisplaySprite
000097E0                            ; ===========================================================================
000097E0                            ; ---------------------------------------------------------------------------
000097E0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E0                            ; ---------------------------------------------------------------------------
000097E0                            Map_obj17:
000097E0                            	include "_maps\obj17.asm"
000097E0                            ; ---------------------------------------------------------------------------
000097E0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097E0                            ; ---------------------------------------------------------------------------
000097E0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000097E4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000097E8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000097EC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000097F0 01                         byte_7E08:	dc.b 1
000097F1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000097F6 01                         byte_7E0E:	dc.b 1
000097F7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000097FC 01                         byte_7E14:	dc.b 1
000097FD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00009802 01                         byte_7E1A:	dc.b 1
00009803 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00009808 01                         byte_7E20:	dc.b 1
00009809 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000980E 01                         byte_7E26:	dc.b 1
0000980F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00009814 01                         byte_7E2C:	dc.b 1
00009815 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000981A                            		even
0000981A                            		even
0000981A                            
0000981A                            ; ===========================================================================
0000981A                            ; ---------------------------------------------------------------------------
0000981A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000981A                            ; ---------------------------------------------------------------------------
0000981A                            
0000981A                            Obj18:					; XREF: Obj_Index
0000981A 7000                       		moveq	#0,d0
0000981C 1028 0024                  		move.b	$24(a0),d0
00009820 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00009824 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00009828                            ; ===========================================================================
00009828 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000982A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000982C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000982E 0000                       		dc.w Obj18_Delete-Obj18_Index
00009830 0000                       		dc.w Obj18_Action-Obj18_Index
00009832                            ; ===========================================================================
00009832                            
00009832                            Obj18_Main:				; XREF: Obj18_Index
00009832 5428 0024                  		addq.b	#2,$24(a0)
00009836 317C 4000 0002             		move.w	#$4000,2(a0)
0000983C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00009844 117C 0020 0019             		move.b	#$20,$19(a0)
0000984A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00009850 6600                       		bne.s	Obj18_NotSYZ
00009852 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000985A 117C 0020 0019             		move.b	#$20,$19(a0)
00009860                            
00009860                            Obj18_NotSYZ:
00009860 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009866 6600                       		bne.s	Obj18_NotSLZ
00009868 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009870 117C 0020 0019             		move.b	#$20,$19(a0)
00009876 317C 4000 0002             		move.w	#$4000,2(a0)
0000987C 117C 0003 0028             		move.b	#3,$28(a0)
00009882                            
00009882                            Obj18_NotSLZ:
00009882 117C 0004 0001             		move.b	#4,1(a0)
00009888 117C 0004 0018             		move.b	#4,$18(a0)
0000988E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00009894 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000989A 3168 0008 0032             		move.w	8(a0),$32(a0)
000098A0 317C 0080 0026             		move.w	#$80,$26(a0)
000098A6 7200                       		moveq	#0,d1
000098A8 1028 0028                  		move.b	$28(a0),d0
000098AC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000098B0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000098B2 5201                       		addq.b	#1,d1		; use frame #1
000098B4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000098BA                            
000098BA                            Obj18_SetFrame:
000098BA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000098BE                            
000098BE                            Obj18_Solid:				; XREF: Obj18_Index
000098BE 4A28 0038                  		tst.b	$38(a0)
000098C2 6700                       		beq.s	loc_7EE0
000098C4 5928 0038                  		subq.b	#4,$38(a0)
000098C8                            
000098C8                            loc_7EE0:
000098C8 7200                       		moveq	#0,d1
000098CA 1228 0019                  		move.b	$19(a0),d1
000098CE 6100 F56C                  		bsr.w	PlatformObject
000098D2                            
000098D2                            Obj18_Action:				; XREF: Obj18_Index
000098D2 6100 0000                  		bsr.w	Obj18_Move
000098D6 6100 0000                  		bsr.w	Obj18_Nudge
000098DA 6100 0000                  		bsr.w	DisplaySprite
000098DE 6000 0000                  		bra.w	Obj18_ChkDel
000098E2                            ; ===========================================================================
000098E2                            
000098E2                            Obj18_Action2:				; XREF: Obj18_Index
000098E2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098E8 6700                       		beq.s	loc_7F06
000098EA 5828 0038                  		addq.b	#4,$38(a0)
000098EE                            
000098EE                            loc_7F06:
000098EE 7200                       		moveq	#0,d1
000098F0 1228 0019                  		move.b	$19(a0),d1
000098F4 6100 F6BA                  		bsr.w	ExitPlatform
000098F8 3F28 0008                  		move.w	8(a0),-(sp)
000098FC 6100 0000                  		bsr.w	Obj18_Move
00009900 6100 0000                  		bsr.w	Obj18_Nudge
00009904 341F                       		move.w	(sp)+,d2
00009906 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000990A 6100 0000                  		bsr.w	DisplaySprite
0000990E 6000 0000                  		bra.w	Obj18_ChkDel
00009912                            
00009912 4E75                       		rts
00009914                            
00009914                            ; ---------------------------------------------------------------------------
00009914                            ; Subroutine to	move platform slightly when you	stand on it
00009914                            ; ---------------------------------------------------------------------------
00009914                            
00009914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009914                            
00009914                            
00009914                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009914 1028 0038                  		move.b	$38(a0),d0
00009918 6100 9260                  		bsr.w	CalcSine
0000991C 323C 0400                  		move.w	#$400,d1
00009920 C1C1                       		muls.w	d1,d0
00009922 4840                       		swap	d0
00009924 D068 002C                  		add.w	$2C(a0),d0
00009928 3140 000C                  		move.w	d0,$C(a0)
0000992C 4E75                       		rts	
0000992E                            ; End of function Obj18_Nudge
0000992E                            
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            ; Subroutine to	move platforms
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            
0000992E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000992E                            
0000992E                            
0000992E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000992E 7000                       		moveq	#0,d0
00009930 1028 0028                  		move.b	$28(a0),d0
00009934 0240 000F                  		andi.w	#$F,d0
00009938 D040                       		add.w	d0,d0
0000993A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000993E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009942                            ; End of function Obj18_Move
00009942                            
00009942                            ; ===========================================================================
00009942 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00009946 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000994A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000994E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009952 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00009956 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000995A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            Obj18_Type00:
0000995C 4E75                       		rts			; platform 00 doesn't move
0000995E                            ; ===========================================================================
0000995E                            
0000995E                            Obj18_Type05:
0000995E 3028 0032                  		move.w	$32(a0),d0
00009962 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009966 4401                       		neg.b	d1		; reverse platform-motion
00009968 0601 0040                  		addi.b	#$40,d1
0000996C 6000                       		bra.s	Obj18_01_Move
0000996E                            ; ===========================================================================
0000996E                            
0000996E                            Obj18_Type01:
0000996E 3028 0032                  		move.w	$32(a0),d0
00009972 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009976 0401 0040                  		subi.b	#$40,d1
0000997A                            
0000997A                            Obj18_01_Move:
0000997A 4881                       		ext.w	d1
0000997C D041                       		add.w	d1,d0
0000997E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00009982 6000 0000                  		bra.w	Obj18_ChgMotion
00009986                            ; ===========================================================================
00009986                            
00009986                            Obj18_Type0C:
00009986 3028 0034                  		move.w	$34(a0),d0
0000998A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000998E 4401                       		neg.b	d1		; reverse platform-motion
00009990 0601 0030                  		addi.b	#$30,d1
00009994 6000                       		bra.s	Obj18_02_Move
00009996                            ; ===========================================================================
00009996                            
00009996                            Obj18_Type0B:
00009996 3028 0034                  		move.w	$34(a0),d0
0000999A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000999E 0401 0030                  		subi.b	#$30,d1
000099A2 6000                       		bra.s	Obj18_02_Move
000099A4                            ; ===========================================================================
000099A4                            
000099A4                            Obj18_Type06:
000099A4 3028 0034                  		move.w	$34(a0),d0
000099A8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099AC 4401                       		neg.b	d1		; reverse platform-motion
000099AE 0601 0040                  		addi.b	#$40,d1
000099B2 6000                       		bra.s	Obj18_02_Move
000099B4                            ; ===========================================================================
000099B4                            
000099B4                            Obj18_Type02:
000099B4 3028 0034                  		move.w	$34(a0),d0
000099B8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000099BC 0401 0040                  		subi.b	#$40,d1
000099C0                            
000099C0                            Obj18_02_Move:
000099C0 4881                       		ext.w	d1
000099C2 D041                       		add.w	d1,d0
000099C4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000099C8 6000 0000                  		bra.w	Obj18_ChgMotion
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            Obj18_Type03:
000099CC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099D0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000099D2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000099D8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000099DA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099E0                            
000099E0                            Obj18_03_NoMove:
000099E0 4E75                       		rts	
000099E2                            ; ===========================================================================
000099E2                            
000099E2                            Obj18_03_Wait:
000099E2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099E6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000099E8 317C 0020 003A             		move.w	#32,$3A(a0)
000099EE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000099F2 4E75                       		rts	
000099F4                            ; ===========================================================================
000099F4                            
000099F4                            Obj18_Type04:
000099F4 4A68 003A                  		tst.w	$3A(a0)
000099F8 6700                       		beq.s	loc_8048
000099FA 5368 003A                  		subq.w	#1,$3A(a0)
000099FE 6600                       		bne.s	loc_8048
00009A00 0828 0003 0022             		btst	#3,$22(a0)
00009A06 6700                       		beq.s	loc_8042
00009A08 08E9 0001 0022             		bset	#1,$22(a1)
00009A0E 08A9 0003 0022             		bclr	#3,$22(a1)
00009A14 137C 0002 0024             		move.b	#2,$24(a1)
00009A1A 08A8 0003 0022             		bclr	#3,$22(a0)
00009A20 4228 0025                  		clr.b	$25(a0)
00009A24 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009A2A                            
00009A2A                            loc_8042:
00009A2A 117C 0008 0024             		move.b	#8,$24(a0)
00009A30                            
00009A30                            loc_8048:
00009A30 2628 002C                  		move.l	$2C(a0),d3
00009A34 3028 0012                  		move.w	$12(a0),d0
00009A38 48C0                       		ext.l	d0
00009A3A E180                       		asl.l	#8,d0
00009A3C D680                       		add.l	d0,d3
00009A3E 2143 002C                  		move.l	d3,$2C(a0)
00009A42 0668 0038 0012             		addi.w	#$38,$12(a0)
00009A48 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A4C 0640 00E0                  		addi.w	#$E0,d0
00009A50 B068 002C                  		cmp.w	$2C(a0),d0
00009A54 6400                       		bcc.s	locret_8074
00009A56 117C 0006 0024             		move.b	#6,$24(a0)
00009A5C                            
00009A5C                            locret_8074:
00009A5C 4E75                       		rts	
00009A5E                            ; ===========================================================================
00009A5E                            
00009A5E                            Obj18_Type07:
00009A5E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A62 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009A64 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009A68 7000                       		moveq	#0,d0
00009A6A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009A6E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A70 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A74 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009A76 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A7C                            
00009A7C                            Obj18_07_NoMove:
00009A7C 4E75                       		rts	
00009A7E                            ; ===========================================================================
00009A7E                            
00009A7E                            Obj18_07_Wait:
00009A7E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A82 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009A84 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009A88 4E75                       		rts	
00009A8A                            ; ===========================================================================
00009A8A                            
00009A8A                            Obj18_Type08:
00009A8A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009A8E 3028 0034                  		move.w	$34(a0),d0
00009A92 0440 0200                  		subi.w	#$200,d0
00009A96 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009A9A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009A9C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009AA0                            
00009AA0                            Obj18_08_NoStop:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj18_Type0A:
00009AA2 3028 0034                  		move.w	$34(a0),d0
00009AA6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009AAA 0401 0040                  		subi.b	#$40,d1
00009AAE 4881                       		ext.w	d1
00009AB0 E241                       		asr.w	#1,d1
00009AB2 D041                       		add.w	d1,d0
00009AB4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009AB8                            
00009AB8                            Obj18_ChgMotion:
00009AB8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009ABE 4E75                       		rts	
00009AC0                            ; ===========================================================================
00009AC0                            
00009AC0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009AC0 3028 0032                  		move.w	$32(a0),d0
00009AC4 0240 FF80                  		andi.w	#$FF80,d0
00009AC8 3238 F700                  		move.w	($FFFFF700).w,d1
00009ACC 0441 0080                  		subi.w	#$80,d1
00009AD0 0241 FF80                  		andi.w	#$FF80,d1
00009AD4 9041                       		sub.w	d1,d0
00009AD6 0C40 0280                  		cmpi.w	#$280,d0
00009ADA 6200                       		bhi.s	Obj18_Delete
00009ADC 4E75                       		rts	
00009ADE                            ; ===========================================================================
00009ADE                            
00009ADE                            Obj18_Delete:				; XREF: Obj18_Index
00009ADE 6000 0000                  		bra.w	DeleteObject
00009AE2                            ; ===========================================================================
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Sprite mappings - unused
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            Map_obj18x:
00009AE2                            	include "_maps\obj18x.asm"
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Sprite mappings - unused
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2 0000                       		dc.w byte_80FE-Map_obj18x
00009AE4 0000                       		dc.w byte_8109-Map_obj18x
00009AE6 02                         byte_80FE:	dc.b 2
00009AE7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009AEC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009AF1 0A                         byte_8109:	dc.b $A
00009AF2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009AF7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009AFC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009B01 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009B06 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009B0B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009B10 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009B15 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009B1A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009B1F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009B24                            		even
00009B24                            		even
00009B24                            
00009B24                            ; ---------------------------------------------------------------------------
00009B24                            ; Sprite mappings - GHZ	platforms
00009B24                            ; ---------------------------------------------------------------------------
00009B24                            Map_obj18:
00009B24                            	include "_maps\obj18ghz.asm"
00009B24                            ; ---------------------------------------------------------------------------
00009B24                            ; Sprite mappings - GHZ	platforms
00009B24                            ; ---------------------------------------------------------------------------
00009B24 0000                       		dc.w byte_8140-Map_obj18
00009B26 0000                       		dc.w byte_8155-Map_obj18
00009B28 04                         byte_8140:	dc.b 4
00009B29 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009B2E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B33 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B38 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B3D 0A                         byte_8155:	dc.b $A
00009B3E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B43 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B48 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B4D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B52 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B57 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B5C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B61 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B66 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B6B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B70                            		even
00009B70                            		even
00009B70                            
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            ; Sprite mappings - SYZ	platforms
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            Map_obj18a:
00009B70                            	include "_maps\obj18syz.asm"
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            ; Sprite mappings - SYZ	platforms
00009B70                            ; ---------------------------------------------------------------------------
00009B70 0000                       		dc.w byte_818A-Map_obj18a
00009B72 03                         byte_818A:	dc.b 3
00009B73 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B78 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B7D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B82                            		even
00009B82                            		even
00009B82                            
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            ; Sprite mappings - SLZ	platforms
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            Map_obj18b:
00009B82                            	include "_maps\obj18slz.asm"
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            ; Sprite mappings - SLZ	platforms
00009B82                            ; ---------------------------------------------------------------------------
00009B82 0000                       		dc.w byte_819C-Map_obj18b
00009B84 02                         byte_819C:	dc.b 2
00009B85 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009B8A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009B90 00                         		even
00009B90 00                         		even
00009B90                            
00009B90                            ; ===========================================================================
00009B90                            ; ---------------------------------------------------------------------------
00009B90                            ; Object 19 - blank
00009B90                            ; ---------------------------------------------------------------------------
00009B90                            
00009B90                            Obj19:					; XREF: Obj_Index
00009B90 4E75                       		rts	
00009B92                            ; ===========================================================================
00009B92                            ; ---------------------------------------------------------------------------
00009B92                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B92                            ; ---------------------------------------------------------------------------
00009B92                            Map_obj48:
00009B92                            	include "_maps\obj48.asm"
00009B92                            ; ---------------------------------------------------------------------------
00009B92                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B92                            ; ---------------------------------------------------------------------------
00009B92 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009B96 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009B9A 06                         byte_81B2:	dc.b 6
00009B9B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009BA0 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009BA5 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009BAA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009BAF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009BB4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009BB9 04                         byte_81D1:	dc.b 4
00009BBA E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009BBF E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009BC4 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009BC9 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009BCE 04                         byte_81E6:	dc.b 4
00009BCF E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BD4 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BD9 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BDE 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BE3 04                         byte_81FB:	dc.b 4
00009BE4 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BE9 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009BEE 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009BF3 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009BF8                            		even
00009BF8                            		even
00009BF8                            
00009BF8                            ; ===========================================================================
00009BF8                            ; ---------------------------------------------------------------------------
00009BF8                            ; Object 1A - GHZ collapsing ledge
00009BF8                            ; ---------------------------------------------------------------------------
00009BF8                            
00009BF8                            Obj1A:					; XREF: Obj_Index
00009BF8 7000                       		moveq	#0,d0
00009BFA 1028 0024                  		move.b	$24(a0),d0
00009BFE 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009C02 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009C06                            ; ===========================================================================
00009C06 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009C0A 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009C0E 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009C12                            ; ===========================================================================
00009C12                            
00009C12                            Obj1A_Main:				; XREF: Obj1A_Index
00009C12 5428 0024                  		addq.b	#2,$24(a0)
00009C16 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009C1E 317C 4000 0002             		move.w	#$4000,2(a0)
00009C24 0028 0004 0001             		ori.b	#4,1(a0)
00009C2A 117C 0004 0018             		move.b	#4,$18(a0)
00009C30 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009C36 117C 0064 0019             		move.b	#$64,$19(a0)
00009C3C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009C42 117C 0038 0016             		move.b	#$38,$16(a0)
00009C48 08E8 0004 0001             		bset	#4,1(a0)
00009C4E                            
00009C4E                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009C4E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009C52 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009C54 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009C58 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009C5C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009C60                            
00009C60                            Obj1A_Slope:
00009C60 323C 0030                  		move.w	#$30,d1
00009C64 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C6A 6100 F2A4                  		bsr.w	SlopeObject
00009C6E 6000 0000                  		bra.w	MarkObjGone
00009C72                            ; ===========================================================================
00009C72                            
00009C72                            Obj1A_Touch:				; XREF: Obj1A_Index
00009C72 4A28 0038                  		tst.b	$38(a0)
00009C76 6700 0000                  		beq.w	loc_847A
00009C7A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009C80 5328 0038                  		subq.b	#1,$38(a0)
00009C84                            
00009C84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C84                            
00009C84                            
00009C84                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009C84 323C 0030                  		move.w	#$30,d1
00009C88 6100 F326                  		bsr.w	ExitPlatform
00009C8C 323C 0030                  		move.w	#$30,d1
00009C90 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009C96 3428 0008                  		move.w	8(a0),d2
00009C9A 6100 0000                  		bsr.w	SlopeObject2
00009C9E 6000 0000                  		bra.w	MarkObjGone
00009CA2                            ; End of function Obj1A_WalkOff
00009CA2                            
00009CA2                            ; ===========================================================================
00009CA2                            
00009CA2                            Obj1A_Display:				; XREF: Obj1A_Index
00009CA2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009CA6 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009CA8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009CAC 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009CB0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009CB4 6000 0000                  		bra.w	DisplaySprite
00009CB8                            ; ===========================================================================
00009CB8                            
00009CB8                            loc_82D0:				; XREF: Obj1A_Display
00009CB8 5328 0038                  		subq.b	#1,$38(a0)
00009CBC 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009CC0 43F8 D000                  		lea	($FFFFD000).w,a1
00009CC4 0829 0003 0022             		btst	#3,$22(a1)
00009CCA 6700                       		beq.s	loc_82FC
00009CCC 4A28 0038                  		tst.b	$38(a0)
00009CD0 6600                       		bne.s	locret_8308
00009CD2 08A9 0003 0022             		bclr	#3,$22(a1)
00009CD8 08A9 0005 0022             		bclr	#5,$22(a1)
00009CDE 137C 0001 001D             		move.b	#1,$1D(a1)
00009CE4                            
00009CE4                            loc_82FC:
00009CE4 117C 0000 003A             		move.b	#0,$3A(a0)
00009CEA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009CF0                            
00009CF0                            locret_8308:
00009CF0 4E75                       		rts	
00009CF2                            ; ===========================================================================
00009CF2                            
00009CF2                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009CF2 6100 0000                  		bsr.w	ObjectFall
00009CF6 6100 0000                  		bsr.w	DisplaySprite
00009CFA 4A28 0001                  		tst.b	1(a0)
00009CFE 6A00                       		bpl.s	Obj1A_Delete
00009D00 4E75                       		rts	
00009D02                            ; ===========================================================================
00009D02                            
00009D02                            Obj1A_Delete:				; XREF: Obj1A_Index
00009D02 6100 0000                  		bsr.w	DeleteObject
00009D06 4E75                       		rts	
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            
00009D08                            Obj53:					; XREF: Obj_Index
00009D08 7000                       		moveq	#0,d0
00009D0A 1028 0024                  		move.b	$24(a0),d0
00009D0E 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009D12 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009D16                            ; ===========================================================================
00009D16 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009D1A 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009D1E 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009D22                            ; ===========================================================================
00009D22                            
00009D22                            Obj53_Main:				; XREF: Obj53_Index
00009D22 5428 0024                  		addq.b	#2,$24(a0)
00009D26 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009D2E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009D34 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009D3A 6600                       		bne.s	Obj53_NotSLZ
00009D3C 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009D42 5428 001A                  		addq.b	#2,$1A(a0)
00009D46                            
00009D46                            Obj53_NotSLZ:
00009D46 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009D4C 6600                       		bne.s	Obj53_NotSBZ
00009D4E 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009D54                            
00009D54                            Obj53_NotSBZ:
00009D54 0028 0004 0001             		ori.b	#4,1(a0)
00009D5A 117C 0004 0018             		move.b	#4,$18(a0)
00009D60 117C 0007 0038             		move.b	#7,$38(a0)
00009D66 117C 0044 0019             		move.b	#$44,$19(a0)
00009D6C                            
00009D6C                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009D6C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009D70 6700                       		beq.s	Obj53_Solid	; if not, branch
00009D72 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009D76 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009D7A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009D7E                            
00009D7E                            Obj53_Solid:
00009D7E 323C 0020                  		move.w	#$20,d1
00009D82 6100 F0B8                  		bsr.w	PlatformObject
00009D86 4A28 0028                  		tst.b	$28(a0)
00009D8A 6A00                       		bpl.s	Obj53_MarkAsGone
00009D8C 0829 0003 0022             		btst	#3,$22(a1)
00009D92 6700                       		beq.s	Obj53_MarkAsGone
00009D94 08A8 0000 0001             		bclr	#0,1(a0)
00009D9A 3029 0008                  		move.w	8(a1),d0
00009D9E 9068 0008                  		sub.w	8(a0),d0
00009DA2 6400                       		bcc.s	Obj53_MarkAsGone
00009DA4 08E8 0000 0001             		bset	#0,1(a0)
00009DAA                            
00009DAA                            Obj53_MarkAsGone:
00009DAA 6000 0000                  		bra.w	MarkObjGone
00009DAE                            ; ===========================================================================
00009DAE                            
00009DAE                            Obj53_Touch:				; XREF: Obj53_Index
00009DAE 4A28 0038                  		tst.b	$38(a0)
00009DB2 6700 0000                  		beq.w	loc_8458
00009DB6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009DBC 5328 0038                  		subq.b	#1,$38(a0)
00009DC0                            
00009DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DC0                            
00009DC0                            
00009DC0                            Obj53_WalkOff:				; XREF: Obj53_Index
00009DC0 323C 0020                  		move.w	#$20,d1
00009DC4 6100 F1EA                  		bsr.w	ExitPlatform
00009DC8 3428 0008                  		move.w	8(a0),d2
00009DCC 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00009DD0 6000 0000                  		bra.w	MarkObjGone
00009DD4                            ; End of function Obj53_WalkOff
00009DD4                            
00009DD4                            ; ===========================================================================
00009DD4                            
00009DD4                            Obj53_Display:				; XREF: Obj53_Index
00009DD4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009DD8 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009DDA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009DDE 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DE2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009DE6 6000 0000                  		bra.w	DisplaySprite
00009DEA                            ; ===========================================================================
00009DEA                            
00009DEA                            loc_8402:
00009DEA 5328 0038                  		subq.b	#1,$38(a0)
00009DEE 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009DF2 43F8 D000                  		lea	($FFFFD000).w,a1
00009DF6 0829 0003 0022             		btst	#3,$22(a1)
00009DFC 6700                       		beq.s	loc_842E
00009DFE 4A28 0038                  		tst.b	$38(a0)
00009E02 6600                       		bne.s	locret_843A
00009E04 08A9 0003 0022             		bclr	#3,$22(a1)
00009E0A 08A9 0005 0022             		bclr	#5,$22(a1)
00009E10 137C 0001 001D             		move.b	#1,$1D(a1)
00009E16                            
00009E16                            loc_842E:
00009E16 117C 0000 003A             		move.b	#0,$3A(a0)
00009E1C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009E22                            
00009E22                            locret_843A:
00009E22 4E75                       		rts	
00009E24                            ; ===========================================================================
00009E24                            
00009E24                            Obj53_TimeZero:				; XREF: Obj53_Display
00009E24 6100 0000                  		bsr.w	ObjectFall
00009E28 6100 0000                  		bsr.w	DisplaySprite
00009E2C 4A28 0001                  		tst.b	1(a0)
00009E30 6A00                       		bpl.s	Obj53_Delete
00009E32 4E75                       		rts	
00009E34                            ; ===========================================================================
00009E34                            
00009E34                            Obj53_Delete:				; XREF: Obj53_Index
00009E34 6100 0000                  		bsr.w	DeleteObject
00009E38 4E75                       		rts	
00009E3A                            ; ===========================================================================
00009E3A                            
00009E3A                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009E3A 117C 0000 003A             		move.b	#0,$3A(a0)
00009E40                            
00009E40                            loc_8458:				; XREF: Obj53_Touch
00009E40 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009E46 0828 0000 0028             		btst	#0,$28(a0)
00009E4C 6700                       		beq.s	loc_846C
00009E4E 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009E54                            
00009E54                            loc_846C:
00009E54 7207                       		moveq	#7,d1
00009E56 5228 001A                  		addq.b	#1,$1A(a0)
00009E5A 6000                       		bra.s	loc_8486
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009E5C 117C 0000 003A             		move.b	#0,$3A(a0)
00009E62                            
00009E62                            loc_847A:				; XREF: Obj1A_Touch
00009E62 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009E68 7218                       		moveq	#$18,d1
00009E6A 5428 001A                  		addq.b	#2,$1A(a0)
00009E6E                            
00009E6E                            loc_8486:				; XREF: Obj53_Collapse
00009E6E 7000                       		moveq	#0,d0
00009E70 1028 001A                  		move.b	$1A(a0),d0
00009E74 D040                       		add.w	d0,d0
00009E76 2668 0004                  		movea.l	4(a0),a3
00009E7A D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E7E 524B                       		addq.w	#1,a3
00009E80 08E8 0005 0001             		bset	#5,1(a0)
00009E86 1810                       		move.b	0(a0),d4
00009E88 1A28 0001                  		move.b	1(a0),d5
00009E8C 2248                       		movea.l	a0,a1
00009E8E 6000                       		bra.s	loc_84B2
00009E90                            ; ===========================================================================
00009E90                            
00009E90                            loc_84AA:
00009E90 6100 0000                  		bsr.w	SingleObjLoad
00009E94 6600                       		bne.s	loc_84F2
00009E96 5A4B                       		addq.w	#5,a3
00009E98                            
00009E98                            loc_84B2:
00009E98 137C 0006 0024             		move.b	#6,$24(a1)
00009E9E 1284                       		move.b	d4,0(a1)
00009EA0 234B 0004                  		move.l	a3,4(a1)
00009EA4 1345 0001                  		move.b	d5,1(a1)
00009EA8 3368 0008 0008             		move.w	8(a0),8(a1)
00009EAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EB4 3368 0002 0002             		move.w	2(a0),2(a1)
00009EBA 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009EC0 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009EC6 135C 0038                  		move.b	(a4)+,$38(a1)
00009ECA B3C8                       		cmpa.l	a0,a1
00009ECC 6400                       		bcc.s	loc_84EE
00009ECE 6100 0000                  		bsr.w	DisplaySprite2
00009ED2                            
00009ED2                            loc_84EE:
00009ED2 51C9 FFBC                  		dbf	d1,loc_84AA
00009ED6                            
00009ED6                            loc_84F2:
00009ED6 6100 0000                  		bsr.w	DisplaySprite
00009EDA 303C 00B9                  		move.w	#$B9,d0
00009EDE 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009EE4                            ; ===========================================================================
00009EE4                            ; ---------------------------------------------------------------------------
00009EE4                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009EE4                            ; ---------------------------------------------------------------------------
00009EE4 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009EF4 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009EFE 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F06 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F0E                            
00009F0E                            ; ---------------------------------------------------------------------------
00009F0E                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F0E                            ; ---------------------------------------------------------------------------
00009F0E                            
00009F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F0E                            
00009F0E                            
00009F0E                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009F0E 43F8 D000                  		lea	($FFFFD000).w,a1
00009F12 0829 0003 0022             		btst	#3,$22(a1)
00009F18 6700                       		beq.s	locret_856E
00009F1A 3029 0008                  		move.w	8(a1),d0
00009F1E 9068 0008                  		sub.w	8(a0),d0
00009F22 D041                       		add.w	d1,d0
00009F24 E248                       		lsr.w	#1,d0
00009F26 0828 0000 0001             		btst	#0,1(a0)
00009F2C 6700                       		beq.s	loc_854E
00009F2E 4640                       		not.w	d0
00009F30 D041                       		add.w	d1,d0
00009F32                            
00009F32                            loc_854E:
00009F32 7200                       		moveq	#0,d1
00009F34 1232 0000                  		move.b	(a2,d0.w),d1
00009F38 3028 000C                  		move.w	$C(a0),d0
00009F3C 9041                       		sub.w	d1,d0
00009F3E 7200                       		moveq	#0,d1
00009F40 1229 0016                  		move.b	$16(a1),d1
00009F44 9041                       		sub.w	d1,d0
00009F46 3340 000C                  		move.w	d0,$C(a1)
00009F4A 9468 0008                  		sub.w	8(a0),d2
00009F4E 9569 0008                  		sub.w	d2,8(a1)
00009F52                            
00009F52                            locret_856E:
00009F52 4E75                       		rts	
00009F54                            ; End of function SlopeObject2
00009F54                            
00009F54                            ; ===========================================================================
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            ; Collision data for GHZ collapsing ledge
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            Obj1A_SlopeData:
00009F54                            		incbin	misc\ghzledge.bin
00009F84                            		even
00009F84                            
00009F84                            ; ---------------------------------------------------------------------------
00009F84                            ; Sprite mappings - GHZ	collapsing ledge
00009F84                            ; ---------------------------------------------------------------------------
00009F84                            Map_obj1A:
00009F84                            	include "_maps\obj1A.asm"
00009F84                            ; ---------------------------------------------------------------------------
00009F84                            ; Sprite mappings - GHZ	collapsing ledge
00009F84                            ; ---------------------------------------------------------------------------
00009F84 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009F88 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009F8C 10                         byte_85A8:	dc.b $10
00009F8D C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009F92 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009F97 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009F9C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FA1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FA6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FAB F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FB0 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FB5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FBA F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FBF 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FC4 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FC9 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FCE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FD3 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009FD8 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FDD 10                         byte_85F9:	dc.b $10
00009FDE C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009FE3 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FE8 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FED E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FF2 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FF7 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009FFC F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A001 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A006 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A00B F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A010 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A015 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A01A 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A01F 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A024 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A029 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A02E 19                         byte_864A:	dc.b $19
0000A02F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A034 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A039 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A03E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A043 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A048 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A04D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A052 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A057 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A05C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A061 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A066 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A06B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A070 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A075 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A07A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A07F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A084 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A089 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A08E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A093 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A098 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A09D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0A2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0A7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0AC 19                         byte_86C8:	dc.b $19
0000A0AD C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0B2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0B7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0BC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0C1 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0C6 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0CB E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0D0 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0D5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0DA D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0DF F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0E4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0E9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0EE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0F3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0F8 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A0FD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A102 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A107 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A10C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A111 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A116 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A11B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A120 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A125 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A12A                            		even
0000A12A                            		even
0000A12A                            
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A                            Map_obj53:
0000A12A                            	include "_maps\obj53.asm"
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A12A                            ; ---------------------------------------------------------------------------
0000A12A 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000A12E 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000A132 04                         byte_874E:	dc.b 4
0000A133 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A138 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A13D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A142 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A147 08                         byte_8763:	dc.b 8
0000A148 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A14D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A152 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A157 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A15C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A161 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A166 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A16B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A170 04                         byte_878C:	dc.b 4
0000A171 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A176 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A17B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A180 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A185 08                         byte_87A1:	dc.b 8
0000A186 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A18B F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A190 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A195 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A19A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A19F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1A4 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1A9 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1AE                            		even
0000A1AE                            		even
0000A1AE                            
0000A1AE                            ; ===========================================================================
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            
0000A1AE                            Obj1C:					; XREF: Obj_Index
0000A1AE 7000                       		moveq	#0,d0
0000A1B0 1028 0024                  		move.b	$24(a0),d0
0000A1B4 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000A1B8 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000A1BC                            ; ===========================================================================
0000A1BC 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000A1BE 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000A1C0                            ; ===========================================================================
0000A1C0                            
0000A1C0                            Obj1C_Main:				; XREF: Obj1C_Index
0000A1C0 5428 0024                  		addq.b	#2,$24(a0)
0000A1C4 7000                       		moveq	#0,d0
0000A1C6 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000A1CA C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1CE 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000A1D2 2159 0004                  		move.l	(a1)+,4(a0)
0000A1D6 3159 0002                  		move.w	(a1)+,2(a0)
0000A1DA 0028 0004 0001             		ori.b	#4,1(a0)
0000A1E0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000A1E4 1159 0019                  		move.b	(a1)+,$19(a0)
0000A1E8 1159 0018                  		move.b	(a1)+,$18(a0)
0000A1EC 1159 0020                  		move.b	(a1)+,$20(a0)
0000A1F0                            
0000A1F0                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000A1F0 3028 0008                  		move.w	8(a0),d0
0000A1F4 0240 FF80                  		andi.w	#$FF80,d0
0000A1F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A1FC 0441 0080                  		subi.w	#$80,d1
0000A200 0241 FF80                  		andi.w	#$FF80,d1
0000A204 9041                       		sub.w	d1,d0
0000A206 0C40 0280                  		cmpi.w	#$280,d0
0000A20A 6200 0000                  		bhi.w	DeleteObject
0000A20E 6000 0000                  		bra.w	DisplaySprite
0000A212                            ; ===========================================================================
0000A212                            ; ---------------------------------------------------------------------------
0000A212                            ; Variables for	object $1C are stored in an array
0000A212                            ; ---------------------------------------------------------------------------
0000A212 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000A216 44D8                       		dc.w $44D8		; VRAM setting
0000A218 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A21C 0000 0000                  		dc.l Map_obj1C
0000A220 44D8                       		dc.w $44D8
0000A222 0008 0200                  		dc.b 0,	8, 2, 0
0000A226 0000 0000                  		dc.l Map_obj1C
0000A22A 44D8                       		dc.w $44D8
0000A22C 0008 0200                  		dc.b 0,	8, 2, 0
0000A230 0000 9324                  		dc.l Map_obj11
0000A234 438E                       		dc.w $438E
0000A236 0110 0100                  		dc.b 1,	$10, 1,	0
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            ; Sprite mappings - SLZ	lava thrower
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            Map_obj1C:
0000A23A                            	include "_maps\obj1C.asm"
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A                            ; Sprite mappings - SLZ	lava thrower
0000A23A                            ; ---------------------------------------------------------------------------
0000A23A 0000                       		dc.w byte_8858-Map_obj1C
0000A23C 01                         byte_8858:	dc.b 1
0000A23D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A242                            		even
0000A242                            		even
0000A242                            
0000A242                            ; ===========================================================================
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            ; Object 1D - switch that activates when Sonic touches it
0000A242                            ; (this	is not used anywhere in	the game)
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            
0000A242                            Obj1D:					; XREF: Obj_Index
0000A242 7000                       		moveq	#0,d0
0000A244 1028 0024                  		move.b	$24(a0),d0
0000A248 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000A24C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000A250                            ; ===========================================================================
0000A250 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000A252 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000A254 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000A256                            ; ===========================================================================
0000A256                            
0000A256                            Obj1D_Main:				; XREF: Obj1D_Index
0000A256 5428 0024                  		addq.b	#2,$24(a0)
0000A25A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000A262 317C 4000 0002             		move.w	#$4000,2(a0)
0000A268 117C 0004 0001             		move.b	#4,1(a0)
0000A26E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000A274 117C 0010 0019             		move.b	#$10,$19(a0)
0000A27A 117C 0005 0018             		move.b	#5,$18(a0)
0000A280                            
0000A280                            Obj1D_Action:				; XREF: Obj1D_Index
0000A280 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000A286 323C 0010                  		move.w	#$10,d1
0000A28A 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000A28E 6700                       		beq.s	Obj1D_ChkDel
0000A290 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000A294 7001                       		moveq	#1,d0
0000A296 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000A29A                            
0000A29A                            Obj1D_ChkDel:
0000A29A 6100 0000                  		bsr.w	DisplaySprite
0000A29E 3028 0008                  		move.w	8(a0),d0
0000A2A2 0240 FF80                  		andi.w	#$FF80,d0
0000A2A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2AA 0441 0080                  		subi.w	#$80,d1
0000A2AE 0241 FF80                  		andi.w	#$FF80,d1
0000A2B2 9041                       		sub.w	d1,d0
0000A2B4 0C40 0280                  		cmpi.w	#$280,d0
0000A2B8 6200 0000                  		bhi.w	Obj1D_Delete
0000A2BC 4E75                       		rts	
0000A2BE                            ; ===========================================================================
0000A2BE                            
0000A2BE                            Obj1D_Delete:				; XREF: Obj1D_Index
0000A2BE 6100 0000                  		bsr.w	DeleteObject
0000A2C2 4E75                       		rts	
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4                            ; Subroutine to	check if Sonic touches the object
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4                            
0000A2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2C4                            
0000A2C4                            
0000A2C4                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000A2C4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A2C8 3029 0008                  		move.w	8(a1),d0
0000A2CC 9068 0008                  		sub.w	8(a0),d0
0000A2D0 D041                       		add.w	d1,d0
0000A2D2 6B00                       		bmi.s	loc_8918
0000A2D4 D241                       		add.w	d1,d1
0000A2D6 B041                       		cmp.w	d1,d0
0000A2D8 6400                       		bcc.s	loc_8918
0000A2DA 3429 000C                  		move.w	$C(a1),d2
0000A2DE 1229 0016                  		move.b	$16(a1),d1
0000A2E2 4881                       		ext.w	d1
0000A2E4 D242                       		add.w	d2,d1
0000A2E6 3028 000C                  		move.w	$C(a0),d0
0000A2EA 0440 0010                  		subi.w	#$10,d0
0000A2EE 9041                       		sub.w	d1,d0
0000A2F0 6200                       		bhi.s	loc_8918
0000A2F2 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A2F6 6500                       		bcs.s	loc_8918
0000A2F8 70FF                       		moveq	#-1,d0
0000A2FA 4E75                       		rts	
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            loc_8918:
0000A2FC 7000                       		moveq	#0,d0
0000A2FE 4E75                       		rts	
0000A300                            ; End of function Obj1D_ChkTouch
0000A300                            
0000A300                            ; ===========================================================================
0000A300                            ; ---------------------------------------------------------------------------
0000A300                            ; Sprite mappings - object 1D
0000A300                            ; ---------------------------------------------------------------------------
0000A300                            Map_obj1D:
0000A300                            	include "_maps\obj1D.asm"
0000A300                            ; ---------------------------------------------------------------------------
0000A300                            ; Sprite mappings - object 1D
0000A300                            ; ---------------------------------------------------------------------------
0000A300 0000                       		dc.w byte_891E-Map_obj1D
0000A302 04                         byte_891E:	dc.b 4
0000A303 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A308 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A30D E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A312 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A318 00                         		even
0000A318 00                         		even
0000A318                            
0000A318                            ; ===========================================================================
0000A318                            ; ---------------------------------------------------------------------------
0000A318                            ; Object 2A - doors (SBZ)
0000A318                            ; ---------------------------------------------------------------------------
0000A318                            
0000A318                            Obj2A:					; XREF: Obj_Index
0000A318 7000                       		moveq	#0,d0
0000A31A 1028 0024                  		move.b	$24(a0),d0
0000A31E 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000A322 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000A326                            ; ===========================================================================
0000A326 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000A328 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000A32A                            ; ===========================================================================
0000A32A                            
0000A32A                            Obj2A_Main:				; XREF: Obj2A_Index
0000A32A 5428 0024                  		addq.b	#2,$24(a0)
0000A32E 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000A336 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000A33C 0028 0004 0001             		ori.b	#4,1(a0)
0000A342 117C 0008 0019             		move.b	#8,$19(a0)
0000A348 117C 0004 0018             		move.b	#4,$18(a0)
0000A34E                            
0000A34E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000A34E 323C 0040                  		move.w	#$40,d1
0000A352 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000A356 3038 D008                  		move.w	($FFFFD008).w,d0
0000A35A D041                       		add.w	d1,d0
0000A35C B068 0008                  		cmp.w	8(a0),d0
0000A360 6500                       		bcs.s	Obj2A_Animate
0000A362 9041                       		sub.w	d1,d0
0000A364 9041                       		sub.w	d1,d0
0000A366 B068 0008                  		cmp.w	8(a0),d0
0000A36A 6400                       		bcc.s	Obj2A_Animate
0000A36C D041                       		add.w	d1,d0
0000A36E B068 0008                  		cmp.w	8(a0),d0
0000A372 6400                       		bcc.s	loc_899A
0000A374 0828 0000 0022             		btst	#0,$22(a0)
0000A37A 6600                       		bne.s	Obj2A_Animate
0000A37C 6000                       		bra.s	Obj2A_Open
0000A37E                            ; ===========================================================================
0000A37E                            
0000A37E                            loc_899A:				; XREF: Obj2A_OpenShut
0000A37E 0828 0000 0022             		btst	#0,$22(a0)
0000A384 6700                       		beq.s	Obj2A_Animate
0000A386                            
0000A386                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000A386 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000A38C                            
0000A38C                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000A38C 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000A392 6100 0000                  		bsr.w	AnimateSprite
0000A396 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000A39A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000A39C 323C 0011                  		move.w	#$11,d1
0000A3A0 343C 0020                  		move.w	#$20,d2
0000A3A4 3602                       		move.w	d2,d3
0000A3A6 5243                       		addq.w	#1,d3
0000A3A8 3828 0008                  		move.w	8(a0),d4
0000A3AC 6100 0000                  		bsr.w	SolidObject
0000A3B0                            
0000A3B0                            Obj2A_MarkAsUsed:
0000A3B0 6000 0000                  		bra.w	MarkObjGone
0000A3B4                            ; ===========================================================================
0000A3B4                            Ani_obj2A:
0000A3B4                            	include "_anim\obj2A.asm"
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4                            ; Animation script - doors (SBZ)
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000A3B6 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000A3B8 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000A3C4 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000A3D0                            		even
0000A3D0                            		even
0000A3D0                            
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0                            ; Sprite mappings - doors (SBZ)
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0                            Map_obj2A:
0000A3D0                            	include "_maps\obj2A.asm"
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0                            ; Sprite mappings - doors (SBZ)
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000A3D4 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000A3D8 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000A3DC 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000A3E0 0000                       		dc.w byte_8A56-Map_obj2A
0000A3E2 02                         byte_89FE:	dc.b 2
0000A3E3 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000A3E8 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000A3ED 02                         byte_8A09:	dc.b 2
0000A3EE DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000A3F3 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000A3F8 02                         byte_8A14:	dc.b 2
0000A3F9 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000A3FE 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000A403 02                         byte_8A1F:	dc.b 2
0000A404 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000A409 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000A40E 02                         byte_8A2A:	dc.b 2
0000A40F D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000A414 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000A419 02                         byte_8A35:	dc.b 2
0000A41A CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000A41F 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000A424 02                         byte_8A40:	dc.b 2
0000A425 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000A42A 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000A42F 02                         byte_8A4B:	dc.b 2
0000A430 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000A435 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000A43A 02                         byte_8A56:	dc.b 2
0000A43B C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000A440 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000A446 00                         		even
0000A446 00                         		even
0000A446                            
0000A446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A446                            
0000A446                            
0000A446                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000A446 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A44A 6700                       		beq.s	loc_8AA8
0000A44C 6B00 0000                  		bmi.w	loc_8AC4
0000A450 4A40                       		tst.w	d0
0000A452 6700 0000                  		beq.w	loc_8A92
0000A456 6B00                       		bmi.s	loc_8A7C
0000A458 4A69 0010                  		tst.w	$10(a1)
0000A45C 6B00                       		bmi.s	loc_8A92
0000A45E 6000                       		bra.s	loc_8A82
0000A460                            ; ===========================================================================
0000A460                            
0000A460                            loc_8A7C:
0000A460 4A69 0010                  		tst.w	$10(a1)
0000A464 6A00                       		bpl.s	loc_8A92
0000A466                            
0000A466                            loc_8A82:
0000A466 9169 0008                  		sub.w	d0,8(a1)
0000A46A 337C 0000 0014             		move.w	#0,$14(a1)
0000A470 337C 0000 0010             		move.w	#0,$10(a1)
0000A476                            
0000A476                            loc_8A92:
0000A476 0829 0001 0022             		btst	#1,$22(a1)
0000A47C 6600                       		bne.s	loc_8AB6
0000A47E 08E9 0005 0022             		bset	#5,$22(a1)
0000A484 08E8 0005 0022             		bset	#5,$22(a0)
0000A48A 4E75                       		rts	
0000A48C                            ; ===========================================================================
0000A48C                            
0000A48C                            loc_8AA8:
0000A48C 0828 0005 0022             		btst	#5,$22(a0)
0000A492 6700                       		beq.s	locret_8AC2
0000A494 337C 0001 001C             		move.w	#1,$1C(a1)
0000A49A                            
0000A49A                            loc_8AB6:
0000A49A 08A8 0005 0022             		bclr	#5,$22(a0)
0000A4A0 08A9 0005 0022             		bclr	#5,$22(a1)
0000A4A6                            
0000A4A6                            locret_8AC2:
0000A4A6 4E75                       		rts	
0000A4A8                            ; ===========================================================================
0000A4A8                            
0000A4A8                            loc_8AC4:
0000A4A8 4A69 0012                  		tst.w	$12(a1)
0000A4AC 6A00                       		bpl.s	locret_8AD8
0000A4AE 4A43                       		tst.w	d3
0000A4B0 6A00                       		bpl.s	locret_8AD8
0000A4B2 9769 000C                  		sub.w	d3,$C(a1)
0000A4B6 337C 0000 0012             		move.w	#0,$12(a1)
0000A4BC                            
0000A4BC                            locret_8AD8:
0000A4BC 4E75                       		rts	
0000A4BE                            ; End of function Obj44_SolidWall
0000A4BE                            
0000A4BE                            
0000A4BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4BE                            
0000A4BE                            
0000A4BE                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A4BE 43F8 D000                  		lea	($FFFFD000).w,a1
0000A4C2 3029 0008                  		move.w	8(a1),d0
0000A4C6 9068 0008                  		sub.w	8(a0),d0
0000A4CA D041                       		add.w	d1,d0
0000A4CC 6B00                       		bmi.s	loc_8B48
0000A4CE 3601                       		move.w	d1,d3
0000A4D0 D643                       		add.w	d3,d3
0000A4D2 B043                       		cmp.w	d3,d0
0000A4D4 6200                       		bhi.s	loc_8B48
0000A4D6 1629 0016                  		move.b	$16(a1),d3
0000A4DA 4883                       		ext.w	d3
0000A4DC D443                       		add.w	d3,d2
0000A4DE 3629 000C                  		move.w	$C(a1),d3
0000A4E2 9668 000C                  		sub.w	$C(a0),d3
0000A4E6 D642                       		add.w	d2,d3
0000A4E8 6B00                       		bmi.s	loc_8B48
0000A4EA 3802                       		move.w	d2,d4
0000A4EC D844                       		add.w	d4,d4
0000A4EE B644                       		cmp.w	d4,d3
0000A4F0 6400                       		bcc.s	loc_8B48
0000A4F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A4F6 6B00                       		bmi.s	loc_8B48
0000A4F8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A4FE 6400                       		bcc.s	loc_8B48
0000A500 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A504 6600                       		bne.s	loc_8B48
0000A506 3A00                       		move.w	d0,d5
0000A508 B240                       		cmp.w	d0,d1
0000A50A 6400                       		bcc.s	loc_8B30
0000A50C D241                       		add.w	d1,d1
0000A50E 9041                       		sub.w	d1,d0
0000A510 3A00                       		move.w	d0,d5
0000A512 4445                       		neg.w	d5
0000A514                            
0000A514                            loc_8B30:
0000A514 3203                       		move.w	d3,d1
0000A516 B443                       		cmp.w	d3,d2
0000A518 6400                       		bcc.s	loc_8B3C
0000A51A 9644                       		sub.w	d4,d3
0000A51C 3203                       		move.w	d3,d1
0000A51E 4441                       		neg.w	d1
0000A520                            
0000A520                            loc_8B3C:
0000A520 BA41                       		cmp.w	d1,d5
0000A522 6200                       		bhi.s	loc_8B44
0000A524 7801                       		moveq	#1,d4
0000A526 4E75                       		rts	
0000A528                            ; ===========================================================================
0000A528                            
0000A528                            loc_8B44:
0000A528 78FF                       		moveq	#-1,d4
0000A52A 4E75                       		rts	
0000A52C                            ; ===========================================================================
0000A52C                            
0000A52C                            loc_8B48:
0000A52C 7800                       		moveq	#0,d4
0000A52E 4E75                       		rts	
0000A530                            ; End of function Obj44_SolidWall2
0000A530                            
0000A530                            ; ===========================================================================
0000A530                            ; ---------------------------------------------------------------------------
0000A530                            ; Object 1E - Ball Hog enemy (SBZ)
0000A530                            ; ---------------------------------------------------------------------------
0000A530                            
0000A530                            Obj1E:					; XREF: Obj_Index
0000A530 7000                       		moveq	#0,d0
0000A532 1028 0024                  		move.b	$24(a0),d0
0000A536 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A53A 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A53E                            ; ===========================================================================
0000A53E 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A540 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A542                            ; ===========================================================================
0000A542                            
0000A542                            Obj1E_Main:				; XREF: Obj1E_Index
0000A542 117C 0013 0016             		move.b	#$13,$16(a0)
0000A548 117C 0008 0017             		move.b	#8,$17(a0)
0000A54E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A556 317C 2302 0002             		move.w	#$2302,2(a0)
0000A55C 117C 0004 0001             		move.b	#4,1(a0)
0000A562 117C 0004 0018             		move.b	#4,$18(a0)
0000A568 117C 0005 0020             		move.b	#5,$20(a0)
0000A56E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A574 6100 0000                  		bsr.w	ObjectFall
0000A578 4EB9 0000 0000             		jsr	ObjHitFloor
0000A57E 4A41                       		tst.w	d1
0000A580 6A00                       		bpl.s	locret_8BAC
0000A582 D368 000C                  		add.w	d1,$C(a0)
0000A586 317C 0000 0012             		move.w	#0,$12(a0)
0000A58C 5428 0024                  		addq.b	#2,$24(a0)
0000A590                            
0000A590                            locret_8BAC:
0000A590 4E75                       		rts	
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            Obj1E_Action:				; XREF: Obj1E_Index
0000A592 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A598 6100 0000                  		bsr.w	AnimateSprite
0000A59C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A5A2 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A5A4 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A5A8 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A5AA 6000                       		bra.s	Obj1E_MarkAsGone
0000A5AC                            ; ===========================================================================
0000A5AC                            
0000A5AC                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A5AC 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A5B0                            
0000A5B0                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A5B0 6000 0000                  		bra.w	MarkObjGone
0000A5B4                            ; ===========================================================================
0000A5B4                            
0000A5B4                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A5B4 117C 0001 0032             		move.b	#1,$32(a0)
0000A5BA 6100 0000                  		bsr.w	SingleObjLoad
0000A5BE 6600                       		bne.s	loc_8C1A
0000A5C0 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A5C4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5D0 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A5D6 337C 0000 0012             		move.w	#0,$12(a1)
0000A5DC 70FC                       		moveq	#-4,d0
0000A5DE 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A5E4 6700                       		beq.s	loc_8C0A	; if not, branch
0000A5E6 4440                       		neg.w	d0
0000A5E8 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A5EC                            
0000A5EC                            loc_8C0A:
0000A5EC D169 0008                  		add.w	d0,8(a1)
0000A5F0 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A5F6 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A5FC                            
0000A5FC                            loc_8C1A:
0000A5FC 60B2                       		bra.s	Obj1E_MarkAsGone
0000A5FE                            ; ===========================================================================
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            
0000A5FE                            Obj20:					; XREF: Obj_Index
0000A5FE 7000                       		moveq	#0,d0
0000A600 1028 0024                  		move.b	$24(a0),d0
0000A604 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A608 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A60C                            ; ===========================================================================
0000A60C 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A60E 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A610                            ; ===========================================================================
0000A610                            
0000A610                            Obj20_Main:				; XREF: Obj20_Index
0000A610 5428 0024                  		addq.b	#2,$24(a0)
0000A614 117C 0007 0016             		move.b	#7,$16(a0)
0000A61A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A622 317C 2302 0002             		move.w	#$2302,2(a0)
0000A628 117C 0004 0001             		move.b	#4,1(a0)
0000A62E 117C 0003 0018             		move.b	#3,$18(a0)
0000A634 117C 0087 0020             		move.b	#$87,$20(a0)
0000A63A 117C 0008 0019             		move.b	#8,$19(a0)
0000A640 7000                       		moveq	#0,d0
0000A642 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A646 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A64A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A64E 117C 0004 001A             		move.b	#4,$1A(a0)
0000A654                            
0000A654                            Obj20_Bounce:				; XREF: Obj20_Index
0000A654 4EB9 0000 0000             		jsr	ObjectFall
0000A65A 4A68 0012                  		tst.w	$12(a0)
0000A65E 6B00                       		bmi.s	Obj20_ChkExplode
0000A660 4EB9 0000 0000             		jsr	ObjHitFloor
0000A666 4A41                       		tst.w	d1
0000A668 6A00                       		bpl.s	Obj20_ChkExplode
0000A66A D368 000C                  		add.w	d1,$C(a0)
0000A66E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A674 4A03                       		tst.b	d3
0000A676 6700                       		beq.s	Obj20_ChkExplode
0000A678 6B00                       		bmi.s	loc_8CA4
0000A67A 4A68 0010                  		tst.w	$10(a0)
0000A67E 6A00                       		bpl.s	Obj20_ChkExplode
0000A680 4468 0010                  		neg.w	$10(a0)
0000A684 6000                       		bra.s	Obj20_ChkExplode
0000A686                            ; ===========================================================================
0000A686                            
0000A686                            loc_8CA4:				; XREF: Obj20_Bounce
0000A686 4A68 0010                  		tst.w	$10(a0)
0000A68A 6B00                       		bmi.s	Obj20_ChkExplode
0000A68C 4468 0010                  		neg.w	$10(a0)
0000A690                            
0000A690                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A690 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A694 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A696 10BC 0024                  		move.b	#$24,0(a0)
0000A69A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A69E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A6A4 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A6A8                            ; ===========================================================================
0000A6A8                            
0000A6A8                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A6A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6AC 6A00                       		bpl.s	Obj20_Display
0000A6AE 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A6B4 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A6BA                            
0000A6BA                            Obj20_Display:
0000A6BA 6100 0000                  		bsr.w	DisplaySprite
0000A6BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6C2 0640 00E0                  		addi.w	#$E0,d0
0000A6C6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A6CA 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6CE 4E75                       		rts	
0000A6D0                            ; ===========================================================================
0000A6D0                            ; ---------------------------------------------------------------------------
0000A6D0                            ; Object 24 - explosion	from a destroyed monitor
0000A6D0                            ; ---------------------------------------------------------------------------
0000A6D0                            
0000A6D0                            Obj24:					; XREF: Obj_Index
0000A6D0 7000                       		moveq	#0,d0
0000A6D2 1028 0024                  		move.b	$24(a0),d0
0000A6D6 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A6DA 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A6DE                            ; ===========================================================================
0000A6DE 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A6E0 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A6E2                            ; ===========================================================================
0000A6E2                            
0000A6E2                            Obj24_Main:				; XREF: Obj24_Index
0000A6E2 5428 0024                  		addq.b	#2,$24(a0)
0000A6E6 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A6EE 317C 041C 0002             		move.w	#$41C,2(a0)
0000A6F4 117C 0004 0001             		move.b	#4,1(a0)
0000A6FA 117C 0001 0018             		move.b	#1,$18(a0)
0000A700 117C 0000 0020             		move.b	#0,$20(a0)
0000A706 117C 000C 0019             		move.b	#$C,$19(a0)
0000A70C 117C 0009 001E             		move.b	#9,$1E(a0)
0000A712 117C 0000 001A             		move.b	#0,$1A(a0)
0000A718 303C 00A5                  		move.w	#$A5,d0
0000A71C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A722                            
0000A722                            Obj24_Animate:				; XREF: Obj24_Index
0000A722 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A726 6A00                       		bpl.s	Obj24_Display
0000A728 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A72E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A732 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A738 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A73C                            
0000A73C                            Obj24_Display:
0000A73C 6000 0000                  		bra.w	DisplaySprite
0000A740                            ; ===========================================================================
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            ; Object 27 - explosion	from a destroyed enemy
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            
0000A740                            Obj27:					; XREF: Obj_Index
0000A740 7000                       		moveq	#0,d0
0000A742 1028 0024                  		move.b	$24(a0),d0
0000A746 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A74A 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A74E                            ; ===========================================================================
0000A74E 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A750 0000                       		dc.w Obj27_Main-Obj27_Index
0000A752 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A754                            ; ===========================================================================
0000A754                            
0000A754                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A754 5428 0024                  		addq.b	#2,$24(a0)
0000A758 6100 0000                  		bsr.w	SingleObjLoad
0000A75C 6600                       		bne.s	Obj27_Main
0000A75E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A762 3368 0008 0008             		move.w	8(a0),8(a1)
0000A768 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A76E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A774                            
0000A774                            Obj27_Main:				; XREF: Obj27_Index
0000A774 5428 0024                  		addq.b	#2,$24(a0)
0000A778 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A780 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A786 117C 0004 0001             		move.b	#4,1(a0)
0000A78C 117C 0001 0018             		move.b	#1,$18(a0)
0000A792 117C 0000 0020             		move.b	#0,$20(a0)
0000A798 117C 000C 0019             		move.b	#$C,$19(a0)
0000A79E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7A4 117C 0000 001A             		move.b	#0,$1A(a0)
0000A7AA 303C 00C1                  		move.w	#$C1,d0
0000A7AE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A7B4                            
0000A7B4                            Obj27_Animate:				; XREF: Obj27_Index
0000A7B4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A7B8 6A00                       		bpl.s	Obj27_Display
0000A7BA 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A7C0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A7C4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A7CA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7CE                            
0000A7CE                            Obj27_Display:
0000A7CE 6000 0000                  		bra.w	DisplaySprite
0000A7D2                            ; ===========================================================================
0000A7D2                            ; ---------------------------------------------------------------------------
0000A7D2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7D2                            ; ---------------------------------------------------------------------------
0000A7D2                            
0000A7D2                            Obj3F:					; XREF: Obj_Index
0000A7D2 7000                       		moveq	#0,d0
0000A7D4 1028 0024                  		move.b	$24(a0),d0
0000A7D8 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A7DC 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A7E0                            ; ===========================================================================
0000A7E0 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A7E2 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A7E4                            ; ===========================================================================
0000A7E4                            
0000A7E4                            Obj3F_Main:				; XREF: Obj3F_Index
0000A7E4 5428 0024                  		addq.b	#2,$24(a0)
0000A7E8 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A7F0 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A7F6 117C 0004 0001             		move.b	#4,1(a0)
0000A7FC 117C 0001 0018             		move.b	#1,$18(a0)
0000A802 117C 0000 0020             		move.b	#0,$20(a0)
0000A808 117C 000C 0019             		move.b	#$C,$19(a0)
0000A80E 117C 0007 001E             		move.b	#7,$1E(a0)
0000A814 117C 0000 001A             		move.b	#0,$1A(a0)
0000A81A 303C 00C4                  		move.w	#$C4,d0
0000A81E 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A824                            ; ===========================================================================
0000A824                            Ani_obj1E:
0000A824                            	include "_anim\obj1E.asm"
0000A824                            ; ---------------------------------------------------------------------------
0000A824                            ; Animation script - doors (SBZ)
0000A824                            ; ---------------------------------------------------------------------------
0000A824 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A826 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A83E 00                         		even
0000A83E 00                         		even
0000A83E                            
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            Map_obj1E:
0000A83E                            	include "_maps\obj1E.asm"
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A842 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A846 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A84A 02                         byte_8E6E:	dc.b 2
0000A84B EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A850 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A855 02                         byte_8E79:	dc.b 2
0000A856 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A85B FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A860 02                         byte_8E84:	dc.b 2
0000A861 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A866 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A86B 02                         byte_8E8F:	dc.b 2
0000A86C E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A871 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A876 01                         byte_8E9A:	dc.b 1
0000A877 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A87C 01                         byte_8EA0:	dc.b 1
0000A87D F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A882                            		even
0000A882                            		even
0000A882                            
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            ; Sprite mappings - explosion
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            Map_obj24:
0000A882                            	include "_maps\obj24.asm"
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            ; Sprite mappings - explosion
0000A882                            ; ---------------------------------------------------------------------------
0000A882 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A886 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A88A 01                         byte_8EAE:	dc.b 1
0000A88B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A890 01                         byte_8EB4:	dc.b 1
0000A891 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A896 01                         byte_8EBA:	dc.b 1
0000A897 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A89C 01                         byte_8EC0:	dc.b 1
0000A89D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8A2                            		even
0000A8A2                            		even
0000A8A2                            
0000A8A2                            ; ---------------------------------------------------------------------------
0000A8A2                            ; Sprite mappings - explosion
0000A8A2                            ; ---------------------------------------------------------------------------
0000A8A2 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A8A6 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A8AA 0000                       		dc.w byte_8EF7-Map_obj27
0000A8AC 01                         byte_8ED0:	dc.b 1
0000A8AD F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8B2 01                         byte_8ED6:	dc.b 1
0000A8B3 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8B8 01                         byte_8EDC:	dc.b 1
0000A8B9 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8BE 04                         byte_8EE2:	dc.b 4
0000A8BF EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8C4 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8C9 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8CE FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8D3 04                         byte_8EF7:	dc.b 4
0000A8D4 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A8D9 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A8DE 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A8E3 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A8E8                            		even
0000A8E8                            ; ---------------------------------------------------------------------------
0000A8E8                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A8E8                            ; ---------------------------------------------------------------------------
0000A8E8 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A8EA 0000                       		dc.w byte_8F16-Map_obj3F
0000A8EC 0000                       		dc.w byte_8F1C-Map_obj3F
0000A8EE FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A8F0 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A8F2 01                         byte_8F16:	dc.b 1
0000A8F3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A8F8 01                         byte_8F1C:	dc.b 1
0000A8F9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A8FE                            		even
0000A8FE                            ; ===========================================================================
0000A8FE                            ; ---------------------------------------------------------------------------
0000A8FE                            ; Object 28 - animals
0000A8FE                            ; ---------------------------------------------------------------------------
0000A8FE                            
0000A8FE                            Obj28:					; XREF: Obj_Index
0000A8FE 7000                       		moveq	#0,d0
0000A900 1028 0024                  		move.b	$24(a0),d0
0000A904 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A908 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A90C                            ; ===========================================================================
0000A90C 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A910 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A914 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A918 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A91C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A920 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A924 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A928 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A92C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A930 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A934 0000                       		dc.w loc_92D6-Obj28_Index
0000A936                            
0000A936 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A942                            
0000A942 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A946 0000 0000                  		dc.l Map_obj28
0000A94A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A94E 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A952 FE80 FD00                  		dc.w $FE80, $FD00
0000A956 0000 0000                  		dc.l Map_obj28
0000A95A FEC0 FE80                  		dc.w $FEC0, $FE80
0000A95E 0000 0000                  		dc.l Map_obj28a
0000A962 FE40 FD00                  		dc.w $FE40, $FD00
0000A966 0000 0000                  		dc.l Map_obj28b
0000A96A FD00 FC00                  		dc.w $FD00, $FC00
0000A96E 0000 0000                  		dc.l Map_obj28a
0000A972 FD80 FC80                  		dc.w $FD80, $FC80
0000A976 0000 0000                  		dc.l Map_obj28b
0000A97A                            
0000A97A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A98A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A99A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9A6                            
0000A9A6 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A9BA 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A9CE 0000 0000                  		dc.l Map_obj28b
0000A9D2                            
0000A9D2 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A9E4 0565 05B3                  		dc.w $565, $5B3
0000A9E8                            ; ===========================================================================
0000A9E8                            
0000A9E8                            Obj28_Ending:				; XREF: Obj28_Index
0000A9E8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A9EC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A9F0 7000                       		moveq	#0,d0
0000A9F2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A9F6 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A9F8 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A9FC 0440 0014                  		subi.w	#$14,d0
0000AA00 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000AA06 D040                       		add.w	d0,d0
0000AA08 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000AA0E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000AA12 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA18 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000AA1E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA24 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000AA2A 117C 000C 0016             		move.b	#$C,$16(a0)
0000AA30 117C 0004 0001             		move.b	#4,1(a0)
0000AA36 08E8 0000 0001             		bset	#0,1(a0)
0000AA3C 117C 0006 0018             		move.b	#6,$18(a0)
0000AA42 117C 0008 0019             		move.b	#8,$19(a0)
0000AA48 117C 0007 001E             		move.b	#7,$1E(a0)
0000AA4E 6000 0000                  		bra.w	DisplaySprite
0000AA52                            ; ===========================================================================
0000AA52                            
0000AA52                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000AA52 5428 0024                  		addq.b	#2,$24(a0)
0000AA56 6100 80FC                  		bsr.w	RandomNumber
0000AA5A 0240 0001                  		andi.w	#1,d0
0000AA5E 7200                       		moveq	#0,d1
0000AA60 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000AA64 D241                       		add.w	d1,d1
0000AA66 D240                       		add.w	d0,d1
0000AA68 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000AA6C 1031 1000                  		move.b	(a1,d1.w),d0
0000AA70 1140 0030                  		move.b	d0,$30(a0)
0000AA74 E748                       		lsl.w	#3,d0
0000AA76 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000AA7A D2C0                       		adda.w	d0,a1
0000AA7C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AA80 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AA84 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000AA88 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000AA8E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AA94 6700                       		beq.s	loc_90C0	; if yes, branch
0000AA96 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000AA9C                            
0000AA9C                            loc_90C0:
0000AA9C 117C 000C 0016             		move.b	#$C,$16(a0)
0000AAA2 117C 0004 0001             		move.b	#4,1(a0)
0000AAA8 08E8 0000 0001             		bset	#0,1(a0)
0000AAAE 117C 0006 0018             		move.b	#6,$18(a0)
0000AAB4 117C 0008 0019             		move.b	#8,$19(a0)
0000AABA 117C 0007 001E             		move.b	#7,$1E(a0)
0000AAC0 117C 0002 001A             		move.b	#2,$1A(a0)
0000AAC6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AACC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AAD0 6600                       		bne.s	loc_911C
0000AAD2 6100 0000                  		bsr.w	SingleObjLoad
0000AAD6 6600                       		bne.s	Obj28_Display
0000AAD8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000AADC 3368 0008 0008             		move.w	8(a0),8(a1)
0000AAE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AAE8 3028 003E                  		move.w	$3E(a0),d0
0000AAEC E248                       		lsr.w	#1,d0
0000AAEE 1340 001A                  		move.b	d0,$1A(a1)
0000AAF2                            
0000AAF2                            Obj28_Display:
0000AAF2 6000 0000                  		bra.w	DisplaySprite
0000AAF6                            ; ===========================================================================
0000AAF6                            
0000AAF6                            loc_911C:
0000AAF6 117C 0012 0024             		move.b	#$12,$24(a0)
0000AAFC 4268 0010                  		clr.w	$10(a0)
0000AB00 6000 0000                  		bra.w	DisplaySprite
0000AB04                            ; ===========================================================================
0000AB04                            
0000AB04                            loc_912A:				; XREF: Obj28_Index
0000AB04 4A28 0001                  		tst.b	1(a0)
0000AB08 6A00 0000                  		bpl.w	DeleteObject
0000AB0C 6100 0000                  		bsr.w	ObjectFall
0000AB10 4A68 0012                  		tst.w	$12(a0)
0000AB14 6B00                       		bmi.s	loc_9180
0000AB16 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB1C 4A41                       		tst.w	d1
0000AB1E 6A00                       		bpl.s	loc_9180
0000AB20 D368 000C                  		add.w	d1,$C(a0)
0000AB24 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AB2A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB30 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB36 1028 0030                  		move.b	$30(a0),d0
0000AB3A D000                       		add.b	d0,d0
0000AB3C 5800                       		addq.b	#4,d0
0000AB3E 1140 0024                  		move.b	d0,$24(a0)
0000AB42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000AB46 6700                       		beq.s	loc_9180
0000AB48 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000AB4E 6700                       		beq.s	loc_9180
0000AB50 4468 0010                  		neg.w	$10(a0)
0000AB54 0868 0000 0001             		bchg	#0,1(a0)
0000AB5A                            
0000AB5A                            loc_9180:
0000AB5A 6000 0000                  		bra.w	DisplaySprite
0000AB5E                            ; ===========================================================================
0000AB5E                            
0000AB5E                            loc_9184:				; XREF: Obj28_Index
0000AB5E 6100 0000                  		bsr.w	ObjectFall
0000AB62 117C 0001 001A             		move.b	#1,$1A(a0)
0000AB68 4A68 0012                  		tst.w	$12(a0)
0000AB6C 6B00                       		bmi.s	loc_91AE
0000AB6E 117C 0000 001A             		move.b	#0,$1A(a0)
0000AB74 4EB9 0000 0000             		jsr	ObjHitFloor
0000AB7A 4A41                       		tst.w	d1
0000AB7C 6A00                       		bpl.s	loc_91AE
0000AB7E D368 000C                  		add.w	d1,$C(a0)
0000AB82 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AB88                            
0000AB88                            loc_91AE:
0000AB88 4A28 0028                  		tst.b	$28(a0)
0000AB8C 6600                       		bne.s	loc_9224
0000AB8E 4A28 0001                  		tst.b	1(a0)
0000AB92 6A00 0000                  		bpl.w	DeleteObject
0000AB96 6000 0000                  		bra.w	DisplaySprite
0000AB9A                            ; ===========================================================================
0000AB9A                            
0000AB9A                            loc_91C0:				; XREF: Obj28_Index
0000AB9A 6100 0000                  		bsr.w	SpeedToPos
0000AB9E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000ABA4 4A68 0012                  		tst.w	$12(a0)
0000ABA8 6B00                       		bmi.s	loc_91FC
0000ABAA 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABB0 4A41                       		tst.w	d1
0000ABB2 6A00                       		bpl.s	loc_91FC
0000ABB4 D368 000C                  		add.w	d1,$C(a0)
0000ABB8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ABBE 4A28 0028                  		tst.b	$28(a0)
0000ABC2 6700                       		beq.s	loc_91FC
0000ABC4 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000ABCA 6700                       		beq.s	loc_91FC
0000ABCC 4468 0010                  		neg.w	$10(a0)
0000ABD0 0868 0000 0001             		bchg	#0,1(a0)
0000ABD6                            
0000ABD6                            loc_91FC:
0000ABD6 5328 001E                  		subq.b	#1,$1E(a0)
0000ABDA 6A00                       		bpl.s	loc_9212
0000ABDC 117C 0001 001E             		move.b	#1,$1E(a0)
0000ABE2 5228 001A                  		addq.b	#1,$1A(a0)
0000ABE6 0228 0001 001A             		andi.b	#1,$1A(a0)
0000ABEC                            
0000ABEC                            loc_9212:
0000ABEC 4A28 0028                  		tst.b	$28(a0)
0000ABF0 6600                       		bne.s	loc_9224
0000ABF2 4A28 0001                  		tst.b	1(a0)
0000ABF6 6A00 0000                  		bpl.w	DeleteObject
0000ABFA 6000 0000                  		bra.w	DisplaySprite
0000ABFE                            ; ===========================================================================
0000ABFE                            
0000ABFE                            loc_9224:				; XREF: Obj28_Index
0000ABFE 3028 0008                  		move.w	8(a0),d0
0000AC02 9078 D008                  		sub.w	($FFFFD008).w,d0
0000AC06 6500                       		bcs.s	loc_923C
0000AC08 0440 0180                  		subi.w	#$180,d0
0000AC0C 6A00                       		bpl.s	loc_923C
0000AC0E 4A28 0001                  		tst.b	1(a0)
0000AC12 6A00 0000                  		bpl.w	DeleteObject
0000AC16                            
0000AC16                            loc_923C:
0000AC16 6000 0000                  		bra.w	DisplaySprite
0000AC1A                            ; ===========================================================================
0000AC1A                            
0000AC1A                            loc_9240:				; XREF: Obj28_Index
0000AC1A 4A28 0001                  		tst.b	1(a0)
0000AC1E 6A00 0000                  		bpl.w	DeleteObject
0000AC22 5368 0036                  		subq.w	#1,$36(a0)
0000AC26 6600 0000                  		bne.w	loc_925C
0000AC2A 117C 0002 0024             		move.b	#2,$24(a0)
0000AC30 117C 0003 0018             		move.b	#3,$18(a0)
0000AC36                            
0000AC36                            loc_925C:
0000AC36 6000 0000                  		bra.w	DisplaySprite
0000AC3A                            ; ===========================================================================
0000AC3A                            
0000AC3A                            loc_9260:				; XREF: Obj28_Index
0000AC3A 6100 0000                  		bsr.w	sub_9404
0000AC3E 6400                       		bcc.s	loc_927C
0000AC40 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000AC46 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AC4C 117C 000E 0024             		move.b	#$E,$24(a0)
0000AC52 6000 FF46                  		bra.w	loc_91C0
0000AC56                            ; ===========================================================================
0000AC56                            
0000AC56                            loc_927C:
0000AC56 6000 FFA6                  		bra.w	loc_9224
0000AC5A                            ; ===========================================================================
0000AC5A                            
0000AC5A                            loc_9280:				; XREF: Obj28_Index
0000AC5A 6100 0000                  		bsr.w	sub_9404
0000AC5E 6A00                       		bpl.s	loc_92B6
0000AC60 4268 0010                  		clr.w	$10(a0)
0000AC64 4268 0032                  		clr.w	$32(a0)
0000AC68 6100 0000                  		bsr.w	SpeedToPos
0000AC6C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AC72 6100 0000                  		bsr.w	loc_93C4
0000AC76 6100 0000                  		bsr.w	loc_93EC
0000AC7A 5328 001E                  		subq.b	#1,$1E(a0)
0000AC7E 6A00                       		bpl.s	loc_92B6
0000AC80 117C 0001 001E             		move.b	#1,$1E(a0)
0000AC86 5228 001A                  		addq.b	#1,$1A(a0)
0000AC8A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AC90                            
0000AC90                            loc_92B6:
0000AC90 6000 FF6C                  		bra.w	loc_9224
0000AC94                            ; ===========================================================================
0000AC94                            
0000AC94                            loc_92BA:				; XREF: Obj28_Index
0000AC94 6100 0000                  		bsr.w	sub_9404
0000AC98 6A00                       		bpl.s	loc_9310
0000AC9A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000ACA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACA6 117C 0004 0024             		move.b	#4,$24(a0)
0000ACAC 6000 FEB0                  		bra.w	loc_9184
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            loc_92D6:				; XREF: Obj28_Index
0000ACB0 6100 0000                  		bsr.w	ObjectFall
0000ACB4 117C 0001 001A             		move.b	#1,$1A(a0)
0000ACBA 4A68 0012                  		tst.w	$12(a0)
0000ACBE 6B00                       		bmi.s	loc_9310
0000ACC0 117C 0000 001A             		move.b	#0,$1A(a0)
0000ACC6 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACCC 4A41                       		tst.w	d1
0000ACCE 6A00                       		bpl.s	loc_9310
0000ACD0 4628 0029                  		not.b	$29(a0)
0000ACD4 6600                       		bne.s	loc_9306
0000ACD6 4468 0010                  		neg.w	$10(a0)
0000ACDA 0868 0000 0001             		bchg	#0,1(a0)
0000ACE0                            
0000ACE0                            loc_9306:
0000ACE0 D368 000C                  		add.w	d1,$C(a0)
0000ACE4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ACEA                            
0000ACEA                            loc_9310:
0000ACEA 6000 FF12                  		bra.w	loc_9224
0000ACEE                            ; ===========================================================================
0000ACEE                            
0000ACEE                            loc_9314:				; XREF: Obj28_Index
0000ACEE 6100 0000                  		bsr.w	sub_9404
0000ACF2 6A00                       		bpl.s	loc_932E
0000ACF4 4268 0010                  		clr.w	$10(a0)
0000ACF8 4268 0032                  		clr.w	$32(a0)
0000ACFC 6100 0000                  		bsr.w	ObjectFall
0000AD00 6100 0000                  		bsr.w	loc_93C4
0000AD04 6100 0000                  		bsr.w	loc_93EC
0000AD08                            
0000AD08                            loc_932E:
0000AD08 6000 FEF4                  		bra.w	loc_9224
0000AD0C                            ; ===========================================================================
0000AD0C                            
0000AD0C                            loc_9332:				; XREF: Obj28_Index
0000AD0C 6100 0000                  		bsr.w	sub_9404
0000AD10 6A00                       		bpl.s	loc_936C
0000AD12 6100 0000                  		bsr.w	ObjectFall
0000AD16 117C 0001 001A             		move.b	#1,$1A(a0)
0000AD1C 4A68 0012                  		tst.w	$12(a0)
0000AD20 6B00                       		bmi.s	loc_936C
0000AD22 117C 0000 001A             		move.b	#0,$1A(a0)
0000AD28 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD2E 4A41                       		tst.w	d1
0000AD30 6A00                       		bpl.s	loc_936C
0000AD32 4468 0010                  		neg.w	$10(a0)
0000AD36 0868 0000 0001             		bchg	#0,1(a0)
0000AD3C D368 000C                  		add.w	d1,$C(a0)
0000AD40 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD46                            
0000AD46                            loc_936C:
0000AD46 6000 FEB6                  		bra.w	loc_9224
0000AD4A                            ; ===========================================================================
0000AD4A                            
0000AD4A                            loc_9370:				; XREF: Obj28_Index
0000AD4A 6100 0000                  		bsr.w	sub_9404
0000AD4E 6A00                       		bpl.s	loc_93C0
0000AD50 6100 0000                  		bsr.w	SpeedToPos
0000AD54 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD5A 4A68 0012                  		tst.w	$12(a0)
0000AD5E 6B00                       		bmi.s	loc_93AA
0000AD60 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD66 4A41                       		tst.w	d1
0000AD68 6A00                       		bpl.s	loc_93AA
0000AD6A 4628 0029                  		not.b	$29(a0)
0000AD6E 6600                       		bne.s	loc_93A0
0000AD70 4468 0010                  		neg.w	$10(a0)
0000AD74 0868 0000 0001             		bchg	#0,1(a0)
0000AD7A                            
0000AD7A                            loc_93A0:
0000AD7A D368 000C                  		add.w	d1,$C(a0)
0000AD7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000AD84                            
0000AD84                            loc_93AA:
0000AD84 5328 001E                  		subq.b	#1,$1E(a0)
0000AD88 6A00                       		bpl.s	loc_93C0
0000AD8A 117C 0001 001E             		move.b	#1,$1E(a0)
0000AD90 5228 001A                  		addq.b	#1,$1A(a0)
0000AD94 0228 0001 001A             		andi.b	#1,$1A(a0)
0000AD9A                            
0000AD9A                            loc_93C0:
0000AD9A 6000 FE62                  		bra.w	loc_9224
0000AD9E                            ; ===========================================================================
0000AD9E                            
0000AD9E                            loc_93C4:
0000AD9E 117C 0001 001A             		move.b	#1,$1A(a0)
0000ADA4 4A68 0012                  		tst.w	$12(a0)
0000ADA8 6B00                       		bmi.s	locret_93EA
0000ADAA 117C 0000 001A             		move.b	#0,$1A(a0)
0000ADB0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADB6 4A41                       		tst.w	d1
0000ADB8 6A00                       		bpl.s	locret_93EA
0000ADBA D368 000C                  		add.w	d1,$C(a0)
0000ADBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000ADC4                            
0000ADC4                            locret_93EA:
0000ADC4 4E75                       		rts	
0000ADC6                            ; ===========================================================================
0000ADC6                            
0000ADC6                            loc_93EC:
0000ADC6 08E8 0000 0001             		bset	#0,1(a0)
0000ADCC 3028 0008                  		move.w	8(a0),d0
0000ADD0 9078 D008                  		sub.w	($FFFFD008).w,d0
0000ADD4 6400                       		bcc.s	locret_9402
0000ADD6 08A8 0000 0001             		bclr	#0,1(a0)
0000ADDC                            
0000ADDC                            locret_9402:
0000ADDC 4E75                       		rts	
0000ADDE                            
0000ADDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADDE                            
0000ADDE                            
0000ADDE                            sub_9404:
0000ADDE 3038 D008                  		move.w	($FFFFD008).w,d0
0000ADE2 9068 0008                  		sub.w	8(a0),d0
0000ADE6 0440 00B8                  		subi.w	#$B8,d0
0000ADEA 4E75                       		rts	
0000ADEC                            ; End of function sub_9404
0000ADEC                            
0000ADEC                            ; ===========================================================================
0000ADEC                            ; ---------------------------------------------------------------------------
0000ADEC                            ; Object 29 - points that appear when you destroy something
0000ADEC                            ; ---------------------------------------------------------------------------
0000ADEC                            
0000ADEC                            Obj29:					; XREF: Obj_Index
0000ADEC 7000                       		moveq	#0,d0
0000ADEE 1028 0024                  		move.b	$24(a0),d0
0000ADF2 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000ADF6 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000ADFA 6000 0000                  		bra.w	DisplaySprite
0000ADFE                            ; ===========================================================================
0000ADFE 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000AE00 0000                       		dc.w Obj29_Slower-Obj29_Index
0000AE02                            ; ===========================================================================
0000AE02                            
0000AE02                            Obj29_Main:				; XREF: Obj29_Index
0000AE02 5428 0024                  		addq.b	#2,$24(a0)
0000AE06 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000AE0E 317C 2797 0002             		move.w	#$2797,2(a0)
0000AE14 117C 0004 0001             		move.b	#4,1(a0)
0000AE1A 117C 0001 0018             		move.b	#1,$18(a0)
0000AE20 117C 0008 0019             		move.b	#8,$19(a0)
0000AE26 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000AE2C                            
0000AE2C                            Obj29_Slower:				; XREF: Obj29_Index
0000AE2C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE30 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000AE34 6100 0000                  		bsr.w	SpeedToPos
0000AE38 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE3E 4E75                       		rts	
0000AE40                            ; ===========================================================================
0000AE40                            ; ---------------------------------------------------------------------------
0000AE40                            ; Sprite mappings - animals
0000AE40                            ; ---------------------------------------------------------------------------
0000AE40                            Map_obj28:
0000AE40                            	include "_maps\obj28.asm"
0000AE40                            ; ---------------------------------------------------------------------------
0000AE40                            ; Sprite mappings - animals
0000AE40                            ; ---------------------------------------------------------------------------
0000AE40 0000                       		dc.w byte_9472-Map_obj28
0000AE42 0000                       		dc.w byte_9478-Map_obj28
0000AE44 0000                       		dc.w byte_946C-Map_obj28
0000AE46 01                         byte_946C:	dc.b 1
0000AE47 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE4C 01                         byte_9472:	dc.b 1
0000AE4D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE52 01                         byte_9478:	dc.b 1
0000AE53 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE58                            		even
0000AE58                            		even
0000AE58                            
0000AE58                            Map_obj28a:
0000AE58                            	include "_maps\obj28a.asm"
0000AE58                            ; ---------------------------------------------------------------------------
0000AE58                            ; Sprite mappings - animals
0000AE58                            ; ---------------------------------------------------------------------------
0000AE58 0000                       		dc.w byte_948A-Map_obj28a
0000AE5A 0000                       		dc.w byte_9490-Map_obj28a
0000AE5C 0000                       		dc.w byte_9484-Map_obj28a
0000AE5E 01                         byte_9484:	dc.b 1
0000AE5F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE64 01                         byte_948A:	dc.b 1
0000AE65 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE6A 01                         byte_9490:	dc.b 1
0000AE6B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE70                            		even
0000AE70                            		even
0000AE70                            
0000AE70                            Map_obj28b:
0000AE70                            	include "_maps\obj28b.asm"
0000AE70                            ; ---------------------------------------------------------------------------
0000AE70                            ; Sprite mappings - animals
0000AE70                            ; ---------------------------------------------------------------------------
0000AE70 0000                       		dc.w byte_94A2-Map_obj28b
0000AE72 0000                       		dc.w byte_94A8-Map_obj28b
0000AE74 0000                       		dc.w byte_949C-Map_obj28b
0000AE76 01                         byte_949C:	dc.b 1
0000AE77 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE7C 01                         byte_94A2:	dc.b 1
0000AE7D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AE82 01                         byte_94A8:	dc.b 1
0000AE83 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AE88                            		even
0000AE88                            		even
0000AE88                            
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88                            Map_obj29:
0000AE88                            	include "_maps\obj29.asm"
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88                            ; Sprite mappings - points that	appear when you	destroy	something
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000AE8C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AE90 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AE94 0000                       		dc.w byte_94E5-Map_obj29
0000AE96 01                         byte_94BC:	dc.b 1
0000AE97 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AE9C 01                         byte_94C2:	dc.b 1
0000AE9D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AEA2 01                         byte_94C8:	dc.b 1
0000AEA3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AEA8 01                         byte_94CE:	dc.b 1
0000AEA9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AEAE 01                         byte_94D4:	dc.b 1
0000AEAF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AEB4 02                         byte_94DA:	dc.b 2
0000AEB5 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AEBA FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AEBF 02                         byte_94E5:	dc.b 2
0000AEC0 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AEC5 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AECA                            		even
0000AECA                            		even
0000AECA                            
0000AECA                            ; ===========================================================================
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA                            
0000AECA                            Obj1F:					; XREF: Obj_Index
0000AECA 7000                       		moveq	#0,d0
0000AECC 1028 0024                  		move.b	$24(a0),d0
0000AED0 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AED4 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AED8                            ; ===========================================================================
0000AED8 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AEDA 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AEDC 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AEDE 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AEE0 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AEE2                            ; ===========================================================================
0000AEE2                            
0000AEE2                            Obj1F_Main:				; XREF: Obj1F_Index
0000AEE2 117C 0010 0016             		move.b	#$10,$16(a0)
0000AEE8 117C 0008 0017             		move.b	#8,$17(a0)
0000AEEE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AEF6 317C 0400 0002             		move.w	#$400,2(a0)
0000AEFC 117C 0004 0001             		move.b	#4,1(a0)
0000AF02 117C 0003 0018             		move.b	#3,$18(a0)
0000AF08 117C 0006 0020             		move.b	#6,$20(a0)
0000AF0E 117C 0015 0019             		move.b	#$15,$19(a0)
0000AF14 6100 0000                  		bsr.w	ObjectFall
0000AF18 4EB9 0000 0000             		jsr	ObjHitFloor
0000AF1E 4A41                       		tst.w	d1
0000AF20 6A00                       		bpl.s	locret_955A
0000AF22 D368 000C                  		add.w	d1,$C(a0)
0000AF26 1143 0026                  		move.b	d3,$26(a0)
0000AF2A 317C 0000 0012             		move.w	#0,$12(a0)
0000AF30 5428 0024                  		addq.b	#2,$24(a0)
0000AF34                            
0000AF34                            locret_955A:
0000AF34 4E75                       		rts	
0000AF36                            ; ===========================================================================
0000AF36                            
0000AF36                            Obj1F_Action:				; XREF: Obj1F_Index
0000AF36 7000                       		moveq	#0,d0
0000AF38 1028 0025                  		move.b	$25(a0),d0
0000AF3C 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000AF40 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000AF44 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AF4A 6100 0000                  		bsr.w	AnimateSprite
0000AF4E 6000 0000                  		bra.w	MarkObjGone
0000AF52                            ; ===========================================================================
0000AF52 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000AF54 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000AF56                            ; ===========================================================================
0000AF56                            
0000AF56                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000AF56 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000AF5A 6A00                       		bpl.s	locret_95B6
0000AF5C 4A28 0001                  		tst.b	1(a0)
0000AF60 6A00                       		bpl.s	Obj1F_Move
0000AF62 0868 0001 0032             		bchg	#1,$32(a0)
0000AF68 6600                       		bne.s	Obj1F_MakeFire
0000AF6A                            
0000AF6A                            Obj1F_Move:
0000AF6A 5428 0025                  		addq.b	#2,$25(a0)
0000AF6E 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000AF74 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000AF7A 6100 0000                  		bsr.w	Obj1F_SetAni
0000AF7E 5600                       		addq.b	#3,d0
0000AF80 1140 001C                  		move.b	d0,$1C(a0)
0000AF84 0868 0000 0022             		bchg	#0,$22(a0)
0000AF8A 6600                       		bne.s	locret_95B6
0000AF8C 4468 0010                  		neg.w	$10(a0)		; change direction
0000AF90                            
0000AF90                            locret_95B6:
0000AF90 4E75                       		rts	
0000AF92                            ; ===========================================================================
0000AF92                            
0000AF92                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AF92 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AF98 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AF9E 6100 0000                  		bsr.w	SingleObjLoad
0000AFA2 6600                       		bne.s	Obj1F_MakeFire2
0000AFA4 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AFA8 137C 0006 0024             		move.b	#6,$24(a1)
0000AFAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFB4 0469 0010 0008             		subi.w	#$10,8(a1)
0000AFBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFC0 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AFC6                            
0000AFC6                            Obj1F_MakeFire2:
0000AFC6 6100 0000                  		bsr.w	SingleObjLoad
0000AFCA 6600                       		bne.s	locret_9618
0000AFCC 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AFD0 137C 0006 0024             		move.b	#6,$24(a1)
0000AFD6 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFDC 0669 0010 0008             		addi.w	#$10,8(a1)
0000AFE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFE8 337C 0100 0010             		move.w	#$100,$10(a1)
0000AFEE                            
0000AFEE                            locret_9618:
0000AFEE 4E75                       		rts	
0000AFF0                            ; ===========================================================================
0000AFF0                            
0000AFF0                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000AFF0 5368 0030                  		subq.w	#1,$30(a0)
0000AFF4 6B00                       		bmi.s	loc_966E
0000AFF6 6100 0000                  		bsr.w	SpeedToPos
0000AFFA 0868 0000 0032             		bchg	#0,$32(a0)
0000B000 6600                       		bne.s	loc_9654
0000B002 3628 0008                  		move.w	8(a0),d3
0000B006 0643 0010                  		addi.w	#$10,d3
0000B00A 0828 0000 0022             		btst	#0,$22(a0)
0000B010 6700                       		beq.s	loc_9640
0000B012 0443 0020                  		subi.w	#$20,d3
0000B016                            
0000B016                            loc_9640:
0000B016 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B01C 0C41 FFF8                  		cmpi.w	#-8,d1
0000B020 6D00                       		blt.s	loc_966E
0000B022 0C41 000C                  		cmpi.w	#$C,d1
0000B026 6C00                       		bge.s	loc_966E
0000B028 4E75                       		rts	
0000B02A                            ; ===========================================================================
0000B02A                            
0000B02A                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000B02A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B030 D368 000C                  		add.w	d1,$C(a0)
0000B034 1143 0026                  		move.b	d3,$26(a0)
0000B038 6100 0000                  		bsr.w	Obj1F_SetAni
0000B03C 5600                       		addq.b	#3,d0
0000B03E 1140 001C                  		move.b	d0,$1C(a0)
0000B042 4E75                       		rts	
0000B044                            ; ===========================================================================
0000B044                            
0000B044                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000B044 5528 0025                  		subq.b	#2,$25(a0)
0000B048 317C 003B 0030             		move.w	#59,$30(a0)
0000B04E 317C 0000 0010             		move.w	#0,$10(a0)
0000B054 6100 0000                  		bsr.w	Obj1F_SetAni
0000B058 1140 001C                  		move.b	d0,$1C(a0)
0000B05C 4E75                       		rts	
0000B05E                            ; ---------------------------------------------------------------------------
0000B05E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B05E                            ; ---------------------------------------------------------------------------
0000B05E                            
0000B05E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B05E                            
0000B05E                            
0000B05E                            Obj1F_SetAni:				; XREF: loc_966E
0000B05E 7000                       		moveq	#0,d0
0000B060 1628 0026                  		move.b	$26(a0),d3
0000B064 6B00                       		bmi.s	loc_96A4
0000B066 0C03 0006                  		cmpi.b	#6,d3
0000B06A 6500                       		bcs.s	locret_96A2
0000B06C 7001                       		moveq	#1,d0
0000B06E 0828 0000 0022             		btst	#0,$22(a0)
0000B074 6600                       		bne.s	locret_96A2
0000B076 7002                       		moveq	#2,d0
0000B078                            
0000B078                            locret_96A2:
0000B078 4E75                       		rts	
0000B07A                            ; ===========================================================================
0000B07A                            
0000B07A                            loc_96A4:				; XREF: Obj1F_SetAni
0000B07A 0C03 00FA                  		cmpi.b	#-6,d3
0000B07E 6200                       		bhi.s	locret_96B6
0000B080 7002                       		moveq	#2,d0
0000B082 0828 0000 0022             		btst	#0,$22(a0)
0000B088 6600                       		bne.s	locret_96B6
0000B08A 7001                       		moveq	#1,d0
0000B08C                            
0000B08C                            locret_96B6:
0000B08C 4E75                       		rts	
0000B08E                            ; End of function Obj1F_SetAni
0000B08E                            
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            Obj1F_Delete:				; XREF: Obj1F_Index
0000B08E 6100 0000                  		bsr.w	DeleteObject
0000B092 4E75                       		rts	
0000B094                            ; ===========================================================================
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            ; Sub-object - missile that the	Crabmeat throws
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            
0000B094                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000B094 5428 0024                  		addq.b	#2,$24(a0)
0000B098 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000B0A0 317C 0400 0002             		move.w	#$400,2(a0)
0000B0A6 117C 0004 0001             		move.b	#4,1(a0)
0000B0AC 117C 0003 0018             		move.b	#3,$18(a0)
0000B0B2 117C 0087 0020             		move.b	#$87,$20(a0)
0000B0B8 117C 0008 0019             		move.b	#8,$19(a0)
0000B0BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B0C4 117C 0007 001C             		move.b	#7,$1C(a0)
0000B0CA                            
0000B0CA                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000B0CA 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000B0D0 6100 0000                  		bsr.w	AnimateSprite
0000B0D4 6100 0000                  		bsr.w	ObjectFall
0000B0D8 6100 0000                  		bsr.w	DisplaySprite
0000B0DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B0E0 0640 00E0                  		addi.w	#$E0,d0
0000B0E4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B0E8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000B0EA 4E75                       		rts	
0000B0EC                            ; ===========================================================================
0000B0EC                            
0000B0EC                            Obj1F_Delete2:
0000B0EC 6000 0000                  		bra.w	DeleteObject
0000B0F0                            ; ===========================================================================
0000B0F0                            Ani_obj1F:
0000B0F0                            	include "_anim\obj1F.asm"
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            ; Animation script - Crabmeat enemy
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000B0F6 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000B0FC 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000B100 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000B104 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000B108 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000B10C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000B112 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000B118 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000B11E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000B122 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000B126                            		even
0000B126                            		even
0000B126                            
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            Map_obj1F:
0000B126                            	include "_maps\obj1F.asm"
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B126                            ; ---------------------------------------------------------------------------
0000B126 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000B12A 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000B12E 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000B132 0000                       		dc.w byte_97D7-Map_obj1F
0000B134 04                         byte_975E:	dc.b 4
0000B135 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000B13A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B13F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B144 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B149 04                         byte_9773:	dc.b 4
0000B14A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000B14F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B154 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B159 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B15E 04                         byte_9788:	dc.b 4
0000B15F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000B164 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B169 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B16E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B173 04                         byte_979D:	dc.b 4
0000B174 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000B179 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B17E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B183 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B188 06                         byte_97B2:	dc.b 6
0000B189 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000B18E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B193 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B198 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B19D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1A2 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1A7 01                         byte_97D1:	dc.b 1
0000B1A8 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000B1AD 01                         byte_97D7:	dc.b 1
0000B1AE F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000B1B4 00                         		even
0000B1B4 00                         		even
0000B1B4                            
0000B1B4                            ; ===========================================================================
0000B1B4                            ; ---------------------------------------------------------------------------
0000B1B4                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B1B4                            ; ---------------------------------------------------------------------------
0000B1B4                            
0000B1B4                            Obj22:					; XREF: Obj_Index
0000B1B4 7000                       		moveq	#0,d0
0000B1B6 1028 0024                  		move.b	$24(a0),d0
0000B1BA 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000B1BE 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000B1C2                            ; ===========================================================================
0000B1C2 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000B1C4 0000                       		dc.w Obj22_Action-Obj22_Index
0000B1C6 0000                       		dc.w Obj22_Delete-Obj22_Index
0000B1C8                            ; ===========================================================================
0000B1C8                            
0000B1C8                            Obj22_Main:				; XREF: Obj22_Index
0000B1C8 5428 0024                  		addq.b	#2,$24(a0)
0000B1CC 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000B1D4 317C 0444 0002             		move.w	#$444,2(a0)
0000B1DA 117C 0004 0001             		move.b	#4,1(a0)
0000B1E0 117C 0003 0018             		move.b	#3,$18(a0)
0000B1E6 117C 0008 0020             		move.b	#8,$20(a0)
0000B1EC 117C 0018 0019             		move.b	#$18,$19(a0)
0000B1F2                            
0000B1F2                            Obj22_Action:				; XREF: Obj22_Index
0000B1F2 7000                       		moveq	#0,d0
0000B1F4 1028 0025                  		move.b	$25(a0),d0
0000B1F8 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000B1FC 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000B200 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000B206 6100 0000                  		bsr.w	AnimateSprite
0000B20A 6000 0000                  		bra.w	MarkObjGone
0000B20E                            ; ===========================================================================
0000B20E 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000B210 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000B212                            ; ===========================================================================
0000B212                            
0000B212                            Obj22_Move:				; XREF: Obj22_Index2
0000B212 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B216 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B218 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B21E 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000B220 5428 0025                  		addq.b	#2,$25(a0)
0000B224 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000B22A 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000B230 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000B236 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B23C 6600                       		bne.s	locret_986C	; if not, branch
0000B23E 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B242                            
0000B242                            locret_986C:
0000B242 4E75                       		rts	
0000B244                            ; ===========================================================================
0000B244                            
0000B244                            Obj22_Fire:				; XREF: Obj22_Move
0000B244 6100 0000                  		bsr.w	SingleObjLoad
0000B248 6600                       		bne.s	locret_98D0
0000B24A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000B24E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B254 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B25A 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000B260 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000B266 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000B26C 303C 0018                  		move.w	#$18,d0
0000B270 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B276 6600                       		bne.s	loc_98AA	; if not, branch
0000B278 4440                       		neg.w	d0
0000B27A 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000B27E                            
0000B27E                            loc_98AA:
0000B27E D169 0008                  		add.w	d0,8(a1)
0000B282 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000B288 337C 000E 0032             		move.w	#$E,$32(a1)
0000B28E 2348 003C                  		move.l	a0,$3C(a1)
0000B292 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000B298 317C 003B 0032             		move.w	#$3B,$32(a0)
0000B29E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2A4                            
0000B2A4                            locret_98D0:
0000B2A4 4E75                       		rts	
0000B2A6                            ; ===========================================================================
0000B2A6                            
0000B2A6                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000B2A6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2AA 6B00                       		bmi.s	Obj22_ChgDir
0000B2AC 6100 0000                  		bsr.w	SpeedToPos
0000B2B0 4A28 0034                  		tst.b	$34(a0)
0000B2B4 6600                       		bne.s	locret_992A
0000B2B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2BA 9068 0008                  		sub.w	8(a0),d0
0000B2BE 6A00                       		bpl.s	Obj22_SetNrSonic
0000B2C0 4440                       		neg.w	d0
0000B2C2                            
0000B2C2                            Obj22_SetNrSonic:
0000B2C2 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B2C6 6400                       		bcc.s	locret_992A	; if not, branch
0000B2C8 4A28 0001                  		tst.b	1(a0)
0000B2CC 6A00                       		bpl.s	locret_992A
0000B2CE 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2D4 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B2DA 6000                       		bra.s	Obj22_Stop
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000B2DC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B2E2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B2E8 317C 003B 0032             		move.w	#59,$32(a0)
0000B2EE                            
0000B2EE                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000B2EE 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000B2F2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B2F8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B2FE                            
0000B2FE                            locret_992A:
0000B2FE 4E75                       		rts	
0000B300                            ; ===========================================================================
0000B300                            
0000B300                            Obj22_Delete:				; XREF: Obj22_Index
0000B300 6100 0000                  		bsr.w	DeleteObject
0000B304 4E75                       		rts	
0000B306                            ; ===========================================================================
0000B306                            ; ---------------------------------------------------------------------------
0000B306                            ; Object 23 - missile that Buzz	Bomber throws
0000B306                            ; ---------------------------------------------------------------------------
0000B306                            
0000B306                            Obj23:					; XREF: Obj_Index
0000B306 7000                       		moveq	#0,d0
0000B308 1028 0024                  		move.b	$24(a0),d0
0000B30C 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000B310 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000B314                            ; ===========================================================================
0000B314 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000B316 0000                       		dc.w Obj23_Animate-Obj23_Index
0000B318 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000B31A 0000                       		dc.w Obj23_Delete-Obj23_Index
0000B31C 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000B31E                            ; ===========================================================================
0000B31E                            
0000B31E                            Obj23_Main:				; XREF: Obj23_Index
0000B31E 5368 0032                  		subq.w	#1,$32(a0)
0000B322 6A00                       		bpl.s	Obj23_ChkCancel
0000B324 5428 0024                  		addq.b	#2,$24(a0)
0000B328 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000B330 317C 2444 0002             		move.w	#$2444,2(a0)
0000B336 117C 0004 0001             		move.b	#4,1(a0)
0000B33C 117C 0003 0018             		move.b	#3,$18(a0)
0000B342 117C 0008 0019             		move.b	#8,$19(a0)
0000B348 0228 0003 0022             		andi.b	#3,$22(a0)
0000B34E 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000B352 6700                       		beq.s	Obj23_Animate	; if not, branch
0000B354 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000B35A 117C 0087 0020             		move.b	#$87,$20(a0)
0000B360 117C 0001 001C             		move.b	#1,$1C(a0)
0000B366 6000                       		bra.s	Obj23_Animate2
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            Obj23_Animate:				; XREF: Obj23_Index
0000B368 6100                       		bsr.s	Obj23_ChkCancel
0000B36A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B370 6100 0000                  		bsr.w	AnimateSprite
0000B374 6000 0000                  		bra.w	DisplaySprite
0000B378                            ; ---------------------------------------------------------------------------
0000B378                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B378                            ; destroyed, and if it has, then cancel	the missile
0000B378                            ; ---------------------------------------------------------------------------
0000B378                            
0000B378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B378                            
0000B378                            
0000B378                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000B378 2268 003C                  		movea.l	$3C(a0),a1
0000B37C 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000B380 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000B382 4E75                       		rts	
0000B384                            ; End of function Obj23_ChkCancel
0000B384                            
0000B384                            ; ===========================================================================
0000B384                            
0000B384                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000B384 0828 0007 0022             		btst	#7,$22(a0)
0000B38A 6600                       		bne.s	Obj23_Explode
0000B38C 117C 0087 0020             		move.b	#$87,$20(a0)
0000B392 117C 0001 001C             		move.b	#1,$1C(a0)
0000B398 6100 0000                  		bsr.w	SpeedToPos
0000B39C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3A2 6100 0000                  		bsr.w	AnimateSprite
0000B3A6 6100 0000                  		bsr.w	DisplaySprite
0000B3AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B3AE 0640 00E0                  		addi.w	#$E0,d0
0000B3B2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000B3B6 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000B3B8 4E75                       		rts	
0000B3BA                            ; ===========================================================================
0000B3BA                            
0000B3BA                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000B3BA 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000B3BE 117C 0000 0024             		move.b	#0,$24(a0)
0000B3C4 6000 F30A                  		bra.w	Obj24
0000B3C8                            ; ===========================================================================
0000B3C8                            
0000B3C8                            Obj23_Delete:				; XREF: Obj23_Index
0000B3C8 6100 0000                  		bsr.w	DeleteObject
0000B3CC 4E75                       		rts	
0000B3CE                            ; ===========================================================================
0000B3CE                            
0000B3CE                            Obj23_FromNewt:				; XREF: Obj23_Index
0000B3CE 4A28 0001                  		tst.b	1(a0)
0000B3D2 6AF4                       		bpl.s	Obj23_Delete
0000B3D4 6100 0000                  		bsr.w	SpeedToPos
0000B3D8                            
0000B3D8                            Obj23_Animate2:				; XREF: Obj23_Main
0000B3D8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000B3DE 6100 0000                  		bsr.w	AnimateSprite
0000B3E2 6100 0000                  		bsr.w	DisplaySprite
0000B3E6 4E75                       		rts	
0000B3E8                            ; ===========================================================================
0000B3E8                            Ani_obj22:
0000B3E8                            	include "_anim\obj22.asm"
0000B3E8                            ; ---------------------------------------------------------------------------
0000B3E8                            ; Animation script - Buzz Bomber enemy
0000B3E8                            ; ---------------------------------------------------------------------------
0000B3E8 0000                       		dc.w byte_9A1E-Ani_obj22
0000B3EA 0000                       		dc.w byte_9A22-Ani_obj22
0000B3EC 0000                       		dc.w byte_9A26-Ani_obj22
0000B3EE 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B3F2 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B3F6 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000B3FA                            		even
0000B3FA                            		even
0000B3FA                            
0000B3FA                            Ani_obj23:
0000B3FA                            	include "_anim\obj23.asm"
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA                            ; Animation script - missile that Buzz Bomber throws
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA 0000                       		dc.w byte_9A2E-Ani_obj23
0000B3FC 0000                       		dc.w byte_9A32-Ani_obj23
0000B3FE 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000B402 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000B406                            		even
0000B406                            		even
0000B406                            
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            ; Sprite mappings - Buzz Bomber	enemy
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            Map_obj22:
0000B406                            	include "_maps\obj22.asm"
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            ; Sprite mappings - Buzz Bomber	enemy
0000B406                            ; ---------------------------------------------------------------------------
0000B406 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000B40A 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000B40E 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000B412 06                         byte_9A42:	dc.b 6
0000B413 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B418 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B41D 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B422 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B427 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B42C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B431 06                         byte_9A61:	dc.b 6
0000B432 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B437 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B43C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B441 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B446 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B44B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B450 07                         byte_9A80:	dc.b 7
0000B451 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000B456 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B45B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B460 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B465 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B46A F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B46F F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B474 07                         byte_9AA4:	dc.b 7
0000B475 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000B47A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000B47F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000B484 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000B489 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B48E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B493 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B498 06                         byte_9AC8:	dc.b 6
0000B499 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B49E 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4A3 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4A8 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4AD F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B4B2 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B4B7 04                         byte_9AE7:	dc.b 4
0000B4B8 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B4BD 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B4C2 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B4C7 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B4CC F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B4D1 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B4D6                            		even
0000B4D6                            		even
0000B4D6                            
0000B4D6                            ; ---------------------------------------------------------------------------
0000B4D6                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4D6                            ; ---------------------------------------------------------------------------
0000B4D6                            Map_obj23:
0000B4D6                            	include "_maps\obj23.asm"
0000B4D6                            ; ---------------------------------------------------------------------------
0000B4D6                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4D6                            ; ---------------------------------------------------------------------------
0000B4D6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B4DA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B4DE 01                         byte_9B0E:	dc.b 1
0000B4DF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B4E4 01                         byte_9B14:	dc.b 1
0000B4E5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B4EA 01                         byte_9B1A:	dc.b 1
0000B4EB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B4F0 01                         byte_9B20:	dc.b 1
0000B4F1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B4F6                            		even
0000B4F6                            		even
0000B4F6                            
0000B4F6                            ; ===========================================================================
0000B4F6                            ; ---------------------------------------------------------------------------
0000B4F6                            ; Object 25 - rings
0000B4F6                            ; ---------------------------------------------------------------------------
0000B4F6                            
0000B4F6                            Obj25:					; XREF: Obj_Index
0000B4F6 7000                       		moveq	#0,d0
0000B4F8 1028 0024                  		move.b	$24(a0),d0
0000B4FC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B500 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B504                            ; ===========================================================================
0000B504 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B506 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B508 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B50A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B50C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B50E                            ; ---------------------------------------------------------------------------
0000B50E                            ; Distances between rings (format: horizontal, vertical)
0000B50E                            ; ---------------------------------------------------------------------------
0000B50E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000B510 1800                       		dc.b $18, 0		; horizontal normal
0000B512 2000                       		dc.b $20, 0		; horizontal wide
0000B514 0010                       		dc.b 0,	$10		; vertical tight
0000B516 0018                       		dc.b 0,	$18		; vertical normal
0000B518 0020                       		dc.b 0,	$20		; vertical wide
0000B51A 1010                       		dc.b $10, $10		; diagonal
0000B51C 1818                       		dc.b $18, $18
0000B51E 2020                       		dc.b $20, $20
0000B520 F010                       		dc.b $F0, $10
0000B522 E818                       		dc.b $E8, $18
0000B524 E020                       		dc.b $E0, $20
0000B526 1008                       		dc.b $10, 8
0000B528 1810                       		dc.b $18, $10
0000B52A F008                       		dc.b $F0, 8
0000B52C E810                       		dc.b $E8, $10
0000B52E                            ; ===========================================================================
0000B52E                            
0000B52E                            Obj25_Main:				; XREF: Obj25_Index
0000B52E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B532 7000                       		moveq	#0,d0
0000B534 1028 0023                  		move.b	$23(a0),d0
0000B538 45F2 0002                  		lea	2(a2,d0.w),a2
0000B53C 1812                       		move.b	(a2),d4
0000B53E 1228 0028                  		move.b	$28(a0),d1
0000B542 1001                       		move.b	d1,d0
0000B544 0241 0007                  		andi.w	#7,d1
0000B548 0C41 0007                  		cmpi.w	#7,d1
0000B54C 6600                       		bne.s	loc_9B80
0000B54E 7206                       		moveq	#6,d1
0000B550                            
0000B550                            loc_9B80:
0000B550 4841                       		swap	d1
0000B552 323C 0000                  		move.w	#0,d1
0000B556 E808                       		lsr.b	#4,d0
0000B558 D040                       		add.w	d0,d0
0000B55A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000B55E 4885                       		ext.w	d5
0000B560 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000B564 4886                       		ext.w	d6
0000B566 2248                       		movea.l	a0,a1
0000B568 3428 0008                  		move.w	8(a0),d2
0000B56C 3628 000C                  		move.w	$C(a0),d3
0000B570 E20C                       		lsr.b	#1,d4
0000B572 6500                       		bcs.s	loc_9C02
0000B574 0892 0007                  		bclr	#7,(a2)
0000B578 6000                       		bra.s	loc_9BBA
0000B57A                            ; ===========================================================================
0000B57A                            
0000B57A                            Obj25_MakeRings:
0000B57A 4841                       		swap	d1
0000B57C E20C                       		lsr.b	#1,d4
0000B57E 6500                       		bcs.s	loc_9C02
0000B580 0892 0007                  		bclr	#7,(a2)
0000B584 6100 0000                  		bsr.w	SingleObjLoad
0000B588 6600                       		bne.s	loc_9C0E
0000B58A                            
0000B58A                            loc_9BBA:				; XREF: Obj25_Main
0000B58A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000B58E 5429 0024                  		addq.b	#2,$24(a1)
0000B592 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000B596 3368 0008 0032             		move.w	8(a0),$32(a1)
0000B59C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000B5A0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B5A8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B5AE 137C 0004 0001             		move.b	#4,1(a1)
0000B5B4 137C 0002 0018             		move.b	#2,$18(a1)
0000B5BA 137C 0047 0020             		move.b	#$47,$20(a1)
0000B5C0 137C 0008 0019             		move.b	#8,$19(a1)
0000B5C6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000B5CC 1341 0034                  		move.b	d1,$34(a1)
0000B5D0                            
0000B5D0                            loc_9C02:
0000B5D0 5241                       		addq.w	#1,d1
0000B5D2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B5D4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B5D6 4841                       		swap	d1
0000B5D8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000B5DC                            
0000B5DC                            loc_9C0E:
0000B5DC 0812 0000                  		btst	#0,(a2)
0000B5E0 6600 0000                  		bne.w	DeleteObject
0000B5E4                            
0000B5E4                            Obj25_Animate:				; XREF: Obj25_Index
0000B5E4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000B5EA 6100 0000                  		bsr.w	DisplaySprite
0000B5EE 3028 0032                  		move.w	$32(a0),d0
0000B5F2 0240 FF80                  		andi.w	#$FF80,d0
0000B5F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5FA 0441 0080                  		subi.w	#$80,d1
0000B5FE 0241 FF80                  		andi.w	#$FF80,d1
0000B602 9041                       		sub.w	d1,d0
0000B604 0C40 0280                  		cmpi.w	#$280,d0
0000B608 6200                       		bhi.s	Obj25_Delete
0000B60A 4E75                       		rts	
0000B60C                            ; ===========================================================================
0000B60C                            
0000B60C                            Obj25_Collect:				; XREF: Obj25_Index
0000B60C 5428 0024                  		addq.b	#2,$24(a0)
0000B610 117C 0000 0020             		move.b	#0,$20(a0)
0000B616 117C 0001 0018             		move.b	#1,$18(a0)
0000B61C 6100 0000                  		bsr.w	CollectRing
0000B620 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B624 7000                       		moveq	#0,d0
0000B626 1028 0023                  		move.b	$23(a0),d0
0000B62A 1228 0034                  		move.b	$34(a0),d1
0000B62E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B632                            
0000B632                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B632 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B638 6100 0000                  		bsr.w	AnimateSprite
0000B63C 6000 0000                  		bra.w	DisplaySprite
0000B640                            ; ===========================================================================
0000B640                            
0000B640                            Obj25_Delete:				; XREF: Obj25_Index
0000B640 6000 0000                  		bra.w	DeleteObject
0000B644                            
0000B644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B644                            
0000B644                            
0000B644                            CollectRing:				; XREF: Obj25_Collect
0000B644 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B648 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B64E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B652 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B658 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B65A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B660 6700                       		beq.s	loc_9CA4
0000B662 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B668 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B66A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B670 6600                       		bne.s	Obj25_PlaySnd
0000B672                            
0000B672                            loc_9CA4:
0000B672 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B676 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B67A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B67E                            
0000B67E                            Obj25_PlaySnd:
0000B67E 4EF9 0000 12CE             		jmp	(PlaySound_Special).l
0000B684                            ; End of function CollectRing
0000B684                            
0000B684                            ; ===========================================================================
0000B684                            ; ---------------------------------------------------------------------------
0000B684                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B684                            ; ---------------------------------------------------------------------------
0000B684                            
0000B684                            Obj37:					; XREF: Obj_Index
0000B684 7000                       		moveq	#0,d0
0000B686 1028 0024                  		move.b	$24(a0),d0
0000B68A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B68E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B692                            ; ===========================================================================
0000B692 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B694 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B696 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B698 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B69A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            Obj37_CountRings:			; XREF: Obj37_Index
0000B69C 2248                       		movea.l	a0,a1
0000B69E 7A00                       		moveq	#0,d5
0000B6A0 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B6A4 7020                       		moveq	#32,d0
0000B6A6 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B6A8 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B6AA 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B6AC                            
0000B6AC                            loc_9CDE:
0000B6AC 5345                       		subq.w	#1,d5
0000B6AE 383C 0288                  		move.w	#$288,d4
0000B6B2 6000                       		bra.s	Obj37_MakeRings
0000B6B4                            ; ===========================================================================
0000B6B4                            
0000B6B4                            Obj37_Loop:
0000B6B4 6100 0000                  		bsr.w	SingleObjLoad
0000B6B8 6600 0000                  		bne.w	Obj37_ResetCounter
0000B6BC                            
0000B6BC                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B6BC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B6C0 5429 0024                  		addq.b	#2,$24(a1)
0000B6C4 137C 0008 0016             		move.b	#8,$16(a1)
0000B6CA 137C 0008 0017             		move.b	#8,$17(a1)
0000B6D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B6DC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B6E4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000B6EA 137C 0004 0001             		move.b	#4,1(a1)
0000B6F0 137C 0003 0018             		move.b	#3,$18(a1)
0000B6F6 137C 0047 0020             		move.b	#$47,$20(a1)
0000B6FC 137C 0008 0019             		move.b	#8,$19(a1)
0000B702 4A44                       		tst.w	d4
0000B704 6B00                       		bmi.s	loc_9D62
0000B706 3004                       		move.w	d4,d0
0000B708 4EB8 2B7A                  		jsr	CalcSine
0000B70C 3404                       		move.w	d4,d2
0000B70E E04A                       		lsr.w	#8,d2
0000B710 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B714 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B716 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B71A BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B71E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B720 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B722 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B724                            
0000B724                            @skiphalvingvel:
0000B724 E560                       		asl.w	d2,d0
0000B726 E561                       		asl.w	d2,d1
0000B728 3400                       		move.w	d0,d2
0000B72A 3601                       		move.w	d1,d3
0000B72C 0604 0010                  		addi.b	#$10,d4
0000B730 6400                       		bcc.s	loc_9D62
0000B732 0444 0080                  		subi.w	#$80,d4
0000B736 6400                       		bcc.s	loc_9D62
0000B738 383C 0288                  		move.w	#$288,d4
0000B73C                            
0000B73C                            loc_9D62:
0000B73C 3342 0010                  		move.w	d2,$10(a1)
0000B740 3343 0012                  		move.w	d3,$12(a1)
0000B744 4442                       		neg.w	d2
0000B746 4444                       		neg.w	d4
0000B748 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B74C                            
0000B74C                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B74C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B752 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B758 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B75E 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B760 1140 001F                          move.b  d0,$1F(a0)       ; Move d0 to new timer
0000B764 11C0 FEC6                          move.b  d0,($FFFFFEC6).w      ; Move d0 to old timer (for animated purposes)
0000B768 303C 00C6                  		move.w	#$C6,d0
0000B76C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B772                            
0000B772                            Obj37_Bounce:				; XREF: Obj37_Index
0000B772 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B778 6100 0000                  		bsr.w	SpeedToPos
0000B77C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B782 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B786 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B788 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B78C BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000B790 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B792 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B798                            
0000B798                            @skipbounceslow:
0000B798 6B00                       		bmi.s	Obj37_ChkDel
0000B79A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B79E D007                       		add.b	d7,d0
0000B7A0 0200 0003                  		andi.b	#3,d0
0000B7A4 6600                       		bne.s	Obj37_ChkDel
0000B7A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B7AC 4A41                       		tst.w	d1
0000B7AE 6A00                       		bpl.s	Obj37_ChkDel
0000B7B0 D368 000C                  		add.w	d1,$C(a0)
0000B7B4 3028 0012                  		move.w	$12(a0),d0
0000B7B8 E440                       		asr.w	#2,d0
0000B7BA 9168 0012                  		sub.w	d0,$12(a0)
0000B7BE 4468 0012                  		neg.w	$12(a0)
0000B7C2                            
0000B7C2                            Obj37_ChkDel:
0000B7C2 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B7C6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B7CA 0C78 FF00 F72C                     cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B7D0 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B7D4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B7D8 0640 00E0                  		addi.w	#$E0,d0
0000B7DC B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000B7E0 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000B7E2                            ;Mercury Lost Rings Flash
0000B7E2 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000B7E8 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000B7EC 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000B7F2 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000B7F6 4E75                       		rts
0000B7F8                            ;end Lost Rings Flash
0000B7F8                            ; ===========================================================================
0000B7F8                            
0000B7F8                            Obj37_Collect:				; XREF: Obj37_Index
0000B7F8 5428 0024                  		addq.b	#2,$24(a0)
0000B7FC 117C 0000 0020             		move.b	#0,$20(a0)
0000B802 117C 0001 0018             		move.b	#1,$18(a0)
0000B808 6100 FE3A                  		bsr.w	CollectRing
0000B80C                            
0000B80C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B80C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B812 6100 0000                  		bsr.w	AnimateSprite
0000B816 6000 0000                  		bra.w	DisplaySprite
0000B81A                            ; ===========================================================================
0000B81A                            
0000B81A                            Obj37_Delete:				; XREF: Obj37_Index
0000B81A 6000 0000                  		bra.w	DeleteObject
0000B81E                            ; ===========================================================================
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            ; Object 4B - giant ring for entry to special stage
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            
0000B81E                            Obj4B:					; XREF: Obj_Index
0000B81E 7000                       		moveq	#0,d0
0000B820 1028 0024                  		move.b	$24(a0),d0
0000B824 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B828 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B82C                            ; ===========================================================================
0000B82C 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B82E 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B830 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B832 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B834                            ; ===========================================================================
0000B834                            
0000B834                            Obj4B_Main:				; XREF: Obj4B_Index
0000B834 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B83C 317C 2400 0002             		move.w	#$2400,2(a0)
0000B842 0028 0004 0001             		ori.b	#4,1(a0)
0000B848 117C 0040 0019             		move.b	#$40,$19(a0)
0000B84E 4A28 0001                  		tst.b	1(a0)
0000B852 6A00                       		bpl.s	Obj4B_Animate
0000B854 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B85A 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B85E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B864 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B866 4E75                       		rts	
0000B868                            ; ===========================================================================
0000B868                            
0000B868                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B868 5428 0024                  		addq.b	#2,$24(a0)
0000B86C 117C 0002 0018             		move.b	#2,$18(a0)
0000B872 117C 0052 0020             		move.b	#$52,$20(a0)
0000B878 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B87E                            
0000B87E                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B87E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B884 3028 0008                  		move.w	8(a0),d0
0000B888 0240 FF80                  		andi.w	#$FF80,d0
0000B88C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B890 0441 0080                  		subi.w	#$80,d1
0000B894 0241 FF80                  		andi.w	#$FF80,d1
0000B898 9041                       		sub.w	d1,d0
0000B89A 0C40 0280                  		cmpi.w	#$280,d0
0000B89E 6200 0000                  		bhi.w	DeleteObject
0000B8A2 6000 0000                  		bra.w	DisplaySprite
0000B8A6                            ; ===========================================================================
0000B8A6                            
0000B8A6                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B8A6 5528 0024                  		subq.b	#2,$24(a0)
0000B8AA 117C 0000 0020             		move.b	#0,$20(a0)
0000B8B0 6100 0000                  		bsr.w	SingleObjLoad
0000B8B4 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B8B8 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B8BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B8C8 2348 003C                  		move.l	a0,$3C(a1)
0000B8CC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B8D0 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B8D4 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B8D6 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B8DC                            
0000B8DC                            Obj4B_PlaySnd:
0000B8DC 303C 00C3                  		move.w	#$C3,d0
0000B8E0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B8E6 6096                       		bra.s	Obj4B_Animate
0000B8E8                            ; ===========================================================================
0000B8E8                            
0000B8E8                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B8E8 6000 0000                  		bra.w	DeleteObject
0000B8EC                            ; ===========================================================================
0000B8EC                            ; ---------------------------------------------------------------------------
0000B8EC                            ; Object 7C - flash effect when	you collect the	giant ring
0000B8EC                            ; ---------------------------------------------------------------------------
0000B8EC                            
0000B8EC                            Obj7C:					; XREF: Obj_Index
0000B8EC 7000                       		moveq	#0,d0
0000B8EE 1028 0024                  		move.b	$24(a0),d0
0000B8F2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B8F6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B8FA                            ; ===========================================================================
0000B8FA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B8FC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B8FE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B900                            ; ===========================================================================
0000B900                            
0000B900                            Obj7C_Main:				; XREF: Obj7C_Index
0000B900 5428 0024                  		addq.b	#2,$24(a0)
0000B904 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B90C 317C 2462 0002             		move.w	#$2462,2(a0)
0000B912 0028 0004 0001             		ori.b	#4,1(a0)
0000B918 117C 0000 0018             		move.b	#0,$18(a0)
0000B91E 117C 0020 0019             		move.b	#$20,$19(a0)
0000B924 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B92A                            
0000B92A                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B92A 6100                       		bsr.s	Obj7C_Collect
0000B92C 3028 0008                  		move.w	8(a0),d0
0000B930 0240 FF80                  		andi.w	#$FF80,d0
0000B934 3238 F700                  		move.w	($FFFFF700).w,d1
0000B938 0441 0080                  		subi.w	#$80,d1
0000B93C 0241 FF80                  		andi.w	#$FF80,d1
0000B940 9041                       		sub.w	d1,d0
0000B942 0C40 0280                  		cmpi.w	#$280,d0
0000B946 6200 0000                  		bhi.w	DeleteObject
0000B94A 6000 0000                  		bra.w	DisplaySprite
0000B94E                            
0000B94E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B94E                            
0000B94E                            
0000B94E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B94E 5328 001E                  		subq.b	#1,$1E(a0)
0000B952 6A00                       		bpl.s	locret_9F76
0000B954 117C 0001 001E             		move.b	#1,$1E(a0)
0000B95A 5228 001A                  		addq.b	#1,$1A(a0)
0000B95E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B964 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B966 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B96C 6600                       		bne.s	locret_9F76	; if not, branch
0000B96E 2268 003C                  		movea.l	$3C(a0),a1
0000B972 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B978 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B97E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B984 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B988 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B98C                            
0000B98C                            locret_9F76:
0000B98C 4E75                       		rts	
0000B98E                            ; ===========================================================================
0000B98E                            
0000B98E                            Obj7C_End:				; XREF: Obj7C_Collect
0000B98E 5428 0024                  		addq.b	#2,$24(a0)
0000B992 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B998 588F                       		addq.l	#4,sp
0000B99A 4E75                       		rts	
0000B99C                            ; End of function Obj7C_Collect
0000B99C                            
0000B99C                            ; ===========================================================================
0000B99C                            
0000B99C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B99C 6000 0000                  		bra.w	DeleteObject
0000B9A0                            ; ===========================================================================
0000B9A0                            Ani_obj25:
0000B9A0                            	include "_anim\obj25.asm"
0000B9A0                            ; ---------------------------------------------------------------------------
0000B9A0                            ; Animation script - ring
0000B9A0                            ; ---------------------------------------------------------------------------
0000B9A0 0000                       		dc.w byte_9F8C-Ani_obj25
0000B9A2 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B9A8                            		even
0000B9A8                            		even
0000B9A8                            
0000B9A8                            ; ---------------------------------------------------------------------------
0000B9A8                            ; Sprite mappings - rings
0000B9A8                            ; ---------------------------------------------------------------------------
0000B9A8                            Map_obj25:
0000B9A8                            	include "_maps\obj25.asm"
0000B9A8                            ; ---------------------------------------------------------------------------
0000B9A8                            ; Sprite mappings - rings
0000B9A8                            ; ---------------------------------------------------------------------------
0000B9A8 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B9AC 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B9B0 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B9B4 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B9B8 01                         byte_9FA2:	dc.b 1
0000B9B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B9BE 01                         byte_9FA8:	dc.b 1
0000B9BF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B9C4 01                         byte_9FAE:	dc.b 1
0000B9C5 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B9CA 01                         byte_9FB4:	dc.b 1
0000B9CB F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B9D0 01                         byte_9FBA:	dc.b 1
0000B9D1 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B9D6 01                         byte_9FC0:	dc.b 1
0000B9D7 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B9DC 01                         byte_9FC6:	dc.b 1
0000B9DD F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B9E2 01                         byte_9FCC:	dc.b 1
0000B9E3 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B9E8                            		even
0000B9E8                            		even
0000B9E8                            
0000B9E8                            ; ---------------------------------------------------------------------------
0000B9E8                            ; Sprite mappings - giant ring
0000B9E8                            ; ---------------------------------------------------------------------------
0000B9E8                            Map_obj4B:
0000B9E8                            	include "_maps\obj4B.asm"
0000B9E8                            ; ---------------------------------------------------------------------------
0000B9E8                            ; Sprite mappings - giant ring
0000B9E8                            ; ---------------------------------------------------------------------------
0000B9E8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B9EC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B9F0 0A                         byte_9FDA:	dc.b $A
0000B9F1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B9F6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B9FB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BA00 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BA05 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BA0A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BA0F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BA14 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BA19 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BA1E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BA23 08                         byte_A00D:	dc.b 8
0000BA24 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000BA29 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BA2E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BA33 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BA38 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BA3D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BA42 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BA47 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BA4C 04                         byte_A036:	dc.b 4
0000BA4D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000BA52 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BA57 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BA5C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BA61 08                         byte_A04B:	dc.b 8
0000BA62 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000BA67 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BA6C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BA71 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BA76 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BA7B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BA80 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BA85 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BA8A                            		even
0000BA8A                            		even
0000BA8A                            
0000BA8A                            ; ---------------------------------------------------------------------------
0000BA8A                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA8A                            ; ---------------------------------------------------------------------------
0000BA8A                            Map_obj7C:
0000BA8A                            	include "_maps\obj7C.asm"
0000BA8A                            ; ---------------------------------------------------------------------------
0000BA8A                            ; Sprite mappings - flash effect when you collect the giant ring
0000BA8A                            ; ---------------------------------------------------------------------------
0000BA8A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000BA8E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000BA92 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000BA96 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000BA9A 02                         byte_A084:	dc.b 2
0000BA9B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BAA0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BAA5 04                         byte_A08F:	dc.b 4
0000BAA6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BAAB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BAB0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BAB5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BABA 04                         byte_A0A4:	dc.b 4
0000BABB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BAC0 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BAC5 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BACA 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BACF 04                         byte_A0B9:	dc.b 4
0000BAD0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BAD5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BADA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BADF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BAE4 04                         byte_A0CE:	dc.b 4
0000BAE5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BAEA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BAEF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BAF4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BAF9 04                         byte_A0E3:	dc.b 4
0000BAFA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BAFF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BB04 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BB09 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BB0E 02                         byte_A0F8:	dc.b 2
0000BB0F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BB14 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BB19 04                         byte_A103:	dc.b 4
0000BB1A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BB1F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BB24 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BB29 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BB2E                            		even
0000BB2E                            		even
0000BB2E                            
0000BB2E                            ; ===========================================================================
0000BB2E                            ; ---------------------------------------------------------------------------
0000BB2E                            ; Object 26 - monitors
0000BB2E                            ; ---------------------------------------------------------------------------
0000BB2E                            
0000BB2E                            Obj26:					; XREF: Obj_Index
0000BB2E 7000                       		moveq	#0,d0
0000BB30 1028 0024                  		move.b	$24(a0),d0
0000BB34 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000BB38 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000BB3C                            ; ===========================================================================
0000BB3C 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000BB3E 0000                       		dc.w Obj26_Solid-Obj26_Index
0000BB40 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000BB42 0000                       		dc.w Obj26_Animate-Obj26_Index
0000BB44 0000                       		dc.w Obj26_Display-Obj26_Index
0000BB46                            ; ===========================================================================
0000BB46                            
0000BB46                            Obj26_Main:				; XREF: Obj26_Index
0000BB46 5428 0024                  		addq.b	#2,$24(a0)
0000BB4A 117C 000E 0016             		move.b	#$E,$16(a0)
0000BB50 117C 000E 0017             		move.b	#$E,$17(a0)
0000BB56 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000BB5E 317C 0680 0002             		move.w	#$680,2(a0)
0000BB64 117C 0004 0001             		move.b	#4,1(a0)
0000BB6A 117C 0003 0018             		move.b	#3,$18(a0)
0000BB70 117C 000F 0019             		move.b	#$F,$19(a0)
0000BB76 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BB7A 7000                       		moveq	#0,d0
0000BB7C 1028 0023                  		move.b	$23(a0),d0
0000BB80 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BB86 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BB8C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000BB8E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000BB94 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000BB9A 4E75                       		rts	
0000BB9C                            ; ===========================================================================
0000BB9C                            
0000BB9C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000BB9C 117C 0046 0020             		move.b	#$46,$20(a0)
0000BBA2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000BBA8                            
0000BBA8                            Obj26_Solid:				; XREF: Obj26_Index
0000BBA8 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000BBAC 6700                       		beq.s	loc_A1EC	; if not, branch
0000BBAE 5500                       		subq.b	#2,d0
0000BBB0 6600                       		bne.s	Obj26_Fall
0000BBB2 7200                       		moveq	#0,d1
0000BBB4 1228 0019                  		move.b	$19(a0),d1
0000BBB8 0641 000B                  		addi.w	#$B,d1
0000BBBC 6100 D3F2                  		bsr.w	ExitPlatform
0000BBC0 0829 0003 0022             		btst	#3,$22(a1)
0000BBC6 6600 0000                  		bne.w	loc_A1BC
0000BBCA 4228 0025                  		clr.b	$25(a0)
0000BBCE 6000 0000                  		bra.w	Obj26_Animate
0000BBD2                            ; ===========================================================================
0000BBD2                            
0000BBD2                            loc_A1BC:				; XREF: Obj26_Solid
0000BBD2 363C 0010                  		move.w	#$10,d3
0000BBD6 3428 0008                  		move.w	8(a0),d2
0000BBDA 6100 D932                  		bsr.w	MvSonicOnPtfm
0000BBDE 6000 0000                  		bra.w	Obj26_Animate
0000BBE2                            ; ===========================================================================
0000BBE2                            
0000BBE2                            Obj26_Fall:				; XREF: Obj26_Solid
0000BBE2 6100 0000                  		bsr.w	ObjectFall
0000BBE6 4EB9 0000 0000             		jsr	ObjHitFloor
0000BBEC 4A41                       		tst.w	d1
0000BBEE 6A00 0000                  		bpl.w	Obj26_Animate
0000BBF2 D368 000C                  		add.w	d1,$C(a0)
0000BBF6 4268 0012                  		clr.w	$12(a0)
0000BBFA 4228 0025                  		clr.b	$25(a0)
0000BBFE 6000 0000                  		bra.w	Obj26_Animate
0000BC02                            ; ===========================================================================
0000BC02                            
0000BC02                            loc_A1EC:				; XREF: Obj26_Solid
0000BC02 323C 001A                  		move.w	#$1A,d1
0000BC06 343C 000F                  		move.w	#$F,d2
0000BC0A 6100 0000                  		bsr.w	Obj26_SolidSides
0000BC0E 6700 0000                  		beq.w	loc_A25C
0000BC12 4A29 003A                  		tst.b	$3A(a1)
0000BC16 6600                       		bne.s	loc_A25C
0000BC18 4A41                       		tst.w	d1
0000BC1A 6A00                       		bpl.s	loc_A220
0000BC1C 9769 000C                  		sub.w	d3,$C(a1)
0000BC20 6100 D27C                  		bsr.w	loc_74AE
0000BC24 117C 0002 0025             		move.b	#2,$25(a0)
0000BC2A 6000 0000                  		bra.w	Obj26_Animate
0000BC2E                            ; ===========================================================================
0000BC2E                            
0000BC2E                            loc_A220:
0000BC2E 4A40                       		tst.w	d0
0000BC30 6700 0000                  		beq.w	loc_A246
0000BC34 6B00                       		bmi.s	loc_A230
0000BC36 4A69 0010                  		tst.w	$10(a1)
0000BC3A 6B00                       		bmi.s	loc_A246
0000BC3C 6000                       		bra.s	loc_A236
0000BC3E                            ; ===========================================================================
0000BC3E                            
0000BC3E                            loc_A230:
0000BC3E 4A69 0010                  		tst.w	$10(a1)
0000BC42 6A00                       		bpl.s	loc_A246
0000BC44                            
0000BC44                            loc_A236:
0000BC44 9169 0008                  		sub.w	d0,8(a1)
0000BC48 337C 0000 0014             		move.w	#0,$14(a1)
0000BC4E 337C 0000 0010             		move.w	#0,$10(a1)
0000BC54                            
0000BC54                            loc_A246:
0000BC54 0829 0001 0022             		btst	#1,$22(a1)
0000BC5A 6600                       		bne.s	loc_A26A
0000BC5C 08E9 0005 0022             		bset	#5,$22(a1)
0000BC62 08E8 0005 0022             		bset	#5,$22(a0)
0000BC68 6000                       		bra.s	Obj26_Animate
0000BC6A                            ; ===========================================================================
0000BC6A                            
0000BC6A                            loc_A25C:
0000BC6A 0828 0005 0022             		btst	#5,$22(a0)
0000BC70 6700                       		beq.s	Obj26_Animate
0000BC72 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000BC78 6700                       		beq.s	loc_A26A
0000BC7A 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000BC80 6700                       		beq.s	loc_A26A
0000BC82 337C 0001 001C             		move.w	#1,$1C(a1)
0000BC88                            
0000BC88                            loc_A26A:
0000BC88 08A8 0005 0022             		bclr	#5,$22(a0)
0000BC8E 08A9 0005 0022             		bclr	#5,$22(a1)
0000BC94                            
0000BC94                            Obj26_Animate:				; XREF: Obj26_Index
0000BC94 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000BC9A 6100 0000                  		bsr.w	AnimateSprite
0000BC9E                            
0000BC9E                            Obj26_Display:				; XREF: Obj26_Index
0000BC9E 6100 0000                  		bsr.w	DisplaySprite
0000BCA2 3028 0008                  		move.w	8(a0),d0
0000BCA6 0240 FF80                  		andi.w	#$FF80,d0
0000BCAA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCAE 0441 0080                  		subi.w	#$80,d1
0000BCB2 0241 FF80                  		andi.w	#$FF80,d1
0000BCB6 9041                       		sub.w	d1,d0
0000BCB8 0C40 0280                  		cmpi.w	#$280,d0
0000BCBC 6200 0000                  		bhi.w	DeleteObject
0000BCC0 4E75                       		rts	
0000BCC2                            ; ===========================================================================
0000BCC2                            
0000BCC2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000BCC2 5428 0024                  		addq.b	#2,$24(a0)
0000BCC6 117C 0000 0020             		move.b	#0,$20(a0)
0000BCCC 6100 0000                  		bsr.w	SingleObjLoad
0000BCD0 6600                       		bne.s	Obj26_Explode
0000BCD2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000BCD6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCDC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCE2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000BCE8                            
0000BCE8                            Obj26_Explode:
0000BCE8 6100 0000                  		bsr.w	SingleObjLoad
0000BCEC 6600                       		bne.s	Obj26_SetBroken
0000BCEE 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000BCF2 5429 0024                  		addq.b	#2,$24(a1)
0000BCF6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BCFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BD02                            
0000BD02                            Obj26_SetBroken:
0000BD02 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BD06 7000                       		moveq	#0,d0
0000BD08 1028 0023                  		move.b	$23(a0),d0
0000BD0C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BD12 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000BD18 6000 0000                  		bra.w	DisplaySprite
0000BD1C                            ; ===========================================================================
0000BD1C                            ; ---------------------------------------------------------------------------
0000BD1C                            ; Object 2E - contents of monitors
0000BD1C                            ; ---------------------------------------------------------------------------
0000BD1C                            
0000BD1C                            Obj2E:					; XREF: Obj_Index
0000BD1C 7000                       		moveq	#0,d0
0000BD1E 1028 0024                  		move.b	$24(a0),d0
0000BD22 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000BD26 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000BD2A 6000 0000                  		bra.w	DisplaySprite
0000BD2E                            ; ===========================================================================
0000BD2E 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000BD30 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000BD32 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000BD34                            ; ===========================================================================
0000BD34                            
0000BD34                            Obj2E_Main:				; XREF: Obj2E_Index
0000BD34 5428 0024                  		addq.b	#2,$24(a0)
0000BD38 317C 0680 0002             		move.w	#$680,2(a0)
0000BD3E 117C 0024 0001             		move.b	#$24,1(a0)
0000BD44 117C 0003 0018             		move.b	#3,$18(a0)
0000BD4A 117C 0008 0019             		move.b	#8,$19(a0)
0000BD50 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BD56 7000                       		moveq	#0,d0
0000BD58 1028 001C                  		move.b	$1C(a0),d0
0000BD5C 5400                       		addq.b	#2,d0
0000BD5E 1140 001A                  		move.b	d0,$1A(a0)
0000BD62 227C 0000 0000             		movea.l	#Map_obj26,a1
0000BD68 D000                       		add.b	d0,d0
0000BD6A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BD6E 5249                       		addq.w	#1,a1
0000BD70 2149 0004                  		move.l	a1,4(a0)
0000BD74                            
0000BD74                            Obj2E_Move:				; XREF: Obj2E_Index
0000BD74 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000BD78 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000BD7C 6100 0000                  		bsr.w	SpeedToPos
0000BD80 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000BD86 4E75                       		rts	
0000BD88                            ; ===========================================================================
0000BD88                            
0000BD88                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000BD88 5428 0024                          addq.b    #2,$24(a0)
0000BD8C 317C 001D 001E                     move.w    #29,$1E(a0)
0000BD92 1028 001C                          move.b    $1C(a0),d0
0000BD96 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000BD9A 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000BD9C 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000BD9E 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000BDA0 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000BDA4 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000BDAA 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000BDAC 4E75                               rts ; The Eggman monitor now does something!
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            Obj2E_ChkSonic:
0000BDAE 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BDB2 6600                       		bne.s	Obj2E_ChkShoes
0000BDB4                            
0000BDB4                            ExtraLife:
0000BDB4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000BDB8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000BDBC 303C 0088                  		move.w	#$88,d0
0000BDC0 4EF9 0000 12C6             		jmp	(PlaySound).l	; play extra life music
0000BDC6                            ; ===========================================================================
0000BDC6                            
0000BDC6                            Obj2E_ChkShoes:
0000BDC6 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BDCA 6600                       		bne.s	Obj2E_ChkShield
0000BDCC 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000BDD2                            
0000BDD2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; am I already speed shoe'd?
0000BDD6 6600                       		bne.s	Obj2E_NoShoes	; if so, branch
0000BDD8 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000BDDE                            		
0000BDDE                            Obj2E_NoShoes:
0000BDDE 4E75                       		rts
0000BDE0                            ; ===========================================================================
0000BDE0                            
0000BDE0                            Obj2E_ChkShield:
0000BDE0 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000BDE4 6600                       		bne.s	Obj2E_ChkInvinc
0000BDE6 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000BDEC 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000BDF2 303C 00AF                  		move.w	#$AF,d0
0000BDF6 4EF9 0000 12C6             		jmp	(PlaySound).l	; play shield sound
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            Obj2E_ChkInvinc:
0000BDFC 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BE00 6600 0000                  		bne.w	Obj2E_ChkRings
0000BE04 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000BE0A                            
0000BE0A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; am I already invincible?
0000BE0E 6600                       		bne.s	Obj2E_NoInv		; if so, branch
0000BE10                            
0000BE10 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000BE16                            
0000BE16 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000BE1C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000BE22 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000BE28 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000BE2E 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000BE34 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000BE3A 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000BE40 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000BE46                            		
0000BE46                            Obj2E_NoInv:
0000BE46 4E75                       		rts	
0000BE48                            ; ===========================================================================
0000BE48                            
0000BE48                            Obj2E_ChkRings:
0000BE48 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BE4C 6600                       		bne.s	Obj2E_ChkS
0000BE4E 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000BE54 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000BE5A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000BE60 6500                       		bcs.s	Obj2E_RingSound
0000BE62 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000BE68 6700 FF4A                  		beq.w	ExtraLife
0000BE6C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000BE72 6500                       		bcs.s	Obj2E_RingSound
0000BE74 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000BE7A 6700 FF38                  		beq.w	ExtraLife
0000BE7E                            
0000BE7E                            Obj2E_RingSound:
0000BE7E 303C 00B5                  		move.w	#$B5,d0
0000BE82 4EF9 0000 12C6             		jmp	(PlaySound).l	; play ring sound
0000BE88                            ; ===========================================================================
0000BE88                            
0000BE88                            Obj2E_ChkS:
0000BE88 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000BE8C 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code
0000BE90 4E71                       		nop
0000BE92                            
0000BE92                            Obj2E_ChkGoggles:	
0000BE92 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000BE96 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000BE9A 4E71                       		nop
0000BE9C                            
0000BE9C                            Obj2E_ChkEnd:
0000BE9C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000BE9E                            ; ===========================================================================
0000BE9E                            
0000BE9E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000BE9E 5368 001E                  		subq.w	#1,$1E(a0)
0000BEA2 6B00 0000                  		bmi.w	DeleteObject
0000BEA6 4E75                       		rts	
0000BEA8                            ; ---------------------------------------------------------------------------
0000BEA8                            ; Subroutine to	make the sides of a monitor solid
0000BEA8                            ; ---------------------------------------------------------------------------
0000BEA8                            
0000BEA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEA8                            
0000BEA8                            
0000BEA8                            Obj26_SolidSides:			; XREF: loc_A1EC
0000BEA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000BEAC 3029 0008                  		move.w	8(a1),d0
0000BEB0 9068 0008                  		sub.w	8(a0),d0
0000BEB4 D041                       		add.w	d1,d0
0000BEB6 6B00                       		bmi.s	loc_A4E6
0000BEB8 3601                       		move.w	d1,d3
0000BEBA D643                       		add.w	d3,d3
0000BEBC B043                       		cmp.w	d3,d0
0000BEBE 6200                       		bhi.s	loc_A4E6
0000BEC0 1629 0016                  		move.b	$16(a1),d3
0000BEC4 4883                       		ext.w	d3
0000BEC6 D443                       		add.w	d3,d2
0000BEC8 3629 000C                  		move.w	$C(a1),d3
0000BECC 9668 000C                  		sub.w	$C(a0),d3
0000BED0 D642                       		add.w	d2,d3
0000BED2 6B00                       		bmi.s	loc_A4E6
0000BED4 D442                       		add.w	d2,d2
0000BED6 B642                       		cmp.w	d2,d3
0000BED8 6400                       		bcc.s	loc_A4E6
0000BEDA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BEDE 6B00                       		bmi.s	loc_A4E6
0000BEE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BEE6 6400                       		bcc.s	loc_A4E6
0000BEE8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BEEC 6600                       		bne.s	loc_A4E6
0000BEEE B240                       		cmp.w	d0,d1
0000BEF0 6400                       		bcc.s	loc_A4DC
0000BEF2 D241                       		add.w	d1,d1
0000BEF4 9041                       		sub.w	d1,d0
0000BEF6                            
0000BEF6                            loc_A4DC:
0000BEF6 0C43 0010                  		cmpi.w	#$10,d3
0000BEFA 6500                       		bcs.s	loc_A4EA
0000BEFC                            
0000BEFC                            loc_A4E2:
0000BEFC 7201                       		moveq	#1,d1
0000BEFE 4E75                       		rts	
0000BF00                            ; ===========================================================================
0000BF00                            
0000BF00                            loc_A4E6:
0000BF00 7200                       		moveq	#0,d1
0000BF02 4E75                       		rts	
0000BF04                            ; ===========================================================================
0000BF04                            
0000BF04                            loc_A4EA:
0000BF04 7200                       		moveq	#0,d1
0000BF06 1228 0019                  		move.b	$19(a0),d1
0000BF0A 5841                       		addq.w	#4,d1
0000BF0C 3401                       		move.w	d1,d2
0000BF0E D442                       		add.w	d2,d2
0000BF10 D269 0008                  		add.w	8(a1),d1
0000BF14 9268 0008                  		sub.w	8(a0),d1
0000BF18 6BE2                       		bmi.s	loc_A4E2
0000BF1A B242                       		cmp.w	d2,d1
0000BF1C 64DE                       		bcc.s	loc_A4E2
0000BF1E 72FF                       		moveq	#-1,d1
0000BF20 4E75                       		rts	
0000BF22                            ; End of function Obj26_SolidSides
0000BF22                            
0000BF22                            ; ===========================================================================
0000BF22                            Ani_obj26:
0000BF22                            	include "_anim\obj26.asm"
0000BF22                            ; ---------------------------------------------------------------------------
0000BF22                            ; Animation script - monitors
0000BF22                            ; ---------------------------------------------------------------------------
0000BF22 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000BF28 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000BF2E 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000BF34 0000                       		dc.w byte_A582-Ani_obj26
0000BF36 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000BF3C 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000BF48 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000BF54 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000BF60 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000BF6C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000BF78 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000BF84 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BF90 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BF9C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BFA4                            		even
0000BFA4                            		even
0000BFA4                            
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            ; Sprite mappings - monitors
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            Map_obj26:
0000BFA4                            	include "_maps\obj26.asm"
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            ; Sprite mappings - monitors
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000BFA8 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000BFAC 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000BFB0 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000BFB4 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000BFB8 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000BFBC 01                         byte_A5A2:	dc.b 1			; static monitor
0000BFBD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFC2 02                         byte_A5A8:	dc.b 2			; static monitor
0000BFC3 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000BFC8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFCD 02                         byte_A5B3:	dc.b 2			; static monitor
0000BFCE F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000BFD3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFD8 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000BFD9 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000BFDE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFE3 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000BFE4 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000BFE9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFEE 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000BFEF F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000BFF4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000BFF9 02                         byte_A5DF:	dc.b 2			; shield monitor
0000BFFA F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000BFFF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C004 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000C005 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000C00A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C00F 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000C010 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000C015 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C01A 02                         byte_A600:	dc.b 2			; 'S' monitor
0000C01B F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000C020 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C025 02                         byte_A60B:	dc.b 2			; goggles monitor
0000C026 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000C02B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000C030 01                         byte_A616:	dc.b 1			; broken monitor
0000C031 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000C036                            		even
0000C036                            		even
0000C036                            
0000C036                            ; ===========================================================================
0000C036                            ; ---------------------------------------------------------------------------
0000C036                            ; Object 0E - Sonic on the title screen
0000C036                            ; ---------------------------------------------------------------------------
0000C036                            
0000C036                            Obj0E:					; XREF: Obj_Index
0000C036 7000                       		moveq	#0,d0
0000C038 1028 0024                  		move.b	$24(a0),d0
0000C03C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000C040 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000C044                            ; ===========================================================================
0000C044 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000C046 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000C048 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000C04A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000C04C                            ; ===========================================================================
0000C04C                            
0000C04C                            Obj0E_Main:				; XREF: Obj0E_Index
0000C04C 5428 0024                  		addq.b	#2,$24(a0)
0000C050 317C 00F0 0008             		move.w	#$F0,8(a0)
0000C056 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000C05C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000C064 317C 2300 0002             		move.w	#$2300,2(a0)
0000C06A 117C 0001 0018             		move.b	#1,$18(a0)
0000C070 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000C076 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C07C 6100 0000                  		bsr.w	AnimateSprite
0000C080                            
0000C080                            Obj0E_Delay:				; XREF: Obj0E_Index
0000C080 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000C084 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000C086 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000C08A 6000 0000                  		bra.w	DisplaySprite
0000C08E                            ; ===========================================================================
0000C08E                            
0000C08E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000C08E 4E75                       		rts	
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            Obj0E_Move:				; XREF: Obj0E_Index
0000C090 5168 000A                  		subq.w	#8,$A(a0)
0000C094 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000C09A 6600                       		bne.s	Obj0E_Display
0000C09C 5428 0024                  		addq.b	#2,$24(a0)
0000C0A0                            
0000C0A0                            Obj0E_Display:
0000C0A0 6000 0000                  		bra.w	DisplaySprite
0000C0A4                            ; ===========================================================================
0000C0A4 4E75                       		rts	
0000C0A6                            ; ===========================================================================
0000C0A6                            
0000C0A6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000C0A6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000C0AC 6100 0000                  		bsr.w	AnimateSprite
0000C0B0 6000 0000                  		bra.w	DisplaySprite
0000C0B4                            ; ===========================================================================
0000C0B4 4E75                       		rts	
0000C0B6                            ; ===========================================================================
0000C0B6                            ; ---------------------------------------------------------------------------
0000C0B6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C0B6                            ; ---------------------------------------------------------------------------
0000C0B6                            
0000C0B6                            Obj0F:					; XREF: Obj_Index
0000C0B6 7000                       		moveq	#0,d0
0000C0B8 1028 0024                  		move.b	$24(a0),d0
0000C0BC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C0C0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C0C4 6000 0000                  		bra.w	DisplaySprite
0000C0C8                            ; ===========================================================================
0000C0C8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000C0CA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000C0CC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000C0CE                            ; ===========================================================================
0000C0CE                            
0000C0CE                            Obj0F_Main:				; XREF: Obj0F_Index
0000C0CE 5428 0024                  		addq.b	#2,$24(a0)
0000C0D2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000C0D8 317C 0130 000A             		move.w	#$130,$A(a0)
0000C0DE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000C0E6 317C 0200 0002             		move.w	#$200,2(a0)
0000C0EC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000C0F2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000C0F4 5428 0024                  		addq.b	#2,$24(a0)
0000C0F8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000C0FE 6600                       		bne.s	locret_A6F8	; if not, branch
0000C100 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000C106 317C 0170 0008             		move.w	#$170,8(a0)
0000C10C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000C112                            
0000C112                            locret_A6F8:				; XREF: Obj0F_Index
0000C112 4E75                       		rts	
0000C114                            ; ===========================================================================
0000C114                            
0000C114                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000C114 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000C11A 6000 0000                  		bra.w	AnimateSprite
0000C11E                            ; ===========================================================================
0000C11E                            Ani_obj0E:
0000C11E                            	include "_anim\obj0E.asm"
0000C11E                            ; ---------------------------------------------------------------------------
0000C11E                            ; Animation script - Sonic on the title screen
0000C11E                            ; ---------------------------------------------------------------------------
0000C11E 0000                       		dc.w byte_A706-Ani_obj0E
0000C120 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000C12C                            		even
0000C12C                            		even
0000C12C                            
0000C12C                            Ani_obj0F:
0000C12C                            	include "_anim\obj0F.asm"
0000C12C                            ; ---------------------------------------------------------------------------
0000C12C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C12C                            ; ---------------------------------------------------------------------------
0000C12C 0000                       		dc.w byte_A714-Ani_obj0F
0000C12E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000C132                            		even
0000C132                            		even
0000C132                            
0000C132                            ; ---------------------------------------------------------------------------
0000C132                            ; Subroutine to	animate	a sprite using an animation script
0000C132                            ; ---------------------------------------------------------------------------
0000C132                            
0000C132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C132                            
0000C132                            
0000C132                            AnimateSprite:
0000C132 7000                       		moveq	#0,d0
0000C134 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000C138 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000C13C 6700                       		beq.s	Anim_Run	; if not, branch
0000C13E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000C142 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C148 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000C14E                            
0000C14E                            Anim_Run:
0000C14E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000C152 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C154 D040                       		add.w	d0,d0
0000C156 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C15A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000C15E 7200                       		moveq	#0,d1
0000C160 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000C164 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C168 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C16A                            
0000C16A                            Anim_Next:
0000C16A 1200                       		move.b	d0,d1
0000C16C 0200 001F                  		andi.b	#$1F,d0
0000C170 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000C174 1028 0022                  		move.b	$22(a0),d0
0000C178 E719                       		rol.b	#3,d1
0000C17A B101                       		eor.b	d0,d1
0000C17C 0201 0003                  		andi.b	#3,d1
0000C180 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000C186 8328 0001                  		or.b	d1,1(a0)
0000C18A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000C18E                            
0000C18E                            Anim_Wait:
0000C18E 4E75                       		rts	
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            Anim_End_FF:
0000C190 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C192 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C194 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000C19A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C19E 60CA                       		bra.s	Anim_Next
0000C1A0                            ; ===========================================================================
0000C1A0                            
0000C1A0                            Anim_End_FE:
0000C1A0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C1A2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C1A4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C1A8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000C1AC 9200                       		sub.b	d0,d1
0000C1AE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C1B2 60B6                       		bra.s	Anim_Next
0000C1B4                            ; ===========================================================================
0000C1B4                            
0000C1B4                            Anim_End_FD:
0000C1B4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C1B6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C1B8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000C1BE                            
0000C1BE                            Anim_End_FC:
0000C1BE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C1C0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C1C2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000C1C6                            
0000C1C6                            Anim_End_FB:
0000C1C6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C1C8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C1CA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000C1D0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000C1D4                            
0000C1D4                            Anim_End_FA:
0000C1D4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C1D6 6600                       		bne.s	Anim_End	; if not, branch
0000C1D8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000C1DC                            
0000C1DC                            Anim_End:
0000C1DC 4E75                       		rts	
0000C1DE                            ; End of function AnimateSprite
0000C1DE                            
0000C1DE                            ; ===========================================================================
0000C1DE                            ; ---------------------------------------------------------------------------
0000C1DE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1DE                            ; ---------------------------------------------------------------------------
0000C1DE                            Map_obj0F:
0000C1DE                            	include "_maps\obj0F.asm"
0000C1DE                            ; ---------------------------------------------------------------------------
0000C1DE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C1DE                            ; ---------------------------------------------------------------------------
0000C1DE 0000                       		dc.w byte_A7CD-Map_obj0F
0000C1E0 0000                       		dc.w byte_A7CC-Map_obj0F
0000C1E2 0000                       		dc.w byte_A7EB-Map_obj0F
0000C1E4 0000                       		dc.w byte_A882-Map_obj0F
0000C1E6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000C1E7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C1EC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C1F1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C1F6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C1FB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C200 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C205 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000C206 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C20B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C210 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C215 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C21A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C21F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C224 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C229 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C22E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C233 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C238 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C23D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C242 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C247 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C24C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C251 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C256 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C25B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C260 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C265 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C26A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C26F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C274 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C279 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C27E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C283 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C288 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C28D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C292 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C297 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C29C 01                         byte_A882:	dc.b 1			; "TM"
0000C29D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C2A2                            		even
0000C2A2                            		even
0000C2A2                            
0000C2A2                            ; ---------------------------------------------------------------------------
0000C2A2                            ; Sprite mappings - Sonic on the title screen
0000C2A2                            ; ---------------------------------------------------------------------------
0000C2A2                            Map_obj0E:
0000C2A2                            	include "_maps\obj0E.asm"
0000C2A2                            ; ---------------------------------------------------------------------------
0000C2A2                            ; Sprite mappings - Sonic on the title screen
0000C2A2                            ; ---------------------------------------------------------------------------
0000C2A2 0000                       		dc.w byte_A898-Map_obj0E
0000C2A4 0000                       		dc.w byte_A8CB-Map_obj0E
0000C2A6 0000                       		dc.w byte_A917-Map_obj0E
0000C2A8 0000                       		dc.w byte_A96D-Map_obj0E
0000C2AA 0000                       		dc.w byte_A9AF-Map_obj0E
0000C2AC 0000                       		dc.w byte_A9E7-Map_obj0E
0000C2AE 0000                       		dc.w byte_AA47-Map_obj0E
0000C2B0 0000                       		dc.w byte_AAB1-Map_obj0E
0000C2B2 0A                         byte_A898:	dc.b $A
0000C2B3 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C2B8 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C2BD 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C2C2 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C2C7 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C2CC 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C2D1 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C2D6 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C2DB 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C2E0 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C2E5 0F                         byte_A8CB:	dc.b $F
0000C2E6 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C2EB 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C2F0 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C2F5 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C2FA 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C2FF 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C304 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C309 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C30E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C313 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C318 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C31D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C322 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C327 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C32C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C331 11                         byte_A917:	dc.b $11
0000C332 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C337 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C33C 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C341 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C346 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C34B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C350 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C355 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C35A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C35F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C364 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C369 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C36E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C373 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C378 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C37D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C382 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C387 0D                         byte_A96D:	dc.b $D
0000C388 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C38D 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C392 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C397 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C39C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C3A1 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C3A6 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C3AB 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C3B0 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C3B5 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C3BA 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C3BF 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C3C4 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C3C9 0B                         byte_A9AF:	dc.b $B
0000C3CA 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C3CF 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C3D4 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C3D9 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C3DE 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C3E3 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C3E8 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C3ED 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C3F2 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C3F7 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C3FC 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C401 13                         byte_A9E7:	dc.b $13
0000C402 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C407 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C40C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C411 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C416 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C41B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C420 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C425 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C42A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C42F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C434 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C439 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C43E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C443 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C448 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C44D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C452 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C457 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C45C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C461 15                         byte_AA47:	dc.b $15
0000C462 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C467 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C46C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C471 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C476 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C47B 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C480 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C485 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C48A 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C48F 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C494 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C499 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C49E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C4A3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C4A8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C4AD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C4B2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C4B7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C4BC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C4C1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C4C6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C4CB 16                         byte_AAB1:	dc.b $16
0000C4CC 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C4D1 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C4D6 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C4DB 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C4E0 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C4E5 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C4EA 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C4EF 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C4F4 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C4F9 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C4FE 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C503 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C508 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C50D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C512 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C517 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C51C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C521 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C526 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C52B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C530 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C535 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C53A                            		even
0000C53A                            		even
0000C53A                            
0000C53A                            ; ===========================================================================
0000C53A                            ; ---------------------------------------------------------------------------
0000C53A                            ; Object 2B - Chopper enemy (GHZ)
0000C53A                            ; ---------------------------------------------------------------------------
0000C53A                            
0000C53A                            Obj2B:					; XREF: Obj_Index
0000C53A 7000                       		moveq	#0,d0
0000C53C 1028 0024                  		move.b	$24(a0),d0
0000C540 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000C544 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000C548 6000 0000                  		bra.w	MarkObjGone
0000C54C                            ; ===========================================================================
0000C54C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000C54E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000C550                            ; ===========================================================================
0000C550                            
0000C550                            Obj2B_Main:				; XREF: Obj2B_Index
0000C550 5428 0024                  		addq.b	#2,$24(a0)
0000C554 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000C55C 317C 047B 0002             		move.w	#$47B,2(a0)
0000C562 117C 0004 0001             		move.b	#4,1(a0)
0000C568 117C 0004 0018             		move.b	#4,$18(a0)
0000C56E 117C 0009 0020             		move.b	#9,$20(a0)
0000C574 117C 0010 0019             		move.b	#$10,$19(a0)
0000C57A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C580 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C586                            
0000C586                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000C586 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000C58C 6100 FBA4                  		bsr.w	AnimateSprite
0000C590 6100 0000                  		bsr.w	SpeedToPos
0000C594 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000C59A 3028 0030                  		move.w	$30(a0),d0
0000C59E B068 000C                  		cmp.w	$C(a0),d0
0000C5A2 6400                       		bcc.s	Obj2B_ChgAni
0000C5A4 3140 000C                  		move.w	d0,$C(a0)
0000C5A8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C5AE                            
0000C5AE                            Obj2B_ChgAni:
0000C5AE 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C5B4 0440 00C0                  		subi.w	#$C0,d0
0000C5B8 B068 000C                  		cmp.w	$C(a0),d0
0000C5BC 6400                       		bcc.s	locret_ABB6
0000C5BE 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C5C4 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C5C8 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C5CA 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C5D0                            
0000C5D0                            locret_ABB6:
0000C5D0 4E75                       		rts	
0000C5D2                            ; ===========================================================================
0000C5D2                            Ani_obj2B:
0000C5D2                            	include "_anim\obj2B.asm"
0000C5D2                            ; ---------------------------------------------------------------------------
0000C5D2                            ; Animation script - Chopper enemy
0000C5D2                            ; ---------------------------------------------------------------------------
0000C5D2 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C5D4 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C5D6 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C5D8 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C5DC 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C5E0 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C5E4 00                         		even
0000C5E4 00                         		even
0000C5E4                            
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4                            Map_obj2B:
0000C5E4                            	include "_maps\obj2B.asm"
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4                            ; Sprite mappings - Chopper enemy (GHZ)
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4 0000                       		dc.w byte_ABCE-Map_obj2B
0000C5E6 0000                       		dc.w byte_ABD4-Map_obj2B
0000C5E8 01                         byte_ABCE:	dc.b 1
0000C5E9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C5EE 01                         byte_ABD4:	dc.b 1
0000C5EF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C5F4                            		even
0000C5F4                            		even
0000C5F4                            
0000C5F4                            ; ===========================================================================
0000C5F4                            ; ---------------------------------------------------------------------------
0000C5F4                            ; Object 2C - Jaws enemy (LZ)
0000C5F4                            ; ---------------------------------------------------------------------------
0000C5F4                            
0000C5F4                            Obj2C:					; XREF: Obj_Index
0000C5F4 7000                       		moveq	#0,d0
0000C5F6 1028 0024                  		move.b	$24(a0),d0
0000C5FA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C5FE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C602                            ; ===========================================================================
0000C602 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C604 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C606                            ; ===========================================================================
0000C606                            
0000C606                            Obj2C_Main:				; XREF: Obj2C_Index
0000C606 5428 0024                  		addq.b	#2,$24(a0)
0000C60A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C612 317C 2486 0002             		move.w	#$2486,2(a0)
0000C618 0028 0004 0001             		ori.b	#4,1(a0)
0000C61E 117C 000A 0020             		move.b	#$A,$20(a0)
0000C624 117C 0004 0018             		move.b	#4,$18(a0)
0000C62A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C630 7000                       		moveq	#0,d0
0000C632 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C636 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C638 5340                       		subq.w	#1,d0
0000C63A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C63E 3140 0032                  		move.w	d0,$32(a0)
0000C642 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C648 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C64E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C650 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C654                            
0000C654                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C654 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C658 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C65A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C660 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C664 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C66A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C670                            
0000C670                            Obj2C_Animate:
0000C670 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C676 6100 FABA                  		bsr.w	AnimateSprite
0000C67A 6100 0000                  		bsr.w	SpeedToPos
0000C67E 6000 0000                  		bra.w	MarkObjGone
0000C682                            ; ===========================================================================
0000C682                            Ani_obj2C:
0000C682                            	include "_anim\obj2C.asm"
0000C682                            ; ---------------------------------------------------------------------------
0000C682                            ; Animation script - Jaws enemy
0000C682                            ; ---------------------------------------------------------------------------
0000C682 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C684 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C68A                            		even
0000C68A                            		even
0000C68A                            
0000C68A                            ; ---------------------------------------------------------------------------
0000C68A                            ; Sprite mappings - Jaws enemy (LZ)
0000C68A                            ; ---------------------------------------------------------------------------
0000C68A                            Map_obj2C:
0000C68A                            	include "_maps\obj2C.asm"
0000C68A                            ; ---------------------------------------------------------------------------
0000C68A                            ; Sprite mappings - Jaws enemy (LZ)
0000C68A                            ; ---------------------------------------------------------------------------
0000C68A 0000                       		dc.w byte_AC78-Map_obj2C
0000C68C 0000                       		dc.w byte_AC83-Map_obj2C
0000C68E 0000                       		dc.w byte_AC8E-Map_obj2C
0000C690 0000                       		dc.w byte_AC99-Map_obj2C
0000C692 02                         byte_AC78:	dc.b 2
0000C693 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C698 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000C69D 02                         byte_AC83:	dc.b 2
0000C69E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6A3 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000C6A8 02                         byte_AC8E:	dc.b 2
0000C6A9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000C6AE F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000C6B3 02                         byte_AC99:	dc.b 2
0000C6B4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000C6B9 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000C6BE                            		even
0000C6BE                            		even
0000C6BE                            
0000C6BE                            ; ===========================================================================
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE                            ; Object 2D - Burrobot enemy (LZ)
0000C6BE                            ; ---------------------------------------------------------------------------
0000C6BE                            
0000C6BE                            Obj2D:					; XREF: Obj_Index
0000C6BE 7000                       		moveq	#0,d0
0000C6C0 1028 0024                  		move.b	$24(a0),d0
0000C6C4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C6C8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C6CC                            ; ===========================================================================
0000C6CC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C6CE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C6D0                            ; ===========================================================================
0000C6D0                            
0000C6D0                            Obj2D_Main:				; XREF: Obj2D_Index
0000C6D0 5428 0024                  		addq.b	#2,$24(a0)
0000C6D4 117C 0013 0016             		move.b	#$13,$16(a0)
0000C6DA 117C 0008 0017             		move.b	#8,$17(a0)
0000C6E0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C6E8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C6EE 0028 0004 0001             		ori.b	#4,1(a0)
0000C6F4 117C 0004 0018             		move.b	#4,$18(a0)
0000C6FA 117C 0005 0020             		move.b	#5,$20(a0)
0000C700 117C 000C 0019             		move.b	#$C,$19(a0)
0000C706 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C70A 117C 0002 001C             		move.b	#2,$1C(a0)
0000C710                            
0000C710                            Obj2D_Action:				; XREF: Obj2D_Index
0000C710 7000                       		moveq	#0,d0
0000C712 1028 0025                  		move.b	$25(a0),d0
0000C716 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C71A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C71E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C724 6100 FA0C                  		bsr.w	AnimateSprite
0000C728 6000 0000                  		bra.w	MarkObjGone
0000C72C                            ; ===========================================================================
0000C72C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C72E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C730 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C732 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C734                            ; ===========================================================================
0000C734                            
0000C734                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C734 5368 0030                  		subq.w	#1,$30(a0)
0000C738 6A00                       		bpl.s	locret_AD42
0000C73A 5428 0025                  		addq.b	#2,$25(a0)
0000C73E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C744 317C 0080 0010             		move.w	#$80,$10(a0)
0000C74A 117C 0001 001C             		move.b	#1,$1C(a0)
0000C750 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C756 6700                       		beq.s	locret_AD42
0000C758 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C75C                            
0000C75C                            locret_AD42:
0000C75C 4E75                       		rts	
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C75E 5368 0030                  		subq.w	#1,$30(a0)
0000C762 6B00                       		bmi.s	loc_AD84
0000C764 6100 0000                  		bsr.w	SpeedToPos
0000C768 0868 0000 0032             		bchg	#0,$32(a0)
0000C76E 6600                       		bne.s	loc_AD78
0000C770 3628 0008                  		move.w	8(a0),d3
0000C774 0643 000C                  		addi.w	#$C,d3
0000C778 0828 0000 0022             		btst	#0,$22(a0)
0000C77E 6600                       		bne.s	loc_AD6A
0000C780 0443 0018                  		subi.w	#$18,d3
0000C784                            
0000C784                            loc_AD6A:
0000C784 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C78A 0C41 000C                  		cmpi.w	#$C,d1
0000C78E 6C00                       		bge.s	loc_AD84
0000C790 4E75                       		rts	
0000C792                            ; ===========================================================================
0000C792                            
0000C792                            loc_AD78:				; XREF: Obj2D_Move
0000C792 4EB9 0000 0000             		jsr	ObjHitFloor
0000C798 D368 000C                  		add.w	d1,$C(a0)
0000C79C 4E75                       		rts	
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            loc_AD84:				; XREF: Obj2D_Move
0000C79E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C7A4 6700                       		beq.s	loc_ADA4
0000C7A6 5528 0025                  		subq.b	#2,$25(a0)
0000C7AA 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C7B0 317C 0000 0010             		move.w	#0,$10(a0)
0000C7B6 117C 0000 001C             		move.b	#0,$1C(a0)
0000C7BC 4E75                       		rts	
0000C7BE                            ; ===========================================================================
0000C7BE                            
0000C7BE                            loc_ADA4:
0000C7BE 5428 0025                  		addq.b	#2,$25(a0)
0000C7C2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C7C8 117C 0002 001C             		move.b	#2,$1C(a0)
0000C7CE 4E75                       		rts	
0000C7D0                            ; ===========================================================================
0000C7D0                            
0000C7D0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C7D0 6100 0000                  		bsr.w	SpeedToPos
0000C7D4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7DA 6B00                       		bmi.s	locret_ADF0
0000C7DC 117C 0003 001C             		move.b	#3,$1C(a0)
0000C7E2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7E8 4A41                       		tst.w	d1
0000C7EA 6A00                       		bpl.s	locret_ADF0
0000C7EC D368 000C                  		add.w	d1,$C(a0)
0000C7F0 317C 0000 0012             		move.w	#0,$12(a0)
0000C7F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000C7FC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C802 5528 0025                  		subq.b	#2,$25(a0)
0000C806 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C80A                            
0000C80A                            locret_ADF0:
0000C80A 4E75                       		rts	
0000C80C                            ; ===========================================================================
0000C80C                            
0000C80C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C80C 343C 0060                  		move.w	#$60,d2
0000C810 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C814 6400                       		bcc.s	locret_AE20
0000C816 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C81A 9068 000C                  		sub.w	$C(a0),d0
0000C81E 6400                       		bcc.s	locret_AE20
0000C820 0C40 FF80                  		cmpi.w	#-$80,d0
0000C824 6500                       		bcs.s	locret_AE20
0000C826 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C82A 6600                       		bne.s	locret_AE20
0000C82C 5528 0025                  		subq.b	#2,$25(a0)
0000C830 3141 0010                  		move.w	d1,$10(a0)
0000C834 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C83A                            
0000C83A                            locret_AE20:
0000C83A 4E75                       		rts	
0000C83C                            
0000C83C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C83C                            
0000C83C                            
0000C83C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C83C 323C 0080                  		move.w	#$80,d1
0000C840 08E8 0000 0022             		bset	#0,$22(a0)
0000C846 3038 D008                  		move.w	($FFFFD008).w,d0
0000C84A 9068 0008                  		sub.w	8(a0),d0
0000C84E 6400                       		bcc.s	loc_AE40
0000C850 4440                       		neg.w	d0
0000C852 4441                       		neg.w	d1
0000C854 08A8 0000 0022             		bclr	#0,$22(a0)
0000C85A                            
0000C85A                            loc_AE40:
0000C85A B042                       		cmp.w	d2,d0
0000C85C 4E75                       		rts	
0000C85E                            ; End of function Obj2D_ChkSonic2
0000C85E                            
0000C85E                            ; ===========================================================================
0000C85E                            Ani_obj2D:
0000C85E                            	include "_anim\obj2D.asm"
0000C85E                            ; ---------------------------------------------------------------------------
0000C85E                            ; Animation script - Burrobot enemy
0000C85E                            ; ---------------------------------------------------------------------------
0000C85E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C860 0000                       		dc.w byte_AE50-Ani_obj2D
0000C862 0000                       		dc.w byte_AE54-Ani_obj2D
0000C864 0000                       		dc.w byte_AE58-Ani_obj2D
0000C866 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C86A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C86E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C872 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C876 00                         		even
0000C876 00                         		even
0000C876                            
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            ; Sprite mappings - Burrobot enemy (LZ)
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            Map_obj2D:
0000C876                            	include "_maps\obj2D.asm"
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            ; Sprite mappings - Burrobot enemy (LZ)
0000C876                            ; ---------------------------------------------------------------------------
0000C876 0000                       		dc.w byte_AE6A-Map_obj2D
0000C878 0000                       		dc.w byte_AE75-Map_obj2D
0000C87A 0000                       		dc.w byte_AE80-Map_obj2D
0000C87C 0000                       		dc.w byte_AE8B-Map_obj2D
0000C87E 0000                       		dc.w byte_AE96-Map_obj2D
0000C880 0000                       		dc.w byte_AEA1-Map_obj2D
0000C882 0000                       		dc.w byte_AEAC-Map_obj2D
0000C884 02                         byte_AE6A:	dc.b 2
0000C885 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000C88A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C88F 02                         byte_AE75:	dc.b 2
0000C890 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C895 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000C89A 02                         byte_AE80:	dc.b 2
0000C89B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000C8A0 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000C8A5 02                         byte_AE8B:	dc.b 2
0000C8A6 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000C8AB 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000C8B0 02                         byte_AE96:	dc.b 2
0000C8B1 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000C8B6 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000C8BB 02                         byte_AEA1:	dc.b 2
0000C8BC F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000C8C1 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000C8C6 02                         byte_AEAC:	dc.b 2
0000C8C7 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000C8CC 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C8D2 00                         		even
0000C8D2 00                         		even
0000C8D2                            
0000C8D2                            ; ===========================================================================
0000C8D2                            ; ---------------------------------------------------------------------------
0000C8D2                            ; Object 2F - large moving platforms (MZ)
0000C8D2                            ; ---------------------------------------------------------------------------
0000C8D2                            
0000C8D2                            Obj2F:					; XREF: Obj_Index
0000C8D2 7000                       		moveq	#0,d0
0000C8D4 1028 0024                  		move.b	$24(a0),d0
0000C8D8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C8DC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C8E0                            ; ===========================================================================
0000C8E0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C8E2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C8E4                            
0000C8E4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C8E6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C8E8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C8EA 0140                       		dc.b 1,	$40
0000C8EC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C8EE 0220                       		dc.b 2,	$20
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            Obj2F_Main:				; XREF: Obj2F_Index
0000C8F0 5428 0024                  		addq.b	#2,$24(a0)
0000C8F4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C8FC 317C C000 0002             		move.w	#$C000,2(a0)
0000C902 117C 0004 0001             		move.b	#4,1(a0)
0000C908 117C 0005 0018             		move.b	#5,$18(a0)
0000C90E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C914 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C91A 7000                       		moveq	#0,d0
0000C91C 1028 0028                  		move.b	$28(a0),d0
0000C920 E448                       		lsr.w	#2,d0
0000C922 0240 001C                  		andi.w	#$1C,d0
0000C926 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C92A 3019                       		move.w	(a1)+,d0
0000C92C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C930 214A 0030                  		move.l	a2,$30(a0)
0000C934 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C938 1151 0019                  		move.b	(a1),$19(a0)
0000C93C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C942 117C 0040 0016             		move.b	#$40,$16(a0)
0000C948 08E8 0004 0001             		bset	#4,1(a0)
0000C94E                            
0000C94E                            Obj2F_Action:				; XREF: Obj2F_Index
0000C94E 6100 0000                  		bsr.w	Obj2F_Types
0000C952 4A28 0025                  		tst.b	$25(a0)
0000C956 6700                       		beq.s	Obj2F_Solid
0000C958 7200                       		moveq	#0,d1
0000C95A 1228 0019                  		move.b	$19(a0),d1
0000C95E 0641 000B                  		addi.w	#$B,d1
0000C962 6100 C64C                  		bsr.w	ExitPlatform
0000C966 0829 0003 0022             		btst	#3,$22(a1)
0000C96C 6600 0000                  		bne.w	Obj2F_Slope
0000C970 4228 0025                  		clr.b	$25(a0)
0000C974 6000                       		bra.s	Obj2F_Display
0000C976                            ; ===========================================================================
0000C976                            
0000C976                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C976 7200                       		moveq	#0,d1
0000C978 1228 0019                  		move.b	$19(a0),d1
0000C97C 0641 000B                  		addi.w	#$B,d1
0000C980 2468 0030                  		movea.l	$30(a0),a2
0000C984 3428 0008                  		move.w	8(a0),d2
0000C988 6100 D584                  		bsr.w	SlopeObject2
0000C98C 6000                       		bra.s	Obj2F_Display
0000C98E                            ; ===========================================================================
0000C98E                            
0000C98E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C98E 7200                       		moveq	#0,d1
0000C990 1228 0019                  		move.b	$19(a0),d1
0000C994 0641 000B                  		addi.w	#$B,d1
0000C998 343C 0020                  		move.w	#$20,d2
0000C99C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C9A2 6600                       		bne.s	loc_AF8E
0000C9A4 343C 0030                  		move.w	#$30,d2
0000C9A8                            
0000C9A8                            loc_AF8E:
0000C9A8 2468 0030                  		movea.l	$30(a0),a2
0000C9AC 6100 0000                  		bsr.w	SolidObject2F
0000C9B0                            
0000C9B0                            Obj2F_Display:				; XREF: Obj2F_Action
0000C9B0 6100 0000                  		bsr.w	DisplaySprite
0000C9B4 6000 0000                  		bra.w	Obj2F_ChkDel
0000C9B8                            
0000C9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9B8                            
0000C9B8                            
0000C9B8                            Obj2F_Types:				; XREF: Obj2F_Action
0000C9B8 7000                       		moveq	#0,d0
0000C9BA 1028 0028                  		move.b	$28(a0),d0
0000C9BE 0240 0007                  		andi.w	#7,d0
0000C9C2 D040                       		add.w	d0,d0
0000C9C4 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C9C8 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C9CC                            ; End of function Obj2F_Types
0000C9CC                            
0000C9CC                            ; ===========================================================================
0000C9CC 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C9CE 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C9D0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C9D2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C9D4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C9D6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C9D8                            ; ===========================================================================
0000C9D8                            
0000C9D8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C9D8 4E75                       		rts			; type 00 platform doesn't move
0000C9DA                            ; ===========================================================================
0000C9DA                            
0000C9DA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C9DA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C9DE 323C 0020                  		move.w	#$20,d1
0000C9E2 6000                       		bra.s	Obj2F_Move
0000C9E4                            ; ===========================================================================
0000C9E4                            
0000C9E4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C9E4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C9E8 323C 0030                  		move.w	#$30,d1
0000C9EC 6000                       		bra.s	Obj2F_Move
0000C9EE                            ; ===========================================================================
0000C9EE                            
0000C9EE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C9EE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C9F2 323C 0040                  		move.w	#$40,d1
0000C9F6 6000                       		bra.s	Obj2F_Move
0000C9F8                            ; ===========================================================================
0000C9F8                            
0000C9F8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C9F8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C9FC 323C 0060                  		move.w	#$60,d1
0000CA00                            
0000CA00                            Obj2F_Move:
0000CA00 0828 0003 0028             		btst	#3,$28(a0)
0000CA06 6700                       		beq.s	loc_AFF2
0000CA08 4440                       		neg.w	d0
0000CA0A D041                       		add.w	d1,d0
0000CA0C                            
0000CA0C                            loc_AFF2:
0000CA0C 3228 002C                  		move.w	$2C(a0),d1
0000CA10 9240                       		sub.w	d0,d1
0000CA12 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000CA16 4E75                       		rts	
0000CA18                            ; ===========================================================================
0000CA18                            
0000CA18                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000CA18 1028 0034                  		move.b	$34(a0),d0
0000CA1C 4A28 0025                  		tst.b	$25(a0)
0000CA20 6600                       		bne.s	loc_B010
0000CA22 5500                       		subq.b	#2,d0
0000CA24 6400                       		bcc.s	loc_B01C
0000CA26 7000                       		moveq	#0,d0
0000CA28 6000                       		bra.s	loc_B01C
0000CA2A                            ; ===========================================================================
0000CA2A                            
0000CA2A                            loc_B010:
0000CA2A 5800                       		addq.b	#4,d0
0000CA2C 0C00 0040                  		cmpi.b	#$40,d0
0000CA30 6500                       		bcs.s	loc_B01C
0000CA32 103C 0040                  		move.b	#$40,d0
0000CA36                            
0000CA36                            loc_B01C:
0000CA36 1140 0034                  		move.b	d0,$34(a0)
0000CA3A 4EB9 0000 2B7A             		jsr	(CalcSine).l
0000CA40 E848                       		lsr.w	#4,d0
0000CA42 3200                       		move.w	d0,d1
0000CA44 D068 002C                  		add.w	$2C(a0),d0
0000CA48 3140 000C                  		move.w	d0,$C(a0)
0000CA4C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CA52 6600                       		bne.s	loc_B07A
0000CA54 4A28 0035                  		tst.b	$35(a0)
0000CA58 6600                       		bne.s	loc_B07A
0000CA5A 117C 0001 0035             		move.b	#1,$35(a0)
0000CA60 6100 0000                  		bsr.w	SingleObjLoad2
0000CA64 6600                       		bne.s	loc_B07A
0000CA66 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000CA6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA70 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000CA76 5069 002C                  		addq.w	#8,$2C(a1)
0000CA7A 5769 002C                  		subq.w	#3,$2C(a1)
0000CA7E 0469 0040 0008             		subi.w	#$40,8(a1)
0000CA84 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CA8A 2348 0038                  		move.l	a0,$38(a1)
0000CA8E 2448                       		movea.l	a0,a2
0000CA90 6100                       		bsr.s	sub_B09C
0000CA92                            
0000CA92                            loc_B07A:
0000CA92 7400                       		moveq	#0,d2
0000CA94 45E8 0036                  		lea	$36(a0),a2
0000CA98 141A                       		move.b	(a2)+,d2
0000CA9A 5302                       		subq.b	#1,d2
0000CA9C 6500                       		bcs.s	locret_B09A
0000CA9E                            
0000CA9E                            loc_B086:
0000CA9E 7000                       		moveq	#0,d0
0000CAA0 101A                       		move.b	(a2)+,d0
0000CAA2 ED48                       		lsl.w	#6,d0
0000CAA4 0640 D000                  		addi.w	#-$3000,d0
0000CAA8 3240                       		movea.w	d0,a1
0000CAAA 3341 003C                  		move.w	d1,$3C(a1)
0000CAAE 51CA FFEE                  		dbf	d2,loc_B086
0000CAB2                            
0000CAB2                            locret_B09A:
0000CAB2 4E75                       		rts	
0000CAB4                            
0000CAB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CAB4                            
0000CAB4                            
0000CAB4                            sub_B09C:
0000CAB4 45EA 0036                  		lea	$36(a2),a2
0000CAB8 7000                       		moveq	#0,d0
0000CABA 1012                       		move.b	(a2),d0
0000CABC 5212                       		addq.b	#1,(a2)
0000CABE 45F2 0001                  		lea	1(a2,d0.w),a2
0000CAC2 3009                       		move.w	a1,d0
0000CAC4 0440 D000                  		subi.w	#-$3000,d0
0000CAC8 EC48                       		lsr.w	#6,d0
0000CACA 0240 007F                  		andi.w	#$7F,d0
0000CACE 1480                       		move.b	d0,(a2)
0000CAD0 4E75                       		rts	
0000CAD2                            ; End of function sub_B09C
0000CAD2                            
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000CAD2 4A28 0035                  		tst.b	$35(a0)
0000CAD6 6700                       		beq.s	loc_B0C6
0000CAD8 4A28 0001                  		tst.b	1(a0)
0000CADC 6A00                       		bpl.s	Obj2F_DelFlames
0000CADE                            
0000CADE                            loc_B0C6:
0000CADE 3028 002A                  		move.w	$2A(a0),d0
0000CAE2 0240 FF80                  		andi.w	#$FF80,d0
0000CAE6 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAEA 0441 0080                  		subi.w	#$80,d1
0000CAEE 0241 FF80                  		andi.w	#$FF80,d1
0000CAF2 9041                       		sub.w	d1,d0
0000CAF4 0C40 0280                  		cmpi.w	#$280,d0
0000CAF8 6200 0000                  		bhi.w	DeleteObject
0000CAFC 4E75                       		rts	
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000CAFE 7400                       		moveq	#0,d2
0000CB00                            
0000CB00                            loc_B0E8:
0000CB00 45E8 0036                  		lea	$36(a0),a2
0000CB04 1412                       		move.b	(a2),d2
0000CB06 421A                       		clr.b	(a2)+
0000CB08 5302                       		subq.b	#1,d2
0000CB0A 6500                       		bcs.s	locret_B116
0000CB0C                            
0000CB0C                            loc_B0F4:
0000CB0C 7000                       		moveq	#0,d0
0000CB0E 1012                       		move.b	(a2),d0
0000CB10 421A                       		clr.b	(a2)+
0000CB12 ED48                       		lsl.w	#6,d0
0000CB14 0640 D000                  		addi.w	#-$3000,d0
0000CB18 3240                       		movea.w	d0,a1
0000CB1A 6100 0000                  		bsr.w	DeleteObject2
0000CB1E 51CA FFEC                  		dbf	d2,loc_B0F4
0000CB22 117C 0000 0035             		move.b	#0,$35(a0)
0000CB28 117C 0000 0034             		move.b	#0,$34(a0)
0000CB2E                            
0000CB2E                            locret_B116:
0000CB2E 4E75                       		rts	
0000CB30                            ; ===========================================================================
0000CB30                            ; ---------------------------------------------------------------------------
0000CB30                            ; Collision data for large moving platforms (MZ)
0000CB30                            ; ---------------------------------------------------------------------------
0000CB30                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000CB7C                            		even
0000CB7C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000CBA8                            		even
0000CBA8                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000CBF4                            		even
0000CBF4                            ; ===========================================================================
0000CBF4                            ; ---------------------------------------------------------------------------
0000CBF4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CBF4                            ; (appears when	you walk on sinking platforms)
0000CBF4                            ; ---------------------------------------------------------------------------
0000CBF4                            
0000CBF4                            Obj35:					; XREF: Obj_Index
0000CBF4 7000                       		moveq	#0,d0
0000CBF6 1028 0024                  		move.b	$24(a0),d0
0000CBFA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000CBFE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000CC02                            ; ===========================================================================
0000CC02 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000CC04 0000                       		dc.w loc_B238-Obj35_Index
0000CC06 0000                       		dc.w Obj35_Move-Obj35_Index
0000CC08                            ; ===========================================================================
0000CC08                            
0000CC08                            Obj35_Main:				; XREF: Obj35_Index
0000CC08 5428 0024                  		addq.b	#2,$24(a0)
0000CC0C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000CC14 317C 0345 0002             		move.w	#$345,2(a0)
0000CC1A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000CC20 117C 0004 0001             		move.b	#4,1(a0)
0000CC26 117C 0001 0018             		move.b	#1,$18(a0)
0000CC2C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000CC32 117C 0008 0019             		move.b	#8,$19(a0)
0000CC38 303C 00C8                  		move.w	#$C8,d0
0000CC3C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
0000CC42 4A28 0028                  		tst.b	$28(a0)
0000CC46 6700                       		beq.s	loc_B238
0000CC48 5428 0024                  		addq.b	#2,$24(a0)
0000CC4C 6000 0000                  		bra.w	Obj35_Move
0000CC50                            ; ===========================================================================
0000CC50                            
0000CC50                            loc_B238:				; XREF: Obj35_Index
0000CC50 2268 0030                  		movea.l	$30(a0),a1
0000CC54 3228 0008                  		move.w	8(a0),d1
0000CC58 9268 002A                  		sub.w	$2A(a0),d1
0000CC5C 0641 000C                  		addi.w	#$C,d1
0000CC60 3001                       		move.w	d1,d0
0000CC62 E248                       		lsr.w	#1,d0
0000CC64 1031 0000                  		move.b	(a1,d0.w),d0
0000CC68 4440                       		neg.w	d0
0000CC6A D068 002C                  		add.w	$2C(a0),d0
0000CC6E 3400                       		move.w	d0,d2
0000CC70 D068 003C                  		add.w	$3C(a0),d0
0000CC74 3140 000C                  		move.w	d0,$C(a0)
0000CC78 0C41 0084                  		cmpi.w	#$84,d1
0000CC7C 6400                       		bcc.s	loc_B2B0
0000CC7E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CC86 0C41 0080                  		cmpi.w	#$80,d1
0000CC8A 6400                       		bcc.s	loc_B2B0
0000CC8C 2028 0008                  		move.l	8(a0),d0
0000CC90 0680 0008 0000             		addi.l	#$80000,d0
0000CC96 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000CC9C 6600                       		bne.s	loc_B2B0
0000CC9E 6100 0000                  		bsr.w	SingleObjLoad2
0000CCA2 6600                       		bne.s	loc_B2B0
0000CCA4 12BC 0035                  		move.b	#$35,0(a1)
0000CCA8 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCAE 3342 002C                  		move.w	d2,$2C(a1)
0000CCB2 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000CCB8 137C 0001 0028             		move.b	#1,$28(a1)
0000CCBE 2468 0038                  		movea.l	$38(a0),a2
0000CCC2 6100 FDF0                  		bsr.w	sub_B09C
0000CCC6                            
0000CCC6                            loc_B2B0:
0000CCC6 6000                       		bra.s	Obj35_Animate
0000CCC8                            ; ===========================================================================
0000CCC8                            
0000CCC8                            Obj35_Move:				; XREF: Obj35_Index
0000CCC8 3028 002C                  		move.w	$2C(a0),d0
0000CCCC D068 003C                  		add.w	$3C(a0),d0
0000CCD0 3140 000C                  		move.w	d0,$C(a0)
0000CCD4                            
0000CCD4                            Obj35_Animate:				; XREF: loc_B238
0000CCD4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000CCDA 6100 F456                  		bsr.w	AnimateSprite
0000CCDE 6000 0000                  		bra.w	DisplaySprite
0000CCE2                            ; ===========================================================================
0000CCE2                            Ani_obj35:
0000CCE2                            	include "_anim\obj35.asm"
0000CCE2                            ; ---------------------------------------------------------------------------
0000CCE2                            ; Animation script - fireball that sits on the	floor (MZ)
0000CCE2                            ; ---------------------------------------------------------------------------
0000CCE2 0000                       		dc.w byte_B2CE-Ani_obj35
0000CCE4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000CCEA                            		even
0000CCEA                            		even
0000CCEA                            
0000CCEA                            ; ---------------------------------------------------------------------------
0000CCEA                            ; Sprite mappings - large moving platforms (MZ)
0000CCEA                            ; ---------------------------------------------------------------------------
0000CCEA                            Map_obj2F:
0000CCEA                            	include "_maps\obj2F.asm"
0000CCEA                            ; ---------------------------------------------------------------------------
0000CCEA                            ; Sprite mappings - large moving platforms (MZ)
0000CCEA                            ; ---------------------------------------------------------------------------
0000CCEA 0000                       		dc.w byte_B2DA-Map_obj2F
0000CCEC 0000                       		dc.w byte_B31C-Map_obj2F
0000CCEE 0000                       		dc.w byte_B34F-Map_obj2F
0000CCF0 0D                         byte_B2DA:	dc.b $D
0000CCF1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000CCF6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000CCFB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD00 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000CD05 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000CD0A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD0F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000CD14 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000CD19 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000CD1E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD23 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000CD28 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000CD2D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000CD32 0A                         byte_B31C:	dc.b $A
0000CD33 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000CD38 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000CD3D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000CD42 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000CD47 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000CD4C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD51 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000CD56 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000CD5B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000CD60 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000CD65 06                         byte_B34F:	dc.b 6
0000CD66 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000CD6B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000CD70 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000CD75 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000CD7A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000CD7F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000CD84                            		even
0000CD84                            		even
0000CD84                            
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84                            Map_obj14:
0000CD84                            	include "_maps\obj14.asm"
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84                            ; Sprite mappings - lava balls (MZ, SLZ)
0000CD84                            ; ---------------------------------------------------------------------------
0000CD84 0000                       		dc.w byte_B37A-Map_obj14
0000CD86 0000                       		dc.w byte_B380-Map_obj14
0000CD88 0000                       		dc.w byte_B386-Map_obj14
0000CD8A 0000                       		dc.w byte_B38C-Map_obj14
0000CD8C 0000                       		dc.w byte_B392-Map_obj14
0000CD8E 0000                       		dc.w byte_B398-Map_obj14
0000CD90 01                         byte_B37A:	dc.b 1
0000CD91 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000CD96 01                         byte_B380:	dc.b 1
0000CD97 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000CD9C 01                         byte_B386:	dc.b 1
0000CD9D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000CDA2 01                         byte_B38C:	dc.b 1
0000CDA3 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000CDA8 01                         byte_B392:	dc.b 1
0000CDA9 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000CDAE 01                         byte_B398:	dc.b 1
0000CDAF F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000CDB4                            		even
0000CDB4                            		even
0000CDB4                            
0000CDB4                            ; ===========================================================================
0000CDB4                            ; ---------------------------------------------------------------------------
0000CDB4                            ; Object 30 - large green glassy blocks	(MZ)
0000CDB4                            ; ---------------------------------------------------------------------------
0000CDB4                            
0000CDB4                            Obj30:					; XREF: Obj_Index
0000CDB4 7000                       		moveq	#0,d0
0000CDB6 1028 0024                  		move.b	$24(a0),d0
0000CDBA 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000CDBE 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000CDC2 3028 0008                  		move.w	8(a0),d0
0000CDC6 0240 FF80                  		andi.w	#$FF80,d0
0000CDCA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDCE 0441 0080                  		subi.w	#$80,d1
0000CDD2 0241 FF80                  		andi.w	#$FF80,d1
0000CDD6 9041                       		sub.w	d1,d0
0000CDD8 0C40 0280                  		cmpi.w	#$280,d0
0000CDDC 6200 0000                  		bhi.w	Obj30_Delete
0000CDE0 6000 0000                  		bra.w	DisplaySprite
0000CDE4                            ; ===========================================================================
0000CDE4                            
0000CDE4                            Obj30_Delete:
0000CDE4 6000 0000                  		bra.w	DeleteObject
0000CDE8                            ; ===========================================================================
0000CDE8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000CDEA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000CDEC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000CDEE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000CDF0 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000CDF2                            
0000CDF2 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000CDF5 0400 01                    		dc.b 4,	0, 1
0000CDF8 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000CDFB 0800 01                    		dc.b 8,	0, 1
0000CDFE                            ; ===========================================================================
0000CDFE                            
0000CDFE                            Obj30_Main:				; XREF: Obj30_Index
0000CDFE 45F9 0000 CDF2             		lea	(Obj30_Vars1).l,a2
0000CE04 7201                       		moveq	#1,d1
0000CE06 117C 0048 0016             		move.b	#$48,$16(a0)
0000CE0C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000CE12 6500                       		bcs.s	loc_B40C	; if yes, branch
0000CE14 45F9 0000 CDF8             		lea	(Obj30_Vars2).l,a2
0000CE1A 7201                       		moveq	#1,d1
0000CE1C 117C 0038 0016             		move.b	#$38,$16(a0)
0000CE22                            
0000CE22                            loc_B40C:
0000CE22 2248                       		movea.l	a0,a1
0000CE24 6000                       		bra.s	Obj30_Load	; load main object
0000CE26                            ; ===========================================================================
0000CE26                            
0000CE26                            Obj30_Loop:
0000CE26 6100 0000                  		bsr.w	SingleObjLoad2
0000CE2A 6600                       		bne.s	loc_B480
0000CE2C                            
0000CE2C                            Obj30_Load:				; XREF: Obj30_Main
0000CE2C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE30 12BC 0030                  		move.b	#$30,0(a1)
0000CE34 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE3A 101A                       		move.b	(a2)+,d0
0000CE3C 4880                       		ext.w	d0
0000CE3E D068 000C                  		add.w	$C(a0),d0
0000CE42 3340 000C                  		move.w	d0,$C(a1)
0000CE46 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000CE4E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000CE54 137C 0004 0001             		move.b	#4,1(a1)
0000CE5A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CE60 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CE66 137C 0020 0019             		move.b	#$20,$19(a1)
0000CE6C 137C 0004 0018             		move.b	#4,$18(a1)
0000CE72 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CE76 2348 003C                  		move.l	a0,$3C(a1)
0000CE7A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000CE7E                            
0000CE7E 137C 0010 0019             		move.b	#$10,$19(a1)
0000CE84 137C 0003 0018             		move.b	#3,$18(a1)
0000CE8A 5029 0028                  		addq.b	#8,$28(a1)
0000CE8E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000CE94                            
0000CE94                            loc_B480:
0000CE94 317C 0090 0032             		move.w	#$90,$32(a0)
0000CE9A 08E8 0004 0001             		bset	#4,1(a0)
0000CEA0                            
0000CEA0                            Obj30_Block012:				; XREF: Obj30_Index
0000CEA0 6100 0000                  		bsr.w	Obj30_Types
0000CEA4 323C 002B                  		move.w	#$2B,d1
0000CEA8 343C 0048                  		move.w	#$48,d2
0000CEAC 363C 0049                  		move.w	#$49,d3
0000CEB0 3828 0008                  		move.w	8(a0),d4
0000CEB4 6000 0000                  		bra.w	SolidObject
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj30_Reflect012:			; XREF: Obj30_Index
0000CEB8 2268 003C                  		movea.l	$3C(a0),a1
0000CEBC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEC2 6000 0000                  		bra.w	Obj30_Types
0000CEC6                            ; ===========================================================================
0000CEC6                            
0000CEC6                            Obj30_Block34:				; XREF: Obj30_Index
0000CEC6 6100 0000                  		bsr.w	Obj30_Types
0000CECA 323C 002B                  		move.w	#$2B,d1
0000CECE 343C 0038                  		move.w	#$38,d2
0000CED2 363C 0039                  		move.w	#$39,d3
0000CED6 3828 0008                  		move.w	8(a0),d4
0000CEDA 6000 0000                  		bra.w	SolidObject
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000CEDE 2268 003C                  		movea.l	$3C(a0),a1
0000CEE2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000CEE8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000CEEE 6000 0002                  		bra.w	*+4
0000CEF2                            
0000CEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEF2                            
0000CEF2                            
0000CEF2                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000CEF2 7000                       		moveq	#0,d0
0000CEF4 1028 0028                  		move.b	$28(a0),d0
0000CEF8 0240 0007                  		andi.w	#7,d0
0000CEFC D040                       		add.w	d0,d0
0000CEFE 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000CF02 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000CF06                            ; End of function Obj30_Types
0000CF06                            
0000CF06                            ; ===========================================================================
0000CF06 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000CF08 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000CF0A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000CF0C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000CF0E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000CF10 4E75                       		rts	
0000CF12                            ; ===========================================================================
0000CF12                            
0000CF12                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000CF12 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF16 323C 0040                  		move.w	#$40,d1
0000CF1A 6000                       		bra.s	loc_B514
0000CF1C                            ; ===========================================================================
0000CF1C                            
0000CF1C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000CF1C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF20 323C 0040                  		move.w	#$40,d1
0000CF24 4440                       		neg.w	d0
0000CF26 D041                       		add.w	d1,d0
0000CF28                            
0000CF28                            loc_B514:				; XREF: Obj30_Type01
0000CF28 0828 0003 0028             		btst	#3,$28(a0)
0000CF2E 6700                       		beq.s	loc_B526
0000CF30 4440                       		neg.w	d0
0000CF32 D041                       		add.w	d1,d0
0000CF34 E208                       		lsr.b	#1,d0
0000CF36 0640 0020                  		addi.w	#$20,d0
0000CF3A                            
0000CF3A                            loc_B526:
0000CF3A 6000 0000                  		bra.w	loc_B5EE
0000CF3E                            ; ===========================================================================
0000CF3E                            
0000CF3E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000CF3E 0828 0003 0028             		btst	#3,$28(a0)
0000CF44 6700                       		beq.s	loc_B53E
0000CF46 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CF4A 0440 0010                  		subi.w	#$10,d0
0000CF4E 6000 0000                  		bra.w	loc_B5EE
0000CF52                            ; ===========================================================================
0000CF52                            
0000CF52                            loc_B53E:
0000CF52 0828 0003 0022             		btst	#3,$22(a0)
0000CF58 6600                       		bne.s	loc_B54E
0000CF5A 08A8 0000 0034             		bclr	#0,$34(a0)
0000CF60 6000                       		bra.s	loc_B582
0000CF62                            ; ===========================================================================
0000CF62                            
0000CF62                            loc_B54E:
0000CF62 4A28 0034                  		tst.b	$34(a0)
0000CF66 6600                       		bne.s	loc_B582
0000CF68 117C 0001 0034             		move.b	#1,$34(a0)
0000CF6E 08E8 0000 0035             		bset	#0,$35(a0)
0000CF74 6700                       		beq.s	loc_B582
0000CF76 08E8 0007 0034             		bset	#7,$34(a0)
0000CF7C 317C 0010 0036             		move.w	#$10,$36(a0)
0000CF82 117C 000A 0038             		move.b	#$A,$38(a0)
0000CF88 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CF8E 6600                       		bne.s	loc_B582
0000CF90 317C 0040 0036             		move.w	#$40,$36(a0)
0000CF96                            
0000CF96                            loc_B582:
0000CF96 4A28 0034                  		tst.b	$34(a0)
0000CF9A 6A00                       		bpl.s	loc_B5AA
0000CF9C 4A28 0038                  		tst.b	$38(a0)
0000CFA0 6700                       		beq.s	loc_B594
0000CFA2 5328 0038                  		subq.b	#1,$38(a0)
0000CFA6 6600                       		bne.s	loc_B5AA
0000CFA8                            
0000CFA8                            loc_B594:
0000CFA8 4A68 0032                  		tst.w	$32(a0)
0000CFAC 6700                       		beq.s	loc_B5A4
0000CFAE 5368 0032                  		subq.w	#1,$32(a0)
0000CFB2 5368 0036                  		subq.w	#1,$36(a0)
0000CFB6 6600                       		bne.s	loc_B5AA
0000CFB8                            
0000CFB8                            loc_B5A4:
0000CFB8 08A8 0007 0034             		bclr	#7,$34(a0)
0000CFBE                            
0000CFBE                            loc_B5AA:
0000CFBE 3028 0032                  		move.w	$32(a0),d0
0000CFC2 6000                       		bra.s	loc_B5EE
0000CFC4                            ; ===========================================================================
0000CFC4                            
0000CFC4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CFC4 0828 0003 0028             		btst	#3,$28(a0)
0000CFCA 6700                       		beq.s	Obj30_ChkSwitch
0000CFCC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CFD0 0440 0010                  		subi.w	#$10,d0
0000CFD4 6000                       		bra.s	loc_B5EE
0000CFD6                            ; ===========================================================================
0000CFD6                            
0000CFD6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CFD6 4A28 0034                  		tst.b	$34(a0)
0000CFDA 6600                       		bne.s	loc_B5E0
0000CFDC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CFE0 7000                       		moveq	#0,d0
0000CFE2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CFE6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CFE8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CFEC 6700                       		beq.s	loc_B5EA	; if not, branch
0000CFEE 117C 0001 0034             		move.b	#1,$34(a0)
0000CFF4                            
0000CFF4                            loc_B5E0:
0000CFF4 4A68 0032                  		tst.w	$32(a0)
0000CFF8 6700                       		beq.s	loc_B5EA
0000CFFA 5568 0032                  		subq.w	#2,$32(a0)
0000CFFE                            
0000CFFE                            loc_B5EA:
0000CFFE 3028 0032                  		move.w	$32(a0),d0
0000D002                            
0000D002                            loc_B5EE:
0000D002 3228 0030                  		move.w	$30(a0),d1
0000D006 9240                       		sub.w	d0,d1
0000D008 3141 000C                  		move.w	d1,$C(a0)
0000D00C 4E75                       		rts	
0000D00E                            ; ===========================================================================
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E                            Map_obj30:
0000D00E                            	include "_maps\obj30.asm"
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E 0000                       		dc.w byte_B600-Map_obj30
0000D010 0000                       		dc.w byte_B63D-Map_obj30
0000D012 0000                       		dc.w byte_B648-Map_obj30
0000D014 0C                         byte_B600:	dc.b $C
0000D015 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000D01A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000D01F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000D024 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000D029 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000D02E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000D033 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000D038 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000D03D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000D042 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000D047 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000D04C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000D051 02                         byte_B63D:	dc.b 2
0000D052 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000D057 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000D05C 0A                         byte_B648:	dc.b $A
0000D05D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000D062 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000D067 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000D06C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000D071 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000D076 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000D07B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000D080 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000D085 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000D08A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000D090 00                         		even
0000D090 00                         		even
0000D090                            
0000D090                            ; ===========================================================================
0000D090                            ; ---------------------------------------------------------------------------
0000D090                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D090                            ; ---------------------------------------------------------------------------
0000D090                            
0000D090                            Obj31:					; XREF: Obj_Index
0000D090 7000                       		moveq	#0,d0
0000D092 1028 0024                  		move.b	$24(a0),d0
0000D096 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000D09A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000D09E                            ; ===========================================================================
0000D09E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000D0A0 0000                       		dc.w loc_B798-Obj31_Index
0000D0A2 0000                       		dc.w loc_B7FE-Obj31_Index
0000D0A4 0000                       		dc.w Obj31_Display2-Obj31_Index
0000D0A6 0000                       		dc.w loc_B7E2-Obj31_Index
0000D0A8                            
0000D0A8 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D0AA 0100                       		dc.b 1,	0
0000D0AC                            
0000D0AC 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000D0AF 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000D0B2 08CC 03                    		dc.b 8,	$CC, 3
0000D0B5 06F0 02                    		dc.b 6,	$F0, 2
0000D0B8                            
0000D0B8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D0BC 5000 7800                  		dc.w $5000, $7800
0000D0C0 3800 5800                  		dc.w $3800, $5800
0000D0C4 B800                       		dc.w $B800
0000D0C6                            ; ===========================================================================
0000D0C6                            
0000D0C6                            Obj31_Main:				; XREF: Obj31_Index
0000D0C6 7000                       		moveq	#0,d0
0000D0C8 1028 0028                  		move.b	$28(a0),d0
0000D0CC 6A00                       		bpl.s	loc_B6CE
0000D0CE 0240 007F                  		andi.w	#$7F,d0
0000D0D2 D040                       		add.w	d0,d0
0000D0D4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000D0D8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000D0DC 101A                       		move.b	(a2)+,d0
0000D0DE 1140 0028                  		move.b	d0,$28(a0)
0000D0E2                            
0000D0E2                            loc_B6CE:
0000D0E2 0200 000F                  		andi.b	#$F,d0
0000D0E6 D040                       		add.w	d0,d0
0000D0E8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D0EC 4A40                       		tst.w	d0
0000D0EE 6600                       		bne.s	loc_B6E0
0000D0F0 3142 0032                  		move.w	d2,$32(a0)
0000D0F4                            
0000D0F4                            loc_B6E0:
0000D0F4 45F9 0000 D0AC             		lea	(Obj31_Var).l,a2
0000D0FA 2248                       		movea.l	a0,a1
0000D0FC 7203                       		moveq	#3,d1
0000D0FE 6000                       		bra.s	Obj31_MakeStomper
0000D100                            ; ===========================================================================
0000D100                            
0000D100                            Obj31_Loop:
0000D100 6100 0000                  		bsr.w	SingleObjLoad2
0000D104 6600 0000                  		bne.w	Obj31_SetSize
0000D108                            
0000D108                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000D108 135A 0024                  		move.b	(a2)+,$24(a1)
0000D10C 12BC 0031                  		move.b	#$31,0(a1)
0000D110 3368 0008 0008             		move.w	8(a0),8(a1)
0000D116 101A                       		move.b	(a2)+,d0
0000D118 4880                       		ext.w	d0
0000D11A D068 000C                  		add.w	$C(a0),d0
0000D11E 3340 000C                  		move.w	d0,$C(a1)
0000D122 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000D12A 337C 0300 0002             		move.w	#$300,2(a1)
0000D130 137C 0004 0001             		move.b	#4,1(a1)
0000D136 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000D13C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D142 137C 0010 0019             		move.b	#$10,$19(a1)
0000D148 3342 0034                  		move.w	d2,$34(a1)
0000D14C 137C 0004 0018             		move.b	#4,$18(a1)
0000D152 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D156 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000D15C 6600                       		bne.s	loc_B76A
0000D15E 5341                       		subq.w	#1,d1
0000D160 1028 0028                  		move.b	$28(a0),d0
0000D164 0240 00F0                  		andi.w	#$F0,d0
0000D168 0C40 0020                  		cmpi.w	#$20,d0
0000D16C 679A                       		beq.s	Obj31_MakeStomper
0000D16E 137C 0038 0019             		move.b	#$38,$19(a1)
0000D174 137C 0090 0020             		move.b	#$90,$20(a1)
0000D17A 5241                       		addq.w	#1,d1
0000D17C                            
0000D17C                            loc_B76A:
0000D17C 2348 003C                  		move.l	a0,$3C(a1)
0000D180 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000D184                            
0000D184 137C 0003 0018             		move.b	#3,$18(a1)
0000D18A                            
0000D18A                            Obj31_SetSize:
0000D18A 7000                       		moveq	#0,d0
0000D18C 1028 0028                  		move.b	$28(a0),d0
0000D190 E648                       		lsr.w	#3,d0
0000D192 0200 000E                  		andi.b	#$E,d0
0000D196 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000D19A 115A 0019                  		move.b	(a2)+,$19(a0)
0000D19E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D1A2 6000                       		bra.s	loc_B798
0000D1A4                            ; ===========================================================================
0000D1A4 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000D1A6 3009                       		dc.b $30, 9
0000D1A8 100A                       		dc.b $10, $A
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            loc_B798:				; XREF: Obj31_Index
0000D1AA 6100 0000                  		bsr.w	Obj31_Types
0000D1AE 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000D1B4 7200                       		moveq	#0,d1
0000D1B6 1228 0019                  		move.b	$19(a0),d1
0000D1BA 0641 000B                  		addi.w	#$B,d1
0000D1BE 343C 000C                  		move.w	#$C,d2
0000D1C2 363C 000D                  		move.w	#$D,d3
0000D1C6 3828 0008                  		move.w	8(a0),d4
0000D1CA 6100 0000                  		bsr.w	SolidObject
0000D1CE 0828 0003 0022             		btst	#3,$22(a0)
0000D1D4 6700                       		beq.s	Obj31_Display
0000D1D6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D1DC 6400                       		bcc.s	Obj31_Display
0000D1DE 2448                       		movea.l	a0,a2
0000D1E0 41F8 D000                  		lea	($FFFFD000).w,a0
0000D1E4 4EB9 0000 0000             		jsr	KillSonic
0000D1EA 204A                       		movea.l	a2,a0
0000D1EC                            
0000D1EC                            Obj31_Display:
0000D1EC 6100 0000                  		bsr.w	DisplaySprite
0000D1F0 6000 0000                  		bra.w	Obj31_ChkDel
0000D1F4                            ; ===========================================================================
0000D1F4                            
0000D1F4                            loc_B7E2:				; XREF: Obj31_Index
0000D1F4 117C 0080 0016             		move.b	#$80,$16(a0)
0000D1FA 08E8 0004 0001             		bset	#4,1(a0)
0000D200 2268 003C                  		movea.l	$3C(a0),a1
0000D204 1029 0032                  		move.b	$32(a1),d0
0000D208 EA08                       		lsr.b	#5,d0
0000D20A 5600                       		addq.b	#3,d0
0000D20C 1140 001A                  		move.b	d0,$1A(a0)
0000D210                            
0000D210                            loc_B7FE:				; XREF: Obj31_Index
0000D210 2268 003C                  		movea.l	$3C(a0),a1
0000D214 7000                       		moveq	#0,d0
0000D216 1029 0032                  		move.b	$32(a1),d0
0000D21A D068 0030                  		add.w	$30(a0),d0
0000D21E 3140 000C                  		move.w	d0,$C(a0)
0000D222                            
0000D222                            Obj31_Display2:				; XREF: Obj31_Index
0000D222 6100 0000                  		bsr.w	DisplaySprite
0000D226                            
0000D226                            Obj31_ChkDel:				; XREF: Obj31_Display
0000D226 3028 0008                  		move.w	8(a0),d0
0000D22A 0240 FF80                  		andi.w	#$FF80,d0
0000D22E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D232 0441 0080                  		subi.w	#$80,d1
0000D236 0241 FF80                  		andi.w	#$FF80,d1
0000D23A 9041                       		sub.w	d1,d0
0000D23C 0C40 0280                  		cmpi.w	#$280,d0
0000D240 6200 0000                  		bhi.w	DeleteObject
0000D244 4E75                       		rts	
0000D246                            ; ===========================================================================
0000D246                            
0000D246                            Obj31_Types:				; XREF: loc_B798
0000D246 1028 0028                  		move.b	$28(a0),d0
0000D24A 0240 000F                  		andi.w	#$F,d0
0000D24E D040                       		add.w	d0,d0
0000D250 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000D254 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000D258                            ; ===========================================================================
0000D258 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000D25A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D25C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D25E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D260 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D262 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000D264 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000D266                            ; ===========================================================================
0000D266                            
0000D266                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000D266 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000D26A 7000                       		moveq	#0,d0
0000D26C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000D270 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D274 6700                       		beq.s	loc_B8A8	; if not, branch
0000D276 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000D27A 6A00                       		bpl.s	loc_B872
0000D27C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D282 6700                       		beq.s	loc_B8A0
0000D284                            
0000D284                            loc_B872:
0000D284 4A68 0032                  		tst.w	$32(a0)
0000D288 6700                       		beq.s	loc_B8A0
0000D28A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D28E 0200 000F                  		andi.b	#$F,d0
0000D292 6600                       		bne.s	loc_B892
0000D294 4A28 0001                  		tst.b	1(a0)
0000D298 6A00                       		bpl.s	loc_B892
0000D29A 303C 00C7                  		move.w	#$C7,d0
0000D29E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D2A4                            
0000D2A4                            loc_B892:
0000D2A4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D2AA 6400                       		bcc.s	Obj31_Restart
0000D2AC 317C 0000 0032             		move.w	#0,$32(a0)
0000D2B2                            
0000D2B2                            loc_B8A0:
0000D2B2 317C 0000 0012             		move.w	#0,$12(a0)
0000D2B8 6000                       		bra.s	Obj31_Restart
0000D2BA                            ; ===========================================================================
0000D2BA                            
0000D2BA                            loc_B8A8:				; XREF: Obj31_Type00
0000D2BA 3228 0034                  		move.w	$34(a0),d1
0000D2BE B268 0032                  		cmp.w	$32(a0),d1
0000D2C2 6700                       		beq.s	Obj31_Restart
0000D2C4 3028 0012                  		move.w	$12(a0),d0
0000D2C8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D2CE D168 0032                  		add.w	d0,$32(a0)
0000D2D2 B268 0032                  		cmp.w	$32(a0),d1
0000D2D6 6200                       		bhi.s	Obj31_Restart
0000D2D8 3141 0032                  		move.w	d1,$32(a0)
0000D2DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D2E2 4A28 0001                  		tst.b	1(a0)
0000D2E6 6A00                       		bpl.s	Obj31_Restart
0000D2E8 303C 00BD                  		move.w	#$BD,d0
0000D2EC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D2F2                            
0000D2F2                            Obj31_Restart:
0000D2F2 7000                       		moveq	#0,d0
0000D2F4 1028 0032                  		move.b	$32(a0),d0
0000D2F8 D068 0030                  		add.w	$30(a0),d0
0000D2FC 3140 000C                  		move.w	d0,$C(a0)
0000D300 4E75                       		rts	
0000D302                            ; ===========================================================================
0000D302                            
0000D302                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000D302 4A68 0036                  		tst.w	$36(a0)
0000D306 6700                       		beq.s	loc_B938
0000D308 4A68 0038                  		tst.w	$38(a0)
0000D30C 6700                       		beq.s	loc_B902
0000D30E 5368 0038                  		subq.w	#1,$38(a0)
0000D312 6000                       		bra.s	loc_B97C
0000D314                            ; ===========================================================================
0000D314                            
0000D314                            loc_B902:
0000D314 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D318 0200 000F                  		andi.b	#$F,d0
0000D31C 6600                       		bne.s	loc_B91C
0000D31E 4A28 0001                  		tst.b	1(a0)
0000D322 6A00                       		bpl.s	loc_B91C
0000D324 303C 00C7                  		move.w	#$C7,d0
0000D328 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000D32E                            
0000D32E                            loc_B91C:
0000D32E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D334 6400                       		bcc.s	loc_B97C
0000D336 317C 0000 0032             		move.w	#0,$32(a0)
0000D33C 317C 0000 0012             		move.w	#0,$12(a0)
0000D342 317C 0000 0036             		move.w	#0,$36(a0)
0000D348 6000                       		bra.s	loc_B97C
0000D34A                            ; ===========================================================================
0000D34A                            
0000D34A                            loc_B938:				; XREF: Obj31_Type01
0000D34A 3228 0034                  		move.w	$34(a0),d1
0000D34E B268 0032                  		cmp.w	$32(a0),d1
0000D352 6700                       		beq.s	loc_B97C
0000D354 3028 0012                  		move.w	$12(a0),d0
0000D358 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000D35E D168 0032                  		add.w	d0,$32(a0)
0000D362 B268 0032                  		cmp.w	$32(a0),d1
0000D366 6200                       		bhi.s	loc_B97C
0000D368 3141 0032                  		move.w	d1,$32(a0)
0000D36C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000D372 317C 0001 0036             		move.w	#1,$36(a0)
0000D378 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D37E 4A28 0001                  		tst.b	1(a0)
0000D382 6A00                       		bpl.s	loc_B97C
0000D384 303C 00BD                  		move.w	#$BD,d0
0000D388 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stomping sound
0000D38E                            
0000D38E                            loc_B97C:
0000D38E 6000 FF62                  		bra.w	Obj31_Restart
0000D392                            ; ===========================================================================
0000D392                            
0000D392                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000D392 3038 D008                  		move.w	($FFFFD008).w,d0
0000D396 9068 0008                  		sub.w	8(a0),d0
0000D39A 6400                       		bcc.s	loc_B98C
0000D39C 4440                       		neg.w	d0
0000D39E                            
0000D39E                            loc_B98C:
0000D39E 0C40 0090                  		cmpi.w	#$90,d0
0000D3A2 6400                       		bcc.s	loc_B996
0000D3A4 5228 0028                  		addq.b	#1,$28(a0)
0000D3A8                            
0000D3A8                            loc_B996:
0000D3A8 6000 FF48                  		bra.w	Obj31_Restart
0000D3AC                            ; ===========================================================================
0000D3AC                            ; ---------------------------------------------------------------------------
0000D3AC                            ; Object 45 - spiked metal block from beta version (MZ)
0000D3AC                            ; ---------------------------------------------------------------------------
0000D3AC                            
0000D3AC                            Obj45:					; XREF: Obj_Index
0000D3AC 7000                       		moveq	#0,d0
0000D3AE 1028 0024                  		move.b	$24(a0),d0
0000D3B2 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000D3B6 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000D3BA                            ; ===========================================================================
0000D3BA 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000D3BC 0000                       		dc.w Obj45_Solid-Obj45_Index
0000D3BE 0000                       		dc.w loc_BA8E-Obj45_Index
0000D3C0 0000                       		dc.w Obj45_Display-Obj45_Index
0000D3C2 0000                       		dc.w loc_BA7A-Obj45_Index
0000D3C4                            
0000D3C4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000D3C7 04E4 01                    		dc.b	4, $E4,	  1
0000D3CA 0834 03                    		dc.b	8, $34,	  3
0000D3CD 0628 02                    		dc.b	6, $28,	  2
0000D3D0                            
0000D3D0 3800                       word_B9BE:	dc.w $3800
0000D3D2 A000                       		dc.w -$6000
0000D3D4 5000                       		dc.w $5000
0000D3D6                            ; ===========================================================================
0000D3D6                            
0000D3D6                            Obj45_Main:				; XREF: Obj45_Index
0000D3D6 7000                       		moveq	#0,d0
0000D3D8 1028 0028                  		move.b	$28(a0),d0
0000D3DC D040                       		add.w	d0,d0
0000D3DE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000D3E2 45F9 0000 D3C4             		lea	(Obj45_Var).l,a2
0000D3E8 2248                       		movea.l	a0,a1
0000D3EA 7203                       		moveq	#3,d1
0000D3EC 6000                       		bra.s	Obj45_Load
0000D3EE                            ; ===========================================================================
0000D3EE                            
0000D3EE                            Obj45_Loop:
0000D3EE 6100 0000                  		bsr.w	SingleObjLoad2
0000D3F2 6600                       		bne.s	loc_BA52
0000D3F4                            
0000D3F4                            Obj45_Load:				; XREF: Obj45_Main
0000D3F4 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3F8 12BC 0045                  		move.b	#$45,0(a1)
0000D3FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D402 101A                       		move.b	(a2)+,d0
0000D404 4880                       		ext.w	d0
0000D406 D068 0008                  		add.w	8(a0),d0
0000D40A 3340 0008                  		move.w	d0,8(a1)
0000D40E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000D416 337C 0300 0002             		move.w	#$300,2(a1)
0000D41C 137C 0004 0001             		move.b	#4,1(a1)
0000D422 3369 0008 0030             		move.w	8(a1),$30(a1)
0000D428 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000D42E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000D434 137C 0020 0019             		move.b	#$20,$19(a1)
0000D43A 3342 0034                  		move.w	d2,$34(a1)
0000D43E 137C 0004 0018             		move.b	#4,$18(a1)
0000D444 0C12 0001                  		cmpi.b	#1,(a2)
0000D448 6600                       		bne.s	loc_BA40
0000D44A 137C 0091 0020             		move.b	#$91,$20(a1)
0000D450                            
0000D450                            loc_BA40:
0000D450 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D454 2348 003C                  		move.l	a0,$3C(a1)
0000D458 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000D45C                            
0000D45C 137C 0003 0018             		move.b	#3,$18(a1)
0000D462                            
0000D462                            loc_BA52:
0000D462 117C 0010 0019             		move.b	#$10,$19(a0)
0000D468                            
0000D468                            Obj45_Solid:				; XREF: Obj45_Index
0000D468 3F28 0008                  		move.w	8(a0),-(sp)
0000D46C 6100 0000                  		bsr.w	Obj45_Move
0000D470 323C 0017                  		move.w	#$17,d1
0000D474 343C 0020                  		move.w	#$20,d2
0000D478 363C 0020                  		move.w	#$20,d3
0000D47C 381F                       		move.w	(sp)+,d4
0000D47E 6100 0000                  		bsr.w	SolidObject
0000D482 6100 0000                  		bsr.w	DisplaySprite
0000D486 6000 0000                  		bra.w	Obj45_ChkDel
0000D48A                            ; ===========================================================================
0000D48A                            
0000D48A                            loc_BA7A:				; XREF: Obj45_Index
0000D48A 2268 003C                  		movea.l	$3C(a0),a1
0000D48E 1029 0032                  		move.b	$32(a1),d0
0000D492 0600 0010                  		addi.b	#$10,d0
0000D496 EA08                       		lsr.b	#5,d0
0000D498 5600                       		addq.b	#3,d0
0000D49A 1140 001A                  		move.b	d0,$1A(a0)
0000D49E                            
0000D49E                            loc_BA8E:				; XREF: Obj45_Index
0000D49E 2268 003C                  		movea.l	$3C(a0),a1
0000D4A2 7000                       		moveq	#0,d0
0000D4A4 1029 0032                  		move.b	$32(a1),d0
0000D4A8 4440                       		neg.w	d0
0000D4AA D068 0030                  		add.w	$30(a0),d0
0000D4AE 3140 0008                  		move.w	d0,8(a0)
0000D4B2                            
0000D4B2                            Obj45_Display:				; XREF: Obj45_Index
0000D4B2 6100 0000                  		bsr.w	DisplaySprite
0000D4B6                            
0000D4B6                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000D4B6 3028 003A                  		move.w	$3A(a0),d0
0000D4BA 0240 FF80                  		andi.w	#$FF80,d0
0000D4BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4C2 0441 0080                  		subi.w	#$80,d1
0000D4C6 0241 FF80                  		andi.w	#$FF80,d1
0000D4CA 9041                       		sub.w	d1,d0
0000D4CC 0C40 0280                  		cmpi.w	#$280,d0
0000D4D0 6200 0000                  		bhi.w	DeleteObject
0000D4D4 4E75                       		rts	
0000D4D6                            
0000D4D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4D6                            
0000D4D6                            
0000D4D6                            Obj45_Move:				; XREF: Obj45_Solid
0000D4D6 7000                       		moveq	#0,d0
0000D4D8 1028 0028                  		move.b	$28(a0),d0
0000D4DC D040                       		add.w	d0,d0
0000D4DE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D4E2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D4E6                            ; End of function Obj45_Move
0000D4E6                            
0000D4E6                            ; ===========================================================================
0000D4E6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D4E8 0000                       		dc.w loc_BADA-off_BAD6
0000D4EA                            ; ===========================================================================
0000D4EA                            
0000D4EA                            loc_BADA:				; XREF: off_BAD6
0000D4EA 4A68 0036                  		tst.w	$36(a0)
0000D4EE 6700                       		beq.s	loc_BB08
0000D4F0 4A68 0038                  		tst.w	$38(a0)
0000D4F4 6700                       		beq.s	loc_BAEC
0000D4F6 5368 0038                  		subq.w	#1,$38(a0)
0000D4FA 6000                       		bra.s	loc_BB3C
0000D4FC                            ; ===========================================================================
0000D4FC                            
0000D4FC                            loc_BAEC:
0000D4FC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D502 6400                       		bcc.s	loc_BB3C
0000D504 317C 0000 0032             		move.w	#0,$32(a0)
0000D50A 317C 0000 0010             		move.w	#0,$10(a0)
0000D510 317C 0000 0036             		move.w	#0,$36(a0)
0000D516 6000                       		bra.s	loc_BB3C
0000D518                            ; ===========================================================================
0000D518                            
0000D518                            loc_BB08:				; XREF: loc_BADA
0000D518 3228 0034                  		move.w	$34(a0),d1
0000D51C B268 0032                  		cmp.w	$32(a0),d1
0000D520 6700                       		beq.s	loc_BB3C
0000D522 3028 0010                  		move.w	$10(a0),d0
0000D526 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D52C D168 0032                  		add.w	d0,$32(a0)
0000D530 B268 0032                  		cmp.w	$32(a0),d1
0000D534 6200                       		bhi.s	loc_BB3C
0000D536 3141 0032                  		move.w	d1,$32(a0)
0000D53A 317C 0000 0010             		move.w	#0,$10(a0)
0000D540 317C 0001 0036             		move.w	#1,$36(a0)
0000D546 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D54C                            
0000D54C                            loc_BB3C:
0000D54C 7000                       		moveq	#0,d0
0000D54E 1028 0032                  		move.b	$32(a0),d0
0000D552 4440                       		neg.w	d0
0000D554 D068 0030                  		add.w	$30(a0),d0
0000D558 3140 0008                  		move.w	d0,8(a0)
0000D55C 4E75                       		rts	
0000D55E                            ; ===========================================================================
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            Map_obj31:
0000D55E                            	include "_maps\obj31.asm"
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E 0000                       		dc.w byte_BB64-Map_obj31
0000D560 0000                       		dc.w byte_BB7E-Map_obj31
0000D562 0000                       		dc.w byte_BB98-Map_obj31
0000D564 0000                       		dc.w byte_BB9E-Map_obj31
0000D566 0000                       		dc.w byte_BBA9-Map_obj31
0000D568 0000                       		dc.w byte_BBBE-Map_obj31
0000D56A 0000                       		dc.w byte_BBDD-Map_obj31
0000D56C 0000                       		dc.w byte_BC06-Map_obj31
0000D56E 0000                       		dc.w byte_BC06-Map_obj31
0000D570 0000                       		dc.w byte_BC39-Map_obj31
0000D572 0000                       		dc.w byte_BC53-Map_obj31
0000D574 05                         byte_BB64:	dc.b 5
0000D575 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D57A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D57F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D584 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D589 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D58E 05                         byte_BB7E:	dc.b 5
0000D58F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D594 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D599 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D59E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D5A3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D5A8 01                         byte_BB98:	dc.b 1
0000D5A9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D5AE 02                         byte_BB9E:	dc.b 2
0000D5AF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5B4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5B9 04                         byte_BBA9:	dc.b 4
0000D5BA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5BF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5C4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5C9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5CE 06                         byte_BBBE:	dc.b 6
0000D5CF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5D4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D5D9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D5DE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D5E3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D5E8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D5ED 08                         byte_BBDD:	dc.b 8
0000D5EE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D5F3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D5F8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D5FD D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D602 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D607 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D60C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D611 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D616 0A                         byte_BC06:	dc.b $A
0000D617 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D61C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D621 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D626 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D62B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D630 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D635 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D63A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D63F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D644 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D649 05                         byte_BC39:	dc.b 5
0000D64A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D64F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D654 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D659 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D65E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D663 01                         byte_BC53:	dc.b 1
0000D664 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D66A 00                         		even
0000D66A 00                         		even
0000D66A                            
0000D66A                            ; ---------------------------------------------------------------------------
0000D66A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D66A                            ; ---------------------------------------------------------------------------
0000D66A                            Map_obj45:
0000D66A                            	include "_maps\obj45.asm"
0000D66A                            ; ---------------------------------------------------------------------------
0000D66A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D66A                            ; ---------------------------------------------------------------------------
0000D66A 0000                       		dc.w byte_BC6C-Map_obj45
0000D66C 0000                       		dc.w byte_BC7C-Map_obj45
0000D66E 0000                       		dc.w byte_BC8C-Map_obj45
0000D670 0000                       		dc.w byte_BC92-Map_obj45
0000D672 0000                       		dc.w byte_BC9D-Map_obj45
0000D674 0000                       		dc.w byte_BCB2-Map_obj45
0000D676 0000                       		dc.w byte_BCD1-Map_obj45
0000D678 0000                       		dc.w byte_BCFA-Map_obj45
0000D67A 0000                       		dc.w byte_BCFA-Map_obj45
0000D67C 03                         byte_BC6C:	dc.b 3
0000D67D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D682 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D687 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D68C 03                         byte_BC7C:	dc.b 3
0000D68D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D692 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D697 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D69C 01                         byte_BC8C:	dc.b 1
0000D69D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D6A2 02                         byte_BC92:	dc.b 2
0000D6A3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6A8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6AD 04                         byte_BC9D:	dc.b 4
0000D6AE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6B3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6B8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6BD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6C2 06                         byte_BCB2:	dc.b 6
0000D6C3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6C8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6CD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6D2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6D7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6DC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D6E1 08                         byte_BCD1:	dc.b 8
0000D6E2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D6E7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D6EC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D6F1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D6F6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D6FB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D700 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D705 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D70A 08                         byte_BCFA:	dc.b 8
0000D70B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D710 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D715 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D71A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D71F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D724 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D729 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D72E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D733 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D738 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D73E 00                         		even
0000D73E 00                         		even
0000D73E                            
0000D73E                            ; ===========================================================================
0000D73E                            ; ---------------------------------------------------------------------------
0000D73E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D73E                            ; ---------------------------------------------------------------------------
0000D73E                            
0000D73E                            Obj32:					; XREF: Obj_Index
0000D73E 7000                       		moveq	#0,d0
0000D740 1028 0024                  		move.b	$24(a0),d0
0000D744 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D748 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D74C                            ; ===========================================================================
0000D74C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D74E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D750                            ; ===========================================================================
0000D750                            
0000D750                            Obj32_Main:				; XREF: Obj32_Index
0000D750 5428 0024                  		addq.b	#2,$24(a0)
0000D754 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D75C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D762 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D768 6700                       		beq.s	loc_BD60
0000D76A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D770                            
0000D770                            loc_BD60:
0000D770 117C 0004 0001             		move.b	#4,1(a0)
0000D776 117C 0010 0019             		move.b	#$10,$19(a0)
0000D77C 117C 0004 0018             		move.b	#4,$18(a0)
0000D782 5668 000C                  		addq.w	#3,$C(a0)
0000D786                            
0000D786                            Obj32_Pressed:				; XREF: Obj32_Index
0000D786 4A28 0001                  		tst.b	1(a0)
0000D78A 6A00                       		bpl.s	Obj32_Display
0000D78C 323C 001B                  		move.w	#$1B,d1
0000D790 343C 0005                  		move.w	#5,d2
0000D794 363C 0005                  		move.w	#5,d3
0000D798 3828 0008                  		move.w	8(a0),d4
0000D79C 6100 0000                  		bsr.w	SolidObject
0000D7A0 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D7A6 1028 0028                  		move.b	$28(a0),d0
0000D7AA 0240 000F                  		andi.w	#$F,d0
0000D7AE 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D7B2 47F3 0000                  		lea	(a3,d0.w),a3
0000D7B6 7600                       		moveq	#0,d3
0000D7B8 0828 0006 0028             		btst	#6,$28(a0)
0000D7BE 6700                       		beq.s	loc_BDB2
0000D7C0 7607                       		moveq	#7,d3
0000D7C2                            
0000D7C2                            loc_BDB2:
0000D7C2 4A28 0028                  		tst.b	$28(a0)
0000D7C6 6A00                       		bpl.s	loc_BDBE
0000D7C8 6100 0000                  		bsr.w	Obj32_MZBlock
0000D7CC 6600                       		bne.s	loc_BDC8
0000D7CE                            
0000D7CE                            loc_BDBE:
0000D7CE 4A28 0025                  		tst.b	$25(a0)
0000D7D2 6600                       		bne.s	loc_BDC8
0000D7D4 0793                       		bclr	d3,(a3)
0000D7D6 6000                       		bra.s	loc_BDDE
0000D7D8                            ; ===========================================================================
0000D7D8                            
0000D7D8                            loc_BDC8:
0000D7D8 4A13                       		tst.b	(a3)
0000D7DA 6600                       		bne.s	loc_BDD6
0000D7DC 303C 00CD                  		move.w	#$CD,d0
0000D7E0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play switch sound
0000D7E6                            
0000D7E6                            loc_BDD6:
0000D7E6 07D3                       		bset	d3,(a3)
0000D7E8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D7EE                            
0000D7EE                            loc_BDDE:
0000D7EE 0828 0005 0028             		btst	#5,$28(a0)
0000D7F4 6700                       		beq.s	Obj32_Display
0000D7F6 5328 001E                  		subq.b	#1,$1E(a0)
0000D7FA 6A00                       		bpl.s	Obj32_Display
0000D7FC 117C 0007 001E             		move.b	#7,$1E(a0)
0000D802 0868 0001 001A             		bchg	#1,$1A(a0)
0000D808                            
0000D808                            Obj32_Display:
0000D808 6100 0000                  		bsr.w	DisplaySprite
0000D80C 3028 0008                  		move.w	8(a0),d0
0000D810 0240 FF80                  		andi.w	#$FF80,d0
0000D814 3238 F700                  		move.w	($FFFFF700).w,d1
0000D818 0441 0080                  		subi.w	#$80,d1
0000D81C 0241 FF80                  		andi.w	#$FF80,d1
0000D820 9041                       		sub.w	d1,d0
0000D822 0C40 0280                  		cmpi.w	#$280,d0
0000D826 6200 0000                  		bhi.w	Obj32_Delete
0000D82A 4E75                       		rts	
0000D82C                            ; ===========================================================================
0000D82C                            
0000D82C                            Obj32_Delete:
0000D82C 6100 0000                  		bsr.w	DeleteObject
0000D830 4E75                       		rts	
0000D832                            
0000D832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D832                            
0000D832                            
0000D832                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D832 3F03                       		move.w	d3,-(sp)
0000D834 3428 0008                  		move.w	8(a0),d2
0000D838 3628 000C                  		move.w	$C(a0),d3
0000D83C 0442 0010                  		subi.w	#$10,d2
0000D840 5143                       		subq.w	#8,d3
0000D842 383C 0020                  		move.w	#$20,d4
0000D846 3A3C 0010                  		move.w	#$10,d5
0000D84A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D84E 3C3C 005F                  		move.w	#$5F,d6
0000D852                            
0000D852                            Obj32_MZLoop:
0000D852 4A29 0001                  		tst.b	1(a1)
0000D856 6A00                       		bpl.s	loc_BE4E
0000D858 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D85C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D85E                            
0000D85E                            loc_BE4E:
0000D85E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D862 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D866                            
0000D866 361F                       		move.w	(sp)+,d3
0000D868 7000                       		moveq	#0,d0
0000D86A                            
0000D86A                            locret_BE5A:
0000D86A 4E75                       		rts	
0000D86C                            ; ===========================================================================
0000D86C 1010                       Obj32_MZData:	dc.b $10, $10
0000D86E                            ; ===========================================================================
0000D86E                            
0000D86E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D86E 7001                       		moveq	#1,d0
0000D870 0240 003F                  		andi.w	#$3F,d0
0000D874 D040                       		add.w	d0,d0
0000D876 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D87A 121A                       		move.b	(a2)+,d1
0000D87C 4881                       		ext.w	d1
0000D87E 3029 0008                  		move.w	8(a1),d0
0000D882 9041                       		sub.w	d1,d0
0000D884 9042                       		sub.w	d2,d0
0000D886 6400                       		bcc.s	loc_BE80
0000D888 D241                       		add.w	d1,d1
0000D88A D041                       		add.w	d1,d0
0000D88C 6500                       		bcs.s	loc_BE84
0000D88E 60CE                       		bra.s	loc_BE4E
0000D890                            ; ===========================================================================
0000D890                            
0000D890                            loc_BE80:
0000D890 B044                       		cmp.w	d4,d0
0000D892 62CA                       		bhi.s	loc_BE4E
0000D894                            
0000D894                            loc_BE84:
0000D894 121A                       		move.b	(a2)+,d1
0000D896 4881                       		ext.w	d1
0000D898 3029 000C                  		move.w	$C(a1),d0
0000D89C 9041                       		sub.w	d1,d0
0000D89E 9043                       		sub.w	d3,d0
0000D8A0 6400                       		bcc.s	loc_BE9A
0000D8A2 D241                       		add.w	d1,d1
0000D8A4 D041                       		add.w	d1,d0
0000D8A6 6500                       		bcs.s	loc_BE9E
0000D8A8 60B4                       		bra.s	loc_BE4E
0000D8AA                            ; ===========================================================================
0000D8AA                            
0000D8AA                            loc_BE9A:
0000D8AA B045                       		cmp.w	d5,d0
0000D8AC 62B0                       		bhi.s	loc_BE4E
0000D8AE                            
0000D8AE                            loc_BE9E:
0000D8AE 361F                       		move.w	(sp)+,d3
0000D8B0 7001                       		moveq	#1,d0
0000D8B2 4E75                       		rts	
0000D8B4                            ; End of function Obj32_MZBlock
0000D8B4                            
0000D8B4                            ; ===========================================================================
0000D8B4                            ; ---------------------------------------------------------------------------
0000D8B4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8B4                            ; ---------------------------------------------------------------------------
0000D8B4                            Map_obj32:
0000D8B4                            	include "_maps\obj32.asm"
0000D8B4                            ; ---------------------------------------------------------------------------
0000D8B4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D8B4                            ; ---------------------------------------------------------------------------
0000D8B4 0000                       		dc.w byte_BEAC-Map_obj32
0000D8B6 0000                       		dc.w byte_BEB7-Map_obj32
0000D8B8 0000                       		dc.w byte_BEC2-Map_obj32
0000D8BA 0000                       		dc.w byte_BEB7-Map_obj32
0000D8BC 02                         byte_BEAC:	dc.b 2
0000D8BD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D8C2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D8C7 02                         byte_BEB7:	dc.b 2
0000D8C8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D8CD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D8D2 02                         byte_BEC2:	dc.b 2
0000D8D3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D8D8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D8DD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8E2                            		even
0000D8E2                            		even
0000D8E2                            
0000D8E2                            ; ===========================================================================
0000D8E2                            ; ---------------------------------------------------------------------------
0000D8E2                            ; Object 33 - pushable blocks (MZ, LZ)
0000D8E2                            ; ---------------------------------------------------------------------------
0000D8E2                            
0000D8E2                            Obj33:					; XREF: Obj_Index
0000D8E2 7000                       		moveq	#0,d0
0000D8E4 1028 0024                  		move.b	$24(a0),d0
0000D8E8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D8EC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D8F0                            ; ===========================================================================
0000D8F0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D8F2 0000                       		dc.w loc_BF6E-Obj33_Index
0000D8F4 0000                       		dc.w loc_C02C-Obj33_Index
0000D8F6                            
0000D8F6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D8F8 4001                       		dc.b $40, 1
0000D8FA                            ; ===========================================================================
0000D8FA                            
0000D8FA                            Obj33_Main:				; XREF: Obj33_Index
0000D8FA 5428 0024                  		addq.b	#2,$24(a0)
0000D8FE 117C 000F 0016             		move.b	#$F,$16(a0)
0000D904 117C 000F 0017             		move.b	#$F,$17(a0)
0000D90A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D912 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D918 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D91E 6600                       		bne.s	loc_BF16
0000D920 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D926                            
0000D926                            loc_BF16:
0000D926 117C 0004 0001             		move.b	#4,1(a0)
0000D92C 117C 0003 0018             		move.b	#3,$18(a0)
0000D932 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D938 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D93E 7000                       		moveq	#0,d0
0000D940 1028 0028                  		move.b	$28(a0),d0
0000D944 D040                       		add.w	d0,d0
0000D946 0240 000E                  		andi.w	#$E,d0
0000D94A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D94E 115A 0019                  		move.b	(a2)+,$19(a0)
0000D952 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D956 4A28 0028                  		tst.b	$28(a0)
0000D95A 6700                       		beq.s	Obj33_ChkGone
0000D95C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D962                            
0000D962                            Obj33_ChkGone:
0000D962 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D966 7000                       		moveq	#0,d0
0000D968 1028 0023                  		move.b	$23(a0),d0
0000D96C 6700                       		beq.s	loc_BF6E
0000D96E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D974 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D97A 6600 0000                  		bne.w	DeleteObject
0000D97E                            
0000D97E                            loc_BF6E:				; XREF: Obj33_Index
0000D97E 4A28 0032                  		tst.b	$32(a0)
0000D982 6600 0000                  		bne.w	loc_C046
0000D986 7200                       		moveq	#0,d1
0000D988 1228 0019                  		move.b	$19(a0),d1
0000D98C 0641 000B                  		addi.w	#$B,d1
0000D990 343C 0010                  		move.w	#$10,d2
0000D994 363C 0011                  		move.w	#$11,d3
0000D998 3828 0008                  		move.w	8(a0),d4
0000D99C 6100 0000                  		bsr.w	loc_C186
0000D9A0 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D9A6 6600                       		bne.s	loc_BFC6	; if not, branch
0000D9A8 08A8 0007 0028             		bclr	#7,$28(a0)
0000D9AE 3028 0008                  		move.w	8(a0),d0
0000D9B2 0C40 0A20                  		cmpi.w	#$A20,d0
0000D9B6 6500                       		bcs.s	loc_BFC6
0000D9B8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D9BC 6400                       		bcc.s	loc_BFC6
0000D9BE 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D9C2 0440 001C                  		subi.w	#$1C,d0
0000D9C6 3140 000C                  		move.w	d0,$C(a0)
0000D9CA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D9D0 08E8 0007 0028             		bset	#7,$28(a0)
0000D9D6                            
0000D9D6                            loc_BFC6:
0000D9D6 3028 0008                  		move.w	8(a0),d0
0000D9DA 0240 FF80                  		andi.w	#$FF80,d0
0000D9DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D9E2 0441 0080                  		subi.w	#$80,d1
0000D9E6 0241 FF80                  		andi.w	#$FF80,d1
0000D9EA 9041                       		sub.w	d1,d0
0000D9EC 0C40 0280                  		cmpi.w	#$280,d0
0000D9F0 6200                       		bhi.s	loc_BFE6
0000D9F2 6000 0000                  		bra.w	DisplaySprite
0000D9F6                            ; ===========================================================================
0000D9F6                            
0000D9F6                            loc_BFE6:
0000D9F6 3028 0034                  		move.w	$34(a0),d0
0000D9FA 0240 FF80                  		andi.w	#$FF80,d0
0000D9FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA02 0441 0080                  		subi.w	#$80,d1
0000DA06 0241 FF80                  		andi.w	#$FF80,d1
0000DA0A 9041                       		sub.w	d1,d0
0000DA0C 0C40 0280                  		cmpi.w	#$280,d0
0000DA10 6200                       		bhi.s	loc_C016
0000DA12 3168 0034 0008             		move.w	$34(a0),8(a0)
0000DA18 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000DA1E 117C 0004 0024             		move.b	#4,$24(a0)
0000DA24 6000                       		bra.s	loc_C02C
0000DA26                            ; ===========================================================================
0000DA26                            
0000DA26                            loc_C016:
0000DA26 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA2A 7000                       		moveq	#0,d0
0000DA2C 1028 0023                  		move.b	$23(a0),d0
0000DA30 6700                       		beq.s	loc_C028
0000DA32 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DA38                            
0000DA38                            loc_C028:
0000DA38 6000 0000                  		bra.w	DeleteObject
0000DA3C                            ; ===========================================================================
0000DA3C                            
0000DA3C                            loc_C02C:				; XREF: Obj33_Index
0000DA3C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000DA40 6700                       		beq.s	locret_C044
0000DA42 117C 0002 0024             		move.b	#2,$24(a0)
0000DA48 4228 0032                  		clr.b	$32(a0)
0000DA4C 4268 0010                  		clr.w	$10(a0)
0000DA50 4268 0012                  		clr.w	$12(a0)
0000DA54                            
0000DA54                            locret_C044:
0000DA54 4E75                       		rts	
0000DA56                            ; ===========================================================================
0000DA56                            
0000DA56                            loc_C046:				; XREF: loc_BF6E
0000DA56 3F28 0008                  		move.w	8(a0),-(sp)
0000DA5A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000DA60 6400                       		bcc.s	loc_C056
0000DA62 6100 0000                  		bsr.w	SpeedToPos
0000DA66                            
0000DA66                            loc_C056:
0000DA66 0828 0001 0022             		btst	#1,$22(a0)
0000DA6C 6700                       		beq.s	loc_C0A0
0000DA6E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DA74 4EB9 0000 0000             		jsr	ObjHitFloor
0000DA7A 4A41                       		tst.w	d1
0000DA7C 6A00 0000                  		bpl.w	loc_C09E
0000DA80 D368 000C                  		add.w	d1,$C(a0)
0000DA84 4268 0012                  		clr.w	$12(a0)
0000DA88 08A8 0001 0022             		bclr	#1,$22(a0)
0000DA8E 3011                       		move.w	(a1),d0
0000DA90 0240 03FF                  		andi.w	#$3FF,d0
0000DA94 0C40 016A                  		cmpi.w	#$16A,d0
0000DA98 6500                       		bcs.s	loc_C09E
0000DA9A 3028 0030                  		move.w	$30(a0),d0
0000DA9E E640                       		asr.w	#3,d0
0000DAA0 3140 0010                  		move.w	d0,$10(a0)
0000DAA4 117C 0001 0032             		move.b	#1,$32(a0)
0000DAAA 4268 000E                  		clr.w	$E(a0)
0000DAAE                            
0000DAAE                            loc_C09E:
0000DAAE 6000                       		bra.s	loc_C0E6
0000DAB0                            ; ===========================================================================
0000DAB0                            
0000DAB0                            loc_C0A0:
0000DAB0 4A68 0010                  		tst.w	$10(a0)
0000DAB4 6700 0000                  		beq.w	loc_C0D6
0000DAB8 6B00                       		bmi.s	loc_C0BC
0000DABA 7600                       		moveq	#0,d3
0000DABC 1628 0019                  		move.b	$19(a0),d3
0000DAC0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DAC6 4A41                       		tst.w	d1		; has block touched a wall?
0000DAC8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DACA 6000                       		bra.s	loc_C0E6
0000DACC                            ; ===========================================================================
0000DACC                            
0000DACC                            loc_C0BC:
0000DACC 7600                       		moveq	#0,d3
0000DACE 1628 0019                  		move.b	$19(a0),d3
0000DAD2 4643                       		not.w	d3
0000DAD4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DADA 4A41                       		tst.w	d1		; has block touched a wall?
0000DADC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000DADE 6000                       		bra.s	loc_C0E6
0000DAE0                            ; ===========================================================================
0000DAE0                            
0000DAE0                            Obj33_StopPush:
0000DAE0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000DAE4 6000                       		bra.s	loc_C0E6
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            loc_C0D6:
0000DAE6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000DAEE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000DAF4 6400                       		bcc.s	loc_C104
0000DAF6                            
0000DAF6                            loc_C0E6:
0000DAF6 7200                       		moveq	#0,d1
0000DAF8 1228 0019                  		move.b	$19(a0),d1
0000DAFC 0641 000B                  		addi.w	#$B,d1
0000DB00 343C 0010                  		move.w	#$10,d2
0000DB04 363C 0011                  		move.w	#$11,d3
0000DB08 381F                       		move.w	(sp)+,d4
0000DB0A 6100 0000                  		bsr.w	loc_C186
0000DB0E 6100                       		bsr.s	Obj33_ChkLava
0000DB10 6000 FEC4                  		bra.w	loc_BFC6
0000DB14                            ; ===========================================================================
0000DB14                            
0000DB14                            loc_C104:
0000DB14 381F                       		move.w	(sp)+,d4
0000DB16 43F8 D000                  		lea	($FFFFD000).w,a1
0000DB1A 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB20 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB26 6000 FECE                  		bra.w	loc_BFE6
0000DB2A                            ; ===========================================================================
0000DB2A                            
0000DB2A                            Obj33_ChkLava:
0000DB2A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000DB30 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000DB32 343C FFE0                  		move.w	#-$20,d2
0000DB36 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000DB3C 6700                       		beq.s	Obj33_LoadLava
0000DB3E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000DB44 6700                       		beq.s	Obj33_LoadLava
0000DB46 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000DB4C 6700                       		beq.s	Obj33_LoadLava
0000DB4E 4E75                       		rts	
0000DB50                            ; ===========================================================================
0000DB50                            
0000DB50                            Obj33_ChkLava2:
0000DB50 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000DB56 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000DB58 343C 0020                  		move.w	#$20,d2
0000DB5C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000DB62 6700                       		beq.s	Obj33_LoadLava
0000DB64 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000DB6A 6700                       		beq.s	Obj33_LoadLava
0000DB6C                            
0000DB6C                            Obj33_NoLava:
0000DB6C 4E75                       		rts	
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            Obj33_LoadLava:
0000DB6E 6100 0000                  		bsr.w	SingleObjLoad
0000DB72 6600                       		bne.s	locret_C184
0000DB74 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000DB78 3368 0008 0008             		move.w	8(a0),8(a1)
0000DB7E D569 0008                  		add.w	d2,8(a1)
0000DB82 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DB88 0669 0010 000C             		addi.w	#$10,$C(a1)
0000DB8E 2348 003C                  		move.l	a0,$3C(a1)
0000DB92                            
0000DB92                            locret_C184:
0000DB92 4E75                       		rts	
0000DB94                            ; ===========================================================================
0000DB94                            
0000DB94                            loc_C186:				; XREF: loc_BF6E
0000DB94 1028 0025                  		move.b	$25(a0),d0
0000DB98 6700 0000                  		beq.w	loc_C218
0000DB9C 5500                       		subq.b	#2,d0
0000DB9E 6600                       		bne.s	loc_C1AA
0000DBA0 6100 B40E                  		bsr.w	ExitPlatform
0000DBA4 0829 0003 0022             		btst	#3,$22(a1)
0000DBAA 6600                       		bne.s	loc_C1A4
0000DBAC 4228 0025                  		clr.b	$25(a0)
0000DBB0 4E75                       		rts	
0000DBB2                            ; ===========================================================================
0000DBB2                            
0000DBB2                            loc_C1A4:
0000DBB2 3404                       		move.w	d4,d2
0000DBB4 6000 B958                  		bra.w	MvSonicOnPtfm
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            loc_C1AA:
0000DBB8 5500                       		subq.b	#2,d0
0000DBBA 6600                       		bne.s	loc_C1F2
0000DBBC 6100 0000                  		bsr.w	SpeedToPos
0000DBC0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DBC6 4EB9 0000 0000             		jsr	ObjHitFloor
0000DBCC 4A41                       		tst.w	d1
0000DBCE 6A00 0000                  		bpl.w	locret_C1F0
0000DBD2 D368 000C                  		add.w	d1,$C(a0)
0000DBD6 4268 0012                  		clr.w	$12(a0)
0000DBDA 4228 0025                  		clr.b	$25(a0)
0000DBDE 3011                       		move.w	(a1),d0
0000DBE0 0240 03FF                  		andi.w	#$3FF,d0
0000DBE4 0C40 016A                  		cmpi.w	#$16A,d0
0000DBE8 6500                       		bcs.s	locret_C1F0
0000DBEA 3028 0030                  		move.w	$30(a0),d0
0000DBEE E640                       		asr.w	#3,d0
0000DBF0 3140 0010                  		move.w	d0,$10(a0)
0000DBF4 117C 0001 0032             		move.b	#1,$32(a0)
0000DBFA 4268 000E                  		clr.w	$E(a0)
0000DBFE                            
0000DBFE                            locret_C1F0:
0000DBFE 4E75                       		rts	
0000DC00                            ; ===========================================================================
0000DC00                            
0000DC00                            loc_C1F2:
0000DC00 6100 0000                  		bsr.w	SpeedToPos
0000DC04 3028 0008                  		move.w	8(a0),d0
0000DC08 0240 000C                  		andi.w	#$C,d0
0000DC0C 6600 0000                  		bne.w	locret_C2E4
0000DC10 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000DC16 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000DC1C 4268 0010                  		clr.w	$10(a0)
0000DC20 5528 0025                  		subq.b	#2,$25(a0)
0000DC24 4E75                       		rts	
0000DC26                            ; ===========================================================================
0000DC26                            
0000DC26                            loc_C218:
0000DC26 6100 0000                  		bsr.w	loc_FAC8
0000DC2A 4A44                       		tst.w	d4
0000DC2C 6700 0000                  		beq.w	locret_C2E4
0000DC30 6B00 0000                  		bmi.w	locret_C2E4
0000DC34 4A28 0032                  		tst.b	$32(a0)
0000DC38 6700                       		beq.s	loc_C230
0000DC3A 6000 0000                  		bra.w	locret_C2E4
0000DC3E                            ; ===========================================================================
0000DC3E                            
0000DC3E                            loc_C230:
0000DC3E 4A40                       		tst.w	d0
0000DC40 6700 0000                  		beq.w	locret_C2E4
0000DC44 6B00                       		bmi.s	loc_C268
0000DC46 0829 0000 0022             		btst	#0,$22(a1)
0000DC4C 6600 0000                  		bne.w	locret_C2E4
0000DC50 3F00                       		move.w	d0,-(sp)
0000DC52 7600                       		moveq	#0,d3
0000DC54 1628 0019                  		move.b	$19(a0),d3
0000DC58 4EB9 0000 0000             		jsr	ObjHitWallRight
0000DC5E 301F                       		move.w	(sp)+,d0
0000DC60 4A41                       		tst.w	d1
0000DC62 6B00 0000                  		bmi.w	locret_C2E4
0000DC66 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DC6E 7001                       		moveq	#1,d0
0000DC70 323C 0040                  		move.w	#$40,d1
0000DC74 6000                       		bra.s	loc_C294
0000DC76                            ; ===========================================================================
0000DC76                            
0000DC76                            loc_C268:
0000DC76 0829 0000 0022             		btst	#0,$22(a1)
0000DC7C 6700                       		beq.s	locret_C2E4
0000DC7E 3F00                       		move.w	d0,-(sp)
0000DC80 7600                       		moveq	#0,d3
0000DC82 1628 0019                  		move.b	$19(a0),d3
0000DC86 4643                       		not.w	d3
0000DC88 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000DC8E 301F                       		move.w	(sp)+,d0
0000DC90 4A41                       		tst.w	d1
0000DC92 6B00                       		bmi.s	locret_C2E4
0000DC94 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000DC9C 70FF                       		moveq	#-1,d0
0000DC9E 323C FFC0                  		move.w	#-$40,d1
0000DCA2                            
0000DCA2                            loc_C294:
0000DCA2 43F8 D000                  		lea	($FFFFD000).w,a1
0000DCA6 D169 0008                  		add.w	d0,8(a1)
0000DCAA 3341 0014                  		move.w	d1,$14(a1)
0000DCAE 337C 0000 0010             		move.w	#0,$10(a1)
0000DCB4 3F00                       		move.w	d0,-(sp)
0000DCB6 303C 00A7                  		move.w	#$A7,d0
0000DCBA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play pushing sound
0000DCC0 301F                       		move.w	(sp)+,d0
0000DCC2 4A28 0028                  		tst.b	$28(a0)
0000DCC6 6B00                       		bmi.s	locret_C2E4
0000DCC8 3F00                       		move.w	d0,-(sp)
0000DCCA 4EB9 0000 0000             		jsr	ObjHitFloor
0000DCD0 301F                       		move.w	(sp)+,d0
0000DCD2 0C41 0004                  		cmpi.w	#4,d1
0000DCD6 6F00                       		ble.s	loc_C2E0
0000DCD8 317C 0400 0010             		move.w	#$400,$10(a0)
0000DCDE 4A40                       		tst.w	d0
0000DCE0 6A00                       		bpl.s	loc_C2D8
0000DCE2 4468 0010                  		neg.w	$10(a0)
0000DCE6                            
0000DCE6                            loc_C2D8:
0000DCE6 117C 0006 0025             		move.b	#6,$25(a0)
0000DCEC 6000                       		bra.s	locret_C2E4
0000DCEE                            ; ===========================================================================
0000DCEE                            
0000DCEE                            loc_C2E0:
0000DCEE D368 000C                  		add.w	d1,$C(a0)
0000DCF2                            
0000DCF2                            locret_C2E4:
0000DCF2 4E75                       		rts	
0000DCF4                            ; ===========================================================================
0000DCF4                            ; ---------------------------------------------------------------------------
0000DCF4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCF4                            ; ---------------------------------------------------------------------------
0000DCF4                            Map_obj33:
0000DCF4                            	include "_maps\obj33.asm"
0000DCF4                            ; ---------------------------------------------------------------------------
0000DCF4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000DCF4                            ; ---------------------------------------------------------------------------
0000DCF4 0000                       		dc.w byte_C2EA-Map_obj33
0000DCF6 0000                       		dc.w byte_C2F0-Map_obj33
0000DCF8 01                         byte_C2EA:	dc.b 1
0000DCF9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000DCFE 04                         byte_C2F0:	dc.b 4
0000DCFF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000DD04 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000DD09 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000DD0E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000DD14 00                         		even
0000DD14 00                         		even
0000DD14                            
0000DD14                            ; ===========================================================================
0000DD14                            ; ---------------------------------------------------------------------------
0000DD14                            ; Object 34 - zone title cards
0000DD14                            ; ---------------------------------------------------------------------------
0000DD14                            
0000DD14                            Obj34:					; XREF: Obj_Index
0000DD14 7000                       		moveq	#0,d0
0000DD16 1028 0024                  		move.b	$24(a0),d0
0000DD1A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000DD1E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000DD22                            ; ===========================================================================
0000DD22 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000DD24 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000DD26 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD28 0000                       		dc.w Obj34_Wait-Obj34_Index
0000DD2A                            ; ===========================================================================
0000DD2A                            
0000DD2A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000DD2A 2248                       		movea.l	a0,a1
0000DD2C 7000                       		moveq	#0,d0
0000DD2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DD32 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000DD38 6600                       		bne.s	Obj34_CheckFZ
0000DD3A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000DD3C                            
0000DD3C                            Obj34_CheckFZ:
0000DD3C 3400                       		move.w	d0,d2
0000DD3E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000DD44 6600                       		bne.s	Obj34_LoadConfig
0000DD46 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000DD48 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000DD4A                            
0000DD4A                            Obj34_LoadConfig:
0000DD4A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000DD50 E948                       		lsl.w	#4,d0
0000DD52 D6C0                       		adda.w	d0,a3
0000DD54 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000DD5A 7203                       		moveq	#3,d1
0000DD5C                            
0000DD5C                            Obj34_Loop:
0000DD5C 12BC 0034                  		move.b	#$34,0(a1)
0000DD60 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000DD64 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000DD68 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000DD6C 335A 000A                  		move.w	(a2)+,$A(a1)
0000DD70 135A 0024                  		move.b	(a2)+,$24(a1)
0000DD74 101A                       		move.b	(a2)+,d0
0000DD76 6600                       		bne.s	Obj34_ActNumber
0000DD78 1002                       		move.b	d2,d0
0000DD7A                            
0000DD7A                            Obj34_ActNumber:
0000DD7A 0C00 0007                  		cmpi.b	#7,d0
0000DD7E 6600                       		bne.s	Obj34_MakeSprite
0000DD80 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000DD84 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000DD8A 6600                       		bne.s	Obj34_MakeSprite
0000DD8C 5300                       		subq.b	#1,d0
0000DD8E                            
0000DD8E                            Obj34_MakeSprite:
0000DD8E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000DD92 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000DD9A 337C 8580 0002             		move.w	#$8580,2(a1)
0000DDA0 137C 0078 0019             		move.b	#$78,$19(a1)
0000DDA6 137C 0000 0001             		move.b	#0,1(a1)
0000DDAC 137C 0000 0018             		move.b	#0,$18(a1)
0000DDB2 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000DDB8 43E9 0040                  		lea	$40(a1),a1	; next object
0000DDBC 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000DDC0                            
0000DDC0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000DDC0 7210                       		moveq	#$10,d1		; set horizontal speed
0000DDC2 3028 0030                  		move.w	$30(a0),d0
0000DDC6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000DDCA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000DDCC 6C00                       		bge.s	Obj34_Move
0000DDCE 4441                       		neg.w	d1
0000DDD0                            
0000DDD0                            Obj34_Move:
0000DDD0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DDD4                            
0000DDD4                            loc_C3C8:
0000DDD4 3028 0008                  		move.w	8(a0),d0
0000DDD8 6B00                       		bmi.s	locret_C3D8
0000DDDA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DDDE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000DDE0 6000 0000                  		bra.w	DisplaySprite
0000DDE4                            ; ===========================================================================
0000DDE4                            
0000DDE4                            locret_C3D8:
0000DDE4 4E75                       		rts	
0000DDE6                            ; ===========================================================================
0000DDE6                            
0000DDE6                            Obj34_Wait:				; XREF: Obj34_Index
0000DDE6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000DDEA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000DDEC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000DDF0 6000 0000                  		bra.w	DisplaySprite
0000DDF4                            ; ===========================================================================
0000DDF4                            
0000DDF4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000DDF4 4A28 0001                  		tst.b	1(a0)
0000DDF8 6A00                       		bpl.s	Obj34_ChangeArt
0000DDFA 7220                       		moveq	#$20,d1
0000DDFC 3028 0032                  		move.w	$32(a0),d0
0000DE00 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000DE04 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000DE06 6C00                       		bge.s	Obj34_Move2
0000DE08 4441                       		neg.w	d1
0000DE0A                            
0000DE0A                            Obj34_Move2:
0000DE0A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DE0E 3028 0008                  		move.w	8(a0),d0
0000DE12 6B00                       		bmi.s	locret_C412
0000DE14 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DE18 6400                       		bcc.s	locret_C412	; if yes, branch
0000DE1A 6000 0000                  		bra.w	DisplaySprite
0000DE1E                            ; ===========================================================================
0000DE1E                            
0000DE1E                            locret_C412:
0000DE1E 4E75                       		rts	
0000DE20                            ; ===========================================================================
0000DE20                            
0000DE20                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000DE20 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DE26 6600                       		bne.s	Obj34_Delete
0000DE28 7002                       		moveq	#2,d0
0000DE2A 4EB9 0000 1586             		jsr	(LoadPLC).l	; load explosion patterns
0000DE30 7000                       		moveq	#0,d0
0000DE32 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DE36 0640 0015                  		addi.w	#$15,d0
0000DE3A 4EB9 0000 1586             		jsr	(LoadPLC).l	; load animal patterns
0000DE40                            
0000DE40                            Obj34_Delete:
0000DE40 6000 0000                  		bra.w	DeleteObject
0000DE44                            ; ===========================================================================
0000DE44 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000DE46 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000DE48 00E4                       		dc.w $E4
0000DE4A 0206                       		dc.b 2,	6
0000DE4C 00EA                       		dc.w $EA
0000DE4E 0207                       		dc.b 2,	7
0000DE50 00E0                       		dc.w $E0
0000DE52 020A                       		dc.b 2,	$A
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            ; Title	card configuration data
0000DE54                            ; Format:
0000DE54                            ; 4 bytes per item (YYYY XXXX)
0000DE54                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000DE64 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000DE74 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000DE84 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000DE94 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000DEA4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000DEB4 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000DEC4                            ; ===========================================================================
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000DEC4                            ; ---------------------------------------------------------------------------
0000DEC4                            
0000DEC4                            Obj39:					; XREF: Obj_Index
0000DEC4 7000                       		moveq	#0,d0
0000DEC6 1028 0024                  		move.b	$24(a0),d0
0000DECA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000DECE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000DED2                            ; ===========================================================================
0000DED2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000DED4 0000                       		dc.w loc_C50C-Obj39_Index
0000DED6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000DED8                            ; ===========================================================================
0000DED8                            
0000DED8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000DED8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DEDC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000DEDE 4E75                       		rts	
0000DEE0                            ; ===========================================================================
0000DEE0                            
0000DEE0                            Obj39_Main:
0000DEE0 5428 0024                  		addq.b	#2,$24(a0)
0000DEE4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000DEEA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000DEF0 6700                       		beq.s	loc_C4EC	; if not, branch
0000DEF2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000DEF8                            
0000DEF8                            loc_C4EC:
0000DEF8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000DEFE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000DF06 317C 855E 0002             		move.w	#$855E,2(a0)
0000DF0C 117C 0000 0001             		move.b	#0,1(a0)
0000DF12 117C 0000 0018             		move.b	#0,$18(a0)
0000DF18                            
0000DF18                            loc_C50C:				; XREF: Obj39_Index
0000DF18 7210                       		moveq	#$10,d1		; set horizontal speed
0000DF1A 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DF20 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DF22 6500                       		bcs.s	Obj39_Move
0000DF24 4441                       		neg.w	d1
0000DF26                            
0000DF26                            Obj39_Move:
0000DF26 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DF2A 6000 0000                  		bra.w	DisplaySprite
0000DF2E                            ; ===========================================================================
0000DF2E                            
0000DF2E                            Obj39_SetWait:				; XREF: Obj39_Main
0000DF2E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DF34 5428 0024                  		addq.b	#2,$24(a0)
0000DF38 4E75                       		rts	
0000DF3A                            ; ===========================================================================
0000DF3A                            
0000DF3A                            Obj39_Wait:				; XREF: Obj39_Index
0000DF3A 1038 F605                  		move.b	($FFFFF605).w,d0
0000DF3E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000DF42 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000DF44 0828 0000 001A             		btst	#0,$1A(a0)
0000DF4A 6600                       		bne.s	Obj39_Display
0000DF4C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000DF50 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000DF52 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DF56 6000 0000                  		bra.w	DisplaySprite
0000DF5A                            ; ===========================================================================
0000DF5A                            
0000DF5A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000DF5A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000DF5E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000DF60 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000DF66 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000DF6A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000DF6C 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set mode to 0 (Sega screen)
0000DF72 6000                       		bra.s	Obj39_Display
0000DF74                            ; ===========================================================================
0000DF74                            
0000DF74                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000DF74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DF7A                            
0000DF7A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000DF7A 6000 0000                  		bra.w	DisplaySprite
0000DF7E                            ; ===========================================================================
0000DF7E                            ; ---------------------------------------------------------------------------
0000DF7E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000DF7E                            ; ---------------------------------------------------------------------------
0000DF7E                            
0000DF7E                            Obj3A:					; XREF: Obj_Index
0000DF7E 7000                       		moveq	#0,d0
0000DF80 1028 0024                  		move.b	$24(a0),d0
0000DF84 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000DF88 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000DF8C                            ; ===========================================================================
0000DF8C                            Obj3A_Index:	
0000DF8C 0000                       		dc.w Obj3A_ChkPLC-Obj3A_Index
0000DF8E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000DF90 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF92 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000DF94 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF96 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000DF98 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DF9A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000DF9C 0000                       		dc.w loc_C766-Obj3A_Index
0000DF9E                            ; ===========================================================================
0000DF9E                            
0000DF9E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000DF9E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DFA2 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000DFA4 4E75                       		rts	
0000DFA6                            ; ===========================================================================
0000DFA6                            
0000DFA6                            Obj3A_Main:
0000DFA6 2248                       		movea.l	a0,a1
0000DFA8 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000DFAE 7206                       		moveq	#6,d1
0000DFB0                            
0000DFB0                            Obj3A_Loop:
0000DFB0 12BC 003A                  		move.b	#$3A,0(a1)
0000DFB4 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000DFB8 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000DFBC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DFC0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DFC4 135A 0024                  		move.b	(a2)+,$24(a1)
0000DFC8 101A                       		move.b	(a2)+,d0
0000DFCA 0C00 0006                  		cmpi.b	#6,d0
0000DFCE 6600                       		bne.s	loc_C5CA
0000DFD0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000DFD4                            
0000DFD4                            loc_C5CA:
0000DFD4 1340 001A                  		move.b	d0,$1A(a1)
0000DFD8 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000DFE0 337C 8580 0002             		move.w	#$8580,2(a1)
0000DFE6 137C 0000 0001             		move.b	#0,1(a1)
0000DFEC 43E9 0040                  		lea	$40(a1),a1
0000DFF0 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000DFF4                            
0000DFF4                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000DFF4 7210                       		moveq	#$10,d1		; set horizontal speed
0000DFF6 3028 0030                  		move.w	$30(a0),d0
0000DFFA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DFFE 6700                       		beq.s	loc_C61A	; if yes, branch
0000E000 6C00                       		bge.s	Obj3A_Move
0000E002 4441                       		neg.w	d1
0000E004                            
0000E004                            Obj3A_Move:
0000E004 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E008                            
0000E008                            loc_C5FE:				; XREF: loc_C61A
0000E008 3028 0008                  		move.w	8(a0),d0
0000E00C 6B00                       		bmi.s	locret_C60E
0000E00E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E012 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E014 6000 0000                  		bra.w	DisplaySprite
0000E018                            ; ===========================================================================
0000E018                            
0000E018                            locret_C60E:
0000E018 4E75                       		rts	
0000E01A                            ; ===========================================================================
0000E01A                            
0000E01A                            loc_C610:				; XREF: loc_C61A
0000E01A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E020 6000 0000                  		bra.w	Obj3A_ChkPos2
0000E024                            ; ===========================================================================
0000E024                            
0000E024                            loc_C61A:				; XREF: Obj3A_ChkPos
0000E024 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E02A 67EE                       		beq.s	loc_C610
0000E02C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E032 66D4                       		bne.s	loc_C5FE
0000E034 5428 0024                  		addq.b	#2,$24(a0)
0000E038 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E03E                            
0000E03E                            Obj3A_Wait:				; XREF: Obj3A_Index
0000E03E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E042 6600                       		bne.s	Obj3A_Display
0000E044 5428 0024                  		addq.b	#2,$24(a0)
0000E048                            
0000E048                            Obj3A_Display:
0000E048 6000 0000                  		bra.w	DisplaySprite
0000E04C                            ; ===========================================================================
0000E04C                            
0000E04C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000E04C 6100 0000                  		bsr.w	DisplaySprite
0000E050 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000E056 7000                       		moveq	#0,d0
0000E058 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000E05C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000E05E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E062 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000E068                            
0000E068                            Obj3A_RingBonus:
0000E068 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E06C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000E06E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E072 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E078                            
0000E078                            Obj3A_ChkBonus:
0000E078 4A40                       		tst.w	d0		; is there any bonus?
0000E07A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000E07C 303C 00C5                  		move.w	#$C5,d0
0000E080 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E086 5428 0024                  		addq.b	#2,$24(a0)
0000E08A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000E090 6600                       		bne.s	Obj3A_SetDelay
0000E092 5828 0024                  		addq.b	#4,$24(a0)
0000E096                            
0000E096                            Obj3A_SetDelay:
0000E096 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E09C                            
0000E09C                            locret_C692:
0000E09C 4E75                       		rts	
0000E09E                            ; ===========================================================================
0000E09E                            
0000E09E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000E09E 4EB9 0000 0000             		jsr	AddPoints
0000E0A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E0A8 0200 0003                  		andi.b	#3,d0
0000E0AC 66EE                       		bne.s	locret_C692
0000E0AE 303C 00CD                  		move.w	#$CD,d0
0000E0B2 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E0B8                            ; ===========================================================================
0000E0B8                            
0000E0B8                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000E0B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E0BC 0240 0007                  		andi.w	#7,d0
0000E0C0 E748                       		lsl.w	#3,d0
0000E0C2 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000E0C6 0241 0003                  		andi.w	#3,d1
0000E0CA D241                       		add.w	d1,d1
0000E0CC D041                       		add.w	d1,d0
0000E0CE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E0D2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000E0D6 4A40                       		tst.w	d0
0000E0D8 6600                       		bne.s	Obj3A_ChkSS
0000E0DA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000E0E0 6000                       		bra.s	Obj3A_Display2
0000E0E2                            ; ===========================================================================
0000E0E2                            
0000E0E2                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000E0E2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000E0E6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000E0EA 6700                       		beq.s	loc_C6EA	; if not, branch
0000E0EC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000E0F2 6000                       		bra.s	Obj3A_Display2
0000E0F4                            ; ===========================================================================
0000E0F4                            
0000E0F4                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000E0F4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E0FA                            
0000E0FA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000E0FA 6000 0000                  		bra.w	DisplaySprite
0000E0FE                            ; ===========================================================================
0000E0FE                            ; ---------------------------------------------------------------------------
0000E0FE                            ; Level	order array
0000E0FE                            ; ---------------------------------------------------------------------------
0000E0FE                            LevelOrder:
0000E0FE 0200 0000                  		dc.w $0200, $0000 	;GHZ1 -> MZ
0000E102 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E106 0101 0102                  		dc.w $0101, $0102 	;LZ1 -> LZ2 -> LZ3
0000E10A 0300 0502                  		dc.w $0300, $0502 	;LZ3 -> SLZ1 or if act 4 -> FZ
0000E10E 0201 0400                  		dc.w $0201, $0400 	;MZ1 -> MZ2 -> SYZ 
0000E112 0000 0000                  		dc.w $0000, $0000 	;Unused
0000E116 0301 0302                  		dc.w $0301, $0302 	;SLZ1 -> SLZ2 -> SLZ3
0000E11A 0500 0000                  		dc.w $0500, $0000 	;SLZ3 -> SYZ1
0000E11E 0401 0402                  		dc.w $0401, $0402 	;SYZ1 -> SYZ2 -> SYZ3
0000E122 0100 0000                  		dc.w $0100, $0000 	;SYZ3 -> LZ1?
0000E126 0501 0103                  		dc.w $0501, $0103 	;SBZ1 -> SBZ2 -> LZ4
0000E12A                            		even
0000E12A                            ; ===========================================================================
0000E12A                            
0000E12A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000E12A 7220                       		moveq	#$20,d1		; set horizontal speed
0000E12C 3028 0032                  		move.w	$32(a0),d0
0000E130 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000E134 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000E136 6C00                       		bge.s	Obj3A_Move2
0000E138 4441                       		neg.w	d1
0000E13A                            
0000E13A                            Obj3A_Move2:
0000E13A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E13E 3028 0008                  		move.w	8(a0),d0
0000E142 6B00                       		bmi.s	locret_C748
0000E144 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E148 6400                       		bcc.s	locret_C748	; if yes, branch
0000E14A 6000 0000                  		bra.w	DisplaySprite
0000E14E                            ; ===========================================================================
0000E14E                            
0000E14E                            locret_C748:
0000E14E 4E75                       		rts	
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000E150 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000E156 6600 0000                  		bne.w	DeleteObject
0000E15A 5428 0024                  		addq.b	#2,$24(a0)
0000E15E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000E162 303C 008D                  		move.w	#$8D,d0
0000E166 4EF9 0000 12C6             		jmp	(PlaySound).l	; play FZ music
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            loc_C766:				; XREF: Obj3A_Index
0000E16C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000E170 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000E176 6700 0000                  		beq.w	DeleteObject
0000E17A 4E75                       		rts	
0000E17C                            ; ===========================================================================
0000E17C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000E182 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000E184 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000E18A 0201                       		dc.b 2,	1
0000E18C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000E192 0206                       		dc.b 2,	6
0000E194 0520 0120 00EC             		dc.w $520, $120, $EC
0000E19A 0202                       		dc.b 2,	2
0000E19C 0540 0120 00FC             		dc.w $540, $120, $FC
0000E1A2 0203                       		dc.b 2,	3
0000E1A4 0560 0120 010C             		dc.w $560, $120, $10C
0000E1AA 0204                       		dc.b 2,	4
0000E1AC 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000E1B2 0205                       		dc.b 2,	5
0000E1B4                            ; ===========================================================================
0000E1B4                            ; ---------------------------------------------------------------------------
0000E1B4                            ; Object 7E - special stage results screen
0000E1B4                            ; ---------------------------------------------------------------------------
0000E1B4                            
0000E1B4                            Obj7E:					; XREF: Obj_Index
0000E1B4 7000                       		moveq	#0,d0
0000E1B6 1028 0024                  		move.b	$24(a0),d0
0000E1BA 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000E1BE 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000E1C2                            ; ===========================================================================
0000E1C2 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000E1C4 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000E1C6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1C8 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000E1CA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1CC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1CE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D0 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000E1D2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000E1D4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000E1D6 0000                       		dc.w loc_C91A-Obj7E_Index
0000E1D8                            ; ===========================================================================
0000E1D8                            
0000E1D8                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000E1D8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000E1DC 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000E1DE 4E75                       		rts	
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj7E_Main:
0000E1E0 2248                       		movea.l	a0,a1
0000E1E2 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000E1E8 7203                       		moveq	#3,d1
0000E1EA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000E1F0 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000E1F2 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E1F4                            
0000E1F4                            Obj7E_Loop:
0000E1F4 12BC 007E                  		move.b	#$7E,0(a1)
0000E1F8 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000E1FC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000E200 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000E204 135A 0024                  		move.b	(a2)+,$24(a1)
0000E208 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E20C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000E214 337C 8580 0002             		move.w	#$8580,2(a1)
0000E21A 137C 0000 0001             		move.b	#0,1(a1)
0000E220 43E9 0040                  		lea	$40(a1),a1
0000E224 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000E228                            
0000E228 7007                       		moveq	#7,d0
0000E22A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000E22E 6700                       		beq.s	loc_C842
0000E230 7000                       		moveq	#0,d0
0000E232 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E236 6600                       		bne.s	loc_C842	; if not, branch
0000E238 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E23A 317C 0018 0008             		move.w	#$18,8(a0)
0000E240 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000E246                            
0000E246                            loc_C842:
0000E246 1140 001A                  		move.b	d0,$1A(a0)
0000E24A                            
0000E24A                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000E24A 7210                       		moveq	#$10,d1		; set horizontal speed
0000E24C 3028 0030                  		move.w	$30(a0),d0
0000E250 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000E254 6700                       		beq.s	loc_C86C	; if yes, branch
0000E256 6C00                       		bge.s	Obj7E_Move
0000E258 4441                       		neg.w	d1
0000E25A                            
0000E25A                            Obj7E_Move:
0000E25A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000E25E                            
0000E25E                            loc_C85A:				; XREF: loc_C86C
0000E25E 3028 0008                  		move.w	8(a0),d0
0000E262 6B00                       		bmi.s	locret_C86A
0000E264 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E268 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E26A 6000 0000                  		bra.w	DisplaySprite
0000E26E                            ; ===========================================================================
0000E26E                            
0000E26E                            locret_C86A:
0000E26E 4E75                       		rts	
0000E270                            ; ===========================================================================
0000E270                            
0000E270                            loc_C86C:				; XREF: Obj7E_ChkPos
0000E270 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E276 66E6                       		bne.s	loc_C85A
0000E278 5428 0024                  		addq.b	#2,$24(a0)
0000E27C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E282 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000E288                            
0000E288                            Obj7E_Wait:				; XREF: Obj7E_Index
0000E288 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000E28C 6600                       		bne.s	Obj7E_Display
0000E28E 5428 0024                  		addq.b	#2,$24(a0)
0000E292                            
0000E292                            Obj7E_Display:
0000E292 6000 0000                  		bra.w	DisplaySprite
0000E296                            ; ===========================================================================
0000E296                            
0000E296                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000E296 6100 0000                  		bsr.w	DisplaySprite
0000E29A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000E2A0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000E2A4 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E2A6 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000E2AC 700A                       		moveq	#10,d0		; add 10 to score
0000E2AE 4EB9 0000 0000             		jsr	AddPoints
0000E2B4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E2B8 0200 0003                  		andi.b	#3,d0
0000E2BC 6600                       		bne.s	locret_C8EA
0000E2BE 303C 00CD                  		move.w	#$CD,d0
0000E2C2 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000E2C8                            ; ===========================================================================
0000E2C8                            
0000E2C8                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000E2C8 303C 00C5                  		move.w	#$C5,d0
0000E2CC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000E2D2 5428 0024                  		addq.b	#2,$24(a0)
0000E2D6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000E2DC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000E2E2 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E2E4 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000E2EA 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000E2EE                            
0000E2EE                            locret_C8EA:
0000E2EE 4E75                       		rts	
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            Obj7E_Exit:				; XREF: Obj7E_Index
0000E2F0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E2F6 6000 0000                  		bra.w	DisplaySprite
0000E2FA                            ; ===========================================================================
0000E2FA                            
0000E2FA                            Obj7E_Continue:				; XREF: Obj7E_Index
0000E2FA 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000E300 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000E306 303C 00BF                  		move.w	#$BF,d0
0000E30A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play continues music
0000E310 5428 0024                  		addq.b	#2,$24(a0)
0000E314 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000E31A 6000 0000                  		bra.w	DisplaySprite
0000E31E                            ; ===========================================================================
0000E31E                            
0000E31E                            loc_C91A:				; XREF: Obj7E_Index
0000E31E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E322 0200 000F                  		andi.b	#$F,d0
0000E326 6600                       		bne.s	Obj7E_Display2
0000E328 0868 0000 001A             		bchg	#0,$1A(a0)
0000E32E                            
0000E32E                            Obj7E_Display2:
0000E32E 6000 0000                  		bra.w	DisplaySprite
0000E332                            ; ===========================================================================
0000E332 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E338 0200                       		dc.b 2,	0		; rountine number, frame number
0000E33A 0320 0120 0118             		dc.w $320, $120, $118
0000E340 0201                       		dc.b 2,	1
0000E342 0360 0120 0128             		dc.w $360, $120, $128
0000E348 0202                       		dc.b 2,	2
0000E34A 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E350 0203                       		dc.b 2,	3
0000E352 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E358 0206                       		dc.b 2,	6
0000E35A                            ; ===========================================================================
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            ; Object 7F - chaos emeralds from the special stage results screen
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            
0000E35A                            Obj7F:					; XREF: Obj_Index
0000E35A 7000                       		moveq	#0,d0
0000E35C 1028 0024                  		move.b	$24(a0),d0
0000E360 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000E364 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000E368                            ; ===========================================================================
0000E368 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000E36A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000E36C                            
0000E36C                            ; ---------------------------------------------------------------------------
0000E36C                            ; X-axis positions for chaos emeralds
0000E36C                            ; ---------------------------------------------------------------------------
0000E36C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E378                            ; ===========================================================================
0000E378                            
0000E378                            Obj7F_Main:				; XREF: Obj7F_Index
0000E378 2248                       		movea.l	a0,a1
0000E37A 45F9 0000 E36C             		lea	(Obj7F_PosData).l,a2
0000E380 7400                       		moveq	#0,d2
0000E382 7200                       		moveq	#0,d1
0000E384 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000E388 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E38A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E38E                            
0000E38E                            Obj7F_Loop:
0000E38E 12BC 007F                  		move.b	#$7F,0(a1)
0000E392 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000E396 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000E39C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000E3A0 1633 2000                  		move.b	(a3,d2.w),d3
0000E3A4 1343 001A                  		move.b	d3,$1A(a1)
0000E3A8 1343 001C                  		move.b	d3,$1C(a1)
0000E3AC 5202                       		addq.b	#1,d2
0000E3AE 5429 0024                  		addq.b	#2,$24(a1)
0000E3B2 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000E3BA 337C 8541 0002             		move.w	#$8541,2(a1)
0000E3C0 137C 0000 0001             		move.b	#0,1(a1)
0000E3C6 43E9 0040                  		lea	$40(a1),a1	; next object
0000E3CA 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000E3CE                            
0000E3CE                            Obj7F_Flash:				; XREF: Obj7F_Index
0000E3CE 1028 001A                  		move.b	$1A(a0),d0
0000E3D2 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000E3D8 0C00 0006                  		cmpi.b	#6,d0
0000E3DC 6600                       		bne.s	Obj7F_Display
0000E3DE 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000E3E4                            
0000E3E4                            Obj7F_Display:
0000E3E4 6000 0000                  		bra.w	DisplaySprite
0000E3E8                            ; ===========================================================================
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            ; Sprite mappings - zone title cards
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            Map_obj34:	
0000E3E8                            
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            Map_obj39:
0000E3E8                            	include "_maps\obj34_title_card.asm"
0000E3E8                            ; --------------------------------------------------------------------------------
0000E3E8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E3E8                            ; --------------------------------------------------------------------------------
0000E3E8                            
0000E3E8                            SME_gHoYM:	
0000E3E8 0000 0000                  		dc.w SME_gHoYM_18-SME_gHoYM, SME_gHoYM_41-SME_gHoYM	
0000E3EC 0000 0000                  		dc.w SME_gHoYM_D8-SME_gHoYM, SME_gHoYM_110-SME_gHoYM	
0000E3F0 0000 0000                  		dc.w SME_gHoYM_198-SME_gHoYM, SME_gHoYM_1F8-SME_gHoYM	
0000E3F4 0000 0000                  		dc.w SME_gHoYM_253-SME_gHoYM, SME_gHoYM_272-SME_gHoYM	
0000E3F8 0000 0000                  		dc.w SME_gHoYM_27D-SME_gHoYM, SME_gHoYM_288-SME_gHoYM	
0000E3FC 0000 0000                  		dc.w SME_gHoYM_293-SME_gHoYM, SME_gHoYM_2D5-SME_gHoYM	
0000E400 08                         SME_gHoYM_18:	dc.b 8	
0000E401 F805 0042 D4               		dc.b $F8, 5, 0, $42, $D4	
0000E406 F805 0046 E4               		dc.b $F8, 5, 0, $46, $E4	
0000E40B F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
0000E410 F805 0032 04               		dc.b $F8, 5, 0, $32, 4	
0000E415 F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
0000E41A F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000E41F F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C	
0000E424 F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E429 1E                         SME_gHoYM_41:	dc.b $1E	
0000E42A F805 0032 84               		dc.b $F8, 5, 0, $32, $84	
0000E42F F805 001C 94               		dc.b $F8, 5, 0, $1C, $94	
0000E434 F800 0056 A4               		dc.b $F8, 0, 0, $56, $A4	
0000E439 F805 003E B4               		dc.b $F8, 5, 0, $3E, $B4	
0000E43E F805 001C C4               		dc.b $F8, 5, 0, $1C, $C4	
0000E443 F801 0020 D4               		dc.b $F8, 1, 0, $20, $D4	
0000E448 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	
0000E44D F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E452 F805 003E FC               		dc.b $F8, 5, 0, $3E, $FC	
0000E457 F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E45C F805 002E 1C               		dc.b $F8, 5, 0, $2E, $1C	
0000E461 F800 0056 3C               		dc.b $F8, 0, 0, $56, $3C	
0000E466 F805 004A 4C               		dc.b $F8, 5, 0, $4A, $4C	
0000E46B F805 0032 5C               		dc.b $F8, 5, 0, $32, $5C	
0000E470 F805 0046 6C               		dc.b $F8, 5, 0, $46, $6C	
0000E475 F800 0056 7C               		dc.b $F8, 0, 0, $56, $7C	
0000E47A F805 0014 8C               		dc.b $F8, 5, 0, $14, $8C	
0000E47F F805 0046 9C               		dc.b $F8, 5, 0, $46, $9C	
0000E484 F805 0008 AC               		dc.b $F8, 5, 0, 8, $AC	
0000E489 F805 0022 BC               		dc.b $F8, 5, 0, $22, $BC	
0000E48E F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E493 F805 000C DC               		dc.b $F8, 5, 0, $C, $DC	
0000E498 F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E49D F805 0046 FC               		dc.b $F8, 5, 0, $46, $FC	
0000E4A2 F805 0036 0C               		dc.b $F8, 5, 0, $36, $C	
0000E4A7 F800 0056 1C               		dc.b $F8, 0, 0, $56, $1C	
0000E4AC F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	
0000E4B1 F805 0032 3C               		dc.b $F8, 5, 0, $32, $3C	
0000E4B6 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	
0000E4BB 0BF8 0500 0C               		dc.b $B, $F8, 5, 0, $C	
0000E4C0 0B                         SME_gHoYM_D8:	dc.b $B	
0000E4C1 F805 000C A4               		dc.b $F8, 5, 0, $C, $A4	
0000E4C6 F805 004E B4               		dc.b $F8, 5, 0, $4E, $B4	
0000E4CB F801 0020 C4               		dc.b $F8, 1, 0, $20, $C4	
0000E4D0 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E4D5 F805 002E DC               		dc.b $F8, 5, 0, $2E, $DC	
0000E4DA F800 0056 EC               		dc.b $F8, 0, 0, $56, $EC	
0000E4DF F805 000C FC               		dc.b $F8, 5, 0, $C, $FC	
0000E4E4 F805 0032 0C               		dc.b $F8, 5, 0, $32, $C	
0000E4E9 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C	
0000E4EE F805 003A 2C               		dc.b $F8, 5, 0, $3A, $2C	
0000E4F3 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	
0000E4F8 1B                         SME_gHoYM_110:	dc.b $1B	
0000E4F9 F801 0020 CC               		dc.b $F8, 1, 0, $20, $CC	
0000E4FE F800 0056 D4               		dc.b $F8, 0, 0, $56, $D4	
0000E503 F805 0042 E4               		dc.b $F8, 5, 0, $42, $E4	
0000E508 F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
0000E50D F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E512 F805 002E 0C               		dc.b $F8, 5, 0, $2E, $C	
0000E517 F805 0022 1C               		dc.b $F8, 5, 0, $22, $1C	
0000E51C F800 0056 2C               		dc.b $F8, 0, 0, $56, $2C	
0000E521 F801 0020 3C               		dc.b $F8, 1, 0, $20, $3C	
0000E526 F800 0056 44               		dc.b $F8, 0, 0, $56, $44	
0000E52B F805 001C 54               		dc.b $F8, 5, 0, $1C, $54	
0000E530 F805 0000 64               		dc.b $F8, 5, 0, 0, $64	
0000E535 F805 0046 74               		dc.b $F8, 5, 0, $46, $74	
0000E53A F805 0010 84               		dc.b $F8, 5, 0, $10, $84	
0000E53F F800 0056 94               		dc.b $F8, 0, 0, $56, $94	
0000E544 F805 0000 A4               		dc.b $F8, 5, 0, 0, $A4	
0000E549 F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
0000E54E F805 0036 C4               		dc.b $F8, 5, 0, $36, $C4	
0000E553 F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E558 F805 002E E4               		dc.b $F8, 5, 0, $2E, $E4	
0000E55D F805 000C F4               		dc.b $F8, 5, 0, $C, $F4	
0000E562 F801 0020 04               		dc.b $F8, 1, 0, $20, 4	
0000E567 F805 0008 0C               		dc.b $F8, 5, 0, 8, $C	
0000E56C F801 0020 1C               		dc.b $F8, 1, 0, $20, $1C	
0000E571 F805 0042 24               		dc.b $F8, 5, 0, $42, $24	
0000E576 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	
0000E57B F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	
0000E580 13                         SME_gHoYM_198:	dc.b $13	
0000E581 F805 002A 8C               		dc.b $F8, 5, 0, $2A, $8C	
0000E586 F805 004A 9C               		dc.b $F8, 5, 0, $4A, $9C	
0000E58B F800 0056 AC               		dc.b $F8, 0, 0, $56, $AC	
0000E590 F805 0042 BC               		dc.b $F8, 5, 0, $42, $BC	
0000E595 F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	
0000E59A F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
0000E59F F805 0042 EC               		dc.b $F8, 5, 0, $42, $EC	
0000E5A4 F805 001C FC               		dc.b $F8, 5, 0, $1C, $FC	
0000E5A9 F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E5AE F805 0014 1C               		dc.b $F8, 5, 0, $14, $1C	
0000E5B3 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E5B8 F805 0010 3C               		dc.b $F8, 5, 0, $10, $3C	
0000E5BD F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E5C2 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E5C7 F805 0014 6C               		dc.b $F8, 5, 0, $14, $6C	
0000E5CC F805 0046 7C               		dc.b $F8, 5, 0, $46, $7C	
0000E5D1 F805 002E 8C               		dc.b $F8, 5, 0, $2E, $8C	
0000E5D6 F805 002E 9C               		dc.b $F8, 5, 0, $2E, $9C	
0000E5DB F805 004A AC               		dc.b $F8, 5, 0, $4A, $AC	
0000E5E0 12                         SME_gHoYM_1F8:	dc.b $12	
0000E5E1 F805 004A 84               		dc.b $F8, 5, 0, $4A, $84	
0000E5E6 F805 0032 94               		dc.b $F8, 5, 0, $32, $94	
0000E5EB F805 0046 A4               		dc.b $F8, 5, 0, $46, $A4	
0000E5F0 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	
0000E5F5 F805 0010 D4               		dc.b $F8, 5, 0, $10, $D4	
0000E5FA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
0000E5FF F801 0020 F4               		dc.b $F8, 1, 0, $20, $F4	
0000E604 F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E609 F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	
0000E60E F805 001C 1C               		dc.b $F8, 5, 0, $1C, $1C	
0000E613 F805 0010 2C               		dc.b $F8, 5, 0, $10, $2C	
0000E618 F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
0000E61D F805 0026 4C               		dc.b $F8, 5, 0, $26, $4C	
0000E622 F800 0056 5C               		dc.b $F8, 0, 0, $56, $5C	
0000E627 F805 002E 6C               		dc.b $F8, 5, 0, $2E, $6C	
0000E62C F805 0032 7C               		dc.b $F8, 5, 0, $32, $7C	
0000E631 F805 0010 8C               		dc.b $F8, 5, 0, $10, $8C	
0000E636 06F8 0500 18               		dc.b 6, $F8, 5, 0, $18	
0000E63B 06                         SME_gHoYM_253:	dc.b 6	
0000E63C F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	
0000E641 F805 001C DC               		dc.b $F8, 5, 0, $1C, $DC	
0000E646 F805 002E EC               		dc.b $F8, 5, 0, $2E, $EC	
0000E64B F805 002E FC               		dc.b $F8, 5, 0, $2E, $FC	
0000E650 F805 004A 0C               		dc.b $F8, 5, 0, $4A, $C	
0000E655 F805 0080 BC               		dc.b $F8, 5, 0, $80, $BC	
0000E65A 02                         SME_gHoYM_272:	dc.b 2	
0000E65B 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E660 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
0000E665 02                         SME_gHoYM_27D:	dc.b 2	
0000E666 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E66B F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
0000E670 02                         SME_gHoYM_288:	dc.b 2	
0000E671 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E676 F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
0000E67B 0D                         SME_gHoYM_293:	dc.b $D	
0000E67C E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
0000E681 E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
0000E686 EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
0000E68B F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
0000E690 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
0000E695 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
0000E69A 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
0000E69F FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
0000E6A4 EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
0000E6A9 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
0000E6AE FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
0000E6B3 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
0000E6B8 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
0000E6BD 05                         SME_gHoYM_2D5:	dc.b 5	
0000E6BE F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
0000E6C3 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
0000E6C8 F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
0000E6CD F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
0000E6D2 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
0000E6D8 00                         		even
0000E6D8 00                         		even
0000E6D8                            
0000E6D8                            ; ---------------------------------------------------------------------------
0000E6D8                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E6D8                            ; ---------------------------------------------------------------------------
0000E6D8                            Map_obj3A:	
0000E6D8                            	include "_maps\obj3A_passed.asm"
0000E6D8                            ; --------------------------------------------------------------------------------
0000E6D8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000E6D8                            ; --------------------------------------------------------------------------------
0000E6D8                            
0000E6D8                            SME_qMDIt:	
0000E6D8 0000 0000                  		dc.w SME_qMDIt_10-SME_qMDIt, SME_qMDIt_43-SME_qMDIt	
0000E6DC 0000 0000                  		dc.w SME_qMDIt_5D-SME_qMDIt, SME_qMDIt_7C-SME_qMDIt	
0000E6E0 0000 0000                  		dc.w SME_qMDIt_9B-SME_qMDIt, SME_qMDIt_BA-SME_qMDIt	
0000E6E4 0000 0000                  		dc.w SME_qMDIt_FC-SME_qMDIt, SME_qMDIt_107-SME_qMDIt	
0000E6E8 0A                         SME_qMDIt_10:	dc.b $A	
0000E6E9 F805 0026 B4               		dc.b $F8, 5, 0, $26, $B4	
0000E6EE F805 0032 C4               		dc.b $F8, 5, 0, $32, $C4	
0000E6F3 F805 0046 D4               		dc.b $F8, 5, 0, $46, $D4	
0000E6F8 F805 0010 E4               		dc.b $F8, 5, 0, $10, $E4	
0000E6FD F805 003A F4               		dc.b $F8, 5, 0, $3A, $F4	
0000E702 F800 0056 04               		dc.b $F8, 0, 0, $56, 4	
0000E707 F805 002A 14               		dc.b $F8, 5, 0, $2A, $14	
0000E70C F805 0010 24               		dc.b $F8, 5, 0, $10, $24	
0000E711 F805 002E 34               		dc.b $F8, 5, 0, $2E, $34	
0000E716 F805 0042 44               		dc.b $F8, 5, 0, $42, $44	
0000E71B 05                         SME_qMDIt_43:	dc.b 5	
0000E71C F805 003A D0               		dc.b $F8, 5, 0, $3A, $D0	
0000E721 F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	
0000E726 F805 0018 E8               		dc.b $F8, 5, 0, $18, $E8	
0000E72B F805 001C F8               		dc.b $F8, 5, 0, $1C, $F8	
0000E730 F805 0042 08               		dc.b $F8, 5, 0, $42, 8	
0000E735 06                         SME_qMDIt_5D:	dc.b 6	
0000E736 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0	
0000E73B F801 0162 D0               		dc.b $F8, 1, 1, $62, $D0	
0000E740 F809 0164 18               		dc.b $F8, 9, 1, $64, $18	
0000E745 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30	
0000E74A F704 006E CD               		dc.b $F7, 4, 0, $6E, $CD	
0000E74F FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD	
0000E754 06                         SME_qMDIt_7C:	dc.b 6	
0000E755 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0	
0000E75A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9	
0000E75F F704 006E F6               		dc.b $F7, 4, 0, $6E, $F6	
0000E764 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6	
0000E769 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0, $28	
0000E76E F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E773 06                         SME_qMDIt_9B:	dc.b 6	
0000E774 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0	
0000E779 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9	
0000E77E F704 006E F6               		dc.b $F7, 4, 0, $6E, $F6	
0000E783 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6	
0000E788 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8, $28	
0000E78D F801 0170 48               		dc.b $F8, 1, 1, $70, $48	
0000E792 0D                         SME_qMDIt_BA:	dc.b $D	
0000E793 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
0000E798 E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
0000E79D EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
0000E7A2 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
0000E7A7 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
0000E7AC 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
0000E7B1 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
0000E7B6 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
0000E7BB EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
0000E7C0 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
0000E7C5 FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
0000E7CA 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
0000E7CF 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
0000E7D4 02                         SME_qMDIt_FC:	dc.b 2	
0000E7D5 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E7DA F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
0000E7DF 02                         SME_qMDIt_107:	dc.b 2	
0000E7E0 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
0000E7E5 F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
0000E7EA                            		even
0000E7EA                            		even
0000E7EA                            ; ---------------------------------------------------------------------------
0000E7EA                            ; Sprite mappings - special stage results screen
0000E7EA                            ; ---------------------------------------------------------------------------
0000E7EA                            Map_obj7E:	
0000E7EA 0000                       		dc.w byte_CCAC-Map_obj7E
0000E7EC 0000                       		dc.w byte_CCEE-Map_obj7E
0000E7EE 0000                       		dc.w byte_CD0D-Map_obj7E
0000E7F0 0000                       		dc.w byte_CB47-Map_obj7E
0000E7F2 0000                       		dc.w byte_CD31-Map_obj7E
0000E7F4 0000                       		dc.w byte_CD46-Map_obj7E
0000E7F6 0000                       		dc.w byte_CD5B-Map_obj7E
0000E7F8 0000                       		dc.w byte_CD6B-Map_obj7E
0000E7FA 0000                       		dc.w byte_CDA8-Map_obj7E
0000E7FC 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E7FD F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E802 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E807 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E80C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E811 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E816 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E81B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E820 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E825 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E82A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E82F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E834 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E839 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E83E 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E83F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E844 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E849 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E84E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E853 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E858 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E85D 07                         byte_CD0D:	dc.b 7
0000E85E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E863 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E868 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E86D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E872 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E877 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E87C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E881 04                         byte_CD31:	dc.b 4
0000E882 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E887 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E88C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E891 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E896 04                         byte_CD46:	dc.b 4
0000E897 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E89C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E8A1 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E8A6 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E8AB 03                         byte_CD5B:	dc.b 3
0000E8AC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E8B1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E8B6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E8BB 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E8BC F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E8C1 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E8C6 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E8CB F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E8D0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E8D5 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E8DA F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E8DF F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E8E4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E8E9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E8EE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E8F3 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E8F8 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E8F9 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E8FE F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E903 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E908 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E90D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E912 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E917 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E91C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E921 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E926 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E92B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E930 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E935 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E93A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E93F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E944                            		even
0000E944 0D                         byte_CB47:	dc.b $D			; Oval
0000E945 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E94A E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E94F EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E954 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E959 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E95E 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E963 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E968 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E96D EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E972 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E977 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E97C 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E981 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E986 00                         		dc.b 0
0000E987                            ; ---------------------------------------------------------------------------
0000E987                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E987                            ; ---------------------------------------------------------------------------
0000E987                            Map_obj7F:
0000E987                            	include "_maps\obj7F.asm"
0000E987                            ; ---------------------------------------------------------------------------
0000E987                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E987                            ; ---------------------------------------------------------------------------
0000E987 0000                       		dc.w byte_CE02-Map_obj7F
0000E989 0000                       		dc.w byte_CE08-Map_obj7F
0000E98B 0000                       		dc.w byte_CE0E-Map_obj7F
0000E98D 0000                       		dc.w byte_CE14-Map_obj7F
0000E98F 0000                       		dc.w byte_CE1A-Map_obj7F
0000E991 0000                       		dc.w byte_CE20-Map_obj7F
0000E993 0000                       		dc.w byte_CE26-Map_obj7F
0000E995 01                         byte_CE02:	dc.b 1
0000E996 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000E99B 01                         byte_CE08:	dc.b 1
0000E99C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E9A1 01                         byte_CE0E:	dc.b 1
0000E9A2 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E9A7 01                         byte_CE14:	dc.b 1
0000E9A8 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E9AD 01                         byte_CE1A:	dc.b 1
0000E9AE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000E9B3 01                         byte_CE20:	dc.b 1
0000E9B4 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000E9B9 00                         byte_CE26:	dc.b 0			; Blank frame
0000E9BA                            		even
0000E9BA                            		even
0000E9BA                            
0000E9BA                            ; ===========================================================================
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Object 36 - spikes
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            
0000E9BA                            Obj36:					; XREF: Obj_Index
0000E9BA 7000                       		moveq	#0,d0
0000E9BC 1028 0024                  		move.b	$24(a0),d0
0000E9C0 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E9C4 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E9C8                            ; ===========================================================================
0000E9C8 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E9CA 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E9CC                            
0000E9CC 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E9CE 0110                       		dc.b 1,	$10
0000E9D0 0204                       		dc.b 2,	4
0000E9D2 031C                       		dc.b 3,	$1C
0000E9D4 0440                       		dc.b 4,	$40
0000E9D6 0510                       		dc.b 5,	$10
0000E9D8                            ; ===========================================================================
0000E9D8                            
0000E9D8                            Obj36_Main:				; XREF: Obj36_Index
0000E9D8 5428 0024                  		addq.b	#2,$24(a0)
0000E9DC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E9E4 317C 051B 0002             		move.w	#$51B,2(a0)
0000E9EA 0028 0004 0001             		ori.b	#4,1(a0)
0000E9F0 117C 0004 0018             		move.b	#4,$18(a0)
0000E9F6 1028 0028                  		move.b	$28(a0),d0
0000E9FA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA00 0240 00F0                  		andi.w	#$F0,d0
0000EA04 43F9 0000 E9CC             		lea	(Obj36_Var).l,a1
0000EA0A E648                       		lsr.w	#3,d0
0000EA0C D2C0                       		adda.w	d0,a1
0000EA0E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000EA12 1159 0019                  		move.b	(a1)+,$19(a0)
0000EA16 3168 0008 0030             		move.w	8(a0),$30(a0)
0000EA1C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000EA22                            
0000EA22                            Obj36_Solid:				; XREF: Obj36_Index
0000EA22 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000EA26 343C 0004                  		move.w	#4,d2
0000EA2A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000EA30 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000EA32 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000EA38 6600                       		bne.s	Obj36_Upright	; if not, branch
0000EA3A 343C 0014                  		move.w	#$14,d2
0000EA3E                            
0000EA3E                            ; Spikes types $1x and $5x face	sideways
0000EA3E                            
0000EA3E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000EA3E 323C 001B                  		move.w	#$1B,d1
0000EA42 3602                       		move.w	d2,d3
0000EA44 5243                       		addq.w	#1,d3
0000EA46 3828 0008                  		move.w	8(a0),d4
0000EA4A 6100 0000                  		bsr.w	SolidObject
0000EA4E 0828 0003 0022             		btst	#3,$22(a0)
0000EA54 6600                       		bne.s	Obj36_Display
0000EA56 0C44 0001                  		cmpi.w	#1,d4
0000EA5A 6700                       		beq.s	Obj36_Hurt
0000EA5C 6000                       		bra.s	Obj36_Display
0000EA5E                            ; ===========================================================================
0000EA5E                            
0000EA5E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EA5E                            
0000EA5E                            Obj36_Upright:				; XREF: Obj36_Solid
0000EA5E 7200                       		moveq	#0,d1
0000EA60 1228 0019                  		move.b	$19(a0),d1
0000EA64 0641 000B                  		addi.w	#$B,d1
0000EA68 343C 0010                  		move.w	#$10,d2
0000EA6C 363C 0011                  		move.w	#$11,d3
0000EA70 3828 0008                  		move.w	8(a0),d4
0000EA74 6100 0000                  		bsr.w	SolidObject
0000EA78 0828 0003 0022             		btst	#3,$22(a0)
0000EA7E 6600                       		bne.s	Obj36_Hurt
0000EA80 4A44                       		tst.w	d4
0000EA82 6A00                       		bpl.s	Obj36_Display
0000EA84                            
0000EA84                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000EA84 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000EA88 6600                       		bne.s	Obj36_Display	; if yes, branch
0000EA8A 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000EA8E 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000EA90 2F08                       		move.l	a0,-(sp)
0000EA92 2448                       		movea.l	a0,a2
0000EA94 41F8 D000                  		lea	($FFFFD000).w,a0
0000EA98 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000EA9E 6400                       		bcc.s	loc_CF20
0000EAA0 2628 000C                  		move.l	$C(a0),d3
0000EAA4 3028 0012                  		move.w	$12(a0),d0
0000EAA8 48C0                       		ext.l	d0
0000EAAA E180                       		asl.l	#8,d0
0000EAAC 9680                       		sub.l	d0,d3
0000EAAE 2143 000C                  		move.l	d3,$C(a0)
0000EAB2 4EB9 0000 0000             		jsr	HurtSonic
0000EAB8                            
0000EAB8                            loc_CF20:
0000EAB8 205F                       		movea.l	(sp)+,a0
0000EABA                            
0000EABA                            Obj36_Display:
0000EABA 6100 0000                  		bsr.w	DisplaySprite
0000EABE 3028 0030                  		move.w	$30(a0),d0
0000EAC2 0240 FF80                  		andi.w	#$FF80,d0
0000EAC6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EACA 0441 0080                  		subi.w	#$80,d1
0000EACE 0241 FF80                  		andi.w	#$FF80,d1
0000EAD2 9041                       		sub.w	d1,d0
0000EAD4 0C40 0280                  		cmpi.w	#$280,d0
0000EAD8 6200 0000                  		bhi.w	DeleteObject
0000EADC 4E75                       		rts	
0000EADE                            ; ===========================================================================
0000EADE                            
0000EADE                            Obj36_Type0x:				; XREF: Obj36_Solid
0000EADE 7000                       		moveq	#0,d0
0000EAE0 1028 0028                  		move.b	$28(a0),d0
0000EAE4 D040                       		add.w	d0,d0
0000EAE6 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000EAEA 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000EAEE                            ; ===========================================================================
0000EAEE 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000EAF0 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000EAF2 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000EAF4                            ; ===========================================================================
0000EAF4                            
0000EAF4                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000EAF4 4E75                       		rts			; don't move the object
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000EAF6 6100 0000                  		bsr.w	Obj36_Wait
0000EAFA 7000                       		moveq	#0,d0
0000EAFC 1028 0034                  		move.b	$34(a0),d0
0000EB00 D068 0032                  		add.w	$32(a0),d0
0000EB04 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000EB08 4E75                       		rts	
0000EB0A                            ; ===========================================================================
0000EB0A                            
0000EB0A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000EB0A 6100 0000                  		bsr.w	Obj36_Wait
0000EB0E 7000                       		moveq	#0,d0
0000EB10 1028 0034                  		move.b	$34(a0),d0
0000EB14 D068 0030                  		add.w	$30(a0),d0
0000EB18 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000EB1C 4E75                       		rts	
0000EB1E                            ; ===========================================================================
0000EB1E                            
0000EB1E                            Obj36_Wait:
0000EB1E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EB22 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EB24 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EB28 6600                       		bne.s	locret_CFE6
0000EB2A 4A28 0001                  		tst.b	1(a0)
0000EB2E 6A00                       		bpl.s	locret_CFE6
0000EB30 303C 00B6                  		move.w	#$B6,d0
0000EB34 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000EB3A 6000                       		bra.s	locret_CFE6
0000EB3C                            ; ===========================================================================
0000EB3C                            
0000EB3C                            loc_CFA4:
0000EB3C 4A68 0036                  		tst.w	$36(a0)
0000EB40 6700                       		beq.s	loc_CFC6
0000EB42 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EB48 6400                       		bcc.s	locret_CFE6
0000EB4A 317C 0000 0034             		move.w	#0,$34(a0)
0000EB50 317C 0000 0036             		move.w	#0,$36(a0)
0000EB56 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EB5C 6000                       		bra.s	locret_CFE6
0000EB5E                            ; ===========================================================================
0000EB5E                            
0000EB5E                            loc_CFC6:
0000EB5E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EB64 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EB6A 6500                       		bcs.s	locret_CFE6
0000EB6C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EB72 317C 0001 0036             		move.w	#1,$36(a0)
0000EB78 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EB7E                            
0000EB7E                            locret_CFE6:
0000EB7E 4E75                       		rts	
0000EB80                            ; ===========================================================================
0000EB80                            ; ---------------------------------------------------------------------------
0000EB80                            ; Sprite mappings - spikes
0000EB80                            ; ---------------------------------------------------------------------------
0000EB80                            Map_obj36:
0000EB80                            	include "_maps\obj36.asm"
0000EB80                            ; ---------------------------------------------------------------------------
0000EB80                            ; Sprite mappings - spikes
0000EB80                            ; ---------------------------------------------------------------------------
0000EB80 0000                       		dc.w byte_CFF4-Map_obj36
0000EB82 0000                       		dc.w byte_D004-Map_obj36
0000EB84 0000                       		dc.w byte_D014-Map_obj36
0000EB86 0000                       		dc.w byte_D01A-Map_obj36
0000EB88 0000                       		dc.w byte_D02A-Map_obj36
0000EB8A 0000                       		dc.w byte_D049-Map_obj36
0000EB8C 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000EB8D F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000EB92 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EB97 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000EB9C 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000EB9D EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000EBA2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EBA7 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000EBAC 01                         byte_D014:	dc.b 1			; 1 spike
0000EBAD F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EBB2 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000EBB3 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000EBB8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000EBBD F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000EBC2 06                         byte_D02A:	dc.b 6			; 6 spikes
0000EBC3 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000EBC8 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000EBCD F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000EBD2 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000EBD7 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000EBDC F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000EBE1 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000EBE2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000EBE8 00                         		even
0000EBE8 00                         		even
0000EBE8                            
0000EBE8                            ; ===========================================================================
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            ; Object 3B - purple rock (GHZ)
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            
0000EBE8                            Obj3B:					; XREF: Obj_Index
0000EBE8 7000                       		moveq	#0,d0
0000EBEA 1028 0024                  		move.b	$24(a0),d0
0000EBEE 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000EBF2 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000EBF6                            ; ===========================================================================
0000EBF6 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000EBF8 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000EBFA                            ; ===========================================================================
0000EBFA                            
0000EBFA                            Obj3B_Main:				; XREF: Obj3B_Index
0000EBFA 5428 0024                  		addq.b	#2,$24(a0)
0000EBFE 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000EC06 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000EC0C 117C 0004 0001             		move.b	#4,1(a0)
0000EC12 117C 0013 0019             		move.b	#$13,$19(a0)
0000EC18 117C 0004 0018             		move.b	#4,$18(a0)
0000EC1E                            
0000EC1E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000EC1E 323C 001B                  		move.w	#$1B,d1
0000EC22 343C 0010                  		move.w	#$10,d2
0000EC26 363C 0010                  		move.w	#$10,d3
0000EC2A 3828 0008                  		move.w	8(a0),d4
0000EC2E 6100 0000                  		bsr.w	SolidObject
0000EC32 6100 0000                  		bsr.w	DisplaySprite
0000EC36 3028 0008                  		move.w	8(a0),d0
0000EC3A 0240 FF80                  		andi.w	#$FF80,d0
0000EC3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC42 0441 0080                  		subi.w	#$80,d1
0000EC46 0241 FF80                  		andi.w	#$FF80,d1
0000EC4A 9041                       		sub.w	d1,d0
0000EC4C 0C40 0280                  		cmpi.w	#$280,d0
0000EC50 6200 0000                  		bhi.w	DeleteObject
0000EC54 4E75                       		rts	
0000EC56                            ; ===========================================================================
0000EC56                            ; ---------------------------------------------------------------------------
0000EC56                            ; Object 49 - waterfall	sound effect (GHZ)
0000EC56                            ; ---------------------------------------------------------------------------
0000EC56                            
0000EC56                            Obj49:					; XREF: Obj_Index
0000EC56 7000                       		moveq	#0,d0
0000EC58 1028 0024                  		move.b	$24(a0),d0
0000EC5C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000EC60 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000EC64                            ; ===========================================================================
0000EC64 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000EC66 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000EC68                            ; ===========================================================================
0000EC68                            
0000EC68                            Obj49_Main:				; XREF: Obj49_Index
0000EC68 5428 0024                  		addq.b	#2,$24(a0)
0000EC6C 117C 0004 0001             		move.b	#4,1(a0)
0000EC72                            
0000EC72                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000EC72 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000EC76 0200 003F                  		andi.b	#$3F,d0
0000EC7A 6600                       		bne.s	Obj49_ChkDel
0000EC7C 303C 00D0                  		move.w	#$D0,d0
0000EC80 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000EC86                            
0000EC86                            Obj49_ChkDel:
0000EC86 3028 0008                  		move.w	8(a0),d0
0000EC8A 0240 FF80                  		andi.w	#$FF80,d0
0000EC8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC92 0441 0080                  		subi.w	#$80,d1
0000EC96 0241 FF80                  		andi.w	#$FF80,d1
0000EC9A 9041                       		sub.w	d1,d0
0000EC9C 0C40 0280                  		cmpi.w	#$280,d0
0000ECA0 6200 0000                  		bhi.w	DeleteObject
0000ECA4 4E75                       		rts	
0000ECA6                            ; ===========================================================================
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6                            ; Sprite mappings - purple rock	(GHZ)
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6                            Map_obj3B:
0000ECA6                            	include "_maps\obj3B.asm"
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6                            ; Sprite mappings - purple rock	(GHZ)
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6 0000                       		dc.w byte_D110-Map_obj3B
0000ECA8 02                         byte_D110:	dc.b 2
0000ECA9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000ECAE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000ECB4 00                         		even
0000ECB4 00                         		even
0000ECB4                            
0000ECB4                            ; ===========================================================================
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            
0000ECB4                            Obj3C:					; XREF: Obj_Index
0000ECB4 7000                       		moveq	#0,d0
0000ECB6 1028 0024                  		move.b	$24(a0),d0
0000ECBA 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000ECBE 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000ECC2 6000 0000                  		bra.w	MarkObjGone
0000ECC6                            ; ===========================================================================
0000ECC6 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000ECC8 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000ECCA 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000ECCC                            ; ===========================================================================
0000ECCC                            
0000ECCC                            Obj3C_Main:				; XREF: Obj3C_Index
0000ECCC 5428 0024                  		addq.b	#2,$24(a0)
0000ECD0 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000ECD8 317C 450F 0002             		move.w	#$450F,2(a0)
0000ECDE 117C 0004 0001             		move.b	#4,1(a0)
0000ECE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000ECEA 117C 0004 0018             		move.b	#4,$18(a0)
0000ECF0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000ECF6                            
0000ECF6                            Obj3C_Solid:				; XREF: Obj3C_Index
0000ECF6 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000ECFC 323C 001B                  		move.w	#$1B,d1
0000ED00 343C 0020                  		move.w	#$20,d2
0000ED04 363C 0020                  		move.w	#$20,d3
0000ED08 3828 0008                  		move.w	8(a0),d4
0000ED0C 6100 0000                  		bsr.w	SolidObject
0000ED10 0828 0005 0022             		btst	#5,$22(a0)
0000ED16 6600                       		bne.s	Obj3C_ChkRoll
0000ED18                            
0000ED18                            locret_D180:
0000ED18 4E75                       		rts	
0000ED1A                            ; ===========================================================================
0000ED1A                            
0000ED1A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000ED1A                            	;	cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ED1A                            	;	bne.s	locret_D180	; if not, branch
0000ED1A 3028 0030                  		move.w	$30(a0),d0
0000ED1E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000ED20 4440                       		neg.w	d0
0000ED22                            
0000ED22                            Obj3C_ChkSpeed:
0000ED22 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000ED26 65F0                       		bcs.s	locret_D180	; if not, branch
0000ED28 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000ED2E 5869 0008                  		addq.w	#4,8(a1)
0000ED32 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000ED38 3028 0008                  		move.w	8(a0),d0
0000ED3C B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000ED40 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000ED42 5169 0008                  		subq.w	#8,8(a1)
0000ED46 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000ED4C                            
0000ED4C                            Obj3C_Smash:
0000ED4C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ED52 08A8 0005 0022             		bclr	#5,$22(a0)
0000ED58 08A9 0005 0022             		bclr	#5,$22(a1)
0000ED5E 7207                       		moveq	#7,d1		; load 8 fragments
0000ED60 343C 0070                  		move.w	#$70,d2
0000ED64 6100                       		bsr.s	SmashObject
0000ED66                            
0000ED66                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000ED66 6100 0000                  		bsr.w	SpeedToPos
0000ED6A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000ED70 6100 0000                  		bsr.w	DisplaySprite
0000ED74 4A28 0001                  		tst.b	1(a0)
0000ED78 6A00 0000                  		bpl.w	DeleteObject
0000ED7C 4E75                       		rts	
0000ED7E                            
0000ED7E                            ; ---------------------------------------------------------------------------
0000ED7E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000ED7E                            ; ---------------------------------------------------------------------------
0000ED7E                            
0000ED7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED7E                            
0000ED7E                            
0000ED7E                            SmashObject:				; XREF: Obj3C_Smash
0000ED7E 7000                       		moveq	#0,d0
0000ED80 1028 001A                  		move.b	$1A(a0),d0
0000ED84 D040                       		add.w	d0,d0
0000ED86 2668 0004                  		movea.l	4(a0),a3
0000ED8A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000ED8E 524B                       		addq.w	#1,a3
0000ED90 08E8 0005 0001             		bset	#5,1(a0)
0000ED96 1810                       		move.b	0(a0),d4
0000ED98 1A28 0001                  		move.b	1(a0),d5
0000ED9C 2248                       		movea.l	a0,a1
0000ED9E 6000                       		bra.s	Smash_LoadFrag
0000EDA0                            ; ===========================================================================
0000EDA0                            
0000EDA0                            Smash_Loop:
0000EDA0 6100 0000                  		bsr.w	SingleObjLoad
0000EDA4 6600                       		bne.s	Smash_PlaySnd
0000EDA6 5A4B                       		addq.w	#5,a3
0000EDA8                            
0000EDA8                            Smash_LoadFrag:				; XREF: SmashObject
0000EDA8 137C 0004 0024             		move.b	#4,$24(a1)
0000EDAE 1284                       		move.b	d4,0(a1)
0000EDB0 234B 0004                  		move.l	a3,4(a1)
0000EDB4 1345 0001                  		move.b	d5,1(a1)
0000EDB8 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDC4 3368 0002 0002             		move.w	2(a0),2(a1)
0000EDCA 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000EDD0 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000EDD6 335C 0010                  		move.w	(a4)+,$10(a1)
0000EDDA 335C 0012                  		move.w	(a4)+,$12(a1)
0000EDDE B3C8                       		cmpa.l	a0,a1
0000EDE0 6400                       		bcc.s	loc_D268
0000EDE2 2F08                       		move.l	a0,-(sp)
0000EDE4 2049                       		movea.l	a1,a0
0000EDE6 6100 0000                  		bsr.w	SpeedToPos
0000EDEA D568 0012                  		add.w	d2,$12(a0)
0000EDEE 205F                       		movea.l	(sp)+,a0
0000EDF0 6100 0000                  		bsr.w	DisplaySprite2
0000EDF4                            
0000EDF4                            loc_D268:
0000EDF4 51C9 FFAA                  		dbf	d1,Smash_Loop
0000EDF8                            
0000EDF8                            Smash_PlaySnd:
0000EDF8 303C 00CB                  		move.w	#$CB,d0
0000EDFC 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0000EE02                            ; End of function SmashObject
0000EE02                            
0000EE02                            ; ===========================================================================
0000EE02                            ; Smashed block	fragment speeds
0000EE02                            ;
0000EE02 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000EE06 0600 FF00                  		dc.w $600, $FF00
0000EE0A 0600 0100                  		dc.w $600, $100
0000EE0E 0400 0500                  		dc.w $400, $500
0000EE12 0600 FA00                  		dc.w $600, $FA00
0000EE16 0800 FE00                  		dc.w $800, $FE00
0000EE1A 0800 0200                  		dc.w $800, $200
0000EE1E 0600 0600                  		dc.w $600, $600
0000EE22                            
0000EE22 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000EE26 F800 FE00                  		dc.w $F800, $FE00
0000EE2A F800 0200                  		dc.w $F800, $200
0000EE2E FA00 0600                  		dc.w $FA00, $600
0000EE32 FC00 FB00                  		dc.w $FC00, $FB00
0000EE36 FA00 FF00                  		dc.w $FA00, $FF00
0000EE3A FA00 0100                  		dc.w $FA00, $100
0000EE3E FC00 0500                  		dc.w $FC00, $500
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            Map_obj3C:
0000EE42                            	include "_maps\obj3C.asm"
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42 0000                       		dc.w byte_D2BC-Map_obj3C
0000EE44 0000                       		dc.w byte_D2E5-Map_obj3C
0000EE46 0000                       		dc.w byte_D30E-Map_obj3C
0000EE48 08                         byte_D2BC:	dc.b 8
0000EE49 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000EE4E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000EE53 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000EE58 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000EE5D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EE62 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EE67 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EE6C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EE71 08                         byte_D2E5:	dc.b 8
0000EE72 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EE77 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EE7C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EE81 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EE86 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000EE8B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000EE90 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000EE95 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000EE9A 08                         byte_D30E:	dc.b 8
0000EE9B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000EEA0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000EEA5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000EEAA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000EEAF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000EEB4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000EEB9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000EEBE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000EEC4 00                         		even
0000EEC4 00                         		even
0000EEC4                            
0000EEC4                            ; ---------------------------------------------------------------------------
0000EEC4                            ; Object code loading subroutine
0000EEC4                            ; ---------------------------------------------------------------------------
0000EEC4                            
0000EEC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EEC4                            
0000EEC4                            
0000EEC4                            ObjectsLoad:				; XREF: TitleScreen; et al
0000EEC4 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000EEC8 7E7F                       		moveq	#$7F,d7
0000EECA 7000                       		moveq	#0,d0
0000EECC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000EED2 6400                       		bcc.s	loc_D362
0000EED4                            
0000EED4                            loc_D348:
0000EED4 1010                       		move.b	(a0),d0		; load object number from RAM
0000EED6 6700                       		beq.s	loc_D358
0000EED8 D040                       		add.w	d0,d0
0000EEDA D040                       		add.w	d0,d0
0000EEDC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000EEE0 4E91                       		jsr	(a1)		; run the object's code
0000EEE2 7000                       		moveq	#0,d0
0000EEE4                            
0000EEE4                            loc_D358:
0000EEE4 41E8 0040                  		lea	$40(a0),a0	; next object
0000EEE8 51CF FFEA                  		dbf	d7,loc_D348
0000EEEC 4E75                       		rts	
0000EEEE                            ; ===========================================================================
0000EEEE                            
0000EEEE                            loc_D362:
0000EEEE 0C38 000A D024                     cmpi.b  #$A,($FFFFD024).w		      ; Has Sonic drowned?
0000EEF4 67DE                               beq.s   loc_D348                        ; If so, run objects a little longer
0000EEF6 7E1F                       		moveq	#$1F,d7
0000EEF8 61DA                       		bsr.s	loc_D348
0000EEFA 7E5F                       		moveq	#$5F,d7
0000EEFC                            
0000EEFC                            loc_D368:
0000EEFC 7000                       		moveq	#0,d0
0000EEFE 1010                       		move.b	(a0),d0
0000EF00 6700                       		beq.s	loc_D378
0000EF02 4A28 0001                  		tst.b	1(a0)
0000EF06 6A00                       		bpl.s	loc_D378
0000EF08 6100 0000                  		bsr.w	DisplaySprite
0000EF0C                            
0000EF0C                            loc_D378:
0000EF0C 41E8 0040                  		lea	$40(a0),a0
0000EF10                            
0000EF10                            loc_D37C:
0000EF10 51CF FFEA                  		dbf	d7,loc_D368
0000EF14 4E75                       		rts	
0000EF16                            ; End of function ObjectsLoad
0000EF16                            
0000EF16                            ; ===========================================================================
0000EF16                            ; ---------------------------------------------------------------------------
0000EF16                            ; Object pointers
0000EF16                            ; ---------------------------------------------------------------------------
0000EF16                            Obj_Index:
0000EF16                            	include "_inc\Object pointers.asm"
0000EF16                            ; ---------------------------------------------------------------------------
0000EF16                            ; Object pointers
0000EF16                            ; ---------------------------------------------------------------------------
0000EF16 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
0000EF26 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000EF36 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000EF46 0000 0000 0000 C036 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000EF56 0000 8D1C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000EF66 0000 9342 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000EF76 0000 9B90 0000 9BF8 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000EF86 0000 A242 0000 A530 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000EF96 0000 0000 0000 B1B4 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000EFA6 0000 B4F6 0000 BB2E 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000EFB6 0000 ADEC 0000 A318 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000EFC6 0000 C6BE 0000 BD1C 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000EFD6 0000 D090 0000 D73E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000EFE6 0000 CBF4 0000 E9BA 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000EFF6 0000 DEC4 0000 DF7E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000F006 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000F016 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000F026 0000 D3AC 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000F036 0000 EC56 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000F046 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000F056 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000F066 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000F076 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000F086 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000F096 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000F0A6 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000F0B6 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000F0C6 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000F0D6 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000F0E6 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000F0F6 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000F106 0000 0000 0000 E1B4 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000F116 0000 6928 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000F126 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000F136 0000 7008 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F136 0000 7008 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000F146                            
0000F146                            ; ---------------------------------------------------------------------------
0000F146                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F146                            ; ---------------------------------------------------------------------------
0000F146                            
0000F146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F146                            
0000F146                            
0000F146                            ObjectFall:
0000F146 3028 0010                  		move.w	$10(a0),d0
0000F14A 48C0                       		ext.l	d0
0000F14C E188                       		lsl.l	#8,d0
0000F14E D1A8 0008                  		add.l	d0,8(a0)
0000F152 3028 0012                  		move.w	$12(a0),d0
0000F156 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000F15C 48C0                       		ext.l	d0
0000F15E E188                       		lsl.l	#8,d0
0000F160 D1A8 000C                  		add.l	d0,$C(a0)
0000F164 4E75                       		rts	
0000F166                            ; End of function ObjectFall
0000F166                            
0000F166                            ; ---------------------------------------------------------------------------
0000F166                            ; Subroutine translating object	speed to update	object position
0000F166                            ; ---------------------------------------------------------------------------
0000F166                            
0000F166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F166                            
0000F166                            
0000F166                            SpeedToPos:
0000F166 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000F16A 48C0                       		ext.l	d0
0000F16C E188                       		lsl.l	#8,d0		; multiply speed by $100
0000F16E D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000F172 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000F176 48C0                       		ext.l	d0
0000F178 E188                       		lsl.l	#8,d0		; multiply by $100
0000F17A D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000F17E 4E75                       		rts	
0000F180                            ; End of function SpeedToPos
0000F180                            
0000F180                            ; ---------------------------------------------------------------------------
0000F180                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000F180                            ; ---------------------------------------------------------------------------
0000F180                            
0000F180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F180                            
0000F180                            
0000F180                            DisplaySprite:
0000F180 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000F184 3028 0018                  		move.w	$18(a0),d0
0000F188 E248                       		lsr.w	#1,d0
0000F18A 0240 0380                  		andi.w	#$380,d0
0000F18E D2C0                       		adda.w	d0,a1
0000F190 0C51 007E                  		cmpi.w	#$7E,(a1)
0000F194 6400                       		bcc.s	locret_D620
0000F196 5451                       		addq.w	#2,(a1)
0000F198 D2D1                       		adda.w	(a1),a1
0000F19A 3288                       		move.w	a0,(a1)
0000F19C                            
0000F19C                            locret_D620:
0000F19C 4E75                       		rts	
0000F19E                            ; End of function DisplaySprite
0000F19E                            
0000F19E                            ; ---------------------------------------------------------------------------
0000F19E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000F19E                            ; ---------------------------------------------------------------------------
0000F19E                            
0000F19E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F19E                            
0000F19E                            
0000F19E                            DisplaySprite2:
0000F19E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000F1A2 3029 0018                  		move.w	$18(a1),d0
0000F1A6 E248                       		lsr.w	#1,d0
0000F1A8 0240 0380                  		andi.w	#$380,d0
0000F1AC D4C0                       		adda.w	d0,a2
0000F1AE 0C52 007E                  		cmpi.w	#$7E,(a2)
0000F1B2 6400                       		bcc.s	locret_D63E
0000F1B4 5452                       		addq.w	#2,(a2)
0000F1B6 D4D2                       		adda.w	(a2),a2
0000F1B8 3489                       		move.w	a1,(a2)
0000F1BA                            
0000F1BA                            locret_D63E:
0000F1BA 4E75                       		rts	
0000F1BC                            ; End of function DisplaySprite2
0000F1BC                            
0000F1BC                            ; ---------------------------------------------------------------------------
0000F1BC                            ; Subroutine to	delete an object
0000F1BC                            ; ---------------------------------------------------------------------------
0000F1BC                            
0000F1BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1BC                            
0000F1BC                            
0000F1BC                            DeleteObject:
0000F1BC 2248                       		movea.l	a0,a1
0000F1BE                            
0000F1BE                            DeleteObject2:
0000F1BE 7200                       		moveq	#0,d1
0000F1C0 700F                       		moveq	#$F,d0
0000F1C2                            
0000F1C2                            loc_D646:
0000F1C2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F1C4 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000F1C8 4E75                       		rts	
0000F1CA                            ; End of function DeleteObject
0000F1CA                            
0000F1CA                            ; ===========================================================================
0000F1CA 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000F1CE 00FF F700                  		dc.l $FFF700		; main screen x-position
0000F1D2 00FF F708                  		dc.l $FFF708		; background x-position	1
0000F1D6 00FF F718                  		dc.l $FFF718		; background x-position	2
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA                            
0000F1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1DA                            
0000F1DA                            
0000F1DA                            BuildSprites:				; XREF: TitleScreen; et al
0000F1DA 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000F1DE 7A00                       		moveq	#0,d5
0000F1E0 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000F1E4 7E07                       		moveq	#7,d7
0000F1E6                            
0000F1E6                            loc_D66A:
0000F1E6 4A54                       		tst.w	(a4)
0000F1E8 6700 0000                  		beq.w	loc_D72E
0000F1EC 7C02                       		moveq	#2,d6
0000F1EE                            
0000F1EE                            loc_D672:
0000F1EE 3074 6000                  		movea.w	(a4,d6.w),a0
0000F1F2 4A10                       		tst.b	(a0)
0000F1F4 6700 0000                  		beq.w	loc_D726
0000F1F8 08A8 0007 0001             		bclr	#7,1(a0)
0000F1FE 1028 0001                  		move.b	1(a0),d0
0000F202 1800                       		move.b	d0,d4
0000F204 0240 000C                  		andi.w	#$C,d0
0000F208 6700                       		beq.s	loc_D6DE
0000F20A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F20E 7000                       		moveq	#0,d0
0000F210 1028 0019                  		move.b	$19(a0),d0
0000F214 3628 0008                  		move.w	8(a0),d3
0000F218 9651                       		sub.w	(a1),d3
0000F21A 3203                       		move.w	d3,d1
0000F21C D240                       		add.w	d0,d1
0000F21E 6B00 0000                  		bmi.w	loc_D726
0000F222 3203                       		move.w	d3,d1
0000F224 9240                       		sub.w	d0,d1
0000F226 0C41 0140                  		cmpi.w	#$140,d1
0000F22A 6C00                       		bge.s	loc_D726
0000F22C 0643 0080                  		addi.w	#$80,d3
0000F230 0804 0004                  		btst	#4,d4
0000F234 6700                       		beq.s	loc_D6E8
0000F236 7000                       		moveq	#0,d0
0000F238 1028 0016                  		move.b	$16(a0),d0
0000F23C 3428 000C                  		move.w	$C(a0),d2
0000F240 9469 0004                  		sub.w	4(a1),d2
0000F244 3202                       		move.w	d2,d1
0000F246 D240                       		add.w	d0,d1
0000F248 6B00                       		bmi.s	loc_D726
0000F24A 3202                       		move.w	d2,d1
0000F24C 9240                       		sub.w	d0,d1
0000F24E 0C41 00E0                  		cmpi.w	#$E0,d1
0000F252 6C00                       		bge.s	loc_D726
0000F254 0642 0080                  		addi.w	#$80,d2
0000F258 6000                       		bra.s	loc_D700
0000F25A                            ; ===========================================================================
0000F25A                            
0000F25A                            loc_D6DE:
0000F25A 3428 000A                  		move.w	$A(a0),d2
0000F25E 3628 0008                  		move.w	8(a0),d3
0000F262 6000                       		bra.s	loc_D700
0000F264                            ; ===========================================================================
0000F264                            
0000F264                            loc_D6E8:
0000F264 3428 000C                  		move.w	$C(a0),d2
0000F268 9469 0004                  		sub.w	4(a1),d2
0000F26C 0642 0080                  		addi.w	#$80,d2
0000F270 0C42 0060                  		cmpi.w	#$60,d2
0000F274 6500                       		bcs.s	loc_D726
0000F276 0C42 0180                  		cmpi.w	#$180,d2
0000F27A 6400                       		bcc.s	loc_D726
0000F27C                            
0000F27C                            loc_D700:
0000F27C 2268 0004                  		movea.l	4(a0),a1
0000F280 7200                       		moveq	#0,d1
0000F282 0804 0005                  		btst	#5,d4
0000F286 6600                       		bne.s	loc_D71C
0000F288 1228 001A                  		move.b	$1A(a0),d1
0000F28C D201                       		add.b	d1,d1
0000F28E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F292 1219                       		move.b	(a1)+,d1
0000F294 5301                       		subq.b	#1,d1
0000F296 6B00                       		bmi.s	loc_D720
0000F298                            
0000F298                            loc_D71C:
0000F298 6100 0000                  		bsr.w	sub_D750
0000F29C                            
0000F29C                            loc_D720:
0000F29C 08E8 0007 0001             		bset	#7,1(a0)
0000F2A2                            
0000F2A2                            loc_D726:
0000F2A2 5446                       		addq.w	#2,d6
0000F2A4 5554                       		subq.w	#2,(a4)
0000F2A6 6600 FF46                  		bne.w	loc_D672
0000F2AA                            
0000F2AA                            loc_D72E:
0000F2AA 49EC 0080                  		lea	$80(a4),a4
0000F2AE 51CF FF36                  		dbf	d7,loc_D66A
0000F2B2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F2B6 0C05 0050                  		cmpi.b	#$50,d5
0000F2BA 6700                       		beq.s	loc_D748
0000F2BC 24BC 0000 0000             		move.l	#0,(a2)
0000F2C2 4E75                       		rts	
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            loc_D748:
0000F2C4 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F2CA 4E75                       		rts	
0000F2CC                            ; End of function BuildSprites
0000F2CC                            
0000F2CC                            
0000F2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2CC                            
0000F2CC                            
0000F2CC                            sub_D750:				; XREF: BuildSprites
0000F2CC 3668 0002                  		movea.w	2(a0),a3
0000F2D0 0804 0000                  		btst	#0,d4
0000F2D4 6600                       		bne.s	loc_D796
0000F2D6 0804 0001                  		btst	#1,d4
0000F2DA 6600 0000                  		bne.w	loc_D7E4
0000F2DE                            ; End of function sub_D750
0000F2DE                            
0000F2DE                            
0000F2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2DE                            
0000F2DE                            
0000F2DE                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F2DE 0C05 0050                  		cmpi.b	#$50,d5
0000F2E2 6700                       		beq.s	locret_D794
0000F2E4 1019                       		move.b	(a1)+,d0
0000F2E6 4880                       		ext.w	d0
0000F2E8 D042                       		add.w	d2,d0
0000F2EA 34C0                       		move.w	d0,(a2)+
0000F2EC 14D9                       		move.b	(a1)+,(a2)+
0000F2EE 5205                       		addq.b	#1,d5
0000F2F0 14C5                       		move.b	d5,(a2)+
0000F2F2 1019                       		move.b	(a1)+,d0
0000F2F4 E148                       		lsl.w	#8,d0
0000F2F6 1019                       		move.b	(a1)+,d0
0000F2F8 D04B                       		add.w	a3,d0
0000F2FA 34C0                       		move.w	d0,(a2)+
0000F2FC 1019                       		move.b	(a1)+,d0
0000F2FE 4880                       		ext.w	d0
0000F300 D043                       		add.w	d3,d0
0000F302 0240 01FF                  		andi.w	#$1FF,d0
0000F306 6600                       		bne.s	loc_D78E
0000F308 5240                       		addq.w	#1,d0
0000F30A                            
0000F30A                            loc_D78E:
0000F30A 34C0                       		move.w	d0,(a2)+
0000F30C 51C9 FFD0                  		dbf	d1,sub_D762
0000F310                            
0000F310                            locret_D794:
0000F310 4E75                       		rts	
0000F312                            ; End of function sub_D762
0000F312                            
0000F312                            ; ===========================================================================
0000F312                            
0000F312                            loc_D796:
0000F312 0804 0001                  		btst	#1,d4
0000F316 6600 0000                  		bne.w	loc_D82A
0000F31A                            
0000F31A                            loc_D79E:
0000F31A 0C05 0050                  		cmpi.b	#$50,d5
0000F31E 6700                       		beq.s	locret_D7E2
0000F320 1019                       		move.b	(a1)+,d0
0000F322 4880                       		ext.w	d0
0000F324 D042                       		add.w	d2,d0
0000F326 34C0                       		move.w	d0,(a2)+
0000F328 1819                       		move.b	(a1)+,d4
0000F32A 14C4                       		move.b	d4,(a2)+
0000F32C 5205                       		addq.b	#1,d5
0000F32E 14C5                       		move.b	d5,(a2)+
0000F330 1019                       		move.b	(a1)+,d0
0000F332 E148                       		lsl.w	#8,d0
0000F334 1019                       		move.b	(a1)+,d0
0000F336 D04B                       		add.w	a3,d0
0000F338 0A40 0800                  		eori.w	#$800,d0
0000F33C 34C0                       		move.w	d0,(a2)+
0000F33E 1019                       		move.b	(a1)+,d0
0000F340 4880                       		ext.w	d0
0000F342 4440                       		neg.w	d0
0000F344 D804                       		add.b	d4,d4
0000F346 0244 0018                  		andi.w	#$18,d4
0000F34A 5044                       		addq.w	#8,d4
0000F34C 9044                       		sub.w	d4,d0
0000F34E D043                       		add.w	d3,d0
0000F350 0240 01FF                  		andi.w	#$1FF,d0
0000F354 6600                       		bne.s	loc_D7DC
0000F356 5240                       		addq.w	#1,d0
0000F358                            
0000F358                            loc_D7DC:
0000F358 34C0                       		move.w	d0,(a2)+
0000F35A 51C9 FFBE                  		dbf	d1,loc_D79E
0000F35E                            
0000F35E                            locret_D7E2:
0000F35E 4E75                       		rts	
0000F360                            ; ===========================================================================
0000F360                            
0000F360                            loc_D7E4:				; XREF: sub_D750
0000F360 0C05 0050                  		cmpi.b	#$50,d5
0000F364 6700                       		beq.s	locret_D828
0000F366 1019                       		move.b	(a1)+,d0
0000F368 1811                       		move.b	(a1),d4
0000F36A 4880                       		ext.w	d0
0000F36C 4440                       		neg.w	d0
0000F36E E70C                       		lsl.b	#3,d4
0000F370 0244 0018                  		andi.w	#$18,d4
0000F374 5044                       		addq.w	#8,d4
0000F376 9044                       		sub.w	d4,d0
0000F378 D042                       		add.w	d2,d0
0000F37A 34C0                       		move.w	d0,(a2)+
0000F37C 14D9                       		move.b	(a1)+,(a2)+
0000F37E 5205                       		addq.b	#1,d5
0000F380 14C5                       		move.b	d5,(a2)+
0000F382 1019                       		move.b	(a1)+,d0
0000F384 E148                       		lsl.w	#8,d0
0000F386 1019                       		move.b	(a1)+,d0
0000F388 D04B                       		add.w	a3,d0
0000F38A 0A40 1000                  		eori.w	#$1000,d0
0000F38E 34C0                       		move.w	d0,(a2)+
0000F390 1019                       		move.b	(a1)+,d0
0000F392 4880                       		ext.w	d0
0000F394 D043                       		add.w	d3,d0
0000F396 0240 01FF                  		andi.w	#$1FF,d0
0000F39A 6600                       		bne.s	loc_D822
0000F39C 5240                       		addq.w	#1,d0
0000F39E                            
0000F39E                            loc_D822:
0000F39E 34C0                       		move.w	d0,(a2)+
0000F3A0 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F3A4                            
0000F3A4                            locret_D828:
0000F3A4 4E75                       		rts	
0000F3A6                            ; ===========================================================================
0000F3A6                            
0000F3A6                            loc_D82A:
0000F3A6 0C05 0050                  		cmpi.b	#$50,d5
0000F3AA 6700                       		beq.s	locret_D87C
0000F3AC 1019                       		move.b	(a1)+,d0
0000F3AE 1811                       		move.b	(a1),d4
0000F3B0 4880                       		ext.w	d0
0000F3B2 4440                       		neg.w	d0
0000F3B4 E70C                       		lsl.b	#3,d4
0000F3B6 0244 0018                  		andi.w	#$18,d4
0000F3BA 5044                       		addq.w	#8,d4
0000F3BC 9044                       		sub.w	d4,d0
0000F3BE D042                       		add.w	d2,d0
0000F3C0 34C0                       		move.w	d0,(a2)+
0000F3C2 1819                       		move.b	(a1)+,d4
0000F3C4 14C4                       		move.b	d4,(a2)+
0000F3C6 5205                       		addq.b	#1,d5
0000F3C8 14C5                       		move.b	d5,(a2)+
0000F3CA 1019                       		move.b	(a1)+,d0
0000F3CC E148                       		lsl.w	#8,d0
0000F3CE 1019                       		move.b	(a1)+,d0
0000F3D0 D04B                       		add.w	a3,d0
0000F3D2 0A40 1800                  		eori.w	#$1800,d0
0000F3D6 34C0                       		move.w	d0,(a2)+
0000F3D8 1019                       		move.b	(a1)+,d0
0000F3DA 4880                       		ext.w	d0
0000F3DC 4440                       		neg.w	d0
0000F3DE D804                       		add.b	d4,d4
0000F3E0 0244 0018                  		andi.w	#$18,d4
0000F3E4 5044                       		addq.w	#8,d4
0000F3E6 9044                       		sub.w	d4,d0
0000F3E8 D043                       		add.w	d3,d0
0000F3EA 0240 01FF                  		andi.w	#$1FF,d0
0000F3EE 6600                       		bne.s	loc_D876
0000F3F0 5240                       		addq.w	#1,d0
0000F3F2                            
0000F3F2                            loc_D876:
0000F3F2 34C0                       		move.w	d0,(a2)+
0000F3F4 51C9 FFB0                  		dbf	d1,loc_D82A
0000F3F8                            
0000F3F8                            locret_D87C:
0000F3F8 4E75                       		rts	
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            ; Subroutine to	check if an object is on the screen
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            
0000F3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3FA                            
0000F3FA                            
0000F3FA                            ChkObjOnScreen:
0000F3FA 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000F3FE 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000F402 6B00                       		bmi.s	NotOnScreen
0000F404 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F408 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F40A                            
0000F40A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000F40E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000F412 6B00                       		bmi.s	NotOnScreen
0000F414 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F418 6C00                       		bge.s	NotOnScreen	; if not, branch
0000F41A                            
0000F41A 7000                       		moveq	#0,d0		; set flag to 0
0000F41C 4E75                       		rts	
0000F41E                            ; ===========================================================================
0000F41E                            
0000F41E                            NotOnScreen:				; XREF: ChkObjOnScreen
0000F41E 7001                       		moveq	#1,d0		; set flag to 1
0000F420 4E75                       		rts	
0000F422                            ; End of function ChkObjOnScreen
0000F422                            
0000F422                            
0000F422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F422                            
0000F422                            
0000F422                            ChkObjOnScreen2:
0000F422 7200                       		moveq	#0,d1
0000F424 1228 0019                  		move.b	$19(a0),d1
0000F428 3028 0008                  		move.w	8(a0),d0
0000F42C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000F430 D041                       		add.w	d1,d0
0000F432 6B00                       		bmi.s	NotOnScreen2
0000F434 D241                       		add.w	d1,d1
0000F436 9041                       		sub.w	d1,d0
0000F438 0C40 0140                  		cmpi.w	#320,d0
0000F43C 6C00                       		bge.s	NotOnScreen2
0000F43E                            
0000F43E 3228 000C                  		move.w	$C(a0),d1
0000F442 9278 F704                  		sub.w	($FFFFF704).w,d1
0000F446 6B00                       		bmi.s	NotOnScreen2
0000F448 0C41 00E0                  		cmpi.w	#224,d1
0000F44C 6C00                       		bge.s	NotOnScreen2
0000F44E                            
0000F44E 7000                       		moveq	#0,d0
0000F450 4E75                       		rts	
0000F452                            ; ===========================================================================
0000F452                            
0000F452                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000F452 7001                       		moveq	#1,d0
0000F454 4E75                       		rts	
0000F456                            ; End of function ChkObjOnScreen2
0000F456                            
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            ; Subroutine to	load a level's objects
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            
0000F456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F456                            
0000F456                            
0000F456                            ObjPosLoad:				; XREF: Level; et al
0000F456 7000                       		moveq	#0,d0
0000F458 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000F45C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F460 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F464                            ; End of function ObjPosLoad
0000F464                            
0000F464                            ; ===========================================================================
0000F464 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F466 0000                       		dc.w OPL_Next-OPL_Index
0000F468                            ; ===========================================================================
0000F468                            
0000F468                            OPL_Main:				; XREF: OPL_Index
0000F468 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000F46C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000F470 ED08                       		lsl.b	#6,d0
0000F472 E848                       		lsr.w	#4,d0
0000F474 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F47A 2248                       		movea.l	a0,a1
0000F47C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F480 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F484 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F488 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F48C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000F490 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000F494 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F498 34FC 0101                  		move.w	#$101,(a2)+
0000F49C 303C 005E                  		move.w	#$5E,d0
0000F4A0                            
0000F4A0                            OPL_ClrList:
0000F4A0 429A                       		clr.l	(a2)+
0000F4A2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F4A6                            
0000F4A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4AA 7400                       		moveq	#0,d2
0000F4AC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F4B0 0446 0080                  		subi.w	#$80,d6
0000F4B4 6400                       		bcc.s	loc_D93C
0000F4B6 7C00                       		moveq	#0,d6
0000F4B8                            
0000F4B8                            loc_D93C:
0000F4B8 0246 FF80                  		andi.w	#$FF80,d6
0000F4BC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F4C0                            
0000F4C0                            loc_D944:
0000F4C0 BC50                       		cmp.w	(a0),d6
0000F4C2 6300                       		bls.s	loc_D956
0000F4C4 4A28 0004                  		tst.b	4(a0)
0000F4C8 6A00                       		bpl.s	loc_D952
0000F4CA 1412                       		move.b	(a2),d2
0000F4CC 5212                       		addq.b	#1,(a2)
0000F4CE                            
0000F4CE                            loc_D952:
0000F4CE 5C48                       		addq.w	#6,a0
0000F4D0 60EE                       		bra.s	loc_D944
0000F4D2                            ; ===========================================================================
0000F4D2                            
0000F4D2                            loc_D956:
0000F4D2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F4D6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F4DA 0446 0080                  		subi.w	#$80,d6
0000F4DE 6500                       		bcs.s	loc_D976
0000F4E0                            
0000F4E0                            loc_D964:
0000F4E0 BC50                       		cmp.w	(a0),d6
0000F4E2 6300                       		bls.s	loc_D976
0000F4E4 4A28 0004                  		tst.b	4(a0)
0000F4E8 6A00                       		bpl.s	loc_D972
0000F4EA 522A 0001                  		addq.b	#1,1(a2)
0000F4EE                            
0000F4EE                            loc_D972:
0000F4EE 5C48                       		addq.w	#6,a0
0000F4F0 60EE                       		bra.s	loc_D964
0000F4F2                            ; ===========================================================================
0000F4F2                            
0000F4F2                            loc_D976:
0000F4F2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F4F6 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000F4FC                            
0000F4FC                            OPL_Next:				; XREF: OPL_Index
0000F4FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F500 7400                       		moveq	#0,d2
0000F502 3C38 F700                  		move.w	($FFFFF700).w,d6
0000F506 0246 FF80                  		andi.w	#$FF80,d6
0000F50A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000F50E 6700 0000                  		beq.w	locret_DA3A
0000F512 6C00                       		bge.s	loc_D9F6
0000F514 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F518 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F51C 0446 0080                  		subi.w	#$80,d6
0000F520 6500                       		bcs.s	loc_D9D2
0000F522                            
0000F522                            loc_D9A6:
0000F522 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F526 6C00                       		bge.s	loc_D9D2
0000F528 5D48                       		subq.w	#6,a0
0000F52A 4A28 0004                  		tst.b	4(a0)
0000F52E 6A00                       		bpl.s	loc_D9BC
0000F530 532A 0001                  		subq.b	#1,1(a2)
0000F534 142A 0001                  		move.b	1(a2),d2
0000F538                            
0000F538                            loc_D9BC:
0000F538 6100 0000                  		bsr.w	loc_DA3C
0000F53C 6600                       		bne.s	loc_D9C6
0000F53E 5D48                       		subq.w	#6,a0
0000F540 60E0                       		bra.s	loc_D9A6
0000F542                            ; ===========================================================================
0000F542                            
0000F542                            loc_D9C6:
0000F542 4A28 0004                  		tst.b	4(a0)
0000F546 6A00                       		bpl.s	loc_D9D0
0000F548 522A 0001                  		addq.b	#1,1(a2)
0000F54C                            
0000F54C                            loc_D9D0:
0000F54C 5C48                       		addq.w	#6,a0
0000F54E                            
0000F54E                            loc_D9D2:
0000F54E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F552 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F556 0646 0300                  		addi.w	#$300,d6
0000F55A                            
0000F55A                            loc_D9DE:
0000F55A BC68 FFFA                  		cmp.w	-6(a0),d6
0000F55E 6E00                       		bgt.s	loc_D9F0
0000F560 4A28 FFFE                  		tst.b	-2(a0)
0000F564 6A00                       		bpl.s	loc_D9EC
0000F566 5312                       		subq.b	#1,(a2)
0000F568                            
0000F568                            loc_D9EC:
0000F568 5D48                       		subq.w	#6,a0
0000F56A 60EE                       		bra.s	loc_D9DE
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            loc_D9F0:
0000F56C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F570 4E75                       		rts	
0000F572                            ; ===========================================================================
0000F572                            
0000F572                            loc_D9F6:
0000F572 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000F576 2078 F770                  		movea.l	($FFFFF770).w,a0
0000F57A 0646 0280                  		addi.w	#$280,d6
0000F57E                            
0000F57E                            loc_DA02:
0000F57E BC50                       		cmp.w	(a0),d6
0000F580 6300                       		bls.s	loc_DA16
0000F582 4A28 0004                  		tst.b	4(a0)
0000F586 6A00                       		bpl.s	loc_DA10
0000F588 1412                       		move.b	(a2),d2
0000F58A 5212                       		addq.b	#1,(a2)
0000F58C                            
0000F58C                            loc_DA10:
0000F58C 6100 0000                  		bsr.w	loc_DA3C
0000F590 67EC                       		beq.s	loc_DA02
0000F592 4A28 0004                  		tst.b	$04(a0)			; MJ: was this object a remember state?
0000F596 6A00                       		bpl.s	loc_DA16		; MJ: if not, branch
0000F598 5312                       		subq.b	#$01,(a2)		; MJ: move right counter back
0000F59A                            
0000F59A                            loc_DA16:
0000F59A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000F59E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000F5A2 0446 0300                  		subi.w	#$300,d6
0000F5A6 6500                       		bcs.s	loc_DA36
0000F5A8                            
0000F5A8                            loc_DA24:
0000F5A8 BC50                       		cmp.w	(a0),d6
0000F5AA 6300                       		bls.s	loc_DA36
0000F5AC 4A28 0004                  		tst.b	4(a0)
0000F5B0 6A00                       		bpl.s	loc_DA32
0000F5B2 522A 0001                  		addq.b	#1,1(a2)
0000F5B6                            
0000F5B6                            loc_DA32:
0000F5B6 5C48                       		addq.w	#6,a0
0000F5B8 60EE                       		bra.s	loc_DA24
0000F5BA                            ; ===========================================================================
0000F5BA                            
0000F5BA                            loc_DA36:
0000F5BA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000F5BE                            
0000F5BE                            locret_DA3A:
0000F5BE 4E75                       		rts	
0000F5C0                            ; ===========================================================================
0000F5C0                            
0000F5C0                            loc_DA3C:
0000F5C0 4A28 0004                  		tst.b	4(a0)
0000F5C4 6A00                       		bpl.s	OPL_MakeItem
0000F5C6 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000F5CC 6700                       		beq.s	OPL_MakeItem
0000F5CE 5C48                       		addq.w	#6,a0
0000F5D0 7000                       		moveq	#0,d0
0000F5D2 4E75                       		rts	
0000F5D4                            ; ===========================================================================
0000F5D4                            
0000F5D4                            OPL_MakeItem:
0000F5D4 6100 0000                  		bsr.w	SingleObjLoad
0000F5D8 6600                       		bne.s	locret_DA8A
0000F5DA 3358 0008                  		move.w	(a0)+,8(a1)
0000F5DE 3018                       		move.w	(a0)+,d0
0000F5E0 3200                       		move.w	d0,d1
0000F5E2 0240 0FFF                  		andi.w	#$FFF,d0
0000F5E6 3340 000C                  		move.w	d0,$C(a1)
0000F5EA E559                       		rol.w	#2,d1
0000F5EC 0201 0003                  		andi.b	#3,d1
0000F5F0 1341 0001                  		move.b	d1,1(a1)
0000F5F4 1341 0022                  		move.b	d1,$22(a1)
0000F5F8 1018                       		move.b	(a0)+,d0
0000F5FA 6A00                       		bpl.s	loc_DA80
0000F5FC 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)		; MJ: set as removed
0000F602 0200 007F                  		andi.b	#$7F,d0
0000F606 1342 0023                  		move.b	d2,$23(a1)
0000F60A                            
0000F60A                            loc_DA80:
0000F60A 1280                       		move.b	d0,0(a1)
0000F60C 1358 0028                  		move.b	(a0)+,$28(a1)
0000F610 7000                       		moveq	#0,d0
0000F612                            
0000F612                            locret_DA8A:
0000F612 4E75                       		rts	
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            ; Single object	loading	subroutine
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            
0000F614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F614                            
0000F614                            
0000F614                            SingleObjLoad:
0000F614 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F618 303C 005F                  		move.w	#$5F,d0
0000F61C                            
0000F61C                            loc_DA94:
0000F61C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F61E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F620 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F624 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F628                            
0000F628                            locret_DAA0:
0000F628 4E75                       		rts	
0000F62A                            ; End of function SingleObjLoad
0000F62A                            
0000F62A                            
0000F62A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F62A                            
0000F62A                            
0000F62A                            SingleObjLoad2:
0000F62A 2248                       		movea.l	a0,a1
0000F62C 303C F000                  		move.w	#-$1000,d0
0000F630 9048                       		sub.w	a0,d0
0000F632 EC48                       		lsr.w	#6,d0
0000F634 5340                       		subq.w	#1,d0
0000F636 6500                       		bcs.s	locret_DABC
0000F638                            
0000F638                            loc_DAB0:
0000F638 4A11                       		tst.b	(a1)
0000F63A 6700                       		beq.s	locret_DABC
0000F63C 43E9 0040                  		lea	$40(a1),a1
0000F640 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F644                            
0000F644                            locret_DABC:
0000F644 4E75                       		rts	
0000F646                            ; End of function SingleObjLoad2
0000F646                            
0000F646                            ; ===========================================================================
0000F646                            ; ---------------------------------------------------------------------------
0000F646                            ; Object 41 - springs
0000F646                            ; ---------------------------------------------------------------------------
0000F646                            
0000F646                            Obj41:					; XREF: Obj_Index
0000F646 7000                       		moveq	#0,d0
0000F648 1028 0024                  		move.b	$24(a0),d0
0000F64C 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F650 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F654 6100 FB2A                  		bsr.w	DisplaySprite
0000F658 3028 0008                  		move.w	8(a0),d0
0000F65C 0240 FF80                  		andi.w	#$FF80,d0
0000F660 3238 F700                  		move.w	($FFFFF700).w,d1
0000F664 0441 0080                  		subi.w	#$80,d1
0000F668 0241 FF80                  		andi.w	#$FF80,d1
0000F66C 9041                       		sub.w	d1,d0
0000F66E 0C40 0280                  		cmpi.w	#$280,d0
0000F672 6200 FB48                  		bhi.w	DeleteObject
0000F676 4E75                       		rts	
0000F678                            ; ===========================================================================
0000F678 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F67A 0000                       		dc.w Obj41_Up-Obj41_Index
0000F67C 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F67E 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F680 0000                       		dc.w Obj41_LR-Obj41_Index
0000F682 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F684 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F686 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F688 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F68A 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F68C                            
0000F68C F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F68E F600                       		dc.w -$A00		; power	of yellow spring
0000F690                            ; ===========================================================================
0000F690                            
0000F690                            Obj41_Main:				; XREF: Obj41_Index
0000F690 5428 0024                  		addq.b	#2,$24(a0)
0000F694 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F69C 317C 0523 0002             		move.w	#$523,2(a0)
0000F6A2 0028 0004 0001             		ori.b	#4,1(a0)
0000F6A8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F6AE 117C 0004 0018             		move.b	#4,$18(a0)
0000F6B4 1028 0028                  		move.b	$28(a0),d0
0000F6B8 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F6BC 6700                       		beq.s	loc_DB54	; if not, branch
0000F6BE 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F6C4 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6CA 117C 0003 001A             		move.b	#3,$1A(a0)
0000F6D0 317C 0533 0002             		move.w	#$533,2(a0)
0000F6D6 117C 0008 0019             		move.b	#8,$19(a0)
0000F6DC                            
0000F6DC                            loc_DB54:
0000F6DC 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F6E0 6700                       		beq.s	loc_DB66	; if not, branch
0000F6E2 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F6E8 08E8 0001 0022             		bset	#1,$22(a0)
0000F6EE                            
0000F6EE                            loc_DB66:
0000F6EE 0800 0001                  		btst	#1,d0
0000F6F2 6700                       		beq.s	loc_DB72
0000F6F4 08E8 0005 0002             		bset	#5,2(a0)
0000F6FA                            
0000F6FA                            loc_DB72:
0000F6FA 0240 000F                  		andi.w	#$F,d0
0000F6FE 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F704 4E75                       		rts	
0000F706                            ; ===========================================================================
0000F706                            
0000F706                            Obj41_Up:				; XREF: Obj41_Index
0000F706 323C 001B                  		move.w	#$1B,d1
0000F70A 343C 0008                  		move.w	#8,d2
0000F70E 363C 0010                  		move.w	#$10,d3
0000F712 3828 0008                  		move.w	8(a0),d4
0000F716 6100 0000                  		bsr.w	SolidObject
0000F71A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F71E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F720 4E75                       		rts	
0000F722                            ; ===========================================================================
0000F722                            
0000F722                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F722 5428 0024                  		addq.b	#2,$24(a0)
0000F726 5069 000C                  		addq.w	#8,$C(a1)
0000F72A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F730 08E9 0001 0022             		bset	#1,$22(a1)
0000F736 08A9 0003 0022             		bclr	#3,$22(a1)
0000F73C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F742 137C 0002 0024             		move.b	#2,$24(a1)
0000F748 08A8 0003 0022             		bclr	#3,$22(a0)
0000F74E 4228 0025                  		clr.b	$25(a0)
0000F752 303C 00CC                  		move.w	#$CC,d0
0000F756 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F75C                            
0000F75C                            Obj41_AniUp:				; XREF: Obj41_Index
0000F75C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F762 6000 C9CE                  		bra.w	AnimateSprite
0000F766                            ; ===========================================================================
0000F766                            
0000F766                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F766 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F76C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F770 4E75                       		rts	
0000F772                            ; ===========================================================================
0000F772                            
0000F772                            Obj41_LR:				; XREF: Obj41_Index
0000F772 323C 0013                  		move.w	#$13,d1
0000F776 343C 000E                  		move.w	#$E,d2
0000F77A 363C 000F                  		move.w	#$F,d3
0000F77E 3828 0008                  		move.w	8(a0),d4
0000F782 6100 0000                  		bsr.w	SolidObject
0000F786 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F78C 6600                       		bne.s	loc_DC0C
0000F78E 117C 0008 0024             		move.b	#8,$24(a0)
0000F794                            
0000F794                            loc_DC0C:
0000F794 0828 0005 0022             		btst	#5,$22(a0)
0000F79A 6600                       		bne.s	Obj41_BounceLR
0000F79C 4E75                       		rts	
0000F79E                            ; ===========================================================================
0000F79E                            
0000F79E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F79E 5428 0024                  		addq.b	#2,$24(a0)
0000F7A2 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F7A8 5069 0008                  		addq.w	#8,8(a1)
0000F7AC 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F7B2 6600                       		bne.s	loc_DC36	; if yes, branch
0000F7B4 0469 0010 0008             		subi.w	#$10,8(a1)
0000F7BA 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F7BE                            		
0000F7BE                            loc_DC36:
0000F7BE 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F7C4 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000F7CA 0869 0000 0022             		bchg	#0,$22(a1)
0000F7D0 0829 0002 0022             		btst	#2,$22(a1)
0000F7D6 6600                       		bne.s	loc_DC56
0000F7D8 103C 0000                  		move.b	#0,d0
0000F7DC 4A29 0039                  		tst.b	$39(a1)
0000F7E0 6700                       		beq.s	@not_crawling
0000F7E2 4E71                       		nop
0000F7E4 103C 000A                  		move.b	#$0A,d0 	; use crawling animation
0000F7E8                            		
0000F7E8                            @not_crawling:
0000F7E8 1340 001C                  		move.b	d0,$1C(a1)
0000F7EC                            
0000F7EC                            loc_DC56:
0000F7EC 08A8 0005 0022             		bclr	#5,$22(a0)
0000F7F2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F7F8 303C 00CC                  		move.w	#$CC,d0
0000F7FC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F802                            
0000F802                            Obj41_AniLR:				; XREF: Obj41_Index
0000F802 31FC 0000 C904             		move.w	#0,($FFFFC904).w	; clear screen delay counter
0000F808 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F80E 6000 C922                  		bra.w	AnimateSprite
0000F812                            ; ===========================================================================
0000F812                            
0000F812                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F812 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F818 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F81C 4E75                       		rts	
0000F81E                            ; ===========================================================================
0000F81E                            
0000F81E                            Obj41_Dwn:				; XREF: Obj41_Index
0000F81E 323C 001B                  		move.w	#$1B,d1
0000F822 343C 0008                  		move.w	#8,d2
0000F826 363C 0010                  		move.w	#$10,d3
0000F82A 3828 0008                  		move.w	8(a0),d4
0000F82E 6100 0000                  		bsr.w	SolidObject
0000F832 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F838 6600                       		bne.s	loc_DCA4
0000F83A 117C 000E 0024             		move.b	#$E,$24(a0)
0000F840                            
0000F840                            loc_DCA4:
0000F840 4A28 0025                  		tst.b	$25(a0)
0000F844 6600                       		bne.s	locret_DCAE
0000F846 4A44                       		tst.w	d4
0000F848 6B00                       		bmi.s	Obj41_BounceDwn
0000F84A                            
0000F84A                            locret_DCAE:
0000F84A 4E75                       		rts	
0000F84C                            ; ===========================================================================
0000F84C                            
0000F84C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F84C 5428 0024                  		addq.b	#2,$24(a0)
0000F850 5169 000C                  		subq.w	#8,$C(a1)
0000F854 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F85A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F85E 08E9 0001 0022             		bset	#1,$22(a1)
0000F864 08A9 0003 0022             		bclr	#3,$22(a1)
0000F86A 137C 0002 0024             		move.b	#2,$24(a1)
0000F870 08A8 0003 0022             		bclr	#3,$22(a0)
0000F876 4228 0025                  		clr.b	$25(a0)
0000F87A 303C 00CC                  		move.w	#$CC,d0
0000F87E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
0000F884                            
0000F884                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F884 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F88A 6000 C8A6                  		bra.w	AnimateSprite
0000F88E                            ; ===========================================================================
0000F88E                            
0000F88E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F88E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F894 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F898 4E75                       		rts	
0000F89A                            ; ===========================================================================
0000F89A                            Ani_obj41:
0000F89A                            	include "_anim\obj41.asm"
0000F89A                            ; ---------------------------------------------------------------------------
0000F89A                            ; Animation script - springs
0000F89A                            ; ---------------------------------------------------------------------------
0000F89A 0000                       		dc.w byte_DD02-Ani_obj41
0000F89C 0000                       		dc.w byte_DD0E-Ani_obj41
0000F89E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F8AA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F8B6                            		even
0000F8B6                            		even
0000F8B6                            
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            ; Sprite mappings - springs
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            Map_obj41:
0000F8B6                            	include "_maps\obj41.asm"
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            ; Sprite mappings - springs
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6 0000                       		dc.w byte_DD26-Map_obj41
0000F8B8 0000                       		dc.w byte_DD31-Map_obj41
0000F8BA 0000                       		dc.w byte_DD37-Map_obj41
0000F8BC 0000                       		dc.w byte_DD47-Map_obj41
0000F8BE 0000                       		dc.w byte_DD4D-Map_obj41
0000F8C0 0000                       		dc.w byte_DD53-Map_obj41
0000F8C2 02                         byte_DD26:	dc.b 2
0000F8C3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F8C8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F8CD 01                         byte_DD31:	dc.b 1
0000F8CE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F8D3 03                         byte_DD37:	dc.b 3
0000F8D4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F8D9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F8DE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F8E3 01                         byte_DD47:	dc.b 1
0000F8E4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F8E9 01                         byte_DD4D:	dc.b 1
0000F8EA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F8EF 04                         byte_DD53:	dc.b 4
0000F8F0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F8F5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F8FA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F8FF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F904                            		even
0000F904                            		even
0000F904                            
0000F904                            ; ===========================================================================
0000F904                            ; ---------------------------------------------------------------------------
0000F904                            ; Object 42 - Newtron enemy (GHZ)
0000F904                            ; ---------------------------------------------------------------------------
0000F904                            
0000F904                            Obj42:					; XREF: Obj_Index
0000F904 7000                       		moveq	#0,d0
0000F906 1028 0024                  		move.b	$24(a0),d0
0000F90A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F90E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F912                            ; ===========================================================================
0000F912 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F914 0000                       		dc.w Obj42_Action-Obj42_Index
0000F916 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F918                            ; ===========================================================================
0000F918                            
0000F918                            Obj42_Main:				; XREF: Obj42_Index
0000F918 5428 0024                  		addq.b	#2,$24(a0)
0000F91C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F924 317C 049B 0002             		move.w	#$49B,2(a0)
0000F92A 117C 0004 0001             		move.b	#4,1(a0)
0000F930 117C 0004 0018             		move.b	#4,$18(a0)
0000F936 117C 0014 0019             		move.b	#$14,$19(a0)
0000F93C 117C 0010 0016             		move.b	#$10,$16(a0)
0000F942 117C 0008 0017             		move.b	#8,$17(a0)
0000F948                            
0000F948                            Obj42_Action:				; XREF: Obj42_Index
0000F948 7000                       		moveq	#0,d0
0000F94A 1028 0025                  		move.b	$25(a0),d0
0000F94E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F952 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F956 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F95C 6100 C7D4                  		bsr.w	AnimateSprite
0000F960 6000 0000                  		bra.w	MarkObjGone
0000F964                            ; ===========================================================================
0000F964 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F966 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F968 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F96A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F96C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F96E                            ; ===========================================================================
0000F96E                            
0000F96E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F96E 08E8 0000 0022             		bset	#0,$22(a0)
0000F974 3038 D008                  		move.w	($FFFFD008).w,d0
0000F978 9068 0008                  		sub.w	8(a0),d0
0000F97C 6400                       		bcc.s	loc_DDEA
0000F97E 4440                       		neg.w	d0
0000F980 08A8 0000 0022             		bclr	#0,$22(a0)
0000F986                            
0000F986                            loc_DDEA:
0000F986 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F98A 6400                       		bcc.s	locret_DE12	; if not, branch
0000F98C 5428 0025                  		addq.b	#2,$25(a0)
0000F990 117C 0001 001C             		move.b	#1,$1C(a0)
0000F996 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F99A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F99C 317C 249B 0002             		move.w	#$249B,2(a0)
0000F9A2 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F9A8 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F9AE                            
0000F9AE                            locret_DE12:
0000F9AE 4E75                       		rts	
0000F9B0                            ; ===========================================================================
0000F9B0                            
0000F9B0                            Obj42_Type00:				; XREF: Obj42_Index2
0000F9B0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F9B6 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F9B8 08E8 0000 0022             		bset	#0,$22(a0)
0000F9BE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9C2 9068 0008                  		sub.w	8(a0),d0
0000F9C6 6400                       		bcc.s	locret_DE32
0000F9C8 08A8 0000 0022             		bclr	#0,$22(a0)
0000F9CE                            
0000F9CE                            locret_DE32:
0000F9CE 4E75                       		rts	
0000F9D0                            ; ===========================================================================
0000F9D0                            
0000F9D0                            Obj42_Fall:				; XREF: Obj42_Type00
0000F9D0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F9D6 6600                       		bne.s	loc_DE42
0000F9D8 117C 000C 0020             		move.b	#$C,$20(a0)
0000F9DE                            
0000F9DE                            loc_DE42:
0000F9DE 6100 F766                  		bsr.w	ObjectFall
0000F9E2 6100 0000                  		bsr.w	ObjHitFloor
0000F9E6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F9E8 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F9EA D368 000C                  		add.w	d1,$C(a0)
0000F9EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F9F4 5428 0025                  		addq.b	#2,$25(a0)
0000F9F8 117C 0002 001C             		move.b	#2,$1C(a0)
0000F9FE 0828 0005 0002             		btst	#5,2(a0)
0000FA04 6700                       		beq.s	Obj42_Move
0000FA06 5228 001C                  		addq.b	#1,$1C(a0)
0000FA0A                            
0000FA0A                            Obj42_Move:
0000FA0A 117C 000D 0020             		move.b	#$D,$20(a0)
0000FA10 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000FA16 0828 0000 0022             		btst	#0,$22(a0)
0000FA1C 6600                       		bne.s	locret_DE86
0000FA1E 4468 0010                  		neg.w	$10(a0)
0000FA22                            
0000FA22                            locret_DE86:
0000FA22 4E75                       		rts	
0000FA24                            ; ===========================================================================
0000FA24                            
0000FA24                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000FA24 6100 F740                  		bsr.w	SpeedToPos
0000FA28 6100 0000                  		bsr.w	ObjHitFloor
0000FA2C 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA30 6D00                       		blt.s	loc_DEA2
0000FA32 0C41 000C                  		cmpi.w	#$C,d1
0000FA36 6C00                       		bge.s	loc_DEA2
0000FA38 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000FA3C 4E75                       		rts	
0000FA3E                            ; ===========================================================================
0000FA3E                            
0000FA3E                            loc_DEA2:
0000FA3E 5428 0025                  		addq.b	#2,$25(a0)
0000FA42 4E75                       		rts	
0000FA44                            ; ===========================================================================
0000FA44                            
0000FA44                            Obj42_Speed:				; XREF: Obj42_Index2
0000FA44 6100 F720                  		bsr.w	SpeedToPos
0000FA48 4E75                       		rts	
0000FA4A                            ; ===========================================================================
0000FA4A                            
0000FA4A                            Obj42_Type01:				; XREF: Obj42_Index2
0000FA4A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000FA50 6600                       		bne.s	Obj42_FireMissile
0000FA52 117C 000C 0020             		move.b	#$C,$20(a0)
0000FA58                            
0000FA58                            Obj42_FireMissile:
0000FA58 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000FA5E 6600                       		bne.s	locret_DF14
0000FA60 4A28 0032                  		tst.b	$32(a0)
0000FA64 6600                       		bne.s	locret_DF14
0000FA66 117C 0001 0032             		move.b	#1,$32(a0)
0000FA6C 6100 FBA6                  		bsr.w	SingleObjLoad
0000FA70 6600                       		bne.s	locret_DF14
0000FA72 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000FA76 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA82 5169 000C                  		subq.w	#8,$C(a1)
0000FA86 337C 0200 0010             		move.w	#$200,$10(a1)
0000FA8C 303C 0014                  		move.w	#$14,d0
0000FA90 0828 0000 0022             		btst	#0,$22(a0)
0000FA96 6600                       		bne.s	loc_DF04
0000FA98 4440                       		neg.w	d0
0000FA9A 4469 0010                  		neg.w	$10(a1)
0000FA9E                            
0000FA9E                            loc_DF04:
0000FA9E D169 0008                  		add.w	d0,8(a1)
0000FAA2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FAA8 137C 0001 0028             		move.b	#1,$28(a1)
0000FAAE                            
0000FAAE                            locret_DF14:
0000FAAE 4E75                       		rts	
0000FAB0                            ; ===========================================================================
0000FAB0                            
0000FAB0                            Obj42_Delete:				; XREF: Obj42_Index
0000FAB0 6000 F70A                  		bra.w	DeleteObject
0000FAB4                            ; ===========================================================================
0000FAB4                            Ani_obj42:
0000FAB4                            	include "_anim\obj42.asm"
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            ; Animation script - Newtron enemy
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4 0000                       		dc.w byte_DF24-Ani_obj42
0000FAB6 0000                       		dc.w byte_DF28-Ani_obj42
0000FAB8 0000                       		dc.w byte_DF30-Ani_obj42
0000FABA 0000                       		dc.w byte_DF34-Ani_obj42
0000FABC 0000                       		dc.w byte_DF38-Ani_obj42
0000FABE 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000FAC2 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000FACA 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000FACE 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000FAD2 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000FADC                            		even
0000FADC                            		even
0000FADC                            
0000FADC                            ; ---------------------------------------------------------------------------
0000FADC                            ; Sprite mappings - Newtron enemy (GHZ)
0000FADC                            ; ---------------------------------------------------------------------------
0000FADC                            Map_obj42:
0000FADC                            	include "_maps\obj42.asm"
0000FADC                            ; ---------------------------------------------------------------------------
0000FADC                            ; Sprite mappings - Newtron enemy (GHZ)
0000FADC                            ; ---------------------------------------------------------------------------
0000FADC 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000FAE0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000FAE4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000FAE8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000FAEC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000FAF0 0000                       		dc.w byte_DFF8-Map_obj42
0000FAF2 03                         byte_DF58:	dc.b 3
0000FAF3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000FAF8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FAFD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FB02 03                         byte_DF68:	dc.b 3
0000FB03 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000FB08 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB0D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FB12 03                         byte_DF78:	dc.b 3
0000FB13 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000FB18 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB1D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FB22 04                         byte_DF88:	dc.b 4
0000FB23 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000FB28 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FB2D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FB32 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FB37 03                         byte_DF9D:	dc.b 3
0000FB38 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FB3D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FB42 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FB47 02                         byte_DFAD:	dc.b 2
0000FB48 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB4D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB52 03                         byte_DFB8:	dc.b 3
0000FB53 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB58 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB5D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FB62 03                         byte_DFC8:	dc.b 3
0000FB63 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB68 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB6D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FB72 03                         byte_DFD8:	dc.b 3
0000FB73 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB78 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB7D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FB82 03                         byte_DFE8:	dc.b 3
0000FB83 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FB88 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FB8D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FB92 00                         byte_DFF8:	dc.b 0
0000FB94 00                         		even
0000FB94 00                         		even
0000FB94                            
0000FB94                            ; ===========================================================================
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94                            ; Object 43 - Roller enemy (SYZ)
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94                            
0000FB94                            Obj43:					; XREF: Obj_Index
0000FB94 7000                       		moveq	#0,d0
0000FB96 1028 0024                  		move.b	$24(a0),d0
0000FB9A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FB9E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FBA2                            ; ===========================================================================
0000FBA2 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FBA4 0000                       		dc.w Obj43_Action-Obj43_Index
0000FBA6                            ; ===========================================================================
0000FBA6                            
0000FBA6                            Obj43_Main:				; XREF: Obj43_Index
0000FBA6 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBAC 117C 0008 0017             		move.b	#8,$17(a0)
0000FBB2 6100 F592                  		bsr.w	ObjectFall
0000FBB6 6100 0000                  		bsr.w	ObjHitFloor
0000FBBA 4A41                       		tst.w	d1
0000FBBC 6A00                       		bpl.s	locret_E052
0000FBBE D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FBC2 317C 0000 0012             		move.w	#0,$12(a0)
0000FBC8 5428 0024                  		addq.b	#2,$24(a0)
0000FBCC 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FBD4 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FBDA 117C 0004 0001             		move.b	#4,1(a0)
0000FBE0 117C 0004 0018             		move.b	#4,$18(a0)
0000FBE6 117C 0010 0019             		move.b	#$10,$19(a0)
0000FBEC                            
0000FBEC                            locret_E052:
0000FBEC 4E75                       		rts	
0000FBEE                            ; ===========================================================================
0000FBEE                            
0000FBEE                            Obj43_Action:				; XREF: Obj43_Index
0000FBEE 7000                       		moveq	#0,d0
0000FBF0 1028 0025                  		move.b	$25(a0),d0
0000FBF4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FBF8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FBFC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FC02 6100 C52E                  		bsr.w	AnimateSprite
0000FC06 3028 0008                  		move.w	8(a0),d0
0000FC0A 0240 FF80                  		andi.w	#$FF80,d0
0000FC0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC12 0441 0080                  		subi.w	#$80,d1
0000FC16 0241 FF80                  		andi.w	#$FF80,d1
0000FC1A 9041                       		sub.w	d1,d0
0000FC1C 0C40 0280                  		cmpi.w	#$280,d0
0000FC20 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FC24 6000 F55A                  		bra.w	DisplaySprite
0000FC28                            ; ===========================================================================
0000FC28                            
0000FC28                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FC28 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC2C 7000                       		moveq	#0,d0
0000FC2E 1028 0023                  		move.b	$23(a0),d0
0000FC32 6700                       		beq.s	Obj43_Delete
0000FC34 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC3A                            
0000FC3A                            Obj43_Delete:
0000FC3A 6000 F580                  		bra.w	DeleteObject
0000FC3E                            ; ===========================================================================
0000FC3E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FC40 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FC42 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FC44 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FC46                            ; ===========================================================================
0000FC46                            
0000FC46                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FC46 3038 D008                  		move.w	($FFFFD008).w,d0
0000FC4A 0440 0100                  		subi.w	#$100,d0
0000FC4E 6500                       		bcs.s	loc_E0D2
0000FC50 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FC54 6500                       		bcs.s	loc_E0D2
0000FC56 5828 0025                  		addq.b	#4,$25(a0)
0000FC5A 117C 0002 001C             		move.b	#2,$1C(a0)
0000FC60 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FC66 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FC6C                            
0000FC6C                            loc_E0D2:
0000FC6C 588F                       		addq.l	#4,sp
0000FC6E 4E75                       		rts	
0000FC70                            ; ===========================================================================
0000FC70                            
0000FC70                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FC70 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FC76 6700                       		beq.s	loc_E0F8
0000FC78 5368 0030                  		subq.w	#1,$30(a0)
0000FC7C 6A00                       		bpl.s	locret_E0F6
0000FC7E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC84 317C 0700 0010             		move.w	#$700,$10(a0)
0000FC8A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FC90                            
0000FC90                            locret_E0F6:
0000FC90 4E75                       		rts	
0000FC92                            ; ===========================================================================
0000FC92                            
0000FC92                            loc_E0F8:
0000FC92 5428 0025                  		addq.b	#2,$25(a0)
0000FC96 4E75                       		rts	
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FC98 6100 0000                  		bsr.w	Obj43_Stop
0000FC9C 6100 F4C8                  		bsr.w	SpeedToPos
0000FCA0 6100 0000                  		bsr.w	ObjHitFloor
0000FCA4 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCA8 6D00                       		blt.s	Obj43_Jump
0000FCAA 0C41 000C                  		cmpi.w	#$C,d1
0000FCAE 6C00                       		bge.s	Obj43_Jump
0000FCB0 D368 000C                  		add.w	d1,$C(a0)
0000FCB4 4E75                       		rts	
0000FCB6                            ; ===========================================================================
0000FCB6                            
0000FCB6                            Obj43_Jump:
0000FCB6 5428 0025                  		addq.b	#2,$25(a0)
0000FCBA 08E8 0000 0032             		bset	#0,$32(a0)
0000FCC0 6700                       		beq.s	locret_E12E
0000FCC2 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FCC8                            
0000FCC8                            locret_E12E:
0000FCC8 4E75                       		rts	
0000FCCA                            ; ===========================================================================
0000FCCA                            
0000FCCA                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FCCA 6100 F47A                  		bsr.w	ObjectFall
0000FCCE 4A68 0012                  		tst.w	$12(a0)
0000FCD2 6B00                       		bmi.s	locret_E150
0000FCD4 6100 0000                  		bsr.w	ObjHitFloor
0000FCD8 4A41                       		tst.w	d1
0000FCDA 6A00                       		bpl.s	locret_E150
0000FCDC D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FCE0 5528 0025                  		subq.b	#2,$25(a0)
0000FCE4 317C 0000 0012             		move.w	#0,$12(a0)
0000FCEA                            
0000FCEA                            locret_E150:
0000FCEA 4E75                       		rts	
0000FCEC                            
0000FCEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCEC                            
0000FCEC                            
0000FCEC                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FCEC 4A28 0032                  		tst.b	$32(a0)
0000FCF0 6B00                       		bmi.s	locret_E188
0000FCF2 3038 D008                  		move.w	($FFFFD008).w,d0
0000FCF6 0440 0030                  		subi.w	#$30,d0
0000FCFA 9068 0008                  		sub.w	8(a0),d0
0000FCFE 6400                       		bcc.s	locret_E188
0000FD00 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD06 117C 000E 0020             		move.b	#$E,$20(a0)
0000FD0C 4268 0010                  		clr.w	$10(a0)
0000FD10 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FD16 117C 0002 0025             		move.b	#2,$25(a0)
0000FD1C 08E8 0007 0032             		bset	#7,$32(a0)
0000FD22                            
0000FD22                            locret_E188:
0000FD22 4E75                       		rts	
0000FD24                            ; End of function Obj43_Stop
0000FD24                            
0000FD24                            ; ===========================================================================
0000FD24                            Ani_obj43:
0000FD24                            	include "_anim\obj43.asm"
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24                            ; Animation script - Roller enemy
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24 0000                       		dc.w byte_E190-Ani_obj43
0000FD26 0000                       		dc.w byte_E196-Ani_obj43
0000FD28 0000                       		dc.w byte_E19C-Ani_obj43
0000FD2A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FD30 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FD36 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FD3C 00                         		even
0000FD3C 00                         		even
0000FD3C                            
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            ; Sprite mappings - Roller enemy (SYZ)
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            Map_obj43:
0000FD3C                            	include "_maps\obj43.asm"
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            ; Sprite mappings - Roller enemy (SYZ)
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FD40 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FD44 0000                       		dc.w byte_E1CE-Map_obj43
0000FD46 02                         byte_E1AC:	dc.b 2
0000FD47 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FD4C F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FD51 02                         byte_E1B7:	dc.b 2
0000FD52 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FD57 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FD5C 01                         byte_E1C2:	dc.b 1
0000FD5D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FD62 01                         byte_E1C8:	dc.b 1
0000FD63 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FD68 01                         byte_E1CE:	dc.b 1
0000FD69 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FD6E                            		even
0000FD6E                            		even
0000FD6E                            
0000FD6E                            ; ===========================================================================
0000FD6E                            ; ---------------------------------------------------------------------------
0000FD6E                            ; Object 44 - walls (GHZ)
0000FD6E                            ; ---------------------------------------------------------------------------
0000FD6E                            
0000FD6E                            Obj44:					; XREF: Obj_Index
0000FD6E 7000                       		moveq	#0,d0
0000FD70 1028 0024                  		move.b	$24(a0),d0
0000FD74 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FD78 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FD7C                            ; ===========================================================================
0000FD7C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FD7E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FD80 0000                       		dc.w Obj44_Display-Obj44_Index
0000FD82                            ; ===========================================================================
0000FD82                            
0000FD82                            Obj44_Main:				; XREF: Obj44_Index
0000FD82 5428 0024                  		addq.b	#2,$24(a0)
0000FD86 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FD8E 317C 434C 0002             		move.w	#$434C,2(a0)
0000FD94 0028 0004 0001             		ori.b	#4,1(a0)
0000FD9A 117C 0008 0019             		move.b	#8,$19(a0)
0000FDA0 117C 0006 0018             		move.b	#6,$18(a0)
0000FDA6 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FDAC 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FDB2 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FDB4 5428 0024                  		addq.b	#2,$24(a0)
0000FDB8 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FDBA                            ; ===========================================================================
0000FDBA                            
0000FDBA                            Obj44_Solid:				; XREF: Obj44_Index
0000FDBA 323C 0013                  		move.w	#$13,d1
0000FDBE 343C 0028                  		move.w	#$28,d2
0000FDC2 6100 A682                  		bsr.w	Obj44_SolidWall
0000FDC6                            
0000FDC6                            Obj44_Display:				; XREF: Obj44_Index
0000FDC6 6100 F3B8                  		bsr.w	DisplaySprite
0000FDCA 3028 0008                  		move.w	8(a0),d0
0000FDCE 0240 FF80                  		andi.w	#$FF80,d0
0000FDD2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDD6 0441 0080                  		subi.w	#$80,d1
0000FDDA 0241 FF80                  		andi.w	#$FF80,d1
0000FDDE 9041                       		sub.w	d1,d0
0000FDE0 0C40 0280                  		cmpi.w	#$280,d0
0000FDE4 6200 F3D6                  		bhi.w	DeleteObject
0000FDE8 4E75                       		rts	
0000FDEA                            ; ===========================================================================
0000FDEA                            ; ---------------------------------------------------------------------------
0000FDEA                            ; Sprite mappings - walls (GHZ)
0000FDEA                            ; ---------------------------------------------------------------------------
0000FDEA                            Map_obj44:
0000FDEA                            	include "_maps\obj44.asm"
0000FDEA                            ; ---------------------------------------------------------------------------
0000FDEA                            ; Sprite mappings - walls (GHZ)
0000FDEA                            ; ---------------------------------------------------------------------------
0000FDEA 0000                       		dc.w byte_E256-Map_obj44
0000FDEC 0000                       		dc.w byte_E26B-Map_obj44
0000FDEE 0000                       		dc.w byte_E280-Map_obj44
0000FDF0 04                         byte_E256:	dc.b 4
0000FDF1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FDF6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FDFB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FE00 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FE05 04                         byte_E26B:	dc.b 4
0000FE06 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FE0B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE10 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FE15 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FE1A 04                         byte_E280:	dc.b 4
0000FE1B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FE20 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FE25 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FE2A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FE30 00                         		even
0000FE30 00                         		even
0000FE30                            
0000FE30                            ; ===========================================================================
0000FE30                            ; ---------------------------------------------------------------------------
0000FE30                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FE30                            ; ---------------------------------------------------------------------------
0000FE30                            
0000FE30                            Obj13:					; XREF: Obj_Index
0000FE30 7000                       		moveq	#0,d0
0000FE32 1028 0024                  		move.b	$24(a0),d0
0000FE36 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FE3A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FE3E 6000 0000                  		bra.w	Obj14_ChkDel
0000FE42                            ; ===========================================================================
0000FE42 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FE44 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FE46                            ; ---------------------------------------------------------------------------
0000FE46                            ;
0000FE46                            ; Lava ball production rates
0000FE46                            ;
0000FE46 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FE4C                            ; ===========================================================================
0000FE4C                            
0000FE4C                            Obj13_Main:				; XREF: Obj13_Index
0000FE4C 5428 0024                  		addq.b	#2,$24(a0)
0000FE50 1028 0028                  		move.b	$28(a0),d0
0000FE54 E848                       		lsr.w	#4,d0
0000FE56 0240 000F                  		andi.w	#$F,d0
0000FE5A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FE60 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FE66 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FE6C                            
0000FE6C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FE6C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FE70 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FE72 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FE78 6100 F580                  		bsr.w	ChkObjOnScreen
0000FE7C 6600                       		bne.s	locret_E302
0000FE7E 6100 F794                  		bsr.w	SingleObjLoad
0000FE82 6600                       		bne.s	locret_E302
0000FE84 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FE88 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE94 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FE9A                            
0000FE9A                            locret_E302:
0000FE9A 4E75                       		rts	
0000FE9C                            ; ===========================================================================
0000FE9C                            ; ---------------------------------------------------------------------------
0000FE9C                            ; Object 14 - lava balls (MZ, SLZ)
0000FE9C                            ; ---------------------------------------------------------------------------
0000FE9C                            
0000FE9C                            Obj14:					; XREF: Obj_Index
0000FE9C 7000                       		moveq	#0,d0
0000FE9E 1028 0024                  		move.b	$24(a0),d0
0000FEA2 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FEA6 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FEAA 6000 F2D4                  		bra.w	DisplaySprite
0000FEAE                            ; ===========================================================================
0000FEAE 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FEB0 0000                       		dc.w Obj14_Action-Obj14_Index
0000FEB2 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FEB4                            
0000FEB4 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FEBE 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FEC6                            ; ===========================================================================
0000FEC6                            
0000FEC6                            Obj14_Main:				; XREF: Obj14_Index
0000FEC6 5428 0024                  		addq.b	#2,$24(a0)
0000FECA 117C 0008 0016             		move.b	#8,$16(a0)
0000FED0 117C 0008 0017             		move.b	#8,$17(a0)
0000FED6 217C 0000 CD84 0004        		move.l	#Map_obj14,4(a0)
0000FEDE 317C 0345 0002             		move.w	#$345,2(a0)
0000FEE4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FEEA 6600                       		bne.s	loc_E35A
0000FEEC 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FEF2                            
0000FEF2                            loc_E35A:
0000FEF2 117C 0004 0001             		move.b	#4,1(a0)
0000FEF8 117C 0003 0018             		move.b	#3,$18(a0)
0000FEFE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FF04 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FF0A 4A28 0029                  		tst.b	$29(a0)
0000FF0E 6700                       		beq.s	Obj14_SetSpeed
0000FF10 5428 0018                  		addq.b	#2,$18(a0)
0000FF14                            
0000FF14                            Obj14_SetSpeed:
0000FF14 7000                       		moveq	#0,d0
0000FF16 1028 0028                  		move.b	$28(a0),d0
0000FF1A D040                       		add.w	d0,d0
0000FF1C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FF22 117C 0008 0019             		move.b	#8,$19(a0)
0000FF28 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FF2E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FF30 117C 0010 0019             		move.b	#$10,$19(a0)
0000FF36 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FF3C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FF42 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FF48                            
0000FF48                            Obj14_PlaySnd:
0000FF48 303C 00AE                  		move.w	#$AE,d0
0000FF4C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FF52                            
0000FF52                            Obj14_Action:				; XREF: Obj14_Index
0000FF52 7000                       		moveq	#0,d0
0000FF54 1028 0028                  		move.b	$28(a0),d0
0000FF58 D040                       		add.w	d0,d0
0000FF5A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FF5E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FF62 6100 F202                  		bsr.w	SpeedToPos
0000FF66 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FF6C 6100 C1C4                  		bsr.w	AnimateSprite
0000FF70                            
0000FF70                            Obj14_ChkDel:				; XREF: Obj13
0000FF70 3028 0008                  		move.w	8(a0),d0
0000FF74 0240 FF80                  		andi.w	#$FF80,d0
0000FF78 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF7C 0441 0080                  		subi.w	#$80,d1
0000FF80 0241 FF80                  		andi.w	#$FF80,d1
0000FF84 9041                       		sub.w	d1,d0
0000FF86 0C40 0280                  		cmpi.w	#$280,d0
0000FF8A 6200 F230                  		bhi.w	DeleteObject
0000FF8E 4E75                       		rts	
0000FF90                            ; ===========================================================================
0000FF90 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FF94 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FF98 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FF9C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FFA0 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FFA2                            ; ===========================================================================
0000FFA2                            ; lavaball types 00-03 fly up and fall back down
0000FFA2                            
0000FFA2                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FFA2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FFA8 3028 0030                  		move.w	$30(a0),d0
0000FFAC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FFB0 6400                       		bcc.s	loc_E41E	; if not, branch
0000FFB2 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FFB6                            
0000FFB6                            loc_E41E:
0000FFB6 08A8 0001 0022             		bclr	#1,$22(a0)
0000FFBC 4A68 0012                  		tst.w	$12(a0)
0000FFC0 6A00                       		bpl.s	locret_E430
0000FFC2 08E8 0001 0022             		bset	#1,$22(a0)
0000FFC8                            
0000FFC8                            locret_E430:
0000FFC8 4E75                       		rts	
0000FFCA                            ; ===========================================================================
0000FFCA                            ; lavaball type	04 flies up until it hits the ceiling
0000FFCA                            
0000FFCA                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FFCA 08E8 0001 0022             		bset	#1,$22(a0)
0000FFD0 6100 0000                  		bsr.w	ObjHitCeiling
0000FFD4 4A41                       		tst.w	d1
0000FFD6 6A00                       		bpl.s	locret_E452
0000FFD8 117C 0008 0028             		move.b	#8,$28(a0)
0000FFDE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FFE4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FFEA                            
0000FFEA                            locret_E452:
0000FFEA 4E75                       		rts	
0000FFEC                            ; ===========================================================================
0000FFEC                            ; lavaball type	05 falls down until it hits the	floor
0000FFEC                            
0000FFEC                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FFEC 08A8 0001 0022             		bclr	#1,$22(a0)
0000FFF2 6100 0000                  		bsr.w	ObjHitFloor
0000FFF6 4A41                       		tst.w	d1
0000FFF8 6A00                       		bpl.s	locret_E474
0000FFFA 117C 0008 0028             		move.b	#8,$28(a0)
00010000 117C 0001 001C             		move.b	#1,$1C(a0)
00010006 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0001000C                            
0001000C                            locret_E474:
0001000C 4E75                       		rts	
0001000E                            ; ===========================================================================
0001000E                            ; lavaball types 06-07 move sideways
0001000E                            
0001000E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0001000E 08E8 0000 0022             		bset	#0,$22(a0)
00010014 76F8                       		moveq	#-8,d3
00010016 6100 0000                  		bsr.w	ObjHitWallLeft
0001001A 4A41                       		tst.w	d1
0001001C 6A00                       		bpl.s	locret_E498
0001001E 117C 0008 0028             		move.b	#8,$28(a0)
00010024 117C 0003 001C             		move.b	#3,$1C(a0)
0001002A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00010030                            
00010030                            locret_E498:
00010030 4E75                       		rts	
00010032                            ; ===========================================================================
00010032                            
00010032                            Obj14_Type07:				; XREF: Obj14_TypeIndex
00010032 08A8 0000 0022             		bclr	#0,$22(a0)
00010038 7608                       		moveq	#8,d3
0001003A 6100 0000                  		bsr.w	ObjHitWallRight
0001003E 4A41                       		tst.w	d1
00010040 6A00                       		bpl.s	locret_E4BC
00010042 117C 0008 0028             		move.b	#8,$28(a0)
00010048 117C 0003 001C             		move.b	#3,$1C(a0)
0001004E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00010054                            
00010054                            locret_E4BC:
00010054 4E75                       		rts	
00010056                            ; ===========================================================================
00010056                            
00010056                            Obj14_Type08:				; XREF: Obj14_TypeIndex
00010056 4E75                       		rts	
00010058                            ; ===========================================================================
00010058                            
00010058                            Obj14_Delete:				; XREF: Obj14_Index
00010058 6000 F162                  		bra.w	DeleteObject
0001005C                            ; ===========================================================================
0001005C                            Ani_obj14:
0001005C                            	include "_anim\obj14.asm"
0001005C                            ; ---------------------------------------------------------------------------
0001005C                            ; Animation script - lava balls
0001005C                            ; ---------------------------------------------------------------------------
0001005C 0000                       		dc.w byte_E4CC-Ani_obj14
0001005E 0000                       		dc.w byte_E4D2-Ani_obj14
00010060 0000                       		dc.w byte_E4D6-Ani_obj14
00010062 0000                       		dc.w byte_E4DC-Ani_obj14
00010064 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0001006A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0001006E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
00010074 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
00010078                            		even
00010078                            		even
00010078                            
00010078                            ; ===========================================================================
00010078                            ; ---------------------------------------------------------------------------
00010078                            ; Object 6D - flame thrower (SBZ)
00010078                            ; ---------------------------------------------------------------------------
00010078                            
00010078                            Obj6D:					; XREF: Obj_Index
00010078 7000                       		moveq	#0,d0
0001007A 1028 0024                  		move.b	$24(a0),d0
0001007E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
00010082 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
00010086                            ; ===========================================================================
00010086 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
00010088 0000                       		dc.w Obj6D_Action-Obj6D_Index
0001008A                            ; ===========================================================================
0001008A                            
0001008A                            Obj6D_Main:				; XREF: Obj6D_Index
0001008A 5428 0024                  		addq.b	#2,$24(a0)
0001008E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
00010096 317C 83D9 0002             		move.w	#$83D9,2(a0)
0001009C 0028 0004 0001             		ori.b	#4,1(a0)
000100A2 117C 0001 0018             		move.b	#1,$18(a0)
000100A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100AE 117C 000C 0019             		move.b	#$C,$19(a0)
000100B4 1028 0028                  		move.b	$28(a0),d0
000100B8 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000100BC D040                       		add.w	d0,d0		; multiply by 2
000100BE 3140 0030                  		move.w	d0,$30(a0)
000100C2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000100C6 1028 0028                  		move.b	$28(a0),d0
000100CA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000100CE EB48                       		lsl.w	#5,d0		; multiply by $20
000100D0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000100D4 117C 000A 0036             		move.b	#$A,$36(a0)
000100DA 0828 0001 0022             		btst	#1,$22(a0)
000100E0 6700                       		beq.s	Obj6D_Action
000100E2 117C 0002 001C             		move.b	#2,$1C(a0)
000100E8 117C 0015 0036             		move.b	#$15,$36(a0)
000100EE                            
000100EE                            Obj6D_Action:				; XREF: Obj6D_Index
000100EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000100F2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000100F4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000100FA 0868 0000 001C             		bchg	#0,$1C(a0)
00010100 6700                       		beq.s	loc_E57A
00010102 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010108 303C 00B3                  		move.w	#$B3,d0
0001010C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010112                            
00010112                            loc_E57A:
00010112 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
00010118 6100 C018                  		bsr.w	AnimateSprite
0001011C 117C 0000 0020             		move.b	#0,$20(a0)
00010122 1028 0036                  		move.b	$36(a0),d0
00010126 B028 001A                  		cmp.b	$1A(a0),d0
0001012A 6600                       		bne.s	Obj6D_ChkDel
0001012C 117C 00A3 0020             		move.b	#$A3,$20(a0)
00010132                            
00010132                            Obj6D_ChkDel:
00010132 3028 0008                  		move.w	8(a0),d0
00010136 0240 FF80                  		andi.w	#$FF80,d0
0001013A 3238 F700                  		move.w	($FFFFF700).w,d1
0001013E 0441 0080                  		subi.w	#$80,d1
00010142 0241 FF80                  		andi.w	#$FF80,d1
00010146 9041                       		sub.w	d1,d0
00010148 0C40 0280                  		cmpi.w	#$280,d0
0001014C 6200 F06E                  		bhi.w	DeleteObject
00010150 6000 F02E                  		bra.w	DisplaySprite
00010154                            ; ===========================================================================
00010154                            Ani_obj6D:
00010154                            	include "_anim\obj6D.asm"
00010154                            ; ---------------------------------------------------------------------------
00010154                            ; Animation script - flamethrower (SBZ)
00010154                            ; ---------------------------------------------------------------------------
00010154 0000                       		dc.w byte_E5C4-Ani_obj6D
00010156 0000                       		dc.w byte_E5D2-Ani_obj6D
00010158 0000                       		dc.w byte_E5DC-Ani_obj6D
0001015A 0000                       		dc.w byte_E5EA-Ani_obj6D
0001015C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0001016A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00010174 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00010182 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0001018C                            		even
0001018C                            		even
0001018C                            
0001018C                            ; ---------------------------------------------------------------------------
0001018C                            ; Sprite mappings - flame thrower (SBZ)
0001018C                            ; ---------------------------------------------------------------------------
0001018C                            Map_obj6D:
0001018C                            	include "_maps\obj6D.asm"
0001018C                            ; ---------------------------------------------------------------------------
0001018C                            ; Sprite mappings - flame thrower (SBZ)
0001018C                            ; ---------------------------------------------------------------------------
0001018C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00010190 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00010194 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
00010198 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001019C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
000101A0 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
000101A4 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
000101A8 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
000101AC 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
000101B0 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
000101B4 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
000101B8 01                         byte_E620:	dc.b 1
000101B9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101BE 02                         byte_E626:	dc.b 2
000101BF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101C4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101C9 02                         byte_E631:	dc.b 2
000101CA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101D4 03                         byte_E63C:	dc.b 3
000101D5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101DA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101DF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101E4 03                         byte_E64C:	dc.b 3
000101E5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101EA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101EF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000101F4 04                         byte_E65C:	dc.b 4
000101F5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101FA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101FF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010204 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010209 04                         byte_E671:	dc.b 4
0001020A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001020F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010214 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010219 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001021E 05                         byte_E686:	dc.b 5
0001021F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010224 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010229 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001022E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010233 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010238 05                         byte_E6A0:	dc.b 5
00010239 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001023E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010243 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010248 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001024D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010252 06                         byte_E6BA:	dc.b 6
00010253 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010258 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001025D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010262 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010267 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001026C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010271 06                         byte_E6D9:	dc.b 6
00010272 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010277 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001027C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010281 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010286 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001028B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010290 01                         byte_E6F8:	dc.b 1
00010291 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010296 02                         byte_E6FE:	dc.b 2
00010297 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001029C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102A1 02                         byte_E709:	dc.b 2
000102A2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102A7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102AC 03                         byte_E714:	dc.b 3
000102AD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000102B2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102B7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102BC 03                         byte_E724:	dc.b 3
000102BD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102C2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102C7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102CC 04                         byte_E734:	dc.b 4
000102CD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000102D2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000102D7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102DC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000102E1 04                         byte_E749:	dc.b 4
000102E2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000102E7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000102EC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000102F1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000102F6 05                         byte_E75E:	dc.b 5
000102F7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000102FC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010301 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010306 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001030B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010310 05                         byte_E778:	dc.b 5
00010311 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010316 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001031B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010320 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010325 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001032A 06                         byte_E792:	dc.b 6
0001032B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010330 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010335 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001033A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001033F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010344 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010349 06                         byte_E7B1:	dc.b 6
0001034A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001034F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010354 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010359 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001035E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010363 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010368                            		even
00010368                            		even
00010368                            
00010368                            ; ===========================================================================
00010368                            ; ---------------------------------------------------------------------------
00010368                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010368                            ; ---------------------------------------------------------------------------
00010368                            
00010368                            Obj46:					; XREF: Obj_Index
00010368 7000                       		moveq	#0,d0
0001036A 1028 0024                  		move.b	$24(a0),d0
0001036E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010372 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010376                            ; ===========================================================================
00010376 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00010378 0000                       		dc.w Obj46_Action-Obj46_Index
0001037A                            ; ===========================================================================
0001037A                            
0001037A                            Obj46_Main:				; XREF: Obj46_Index
0001037A 5428 0024                  		addq.b	#2,$24(a0)
0001037E 117C 000F 0016             		move.b	#$F,$16(a0)
00010384 117C 000F 0017             		move.b	#$F,$17(a0)
0001038A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010392 317C 4000 0002             		move.w	#$4000,2(a0)
00010398 117C 0004 0001             		move.b	#4,1(a0)
0001039E 117C 0003 0018             		move.b	#3,$18(a0)
000103A4 117C 0010 0019             		move.b	#$10,$19(a0)
000103AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103B0 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000103B6                            
000103B6                            Obj46_Action:				; XREF: Obj46_Index
000103B6 4A28 0001                  		tst.b	1(a0)
000103BA 6A00                       		bpl.s	Obj46_ChkDel
000103BC 7000                       		moveq	#0,d0
000103BE 1028 0028                  		move.b	$28(a0),d0	; get object type
000103C2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000103C6 D040                       		add.w	d0,d0
000103C8 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000103CC 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000103D0 323C 001B                  		move.w	#$1B,d1
000103D4 343C 0010                  		move.w	#$10,d2
000103D8 363C 0011                  		move.w	#$11,d3
000103DC 3828 0008                  		move.w	8(a0),d4
000103E0 6100 0000                  		bsr.w	SolidObject
000103E4                            
000103E4                            Obj46_ChkDel:
000103E4 6100 ED9A                  		bsr.w	DisplaySprite
000103E8 3028 0008                  		move.w	8(a0),d0
000103EC 0240 FF80                  		andi.w	#$FF80,d0
000103F0 3238 F700                  		move.w	($FFFFF700).w,d1
000103F4 0441 0080                  		subi.w	#$80,d1
000103F8 0241 FF80                  		andi.w	#$FF80,d1
000103FC 9041                       		sub.w	d1,d0
000103FE 0C40 0280                  		cmpi.w	#$280,d0
00010402 6200 EDB8                  		bhi.w	DeleteObject
00010406 4E75                       		rts	
00010408                            ; ===========================================================================
00010408 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001040A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001040C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001040E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010410 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010412                            ; ===========================================================================
00010412                            
00010412                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010412 4E75                       		rts	
00010414                            ; ===========================================================================
00010414                            
00010414                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010414 3038 D008                  		move.w	($FFFFD008).w,d0
00010418 9068 0008                  		sub.w	8(a0),d0
0001041C 6400                       		bcc.s	loc_E888
0001041E 4440                       		neg.w	d0
00010420                            
00010420                            loc_E888:
00010420 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010424 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010426 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001042C                            
0001042C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001042C 7000                       		moveq	#0,d0
0001042E 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010432 0828 0003 0028             		btst	#3,$28(a0)
00010438 6700                       		beq.s	loc_E8A8
0001043A 4440                       		neg.w	d0
0001043C 0640 0010                  		addi.w	#$10,d0
00010440                            
00010440                            loc_E8A8:
00010440 3228 0030                  		move.w	$30(a0),d1
00010444 9240                       		sub.w	d0,d1
00010446 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001044A 4E75                       		rts	
0001044C                            ; ===========================================================================
0001044C                            
0001044C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001044C 6100 ED18                  		bsr.w	SpeedToPos
00010450 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010456 6100 0000                  		bsr.w	ObjHitFloor
0001045A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001045C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010460 D368 000C                  		add.w	d1,$C(a0)
00010464 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00010468 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001046E 117C 0004 0028             		move.b	#4,$28(a0)
00010474 3011                       		move.w	(a1),d0
00010476 0240 03FF                  		andi.w	#$3FF,d0
0001047A 0C40 02E8                  		cmpi.w	#$2E8,d0
0001047E 6400                       		bcc.s	locret_E8EE
00010480 117C 0000 0028             		move.b	#0,$28(a0)
00010486                            
00010486                            locret_E8EE:
00010486 4E75                       		rts	
00010488                            ; ===========================================================================
00010488                            
00010488                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00010488 7000                       		moveq	#0,d0
0001048A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001048E E648                       		lsr.w	#3,d0
00010490 3228 0030                  		move.w	$30(a0),d1
00010494 9240                       		sub.w	d0,d1
00010496 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001049A 4E75                       		rts	
0001049C                            ; ===========================================================================
0001049C                            ; ---------------------------------------------------------------------------
0001049C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001049C                            ; ---------------------------------------------------------------------------
0001049C                            Map_obj46:
0001049C                            	include "_maps\obj46.asm"
0001049C                            ; ---------------------------------------------------------------------------
0001049C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001049C                            ; ---------------------------------------------------------------------------
0001049C 0000                       		dc.w byte_E906-Map_obj46
0001049E 01                         byte_E906:	dc.b 1
0001049F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000104A4                            		even
000104A4                            		even
000104A4                            
000104A4                            ; ===========================================================================
000104A4                            ; ---------------------------------------------------------------------------
000104A4                            ; Object 12 - lamp (SYZ)
000104A4                            ; ---------------------------------------------------------------------------
000104A4                            
000104A4                            Obj12:					; XREF: Obj_Index
000104A4 7000                       		moveq	#0,d0
000104A6 1028 0024                  		move.b	$24(a0),d0
000104AA 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000104AE 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000104B2                            ; ===========================================================================
000104B2 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000104B4 0000                       		dc.w Obj12_Animate-Obj12_Index
000104B6                            ; ===========================================================================
000104B6                            
000104B6                            Obj12_Main:				; XREF: Obj12_Index
000104B6 5428 0024                  		addq.b	#2,$24(a0)
000104BA 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000104C2 317C 0000 0002             		move.w	#0,2(a0)
000104C8 117C 0004 0001             		move.b	#4,1(a0)
000104CE 117C 0010 0019             		move.b	#$10,$19(a0)
000104D4 117C 0006 0018             		move.b	#6,$18(a0)
000104DA                            
000104DA                            Obj12_Animate:				; XREF: Obj12_Index
000104DA 5328 001E                  		subq.b	#1,$1E(a0)
000104DE 6A00                       		bpl.s	Obj12_ChkDel
000104E0 117C 0007 001E             		move.b	#7,$1E(a0)
000104E6 5228 001A                  		addq.b	#1,$1A(a0)
000104EA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000104F0 6500                       		bcs.s	Obj12_ChkDel
000104F2 117C 0000 001A             		move.b	#0,$1A(a0)
000104F8                            
000104F8                            Obj12_ChkDel:
000104F8 3028 0008                  		move.w	8(a0),d0
000104FC 0240 FF80                  		andi.w	#$FF80,d0
00010500 3238 F700                  		move.w	($FFFFF700).w,d1
00010504 0441 0080                  		subi.w	#$80,d1
00010508 0241 FF80                  		andi.w	#$FF80,d1
0001050C 9041                       		sub.w	d1,d0
0001050E 0C40 0280                  		cmpi.w	#$280,d0
00010512 6200 ECA8                  		bhi.w	DeleteObject
00010516 6000 EC68                  		bra.w	DisplaySprite
0001051A                            ; ===========================================================================
0001051A                            ; ---------------------------------------------------------------------------
0001051A                            ; Sprite mappings - lamp (SYZ)
0001051A                            ; ---------------------------------------------------------------------------
0001051A                            Map_obj12:
0001051A                            	include "_maps\obj12.asm"
0001051A                            ; ---------------------------------------------------------------------------
0001051A                            ; Sprite mappings - lamp (SYZ)
0001051A                            ; ---------------------------------------------------------------------------
0001051A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001051E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010522 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010526 02                         byte_E98E:	dc.b 2
00010527 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001052C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010531 02                         byte_E999:	dc.b 2
00010532 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010537 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001053C 02                         byte_E9A4:	dc.b 2
0001053D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010542 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010547 02                         byte_E9AF:	dc.b 2
00010548 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001054D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010552 02                         byte_E9BA:	dc.b 2
00010553 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010558 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001055D 02                         byte_E9C5:	dc.b 2
0001055E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010563 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010568                            		even
00010568                            		even
00010568                            
00010568                            ; ===========================================================================
00010568                            ; ---------------------------------------------------------------------------
00010568                            ; Object 47 - pinball bumper (SYZ)
00010568                            ; ---------------------------------------------------------------------------
00010568                            
00010568                            Obj47:					; XREF: Obj_Index
00010568 7000                       		moveq	#0,d0
0001056A 1028 0024                  		move.b	$24(a0),d0
0001056E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010572 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010576                            ; ===========================================================================
00010576 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00010578 0000                       		dc.w Obj47_Hit-Obj47_Index
0001057A                            ; ===========================================================================
0001057A                            
0001057A                            Obj47_Main:				; XREF: Obj47_Index
0001057A 5428 0024                  		addq.b	#2,$24(a0)
0001057E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010586 317C 0380 0002             		move.w	#$380,2(a0)
0001058C 117C 0004 0001             		move.b	#4,1(a0)
00010592 117C 0010 0019             		move.b	#$10,$19(a0)
00010598 117C 0001 0018             		move.b	#1,$18(a0)
0001059E 117C 00D7 0020             		move.b	#$D7,$20(a0)
000105A4                            
000105A4                            Obj47_Hit:				; XREF: Obj47_Index
000105A4 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000105A8 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000105AC 4228 0021                  		clr.b	$21(a0)
000105B0 43F8 D000                  		lea	($FFFFD000).w,a1
000105B4 3228 0008                  		move.w	8(a0),d1
000105B8 3428 000C                  		move.w	$C(a0),d2
000105BC 9269 0008                  		sub.w	8(a1),d1
000105C0 9469 000C                  		sub.w	$C(a1),d2
000105C4 4EB9 0000 2E48             		jsr	(CalcAngle).l
000105CA 4EB9 0000 2B7A             		jsr	(CalcSine).l
000105D0 C3FC F900                  		muls.w	#-$700,d1
000105D4 E081                       		asr.l	#8,d1
000105D6 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000105DA C1FC F900                  		muls.w	#-$700,d0
000105DE E080                       		asr.l	#8,d0
000105E0 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000105E4 08E9 0001 0022             		bset	#1,$22(a1)
000105EA 08A9 0004 0022             		bclr	#4,$22(a1)
000105F0 08A9 0005 0022             		bclr	#5,$22(a1)
000105F6 4229 003C                  		clr.b	$3C(a1)
000105FA 117C 0001 001C             		move.b	#1,$1C(a0)
00010600 303C 00B4                  		move.w	#$B4,d0
00010604 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bumper sound
0001060A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001060E 7000                       		moveq	#0,d0
00010610 1028 0023                  		move.b	$23(a0),d0
00010614 6700                       		beq.s	Obj47_Score
00010616 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0001061C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001061E 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010622                            
00010622                            Obj47_Score:
00010622 7001                       		moveq	#1,d0
00010624 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001062A 6100 EFE8                  		bsr.w	SingleObjLoad
0001062E 6600                       		bne.s	Obj47_Display
00010630 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010634 3368 0008 0008             		move.w	8(a0),8(a1)
0001063A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010640 137C 0004 001A             		move.b	#4,$1A(a1)
00010646                            
00010646                            Obj47_Display:
00010646 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001064C 6100 BAE4                  		bsr.w	AnimateSprite
00010650 3028 0008                  		move.w	8(a0),d0
00010654 0240 FF80                  		andi.w	#$FF80,d0
00010658 3238 F700                  		move.w	($FFFFF700).w,d1
0001065C 0441 0080                  		subi.w	#$80,d1
00010660 0241 FF80                  		andi.w	#$FF80,d1
00010664 9041                       		sub.w	d1,d0
00010666 0C40 0280                  		cmpi.w	#$280,d0
0001066A 6200                       		bhi.s	Obj47_ChkHit
0001066C 6000 EB12                  		bra.w	DisplaySprite
00010670                            ; ===========================================================================
00010670                            
00010670                            Obj47_ChkHit:				; XREF: Obj47_Display
00010670 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010674 7000                       		moveq	#0,d0
00010676 1028 0023                  		move.b	$23(a0),d0
0001067A 6700                       		beq.s	Obj47_Delete
0001067C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010682                            
00010682                            Obj47_Delete:
00010682 6000 EB38                  		bra.w	DeleteObject
00010686                            ; ===========================================================================
00010686                            Ani_obj47:
00010686                            	include "_anim\obj47.asm"
00010686                            ; ---------------------------------------------------------------------------
00010686                            ; Animation script - flamethrower (SBZ)
00010686                            ; ---------------------------------------------------------------------------
00010686 0000                       		dc.w byte_EAF4-Ani_obj47
00010688 0000                       		dc.w byte_EAF8-Ani_obj47
0001068A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001068E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010696                            		even
00010696                            		even
00010696                            
00010696                            ; ---------------------------------------------------------------------------
00010696                            ; Sprite mappings - pinball bumper (SYZ)
00010696                            ; ---------------------------------------------------------------------------
00010696                            Map_obj47:
00010696                            	include "_maps\obj47.asm"
00010696                            ; ---------------------------------------------------------------------------
00010696                            ; Sprite mappings - pinball bumper (SYZ)
00010696                            ; ---------------------------------------------------------------------------
00010696 0000                       		dc.w byte_EB06-Map_obj47
00010698 0000                       		dc.w byte_EB11-Map_obj47
0001069A 0000                       		dc.w byte_EB1C-Map_obj47
0001069C 02                         byte_EB06:	dc.b 2
0001069D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000106A2 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000106A7 02                         byte_EB11:	dc.b 2
000106A8 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000106AD F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000106B2 02                         byte_EB1C:	dc.b 2
000106B3 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000106B8 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000106BE 00                         		even
000106BE 00                         		even
000106BE                            
000106BE                            ; ===========================================================================
000106BE                            ; ---------------------------------------------------------------------------
000106BE                            ; Object 0D - signpost at the end of a level
000106BE                            ; ---------------------------------------------------------------------------
000106BE                            
000106BE                            Obj0D:					; XREF: Obj_Index
000106BE 7000                       		moveq	#0,d0
000106C0 1028 0024                  		move.b	$24(a0),d0
000106C4 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000106C8 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000106CC 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000106D2 6100 BA5E                  		bsr.w	AnimateSprite
000106D6 6100 EAA8                  		bsr.w	DisplaySprite
000106DA 3028 0008                  		move.w	8(a0),d0
000106DE 0240 FF80                  		andi.w	#$FF80,d0
000106E2 3238 F700                  		move.w	($FFFFF700).w,d1
000106E6 0441 0080                  		subi.w	#$80,d1
000106EA 0241 FF80                  		andi.w	#$FF80,d1
000106EE 9041                       		sub.w	d1,d0
000106F0 0C40 0280                  		cmpi.w	#$280,d0
000106F4 6200 EAC6                  		bhi.w	DeleteObject
000106F8 4E75                       		rts	
000106FA                            ; ===========================================================================
000106FA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
000106FC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
000106FE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010700 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010702 0000                       		dc.w locret_ED1A-Obj0D_Index
00010704                            ; ===========================================================================
00010704                            
00010704                            Obj0D_Main:				; XREF: Obj0D_Index
00010704 5428 0024                  		addq.b	#2,$24(a0)
00010708 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010710 317C 0680 0002             		move.w	#$680,2(a0)
00010716 117C 0004 0001             		move.b	#4,1(a0)
0001071C 117C 0018 0019             		move.b	#$18,$19(a0)
00010722 117C 0004 0018             		move.b	#4,$18(a0)
00010728                            
00010728                            Obj0D_Touch:				; XREF: Obj0D_Index
00010728 3038 D008                  		move.w	($FFFFD008).w,d0
0001072C 9068 0008                  		sub.w	8(a0),d0
00010730 6500                       		bcs.s	locret_EBBA
00010732 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010736 6400                       		bcc.s	locret_EBBA	; if not, branch
00010738 303C 00CF                  		move.w	#$CF,d0
0001073C 4EB9 0000 12C6             		jsr	(PlaySound).l	; play signpost	sound
00010742 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010746 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0001074C 5428 0024                  		addq.b	#2,$24(a0)
00010750                            
00010750                            locret_EBBA:
00010750 4E75                       		rts	
00010752                            ; ===========================================================================
00010752                            
00010752                            Obj0D_Spin:				; XREF: Obj0D_Index
00010752 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010756 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010758 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001075E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00010762 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010768 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0001076A 5428 0024                  		addq.b	#2,$24(a0)
0001076E                            
0001076E                            Obj0D_Sparkle:
0001076E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00010772 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010774 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0001077A 7000                       		moveq	#0,d0
0001077C 1028 0034                  		move.b	$34(a0),d0
00010780 5428 0034                  		addq.b	#2,$34(a0)
00010784 0228 000E 0034             		andi.b	#$E,$34(a0)
0001078A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001078E 6100 EE84                  		bsr.w	SingleObjLoad
00010792 6600                       		bne.s	locret_EC42
00010794 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00010798 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0001079E 101A                       		move.b	(a2)+,d0
000107A0 4880                       		ext.w	d0
000107A2 D068 0008                  		add.w	8(a0),d0
000107A6 3340 0008                  		move.w	d0,8(a1)
000107AA 101A                       		move.b	(a2)+,d0
000107AC 4880                       		ext.w	d0
000107AE D068 000C                  		add.w	$C(a0),d0
000107B2 3340 000C                  		move.w	d0,$C(a1)
000107B6 237C 0000 B9A8 0004        		move.l	#Map_obj25,4(a1)
000107BE 337C 27B2 0002             		move.w	#$27B2,2(a1)
000107C4 137C 0004 0001             		move.b	#4,1(a1)
000107CA 137C 0002 0018             		move.b	#2,$18(a1)
000107D0 137C 0008 0019             		move.b	#8,$19(a1)
000107D6                            
000107D6                            locret_EC42:
000107D6 4E75                       		rts	
000107D8                            ; ===========================================================================
000107D8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000107DA 0808                       		dc.b	8,   8
000107DC F000                       		dc.b -$10,   0
000107DE 18F8                       		dc.b  $18,  -8
000107E0 00F8                       		dc.b	0,  -8
000107E2 1000                       		dc.b  $10,   0
000107E4 E808                       		dc.b -$18,   8
000107E6 1810                       		dc.b  $18, $10
000107E8                            ; ===========================================================================
000107E8                            
000107E8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
000107E8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000107EC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000107F0 0838 0001 D022             		btst	#1,($FFFFD022).w
000107F6 6600                       		bne.s	loc_EC70
000107F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000107FE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010804                            
00010804                            loc_EC70:
00010804 4A38 D000                  		tst.b	($FFFFD000).w
00010808 6700                       		beq.s	loc_EC86
0001080A 3038 D008                  		move.w	($FFFFD008).w,d0
0001080E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010812 0641 0128                  		addi.w	#$128,d1
00010816 B041                       		cmp.w	d1,d0
00010818 6500                       		bcs.s	locret_ECEE
0001081A                            
0001081A                            loc_EC86:
0001081A 5428 0024                  		addq.b	#2,$24(a0)
0001081E                            
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            ; Subroutine to	set up bonuses at the end of an	act
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            
0001081E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001081E                            
0001081E                            
0001081E                            GotThroughAct:				; XREF: Obj3E_EndAct
0001081E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010822 6600                       		bne.s	locret_ECEE
00010824 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0001082A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001082E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010832 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010838 7010                       		moveq	#$10,d0
0001083A 4EB9 0000 15B8             		jsr	(LoadPLC2).l	; load title card patterns
00010840 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010846 7000                       		moveq	#0,d0
00010848 1038 FE23                  		move.b	($FFFFFE23).w,d0
0001084C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010850 7200                       		moveq	#0,d1
00010852 1238 FE24                  		move.b	($FFFFFE24).w,d1
00010856 D041                       		add.w	d1,d0		; add up your time
00010858 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001085C 7214                       		moveq	#$14,d1
0001085E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010860 6500                       		bcs.s	loc_ECD0	; if not, branch
00010862 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010864                            
00010864                            loc_ECD0:
00010864 D040                       		add.w	d0,d0
00010866 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0001086C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00010870 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010874 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
00010878 303C 008E                  		move.w	#$8E,d0
0001087C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00010882                            
00010882                            locret_ECEE:
00010882 4E75                       		rts	
00010884                            ; End of function GotThroughAct
00010884                            
00010884                            ; ===========================================================================
00010884 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010898 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000108AE                            ; ===========================================================================
000108AE                            
000108AE                            locret_ED1A:				; XREF: Obj0D_Index
000108AE 4E75                       		rts	
000108B0                            ; ===========================================================================
000108B0                            Ani_obj0D:
000108B0                            	include "_anim\obj0D.asm"
000108B0                            ; ---------------------------------------------------------------------------
000108B0                            ; Animation script - signpost
000108B0                            ; ---------------------------------------------------------------------------
000108B0 0000                       		dc.w byte_ED24-Ani_obj0D
000108B2 0000                       		dc.w byte_ED28-Ani_obj0D
000108B4 0000                       		dc.w byte_ED2E-Ani_obj0D
000108B6 0000                       		dc.w byte_ED34-Ani_obj0D
000108B8 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000108BC 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000108C2 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000108C8 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000108CC 00                         		even
000108CC 00                         		even
000108CC                            
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            ; Sprite mappings - signpost
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            Map_obj0D:
000108CC                            	include "_maps\obj0D.asm"
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            ; Sprite mappings - signpost
000108CC                            ; ---------------------------------------------------------------------------
000108CC 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
000108D0 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
000108D4 0000                       		dc.w byte_ED73-Map_obj0D
000108D6 03                         byte_ED42:	dc.b 3
000108D7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
000108DC F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
000108E1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000108E6 02                         byte_ED52:	dc.b 2
000108E7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
000108EC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000108F1 02                         byte_ED5D:	dc.b 2
000108F2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
000108F7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000108FC 02                         byte_ED68:	dc.b 2
000108FD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010902 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010907 03                         byte_ED73:	dc.b 3
00010908 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001090D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010912 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010918 00                         		even
00010918 00                         		even
00010918                            
00010918                            ; ===========================================================================
00010918                            ; ---------------------------------------------------------------------------
00010918                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010918                            ; ---------------------------------------------------------------------------
00010918                            
00010918                            Obj4C:					; XREF: Obj_Index
00010918 7000                       		moveq	#0,d0
0001091A 1028 0024                  		move.b	$24(a0),d0
0001091E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010922 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010926 6000 0000                  		bra.w	Obj4D_ChkDel
0001092A                            ; ===========================================================================
0001092A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001092C 0000                       		dc.w loc_EDCC-Obj4C_Index
0001092E 0000                       		dc.w loc_EE3E-Obj4C_Index
00010930 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010932 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010934 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010936                            ; ===========================================================================
00010936                            
00010936                            Obj4C_Main:				; XREF: Obj4C_Index
00010936 5428 0024                  		addq.b	#2,$24(a0)
0001093A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010942 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00010948 117C 0004 0001             		move.b	#4,1(a0)
0001094E 117C 0001 0018             		move.b	#1,$18(a0)
00010954 117C 0038 0019             		move.b	#$38,$19(a0)
0001095A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010960                            
00010960                            loc_EDCC:				; XREF: Obj4C_Index
00010960 5368 0032                  		subq.w	#1,$32(a0)
00010964 6A00                       		bpl.s	locret_EDF0
00010966 3168 0034 0032             		move.w	$34(a0),$32(a0)
0001096C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010970 3228 000C                  		move.w	$C(a0),d1
00010974 B041                       		cmp.w	d1,d0
00010976 6400                       		bcc.s	locret_EDF0
00010978 0441 0170                  		subi.w	#$170,d1
0001097C B041                       		cmp.w	d1,d0
0001097E 6500                       		bcs.s	locret_EDF0
00010980 5428 0024                  		addq.b	#2,$24(a0)
00010984                            
00010984                            locret_EDF0:
00010984 4E75                       		rts	
00010986                            ; ===========================================================================
00010986                            
00010986                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00010986 5428 0024                  		addq.b	#2,$24(a0)
0001098A 6100 EC9E                  		bsr.w	SingleObjLoad2
0001098E 6600                       		bne.s	loc_EE18
00010990 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00010994 3368 0008 0008             		move.w	8(a0),8(a1)
0001099A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109A0 1368 0028 0028             		move.b	$28(a0),$28(a1)
000109A6 2348 003C                  		move.l	a0,$3C(a1)
000109AA                            
000109AA                            loc_EE18:
000109AA 117C 0001 001C             		move.b	#1,$1C(a0)
000109B0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000109B4 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000109B6 117C 0004 001C             		move.b	#4,$1C(a0)
000109BC 6000                       		bra.s	Obj4C_Display
000109BE                            ; ===========================================================================
000109BE                            
000109BE                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000109BE 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000109C2 08E9 0001 0022             		bset	#1,$22(a1)
000109C8 337C FA80 0012             		move.w	#-$580,$12(a1)
000109CE 6000                       		bra.s	Obj4C_Display
000109D0                            ; ===========================================================================
000109D0                            
000109D0                            loc_EE3E:				; XREF: Obj4C_Index
000109D0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000109D4 6700                       		beq.s	Obj4C_Display	; if yes, branch
000109D6 5428 0024                  		addq.b	#2,$24(a0)
000109DA 4E75                       		rts	
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj4C_Display:				; XREF: Obj4C_Index
000109DC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000109E2 6100 B74E                  		bsr.w	AnimateSprite
000109E6 6100 E798                  		bsr.w	DisplaySprite
000109EA 4E75                       		rts	
000109EC                            ; ===========================================================================
000109EC                            
000109EC                            Obj4C_Delete:				; XREF: Obj4C_Index
000109EC 117C 0000 001C             		move.b	#0,$1C(a0)
000109F2 117C 0002 0024             		move.b	#2,$24(a0)
000109F8 4A28 0028                  		tst.b	$28(a0)
000109FC 6700 E7BE                  		beq.w	DeleteObject
00010A00 4E75                       		rts	
00010A02                            ; ===========================================================================
00010A02                            ; ---------------------------------------------------------------------------
00010A02                            ; Object 4D - lava geyser / lavafall (MZ)
00010A02                            ; ---------------------------------------------------------------------------
00010A02                            
00010A02                            Obj4D:					; XREF: Obj_Index
00010A02 7000                       		moveq	#0,d0
00010A04 1028 0024                  		move.b	$24(a0),d0
00010A08 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010A0C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010A10 6000 E76E                  		bra.w	DisplaySprite
00010A14                            ; ===========================================================================
00010A14 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010A16 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010A18 0000                       		dc.w loc_EFFC-Obj4D_Index
00010A1A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010A1C                            
00010A1C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010A20                            ; ===========================================================================
00010A20                            
00010A20                            Obj4D_Main:				; XREF: Obj4D_Index
00010A20 5428 0024                  		addq.b	#2,$24(a0)
00010A24 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A2A 4A28 0028                  		tst.b	$28(a0)
00010A2E 6700                       		beq.s	loc_EEA4
00010A30 0468 0250 000C             		subi.w	#$250,$C(a0)
00010A36                            
00010A36                            loc_EEA4:
00010A36 7000                       		moveq	#0,d0
00010A38 1028 0028                  		move.b	$28(a0),d0
00010A3C D040                       		add.w	d0,d0
00010A3E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010A44 2248                       		movea.l	a0,a1
00010A46 7201                       		moveq	#1,d1
00010A48 6100                       		bsr.s	Obj4D_MakeLava
00010A4A 6000                       		bra.s	loc_EF10
00010A4C                            ; ===========================================================================
00010A4C                            
00010A4C                            Obj4D_Loop:
00010A4C 6100 EBDC                  		bsr.w	SingleObjLoad2
00010A50 6600                       		bne.s	loc_EF0A
00010A52                            
00010A52                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010A52 12BC 004D                  		move.b	#$4D,0(a1)
00010A56 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010A5E 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010A64 137C 0004 0001             		move.b	#4,1(a1)
00010A6A 137C 0020 0019             		move.b	#$20,$19(a1)
00010A70 3368 0008 0008             		move.w	8(a0),8(a1)
00010A76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010A7C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010A82 137C 0001 0018             		move.b	#1,$18(a1)
00010A88 137C 0005 001C             		move.b	#5,$1C(a1)
00010A8E 4A28 0028                  		tst.b	$28(a0)
00010A92 6700                       		beq.s	loc_EF0A
00010A94 137C 0002 001C             		move.b	#2,$1C(a1)
00010A9A                            
00010A9A                            loc_EF0A:
00010A9A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00010A9E 4E75                       		rts	
00010AA0                            ; ===========================================================================
00010AA0                            
00010AA0                            loc_EF10:				; XREF: Obj4D_Main
00010AA0 0669 0060 000C             		addi.w	#$60,$C(a1)
00010AA6 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010AAC 0669 0060 0030             		addi.w	#$60,$30(a1)
00010AB2 137C 0093 0020             		move.b	#$93,$20(a1)
00010AB8 137C 0080 0016             		move.b	#$80,$16(a1)
00010ABE 08E9 0004 0001             		bset	#4,1(a1)
00010AC4 5829 0024                  		addq.b	#4,$24(a1)
00010AC8 2348 003C                  		move.l	a0,$3C(a1)
00010ACC 4A28 0028                  		tst.b	$28(a0)
00010AD0 6700                       		beq.s	Obj4D_PlaySnd
00010AD2 7200                       		moveq	#0,d1
00010AD4 6100 FF76                  		bsr.w	Obj4D_Loop
00010AD8 5429 0024                  		addq.b	#2,$24(a1)
00010ADC 08E9 0004 0002             		bset	#4,2(a1)
00010AE2 0669 0100 000C             		addi.w	#$100,$C(a1)
00010AE8 137C 0000 0018             		move.b	#0,$18(a1)
00010AEE 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010AF4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010AFA 117C 0000 0028             		move.b	#0,$28(a0)
00010B00                            
00010B00                            Obj4D_PlaySnd:
00010B00 303C 00C8                  		move.w	#$C8,d0
00010B04 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flame sound
00010B0A                            
00010B0A                            Obj4D_Action:				; XREF: Obj4D_Index
00010B0A 7000                       		moveq	#0,d0
00010B0C 1028 0028                  		move.b	$28(a0),d0
00010B10 D040                       		add.w	d0,d0
00010B12 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010B16 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010B1A 6100 E64A                  		bsr.w	SpeedToPos
00010B1E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010B24 6100 B60C                  		bsr.w	AnimateSprite
00010B28                            
00010B28                            Obj4D_ChkDel:				; XREF: Obj4C
00010B28 3028 0008                  		move.w	8(a0),d0
00010B2C 0240 FF80                  		andi.w	#$FF80,d0
00010B30 3238 F700                  		move.w	($FFFFF700).w,d1
00010B34 0441 0080                  		subi.w	#$80,d1
00010B38 0241 FF80                  		andi.w	#$FF80,d1
00010B3C 9041                       		sub.w	d1,d0
00010B3E 0C40 0280                  		cmpi.w	#$280,d0
00010B42 6200 E678                  		bhi.w	DeleteObject
00010B46 4E75                       		rts	
00010B48                            ; ===========================================================================
00010B48 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010B4A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010B4C                            ; ===========================================================================
00010B4C                            
00010B4C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010B4C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010B52 3028 0030                  		move.w	$30(a0),d0
00010B56 B068 000C                  		cmp.w	$C(a0),d0
00010B5A 6400                       		bcc.s	locret_EFDA
00010B5C 5828 0024                  		addq.b	#4,$24(a0)
00010B60 2268 003C                  		movea.l	$3C(a0),a1
00010B64 137C 0003 001C             		move.b	#3,$1C(a1)
00010B6A                            
00010B6A                            locret_EFDA:
00010B6A 4E75                       		rts	
00010B6C                            ; ===========================================================================
00010B6C                            
00010B6C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010B6C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010B72 3028 0030                  		move.w	$30(a0),d0
00010B76 B068 000C                  		cmp.w	$C(a0),d0
00010B7A 6400                       		bcc.s	locret_EFFA
00010B7C 5828 0024                  		addq.b	#4,$24(a0)
00010B80 2268 003C                  		movea.l	$3C(a0),a1
00010B84 137C 0001 001C             		move.b	#1,$1C(a1)
00010B8A                            
00010B8A                            locret_EFFA:
00010B8A 4E75                       		rts	
00010B8C                            ; ===========================================================================
00010B8C                            
00010B8C                            loc_EFFC:				; XREF: Obj4D_Index
00010B8C 2268 003C                  		movea.l	$3C(a0),a1
00010B90 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010B96 6700 0000                  		beq.w	Obj4D_Delete
00010B9A 3029 000C                  		move.w	$C(a1),d0
00010B9E 0640 0060                  		addi.w	#$60,d0
00010BA2 3140 000C                  		move.w	d0,$C(a0)
00010BA6 9068 0030                  		sub.w	$30(a0),d0
00010BAA 4440                       		neg.w	d0
00010BAC 7208                       		moveq	#8,d1
00010BAE 0C40 0040                  		cmpi.w	#$40,d0
00010BB2 6C00                       		bge.s	loc_F026
00010BB4 720B                       		moveq	#$B,d1
00010BB6                            
00010BB6                            loc_F026:
00010BB6 0C40 0080                  		cmpi.w	#$80,d0
00010BBA 6F00                       		ble.s	loc_F02E
00010BBC 720E                       		moveq	#$E,d1
00010BBE                            
00010BBE                            loc_F02E:
00010BBE 5328 001E                  		subq.b	#1,$1E(a0)
00010BC2 6A00                       		bpl.s	loc_F04C
00010BC4 117C 0007 001E             		move.b	#7,$1E(a0)
00010BCA 5228 001B                  		addq.b	#1,$1B(a0)
00010BCE 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010BD4 6500                       		bcs.s	loc_F04C
00010BD6 117C 0000 001B             		move.b	#0,$1B(a0)
00010BDC                            
00010BDC                            loc_F04C:
00010BDC 1028 001B                  		move.b	$1B(a0),d0
00010BE0 D001                       		add.b	d1,d0
00010BE2 1140 001A                  		move.b	d0,$1A(a0)
00010BE6 6000 FF40                  		bra.w	Obj4D_ChkDel
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj4D_Delete:				; XREF: Obj4D_Index
00010BEA 6000 E5D0                  		bra.w	DeleteObject
00010BEE                            ; ===========================================================================
00010BEE                            ; ---------------------------------------------------------------------------
00010BEE                            ; Object 4E - advancing	wall of	lava (MZ)
00010BEE                            ; ---------------------------------------------------------------------------
00010BEE                            
00010BEE                            Obj4E:					; XREF: Obj_Index
00010BEE 7000                       		moveq	#0,d0
00010BF0 1028 0024                  		move.b	$24(a0),d0
00010BF4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010BF8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010BFC                            ; ===========================================================================
00010BFC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010BFE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010C00 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010C02 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010C04 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            Obj4E_Main:				; XREF: Obj4E_Index
00010C06 5828 0024                  		addq.b	#4,$24(a0)
00010C0A 2248                       		movea.l	a0,a1
00010C0C 7201                       		moveq	#1,d1
00010C0E 6000                       		bra.s	Obj4E_Main2
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            Obj4E_Loop:
00010C10 6100 EA18                  		bsr.w	SingleObjLoad2
00010C14 6600                       		bne.s	loc_F0C8
00010C16                            
00010C16                            Obj4E_Main2:				; XREF: Obj4E_Main
00010C16 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010C1A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010C22 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010C28 137C 0004 0001             		move.b	#4,1(a1)
00010C2E 137C 0050 0019             		move.b	#$50,$19(a1)
00010C34 3368 0008 0008             		move.w	8(a0),8(a1)
00010C3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010C40 137C 0001 0018             		move.b	#1,$18(a1)
00010C46 137C 0000 001C             		move.b	#0,$1C(a1)
00010C4C 137C 0094 0020             		move.b	#$94,$20(a1)
00010C52 2348 003C                  		move.l	a0,$3C(a1)
00010C56                            
00010C56                            loc_F0C8:
00010C56 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010C5A                            
00010C5A 5C29 0024                  		addq.b	#6,$24(a1)
00010C5E 137C 0004 001A             		move.b	#4,$1A(a1)
00010C64                            
00010C64                            Obj4E_Action:				; XREF: Obj4E_Index
00010C64 3038 D008                  		move.w	($FFFFD008).w,d0
00010C68 9068 0008                  		sub.w	8(a0),d0
00010C6C 6400                       		bcc.s	Obj4E_ChkSonic
00010C6E 4440                       		neg.w	d0
00010C70                            
00010C70                            Obj4E_ChkSonic:
00010C70 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010C74 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010C76 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C7A 9068 000C                  		sub.w	$C(a0),d0
00010C7E 6400                       		bcc.s	loc_F0F4
00010C80 4440                       		neg.w	d0
00010C82                            
00010C82                            loc_F0F4:
00010C82 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010C86 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010C88 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010C8E 6000                       		bra.s	Obj4E_Solid
00010C90                            ; ===========================================================================
00010C90                            
00010C90                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010C90 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010C94 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010C96 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010C9C 5528 0024                  		subq.b	#2,$24(a0)
00010CA0                            
00010CA0                            Obj4E_Solid:				; XREF: Obj4E_Index
00010CA0 323C 002B                  		move.w	#$2B,d1
00010CA4 343C 0018                  		move.w	#$18,d2
00010CA8 3602                       		move.w	d2,d3
00010CAA 5243                       		addq.w	#1,d3
00010CAC 3828 0008                  		move.w	8(a0),d4
00010CB0 1028 0024                  		move.b	$24(a0),d0
00010CB4 3F00                       		move.w	d0,-(sp)
00010CB6 6100 0000                  		bsr.w	SolidObject
00010CBA 301F                       		move.w	(sp)+,d0
00010CBC 1140 0024                  		move.b	d0,$24(a0)
00010CC0 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010CC6 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010CC8 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010CCC 4228 0036                  		clr.b	$36(a0)
00010CD0                            
00010CD0                            Obj4E_Animate:
00010CD0 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010CD6 6100 B45A                  		bsr.w	AnimateSprite
00010CDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010CE0 6400                       		bcc.s	Obj4E_ChkDel
00010CE2 6100 E482                  		bsr.w	SpeedToPos
00010CE6                            
00010CE6                            Obj4E_ChkDel:
00010CE6 6100 E498                  		bsr.w	DisplaySprite
00010CEA 4A28 0036                  		tst.b	$36(a0)
00010CEE 6600                       		bne.s	locret_F17E
00010CF0 3028 0008                  		move.w	8(a0),d0
00010CF4 0240 FF80                  		andi.w	#$FF80,d0
00010CF8 3238 F700                  		move.w	($FFFFF700).w,d1
00010CFC 0441 0080                  		subi.w	#$80,d1
00010D00 0241 FF80                  		andi.w	#$FF80,d1
00010D04 9041                       		sub.w	d1,d0
00010D06 0C40 0280                  		cmpi.w	#$280,d0
00010D0A 6200                       		bhi.s	Obj4E_ChkGone
00010D0C                            
00010D0C                            locret_F17E:
00010D0C 4E75                       		rts	
00010D0E                            ; ===========================================================================
00010D0E                            
00010D0E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010D0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D12 7000                       		moveq	#0,d0
00010D14 1028 0023                  		move.b	$23(a0),d0
00010D18 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D1E 117C 0008 0024             		move.b	#8,$24(a0)
00010D24 4E75                       		rts	
00010D26                            ; ===========================================================================
00010D26                            
00010D26                            Obj4E_Move2:				; XREF: Obj4E_Index
00010D26 2268 003C                  		movea.l	$3C(a0),a1
00010D2A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010D30 6700                       		beq.s	Obj4E_Delete
00010D32 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010D38 0468 0080 0008             		subi.w	#$80,8(a0)
00010D3E 6000 E440                  		bra.w	DisplaySprite
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            Obj4E_Delete:				; XREF: Obj4E_Index
00010D42 6000 E478                  		bra.w	DeleteObject
00010D46                            ; ===========================================================================
00010D46                            ; ---------------------------------------------------------------------------
00010D46                            ; Object 54 - invisible	lava tag (MZ)
00010D46                            ; ---------------------------------------------------------------------------
00010D46                            
00010D46                            Obj54:					; XREF: Obj_Index
00010D46 7000                       		moveq	#0,d0
00010D48 1028 0024                  		move.b	$24(a0),d0
00010D4C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010D50 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010D54                            ; ===========================================================================
00010D54 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010D56 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010D58                            
00010D58 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010D5C                            ; ===========================================================================
00010D5C                            
00010D5C                            Obj54_Main:				; XREF: Obj54_Index
00010D5C 5428 0024                  		addq.b	#2,$24(a0)
00010D60 7000                       		moveq	#0,d0
00010D62 1028 0028                  		move.b	$28(a0),d0
00010D66 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010D6C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010D74 117C 0084 0001             		move.b	#$84,1(a0)
00010D7A                            
00010D7A                            Obj54_ChkDel:				; XREF: Obj54_Index
00010D7A 3028 0008                  		move.w	8(a0),d0
00010D7E 0240 FF80                  		andi.w	#$FF80,d0
00010D82 3238 F700                  		move.w	($FFFFF700).w,d1
00010D86 0441 0080                  		subi.w	#$80,d1
00010D8A 0241 FF80                  		andi.w	#$FF80,d1
00010D8E 9041                       		sub.w	d1,d0
00010D90 6B00 E42A                  		bmi.w	DeleteObject
00010D94 0C40 0280                  		cmpi.w	#$280,d0
00010D98 6200 E422                  		bhi.w	DeleteObject
00010D9C 4E75                       		rts	
00010D9E                            ; ===========================================================================
00010D9E                            ; ---------------------------------------------------------------------------
00010D9E                            ; Sprite mappings - invisible lava tag (MZ)
00010D9E                            ; ---------------------------------------------------------------------------
00010D9E                            Map_obj54:
00010D9E                            	include "_maps\obj54.asm"
00010D9E                            ; ---------------------------------------------------------------------------
00010D9E                            ; Sprite mappings - invisible lava tag (MZ)
00010D9E                            ; ---------------------------------------------------------------------------
00010D9E 0000                       		dc.w byte_F212-Map_obj54
00010DA0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010DA2 00                         		even
00010DA2 00                         		even
00010DA2                            
00010DA2                            Ani_obj4C:
00010DA2                            	include "_anim\obj4C.asm"
00010DA2                            ; ---------------------------------------------------------------------------
00010DA2                            ; Animation script - geyser of lava (MZ)
00010DA2                            ; ---------------------------------------------------------------------------
00010DA2 0000                       		dc.w byte_F220-Ani_obj4C
00010DA4 0000                       		dc.w byte_F22A-Ani_obj4C
00010DA6 0000                       		dc.w byte_F22E-Ani_obj4C
00010DA8 0000                       		dc.w byte_F232-Ani_obj4C
00010DAA 0000                       		dc.w byte_F23A-Ani_obj4C
00010DAC 0000                       		dc.w byte_F23E-Ani_obj4C
00010DAE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010DB8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010DBC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010DC0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010DC8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010DCC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010DD0                            		even
00010DD0                            		even
00010DD0                            
00010DD0                            Ani_obj4E:
00010DD0                            	include "_anim\obj4E.asm"
00010DD0                            ; ---------------------------------------------------------------------------
00010DD0                            ; Animation script - advancing wall of lava (MZ)
00010DD0                            ; ---------------------------------------------------------------------------
00010DD0 0000                       		dc.w byte_F244-Ani_obj4E
00010DD2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010DD8                            		even
00010DD8                            		even
00010DD8                            
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8                            Map_obj4C:
00010DD8                            	include "_maps\obj4C.asm"
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010DDC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010DE0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010DE4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010DE8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010DEC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010DF0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010DF4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010DF8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010DFC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010E00 02                         byte_F272:	dc.b 2
00010E01 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010E06 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010E0B 02                         byte_F27D:	dc.b 2
00010E0C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010E11 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010E16 04                         byte_F288:	dc.b 4
00010E17 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010E1C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010E21 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010E26 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010E2B 04                         byte_F29D:	dc.b 4
00010E2C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010E31 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010E36 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010E3B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010E40 06                         byte_F2B2:	dc.b 6
00010E41 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010E46 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010E4B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010E50 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010E55 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010E5A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010E5F 06                         byte_F2D1:	dc.b 6
00010E60 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010E65 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010E6A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010E6F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010E74 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010E79 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010E7E 02                         byte_F2F0:	dc.b 2
00010E7F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010E84 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010E89 02                         byte_F2FB:	dc.b 2
00010E8A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010E8F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010E94 0A                         byte_F306:	dc.b $A
00010E95 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010E9A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010E9F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010EA4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EA9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010EAE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010EB3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010EB8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010EBD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010EC2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010EC7 0A                         byte_F339:	dc.b $A
00010EC8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010ECD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010ED2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010ED7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010EDC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010EE1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010EE6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010EEB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010EF0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010EF5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010EFA 0A                         byte_F36C:	dc.b $A
00010EFB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F00 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F05 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F0A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F0F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F14 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F19 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010F1E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010F23 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010F28 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010F2D 06                         byte_F39F:	dc.b 6
00010F2E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010F33 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010F38 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010F3D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010F42 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010F47 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010F4C 06                         byte_F3BE:	dc.b 6
00010F4D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010F52 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010F57 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010F5C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010F61 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010F66 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010F6B 06                         byte_F3DD:	dc.b 6
00010F6C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F71 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F76 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F7B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F80 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F85 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F8A 10                         byte_F3FC:	dc.b $10
00010F8B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010F90 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010F95 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010F9A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010F9F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010FA4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010FA9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010FAE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010FB3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010FB8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010FBD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010FC2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010FC7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010FCC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010FD1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010FD6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010FDB 10                         byte_F44D:	dc.b $10
00010FDC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010FE1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010FE6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010FEB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010FF0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010FF5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010FFA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010FFF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011004 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011009 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001100E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011013 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011018 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001101D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011022 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011027 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001102C 10                         byte_F49E:	dc.b $10
0001102D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011032 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011037 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001103C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011041 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011046 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001104B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011050 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011055 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001105A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001105F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011064 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011069 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001106E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011073 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011078 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001107D 06                         byte_F4EF:	dc.b 6
0001107E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011083 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011088 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001108D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011092 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011097 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001109C 06                         byte_F50E:	dc.b 6
0001109D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000110A2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000110A7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000110AC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000110B1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000110B6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000110BB 00                         byte_F52D:	dc.b 0
000110BC                            		even
000110BC                            		even
000110BC                            
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            ; Sprite mappings - advancing wall of lava (MZ)
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            Map_obj4E:
000110BC                            	include "_maps\obj4E.asm"
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            ; Sprite mappings - advancing wall of lava (MZ)
000110BC                            ; ---------------------------------------------------------------------------
000110BC 0000                       		dc.w byte_F538-Map_obj4E
000110BE 0000                       		dc.w byte_F566-Map_obj4E
000110C0 0000                       		dc.w byte_F594-Map_obj4E
000110C2 0000                       		dc.w byte_F5C2-Map_obj4E
000110C4 0000                       		dc.w byte_F5F0-Map_obj4E
000110C6 09                         byte_F538:	dc.b 9
000110C7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000110CC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000110D1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110D6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110DB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110E0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110E5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110EA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110EF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110F4 09                         byte_F566:	dc.b 9
000110F5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000110FA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000110FF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011104 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011109 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001110E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011113 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011118 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001111D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011122 09                         byte_F594:	dc.b 9
00011123 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00011128 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001112D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011132 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011137 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001113C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011141 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011146 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001114B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011150 09                         byte_F5C2:	dc.b 9
00011151 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00011156 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001115B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011160 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011165 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001116A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001116F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011174 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011179 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001117E 08                         byte_F5F0:	dc.b 8
0001117F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00011184 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011189 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001118E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011193 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011198 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001119D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000111A2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000111A8 00                         		even
000111A8 00                         		even
000111A8                            
000111A8                            ; ===========================================================================
000111A8                            ; ---------------------------------------------------------------------------
000111A8                            ; Object 40 - Moto Bug enemy (GHZ)
000111A8                            ; ---------------------------------------------------------------------------
000111A8                            
000111A8                            Obj40:					; XREF: Obj_Index
000111A8 7000                       		moveq	#0,d0
000111AA 1028 0024                  		move.b	$24(a0),d0
000111AE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000111B2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000111B6                            ; ===========================================================================
000111B6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000111B8 0000                       		dc.w Obj40_Action-Obj40_Index
000111BA 0000                       		dc.w Obj40_Animate-Obj40_Index
000111BC 0000                       		dc.w Obj40_Delete-Obj40_Index
000111BE                            ; ===========================================================================
000111BE                            
000111BE                            Obj40_Main:				; XREF: Obj40_Index
000111BE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000111C6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000111CC 117C 0004 0001             		move.b	#4,1(a0)
000111D2 117C 0004 0018             		move.b	#4,$18(a0)
000111D8 117C 0014 0019             		move.b	#$14,$19(a0)
000111DE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000111E2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000111E4 117C 000E 0016             		move.b	#$E,$16(a0)
000111EA 117C 0008 0017             		move.b	#8,$17(a0)
000111F0 117C 000C 0020             		move.b	#$C,$20(a0)
000111F6 6100 DF4E                  		bsr.w	ObjectFall
000111FA 4EB9 0000 0000             		jsr	ObjHitFloor
00011200 4A41                       		tst.w	d1
00011202 6A00                       		bpl.s	locret_F68A
00011204 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011208 317C 0000 0012             		move.w	#0,$12(a0)
0001120E 5428 0024                  		addq.b	#2,$24(a0)
00011212 0868 0000 0022             		bchg	#0,$22(a0)
00011218                            
00011218                            locret_F68A:
00011218 4E75                       		rts	
0001121A                            ; ===========================================================================
0001121A                            
0001121A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001121A 5828 0024                  		addq.b	#4,$24(a0)
0001121E 6000 0000                  		bra.w	Obj40_Animate
00011222                            ; ===========================================================================
00011222                            
00011222                            Obj40_Action:				; XREF: Obj40_Index
00011222 7000                       		moveq	#0,d0
00011224 1028 0025                  		move.b	$25(a0),d0
00011228 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001122C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00011230 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011236 6100 AEFA                  		bsr.w	AnimateSprite
0001123A                            
0001123A                            ; ---------------------------------------------------------------------------
0001123A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001123A                            ; ---------------------------------------------------------------------------
0001123A                            
0001123A                            MarkObjGone:
0001123A 3028 0008                  		move.w	8(a0),d0
0001123E 0240 FF80                  		andi.w	#$FF80,d0
00011242 3238 F700                  		move.w	($FFFFF700).w,d1
00011246 0441 0080                  		subi.w	#$80,d1
0001124A 0241 FF80                  		andi.w	#$FF80,d1
0001124E 9041                       		sub.w	d1,d0
00011250 0C40 0280                  		cmpi.w	#$280,d0
00011254 6200 0000                  		bhi.w	Mark_ChkGone
00011258 6000 DF26                  		bra.w	DisplaySprite
0001125C                            ; ===========================================================================
0001125C                            
0001125C                            Mark_ChkGone:
0001125C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011260 7000                       		moveq	#0,d0
00011262 1028 0023                  		move.b	$23(a0),d0
00011266 6700                       		beq.s	Mark_Delete
00011268 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001126E                            
0001126E                            Mark_Delete:
0001126E 6000 DF4C                  		bra.w	DeleteObject
00011272                            
00011272                            ; ===========================================================================
00011272 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00011274 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00011276                            ; ===========================================================================
00011276                            
00011276                            Obj40_Move:				; XREF: Obj40_Index2
00011276 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001127A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001127C 5428 0025                  		addq.b	#2,$25(a0)
00011280 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00011286 117C 0001 001C             		move.b	#1,$1C(a0)
0001128C 0868 0000 0022             		bchg	#0,$22(a0)
00011292 6600                       		bne.s	locret_F70A
00011294 4468 0010                  		neg.w	$10(a0)		; change direction
00011298                            
00011298                            locret_F70A:
00011298 4E75                       		rts	
0001129A                            ; ===========================================================================
0001129A                            
0001129A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001129A 6100 DECA                  		bsr.w	SpeedToPos
0001129E 4EB9 0000 0000             		jsr	ObjHitFloor
000112A4 0C41 FFF8                  		cmpi.w	#-8,d1
000112A8 6D00                       		blt.s	Obj40_Pause
000112AA 0C41 000C                  		cmpi.w	#$C,d1
000112AE 6C00                       		bge.s	Obj40_Pause
000112B0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000112B4 5328 0033                  		subq.b	#1,$33(a0)
000112B8 6A00                       		bpl.s	locret_F756
000112BA 117C 000F 0033             		move.b	#$F,$33(a0)
000112C0 6100 E352                  		bsr.w	SingleObjLoad
000112C4 6600                       		bne.s	locret_F756
000112C6 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000112CA 3368 0008 0008             		move.w	8(a0),8(a1)
000112D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112D6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000112DC 137C 0002 001C             		move.b	#2,$1C(a1)
000112E2                            
000112E2                            locret_F756:
000112E2 4E75                       		rts	
000112E4                            ; ===========================================================================
000112E4                            
000112E4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000112E4 5528 0025                  		subq.b	#2,$25(a0)
000112E8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000112EE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000112F4 117C 0000 001C             		move.b	#0,$1C(a0)
000112FA 4E75                       		rts	
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj40_Animate:				; XREF: Obj40_Index
000112FC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011302 6100 AE2E                  		bsr.w	AnimateSprite
00011306 6000 DE78                  		bra.w	DisplaySprite
0001130A                            ; ===========================================================================
0001130A                            
0001130A                            Obj40_Delete:				; XREF: Obj40_Index
0001130A 6000 DEB0                  		bra.w	DeleteObject
0001130E                            ; ===========================================================================
0001130E                            Ani_obj40:
0001130E                            	include "_anim\obj40.asm"
0001130E                            ; ---------------------------------------------------------------------------
0001130E                            ; Animation script - Motobug enemy
0001130E                            ; ---------------------------------------------------------------------------
0001130E 0000                       		dc.w byte_F788-Ani_obj40
00011310 0000                       		dc.w byte_F78C-Ani_obj40
00011312 0000                       		dc.w byte_F792-Ani_obj40
00011314 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011318 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001131E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001132C                            		even
0001132C                            		even
0001132C                            
0001132C                            ; ---------------------------------------------------------------------------
0001132C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001132C                            ; ---------------------------------------------------------------------------
0001132C                            Map_obj40:
0001132C                            	include "_maps\obj40.asm"
0001132C                            ; ---------------------------------------------------------------------------
0001132C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001132C                            ; ---------------------------------------------------------------------------
0001132C 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00011330 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011334 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011338 0000                       		dc.w byte_F804-Map_obj40
0001133A 04                         byte_F7AE:	dc.b 4
0001133B F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011340 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00011345 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0001134A 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0001134F 04                         byte_F7C3:	dc.b 4
00011350 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00011355 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0001135A F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0001135F 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00011364 05                         byte_F7D8:	dc.b 5
00011365 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001136A 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0001136F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011374 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00011379 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0001137E 01                         byte_F7F2:	dc.b 1
0001137F FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00011384 01                         byte_F7F8:	dc.b 1
00011385 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0001138A 01                         byte_F7FE:	dc.b 1
0001138B FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00011390 00                         byte_F804:	dc.b 0
00011392 00                         		even
00011392 00                         		even
00011392                            
00011392                            ; ===========================================================================
00011392                            ; ---------------------------------------------------------------------------
00011392                            ; Object 4F - blank
00011392                            ; ---------------------------------------------------------------------------
00011392                            
00011392                            Obj4F:					; XREF: Obj_Index
00011392 4E75                       		rts	
00011394                            
00011394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011394                            
00011394                            
00011394                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00011394 3038 FE04                  		move.w	($FFFFFE04).w,d0
00011398 D047                       		add.w	d7,d0
0001139A 0240 0003                  		andi.w	#3,d0
0001139E 6600                       		bne.s	loc_F836
000113A0 7600                       		moveq	#0,d3
000113A2 1628 0019                  		move.b	$19(a0),d3
000113A6 4A68 0010                  		tst.w	$10(a0)
000113AA 6B00                       		bmi.s	loc_F82C
000113AC 6100 0000                  		bsr.w	ObjHitWallRight
000113B0 4A41                       		tst.w	d1
000113B2 6A00                       		bpl.s	loc_F836
000113B4                            
000113B4                            loc_F828:
000113B4 7001                       		moveq	#1,d0
000113B6 4E75                       		rts	
000113B8                            ; ===========================================================================
000113B8                            
000113B8                            loc_F82C:
000113B8 4643                       		not.w	d3
000113BA 6100 0000                  		bsr.w	ObjHitWallLeft
000113BE 4A41                       		tst.w	d1
000113C0 6BF2                       		bmi.s	loc_F828
000113C2                            
000113C2                            loc_F836:
000113C2 7000                       		moveq	#0,d0
000113C4 4E75                       		rts	
000113C6                            ; End of function Obj50_ChkWall
000113C6                            
000113C6                            ; ===========================================================================
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            ; Object 50 - Yadrin enemy (SYZ)
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            
000113C6                            Obj50:					; XREF: Obj_Index
000113C6 7000                       		moveq	#0,d0
000113C8 1028 0024                  		move.b	$24(a0),d0
000113CC 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000113D0 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000113D4                            ; ===========================================================================
000113D4 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000113D6 0000                       		dc.w Obj50_Action-Obj50_Index
000113D8                            ; ===========================================================================
000113D8                            
000113D8                            Obj50_Main:				; XREF: Obj50_Index
000113D8 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000113E0 317C 247B 0002             		move.w	#$247B,2(a0)
000113E6 117C 0004 0001             		move.b	#4,1(a0)
000113EC 117C 0004 0018             		move.b	#4,$18(a0)
000113F2 117C 0014 0019             		move.b	#$14,$19(a0)
000113F8 117C 0011 0016             		move.b	#$11,$16(a0)
000113FE 117C 0008 0017             		move.b	#8,$17(a0)
00011404 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001140A 6100 DD3A                  		bsr.w	ObjectFall
0001140E 6100 0000                  		bsr.w	ObjHitFloor
00011412 4A41                       		tst.w	d1
00011414 6A00                       		bpl.s	locret_F89E
00011416 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001141A 317C 0000 0012             		move.w	#0,$12(a0)
00011420 5428 0024                  		addq.b	#2,$24(a0)
00011424 0868 0000 0022             		bchg	#0,$22(a0)
0001142A                            
0001142A                            locret_F89E:
0001142A 4E75                       		rts	
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            Obj50_Action:				; XREF: Obj50_Index
0001142C 7000                       		moveq	#0,d0
0001142E 1028 0025                  		move.b	$25(a0),d0
00011432 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011436 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001143A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00011440 6100 ACF0                  		bsr.w	AnimateSprite
00011444 6000 FDF4                  		bra.w	MarkObjGone
00011448                            ; ===========================================================================
00011448 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001144A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001144C                            ; ===========================================================================
0001144C                            
0001144C                            Obj50_Move:				; XREF: Obj50_Index2
0001144C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00011450 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011452 5428 0025                  		addq.b	#2,$25(a0)
00011456 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001145C 117C 0001 001C             		move.b	#1,$1C(a0)
00011462 0868 0000 0022             		bchg	#0,$22(a0)
00011468 6600                       		bne.s	locret_F8E2
0001146A 4468 0010                  		neg.w	$10(a0)		; change direction
0001146E                            
0001146E                            locret_F8E2:
0001146E 4E75                       		rts	
00011470                            ; ===========================================================================
00011470                            
00011470                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00011470 6100 DCF4                  		bsr.w	SpeedToPos
00011474 6100 0000                  		bsr.w	ObjHitFloor
00011478 0C41 FFF8                  		cmpi.w	#-8,d1
0001147C 6D00                       		blt.s	Obj50_Pause
0001147E 0C41 000C                  		cmpi.w	#$C,d1
00011482 6C00                       		bge.s	Obj50_Pause
00011484 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00011488 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001148C 6600                       		bne.s	Obj50_Pause
0001148E 4E75                       		rts	
00011490                            ; ===========================================================================
00011490                            
00011490                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00011490 5528 0025                  		subq.b	#2,$25(a0)
00011494 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001149A 317C 0000 0010             		move.w	#0,$10(a0)
000114A0 117C 0000 001C             		move.b	#0,$1C(a0)
000114A6 4E75                       		rts	
000114A8                            ; ===========================================================================
000114A8                            Ani_obj50:
000114A8                            	include "_anim\obj50.asm"
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            ; Animation script - Yadrin enemy
000114A8                            ; ---------------------------------------------------------------------------
000114A8 0000                       		dc.w byte_F920-Ani_obj50
000114AA 0000                       		dc.w byte_F924-Ani_obj50
000114AC 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000114B0 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000114BA                            		even
000114BA                            		even
000114BA                            
000114BA                            ; ---------------------------------------------------------------------------
000114BA                            ; Sprite mappings - Yadrin enemy (SYZ)
000114BA                            ; ---------------------------------------------------------------------------
000114BA                            Map_obj50:
000114BA                            	include "_maps\obj50.asm"
000114BA                            ; ---------------------------------------------------------------------------
000114BA                            ; Sprite mappings - Yadrin enemy (SYZ)
000114BA                            ; ---------------------------------------------------------------------------
000114BA 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000114BE 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000114C2 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000114C6 05                         byte_F93A:	dc.b 5
000114C7 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000114CC FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000114D1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000114D6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114DB 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000114E0 05                         byte_F954:	dc.b 5
000114E1 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000114E6 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000114EB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000114F0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000114F5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000114FA 05                         byte_F96E:	dc.b 5
000114FB F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011500 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011505 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001150A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001150F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011514 05                         byte_F988:	dc.b 5
00011515 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001151A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001151F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011524 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011529 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001152E 05                         byte_F9A2:	dc.b 5
0001152F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011534 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011539 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001153E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011543 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011548 05                         byte_F9BC:	dc.b 5
00011549 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001154E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011553 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011558 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001155D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011562                            		even
00011562                            		even
00011562                            
00011562                            ; ---------------------------------------------------------------------------
00011562                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011562                            ;
00011562                            ; variables:
00011562                            ; d1 = width
00011562                            ; d2 = height /	2 (when	jumping)
00011562                            ; d3 = height /	2 (when	walking)
00011562                            ; d4 = x-axis position
00011562                            ; ---------------------------------------------------------------------------
00011562                            
00011562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011562                            
00011562                            
00011562                            SolidObject:
00011562 4A28 0025                  		tst.b	$25(a0)
00011566 6700 0000                  		beq.w	loc_FAC8
0001156A 3401                       		move.w	d1,d2
0001156C D442                       		add.w	d2,d2
0001156E 43F8 D000                  		lea	($FFFFD000).w,a1
00011572 0829 0001 0022             		btst	#1,$22(a1)
00011578 6600                       		bne.s	loc_F9FE
0001157A 3029 0008                  		move.w	8(a1),d0
0001157E 9068 0008                  		sub.w	8(a0),d0
00011582 D041                       		add.w	d1,d0
00011584 6B00                       		bmi.s	loc_F9FE
00011586 B042                       		cmp.w	d2,d0
00011588 6500                       		bcs.s	loc_FA12
0001158A                            
0001158A                            loc_F9FE:
0001158A 08A9 0003 0022             		bclr	#3,$22(a1)
00011590 08A8 0003 0022             		bclr	#3,$22(a0)
00011596 4228 0025                  		clr.b	$25(a0)
0001159A 7800                       		moveq	#0,d4
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            loc_FA12:
0001159E 3404                       		move.w	d4,d2
000115A0 4EB9 0000 950E             		jsr	MvSonicOnPtfm
000115A6 7800                       		moveq	#0,d4
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            SolidObject71:				; XREF: Obj71_Solid
000115AA 4A28 0025                  		tst.b	$25(a0)
000115AE 6700 0000                  		beq.w	loc_FAD0
000115B2 3401                       		move.w	d1,d2
000115B4 D442                       		add.w	d2,d2
000115B6 43F8 D000                  		lea	($FFFFD000).w,a1
000115BA 0829 0001 0022             		btst	#1,$22(a1)
000115C0 6600                       		bne.s	loc_FA44
000115C2 3029 0008                  		move.w	8(a1),d0
000115C6 9068 0008                  		sub.w	8(a0),d0
000115CA D041                       		add.w	d1,d0
000115CC 6B00                       		bmi.s	loc_FA44
000115CE B042                       		cmp.w	d2,d0
000115D0 6500                       		bcs.s	loc_FA58
000115D2                            
000115D2                            loc_FA44:
000115D2 08A9 0003 0022             		bclr	#3,$22(a1)
000115D8 08A8 0003 0022             		bclr	#3,$22(a0)
000115DE 4228 0025                  		clr.b	$25(a0)
000115E2 7800                       		moveq	#0,d4
000115E4 4E75                       		rts	
000115E6                            ; ===========================================================================
000115E6                            
000115E6                            loc_FA58:
000115E6 3404                       		move.w	d4,d2
000115E8 4EB9 0000 950E             		jsr	MvSonicOnPtfm
000115EE 7800                       		moveq	#0,d4
000115F0 4E75                       		rts	
000115F2                            ; ===========================================================================
000115F2                            
000115F2                            SolidObject2F:				; XREF: Obj2F_Solid
000115F2 43F8 D000                  		lea	($FFFFD000).w,a1
000115F6 4A28 0001                  		tst.b	1(a0)
000115FA 6A00 0000                  		bpl.w	loc_FB92
000115FE 3029 0008                  		move.w	8(a1),d0
00011602 9068 0008                  		sub.w	8(a0),d0
00011606 D041                       		add.w	d1,d0
00011608 6B00 0000                  		bmi.w	loc_FB92
0001160C 3601                       		move.w	d1,d3
0001160E D643                       		add.w	d3,d3
00011610 B043                       		cmp.w	d3,d0
00011612 6200 0000                  		bhi.w	loc_FB92
00011616 3A00                       		move.w	d0,d5
00011618 0828 0000 0001             		btst	#0,1(a0)
0001161E 6700                       		beq.s	loc_FA94
00011620 4645                       		not.w	d5
00011622 DA43                       		add.w	d3,d5
00011624                            
00011624                            loc_FA94:
00011624 E24D                       		lsr.w	#1,d5
00011626 7600                       		moveq	#0,d3
00011628 1632 5000                  		move.b	(a2,d5.w),d3
0001162C 9612                       		sub.b	(a2),d3
0001162E 3A28 000C                  		move.w	$C(a0),d5
00011632 9A43                       		sub.w	d3,d5
00011634 1629 0016                  		move.b	$16(a1),d3
00011638 4883                       		ext.w	d3
0001163A D443                       		add.w	d3,d2
0001163C 3629 000C                  		move.w	$C(a1),d3
00011640 9645                       		sub.w	d5,d3
00011642 5843                       		addq.w	#4,d3
00011644 D642                       		add.w	d2,d3
00011646 6B00 0000                  		bmi.w	loc_FB92
0001164A 3802                       		move.w	d2,d4
0001164C D844                       		add.w	d4,d4
0001164E B644                       		cmp.w	d4,d3
00011650 6400 0000                  		bcc.w	loc_FB92
00011654 6000 0000                  		bra.w	loc_FB0E
00011658                            ; ===========================================================================
00011658                            
00011658                            loc_FAC8:
00011658 4A28 0001                  		tst.b	1(a0)
0001165C 6A00 0000                  		bpl.w	loc_FB92
00011660                            
00011660                            loc_FAD0:
00011660 43F8 D000                  		lea	($FFFFD000).w,a1
00011664 3029 0008                  		move.w	8(a1),d0
00011668 9068 0008                  		sub.w	8(a0),d0
0001166C D041                       		add.w	d1,d0
0001166E 6B00 0000                  		bmi.w	loc_FB92
00011672 3601                       		move.w	d1,d3
00011674 D643                       		add.w	d3,d3
00011676 B043                       		cmp.w	d3,d0
00011678 6200 0000                  		bhi.w	loc_FB92
0001167C 1629 0016                  		move.b	$16(a1),d3
00011680 4883                       		ext.w	d3
00011682 D443                       		add.w	d3,d2
00011684 3629 000C                  		move.w	$C(a1),d3
00011688 9668 000C                  		sub.w	$C(a0),d3
0001168C 5843                       		addq.w	#4,d3
0001168E D642                       		add.w	d2,d3
00011690 6B00 0000                  		bmi.w	loc_FB92
00011694 3802                       		move.w	d2,d4
00011696 D844                       		add.w	d4,d4
00011698 B644                       		cmp.w	d4,d3
0001169A 6400 0000                  		bcc.w	loc_FB92
0001169E                            
0001169E                            loc_FB0E:
0001169E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000116A2 6B00 0000                  		bmi.w	loc_FB92
000116A6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000116AC 6400 0000                  		bcc.w	loc_FB92
000116B0 4A78 FE08                  		tst.w	($FFFFFE08).w
000116B4 6600 0000                  		bne.w	loc_FBAC
000116B8 3A00                       		move.w	d0,d5
000116BA B240                       		cmp.w	d0,d1
000116BC 6400                       		bcc.s	loc_FB36
000116BE D241                       		add.w	d1,d1
000116C0 9041                       		sub.w	d1,d0
000116C2 3A00                       		move.w	d0,d5
000116C4 4445                       		neg.w	d5
000116C6                            
000116C6                            loc_FB36:
000116C6 3203                       		move.w	d3,d1
000116C8 B443                       		cmp.w	d3,d2
000116CA 6400                       		bcc.s	loc_FB44
000116CC 5943                       		subq.w	#4,d3
000116CE 9644                       		sub.w	d4,d3
000116D0 3203                       		move.w	d3,d1
000116D2 4441                       		neg.w	d1
000116D4                            
000116D4                            loc_FB44:
000116D4 BA41                       		cmp.w	d1,d5
000116D6 6200 0000                  		bhi.w	loc_FBB0
000116DA 0C41 0004                  		cmpi.w	#4,d1
000116DE 6300                       		bls.s	loc_FB8C
000116E0 4A40                       		tst.w	d0
000116E2 6700                       		beq.s	loc_FB70
000116E4 6B00                       		bmi.s	loc_FB5E
000116E6 4A69 0010                  		tst.w	$10(a1)
000116EA 6B00                       		bmi.s	loc_FB70
000116EC 6000                       		bra.s	loc_FB64
000116EE                            ; ===========================================================================
000116EE                            
000116EE                            loc_FB5E:
000116EE 4A69 0010                  		tst.w	$10(a1)
000116F2 6A00                       		bpl.s	loc_FB70
000116F4                            
000116F4                            loc_FB64:
000116F4 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000116FA 337C 0000 0010             		move.w	#0,$10(a1)
00011700                            
00011700                            loc_FB70:
00011700 9169 0008                  		sub.w	d0,8(a1)
00011704 0829 0001 0022             		btst	#1,$22(a1)
0001170A 6600                       		bne.s	loc_FB8C
0001170C 08E9 0005 0022             		bset	#5,$22(a1)
00011712 08E8 0005 0022             		bset	#5,$22(a0)
00011718 7801                       		moveq	#1,d4
0001171A 4E75                       		rts	
0001171C                            ; ===========================================================================
0001171C                            
0001171C                            loc_FB8C:
0001171C 6100                       		bsr.s	loc_FBA0
0001171E 7801                       		moveq	#1,d4
00011720 4E75                       		rts	
00011722                            ; ===========================================================================
00011722                            
00011722                            loc_FB92:
00011722 0828 0005 0022             		btst	#5,$22(a0)
00011728 6700                       		beq.s	loc_FBAC
0001172A 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00011730 6700                       		beq.s	loc_FBA0
00011732 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011738 6700                       		beq.s	loc_FBA0
0001173A 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00011740 6700                       		beq.s	loc_FBA0
00011742 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011748                            
00011748                            loc_FBA0:
00011748 08A8 0005 0022             		bclr	#5,$22(a0)
0001174E 08A9 0005 0022             		bclr	#5,$22(a1)
00011754                            
00011754                            loc_FBAC:
00011754 7800                       		moveq	#0,d4
00011756 4E75                       		rts	
00011758                            ; ===========================================================================
00011758                            
00011758                            loc_FBB0:
00011758 4A43                       		tst.w	d3
0001175A 6B00                       		bmi.s	loc_FBBC
0001175C 0C43 0010                  		cmpi.w	#$10,d3
00011760 6500                       		bcs.s	loc_FBEE
00011762 60BE                       		bra.s	loc_FB92
00011764                            ; ===========================================================================
00011764                            
00011764                            loc_FBBC:
00011764 4A69 0012                  		tst.w	$12(a1)
00011768 6700                       		beq.s	loc_FBD6
0001176A 6A00                       		bpl.s	loc_FBD2
0001176C 4A43                       		tst.w	d3
0001176E 6A00                       		bpl.s	loc_FBD2
00011770 9769 000C                  		sub.w	d3,$C(a1)
00011774 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001177A                            
0001177A                            loc_FBD2:
0001177A 78FF                       		moveq	#-1,d4
0001177C 4E75                       		rts	
0001177E                            ; ===========================================================================
0001177E                            
0001177E                            loc_FBD6:
0001177E 0829 0001 0022             		btst	#1,$22(a1)
00011784 66F4                       		bne.s	loc_FBD2
00011786 2F08                       		move.l	a0,-(sp)
00011788 2049                       		movea.l	a1,a0
0001178A 4EB9 0000 0000             		jsr	KillSonic
00011790 205F                       		movea.l	(sp)+,a0
00011792 78FF                       		moveq	#-1,d4
00011794 4E75                       		rts	
00011796                            ; ===========================================================================
00011796                            
00011796                            loc_FBEE:
00011796 5943                       		subq.w	#4,d3
00011798 7200                       		moveq	#0,d1
0001179A 1228 0019                  		move.b	$19(a0),d1
0001179E 3401                       		move.w	d1,d2
000117A0 D442                       		add.w	d2,d2
000117A2 D269 0008                  		add.w	8(a1),d1
000117A6 9268 0008                  		sub.w	8(a0),d1
000117AA 6B00                       		bmi.s	loc_FC28
000117AC B242                       		cmp.w	d2,d1
000117AE 6400                       		bcc.s	loc_FC28
000117B0 4A69 0012                  		tst.w	$12(a1)
000117B4 6B00                       		bmi.s	loc_FC28
000117B6 9769 000C                  		sub.w	d3,$C(a1)
000117BA 5369 000C                  		subq.w	#1,$C(a1)
000117BE 6100                       		bsr.s	sub_FC2C
000117C0 117C 0002 0025             		move.b	#2,$25(a0)
000117C6 08E8 0003 0022             		bset	#3,$22(a0)
000117CC 78FF                       		moveq	#-1,d4
000117CE 4E75                       		rts	
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            loc_FC28:
000117D0 7800                       		moveq	#0,d4
000117D2 4E75                       		rts	
000117D4                            ; End of function SolidObject
000117D4                            
000117D4                            
000117D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117D4                            
000117D4                            
000117D4                            sub_FC2C:				; XREF: SolidObject
000117D4 0829 0003 0022             		btst	#3,$22(a1)
000117DA 6700                       		beq.s	loc_FC4E
000117DC 7000                       		moveq	#0,d0
000117DE 1029 003D                  		move.b	$3D(a1),d0
000117E2 ED48                       		lsl.w	#6,d0
000117E4 0680 00FF D000             		addi.l	#$FFD000,d0
000117EA 2440                       		movea.l	d0,a2
000117EC 08AA 0003 0022             		bclr	#3,$22(a2)
000117F2 422A 0025                  		clr.b	$25(a2)
000117F6                            
000117F6                            loc_FC4E:
000117F6 3008                       		move.w	a0,d0
000117F8 0440 D000                  		subi.w	#-$3000,d0
000117FC EC48                       		lsr.w	#6,d0
000117FE 0240 007F                  		andi.w	#$7F,d0
00011802 1340 003D                  		move.b	d0,$3D(a1)
00011806 137C 0000 0026             		move.b	#0,$26(a1)
0001180C 337C 0000 0012             		move.w	#0,$12(a1)
00011812 3369 0010 0014             		move.w	$10(a1),$14(a1)
00011818 0829 0001 0022             		btst	#1,$22(a1)
0001181E 6700                       		beq.s	loc_FC84
00011820 2F08                       		move.l	a0,-(sp)
00011822 2049                       		movea.l	a1,a0
00011824 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001182A 205F                       		movea.l	(sp)+,a0
0001182C                            
0001182C                            loc_FC84:
0001182C 08E9 0003 0022             		bset	#3,$22(a1)
00011832 08E8 0003 0022             		bset	#3,$22(a0)
00011838 4E75                       		rts	
0001183A                            ; End of function sub_FC2C
0001183A                            
0001183A                            ; ===========================================================================
0001183A                            ; ---------------------------------------------------------------------------
0001183A                            ; Object 51 - smashable	green block (MZ)
0001183A                            ; ---------------------------------------------------------------------------
0001183A                            
0001183A                            Obj51:					; XREF: Obj_Index
0001183A 7000                       		moveq	#0,d0
0001183C 1028 0024                  		move.b	$24(a0),d0
00011840 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00011844 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00011848 6000 F9F0                  		bra.w	MarkObjGone
0001184C                            ; ===========================================================================
0001184C 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001184E 0000                       		dc.w Obj51_Solid-Obj51_Index
00011850 0000                       		dc.w Obj51_Display-Obj51_Index
00011852                            ; ===========================================================================
00011852                            
00011852                            Obj51_Main:				; XREF: Obj51_Index
00011852 5428 0024                  		addq.b	#2,$24(a0)
00011856 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001185E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011864 117C 0004 0001             		move.b	#4,1(a0)
0001186A 117C 0010 0019             		move.b	#$10,$19(a0)
00011870 117C 0004 0018             		move.b	#4,$18(a0)
00011876 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001187C                            
0001187C                            Obj51_Solid:				; XREF: Obj51_Index
0001187C 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00011882 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00011888 323C 001B                  		move.w	#$1B,d1
0001188C 343C 0010                  		move.w	#$10,d2
00011890 363C 0011                  		move.w	#$11,d3
00011894 3828 0008                  		move.w	8(a0),d4
00011898 6100 FCC8                  		bsr.w	SolidObject
0001189C 0828 0003 0022             		btst	#3,$22(a0)
000118A2 6600                       		bne.s	Obj51_Smash
000118A4                            
000118A4                            locret_FCFC:
000118A4 4E75                       		rts	
000118A6                            ; ===========================================================================
000118A6                            
000118A6                            Obj51_Smash:				; XREF: Obj51_Solid
000118A6                            	;	cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000118A6                            	;	bne.s	locret_FCFC	; if not, branch
000118A6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000118AC 08E9 0002 0022             		bset	#2,$22(a1)
000118B2 137C 000E 0016             		move.b	#$E,$16(a1)
000118B8 137C 0007 0017             		move.b	#7,$17(a1)
000118BE 137C 0002 001C             		move.b	#2,$1C(a1)
000118C4 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000118CA 08E9 0001 0022             		bset	#1,$22(a1)
000118D0 08A9 0003 0022             		bclr	#3,$22(a1)
000118D6 137C 0002 0024             		move.b	#2,$24(a1)
000118DC 08A8 0003 0022             		bclr	#3,$22(a0)
000118E2 4228 0025                  		clr.b	$25(a0)
000118E6 117C 0001 001A             		move.b	#1,$1A(a0)
000118EC 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000118F2 7203                       		moveq	#3,d1		; set number of	fragments to 4
000118F4 343C 0038                  		move.w	#$38,d2
000118F8 6100 D484                  		bsr.w	SmashObject
000118FC 6100 DD16                  		bsr.w	SingleObjLoad
00011900 6600                       		bne.s	Obj51_Display
00011902 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011906 3368 0008 0008             		move.w	8(a0),8(a1)
0001190C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011912 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011916 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001191A 0C42 0006                  		cmpi.w	#6,d2
0001191E 6500                       		bcs.s	Obj51_Bonus
00011920 7406                       		moveq	#6,d2
00011922                            
00011922                            Obj51_Bonus:
00011922 7000                       		moveq	#0,d0
00011924 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011928 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001192E 6500                       		bcs.s	loc_FD98	; if not, branch
00011930 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011934 740A                       		moveq	#10,d2
00011936                            
00011936                            loc_FD98:
00011936 4EB9 0000 0000             		jsr	AddPoints
0001193C E24A                       		lsr.w	#1,d2
0001193E 1342 001A                  		move.b	d2,$1A(a1)
00011942                            
00011942                            Obj51_Display:				; XREF: Obj51_Index
00011942 6100 D822                  		bsr.w	SpeedToPos
00011946 0668 0038 0012             		addi.w	#$38,$12(a0)
0001194C 6100 D832                  		bsr.w	DisplaySprite
00011950 4A28 0001                  		tst.b	1(a0)
00011954 6A00 D866                  		bpl.w	DeleteObject
00011958 4E75                       		rts	
0001195A                            ; ===========================================================================
0001195A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001195E FF00 FF00                  		dc.w $FF00, $FF00
00011962 0200 FE00                  		dc.w $200, $FE00
00011966 0100 FF00                  		dc.w $100, $FF00
0001196A                            
0001196A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00011972                            ; ---------------------------------------------------------------------------
00011972                            ; Sprite mappings - smashable green block (MZ)
00011972                            ; ---------------------------------------------------------------------------
00011972                            Map_obj51:
00011972                            	include "_maps\obj51.asm"
00011972                            ; ---------------------------------------------------------------------------
00011972                            ; Sprite mappings - smashable green block (MZ)
00011972                            ; ---------------------------------------------------------------------------
00011972 0000                       		dc.w byte_FDD8-Map_obj51
00011974 0000                       		dc.w byte_FDE3-Map_obj51
00011976 02                         byte_FDD8:	dc.b 2
00011977 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001197C 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00011981 04                         byte_FDE3:	dc.b 4
00011982 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00011987 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001198C F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00011991 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011996                            		even
00011996                            		even
00011996                            
00011996                            ; ===========================================================================
00011996                            ; ---------------------------------------------------------------------------
00011996                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011996                            ; ---------------------------------------------------------------------------
00011996                            
00011996                            Obj52:					; XREF: Obj_Index
00011996 7000                       		moveq	#0,d0
00011998 1028 0024                  		move.b	$24(a0),d0
0001199C 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000119A0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000119A4                            ; ===========================================================================
000119A4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000119A6 0000                       		dc.w Obj52_Platform-Obj52_Index
000119A8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000119AA                            
000119AA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000119AC 2001                       		dc.b $20, 1
000119AE 2002                       		dc.b $20, 2
000119B0 4003                       		dc.b $40, 3
000119B2 3004                       		dc.b $30, 4
000119B4                            ; ===========================================================================
000119B4                            
000119B4                            Obj52_Main:				; XREF: Obj52_Index
000119B4 5428 0024                  		addq.b	#2,$24(a0)
000119B8 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000119C0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000119C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119CC 6600                       		bne.s	loc_FE44
000119CE 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000119D6 317C 43BC 0002             		move.w	#$43BC,2(a0)
000119DC 117C 0007 0016             		move.b	#7,$16(a0)
000119E2                            
000119E2                            loc_FE44:
000119E2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000119E8 6600                       		bne.s	loc_FE60
000119EA 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000119F0 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000119F6 6700                       		beq.s	loc_FE60	; if yes, branch
000119F8 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000119FE                            
000119FE                            loc_FE60:
000119FE 117C 0004 0001             		move.b	#4,1(a0)
00011A04 7000                       		moveq	#0,d0
00011A06 1028 0028                  		move.b	$28(a0),d0
00011A0A E648                       		lsr.w	#3,d0
00011A0C 0240 001E                  		andi.w	#$1E,d0
00011A10 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011A14 115A 0019                  		move.b	(a2)+,$19(a0)
00011A18 115A 001A                  		move.b	(a2)+,$1A(a0)
00011A1C 117C 0004 0018             		move.b	#4,$18(a0)
00011A22 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A28 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011A2E 0228 000F 0028             		andi.b	#$F,$28(a0)
00011A34                            
00011A34                            Obj52_Platform:				; XREF: Obj52_Index
00011A34 6100 0000                  		bsr.w	Obj52_Move
00011A38 7200                       		moveq	#0,d1
00011A3A 1228 0019                  		move.b	$19(a0),d1
00011A3E 4EB9 0000 8E3C             		jsr	(PlatformObject).l
00011A44 6000                       		bra.s	Obj52_ChkDel
00011A46                            ; ===========================================================================
00011A46                            
00011A46                            Obj52_StandOn:				; XREF: Obj52_Index
00011A46 7200                       		moveq	#0,d1
00011A48 1228 0019                  		move.b	$19(a0),d1
00011A4C 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
00011A52 3F28 0008                  		move.w	8(a0),-(sp)
00011A56 6100 0000                  		bsr.w	Obj52_Move
00011A5A 341F                       		move.w	(sp)+,d2
00011A5C 4EB9 0000 951A             		jsr	(MvSonicOnPtfm2).l
00011A62                            
00011A62                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011A62 3028 0030                  		move.w	$30(a0),d0
00011A66 0240 FF80                  		andi.w	#$FF80,d0
00011A6A 3238 F700                  		move.w	($FFFFF700).w,d1
00011A6E 0441 0080                  		subi.w	#$80,d1
00011A72 0241 FF80                  		andi.w	#$FF80,d1
00011A76 9041                       		sub.w	d1,d0
00011A78 0C40 0280                  		cmpi.w	#$280,d0
00011A7C 6200 D73E                  		bhi.w	DeleteObject
00011A80 6000 D6FE                  		bra.w	DisplaySprite
00011A84                            ; ===========================================================================
00011A84                            
00011A84                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00011A84 7000                       		moveq	#0,d0
00011A86 1028 0028                  		move.b	$28(a0),d0
00011A8A 0240 000F                  		andi.w	#$F,d0
00011A8E D040                       		add.w	d0,d0
00011A90 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00011A94 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011A98                            ; ===========================================================================
00011A98 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011A9C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00011AA0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011AA4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011AA8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011AAC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011AAE                            ; ===========================================================================
00011AAE                            
00011AAE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011AAE 4E75                       		rts	
00011AB0                            ; ===========================================================================
00011AB0                            
00011AB0                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011AB0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011AB4 323C 0060                  		move.w	#$60,d1
00011AB8 0828 0000 0022             		btst	#0,$22(a0)
00011ABE 6700                       		beq.s	loc_FF26
00011AC0 4440                       		neg.w	d0
00011AC2 D041                       		add.w	d1,d0
00011AC4                            
00011AC4                            loc_FF26:
00011AC4 3228 0030                  		move.w	$30(a0),d1
00011AC8 9240                       		sub.w	d0,d1
00011ACA 3141 0008                  		move.w	d1,8(a0)
00011ACE 4E75                       		rts	
00011AD0                            ; ===========================================================================
00011AD0                            
00011AD0                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011AD0 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011AD6 6600                       		bne.s	Obj52_02_Wait
00011AD8 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011ADC                            
00011ADC                            Obj52_02_Wait:
00011ADC 4E75                       		rts	
00011ADE                            ; ===========================================================================
00011ADE                            
00011ADE                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011ADE 7600                       		moveq	#0,d3
00011AE0 1628 0019                  		move.b	$19(a0),d3
00011AE4 6100 0000                  		bsr.w	ObjHitWallRight
00011AE8 4A41                       		tst.w	d1		; has the platform hit a wall?
00011AEA 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011AEC 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011AF0 3168 0008 0030             		move.w	8(a0),$30(a0)
00011AF6 4E75                       		rts	
00011AF8                            ; ===========================================================================
00011AF8                            
00011AF8                            Obj52_03_End:
00011AF8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011AFC 4E75                       		rts	
00011AFE                            ; ===========================================================================
00011AFE                            
00011AFE                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011AFE 7600                       		moveq	#0,d3
00011B00 1628 0019                  		move.b	$19(a0),d3
00011B04 6100 0000                  		bsr.w	ObjHitWallRight
00011B08 4A41                       		tst.w	d1		; has the platform hit a wall?
00011B0A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011B0C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011B10 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B16 4E75                       		rts	
00011B18                            ; ===========================================================================
00011B18                            
00011B18                            Obj52_05_End:
00011B18 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011B1C 4E75                       		rts	
00011B1E                            ; ===========================================================================
00011B1E                            
00011B1E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011B1E 6100 D646                  		bsr.w	SpeedToPos
00011B22 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011B28 6100 0000                  		bsr.w	ObjHitFloor
00011B2C 4A41                       		tst.w	d1		; has platform hit the floor?
00011B2E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011B32 D368 000C                  		add.w	d1,$C(a0)
00011B36 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011B3A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011B3E                            
00011B3E                            locret_FFA0:
00011B3E 4E75                       		rts	
00011B40                            ; ===========================================================================
00011B40                            
00011B40                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011B40 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011B44 6700                       		beq.s	Obj52_07_ChkDel
00011B46 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011B4A                            
00011B4A                            Obj52_07_ChkDel:
00011B4A 588F                       		addq.l	#4,sp
00011B4C 3028 0030                  		move.w	$30(a0),d0
00011B50 0240 FF80                  		andi.w	#$FF80,d0
00011B54 3238 F700                  		move.w	($FFFFF700).w,d1
00011B58 0441 0080                  		subi.w	#$80,d1
00011B5C 0241 FF80                  		andi.w	#$FF80,d1
00011B60 9041                       		sub.w	d1,d0
00011B62 0C40 0280                  		cmpi.w	#$280,d0
00011B66 6200 D654                  		bhi.w	DeleteObject
00011B6A 4E75                       		rts	
00011B6C                            ; ===========================================================================
00011B6C                            
00011B6C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011B6C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011B70 323C 0080                  		move.w	#$80,d1
00011B74 0828 0000 0022             		btst	#0,$22(a0)
00011B7A 6700                       		beq.s	loc_FFE2
00011B7C 4440                       		neg.w	d0
00011B7E D041                       		add.w	d1,d0
00011B80                            
00011B80                            loc_FFE2:
00011B80 3228 0032                  		move.w	$32(a0),d1
00011B84 9240                       		sub.w	d0,d1
00011B86 3141 000C                  		move.w	d1,$C(a0)
00011B8A 4E75                       		rts	
00011B8C                            ; ===========================================================================
00011B8C                            
00011B8C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011B8C 7600                       		moveq	#0,d3
00011B8E 1628 0019                  		move.b	$19(a0),d3
00011B92 D643                       		add.w	d3,d3
00011B94 7208                       		moveq	#8,d1
00011B96 0828 0000 0022             		btst	#0,$22(a0)
00011B9C 6700                       		beq.s	loc_10004
00011B9E 4441                       		neg.w	d1
00011BA0 4443                       		neg.w	d3
00011BA2                            
00011BA2                            loc_10004:
00011BA2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011BA6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011BA8 3028 0008                  		move.w	8(a0),d0
00011BAC 9068 0030                  		sub.w	$30(a0),d0
00011BB0 B043                       		cmp.w	d3,d0
00011BB2 6700                       		beq.s	Obj52_0A_Wait
00011BB4 D368 0008                  		add.w	d1,8(a0)	; move platform
00011BB8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011BBE 4E75                       		rts	
00011BC0                            ; ===========================================================================
00011BC0                            
00011BC0                            Obj52_0A_Wait:
00011BC0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011BC4 6600                       		bne.s	locret_1002E	; if time remains, branch
00011BC6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011BCC                            
00011BCC                            locret_1002E:
00011BCC 4E75                       		rts	
00011BCE                            ; ===========================================================================
00011BCE                            
00011BCE                            Obj52_0A_Back:
00011BCE 3028 0008                  		move.w	8(a0),d0
00011BD2 9068 0030                  		sub.w	$30(a0),d0
00011BD6 6700                       		beq.s	Obj52_0A_Reset
00011BD8 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011BDC 4E75                       		rts	
00011BDE                            ; ===========================================================================
00011BDE                            
00011BDE                            Obj52_0A_Reset:
00011BDE 4268 0036                  		clr.w	$36(a0)
00011BE2 5328 0028                  		subq.b	#1,$28(a0)
00011BE6 4E75                       		rts	
00011BE8                            ; ===========================================================================
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            Map_obj52:
00011BE8                            	include "_maps\obj52mz.asm"
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011BEC 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011BF0 0000                       		dc.w byte_1008F-Map_obj52
00011BF2 01                         byte_10054:	dc.b 1
00011BF3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011BF8 02                         byte_1005A:	dc.b 2
00011BF9 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011BFE F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011C03 04                         byte_10065:	dc.b 4
00011C04 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011C09 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011C0E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011C13 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011C18 04                         byte_1007A:	dc.b 4
00011C19 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011C1E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011C23 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011C28 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011C2D 03                         byte_1008F:	dc.b 3
00011C2E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011C33 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011C38 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011C3E 00                         		even
00011C3E 00                         		even
00011C3E                            
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E                            ; Sprite mappings - moving block (LZ)
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E                            Map_obj52a:
00011C3E                            	include "_maps\obj52lz.asm"
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E                            ; Sprite mappings - moving block (LZ)
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E 0000                       		dc.w byte_100A2-Map_obj52a
00011C40 01                         byte_100A2:	dc.b 1
00011C41 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011C46                            		even
00011C46                            		even
00011C46                            
00011C46                            ; ===========================================================================
00011C46                            ; ---------------------------------------------------------------------------
00011C46                            ; Object 55 - Basaran enemy (MZ)
00011C46                            ; ---------------------------------------------------------------------------
00011C46                            
00011C46                            Obj55:					; XREF: Obj_Index
00011C46 7000                       		moveq	#0,d0
00011C48 1028 0024                  		move.b	$24(a0),d0
00011C4C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011C50 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011C54                            ; ===========================================================================
00011C54 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011C56 0000                       		dc.w Obj55_Action-Obj55_Index
00011C58                            ; ===========================================================================
00011C58                            
00011C58                            Obj55_Main:				; XREF: Obj55_Index
00011C58 5428 0024                  		addq.b	#2,$24(a0)
00011C5C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011C64 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011C6A 117C 0004 0001             		move.b	#4,1(a0)
00011C70 117C 000C 0016             		move.b	#$C,$16(a0)
00011C76 117C 0002 0018             		move.b	#2,$18(a0)
00011C7C 117C 000B 0020             		move.b	#$B,$20(a0)
00011C82 117C 0010 0019             		move.b	#$10,$19(a0)
00011C88                            
00011C88                            Obj55_Action:				; XREF: Obj55_Index
00011C88 7000                       		moveq	#0,d0
00011C8A 1028 0025                  		move.b	$25(a0),d0
00011C8E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011C92 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011C96 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011C9C 6100 A494                  		bsr.w	AnimateSprite
00011CA0 6000 F598                  		bra.w	MarkObjGone
00011CA4                            ; ===========================================================================
00011CA4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011CA6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011CA8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011CAA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011CAC                            ; ===========================================================================
00011CAC                            
00011CAC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011CAC 343C 0080                  		move.w	#$80,d2
00011CB0 6100 0000                  		bsr.w	Obj55_ChkSonic
00011CB4 6400                       		bcc.s	Obj55_NoDrop
00011CB6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011CBA 3140 0036                  		move.w	d0,$36(a0)
00011CBE 9068 000C                  		sub.w	$C(a0),d0
00011CC2 6500                       		bcs.s	Obj55_NoDrop
00011CC4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011CC8 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011CCA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011CCE 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011CD0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011CD4 D007                       		add.b	d7,d0
00011CD6 0200 0007                  		andi.b	#7,d0
00011CDA 6600                       		bne.s	Obj55_NoDrop
00011CDC 117C 0001 001C             		move.b	#1,$1C(a0)
00011CE2 5428 0025                  		addq.b	#2,$25(a0)
00011CE6                            
00011CE6                            Obj55_NoDrop:
00011CE6 4E75                       		rts	
00011CE8                            ; ===========================================================================
00011CE8                            
00011CE8                            Obj55_DropFly:				; XREF: Obj55_Index2
00011CE8 6100 D47C                  		bsr.w	SpeedToPos
00011CEC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011CF2 343C 0080                  		move.w	#$80,d2
00011CF6 6100 0000                  		bsr.w	Obj55_ChkSonic
00011CFA 3028 0036                  		move.w	$36(a0),d0
00011CFE 9068 000C                  		sub.w	$C(a0),d0
00011D02 6500                       		bcs.s	Obj55_ChkDel
00011D04 0C40 0010                  		cmpi.w	#$10,d0
00011D08 6400                       		bcc.s	locret_10180
00011D0A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011D0E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011D14 117C 0002 001C             		move.b	#2,$1C(a0)
00011D1A 5428 0025                  		addq.b	#2,$25(a0)
00011D1E                            
00011D1E                            locret_10180:
00011D1E 4E75                       		rts	
00011D20                            ; ===========================================================================
00011D20                            
00011D20                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011D20 4A28 0001                  		tst.b	1(a0)
00011D24 6A00 D496                  		bpl.w	DeleteObject
00011D28 4E75                       		rts	
00011D2A                            ; ===========================================================================
00011D2A                            
00011D2A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011D2A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011D2E 0200 000F                  		andi.b	#$F,d0
00011D32 6600                       		bne.s	loc_101A0
00011D34 303C 00C0                  		move.w	#$C0,d0
00011D38 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play flapping sound
00011D3E                            
00011D3E                            loc_101A0:
00011D3E 6100 D426                  		bsr.w	SpeedToPos
00011D42 3038 D008                  		move.w	($FFFFD008).w,d0
00011D46 9068 0008                  		sub.w	8(a0),d0
00011D4A 6400                       		bcc.s	loc_101B0
00011D4C 4440                       		neg.w	d0
00011D4E                            
00011D4E                            loc_101B0:
00011D4E 0C40 0080                  		cmpi.w	#$80,d0
00011D52 6500                       		bcs.s	locret_101C6
00011D54 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011D58 D007                       		add.b	d7,d0
00011D5A 0200 0007                  		andi.b	#7,d0
00011D5E 6600                       		bne.s	locret_101C6
00011D60 5428 0025                  		addq.b	#2,$25(a0)
00011D64                            
00011D64                            locret_101C6:
00011D64 4E75                       		rts	
00011D66                            ; ===========================================================================
00011D66                            
00011D66                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011D66 6100 D3FE                  		bsr.w	SpeedToPos
00011D6A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011D70 6100 0000                  		bsr.w	ObjHitCeiling
00011D74 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011D76 6A00                       		bpl.s	locret_101F4	; if not, branch
00011D78 9368 000C                  		sub.w	d1,$C(a0)
00011D7C 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011D82 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011D86 4268 0012                  		clr.w	$12(a0)
00011D8A 4228 001C                  		clr.b	$1C(a0)
00011D8E 4228 0025                  		clr.b	$25(a0)
00011D92                            
00011D92                            locret_101F4:
00011D92 4E75                       		rts	
00011D94                            ; ===========================================================================
00011D94                            
00011D94                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011D94 323C 0100                  		move.w	#$100,d1
00011D98 08E8 0000 0022             		bset	#0,$22(a0)
00011D9E 3038 D008                  		move.w	($FFFFD008).w,d0
00011DA2 9068 0008                  		sub.w	8(a0),d0
00011DA6 6400                       		bcc.s	loc_10214
00011DA8 4440                       		neg.w	d0
00011DAA 4441                       		neg.w	d1
00011DAC 08A8 0000 0022             		bclr	#0,$22(a0)
00011DB2                            
00011DB2                            loc_10214:
00011DB2 B042                       		cmp.w	d2,d0
00011DB4 4E75                       		rts	
00011DB6                            ; ===========================================================================
00011DB6 6100 D3AE                  		bsr.w	SpeedToPos
00011DBA 6100 D3C4                  		bsr.w	DisplaySprite
00011DBE 4A28 0001                  		tst.b	1(a0)
00011DC2 6A00 D3F8                  		bpl.w	DeleteObject
00011DC6 4E75                       		rts	
00011DC8                            ; ===========================================================================
00011DC8                            Ani_obj55:
00011DC8                            	include "_anim\obj55.asm"
00011DC8                            ; ---------------------------------------------------------------------------
00011DC8                            ; Animation script - Basaran enemy
00011DC8                            ; ---------------------------------------------------------------------------
00011DC8 0000                       		dc.w byte_10230-Ani_obj55
00011DCA 0000                       		dc.w byte_10234-Ani_obj55
00011DCC 0000                       		dc.w byte_10238-Ani_obj55
00011DCE 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011DD2 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011DD6 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011DDC                            		even
00011DDC                            		even
00011DDC                            
00011DDC                            ; ---------------------------------------------------------------------------
00011DDC                            ; Sprite mappings - Basaran enemy (MZ)
00011DDC                            ; ---------------------------------------------------------------------------
00011DDC                            Map_obj55:
00011DDC                            	include "_maps\obj55.asm"
00011DDC                            ; ---------------------------------------------------------------------------
00011DDC                            ; Sprite mappings - Basaran enemy (MZ)
00011DDC                            ; ---------------------------------------------------------------------------
00011DDC 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011DE0 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011DE4 01                         byte_10246:	dc.b 1
00011DE5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011DEA 03                         byte_1024C:	dc.b 3
00011DEB F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011DF0 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011DF5 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011DFA 04                         byte_1025C:	dc.b 4
00011DFB F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011E00 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011E05 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011E0A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011E0F 04                         byte_10271:	dc.b 4
00011E10 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011E15 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011E1A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011E1F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011E24                            		even
00011E24                            		even
00011E24                            
00011E24                            ; ===========================================================================
00011E24                            ; ---------------------------------------------------------------------------
00011E24                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011E24                            ; ---------------------------------------------------------------------------
00011E24                            
00011E24                            Obj56:					; XREF: Obj_Index
00011E24 7000                       		moveq	#0,d0
00011E26 1028 0024                  		move.b	$24(a0),d0
00011E2A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011E2E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011E32                            ; ===========================================================================
00011E32 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011E34 0000                       		dc.w Obj56_Action-Obj56_Index
00011E36                            
00011E36 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011E38 2020                       		dc.b  $20, $20
00011E3A 1020                       		dc.b  $10, $20
00011E3C 201A                       		dc.b  $20, $1A
00011E3E 1027                       		dc.b  $10, $27
00011E40 1010                       		dc.b  $10, $10
00011E42 0820                       		dc.b	8, $20
00011E44 4010                       		dc.b  $40, $10
00011E46                            ; ===========================================================================
00011E46                            
00011E46                            Obj56_Main:				; XREF: Obj56_Index
00011E46 5428 0024                  		addq.b	#2,$24(a0)
00011E4A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011E52 317C 4000 0002             		move.w	#$4000,2(a0)
00011E58 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E5E 6600                       		bne.s	loc_102C8
00011E60 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011E66                            
00011E66                            loc_102C8:
00011E66 117C 0004 0001             		move.b	#4,1(a0)
00011E6C 117C 0003 0018             		move.b	#3,$18(a0)
00011E72 7000                       		moveq	#0,d0
00011E74 1028 0028                  		move.b	$28(a0),d0
00011E78 E648                       		lsr.w	#3,d0
00011E7A 0240 000E                  		andi.w	#$E,d0
00011E7E 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011E82 115A 0019                  		move.b	(a2)+,$19(a0)
00011E86 1152 0016                  		move.b	(a2),$16(a0)
00011E8A E248                       		lsr.w	#1,d0
00011E8C 1140 001A                  		move.b	d0,$1A(a0)
00011E90 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E96 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011E9C 7000                       		moveq	#0,d0
00011E9E 1012                       		move.b	(a2),d0
00011EA0 D040                       		add.w	d0,d0
00011EA2 3140 003A                  		move.w	d0,$3A(a0)
00011EA6 7000                       		moveq	#0,d0
00011EA8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011EAE 6700                       		beq.s	loc_10332
00011EB0 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011EB4 0240 000F                  		andi.w	#$F,d0
00011EB8 5140                       		subq.w	#8,d0
00011EBA 6500                       		bcs.s	loc_10332
00011EBC E548                       		lsl.w	#2,d0
00011EBE 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011EC2 45F2 0000                  		lea	(a2,d0.w),a2
00011EC6 4A52                       		tst.w	(a2)
00011EC8 6A00                       		bpl.s	loc_10332
00011ECA 0868 0000 0022             		bchg	#0,$22(a0)
00011ED0                            
00011ED0                            loc_10332:
00011ED0 1028 0028                  		move.b	$28(a0),d0
00011ED4 6A00                       		bpl.s	Obj56_Action
00011ED6 0200 000F                  		andi.b	#$F,d0
00011EDA 1140 003C                  		move.b	d0,$3C(a0)
00011EDE 117C 0005 0028             		move.b	#5,$28(a0)
00011EE4 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011EEA 6600                       		bne.s	Obj56_ChkGone
00011EEC 117C 000C 0028             		move.b	#$C,$28(a0)
00011EF2 317C 0080 003A             		move.w	#$80,$3A(a0)
00011EF8                            
00011EF8                            Obj56_ChkGone:
00011EF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011EFC 7000                       		moveq	#0,d0
00011EFE 1028 0023                  		move.b	$23(a0),d0
00011F02 6700                       		beq.s	Obj56_Action
00011F04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011F0A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00011F10 6700                       		beq.s	Obj56_Action
00011F12 5228 0028                  		addq.b	#1,$28(a0)
00011F16 4268 003A                  		clr.w	$3A(a0)
00011F1A                            
00011F1A                            Obj56_Action:				; XREF: Obj56_Index
00011F1A 3F28 0008                  		move.w	8(a0),-(sp)
00011F1E 7000                       		moveq	#0,d0
00011F20 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F24 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011F28 D040                       		add.w	d0,d0
00011F2A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011F2E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011F32 381F                       		move.w	(sp)+,d4
00011F34 4A28 0001                  		tst.b	1(a0)
00011F38 6A00                       		bpl.s	Obj56_ChkDel
00011F3A 7200                       		moveq	#0,d1
00011F3C 1228 0019                  		move.b	$19(a0),d1
00011F40 0641 000B                  		addi.w	#$B,d1
00011F44 7400                       		moveq	#0,d2
00011F46 1428 0016                  		move.b	$16(a0),d2
00011F4A 3602                       		move.w	d2,d3
00011F4C 5243                       		addq.w	#1,d3
00011F4E 6100 F612                  		bsr.w	SolidObject
00011F52                            
00011F52                            Obj56_ChkDel:
00011F52 3028 0034                  		move.w	$34(a0),d0
00011F56 0240 FF80                  		andi.w	#$FF80,d0
00011F5A 3238 F700                  		move.w	($FFFFF700).w,d1
00011F5E 0441 0080                  		subi.w	#$80,d1
00011F62 0241 FF80                  		andi.w	#$FF80,d1
00011F66 9041                       		sub.w	d1,d0
00011F68 0C40 0280                  		cmpi.w	#$280,d0
00011F6C 6200 D24E                  		bhi.w	DeleteObject
00011F70 6000 D20E                  		bra.w	DisplaySprite
00011F74                            ; ===========================================================================
00011F74 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011F78 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011F7C 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011F80 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011F84 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011F88 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011F8C 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011F90                            ; ===========================================================================
00011F90                            
00011F90                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011F90 4E75                       		rts	
00011F92                            ; ===========================================================================
00011F92                            
00011F92                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011F92 323C 0040                  		move.w	#$40,d1
00011F96 7000                       		moveq	#0,d0
00011F98 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011F9C 6000                       		bra.s	Obj56_Move_LR
00011F9E                            ; ===========================================================================
00011F9E                            
00011F9E                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011F9E 323C 0080                  		move.w	#$80,d1
00011FA2 7000                       		moveq	#0,d0
00011FA4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011FA8                            
00011FA8                            Obj56_Move_LR:
00011FA8 0828 0000 0022             		btst	#0,$22(a0)
00011FAE 6700                       		beq.s	loc_10416
00011FB0 4440                       		neg.w	d0
00011FB2 D041                       		add.w	d1,d0
00011FB4                            
00011FB4                            loc_10416:
00011FB4 3228 0034                  		move.w	$34(a0),d1
00011FB8 9240                       		sub.w	d0,d1
00011FBA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011FBE 4E75                       		rts	
00011FC0                            ; ===========================================================================
00011FC0                            
00011FC0                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011FC0 323C 0040                  		move.w	#$40,d1
00011FC4 7000                       		moveq	#0,d0
00011FC6 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011FCA 6000                       		bra.s	Obj56_Move_UD
00011FCC                            ; ===========================================================================
00011FCC                            
00011FCC                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011FCC 323C 0080                  		move.w	#$80,d1
00011FD0 7000                       		moveq	#0,d0
00011FD2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011FD6                            
00011FD6                            Obj56_Move_UD:
00011FD6 0828 0000 0022             		btst	#0,$22(a0)
00011FDC 6700                       		beq.s	loc_10444
00011FDE 4440                       		neg.w	d0
00011FE0 D041                       		add.w	d1,d0
00011FE2                            
00011FE2                            loc_10444:
00011FE2 3228 0030                  		move.w	$30(a0),d1
00011FE6 9240                       		sub.w	d0,d1
00011FE8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011FEC 4E75                       		rts	
00011FEE                            ; ===========================================================================
00011FEE                            
00011FEE                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011FEE 4A28 0038                  		tst.b	$38(a0)
00011FF2 6600                       		bne.s	loc_104A4
00011FF4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011FFA 6600                       		bne.s	loc_1047A	; if not, branch
00011FFC 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00012002 6600                       		bne.s	loc_1047A
00012004 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012008 3038 D008                  		move.w	($FFFFD008).w,d0
0001200C B068 0008                  		cmp.w	8(a0),d0
00012010 6400                       		bcc.s	loc_1047A
00012012 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00012018                            
00012018                            loc_1047A:
00012018 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001201C 7000                       		moveq	#0,d0
0001201E 1028 003C                  		move.b	$3C(a0),d0
00012022 0832 0000 0000             		btst	#0,(a2,d0.w)
00012028 6700                       		beq.s	loc_104AE
0001202A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00012030 6600                       		bne.s	loc_1049E	; if not, branch
00012032 0C00 0003                  		cmpi.b	#3,d0
00012036 6600                       		bne.s	loc_1049E
00012038 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001203C                            
0001203C                            loc_1049E:
0001203C 117C 0001 0038             		move.b	#1,$38(a0)
00012042                            
00012042                            loc_104A4:
00012042 4A68 003A                  		tst.w	$3A(a0)
00012046 6700                       		beq.s	loc_104C8
00012048 5568 003A                  		subq.w	#2,$3A(a0)
0001204C                            
0001204C                            loc_104AE:
0001204C 3028 003A                  		move.w	$3A(a0),d0
00012050 0828 0000 0022             		btst	#0,$22(a0)
00012056 6700                       		beq.s	loc_104BC
00012058 4440                       		neg.w	d0
0001205A                            
0001205A                            loc_104BC:
0001205A 3228 0030                  		move.w	$30(a0),d1
0001205E D240                       		add.w	d0,d1
00012060 3141 000C                  		move.w	d1,$C(a0)
00012064 4E75                       		rts	
00012066                            ; ===========================================================================
00012066                            
00012066                            loc_104C8:
00012066 5228 0028                  		addq.b	#1,$28(a0)
0001206A 4228 0038                  		clr.b	$38(a0)
0001206E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012072 7000                       		moveq	#0,d0
00012074 1028 0023                  		move.b	$23(a0),d0
00012078 67D2                       		beq.s	loc_104AE
0001207A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012080 60CA                       		bra.s	loc_104AE
00012082                            ; ===========================================================================
00012082                            
00012082                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00012082 4A28 0038                  		tst.b	$38(a0)
00012086 6600                       		bne.s	loc_10500
00012088 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001208C 7000                       		moveq	#0,d0
0001208E 1028 003C                  		move.b	$3C(a0),d0
00012092 4A32 0000                  		tst.b	(a2,d0.w)
00012096 6A00                       		bpl.s	loc_10512
00012098 117C 0001 0038             		move.b	#1,$38(a0)
0001209E                            
0001209E                            loc_10500:
0001209E 7000                       		moveq	#0,d0
000120A0 1028 0016                  		move.b	$16(a0),d0
000120A4 D040                       		add.w	d0,d0
000120A6 B068 003A                  		cmp.w	$3A(a0),d0
000120AA 6700                       		beq.s	loc_1052C
000120AC 5468 003A                  		addq.w	#2,$3A(a0)
000120B0                            
000120B0                            loc_10512:
000120B0 3028 003A                  		move.w	$3A(a0),d0
000120B4 0828 0000 0022             		btst	#0,$22(a0)
000120BA 6700                       		beq.s	loc_10520
000120BC 4440                       		neg.w	d0
000120BE                            
000120BE                            loc_10520:
000120BE 3228 0030                  		move.w	$30(a0),d1
000120C2 D240                       		add.w	d0,d1
000120C4 3141 000C                  		move.w	d1,$C(a0)
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            loc_1052C:
000120CA 5328 0028                  		subq.b	#1,$28(a0)
000120CE 4228 0038                  		clr.b	$38(a0)
000120D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000120D6 7000                       		moveq	#0,d0
000120D8 1028 0023                  		move.b	$23(a0),d0
000120DC 67D2                       		beq.s	loc_10512
000120DE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000120E4 60CA                       		bra.s	loc_10512
000120E6                            ; ===========================================================================
000120E6                            
000120E6                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000120E6 4A28 0038                  		tst.b	$38(a0)
000120EA 6600                       		bne.s	loc_1055E
000120EC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000120F0 6700                       		beq.s	locret_10578
000120F2 117C 0001 0038             		move.b	#1,$38(a0)
000120F8 4268 003A                  		clr.w	$3A(a0)
000120FC                            
000120FC                            loc_1055E:
000120FC 5268 0008                  		addq.w	#1,8(a0)
00012100 3168 0008 0034             		move.w	8(a0),$34(a0)
00012106 5268 003A                  		addq.w	#1,$3A(a0)
0001210A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00012110 6600                       		bne.s	locret_10578
00012112 4228 0028                  		clr.b	$28(a0)
00012116                            
00012116                            locret_10578:
00012116 4E75                       		rts	
00012118                            ; ===========================================================================
00012118                            
00012118                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00012118 4A28 0038                  		tst.b	$38(a0)
0001211C 6600                       		bne.s	loc_10598
0001211E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012122 7000                       		moveq	#0,d0
00012124 1028 003C                  		move.b	$3C(a0),d0
00012128 0832 0000 0000             		btst	#0,(a2,d0.w)
0001212E 6700                       		beq.s	loc_105A2
00012130 117C 0001 0038             		move.b	#1,$38(a0)
00012136                            
00012136                            loc_10598:
00012136 4A68 003A                  		tst.w	$3A(a0)
0001213A 6700                       		beq.s	loc_105C0
0001213C 5568 003A                  		subq.w	#2,$3A(a0)
00012140                            
00012140                            loc_105A2:
00012140 3028 003A                  		move.w	$3A(a0),d0
00012144 0828 0000 0022             		btst	#0,$22(a0)
0001214A 6700                       		beq.s	loc_105B4
0001214C 4440                       		neg.w	d0
0001214E 0640 0080                  		addi.w	#$80,d0
00012152                            
00012152                            loc_105B4:
00012152 3228 0034                  		move.w	$34(a0),d1
00012156 D240                       		add.w	d0,d1
00012158 3141 0008                  		move.w	d1,8(a0)
0001215C 4E75                       		rts	
0001215E                            ; ===========================================================================
0001215E                            
0001215E                            loc_105C0:
0001215E 5228 0028                  		addq.b	#1,$28(a0)
00012162 4228 0038                  		clr.b	$38(a0)
00012166 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001216A 7000                       		moveq	#0,d0
0001216C 1028 0023                  		move.b	$23(a0),d0
00012170 67CE                       		beq.s	loc_105A2
00012172 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012178 60C6                       		bra.s	loc_105A2
0001217A                            ; ===========================================================================
0001217A                            
0001217A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001217A 4A28 0038                  		tst.b	$38(a0)
0001217E 6600                       		bne.s	loc_105F8
00012180 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012184 7000                       		moveq	#0,d0
00012186 1028 003C                  		move.b	$3C(a0),d0
0001218A 4A32 0000                  		tst.b	(a2,d0.w)
0001218E 6A00                       		bpl.s	loc_10606
00012190 117C 0001 0038             		move.b	#1,$38(a0)
00012196                            
00012196                            loc_105F8:
00012196 303C 0080                  		move.w	#$80,d0
0001219A B068 003A                  		cmp.w	$3A(a0),d0
0001219E 6700                       		beq.s	loc_10624
000121A0 5468 003A                  		addq.w	#2,$3A(a0)
000121A4                            
000121A4                            loc_10606:
000121A4 3028 003A                  		move.w	$3A(a0),d0
000121A8 0828 0000 0022             		btst	#0,$22(a0)
000121AE 6700                       		beq.s	loc_10618
000121B0 4440                       		neg.w	d0
000121B2 0640 0080                  		addi.w	#$80,d0
000121B6                            
000121B6                            loc_10618:
000121B6 3228 0034                  		move.w	$34(a0),d1
000121BA D240                       		add.w	d0,d1
000121BC 3141 0008                  		move.w	d1,8(a0)
000121C0 4E75                       		rts	
000121C2                            ; ===========================================================================
000121C2                            
000121C2                            loc_10624:
000121C2 5328 0028                  		subq.b	#1,$28(a0)
000121C6 4228 0038                  		clr.b	$38(a0)
000121CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000121CE 7000                       		moveq	#0,d0
000121D0 1028 0023                  		move.b	$23(a0),d0
000121D4 67CE                       		beq.s	loc_10606
000121D6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000121DC 60C6                       		bra.s	loc_10606
000121DE                            ; ===========================================================================
000121DE                            
000121DE                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000121DE 323C 0010                  		move.w	#$10,d1
000121E2 7000                       		moveq	#0,d0
000121E4 1038 FE88                  		move.b	($FFFFFE88).w,d0
000121E8 E248                       		lsr.w	#1,d0
000121EA 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000121EE 6000                       		bra.s	Obj56_Move_Sqr
000121F0                            ; ===========================================================================
000121F0                            
000121F0                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000121F0 323C 0030                  		move.w	#$30,d1
000121F4 7000                       		moveq	#0,d0
000121F6 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000121FA 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000121FE 6000                       		bra.s	Obj56_Move_Sqr
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00012200 323C 0050                  		move.w	#$50,d1
00012204 7000                       		moveq	#0,d0
00012206 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001220A 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001220E 6000                       		bra.s	Obj56_Move_Sqr
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00012210 323C 0070                  		move.w	#$70,d1
00012214 7000                       		moveq	#0,d0
00012216 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001221A 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001221E                            
0001221E                            Obj56_Move_Sqr:
0001221E 4A43                       		tst.w	d3
00012220 6600                       		bne.s	loc_1068E
00012222 5228 0022                  		addq.b	#1,$22(a0)
00012226 0228 0003 0022             		andi.b	#3,$22(a0)
0001222C                            
0001222C                            loc_1068E:
0001222C 1428 0022                  		move.b	$22(a0),d2
00012230 0202 0003                  		andi.b	#3,d2
00012234 6600                       		bne.s	loc_106AE
00012236 9041                       		sub.w	d1,d0
00012238 D068 0034                  		add.w	$34(a0),d0
0001223C 3140 0008                  		move.w	d0,8(a0)
00012240 4441                       		neg.w	d1
00012242 D268 0030                  		add.w	$30(a0),d1
00012246 3141 000C                  		move.w	d1,$C(a0)
0001224A 4E75                       		rts	
0001224C                            ; ===========================================================================
0001224C                            
0001224C                            loc_106AE:
0001224C 5302                       		subq.b	#1,d2
0001224E 6600                       		bne.s	loc_106CC
00012250 5341                       		subq.w	#1,d1
00012252 9041                       		sub.w	d1,d0
00012254 4440                       		neg.w	d0
00012256 D068 0030                  		add.w	$30(a0),d0
0001225A 3140 000C                  		move.w	d0,$C(a0)
0001225E 5241                       		addq.w	#1,d1
00012260 D268 0034                  		add.w	$34(a0),d1
00012264 3141 0008                  		move.w	d1,8(a0)
00012268 4E75                       		rts	
0001226A                            ; ===========================================================================
0001226A                            
0001226A                            loc_106CC:
0001226A 5302                       		subq.b	#1,d2
0001226C 6600                       		bne.s	loc_106EA
0001226E 5341                       		subq.w	#1,d1
00012270 9041                       		sub.w	d1,d0
00012272 4440                       		neg.w	d0
00012274 D068 0034                  		add.w	$34(a0),d0
00012278 3140 0008                  		move.w	d0,8(a0)
0001227C 5241                       		addq.w	#1,d1
0001227E D268 0030                  		add.w	$30(a0),d1
00012282 3141 000C                  		move.w	d1,$C(a0)
00012286 4E75                       		rts	
00012288                            ; ===========================================================================
00012288                            
00012288                            loc_106EA:
00012288 9041                       		sub.w	d1,d0
0001228A D068 0030                  		add.w	$30(a0),d0
0001228E 3140 000C                  		move.w	d0,$C(a0)
00012292 4441                       		neg.w	d1
00012294 D268 0034                  		add.w	$34(a0),d1
00012298 3141 0008                  		move.w	d1,8(a0)
0001229C 4E75                       		rts	
0001229E                            ; ===========================================================================
0001229E                            ; ---------------------------------------------------------------------------
0001229E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001229E                            ; ---------------------------------------------------------------------------
0001229E                            Map_obj56:
0001229E                            	include "_maps\obj56.asm"
0001229E                            ; ---------------------------------------------------------------------------
0001229E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001229E                            ; ---------------------------------------------------------------------------
0001229E 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000122A2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000122A6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000122AA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000122AE 01                         byte_10710:	dc.b 1
000122AF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000122B4 04                         byte_10716:	dc.b 4
000122B5 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000122BA E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000122BF 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000122C4 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000122C9 02                         byte_1072B:	dc.b 2
000122CA E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000122CF 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000122D4 04                         byte_10736:	dc.b 4
000122D5 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000122DA E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000122DF 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000122E4 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000122E9 03                         byte_1074B:	dc.b 3
000122EA D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000122EF F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000122F4 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000122F9 01                         byte_1075B:	dc.b 1
000122FA F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000122FF 02                         byte_10761:	dc.b 2
00012300 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012305 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001230A 04                         byte_1076C:	dc.b 4
0001230B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00012310 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012315 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001231A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012320 00                         		even
00012320 00                         		even
00012320                            
00012320                            ; ===========================================================================
00012320                            ; ---------------------------------------------------------------------------
00012320                            ; Object 57 - spiked balls (SYZ, LZ)
00012320                            ; ---------------------------------------------------------------------------
00012320                            
00012320                            Obj57:					; XREF: Obj_Index
00012320 7000                       		moveq	#0,d0
00012322 1028 0024                  		move.b	$24(a0),d0
00012326 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001232A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001232E                            ; ===========================================================================
0001232E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00012330 0000                       		dc.w Obj57_Move-Obj57_Index
00012332 0000                       		dc.w Obj57_Display-Obj57_Index
00012334                            ; ===========================================================================
00012334                            
00012334                            Obj57_Main:				; XREF: Obj57_Index
00012334 5428 0024                  		addq.b	#2,$24(a0)
00012338 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00012340 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012346 117C 0004 0001             		move.b	#4,1(a0)
0001234C 117C 0004 0018             		move.b	#4,$18(a0)
00012352 117C 0008 0019             		move.b	#8,$19(a0)
00012358 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001235E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012364 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001236A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012370 6600                       		bne.s	loc_107E8
00012372 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00012378 317C 0310 0002             		move.w	#$310,2(a0)
0001237E 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00012386                            
00012386                            loc_107E8:
00012386 1228 0028                  		move.b	$28(a0),d1	; get object type
0001238A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001238E 4881                       		ext.w	d1
00012390 E741                       		asl.w	#3,d1		; multiply by 8
00012392 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00012396 1028 0022                  		move.b	$22(a0),d0
0001239A E418                       		ror.b	#2,d0
0001239C 0200 00C0                  		andi.b	#-$40,d0
000123A0 1140 0026                  		move.b	d0,$26(a0)
000123A4 45E8 0029                  		lea	$29(a0),a2
000123A8 1228 0028                  		move.b	$28(a0),d1	; get object type
000123AC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000123B0 14FC 0000                  		move.b	#0,(a2)+
000123B4 3601                       		move.w	d1,d3
000123B6 E94B                       		lsl.w	#4,d3
000123B8 1143 003C                  		move.b	d3,$3C(a0)
000123BC 5341                       		subq.w	#1,d1		; set chain length (type-1)
000123BE 6500                       		bcs.s	loc_10894
000123C0 0828 0003 0028             		btst	#3,$28(a0)
000123C6 6700                       		beq.s	Obj57_MakeChain
000123C8 5341                       		subq.w	#1,d1
000123CA 6500                       		bcs.s	loc_10894
000123CC                            
000123CC                            Obj57_MakeChain:
000123CC 6100 D246                  		bsr.w	SingleObjLoad
000123D0 6600                       		bne.s	loc_10894
000123D2 5228 0029                  		addq.b	#1,$29(a0)
000123D6 3A09                       		move.w	a1,d5
000123D8 0445 D000                  		subi.w	#-$3000,d5
000123DC EC4D                       		lsr.w	#6,d5
000123DE 0245 007F                  		andi.w	#$7F,d5
000123E2 14C5                       		move.b	d5,(a2)+
000123E4 137C 0004 0024             		move.b	#4,$24(a1)
000123EA 1290                       		move.b	0(a0),0(a1)
000123EC 2368 0004 0004             		move.l	4(a0),4(a1)
000123F2 3368 0002 0002             		move.w	2(a0),2(a1)
000123F8 1368 0001 0001             		move.b	1(a0),1(a1)
000123FE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012404 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001240A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00012410 0403 0010                  		subi.b	#$10,d3
00012414 1343 003C                  		move.b	d3,$3C(a1)
00012418 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001241E 6600                       		bne.s	loc_10890
00012420 4A03                       		tst.b	d3
00012422 6600                       		bne.s	loc_10890
00012424 137C 0002 001A             		move.b	#2,$1A(a1)
0001242A                            
0001242A                            loc_10890:
0001242A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001242E                            
0001242E                            loc_10894:
0001242E 3A08                       		move.w	a0,d5
00012430 0445 D000                  		subi.w	#-$3000,d5
00012434 EC4D                       		lsr.w	#6,d5
00012436 0245 007F                  		andi.w	#$7F,d5
0001243A 14C5                       		move.b	d5,(a2)+
0001243C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012442 6600                       		bne.s	Obj57_Move
00012444 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001244A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00012450                            
00012450                            Obj57_Move:				; XREF: Obj57_Index
00012450 6100 0000                  		bsr.w	Obj57_MoveSub
00012454 6000 0000                  		bra.w	Obj57_ChkDel
00012458                            ; ===========================================================================
00012458                            
00012458                            Obj57_MoveSub:				; XREF: Obj57_Move
00012458 3028 003E                  		move.w	$3E(a0),d0
0001245C D168 0026                  		add.w	d0,$26(a0)
00012460 1028 0026                  		move.b	$26(a0),d0
00012464 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001246A 3428 0038                  		move.w	$38(a0),d2
0001246E 3628 003A                  		move.w	$3A(a0),d3
00012472 45E8 0029                  		lea	$29(a0),a2
00012476 7C00                       		moveq	#0,d6
00012478 1C1A                       		move.b	(a2)+,d6
0001247A                            
0001247A                            Obj57_MoveLoop:
0001247A 7800                       		moveq	#0,d4
0001247C 181A                       		move.b	(a2)+,d4
0001247E ED4C                       		lsl.w	#6,d4
00012480 0684 00FF D000             		addi.l	#$FFD000,d4
00012486 2244                       		movea.l	d4,a1
00012488 7800                       		moveq	#0,d4
0001248A 1829 003C                  		move.b	$3C(a1),d4
0001248E 2A04                       		move.l	d4,d5
00012490 C9C0                       		muls.w	d0,d4
00012492 E084                       		asr.l	#8,d4
00012494 CBC1                       		muls.w	d1,d5
00012496 E085                       		asr.l	#8,d5
00012498 D842                       		add.w	d2,d4
0001249A DA43                       		add.w	d3,d5
0001249C 3344 000C                  		move.w	d4,$C(a1)
000124A0 3345 0008                  		move.w	d5,8(a1)
000124A4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000124A8 4E75                       		rts	
000124AA                            ; ===========================================================================
000124AA                            
000124AA                            Obj57_ChkDel:				; XREF: Obj57_Move
000124AA 3028 003A                  		move.w	$3A(a0),d0
000124AE 0240 FF80                  		andi.w	#$FF80,d0
000124B2 3238 F700                  		move.w	($FFFFF700).w,d1
000124B6 0441 0080                  		subi.w	#$80,d1
000124BA 0241 FF80                  		andi.w	#$FF80,d1
000124BE 9041                       		sub.w	d1,d0
000124C0 0C40 0280                  		cmpi.w	#$280,d0
000124C4 6200 0000                  		bhi.w	Obj57_Delete
000124C8 6000 CCB6                  		bra.w	DisplaySprite
000124CC                            ; ===========================================================================
000124CC                            
000124CC                            Obj57_Delete:				; XREF: Obj57_ChkDel
000124CC 7400                       		moveq	#0,d2
000124CE 45E8 0029                  		lea	$29(a0),a2
000124D2 141A                       		move.b	(a2)+,d2
000124D4                            
000124D4                            Obj57_DelLoop:
000124D4 7000                       		moveq	#0,d0
000124D6 101A                       		move.b	(a2)+,d0
000124D8 ED48                       		lsl.w	#6,d0
000124DA 0680 00FF D000             		addi.l	#$FFD000,d0
000124E0 2240                       		movea.l	d0,a1
000124E2 6100 CCDA                  		bsr.w	DeleteObject2
000124E6 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000124EA                            
000124EA 4E75                       		rts	
000124EC                            ; ===========================================================================
000124EC                            
000124EC                            Obj57_Display:				; XREF: Obj57_Index
000124EC 6000 CC92                  		bra.w	DisplaySprite
000124F0                            ; ===========================================================================
000124F0                            ; ---------------------------------------------------------------------------
000124F0                            ; Sprite mappings - chain of spiked balls (SYZ)
000124F0                            ; ---------------------------------------------------------------------------
000124F0                            Map_obj57:
000124F0                            	include "_maps\obj57syz.asm"
000124F0                            ; ---------------------------------------------------------------------------
000124F0                            ; Sprite mappings - chain of spiked balls (SYZ)
000124F0                            ; ---------------------------------------------------------------------------
000124F0 0000                       		dc.w byte_10958-Map_obj57
000124F2 01                         byte_10958:	dc.b 1
000124F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000124F8                            		even
000124F8                            		even
000124F8                            
000124F8                            ; ---------------------------------------------------------------------------
000124F8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000124F8                            ; ---------------------------------------------------------------------------
000124F8                            Map_obj57a:
000124F8                            	include "_maps\obj57lz.asm"
000124F8                            ; ---------------------------------------------------------------------------
000124F8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000124F8                            ; ---------------------------------------------------------------------------
000124F8 0000                       		dc.w byte_10964-Map_obj57a
000124FA 0000                       		dc.w byte_1096A-Map_obj57a
000124FC 0000                       		dc.w byte_10970-Map_obj57a
000124FE 01                         byte_10964:	dc.b 1
000124FF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012504 01                         byte_1096A:	dc.b 1
00012505 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001250A 01                         byte_10970:	dc.b 1
0001250B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012510                            		even
00012510                            		even
00012510                            
00012510                            ; ===========================================================================
00012510                            ; ---------------------------------------------------------------------------
00012510                            ; Object 58 - giant spiked balls (SYZ)
00012510                            ; ---------------------------------------------------------------------------
00012510                            
00012510                            Obj58:					; XREF: Obj_Index
00012510 7000                       		moveq	#0,d0
00012512 1028 0024                  		move.b	$24(a0),d0
00012516 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001251A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001251E                            ; ===========================================================================
0001251E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012520 0000                       		dc.w Obj58_Move-Obj58_Index
00012522                            ; ===========================================================================
00012522                            
00012522                            Obj58_Main:				; XREF: Obj58_Index
00012522 5428 0024                  		addq.b	#2,$24(a0)
00012526 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001252E 317C 0396 0002             		move.w	#$396,2(a0)
00012534 117C 0004 0001             		move.b	#4,1(a0)
0001253A 117C 0004 0018             		move.b	#4,$18(a0)
00012540 117C 0018 0019             		move.b	#$18,$19(a0)
00012546 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001254C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012552 117C 0086 0020             		move.b	#$86,$20(a0)
00012558 1228 0028                  		move.b	$28(a0),d1	; get object type
0001255C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012560 4881                       		ext.w	d1
00012562 E741                       		asl.w	#3,d1		; multiply by 8
00012564 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00012568 1028 0022                  		move.b	$22(a0),d0
0001256C E418                       		ror.b	#2,d0
0001256E 0200 00C0                  		andi.b	#$C0,d0
00012572 1140 0026                  		move.b	d0,$26(a0)
00012576 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001257C                            
0001257C                            Obj58_Move:				; XREF: Obj58_Index
0001257C 7000                       		moveq	#0,d0
0001257E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012582 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012586 D040                       		add.w	d0,d0
00012588 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001258C 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00012590 3028 003A                  		move.w	$3A(a0),d0
00012594 0240 FF80                  		andi.w	#$FF80,d0
00012598 3238 F700                  		move.w	($FFFFF700).w,d1
0001259C 0441 0080                  		subi.w	#$80,d1
000125A0 0241 FF80                  		andi.w	#$FF80,d1
000125A4 9041                       		sub.w	d1,d0
000125A6 0C40 0280                  		cmpi.w	#$280,d0
000125AA 6200 CC10                  		bhi.w	DeleteObject
000125AE 6000 CBD0                  		bra.w	DisplaySprite
000125B2                            ; ===========================================================================
000125B2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000125B4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000125B6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000125B8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000125BA                            ; ===========================================================================
000125BA                            
000125BA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000125BA 4E75                       		rts	
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000125BC 323C 0060                  		move.w	#$60,d1
000125C0 7000                       		moveq	#0,d0
000125C2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000125C6 0828 0000 0022             		btst	#0,$22(a0)
000125CC 6700                       		beq.s	loc_10A38
000125CE 4440                       		neg.w	d0
000125D0 D041                       		add.w	d1,d0
000125D2                            
000125D2                            loc_10A38:
000125D2 3228 003A                  		move.w	$3A(a0),d1
000125D6 9240                       		sub.w	d0,d1
000125D8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000125DC 4E75                       		rts	
000125DE                            ; ===========================================================================
000125DE                            
000125DE                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000125DE 323C 0060                  		move.w	#$60,d1
000125E2 7000                       		moveq	#0,d0
000125E4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000125E8 0828 0000 0022             		btst	#0,$22(a0)
000125EE 6700                       		beq.s	loc_10A5C
000125F0 4440                       		neg.w	d0
000125F2 0640 0080                  		addi.w	#$80,d0
000125F6                            
000125F6                            loc_10A5C:
000125F6 3228 0038                  		move.w	$38(a0),d1
000125FA 9240                       		sub.w	d0,d1
000125FC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012600 4E75                       		rts	
00012602                            ; ===========================================================================
00012602                            
00012602                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012602 3028 003E                  		move.w	$3E(a0),d0
00012606 D168 0026                  		add.w	d0,$26(a0)
0001260A 1028 0026                  		move.b	$26(a0),d0
0001260E 4EB9 0000 2B7A             		jsr	(CalcSine).l
00012614 3428 0038                  		move.w	$38(a0),d2
00012618 3628 003A                  		move.w	$3A(a0),d3
0001261C 7800                       		moveq	#0,d4
0001261E 1828 003C                  		move.b	$3C(a0),d4
00012622 2A04                       		move.l	d4,d5
00012624 C9C0                       		muls.w	d0,d4
00012626 E084                       		asr.l	#8,d4
00012628 CBC1                       		muls.w	d1,d5
0001262A E085                       		asr.l	#8,d5
0001262C D842                       		add.w	d2,d4
0001262E DA43                       		add.w	d3,d5
00012630 3144 000C                  		move.w	d4,$C(a0)
00012634 3145 0008                  		move.w	d5,8(a0)
00012638 4E75                       		rts	
0001263A                            ; ===========================================================================
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            Map_obj15b:
0001263A                            	include "_maps\obj15sbz.asm"
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001263A                            ; ---------------------------------------------------------------------------
0001263A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001263E 0000                       		dc.w byte_10AC6-Map_obj15b
00012640 05                         byte_10AA6:	dc.b 5
00012641 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012646 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001264B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012650 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012655 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001265A 01                         byte_10AC0:	dc.b 1
0001265B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00012660 02                         byte_10AC6:	dc.b 2
00012661 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00012666 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001266C 00                         		even
0001266C 00                         		even
0001266C                            
0001266C                            ; ===========================================================================
0001266C                            ; ---------------------------------------------------------------------------
0001266C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001266C                            ; ---------------------------------------------------------------------------
0001266C                            
0001266C                            Obj59:					; XREF: Obj_Index
0001266C 7000                       		moveq	#0,d0
0001266E 1028 0024                  		move.b	$24(a0),d0
00012672 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00012676 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001267A 3028 0032                  		move.w	$32(a0),d0
0001267E 0240 FF80                  		andi.w	#$FF80,d0
00012682 3238 F700                  		move.w	($FFFFF700).w,d1
00012686 0441 0080                  		subi.w	#$80,d1
0001268A 0241 FF80                  		andi.w	#$FF80,d1
0001268E 9041                       		sub.w	d1,d0
00012690 0C40 0280                  		cmpi.w	#$280,d0
00012694 6200 CB26                  		bhi.w	DeleteObject
00012698 6000 CAE6                  		bra.w	DisplaySprite
0001269C                            ; ===========================================================================
0001269C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001269E 0000                       		dc.w Obj59_Platform-Obj59_Index
000126A0 0000                       		dc.w Obj59_Action-Obj59_Index
000126A2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000126A4                            
000126A4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000126A6                            
000126A6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000126A8 2001                       		dc.b $20, 1
000126AA 3401                       		dc.b $34, 1
000126AC 1003                       		dc.b $10, 3
000126AE 2003                       		dc.b $20, 3
000126B0 3403                       		dc.b $34, 3
000126B2 1401                       		dc.b $14, 1
000126B4 2401                       		dc.b $24, 1
000126B6 2C01                       		dc.b $2C, 1
000126B8 1403                       		dc.b $14, 3
000126BA 2403                       		dc.b $24, 3
000126BC 2C03                       		dc.b $2C, 3
000126BE 2005                       		dc.b $20, 5
000126C0 2007                       		dc.b $20, 7
000126C2 3009                       		dc.b $30, 9
000126C4                            ; ===========================================================================
000126C4                            
000126C4                            Obj59_Main:				; XREF: Obj59_Index
000126C4 5428 0024                  		addq.b	#2,$24(a0)
000126C8 7000                       		moveq	#0,d0
000126CA 1028 0028                  		move.b	$28(a0),d0
000126CE 6A00                       		bpl.s	Obj59_Main2
000126D0 5828 0024                  		addq.b	#4,$24(a0)
000126D4 0240 007F                  		andi.w	#$7F,d0
000126D8 C0FC 0006                  		mulu.w	#6,d0
000126DC 3140 003C                  		move.w	d0,$3C(a0)
000126E0 3140 003E                  		move.w	d0,$3E(a0)
000126E4 588F                       		addq.l	#4,sp
000126E6 4E75                       		rts	
000126E8                            ; ===========================================================================
000126E8                            
000126E8                            Obj59_Main2:
000126E8 E648                       		lsr.w	#3,d0
000126EA 0240 001E                  		andi.w	#$1E,d0
000126EE 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000126F2 115A 0019                  		move.b	(a2)+,$19(a0)
000126F6 115A 001A                  		move.b	(a2)+,$1A(a0)
000126FA 7000                       		moveq	#0,d0
000126FC 1028 0028                  		move.b	$28(a0),d0
00012700 D040                       		add.w	d0,d0
00012702 0240 001E                  		andi.w	#$1E,d0
00012706 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001270A 101A                       		move.b	(a2)+,d0
0001270C E548                       		lsl.w	#2,d0
0001270E 3140 003C                  		move.w	d0,$3C(a0)
00012712 115A 0028                  		move.b	(a2)+,$28(a0)
00012716 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001271E 317C 4000 0002             		move.w	#$4000,2(a0)
00012724 117C 0004 0001             		move.b	#4,1(a0)
0001272A 117C 0004 0018             		move.b	#4,$18(a0)
00012730 3168 0008 0032             		move.w	8(a0),$32(a0)
00012736 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001273C                            
0001273C                            Obj59_Platform:				; XREF: Obj59_Index
0001273C 7200                       		moveq	#0,d1
0001273E 1228 0019                  		move.b	$19(a0),d1
00012742 4EB9 0000 8E3C             		jsr	(PlatformObject).l
00012748 6000 0000                  		bra.w	Obj59_Types
0001274C                            ; ===========================================================================
0001274C                            
0001274C                            Obj59_Action:				; XREF: Obj59_Index
0001274C 7200                       		moveq	#0,d1
0001274E 1228 0019                  		move.b	$19(a0),d1
00012752 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
00012758 3F28 0008                  		move.w	8(a0),-(sp)
0001275C 6100 0000                  		bsr.w	Obj59_Types
00012760 341F                       		move.w	(sp)+,d2
00012762 4A10                       		tst.b	0(a0)
00012764 6700                       		beq.s	locret_10BD4
00012766 4EF9 0000 951A             		jmp	(MvSonicOnPtfm2).l
0001276C                            ; ===========================================================================
0001276C                            
0001276C                            locret_10BD4:
0001276C 4E75                       		rts	
0001276E                            ; ===========================================================================
0001276E                            
0001276E                            Obj59_Types:
0001276E 7000                       		moveq	#0,d0
00012770 1028 0028                  		move.b	$28(a0),d0
00012774 0240 000F                  		andi.w	#$F,d0
00012778 D040                       		add.w	d0,d0
0001277A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001277E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00012782                            ; ===========================================================================
00012782 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012786 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001278A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001278E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012792 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012796                            ; ===========================================================================
00012796                            
00012796                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012796 4E75                       		rts	
00012798                            ; ===========================================================================
00012798                            
00012798                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00012798 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001279E 6600                       		bne.s	locret_10C0C
000127A0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000127A4                            
000127A4                            locret_10C0C:
000127A4 4E75                       		rts	
000127A6                            ; ===========================================================================
000127A6                            
000127A6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000127A6 6100 0000                  		bsr.w	Obj59_Move
000127AA 3028 0034                  		move.w	$34(a0),d0
000127AE 4440                       		neg.w	d0
000127B0 D068 0030                  		add.w	$30(a0),d0
000127B4 3140 000C                  		move.w	d0,$C(a0)
000127B8 4E75                       		rts	
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000127BA 6100 0000                  		bsr.w	Obj59_Move
000127BE 3028 0034                  		move.w	$34(a0),d0
000127C2 D068 0030                  		add.w	$30(a0),d0
000127C6 3140 000C                  		move.w	d0,$C(a0)
000127CA 4E75                       		rts	
000127CC                            ; ===========================================================================
000127CC                            
000127CC                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000127CC 6100 0000                  		bsr.w	Obj59_Move
000127D0 3028 0034                  		move.w	$34(a0),d0
000127D4 E240                       		asr.w	#1,d0
000127D6 4440                       		neg.w	d0
000127D8 D068 0030                  		add.w	$30(a0),d0
000127DC 3140 000C                  		move.w	d0,$C(a0)
000127E0 3028 0034                  		move.w	$34(a0),d0
000127E4 D068 0032                  		add.w	$32(a0),d0
000127E8 3140 0008                  		move.w	d0,8(a0)
000127EC 4E75                       		rts	
000127EE                            ; ===========================================================================
000127EE                            
000127EE                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000127EE 6100 0000                  		bsr.w	Obj59_Move
000127F2 3028 0034                  		move.w	$34(a0),d0
000127F6 E240                       		asr.w	#1,d0
000127F8 D068 0030                  		add.w	$30(a0),d0
000127FC 3140 000C                  		move.w	d0,$C(a0)
00012800 3028 0034                  		move.w	$34(a0),d0
00012804 4440                       		neg.w	d0
00012806 D068 0032                  		add.w	$32(a0),d0
0001280A 3140 0008                  		move.w	d0,8(a0)
0001280E 4E75                       		rts	
00012810                            ; ===========================================================================
00012810                            
00012810                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012810 6100 0000                  		bsr.w	Obj59_Move
00012814 3028 0034                  		move.w	$34(a0),d0
00012818 4440                       		neg.w	d0
0001281A D068 0030                  		add.w	$30(a0),d0
0001281E 3140 000C                  		move.w	d0,$C(a0)
00012822 4A28 0028                  		tst.b	$28(a0)
00012826 6700 0000                  		beq.w	loc_10C94
0001282A 4E75                       		rts	
0001282C                            ; ===========================================================================
0001282C                            
0001282C                            loc_10C94:
0001282C 0828 0003 0022             		btst	#3,$22(a0)
00012832 6700                       		beq.s	Obj59_Delete
00012834 08E9 0001 0022             		bset	#1,$22(a1)
0001283A 08A9 0003 0022             		bclr	#3,$22(a1)
00012840 137C 0002 0024             		move.b	#2,$24(a1)
00012846                            
00012846                            Obj59_Delete:
00012846 6000 C974                  		bra.w	DeleteObject
0001284A                            
0001284A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001284A                            
0001284A                            
0001284A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001284A 3028 0038                  		move.w	$38(a0),d0
0001284E 4A28 003A                  		tst.b	$3A(a0)
00012852 6600                       		bne.s	loc_10CC8
00012854 0C40 0800                  		cmpi.w	#$800,d0
00012858 6400                       		bcc.s	loc_10CD0
0001285A 0640 0010                  		addi.w	#$10,d0
0001285E 6000                       		bra.s	loc_10CD0
00012860                            ; ===========================================================================
00012860                            
00012860                            loc_10CC8:
00012860 4A40                       		tst.w	d0
00012862 6700                       		beq.s	loc_10CD0
00012864 0440 0010                  		subi.w	#$10,d0
00012868                            
00012868                            loc_10CD0:
00012868 3140 0038                  		move.w	d0,$38(a0)
0001286C 48C0                       		ext.l	d0
0001286E E180                       		asl.l	#8,d0
00012870 D0A8 0034                  		add.l	$34(a0),d0
00012874 2140 0034                  		move.l	d0,$34(a0)
00012878 4840                       		swap	d0
0001287A 3428 003C                  		move.w	$3C(a0),d2
0001287E B042                       		cmp.w	d2,d0
00012880 6300                       		bls.s	loc_10CF0
00012882 117C 0001 003A             		move.b	#1,$3A(a0)
00012888                            
00012888                            loc_10CF0:
00012888 D442                       		add.w	d2,d2
0001288A B042                       		cmp.w	d2,d0
0001288C 6600                       		bne.s	locret_10CFA
0001288E 4228 0028                  		clr.b	$28(a0)
00012892                            
00012892                            locret_10CFA:
00012892 4E75                       		rts	
00012894                            ; End of function Obj59_Move
00012894                            
00012894                            ; ===========================================================================
00012894                            
00012894                            Obj59_MakeMulti:			; XREF: Obj59_Index
00012894 5368 003C                  		subq.w	#1,$3C(a0)
00012898 6600                       		bne.s	Obj59_ChkDel
0001289A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000128A0 6100 CD72                  		bsr.w	SingleObjLoad
000128A4 6600                       		bne.s	Obj59_ChkDel
000128A6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000128AA 3368 0008 0008             		move.w	8(a0),8(a1)
000128B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000128B6 137C 000E 0028             		move.b	#$E,$28(a1)
000128BC                            
000128BC                            Obj59_ChkDel:
000128BC 588F                       		addq.l	#4,sp
000128BE 3028 0008                  		move.w	8(a0),d0
000128C2 0240 FF80                  		andi.w	#$FF80,d0
000128C6 3238 F700                  		move.w	($FFFFF700).w,d1
000128CA 0441 0080                  		subi.w	#$80,d1
000128CE 0241 FF80                  		andi.w	#$FF80,d1
000128D2 9041                       		sub.w	d1,d0
000128D4 0C40 0280                  		cmpi.w	#$280,d0
000128D8 6200 C8E2                  		bhi.w	DeleteObject
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            ; ---------------------------------------------------------------------------
000128DE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000128DE                            ; ---------------------------------------------------------------------------
000128DE                            Map_obj59:
000128DE                            	include "_maps\obj59.asm"
000128DE                            ; ---------------------------------------------------------------------------
000128DE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000128DE                            ; ---------------------------------------------------------------------------
000128DE 0000                       		dc.w byte_10D4A-Map_obj59
000128E0 03                         byte_10D4A:	dc.b 3
000128E1 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000128E6 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000128EB F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000128F0                            		even
000128F0                            		even
000128F0                            
000128F0                            ; ===========================================================================
000128F0                            ; ---------------------------------------------------------------------------
000128F0                            ; Object 5A - platforms	moving in circles (SLZ)
000128F0                            ; ---------------------------------------------------------------------------
000128F0                            
000128F0                            Obj5A:					; XREF: Obj_Index
000128F0 7000                       		moveq	#0,d0
000128F2 1028 0024                  		move.b	$24(a0),d0
000128F6 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000128FA 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000128FE 3028 0032                  		move.w	$32(a0),d0
00012902 0240 FF80                  		andi.w	#$FF80,d0
00012906 3238 F700                  		move.w	($FFFFF700).w,d1
0001290A 0441 0080                  		subi.w	#$80,d1
0001290E 0241 FF80                  		andi.w	#$FF80,d1
00012912 9041                       		sub.w	d1,d0
00012914 0C40 0280                  		cmpi.w	#$280,d0
00012918 6200 C8A2                  		bhi.w	DeleteObject
0001291C 6000 C862                  		bra.w	DisplaySprite
00012920                            ; ===========================================================================
00012920 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012922 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012924 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012926                            ; ===========================================================================
00012926                            
00012926                            Obj5A_Main:				; XREF: Obj5A_Index
00012926 5428 0024                  		addq.b	#2,$24(a0)
0001292A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012932 317C 4000 0002             		move.w	#$4000,2(a0)
00012938 117C 0004 0001             		move.b	#4,1(a0)
0001293E 117C 0004 0018             		move.b	#4,$18(a0)
00012944 117C 0018 0019             		move.b	#$18,$19(a0)
0001294A 3168 0008 0032             		move.w	8(a0),$32(a0)
00012950 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012956                            
00012956                            Obj5A_Platform:				; XREF: Obj5A_Index
00012956 7200                       		moveq	#0,d1
00012958 1228 0019                  		move.b	$19(a0),d1
0001295C 4EB9 0000 8E3C             		jsr	(PlatformObject).l
00012962 6000 0000                  		bra.w	Obj5A_Types
00012966                            ; ===========================================================================
00012966                            
00012966                            Obj5A_Action:				; XREF: Obj5A_Index
00012966 7200                       		moveq	#0,d1
00012968 1228 0019                  		move.b	$19(a0),d1
0001296C 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
00012972 3F28 0008                  		move.w	8(a0),-(sp)
00012976 6100 0000                  		bsr.w	Obj5A_Types
0001297A 341F                       		move.w	(sp)+,d2
0001297C 4EF9 0000 951A             		jmp	(MvSonicOnPtfm2).l
00012982                            ; ===========================================================================
00012982                            
00012982                            Obj5A_Types:
00012982 7000                       		moveq	#0,d0
00012984 1028 0028                  		move.b	$28(a0),d0
00012988 0240 000C                  		andi.w	#$C,d0
0001298C E248                       		lsr.w	#1,d0
0001298E 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00012992 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00012996                            ; ===========================================================================
00012996 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00012998 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001299A                            ; ===========================================================================
0001299A                            
0001299A                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001299A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001299E 0401 0050                  		subi.b	#$50,d1
000129A2 4881                       		ext.w	d1
000129A4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000129A8 0402 0050                  		subi.b	#$50,d2
000129AC 4882                       		ext.w	d2
000129AE 0828 0000 0028             		btst	#0,$28(a0)
000129B4 6700                       		beq.s	loc_10E24
000129B6 4441                       		neg.w	d1
000129B8 4442                       		neg.w	d2
000129BA                            
000129BA                            loc_10E24:
000129BA 0828 0001 0028             		btst	#1,$28(a0)
000129C0 6700                       		beq.s	loc_10E30
000129C2 4441                       		neg.w	d1
000129C4 C342                       		exg	d1,d2
000129C6                            
000129C6                            loc_10E30:
000129C6 D268 0032                  		add.w	$32(a0),d1
000129CA 3141 0008                  		move.w	d1,8(a0)
000129CE D468 0030                  		add.w	$30(a0),d2
000129D2 3142 000C                  		move.w	d2,$C(a0)
000129D6 4E75                       		rts	
000129D8                            ; ===========================================================================
000129D8                            
000129D8                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000129D8 1238 FE80                  		move.b	($FFFFFE80).w,d1
000129DC 0401 0050                  		subi.b	#$50,d1
000129E0 4881                       		ext.w	d1
000129E2 1438 FE84                  		move.b	($FFFFFE84).w,d2
000129E6 0402 0050                  		subi.b	#$50,d2
000129EA 4882                       		ext.w	d2
000129EC 0828 0000 0028             		btst	#0,$28(a0)
000129F2 6700                       		beq.s	loc_10E62
000129F4 4441                       		neg.w	d1
000129F6 4442                       		neg.w	d2
000129F8                            
000129F8                            loc_10E62:
000129F8 0828 0001 0028             		btst	#1,$28(a0)
000129FE 6700                       		beq.s	loc_10E6E
00012A00 4441                       		neg.w	d1
00012A02 C342                       		exg	d1,d2
00012A04                            
00012A04                            loc_10E6E:
00012A04 4441                       		neg.w	d1
00012A06 D268 0032                  		add.w	$32(a0),d1
00012A0A 3141 0008                  		move.w	d1,8(a0)
00012A0E D468 0030                  		add.w	$30(a0),d2
00012A12 3142 000C                  		move.w	d2,$C(a0)
00012A16 4E75                       		rts	
00012A18                            ; ===========================================================================
00012A18                            ; ---------------------------------------------------------------------------
00012A18                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012A18                            ; ---------------------------------------------------------------------------
00012A18                            Map_obj5A:
00012A18                            	include "_maps\obj5A.asm"
00012A18                            ; ---------------------------------------------------------------------------
00012A18                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012A18                            ; ---------------------------------------------------------------------------
00012A18 0000                       		dc.w byte_10E84-Map_obj5A
00012A1A 02                         byte_10E84:	dc.b 2
00012A1B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012A20 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012A26 00                         		even
00012A26 00                         		even
00012A26                            
00012A26                            ; ===========================================================================
00012A26                            ; ---------------------------------------------------------------------------
00012A26                            ; Object 5B - blocks that form a staircase (SLZ)
00012A26                            ; ---------------------------------------------------------------------------
00012A26                            
00012A26                            Obj5B:					; XREF: Obj_Index
00012A26 7000                       		moveq	#0,d0
00012A28 1028 0024                  		move.b	$24(a0),d0
00012A2C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00012A30 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012A34 3028 0030                  		move.w	$30(a0),d0
00012A38 0240 FF80                  		andi.w	#$FF80,d0
00012A3C 3238 F700                  		move.w	($FFFFF700).w,d1
00012A40 0441 0080                  		subi.w	#$80,d1
00012A44 0241 FF80                  		andi.w	#$FF80,d1
00012A48 9041                       		sub.w	d1,d0
00012A4A 0C40 0280                  		cmpi.w	#$280,d0
00012A4E 6200 C76C                  		bhi.w	DeleteObject
00012A52 6000 C72C                  		bra.w	DisplaySprite
00012A56                            ; ===========================================================================
00012A56 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012A58 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012A5A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012A5C                            ; ===========================================================================
00012A5C                            
00012A5C                            Obj5B_Main:				; XREF: Obj5B_Index
00012A5C 5428 0024                  		addq.b	#2,$24(a0)
00012A60 7638                       		moveq	#$38,d3
00012A62 7801                       		moveq	#1,d4
00012A64 0828 0000 0022             		btst	#0,$22(a0)
00012A6A 6700                       		beq.s	loc_10EDA
00012A6C 763B                       		moveq	#$3B,d3
00012A6E 78FF                       		moveq	#-1,d4
00012A70                            
00012A70                            loc_10EDA:
00012A70 3428 0008                  		move.w	8(a0),d2
00012A74 2248                       		movea.l	a0,a1
00012A76 7203                       		moveq	#3,d1
00012A78 6000                       		bra.s	Obj5B_MakeBlocks
00012A7A                            ; ===========================================================================
00012A7A                            
00012A7A                            Obj5B_Loop:
00012A7A 6100 CBAE                  		bsr.w	SingleObjLoad2
00012A7E 6600 0000                  		bne.w	Obj5B_Move
00012A82 137C 0004 0024             		move.b	#4,$24(a1)
00012A88                            
00012A88                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012A88 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012A8C 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012A94 337C 4000 0002             		move.w	#$4000,2(a1)
00012A9A 137C 0004 0001             		move.b	#4,1(a1)
00012AA0 137C 0003 0018             		move.b	#3,$18(a1)
00012AA6 137C 0010 0019             		move.b	#$10,$19(a1)
00012AAC 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012AB2 3342 0008                  		move.w	d2,8(a1)
00012AB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012ABC 3368 0008 0030             		move.w	8(a0),$30(a1)
00012AC2 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012AC8 0642 0020                  		addi.w	#$20,d2
00012ACC 1343 0037                  		move.b	d3,$37(a1)
00012AD0 2348 003C                  		move.l	a0,$3C(a1)
00012AD4 D604                       		add.b	d4,d3
00012AD6 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012ADA                            
00012ADA                            Obj5B_Move:				; XREF: Obj5B_Index
00012ADA 7000                       		moveq	#0,d0
00012ADC 1028 0028                  		move.b	$28(a0),d0
00012AE0 0240 0007                  		andi.w	#7,d0
00012AE4 D040                       		add.w	d0,d0
00012AE6 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012AEA 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012AEE                            
00012AEE                            Obj5B_Solid:				; XREF: Obj5B_Index
00012AEE 2468 003C                  		movea.l	$3C(a0),a2
00012AF2 7000                       		moveq	#0,d0
00012AF4 1028 0037                  		move.b	$37(a0),d0
00012AF8 1032 0000                  		move.b	(a2,d0.w),d0
00012AFC D068 0032                  		add.w	$32(a0),d0
00012B00 3140 000C                  		move.w	d0,$C(a0)
00012B04 7200                       		moveq	#0,d1
00012B06 1228 0019                  		move.b	$19(a0),d1
00012B0A 0641 000B                  		addi.w	#$B,d1
00012B0E 343C 0010                  		move.w	#$10,d2
00012B12 363C 0011                  		move.w	#$11,d3
00012B16 3828 0008                  		move.w	8(a0),d4
00012B1A 6100 EA46                  		bsr.w	SolidObject
00012B1E 4A04                       		tst.b	d4
00012B20 6A00                       		bpl.s	loc_10F92
00012B22 1544 0036                  		move.b	d4,$36(a2)
00012B26                            
00012B26                            loc_10F92:
00012B26 0828 0003 0022             		btst	#3,$22(a0)
00012B2C 6700                       		beq.s	locret_10FA0
00012B2E 157C 0001 0036             		move.b	#1,$36(a2)
00012B34                            
00012B34                            locret_10FA0:
00012B34 4E75                       		rts	
00012B36                            ; ===========================================================================
00012B36 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012B38 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012B3A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012B3C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012B3E                            ; ===========================================================================
00012B3E                            
00012B3E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012B3E 4A68 0034                  		tst.w	$34(a0)
00012B42 6600                       		bne.s	loc_10FC0
00012B44 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012B4A 6600                       		bne.s	locret_10FBE
00012B4C 317C 001E 0034             		move.w	#$1E,$34(a0)
00012B52                            
00012B52                            locret_10FBE:
00012B52 4E75                       		rts	
00012B54                            ; ===========================================================================
00012B54                            
00012B54                            loc_10FC0:
00012B54 5368 0034                  		subq.w	#1,$34(a0)
00012B58 66F8                       		bne.s	locret_10FBE
00012B5A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B5E 4E75                       		rts	
00012B60                            ; ===========================================================================
00012B60                            
00012B60                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012B60 4A68 0034                  		tst.w	$34(a0)
00012B64 6600                       		bne.s	loc_10FE0
00012B66 4A28 0036                  		tst.b	$36(a0)
00012B6A 6A00                       		bpl.s	locret_10FDE
00012B6C 317C 003C 0034             		move.w	#$3C,$34(a0)
00012B72                            
00012B72                            locret_10FDE:
00012B72 4E75                       		rts	
00012B74                            ; ===========================================================================
00012B74                            
00012B74                            loc_10FE0:
00012B74 5368 0034                  		subq.w	#1,$34(a0)
00012B78 6600                       		bne.s	loc_10FEC
00012B7A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B7E 4E75                       		rts	
00012B80                            ; ===========================================================================
00012B80                            
00012B80                            loc_10FEC:
00012B80 43E8 0038                  		lea	$38(a0),a1
00012B84 3028 0034                  		move.w	$34(a0),d0
00012B88 E408                       		lsr.b	#2,d0
00012B8A 0200 0001                  		andi.b	#1,d0
00012B8E 12C0                       		move.b	d0,(a1)+
00012B90 0A00 0001                  		eori.b	#1,d0
00012B94 12C0                       		move.b	d0,(a1)+
00012B96 0A00 0001                  		eori.b	#1,d0
00012B9A 12C0                       		move.b	d0,(a1)+
00012B9C 0A00 0001                  		eori.b	#1,d0
00012BA0 12C0                       		move.b	d0,(a1)+
00012BA2 4E75                       		rts	
00012BA4                            ; ===========================================================================
00012BA4                            
00012BA4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012BA4 43E8 0038                  		lea	$38(a0),a1
00012BA8 0C11 0080                  		cmpi.b	#$80,(a1)
00012BAC 6700                       		beq.s	locret_11038
00012BAE 5211                       		addq.b	#1,(a1)
00012BB0 7200                       		moveq	#0,d1
00012BB2 1219                       		move.b	(a1)+,d1
00012BB4 4841                       		swap	d1
00012BB6 E289                       		lsr.l	#1,d1
00012BB8 2401                       		move.l	d1,d2
00012BBA E289                       		lsr.l	#1,d1
00012BBC 2601                       		move.l	d1,d3
00012BBE D682                       		add.l	d2,d3
00012BC0 4841                       		swap	d1
00012BC2 4842                       		swap	d2
00012BC4 4843                       		swap	d3
00012BC6 12C3                       		move.b	d3,(a1)+
00012BC8 12C2                       		move.b	d2,(a1)+
00012BCA 12C1                       		move.b	d1,(a1)+
00012BCC                            
00012BCC                            locret_11038:
00012BCC 4E75                       		rts	
00012BCE 4E75                       		rts	
00012BD0                            ; ===========================================================================
00012BD0                            ; ---------------------------------------------------------------------------
00012BD0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012BD0                            ; ---------------------------------------------------------------------------
00012BD0                            Map_obj5B:
00012BD0                            	include "_maps\obj5B.asm"
00012BD0                            ; ---------------------------------------------------------------------------
00012BD0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012BD0                            ; ---------------------------------------------------------------------------
00012BD0 0000                       		dc.w byte_1103E-Map_obj5B
00012BD2 01                         byte_1103E:	dc.b 1
00012BD3 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012BD8                            		even
00012BD8                            		even
00012BD8                            
00012BD8                            ; ===========================================================================
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8                            ; Object 5C - metal girders in foreground (SLZ)
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8                            
00012BD8                            Obj5C:					; XREF: Obj_Index
00012BD8 7000                       		moveq	#0,d0
00012BDA 1028 0024                  		move.b	$24(a0),d0
00012BDE 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012BE2 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012BE6                            ; ===========================================================================
00012BE6 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012BE8 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012BEA                            ; ===========================================================================
00012BEA                            
00012BEA                            Obj5C_Main:				; XREF: Obj5C_Index
00012BEA 5428 0024                  		addq.b	#2,$24(a0)
00012BEE 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012BF6 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012BFC 117C 0010 0019             		move.b	#$10,$19(a0)
00012C02                            
00012C02                            Obj5C_Display:				; XREF: Obj5C_Index
00012C02 2238 F700                  		move.l	($FFFFF700).w,d1
00012C06 D281                       		add.l	d1,d1
00012C08 4841                       		swap	d1
00012C0A 4441                       		neg.w	d1
00012C0C 3141 0008                  		move.w	d1,8(a0)
00012C10 2238 F704                  		move.l	($FFFFF704).w,d1
00012C14 D281                       		add.l	d1,d1
00012C16 4841                       		swap	d1
00012C18 0241 003F                  		andi.w	#$3F,d1
00012C1C 4441                       		neg.w	d1
00012C1E 0641 0100                  		addi.w	#$100,d1
00012C22 3141 000A                  		move.w	d1,$A(a0)
00012C26 6000 C558                  		bra.w	DisplaySprite
00012C2A                            ; ===========================================================================
00012C2A                            ; ---------------------------------------------------------------------------
00012C2A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012C2A                            ; ---------------------------------------------------------------------------
00012C2A                            Map_obj5C:
00012C2A                            	include "_maps\obj5C.asm"
00012C2A                            ; ---------------------------------------------------------------------------
00012C2A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012C2A                            ; ---------------------------------------------------------------------------
00012C2A 0000                       		dc.w byte_11098-Map_obj5C
00012C2C 09                         byte_11098:	dc.b 9
00012C2D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012C32 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012C37 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012C3C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012C41 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012C46 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012C4B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012C50 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012C55 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012C5A                            		even
00012C5A                            		even
00012C5A                            
00012C5A                            ; ===========================================================================
00012C5A                            ; ---------------------------------------------------------------------------
00012C5A                            ; Object 1B - water surface (LZ)
00012C5A                            ; ---------------------------------------------------------------------------
00012C5A                            
00012C5A                            Obj1B:					; XREF: Obj_Index
00012C5A 7000                       		moveq	#0,d0
00012C5C 1028 0024                  		move.b	$24(a0),d0
00012C60 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012C64 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012C68                            ; ===========================================================================
00012C68 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012C6A 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012C6C                            ; ===========================================================================
00012C6C                            
00012C6C                            Obj1B_Main:				; XREF: Obj1B_Index
00012C6C 5428 0024                  		addq.b	#2,$24(a0)
00012C70 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012C78 317C C300 0002             		move.w	#$C300,2(a0)
00012C7E 117C 0004 0001             		move.b	#4,1(a0)
00012C84 117C 0080 0019             		move.b	#$80,$19(a0)
00012C8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C90                            
00012C90                            Obj1B_Action:				; XREF: Obj1B_Index
00012C90 3238 F700                  		move.w	($FFFFF700).w,d1
00012C94 0241 FFE0                  		andi.w	#$FFE0,d1
00012C98 D268 0030                  		add.w	$30(a0),d1
00012C9C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012CA2 6700                       		beq.s	loc_11114
00012CA4 0641 0020                  		addi.w	#$20,d1
00012CA8                            
00012CA8                            loc_11114:
00012CA8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012CAC 3238 F646                  		move.w	($FFFFF646).w,d1
00012CB0 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012CB4 4A28 0032                  		tst.b	$32(a0)
00012CB8 6600                       		bne.s	Obj1B_Animate
00012CBA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012CC0 6700                       		beq.s	loc_1114A	; if not, branch
00012CC2 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012CC6 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012CCC 6000                       		bra.s	Obj1B_Display
00012CCE                            ; ===========================================================================
00012CCE                            
00012CCE                            Obj1B_Animate:				; XREF: loc_11114
00012CCE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012CD2 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012CD4 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012CDA 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012CDE                            
00012CDE                            loc_1114A:				; XREF: loc_11114
00012CDE 5328 001E                  		subq.b	#1,$1E(a0)
00012CE2 6A00                       		bpl.s	Obj1B_Display
00012CE4 117C 0007 001E             		move.b	#7,$1E(a0)
00012CEA 5228 001A                  		addq.b	#1,$1A(a0)
00012CEE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012CF4 6500                       		bcs.s	Obj1B_Display
00012CF6 117C 0000 001A             		move.b	#0,$1A(a0)
00012CFC                            
00012CFC                            Obj1B_Display:
00012CFC 6000 C482                  		bra.w	DisplaySprite
00012D00                            ; ===========================================================================
00012D00                            ; ---------------------------------------------------------------------------
00012D00                            ; Sprite mappings - water surface (LZ)
00012D00                            ; ---------------------------------------------------------------------------
00012D00                            Map_obj1B:
00012D00                            	include "_maps\obj1B.asm"
00012D00                            ; ---------------------------------------------------------------------------
00012D00                            ; Sprite mappings - water surface (LZ)
00012D00                            ; ---------------------------------------------------------------------------
00012D00 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012D04 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012D08 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012D0C 03                         byte_11178:	dc.b 3
00012D0D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012D12 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012D17 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012D1C 03                         byte_11188:	dc.b 3
00012D1D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012D22 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012D27 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012D2C 03                         byte_11198:	dc.b 3
00012D2D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012D32 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012D37 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012D3C 06                         byte_111A8:	dc.b 6
00012D3D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012D42 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012D47 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012D4C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012D51 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012D56 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012D5B 06                         byte_111C7:	dc.b 6
00012D5C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012D61 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012D66 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012D6B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012D70 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012D75 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012D7A 06                         byte_111E6:	dc.b 6
00012D7B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012D80 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012D85 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012D8A FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012D8F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012D94 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012D9A 00                         		even
00012D9A 00                         		even
00012D9A                            
00012D9A                            ; ===========================================================================
00012D9A                            ; ---------------------------------------------------------------------------
00012D9A                            ; Object 0B - pole that	breaks (LZ)
00012D9A                            ; ---------------------------------------------------------------------------
00012D9A                            
00012D9A                            Obj0B:					; XREF: Obj_Index
00012D9A 7000                       		moveq	#0,d0
00012D9C 1028 0024                  		move.b	$24(a0),d0
00012DA0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012DA4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012DA8                            ; ===========================================================================
00012DA8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012DAA 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012DAC 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            Obj0B_Main:				; XREF: Obj0B_Index
00012DAE 5428 0024                  		addq.b	#2,$24(a0)
00012DB2 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012DBA 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012DC0 117C 0004 0001             		move.b	#4,1(a0)
00012DC6 117C 0008 0019             		move.b	#8,$19(a0)
00012DCC 117C 0004 0018             		move.b	#4,$18(a0)
00012DD2 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012DD8 7000                       		moveq	#0,d0
00012DDA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012DDE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012DE2 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012DE6                            
00012DE6                            Obj0B_Action:				; XREF: Obj0B_Index
00012DE6 4A28 0032                  		tst.b	$32(a0)
00012DEA 6700                       		beq.s	Obj0B_Grab
00012DEC 4A68 0030                  		tst.w	$30(a0)
00012DF0 6700                       		beq.s	Obj0B_MoveUp
00012DF2 5368 0030                  		subq.w	#1,$30(a0)
00012DF6 6600                       		bne.s	Obj0B_MoveUp
00012DF8 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012DFE 6000                       		bra.s	Obj0B_Release
00012E00                            ; ===========================================================================
00012E00                            
00012E00                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012E00 43F8 D000                  		lea	($FFFFD000).w,a1
00012E04 3028 000C                  		move.w	$C(a0),d0
00012E08 0440 0018                  		subi.w	#$18,d0
00012E0C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012E12 6700                       		beq.s	Obj0B_MoveDown
00012E14 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012E18 B069 000C                  		cmp.w	$C(a1),d0
00012E1C 6500                       		bcs.s	Obj0B_MoveDown
00012E1E 3340 000C                  		move.w	d0,$C(a1)
00012E22                            
00012E22                            Obj0B_MoveDown:
00012E22 0640 0024                  		addi.w	#$24,d0
00012E26 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012E2C 6700                       		beq.s	Obj0B_LetGo
00012E2E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012E32 B069 000C                  		cmp.w	$C(a1),d0
00012E36 6400                       		bcc.s	Obj0B_LetGo
00012E38 3340 000C                  		move.w	d0,$C(a1)
00012E3C                            
00012E3C                            Obj0B_LetGo:
00012E3C 1038 F603                  		move.b	($FFFFF603).w,d0
00012E40 0240 0070                  		andi.w	#$70,d0
00012E44 6700                       		beq.s	Obj0B_Display
00012E46                            
00012E46                            Obj0B_Release:				; XREF: Obj0B_Action
00012E46 4228 0020                  		clr.b	$20(a0)
00012E4A 5428 0024                  		addq.b	#2,$24(a0)
00012E4E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012E52 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012E56 4228 0032                  		clr.b	$32(a0)
00012E5A 6000                       		bra.s	Obj0B_Display
00012E5C                            ; ===========================================================================
00012E5C                            
00012E5C                            Obj0B_Grab:				; XREF: Obj0B_Action
00012E5C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012E60 6700                       		beq.s	Obj0B_Display	; if not, branch
00012E62 43F8 D000                  		lea	($FFFFD000).w,a1
00012E66 3028 0008                  		move.w	8(a0),d0
00012E6A 0640 0014                  		addi.w	#$14,d0
00012E6E B069 0008                  		cmp.w	8(a1),d0
00012E72 6400                       		bcc.s	Obj0B_Display
00012E74 4228 0021                  		clr.b	$21(a0)
00012E78 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012E7E 6400                       		bcc.s	Obj0B_Display
00012E80 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012E84 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012E88 3028 0008                  		move.w	8(a0),d0
00012E8C 0640 0014                  		addi.w	#$14,d0
00012E90 3340 0008                  		move.w	d0,8(a1)
00012E94 08A9 0000 0022             		bclr	#0,$22(a1)
00012E9A 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012EA0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012EA6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012EAC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012EB2                            
00012EB2                            Obj0B_Display:				; XREF: Obj0B_Index
00012EB2 6000 E386                  		bra.w	MarkObjGone
00012EB6                            ; ===========================================================================
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            ; Sprite mappings - pole that breaks (LZ)
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            Map_obj0B:
00012EB6                            	include "_maps\obj0B.asm"
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            ; Sprite mappings - pole that breaks (LZ)
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6 0000                       		dc.w byte_11326-Map_obj0B
00012EB8 0000                       		dc.w byte_11331-Map_obj0B
00012EBA 02                         byte_11326:	dc.b 2			; normal pole
00012EBB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012EC0 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012EC5 04                         byte_11331:	dc.b 4			; broken pole
00012EC6 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012ECB F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012ED0 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012ED5 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012EDA                            		even
00012EDA                            		even
00012EDA                            
00012EDA                            ; ===========================================================================
00012EDA                            ; ---------------------------------------------------------------------------
00012EDA                            ; Object 0C - flapping door (LZ)
00012EDA                            ; ---------------------------------------------------------------------------
00012EDA                            
00012EDA                            Obj0C:					; XREF: Obj_Index
00012EDA 7000                       		moveq	#0,d0
00012EDC 1028 0024                  		move.b	$24(a0),d0
00012EE0 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012EE4 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012EE8                            ; ===========================================================================
00012EE8 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012EEA 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            Obj0C_Main:				; XREF: Obj0C_Index
00012EEC 5428 0024                  		addq.b	#2,$24(a0)
00012EF0 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012EF8 317C 4328 0002             		move.w	#$4328,2(a0)
00012EFE 0028 0004 0001             		ori.b	#4,1(a0)
00012F04 117C 0028 0019             		move.b	#$28,$19(a0)
00012F0A 7000                       		moveq	#0,d0
00012F0C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F10 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012F14 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012F18                            
00012F18                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012F18 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012F1C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012F1E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012F24 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012F2A 4A28 0001                  		tst.b	1(a0)
00012F2E 6A00                       		bpl.s	Obj0C_Solid
00012F30 303C 00BB                  		move.w	#$BB,d0
00012F34 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
00012F3A                            
00012F3A                            Obj0C_Solid:
00012F3A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012F40 6100 91F0                  		bsr.w	AnimateSprite
00012F44 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012F48 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012F4C 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012F4E 3038 D008                  		move.w	($FFFFD008).w,d0
00012F52 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012F56 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012F58 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012F5E 323C 0013                  		move.w	#$13,d1
00012F62 343C 0020                  		move.w	#$20,d2
00012F66 3602                       		move.w	d2,d3
00012F68 5243                       		addq.w	#1,d3
00012F6A 3828 0008                  		move.w	8(a0),d4
00012F6E 6100 E5F2                  		bsr.w	SolidObject	; make the door	solid
00012F72                            
00012F72                            Obj0C_Display:
00012F72 6000 E2C6                  		bra.w	MarkObjGone
00012F76                            ; ===========================================================================
00012F76                            Ani_obj0C:
00012F76                            	include "_anim\obj0C.asm"
00012F76                            ; ---------------------------------------------------------------------------
00012F76                            ; Animation script - flapping door (LZ)
00012F76                            ; ---------------------------------------------------------------------------
00012F76 0000                       		dc.w byte_113E6-Ani_obj0C
00012F78 0000                       		dc.w byte_113EC-Ani_obj0C
00012F7A 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012F80 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012F86                            		even
00012F86                            		even
00012F86                            
00012F86                            ; ---------------------------------------------------------------------------
00012F86                            ; Sprite mappings - flapping door (LZ)
00012F86                            ; ---------------------------------------------------------------------------
00012F86                            Map_obj0C:
00012F86                            	include "_maps\obj0C.asm"
00012F86                            ; ---------------------------------------------------------------------------
00012F86                            ; Sprite mappings - flapping door (LZ)
00012F86                            ; ---------------------------------------------------------------------------
00012F86 0000                       		dc.w byte_113F8-Map_obj0C
00012F88 0000                       		dc.w byte_11403-Map_obj0C
00012F8A 0000                       		dc.w byte_1140E-Map_obj0C
00012F8C 02                         byte_113F8:	dc.b 2
00012F8D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012F92 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012F97 02                         byte_11403:	dc.b 2
00012F98 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012F9D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012FA2 02                         byte_1140E:	dc.b 2
00012FA3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012FA8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012FAE 00                         		even
00012FAE 00                         		even
00012FAE                            
00012FAE                            ; ===========================================================================
00012FAE                            ; ---------------------------------------------------------------------------
00012FAE                            ; Object 71 - invisible	solid blocks
00012FAE                            ; ---------------------------------------------------------------------------
00012FAE                            
00012FAE                            Obj71:					; XREF: Obj_Index
00012FAE 7000                       		moveq	#0,d0
00012FB0 1028 0024                  		move.b	$24(a0),d0
00012FB4 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012FB8 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012FBC                            ; ===========================================================================
00012FBC 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012FBE 0000                       		dc.w Obj71_Solid-Obj71_Index
00012FC0                            ; ===========================================================================
00012FC0                            
00012FC0                            Obj71_Main:				; XREF: Obj71_Index
00012FC0 5428 0024                  		addq.b	#2,$24(a0)
00012FC4 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012FCC 317C 8680 0002             		move.w	#$8680,2(a0)
00012FD2 0028 0004 0001             		ori.b	#4,1(a0)
00012FD8 1028 0028                  		move.b	$28(a0),d0	; get object type
00012FDC 1200                       		move.b	d0,d1
00012FDE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012FE2 0640 0010                  		addi.w	#$10,d0
00012FE6 E248                       		lsr.w	#1,d0
00012FE8 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012FEC 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012FF0 5241                       		addq.w	#1,d1
00012FF2 E749                       		lsl.w	#3,d1
00012FF4 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012FF8                            
00012FF8                            Obj71_Solid:				; XREF: Obj71_Index
00012FF8 6100 C400                  		bsr.w	ChkObjOnScreen
00012FFC 6600                       		bne.s	Obj71_ChkDel
00012FFE 7200                       		moveq	#0,d1
00013000 1228 0019                  		move.b	$19(a0),d1
00013004 0641 000B                  		addi.w	#$B,d1
00013008 7400                       		moveq	#0,d2
0001300A 1428 0016                  		move.b	$16(a0),d2
0001300E 3602                       		move.w	d2,d3
00013010 5243                       		addq.w	#1,d3
00013012 3828 0008                  		move.w	8(a0),d4
00013016 6100 E592                  		bsr.w	SolidObject71
0001301A                            
0001301A                            Obj71_ChkDel:
0001301A 3028 0008                  		move.w	8(a0),d0
0001301E 0240 FF80                  		andi.w	#$FF80,d0
00013022 3238 F700                  		move.w	($FFFFF700).w,d1
00013026 0441 0080                  		subi.w	#$80,d1
0001302A 0241 FF80                  		andi.w	#$FF80,d1
0001302E 9041                       		sub.w	d1,d0
00013030 0C40 0280                  		cmpi.w	#$280,d0
00013034 6200                       		bhi.s	Obj71_Delete
00013036 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001303A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001303C 4EFA C142                  		jmp	DisplaySprite	; if yes, display the object
00013040                            ; ===========================================================================
00013040                            
00013040                            Obj71_NoDisplay:
00013040 4E75                       		rts	
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj71_Delete:
00013042 4EFA C178                  		jmp	DeleteObject
00013046                            ; ===========================================================================
00013046                            ; ---------------------------------------------------------------------------
00013046                            ; Sprite mappings - invisible solid blocks
00013046                            ; ---------------------------------------------------------------------------
00013046                            Map_obj71:
00013046                            	include "_maps\obj71.asm"
00013046                            ; ---------------------------------------------------------------------------
00013046                            ; Sprite mappings - invisible solid blocks
00013046                            ; ---------------------------------------------------------------------------
00013046 0000                       		dc.w byte_114BC-Map_obj71
00013048 0000                       		dc.w byte_114D1-Map_obj71
0001304A 0000                       		dc.w byte_114E6-Map_obj71
0001304C 04                         byte_114BC:	dc.b 4
0001304D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00013052 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00013057 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001305C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00013061 04                         byte_114D1:	dc.b 4
00013062 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00013067 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001306C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00013071 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00013076 04                         byte_114E6:	dc.b 4
00013077 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001307C E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00013081 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00013086 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001308C 00                         		even
0001308C 00                         		even
0001308C                            
0001308C                            ; ===========================================================================
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Object 5D - fans (SLZ)
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            
0001308C                            Obj5D:					; XREF: Obj_Index
0001308C 7000                       		moveq	#0,d0
0001308E 1028 0024                  		move.b	$24(a0),d0
00013092 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00013096 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001309A                            ; ===========================================================================
0001309A 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001309C 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001309E                            ; ===========================================================================
0001309E                            
0001309E                            Obj5D_Main:				; XREF: Obj5D_Index
0001309E 5428 0024                  		addq.b	#2,$24(a0)
000130A2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000130AA 317C 43A0 0002             		move.w	#$43A0,2(a0)
000130B0 0028 0004 0001             		ori.b	#4,1(a0)
000130B6 117C 0010 0019             		move.b	#$10,$19(a0)
000130BC 117C 0004 0018             		move.b	#4,$18(a0)
000130C2                            
000130C2                            Obj5D_Delay:				; XREF: Obj5D_Index
000130C2 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000130C8 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000130CA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000130CE 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000130D0 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000130D6 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000130DC 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000130DE 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000130E4                            
000130E4                            Obj5D_Blow:
000130E4 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000130E8 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000130EC 43F8 D000                  		lea	($FFFFD000).w,a1
000130F0 3029 0008                  		move.w	8(a1),d0
000130F4 9068 0008                  		sub.w	8(a0),d0
000130F8 0828 0000 0022             		btst	#0,$22(a0)
000130FE 6600                       		bne.s	Obj5D_ChkSonic
00013100 4440                       		neg.w	d0
00013102                            
00013102                            Obj5D_ChkSonic:
00013102 0640 0050                  		addi.w	#$50,d0
00013106 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001310A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001310C 3229 000C                  		move.w	$C(a1),d1
00013110 0641 0060                  		addi.w	#$60,d1
00013114 9268 000C                  		sub.w	$C(a0),d1
00013118 6500                       		bcs.s	Obj5D_Animate
0001311A 0C41 0070                  		cmpi.w	#$70,d1
0001311E 6400                       		bcc.s	Obj5D_Animate
00013120 0440 0050                  		subi.w	#$50,d0
00013124 6400                       		bcc.s	loc_1159A
00013126 4640                       		not.w	d0
00013128 D040                       		add.w	d0,d0
0001312A                            
0001312A                            loc_1159A:
0001312A 0640 0060                  		addi.w	#$60,d0
0001312E 0828 0000 0022             		btst	#0,$22(a0)
00013134 6600                       		bne.s	loc_115A8
00013136 4440                       		neg.w	d0
00013138                            
00013138                            loc_115A8:
00013138 4400                       		neg.b	d0
0001313A E840                       		asr.w	#4,d0
0001313C 0828 0000 0028             		btst	#0,$28(a0)
00013142 6700                       		beq.s	Obj5D_MoveSonic
00013144 4440                       		neg.w	d0
00013146                            
00013146                            Obj5D_MoveSonic:
00013146 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001314A                            
0001314A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001314A 5328 001E                  		subq.b	#1,$1E(a0)
0001314E 6A00                       		bpl.s	Obj5D_ChkDel
00013150 117C 0000 001E             		move.b	#0,$1E(a0)
00013156 5228 001B                  		addq.b	#1,$1B(a0)
0001315A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00013160 6500                       		bcs.s	loc_115D8
00013162 117C 0000 001B             		move.b	#0,$1B(a0)
00013168                            
00013168                            loc_115D8:
00013168 7000                       		moveq	#0,d0
0001316A 0828 0000 0028             		btst	#0,$28(a0)
00013170 6700                       		beq.s	loc_115E4
00013172 7002                       		moveq	#2,d0
00013174                            
00013174                            loc_115E4:
00013174 D028 001B                  		add.b	$1B(a0),d0
00013178 1140 001A                  		move.b	d0,$1A(a0)
0001317C                            
0001317C                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001317C 6100 C002                  		bsr.w	DisplaySprite
00013180 3028 0008                  		move.w	8(a0),d0
00013184 0240 FF80                  		andi.w	#$FF80,d0
00013188 3238 F700                  		move.w	($FFFFF700).w,d1
0001318C 0441 0080                  		subi.w	#$80,d1
00013190 0241 FF80                  		andi.w	#$FF80,d1
00013194 9041                       		sub.w	d1,d0
00013196 0C40 0280                  		cmpi.w	#$280,d0
0001319A 6200 C020                  		bhi.w	DeleteObject
0001319E 4E75                       		rts	
000131A0                            ; ===========================================================================
000131A0                            ; ---------------------------------------------------------------------------
000131A0                            ; Sprite mappings - fans (SLZ)
000131A0                            ; ---------------------------------------------------------------------------
000131A0                            Map_obj5D:
000131A0                            	include "_maps\obj5D.asm"
000131A0                            ; ---------------------------------------------------------------------------
000131A0                            ; Sprite mappings - fans (SLZ)
000131A0                            ; ---------------------------------------------------------------------------
000131A0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000131A4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000131A8 0000                       		dc.w byte_1161A-Map_obj5D
000131AA 02                         byte_1161A:	dc.b 2
000131AB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000131B0 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000131B5 02                         byte_11625:	dc.b 2
000131B6 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000131BB 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000131C0 02                         byte_11630:	dc.b 2
000131C1 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000131C6 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000131CC 00                         		even
000131CC 00                         		even
000131CC                            
000131CC                            ; ===========================================================================
000131CC                            ; ---------------------------------------------------------------------------
000131CC                            ; Object 5E - seesaws (SLZ)
000131CC                            ; ---------------------------------------------------------------------------
000131CC                            
000131CC                            Obj5E:					; XREF: Obj_Index
000131CC 7000                       		moveq	#0,d0
000131CE 1028 0024                  		move.b	$24(a0),d0
000131D2 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000131D6 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000131DA 3028 0030                  		move.w	$30(a0),d0
000131DE 0240 FF80                  		andi.w	#$FF80,d0
000131E2 3238 F700                  		move.w	($FFFFF700).w,d1
000131E6 0441 0080                  		subi.w	#$80,d1
000131EA 0241 FF80                  		andi.w	#$FF80,d1
000131EE 9041                       		sub.w	d1,d0
000131F0 6B00 BFCA                  		bmi.w	DeleteObject
000131F4 0C40 0280                  		cmpi.w	#$280,d0
000131F8 6200 BFC2                  		bhi.w	DeleteObject
000131FC 6000 BF82                  		bra.w	DisplaySprite
00013200                            ; ===========================================================================
00013200 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00013202 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00013204 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00013206 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00013208 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001320A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001320C                            ; ===========================================================================
0001320C                            
0001320C                            Obj5E_Main:				; XREF: Obj5E_Index
0001320C 5428 0024                  		addq.b	#2,$24(a0)
00013210 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00013218 317C 0374 0002             		move.w	#$374,2(a0)
0001321E 0028 0004 0001             		ori.b	#4,1(a0)
00013224 117C 0004 0018             		move.b	#4,$18(a0)
0001322A 117C 0030 0019             		move.b	#$30,$19(a0)
00013230 3168 0008 0030             		move.w	8(a0),$30(a0)
00013236 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001323A 6600                       		bne.s	loc_116D2	; if not, branch
0001323C 6100 C3EC                  		bsr.w	SingleObjLoad2
00013240 6600                       		bne.s	loc_116D2
00013242 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013246 5C29 0024                  		addq.b	#6,$24(a1)
0001324A 3368 0008 0008             		move.w	8(a0),8(a1)
00013250 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013256 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001325C 2348 003C                  		move.l	a0,$3C(a1)
00013260                            
00013260                            loc_116D2:
00013260 0828 0000 0022             		btst	#0,$22(a0)
00013266 6700                       		beq.s	loc_116E0
00013268 117C 0002 001A             		move.b	#2,$1A(a0)
0001326E                            
0001326E                            loc_116E0:
0001326E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00013274                            
00013274                            Obj5E_Slope:				; XREF: Obj5E_Index
00013274 1228 003A                  		move.b	$3A(a0),d1
00013278 6100 0000                  		bsr.w	loc_11766
0001327C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013282 0828 0000 001A             		btst	#0,$1A(a0)
00013288 6700                       		beq.s	loc_11702
0001328A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013290                            
00013290                            loc_11702:
00013290 43F8 D000                  		lea	($FFFFD000).w,a1
00013294 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001329A 323C 0030                  		move.w	#$30,d1
0001329E 4EB9 0000 8F10             		jsr	(SlopeObject).l
000132A4 4E75                       		rts	
000132A6                            ; ===========================================================================
000132A6                            
000132A6                            Obj5E_Slope2:				; XREF: Obj5E_Index
000132A6 6100 0000                  		bsr.w	loc_1174A
000132AA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000132B0 0828 0000 001A             		btst	#0,$1A(a0)
000132B6 6700                       		beq.s	loc_11730
000132B8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000132BE                            
000132BE                            loc_11730:
000132BE 323C 0030                  		move.w	#$30,d1
000132C2 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
000132C8 323C 0030                  		move.w	#$30,d1
000132CC 3428 0008                  		move.w	8(a0),d2
000132D0 4EB9 0000 9F0E             		jsr	SlopeObject2
000132D6 4E75                       		rts	
000132D8                            ; ===========================================================================
000132D8                            
000132D8                            loc_1174A:				; XREF: Obj5E_Slope2
000132D8 7202                       		moveq	#2,d1
000132DA 43F8 D000                  		lea	($FFFFD000).w,a1
000132DE 3028 0008                  		move.w	8(a0),d0
000132E2 9069 0008                  		sub.w	8(a1),d0
000132E6 6400                       		bcc.s	loc_1175E
000132E8 4440                       		neg.w	d0
000132EA 7200                       		moveq	#0,d1
000132EC                            
000132EC                            loc_1175E:
000132EC 0C40 0008                  		cmpi.w	#8,d0
000132F0 6400                       		bcc.s	loc_11766
000132F2 7201                       		moveq	#1,d1
000132F4                            
000132F4                            loc_11766:
000132F4 1028 001A                  		move.b	$1A(a0),d0
000132F8 B001                       		cmp.b	d1,d0
000132FA 6700                       		beq.s	locret_11790
000132FC 6400                       		bcc.s	loc_11772
000132FE 5400                       		addq.b	#2,d0
00013300                            
00013300                            loc_11772:
00013300 5300                       		subq.b	#1,d0
00013302 1140 001A                  		move.b	d0,$1A(a0)
00013306 1141 003A                  		move.b	d1,$3A(a0)
0001330A 08A8 0000 0001             		bclr	#0,1(a0)
00013310 0828 0001 001A             		btst	#1,$1A(a0)
00013316 6700                       		beq.s	locret_11790
00013318 08E8 0000 0001             		bset	#0,1(a0)
0001331E                            
0001331E                            locret_11790:
0001331E 4E75                       		rts	
00013320                            ; ===========================================================================
00013320                            
00013320                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00013320 5428 0024                  		addq.b	#2,$24(a0)
00013324 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001332C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013332 0028 0004 0001             		ori.b	#4,1(a0)
00013338 117C 0004 0018             		move.b	#4,$18(a0)
0001333E 117C 008B 0020             		move.b	#$8B,$20(a0)
00013344 117C 000C 0019             		move.b	#$C,$19(a0)
0001334A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013350 0668 0028 0008             		addi.w	#$28,8(a0)
00013356 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001335C 117C 0001 001A             		move.b	#1,$1A(a0)
00013362 0828 0000 0022             		btst	#0,$22(a0)
00013368 6700                       		beq.s	Obj5E_MoveSpike
0001336A 0468 0050 0008             		subi.w	#$50,8(a0)
00013370 117C 0002 003A             		move.b	#2,$3A(a0)
00013376                            
00013376                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00013376 2268 003C                  		movea.l	$3C(a0),a1
0001337A 7000                       		moveq	#0,d0
0001337C 1028 003A                  		move.b	$3A(a0),d0
00013380 9029 003A                  		sub.b	$3A(a1),d0
00013384 6700                       		beq.s	loc_1183E
00013386 6400                       		bcc.s	loc_117FC
00013388 4400                       		neg.b	d0
0001338A                            
0001338A                            loc_117FC:
0001338A 323C F7E8                  		move.w	#-$818,d1
0001338E 343C FEEC                  		move.w	#-$114,d2
00013392 0C00 0001                  		cmpi.b	#1,d0
00013396 6700                       		beq.s	loc_11822
00013398 323C F510                  		move.w	#-$AF0,d1
0001339C 343C FF34                  		move.w	#-$CC,d2
000133A0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000133A6 6D00                       		blt.s	loc_11822
000133A8 323C F200                  		move.w	#-$E00,d1
000133AC 343C FF60                  		move.w	#-$A0,d2
000133B0                            
000133B0                            loc_11822:
000133B0 3141 0012                  		move.w	d1,$12(a0)
000133B4 3142 0010                  		move.w	d2,$10(a0)
000133B8 3028 0008                  		move.w	8(a0),d0
000133BC 9068 0030                  		sub.w	$30(a0),d0
000133C0 6400                       		bcc.s	loc_11838
000133C2 4468 0010                  		neg.w	$10(a0)
000133C6                            
000133C6                            loc_11838:
000133C6 5428 0024                  		addq.b	#2,$24(a0)
000133CA 6000                       		bra.s	Obj5E_SpikeFall
000133CC                            ; ===========================================================================
000133CC                            
000133CC                            loc_1183E:				; XREF: Obj5E_MoveSpike
000133CC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000133D2 7000                       		moveq	#0,d0
000133D4 1029 001A                  		move.b	$1A(a1),d0
000133D8 343C 0028                  		move.w	#$28,d2
000133DC 3228 0008                  		move.w	8(a0),d1
000133E0 9268 0030                  		sub.w	$30(a0),d1
000133E4 6400                       		bcc.s	loc_1185C
000133E6 4442                       		neg.w	d2
000133E8 5440                       		addq.w	#2,d0
000133EA                            
000133EA                            loc_1185C:
000133EA D040                       		add.w	d0,d0
000133EC 3228 0034                  		move.w	$34(a0),d1
000133F0 D272 0000                  		add.w	(a2,d0.w),d1
000133F4 3141 000C                  		move.w	d1,$C(a0)
000133F8 D468 0030                  		add.w	$30(a0),d2
000133FC 3142 0008                  		move.w	d2,8(a0)
00013400 4268 000E                  		clr.w	$E(a0)
00013404 4268 000A                  		clr.w	$A(a0)
00013408 4E75                       		rts	
0001340A                            ; ===========================================================================
0001340A                            
0001340A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001340A 4A68 0012                  		tst.w	$12(a0)
0001340E 6A00                       		bpl.s	loc_1189A
00013410 6100 BD34                  		bsr.w	ObjectFall
00013414 3028 0034                  		move.w	$34(a0),d0
00013418 0440 002F                  		subi.w	#$2F,d0
0001341C B068 000C                  		cmp.w	$C(a0),d0
00013420 6E00                       		bgt.s	locret_11898
00013422 6100 BD22                  		bsr.w	ObjectFall
00013426                            
00013426                            locret_11898:
00013426 4E75                       		rts	
00013428                            ; ===========================================================================
00013428                            
00013428                            loc_1189A:				; XREF: Obj5E_SpikeFall
00013428 6100 BD1C                  		bsr.w	ObjectFall
0001342C 2268 003C                  		movea.l	$3C(a0),a1
00013430 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013436 7000                       		moveq	#0,d0
00013438 1029 001A                  		move.b	$1A(a1),d0
0001343C 3228 0008                  		move.w	8(a0),d1
00013440 9268 0030                  		sub.w	$30(a0),d1
00013444 6400                       		bcc.s	loc_118BA
00013446 5440                       		addq.w	#2,d0
00013448                            
00013448                            loc_118BA:
00013448 D040                       		add.w	d0,d0
0001344A 3228 0034                  		move.w	$34(a0),d1
0001344E D272 0000                  		add.w	(a2,d0.w),d1
00013452 B268 000C                  		cmp.w	$C(a0),d1
00013456 6E00                       		bgt.s	locret_11938
00013458 2268 003C                  		movea.l	$3C(a0),a1
0001345C 7202                       		moveq	#2,d1
0001345E 4A68 0010                  		tst.w	$10(a0)
00013462 6B00                       		bmi.s	Obj5E_Spring
00013464 7200                       		moveq	#0,d1
00013466                            
00013466                            Obj5E_Spring:
00013466 1341 003A                  		move.b	d1,$3A(a1)
0001346A 1141 003A                  		move.b	d1,$3A(a0)
0001346E B229 001A                  		cmp.b	$1A(a1),d1
00013472 6700                       		beq.s	loc_1192C
00013474 08A9 0003 0022             		bclr	#3,$22(a1)
0001347A 6700                       		beq.s	loc_1192C
0001347C 4229 0025                  		clr.b	$25(a1)
00013480 137C 0002 0024             		move.b	#2,$24(a1)
00013486 45F8 D000                  		lea	($FFFFD000).w,a2
0001348A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013490 446A 0012                  		neg.w	$12(a2)
00013494 08EA 0001 0022             		bset	#1,$22(a2)
0001349A 08AA 0003 0022             		bclr	#3,$22(a2)
000134A0 422A 003C                  		clr.b	$3C(a2)
000134A4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000134AA 157C 0002 0024             		move.b	#2,$24(a2)
000134B0 303C 00CC                  		move.w	#$CC,d0
000134B4 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play spring sound
000134BA                            
000134BA                            loc_1192C:
000134BA 4268 0010                  		clr.w	$10(a0)
000134BE 4268 0012                  		clr.w	$12(a0)
000134C2 5528 0024                  		subq.b	#2,$24(a0)
000134C6                            
000134C6                            locret_11938:
000134C6 4E75                       		rts	
000134C8                            ; ===========================================================================
000134C8 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000134D2                            
000134D2                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00013502                            		even
00013502                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013532                            		even
00013532                            ; ---------------------------------------------------------------------------
00013532                            ; Sprite mappings - seesaws (SLZ)
00013532                            ; ---------------------------------------------------------------------------
00013532                            Map_obj5E:
00013532                            	include "_maps\obj5E.asm"
00013532                            ; ---------------------------------------------------------------------------
00013532                            ; Sprite mappings - seesaws (SLZ)
00013532                            ; ---------------------------------------------------------------------------
00013532 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013536 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001353A 07                         byte_119AC:	dc.b 7
0001353B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013540 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013545 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001354A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001354F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013554 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013559 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001355E 04                         byte_119D0:	dc.b 4
0001355F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013564 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013569 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001356E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013574 00                         		even
00013574 00                         		even
00013574                            
00013574                            ; ---------------------------------------------------------------------------
00013574                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013574                            ; ---------------------------------------------------------------------------
00013574                            Map_obj5Ea:
00013574                            	include "_maps\obj5Eballs.asm"
00013574                            ; ---------------------------------------------------------------------------
00013574                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013574                            ; ---------------------------------------------------------------------------
00013574 0000                       		dc.w byte_119EA-Map_obj5Ea
00013576 0000                       		dc.w byte_119F0-Map_obj5Ea
00013578 01                         byte_119EA:	dc.b 1
00013579 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001357E 01                         byte_119F0:	dc.b 1
0001357F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013584                            		even
00013584                            		even
00013584                            
00013584                            ; ===========================================================================
00013584                            ; ---------------------------------------------------------------------------
00013584                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013584                            ; ---------------------------------------------------------------------------
00013584                            
00013584                            Obj5F:					; XREF: Obj_Index
00013584 7000                       		moveq	#0,d0
00013586 1028 0024                  		move.b	$24(a0),d0
0001358A 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001358E 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00013592                            ; ===========================================================================
00013592 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00013594 0000                       		dc.w Obj5F_Action-Obj5F_Index
00013596 0000                       		dc.w Obj5F_Display-Obj5F_Index
00013598 0000                       		dc.w Obj5F_End-Obj5F_Index
0001359A                            ; ===========================================================================
0001359A                            
0001359A                            Obj5F_Main:				; XREF: Obj5F_Index
0001359A 5428 0024                  		addq.b	#2,$24(a0)
0001359E 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000135A6 317C 0400 0002             		move.w	#$400,2(a0)
000135AC 0028 0004 0001             		ori.b	#4,1(a0)
000135B2 117C 0003 0018             		move.b	#3,$18(a0)
000135B8 117C 000C 0019             		move.b	#$C,$19(a0)
000135BE 1028 0028                  		move.b	$28(a0),d0
000135C2 6700                       		beq.s	loc_11A3C
000135C4 1140 0024                  		move.b	d0,$24(a0)
000135C8 4E75                       		rts	
000135CA                            ; ===========================================================================
000135CA                            
000135CA                            loc_11A3C:
000135CA 117C 009A 0020             		move.b	#$9A,$20(a0)
000135D0 0868 0000 0022             		bchg	#0,$22(a0)
000135D6                            
000135D6                            Obj5F_Action:				; XREF: Obj5F_Index
000135D6 7000                       		moveq	#0,d0
000135D8 1028 0025                  		move.b	$25(a0),d0
000135DC 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000135E0 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000135E4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000135EA 6100 8B46                  		bsr.w	AnimateSprite
000135EE 6000 DC4A                  		bra.w	MarkObjGone
000135F2                            ; ===========================================================================
000135F2 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000135F4 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000135F6 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000135F8                            ; ===========================================================================
000135F8                            
000135F8                            Obj5F_Walk:				; XREF: Obj5F_Index2
000135F8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000135FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013600 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00013602 5428 0025                  		addq.b	#2,$25(a0)
00013606 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001360C 317C 0010 0010             		move.w	#$10,$10(a0)
00013612 117C 0001 001C             		move.b	#1,$1C(a0)
00013618 0868 0000 0022             		bchg	#0,$22(a0)
0001361E 6700                       		beq.s	locret_11A96
00013620 4468 0010                  		neg.w	$10(a0)		; change direction
00013624                            
00013624                            locret_11A96:
00013624 4E75                       		rts	
00013626                            ; ===========================================================================
00013626                            
00013626                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013626 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001362A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001362E 6B00                       		bmi.s	loc_11AA8
00013630 6100 BB34                  		bsr.w	SpeedToPos
00013634 4E75                       		rts	
00013636                            ; ===========================================================================
00013636                            
00013636                            loc_11AA8:
00013636 5528 0025                  		subq.b	#2,$25(a0)
0001363A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00013640 4268 0010                  		clr.w	$10(a0)		; stop walking
00013644 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001364A 4E75                       		rts	
0001364C                            ; ===========================================================================
0001364C                            
0001364C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001364C 5368 0030                  		subq.w	#1,$30(a0)
00013650 6A00                       		bpl.s	locret_11AD0
00013652 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013656 117C 0000 0024             		move.b	#0,$24(a0)
0001365C                            
0001365C                            locret_11AD0:
0001365C 4E75                       		rts	
0001365E                            ; ===========================================================================
0001365E                            
0001365E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001365E 3038 D008                  		move.w	($FFFFD008).w,d0
00013662 9068 0008                  		sub.w	8(a0),d0
00013666 6400                       		bcc.s	loc_11ADE
00013668 4440                       		neg.w	d0
0001366A                            
0001366A                            loc_11ADE:
0001366A 0C40 0060                  		cmpi.w	#$60,d0
0001366E 6400                       		bcc.s	locret_11B5E
00013670 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013674 9068 000C                  		sub.w	$C(a0),d0
00013678 6400                       		bcc.s	Obj5F_MakeFuse
0001367A 4440                       		neg.w	d0
0001367C                            
0001367C                            Obj5F_MakeFuse:
0001367C 0C40 0060                  		cmpi.w	#$60,d0
00013680 6400                       		bcc.s	locret_11B5E
00013682 4A78 FE08                  		tst.w	($FFFFFE08).w
00013686 6600                       		bne.s	locret_11B5E
00013688 117C 0004 0025             		move.b	#4,$25(a0)
0001368E 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00013694 4268 0010                  		clr.w	$10(a0)
00013698 117C 0002 001C             		move.b	#2,$1C(a0)
0001369E 6100 BF8A                  		bsr.w	SingleObjLoad2
000136A2 6600                       		bne.s	locret_11B5E
000136A4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000136A8 3368 0008 0008             		move.w	8(a0),8(a1)
000136AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000136B4 3368 000C 0034             		move.w	$C(a0),$34(a1)
000136BA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000136C0 137C 0004 0028             		move.b	#4,$28(a1)
000136C6 137C 0003 001C             		move.b	#3,$1C(a1)
000136CC 337C 0010 0012             		move.w	#$10,$12(a1)
000136D2 0828 0001 0022             		btst	#1,$22(a0)
000136D8 6700                       		beq.s	loc_11B54
000136DA 4469 0012                  		neg.w	$12(a1)
000136DE                            
000136DE                            loc_11B54:
000136DE 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000136E4 2348 003C                  		move.l	a0,$3C(a1)
000136E8                            
000136E8                            locret_11B5E:
000136E8 4E75                       		rts	
000136EA                            ; ===========================================================================
000136EA                            
000136EA                            Obj5F_Display:				; XREF: Obj5F_Index
000136EA 6100                       		bsr.s	loc_11B70
000136EC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000136F2 6100 8A3E                  		bsr.w	AnimateSprite
000136F6 6000 DB42                  		bra.w	MarkObjGone
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            loc_11B70:
000136FA 5368 0030                  		subq.w	#1,$30(a0)
000136FE 6B00                       		bmi.s	loc_11B7C
00013700 6100 BA64                  		bsr.w	SpeedToPos
00013704 4E75                       		rts	
00013706                            ; ===========================================================================
00013706                            
00013706                            loc_11B7C:
00013706 4268 0030                  		clr.w	$30(a0)
0001370A 4228 0024                  		clr.b	$24(a0)
0001370E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00013714 7203                       		moveq	#3,d1
00013716 2248                       		movea.l	a0,a1
00013718 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001371E 6000                       		bra.s	Obj5F_MakeShrap
00013720                            ; ===========================================================================
00013720                            
00013720                            Obj5F_Loop:
00013720 6100 BF08                  		bsr.w	SingleObjLoad2
00013724 6600                       		bne.s	loc_11BCE
00013726                            
00013726                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013726 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001372A 3368 0008 0008             		move.w	8(a0),8(a1)
00013730 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013736 137C 0006 0028             		move.b	#6,$28(a1)
0001373C 137C 0004 001C             		move.b	#4,$1C(a1)
00013742 335A 0010                  		move.w	(a2)+,$10(a1)
00013746 335A 0012                  		move.w	(a2)+,$12(a1)
0001374A 137C 0098 0020             		move.b	#$98,$20(a1)
00013750 08E9 0007 0001             		bset	#7,1(a1)
00013756                            
00013756                            loc_11BCE:
00013756 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001375A                            
0001375A 117C 0006 0024             		move.b	#6,$24(a0)
00013760                            
00013760                            Obj5F_End:				; XREF: Obj5F_Index
00013760 6100 BA04                  		bsr.w	SpeedToPos
00013764 0668 0018 0012             		addi.w	#$18,$12(a0)
0001376A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013770 6100 89C0                  		bsr.w	AnimateSprite
00013774 4A28 0001                  		tst.b	1(a0)
00013778 6A00 BA42                  		bpl.w	DeleteObject
0001377C 6000 BA02                  		bra.w	DisplaySprite
00013780                            ; ===========================================================================
00013780 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013790                            
00013790                            Ani_obj5F:
00013790                            	include "_anim\obj5F.asm"
00013790                            ; ---------------------------------------------------------------------------
00013790                            ; Animation script - Bomb enemy
00013790                            ; ---------------------------------------------------------------------------
00013790 0000                       		dc.w byte_11C12-Ani_obj5F
00013792 0000                       		dc.w byte_11C16-Ani_obj5F
00013794 0000                       		dc.w byte_11C1C-Ani_obj5F
00013796 0000                       		dc.w byte_11C20-Ani_obj5F
00013798 0000                       		dc.w byte_11C24-Ani_obj5F
0001379A 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001379E 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000137A4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000137A8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000137AC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000137B0                            		even
000137B0                            		even
000137B0                            
000137B0                            ; ---------------------------------------------------------------------------
000137B0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000137B0                            ; ---------------------------------------------------------------------------
000137B0                            Map_obj5F:
000137B0                            	include "_maps\obj5F.asm"
000137B0                            ; ---------------------------------------------------------------------------
000137B0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000137B0                            ; ---------------------------------------------------------------------------
000137B0 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000137B4 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000137B8 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000137BC 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000137C0 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000137C4 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000137C8 03                         byte_11C40:	dc.b 3
000137C9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000137CE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137D3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137D8 03                         byte_11C50:	dc.b 3
000137D9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137DE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137E3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137E8 03                         byte_11C60:	dc.b 3
000137E9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000137EE 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000137F3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000137F8 03                         byte_11C70:	dc.b 3
000137F9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137FE 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013803 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013808 03                         byte_11C80:	dc.b 3
00013809 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001380E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013813 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013818 03                         byte_11C90:	dc.b 3
00013819 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001381E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013823 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013828 02                         byte_11CA0:	dc.b 2
00013829 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001382E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013833 02                         byte_11CAB:	dc.b 2
00013834 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013839 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001383E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001383F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00013844 01                         byte_11CBC:	dc.b 1			; fuse
00013845 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001384A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001384B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013850 01                         byte_11CC8:	dc.b 1			; fireball
00013851 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013856                            		even
00013856                            		even
00013856                            
00013856                            ; ===========================================================================
00013856                            ; ---------------------------------------------------------------------------
00013856                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013856                            ; ---------------------------------------------------------------------------
00013856                            
00013856                            Obj60:					; XREF: Obj_Index
00013856 7000                       		moveq	#0,d0
00013858 1028 0024                  		move.b	$24(a0),d0
0001385C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013860 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00013864                            ; ===========================================================================
00013864 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00013866 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00013868 0000                       		dc.w Obj60_Display-Obj60_Index
0001386A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001386C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            Obj60_Main:				; XREF: Obj60_Index
0001386E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00013876 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001387C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013882 6700                       		beq.s	loc_11D02
00013884 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001388A                            
0001388A                            loc_11D02:
0001388A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013890 6600                       		bne.s	loc_11D10
00013892 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00013898                            
00013898                            loc_11D10:
00013898 0028 0004 0001             		ori.b	#4,1(a0)
0001389E 117C 0004 0018             		move.b	#4,$18(a0)
000138A4 117C 000B 0020             		move.b	#$B,$20(a0)
000138AA 117C 000C 0019             		move.b	#$C,$19(a0)
000138B0 7400                       		moveq	#0,d2
000138B2 45E8 0037                  		lea	$37(a0),a2
000138B6 264A                       		movea.l	a2,a3
000138B8 524A                       		addq.w	#1,a2
000138BA 7203                       		moveq	#3,d1
000138BC                            
000138BC                            Obj60_MakeOrbs:
000138BC 6100 BD6C                  		bsr.w	SingleObjLoad2
000138C0 6600                       		bne.s	loc_11D90
000138C2 5213                       		addq.b	#1,(a3)
000138C4 3A09                       		move.w	a1,d5
000138C6 0445 D000                  		subi.w	#-$3000,d5
000138CA EC4D                       		lsr.w	#6,d5
000138CC 0245 007F                  		andi.w	#$7F,d5
000138D0 14C5                       		move.b	d5,(a2)+
000138D2 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000138D4 137C 0006 0024             		move.b	#6,$24(a1)
000138DA 2368 0004 0004             		move.l	4(a0),4(a1)
000138E0 3368 0002 0002             		move.w	2(a0),2(a1)
000138E6 0029 0004 0001             		ori.b	#4,1(a1)
000138EC 137C 0004 0018             		move.b	#4,$18(a1)
000138F2 137C 0008 0019             		move.b	#8,$19(a1)
000138F8 137C 0003 001A             		move.b	#3,$1A(a1)
000138FE 137C 0098 0020             		move.b	#$98,$20(a1)
00013904 1342 0026                  		move.b	d2,$26(a1)
00013908 0602 0040                  		addi.b	#$40,d2
0001390C 2348 003C                  		move.l	a0,$3C(a1)
00013910 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00013914                            
00013914                            loc_11D90:
00013914 7001                       		moveq	#1,d0
00013916 0828 0000 0022             		btst	#0,$22(a0)
0001391C 6700                       		beq.s	Obj60_Move
0001391E 4440                       		neg.w	d0
00013920                            
00013920                            Obj60_Move:
00013920 1140 0036                  		move.b	d0,$36(a0)
00013924 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001392A 5428 0024                  		addq.b	#2,$24(a0)
0001392E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013934 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001393A 6700                       		beq.s	locret_11DBC	; if not, branch
0001393C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013940                            
00013940                            locret_11DBC:
00013940 4E75                       		rts	
00013942                            ; ===========================================================================
00013942                            
00013942                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013942 3038 D008                  		move.w	($FFFFD008).w,d0
00013946 9068 0008                  		sub.w	8(a0),d0
0001394A 6400                       		bcc.s	loc_11DCA
0001394C 4440                       		neg.w	d0
0001394E                            
0001394E                            loc_11DCA:
0001394E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013952 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013954 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013958 9068 000C                  		sub.w	$C(a0),d0
0001395C 6400                       		bcc.s	loc_11DDC
0001395E 4440                       		neg.w	d0
00013960                            
00013960                            loc_11DDC:
00013960 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013964 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013966 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001396A 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001396C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013972                            
00013972                            Obj60_Animate:
00013972 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00013978 6100 87B8                  		bsr.w	AnimateSprite
0001397C 6000 0000                  		bra.w	Obj60_ChkDel
00013980                            ; ===========================================================================
00013980                            
00013980                            Obj60_Display:				; XREF: Obj60_Index
00013980 6100 B7E4                  		bsr.w	SpeedToPos
00013984                            
00013984                            Obj60_ChkDel:				; XREF: Obj60_Animate
00013984 3028 0008                  		move.w	8(a0),d0
00013988 0240 FF80                  		andi.w	#$FF80,d0
0001398C 3238 F700                  		move.w	($FFFFF700).w,d1
00013990 0441 0080                  		subi.w	#$80,d1
00013994 0241 FF80                  		andi.w	#$FF80,d1
00013998 9041                       		sub.w	d1,d0
0001399A 0C40 0280                  		cmpi.w	#$280,d0
0001399E 6200 0000                  		bhi.w	Obj60_ChkGone
000139A2 6000 B7DC                  		bra.w	DisplaySprite
000139A6                            ; ===========================================================================
000139A6                            
000139A6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000139A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000139AA 7000                       		moveq	#0,d0
000139AC 1028 0023                  		move.b	$23(a0),d0
000139B0 6700                       		beq.s	loc_11E34
000139B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000139B8                            
000139B8                            loc_11E34:
000139B8 45E8 0037                  		lea	$37(a0),a2
000139BC 7400                       		moveq	#0,d2
000139BE 141A                       		move.b	(a2)+,d2
000139C0 5342                       		subq.w	#1,d2
000139C2 6500                       		bcs.s	Obj60_Delete
000139C4                            
000139C4                            loc_11E40:
000139C4 7000                       		moveq	#0,d0
000139C6 101A                       		move.b	(a2)+,d0
000139C8 ED48                       		lsl.w	#6,d0
000139CA 0680 00FF D000             		addi.l	#$FFD000,d0
000139D0 2240                       		movea.l	d0,a1
000139D2 6100 B7EA                  		bsr.w	DeleteObject2
000139D6 51CA FFEC                  		dbf	d2,loc_11E40
000139DA                            
000139DA                            Obj60_Delete:
000139DA 6000 B7E0                  		bra.w	DeleteObject
000139DE                            ; ===========================================================================
000139DE                            
000139DE                            Obj60_MoveOrb:				; XREF: Obj60_Index
000139DE 2268 003C                  		movea.l	$3C(a0),a1
000139E2 0C11 0060                  		cmpi.b	#$60,0(a1)
000139E6 6600 B7D4                  		bne.w	DeleteObject
000139EA 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000139F0 6600                       		bne.s	Obj60_Circle
000139F2 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000139F8 6600                       		bne.s	Obj60_Circle
000139FA 5428 0024                  		addq.b	#2,$24(a0)
000139FE 5329 0037                  		subq.b	#1,$37(a1)
00013A02 6600                       		bne.s	Obj60_FireOrb
00013A04 5429 0024                  		addq.b	#2,$24(a1)
00013A08                            
00013A08                            Obj60_FireOrb:
00013A08 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013A0E 0829 0000 0022             		btst	#0,$22(a1)
00013A14 6700                       		beq.s	Obj60_Display2
00013A16 4468 0010                  		neg.w	$10(a0)
00013A1A                            
00013A1A                            Obj60_Display2:
00013A1A 6000 B764                  		bra.w	DisplaySprite
00013A1E                            ; ===========================================================================
00013A1E                            
00013A1E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00013A1E 1028 0026                  		move.b	$26(a0),d0
00013A22 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013A28 E841                       		asr.w	#4,d1
00013A2A D269 0008                  		add.w	8(a1),d1
00013A2E 3141 0008                  		move.w	d1,8(a0)
00013A32 E840                       		asr.w	#4,d0
00013A34 D069 000C                  		add.w	$C(a1),d0
00013A38 3140 000C                  		move.w	d0,$C(a0)
00013A3C 1029 0036                  		move.b	$36(a1),d0
00013A40 D128 0026                  		add.b	d0,$26(a0)
00013A44 6000 B73A                  		bra.w	DisplaySprite
00013A48                            ; ===========================================================================
00013A48                            
00013A48                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013A48 6100 B71C                  		bsr.w	SpeedToPos
00013A4C 4A28 0001                  		tst.b	1(a0)
00013A50 6A00 B76A                  		bpl.w	DeleteObject
00013A54 6000 B72A                  		bra.w	DisplaySprite
00013A58                            ; ===========================================================================
00013A58                            Ani_obj60:
00013A58                            	include "_anim\obj60.asm"
00013A58                            ; ---------------------------------------------------------------------------
00013A58                            ; Animation script - Orbinaut enemy
00013A58                            ; ---------------------------------------------------------------------------
00013A58 0000                       		dc.w byte_11EDA-Ani_obj60
00013A5A 0000                       		dc.w byte_11EDE-Ani_obj60
00013A5C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013A60 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013A66                            		even
00013A66                            		even
00013A66                            
00013A66                            ; ---------------------------------------------------------------------------
00013A66                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A66                            ; ---------------------------------------------------------------------------
00013A66                            Map_obj60:
00013A66                            	include "_maps\obj60.asm"
00013A66                            ; ---------------------------------------------------------------------------
00013A66                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A66                            ; ---------------------------------------------------------------------------
00013A66 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013A6A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013A6E 01                         byte_11EEC:	dc.b 1
00013A6F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013A74 01                         byte_11EF2:	dc.b 1
00013A75 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013A7A 01                         byte_11EF8:	dc.b 1
00013A7B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013A80 01                         byte_11EFE:	dc.b 1
00013A81 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013A86                            		even
00013A86                            		even
00013A86                            
00013A86                            ; ===========================================================================
00013A86                            ; ---------------------------------------------------------------------------
00013A86                            ; Object 16 - harpoon (LZ)
00013A86                            ; ---------------------------------------------------------------------------
00013A86                            
00013A86                            Obj16:					; XREF: Obj_Index
00013A86 7000                       		moveq	#0,d0
00013A88 1028 0024                  		move.b	$24(a0),d0
00013A8C 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013A90 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013A94                            ; ===========================================================================
00013A94 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013A96 0000                       		dc.w Obj16_Move-Obj16_Index
00013A98 0000                       		dc.w Obj16_Wait-Obj16_Index
00013A9A                            ; ===========================================================================
00013A9A                            
00013A9A                            Obj16_Main:				; XREF: Obj16_Index
00013A9A 5428 0024                  		addq.b	#2,$24(a0)
00013A9E 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013AA6 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013AAC 0028 0004 0001             		ori.b	#4,1(a0)
00013AB2 117C 0004 0018             		move.b	#4,$18(a0)
00013AB8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013ABE 117C 0014 0019             		move.b	#$14,$19(a0)
00013AC4 317C 003C 0030             		move.w	#60,$30(a0)
00013ACA                            
00013ACA                            Obj16_Move:				; XREF: Obj16_Index
00013ACA 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013AD0 6100 8660                  		bsr.w	AnimateSprite
00013AD4 7000                       		moveq	#0,d0
00013AD6 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013ADA 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013AE0 6000 D758                  		bra.w	MarkObjGone
00013AE4                            ; ===========================================================================
00013AE4 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013AEA                            ; ===========================================================================
00013AEA                            
00013AEA                            Obj16_Wait:				; XREF: Obj16_Index
00013AEA 5368 0030                  		subq.w	#1,$30(a0)
00013AEE 6A00                       		bpl.s	Obj16_ChkDel
00013AF0 317C 003C 0030             		move.w	#60,$30(a0)
00013AF6 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013AFA 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013B00                            
00013B00                            Obj16_ChkDel:
00013B00 6000 D738                  		bra.w	MarkObjGone
00013B04                            ; ===========================================================================
00013B04                            Ani_obj16:
00013B04                            	include "_anim\obj16.asm"
00013B04                            ; ---------------------------------------------------------------------------
00013B04                            ; Animation script - harpoon (LZ)
00013B04                            ; ---------------------------------------------------------------------------
00013B04 0000                       		dc.w byte_11F8A-Ani_obj16
00013B06 0000                       		dc.w byte_11F8E-Ani_obj16
00013B08 0000                       		dc.w byte_11F92-Ani_obj16
00013B0A 0000                       		dc.w byte_11F96-Ani_obj16
00013B0C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013B10 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013B14 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013B18 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013B1C                            		even
00013B1C                            		even
00013B1C                            
00013B1C                            ; ---------------------------------------------------------------------------
00013B1C                            ; Sprite mappings - harpoon (LZ)
00013B1C                            ; ---------------------------------------------------------------------------
00013B1C                            Map_obj16:
00013B1C                            	include "_maps\obj16.asm"
00013B1C                            ; ---------------------------------------------------------------------------
00013B1C                            ; Sprite mappings - harpoon (LZ)
00013B1C                            ; ---------------------------------------------------------------------------
00013B1C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013B20 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013B24 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013B28 01                         byte_11FA6:	dc.b 1
00013B29 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013B2E 01                         byte_11FAC:	dc.b 1
00013B2F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013B34 02                         byte_11FB2:	dc.b 2
00013B35 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013B3A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013B3F 01                         byte_11FBD:	dc.b 1
00013B40 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013B45 01                         byte_11FC3:	dc.b 1
00013B46 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013B4B 02                         byte_11FC9:	dc.b 2
00013B4C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013B51 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013B56                            		even
00013B56                            		even
00013B56                            
00013B56                            ; ===========================================================================
00013B56                            ; ---------------------------------------------------------------------------
00013B56                            ; Object 61 - blocks (LZ)
00013B56                            ; ---------------------------------------------------------------------------
00013B56                            
00013B56                            Obj61:					; XREF: Obj_Index
00013B56 7000                       		moveq	#0,d0
00013B58 1028 0024                  		move.b	$24(a0),d0
00013B5C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013B60 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013B64                            ; ===========================================================================
00013B64 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013B66 0000                       		dc.w Obj61_Action-Obj61_Index
00013B68                            
00013B68 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013B6A 200C                       		dc.b $20, $C
00013B6C 1010                       		dc.b $10, $10
00013B6E 1010                       		dc.b $10, $10
00013B70                            ; ===========================================================================
00013B70                            
00013B70                            Obj61_Main:				; XREF: Obj61_Index
00013B70 5428 0024                  		addq.b	#2,$24(a0)
00013B74 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013B7C 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013B82 117C 0004 0001             		move.b	#4,1(a0)
00013B88 117C 0003 0018             		move.b	#3,$18(a0)
00013B8E 7000                       		moveq	#0,d0
00013B90 1028 0028                  		move.b	$28(a0),d0
00013B94 E648                       		lsr.w	#3,d0
00013B96 0240 000E                  		andi.w	#$E,d0
00013B9A 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013B9E 115A 0019                  		move.b	(a2)+,$19(a0)
00013BA2 1152 0016                  		move.b	(a2),$16(a0)
00013BA6 E248                       		lsr.w	#1,d0
00013BA8 1140 001A                  		move.b	d0,$1A(a0)
00013BAC 3168 0008 0034             		move.w	8(a0),$34(a0)
00013BB2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013BB8 1028 0028                  		move.b	$28(a0),d0
00013BBC 0200 000F                  		andi.b	#$F,d0
00013BC0 6700                       		beq.s	Obj61_Action
00013BC2 0C00 0007                  		cmpi.b	#7,d0
00013BC6 6700                       		beq.s	Obj61_Action
00013BC8 117C 0001 0038             		move.b	#1,$38(a0)
00013BCE                            
00013BCE                            Obj61_Action:				; XREF: Obj61_Index
00013BCE 3F28 0008                  		move.w	8(a0),-(sp)
00013BD2 7000                       		moveq	#0,d0
00013BD4 1028 0028                  		move.b	$28(a0),d0
00013BD8 0240 000F                  		andi.w	#$F,d0
00013BDC D040                       		add.w	d0,d0
00013BDE 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013BE2 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013BE6 381F                       		move.w	(sp)+,d4
00013BE8 4A28 0001                  		tst.b	1(a0)
00013BEC 6A00                       		bpl.s	Obj61_ChkDel
00013BEE 7200                       		moveq	#0,d1
00013BF0 1228 0019                  		move.b	$19(a0),d1
00013BF4 0641 000B                  		addi.w	#$B,d1
00013BF8 7400                       		moveq	#0,d2
00013BFA 1428 0016                  		move.b	$16(a0),d2
00013BFE 3602                       		move.w	d2,d3
00013C00 5243                       		addq.w	#1,d3
00013C02 6100 D95E                  		bsr.w	SolidObject
00013C06 1144 003F                  		move.b	d4,$3F(a0)
00013C0A 6100 0000                  		bsr.w	loc_12180
00013C0E                            
00013C0E                            Obj61_ChkDel:
00013C0E 3028 0034                  		move.w	$34(a0),d0
00013C12 0240 FF80                  		andi.w	#$FF80,d0
00013C16 3238 F700                  		move.w	($FFFFF700).w,d1
00013C1A 0441 0080                  		subi.w	#$80,d1
00013C1E 0241 FF80                  		andi.w	#$FF80,d1
00013C22 9041                       		sub.w	d1,d0
00013C24 0C40 0280                  		cmpi.w	#$280,d0
00013C28 6200 B592                  		bhi.w	DeleteObject
00013C2C 6000 B552                  		bra.w	DisplaySprite
00013C30                            ; ===========================================================================
00013C30 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013C34 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013C38 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013C3C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013C40 4E75                       		rts	
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013C42 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013C46 6600                       		bne.s	loc_120D6	; if yes, branch
00013C48 0828 0003 0022             		btst	#3,$22(a0)
00013C4E 6700                       		beq.s	locret_120D4
00013C50 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013C56                            
00013C56                            locret_120D4:
00013C56 4E75                       		rts	
00013C58                            ; ===========================================================================
00013C58                            
00013C58                            loc_120D6:
00013C58 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013C5C 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013C5E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013C62 4228 0038                  		clr.b	$38(a0)
00013C66 4E75                       		rts	
00013C68                            ; ===========================================================================
00013C68                            
00013C68                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013C68 6100 B4FC                  		bsr.w	SpeedToPos
00013C6C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013C70 6100 0000                  		bsr.w	ObjHitFloor
00013C74 4A41                       		tst.w	d1
00013C76 6A00 0000                  		bpl.w	locret_12106
00013C7A 5241                       		addq.w	#1,d1
00013C7C D368 000C                  		add.w	d1,$C(a0)
00013C80 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013C84 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013C88                            
00013C88                            locret_12106:
00013C88 4E75                       		rts	
00013C8A                            ; ===========================================================================
00013C8A                            
00013C8A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013C8A 6100 B4DA                  		bsr.w	SpeedToPos
00013C8E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013C92 6100 0000                  		bsr.w	ObjHitCeiling
00013C96 4A41                       		tst.w	d1
00013C98 6A00 0000                  		bpl.w	locret_12126
00013C9C 9368 000C                  		sub.w	d1,$C(a0)
00013CA0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013CA4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013CA8                            
00013CA8                            locret_12126:
00013CA8 4E75                       		rts	
00013CAA                            ; ===========================================================================
00013CAA                            
00013CAA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013CAA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013CB0 6600                       		bne.s	locret_12138	; if not, branch
00013CB2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013CB6 4228 0038                  		clr.b	$38(a0)
00013CBA                            
00013CBA                            locret_12138:
00013CBA 4E75                       		rts	
00013CBC                            ; ===========================================================================
00013CBC                            
00013CBC                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013CBC 3038 F646                  		move.w	($FFFFF646).w,d0
00013CC0 9068 000C                  		sub.w	$C(a0),d0
00013CC4 6700                       		beq.s	locret_1217E
00013CC6 6400                       		bcc.s	loc_12162
00013CC8 0C40 FFFE                  		cmpi.w	#-2,d0
00013CCC 6C00                       		bge.s	loc_1214E
00013CCE 70FE                       		moveq	#-2,d0
00013CD0                            
00013CD0                            loc_1214E:
00013CD0 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013CD4 6100 0000                  		bsr.w	ObjHitCeiling
00013CD8 4A41                       		tst.w	d1
00013CDA 6A00 0000                  		bpl.w	locret_12160
00013CDE 9368 000C                  		sub.w	d1,$C(a0)
00013CE2                            
00013CE2                            locret_12160:
00013CE2 4E75                       		rts	
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            loc_12162:				; XREF: Obj61_Type07
00013CE4 0C40 0002                  		cmpi.w	#2,d0
00013CE8 6F00                       		ble.s	loc_1216A
00013CEA 7002                       		moveq	#2,d0
00013CEC                            
00013CEC                            loc_1216A:
00013CEC D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013CF0 6100 0000                  		bsr.w	ObjHitFloor
00013CF4 4A41                       		tst.w	d1
00013CF6 6A00 0000                  		bpl.w	locret_1217E
00013CFA 5241                       		addq.w	#1,d1
00013CFC D368 000C                  		add.w	d1,$C(a0)
00013D00                            
00013D00                            locret_1217E:
00013D00 4E75                       		rts	
00013D02                            ; ===========================================================================
00013D02                            
00013D02                            loc_12180:				; XREF: Obj61_Action
00013D02 4A28 0038                  		tst.b	$38(a0)
00013D06 6700                       		beq.s	locret_121C0
00013D08 0828 0003 0022             		btst	#3,$22(a0)
00013D0E 6600                       		bne.s	loc_1219A
00013D10 4A28 003E                  		tst.b	$3E(a0)
00013D14 6700                       		beq.s	locret_121C0
00013D16 5928 003E                  		subq.b	#4,$3E(a0)
00013D1A 6000                       		bra.s	loc_121A6
00013D1C                            ; ===========================================================================
00013D1C                            
00013D1C                            loc_1219A:
00013D1C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013D22 6700                       		beq.s	locret_121C0
00013D24 5828 003E                  		addq.b	#4,$3E(a0)
00013D28                            
00013D28                            loc_121A6:
00013D28 1028 003E                  		move.b	$3E(a0),d0
00013D2C 4EB9 0000 2B7A             		jsr	(CalcSine).l
00013D32 323C 0400                  		move.w	#$400,d1
00013D36 C1C1                       		muls.w	d1,d0
00013D38 4840                       		swap	d0
00013D3A D068 0030                  		add.w	$30(a0),d0
00013D3E 3140 000C                  		move.w	d0,$C(a0)
00013D42                            
00013D42                            locret_121C0:
00013D42 4E75                       		rts	
00013D44                            ; ===========================================================================
00013D44                            ; ---------------------------------------------------------------------------
00013D44                            ; Sprite mappings - blocks (LZ)
00013D44                            ; ---------------------------------------------------------------------------
00013D44                            Map_obj61:
00013D44                            	include "_maps\obj61.asm"
00013D44                            ; ---------------------------------------------------------------------------
00013D44                            ; Sprite mappings - blocks (LZ)
00013D44                            ; ---------------------------------------------------------------------------
00013D44 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013D48 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013D4C 01                         byte_121CA:	dc.b 1
00013D4D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013D52 02                         byte_121D0:	dc.b 2
00013D53 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013D58 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013D5D 01                         byte_121DB:	dc.b 1
00013D5E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013D63 01                         byte_121E1:	dc.b 1
00013D64 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013D6A 00                         		even
00013D6A 00                         		even
00013D6A                            
00013D6A                            ; ===========================================================================
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            ; Object 62 - gargoyle head (LZ)
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            
00013D6A                            Obj62:					; XREF: Obj_Index
00013D6A 7000                       		moveq	#0,d0
00013D6C 1028 0024                  		move.b	$24(a0),d0
00013D70 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013D74 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013D78 6000 D4C0                  		bra.w	MarkObjGone
00013D7C                            ; ===========================================================================
00013D7C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013D7E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013D80 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013D82 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013D84                            
00013D84 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013D8C                            ; ===========================================================================
00013D8C                            
00013D8C                            Obj62_Main:				; XREF: Obj62_Index
00013D8C 5428 0024                  		addq.b	#2,$24(a0)
00013D90 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013D98 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013D9E 0028 0004 0001             		ori.b	#4,1(a0)
00013DA4 117C 0003 0018             		move.b	#3,$18(a0)
00013DAA 117C 0010 0019             		move.b	#$10,$19(a0)
00013DB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00013DB4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013DB8 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013DBE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013DC4 0228 000F 0028             		andi.b	#$F,$28(a0)
00013DCA                            
00013DCA                            Obj62_MakeFire:				; XREF: Obj62_Index
00013DCA 5328 001E                  		subq.b	#1,$1E(a0)
00013DCE 6600                       		bne.s	Obj62_NoFire
00013DD0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013DD6 6100 B622                  		bsr.w	ChkObjOnScreen
00013DDA 6600                       		bne.s	Obj62_NoFire
00013DDC 6100 B836                  		bsr.w	SingleObjLoad
00013DE0 6600                       		bne.s	Obj62_NoFire
00013DE2 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013DE6 5829 0024                  		addq.b	#4,$24(a1)
00013DEA 3368 0008 0008             		move.w	8(a0),8(a1)
00013DF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013DF6 1368 0001 0001             		move.b	1(a0),1(a1)
00013DFC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013E02                            
00013E02                            Obj62_NoFire:
00013E02 4E75                       		rts	
00013E04                            ; ===========================================================================
00013E04                            
00013E04                            Obj62_FireBall:				; XREF: Obj62_Index
00013E04 5428 0024                  		addq.b	#2,$24(a0)
00013E08 117C 0008 0016             		move.b	#8,$16(a0)
00013E0E 117C 0008 0017             		move.b	#8,$17(a0)
00013E14 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013E1C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013E22 0028 0004 0001             		ori.b	#4,1(a0)
00013E28 117C 0004 0018             		move.b	#4,$18(a0)
00013E2E 117C 0098 0020             		move.b	#$98,$20(a0)
00013E34 117C 0008 0019             		move.b	#8,$19(a0)
00013E3A 117C 0002 001A             		move.b	#2,$1A(a0)
00013E40 5068 000C                  		addq.w	#8,$C(a0)
00013E44 317C 0200 0010             		move.w	#$200,$10(a0)
00013E4A 0828 0000 0022             		btst	#0,$22(a0)
00013E50 6600                       		bne.s	Obj62_Sound
00013E52 4468 0010                  		neg.w	$10(a0)
00013E56                            
00013E56                            Obj62_Sound:
00013E56 303C 00AE                  		move.w	#$AE,d0
00013E5A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013E60                            
00013E60                            Obj62_AniFire:				; XREF: Obj62_Index
00013E60 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013E64 0200 0007                  		andi.b	#7,d0
00013E68 6600                       		bne.s	Obj62_StopFire
00013E6A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013E70                            
00013E70                            Obj62_StopFire:
00013E70 6100 B2F4                  		bsr.w	SpeedToPos
00013E74 0828 0000 0022             		btst	#0,$22(a0)
00013E7A 6600                       		bne.s	Obj62_StopFire2
00013E7C 76F8                       		moveq	#-8,d3
00013E7E 6100 0000                  		bsr.w	ObjHitWallLeft
00013E82 4A41                       		tst.w	d1
00013E84 6B00 B336                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013E88 4E75                       		rts	
00013E8A                            ; ===========================================================================
00013E8A                            
00013E8A                            Obj62_StopFire2:
00013E8A 7608                       		moveq	#8,d3
00013E8C 6100 0000                  		bsr.w	ObjHitWallRight
00013E90 4A41                       		tst.w	d1
00013E92 6B00 B328                  		bmi.w	DeleteObject
00013E96 4E75                       		rts	
00013E98                            ; ===========================================================================
00013E98                            ; ---------------------------------------------------------------------------
00013E98                            ; Sprite mappings - gargoyle head (LZ)
00013E98                            ; ---------------------------------------------------------------------------
00013E98                            Map_obj62:
00013E98                            	include "_maps\obj62.asm"
00013E98                            ; ---------------------------------------------------------------------------
00013E98                            ; Sprite mappings - gargoyle head (LZ)
00013E98                            ; ---------------------------------------------------------------------------
00013E98 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013E9C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013EA0 03                         byte_12320:	dc.b 3
00013EA1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013EA6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013EAB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013EB0 01                         byte_12330:	dc.b 1
00013EB1 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013EB6 01                         byte_12336:	dc.b 1
00013EB7 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013EBC                            		even
00013EBC                            		even
00013EBC                            
00013EBC                            ; ===========================================================================
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            
00013EBC                            Obj63:					; XREF: Obj_Index
00013EBC 7000                       		moveq	#0,d0
00013EBE 1028 0024                  		move.b	$24(a0),d0
00013EC2 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013EC6 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013ECA 3028 0030                  		move.w	$30(a0),d0
00013ECE 0240 FF80                  		andi.w	#$FF80,d0
00013ED2 3238 F700                  		move.w	($FFFFF700).w,d1
00013ED6 0441 0080                  		subi.w	#$80,d1
00013EDA 0241 FF80                  		andi.w	#$FF80,d1
00013EDE 9041                       		sub.w	d1,d0
00013EE0 0C40 0280                  		cmpi.w	#$280,d0
00013EE4 6200                       		bhi.s	loc_1236A
00013EE6                            
00013EE6                            Obj63_Display:				; XREF: loc_1236A
00013EE6 6000 B298                  		bra.w	DisplaySprite
00013EEA                            ; ===========================================================================
00013EEA                            
00013EEA                            loc_1236A:				; XREF: Obj63
00013EEA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013EF0 6600                       		bne.s	loc_12378
00013EF2 0C40 FF80                  		cmpi.w	#-$80,d0
00013EF6 64EE                       		bcc.s	Obj63_Display
00013EF8                            
00013EF8                            loc_12378:
00013EF8 1028 002F                  		move.b	$2F(a0),d0
00013EFC 6A00 B2BE                  		bpl.w	DeleteObject
00013F00 0240 007F                  		andi.w	#$7F,d0
00013F04 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013F08 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013F0E 6000 B2AC                  		bra.w	DeleteObject
00013F12                            ; ===========================================================================
00013F12 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013F14 0000                       		dc.w loc_124B2-Obj63_Index
00013F16 0000                       		dc.w loc_124C2-Obj63_Index
00013F18 0000                       		dc.w loc_124DE-Obj63_Index
00013F1A                            ; ===========================================================================
00013F1A                            
00013F1A                            Obj63_Main:				; XREF: Obj63_Index
00013F1A 1028 0028                  		move.b	$28(a0),d0
00013F1E 6B00 0000                  		bmi.w	loc_12460
00013F22 5428 0024                  		addq.b	#2,$24(a0)
00013F26 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013F2E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013F34 0028 0004 0001             		ori.b	#4,1(a0)
00013F3A 117C 0010 0019             		move.b	#$10,$19(a0)
00013F40 117C 0004 0018             		move.b	#4,$18(a0)
00013F46 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013F4C 6600                       		bne.s	loc_123E2
00013F4E 5828 0024                  		addq.b	#4,$24(a0)
00013F52 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013F58 117C 0001 0018             		move.b	#1,$18(a0)
00013F5E 6000 0000                  		bra.w	loc_124DE
00013F62                            ; ===========================================================================
00013F62                            
00013F62                            loc_123E2:
00013F62 117C 0004 001A             		move.b	#4,$1A(a0)
00013F68 7000                       		moveq	#0,d0
00013F6A 1028 0028                  		move.b	$28(a0),d0
00013F6E 3200                       		move.w	d0,d1
00013F70 E648                       		lsr.w	#3,d0
00013F72 0240 001E                  		andi.w	#$1E,d0
00013F76 45FA 0000                  		lea	Obj63_Data(pc),a2
00013F7A D4F2 0000                  		adda.w	(a2,d0.w),a2
00013F7E 315A 0038                  		move.w	(a2)+,$38(a0)
00013F82 315A 0030                  		move.w	(a2)+,$30(a0)
00013F86 214A 003C                  		move.l	a2,$3C(a0)
00013F8A 0241 000F                  		andi.w	#$F,d1
00013F8E E549                       		lsl.w	#2,d1
00013F90 1141 0038                  		move.b	d1,$38(a0)
00013F94 117C 0004 003A             		move.b	#4,$3A(a0)
00013F9A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013F9E 6700                       		beq.s	loc_1244C
00013FA0 117C 0001 003B             		move.b	#1,$3B(a0)
00013FA6 4428 003A                  		neg.b	$3A(a0)
00013FAA 7200                       		moveq	#0,d1
00013FAC 1228 0038                  		move.b	$38(a0),d1
00013FB0 D228 003A                  		add.b	$3A(a0),d1
00013FB4 B228 0039                  		cmp.b	$39(a0),d1
00013FB8 6500                       		bcs.s	loc_12448
00013FBA 1001                       		move.b	d1,d0
00013FBC 7200                       		moveq	#0,d1
00013FBE 4A00                       		tst.b	d0
00013FC0 6A00                       		bpl.s	loc_12448
00013FC2 1228 0039                  		move.b	$39(a0),d1
00013FC6 5901                       		subq.b	#4,d1
00013FC8                            
00013FC8                            loc_12448:
00013FC8 1141 0038                  		move.b	d1,$38(a0)
00013FCC                            
00013FCC                            loc_1244C:
00013FCC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013FD2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013FD8 6100 0000                  		bsr.w	Obj63_ChangeDir
00013FDC 6000 0000                  		bra.w	loc_124B2
00013FE0                            ; ===========================================================================
00013FE0                            
00013FE0                            loc_12460:				; XREF: Obj63_Main
00013FE0 1140 002F                  		move.b	d0,$2F(a0)
00013FE4 0240 007F                  		andi.w	#$7F,d0
00013FE8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013FEC 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013FF2 6600 B1C8                  		bne.w	DeleteObject
00013FF6 D040                       		add.w	d0,d0
00013FF8 0240 001E                  		andi.w	#$1E,d0
00013FFC 0640 0070                  		addi.w	#$70,d0
00014000 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014006 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001400A 321A                       		move.w	(a2)+,d1
0001400C 2248                       		movea.l	a0,a1
0001400E 6000                       		bra.s	Obj63_MakePtfms
00014010                            ; ===========================================================================
00014010                            
00014010                            Obj63_Loop:
00014010 6100 B602                  		bsr.w	SingleObjLoad
00014014 6600                       		bne.s	loc_124AA
00014016                            
00014016                            Obj63_MakePtfms:			; XREF: loc_12460
00014016 12BC 0063                  		move.b	#$63,0(a1)
0001401A 335A 0008                  		move.w	(a2)+,8(a1)
0001401E 335A 000C                  		move.w	(a2)+,$C(a1)
00014022 301A                       		move.w	(a2)+,d0
00014024 1340 0028                  		move.b	d0,$28(a1)
00014028                            
00014028                            loc_124AA:
00014028 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001402C                            
0001402C 588F                       		addq.l	#4,sp
0001402E 4E75                       		rts	
00014030                            ; ===========================================================================
00014030                            
00014030                            loc_124B2:				; XREF: Obj63_Index
00014030 7200                       		moveq	#0,d1
00014032 1228 0019                  		move.b	$19(a0),d1
00014036 4EB9 0000 8E3C             		jsr	(PlatformObject).l
0001403C 6000 0000                  		bra.w	sub_12502
00014040                            ; ===========================================================================
00014040                            
00014040                            loc_124C2:				; XREF: Obj63_Index
00014040 7200                       		moveq	#0,d1
00014042 1228 0019                  		move.b	$19(a0),d1
00014046 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
0001404C 3F28 0008                  		move.w	8(a0),-(sp)
00014050 6100 0000                  		bsr.w	sub_12502
00014054 341F                       		move.w	(sp)+,d2
00014056 4EF9 0000 951A             		jmp	(MvSonicOnPtfm2).l
0001405C                            ; ===========================================================================
0001405C                            
0001405C                            loc_124DE:				; XREF: Obj63_Index
0001405C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014060 0240 0003                  		andi.w	#3,d0
00014064 6600                       		bne.s	loc_124FC
00014066 7201                       		moveq	#1,d1
00014068 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001406C 6700                       		beq.s	loc_124F2
0001406E 4401                       		neg.b	d1
00014070                            
00014070                            loc_124F2:
00014070 D328 001A                  		add.b	d1,$1A(a0)
00014074 0228 0003 001A             		andi.b	#3,$1A(a0)
0001407A                            
0001407A                            loc_124FC:
0001407A 588F                       		addq.l	#4,sp
0001407C 6000 D1BC                  		bra.w	MarkObjGone
00014080                            
00014080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014080                            
00014080                            
00014080                            sub_12502:				; XREF: loc_124B2; loc_124C2
00014080 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00014084 6700                       		beq.s	loc_12520
00014086 4A28 003B                  		tst.b	$3B(a0)
0001408A 6600                       		bne.s	loc_12520
0001408C 117C 0001 003B             		move.b	#1,$3B(a0)
00014092 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00014098 4428 003A                  		neg.b	$3A(a0)
0001409C 6000                       		bra.s	loc_12534
0001409E                            ; ===========================================================================
0001409E                            
0001409E                            loc_12520:
0001409E 3028 0008                  		move.w	8(a0),d0
000140A2 B068 0034                  		cmp.w	$34(a0),d0
000140A6 6600                       		bne.s	loc_1256A
000140A8 3028 000C                  		move.w	$C(a0),d0
000140AC B068 0036                  		cmp.w	$36(a0),d0
000140B0 6600                       		bne.s	loc_1256A
000140B2                            
000140B2                            loc_12534:
000140B2 7200                       		moveq	#0,d1
000140B4 1228 0038                  		move.b	$38(a0),d1
000140B8 D228 003A                  		add.b	$3A(a0),d1
000140BC B228 0039                  		cmp.b	$39(a0),d1
000140C0 6500                       		bcs.s	loc_12552
000140C2 1001                       		move.b	d1,d0
000140C4 7200                       		moveq	#0,d1
000140C6 4A00                       		tst.b	d0
000140C8 6A00                       		bpl.s	loc_12552
000140CA 1228 0039                  		move.b	$39(a0),d1
000140CE 5901                       		subq.b	#4,d1
000140D0                            
000140D0                            loc_12552:
000140D0 1141 0038                  		move.b	d1,$38(a0)
000140D4 2268 003C                  		movea.l	$3C(a0),a1
000140D8 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000140DE 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000140E4 6100 0000                  		bsr.w	Obj63_ChangeDir
000140E8                            
000140E8                            loc_1256A:
000140E8 6100 B07C                  		bsr.w	SpeedToPos
000140EC 4E75                       		rts	
000140EE                            ; End of function sub_12502
000140EE                            
000140EE                            
000140EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140EE                            
000140EE                            
000140EE                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000140EE 7000                       		moveq	#0,d0
000140F0 343C FF00                  		move.w	#-$100,d2
000140F4 3028 0008                  		move.w	8(a0),d0
000140F8 9068 0034                  		sub.w	$34(a0),d0
000140FC 6400                       		bcc.s	loc_12584
000140FE 4440                       		neg.w	d0
00014100 4442                       		neg.w	d2
00014102                            
00014102                            loc_12584:
00014102 7200                       		moveq	#0,d1
00014104 363C FF00                  		move.w	#-$100,d3
00014108 3228 000C                  		move.w	$C(a0),d1
0001410C 9268 0036                  		sub.w	$36(a0),d1
00014110 6400                       		bcc.s	loc_12598
00014112 4441                       		neg.w	d1
00014114 4443                       		neg.w	d3
00014116                            
00014116                            loc_12598:
00014116 B240                       		cmp.w	d0,d1
00014118 6500                       		bcs.s	loc_125C2
0001411A 3028 0008                  		move.w	8(a0),d0
0001411E 9068 0034                  		sub.w	$34(a0),d0
00014122 6700                       		beq.s	loc_125AE
00014124 48C0                       		ext.l	d0
00014126 E180                       		asl.l	#8,d0
00014128 81C1                       		divs.w	d1,d0
0001412A 4440                       		neg.w	d0
0001412C                            
0001412C                            loc_125AE:
0001412C 3140 0010                  		move.w	d0,$10(a0)
00014130 3143 0012                  		move.w	d3,$12(a0)
00014134 4840                       		swap	d0
00014136 3140 000A                  		move.w	d0,$A(a0)
0001413A 4268 000E                  		clr.w	$E(a0)
0001413E 4E75                       		rts	
00014140                            ; ===========================================================================
00014140                            
00014140                            loc_125C2:				; XREF: Obj63_ChangeDir
00014140 3228 000C                  		move.w	$C(a0),d1
00014144 9268 0036                  		sub.w	$36(a0),d1
00014148 6700                       		beq.s	loc_125D4
0001414A 48C1                       		ext.l	d1
0001414C E181                       		asl.l	#8,d1
0001414E 83C0                       		divs.w	d0,d1
00014150 4441                       		neg.w	d1
00014152                            
00014152                            loc_125D4:
00014152 3141 0012                  		move.w	d1,$12(a0)
00014156 3142 0010                  		move.w	d2,$10(a0)
0001415A 4841                       		swap	d1
0001415C 3141 000E                  		move.w	d1,$E(a0)
00014160 4268 000A                  		clr.w	$A(a0)
00014164 4E75                       		rts	
00014166                            ; End of function Obj63_ChangeDir
00014166                            
00014166                            ; ===========================================================================
00014166 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00014168 0000                       		dc.w word_12610-Obj63_Data
0001416A 0000                       		dc.w word_12628-Obj63_Data
0001416C 0000                       		dc.w word_1263C-Obj63_Data
0001416E 0000                       		dc.w word_12650-Obj63_Data
00014170 0000                       		dc.w word_12668-Obj63_Data
00014172 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014182 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001418E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001419E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000141A6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000141BA 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000141CE 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000141E6 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000141FA                            
000141FA                            ; ---------------------------------------------------------------------------
000141FA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141FA                            ; ---------------------------------------------------------------------------
000141FA                            Map_obj63:
000141FA                            	include "_maps\obj63.asm"
000141FA                            ; ---------------------------------------------------------------------------
000141FA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141FA                            ; ---------------------------------------------------------------------------
000141FA 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000141FE 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00014202 0000                       		dc.w byte_1269E-Map_obj63
00014204 01                         byte_12686:	dc.b 1
00014205 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001420A 01                         byte_1268C:	dc.b 1
0001420B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014210 01                         byte_12692:	dc.b 1
00014211 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014216 01                         byte_12698:	dc.b 1
00014217 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001421C 01                         byte_1269E:	dc.b 1
0001421D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014222                            		even
00014222                            		even
00014222                            
00014222                            ; ===========================================================================
00014222                            ; ---------------------------------------------------------------------------
00014222                            ; Object 64 - bubbles (LZ)
00014222                            ; ---------------------------------------------------------------------------
00014222                            
00014222                            Obj64:					; XREF: Obj_Index
00014222 7000                       		moveq	#0,d0
00014224 1028 0024                  		move.b	$24(a0),d0
00014228 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001422C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00014230                            ; ===========================================================================
00014230 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00014232 0000                       		dc.w Obj64_Animate-Obj64_Index
00014234 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014236 0000                       		dc.w Obj64_Display2-Obj64_Index
00014238 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001423A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001423C                            ; ===========================================================================
0001423C                            
0001423C                            Obj64_Main:				; XREF: Obj64_Index
0001423C 5428 0024                  		addq.b	#2,$24(a0)
00014240 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014248 317C 8348 0002             		move.w	#$8348,2(a0)
0001424E 117C 0084 0001             		move.b	#$84,1(a0)
00014254 117C 0010 0019             		move.b	#$10,$19(a0)
0001425A 117C 0001 0018             		move.b	#1,$18(a0)
00014260 1028 0028                  		move.b	$28(a0),d0	; get object type
00014264 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014266 5028 0024                  		addq.b	#8,$24(a0)
0001426A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001426E 1140 0032                  		move.b	d0,$32(a0)
00014272 1140 0033                  		move.b	d0,$33(a0)
00014276 117C 0006 001C             		move.b	#6,$1C(a0)
0001427C 6000 0000                  		bra.w	Obj64_BblMaker
00014280                            ; ===========================================================================
00014280                            
00014280                            Obj64_Bubble:				; XREF: Obj64_Main
00014280 1140 001C                  		move.b	d0,$1C(a0)
00014284 3168 0008 0030             		move.w	8(a0),$30(a0)
0001428A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00014290 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014296 1140 0026                  		move.b	d0,$26(a0)
0001429A                            
0001429A                            Obj64_Animate:				; XREF: Obj64_Index
0001429A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142A0 4EB9 0000 C132             		jsr	AnimateSprite
000142A6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000142AC 6600                       		bne.s	Obj64_ChkWater
000142AE 117C 0001 002E             		move.b	#1,$2E(a0)
000142B4                            
000142B4                            Obj64_ChkWater:				; XREF: Obj64_Index
000142B4 3038 F646                  		move.w	($FFFFF646).w,d0
000142B8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000142BC 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000142BE                            
000142BE                            Obj64_Burst:				; XREF: Obj64_Wobble
000142BE 117C 0006 0024             		move.b	#6,$24(a0)
000142C4 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000142C8 6000 0000                  		bra.w	Obj64_Display2
000142CC                            ; ===========================================================================
000142CC                            
000142CC                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000142CC 1028 0026                  		move.b	$26(a0),d0
000142D0 5228 0026                  		addq.b	#1,$26(a0)
000142D4 0240 007F                  		andi.w	#$7F,d0
000142D8 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000142DE 1031 0000                  		move.b	(a1,d0.w),d0
000142E2 4880                       		ext.w	d0
000142E4 D068 0030                  		add.w	$30(a0),d0
000142E8 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000142EC 4A28 002E                  		tst.b	$2E(a0)
000142F0 6700                       		beq.s	Obj64_Display
000142F2 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000142F6 6700                       		beq.s	Obj64_Display	; if not, branch
000142F8                            
000142F8 6100 0000                  		bsr.w	StopDrowning	; cancel countdown music
000142FC 303C 00AD                  		move.w	#$AD,d0
00014300 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00014306 43F8 D000                  		lea	($FFFFD000).w,a1
0001430A 4269 0010                  		clr.w	$10(a1)
0001430E 4269 0012                  		clr.w	$12(a1)
00014312 4269 0014                  		clr.w	$14(a1)
00014316 137C 0015 001C             		move.b	#$15,$1C(a1)
0001431C 337C 0023 003E             		move.w	#$23,$3E(a1)
00014322 137C 0000 003C             		move.b	#0,$3C(a1)
00014328 08A9 0005 0022             		bclr	#5,$22(a1)
0001432E 08A9 0004 0022             		bclr	#4,$22(a1)
00014334 0829 0002 0022             		btst	#2,$22(a1)
0001433A 6700 FF82                  		beq.w	Obj64_Burst
0001433E 08A9 0002 0022             		bclr	#2,$22(a1)
00014344 137C 0013 0016             		move.b	#$13,$16(a1)
0001434A 137C 0009 0017             		move.b	#9,$17(a1)
00014350 5B69 000C                  		subq.w	#5,$C(a1)
00014354 6000 FF68                  		bra.w	Obj64_Burst
00014358                            ; ===========================================================================
00014358                            
00014358                            Obj64_Display:				; XREF: Obj64_Wobble
00014358 6100 AE0C                  		bsr.w	SpeedToPos
0001435C 4A28 0001                  		tst.b	1(a0)
00014360 6A00                       		bpl.s	Obj64_Delete
00014362 4EFA AE1C                  		jmp	DisplaySprite
00014366                            ; ===========================================================================
00014366                            
00014366                            Obj64_Delete:
00014366 4EFA AE54                  		jmp	DeleteObject
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            Obj64_Display2:				; XREF: Obj64_Index
0001436A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014370 4EB9 0000 C132             		jsr	AnimateSprite
00014376 4A28 0001                  		tst.b	1(a0)
0001437A 6A00                       		bpl.s	Obj64_Delete2
0001437C 4EFA AE02                  		jmp	DisplaySprite
00014380                            ; ===========================================================================
00014380                            
00014380                            Obj64_Delete2:
00014380 4EFA AE3A                  		jmp	DeleteObject
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj64_Delete3:				; XREF: Obj64_Index
00014384 6000 AE36                  		bra.w	DeleteObject
00014388                            ; ===========================================================================
00014388                            
00014388                            Obj64_BblMaker:				; XREF: Obj64_Index
00014388 4A68 0036                  		tst.w	$36(a0)
0001438C 6600                       		bne.s	loc_12874
0001438E 3038 F646                  		move.w	($FFFFF646).w,d0
00014392 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014396 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001439A 4A28 0001                  		tst.b	1(a0)
0001439E 6A00 0000                  		bpl.w	Obj64_ChkDel
000143A2 5368 0038                  		subq.w	#1,$38(a0)
000143A6 6A00 0000                  		bpl.w	loc_12914
000143AA 317C 0001 0036             		move.w	#1,$36(a0)
000143B0                            
000143B0                            loc_1283A:
000143B0 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143B6 3200                       		move.w	d0,d1
000143B8 0240 0007                  		andi.w	#7,d0
000143BC 0C40 0006                  		cmpi.w	#6,d0
000143C0 64EE                       		bcc.s	loc_1283A
000143C2                            
000143C2 1140 0034                  		move.b	d0,$34(a0)
000143C6 0241 000C                  		andi.w	#$C,d1
000143CA 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000143D0 D2C1                       		adda.w	d1,a1
000143D2 2149 003C                  		move.l	a1,$3C(a0)
000143D6 5328 0032                  		subq.b	#1,$32(a0)
000143DA 6A00                       		bpl.s	loc_12872
000143DC 1168 0033 0032             		move.b	$33(a0),$32(a0)
000143E2 08E8 0007 0036             		bset	#7,$36(a0)
000143E8                            
000143E8                            loc_12872:
000143E8 6000                       		bra.s	loc_1287C
000143EA                            ; ===========================================================================
000143EA                            
000143EA                            loc_12874:				; XREF: Obj64_BblMaker
000143EA 5368 0038                  		subq.w	#1,$38(a0)
000143EE 6A00 0000                  		bpl.w	loc_12914
000143F2                            
000143F2                            loc_1287C:
000143F2 4EB9 0000 2B54             		jsr	(RandomNumber).l
000143F8 0240 001F                  		andi.w	#$1F,d0
000143FC 3140 0038                  		move.w	d0,$38(a0)
00014400 6100 B212                  		bsr.w	SingleObjLoad
00014404 6600                       		bne.s	loc_128F8
00014406 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001440A 3368 0008 0008             		move.w	8(a0),8(a1)
00014410 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014416 0240 000F                  		andi.w	#$F,d0
0001441A 5140                       		subq.w	#8,d0
0001441C D169 0008                  		add.w	d0,8(a1)
00014420 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014426 7000                       		moveq	#0,d0
00014428 1028 0034                  		move.b	$34(a0),d0
0001442C 2468 003C                  		movea.l	$3C(a0),a2
00014430 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014436 0828 0007 0036             		btst	#7,$36(a0)
0001443C 6700                       		beq.s	loc_128F8
0001443E 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014444 0240 0003                  		andi.w	#3,d0
00014448 6600                       		bne.s	loc_128E4
0001444A 08E8 0006 0036             		bset	#6,$36(a0)
00014450 6600                       		bne.s	loc_128F8
00014452 137C 0002 0028             		move.b	#2,$28(a1)
00014458                            
00014458                            loc_128E4:
00014458 4A28 0034                  		tst.b	$34(a0)
0001445C 6600                       		bne.s	loc_128F8
0001445E 08E8 0006 0036             		bset	#6,$36(a0)
00014464 6600                       		bne.s	loc_128F8
00014466 137C 0002 0028             		move.b	#2,$28(a1)
0001446C                            
0001446C                            loc_128F8:
0001446C 5328 0034                  		subq.b	#1,$34(a0)
00014470 6A00                       		bpl.s	loc_12914
00014472 4EB9 0000 2B54             		jsr	(RandomNumber).l
00014478 0240 007F                  		andi.w	#$7F,d0
0001447C 0640 0080                  		addi.w	#$80,d0
00014480 D168 0038                  		add.w	d0,$38(a0)
00014484 4268 0036                  		clr.w	$36(a0)
00014488                            
00014488                            loc_12914:
00014488 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001448E 4EB9 0000 C132             		jsr	AnimateSprite
00014494                            
00014494                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00014494 3028 0008                  		move.w	8(a0),d0
00014498 0240 FF80                  		andi.w	#$FF80,d0
0001449C 3238 F700                  		move.w	($FFFFF700).w,d1
000144A0 0441 0080                  		subi.w	#$80,d1
000144A4 0241 FF80                  		andi.w	#$FF80,d1
000144A8 9041                       		sub.w	d1,d0
000144AA 0C40 0280                  		cmpi.w	#$280,d0
000144AE 6200 AD0C                  		bhi.w	DeleteObject
000144B2 3038 F646                  		move.w	($FFFFF646).w,d0
000144B6 B068 000C                  		cmp.w	$C(a0),d0
000144BA 6500 ACC4                  		bcs.w	DisplaySprite
000144BE 4E75                       		rts	
000144C0                            ; ===========================================================================
000144C0                            ; bubble production sequence
000144C0                            
000144C0                            ; 0 = small bubble, 1 =	large bubble
000144C0                            
000144C0 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000144D2                            
000144D2                            ; ===========================================================================
000144D2                            
000144D2                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000144D2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000144D6 6B00                       		bmi.s	loc_12998
000144D8 43F8 D000                  		lea	($FFFFD000).w,a1
000144DC 3029 0008                  		move.w	8(a1),d0
000144E0 3228 0008                  		move.w	8(a0),d1
000144E4 0441 0010                  		subi.w	#$10,d1
000144E8 B240                       		cmp.w	d0,d1
000144EA 6400                       		bcc.s	loc_12998
000144EC 0641 0020                  		addi.w	#$20,d1
000144F0 B240                       		cmp.w	d0,d1
000144F2 6500                       		bcs.s	loc_12998
000144F4 3029 000C                  		move.w	$C(a1),d0
000144F8 3228 000C                  		move.w	$C(a0),d1
000144FC B240                       		cmp.w	d0,d1
000144FE 6400                       		bcc.s	loc_12998
00014500 0641 0010                  		addi.w	#$10,d1
00014504 B240                       		cmp.w	d0,d1
00014506 6500                       		bcs.s	loc_12998
00014508 7001                       		moveq	#1,d0
0001450A 4E75                       		rts	
0001450C                            ; ===========================================================================
0001450C                            
0001450C                            loc_12998:
0001450C 7000                       		moveq	#0,d0
0001450E 4E75                       		rts	
00014510                            ; ===========================================================================
00014510                            Ani_obj64:
00014510                            	include "_anim\obj64.asm"
00014510                            ; ---------------------------------------------------------------------------
00014510                            ; Animation script - bubbles (LZ)
00014510                            ; ---------------------------------------------------------------------------
00014510 0000                       		dc.w byte_129AA-Ani_obj64
00014512 0000                       		dc.w byte_129B0-Ani_obj64
00014514 0000                       		dc.w byte_129B6-Ani_obj64
00014516 0000                       		dc.w byte_129BE-Ani_obj64
00014518 0000                       		dc.w byte_129BE-Ani_obj64
0001451A 0000                       		dc.w byte_129C0-Ani_obj64
0001451C 0000                       		dc.w byte_129C6-Ani_obj64
0001451E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014524 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001452A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014532 04FC                       byte_129BE:	dc.b 4,	$FC
00014534 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001453A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014540 00                         		even
00014540 00                         		even
00014540                            
00014540                            ; ---------------------------------------------------------------------------
00014540                            ; Sprite mappings - bubbles (LZ)
00014540                            ; ---------------------------------------------------------------------------
00014540                            Map_obj64:
00014540                            	include "_maps\obj64.asm"
00014540                            ; ---------------------------------------------------------------------------
00014540                            ; Sprite mappings - bubbles (LZ)
00014540                            ; ---------------------------------------------------------------------------
00014540 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00014544 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00014548 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001454C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00014550 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00014554 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00014558 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001455C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00014560 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00014564 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00014568 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001456C 0000                       		dc.w byte_12A9C-Map_obj64
0001456E 01                         byte_129FA:	dc.b 1
0001456F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00014574 01                         byte_12A00:	dc.b 1
00014575 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001457A 01                         byte_12A06:	dc.b 1
0001457B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014580 01                         byte_12A0C:	dc.b 1
00014581 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014586 01                         byte_12A12:	dc.b 1
00014587 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001458C 01                         byte_12A18:	dc.b 1
0001458D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014592 01                         byte_12A1E:	dc.b 1
00014593 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014598 04                         byte_12A24:	dc.b 4
00014599 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001459E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000145A3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000145A8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000145AD 04                         byte_12A39:	dc.b 4
000145AE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000145B3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000145B8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000145BD 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000145C2 01                         byte_12A4E:	dc.b 1
000145C3 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000145C8 01                         byte_12A54:	dc.b 1
000145C9 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000145CE 01                         byte_12A5A:	dc.b 1
000145CF F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000145D4 01                         byte_12A60:	dc.b 1
000145D5 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000145DA 01                         byte_12A66:	dc.b 1
000145DB F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000145E0 01                         byte_12A6C:	dc.b 1
000145E1 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000145E6 01                         byte_12A72:	dc.b 1
000145E7 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000145EC 01                         byte_12A78:	dc.b 1
000145ED F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000145F2 01                         byte_12A7E:	dc.b 1
000145F3 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000145F8 01                         byte_12A84:	dc.b 1
000145F9 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000145FE 01                         byte_12A8A:	dc.b 1
000145FF F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014604 01                         byte_12A90:	dc.b 1
00014605 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001460A 01                         byte_12A96:	dc.b 1
0001460B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014610 00                         byte_12A9C:	dc.b 0
00014612 00                         		even
00014612 00                         		even
00014612                            
00014612                            ; ===========================================================================
00014612                            ; ---------------------------------------------------------------------------
00014612                            ; Object 65 - waterfalls (LZ)
00014612                            ; ---------------------------------------------------------------------------
00014612                            
00014612                            Obj65:					; XREF: Obj_Index
00014612 7000                       		moveq	#0,d0
00014614 1028 0024                  		move.b	$24(a0),d0
00014618 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001461C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014620                            ; ===========================================================================
00014620 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014622 0000                       		dc.w Obj65_Animate-Obj65_Index
00014624 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014626 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014628 0000                       		dc.w loc_12B36-Obj65_Index
0001462A                            ; ===========================================================================
0001462A                            
0001462A                            Obj65_Main:				; XREF: Obj65_Index
0001462A 5828 0024                  		addq.b	#4,$24(a0)
0001462E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014636 317C 4259 0002             		move.w	#$4259,2(a0)
0001463C 0028 0004 0001             		ori.b	#4,1(a0)
00014642 117C 0018 0019             		move.b	#$18,$19(a0)
00014648 117C 0001 0018             		move.b	#1,$18(a0)
0001464E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014652 6A00                       		bpl.s	loc_12AE6
00014654 08E8 0007 0002             		bset	#7,2(a0)
0001465A                            
0001465A                            loc_12AE6:
0001465A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001465E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00014662 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014666 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00014668 4228 0018                  		clr.b	$18(a0)
0001466C 5528 0024                  		subq.b	#2,$24(a0)
00014670 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00014676 6700                       		beq.s	loc_12B0A	; if not, branch
00014678 117C 0006 0024             		move.b	#6,$24(a0)
0001467E                            
0001467E                            loc_12B0A:
0001467E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00014684 6700                       		beq.s	Obj65_Animate	; if not, branch
00014686 117C 0008 0024             		move.b	#8,$24(a0)
0001468C                            
0001468C                            Obj65_Animate:				; XREF: Obj65_Index
0001468C 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00014692 4EB9 0000 C132             		jsr	AnimateSprite
00014698                            
00014698                            Obj65_ChkDel:				; XREF: Obj65_Index
00014698 6000 CBA0                  		bra.w	MarkObjGone
0001469C                            ; ===========================================================================
0001469C                            
0001469C                            Obj65_FixHeight:			; XREF: Obj65_Index
0001469C 3038 F646                  		move.w	($FFFFF646).w,d0
000146A0 0440 0010                  		subi.w	#$10,d0
000146A4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000146A8 60E2                       		bra.s	Obj65_Animate
000146AA                            ; ===========================================================================
000146AA                            
000146AA                            loc_12B36:				; XREF: Obj65_Index
000146AA 08A8 0007 0002             		bclr	#7,2(a0)
000146B0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000146B6 6600                       		bne.s	Obj65_Animate2
000146B8 08E8 0007 0002             		bset	#7,2(a0)
000146BE                            
000146BE                            Obj65_Animate2:
000146BE 60CC                       		bra.s	Obj65_Animate
000146C0                            ; ===========================================================================
000146C0                            Ani_obj65:
000146C0                            	include "_anim\obj65.asm"
000146C0                            ; ---------------------------------------------------------------------------
000146C0                            ; Animation script - waterfall (LZ)
000146C0                            ; ---------------------------------------------------------------------------
000146C0 0000                       		dc.w byte_12B4E-Ani_obj65
000146C2 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000146C8 00                         		even
000146C8 00                         		even
000146C8                            
000146C8                            ; ---------------------------------------------------------------------------
000146C8                            ; Sprite mappings - waterfalls (LZ)
000146C8                            ; ---------------------------------------------------------------------------
000146C8                            Map_obj65:
000146C8                            	include "_maps\obj65.asm"
000146C8                            ; ---------------------------------------------------------------------------
000146C8                            ; Sprite mappings - waterfalls (LZ)
000146C8                            ; ---------------------------------------------------------------------------
000146C8 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000146CC 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000146D0 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000146D4 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000146D8 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000146DC 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000146E0 01                         byte_12B6C:	dc.b 1
000146E1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000146E6 02                         byte_12B72:	dc.b 2
000146E7 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000146EC 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000146F1 02                         byte_12B7D:	dc.b 2
000146F2 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000146F7 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000146FC 01                         byte_12B88:	dc.b 1
000146FD F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014702 02                         byte_12B8E:	dc.b 2
00014703 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014708 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001470D 01                         byte_12B99:	dc.b 1
0001470E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014713 01                         byte_12B9F:	dc.b 1
00014714 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014719 01                         byte_12BA5:	dc.b 1
0001471A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001471F 02                         byte_12BAB:	dc.b 2
00014720 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014725 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001472A 02                         byte_12BB6:	dc.b 2
0001472B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014730 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014735 02                         byte_12BC1:	dc.b 2
00014736 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001473B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014740 02                         byte_12BCC:	dc.b 2
00014741 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014746 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001474C 00                         		even
0001474C 00                         		even
0001474C                            
0001474C                            SpinDash_dust:
0001474C                            	include "_inc\spindash_dust.asm"
0001474C                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
0001474C 7000                       		moveq	#0,d0
0001474E 1028 0024                  		move.b	$24(a0),d0
00014752 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014756 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001475A                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001475A 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
0001475C 0000                       		dc loc_1DD90-off_1DD2E; 1
0001475E 0000                       		dc loc_1DE46-off_1DD2E; 2
00014760 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014762                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014762                            
00014762                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014762 5428 0024                  		addq.b	#2,$24(a0)
00014766 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001476E 0028 0004 0001             		or.b	#4,1(a0)
00014774 117C 0001 0018             		move.b	#1,$18(a0)
0001477A 117C 0010 0019             		move.b	#$10,$19(a0)
00014780 317C 07A0 0002             		move	#$7A0,2(a0)
00014786 317C D000 003E             		move	#-$3000,$3E(a0)
0001478C 317C F400 003C             		move	#$F400,$3C(a0)
00014792 B0FC D1C0                  		cmp	#-$2E40,a0
00014796 6700                       		beq.s	loc_1DD8C
00014798 117C 0001 0034             		move.b	#1,$34(a0)
0001479E                            ;		cmp	#2,($FFFFFF70).w
0001479E                            ;		beq.s	loc_1DD8C
0001479E                            ;		move	#$48C,2(a0)
0001479E                            ;		move	#-$4FC0,$3E(a0)
0001479E                            ;		move	#-$6E80,$3C(a0)
0001479E                            
0001479E                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
0001479E                            ;		bsr.w	sub_16D6E
0001479E                            
0001479E                            loc_1DD90:				; DATA XREF: h+6DBA?o
0001479E 3468 003E                  		movea.w	$3E(a0),a2
000147A2 7000                       		moveq	#0,d0
000147A4 1028 001C                  		move.b	$1C(a0),d0
000147A8 D040                       		add	d0,d0
000147AA 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000147AE 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000147B2                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147B2 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000147B4 0000                       		dc loc_1DDAC-off_1DDA4; 1
000147B6 0000                       		dc loc_1DDCC-off_1DDA4; 2
000147B8 0000                       		dc loc_1DE20-off_1DDA4; 3
000147BA                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147BA                            
000147BA                            loc_1DDAC:				; DATA XREF: h+6E30?o
000147BA 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000147C0 4A28 001D                  		tst.b	$1D(a0)
000147C4 6600                       		bne.s	loc_1DE28
000147C6 316A 0008 0008             		move	8(a2),8(a0)
000147CC 117C 0000 0022             		move.b	#0,$22(a0)
000147D2 0268 7FFF 0002             		and	#$7FFF,2(a0)
000147D8 6000                       		bra.s	loc_1DE28
000147DA                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000147DA                            
000147DA                            loc_1DDCC:				; DATA XREF: h+6E30?o
000147DA                            ;		cmp.b	#$C,$28(a2)
000147DA                            ;		bcs.s	loc_1DE3E
000147DA 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000147E0 6400                       		bcc.s	loc_1DE3E
000147E2 4A2A 0039                  		tst.b	$39(a2)
000147E6 6700                       		beq.s	loc_1DE3E
000147E8 316A 0008 0008             		move	8(a2),8(a0)
000147EE 316A 000C 000C             		move	$C(a2),$C(a0)
000147F4 116A 0022 0022             		move.b	$22(a2),$22(a0)
000147FA 0228 0001 0022             		and.b	#1,$22(a0)
00014800 4A28 0034                  		tst.b	$34(a0)
00014804 6700                       		beq.s	loc_1DE06
00014806 5968 000C                  		sub	#4,$C(a0)
0001480A                            
0001480A                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001480A 4A28 001D                  		tst.b	$1D(a0)
0001480E 6600                       		bne.s	loc_1DE28
00014810 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014816 4A6A 0002                  		tst	2(a2)
0001481A 6A00                       		bpl.s	loc_1DE28
0001481C 0068 8000 0002             		or	#-$8000,2(a0)
00014822                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014822                            
00014822                            loc_1DE20:				; DATA XREF: h+6E30?o
00014822                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014822 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014828 4EB9 0000 C132             		jsr	AnimateSprite
0001482E 6100 0000                  		bsr.w	loc_1DEE4
00014832 4EFA A94C                  		jmp	DisplaySprite
00014836                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014836                            
00014836                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014836 117C 0000 001C             		move.b	#0,$1C(a0)
0001483C 4E75                       		rts	
0001483E                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001483E                            
0001483E                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001483E 6000 A97C                  		bra.w	DeleteObject
00014842                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014842                            
00014842                            
00014842                            
00014842                            loc_1DE4A:
00014842 3468 003E                  	movea.w	$3E(a0),a2
00014846 7210                       	moveq	#$10,d1
00014848 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001484E 6700                       	beq.s	loc_1DE64
00014850 7206                       	moveq	#$6,d1
00014852 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014858 6700                       	beq.s	loc_1DE64
0001485A 117C 0002 0024             	move.b	#2,$24(a0)
00014860 117C 0000 0032             	move.b	#0,$32(a0)
00014866 4E75                       	rts
00014868                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014868                            
00014868                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014868 5328 0032                  		subq.b	#1,$32(a0)
0001486C 6A00                       		bpl.s	loc_1DEE0
0001486E 117C 0003 0032             		move.b	#3,$32(a0)
00014874 4EBA AD9E                  		jsr	SingleObjLoad
00014878 6600                       		bne.s	loc_1DEE0
0001487A 1290                       		move.b	0(a0),0(a1)
0001487C 336A 0008 0008             		move	8(a2),8(a1)
00014882 336A 000C 000C             		move	$C(a2),$C(a1)
00014888 4A28 0034                  		tst.b	$34(a0)
0001488C 6700                       		beq.s	loc_1DE9A
0001488E 5941                       		sub	#4,d1
00014890                            
00014890                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014890 D369 000C                  		add	d1,$C(a1)
00014894 137C 0000 0022             		move.b	#0,$22(a1)
0001489A 137C 0003 001C             		move.b	#3,$1C(a1)
000148A0 5429 0024                  		addq.b	#2,$24(a1)
000148A4 2368 0004 0004             		move.l	4(a0),4(a1)
000148AA 1368 0001 0001             		move.b	1(a0),1(a1)
000148B0 137C 0001 0018             		move.b	#1,$18(a1)
000148B6 137C 0004 0019             		move.b	#4,$19(a1)
000148BC 3368 0002 0002             		move	2(a0),2(a1)
000148C2 3368 003E 003E             		move	$3E(a0),$3E(a1)
000148C8 0269 7FFF 0002             		and	#$7FFF,2(a1)
000148CE 4A6A 0002                  		tst	2(a2)
000148D2 6A00                       		bpl.s	loc_1DEE0
000148D4 0069 8000 0002             		or	#-$8000,2(a1)
000148DA                            
000148DA                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000148DA 6100                       		bsr.s	loc_1DEE4
000148DC 4E75                       		rts	
000148DE                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
000148DE                            
000148DE                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000148DE 7000                       		moveq	#0,d0
000148E0 1028 001A                  		move.b	$1A(a0),d0
000148E4 B028 0030                  		cmp.b	$30(a0),d0
000148E8 6700 0000                  		beq.w	locret_1DF36
000148EC 1140 0030                  		move.b	d0,$30(a0)
000148F0 45F9 0000 0000             		lea	(off_1E074).l,a2
000148F6 D040                       		add	d0,d0
000148F8 D4F2 0000                  		add	(a2,d0.w),a2
000148FC 3A1A                       		move	(a2)+,d5
000148FE 5345                       		subq	#1,d5
00014900 6B00 0000                  		bmi.w	locret_1DF36
00014904 3828 003C                  		move $3C(a0),d4
00014908                            
00014908                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014908 7200                       		moveq	#0,d1
0001490A 321A                       		move	(a2)+,d1
0001490C 3601                       		move	d1,d3
0001490E E04B                       		lsr.w	#8,d3
00014910 0243 00F0                  		and	#$F0,d3	; 'Ã°'
00014914 0643 0010                  		add	#$10,d3
00014918 0241 0FFF                  		and	#$FFF,d1
0001491C EB89                       		lsl.l	#5,d1
0001491E 0681 0000 0000             		add.l	#Art_Dust,d1
00014924 3404                       		move	d4,d2
00014926 D843                       		add	d3,d4
00014928 D843                       		add	d3,d4
0001492A 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00014930 51CD FFD6                  		dbf	d5,loc_1DF0A
00014934 4E75                           rts
00014936                            
00014936                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014936 4E75                       		rts	
00014938                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00014938 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001493A 0000                       		dc byte_1DF43-off_1DF38; 1
0001493C 0000                       		dc byte_1DF4F-off_1DF38; 2
0001493E 0000                       		dc byte_1DF58-off_1DF38; 3
00014940 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014943 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001494F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014958 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001495E                            ; -------------------------------------------------------------------------------
0001495E                            ; Unknown Sprite Mappings
0001495E                            ; -------------------------------------------------------------------------------
0001495E                            MapUnc_1DF5E:
0001495E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014960 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014962 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014964 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014966 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014968 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001496A 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001496C 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001496E 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014970 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014972 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014974 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014976 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014978 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001497A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001497C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001497E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014980 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014982 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014984 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014986 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014988 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001498A 00                         word_1DF8A:	dc.b 0
0001498B 01                         word_1DF8C:	dc.b 1
0001498C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014991 01                         word_1DF96:	dc.b 1
00014992 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014997 01                         word_1DFA0:	dc.b 1
00014998 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001499D 01                         word_1DFAA:	dc.b 1
0001499E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149A3 01                         word_1DFB4:	dc.b 1
000149A4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149A9 01                         word_1DFBE:	dc.b 1
000149AA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000149AF 01                         word_1DFC8:	dc.b 1
000149B0 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149B5 01                         word_1DFD2:	dc.b 1
000149B6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149BB 01                         word_1DFDC:	dc.b 1
000149BC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000149C1 01                         word_1DFE6:	dc.b 1
000149C2 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149C7 01                         word_1DFF0:	dc.b 1
000149C8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149CD 01                         word_1DFFA:	dc.b 1
000149CE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000149D3 02                         word_1E004:	dc.b 2
000149D4 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000149D9 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000149DE 02                         word_1E016:	dc.b 2
000149DF F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000149E4 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000149E9 02                         word_1E028:	dc.b 2
000149EA F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000149EF 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000149F4 02                         word_1E03A:	dc.b 2
000149F5 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000149FA 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000149FF 01                         word_1E04C:	dc.b 1
00014A00 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014A05 01                         word_1E056:	dc.b 1
00014A06 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014A0B 01                         word_1E060:	dc.b 1
00014A0C F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014A11 01                         word_1E06A:	dc.b 1
00014A12 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014A17 00                         	dc.b 0
00014A18 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014A1A 0000                       	dc word_1E0A2-off_1E074; 1
00014A1C 0000                       	dc word_1E0A6-off_1E074; 2
00014A1E 0000                       	dc word_1E0AA-off_1E074; 3
00014A20 0000                       	dc word_1E0AE-off_1E074; 4
00014A22 0000                       	dc word_1E0B2-off_1E074; 5
00014A24 0000                       	dc word_1E0B6-off_1E074; 6
00014A26 0000                       	dc word_1E0BA-off_1E074; 7
00014A28 0000                       	dc word_1E0BE-off_1E074; 8
00014A2A 0000                       	dc word_1E0C2-off_1E074; 9
00014A2C 0000                       	dc word_1E0C6-off_1E074; 10
00014A2E 0000                       	dc word_1E0CA-off_1E074; 11
00014A30 0000                       	dc word_1E0CE-off_1E074; 12
00014A32 0000                       	dc word_1E0D2-off_1E074; 13
00014A34 0000                       	dc word_1E0D8-off_1E074; 14
00014A36 0000                       	dc word_1E0DE-off_1E074; 15
00014A38 0000                       	dc word_1E0E4-off_1E074; 16
00014A3A 0000                       	dc word_1E0EA-off_1E074; 17
00014A3C 0000                       	dc word_1E0EA-off_1E074; 18
00014A3E 0000                       	dc word_1E0EA-off_1E074; 19
00014A40 0000                       	dc word_1E0EA-off_1E074; 20
00014A42 0000                       	dc word_1E0EC-off_1E074; 21
00014A44 0000                       word_1E0A0:	dc 0
00014A46 0001                       word_1E0A2:	dc 1
00014A48 7000                       	dc $7000
00014A4A 0001                       word_1E0A6:	dc 1
00014A4C F008                       	dc $F008
00014A4E 0001                       word_1E0AA:	dc 1
00014A50 F018                       	dc $F018
00014A52 0001                       word_1E0AE:	dc 1
00014A54 F028                       	dc $F028
00014A56 0001                       word_1E0B2:	dc 1
00014A58 F038                       	dc $F038
00014A5A 0001                       word_1E0B6:	dc 1
00014A5C F048                       	dc $F048
00014A5E 0001                       word_1E0BA:	dc 1
00014A60 7058                       	dc $7058
00014A62 0001                       word_1E0BE:	dc 1
00014A64 7060                       	dc $7060
00014A66 0001                       word_1E0C2:	dc 1
00014A68 7068                       	dc $7068
00014A6A 0001                       word_1E0C6:	dc 1
00014A6C 7070                       	dc $7070
00014A6E 0001                       word_1E0CA:	dc 1
00014A70 7078                       	dc $7078
00014A72 0001                       word_1E0CE:	dc 1
00014A74 7080                       	dc $7080
00014A76 0002                       word_1E0D2:	dc 2
00014A78 1088                       	dc $1088
00014A7A 708A                       	dc $708A
00014A7C 0002                       word_1E0D8:	dc 2
00014A7E 3092                       	dc $3092
00014A80 7096                       	dc $7096
00014A82 0002                       word_1E0DE:	dc 2
00014A84 509E                       	dc $509E
00014A86 70A4                       	dc $70A4
00014A88 0002                       word_1E0E4:	dc 2
00014A8A 50AC                       	dc $50AC
00014A8C 70B2                       	dc $70B2
00014A8E 0000                       word_1E0EA:	dc 0
00014A90 0001                       word_1E0EC:	dc 1
00014A92 F0BA                       	dc $F0BA
00014A94                            	even
00014A94                            	even
00014A94                            
00014A94                            ; ===========================================================================
00014A94                            ; ---------------------------------------------------------------------------
00014A94                            ; Object 01 - Sonic
00014A94                            ; ---------------------------------------------------------------------------
00014A94                            ; ===========================================================================
00014A94 =00000039                  crawling								= $39			; CRAWLING IN MY SKIN!
00014A94 =0000003A                  biting									= $3A
00014A94                            ; ===========================================================================
00014A94                            Obj01_PhysicsTable:
00014A94 0600 000C 0080             		dc.w $600,   $C,  $80			; Normal
00014A9A 0300 0006 0040             		dc.w $300,    6,  $40			; Underwater
00014AA0 0C00 0018 0080             		dc.w $C00,  $18,  $80			; Speed shoes
00014AA6 0600 000C 0080             		dc.w $600,   $C,  $80			; Speed shoes underwater
00014AAC 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling
00014AB2 0060 000C 0012             		dc.w  $60,   $C,  $12			; Crawling underwater
00014AB8 0180 0030 0048             		dc.w $180,  $30,  $48			; Crawling with speed shoes
00014ABE 00C0 0018 0024             		dc.w  $C0,  $18,  $24			; Crawling with speed shoes underwater
00014AC4                            ; ===========================================================================
00014AC4                            ; Get physics for Sonic
00014AC4                            ; ===========================================================================
00014AC4                            Obj01_GetPhysics:
00014AC4 7000                       		moveq	#0,d0
00014AC6 1028 0039                  		move.b	crawling(a0),d0
00014ACA E300                       		asl.b	#1,d0
00014ACC 8038 FE2E                  		or.b	($FFFFFE2E).w,d0
00014AD0 E300                       		asl.b	#1,d0
00014AD2 0828 0006 0022             		btst	#6,$22(a0)
00014AD8 6700                       		beq.s	@not_underwater
00014ADA 0000 0001                  		or.b	#1,d0
00014ADE                            		
00014ADE                            @not_underwater:
00014ADE C0FC 0006                  		mulu.w	#6,d0
00014AE2 43FB 00B0                  		lea	Obj01_PhysicsTable(pc,d0.w),a1
00014AE6 31D9 F760                  		move.w	(a1)+,($FFFFF760).w
00014AEA 31D9 F762                  		move.w	(a1)+,($FFFFF762).w
00014AEE 31D1 F764                  		move.w	(a1),($FFFFF764).w
00014AF2 4E75                       		rts
00014AF4                            ; ===========================================================================
00014AF4                            ; Apply speed cap for Sonic
00014AF4                            ; ===========================================================================
00014AF4                            Obj01_ApplySpeedCap:
00014AF4 3228 0014                  		move.w	$14(a0),d1
00014AF8 4A41                       		tst.w	d1
00014AFA 6A00                       		bpl.s	@not_negative
00014AFC 4441                       		neg.w	d1
00014AFE                            		
00014AFE                            @not_negative:
00014AFE 3438 F760                  		move.w	($FFFFF760).w,d2
00014B02 B242                       		cmp.w	d2,d1
00014B04 6F00                       		ble.s	@no_cap
00014B06 9278 F762                  		sub.w	($FFFFF762).w,d1
00014B0A 4A68 0014                  		tst.w	$14(a0)
00014B0E 6A00                       		bpl.s	@not_negative2
00014B10 4441                       		neg.w	d1
00014B12                            		
00014B12                            @not_negative2:
00014B12 3141 0014                  		move.w	d1,$14(a0)
00014B16                            		
00014B16                            @no_cap:
00014B16 4E75                       		rts
00014B18                            ; ===========================================================================
00014B18                            
00014B18                            Obj01:					; XREF: Obj_Index
00014B18 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014B1C 6700                       		beq.s	Obj01_Normal	; if not, branch
00014B1E 4EF9 0000 0000             		jmp	DebugMode
00014B24                            ; ===========================================================================
00014B24                            
00014B24                            Obj01_Normal:
00014B24 7000                       		moveq	#0,d0
00014B26 1028 0024                  		move.b	$24(a0),d0
00014B2A 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014B2E 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014B32                            ; ===========================================================================
00014B32 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014B34 0000                       		dc.w Obj01_Control-Obj01_Index
00014B36 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014B38 0000                       		dc.w Obj01_Death-Obj01_Index
00014B3A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014B3C 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014B3E                            ; ===========================================================================
00014B3E                            
00014B3E                            Obj01_Main:				; XREF: Obj01_Index
00014B3E 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
00014B44 5428 0024                  		addq.b	#2,$24(a0)
00014B48 117C 0013 0016             		move.b	#$13,$16(a0)
00014B4E 117C 0009 0017             		move.b	#9,$17(a0)
00014B54 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014B5C 317C 0780 0002             		move.w	#$780,2(a0)
00014B62 117C 0002 0018             		move.b	#2,$18(a0)
00014B68 117C 0018 0019             		move.b	#$18,$19(a0)
00014B6E 117C 0004 0001             		move.b	#4,1(a0)
00014B74 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014B7A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014B80 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00014B86 11FC 0005 D1C0             		move.b	#5,($FFFFD1C0).w
00014B8C                            
00014B8C                            Obj01_Control:				; XREF: Obj01_Index
00014B8C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014B90 6700                       		beq.s	loc_12C58	; if not, branch
00014B92 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00014B98 6700                       		beq.s	loc_12C58	; if not, branch
00014B9A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014BA0 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014BA4 4E75                       		rts	
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            loc_12C58:
00014BA6 6100 FF1C                  		bsr.w	Obj01_GetPhysics
00014BAA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014BAE 6600                       		bne.s	loc_12C64	; if yes, branch
00014BB0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014BB6                            
00014BB6                            loc_12C64:
00014BB6 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014BBC 6600                       		bne.s	loc_12C7E	; if yes, branch
00014BBE 6100 0000                  		bsr.w	Obj01_DoModes
00014BC2                            
00014BC2                            loc_12C7E:
00014BC2 4A28 0039                  		tst.b	crawling(a0)
00014BC6 6600                       		bne.s	@no_bite
00014BC8 4A28 003A                  		tst.b	biting(a0)
00014BCC 6600                       		bne.s	@chk_bite
00014BCE 0838 0006 F602             		btst	#6,($FFFFF602).w
00014BD4 6700                       		beq.s	@no_bite
00014BD6 4A38 FFBD                  		tst.b	($FFFFFFBD).w
00014BDA 6600                       		bne.s	@chk_bite
00014BDC 08A8 0005 0022             		bclr	#5,$22(a0)
00014BE2 117C 000D 003A             		move.b	#13,biting(a0)
00014BE8 11FC 0001 FFBD             		move.b	#1,($FFFFFFBD).w
00014BEE                            
00014BEE                            @chk_bite:
00014BEE 4A28 003A                  		tst.b	biting(a0)
00014BF2 6700                       		beq.s	@no_dec
00014BF4 117C 0009 001C             		move.b	#9,$1C(a0) ; Use "biting" animation
00014BFA 5328 003A                  		subq.b	#1,biting(a0)
00014BFE 6000                       		bra.s	@no_dec
00014C00                            		
00014C00                            @no_bite:
00014C00 11FC 0000 FFBD             		move.b	#0,($FFFFFFBD).w
00014C06 117C 0000 003A             		move.b	#0,biting(a0)
00014C0C                            		
00014C0C                            @no_dec:
00014C0C 6100                       		bsr.s	Sonic_Display
00014C0E 6100 0000                  		bsr.w	Sonic_RecordPos
00014C12 6100 0000                  		bsr.w	Sonic_Water
00014C16 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014C1C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014C22 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014C26 6700                       		beq.s	loc_12CA6
00014C28 4A28 001C                  		tst.b	$1C(a0)
00014C2C 6600                       		bne.s	loc_12CA6
00014C2E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014C34                            
00014C34                            loc_12CA6:
00014C34 6100 0000                  		bsr.w	Sonic_Animate
00014C38 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014C3C 6B00                       		bmi.s	loc_12CB6
00014C3E 4EB9 0000 0000             		jsr	TouchResponse
00014C44                            
00014C44                            loc_12CB6:
00014C44 6000 0000                  		bra.w	LoadSonicDynPLC
00014C48                            ; ===========================================================================
00014C48                            
00014C48                            Obj01_DoModes:
00014C48 7000                       		moveq	#0,d0
00014C4A 1028 0022                  		move.b	$22(a0),d0
00014C4E 0240 0006                  		andi.w	#6,d0
00014C52 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014C56 4EFB 1000                  		jmp	Obj01_Modes(pc,d1.w)
00014C5A                            ; ===========================================================================
00014C5A                            
00014C5A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014C5C 0000                       		dc.w Obj01_MdAir-Obj01_Modes
00014C5E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014C60 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014C62                            ; ===========================================================================
00014C62                            
00014C62                            Sonic_Display:				; XREF: loc_12C7E
00014C62 3028 0030                  		move.w	$30(a0),d0
00014C66 6700                       		beq.s	Obj01_Display
00014C68 5368 0030                  		subq.w	#1,$30(a0)
00014C6C E648                       		lsr.w	#3,d0
00014C6E 6400                       		bcc.s	Obj01_ChkInvin
00014C70                            
00014C70                            Obj01_Display:
00014C70 4EBA A50E                  		jsr	DisplaySprite
00014C74                            
00014C74                            Obj01_ChkInvin:
00014C74 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014C78 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014C7A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014C7E 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014C80 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014C84 6600                       		bne.b	Obj01_ChkShoes
00014C86 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014C8C                            
00014C8C                            Obj01_ChkShoes:
00014C8C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00014C90 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00014C92 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014C96 6700                       		beq.s	Obj01_ExitChk
00014C98 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014C9C 6600                       		bne.s	Obj01_ExitChk
00014C9E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014CA4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014CAA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014CB0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014CB6                            ; ===========================================================================
00014CB6                            
00014CB6                            Obj01_ExitChk:
00014CB6 4E75                       		rts
00014CB8                            
00014CB8                            ; ---------------------------------------------------------------------------
00014CB8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014CB8                            ; ---------------------------------------------------------------------------
00014CB8                            
00014CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CB8                            
00014CB8                            
00014CB8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014CB8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CBC 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014CC0 43F1 0000                  		lea	(a1,d0.w),a1
00014CC4 32E8 0008                  		move.w	8(a0),(a1)+
00014CC8 32E8 000C                  		move.w	$C(a0),(a1)+
00014CCC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014CD0 4E75                       		rts	
00014CD2                            ; End of function Sonic_RecordPos
00014CD2                            
00014CD2                            ; ---------------------------------------------------------------------------
00014CD2                            ; Subroutine for Sonic when he's underwater
00014CD2                            ; ---------------------------------------------------------------------------
00014CD2                            
00014CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CD2                            
00014CD2                            
00014CD2                            Sonic_Water:				; XREF: loc_12C7E
00014CD2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014CD8 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014CDA                            
00014CDA                            locret_12D80:
00014CDA 4E75                       		rts	
00014CDC                            ; ===========================================================================
00014CDC                            
00014CDC                            Obj01_InWater:
00014CDC 3038 F646                  		move.w	($FFFFF646).w,d0
00014CE0 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014CE4 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014CE6 08E8 0006 0022             		bset	#6,$22(a0)
00014CEC 66EC                       		bne.s	locret_12D80
00014CEE 6100 0000                  		bsr.w	StopDrowning
00014CF2 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014CF8 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014CFE E0E8 0010                  		asr	$10(a0)
00014D02 E0E8 0012                  		asr	$12(a0)
00014D06 E0E8 0012                  		asr	$12(a0)
00014D0A 67CE                       		beq.s	locret_12D80
00014D0C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014D12 303C 00AA                  		move.w	#$AA,d0
00014D16 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014D1C                            ; ===========================================================================
00014D1C                            
00014D1C                            Obj01_OutWater:
00014D1C 08A8 0006 0022             		bclr	#6,$22(a0)
00014D22 67B6                       		beq.s	locret_12D80
00014D24 6100 0000                  		bsr.w	StopDrowning
00014D28 E1E8 0012                  		asl	$12(a0)
00014D2C 6700 FFAC                  		beq.w	locret_12D80
00014D30 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014D36 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014D3C 6E00                       		bgt.s	loc_12E0E
00014D3E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014D44                            
00014D44                            loc_12E0E:
00014D44 303C 00AA                  		move.w	#$AA,d0
00014D48 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play splash sound
00014D4E                            ; End of function Sonic_Water
00014D4E                            
00014D4E                            ; ===========================================================================
00014D4E                            ; ---------------------------------------------------------------------------
00014D4E                            ; Modes	for controlling	Sonic
00014D4E                            ; ---------------------------------------------------------------------------
00014D4E                            
00014D4E                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014D4E 6100 0000                  		bsr.w	Sonic_Jump
00014D52 4A28 0039                  		tst.b	crawling(a0)
00014D56 6600                       		bne.s	@is_crawling
00014D58 6100 0000                  		bsr.w	Sonic_SlopeResist
00014D5C                            		
00014D5C                            @is_crawling:
00014D5C 6100 0000                  		bsr.w	Sonic_Move
00014D60 6100 0000                  		bsr.w	Sonic_LevelBound
00014D64 4EBA A400                  		jsr	SpeedToPos
00014D68 6100 0000                  		bsr.w	Sonic_AnglePos
00014D6C 4A28 0039                  		tst.b	crawling(a0)
00014D70 6600                       		bne.s	@is_crawling2
00014D72 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014D76                            		
00014D76                            @is_crawling2:
00014D76 4A68 003E                  		tst.w	$3E(a0)
00014D7A 6700                       		beq.s	@no_movelock
00014D7C 5368 003E                  		subq.w	#1,$3E(a0)
00014D80                            		
00014D80                            @no_movelock:
00014D80 103C 0000                  		move.b	#0,d0
00014D84 0838 0001 F602             		btst	#1,($FFFFF602).w
00014D8A 6700                       		beq.s	@not_crawling
00014D8C 6100 FD66                  		bsr.w	Obj01_ApplySpeedCap
00014D90 103C 0001                  		move.b	#1,d0
00014D94                            		
00014D94                            @not_crawling:
00014D94 1140 0039                  		move.b	d0,crawling(a0)
00014D98 4E75                       		rts	
00014D9A                            ; ===========================================================================
00014D9A                            
00014D9A                            Obj01_MdAir:				; XREF: Obj01_Modes
00014D9A 117C 0000 0039             		move.b	#0,crawling(a0)
00014DA0 6100 0000                  		bsr.w	Sonic_JumpHeight
00014DA4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014DA8 6100 0000                  		bsr.w	Sonic_LevelBound
00014DAC 4EBA A398                  		jsr	ObjectFall
00014DB0 0828 0006 0022             		btst	#6,$22(a0)
00014DB6 6700                       		beq.s	loc_12E5C
00014DB8 0468 0028 0012             		subi.w	#$28,$12(a0)
00014DBE                            
00014DBE                            loc_12E5C:
00014DBE 6100 0000                  		bsr.w	Sonic_JumpAngle
00014DC2 6100 0000                  		bsr.w	Sonic_Floor
00014DC6 4E75                       		rts	
00014DC8                            ; ===========================================================================
00014DC8                            
00014DC8                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014DC8 4E75                       		rts					; Nothing to see here
00014DCA                            ; ===========================================================================
00014DCA                            
00014DCA                            Obj01_MdJump:				; XREF: Obj01_Modes
00014DCA 117C 0000 0039             		move.b	#0,crawling(a0)
00014DD0 6100 0000                  		bsr.w	Sonic_JumpHeight
00014DD4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014DD8 6100 0000                  		bsr.w	Sonic_LevelBound
00014DDC 6100 0000                  		bsr.w 	Sonic_JumpAnimate
00014DE0 4EBA A364                  		jsr	ObjectFall
00014DE4 0828 0006 0022             		btst	#6,$22(a0)
00014DEA 6700                       		beq.s	loc_12EA6
00014DEC 0468 0028 0012             		subi.w	#$28,$12(a0)
00014DF2                            
00014DF2                            loc_12EA6:
00014DF2 6100 0000                  		bsr.w	Sonic_JumpAngle
00014DF6 6100 0000                  		bsr.w	Sonic_Floor
00014DFA 4E75                       		rts	
00014DFC                            ; ---------------------------------------------------------------------------
00014DFC                            ; Subroutine to	make Sonic walk/run
00014DFC                            ; ---------------------------------------------------------------------------
00014DFC                            
00014DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DFC                            
00014DFC                            
00014DFC                            Sonic_Move:				; XREF: Obj01_MdNormal
00014DFC 3C38 F760                  		move.w	($FFFFF760).w,d6
00014E00 3A38 F762                  		move.w	($FFFFF762).w,d5
00014E04 3838 F764                  		move.w	($FFFFF764).w,d4
00014E08 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014E0C 6600 0000                  		bne.w	loc_12FEE
00014E10 4A68 003E                  		tst.w	$3E(a0)
00014E14 6600 0000                  		bne.w	Obj01_ResetScr
00014E18 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014E1E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014E20 6100 0000                  		bsr.w	Sonic_MoveLeft
00014E24                            
00014E24                            Obj01_NotLeft:
00014E24 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014E2A 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014E2C 6100 0000                  		bsr.w	Sonic_MoveRight
00014E30                            
00014E30                            Obj01_NotRight:
00014E30 1028 0026                  		move.b	$26(a0),d0
00014E34 0600 0020                  		addi.b	#$20,d0
00014E38 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014E3C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014E40 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014E44 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014E48 08A8 0005 0022             		bclr	#5,$22(a0)
00014E4E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014E54 0828 0003 0022             		btst	#3,$22(a0)
00014E5A 6700                       		beq.s	Sonic_Balance
00014E5C 7000                       		moveq	#0,d0
00014E5E 1028 003D                  		move.b	$3D(a0),d0
00014E62 ED48                       		lsl.w	#6,d0
00014E64 43F8 D000                  		lea	($FFFFD000).w,a1
00014E68 43F1 0000                  		lea	(a1,d0.w),a1
00014E6C 4A29 0022                  		tst.b	$22(a1)
00014E70 6B00                       		bmi.s	Sonic_LookUp
00014E72 7200                       		moveq	#0,d1
00014E74 1229 0019                  		move.b	$19(a1),d1
00014E78 3401                       		move.w	d1,d2
00014E7A D442                       		add.w	d2,d2
00014E7C 5942                       		subq.w	#4,d2
00014E7E D268 0008                  		add.w	8(a0),d1
00014E82 9269 0008                  		sub.w	8(a1),d1
00014E86 0C41 0004                  		cmpi.w	#4,d1
00014E8A 6D00                       		blt.s	loc_12F6A
00014E8C B242                       		cmp.w	d2,d1
00014E8E 6C00                       		bge.s	loc_12F5A
00014E90 6000                       		bra.s	Sonic_LookUp
00014E92                            ; ===========================================================================
00014E92                            
00014E92                            Sonic_Balance:
00014E92 4EB9 0000 0000             		jsr	ObjHitFloor
00014E98 0C41 000C                  		cmpi.w	#$C,d1
00014E9C 6D00                       		blt.s	Sonic_LookUp
00014E9E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014EA4 6600                       		bne.s	loc_12F62
00014EA6                            
00014EA6                            loc_12F5A:
00014EA6 08A8 0000 0022             		bclr	#0,$22(a0)
00014EAC 6000                       		bra.s	loc_12F70
00014EAE                            ; ===========================================================================
00014EAE                            
00014EAE                            loc_12F62:
00014EAE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014EB4 6600                       		bne.s	Sonic_LookUp
00014EB6                            
00014EB6                            loc_12F6A:
00014EB6 08E8 0000 0022             		bset	#0,$22(a0)
00014EBC                            
00014EBC                            loc_12F70:
00014EBC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014EC2 6000                       		bra.s	Obj01_ResetScr
00014EC4                            ; ===========================================================================
00014EC4                            
00014EC4                            Sonic_LookUp:
00014EC4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014ECA 6700                       		beq.s	Sonic_Duck	; if not, branch
00014ECC 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014ED2 5238 C903                  		addq.b	#1,($FFFFC903).w
00014ED6 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014EDC 6500                       		bcs.s	Obj01_ResetScr_Part2
00014EDE 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014EE4 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014EEA 6700                       		beq.s	loc_12FC2
00014EEC 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014EF0 6000                       		bra.s	loc_12FC2
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            Sonic_Duck:
00014EF2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014EF8 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014EFA 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014F00 5238 C903                  		addq.b	#1,($FFFFC903).w
00014F04 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014F0A 6500                       		bcs.s	Obj01_ResetScr_Part2
00014F0C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014F12 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014F18 6700                       		beq.s	loc_12FC2
00014F1A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014F1E 6000                       		bra.s	loc_12FC2
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            Obj01_ResetScr:
00014F20 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00014F26                            		
00014F26                            Obj01_ResetScr_Part2:
00014F26 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014F2C 6700                       		beq.s	loc_12FC2	; if yes, branch
00014F2E 6400                       		bcc.s	loc_12FBE
00014F30 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014F34                            
00014F34                            loc_12FBE:
00014F34 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014F38                            
00014F38                            loc_12FC2:
00014F38 1038 F602                  		move.b	($FFFFF602).w,d0
00014F3C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014F40 6600                       		bne.s	loc_12FEE	; if yes, branch
00014F42 3028 0014                  		move.w	$14(a0),d0
00014F46 6700                       		beq.s	loc_12FEE
00014F48 6B00                       		bmi.s	loc_12FE2
00014F4A 9045                       		sub.w	d5,d0
00014F4C 6400                       		bcc.s	loc_12FDC
00014F4E 303C 0000                  		move.w	#0,d0
00014F52                            
00014F52                            loc_12FDC:
00014F52 3140 0014                  		move.w	d0,$14(a0)
00014F56 6000                       		bra.s	loc_12FEE
00014F58                            ; ===========================================================================
00014F58                            
00014F58                            loc_12FE2:
00014F58 D045                       		add.w	d5,d0
00014F5A 6400                       		bcc.s	loc_12FEA
00014F5C 303C 0000                  		move.w	#0,d0
00014F60                            
00014F60                            loc_12FEA:
00014F60 3140 0014                  		move.w	d0,$14(a0)
00014F64                            
00014F64                            loc_12FEE:
00014F64 1028 0026                  		move.b	$26(a0),d0
00014F68 4EB9 0000 2B7A             		jsr	(CalcSine).l
00014F6E C3E8 0014                  		muls.w	$14(a0),d1
00014F72 E081                       		asr.l	#8,d1
00014F74 3141 0010                  		move.w	d1,$10(a0)
00014F78 C1E8 0014                  		muls.w	$14(a0),d0
00014F7C E080                       		asr.l	#8,d0
00014F7E 3140 0012                  		move.w	d0,$12(a0)
00014F82                            
00014F82                            loc_1300C:
00014F82 1028 0026                  		move.b	$26(a0),d0
00014F86 0600 0040                  		addi.b	#$40,d0
00014F8A 6B00                       		bmi.s	locret_1307C
00014F8C 123C 0040                  		move.b	#$40,d1
00014F90 4A68 0014                  		tst.w	$14(a0)
00014F94 6700                       		beq.s	locret_1307C
00014F96 6B00                       		bmi.s	loc_13024
00014F98 4441                       		neg.w	d1
00014F9A                            
00014F9A                            loc_13024:
00014F9A 1028 0026                  		move.b	$26(a0),d0
00014F9E D001                       		add.b	d1,d0
00014FA0 3F00                       		move.w	d0,-(sp)
00014FA2 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014FA6 301F                       		move.w	(sp)+,d0
00014FA8 4A41                       		tst.w	d1
00014FAA 6A00                       		bpl.s	locret_1307C
00014FAC E141                       		asl.w	#8,d1
00014FAE 0600 0020                  		addi.b	#$20,d0
00014FB2 0200 00C0                  		andi.b	#$C0,d0
00014FB6 6700                       		beq.s	loc_13078
00014FB8 0C00 0040                  		cmpi.b	#$40,d0
00014FBC 6700                       		beq.s	loc_13066
00014FBE 0C00 0080                  		cmpi.b	#$80,d0
00014FC2 6700                       		beq.s	loc_13060
00014FC4 D368 0010                  		add.w	d1,$10(a0)
00014FC8 08E8 0005 0022             		bset	#5,$22(a0)
00014FCE 317C 0000 0014             		move.w	#0,$14(a0)
00014FD4 4E75                       		rts	
00014FD6                            ; ===========================================================================
00014FD6                            
00014FD6                            loc_13060:
00014FD6 9368 0012                  		sub.w	d1,$12(a0)
00014FDA 4E75                       		rts	
00014FDC                            ; ===========================================================================
00014FDC                            
00014FDC                            loc_13066:
00014FDC 9368 0010                  		sub.w	d1,$10(a0)
00014FE0 08E8 0005 0022             		bset	#5,$22(a0)
00014FE6 317C 0000 0014             		move.w	#0,$14(a0)
00014FEC 4E75                       		rts	
00014FEE                            ; ===========================================================================
00014FEE                            
00014FEE                            loc_13078:
00014FEE D368 0012                  		add.w	d1,$12(a0)
00014FF2                            
00014FF2                            locret_1307C:
00014FF2 4E75                       		rts	
00014FF4                            ; End of function Sonic_Move
00014FF4                            
00014FF4                            
00014FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FF4                            
00014FF4                            
00014FF4                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014FF4 3028 0014                  		move.w	$14(a0),d0
00014FF8 6700                       		beq.s	loc_13086
00014FFA 6A00                       		bpl.s	loc_130B2
00014FFC                            
00014FFC                            loc_13086:
00014FFC 08E8 0000 0022             		bset	#0,$22(a0)
00015002 6600                       		bne.s	loc_1309A
00015004 08A8 0005 0022             		bclr	#5,$22(a0)
0001500A 117C 0001 001D             		move.b	#1,$1D(a0)
00015010                            
00015010                            loc_1309A:
00015010 9045                       		sub.w	d5,d0
00015012 3206                       		move.w	d6,d1
00015014 4441                       		neg.w	d1
00015016 B041                       		cmp.w	d1,d0
00015018 6E00                       		bgt.s	loc_130A6
0001501A D045                       		add.w	d5,d0
0001501C B041                       		cmp.w	d1,d0
0001501E 6F00                       		ble.s	loc_130A6
00015020 3001                       		move.w	d1,d0
00015022                            
00015022                            loc_130A6:
00015022 3140 0014                  		move.w	d0,$14(a0)
00015026 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001502C 4E75                       		rts
0001502E                            ; ===========================================================================
0001502E                            
0001502E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001502E 9044                       		sub.w	d4,d0
00015030 6400                       		bcc.s	loc_130BA
00015032 303C FF80                  		move.w	#-$80,d0
00015036                            
00015036                            loc_130BA:
00015036 3140 0014                  		move.w	d0,$14(a0)
0001503A 1028 0026                  		move.b	$26(a0),d0
0001503E 0600 0020                  		addi.b	#$20,d0
00015042 0200 00C0                  		andi.b	#$C0,d0
00015046 6600                       		bne.s	locret_130E8
00015048 0C40 0400                  		cmpi.w	#$400,d0
0001504C 6D00                       		blt.s	locret_130E8
0001504E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00015054 08A8 0000 0022             		bclr	#0,$22(a0)
0001505A 303C 00A4                  		move.w	#$A4,d0
0001505E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
00015064                            
00015064                            locret_130E8:
00015064 4E75                       		rts	
00015066                            ; End of function Sonic_MoveLeft
00015066                            
00015066                            
00015066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015066                            
00015066                            
00015066                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00015066 3028 0014                  		move.w	$14(a0),d0
0001506A 6B00                       		bmi.s	loc_13118
0001506C 08A8 0000 0022             		bclr	#0,$22(a0)
00015072 6700                       		beq.s	loc_13104
00015074 08A8 0005 0022             		bclr	#5,$22(a0)
0001507A 117C 0001 001D             		move.b	#1,$1D(a0)
00015080                            
00015080                            loc_13104:
00015080 D045                       		add.w	d5,d0
00015082 B046                       		cmp.w	d6,d0
00015084 6D00                       		blt.s	loc_1310C
00015086 9045                       		sub.w	d5,d0
00015088 B046                       		cmp.w	d6,d0
0001508A 6C00                       		bge.s	loc_1310C
0001508C 3006                       		move.w	d6,d0
0001508E                            
0001508E                            loc_1310C:
0001508E 3140 0014                  		move.w	d0,$14(a0)
00015092 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015098 4E75                       		rts
0001509A                            ; ===========================================================================
0001509A                            
0001509A                            loc_13118:				; XREF: Sonic_MoveRight
0001509A D044                       		add.w	d4,d0
0001509C 6400                       		bcc.s	loc_13120
0001509E 303C 0080                  		move.w	#$80,d0
000150A2                            
000150A2                            loc_13120:
000150A2 3140 0014                  		move.w	d0,$14(a0)
000150A6 1028 0026                  		move.b	$26(a0),d0
000150AA 0600 0020                  		addi.b	#$20,d0
000150AE 0200 00C0                  		andi.b	#$C0,d0
000150B2 6600                       		bne.s	locret_1314E
000150B4 0C40 FC00                  		cmpi.w	#-$400,d0
000150B8 6E00                       		bgt.s	locret_1314E
000150BA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000150C0 08E8 0000 0022             		bset	#0,$22(a0)
000150C6 303C 00A4                  		move.w	#$A4,d0
000150CA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play stopping sound
000150D0                            
000150D0                            locret_1314E:
000150D0 4E75                       		rts	
000150D2                            ; End of function Sonic_MoveRight
000150D2                            
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            ; Subroutine to	change Sonic's speed as he rolls
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            
000150D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D2                            
000150D2                            
000150D2                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000150D2 3C38 F760                  		move.w	($FFFFF760).w,d6
000150D6 E346                       		asl.w	#1,d6
000150D8 3A38 F762                  		move.w	($FFFFF762).w,d5
000150DC E245                       		asr.w	#1,d5
000150DE 3838 F764                  		move.w	($FFFFF764).w,d4
000150E2 E444                       		asr.w	#2,d4
000150E4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000150E8 6600 0000                  		bne.w	loc_131CC
000150EC 4A68 003E                  		tst.w	$3E(a0)
000150F0 6600                       		bne.s	loc_13188
000150F2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000150F8 6700                       		beq.s	loc_1317C	; if not, branch
000150FA 6100 0000                  		bsr.w	Sonic_RollLeft
000150FE                            
000150FE                            loc_1317C:
000150FE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00015104 6700                       		beq.s	loc_13188	; if not, branch
00015106 6100 0000                  		bsr.w	Sonic_RollRight
0001510A                            
0001510A                            loc_13188:
0001510A 3028 0014                  		move.w	$14(a0),d0
0001510E 6700                       		beq.s	loc_131AA
00015110 6B00                       		bmi.s	loc_1319E
00015112 9045                       		sub.w	d5,d0
00015114 6400                       		bcc.s	loc_13198
00015116 303C 0000                  		move.w	#0,d0
0001511A                            
0001511A                            loc_13198:
0001511A 3140 0014                  		move.w	d0,$14(a0)
0001511E 6000                       		bra.s	loc_131AA
00015120                            ; ===========================================================================
00015120                            
00015120                            loc_1319E:				; XREF: Sonic_RollSpeed
00015120 D045                       		add.w	d5,d0
00015122 6400                       		bcc.s	loc_131A6
00015124 303C 0000                  		move.w	#0,d0
00015128                            
00015128                            loc_131A6:
00015128 3140 0014                  		move.w	d0,$14(a0)
0001512C                            
0001512C                            loc_131AA:
0001512C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00015130 6600                       		bne.s	loc_131CC	; if yes, branch
00015132 08A8 0002 0022             		bclr	#2,$22(a0)
00015138 117C 0013 0016             		move.b	#$13,$16(a0)
0001513E 117C 0009 0017             		move.b	#9,$17(a0)
00015144 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001514A 5B68 000C                  		subq.w	#5,$C(a0)
0001514E                            
0001514E                            loc_131CC:
0001514E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015154 6700                       		beq.s	@cont2
00015156 6400                       		bcc.s	@cont1
00015158 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001515C                            		
0001515C                            @cont1:
0001515C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015160                            		
00015160                            @cont2:
00015160 1028 0026                  		move.b	$26(a0),d0
00015164 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001516A C1E8 0014                  		muls.w	$14(a0),d0
0001516E E080                       		asr.l	#8,d0
00015170 3140 0012                  		move.w	d0,$12(a0)
00015174 C3E8 0014                  		muls.w	$14(a0),d1
00015178 E081                       		asr.l	#8,d1
0001517A 0C41 1000                  		cmpi.w	#$1000,d1
0001517E 6F00                       		ble.s	loc_131F0
00015180 323C 1000                  		move.w	#$1000,d1
00015184                            
00015184                            loc_131F0:
00015184 0C41 F000                  		cmpi.w	#-$1000,d1
00015188 6C00                       		bge.s	loc_131FA
0001518A 323C F000                  		move.w	#-$1000,d1
0001518E                            
0001518E                            loc_131FA:
0001518E 3141 0010                  		move.w	d1,$10(a0)
00015192 6000 FDEE                  		bra.w	loc_1300C
00015196                            ; End of function Sonic_RollSpeed
00015196                            
00015196                            
00015196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015196                            
00015196                            
00015196                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00015196 3028 0014                  		move.w	$14(a0),d0
0001519A 6700                       		beq.s	loc_1320A
0001519C 6A00                       		bpl.s	loc_13218
0001519E                            
0001519E                            loc_1320A:
0001519E 08E8 0000 0022             		bset	#0,$22(a0)
000151A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000151AA 4E75                       		rts	
000151AC                            ; ===========================================================================
000151AC                            
000151AC                            loc_13218:
000151AC 9044                       		sub.w	d4,d0
000151AE 6400                       		bcc.s	loc_13220
000151B0 303C FF80                  		move.w	#-$80,d0
000151B4                            
000151B4                            loc_13220:
000151B4 3140 0014                  		move.w	d0,$14(a0)
000151B8 4E75                       		rts	
000151BA                            ; End of function Sonic_RollLeft
000151BA                            
000151BA                            
000151BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151BA                            
000151BA                            
000151BA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000151BA 3028 0014                  		move.w	$14(a0),d0
000151BE 6B00                       		bmi.s	loc_1323A
000151C0 08A8 0000 0022             		bclr	#0,$22(a0)
000151C6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000151CC 4E75                       		rts	
000151CE                            ; ===========================================================================
000151CE                            
000151CE                            loc_1323A:
000151CE D044                       		add.w	d4,d0
000151D0 6400                       		bcc.s	loc_13242
000151D2 303C 0080                  		move.w	#$80,d0
000151D6                            
000151D6                            loc_13242:
000151D6 3140 0014                  		move.w	d0,$14(a0)
000151DA 4E75                       		rts	
000151DC                            ; End of function Sonic_RollRight
000151DC                            
000151DC                            ; ---------------------------------------------------------------------------
000151DC                            ; Subroutine to	change Sonic's direction while jumping
000151DC                            ; ---------------------------------------------------------------------------
000151DC                            
000151DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DC                            
000151DC                            
000151DC                            Sonic_ChgJumpDir:		; XREF: Obj01_MdAir; Obj01_MdJump
000151DC 3C38 F760                  		move.w	($FFFFF760).w,d6
000151E0 3A38 F762                  		move.w	($FFFFF762).w,d5
000151E4 E345                       		asl.w	#1,d5
000151E6 0828 0004 0022             		btst	#4,$22(a0)	
000151EC 6600                       		bne.s	Obj01_ResetScr2	
000151EE 3028 0010                  		move.w	$10(a0),d0	
000151F2 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000151F8 6700                       		beq.s	loc_13278; if not, branch	
000151FA 08E8 0000 0022             		bset	#0,$22(a0)	
00015200 9045                       		sub.w	d5,d0	
00015202 3206                       		move.w	d6,d1	
00015204 4441                       		neg.w	d1	
00015206 B041                       		cmp.w	d1,d0	
00015208 6E00                       		bgt.s	loc_13278	
0001520A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001520C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001520E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015210 3001                       		move.w	d1,d0
00015212                            
00015212                            loc_13278:
00015212 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015218 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001521A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015220 D045                       		add.w	d5,d0	
00015222 B046                       		cmp.w	d6,d0	
00015224 6D00                       		blt.s	Obj01_JumpMove
00015226 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015228 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001522A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001522C 3006                       		move.w	d6,d0
0001522E                            
0001522E                            Obj01_JumpMove:
0001522E 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00015232                            
00015232                            Obj01_ResetScr2:
00015232 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00015238 6700                       		beq.s	loc_132A4	; if yes, branch
0001523A 6400                       		bcc.s	loc_132A0
0001523C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015240                            
00015240                            loc_132A0:
00015240 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015244                            
00015244                            loc_132A4:
00015244 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001524A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001524C 3028 0010                  		move.w	$10(a0),d0
00015250 3200                       		move.w	d0,d1
00015252 EA41                       		asr.w	#5,d1
00015254 6700                       		beq.s	locret_132D2
00015256 6B00                       		bmi.s	loc_132C6
00015258 9041                       		sub.w	d1,d0
0001525A 6400                       		bcc.s	loc_132C0
0001525C 303C 0000                  		move.w	#0,d0
00015260                            
00015260                            loc_132C0:
00015260 3140 0010                  		move.w	d0,$10(a0)
00015264 4E75                       		rts	
00015266                            ; ===========================================================================
00015266                            
00015266                            loc_132C6:
00015266 9041                       		sub.w	d1,d0
00015268 6500                       		bcs.s	loc_132CE
0001526A 303C 0000                  		move.w	#0,d0
0001526E                            
0001526E                            loc_132CE:
0001526E 3140 0010                  		move.w	d0,$10(a0)
00015272                            
00015272                            locret_132D2:
00015272 4E75                       		rts	
00015274                            ; End of function Sonic_ChgJumpDir
00015274                            
00015274                            ; ===========================================================================
00015274                            ; ---------------------------------------------------------------------------
00015274                            ; Unused subroutine to squash Sonic
00015274                            ; ---------------------------------------------------------------------------
00015274 1028 0026                  		move.b	$26(a0),d0
00015278 0600 0020                  		addi.b	#$20,d0
0001527C 0200 00C0                  		andi.b	#$C0,d0
00015280 6600                       		bne.s	locret_13302
00015282 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015286 4A41                       		tst.w	d1
00015288 6A00                       		bpl.s	locret_13302
0001528A 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00015290 317C 0000 0010             		move.w	#0,$10(a0)
00015296 317C 0000 0012             		move.w	#0,$12(a0)
0001529C 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000152A2                            
000152A2                            locret_13302:
000152A2 4E75                       		rts	
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            
000152A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A4                            
000152A4                            
000152A4                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000152A4 2228 0008                  		move.l	8(a0),d1
000152A8 3028 0010                  		move.w	$10(a0),d0
000152AC 48C0                       		ext.l	d0
000152AE E180                       		asl.l	#8,d0
000152B0 D280                       		add.l	d0,d1
000152B2 4841                       		swap	d1
000152B4 3038 F728                  		move.w	($FFFFF728).w,d0
000152B8 0640 0010                  		addi.w	#$10,d0
000152BC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000152BE 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000152C0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000152C4 0640 0128                  		addi.w	#$128,d0
000152C8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000152CC 6600                       		bne.s	loc_13332
000152CE 0640 0040                  		addi.w	#$40,d0
000152D2                            
000152D2                            loc_13332:
000152D2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000152D4 6300                       		bls.s	Boundary_Sides	; if yes, branch
000152D6                            
000152D6                            loc_13336:
000152D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152DA 0640 00E0                  		addi.w	#$E0,d0
000152DE B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000152E2 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000152E4 4E75                       		rts	
000152E6                            ; ===========================================================================
000152E6                            
000152E6                            Boundary_Bottom:
000152E6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000152EC 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000152F0 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000152F6 6500 0000                  		bcs.w	KillSonic
000152FA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000152FE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015304 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001530A 4E75                       		rts	
0001530C                            ; ===========================================================================
0001530C                            
0001530C                            Boundary_Sides:
0001530C 3140 0008                  		move.w	d0,8(a0)
00015310 317C 0000 000A             		move.w	#0,$A(a0)
00015316 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001531C 317C 0000 0014             		move.w	#0,$14(a0)
00015322 60B2                       		bra.s	loc_13336
00015324                            ; End of function Sonic_LevelBound
00015324                            
00015324                            ; ---------------------------------------------------------------------------
00015324                            ; Subroutine allowing Sonic to jump
00015324                            ; ---------------------------------------------------------------------------
00015324                            
00015324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015324                            
00015324                            
00015324                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015324 1038 F603                  		move.b	($FFFFF603).w,d0
00015328 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001532C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015330 7000                       		moveq	#0,d0
00015332 1028 0026                  		move.b	$26(a0),d0
00015336 0600 0080                  		addi.b	#$80,d0
0001533A 6100 0000                  		bsr.w	sub_14D48
0001533E 0C41 0006                  		cmpi.w	#6,d1
00015342 6D00 0000                  		blt.w	locret_1348E
00015346 343C 0680                  		move.w	#$680,d2
0001534A 0828 0006 0022             		btst	#6,$22(a0)
00015350 6700                       		beq.s	loc_1341C
00015352 343C 0380                  		move.w	#$380,d2
00015356                            
00015356                            loc_1341C:
00015356 7000                       		moveq	#0,d0
00015358 1028 0026                  		move.b	$26(a0),d0
0001535C 0400 0040                  		subi.b	#$40,d0
00015360 4EB9 0000 2B7A             		jsr	(CalcSine).l
00015366 C3C2                       		muls.w	d2,d1
00015368 E081                       		asr.l	#8,d1
0001536A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001536E C1C2                       		muls.w	d2,d0
00015370 E080                       		asr.l	#8,d0
00015372 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00015376 08E8 0001 0022             		bset	#1,$22(a0)
0001537C 08A8 0005 0022             		bclr	#5,$22(a0)
00015382 588F                       		addq.l	#4,sp
00015384 117C 0001 003C             		move.b	#1,$3C(a0)
0001538A 4228 0038                  		clr.b	$38(a0)
0001538E 303C 00A0                  		move.w	#$A0,d0
00015392 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
00015398 117C 0013 0016             		move.b	#$13,$16(a0)
0001539E 117C 0009 0017             		move.b	#9,$17(a0)
000153A4 0828 0002 0022             		btst	#2,$22(a0)
000153AA 6600                       		bne.s	loc_13490
000153AC 117C 000E 0016             		move.b	#$E,$16(a0)
000153B2 117C 0007 0017             		move.b	#7,$17(a0)
000153B8 117C 001F 001C             		move.b	#$1F,$1C(a0)	; use "jumping"	animation
000153BE 08E8 0002 0022             		bset	#2,$22(a0)
000153C4 5A68 000C                  		addq.w	#5,$C(a0)
000153C8                            
000153C8                            locret_1348E:
000153C8 4E75                       		rts	
000153CA                            ; ===========================================================================
000153CA                            
000153CA                            loc_13490:
000153CA 08E8 0004 0022             		bset	#4,$22(a0)
000153D0 4E75                       		rts	
000153D2                            ; End of function Sonic_Jump
000153D2                            
000153D2                            
000153D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153D2                            
000153D2                            
000153D2                            Sonic_JumpAnimate:
000153D2 103C 0020                  		move.b #$20,d0 ;animation down
000153D6 4A68 0012                  		tst.w $12(a0)
000153DA 6A00                       		bpl.s @positive
000153DC 103C 001F                  		move.b #$1F,d0 ;animation up
000153E0                            
000153E0                            @positive:
000153E0 1140 001C                  		move.b d0,$1C(a0)
000153E4 4E75                       		rts
000153E6                            
000153E6                            Sonic_JumpHeight:			; XREF: Obj01_MdAir; Obj01_MdJump
000153E6 4A28 003C                  		tst.b	$3C(a0)
000153EA 6700                       		beq.s	loc_134C4
000153EC 323C FC00                  		move.w	#-$400,d1
000153F0 0828 0006 0022             		btst	#6,$22(a0)
000153F6 6700                       		beq.s	loc_134AE
000153F8 323C FE00                  		move.w	#-$200,d1
000153FC                            
000153FC                            loc_134AE:
000153FC B268 0012                  		cmp.w	$12(a0),d1
00015400 6F00                       		ble.s	locret_134C2
00015402 1038 F602                  		move.b	($FFFFF602).w,d0
00015406 0200 0030                  		andi.b	#$30,d0		; is B or C pressed?
0001540A 6600                       		bne.s	locret_134C2	; if yes, branch
0001540C 3141 0012                  		move.w	d1,$12(a0)
00015410                            
00015410                            locret_134C2:
00015410 4E75                       		rts	
00015412                            ; ===========================================================================
00015412                            
00015412                            loc_134C4:
00015412 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00015418 6C00                       		bge.s	locret_134D2
0001541A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00015420                            
00015420                            locret_134D2:
00015420 4E75                       		rts	
00015422                            ; End of function Sonic_JumpHeight
00015422                            
00015422                            ; ---------------------------------------------------------------------------
00015422                            ; Subroutine to	slow Sonic walking up a	slope
00015422                            ; ---------------------------------------------------------------------------
00015422                            
00015422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015422                            
00015422                            
00015422                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00015422 1028 0026                  		move.b	$26(a0),d0
00015426 0600 0060                  		addi.b	#$60,d0
0001542A 0C00 00C0                  		cmpi.b	#$C0,d0
0001542E 6400                       		bcc.s	locret_13508
00015430 1028 0026                  		move.b	$26(a0),d0
00015434 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001543A C1FC 0020                  		muls.w	#$20,d0
0001543E E080                       		asr.l	#8,d0
00015440 4A68 0014                  		tst.w	$14(a0)
00015444 6700                       		beq.s	locret_13508
00015446 6B00                       		bmi.s	loc_13504
00015448 4A40                       		tst.w	d0
0001544A 6700                       		beq.s	locret_13502
0001544C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00015450                            
00015450                            locret_13502:
00015450 4E75                       		rts	
00015452                            ; ===========================================================================
00015452                            
00015452                            loc_13504:
00015452 D168 0014                  		add.w	d0,$14(a0)
00015456                            
00015456                            locret_13508:
00015456 4E75                       		rts	
00015458                            ; End of function Sonic_SlopeResist
00015458                            
00015458                            ; ---------------------------------------------------------------------------
00015458                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015458                            ; ---------------------------------------------------------------------------
00015458                            
00015458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015458                            
00015458                            
00015458                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00015458 1028 0026                  		move.b	$26(a0),d0
0001545C 0600 0060                  		addi.b	#$60,d0
00015460 0C00 00C0                  		cmpi.b	#-$40,d0
00015464 6400                       		bcc.s	locret_13544
00015466 1028 0026                  		move.b	$26(a0),d0
0001546A 4EB9 0000 2B7A             		jsr	(CalcSine).l
00015470 C1FC 0050                  		muls.w	#$50,d0
00015474 E080                       		asr.l	#8,d0
00015476 4A68 0014                  		tst.w	$14(a0)
0001547A 6B00                       		bmi.s	loc_1353A
0001547C 4A40                       		tst.w	d0
0001547E 6A00                       		bpl.s	loc_13534
00015480 E480                       		asr.l	#2,d0
00015482                            
00015482                            loc_13534:
00015482 D168 0014                  		add.w	d0,$14(a0)
00015486 4E75                       		rts	
00015488                            ; ===========================================================================
00015488                            
00015488                            loc_1353A:
00015488 4A40                       		tst.w	d0
0001548A 6B00                       		bmi.s	loc_13540
0001548C E480                       		asr.l	#2,d0
0001548E                            
0001548E                            loc_13540:
0001548E D168 0014                  		add.w	d0,$14(a0)
00015492                            
00015492                            locret_13544:
00015492 4E75                       		rts	
00015494                            ; End of function Sonic_RollRepel
00015494                            
00015494                            ; ---------------------------------------------------------------------------
00015494                            ; Subroutine to	push Sonic down	a slope
00015494                            ; ---------------------------------------------------------------------------
00015494                            
00015494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015494                            
00015494                            
00015494                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00015494 4E71                       		nop	
00015496 4A28 0038                  		tst.b	$38(a0)
0001549A 6600                       		bne.s	locret_13580
0001549C 4A68 003E                  		tst.w	$3E(a0)
000154A0 6600                       		bne.s	locret_13580
000154A2 1028 0026                  		move.b	$26(a0),d0
000154A6 0600 0020                  		addi.b	#$20,d0
000154AA 0200 00C0                  		andi.b	#$C0,d0
000154AE 6700                       		beq.s	locret_13580
000154B0 3028 0014                  		move.w	$14(a0),d0
000154B4 6A00                       		bpl.s	loc_1356A
000154B6 4440                       		neg.w	d0
000154B8                            
000154B8                            loc_1356A:
000154B8 0C40 0280                  		cmpi.w	#$280,d0
000154BC 6400                       		bcc.s	locret_13580
000154BE 4268 0014                  		clr.w	$14(a0)
000154C2 08E8 0001 0022             		bset	#1,$22(a0)
000154C8 317C 001E 003E             		move.w	#$1E,$3E(a0)
000154CE                            
000154CE                            locret_13580:
000154CE 4E75                       		rts	
000154D0                            ; ===========================================================================
000154D0                            
000154D0                            loc_13582:
000154D0 4E75                       		rts	
000154D2                            ; End of function Sonic_SlopeRepel
000154D2                            
000154D2                            ; ---------------------------------------------------------------------------
000154D2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000154D2                            ; ---------------------------------------------------------------------------
000154D2                            
000154D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D2                            
000154D2                            
000154D2                            Sonic_JumpAngle:			; XREF: Obj01_MdAir; Obj01_MdJump
000154D2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154D6 6700                       		beq.s	locret_135A2	; if already 0,	branch
000154D8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000154DA                            
000154DA 5400                       		addq.b	#2,d0		; increase angle
000154DC 6400                       		bcc.s	loc_13596
000154DE 7000                       		moveq	#0,d0
000154E0                            
000154E0                            loc_13596:
000154E0 6000                       		bra.s	loc_1359E
000154E2                            ; ===========================================================================
000154E2                            
000154E2                            loc_13598:
000154E2 5500                       		subq.b	#2,d0		; decrease angle
000154E4 6400                       		bcc.s	loc_1359E
000154E6 7000                       		moveq	#0,d0
000154E8                            
000154E8                            loc_1359E:
000154E8 1140 0026                  		move.b	d0,$26(a0)
000154EC                            
000154EC                            locret_135A2:
000154EC 4E75                       		rts	
000154EE                            ; End of function Sonic_JumpAngle
000154EE                            
000154EE                            ; ---------------------------------------------------------------------------
000154EE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000154EE                            ; ---------------------------------------------------------------------------
000154EE                            
000154EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154EE                            
000154EE                            
000154EE                            Sonic_Floor:				; XREF: Obj01_MdAir; Obj01_MdJump
000154EE 3228 0010                  		move.w	$10(a0),d1
000154F2 3428 0012                  		move.w	$12(a0),d2
000154F6 4EB9 0000 2E48             		jsr	(CalcAngle).l
000154FC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015500 0400 0020                  		subi.b	#$20,d0
00015504 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015508 0200 00C0                  		andi.b	#$C0,d0
0001550C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015510 0C00 0040                  		cmpi.b	#$40,d0
00015514 6700 0000                  		beq.w	loc_13680
00015518 0C00 0080                  		cmpi.b	#$80,d0
0001551C 6700 0000                  		beq.w	loc_136E2
00015520 0C00 00C0                  		cmpi.b	#-$40,d0
00015524 6700 0000                  		beq.w	loc_1373E
00015528 6100 0000                  		bsr.w	Sonic_HitWall
0001552C 4A41                       		tst.w	d1
0001552E 6A00                       		bpl.s	loc_135F0
00015530 9368 0008                  		sub.w	d1,8(a0)
00015534 317C 0000 0010             		move.w	#0,$10(a0)
0001553A                            
0001553A                            loc_135F0:
0001553A 6100 0000                  		bsr.w	sub_14EB4
0001553E 4A41                       		tst.w	d1
00015540 6A00                       		bpl.s	loc_13602
00015542 D368 0008                  		add.w	d1,8(a0)
00015546 317C 0000 0010             		move.w	#0,$10(a0)
0001554C                            
0001554C                            loc_13602:
0001554C 6100 0000                  		bsr.w	Sonic_HitFloor
00015550 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015554 4A41                       		tst.w	d1
00015556 6A00                       		bpl.s	locret_1367E
00015558 1428 0012                  		move.b	$12(a0),d2
0001555C 5002                       		addq.b	#8,d2
0001555E 4402                       		neg.b	d2
00015560 B202                       		cmp.b	d2,d1
00015562 6C00                       		bge.s	loc_1361E
00015564 B002                       		cmp.b	d2,d0
00015566 6D00                       		blt.s	locret_1367E
00015568                            
00015568                            loc_1361E:
00015568 D368 000C                  		add.w	d1,$C(a0)
0001556C 1143 0026                  		move.b	d3,$26(a0)
00015570 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015574 117C 0000 001C             		move.b	#0,$1C(a0)
0001557A 1003                       		move.b	d3,d0
0001557C 0600 0020                  		addi.b	#$20,d0
00015580 0200 0040                  		andi.b	#$40,d0
00015584 6600                       		bne.s	loc_1365C
00015586 1003                       		move.b	d3,d0
00015588 0600 0010                  		addi.b	#$10,d0
0001558C 0200 0020                  		andi.b	#$20,d0
00015590 6700                       		beq.s	loc_1364E
00015592 E0E8 0012                  		asr	$12(a0)
00015596 6000                       		bra.s	loc_13670
00015598                            ; ===========================================================================
00015598                            
00015598                            loc_1364E:
00015598 317C 0000 0012             		move.w	#0,$12(a0)
0001559E 3168 0010 0014             		move.w	$10(a0),$14(a0)
000155A4 4E75                       		rts	
000155A6                            ; ===========================================================================
000155A6                            
000155A6                            loc_1365C:
000155A6 317C 0000 0010             		move.w	#0,$10(a0)
000155AC 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000155B2 6F00                       		ble.s	loc_13670
000155B4 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000155BA                            
000155BA                            loc_13670:
000155BA 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155C0 4A03                       		tst.b	d3
000155C2 6A00                       		bpl.s	locret_1367E
000155C4 4468 0014                  		neg.w	$14(a0)
000155C8                            
000155C8                            locret_1367E:
000155C8 4E75                       		rts	
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            loc_13680:
000155CA 6100 0000                  		bsr.w	Sonic_HitWall
000155CE 4A41                       		tst.w	d1
000155D0 6A00                       		bpl.s	loc_1369A
000155D2 9368 0008                  		sub.w	d1,8(a0)
000155D6 317C 0000 0010             		move.w	#0,$10(a0)
000155DC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000155E2 4E75                       		rts	
000155E4                            ; ===========================================================================
000155E4                            
000155E4                            loc_1369A:
000155E4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000155E8 4A41                       		tst.w	d1
000155EA 6A00                       		bpl.s	loc_136B4
000155EC 9368 000C                  		sub.w	d1,$C(a0)
000155F0 4A68 0012                  		tst.w	$12(a0)
000155F4 6A00                       		bpl.s	locret_136B2
000155F6 317C 0000 0012             		move.w	#0,$12(a0)
000155FC                            
000155FC                            locret_136B2:
000155FC 4E75                       		rts	
000155FE                            ; ===========================================================================
000155FE                            
000155FE                            loc_136B4:
000155FE 4A68 0012                  		tst.w	$12(a0)
00015602 6B00                       		bmi.s	locret_136E0
00015604 6100 0000                  		bsr.w	Sonic_HitFloor
00015608 4A41                       		tst.w	d1
0001560A 6A00                       		bpl.s	locret_136E0
0001560C D368 000C                  		add.w	d1,$C(a0)
00015610 1143 0026                  		move.b	d3,$26(a0)
00015614 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015618 117C 0000 001C             		move.b	#0,$1C(a0)
0001561E 317C 0000 0012             		move.w	#0,$12(a0)
00015624 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001562A                            
0001562A                            locret_136E0:
0001562A 4E75                       		rts	
0001562C                            ; ===========================================================================
0001562C                            
0001562C                            loc_136E2:
0001562C 6100 0000                  		bsr.w	Sonic_HitWall
00015630 4A41                       		tst.w	d1
00015632 6A00                       		bpl.s	loc_136F4
00015634 9368 0008                  		sub.w	d1,8(a0)
00015638 317C 0000 0010             		move.w	#0,$10(a0)
0001563E                            
0001563E                            loc_136F4:
0001563E 6100 0000                  		bsr.w	sub_14EB4
00015642 4A41                       		tst.w	d1
00015644 6A00                       		bpl.s	loc_13706
00015646 D368 0008                  		add.w	d1,8(a0)
0001564A 317C 0000 0010             		move.w	#0,$10(a0)
00015650                            
00015650                            loc_13706:
00015650 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015654 4A41                       		tst.w	d1
00015656 6A00                       		bpl.s	locret_1373C
00015658 9368 000C                  		sub.w	d1,$C(a0)
0001565C 1003                       		move.b	d3,d0
0001565E 0600 0020                  		addi.b	#$20,d0
00015662 0200 0040                  		andi.b	#$40,d0
00015666 6600                       		bne.s	loc_13726
00015668 317C 0000 0012             		move.w	#0,$12(a0)
0001566E 4E75                       		rts	
00015670                            ; ===========================================================================
00015670                            
00015670                            loc_13726:
00015670 1143 0026                  		move.b	d3,$26(a0)
00015674 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015678 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001567E 4A03                       		tst.b	d3
00015680 6A00                       		bpl.s	locret_1373C
00015682 4468 0014                  		neg.w	$14(a0)
00015686                            
00015686                            locret_1373C:
00015686 4E75                       		rts	
00015688                            ; ===========================================================================
00015688                            
00015688                            loc_1373E:
00015688 6100 0000                  		bsr.w	sub_14EB4
0001568C 4A41                       		tst.w	d1
0001568E 6A00                       		bpl.s	loc_13758
00015690 D368 0008                  		add.w	d1,8(a0)
00015694 317C 0000 0010             		move.w	#0,$10(a0)
0001569A 3168 0012 0014             		move.w	$12(a0),$14(a0)
000156A0 4E75                       		rts	
000156A2                            ; ===========================================================================
000156A2                            
000156A2                            loc_13758:
000156A2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000156A6 4A41                       		tst.w	d1
000156A8 6A00                       		bpl.s	loc_13772
000156AA 9368 000C                  		sub.w	d1,$C(a0)
000156AE 4A68 0012                  		tst.w	$12(a0)
000156B2 6A00                       		bpl.s	locret_13770
000156B4 317C 0000 0012             		move.w	#0,$12(a0)
000156BA                            
000156BA                            locret_13770:
000156BA 4E75                       		rts	
000156BC                            ; ===========================================================================
000156BC                            
000156BC                            loc_13772:
000156BC 4A68 0012                  		tst.w	$12(a0)
000156C0 6B00                       		bmi.s	locret_1379E
000156C2 6100 0000                  		bsr.w	Sonic_HitFloor
000156C6 4A41                       		tst.w	d1
000156C8 6A00                       		bpl.s	locret_1379E
000156CA D368 000C                  		add.w	d1,$C(a0)
000156CE 1143 0026                  		move.b	d3,$26(a0)
000156D2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000156D6 117C 0000 001C             		move.b	#0,$1C(a0)
000156DC 317C 0000 0012             		move.w	#0,$12(a0)
000156E2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000156E8                            
000156E8                            locret_1379E:
000156E8 4E75                       		rts	
000156EA                            ; End of function Sonic_Floor
000156EA                            
000156EA                            ; ---------------------------------------------------------------------------
000156EA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000156EA                            ; ---------------------------------------------------------------------------
000156EA                            
000156EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156EA                            
000156EA                            
000156EA                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000156EA 0828 0004 0022             		btst	#4,$22(a0)
000156F0 6700                       		beq.s	loc_137AE
000156F2 4E71                       		nop	
000156F4 4E71                       		nop	
000156F6 4E71                       		nop	
000156F8                            
000156F8                            loc_137AE:
000156F8 08A8 0005 0022             		bclr	#5,$22(a0)
000156FE 08A8 0001 0022             		bclr	#1,$22(a0)
00015704 08A8 0004 0022             		bclr	#4,$22(a0)
0001570A 0828 0002 0022             		btst	#2,$22(a0)
00015710 6700                       		beq.s	loc_137E4
00015712 08A8 0002 0022             		bclr	#2,$22(a0)
00015718 117C 0013 0016             		move.b	#$13,$16(a0)
0001571E 117C 0009 0017             		move.b	#9,$17(a0)
00015724 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001572A 5B68 000C                  		subq.w	#5,$C(a0)
0001572E                            
0001572E                            loc_137E4:
0001572E 117C 0000 003C             		move.b	#0,$3C(a0)
00015734 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001573A 4E75                       		rts	
0001573C                            ; End of function Sonic_ResetOnFloor
0001573C                            
0001573C                            ; ===========================================================================
0001573C                            ; ---------------------------------------------------------------------------
0001573C                            ; Sonic	when he	gets hurt
0001573C                            ; ---------------------------------------------------------------------------
0001573C                            
0001573C                            Obj01_Hurt:				; XREF: Obj01_Index
0001573C 4EBA 9A28                  		jsr	SpeedToPos
00015740 0668 0030 0012             		addi.w	#$30,$12(a0)
00015746 0828 0006 0022             		btst	#6,$22(a0)
0001574C 6700                       		beq.s	loc_1380C
0001574E 0468 0020 0012             		subi.w	#$20,$12(a0)
00015754                            
00015754                            loc_1380C:
00015754 6100 0000                  		bsr.w	Sonic_HurtStop
00015758 6100 FB4A                  		bsr.w	Sonic_LevelBound
0001575C 6100 F55A                  		bsr.w	Sonic_RecordPos
00015760 6100 0000                  		bsr.w	Sonic_Animate
00015764 6100 0000                  		bsr.w	LoadSonicDynPLC
00015768 4EFA 9A16                  		jmp	DisplaySprite
0001576C                            
0001576C                            ; ---------------------------------------------------------------------------
0001576C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001576C                            ; ---------------------------------------------------------------------------
0001576C                            
0001576C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001576C                            
0001576C                            
0001576C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001576C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015770 0640 00E0                  		addi.w	#$E0,d0
00015774 B068 000C                  		cmp.w	$C(a0),d0
00015778 6500 0000                  		bcs.w	KillSonic
0001577C 6100 FD70                  		bsr.w	Sonic_Floor
00015780 0828 0001 0022             		btst	#1,$22(a0)
00015786 6600                       		bne.s	locret_13860
00015788 7000                       		moveq	#0,d0
0001578A 3140 0012                  		move.w	d0,$12(a0)
0001578E 3140 0010                  		move.w	d0,$10(a0)
00015792 3140 0014                  		move.w	d0,$14(a0)
00015796 117C 0000 001C             		move.b	#0,$1C(a0)
0001579C 5528 0024                  		subq.b	#2,$24(a0)
000157A0 317C 0078 0030             		move.w	#$78,$30(a0)
000157A6                            
000157A6                            locret_13860:
000157A6 4E75                       		rts	
000157A8                            ; End of function Sonic_HurtStop
000157A8                            
000157A8                            ; ===========================================================================
000157A8                            ; ---------------------------------------------------------------------------
000157A8                            ; Sonic	when he	dies
000157A8                            ; ---------------------------------------------------------------------------
000157A8                            
000157A8                            Obj01_Death:				; XREF: Obj01_Index
000157A8 6100 0000                  		bsr.w	GameOver
000157AC 4EBA 9998                  		jsr	ObjectFall
000157B0 6100 F506                  		bsr.w	Sonic_RecordPos
000157B4 6100 0000                  		bsr.w	Sonic_Animate
000157B8 6100 0000                  		bsr.w	LoadSonicDynPLC
000157BC 4EFA 99C2                  		jmp	DisplaySprite
000157C0                            
000157C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C0                            
000157C0                            
000157C0                            GameOver:				; XREF: Obj01_Death
000157C0 3038 F704                  		move.w	($FFFFF704).w,d0
000157C4 0640 0100                  		addi.w	#$100,d0
000157C8 B068 000C                  		cmp.w	$C(a0),d0
000157CC 6A00 0000                  		bpl.w	locret_13900
000157D0 317C FFC8 0012             		move.w	#-$38,$12(a0)
000157D6 5428 0024                  		addq.b	#2,$24(a0)
000157DA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000157DE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000157E2 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000157E6 6600                       		bne.s	loc_138D4
000157E8 317C 0000 003A             		move.w	#0,$3A(a0)
000157EE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000157F4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000157FA 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015800 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015804                            
00015804                            loc_138C2:
00015804 303C 008F                  		move.w	#$8F,d0
00015808 4EB9 0000 12C6             		jsr	(PlaySound).l	; play game over music
0001580E 7003                       		moveq	#3,d0
00015810 4EF9 0000 1586             		jmp	(LoadPLC).l	; load game over patterns
00015816                            ; ===========================================================================
00015816                            
00015816                            loc_138D4:
00015816 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001581C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015820 6700                       		beq.s	locret_13900	; if not, branch
00015822 317C 0000 003A             		move.w	#0,$3A(a0)
00015828 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001582E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015834 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001583A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015840 60C2                       		bra.s	loc_138C2
00015842                            ; ===========================================================================
00015842                            
00015842                            locret_13900:
00015842 4E75                       		rts	
00015844                            ; End of function GameOver
00015844                            
00015844                            ; ===========================================================================
00015844                            ; ---------------------------------------------------------------------------
00015844                            ; Sonic	when the level is restarted
00015844                            ; ---------------------------------------------------------------------------
00015844                            
00015844                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015844 4A68 003A                  		tst.w	$3A(a0)
00015848 6700                       		beq.s	locret_13914
0001584A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001584E 6600                       		bne.s	locret_13914
00015850 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015856                            
00015856                            locret_13914:
00015856 4E75                       		rts	
00015858                            
00015858                            ; ---------------------------------------------------------------------------
00015858                            ; Sonic when he's drowning
00015858                            ; ---------------------------------------------------------------------------
00015858                             
00015858                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015858                             
00015858                             
00015858                            Sonic_Drowned:
00015858 6100 990C                          bsr.w   SpeedToPos              ; Make Sonic able to move
0001585C 0668 0010 0012                     addi.w  #$10,$12(a0)          ; Apply gravity
00015862 6100 F454                          bsr.w   Sonic_RecordPos    ; Record position
00015866 6100                               bsr.s   Sonic_Animate           ; Animate Sonic
00015868 6100 0000                          bsr.w   LoadSonicDynPLC           ; Load Sonic's DPLCs
0001586C 6000 9912                          bra.w   DisplaySprite           ; And finally, display Sonic
00015870                            
00015870                            ; ---------------------------------------------------------------------------
00015870                            ; Subroutine to	animate	Sonic's sprites
00015870                            ; ---------------------------------------------------------------------------
00015870                            
00015870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015870                            
00015870                            
00015870                            Sonic_Animate:				; XREF: Obj01_Control; et al
00015870 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015876 7000                       		moveq	#0,d0
00015878 1028 001C                  		move.b	$1C(a0),d0
0001587C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015880 6700                       		beq.s	SAnim_Do	; if not, branch
00015882 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015886 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001588C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015892                            
00015892                            SAnim_Do:
00015892 D040                       		add.w	d0,d0
00015894 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015898 1011                       		move.b	(a1),d0
0001589A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001589C 1228 0022                  		move.b	$22(a0),d1
000158A0 0201 0001                  		andi.b	#1,d1
000158A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000158AA 8328 0001                  		or.b	d1,1(a0)
000158AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000158B2 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000158B4 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000158B8                            
000158B8                            SAnim_Do2:
000158B8 7200                       		moveq	#0,d1
000158BA 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000158BE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000158C2 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000158C4                            
000158C4                            SAnim_Next:
000158C4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000158C8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000158CC                            
000158CC                            SAnim_Delay:
000158CC 4E75                       		rts	
000158CE                            ; ===========================================================================
000158CE                            
000158CE                            SAnim_End_FF:
000158CE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000158D0 6600                       		bne.s	SAnim_End_FE	; if not, branch
000158D2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000158D8 1029 0001                  		move.b	1(a1),d0	; read sprite number
000158DC 60E6                       		bra.s	SAnim_Next
000158DE                            ; ===========================================================================
000158DE                            
000158DE                            SAnim_End_FE:
000158DE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000158E0 6600                       		bne.s	SAnim_End_FD	; if not, branch
000158E2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000158E6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000158EA 9200                       		sub.b	d0,d1
000158EC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000158F0 60D2                       		bra.s	SAnim_Next
000158F2                            ; ===========================================================================
000158F2                            
000158F2                            SAnim_End_FD:
000158F2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000158F4 6600                       		bne.s	SAnim_End	; if not, branch
000158F6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000158FC                            
000158FC                            SAnim_End:
000158FC 4E75                       		rts	
000158FE                            ; ===========================================================================
000158FE                            
000158FE                            SAnim_WalkRun:				; XREF: SAnim_Do
000158FE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015902 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015904 5200                       		addq.b	#1,d0		; is animation walking/running?
00015906 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001590A 7200                       		moveq	#0,d1
0001590C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015910 1428 0022                  		move.b	$22(a0),d2
00015914 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015918 6600                       		bne.s	loc_13A70	; if yes, branch
0001591A 4600                       		not.b	d0		; reverse angle
0001591C                            
0001591C                            loc_13A70:
0001591C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00015920 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015922 7203                       		moveq	#3,d1
00015924                            
00015924                            loc_13A78:
00015924 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001592A B302                       		eor.b	d1,d2
0001592C 8528 0001                  		or.b	d2,1(a0)
00015930 0828 0005 0022             		btst	#5,$22(a0)
00015936 6600 0000                  		bne.w	SAnim_Push
0001593A E808                       		lsr.b	#4,d0		; divide angle by $10
0001593C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00015940 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015944 6A00                       		bpl.s	loc_13A9C
00015946 4442                       		neg.w	d2
00015948                            
00015948                            loc_13A9C:
00015948 43F9 0000 0000             		lea		(SonAni_Crawl).l,a1 ; use crawling animation
0001594E 4A28 0039                  		tst.b	crawling(a0)
00015952 6600                       		bne.s	loc_13AB4
00015954 43F9 0000 0000             		lea		(SonAni_Run).l,a1 ; use	running	animation
0001595A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001595E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00015960 43F9 0000 0000             		lea		(SonAni_Walk).l,a1 ; use walking animation
00015966 1200                       		move.b	d0,d1
00015968 E209                       		lsr.b	#1,d1
0001596A D001                       		add.b	d1,d0
0001596C                            
0001596C                            loc_13AB4:
0001596C D000                       		add.b	d0,d0
0001596E 1600                       		move.b	d0,d3
00015970 4442                       		neg.w	d2
00015972 0642 0800                  		addi.w	#$800,d2
00015976 6A00                       		bpl.s	loc_13AC2
00015978 7400                       		moveq	#0,d2
0001597A                            
0001597A                            loc_13AC2:
0001597A E04A                       		lsr.w	#8,d2
0001597C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015980 6100 FF36                  		bsr.w	SAnim_Do2
00015984 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015988 4E75                       		rts	
0001598A                            ; ===========================================================================
0001598A                            
0001598A                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001598A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001598C 6600                       		bne.s	SAnim_Push	; if not, branch
0001598E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015992 6A00                       		bpl.s	loc_13ADE
00015994 4442                       		neg.w	d2
00015996                            
00015996                            loc_13ADE:
00015996                            	;	lea	(SonAni_Roll2).l,a1 ; use fast animation
00015996                            	;	cmpi.w	#$600,d2	; is Sonic moving fast?
00015996                            	;	bcc.s	loc_13AF0	; if yes, branch
00015996                            	;	lea	(SonAni_Roll).l,a1 ; use slower	animation
00015996                            
00015996                            loc_13AF0:
00015996 4442                       		neg.w	d2
00015998 0642 0400                  		addi.w	#$400,d2
0001599C 6A00                       		bpl.s	loc_13AFA
0001599E 7400                       		moveq	#0,d2
000159A0                            
000159A0                            loc_13AFA:
000159A0 E04A                       		lsr.w	#8,d2
000159A2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000159A6 1228 0022                  		move.b	$22(a0),d1
000159AA 0201 0001                  		andi.b	#1,d1
000159AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000159B4 8328 0001                  		or.b	d1,1(a0)
000159B8 6000 FEFE                  		bra.w	SAnim_Do2
000159BC                            ; ===========================================================================
000159BC                            
000159BC                            SAnim_Push:				; XREF: SAnim_RollJump
000159BC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000159C0 6B00                       		bmi.s	loc_13B1E
000159C2 4442                       		neg.w	d2
000159C4                            
000159C4                            loc_13B1E:
000159C4 0642 0800                  		addi.w	#$800,d2
000159C8 6A00                       		bpl.s	loc_13B26
000159CA 7400                       		moveq	#0,d2
000159CC                            
000159CC                            loc_13B26:
000159CC EC4A                       		lsr.w	#6,d2
000159CE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000159D2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000159D8 1228 0022                  		move.b	$22(a0),d1
000159DC 0201 0001                  		andi.b	#1,d1
000159E0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000159E6 8328 0001                  		or.b	d1,1(a0)
000159EA 6000 FECC                  		bra.w	SAnim_Do2
000159EE                            ; End of function Sonic_Animate
000159EE                            
000159EE                            ; ===========================================================================
000159EE                            SonicAniData:
000159EE                            	include "_anim\Sonic.asm"
000159EE                            ; ---------------------------------------------------------------------------
000159EE                            ; Animation script - Sonic
000159EE                            ; ---------------------------------------------------------------------------
000159EE 0000                       		dc.w SonAni_Walk-SonicAniData ;0
000159F0 0000                       		dc.w SonAni_Run-SonicAniData ;1
000159F2 0000                       		dc.w SonAni_Blank-SonicAniData ;2
000159F4 0000                       		dc.w SonAni_Blank-SonicAniData ;3
000159F6 0000                       		dc.w SonAni_Push-SonicAniData ;4
000159F8 0000                       		dc.w SonAni_Wait-SonicAniData ;5
000159FA 0000                       		dc.w SonAni_Balance-SonicAniData ;6
000159FC 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
000159FE 0000                       		dc.w SonAni_Duck-SonicAniData ;8
00015A00 0000                       		dc.w SonAni_Bite-SonicAniData ;9
00015A02 0000                       		dc.w SonAni_Crawl-SonicAniData ;A
00015A04 0000                       		dc.w SonAni_Blank-SonicAniData ;B
00015A06 0000                       		dc.w SonAni_Blank-SonicAniData ;C
00015A08 0000                       		dc.w SonAni_Stop-SonicAniData ;D
00015A0A 0000                       		dc.w SonAni_Float1-SonicAniData ;E
00015A0C 0000                       		dc.w SonAni_Float2-SonicAniData ;F
00015A0E 0000                       		dc.w SonAni_Spring-SonicAniData ;10
00015A10 0000                       		dc.w SonAni_LZHang-SonicAniData ;11
00015A12 0000                       		dc.w SonAni_Blank-SonicAniData ;12
00015A14 0000                       		dc.w SonAni_Blank-SonicAniData ;13
00015A16 0000                       		dc.w SonAni_Blank-SonicAniData ;14
00015A18 0000                       		dc.w SonAni_Bubble-SonicAniData ;15
00015A1A 0000                       		dc.w SonAni_Blank-SonicAniData ;16
00015A1C 0000                       		dc.w SonAni_Drown-SonicAniData ;17
00015A1E 0000                       		dc.w SonAni_Death-SonicAniData ;18
00015A20 0000                       		dc.w SonAni_Blank-SonicAniData ;19
00015A22 0000                       		dc.w SonAni_Hurt-SonicAniData ;1A
00015A24 0000                       		dc.w SonAni_LZSlide-SonicAniData ;1B
00015A26 0000                       		dc.w SonAni_Blank-SonicAniData ;1C
00015A28 0000                       		dc.w SonAni_Float3-SonicAniData ;1D
00015A2A 0000                       		dc.w SonAni_Float4-SonicAniData ;1E
00015A2C 0000                       		dc.w SonAni_Jump1-SonicAniData ;1F
00015A2E 0000                       		dc.w SonAni_Jump2-SonicAniData ;20
00015A30 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0 ;Unused
00015A34 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015A3C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00015A44 FD3C 3D3E 3FFF FFFF        SonAni_Push:	dc.b $FD, $3C, $3D, $3E, $3F, $FF, $FF,	$FF
00015A4C 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00015A62 1F34 35FF                  SonAni_Balance:	dc.b $1F, $34, $35, $FF
00015A66 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015A6A 3F33 FF00                  SonAni_Duck:	dc.b $3F, $33, $FF, 0
00015A6E 0201 2E2F 30FD 00          SonAni_Bite:	dc.b 2, 1, $2E, $2F, $30, $FD, 0
00015A75 FF4A 4B4C 4DFF FFFF        SonAni_Crawl:	dc.b $FF, $4A, $4B, $4C, $4D, $FF, $FF,	$FF
00015A7D 0731 32FF                  SonAni_Stop:	dc.b 7,	$31, $32, $FF
00015A81 0736 FF                    SonAni_Float1:	dc.b 7,	$36, $FF
00015A84 0736 3742 3843 FF00        SonAni_Float2:	dc.b 7,	$36, $37, $42, $38, $43, $FF, 0
00015A8C 2F39 FD00                  SonAni_Spring:	dc.b $2F, $39, $FD, 0
00015A90 043A 3BFF                  SonAni_LZHang:	dc.b 4,	$3A, $3B, $FF
00015A94 0B46 460A 0BFD 0000        SonAni_Bubble:	dc.b $B, $46, $46, $A, $B, $FD,	0, 0
00015A9C 2F40 FF00                  SonAni_Drown:	dc.b $2F, $40, $FF, 0
00015AA0 0341 FF00                  SonAni_Death:	dc.b 3,	$41, $FF, 0
00015AA4 0744 45FF                  SonAni_Hurt:	dc.b 7, $44, $45, $FF
00015AA8 0744 45FF                  SonAni_LZSlide:	dc.b 7, $44, $45, $FF
00015AAC 0336 3742 3843 FF00        SonAni_Float3:	dc.b 3,	$36, $37, $42, $38, $43, $FF, 0
00015AB4 0336 FD00                  SonAni_Float4:	dc.b 3,	$36, $FD, 0 ;Unused?
00015AB8 0C47 48FE 0100             SonAni_Jump1:	dc.b $C, $47, $48, $FE, 1, 0
00015ABE 2F49 FD00                  SonAni_Jump2:	dc.b $2F, $49, $FD, 0
00015AC2                            		even
00015AC2                            		even
00015AC2                            
00015AC2                            ; ---------------------------------------------------------------------------
00015AC2                            ; Sonic	pattern	loading	subroutine
00015AC2                            ; ---------------------------------------------------------------------------
00015AC2                            
00015AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AC2                            
00015AC2                            
00015AC2                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015AC2 7000                       		moveq	#0,d0
00015AC4 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015AC8 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015ACC 6700                       		beq.s	locret_13C96
00015ACE 11C0 F766                  		move.b	d0,($FFFFF766).w
00015AD2 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015AD8 D040                       		add.w	d0,d0
00015ADA D4F2 0000                  		adda.w	(a2,d0.w),a2
00015ADE 7A00                       		moveq	#0,d5
00015AE0 1A1A                       		move.b	(a2)+,d5
00015AE2 5345                       		subq.w	#1,d5
00015AE4 6B00                       		bmi.s	locret_13C96
00015AE6 383C F000                  		move.w	#$F000,d4
00015AEA 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015AF0                            
00015AF0                            SPLC_ReadEntry:
00015AF0 7200                       		moveq	#0,d1
00015AF2 121A                       		move.b	(a2)+,d1
00015AF4 E149                       		lsl.w	#8,d1
00015AF6 121A                       		move.b	(a2)+,d1
00015AF8 3601                       		move.w	d1,d3
00015AFA E04B                       		lsr.w	#8,d3
00015AFC 0243 00F0                  		andi.w	#$F0,d3
00015B00 0643 0010                  		addi.w	#$10,d3
00015B04 0241 0FFF                  		andi.w	#$FFF,d1
00015B08 EB89                       		lsl.l	#5,d1
00015B0A D286                       		add.l	d6,d1
00015B0C 3404                       		move.w	d4,d2
00015B0E D843                       		add.w	d3,d4
00015B10 D843                       		add.w	d3,d4
00015B12 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
00015B18 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015B1C                            
00015B1C                            locret_13C96:
00015B1C 4E75                       		rts	
00015B1E                            ; End of function LoadSonicDynPLC
00015B1E                            
00015B1E                            ; ===========================================================================
00015B1E                            ; ---------------------------------------------------------------------------
00015B1E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015B1E                            ; ---------------------------------------------------------------------------
00015B1E                            
00015B1E                            Obj0A:					; XREF: Obj_Index
00015B1E 7000                       		moveq	#0,d0
00015B20 1028 0024                  		move.b	$24(a0),d0
00015B24 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015B28 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015B2C                            ; ===========================================================================
00015B2C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015B30 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015B34 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015B38 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015B3C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015B3E                            ; ===========================================================================
00015B3E                            
00015B3E                            Obj0A_Main:				; XREF: Obj0A_Index
00015B3E 5428 0024                  		addq.b	#2,$24(a0)
00015B42 217C 0001 4540 0004        		move.l	#Map_obj64,4(a0)
00015B4A 317C 8348 0002             		move.w	#$8348,2(a0)
00015B50 117C 0084 0001             		move.b	#$84,1(a0)
00015B56 117C 0010 0019             		move.b	#$10,$19(a0)
00015B5C 117C 0001 0018             		move.b	#1,$18(a0)
00015B62 1028 0028                  		move.b	$28(a0),d0
00015B66 6A00                       		bpl.s	loc_13D00
00015B68 5028 0024                  		addq.b	#8,$24(a0)
00015B6C 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B74 317C 0440 0002             		move.w	#$440,2(a0)
00015B7A 0240 007F                  		andi.w	#$7F,d0
00015B7E 1140 0033                  		move.b	d0,$33(a0)
00015B82 6000 0000                  		bra.w	Obj0A_Countdown
00015B86                            ; ===========================================================================
00015B86                            
00015B86                            loc_13D00:
00015B86 1140 001C                  		move.b	d0,$1C(a0)
00015B8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B90 317C FF78 0012             		move.w	#-$88,$12(a0)
00015B96                            
00015B96                            Obj0A_Animate:				; XREF: Obj0A_Index
00015B96 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B9C 4EB9 0000 C132             		jsr	AnimateSprite
00015BA2                            
00015BA2                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015BA2 3038 F646                  		move.w	($FFFFF646).w,d0
00015BA6 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015BAA 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015BAC 117C 0006 0024             		move.b	#6,$24(a0)
00015BB2 5E28 001C                  		addq.b	#7,$1C(a0)
00015BB6 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015BBC 6700                       		beq.s	Obj0A_Display
00015BBE 6000                       		bra.s	Obj0A_Display
00015BC0                            ; ===========================================================================
00015BC0                            
00015BC0                            Obj0A_Wobble:
00015BC0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015BC4 6700                       		beq.s	loc_13D44
00015BC6 5868 0030                  		addq.w	#4,$30(a0)
00015BCA                            
00015BCA                            loc_13D44:
00015BCA 1028 0026                  		move.b	$26(a0),d0
00015BCE 5228 0026                  		addq.b	#1,$26(a0)
00015BD2 0240 007F                  		andi.w	#$7F,d0
00015BD6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015BDC 1031 0000                  		move.b	(a1,d0.w),d0
00015BE0 4880                       		ext.w	d0
00015BE2 D068 0030                  		add.w	$30(a0),d0
00015BE6 3140 0008                  		move.w	d0,8(a0)
00015BEA 6100                       		bsr.s	Obj0A_ShowNumber
00015BEC 4EBA 9578                  		jsr	SpeedToPos
00015BF0 4A28 0001                  		tst.b	1(a0)
00015BF4 6A00                       		bpl.s	Obj0A_Delete
00015BF6 4EFA 9588                  		jmp	DisplaySprite
00015BFA                            ; ===========================================================================
00015BFA                            
00015BFA                            Obj0A_Delete:
00015BFA 4EFA 95C0                  		jmp	DeleteObject
00015BFE                            ; ===========================================================================
00015BFE                            
00015BFE                            Obj0A_Display:				; XREF: Obj0A_Index
00015BFE 6100                       		bsr.s	Obj0A_ShowNumber
00015C00 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C06 4EB9 0000 C132             		jsr	AnimateSprite
00015C0C 4EFA 9572                  		jmp	DisplaySprite
00015C10                            ; ===========================================================================
00015C10                            
00015C10                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015C10 4EFA 95AA                  		jmp	DeleteObject
00015C14                            ; ===========================================================================
00015C14                            
00015C14                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015C14 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015C1A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015C1C 5368 0038                  		subq.w	#1,$38(a0)
00015C20 6600                       		bne.s	Obj0A_Display2
00015C22 117C 000E 0024             		move.b	#$E,$24(a0)
00015C28 5E28 001C                  		addq.b	#7,$1C(a0)
00015C2C 60D0                       		bra.s	Obj0A_Display
00015C2E                            ; ===========================================================================
00015C2E                            
00015C2E                            Obj0A_Display2:
00015C2E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C34 4EB9 0000 C132             		jsr	AnimateSprite
00015C3A 4A28 0001                  		tst.b	1(a0)
00015C3E 6A00                       		bpl.s	Obj0A_Delete3
00015C40 4EFA 953E                  		jmp	DisplaySprite
00015C44                            ; ===========================================================================
00015C44                            
00015C44                            Obj0A_Delete3:
00015C44 4EFA 9576                  		jmp	DeleteObject
00015C48                            ; ===========================================================================
00015C48                            
00015C48                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C48 4A68 0038                  		tst.w	$38(a0)
00015C4C 6700                       		beq.s	locret_13E1A
00015C4E 5368 0038                  		subq.w	#1,$38(a0)
00015C52 6600                       		bne.s	locret_13E1A
00015C54 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015C5A 6400                       		bcc.s	locret_13E1A
00015C5C 317C 000F 0038             		move.w	#$F,$38(a0)
00015C62 4268 0012                  		clr.w	$12(a0)
00015C66 117C 0080 0001             		move.b	#$80,1(a0)
00015C6C 3028 0008                  		move.w	8(a0),d0
00015C70 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C74 0640 0080                  		addi.w	#$80,d0
00015C78 3140 0008                  		move.w	d0,8(a0)
00015C7C 3028 000C                  		move.w	$C(a0),d0
00015C80 9078 F704                  		sub.w	($FFFFF704).w,d0
00015C84 0640 0080                  		addi.w	#$80,d0
00015C88 3140 000A                  		move.w	d0,$A(a0)
00015C8C 117C 000C 0024             		move.b	#$C,$24(a0)
00015C92                            
00015C92                            locret_13E1A:
00015C92 4E75                       		rts	
00015C94                            ; ===========================================================================
00015C94                            Obj0A_WobbleData:
00015C94 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015CA5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015CB6 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015CC7 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015CD7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015CE4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CF1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CFE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015D0B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D14                            ; ===========================================================================
00015D14                            
00015D14                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015D14 4A68 002C                  		tst.w	$2C(a0)
00015D18 6600 0000                  		bne.w	loc_13F86
00015D1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015D22 6400 0000                  		bcc.w	locret_1408C
00015D26 0838 0006 D022             		btst	#6,($FFFFD022).w
00015D2C 6700 0000                  		beq.w	locret_1408C
00015D30 5368 0038                  		subq.w	#1,$38(a0)
00015D34 6A00 0000                  		bpl.w	loc_13FAC
00015D38 317C 003B 0038             		move.w	#59,$38(a0)
00015D3E 317C 0001 0036             		move.w	#1,$36(a0)
00015D44 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015D4A 0240 0001                  		andi.w	#1,d0
00015D4E 1140 0034                  		move.b	d0,$34(a0)
00015D52 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015D56 0C40 0019                  		cmpi.w	#$19,d0
00015D5A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015D5C 0C40 0014                  		cmpi.w	#$14,d0
00015D60 6700                       		beq.s	Obj0A_WarnSound
00015D62 0C40 000F                  		cmpi.w	#$F,d0
00015D66 6700                       		beq.s	Obj0A_WarnSound
00015D68 0C40 000C                  		cmpi.w	#$C,d0
00015D6C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015D6E 5328 0032                  		subq.b	#1,$32(a0)
00015D72 6A00                       		bpl.s	Obj0A_ReduceAir
00015D74 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015D7A 08E8 0007 0036             		bset	#7,$36(a0)
00015D80 6000                       		bra.s	Obj0A_ReduceAir
00015D82                            ; ===========================================================================
00015D82                            
00015D82                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015D82 303C 00C2                  		move.w	#$C2,d0
00015D86 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015D8C                            
00015D8C                            Obj0A_ReduceAir:
00015D8C 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015D90 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015D94 6100 0000                  		bsr.w	StopDrowning
00015D98 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015D9E 303C 00B2                  		move.w	#$B2,d0
00015DA2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play drowning sound
00015DA8 117C 000A 0034             		move.b	#$A,$34(a0)
00015DAE 317C 0001 0036             		move.w	#1,$36(a0)
00015DB4 317C 0078 002C             		move.w	#$78,$2C(a0)
00015DBA 2F08                       		move.l	a0,-(sp)
00015DBC 41F8 D000                  		lea	($FFFFD000).w,a0
00015DC0 6100 F928                  		bsr.w	Sonic_ResetOnFloor
00015DC4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015DCA 08E8 0001 0022             		bset	#1,$22(a0)
00015DD0 08E8 0007 0002             		bset	#7,2(a0)
00015DD6 317C 0000 0012             		move.w	#0,$12(a0)
00015DDC 317C 0000 0010             		move.w	#0,$10(a0)
00015DE2 317C 0000 0014             		move.w	#0,$14(a0)
00015DE8 117C 000A 0024             		move.b  #$A,$24(a0)       ; Force the character to drown
00015DEE 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015DF4 11FC 0000 FE1E             		move.b  #0,($FFFFFE1E).w      ; Stop the timer immediately
00015DFA 11FC 0001 FFBC             		move.b	#1,($FFFFFFBC).w	; Sonic drowned flag
00015E00 205F                       		movea.l	(sp)+,a0
00015E02 4E75                       		rts	
00015E04                            ; ===========================================================================
00015E04                            
00015E04                            loc_13F86:
00015E04 5368 002C                  		subq.w  #1,$2C(a0)
00015E08 6600                       		bne.s   loc_13FAC                       ; Make it jump straight to this location
00015E0A 11FC 0006 D024             		move.b  #6,($FFFFD024).w
00015E10 4E75                       		rts
00015E12                            ; ===========================================================================
00015E12                            
00015E12                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015E12 6000                       		bra.s	Obj0A_MakeItem
00015E14                            ; ===========================================================================
00015E14                            
00015E14                            loc_13FAC:
00015E14 4A68 0036                  		tst.w	$36(a0)
00015E18 6700 0000                  		beq.w	locret_1408C
00015E1C 5368 003A                  		subq.w	#1,$3A(a0)
00015E20 6A00 0000                  		bpl.w	locret_1408C
00015E24                            
00015E24                            Obj0A_MakeItem:
00015E24 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015E2A 0240 000F                  		andi.w	#$F,d0
00015E2E 3140 003A                  		move.w	d0,$3A(a0)
00015E32 4EBA 97E0                  		jsr	SingleObjLoad
00015E36 6600 0000                  		bne.w	locret_1408C
00015E3A 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015E3E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015E44 7006                       		moveq	#6,d0
00015E46 0838 0000 D022             		btst	#0,($FFFFD022).w
00015E4C 6700                       		beq.s	loc_13FF2
00015E4E 4440                       		neg.w	d0
00015E50 137C 0040 0026             		move.b	#$40,$26(a1)
00015E56                            
00015E56                            loc_13FF2:
00015E56 D169 0008                  		add.w	d0,8(a1)
00015E5A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015E60 137C 0006 0028             		move.b	#6,$28(a1)
00015E66 4A68 002C                  		tst.w	$2C(a0)
00015E6A 6700 0000                  		beq.w	loc_1403E
00015E6E 0268 0007 003A             		andi.w	#7,$3A(a0)
00015E74 0668 0000 003A             		addi.w	#0,$3A(a0)
00015E7A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015E7E 0440 000C                  		subi.w	#$C,d0
00015E82 3340 000C                  		move.w	d0,$C(a1)
00015E86 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015E8C 1340 0026                  		move.b	d0,$26(a1)
00015E90 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E94 0200 0003                  		andi.b	#3,d0
00015E98 6600                       		bne.s	loc_14082
00015E9A 137C 000E 0028             		move.b	#$E,$28(a1)
00015EA0 6000                       		bra.s	loc_14082
00015EA2                            ; ===========================================================================
00015EA2                            
00015EA2                            loc_1403E:
00015EA2 0828 0007 0036             		btst	#7,$36(a0)
00015EA8 6700                       		beq.s	loc_14082
00015EAA 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015EAE E24A                       		lsr.w	#1,d2
00015EB0 4EB9 0000 2B54             		jsr	(RandomNumber).l
00015EB6 0240 0003                  		andi.w	#3,d0
00015EBA 6600                       		bne.s	loc_1406A
00015EBC 08E8 0006 0036             		bset	#6,$36(a0)
00015EC2 6600                       		bne.s	loc_14082
00015EC4 1342 0028                  		move.b	d2,$28(a1)
00015EC8 337C 001C 0038             		move.w	#$1C,$38(a1)
00015ECE                            
00015ECE                            loc_1406A:
00015ECE 4A28 0034                  		tst.b	$34(a0)
00015ED2 6600                       		bne.s	loc_14082
00015ED4 08E8 0006 0036             		bset	#6,$36(a0)
00015EDA 6600                       		bne.s	loc_14082
00015EDC 1342 0028                  		move.b	d2,$28(a1)
00015EE0 337C 001C 0038             		move.w	#$1C,$38(a1)
00015EE6                            
00015EE6                            loc_14082:
00015EE6 5328 0034                  		subq.b	#1,$34(a0)
00015EEA 6A00                       		bpl.s	locret_1408C
00015EEC 4268 0036                  		clr.w	$36(a0)
00015EF0                            
00015EF0                            locret_1408C:
00015EF0 4E75                       		rts	
00015EF2                            
00015EF2                            ; ---------------------------------------------------------------------------
00015EF2                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015EF2                            ; ---------------------------------------------------------------------------
00015EF2                            
00015EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EF2                            
00015EF2                            
00015EF2                            StopDrowning:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015EF2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015EF8 4238 D372                  		clr.b	($FFFFD372).w
00015EFC 4E75                       		rts	
00015EFE                            ; End of function StopDrowning
00015EFE                            
00015EFE                            ; ===========================================================================
00015EFE                            Ani_obj0A:
00015EFE                            	include "_anim\obj0A.asm"
00015EFE                            ; ---------------------------------------------------------------------------
00015EFE                            ; Animation script - countdown numbers and bubbles (LZ)
00015EFE                            ; ---------------------------------------------------------------------------
00015EFE 0000                       		dc.w byte_140D6-Ani_obj0A
00015F00 0000                       		dc.w byte_140E0-Ani_obj0A
00015F02 0000                       		dc.w byte_140EA-Ani_obj0A
00015F04 0000                       		dc.w byte_140F4-Ani_obj0A
00015F06 0000                       		dc.w byte_140FE-Ani_obj0A
00015F08 0000                       		dc.w byte_14108-Ani_obj0A
00015F0A 0000                       		dc.w byte_14112-Ani_obj0A
00015F0C 0000                       		dc.w byte_14118-Ani_obj0A
00015F0E 0000                       		dc.w byte_14120-Ani_obj0A
00015F10 0000                       		dc.w byte_14128-Ani_obj0A
00015F12 0000                       		dc.w byte_14130-Ani_obj0A
00015F14 0000                       		dc.w byte_14138-Ani_obj0A
00015F16 0000                       		dc.w byte_14140-Ani_obj0A
00015F18 0000                       		dc.w byte_14148-Ani_obj0A
00015F1A 0000                       		dc.w byte_1414A-Ani_obj0A
00015F1C 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015F26 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015F30 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015F3A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015F44 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015F4E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015F58 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015F5E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015F66 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015F6E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015F76 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015F7E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015F86 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015F8E 0EFC                       byte_14148:	dc.b $E, $FC
00015F90 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015F96                            		even
00015F96                            		even
00015F96                            
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            Map_obj0A:
00015F96                            	include "_maps\obj0A.asm"
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            ; Sprite mappings - drowning countdown numbers (LZ)
00015F96                            ; ---------------------------------------------------------------------------
00015F96 0000                       		dc.w byte_14152-Map_obj0A
00015F98 01                         byte_14152:	dc.b 1
00015F99 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015F9E                            		even
00015F9E                            		even
00015F9E                            ; ===========================================================================
00015F9E                            LoadShieldDPLC:
00015F9E 2C3C 0000 0000             		move.l	#Art_Shield,d6
00015FA4 6000                       		bra.s	LoadShieldStarsDPLC
00015FA6                            		
00015FA6                            LoadStarsDPLC:
00015FA6 2C3C 0000 0000             		move.l	#Art_Stars,d6
00015FAC                            
00015FAC                            LoadShieldStarsDPLC:
00015FAC 45F9 0000 0000             		lea	(ShieldStarsDPLC).l,a2
00015FB2 383C A820                  		move.w	#$541*$20,d4
00015FB6 4EF9 0000 0000             		jmp	LoadDPLC
00015FBC                            ; ===========================================================================
00015FBC                            ; ---------------------------------------------------------------------------
00015FBC                            ; Object 38 - shield and invincibility stars
00015FBC                            ; ---------------------------------------------------------------------------
00015FBC                            
00015FBC                            Obj38:					; XREF: Obj_Index
00015FBC 7000                       		moveq	#0,d0
00015FBE 1028 0024                  		move.b	$24(a0),d0
00015FC2 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015FC6 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015FCA                            ; ===========================================================================
00015FCA 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015FCC 0000                       		dc.w Obj38_Shield-Obj38_Index
00015FCE 0000                       		dc.w Obj38_Stars-Obj38_Index
00015FD0                            ; ===========================================================================
00015FD0                            
00015FD0                            Obj38_Main:				; XREF: Obj38_Index
00015FD0 5428 0024                  		addq.b	#2,$24(a0)
00015FD4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015FDC 117C 0004 0001             		move.b	#4,1(a0)
00015FE2 117C 0001 0018             		move.b	#1,$18(a0)
00015FE8 117C 0010 0019             		move.b	#$10,$19(a0)
00015FEE 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015FF4 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015FF8 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015FFA 4E75                       		rts	
00015FFC                            ; ===========================================================================
00015FFC                            
00015FFC                            Obj38_DoStars:
00015FFC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00016000 4E75                       		rts	
00016002                            ; ===========================================================================
00016002                            
00016002                            Obj38_Shield:				; XREF: Obj38_Index
00016002 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00016006 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00016008 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001600C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001600E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00016014 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001601A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00016020 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00016026 4EB9 0000 C132             		jsr	AnimateSprite
0001602C 4EBA FF70                  		jsr	LoadShieldDPLC
00016030 4EFA 914E                  		jmp	DisplaySprite
00016034                            ; ===========================================================================
00016034                            
00016034                            Obj38_RmvShield:
00016034 4E75                       		rts	
00016036                            ; ===========================================================================
00016036                            
00016036                            Obj38_Delete:
00016036 4EFA 9184                  		jmp	DeleteObject
0001603A                            ; ===========================================================================
0001603A                            
0001603A                            Obj38_Stars:				; XREF: Obj38_Index
0001603A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001603E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00016040 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00016044 1228 001C                  		move.b	$1C(a0),d1
00016048 5301                       		subq.b	#1,d1
0001604A 6000                       		bra.s	Obj38_StarTrail
0001604C                            ; ===========================================================================
0001604C E909                       		lsl.b	#4,d1
0001604E 5801                       		addq.b	#4,d1
00016050 9001                       		sub.b	d1,d0
00016052 1228 0030                  		move.b	$30(a0),d1
00016056 9001                       		sub.b	d1,d0
00016058 5801                       		addq.b	#4,d1
0001605A 0201 000F                  		andi.b	#$F,d1
0001605E 1141 0030                  		move.b	d1,$30(a0)
00016062 6000                       		bra.s	Obj38_StarTrail2a
00016064                            ; ===========================================================================
00016064                            
00016064                            Obj38_StarTrail:			; XREF: Obj38_Stars
00016064 E709                       		lsl.b	#3,d1
00016066 1401                       		move.b	d1,d2
00016068 D201                       		add.b	d1,d1
0001606A D202                       		add.b	d2,d1
0001606C 5801                       		addq.b	#4,d1
0001606E 9001                       		sub.b	d1,d0
00016070 1228 0030                  		move.b	$30(a0),d1
00016074 9001                       		sub.b	d1,d0
00016076 5801                       		addq.b	#4,d1
00016078 0C01 0018                  		cmpi.b	#$18,d1
0001607C 6500                       		bcs.s	Obj38_StarTrail2
0001607E 7200                       		moveq	#0,d1
00016080                            
00016080                            Obj38_StarTrail2:
00016080 1141 0030                  		move.b	d1,$30(a0)
00016084                            
00016084                            Obj38_StarTrail2a:
00016084 43F8 CB00                  		lea	($FFFFCB00).w,a1
00016088 43F1 0000                  		lea	(a1,d0.w),a1
0001608C 3159 0008                  		move.w	(a1)+,8(a0)
00016090 3159 000C                  		move.w	(a1)+,$C(a0)
00016094 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001609A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000160A0 4EB9 0000 C132             		jsr	AnimateSprite
000160A6 4EBA FEFE                  		jsr	LoadStarsDPLC
000160AA 4EFA 90D4                  		jmp	DisplaySprite
000160AE                            ; ===========================================================================
000160AE                            
000160AE                            Obj38_Delete2:				; XREF: Obj38_Stars
000160AE 4EFA 910C                  		jmp	DeleteObject
000160B2                            ; ===========================================================================
000160B2                            	
000160B2                            ShieldStarsDPLC:
000160B2                            		include "_inc/obj38_DPLC.asm"
000160B2                            ; --------------------------------------------------------------------------------
000160B2                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
000160B2                            
000160B2                            SME_wct8N:	
000160B2 0000 0000                  		dc.w SME_wct8N_84-SME_wct8N, SME_wct8N_85-SME_wct8N	
000160B6 0000 0000                  		dc.w SME_wct8N_8E-SME_wct8N, SME_wct8N_97-SME_wct8N	
000160BA 0000 0000                  		dc.w SME_wct8N_A0-SME_wct8N, SME_wct8N_A9-SME_wct8N	
000160BE 0000 0000                  		dc.w SME_wct8N_B2-SME_wct8N, SME_wct8N_BB-SME_wct8N	
000160C2 0000 0000                  		dc.w SME_wct8N_C4-SME_wct8N, SME_wct8N_C9-SME_wct8N	
000160C6 0000 0000                  		dc.w SME_wct8N_D2-SME_wct8N, SME_wct8N_D7-SME_wct8N	
000160CA 0000 0000                  		dc.w SME_wct8N_DE-SME_wct8N, SME_wct8N_E9-SME_wct8N	
000160CE 0000 0000                  		dc.w SME_wct8N_F6-SME_wct8N, SME_wct8N_FF-SME_wct8N	
000160D2 0000 0000                  		dc.w SME_wct8N_10A-SME_wct8N, SME_wct8N_113-SME_wct8N	
000160D6 0000 0000                  		dc.w SME_wct8N_11E-SME_wct8N, SME_wct8N_127-SME_wct8N	
000160DA 0000 0000                  		dc.w SME_wct8N_12C-SME_wct8N, SME_wct8N_131-SME_wct8N	
000160DE 0000 0000                  		dc.w SME_wct8N_13A-SME_wct8N, SME_wct8N_13F-SME_wct8N	
000160E2 0000 0000                  		dc.w SME_wct8N_146-SME_wct8N, SME_wct8N_153-SME_wct8N	
000160E6 0000 0000                  		dc.w SME_wct8N_160-SME_wct8N, SME_wct8N_169-SME_wct8N	
000160EA 0000 0000                  		dc.w SME_wct8N_174-SME_wct8N, SME_wct8N_17D-SME_wct8N	
000160EE 0000 0000                  		dc.w SME_wct8N_188-SME_wct8N, SME_wct8N_18D-SME_wct8N	
000160F2 0000 0000                  		dc.w SME_wct8N_192-SME_wct8N, SME_wct8N_197-SME_wct8N	
000160F6 0000 0000                  		dc.w SME_wct8N_19C-SME_wct8N, SME_wct8N_1A5-SME_wct8N	
000160FA 0000 0000                  		dc.w SME_wct8N_1AE-SME_wct8N, SME_wct8N_1BB-SME_wct8N	
000160FE 0000 0000                  		dc.w SME_wct8N_1C8-SME_wct8N, SME_wct8N_1CD-SME_wct8N	
00016102 0000 0000                  		dc.w SME_wct8N_1D2-SME_wct8N, SME_wct8N_1D7-SME_wct8N	
00016106 0000 0000                  		dc.w SME_wct8N_1DC-SME_wct8N, SME_wct8N_1E5-SME_wct8N	
0001610A 0000 0000                  		dc.w SME_wct8N_1EC-SME_wct8N, SME_wct8N_1F5-SME_wct8N	
0001610E 0000 0000                  		dc.w SME_wct8N_1FC-SME_wct8N, SME_wct8N_201-SME_wct8N	
00016112 0000 0000                  		dc.w SME_wct8N_20A-SME_wct8N, SME_wct8N_211-SME_wct8N	
00016116 0000 0000                  		dc.w SME_wct8N_216-SME_wct8N, SME_wct8N_21F-SME_wct8N	
0001611A 0000 0000                  		dc.w SME_wct8N_228-SME_wct8N, SME_wct8N_22F-SME_wct8N	
0001611E 0000 0000                  		dc.w SME_wct8N_236-SME_wct8N, SME_wct8N_23D-SME_wct8N	
00016122 0000 0000                  		dc.w SME_wct8N_240-SME_wct8N, SME_wct8N_247-SME_wct8N	
00016126 0000 0000                  		dc.w SME_wct8N_24E-SME_wct8N, SME_wct8N_257-SME_wct8N	
0001612A 0000 0000                  		dc.w SME_wct8N_260-SME_wct8N, SME_wct8N_265-SME_wct8N	
0001612E 0000 0000                  		dc.w SME_wct8N_26C-SME_wct8N, SME_wct8N_271-SME_wct8N	
00016132 0000 0000                  		dc.w SME_wct8N_278-SME_wct8N, SME_wct8N_283-SME_wct8N	
00016136 00                         SME_wct8N_84:	dc.b 0	
00016137 0480 0080 0980 0080 09     SME_wct8N_85:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016140 0480 1280 1280 1280 12     SME_wct8N_8E:	dc.b 4, $80, $12, $80, $12, $80, $12, $80, $12	
00016149 0480 0080 0980 0080 09     SME_wct8N_97:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016152 0480 0080 0980 0080 09     SME_wct8N_A0:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
0001615B 0480 0080 0980 0080 09     SME_wct8N_A9:	dc.b 4, $80, 0, $80, 9, $80, 0, $80, 9	
00016164 0480 1280 1B80 1280 1B     SME_wct8N_B2:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
0001616D 0480 1280 1B80 1280 1B     SME_wct8N_BB:	dc.b 4, $80, $12, $80, $1B, $80, $12, $80, $1B	
00016176 0250 5280 58               SME_wct8N_C4:	dc.b 2, $50, $52, $80, $58	
0001617B 0450 5250 6150 6710 6D     SME_wct8N_C9:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00016184 0250 52B0 6F               SME_wct8N_D2:	dc.b 2, $50, $52, $B0, $6F	
00016189 0370 3030 7B50 7F          SME_wct8N_D7:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00016190 0550 8B20 9150 9400 9A53+  SME_wct8N_DE:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
0001619B 0650 8510 9B30 9D50 A130+  SME_wct8N_E9:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
000161A8 0450 AC10 B270 B420 BC     SME_wct8N_F6:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
000161B1 0530 C570 C920 D110 D453+  SME_wct8N_FF:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
000161BC 0450 BF10 D670 D820 E0     SME_wct8N_10A:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
000161C5 0550 8510 9B00 9170 E320+  SME_wct8N_113:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
000161D0 0470 EE50 F610 FC50 FE     SME_wct8N_11E:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
000161D9 0270 EEB1 04               SME_wct8N_127:	dc.b 2, $70, $EE, $B1, 4	
000161DE 0251 1081 16               SME_wct8N_12C:	dc.b 2, $51, $10, $81, $16	
000161E3 0451 1051 1F11 2551 27     SME_wct8N_131:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
000161EC 0251 10B1 2D               SME_wct8N_13A:	dc.b 2, $51, $10, $B1, $2D	
000161F1 0370 EE01 0481 39          SME_wct8N_13F:	dc.b 3, $70, $EE, 1, 4, $81, $39	
000161F8 0611 4811 4A81 4C01 5501+  SME_wct8N_146:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00016205 0651 4221 5711 5A11 5C81+  SME_wct8N_153:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00016212 0451 6711 6D81 6F11 78     SME_wct8N_160:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
0001621B 0521 8011 8371 8521 8D53+  SME_wct8N_169:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00016226 0451 7A11 9081 9211 9B     SME_wct8N_174:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
0001622F 0551 4281 9D11 5C11 A603+  SME_wct8N_17D:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
0001623A 0251 A8B1 AE               SME_wct8N_188:	dc.b 2, $51, $A8, $B1, $AE	
0001623F 0250 52B1 BA               SME_wct8N_18D:	dc.b 2, $50, $52, $B1, $BA	
00016244 0251 A8B1 C6               SME_wct8N_192:	dc.b 2, $51, $A8, $B1, $C6	
00016249 0250 52B1 D2               SME_wct8N_197:	dc.b 2, $50, $52, $B1, $D2	
0001624E 0451 DE11 E4B1 E601 F2     SME_wct8N_19C:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00016257 0451 F311 F9B1 FB03 26     SME_wct8N_1A5:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00016260 0612 07B2 0913 9803 9A13+  SME_wct8N_1AE:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
0001626D 06B2 1513 2713 A313 C913+  SME_wct8N_1BB:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
0001627A 0252 21B2 27               SME_wct8N_1C8:	dc.b 2, $52, $21, $B2, $27	
0001627F 0251 10B2 33               SME_wct8N_1CD:	dc.b 2, $51, $10, $B2, $33	
00016284 0252 21B2 3F               SME_wct8N_1D2:	dc.b 2, $52, $21, $B2, $3F	
00016289 0251 10B2 4B               SME_wct8N_1D7:	dc.b 2, $51, $10, $B2, $4B	
0001628E 0452 5712 5DB2 5F02 6B     SME_wct8N_1DC:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00016297 0372 6CB2 7403 DF          SME_wct8N_1E5:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
0001629E 0412 80B2 8202 6B53 D9     SME_wct8N_1EC:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
000162A7 03B2 8E03 D073 D1          SME_wct8N_1F5:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
000162AE 0234 57B4 4B               SME_wct8N_1FC:	dc.b 2, $34, $57, $B4, $4B	
000162B3 0434 6A74 5B34 6324 67     SME_wct8N_201:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
000162BC 0334 7DB4 6E24 7A          SME_wct8N_20A:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
000162C3 0252 9AB2 A0               SME_wct8N_211:	dc.b 2, $52, $9A, $B2, $A0	
000162C8 0452 AC72 B212 BA02 BC     SME_wct8N_216:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
000162D1 0412 BD72 BF22 C702 CA     SME_wct8N_21F:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
000162DA 0322 CB22 CEF2 D1          SME_wct8N_228:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
000162E1 03B2 E172 ED00 6F          SME_wct8N_22F:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
000162E8 0372 F532 FD23 01          SME_wct8N_236:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
000162EF 0183 04                    SME_wct8N_23D:	dc.b 1, $83, 4	
000162F2 0373 0D03 1533 16          SME_wct8N_240:	dc.b 3, $73, $D, 3, $15, $33, $16	
000162F9 03B3 2913 3503 37          SME_wct8N_247:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00016300 04B3 3833 4403 4803 49     SME_wct8N_24E:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00016309 04B3 4A33 5603 5A03 5B     SME_wct8N_257:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00016312 0283 5C73 65               SME_wct8N_260:	dc.b 2, $83, $5C, $73, $65	
00016317 0383 6D23 7613 79          SME_wct8N_265:	dc.b 3, $83, $6D, $23, $76, $13, $79	
0001631E 0283 7B73 84               SME_wct8N_26C:	dc.b 2, $83, $7B, $73, $84	
00016323 0383 6D23 8C13 8F          SME_wct8N_271:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
0001632A 0573 A613 AE53 B033 B603+  SME_wct8N_278:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00016335 0573 BB13 AE53 C333 B603+  SME_wct8N_283:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00016340                            		even
00016340                            		even
00016340                            ; ===========================================================================
00016340                            ; ---------------------------------------------------------------------------
00016340                            ; Object 4A - special stage entry from beta
00016340                            ; ---------------------------------------------------------------------------
00016340                            
00016340                            Obj4A:					; XREF: Obj_Index
00016340 7000                       		moveq	#0,d0
00016342 1028 0024                  		move.b	$24(a0),d0
00016346 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001634A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001634E                            ; ===========================================================================
0001634E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00016350 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00016352 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00016354                            ; ===========================================================================
00016354                            
00016354                            Obj4A_Main:				; XREF: Obj4A_Index
00016354 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00016358 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001635A 4E75                       		rts	
0001635C                            ; ===========================================================================
0001635C                            
0001635C                            Obj4A_Main2:
0001635C 5428 0024                  		addq.b	#2,$24(a0)
00016360 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00016368 117C 0004 0001             		move.b	#4,1(a0)
0001636E 117C 0001 0018             		move.b	#1,$18(a0)
00016374 117C 0038 0019             		move.b	#$38,$19(a0)
0001637A 317C 0541 0002             		move.w	#$541,2(a0)
00016380 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00016386                            
00016386                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00016386 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001638C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00016392 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00016398 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001639E 4EB9 0000 C132             		jsr	AnimateSprite
000163A4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000163AA 6600                       		bne.s	Obj4A_Display
000163AC 4A38 D000                  		tst.b	($FFFFD000).w
000163B0 6700                       		beq.s	Obj4A_Display
000163B2 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000163B8 303C 00A8                  		move.w	#$A8,d0
000163BC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000163C2                            
000163C2                            Obj4A_Display:
000163C2 4EFA 8DBC                  		jmp	DisplaySprite
000163C6                            ; ===========================================================================
000163C6                            
000163C6                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000163C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000163CA 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000163CC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000163D2 4EFA 8DE8                  		jmp	DeleteObject
000163D6                            ; ===========================================================================
000163D6                            
000163D6                            Obj4A_Wait:
000163D6 4E75                       		rts	
000163D8                            ; ===========================================================================
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            ; Object 08 - water splash (LZ)
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            
000163D8                            Obj08:					; XREF: Obj_Index
000163D8 7000                       		moveq	#0,d0
000163DA 1028 0024                  		move.b	$24(a0),d0
000163DE 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000163E2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000163E6                            ; ===========================================================================
000163E6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000163E8 0000                       		dc.w Obj08_Display-Obj08_Index
000163EA 0000                       		dc.w Obj08_Delete-Obj08_Index
000163EC                            ; ===========================================================================
000163EC                            
000163EC                            Obj08_Main:				; XREF: Obj08_Index
000163EC 5428 0024                  		addq.b	#2,$24(a0)
000163F0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000163F8 0028 0004 0001             		ori.b	#4,1(a0)
000163FE 117C 0001 0018             		move.b	#1,$18(a0)
00016404 117C 0010 0019             		move.b	#$10,$19(a0)
0001640A 317C 4259 0002             		move.w	#$4259,2(a0)
00016410 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016416                            
00016416                            Obj08_Display:				; XREF: Obj08_Index
00016416 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001641C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016422 4EB9 0000 C132             		jsr	AnimateSprite
00016428 4EFA 8D56                  		jmp	DisplaySprite
0001642C                            ; ===========================================================================
0001642C                            
0001642C                            Obj08_Delete:				; XREF: Obj08_Index
0001642C 4EFA 8D8E                  		jmp	DeleteObject	; delete when animation	is complete
00016430                            ; ===========================================================================
00016430                            Ani_obj38:
00016430                            	include "_anim\obj38.asm"
00016430                            ; ---------------------------------------------------------------------------
00016430                            ; Animation script - shield and invincibility stars
00016430                            ; ---------------------------------------------------------------------------
00016430 0000                       		dc.w byte_14356-Ani_obj38
00016432 0000                       		dc.w byte_1435E-Ani_obj38
00016434 0000                       		dc.w byte_14364-Ani_obj38
00016436 0000                       		dc.w byte_1437E-Ani_obj38
00016438 0000                       		dc.w byte_14398-Ani_obj38
0001643A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016442 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016448 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016459 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016462 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00016473 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001647C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001648D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00016496                            		even
00016496                            		even
00016496                            
00016496                            ; ---------------------------------------------------------------------------
00016496                            ; Sprite mappings - shield and invincibility stars
00016496                            ; ---------------------------------------------------------------------------
00016496                            Map_obj38:
00016496                            	include "_maps\obj38.asm"
00016496                            ; --------------------------------------------------------------------------------
00016496                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016496                            ; --------------------------------------------------------------------------------
00016496                            
00016496                            SME_yYnGN:	
00016496 0000 0000                  		dc.w SME_yYnGN_10-SME_yYnGN, SME_yYnGN_11-SME_yYnGN	
0001649A 0000 0000                  		dc.w SME_yYnGN_26-SME_yYnGN, SME_yYnGN_3B-SME_yYnGN	
0001649E 0000 0000                  		dc.w SME_yYnGN_50-SME_yYnGN, SME_yYnGN_65-SME_yYnGN	
000164A2 0000 0000                  		dc.w SME_yYnGN_7A-SME_yYnGN, SME_yYnGN_8F-SME_yYnGN	
000164A6 00                         SME_yYnGN_10:	dc.b 0	
000164A7 04                         SME_yYnGN_11:	dc.b 4	
000164A8 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000164AD E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164B2 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000164B7 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000164BC 04                         SME_yYnGN_26:	dc.b 4	
000164BD E80A 0800 E8               		dc.b $E8, $A, 8, 0, $E8	
000164C2 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164C7 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000164CC 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164D1 04                         SME_yYnGN_3B:	dc.b 4	
000164D2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000164D7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000164DC 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000164E1 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164E6 04                         SME_yYnGN_50:	dc.b 4	
000164E7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000164EC E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000164F1 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000164F6 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000164FB 04                         SME_yYnGN_65:	dc.b 4	
000164FC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00016501 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016506 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
0001650B 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
00016510 04                         SME_yYnGN_7A:	dc.b 4	
00016511 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00016516 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001651B 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00016520 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00016525 04                         SME_yYnGN_8F:	dc.b 4	
00016526 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001652B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00016530 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00016535 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001653A                            		even
0001653A                            		even
0001653A                            
0001653A                            Ani_obj4A:
0001653A                            	include "_anim\obj4A.asm"
0001653A                            ; ---------------------------------------------------------------------------
0001653A                            ; Animation script - special stage entry effect from beta
0001653A                            ; ---------------------------------------------------------------------------
0001653A 0000                       		dc.w byte_14458-Ani_obj4A
0001653C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00016550                            		even
00016550                            		even
00016550                            
00016550                            ; ---------------------------------------------------------------------------
00016550                            ; Sprite mappings - special stage entry	from beta
00016550                            ; ---------------------------------------------------------------------------
00016550                            Map_obj4A:
00016550                            	include "_maps\obj4A.asm"
00016550                            ; ---------------------------------------------------------------------------
00016550                            ; Sprite mappings - special stage entry	from beta
00016550                            ; ---------------------------------------------------------------------------
00016550 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00016554 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00016558 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001655C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00016560 03                         byte_1447C:	dc.b 3
00016561 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00016566 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001656B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00016570 03                         byte_1448C:	dc.b 3
00016571 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00016576 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001657B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00016580 05                         byte_1449C:	dc.b 5
00016581 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00016586 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001658B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00016590 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00016595 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001659A 09                         byte_144B6:	dc.b 9
0001659B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000165A0 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000165A5 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000165AA 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000165AF F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000165B4 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000165B9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000165BE 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000165C3 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000165C8 12                         byte_144E4:	dc.b $12
000165C9 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000165CE F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000165D3 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000165D8 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000165DD 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000165E2 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000165E7 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000165EC F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000165F1 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000165F6 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000165FB 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00016600 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00016605 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001660A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001660F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00016614 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00016619 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001661E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00016623 11                         byte_1453F:	dc.b $11
00016624 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00016629 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001662E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00016633 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00016638 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001663D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00016642 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00016647 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001664C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00016651 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00016656 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001665B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00016660 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00016665 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001666A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001666F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00016674 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00016679 09                         byte_14595:	dc.b 9
0001667A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001667F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00016684 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00016689 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001668E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00016693 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00016698 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001669D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000166A2 04                         		dc.b 4
000166A3 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000166A8                            		even
000166A8                            		even
000166A8                            
000166A8                            Ani_obj08:
000166A8                            	include "_anim\obj08.asm"
000166A8                            ; ---------------------------------------------------------------------------
000166A8                            ; Animation script - water splash (LZ)
000166A8                            ; ---------------------------------------------------------------------------
000166A8 0000                       		dc.w byte_145C6-Ani_obj08
000166AA 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000166B0                            		even
000166B0                            		even
000166B0                            
000166B0                            ; ---------------------------------------------------------------------------
000166B0                            ; Sprite mappings - water splash (LZ)
000166B0                            ; ---------------------------------------------------------------------------
000166B0                            Map_obj08:
000166B0                            	include "_maps\obj08.asm"
000166B0                            ; ---------------------------------------------------------------------------
000166B0                            ; Sprite mappings - water splash (LZ)
000166B0                            ; ---------------------------------------------------------------------------
000166B0 0000                       		dc.w byte_145D2-Map_obj08
000166B2 0000                       		dc.w byte_145DD-Map_obj08
000166B4 0000                       		dc.w byte_145E8-Map_obj08
000166B6 02                         byte_145D2:	dc.b 2
000166B7 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000166BC FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000166C1 02                         byte_145DD:	dc.b 2
000166C2 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000166C7 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000166CC 01                         byte_145E8:	dc.b 1
000166CD E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000166D2                            		even
000166D2                            		even
000166D2                            
000166D2                            
000166D2                            
000166D2                            
000166D2                            
000166D2                            
000166D2                            ; ===========================================================================
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            
000166D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166D2                            
000166D2                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000166D2 21F8 FFD0 F796             		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
000166D8 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
000166DC 6700                       		beq.s	SAP_First				; MJ: if not, branch
000166DE 21F8 FFD4 F796             		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
000166E4                            
000166E4                            SAP_First:
000166E4 0828 0003 0022             		btst	#3,$22(a0)
000166EA 6700                       		beq.s	loc_14602
000166EC 7000                       		moveq	#0,d0
000166EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000166F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166F6 4E75                       		rts	
000166F8                            ; ===========================================================================
000166F8                            
000166F8                            loc_14602:
000166F8 7003                       		moveq	#3,d0
000166FA 11C0 F768                  		move.b	d0,($FFFFF768).w
000166FE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016702 1028 0026                  		move.b	$26(a0),d0
00016706 0600 0020                  		addi.b	#$20,d0
0001670A 6A00                       		bpl.s	loc_14624
0001670C 1028 0026                  		move.b	$26(a0),d0
00016710 6A00                       		bpl.s	loc_1461E
00016712 5300                       		subq.b	#1,d0
00016714                            
00016714                            loc_1461E:
00016714 0600 0020                  		addi.b	#$20,d0
00016718 6000                       		bra.s	loc_14630
0001671A                            ; ===========================================================================
0001671A                            
0001671A                            loc_14624:
0001671A 1028 0026                  		move.b	$26(a0),d0
0001671E 6A00                       		bpl.s	loc_1462C
00016720 5200                       		addq.b	#1,d0
00016722                            
00016722                            loc_1462C:
00016722 0600 001F                  		addi.b	#$1F,d0
00016726                            
00016726                            loc_14630:
00016726 0200 00C0                  		andi.b	#$C0,d0
0001672A 0C00 0040                  		cmpi.b	#$40,d0
0001672E 6700 0000                  		beq.w	Sonic_WalkVertL
00016732 0C00 0080                  		cmpi.b	#$80,d0
00016736 6700 0000                  		beq.w	Sonic_WalkCeiling
0001673A 0C00 00C0                  		cmpi.b	#$C0,d0
0001673E 6700 0000                  		beq.w	Sonic_WalkVertR
00016742 3428 000C                  		move.w	$C(a0),d2
00016746 3628 0008                  		move.w	8(a0),d3
0001674A 7000                       		moveq	#0,d0
0001674C 1028 0016                  		move.b	$16(a0),d0
00016750 4880                       		ext.w	d0
00016752 D440                       		add.w	d0,d2
00016754 1028 0017                  		move.b	$17(a0),d0
00016758 4880                       		ext.w	d0
0001675A D640                       		add.w	d0,d3
0001675C 49F8 F768                  		lea	($FFFFF768).w,a4
00016760 367C 0010                  		movea.w	#$10,a3
00016764 3C3C 0000                  		move.w	#0,d6
00016768 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001676A 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001676E 3F01                       		move.w	d1,-(sp)
00016770 3428 000C                  		move.w	$C(a0),d2
00016774 3628 0008                  		move.w	8(a0),d3
00016778 7000                       		moveq	#0,d0
0001677A 1028 0016                  		move.b	$16(a0),d0
0001677E 4880                       		ext.w	d0
00016780 D440                       		add.w	d0,d2
00016782 1028 0017                  		move.b	$17(a0),d0
00016786 4880                       		ext.w	d0
00016788 4440                       		neg.w	d0
0001678A D640                       		add.w	d0,d3
0001678C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016790 367C 0010                  		movea.w	#$10,a3
00016794 3C3C 0000                  		move.w	#0,d6
00016798 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001679A 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001679E 301F                       		move.w	(sp)+,d0
000167A0 6100 0000                  		bsr.w	Sonic_Angle
000167A4 4A41                       		tst.w	d1
000167A6 6700                       		beq.s	locret_146BE
000167A8 6A00                       		bpl.s	loc_146C0
000167AA 0C41 FFF2                  		cmpi.w	#-$E,d1
000167AE 6D00                       		blt.s	locret_146E6
000167B0 D368 000C                  		add.w	d1,$C(a0)
000167B4                            
000167B4                            locret_146BE:
000167B4 4E75                       		rts	
000167B6                            ; ===========================================================================
000167B6                            
000167B6                            loc_146C0:
000167B6 0C41 000E                  		cmpi.w	#$E,d1
000167BA 6E00                       		bgt.s	loc_146CC
000167BC                            
000167BC                            loc_146C6:
000167BC D368 000C                  		add.w	d1,$C(a0)
000167C0 4E75                       		rts	
000167C2                            ; ===========================================================================
000167C2                            
000167C2                            loc_146CC:
000167C2 4A28 0038                  		tst.b	$38(a0)
000167C6 66F4                       		bne.s	loc_146C6
000167C8 08E8 0001 0022             		bset	#1,$22(a0)
000167CE 08A8 0005 0022             		bclr	#5,$22(a0)
000167D4 117C 0001 001D             		move.b	#1,$1D(a0)
000167DA 4E75                       		rts	
000167DC                            ; ===========================================================================
000167DC                            
000167DC                            locret_146E6:
000167DC 4E75                       		rts	
000167DE                            ; End of function Sonic_AnglePos
000167DE                            
000167DE                            ; ===========================================================================
000167DE 2428 0008                  		move.l	8(a0),d2
000167E2 3028 0010                  		move.w	$10(a0),d0
000167E6 48C0                       		ext.l	d0
000167E8 E180                       		asl.l	#8,d0
000167EA 9480                       		sub.l	d0,d2
000167EC 2142 0008                  		move.l	d2,8(a0)
000167F0 303C 0038                  		move.w	#$38,d0
000167F4 48C0                       		ext.l	d0
000167F6 E180                       		asl.l	#8,d0
000167F8 9680                       		sub.l	d0,d3
000167FA 2143 000C                  		move.l	d3,$C(a0)
000167FE 4E75                       		rts	
00016800                            ; ===========================================================================
00016800                            
00016800                            locret_1470A:
00016800 4E75                       		rts	
00016802                            ; ===========================================================================
00016802 2628 000C                  		move.l	$C(a0),d3
00016806 3028 0012                  		move.w	$12(a0),d0
0001680A 0440 0038                  		subi.w	#$38,d0
0001680E 3140 0012                  		move.w	d0,$12(a0)
00016812 48C0                       		ext.l	d0
00016814 E180                       		asl.l	#8,d0
00016816 9680                       		sub.l	d0,d3
00016818 2143 000C                  		move.l	d3,$C(a0)
0001681C 4E75                       		rts	
0001681E 4E75                       		rts	
00016820                            ; ===========================================================================
00016820 2428 0008                  		move.l	8(a0),d2
00016824 2628 000C                  		move.l	$C(a0),d3
00016828 3028 0010                  		move.w	$10(a0),d0
0001682C 48C0                       		ext.l	d0
0001682E E180                       		asl.l	#8,d0
00016830 9480                       		sub.l	d0,d2
00016832 3028 0012                  		move.w	$12(a0),d0
00016836 48C0                       		ext.l	d0
00016838 E180                       		asl.l	#8,d0
0001683A 9680                       		sub.l	d0,d3
0001683C 2142 0008                  		move.l	d2,8(a0)
00016840 2143 000C                  		move.l	d3,$C(a0)
00016844 4E75                       		rts	
00016846                            
00016846                            ; ---------------------------------------------------------------------------
00016846                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016846                            ; ---------------------------------------------------------------------------
00016846                            
00016846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016846                            
00016846                            
00016846                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016846 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001684A B240                       		cmp.w	d0,d1
0001684C 6F00                       		ble.s	loc_1475E
0001684E 1438 F768                  		move.b	($FFFFF768).w,d2
00016852 3200                       		move.w	d0,d1
00016854                            
00016854                            loc_1475E:
00016854 0802 0000                  		btst	#0,d2
00016858 6600                       		bne.s	loc_1476A
0001685A 1142 0026                  		move.b	d2,$26(a0)
0001685E 4E75                       		rts	
00016860                            ; ===========================================================================
00016860                            
00016860                            loc_1476A:
00016860 1428 0026                  		move.b	$26(a0),d2
00016864 0602 0020                  		addi.b	#$20,d2
00016868 0202 00C0                  		andi.b	#$C0,d2
0001686C 1142 0026                  		move.b	d2,$26(a0)
00016870 4E75                       		rts	
00016872                            ; End of function Sonic_Angle
00016872                            
00016872                            ; ---------------------------------------------------------------------------
00016872                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016872                            ; ---------------------------------------------------------------------------
00016872                            
00016872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016872                            
00016872                            
00016872                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016872 3428 000C                  		move.w	$C(a0),d2
00016876 3628 0008                  		move.w	8(a0),d3
0001687A 7000                       		moveq	#0,d0
0001687C 1028 0017                  		move.b	$17(a0),d0
00016880 4880                       		ext.w	d0
00016882 4440                       		neg.w	d0
00016884 D440                       		add.w	d0,d2
00016886 1028 0016                  		move.b	$16(a0),d0
0001688A 4880                       		ext.w	d0
0001688C D640                       		add.w	d0,d3
0001688E 49F8 F768                  		lea	($FFFFF768).w,a4
00016892 367C 0010                  		movea.w	#$10,a3
00016896 3C3C 0000                  		move.w	#0,d6
0001689A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001689C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000168A0 3F01                       		move.w	d1,-(sp)
000168A2 3428 000C                  		move.w	$C(a0),d2
000168A6 3628 0008                  		move.w	8(a0),d3
000168AA 7000                       		moveq	#0,d0
000168AC 1028 0017                  		move.b	$17(a0),d0
000168B0 4880                       		ext.w	d0
000168B2 D440                       		add.w	d0,d2
000168B4 1028 0016                  		move.b	$16(a0),d0
000168B8 4880                       		ext.w	d0
000168BA D640                       		add.w	d0,d3
000168BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000168C0 367C 0010                  		movea.w	#$10,a3
000168C4 3C3C 0000                  		move.w	#0,d6
000168C8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000168CA 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000168CE 301F                       		move.w	(sp)+,d0
000168D0 6100 FF74                  		bsr.w	Sonic_Angle
000168D4 4A41                       		tst.w	d1
000168D6 6700                       		beq.s	locret_147F0
000168D8 6A00                       		bpl.s	loc_147F2
000168DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000168DE 6D00 FF20                  		blt.w	locret_1470A
000168E2 D368 0008                  		add.w	d1,8(a0)
000168E6                            
000168E6                            locret_147F0:
000168E6 4E75                       		rts	
000168E8                            ; ===========================================================================
000168E8                            
000168E8                            loc_147F2:
000168E8 0C41 000E                  		cmpi.w	#$E,d1
000168EC 6E00                       		bgt.s	loc_147FE
000168EE                            
000168EE                            loc_147F8:
000168EE D368 0008                  		add.w	d1,8(a0)
000168F2 4E75                       		rts	
000168F4                            ; ===========================================================================
000168F4                            
000168F4                            loc_147FE:
000168F4 4A28 0038                  		tst.b	$38(a0)
000168F8 66F4                       		bne.s	loc_147F8
000168FA 08E8 0001 0022             		bset	#1,$22(a0)
00016900 08A8 0005 0022             		bclr	#5,$22(a0)
00016906 117C 0001 001D             		move.b	#1,$1D(a0)
0001690C 4E75                       		rts	
0001690E                            ; End of function Sonic_WalkVertR
0001690E                            
0001690E                            ; ---------------------------------------------------------------------------
0001690E                            ; Subroutine allowing Sonic to walk upside-down
0001690E                            ; ---------------------------------------------------------------------------
0001690E                            
0001690E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001690E                            
0001690E                            
0001690E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001690E 3428 000C                  		move.w	$C(a0),d2
00016912 3628 0008                  		move.w	8(a0),d3
00016916 7000                       		moveq	#0,d0
00016918 1028 0016                  		move.b	$16(a0),d0
0001691C 4880                       		ext.w	d0
0001691E 9440                       		sub.w	d0,d2
00016920 0A42 000F                  		eori.w	#$F,d2
00016924 1028 0017                  		move.b	$17(a0),d0
00016928 4880                       		ext.w	d0
0001692A D640                       		add.w	d0,d3
0001692C 49F8 F768                  		lea	($FFFFF768).w,a4
00016930 367C FFF0                  		movea.w	#-$10,a3
00016934 3C3C 0800                  		move.w	#$0800,d6
00016938 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001693A 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001693E 3F01                       		move.w	d1,-(sp)
00016940 3428 000C                  		move.w	$C(a0),d2
00016944 3628 0008                  		move.w	8(a0),d3
00016948 7000                       		moveq	#0,d0
0001694A 1028 0016                  		move.b	$16(a0),d0
0001694E 4880                       		ext.w	d0
00016950 9440                       		sub.w	d0,d2
00016952 0A42 000F                  		eori.w	#$F,d2
00016956 1028 0017                  		move.b	$17(a0),d0
0001695A 4880                       		ext.w	d0
0001695C 9640                       		sub.w	d0,d3
0001695E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016962 367C FFF0                  		movea.w	#-$10,a3
00016966 3C3C 0800                  		move.w	#$0800,d6
0001696A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001696C 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00016970 301F                       		move.w	(sp)+,d0
00016972 6100 FED2                  		bsr.w	Sonic_Angle
00016976 4A41                       		tst.w	d1
00016978 6700                       		beq.s	locret_14892
0001697A 6A00                       		bpl.s	loc_14894
0001697C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016980 6D00 FE5A                  		blt.w	locret_146E6
00016984 9368 000C                  		sub.w	d1,$C(a0)
00016988                            
00016988                            locret_14892:
00016988 4E75                       		rts	
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            loc_14894:
0001698A 0C41 000E                  		cmpi.w	#$E,d1
0001698E 6E00                       		bgt.s	loc_148A0
00016990                            
00016990                            loc_1489A:
00016990 9368 000C                  		sub.w	d1,$C(a0)
00016994 4E75                       		rts	
00016996                            ; ===========================================================================
00016996                            
00016996                            loc_148A0:
00016996 4A28 0038                  		tst.b	$38(a0)
0001699A 66F4                       		bne.s	loc_1489A
0001699C 08E8 0001 0022             		bset	#1,$22(a0)
000169A2 08A8 0005 0022             		bclr	#5,$22(a0)
000169A8 117C 0001 001D             		move.b	#1,$1D(a0)
000169AE 4E75                       		rts	
000169B0                            ; End of function Sonic_WalkCeiling
000169B0                            
000169B0                            ; ---------------------------------------------------------------------------
000169B0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000169B0                            ; ---------------------------------------------------------------------------
000169B0                            
000169B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169B0                            
000169B0                            
000169B0                            Sonic_WalkVertL:
000169B0 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
000169B4 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
000169B8 7000                       		moveq	#0,d0					; MJ: clear d0
000169BA 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
000169BE 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000169C0 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
000169C2 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
000169C6 4880                       		ext.w	d0					; MJ: set left byte pos or neg
000169C8 9640                       		sub.w	d0,d3					; MJ: subtract from X position
000169CA 0A43 000F                  		eori.w	#$F,d3
000169CE 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
000169D2 367C FFF0                  		movea.w	#-$10,a3
000169D6 3C3C 0400                  		move.w	#$400,d6
000169DA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000169DC 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000169E0 3F01                       		move.w	d1,-(sp)
000169E2 3428 000C                  		move.w	$C(a0),d2
000169E6 3628 0008                  		move.w	8(a0),d3
000169EA 7000                       		moveq	#0,d0
000169EC 1028 0017                  		move.b	$17(a0),d0
000169F0 4880                       		ext.w	d0
000169F2 D440                       		add.w	d0,d2
000169F4 1028 0016                  		move.b	$16(a0),d0
000169F8 4880                       		ext.w	d0
000169FA 9640                       		sub.w	d0,d3
000169FC 0A43 000F                  		eori.w	#$F,d3
00016A00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016A04 367C FFF0                  		movea.w	#-$10,a3
00016A08 3C3C 0400                  		move.w	#$400,d6
00016A0C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016A0E 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00016A12 301F                       		move.w	(sp)+,d0
00016A14 6100 FE30                  		bsr.w	Sonic_Angle
00016A18 4A41                       		tst.w	d1
00016A1A 6700                       		beq.s	locret_14934
00016A1C 6A00                       		bpl.s	loc_14936
00016A1E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016A22 6D00 FDDC                  		blt.w	locret_1470A
00016A26 9368 0008                  		sub.w	d1,8(a0)
00016A2A                            
00016A2A                            locret_14934:
00016A2A 4E75                       		rts
00016A2C                            
00016A2C                            ; ===========================================================================
00016A2C                            
00016A2C                            loc_14936:
00016A2C 0C41 000E                  		cmpi.w	#$E,d1
00016A30 6E00                       		bgt.s	loc_14942
00016A32                            
00016A32                            loc_1493C:
00016A32 9368 0008                  		sub.w	d1,8(a0)
00016A36 4E75                       		rts	
00016A38                            
00016A38                            ; ===========================================================================
00016A38                            
00016A38                            loc_14942:
00016A38 4A28 0038                  		tst.b	$38(a0)
00016A3C 66F4                       		bne.s	loc_1493C
00016A3E 08E8 0001 0022             		bset	#1,$22(a0)
00016A44 08A8 0005 0022             		bclr	#5,$22(a0)
00016A4A 117C 0001 001D             		move.b	#1,$1D(a0)
00016A50 4E75                       		rts	
00016A52                            ; End of function Sonic_WalkVertL
00016A52                            
00016A52                            ; ---------------------------------------------------------------------------
00016A52                            ; Subroutine to	find which tile	the object is standing on
00016A52                            ; ---------------------------------------------------------------------------
00016A52                            
00016A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A52                            
00016A52                            Floor_ChkTile:				; XREF: FindFloor; et al
00016A52 3002                       		move.w	d2,d0					; MJ: load Y position
00016A54 0240 0780                  		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
00016A58 D040                       		add.w	d0,d0					; MJ: multiply by 2
00016A5A 3203                       		move.w	d3,d1					; MJ: load X position
00016A5C EE49                       		lsr.w	#7,d1					; MJ: shift to right side
00016A5E 0241 007F                  		andi.w	#$007F,d1				; MJ: get within 7F
00016A62 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00016A64 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00016A66 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
00016A6A 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
00016A6E 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
00016A72 EF49                       		lsl.w	#$07,d1					; MJ: multiply by 80
00016A74 3002                       		move.w	d2,d0					; MJ: load Y position
00016A76 0240 0070                  		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
00016A7A D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016A7C 3003                       		move.w	d3,d0					; MJ: load X position
00016A7E E648                       		lsr.w	#3,d0					; MJ: divide by 8
00016A80 0240 000E                  		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
00016A84 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00016A86                            
00016A86                            loc_14996:
00016A86 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
00016A88 4E75                       		rts						; MJ: return
00016A8A                            ; ===========================================================================
00016A8A                            
00016A8A                            loc_1499A:
00016A8A 0241 007F                  		andi.w	#$7F,d1
00016A8E 0828 0006 0001             		btst	#6,1(a0)
00016A94 6700                       		beq.s	loc_149B2
00016A96 5241                       		addq.w	#1,d1
00016A98 0C41 0029                  		cmpi.w	#$29,d1
00016A9C 6600                       		bne.s	loc_149B2
00016A9E 323C 0051                  		move.w	#$51,d1
00016AA2                            
00016AA2                            loc_149B2:
00016AA2 EE59                       		ror.w	#7,d1
00016AA4 E459                       		ror.w	#2,d1
00016AA6 3002                       		move.w	d2,d0
00016AA8 D040                       		add.w	d0,d0
00016AAA 0240 0070                  		andi.w	#$070,d0
00016AAE D240                       		add.w	d0,d1
00016AB0 3003                       		move.w	d3,d0
00016AB2 E648                       		lsr.w	#3,d0
00016AB4 0240 000E                  		andi.w	#$0E,d0
00016AB8 D240                       		add.w	d0,d1
00016ABA 2241                       		movea.l	d1,a1
00016ABC 4E75                       		rts
00016ABE                            ; End of function Floor_ChkTile
00016ABE                            
00016ABE                            
00016ABE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ABE                            
00016ABE                            
00016ABE                            ColisionChkLayer:
00016ABE 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
00016AC2 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
00016AC4 3800                       		move.w	d0,d4					; MJ: load block ID to d4
00016AC6 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
00016ACA 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00016ACE E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00016AD0 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00016AD2                            
00016AD2                            CCL_NoChange:
00016AD2 4E75                       		rts						; MJ: return
00016AD4                            
00016AD4                            
00016AD4                            FindFloor:
00016AD4 6100 FF7C                  		bsr.w	Floor_ChkTile
00016AD8 3011                       		move.w	(a1),d0
00016ADA 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00016ADC 3800                       		move.w	d0,d4
00016ADE 0240 03FF                  		andi.w	#$3FF,d0
00016AE2 6700                       		beq.s	loc_149DE
00016AE4 0B04                       		btst	d5,d4
00016AE6 6600                       		bne.s	loc_149EC
00016AE8                            
00016AE8                            loc_149DE:
00016AE8 D44B                       		add.w	a3,d2
00016AEA 6100 0000                  		bsr.w	FindFloor2
00016AEE 944B                       		sub.w	a3,d2
00016AF0 0641 0010                  		addi.w	#$10,d1
00016AF4 4E75                       		rts	
00016AF6                            ; ===========================================================================
00016AF6                            
00016AF6                            loc_149EC:
00016AF6 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
00016AFA 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00016AFE 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
00016B02 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00016B04 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016B0A 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00016B0E E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00016B10 3203                       		move.w	d3,d1					; MJ: load X position
00016B12 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
00016B16 6700                       		beq.s	loc_14A12				; MJ: if not, branch
00016B18 4641                       		not.w	d1					; MJ: reverse bits of the X position
00016B1A 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00016B1C                            
00016B1C                            loc_14A12:
00016B1C 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00016B20 6700                       		beq.s	loc_14A22				; MJ: if not, branch
00016B22 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
00016B26 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00016B28 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00016B2C                            
00016B2C                            loc_14A22:
00016B2C 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00016B30 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
00016B32 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00016B38 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00016B3C 4880                       		ext.w	d0					; MJ: clear left byte
00016B3E BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
00016B40 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
00016B44 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
00016B46 4440                       		neg.w	d0					; MJ: reverse solid value
00016B48                            
00016B48                            loc_14A3E:
00016B48 4A40                       		tst.w	d0					; MJ: is the solid data null?
00016B4A 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00016B4C 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00016B4E 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
00016B52 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00016B54 3202                       		move.w	d2,d1					; MJ: load Y position
00016B56 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00016B5A D041                       		add.w	d1,d0					; MJ: add to solid value
00016B5C 323C 000F                  		move.w	#$F,d1					; MJ: set F
00016B60 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
00016B62 4E75                       		rts			; d1 = position?	; MJ: return
00016B64                            
00016B64                            ; ===========================================================================
00016B64                            
00016B64                            loc_14A5A:
00016B64 3202                       		move.w	d2,d1
00016B66 0241 000F                  		andi.w	#$F,d1
00016B6A D041                       		add.w	d1,d0
00016B6C 6A00 FF7A                  		bpl.w	loc_149DE
00016B70                            
00016B70                            loc_14A66:
00016B70 944B                       		sub.w	a3,d2
00016B72 6100 0000                  		bsr.w	FindFloor2
00016B76 D44B                       		add.w	a3,d2
00016B78 0441 0010                  		subi.w	#$10,d1
00016B7C 4E75                       		rts	
00016B7E                            ; End of function FindFloor
00016B7E                            
00016B7E                            
00016B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B7E                            
00016B7E                            
00016B7E                            FindFloor2:				; XREF: FindFloor
00016B7E 6100 FED2                  		bsr.w	Floor_ChkTile
00016B82 3011                       		move.w	(a1),d0
00016B84 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016B88 3800                       		move.w	d0,d4
00016B8A 0240 03FF                  		andi.w	#$3FF,d0
00016B8E 6700                       		beq.s	loc_14A86
00016B90 0B04                       		btst	d5,d4
00016B92 6600                       		bne.s	loc_14A94
00016B94                            
00016B94                            loc_14A86:
00016B94 323C 000F                  		move.w	#$F,d1
00016B98 3002                       		move.w	d2,d0
00016B9A 0240 000F                  		andi.w	#$F,d0
00016B9E 9240                       		sub.w	d0,d1
00016BA0 4E75                       		rts	
00016BA2                            ; ===========================================================================
00016BA2                            
00016BA2                            loc_14A94:
00016BA2 2478 F796                  		movea.l	($FFFFF796).w,a2
00016BA6 1032 0000                  		move.b	(a2,d0.w),d0
00016BAA 0240 00FF                  		andi.w	#$FF,d0
00016BAE 67E4                       		beq.s	loc_14A86
00016BB0 45F9 0000 0000             		lea	(AngleMap).l,a2
00016BB6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016BBA E948                       		lsl.w	#4,d0
00016BBC 3203                       		move.w	d3,d1
00016BBE 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016BC2 6700                       		beq.s	loc_14ABA
00016BC4 4641                       		not.w	d1
00016BC6 4414                       		neg.b	(a4)
00016BC8                            
00016BC8                            loc_14ABA:
00016BC8 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016BCC 6700                       		beq.s	loc_14ACA
00016BCE 0614 0040                  		addi.b	#$40,(a4)
00016BD2 4414                       		neg.b	(a4)
00016BD4 0414 0040                  		subi.b	#$40,(a4)
00016BD8                            
00016BD8                            loc_14ACA:
00016BD8 0241 000F                  		andi.w	#$F,d1
00016BDC D240                       		add.w	d0,d1
00016BDE 45F9 0000 0000             		lea	(CollArray1).l,a2
00016BE4 1032 1000                  		move.b	(a2,d1.w),d0
00016BE8 4880                       		ext.w	d0
00016BEA BD44                       		eor.w	d6,d4
00016BEC 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016BF0 6700                       		beq.s	loc_14AE6
00016BF2 4440                       		neg.w	d0
00016BF4                            
00016BF4                            loc_14AE6:
00016BF4 4A40                       		tst.w	d0
00016BF6 679C                       		beq.s	loc_14A86
00016BF8 6B00                       		bmi.s	loc_14AFC
00016BFA 3202                       		move.w	d2,d1
00016BFC 0241 000F                  		andi.w	#$F,d1
00016C00 D041                       		add.w	d1,d0
00016C02 323C 000F                  		move.w	#$F,d1
00016C06 9240                       		sub.w	d0,d1
00016C08 4E75                       		rts	
00016C0A                            ; ===========================================================================
00016C0A                            
00016C0A                            loc_14AFC:
00016C0A 3202                       		move.w	d2,d1
00016C0C 0241 000F                  		andi.w	#$F,d1
00016C10 D041                       		add.w	d1,d0
00016C12 6A00 FF80                  		bpl.w	loc_14A86
00016C16 4641                       		not.w	d1
00016C18 4E75                       		rts	
00016C1A                            ; End of function FindFloor2
00016C1A                            
00016C1A                            
00016C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C1A                            
00016C1A                            
00016C1A                            FindWall:
00016C1A 6100 FE36                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00016C1E 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00016C20 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016C24 3800                       		move.w	d0,d4					; MJ: copy to d4
00016C26 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00016C2A 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00016C2C 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00016C2E 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00016C30                            
00016C30                            loc_14B1E:
00016C30 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00016C32 6100 0000                  		bsr.w	FindWall2
00016C36 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00016C38 0641 0010                  		addi.w	#$10,d1
00016C3C 4E75                       		rts	
00016C3E                            ; ===========================================================================
00016C3E                            
00016C3E                            loc_14B2C:
00016C3E 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
00016C42 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00016C46 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00016C4A 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00016C4C 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00016C52 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00016C56 E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00016C58 3202                       		move.w	d2,d1					; MJ: load Y position
00016C5A 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00016C5E 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00016C60 4641                       		not.w	d1
00016C62 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00016C66 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016C68 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00016C6C                            
00016C6C                            loc_14B5A:
00016C6C 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00016C70 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00016C72 4414                       		neg.b	(a4)					; MJ: negate to opposite
00016C74                            
00016C74                            loc_14B62:
00016C74 0241 000F                  		andi.w	#$F,d1
00016C78 D240                       		add.w	d0,d1
00016C7A 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C80 1032 1000                  		move.b	(a2,d1.w),d0
00016C84 4880                       		ext.w	d0
00016C86 BD44                       		eor.w	d6,d4
00016C88 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016C8C 6700                       		beq.s	loc_14B7E
00016C8E 4440                       		neg.w	d0
00016C90                            
00016C90                            loc_14B7E:
00016C90 4A40                       		tst.w	d0
00016C92 679C                       		beq.s	loc_14B1E
00016C94 6B00                       		bmi.s	loc_14B9A
00016C96 0C00 0010                  		cmpi.b	#$10,d0
00016C9A 6700                       		beq.s	loc_14BA6
00016C9C 3203                       		move.w	d3,d1
00016C9E 0241 000F                  		andi.w	#$F,d1
00016CA2 D041                       		add.w	d1,d0
00016CA4 323C 000F                  		move.w	#$F,d1
00016CA8 9240                       		sub.w	d0,d1
00016CAA 4E75                       		rts	
00016CAC                            ; ===========================================================================
00016CAC                            
00016CAC                            loc_14B9A:
00016CAC 3203                       		move.w	d3,d1
00016CAE 0241 000F                  		andi.w	#$F,d1
00016CB2 D041                       		add.w	d1,d0
00016CB4 6A00 FF7A                  		bpl.w	loc_14B1E
00016CB8                            
00016CB8                            loc_14BA6:
00016CB8 964B                       		sub.w	a3,d3
00016CBA 6100 0000                  		bsr.w	FindWall2
00016CBE D64B                       		add.w	a3,d3
00016CC0 0441 0010                  		subi.w	#$10,d1
00016CC4 4E75                       		rts	
00016CC6                            ; End of function FindWall
00016CC6                            
00016CC6                            
00016CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CC6                            
00016CC6                            
00016CC6                            FindWall2:				; XREF: FindWall
00016CC6 6100 FD8A                  		bsr.w	Floor_ChkTile
00016CCA 3011                       		move.w	(a1),d0
00016CCC 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00016CD0 3800                       		move.w	d0,d4
00016CD2 0240 03FF                  		andi.w	#$3FF,d0
00016CD6 6700                       		beq.s	loc_14BC6
00016CD8 0B04                       		btst	d5,d4
00016CDA 6600                       		bne.s	loc_14BD4
00016CDC                            
00016CDC                            loc_14BC6:
00016CDC 323C 000F                  		move.w	#$F,d1
00016CE0 3003                       		move.w	d3,d0
00016CE2 0240 000F                  		andi.w	#$F,d0
00016CE6 9240                       		sub.w	d0,d1
00016CE8 4E75                       		rts	
00016CEA                            ; ===========================================================================
00016CEA                            
00016CEA                            loc_14BD4:
00016CEA 2478 F796                  		movea.l	($FFFFF796).w,a2
00016CEE 1032 0000                  		move.b	(a2,d0.w),d0
00016CF2 0240 00FF                  		andi.w	#$FF,d0
00016CF6 67E4                       		beq.s	loc_14BC6
00016CF8 45F9 0000 0000             		lea	(AngleMap).l,a2
00016CFE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016D02 E948                       		lsl.w	#4,d0
00016D04 3202                       		move.w	d2,d1
00016D06 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00016D0A 6700                       		beq.s	loc_14C02
00016D0C 4641                       		not.w	d1
00016D0E 0614 0040                  		addi.b	#$40,(a4)
00016D12 4414                       		neg.b	(a4)
00016D14 0414 0040                  		subi.b	#$40,(a4)
00016D18                            
00016D18                            loc_14C02:
00016D18 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016D1C 6700                       		beq.s	loc_14C0A
00016D1E 4414                       		neg.b	(a4)
00016D20                            
00016D20                            loc_14C0A:
00016D20 0241 000F                  		andi.w	#$F,d1
00016D24 D240                       		add.w	d0,d1
00016D26 45F9 0000 0000             		lea	(CollArray2).l,a2
00016D2C 1032 1000                  		move.b	(a2,d1.w),d0
00016D30 4880                       		ext.w	d0
00016D32 BD44                       		eor.w	d6,d4
00016D34 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00016D38 6700                       		beq.s	loc_14C26
00016D3A 4440                       		neg.w	d0
00016D3C                            
00016D3C                            loc_14C26:
00016D3C 4A40                       		tst.w	d0
00016D3E 679C                       		beq.s	loc_14BC6
00016D40 6B00                       		bmi.s	loc_14C3C
00016D42 3203                       		move.w	d3,d1
00016D44 0241 000F                  		andi.w	#$F,d1
00016D48 D041                       		add.w	d1,d0
00016D4A 323C 000F                  		move.w	#$F,d1
00016D4E 9240                       		sub.w	d0,d1
00016D50 4E75                       		rts	
00016D52                            ; ===========================================================================
00016D52                            
00016D52                            loc_14C3C:
00016D52 3203                       		move.w	d3,d1
00016D54 0241 000F                  		andi.w	#$F,d1
00016D58 D041                       		add.w	d1,d0
00016D5A 6A00 FF80                  		bpl.w	loc_14BC6
00016D5E 4641                       		not.w	d1
00016D60 4E75                       		rts	
00016D62                            ; End of function FindWall2
00016D62                            
00016D62                            ; ---------------------------------------------------------------------------
00016D62                            ; Unused floor/wall subroutine - logs something	to do with collision
00016D62                            ; ---------------------------------------------------------------------------
00016D62                            
00016D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D62                            
00016D62                            
00016D62                            FloorLog_Unk:				; XREF: Level
00016D62 4E75                       		rts	
00016D64                            
00016D64 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D6A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016D70 363C 00FF                  		move.w	#$FF,d3
00016D74                            
00016D74                            loc_14C5E:
00016D74 7A10                       		moveq	#$10,d5
00016D76 343C 000F                  		move.w	#$F,d2
00016D7A                            
00016D7A                            loc_14C64:
00016D7A 7800                       		moveq	#0,d4
00016D7C 323C 000F                  		move.w	#$F,d1
00016D80                            
00016D80                            loc_14C6A:
00016D80 3019                       		move.w	(a1)+,d0
00016D82 EAA8                       		lsr.l	d5,d0
00016D84 D944                       		addx.w	d4,d4
00016D86 51C9 FFF8                  		dbf	d1,loc_14C6A
00016D8A                            
00016D8A 34C4                       		move.w	d4,(a2)+
00016D8C 92FC 0020                  		suba.w	#$20,a1
00016D90 5345                       		subq.w	#1,d5
00016D92 51CA FFE6                  		dbf	d2,loc_14C64
00016D96                            
00016D96 D2FC 0020                  		adda.w	#$20,a1
00016D9A 51CB FFD8                  		dbf	d3,loc_14C5E
00016D9E                            
00016D9E 43F9 0000 0000             		lea	(CollArray1).l,a1
00016DA4 45F9 0000 0000             		lea	(CollArray2).l,a2
00016DAA 6100                       		bsr.s	FloorLog_Unk2
00016DAC 43F9 0000 0000             		lea	(CollArray1).l,a1
00016DB2 45F9 0000 0000             		lea	(CollArray1).l,a2
00016DB8                            
00016DB8                            ; End of function FloorLog_Unk
00016DB8                            
00016DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DB8                            
00016DB8                            
00016DB8                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016DB8 363C 0FFF                  		move.w	#$FFF,d3
00016DBC                            
00016DBC                            loc_14CA6:
00016DBC 7400                       		moveq	#0,d2
00016DBE 323C 000F                  		move.w	#$F,d1
00016DC2 3019                       		move.w	(a1)+,d0
00016DC4 6700                       		beq.s	loc_14CD4
00016DC6 6B00                       		bmi.s	loc_14CBE
00016DC8                            
00016DC8                            loc_14CB2:
00016DC8 E248                       		lsr.w	#1,d0
00016DCA 6400                       		bcc.s	loc_14CB8
00016DCC 5202                       		addq.b	#1,d2
00016DCE                            
00016DCE                            loc_14CB8:
00016DCE 51C9 FFF8                  		dbf	d1,loc_14CB2
00016DD2                            
00016DD2 6000                       		bra.s	loc_14CD6
00016DD4                            ; ===========================================================================
00016DD4                            
00016DD4                            loc_14CBE:
00016DD4 0C40 FFFF                  		cmpi.w	#-1,d0
00016DD8 6700                       		beq.s	loc_14CD0
00016DDA                            
00016DDA                            loc_14CC4:
00016DDA E348                       		lsl.w	#1,d0
00016DDC 6400                       		bcc.s	loc_14CCA
00016DDE 5302                       		subq.b	#1,d2
00016DE0                            
00016DE0                            loc_14CCA:
00016DE0 51C9 FFF8                  		dbf	d1,loc_14CC4
00016DE4                            
00016DE4 6000                       		bra.s	loc_14CD6
00016DE6                            ; ===========================================================================
00016DE6                            
00016DE6                            loc_14CD0:
00016DE6 303C 0010                  		move.w	#$10,d0
00016DEA                            
00016DEA                            loc_14CD4:
00016DEA 3400                       		move.w	d0,d2
00016DEC                            
00016DEC                            loc_14CD6:
00016DEC 14C2                       		move.b	d2,(a2)+
00016DEE 51CB FFCC                  		dbf	d3,loc_14CA6
00016DF2                            
00016DF2 4E75                       		rts	
00016DF4                            
00016DF4                            ; End of function FloorLog_Unk2
00016DF4                            
00016DF4                            
00016DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DF4                            
00016DF4                            
00016DF4                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016DF4 2628 0008                  		move.l	8(a0),d3
00016DF8 2428 000C                  		move.l	$C(a0),d2
00016DFC 3228 0010                  		move.w	$10(a0),d1
00016E00 48C1                       		ext.l	d1
00016E02 E181                       		asl.l	#8,d1
00016E04 D681                       		add.l	d1,d3
00016E06 3228 0012                  		move.w	$12(a0),d1
00016E0A 48C1                       		ext.l	d1
00016E0C E181                       		asl.l	#8,d1
00016E0E D481                       		add.l	d1,d2
00016E10 4842                       		swap	d2
00016E12 4843                       		swap	d3
00016E14 11C0 F768                  		move.b	d0,($FFFFF768).w
00016E18 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016E1C 1200                       		move.b	d0,d1
00016E1E 0600 0020                  		addi.b	#$20,d0
00016E22 6A00                       		bpl.s	loc_14D1A
00016E24 1001                       		move.b	d1,d0
00016E26 6A00                       		bpl.s	loc_14D14
00016E28 5300                       		subq.b	#1,d0
00016E2A                            
00016E2A                            loc_14D14:
00016E2A 0600 0020                  		addi.b	#$20,d0
00016E2E 6000                       		bra.s	loc_14D24
00016E30                            ; ===========================================================================
00016E30                            
00016E30                            loc_14D1A:
00016E30 1001                       		move.b	d1,d0
00016E32 6A00                       		bpl.s	loc_14D20
00016E34 5200                       		addq.b	#1,d0
00016E36                            
00016E36                            loc_14D20:
00016E36 0600 001F                  		addi.b	#$1F,d0
00016E3A                            
00016E3A                            loc_14D24:
00016E3A 0200 00C0                  		andi.b	#$C0,d0
00016E3E 6700 0000                  		beq.w	loc_14DF0
00016E42 0C00 0080                  		cmpi.b	#$80,d0
00016E46 6700 0000                  		beq.w	loc_14F7C
00016E4A 0201 0038                  		andi.b	#$38,d1
00016E4E 6600                       		bne.s	loc_14D3C
00016E50 5042                       		addq.w	#8,d2
00016E52                            
00016E52                            loc_14D3C:
00016E52 0C00 0040                  		cmpi.b	#$40,d0
00016E56 6700 0000                  		beq.w	loc_1504A
00016E5A 6000 0000                  		bra.w	loc_14EBC
00016E5E                            
00016E5E                            ; End of function Sonic_WalkSpeed
00016E5E                            
00016E5E                            
00016E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E5E                            
00016E5E                            
00016E5E                            sub_14D48:				; XREF: Sonic_Jump
00016E5E 11C0 F768                  		move.b	d0,($FFFFF768).w
00016E62 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016E66 0600 0020                  		addi.b	#$20,d0
00016E6A 0200 00C0                  		andi.b	#$C0,d0
00016E6E 0C00 0040                  		cmpi.b	#$40,d0
00016E72 6700 0000                  		beq.w	loc_14FD6
00016E76 0C00 0080                  		cmpi.b	#$80,d0
00016E7A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016E7E 0C00 00C0                  		cmpi.b	#$C0,d0
00016E82 6700 0000                  		beq.w	sub_14E50
00016E86                            
00016E86                            ; End of function sub_14D48
00016E86                            
00016E86                            ; ---------------------------------------------------------------------------
00016E86                            ; Subroutine to	make Sonic land	on the floor after jumping
00016E86                            ; ---------------------------------------------------------------------------
00016E86                            
00016E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E86                            
00016E86                            
00016E86                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016E86 3428 000C                  		move.w	$C(a0),d2
00016E8A 3628 0008                  		move.w	8(a0),d3
00016E8E 7000                       		moveq	#0,d0
00016E90 1028 0016                  		move.b	$16(a0),d0
00016E94 4880                       		ext.w	d0
00016E96 D440                       		add.w	d0,d2
00016E98 1028 0017                  		move.b	$17(a0),d0
00016E9C 4880                       		ext.w	d0
00016E9E D640                       		add.w	d0,d3
00016EA0 49F8 F768                  		lea	($FFFFF768).w,a4
00016EA4 367C 0010                  		movea.w	#$10,a3
00016EA8 3C3C 0000                  		move.w	#0,d6
00016EAC 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016EAE 6100 FC24                  		bsr.w	FindFloor				; MJ: check solidity
00016EB2 3F01                       		move.w	d1,-(sp)
00016EB4 3428 000C                  		move.w	$C(a0),d2
00016EB8 3628 0008                  		move.w	8(a0),d3
00016EBC 7000                       		moveq	#0,d0
00016EBE 1028 0016                  		move.b	$16(a0),d0
00016EC2 4880                       		ext.w	d0
00016EC4 D440                       		add.w	d0,d2
00016EC6 1028 0017                  		move.b	$17(a0),d0
00016ECA 4880                       		ext.w	d0
00016ECC 9640                       		sub.w	d0,d3
00016ECE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016ED2 367C 0010                  		movea.w	#$10,a3
00016ED6 3C3C 0000                  		move.w	#0,d6
00016EDA 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016EDC 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00016EE0 301F                       		move.w	(sp)+,d0
00016EE2 143C 0000                  		move.b	#0,d2
00016EE6                            
00016EE6                            loc_14DD0:
00016EE6 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016EEA B240                       		cmp.w	d0,d1
00016EEC 6F00                       		ble.s	loc_14DDE
00016EEE 1638 F768                  		move.b	($FFFFF768).w,d3
00016EF2 C141                       		exg	d0,d1
00016EF4                            
00016EF4                            loc_14DDE:
00016EF4 0803 0000                  		btst	#0,d3
00016EF8 6700                       		beq.s	locret_14DE6
00016EFA 1602                       		move.b	d2,d3
00016EFC                            
00016EFC                            locret_14DE6:
00016EFC 4E75                       		rts	
00016EFE                            
00016EFE                            ; End of function Sonic_HitFloor
00016EFE                            
00016EFE                            ; ===========================================================================
00016EFE 3428 000C                  		move.w	$C(a0),d2
00016F02 3628 0008                  		move.w	8(a0),d3
00016F06                            
00016F06                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016F06 0642 000A                  		addi.w	#$A,d2
00016F0A 49F8 F768                  		lea	($FFFFF768).w,a4
00016F0E 367C 0010                  		movea.w	#$10,a3
00016F12 3C3C 0000                  		move.w	#0,d6
00016F16 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F18 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00016F1C 143C 0000                  		move.b	#0,d2
00016F20                            
00016F20                            loc_14E0A:				; XREF: sub_14EB4
00016F20 1638 F768                  		move.b	($FFFFF768).w,d3
00016F24 0803 0000                  		btst	#0,d3
00016F28 6700                       		beq.s	locret_14E16
00016F2A 1602                       		move.b	d2,d3
00016F2C                            
00016F2C                            locret_14E16:
00016F2C 4E75                       		rts	
00016F2E                            
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            ; Subroutine allowing objects to interact with the floor
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            
00016F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F2E                            
00016F2E                            
00016F2E                            ObjHitFloor:
00016F2E 3628 0008                  		move.w	8(a0),d3
00016F32                            
00016F32                            ; End of function ObjHitFloor
00016F32                            
00016F32                            
00016F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F32                            
00016F32                            
00016F32                            ObjHitFloor2:
00016F32 3428 000C                  		move.w	$C(a0),d2
00016F36 7000                       		moveq	#0,d0
00016F38 1028 0016                  		move.b	$16(a0),d0
00016F3C 4880                       		ext.w	d0
00016F3E D440                       		add.w	d0,d2
00016F40 49F8 F768                  		lea	($FFFFF768).w,a4
00016F44 18BC 0000                  		move.b	#0,(a4)
00016F48 367C 0010                  		movea.w	#$10,a3
00016F4C 3C3C 0000                  		move.w	#0,d6
00016F50 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00016F52 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00016F56 1638 F768                  		move.b	($FFFFF768).w,d3
00016F5A 0803 0000                  		btst	#0,d3
00016F5E 6700                       		beq.s	locret_14E4E
00016F60 163C 0000                  		move.b	#0,d3
00016F64                            
00016F64                            locret_14E4E:
00016F64 4E75                       		rts	
00016F66                            ; End of function ObjHitFloor2
00016F66                            
00016F66                            
00016F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F66                            
00016F66                            
00016F66                            sub_14E50:				; XREF: sub_14D48
00016F66 3428 000C                  		move.w	$C(a0),d2
00016F6A 3628 0008                  		move.w	8(a0),d3
00016F6E 7000                       		moveq	#0,d0
00016F70 1028 0017                  		move.b	$17(a0),d0
00016F74 4880                       		ext.w	d0
00016F76 9440                       		sub.w	d0,d2
00016F78 1028 0016                  		move.b	$16(a0),d0
00016F7C 4880                       		ext.w	d0
00016F7E D640                       		add.w	d0,d3
00016F80 49F8 F768                  		lea	($FFFFF768).w,a4
00016F84 367C 0010                  		movea.w	#$10,a3
00016F88 3C3C 0000                  		move.w	#0,d6
00016F8C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016F8E 6100 FC8A                  		bsr.w	FindWall				; MJ: check solidity
00016F92 3F01                       		move.w	d1,-(sp)
00016F94 3428 000C                  		move.w	$C(a0),d2
00016F98 3628 0008                  		move.w	8(a0),d3
00016F9C 7000                       		moveq	#0,d0
00016F9E 1028 0017                  		move.b	$17(a0),d0
00016FA2 4880                       		ext.w	d0
00016FA4 D440                       		add.w	d0,d2
00016FA6 1028 0016                  		move.b	$16(a0),d0
00016FAA 4880                       		ext.w	d0
00016FAC D640                       		add.w	d0,d3
00016FAE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FB2 367C 0010                  		movea.w	#$10,a3
00016FB6 3C3C 0000                  		move.w	#0,d6
00016FBA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FBC 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00016FC0 301F                       		move.w	(sp)+,d0
00016FC2 143C 00C0                  		move.b	#-$40,d2
00016FC6 6000 FF1E                  		bra.w	loc_14DD0
00016FCA                            
00016FCA                            ; End of function sub_14E50
00016FCA                            
00016FCA                            
00016FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FCA                            
00016FCA                            
00016FCA                            sub_14EB4:				; XREF: Sonic_Floor
00016FCA 3428 000C                  		move.w	$C(a0),d2
00016FCE 3628 0008                  		move.w	8(a0),d3
00016FD2                            
00016FD2                            loc_14EBC:
00016FD2 0643 000A                  		addi.w	#$A,d3
00016FD6 49F8 F768                  		lea	($FFFFF768).w,a4
00016FDA 367C 0010                  		movea.w	#$10,a3
00016FDE 3C3C 0000                  		move.w	#0,d6
00016FE2 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00016FE4 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00016FE8 143C 00C0                  		move.b	#-$40,d2
00016FEC 6000 FF32                  		bra.w	loc_14E0A
00016FF0                            
00016FF0                            ; End of function sub_14EB4
00016FF0                            
00016FF0                            ; ---------------------------------------------------------------------------
00016FF0                            ; Subroutine to	detect when an object hits a wall to its right
00016FF0                            ; ---------------------------------------------------------------------------
00016FF0                            
00016FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FF0                            
00016FF0                            
00016FF0                            ObjHitWallRight:
00016FF0 D668 0008                  		add.w	8(a0),d3
00016FF4 3428 000C                  		move.w	$C(a0),d2
00016FF8 49F8 F768                  		lea	($FFFFF768).w,a4
00016FFC 18BC 0000                  		move.b	#0,(a4)
00017000 367C 0010                  		movea.w	#$10,a3
00017004 3C3C 0000                  		move.w	#0,d6
00017008 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001700A 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
0001700E 1638 F768                  		move.b	($FFFFF768).w,d3
00017012 0803 0000                  		btst	#0,d3
00017016 6700                       		beq.s	locret_14F06
00017018 163C 00C0                  		move.b	#-$40,d3
0001701C                            
0001701C                            locret_14F06:
0001701C 4E75                       		rts	
0001701E                            
0001701E                            ; End of function ObjHitWallRight
0001701E                            
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001701E                            ; touches them
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            
0001701E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001701E                            
0001701E                            
0001701E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001701E 3428 000C                  		move.w	$C(a0),d2
00017022 3628 0008                  		move.w	8(a0),d3
00017026 7000                       		moveq	#0,d0
00017028 1028 0016                  		move.b	$16(a0),d0
0001702C 4880                       		ext.w	d0
0001702E 9440                       		sub.w	d0,d2
00017030 0A42 000F                  		eori.w	#$F,d2
00017034 1028 0017                  		move.b	$17(a0),d0
00017038 4880                       		ext.w	d0
0001703A D640                       		add.w	d0,d3
0001703C 49F8 F768                  		lea	($FFFFF768).w,a4
00017040 367C FFF0                  		movea.w	#-$10,a3
00017044 3C3C 0800                  		move.w	#$0800,d6
00017048 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001704A 6100 FA88                  		bsr.w	FindFloor				; MJ: check solidity
0001704E 3F01                       		move.w	d1,-(sp)
00017050 3428 000C                  		move.w	$C(a0),d2
00017054 3628 0008                  		move.w	8(a0),d3
00017058 7000                       		moveq	#0,d0
0001705A 1028 0016                  		move.b	$16(a0),d0
0001705E 4880                       		ext.w	d0
00017060 9440                       		sub.w	d0,d2
00017062 0A42 000F                  		eori.w	#$F,d2
00017066 1028 0017                  		move.b	$17(a0),d0
0001706A 4880                       		ext.w	d0
0001706C 9640                       		sub.w	d0,d3
0001706E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017072 367C FFF0                  		movea.w	#-$10,a3
00017076 3C3C 0800                  		move.w	#$0800,d6
0001707A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001707C 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00017080 301F                       		move.w	(sp)+,d0
00017082 143C 0080                  		move.b	#-$80,d2
00017086 6000 FE5E                  		bra.w	loc_14DD0
0001708A                            ; End of function Sonic_DontRunOnWalls
0001708A                            
0001708A                            ; ===========================================================================
0001708A 3428 000C                  		move.w	$C(a0),d2
0001708E 3628 0008                  		move.w	8(a0),d3
00017092                            
00017092                            loc_14F7C:
00017092 0442 000A                  		subi.w	#$A,d2
00017096 0A42 000F                  		eori.w	#$F,d2
0001709A 49F8 F768                  		lea	($FFFFF768).w,a4
0001709E 367C FFF0                  		movea.w	#-$10,a3
000170A2 3C3C 0800                  		move.w	#$0800,d6
000170A6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170A8 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
000170AC 143C 0080                  		move.b	#-$80,d2
000170B0 6000 FE6E                  		bra.w	loc_14E0A
000170B4                            
000170B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170B4                            
000170B4                            
000170B4                            ObjHitCeiling:
000170B4 3428 000C                  		move.w	$C(a0),d2
000170B8 3628 0008                  		move.w	8(a0),d3
000170BC 7000                       		moveq	#0,d0
000170BE 1028 0016                  		move.b	$16(a0),d0
000170C2 4880                       		ext.w	d0
000170C4 9440                       		sub.w	d0,d2
000170C6 0A42 000F                  		eori.w	#$F,d2
000170CA 49F8 F768                  		lea	($FFFFF768).w,a4
000170CE 367C FFF0                  		movea.w	#-$10,a3
000170D2 3C3C 0800                  		move.w	#$0800,d6
000170D6 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000170D8 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
000170DC 1638 F768                  		move.b	($FFFFF768).w,d3
000170E0 0803 0000                  		btst	#0,d3
000170E4 6700                       		beq.s	locret_14FD4
000170E6 163C 0080                  		move.b	#-$80,d3
000170EA                            
000170EA                            locret_14FD4:
000170EA 4E75                       		rts	
000170EC                            ; End of function ObjHitCeiling
000170EC                            
000170EC                            ; ===========================================================================
000170EC                            
000170EC                            loc_14FD6:				; XREF: sub_14D48
000170EC 3428 000C                  		move.w	$C(a0),d2
000170F0 3628 0008                  		move.w	8(a0),d3
000170F4 7000                       		moveq	#0,d0
000170F6 1028 0017                  		move.b	$17(a0),d0
000170FA 4880                       		ext.w	d0
000170FC 9440                       		sub.w	d0,d2
000170FE 1028 0016                  		move.b	$16(a0),d0
00017102 4880                       		ext.w	d0
00017104 9640                       		sub.w	d0,d3
00017106 0A43 000F                  		eori.w	#$F,d3
0001710A 49F8 F768                  		lea	($FFFFF768).w,a4
0001710E 367C FFF0                  		movea.w	#-$10,a3
00017112 3C3C 0400                  		move.w	#$400,d6
00017116 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017118 6100 FB00                  		bsr.w	FindWall				; MJ: check solidity
0001711C 3F01                       		move.w	d1,-(sp)
0001711E 3428 000C                  		move.w	$C(a0),d2
00017122 3628 0008                  		move.w	8(a0),d3
00017126 7000                       		moveq	#0,d0
00017128 1028 0017                  		move.b	$17(a0),d0
0001712C 4880                       		ext.w	d0
0001712E D440                       		add.w	d0,d2
00017130 1028 0016                  		move.b	$16(a0),d0
00017134 4880                       		ext.w	d0
00017136 9640                       		sub.w	d0,d3
00017138 0A43 000F                  		eori.w	#$F,d3
0001713C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017140 367C FFF0                  		movea.w	#-$10,a3
00017144 3C3C 0400                  		move.w	#$400,d6
00017148 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001714A 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
0001714E 301F                       		move.w	(sp)+,d0
00017150 143C 0040                  		move.b	#$40,d2
00017154 6000 FD90                  		bra.w	loc_14DD0
00017158                            
00017158                            ; ---------------------------------------------------------------------------
00017158                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017158                            ; ---------------------------------------------------------------------------
00017158                            
00017158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017158                            
00017158                            
00017158                            Sonic_HitWall:				; XREF: Sonic_Floor
00017158 3428 000C                  		move.w	$C(a0),d2
0001715C 3628 0008                  		move.w	8(a0),d3
00017160                            
00017160                            loc_1504A:
00017160 0443 000A                  		subi.w	#$A,d3
00017164 0A43 000F                  		eori.w	#$F,d3
00017168 49F8 F768                  		lea	($FFFFF768).w,a4
0001716C 367C FFF0                  		movea.w	#-$10,a3
00017170 3C3C 0400                  		move.w	#$400,d6
00017174 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00017176 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
0001717A 143C 0040                  		move.b	#$40,d2
0001717E 6000 FDA0                  		bra.w	loc_14E0A
00017182                            ; End of function Sonic_HitWall
00017182                            
00017182                            ; ---------------------------------------------------------------------------
00017182                            ; Subroutine to	detect when an object hits a wall to its left
00017182                            ; ---------------------------------------------------------------------------
00017182                            
00017182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017182                            
00017182                            
00017182                            ObjHitWallLeft:
00017182 D668 0008                  		add.w	8(a0),d3
00017186 3428 000C                  		move.w	$C(a0),d2
0001718A 49F8 F768                  		lea	($FFFFF768).w,a4
0001718E 18BC 0000                  		move.b	#0,(a4)
00017192 367C FFF0                  		movea.w	#-$10,a3
00017196 3C3C 0400                  		move.w	#$400,d6
0001719A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0001719C 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
000171A0 1638 F768                  		move.b	($FFFFF768).w,d3
000171A4 0803 0000                  		btst	#0,d3
000171A8 6700                       		beq.s	locret_15098
000171AA 163C 0040                  		move.b	#$40,d3
000171AE                            
000171AE                            locret_15098:
000171AE 4E75                       		rts	
000171B0                            ; End of function ObjHitWallLeft
000171B0                            
000171B0                            ; ===========================================================================
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            
000171B0                            ; ===========================================================================
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            
000171B0                            Obj66:					; XREF: Obj_Index
000171B0 7000                       		moveq	#0,d0
000171B2 1028 0024                  		move.b	$24(a0),d0
000171B6 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000171BA 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000171BE                            ; ===========================================================================
000171BE 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000171C0 0000                       		dc.w Obj66_Action-Obj66_Index
000171C2 0000                       		dc.w Obj66_Display-Obj66_Index
000171C4 0000                       		dc.w Obj66_Release-Obj66_Index
000171C6                            ; ===========================================================================
000171C6                            
000171C6                            Obj66_Main:				; XREF: Obj66_Index
000171C6 5428 0024                  		addq.b	#2,$24(a0)
000171CA 323C 0001                  		move.w	#1,d1
000171CE 2248                       		movea.l	a0,a1
000171D0 6000                       		bra.s	Obj66_MakeItem
000171D2                            ; ===========================================================================
000171D2                            
000171D2                            Obj66_Loop:
000171D2 6100 8440                  		bsr.w	SingleObjLoad
000171D6 6600                       		bne.s	loc_150FE
000171D8 12BC 0066                  		move.b	#$66,0(a1)
000171DC 5829 0024                  		addq.b	#4,$24(a1)
000171E0 3368 0008 0008             		move.w	8(a0),8(a1)
000171E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000171EC 137C 0003 0018             		move.b	#3,$18(a1)
000171F2 137C 0010 001A             		move.b	#$10,$1A(a1)
000171F8                            
000171F8                            Obj66_MakeItem:				; XREF: Obj66_Main
000171F8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00017200 337C 4348 0002             		move.w	#$4348,2(a1)
00017206 0029 0004 0001             		ori.b	#4,1(a1)
0001720C 137C 0038 0019             		move.b	#$38,$19(a1)
00017212                            
00017212                            loc_150FE:
00017212 51C9 FFBE                  		dbf	d1,Obj66_Loop
00017216                            
00017216 117C 0030 0019             		move.b	#$30,$19(a0)
0001721C 117C 0004 0018             		move.b	#4,$18(a0)
00017222 317C 003C 0030             		move.w	#$3C,$30(a0)
00017228 117C 0001 0034             		move.b	#1,$34(a0)
0001722E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017234                            
00017234                            Obj66_Action:				; XREF: Obj66_Index
00017234 6100 0000                  		bsr.w	Obj66_ChkSwitch
00017238 4A28 0001                  		tst.b	1(a0)
0001723C 6A00 0000                  		bpl.w	Obj66_Display
00017240 323C 0030                  		move.w	#$30,d1
00017244 3401                       		move.w	d1,d2
00017246 3602                       		move.w	d2,d3
00017248 5243                       		addq.w	#1,d3
0001724A 3828 0008                  		move.w	8(a0),d4
0001724E 6100 A312                  		bsr.w	SolidObject
00017252 0828 0005 0022             		btst	#5,$22(a0)
00017258 6700 0000                  		beq.w	Obj66_Display
0001725C 43F8 D000                  		lea	($FFFFD000).w,a1
00017260 720E                       		moveq	#$E,d1
00017262 3029 0008                  		move.w	8(a1),d0
00017266 B068 0008                  		cmp.w	8(a0),d0
0001726A 6500                       		bcs.s	Obj66_GrabSonic
0001726C 7207                       		moveq	#7,d1
0001726E                            
0001726E                            Obj66_GrabSonic:
0001726E B228 001A                  		cmp.b	$1A(a0),d1
00017272 6600                       		bne.s	Obj66_Display
00017274 1141 0032                  		move.b	d1,$32(a0)
00017278 5828 0024                  		addq.b	#4,$24(a0)
0001727C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00017282 137C 0015 001C             		move.b	#$15,$1C(a1)	; make Sonic use "bubble" animation
00017288 337C 0800 0014             		move.w	#$800,$14(a1)
0001728E 337C 0000 0010             		move.w	#0,$10(a1)
00017294 337C 0000 0012             		move.w	#0,$12(a1)
0001729A 08A8 0005 0022             		bclr	#5,$22(a0)
000172A0 08A9 0005 0022             		bclr	#5,$22(a1)
000172A6 08E9 0001 0022             		bset	#1,$22(a1)
000172AC 3429 0008                  		move.w	8(a1),d2
000172B0 3629 000C                  		move.w	$C(a1),d3
000172B4 6100 0000                  		bsr.w	Obj66_ChgPos
000172B8 D569 0008                  		add.w	d2,8(a1)
000172BC D769 000C                  		add.w	d3,$C(a1)
000172C0 E0E9 0008                  		asr	8(a1)
000172C4 E0E9 000C                  		asr	$C(a1)
000172C8                            
000172C8                            Obj66_Display:				; XREF: Obj66_Index
000172C8 6000 9F70                  		bra.w	MarkObjGone
000172CC                            ; ===========================================================================
000172CC                            
000172CC                            Obj66_Release:				; XREF: Obj66_Index
000172CC 1028 001A                  		move.b	$1A(a0),d0
000172D0 0C00 0004                  		cmpi.b	#4,d0
000172D4 6700                       		beq.s	loc_151C8
000172D6 0C00 0007                  		cmpi.b	#7,d0
000172DA 6600                       		bne.s	loc_151F8
000172DC                            
000172DC                            loc_151C8:
000172DC B028 0032                  		cmp.b	$32(a0),d0
000172E0 6700                       		beq.s	loc_151F8
000172E2 43F8 D000                  		lea	($FFFFD000).w,a1
000172E6 337C 0000 0010             		move.w	#0,$10(a1)
000172EC 337C 0800 0012             		move.w	#$800,$12(a1)
000172F2 0C00 0004                  		cmpi.b	#4,d0
000172F6 6700                       		beq.s	loc_151F0
000172F8 337C 0800 0010             		move.w	#$800,$10(a1)
000172FE 337C 0800 0012             		move.w	#$800,$12(a1)
00017304                            
00017304                            loc_151F0:
00017304 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017308 5928 0024                  		subq.b	#4,$24(a0)
0001730C                            
0001730C                            loc_151F8:
0001730C 6100                       		bsr.s	Obj66_ChkSwitch
0001730E 6100                       		bsr.s	Obj66_ChgPos
00017310 6000 9F28                  		bra.w	MarkObjGone
00017314                            
00017314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017314                            
00017314                            
00017314                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017314 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017318 7000                       		moveq	#0,d0
0001731A 1028 0038                  		move.b	$38(a0),d0
0001731E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017324 6700                       		beq.s	loc_15224	; if not, branch
00017326 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001732A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001732C 4428 0034                  		neg.b	$34(a0)
00017330 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017336 6000                       		bra.s	Obj66_Animate
00017338                            ; ===========================================================================
00017338                            
00017338                            loc_15224:
00017338 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001733C                            
0001733C                            Obj66_Animate:
0001733C 5328 001E                  		subq.b	#1,$1E(a0)
00017340 6A00                       		bpl.s	locret_15246
00017342 117C 0007 001E             		move.b	#7,$1E(a0)
00017348 1228 0034                  		move.b	$34(a0),d1
0001734C 1028 001A                  		move.b	$1A(a0),d0
00017350 D001                       		add.b	d1,d0
00017352 0200 000F                  		andi.b	#$F,d0
00017356 1140 001A                  		move.b	d0,$1A(a0)
0001735A                            
0001735A                            locret_15246:
0001735A 4E75                       		rts	
0001735C                            ; End of function Obj66_ChkSwitch
0001735C                            
0001735C                            
0001735C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001735C                            
0001735C                            
0001735C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001735C 43F8 D000                  		lea	($FFFFD000).w,a1
00017360 7000                       		moveq	#0,d0
00017362 1028 001A                  		move.b	$1A(a0),d0
00017366 D040                       		add.w	d0,d0
00017368 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001736C 101A                       		move.b	(a2)+,d0
0001736E 4880                       		ext.w	d0
00017370 D068 0008                  		add.w	8(a0),d0
00017374 3340 0008                  		move.w	d0,8(a1)
00017378 101A                       		move.b	(a2)+,d0
0001737A 4880                       		ext.w	d0
0001737C D068 000C                  		add.w	$C(a0),d0
00017380 3340 000C                  		move.w	d0,$C(a1)
00017384 4E75                       		rts	
00017386                            ; End of function Obj66_ChgPos
00017386                            
00017386                            ; ===========================================================================
00017386 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001738A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001738E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017392 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017396 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001739A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001739E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000173A2 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000173A6                            ; ---------------------------------------------------------------------------
000173A6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000173A6                            ; ---------------------------------------------------------------------------
000173A6                            Map_obj66:
000173A6                            	include "_maps\obj66.asm"
000173A6                            ; ---------------------------------------------------------------------------
000173A6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000173A6                            ; ---------------------------------------------------------------------------
000173A6 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000173AA 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000173AE 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000173B2 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000173B6 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000173BA 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000173BE 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000173C2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000173C6 0000                       		dc.w byte_154A4-Map_obj66
000173C8 06                         byte_152B4:	dc.b 6
000173C9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000173CE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000173D3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000173D8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000173DD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000173E2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000173E7 06                         byte_152D3:	dc.b 6
000173E8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000173ED 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000173F2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000173F7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000173FC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00017401 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017406 06                         byte_152F2:	dc.b 6
00017407 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001740C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017411 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017416 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001741B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017420 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017425 06                         byte_15311:	dc.b 6
00017426 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001742B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017430 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017435 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001743A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001743F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017444 06                         byte_15330:	dc.b 6
00017445 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001744A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001744F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017454 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00017459 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001745E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017463 06                         byte_1534F:	dc.b 6
00017464 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00017469 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001746E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017473 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00017478 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001747D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017482 06                         byte_1536E:	dc.b 6
00017483 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017488 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001748D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017492 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017497 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001749C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000174A1 06                         byte_1538D:	dc.b 6
000174A2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000174A7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000174AC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000174B1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000174B6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000174BB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000174C0 06                         byte_153AC:	dc.b 6
000174C1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000174C6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000174CB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000174D0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000174D5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000174DA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000174DF 06                         byte_153CB:	dc.b 6
000174E0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000174E5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000174EA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000174EF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000174F4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000174F9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000174FE 06                         byte_153EA:	dc.b 6
000174FF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017504 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017509 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001750E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017513 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017518 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001751D 06                         byte_15409:	dc.b 6
0001751E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017523 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017528 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001752D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017532 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017537 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001753C 06                         byte_15428:	dc.b 6
0001753D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017542 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017547 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001754C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017551 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017556 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001755B 06                         byte_15447:	dc.b 6
0001755C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017561 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017566 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001756B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017570 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017575 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001757A 06                         byte_15466:	dc.b 6
0001757B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017580 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017585 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001758A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001758F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017594 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017599 06                         byte_15485:	dc.b 6
0001759A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001759F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000175A4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000175A9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000175AE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000175B3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000175B8 0C                         byte_154A4:	dc.b $C
000175B9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000175BE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000175C3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000175C8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000175CD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000175D2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000175D7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000175DC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000175E1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000175E6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000175EB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000175F0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000175F6 00                         		even
000175F6 00                         		even
000175F6                            
000175F6                            ; ===========================================================================
000175F6                            ; ---------------------------------------------------------------------------
000175F6                            ; Object 67 - disc that	you run	around (SBZ)
000175F6                            ; ---------------------------------------------------------------------------
000175F6                            
000175F6                            Obj67:					; XREF: Obj_Index
000175F6 7000                       		moveq	#0,d0
000175F8 1028 0024                  		move.b	$24(a0),d0
000175FC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00017600 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017604                            ; ===========================================================================
00017604 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017606 0000                       		dc.w Obj67_Action-Obj67_Index
00017608                            ; ===========================================================================
00017608                            
00017608                            Obj67_Main:				; XREF: Obj67_Index
00017608 5428 0024                  		addq.b	#2,$24(a0)
0001760C 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017614 317C C344 0002             		move.w	#$C344,2(a0)
0001761A 117C 0004 0001             		move.b	#4,1(a0)
00017620 117C 0004 0018             		move.b	#4,$18(a0)
00017626 117C 0008 0019             		move.b	#8,$19(a0)
0001762C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017632 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017638 117C 0018 0034             		move.b	#$18,$34(a0)
0001763E 117C 0048 0038             		move.b	#$48,$38(a0)
00017644 1228 0028                  		move.b	$28(a0),d1	; get object type
00017648 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001764C 6700                       		beq.s	loc_15546
0001764E 117C 0010 0034             		move.b	#$10,$34(a0)
00017654 117C 0038 0038             		move.b	#$38,$38(a0)
0001765A                            
0001765A                            loc_15546:
0001765A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001765E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017662 4881                       		ext.w	d1
00017664 E741                       		asl.w	#3,d1
00017666 3141 0036                  		move.w	d1,$36(a0)
0001766A 1028 0022                  		move.b	$22(a0),d0
0001766E E418                       		ror.b	#2,d0
00017670 0200 00C0                  		andi.b	#-$40,d0
00017674 1140 0026                  		move.b	d0,$26(a0)
00017678                            
00017678                            Obj67_Action:				; XREF: Obj67_Index
00017678 6100 0000                  		bsr.w	Obj67_MoveSonic
0001767C 6100 0000                  		bsr.w	Obj67_MoveSpot
00017680 6000 0000                  		bra.w	Obj67_ChkDel
00017684                            ; ===========================================================================
00017684                            
00017684                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017684 7400                       		moveq	#0,d2
00017686 1428 0038                  		move.b	$38(a0),d2
0001768A 3602                       		move.w	d2,d3
0001768C D643                       		add.w	d3,d3
0001768E 43F8 D000                  		lea	($FFFFD000).w,a1
00017692 3029 0008                  		move.w	8(a1),d0
00017696 9068 0032                  		sub.w	$32(a0),d0
0001769A D042                       		add.w	d2,d0
0001769C B043                       		cmp.w	d3,d0
0001769E 6400                       		bcc.s	loc_155A8
000176A0 3229 000C                  		move.w	$C(a1),d1
000176A4 9268 0030                  		sub.w	$30(a0),d1
000176A8 D242                       		add.w	d2,d1
000176AA B243                       		cmp.w	d3,d1
000176AC 6400                       		bcc.s	loc_155A8
000176AE 0829 0001 0022             		btst	#1,$22(a1)
000176B4 6700                       		beq.s	loc_155B8
000176B6 4228 003A                  		clr.b	$3A(a0)
000176BA 4E75                       		rts	
000176BC                            ; ===========================================================================
000176BC                            
000176BC                            loc_155A8:
000176BC 4A28 003A                  		tst.b	$3A(a0)
000176C0 6700                       		beq.s	locret_155B6
000176C2 4229 0038                  		clr.b	$38(a1)
000176C6 4228 003A                  		clr.b	$3A(a0)
000176CA                            
000176CA                            locret_155B6:
000176CA 4E75                       		rts	
000176CC                            ; ===========================================================================
000176CC                            
000176CC                            loc_155B8:
000176CC 4A28 003A                  		tst.b	$3A(a0)
000176D0 6600                       		bne.s	loc_155E2
000176D2 117C 0001 003A             		move.b	#1,$3A(a0)
000176D8 0829 0002 0022             		btst	#2,$22(a1)
000176DE 6600                       		bne.s	loc_155D0
000176E0 4229 001C                  		clr.b	$1C(a1)
000176E4                            
000176E4                            loc_155D0:
000176E4 08A9 0005 0022             		bclr	#5,$22(a1)
000176EA 137C 0001 001D             		move.b	#1,$1D(a1)
000176F0 137C 0001 0038             		move.b	#1,$38(a1)
000176F6                            
000176F6                            loc_155E2:
000176F6 3029 0014                  		move.w	$14(a1),d0
000176FA 4A68 0036                  		tst.w	$36(a0)
000176FE 6A00                       		bpl.s	loc_15608
00017700 0C40 FC00                  		cmpi.w	#-$400,d0
00017704 6F00                       		ble.s	loc_155FA
00017706 337C FC00 0014             		move.w	#-$400,$14(a1)
0001770C 4E75                       		rts	
0001770E                            ; ===========================================================================
0001770E                            
0001770E                            loc_155FA:
0001770E 0C40 F100                  		cmpi.w	#-$F00,d0
00017712 6C00                       		bge.s	locret_15606
00017714 337C F100 0014             		move.w	#-$F00,$14(a1)
0001771A                            
0001771A                            locret_15606:
0001771A 4E75                       		rts	
0001771C                            ; ===========================================================================
0001771C                            
0001771C                            loc_15608:
0001771C 0C40 0400                  		cmpi.w	#$400,d0
00017720 6C00                       		bge.s	loc_15616
00017722 337C 0400 0014             		move.w	#$400,$14(a1)
00017728 4E75                       		rts	
0001772A                            ; ===========================================================================
0001772A                            
0001772A                            loc_15616:
0001772A 0C40 0F00                  		cmpi.w	#$F00,d0
0001772E 6F00                       		ble.s	locret_15622
00017730 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017736                            
00017736                            locret_15622:
00017736 4E75                       		rts	
00017738                            ; ===========================================================================
00017738                            
00017738                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017738 3028 0036                  		move.w	$36(a0),d0
0001773C D168 0026                  		add.w	d0,$26(a0)
00017740 1028 0026                  		move.b	$26(a0),d0
00017744 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001774A 3428 0030                  		move.w	$30(a0),d2
0001774E 3628 0032                  		move.w	$32(a0),d3
00017752 7800                       		moveq	#0,d4
00017754 1828 0034                  		move.b	$34(a0),d4
00017758 E14C                       		lsl.w	#8,d4
0001775A 2A04                       		move.l	d4,d5
0001775C C9C0                       		muls.w	d0,d4
0001775E 4844                       		swap	d4
00017760 CBC1                       		muls.w	d1,d5
00017762 4845                       		swap	d5
00017764 D842                       		add.w	d2,d4
00017766 DA43                       		add.w	d3,d5
00017768 3144 000C                  		move.w	d4,$C(a0)
0001776C 3145 0008                  		move.w	d5,8(a0)
00017770 4E75                       		rts	
00017772                            ; ===========================================================================
00017772                            
00017772                            Obj67_ChkDel:				; XREF: Obj67_Action
00017772 3028 0032                  		move.w	$32(a0),d0
00017776 0240 FF80                  		andi.w	#-$80,d0
0001777A 3238 F700                  		move.w	($FFFFF700).w,d1
0001777E 0441 0080                  		subi.w	#$80,d1
00017782 0241 FF80                  		andi.w	#-$80,d1
00017786 9041                       		sub.w	d1,d0
00017788 0C40 0280                  		cmpi.w	#$280,d0
0001778C 6200                       		bhi.s	Obj67_Delete
0001778E 4EF9 0000 F180             		jmp	DisplaySprite
00017794                            ; ===========================================================================
00017794                            
00017794                            Obj67_Delete:
00017794 4EF9 0000 F1BC             		jmp	DeleteObject
0001779A                            ; ===========================================================================
0001779A                            ; ---------------------------------------------------------------------------
0001779A                            ; Sprite mappings - disc that you run around (SBZ)
0001779A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001779A                            ; part of the level tiles.)
0001779A                            ; ---------------------------------------------------------------------------
0001779A                            Map_obj67:
0001779A                            	include "_maps\obj67.asm"
0001779A                            ; ---------------------------------------------------------------------------
0001779A                            ; Sprite mappings - disc that you run around (SBZ)
0001779A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001779A                            ; part of the level tiles.)
0001779A                            ; ---------------------------------------------------------------------------
0001779A 0000                       		dc.w byte_15688-Map_obj67
0001779C 01                         byte_15688:	dc.b 1
0001779D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000177A2                            		even
000177A2                            		even
000177A2                            
000177A2                            ; ===========================================================================
000177A2                            ; ---------------------------------------------------------------------------
000177A2                            ; Object 68 - conveyor belts (SBZ)
000177A2                            ; ---------------------------------------------------------------------------
000177A2                            
000177A2                            Obj68:					; XREF: Obj_Index
000177A2 7000                       		moveq	#0,d0
000177A4 1028 0024                  		move.b	$24(a0),d0
000177A8 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000177AC 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000177B0                            ; ===========================================================================
000177B0 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000177B2 0000                       		dc.w Obj68_Action-Obj68_Index
000177B4                            ; ===========================================================================
000177B4                            
000177B4                            Obj68_Main:				; XREF: Obj68_Index
000177B4 5428 0024                  		addq.b	#2,$24(a0)
000177B8 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000177BE 1228 0028                  		move.b	$28(a0),d1	; get object type
000177C2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000177C6 6700                       		beq.s	loc_156BA	; if zero, branch
000177C8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000177CE                            
000177CE                            loc_156BA:
000177CE 1228 0028                  		move.b	$28(a0),d1	; get object type
000177D2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000177D6 4881                       		ext.w	d1
000177D8 E841                       		asr.w	#4,d1
000177DA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000177DE                            
000177DE                            Obj68_Action:				; XREF: Obj68_Index
000177DE 6100                       		bsr.s	Obj68_MoveSonic
000177E0 3028 0008                  		move.w	8(a0),d0
000177E4 0240 FF80                  		andi.w	#$FF80,d0
000177E8 3238 F700                  		move.w	($FFFFF700).w,d1
000177EC 0441 0080                  		subi.w	#$80,d1
000177F0 0241 FF80                  		andi.w	#$FF80,d1
000177F4 9041                       		sub.w	d1,d0
000177F6 0C40 0280                  		cmpi.w	#$280,d0
000177FA 6200                       		bhi.s	Obj68_Delete
000177FC 4E75                       		rts	
000177FE                            ; ===========================================================================
000177FE                            
000177FE                            Obj68_Delete:
000177FE 4EF9 0000 F1BC             		jmp	DeleteObject
00017804                            ; ===========================================================================
00017804                            
00017804                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017804 7400                       		moveq	#0,d2
00017806 1428 0038                  		move.b	$38(a0),d2
0001780A 3602                       		move.w	d2,d3
0001780C D643                       		add.w	d3,d3
0001780E 43F8 D000                  		lea	($FFFFD000).w,a1
00017812 3029 0008                  		move.w	8(a1),d0
00017816 9068 0008                  		sub.w	8(a0),d0
0001781A D042                       		add.w	d2,d0
0001781C B043                       		cmp.w	d3,d0
0001781E 6400                       		bcc.s	locret_1572E
00017820 3229 000C                  		move.w	$C(a1),d1
00017824 9268 000C                  		sub.w	$C(a0),d1
00017828 0641 0030                  		addi.w	#$30,d1
0001782C 0C41 0030                  		cmpi.w	#$30,d1
00017830 6400                       		bcc.s	locret_1572E
00017832 0829 0001 0022             		btst	#1,$22(a1)
00017838 6600                       		bne.s	locret_1572E
0001783A 3028 0036                  		move.w	$36(a0),d0
0001783E D169 0008                  		add.w	d0,8(a1)
00017842                            
00017842                            locret_1572E:
00017842 4E75                       		rts	
00017844                            
00017844                            ; ===========================================================================
00017844                            ; ---------------------------------------------------------------------------
00017844                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017844                            ; ---------------------------------------------------------------------------
00017844                            
00017844                            Obj69:					; XREF: Obj_Index
00017844 7000                       		moveq	#0,d0
00017846 1028 0024                  		move.b	$24(a0),d0
0001784A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001784E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017852                            ; ===========================================================================
00017852 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017854 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017856 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017858                            ; ===========================================================================
00017858                            
00017858                            Obj69_Main:				; XREF: Obj69_Index
00017858 5428 0024                  		addq.b	#2,$24(a0)
0001785C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017864 317C 4492 0002             		move.w	#$4492,2(a0)
0001786A 0028 0004 0001             		ori.b	#4,1(a0)
00017870 117C 0080 0019             		move.b	#$80,$19(a0)
00017876 7000                       		moveq	#0,d0
00017878 1028 0028                  		move.b	$28(a0),d0
0001787C 0240 000F                  		andi.w	#$F,d0
00017880 C0FC 003C                  		mulu.w	#$3C,d0
00017884 3140 0032                  		move.w	d0,$32(a0)
00017888 4A28 0028                  		tst.b	$28(a0)
0001788C 6A00                       		bpl.s	Obj69_Trapdoor
0001788E 5428 0024                  		addq.b	#2,$24(a0)
00017892 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001789A 317C 04DF 0002             		move.w	#$4DF,2(a0)
000178A0 117C 0010 0019             		move.b	#$10,$19(a0)
000178A6 117C 0002 001C             		move.b	#2,$1C(a0)
000178AC 7000                       		moveq	#0,d0
000178AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000178B2 3200                       		move.w	d0,d1
000178B4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000178B8 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000178BC 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000178C0 3140 0032                  		move.w	d0,$32(a0)
000178C4 0241 0070                  		andi.w	#$70,d1
000178C8 0641 0010                  		addi.w	#$10,d1
000178CC E549                       		lsl.w	#2,d1
000178CE 5341                       		subq.w	#1,d1
000178D0 3141 0036                  		move.w	d1,$36(a0)
000178D4 6000                       		bra.s	Obj69_Spinner
000178D6                            ; ===========================================================================
000178D6                            
000178D6                            Obj69_Trapdoor:				; XREF: Obj69_Index
000178D6 5368 0030                  		subq.w	#1,$30(a0)
000178DA 6A00                       		bpl.s	Obj69_Animate
000178DC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000178E2 0868 0000 001C             		bchg	#0,$1C(a0)
000178E8 4A28 0001                  		tst.b	1(a0)
000178EC 6A00                       		bpl.s	Obj69_Animate
000178EE 303C 00BB                  		move.w	#$BB,d0
000178F2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play door sound
000178F8                            
000178F8                            Obj69_Animate:
000178F8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000178FE 4EB9 0000 C132             		jsr	AnimateSprite
00017904 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017908 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001790A 323C 004B                  		move.w	#$4B,d1
0001790E 343C 000C                  		move.w	#$C,d2
00017912 3602                       		move.w	d2,d3
00017914 5243                       		addq.w	#1,d3
00017916 3828 0008                  		move.w	8(a0),d4
0001791A 6100 9C46                  		bsr.w	SolidObject
0001791E 6000 991A                  		bra.w	MarkObjGone
00017922                            ; ===========================================================================
00017922                            
00017922                            Obj69_NotSolid:
00017922 0828 0003 0022             		btst	#3,$22(a0)
00017928 6700                       		beq.s	Obj69_Display
0001792A 43F8 D000                  		lea	($FFFFD000).w,a1
0001792E 08A9 0003 0022             		bclr	#3,$22(a1)
00017934 08A8 0003 0022             		bclr	#3,$22(a0)
0001793A 4228 0025                  		clr.b	$25(a0)
0001793E                            
0001793E                            Obj69_Display:
0001793E 6000 98FA                  		bra.w	MarkObjGone
00017942                            ; ===========================================================================
00017942                            
00017942                            Obj69_Spinner:				; XREF: Obj69_Index
00017942 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017946 C068 0036                  		and.w	$36(a0),d0
0001794A 6600                       		bne.s	Obj69_Delay
0001794C 117C 0001 0034             		move.b	#1,$34(a0)
00017952                            
00017952                            Obj69_Delay:
00017952 4A28 0034                  		tst.b	$34(a0)
00017956 6700                       		beq.s	Obj69_Animate2
00017958 5368 0030                  		subq.w	#1,$30(a0)
0001795C 6A00                       		bpl.s	Obj69_Animate2
0001795E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017964 4228 0034                  		clr.b	$34(a0)
00017968 0868 0000 001C             		bchg	#0,$1C(a0)
0001796E                            
0001796E                            Obj69_Animate2:
0001796E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017974 4EB9 0000 C132             		jsr	AnimateSprite
0001797A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001797E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017980 323C 001B                  		move.w	#$1B,d1
00017984 343C 0007                  		move.w	#7,d2
00017988 3602                       		move.w	d2,d3
0001798A 5243                       		addq.w	#1,d3
0001798C 3828 0008                  		move.w	8(a0),d4
00017990 6100 9BD0                  		bsr.w	SolidObject
00017994 6000 98A4                  		bra.w	MarkObjGone
00017998                            ; ===========================================================================
00017998                            
00017998                            Obj69_NotSolid2:
00017998 0828 0003 0022             		btst	#3,$22(a0)
0001799E 6700                       		beq.s	Obj69_Display2
000179A0 43F8 D000                  		lea	($FFFFD000).w,a1
000179A4 08A9 0003 0022             		bclr	#3,$22(a1)
000179AA 08A8 0003 0022             		bclr	#3,$22(a0)
000179B0 4228 0025                  		clr.b	$25(a0)
000179B4                            
000179B4                            Obj69_Display2:
000179B4 6000 9884                  		bra.w	MarkObjGone
000179B8                            ; ===========================================================================
000179B8                            Ani_obj69:
000179B8                            	include "_anim\obj69.asm"
000179B8                            ; ---------------------------------------------------------------------------
000179B8                            ; Animation script - trapdoor (SBZ)
000179B8                            ; ---------------------------------------------------------------------------
000179B8 0000                       		dc.w byte_158AC-Ani_obj69
000179BA 0000                       		dc.w byte_158B2-Ani_obj69
000179BC 0000                       		dc.w byte_158B8-Ani_obj69
000179BE 0000                       		dc.w byte_158CC-Ani_obj69
000179C0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000179C6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000179CC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000179D9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000179E0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000179ED 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000179F4                            		even
000179F4                            		even
000179F4                            
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            ; Sprite mappings - trapdoor (SBZ)
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            Map_obj69:
000179F4                            	include "_maps\obj69.asm"
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            ; Sprite mappings - trapdoor (SBZ)
000179F4                            ; ---------------------------------------------------------------------------
000179F4 0000                       		dc.w byte_158E6-Map_obj69
000179F6 0000                       		dc.w byte_158FB-Map_obj69
000179F8 0000                       		dc.w byte_15924-Map_obj69
000179FA 04                         byte_158E6:	dc.b 4
000179FB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017A00 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017A05 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017A0A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017A0F 08                         byte_158FB:	dc.b 8
00017A10 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017A15 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017A1A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017A1F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017A24 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017A29 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00017A2E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017A33 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017A38 04                         byte_15924:	dc.b 4
00017A39 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017A3E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017A43 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017A48 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017A4E 00                         		even
00017A4E 00                         		even
00017A4E                            
00017A4E                            ; ---------------------------------------------------------------------------
00017A4E                            ; Sprite mappings - spinning platforms (SBZ)
00017A4E                            ; ---------------------------------------------------------------------------
00017A4E                            Map_obj69a:
00017A4E                            	include "_maps\obj69a.asm"
00017A4E                            ; ---------------------------------------------------------------------------
00017A4E                            ; Sprite mappings - spinning platforms (SBZ)
00017A4E                            ; ---------------------------------------------------------------------------
00017A4E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017A52 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017A56 0000                       		dc.w byte_15970-Map_obj69a
00017A58 02                         byte_15944:	dc.b 2
00017A59 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017A5E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017A63 02                         byte_1594F:	dc.b 2
00017A64 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017A69 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017A6E 02                         byte_1595A:	dc.b 2
00017A6F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017A74 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017A79 02                         byte_15965:	dc.b 2
00017A7A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017A7F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017A84 02                         byte_15970:	dc.b 2
00017A85 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017A8A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017A90 00                         		even
00017A90 00                         		even
00017A90                            
00017A90                            ; ===========================================================================
00017A90                            ; ---------------------------------------------------------------------------
00017A90                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017A90                            ; ---------------------------------------------------------------------------
00017A90                            
00017A90                            Obj6A:					; XREF: Obj_Index
00017A90 7000                       		moveq	#0,d0
00017A92 1028 0024                  		move.b	$24(a0),d0
00017A96 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017A9A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017A9E                            ; ===========================================================================
00017A9E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017AA0 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            Obj6A_Main:				; XREF: Obj6A_Index
00017AA2 5428 0024                  		addq.b	#2,$24(a0)
00017AA6 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017AAE 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017AB4 117C 0004 0001             		move.b	#4,1(a0)
00017ABA 117C 0004 0018             		move.b	#4,$18(a0)
00017AC0 117C 0020 0019             		move.b	#$20,$19(a0)
00017AC6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017ACC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017AD2 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017AD8 6400                       		bcc.s	Obj6A_Action
00017ADA 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017AE0                            
00017AE0                            Obj6A_Action:				; XREF: Obj6A_Index
00017AE0 7000                       		moveq	#0,d0
00017AE2 1028 0028                  		move.b	$28(a0),d0
00017AE6 0240 0007                  		andi.w	#7,d0
00017AEA D040                       		add.w	d0,d0
00017AEC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017AF0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017AF4 3028 003A                  		move.w	$3A(a0),d0
00017AF8 0240 FF80                  		andi.w	#$FF80,d0
00017AFC 3238 F700                  		move.w	($FFFFF700).w,d1
00017B00 0441 0080                  		subi.w	#$80,d1
00017B04 0241 FF80                  		andi.w	#$FF80,d1
00017B08 9041                       		sub.w	d1,d0
00017B0A 0C40 0280                  		cmpi.w	#$280,d0
00017B0E 6200                       		bhi.s	Obj6A_Delete
00017B10 4EF9 0000 F180             		jmp	DisplaySprite
00017B16                            ; ===========================================================================
00017B16                            
00017B16                            Obj6A_Delete:
00017B16 4EF9 0000 F1BC             		jmp	DeleteObject
00017B1C                            ; ===========================================================================
00017B1C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017B20 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017B24 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017B26                            ; ===========================================================================
00017B26                            
00017B26                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017B26 4E75                       		rts	
00017B28                            ; ===========================================================================
00017B28                            
00017B28                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017B28 323C 0060                  		move.w	#$60,d1
00017B2C 7000                       		moveq	#0,d0
00017B2E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017B32 0828 0000 0022             		btst	#0,$22(a0)
00017B38 6700                       		beq.s	Obj6A_Animate01
00017B3A 4440                       		neg.w	d0
00017B3C D041                       		add.w	d1,d0
00017B3E                            
00017B3E                            Obj6A_Animate01:
00017B3E 3228 003A                  		move.w	$3A(a0),d1
00017B42 9240                       		sub.w	d0,d1
00017B44 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017B48 5328 001E                  		subq.b	#1,$1E(a0)
00017B4C 6A00                       		bpl.s	loc_15A46
00017B4E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017B54 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017B5A                            
00017B5A                            loc_15A46:
00017B5A 4A28 0001                  		tst.b	1(a0)
00017B5E 6A00                       		bpl.s	locret_15A60
00017B60 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B64 0240 000F                  		andi.w	#$F,d0
00017B68 6600                       		bne.s	locret_15A60
00017B6A 303C 00B0                  		move.w	#$B0,d0
00017B6E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017B74                            
00017B74                            locret_15A60:
00017B74 4E75                       		rts	
00017B76                            ; ===========================================================================
00017B76                            
00017B76                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017B76 323C 0030                  		move.w	#$30,d1
00017B7A 7000                       		moveq	#0,d0
00017B7C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017B80 0828 0000 0022             		btst	#0,$22(a0)
00017B86 6700                       		beq.s	Obj6A_Animate02
00017B88 4440                       		neg.w	d0
00017B8A 0640 0080                  		addi.w	#$80,d0
00017B8E                            
00017B8E                            Obj6A_Animate02:
00017B8E 3228 0038                  		move.w	$38(a0),d1
00017B92 9240                       		sub.w	d0,d1
00017B94 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017B98 5328 001E                  		subq.b	#1,$1E(a0)
00017B9C 6A00                       		bpl.s	loc_15A96
00017B9E 117C 0002 001E             		move.b	#2,$1E(a0)
00017BA4 0868 0000 001A             		bchg	#0,$1A(a0)
00017BAA                            
00017BAA                            loc_15A96:
00017BAA 4A28 0001                  		tst.b	1(a0)
00017BAE 6A00                       		bpl.s	locret_15AB0
00017BB0 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017BB4 0C00 0018                  		cmpi.b	#$18,d0
00017BB8 6600                       		bne.s	locret_15AB0
00017BBA 303C 00B0                  		move.w	#$B0,d0
00017BBE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017BC4                            
00017BC4                            locret_15AB0:
00017BC4 4E75                       		rts	
00017BC6                            ; ===========================================================================
00017BC6                            
00017BC6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017BC6 4A28 003D                  		tst.b	$3D(a0)
00017BCA 6600                       		bne.s	Obj6A_Animate03
00017BCC 3038 D008                  		move.w	($FFFFD008).w,d0
00017BD0 0440 00C0                  		subi.w	#$C0,d0
00017BD4 6500                       		bcs.s	loc_15B02
00017BD6 9068 0008                  		sub.w	8(a0),d0
00017BDA 6500                       		bcs.s	loc_15B02
00017BDC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017BE0 0440 0080                  		subi.w	#$80,d0
00017BE4 B068 000C                  		cmp.w	$C(a0),d0
00017BE8 6400                       		bcc.s	locret_15B04
00017BEA 0640 0100                  		addi.w	#$100,d0
00017BEE B068 000C                  		cmp.w	$C(a0),d0
00017BF2 6500                       		bcs.s	locret_15B04
00017BF4 117C 0001 003D             		move.b	#1,$3D(a0)
00017BFA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017C00 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017C06 117C 0002 001A             		move.b	#2,$1A(a0)
00017C0C 303C 00B0                  		move.w	#$B0,d0
00017C10 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017C16                            
00017C16                            loc_15B02:
00017C16 588F                       		addq.l	#4,sp
00017C18                            
00017C18                            locret_15B04:
00017C18 4E75                       		rts	
00017C1A                            ; ===========================================================================
00017C1A                            
00017C1A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017C1A 4EB9 0000 F166             		jsr	SpeedToPos
00017C20 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C26 5328 001E                  		subq.b	#1,$1E(a0)
00017C2A 6A00                       		bpl.s	locret_15B24
00017C2C 117C 0002 001E             		move.b	#2,$1E(a0)
00017C32 0868 0000 001A             		bchg	#0,$1A(a0)
00017C38                            
00017C38                            locret_15B24:
00017C38 4E75                       		rts	
00017C3A                            ; ===========================================================================
00017C3A                            
00017C3A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017C3A 4A28 003D                  		tst.b	$3D(a0)
00017C3E 6600                       		bne.s	Obj6A_Animate04
00017C40 3038 D008                  		move.w	($FFFFD008).w,d0
00017C44 0640 00E0                  		addi.w	#$E0,d0
00017C48 9068 0008                  		sub.w	8(a0),d0
00017C4C 6400                       		bcc.s	loc_15B74
00017C4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017C52 0440 0080                  		subi.w	#$80,d0
00017C56 B068 000C                  		cmp.w	$C(a0),d0
00017C5A 6400                       		bcc.s	locret_15B76
00017C5C 0640 0100                  		addi.w	#$100,d0
00017C60 B068 000C                  		cmp.w	$C(a0),d0
00017C64 6500                       		bcs.s	locret_15B76
00017C66 117C 0001 003D             		move.b	#1,$3D(a0)
00017C6C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017C72 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017C78 117C 0002 001A             		move.b	#2,$1A(a0)
00017C7E 303C 00B0                  		move.w	#$B0,d0
00017C82 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play saw sound
00017C88                            
00017C88                            loc_15B74:
00017C88 588F                       		addq.l	#4,sp
00017C8A                            
00017C8A                            locret_15B76:
00017C8A 4E75                       		rts	
00017C8C                            ; ===========================================================================
00017C8C                            
00017C8C                            Obj6A_Animate04:
00017C8C 4EB9 0000 F166             		jsr	SpeedToPos
00017C92 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C98 5328 001E                  		subq.b	#1,$1E(a0)
00017C9C 6A00                       		bpl.s	locret_15B96
00017C9E 117C 0002 001E             		move.b	#2,$1E(a0)
00017CA4 0868 0000 001A             		bchg	#0,$1A(a0)
00017CAA                            
00017CAA                            locret_15B96:
00017CAA 4E75                       		rts	
00017CAC                            ; ===========================================================================
00017CAC                            ; ---------------------------------------------------------------------------
00017CAC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017CAC                            ; ---------------------------------------------------------------------------
00017CAC                            Map_obj6A:
00017CAC                            	include "_maps\obj6A.asm"
00017CAC                            ; ---------------------------------------------------------------------------
00017CAC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017CAC                            ; ---------------------------------------------------------------------------
00017CAC 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017CB0 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017CB4 07                         byte_15BA0:	dc.b 7
00017CB5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017CBA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017CBF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017CC4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017CC9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017CCE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017CD3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017CD8 07                         byte_15BC4:	dc.b 7
00017CD9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017CDE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017CE3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017CE8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017CED E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017CF2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017CF7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017CFC 04                         byte_15BE8:	dc.b 4
00017CFD E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017D02 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017D07 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017D0C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017D11 04                         byte_15BFD:	dc.b 4
00017D12 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017D17 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017D1C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017D21 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017D26                            		even
00017D26                            		even
00017D26                            
00017D26                            ; ===========================================================================
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Object 6B - stomper (SBZ)
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            
00017D26                            Obj6B:					; XREF: Obj_Index
00017D26 7000                       		moveq	#0,d0
00017D28 1028 0024                  		move.b	$24(a0),d0
00017D2C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017D30 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017D34                            ; ===========================================================================
00017D34 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017D36 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017D38                            
00017D38 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017D3C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017D40 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017D44 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017D48 8040 0005                  		dc.b  $80, $40,	  0,   5
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            Obj6B_Main:				; XREF: Obj6B_Index
00017D4C 5428 0024                  		addq.b	#2,$24(a0)
00017D50 7000                       		moveq	#0,d0
00017D52 1028 0028                  		move.b	$28(a0),d0
00017D56 E448                       		lsr.w	#2,d0
00017D58 0240 001C                  		andi.w	#$1C,d0
00017D5C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017D60 115B 0019                  		move.b	(a3)+,$19(a0)
00017D64 115B 0016                  		move.b	(a3)+,$16(a0)
00017D68 E448                       		lsr.w	#2,d0
00017D6A 1140 001A                  		move.b	d0,$1A(a0)
00017D6E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017D76 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017D7C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017D82 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017D84 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017D8A 6700                       		beq.s	Obj6B_SBZ3
00017D8C                            
00017D8C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017D8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D90 7000                       		moveq	#0,d0
00017D92 1028 0023                  		move.b	$23(a0),d0
00017D96 6700                       		beq.s	Obj6B_Delete
00017D98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D9E                            
00017D9E                            Obj6B_Delete:
00017D9E 4EF9 0000 F1BC             		jmp	DeleteObject
00017DA4                            ; ===========================================================================
00017DA4                            
00017DA4                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017DA4 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017DAA 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017DB0 6600                       		bne.s	Obj6B_SBZ12
00017DB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017DB6 7000                       		moveq	#0,d0
00017DB8 1028 0023                  		move.b	$23(a0),d0
00017DBC 6700                       		beq.s	Obj6B_SBZ12
00017DBE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017DC4 6700                       		beq.s	Obj6B_SBZ12
00017DC6 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017DCA 60C0                       		bra.s	Obj6B_ChkGone
00017DCC                            ; ===========================================================================
00017DCC                            
00017DCC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017DCC 0028 0004 0001             		ori.b	#4,1(a0)
00017DD2 117C 0004 0018             		move.b	#4,$18(a0)
00017DD8 3168 0008 0034             		move.w	8(a0),$34(a0)
00017DDE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017DE4 7000                       		moveq	#0,d0
00017DE6 101B                       		move.b	(a3)+,d0
00017DE8 3140 003C                  		move.w	d0,$3C(a0)
00017DEC 7000                       		moveq	#0,d0
00017DEE 1028 0028                  		move.b	$28(a0),d0
00017DF2 6A00                       		bpl.s	Obj6B_Action
00017DF4 0200 000F                  		andi.b	#$F,d0
00017DF8 1140 003E                  		move.b	d0,$3E(a0)
00017DFC 1153 0028                  		move.b	(a3),$28(a0)
00017E00 0C13 0005                  		cmpi.b	#5,(a3)
00017E04 6600                       		bne.s	Obj6B_ChkGone2
00017E06 08E8 0004 0001             		bset	#4,1(a0)
00017E0C                            
00017E0C                            Obj6B_ChkGone2:
00017E0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E10 7000                       		moveq	#0,d0
00017E12 1028 0023                  		move.b	$23(a0),d0
00017E16 6700                       		beq.s	Obj6B_Action
00017E18 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017E1E                            
00017E1E                            Obj6B_Action:				; XREF: Obj6B_Index
00017E1E 3F28 0008                  		move.w	8(a0),-(sp)
00017E22 7000                       		moveq	#0,d0
00017E24 1028 0028                  		move.b	$28(a0),d0
00017E28 0240 000F                  		andi.w	#$F,d0
00017E2C D040                       		add.w	d0,d0
00017E2E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017E32 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017E36 381F                       		move.w	(sp)+,d4
00017E38 4A28 0001                  		tst.b	1(a0)
00017E3C 6A00                       		bpl.s	Obj6B_ChkDel
00017E3E 7200                       		moveq	#0,d1
00017E40 1228 0019                  		move.b	$19(a0),d1
00017E44 0641 000B                  		addi.w	#$B,d1
00017E48 7400                       		moveq	#0,d2
00017E4A 1428 0016                  		move.b	$16(a0),d2
00017E4E 3602                       		move.w	d2,d3
00017E50 5243                       		addq.w	#1,d3
00017E52 6100 970E                  		bsr.w	SolidObject
00017E56                            
00017E56                            Obj6B_ChkDel:
00017E56 3028 0034                  		move.w	$34(a0),d0
00017E5A 0240 FF80                  		andi.w	#$FF80,d0
00017E5E 3238 F700                  		move.w	($FFFFF700).w,d1
00017E62 0441 0080                  		subi.w	#$80,d1
00017E66 0241 FF80                  		andi.w	#$FF80,d1
00017E6A 9041                       		sub.w	d1,d0
00017E6C 0C40 0280                  		cmpi.w	#$280,d0
00017E70 6200                       		bhi.s	loc_15D64
00017E72 4EF9 0000 F180             		jmp	DisplaySprite
00017E78                            ; ===========================================================================
00017E78                            
00017E78                            loc_15D64:
00017E78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017E7E 6600                       		bne.s	Obj6B_Delete2
00017E80 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017E84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017E88 7000                       		moveq	#0,d0
00017E8A 1028 0023                  		move.b	$23(a0),d0
00017E8E 6700                       		beq.s	Obj6B_Delete2
00017E90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017E96                            
00017E96                            Obj6B_Delete2:
00017E96 4EF9 0000 F1BC             		jmp	DeleteObject
00017E9C                            ; ===========================================================================
00017E9C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017EA0 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017EA4 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017EA8                            ; ===========================================================================
00017EA8                            
00017EA8                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017EA8 4E75                       		rts	
00017EAA                            ; ===========================================================================
00017EAA                            
00017EAA                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017EAA 4A28 0038                  		tst.b	$38(a0)
00017EAE 6600                       		bne.s	loc_15DB4
00017EB0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017EB4 7000                       		moveq	#0,d0
00017EB6 1028 003E                  		move.b	$3E(a0),d0
00017EBA 0832 0000 0000             		btst	#0,(a2,d0.w)
00017EC0 6700                       		beq.s	loc_15DC2
00017EC2 117C 0001 0038             		move.b	#1,$38(a0)
00017EC8                            
00017EC8                            loc_15DB4:
00017EC8 3028 003C                  		move.w	$3C(a0),d0
00017ECC B068 003A                  		cmp.w	$3A(a0),d0
00017ED0 6700                       		beq.s	loc_15DE0
00017ED2 5468 003A                  		addq.w	#2,$3A(a0)
00017ED6                            
00017ED6                            loc_15DC2:
00017ED6 3028 003A                  		move.w	$3A(a0),d0
00017EDA 0828 0000 0022             		btst	#0,$22(a0)
00017EE0 6700                       		beq.s	loc_15DD4
00017EE2 4440                       		neg.w	d0
00017EE4 0640 0080                  		addi.w	#$80,d0
00017EE8                            
00017EE8                            loc_15DD4:
00017EE8 3228 0034                  		move.w	$34(a0),d1
00017EEC 9240                       		sub.w	d0,d1
00017EEE 3141 0008                  		move.w	d1,8(a0)
00017EF2 4E75                       		rts	
00017EF4                            ; ===========================================================================
00017EF4                            
00017EF4                            loc_15DE0:
00017EF4 5228 0028                  		addq.b	#1,$28(a0)
00017EF8 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017EFE 4228 0038                  		clr.b	$38(a0)
00017F02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017F06 7000                       		moveq	#0,d0
00017F08 1028 0023                  		move.b	$23(a0),d0
00017F0C 67C8                       		beq.s	loc_15DC2
00017F0E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017F14 60C0                       		bra.s	loc_15DC2
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017F16 4A28 0038                  		tst.b	$38(a0)
00017F1A 6600                       		bne.s	loc_15E14
00017F1C 5368 0036                  		subq.w	#1,$36(a0)
00017F20 6600                       		bne.s	loc_15E1E
00017F22 117C 0001 0038             		move.b	#1,$38(a0)
00017F28                            
00017F28                            loc_15E14:
00017F28 4A68 003A                  		tst.w	$3A(a0)
00017F2C 6700                       		beq.s	loc_15E3C
00017F2E 5568 003A                  		subq.w	#2,$3A(a0)
00017F32                            
00017F32                            loc_15E1E:
00017F32 3028 003A                  		move.w	$3A(a0),d0
00017F36 0828 0000 0022             		btst	#0,$22(a0)
00017F3C 6700                       		beq.s	loc_15E30
00017F3E 4440                       		neg.w	d0
00017F40 0640 0080                  		addi.w	#$80,d0
00017F44                            
00017F44                            loc_15E30:
00017F44 3228 0034                  		move.w	$34(a0),d1
00017F48 9240                       		sub.w	d0,d1
00017F4A 3141 0008                  		move.w	d1,8(a0)
00017F4E 4E75                       		rts	
00017F50                            ; ===========================================================================
00017F50                            
00017F50                            loc_15E3C:
00017F50 5328 0028                  		subq.b	#1,$28(a0)
00017F54 4228 0038                  		clr.b	$38(a0)
00017F58 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017F5C 7000                       		moveq	#0,d0
00017F5E 1028 0023                  		move.b	$23(a0),d0
00017F62 67CE                       		beq.s	loc_15E1E
00017F64 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017F6A 60C6                       		bra.s	loc_15E1E
00017F6C                            ; ===========================================================================
00017F6C                            
00017F6C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017F6C 4A28 0038                  		tst.b	$38(a0)
00017F70 6600                       		bne.s	loc_15E7C
00017F72 4A68 003A                  		tst.w	$3A(a0)
00017F76 6700                       		beq.s	loc_15E6A
00017F78 5368 003A                  		subq.w	#1,$3A(a0)
00017F7C 6000                       		bra.s	loc_15E8E
00017F7E                            ; ===========================================================================
00017F7E                            
00017F7E                            loc_15E6A:
00017F7E 5368 0036                  		subq.w	#1,$36(a0)
00017F82 6A00                       		bpl.s	loc_15E8E
00017F84 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F8A 117C 0001 0038             		move.b	#1,$38(a0)
00017F90                            
00017F90                            loc_15E7C:
00017F90 5068 003A                  		addq.w	#8,$3A(a0)
00017F94 3028 003A                  		move.w	$3A(a0),d0
00017F98 B068 003C                  		cmp.w	$3C(a0),d0
00017F9C 6600                       		bne.s	loc_15E8E
00017F9E 4228 0038                  		clr.b	$38(a0)
00017FA2                            
00017FA2                            loc_15E8E:
00017FA2 3028 003A                  		move.w	$3A(a0),d0
00017FA6 0828 0000 0022             		btst	#0,$22(a0)
00017FAC 6700                       		beq.s	loc_15EA0
00017FAE 4440                       		neg.w	d0
00017FB0 0640 0038                  		addi.w	#$38,d0
00017FB4                            
00017FB4                            loc_15EA0:
00017FB4 3228 0030                  		move.w	$30(a0),d1
00017FB8 D240                       		add.w	d0,d1
00017FBA 3141 000C                  		move.w	d1,$C(a0)
00017FBE 4E75                       		rts	
00017FC0                            ; ===========================================================================
00017FC0                            
00017FC0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017FC0 4A28 0038                  		tst.b	$38(a0)
00017FC4 6600                       		bne.s	loc_15ED0
00017FC6 4A68 003A                  		tst.w	$3A(a0)
00017FCA 6700                       		beq.s	loc_15EBE
00017FCC 5168 003A                  		subq.w	#8,$3A(a0)
00017FD0 6000                       		bra.s	loc_15EF0
00017FD2                            ; ===========================================================================
00017FD2                            
00017FD2                            loc_15EBE:
00017FD2 5368 0036                  		subq.w	#1,$36(a0)
00017FD6 6A00                       		bpl.s	loc_15EF0
00017FD8 317C 003C 0036             		move.w	#$3C,$36(a0)
00017FDE 117C 0001 0038             		move.b	#1,$38(a0)
00017FE4                            
00017FE4                            loc_15ED0:
00017FE4 3028 003A                  		move.w	$3A(a0),d0
00017FE8 B068 003C                  		cmp.w	$3C(a0),d0
00017FEC 6700                       		beq.s	loc_15EE0
00017FEE 5068 003A                  		addq.w	#8,$3A(a0)
00017FF2 6000                       		bra.s	loc_15EF0
00017FF4                            ; ===========================================================================
00017FF4                            
00017FF4                            loc_15EE0:
00017FF4 5368 0036                  		subq.w	#1,$36(a0)
00017FF8 6A00                       		bpl.s	loc_15EF0
00017FFA 317C 003C 0036             		move.w	#$3C,$36(a0)
00018000 4228 0038                  		clr.b	$38(a0)
00018004                            
00018004                            loc_15EF0:
00018004 3028 003A                  		move.w	$3A(a0),d0
00018008 0828 0000 0022             		btst	#0,$22(a0)
0001800E 6700                       		beq.s	loc_15F02
00018010 4440                       		neg.w	d0
00018012 0640 0038                  		addi.w	#$38,d0
00018016                            
00018016                            loc_15F02:
00018016 3228 0030                  		move.w	$30(a0),d1
0001801A D240                       		add.w	d0,d1
0001801C 3141 000C                  		move.w	d1,$C(a0)
00018020 4E75                       		rts	
00018022                            ; ===========================================================================
00018022                            
00018022                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00018022 4A28 0038                  		tst.b	$38(a0)
00018026 6600                       		bne.s	loc_15F3E
00018028 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001802C 7000                       		moveq	#0,d0
0001802E 1028 003E                  		move.b	$3E(a0),d0
00018032 0832 0000 0000             		btst	#0,(a2,d0.w)
00018038 6700                       		beq.s	locret_15F5C
0001803A 117C 0001 0038             		move.b	#1,$38(a0)
00018040 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018044 7000                       		moveq	#0,d0
00018046 1028 0023                  		move.b	$23(a0),d0
0001804A 6700                       		beq.s	loc_15F3E
0001804C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018052                            
00018052                            loc_15F3E:
00018052 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001805A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00018062 3168 0008 0034             		move.w	8(a0),$34(a0)
00018068 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001806E 6700                       		beq.s	loc_15F5E
00018070                            
00018070                            locret_15F5C:
00018070 4E75                       		rts	
00018072                            ; ===========================================================================
00018072                            
00018072                            loc_15F5E:
00018072 4228 0028                  		clr.b	$28(a0)
00018076 4228 0038                  		clr.b	$38(a0)
0001807A 4E75                       		rts	
0001807C                            ; ===========================================================================
0001807C                            ; ---------------------------------------------------------------------------
0001807C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001807C                            ; ---------------------------------------------------------------------------
0001807C                            Map_obj6B:
0001807C                            	include "_maps\obj6B.asm"
0001807C                            ; ---------------------------------------------------------------------------
0001807C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001807C                            ; ---------------------------------------------------------------------------
0001807C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00018080 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00018084 0000                       		dc.w byte_15FB0-Map_obj6B
00018086 04                         byte_15F72:	dc.b 4
00018087 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001808C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018091 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018096 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001809B 08                         byte_15F87:	dc.b 8
0001809C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000180A1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000180A6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000180AB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000180B0 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000180B5 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000180BA 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000180BF 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000180C4 0E                         byte_15FB0:	dc.b $E
000180C5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000180CA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000180CF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000180D4 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000180D9 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000180DE C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000180E3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000180E8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000180ED E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000180F2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000180F7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000180FC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018101 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018106 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001810C 00                         		even
0001810C 00                         		even
0001810C                            
0001810C                            ; ===========================================================================
0001810C                            ; ---------------------------------------------------------------------------
0001810C                            ; Object 6C - vanishing	platforms (SBZ)
0001810C                            ; ---------------------------------------------------------------------------
0001810C                            
0001810C                            Obj6C:					; XREF: Obj_Index
0001810C 7000                       		moveq	#0,d0
0001810E 1028 0024                  		move.b	$24(a0),d0
00018112 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00018116 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001811A                            ; ===========================================================================
0001811A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001811C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001811E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018120 0000                       		dc.w loc_16068-Obj6C_Index
00018122                            ; ===========================================================================
00018122                            
00018122                            Obj6C_Main:				; XREF: Obj6C_Index
00018122 5C28 0024                  		addq.b	#6,$24(a0)
00018126 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001812E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018134 0028 0004 0001             		ori.b	#4,1(a0)
0001813A 117C 0010 0019             		move.b	#$10,$19(a0)
00018140 117C 0004 0018             		move.b	#4,$18(a0)
00018146 7000                       		moveq	#0,d0
00018148 1028 0028                  		move.b	$28(a0),d0	; get object type
0001814C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018150 5240                       		addq.w	#1,d0		; add 1
00018152 EF48                       		lsl.w	#7,d0		; multiply by $80
00018154 3200                       		move.w	d0,d1
00018156 5340                       		subq.w	#1,d0
00018158 3140 0030                  		move.w	d0,$30(a0)
0001815C 3140 0032                  		move.w	d0,$32(a0)
00018160 7000                       		moveq	#0,d0
00018162 1028 0028                  		move.b	$28(a0),d0	; get object type
00018166 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001816A 0641 0080                  		addi.w	#$80,d1
0001816E C0C1                       		mulu.w	d1,d0
00018170 E088                       		lsr.l	#8,d0
00018172 3140 0036                  		move.w	d0,$36(a0)
00018176 5341                       		subq.w	#1,d1
00018178 3141 0038                  		move.w	d1,$38(a0)
0001817C                            
0001817C                            loc_16068:				; XREF: Obj6C_Index
0001817C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018180 9068 0036                  		sub.w	$36(a0),d0
00018184 C068 0038                  		and.w	$38(a0),d0
00018188 6600                       		bne.s	Obj6C_Animate
0001818A 5928 0024                  		subq.b	#4,$24(a0)
0001818E 6000                       		bra.s	Obj6C_Vanish
00018190                            ; ===========================================================================
00018190                            
00018190                            Obj6C_Animate:
00018190 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018196 4EB9 0000 C132             		jsr	AnimateSprite
0001819C 6000 909C                  		bra.w	MarkObjGone
000181A0                            ; ===========================================================================
000181A0                            
000181A0                            Obj6C_Vanish:				; XREF: Obj6C_Index
000181A0 5368 0030                  		subq.w	#1,$30(a0)
000181A4 6A00                       		bpl.s	loc_160AA
000181A6 317C 007F 0030             		move.w	#127,$30(a0)
000181AC 4A28 001C                  		tst.b	$1C(a0)
000181B0 6700                       		beq.s	loc_160A4
000181B2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000181B8                            
000181B8                            loc_160A4:
000181B8 0868 0000 001C             		bchg	#0,$1C(a0)
000181BE                            
000181BE                            loc_160AA:
000181BE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000181C4 4EB9 0000 C132             		jsr	AnimateSprite
000181CA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000181D0 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000181D2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000181D8 6600                       		bne.s	loc_160D6
000181DA 7200                       		moveq	#0,d1
000181DC 1228 0019                  		move.b	$19(a0),d1
000181E0 4EB9 0000 8E3C             		jsr	(PlatformObject).l
000181E6 6000 9052                  		bra.w	MarkObjGone
000181EA                            ; ===========================================================================
000181EA                            
000181EA                            loc_160D6:
000181EA 7200                       		moveq	#0,d1
000181EC 1228 0019                  		move.b	$19(a0),d1
000181F0 4EB9 0000 8FB0             		jsr	(ExitPlatform).l
000181F6 3428 0008                  		move.w	8(a0),d2
000181FA 4EB9 0000 951A             		jsr	(MvSonicOnPtfm2).l
00018200 6000 9038                  		bra.w	MarkObjGone
00018204                            ; ===========================================================================
00018204                            
00018204                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018204 0828 0003 0022             		btst	#3,$22(a0)
0001820A 6700                       		beq.s	Obj6C_Display
0001820C 43F8 D000                  		lea	($FFFFD000).w,a1
00018210 08A9 0003 0022             		bclr	#3,$22(a1)
00018216 08A8 0003 0022             		bclr	#3,$22(a0)
0001821C 117C 0002 0024             		move.b	#2,$24(a0)
00018222 4228 0025                  		clr.b	$25(a0)
00018226                            
00018226                            Obj6C_Display:
00018226 6000 9012                  		bra.w	MarkObjGone
0001822A                            ; ===========================================================================
0001822A                            Ani_obj6C:
0001822A                            	include "_anim\obj6C.asm"
0001822A                            ; ---------------------------------------------------------------------------
0001822A                            ; Animation script - vanishing platforms (SBZ)
0001822A                            ; ---------------------------------------------------------------------------
0001822A 0000                       		dc.w byte_1611A-Ani_obj6C
0001822C 0000                       		dc.w byte_16122-Ani_obj6C
0001822E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00018236 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001823E                            		even
0001823E                            		even
0001823E                            
0001823E                            ; ---------------------------------------------------------------------------
0001823E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001823E                            ; ---------------------------------------------------------------------------
0001823E                            Map_obj6C:
0001823E                            	include "_maps\obj6C.asm"
0001823E                            ; ---------------------------------------------------------------------------
0001823E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001823E                            ; ---------------------------------------------------------------------------
0001823E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018242 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00018246 01                         byte_16132:	dc.b 1
00018247 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001824C 01                         byte_16138:	dc.b 1
0001824D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018252 01                         byte_1613E:	dc.b 1
00018253 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018258 00                         byte_16144:	dc.b 0
0001825A 00                         		even
0001825A 00                         		even
0001825A                            
0001825A                            ; ===========================================================================
0001825A                            ; ---------------------------------------------------------------------------
0001825A                            ; Object 6E - electrocution orbs (SBZ)
0001825A                            ; ---------------------------------------------------------------------------
0001825A                            
0001825A                            Obj6E:					; XREF: Obj_Index
0001825A 7000                       		moveq	#0,d0
0001825C 1028 0024                  		move.b	$24(a0),d0
00018260 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00018264 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00018268                            ; ===========================================================================
00018268 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001826A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001826C                            ; ===========================================================================
0001826C                            
0001826C                            Obj6E_Main:				; XREF: Obj6E_Index
0001826C 5428 0024                  		addq.b	#2,$24(a0)
00018270 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00018278 317C 047E 0002             		move.w	#$47E,2(a0)
0001827E 0028 0004 0001             		ori.b	#4,1(a0)
00018284 117C 0028 0019             		move.b	#$28,$19(a0)
0001828A 7000                       		moveq	#0,d0
0001828C 1028 0028                  		move.b	$28(a0),d0	; read object type
00018290 E948                       		lsl.w	#4,d0		; multiply by $10
00018292 5340                       		subq.w	#1,d0
00018294 3140 0034                  		move.w	d0,$34(a0)
00018298                            
00018298                            Obj6E_Shock:				; XREF: Obj6E_Index
00018298 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001829C C068 0034                  		and.w	$34(a0),d0
000182A0 6600                       		bne.s	Obj6E_Animate
000182A2 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000182A8 4A28 0001                  		tst.b	1(a0)
000182AC 6A00                       		bpl.s	Obj6E_Animate
000182AE 303C 00B1                  		move.w	#$B1,d0
000182B2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play electricity sound
000182B8                            
000182B8                            Obj6E_Animate:
000182B8 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000182BE 4EB9 0000 C132             		jsr	AnimateSprite
000182C4 117C 0000 0020             		move.b	#0,$20(a0)
000182CA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000182D0 6600                       		bne.s	Obj6E_Display	; if not, branch
000182D2 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000182D8                            
000182D8                            Obj6E_Display:
000182D8 6000 8F60                  		bra.w	MarkObjGone
000182DC                            ; ===========================================================================
000182DC                            Ani_obj6E:
000182DC                            	include "_anim\obj6E.asm"
000182DC                            ; ---------------------------------------------------------------------------
000182DC                            ; Animation script - electrocution orbs (SBZ)
000182DC                            ; ---------------------------------------------------------------------------
000182DC 0000                       		dc.w byte_161CC-Ani_obj6E
000182DE 0000                       		dc.w byte_161D0-Ani_obj6E
000182E0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000182E4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000182F4                            		even
000182F4                            		even
000182F4                            
000182F4                            ; ---------------------------------------------------------------------------
000182F4                            ; Sprite mappings - electrocution orbs (SBZ)
000182F4                            ; ---------------------------------------------------------------------------
000182F4                            Map_obj6E:
000182F4                            	include "_maps\obj6E.asm"
000182F4                            ; ---------------------------------------------------------------------------
000182F4                            ; Sprite mappings - electrocution orbs (SBZ)
000182F4                            ; ---------------------------------------------------------------------------
000182F4 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000182F8 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000182FC 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018300 02                         byte_161EC:	dc.b 2
00018301 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018306 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001830B 03                         byte_161F7:	dc.b 3
0001830C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018311 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018316 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001831B 05                         byte_16207:	dc.b 5
0001831C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018321 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018326 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001832B F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018330 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018335 04                         byte_16221:	dc.b 4
00018336 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001833B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018340 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018345 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001834A 06                         byte_16236:	dc.b 6
0001834B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018350 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018355 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001835A F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001835F F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018364 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00018369 04                         byte_16255:	dc.b 4
0001836A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001836F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018374 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00018379 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001837E                            		even
0001837E                            		even
0001837E                            
0001837E                            ; ===========================================================================
0001837E                            ; ---------------------------------------------------------------------------
0001837E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001837E                            ; ---------------------------------------------------------------------------
0001837E                            
0001837E                            Obj6F:					; XREF: Obj_Index
0001837E 7000                       		moveq	#0,d0
00018380 1028 0024                  		move.b	$24(a0),d0
00018384 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00018388 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001838C 3028 0030                  		move.w	$30(a0),d0
00018390 0240 FF80                  		andi.w	#$FF80,d0
00018394 3238 F700                  		move.w	($FFFFF700).w,d1
00018398 0441 0080                  		subi.w	#$80,d1
0001839C 0241 FF80                  		andi.w	#$FF80,d1
000183A0 9041                       		sub.w	d1,d0
000183A2 0C40 0280                  		cmpi.w	#$280,d0
000183A6 6200                       		bhi.s	loc_1629A
000183A8                            
000183A8                            Obj6F_Display:
000183A8 4EF9 0000 F180             		jmp	DisplaySprite
000183AE                            ; ===========================================================================
000183AE                            
000183AE                            loc_1629A:
000183AE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000183B4 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000183B6 0C40 FF80                  		cmpi.w	#-$80,d0
000183BA 64EC                       		bcc.s	Obj6F_Display
000183BC                            
000183BC                            Obj6F_Act1or2:
000183BC 1028 002F                  		move.b	$2F(a0),d0
000183C0 6A00                       		bpl.s	Obj6F_Delete
000183C2 0240 007F                  		andi.w	#$7F,d0
000183C6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000183CA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000183D0                            
000183D0                            Obj6F_Delete:
000183D0 4EF9 0000 F1BC             		jmp	DeleteObject
000183D6                            ; ===========================================================================
000183D6 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000183D8 0000                       		dc.w loc_163D8-Obj6F_Index
000183DA                            ; ===========================================================================
000183DA                            
000183DA                            Obj6F_Main:				; XREF: Obj6F_Index
000183DA 1028 0028                  		move.b	$28(a0),d0
000183DE 6B00 0000                  		bmi.w	loc_16380
000183E2 5428 0024                  		addq.b	#2,$24(a0)
000183E6 217C 0001 7A4E 0004        		move.l	#Map_obj69a,4(a0)
000183EE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000183F4 117C 0010 0019             		move.b	#$10,$19(a0)
000183FA 0028 0004 0001             		ori.b	#4,1(a0)
00018400 117C 0004 0018             		move.b	#4,$18(a0)
00018406 7000                       		moveq	#0,d0
00018408 1028 0028                  		move.b	$28(a0),d0
0001840C 3200                       		move.w	d0,d1
0001840E E648                       		lsr.w	#3,d0
00018410 0240 001E                  		andi.w	#$1E,d0
00018414 45FA 0000                  		lea	off_164A6(pc),a2
00018418 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001841C 315A 0038                  		move.w	(a2)+,$38(a0)
00018420 315A 0030                  		move.w	(a2)+,$30(a0)
00018424 214A 003C                  		move.l	a2,$3C(a0)
00018428 0241 000F                  		andi.w	#$F,d1
0001842C E549                       		lsl.w	#2,d1
0001842E 1141 0038                  		move.b	d1,$38(a0)
00018432 117C 0004 003A             		move.b	#4,$3A(a0)
00018438 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001843C 6700                       		beq.s	loc_16356
0001843E 117C 0001 003B             		move.b	#1,$3B(a0)
00018444 4428 003A                  		neg.b	$3A(a0)
00018448 7200                       		moveq	#0,d1
0001844A 1228 0038                  		move.b	$38(a0),d1
0001844E D228 003A                  		add.b	$3A(a0),d1
00018452 B228 0039                  		cmp.b	$39(a0),d1
00018456 6500                       		bcs.s	loc_16352
00018458 1001                       		move.b	d1,d0
0001845A 7200                       		moveq	#0,d1
0001845C 4A00                       		tst.b	d0
0001845E 6A00                       		bpl.s	loc_16352
00018460 1228 0039                  		move.b	$39(a0),d1
00018464 5901                       		subq.b	#4,d1
00018466                            
00018466                            loc_16352:
00018466 1141 0038                  		move.b	d1,$38(a0)
0001846A                            
0001846A                            loc_16356:
0001846A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018470 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00018476 4A41                       		tst.w	d1
00018478 6600                       		bne.s	loc_1636C
0001847A 117C 0001 001C             		move.b	#1,$1C(a0)
00018480                            
00018480                            loc_1636C:
00018480 0C41 0008                  		cmpi.w	#8,d1
00018484 6600                       		bne.s	loc_16378
00018486 117C 0000 001C             		move.b	#0,$1C(a0)
0001848C                            
0001848C                            loc_16378:
0001848C 6100 BC60                  		bsr.w	Obj63_ChangeDir
00018490 6000 0000                  		bra.w	loc_163D8
00018494                            ; ===========================================================================
00018494                            
00018494                            loc_16380:				; XREF: Obj6F_Main
00018494 1140 002F                  		move.b	d0,$2F(a0)
00018498 0240 007F                  		andi.w	#$7F,d0
0001849C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000184A0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000184A6 6700                       		beq.s	loc_1639A
000184A8 4EF9 0000 F1BC             		jmp	DeleteObject
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            loc_1639A:
000184AE D040                       		add.w	d0,d0
000184B0 0240 001E                  		andi.w	#$1E,d0
000184B4 0640 0080                  		addi.w	#$80,d0
000184B8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000184BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000184C2 321A                       		move.w	(a2)+,d1
000184C4 2248                       		movea.l	a0,a1
000184C6 6000                       		bra.s	Obj6F_LoadPform
000184C8                            ; ===========================================================================
000184C8                            
000184C8                            Obj6F_Loop:
000184C8 4EB9 0000 F614             		jsr	SingleObjLoad
000184CE 6600                       		bne.s	loc_163D0
000184D0                            
000184D0                            Obj6F_LoadPform:			; XREF: loc_1639A
000184D0 12BC 006F                  		move.b	#$6F,0(a1)
000184D4 335A 0008                  		move.w	(a2)+,8(a1)
000184D8 335A 000C                  		move.w	(a2)+,$C(a1)
000184DC 301A                       		move.w	(a2)+,d0
000184DE 1340 0028                  		move.b	d0,$28(a1)
000184E2                            
000184E2                            loc_163D0:
000184E2 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000184E6                            
000184E6 588F                       		addq.l	#4,sp
000184E8 4E75                       		rts	
000184EA                            ; ===========================================================================
000184EA                            
000184EA                            loc_163D8:				; XREF: Obj6F_Index
000184EA 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000184F0 4EB9 0000 C132             		jsr	AnimateSprite
000184F6 4A28 001A                  		tst.b	$1A(a0)
000184FA 6600                       		bne.s	loc_16404
000184FC 3F28 0008                  		move.w	8(a0),-(sp)
00018500 6100 0000                  		bsr.w	loc_16424
00018504 323C 001B                  		move.w	#$1B,d1
00018508 343C 0007                  		move.w	#7,d2
0001850C 3602                       		move.w	d2,d3
0001850E 5243                       		addq.w	#1,d3
00018510 381F                       		move.w	(sp)+,d4
00018512 6000 904E                  		bra.w	SolidObject
00018516                            ; ===========================================================================
00018516                            
00018516                            loc_16404:
00018516 0828 0003 0022             		btst	#3,$22(a0)
0001851C 6700                       		beq.s	loc_16420
0001851E 43F8 D000                  		lea	($FFFFD000).w,a1
00018522 08A9 0003 0022             		bclr	#3,$22(a1)
00018528 08A8 0003 0022             		bclr	#3,$22(a0)
0001852E 4228 0025                  		clr.b	$25(a0)
00018532                            
00018532                            loc_16420:
00018532 6000 0002                  		bra.w	*+4
00018536                            
00018536                            loc_16424:
00018536 3028 0008                  		move.w	8(a0),d0
0001853A B068 0034                  		cmp.w	$34(a0),d0
0001853E 6600                       		bne.s	loc_16484
00018540 3028 000C                  		move.w	$C(a0),d0
00018544 B068 0036                  		cmp.w	$36(a0),d0
00018548 6600                       		bne.s	loc_16484
0001854A 7200                       		moveq	#0,d1
0001854C 1228 0038                  		move.b	$38(a0),d1
00018550 D228 003A                  		add.b	$3A(a0),d1
00018554 B228 0039                  		cmp.b	$39(a0),d1
00018558 6500                       		bcs.s	loc_16456
0001855A 1001                       		move.b	d1,d0
0001855C 7200                       		moveq	#0,d1
0001855E 4A00                       		tst.b	d0
00018560 6A00                       		bpl.s	loc_16456
00018562 1228 0039                  		move.b	$39(a0),d1
00018566 5901                       		subq.b	#4,d1
00018568                            
00018568                            loc_16456:
00018568 1141 0038                  		move.b	d1,$38(a0)
0001856C 2268 003C                  		movea.l	$3C(a0),a1
00018570 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00018576 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001857C 4A41                       		tst.w	d1
0001857E 6600                       		bne.s	loc_16474
00018580 117C 0001 001C             		move.b	#1,$1C(a0)
00018586                            
00018586                            loc_16474:
00018586 0C41 0008                  		cmpi.w	#8,d1
0001858A 6600                       		bne.s	loc_16480
0001858C 117C 0000 001C             		move.b	#0,$1C(a0)
00018592                            
00018592                            loc_16480:
00018592 6100 BB5A                  		bsr.w	Obj63_ChangeDir
00018596                            
00018596                            loc_16484:
00018596 4EF9 0000 F166             		jmp	SpeedToPos
0001859C                            ; ===========================================================================
0001859C                            Ani_obj6F:
0001859C                            	include "_anim\obj6F.asm"
0001859C                            ; ---------------------------------------------------------------------------
0001859C                            ; Animation script - platform on conveyor belt (SBZ)
0001859C                            ; ---------------------------------------------------------------------------
0001859C 0000                       		dc.w byte_1648E-Ani_obj6F
0001859E 0000                       		dc.w byte_164A2-Ani_obj6F
000185A0 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000185AD 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000185B4 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000185B8 00                         		even
000185B8 00                         		even
000185B8                            
000185B8 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000185BE 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000185C4 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000185D8 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000185EC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018600 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018614 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018628 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001863C                            ; ===========================================================================
0001863C                            ; ---------------------------------------------------------------------------
0001863C                            ; Object 70 - large girder block (SBZ)
0001863C                            ; ---------------------------------------------------------------------------
0001863C                            
0001863C                            Obj70:					; XREF: Obj_Index
0001863C 7000                       		moveq	#0,d0
0001863E 1028 0024                  		move.b	$24(a0),d0
00018642 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018646 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001864A                            ; ===========================================================================
0001864A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001864C 0000                       		dc.w Obj70_Action-Obj70_Index
0001864E                            ; ===========================================================================
0001864E                            
0001864E                            Obj70_Main:				; XREF: Obj70_Index
0001864E 5428 0024                  		addq.b	#2,$24(a0)
00018652 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001865A 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018660 0028 0004 0001             		ori.b	#4,1(a0)
00018666 117C 0004 0018             		move.b	#4,$18(a0)
0001866C 117C 0060 0019             		move.b	#$60,$19(a0)
00018672 117C 0018 0016             		move.b	#$18,$16(a0)
00018678 3168 0008 0032             		move.w	8(a0),$32(a0)
0001867E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018684 6100 0000                  		bsr.w	Obj70_Move2
00018688                            
00018688                            Obj70_Action:				; XREF: Obj70_Index
00018688 3F28 0008                  		move.w	8(a0),-(sp)
0001868C 4A68 003A                  		tst.w	$3A(a0)
00018690 6700                       		beq.s	Obj70_Move
00018692 5368 003A                  		subq.w	#1,$3A(a0)
00018696 6600                       		bne.s	Obj70_Solid
00018698                            
00018698                            Obj70_Move:
00018698 4EB9 0000 F166             		jsr	SpeedToPos
0001869E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000186A2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000186A4 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000186A8                            
000186A8                            Obj70_Solid:
000186A8 381F                       		move.w	(sp)+,d4
000186AA 4A28 0001                  		tst.b	1(a0)
000186AE 6A00                       		bpl.s	Obj70_ChkDel
000186B0 7200                       		moveq	#0,d1
000186B2 1228 0019                  		move.b	$19(a0),d1
000186B6 0641 000B                  		addi.w	#$B,d1
000186BA 7400                       		moveq	#0,d2
000186BC 1428 0016                  		move.b	$16(a0),d2
000186C0 3602                       		move.w	d2,d3
000186C2 5243                       		addq.w	#1,d3
000186C4 6100 8E9C                  		bsr.w	SolidObject
000186C8                            
000186C8                            Obj70_ChkDel:
000186C8 3028 0032                  		move.w	$32(a0),d0
000186CC 0240 FF80                  		andi.w	#$FF80,d0
000186D0 3238 F700                  		move.w	($FFFFF700).w,d1
000186D4 0441 0080                  		subi.w	#$80,d1
000186D8 0241 FF80                  		andi.w	#$FF80,d1
000186DC 9041                       		sub.w	d1,d0
000186DE 0C40 0280                  		cmpi.w	#$280,d0
000186E2 6200                       		bhi.s	Obj70_Delete
000186E4 4EF9 0000 F180             		jmp	DisplaySprite
000186EA                            ; ===========================================================================
000186EA                            
000186EA                            Obj70_Delete:
000186EA 4EF9 0000 F1BC             		jmp	DeleteObject
000186F0                            ; ===========================================================================
000186F0                            
000186F0                            Obj70_Move2:				; XREF: Obj70_Main
000186F0 1028 0038                  		move.b	$38(a0),d0
000186F4 0240 0018                  		andi.w	#$18,d0
000186F8 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000186FE 43F1 0000                  		lea	(a1,d0.w),a1
00018702 3159 0010                  		move.w	(a1)+,$10(a0)
00018706 3159 0012                  		move.w	(a1)+,$12(a0)
0001870A 3159 0034                  		move.w	(a1)+,$34(a0)
0001870E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018712 317C 0007 003A             		move.w	#7,$3A(a0)
00018718 4E75                       		rts	
0001871A                            ; ===========================================================================
0001871A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018722 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001872A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018732 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - large girder block (SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            Map_obj70:
0001873A                            	include "_maps\obj70.asm"
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - large girder block (SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A 0000                       		dc.w byte_1662A-Map_obj70
0001873C 0C                         byte_1662A:	dc.b $C
0001873D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018742 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018747 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001874C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018751 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018756 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001875B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018760 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018765 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001876A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001876F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018774 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001877A 00                         		even
0001877A 00                         		even
0001877A                            
0001877A                            ; ===========================================================================
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            ; Object 72 - teleporter (SBZ)
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            
0001877A                            Obj72:					; XREF: Obj_Index
0001877A 7000                       		moveq	#0,d0
0001877C 1028 0024                  		move.b	$24(a0),d0
00018780 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018784 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018788 3028 0008                  		move.w	8(a0),d0
0001878C 0240 FF80                  		andi.w	#$FF80,d0
00018790 3238 F700                  		move.w	($FFFFF700).w,d1
00018794 0441 0080                  		subi.w	#$80,d1
00018798 0241 FF80                  		andi.w	#$FF80,d1
0001879C 9041                       		sub.w	d1,d0
0001879E 0C40 0280                  		cmpi.w	#$280,d0
000187A2 6200                       		bhi.s	Obj72_Delete
000187A4 4E75                       		rts	
000187A6                            ; ===========================================================================
000187A6                            
000187A6                            Obj72_Delete:
000187A6 4EF9 0000 F1BC             		jmp	DeleteObject
000187AC                            ; ===========================================================================
000187AC 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000187AE 0000                       		dc.w loc_166C8-Obj72_Index
000187B0 0000                       		dc.w loc_1675E-Obj72_Index
000187B2 0000                       		dc.w loc_16798-Obj72_Index
000187B4                            ; ===========================================================================
000187B4                            
000187B4                            Obj72_Main:				; XREF: Obj72_Index
000187B4 5428 0024                  		addq.b	#2,$24(a0)
000187B8 1028 0028                  		move.b	$28(a0),d0
000187BC D040                       		add.w	d0,d0
000187BE 0240 001E                  		andi.w	#$1E,d0
000187C2 45FA 0000                  		lea	Obj72_Data(pc),a2
000187C6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000187CA 315A 003A                  		move.w	(a2)+,$3A(a0)
000187CE 214A 003C                  		move.l	a2,$3C(a0)
000187D2 315A 0036                  		move.w	(a2)+,$36(a0)
000187D6 315A 0038                  		move.w	(a2)+,$38(a0)
000187DA                            
000187DA                            loc_166C8:				; XREF: Obj72_Index
000187DA 43F8 D000                  		lea	($FFFFD000).w,a1
000187DE 3029 0008                  		move.w	8(a1),d0
000187E2 9068 0008                  		sub.w	8(a0),d0
000187E6 0828 0000 0022             		btst	#0,$22(a0)
000187EC 6700                       		beq.s	loc_166E0
000187EE 0640 000F                  		addi.w	#$F,d0
000187F2                            
000187F2                            loc_166E0:
000187F2 0C40 0010                  		cmpi.w	#$10,d0
000187F6 6400                       		bcc.s	locret_1675C
000187F8 3229 000C                  		move.w	$C(a1),d1
000187FC 9268 000C                  		sub.w	$C(a0),d1
00018800 0641 0020                  		addi.w	#$20,d1
00018804 0C41 0040                  		cmpi.w	#$40,d1
00018808 6400                       		bcc.s	locret_1675C
0001880A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001880E 6600                       		bne.s	locret_1675C
00018810 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018816 6600                       		bne.s	loc_1670E
00018818 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001881E 6500                       		bcs.s	locret_1675C
00018820                            
00018820                            loc_1670E:
00018820 5428 0024                  		addq.b	#2,$24(a0)
00018824 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001882A 137C 001A 001C             		move.b	#$1A,$1C(a1)	; use Sonic's hurt animation
00018830 337C 0800 0014             		move.w	#$800,$14(a1)
00018836 337C 0000 0010             		move.w	#0,$10(a1)
0001883C 337C 0000 0012             		move.w	#0,$12(a1)
00018842 08A8 0005 0022             		bclr	#5,$22(a0)
00018848 08A9 0005 0022             		bclr	#5,$22(a1)
0001884E 08E9 0001 0022             		bset	#1,$22(a1)
00018854 3368 0008 0008             		move.w	8(a0),8(a1)
0001885A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018860 4228 0032                  		clr.b	$32(a0)
00018864 303C 00BE                  		move.w	#$BE,d0
00018868 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001886E                            
0001886E                            locret_1675C:
0001886E 4E75                       		rts	
00018870                            ; ===========================================================================
00018870                            
00018870                            loc_1675E:				; XREF: Obj72_Index
00018870 43F8 D000                  		lea	($FFFFD000).w,a1
00018874 1028 0032                  		move.b	$32(a0),d0
00018878 5428 0032                  		addq.b	#2,$32(a0)
0001887C 4EB9 0000 2B7A             		jsr	(CalcSine).l
00018882 EA40                       		asr.w	#5,d0
00018884 3428 000C                  		move.w	$C(a0),d2
00018888 9440                       		sub.w	d0,d2
0001888A 3342 000C                  		move.w	d2,$C(a1)
0001888E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018894 6600                       		bne.s	locret_16796
00018896 6100 0000                  		bsr.w	sub_1681C
0001889A 5428 0024                  		addq.b	#2,$24(a0)
0001889E 303C 00BC                  		move.w	#$BC,d0
000188A2 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play teleport sound
000188A8                            
000188A8                            locret_16796:
000188A8 4E75                       		rts	
000188AA                            ; ===========================================================================
000188AA                            
000188AA                            loc_16798:				; XREF: Obj72_Index
000188AA 588F                       		addq.l	#4,sp
000188AC 43F8 D000                  		lea	($FFFFD000).w,a1
000188B0 5328 002E                  		subq.b	#1,$2E(a0)
000188B4 6A00                       		bpl.s	loc_167DA
000188B6 3368 0036 0008             		move.w	$36(a0),8(a1)
000188BC 3368 0038 000C             		move.w	$38(a0),$C(a1)
000188C2 7200                       		moveq	#0,d1
000188C4 1228 003A                  		move.b	$3A(a0),d1
000188C8 5801                       		addq.b	#4,d1
000188CA B228 003B                  		cmp.b	$3B(a0),d1
000188CE 6500                       		bcs.s	loc_167C2
000188D0 7200                       		moveq	#0,d1
000188D2 6000                       		bra.s	loc_16800
000188D4                            ; ===========================================================================
000188D4                            
000188D4                            loc_167C2:
000188D4 1141 003A                  		move.b	d1,$3A(a0)
000188D8 2468 003C                  		movea.l	$3C(a0),a2
000188DC 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000188E2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000188E8 6000 0000                  		bra.w	sub_1681C
000188EC                            ; ===========================================================================
000188EC                            
000188EC                            loc_167DA:
000188EC 2429 0008                  		move.l	8(a1),d2
000188F0 2629 000C                  		move.l	$C(a1),d3
000188F4 3029 0010                  		move.w	$10(a1),d0
000188F8 48C0                       		ext.l	d0
000188FA E180                       		asl.l	#8,d0
000188FC D480                       		add.l	d0,d2
000188FE 3029 0012                  		move.w	$12(a1),d0
00018902 48C0                       		ext.l	d0
00018904 E180                       		asl.l	#8,d0
00018906 D680                       		add.l	d0,d3
00018908 2342 0008                  		move.l	d2,8(a1)
0001890C 2343 000C                  		move.l	d3,$C(a1)
00018910 4E75                       		rts	
00018912                            ; ===========================================================================
00018912                            
00018912                            loc_16800:
00018912 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018918 4228 0024                  		clr.b	$24(a0)
0001891C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018920 337C 0000 0010             		move.w	#0,$10(a1)
00018926 337C 0200 0012             		move.w	#$200,$12(a1)
0001892C 4E75                       		rts	
0001892E                            
0001892E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001892E                            
0001892E                            
0001892E                            sub_1681C:
0001892E 7000                       		moveq	#0,d0
00018930 343C 1000                  		move.w	#$1000,d2
00018934 3028 0036                  		move.w	$36(a0),d0
00018938 9069 0008                  		sub.w	8(a1),d0
0001893C 6C00                       		bge.s	loc_16830
0001893E 4440                       		neg.w	d0
00018940 4442                       		neg.w	d2
00018942                            
00018942                            loc_16830:
00018942 7200                       		moveq	#0,d1
00018944 363C 1000                  		move.w	#$1000,d3
00018948 3228 0038                  		move.w	$38(a0),d1
0001894C 9269 000C                  		sub.w	$C(a1),d1
00018950 6C00                       		bge.s	loc_16844
00018952 4441                       		neg.w	d1
00018954 4443                       		neg.w	d3
00018956                            
00018956                            loc_16844:
00018956 B240                       		cmp.w	d0,d1
00018958 6500                       		bcs.s	loc_1687A
0001895A 7200                       		moveq	#0,d1
0001895C 3228 0038                  		move.w	$38(a0),d1
00018960 9269 000C                  		sub.w	$C(a1),d1
00018964 4841                       		swap	d1
00018966 83C3                       		divs.w	d3,d1
00018968 7000                       		moveq	#0,d0
0001896A 3028 0036                  		move.w	$36(a0),d0
0001896E 9069 0008                  		sub.w	8(a1),d0
00018972 6700                       		beq.s	loc_16866
00018974 4840                       		swap	d0
00018976 81C1                       		divs.w	d1,d0
00018978                            
00018978                            loc_16866:
00018978 3340 0010                  		move.w	d0,$10(a1)
0001897C 3343 0012                  		move.w	d3,$12(a1)
00018980 4A41                       		tst.w	d1
00018982 6A00                       		bpl.s	loc_16874
00018984 4441                       		neg.w	d1
00018986                            
00018986                            loc_16874:
00018986 3141 002E                  		move.w	d1,$2E(a0)
0001898A 4E75                       		rts	
0001898C                            ; ===========================================================================
0001898C                            
0001898C                            loc_1687A:
0001898C 7000                       		moveq	#0,d0
0001898E 3028 0036                  		move.w	$36(a0),d0
00018992 9069 0008                  		sub.w	8(a1),d0
00018996 4840                       		swap	d0
00018998 81C2                       		divs.w	d2,d0
0001899A 7200                       		moveq	#0,d1
0001899C 3228 0038                  		move.w	$38(a0),d1
000189A0 9269 000C                  		sub.w	$C(a1),d1
000189A4 6700                       		beq.s	loc_16898
000189A6 4841                       		swap	d1
000189A8 83C0                       		divs.w	d0,d1
000189AA                            
000189AA                            loc_16898:
000189AA 3341 0012                  		move.w	d1,$12(a1)
000189AE 3342 0010                  		move.w	d2,$10(a1)
000189B2 4A40                       		tst.w	d0
000189B4 6A00                       		bpl.s	loc_168A6
000189B6 4440                       		neg.w	d0
000189B8                            
000189B8                            loc_168A6:
000189B8 3140 002E                  		move.w	d0,$2E(a0)
000189BC 4E75                       		rts	
000189BE                            ; End of function sub_1681C
000189BE                            
000189BE                            ; ===========================================================================
000189BE 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000189C4 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000189CA 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000189CE 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000189D4 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000189DA 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000189E0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000189E6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000189EC 0884 0298 0894             		dc.w $884, $298, $894
000189F2 0270 0894 0190             		dc.w $270, $894, $190
000189F8 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000189FE 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018A04 1184 0498 1158             		dc.w $1184, $498, $1158
00018A0A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018A10 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018A16 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018A1C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018A22 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018A28 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018A2E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018A34 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018A3A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018A40 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018A46                            ; ===========================================================================
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            
00018A46                            Obj78:					; XREF: Obj_Index
00018A46 7000                       		moveq	#0,d0
00018A48 1028 0024                  		move.b	$24(a0),d0
00018A4C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018A50 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018A54                            ; ===========================================================================
00018A54 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018A56 0000                       		dc.w Obj78_Action-Obj78_Index
00018A58 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018A5A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018A5C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018A5E 0000                       		dc.w Obj78_Delete-Obj78_Index
00018A60 0000                       		dc.w loc_16CC0-Obj78_Index
00018A62                            ; ===========================================================================
00018A62                            
00018A62                            locret_16950:
00018A62 4E75                       		rts	
00018A64                            ; ===========================================================================
00018A64                            
00018A64                            Obj78_Main:				; XREF: Obj78_Index
00018A64 117C 0007 0016             		move.b	#7,$16(a0)
00018A6A 117C 0008 0017             		move.b	#8,$17(a0)
00018A70 4EB9 0000 F146             		jsr	ObjectFall
00018A76 4EBA E4B6                  		jsr	ObjHitFloor
00018A7A 4A41                       		tst.w	d1
00018A7C 6AE4                       		bpl.s	locret_16950
00018A7E D368 000C                  		add.w	d1,$C(a0)
00018A82 4268 0012                  		clr.w	$12(a0)
00018A86 5428 0024                  		addq.b	#2,$24(a0)
00018A8A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018A92 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018A98 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018A9E 6700                       		beq.s	loc_16996
00018AA0 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018AA6                            
00018AA6                            loc_16996:
00018AA6 0228 0003 0001             		andi.b	#3,1(a0)
00018AAC 0028 0004 0001             		ori.b	#4,1(a0)
00018AB2 1168 0001 0022             		move.b	1(a0),$22(a0)
00018AB8 117C 0004 0018             		move.b	#4,$18(a0)
00018ABE 117C 0008 0019             		move.b	#8,$19(a0)
00018AC4 117C 000B 0020             		move.b	#$B,$20(a0)
00018ACA 3428 0008                  		move.w	8(a0),d2
00018ACE 7A0C                       		moveq	#$C,d5
00018AD0 0828 0000 0022             		btst	#0,$22(a0)
00018AD6 6700                       		beq.s	loc_169CA
00018AD8 4445                       		neg.w	d5
00018ADA                            
00018ADA                            loc_169CA:
00018ADA 1C3C 0004                  		move.b	#4,d6
00018ADE 7600                       		moveq	#0,d3
00018AE0 7804                       		moveq	#4,d4
00018AE2 2448                       		movea.l	a0,a2
00018AE4 7202                       		moveq	#2,d1
00018AE6                            
00018AE6                            Obj78_LoadBody:
00018AE6 4EB9 0000 F62A             		jsr	SingleObjLoad2
00018AEC 6600                       		bne.s	Obj78_QuitLoad
00018AEE 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018AF2 1346 0024                  		move.b	d6,$24(a1)
00018AF6 5406                       		addq.b	#2,d6
00018AF8 2368 0004 0004             		move.l	4(a0),4(a1)
00018AFE 3368 0002 0002             		move.w	2(a0),2(a1)
00018B04 137C 0005 0018             		move.b	#5,$18(a1)
00018B0A 137C 0008 0019             		move.b	#8,$19(a1)
00018B10 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018B16 D445                       		add.w	d5,d2
00018B18 3342 0008                  		move.w	d2,8(a1)
00018B1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B22 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018B28 1368 0022 0001             		move.b	$22(a0),1(a1)
00018B2E 137C 0008 001A             		move.b	#8,$1A(a1)
00018B34 234A 003C                  		move.l	a2,$3C(a1)
00018B38 1344 003C                  		move.b	d4,$3C(a1)
00018B3C 5804                       		addq.b	#4,d4
00018B3E 2449                       		movea.l	a1,a2
00018B40                            
00018B40                            Obj78_QuitLoad:
00018B40 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018B44                            
00018B44 117C 0007 002A             		move.b	#7,$2A(a0)
00018B4A 4228 003C                  		clr.b	$3C(a0)
00018B4E                            
00018B4E                            Obj78_Action:				; XREF: Obj78_Index
00018B4E 4A28 0022                  		tst.b	$22(a0)
00018B52 6B00 0000                  		bmi.w	loc_16C96
00018B56 7000                       		moveq	#0,d0
00018B58 1028 0025                  		move.b	$25(a0),d0
00018B5C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018B60 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018B64 1228 002B                  		move.b	$2B(a0),d1
00018B68 6A00                       		bpl.s	Obj78_Display
00018B6A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018B70 1028 0026                  		move.b	$26(a0),d0
00018B74 0240 007F                  		andi.w	#$7F,d0
00018B78 5828 0026                  		addq.b	#4,$26(a0)
00018B7C 1031 0000                  		move.b	(a1,d0.w),d0
00018B80 6A00                       		bpl.s	Obj78_AniHead
00018B82 08A8 0007 002B             		bclr	#7,$2B(a0)
00018B88 6000                       		bra.s	Obj78_Display
00018B8A                            ; ===========================================================================
00018B8A                            
00018B8A                            Obj78_AniHead:
00018B8A 0201 0010                  		andi.b	#$10,d1
00018B8E D001                       		add.b	d1,d0
00018B90 1140 001A                  		move.b	d0,$1A(a0)
00018B94                            
00018B94                            Obj78_Display:
00018B94 3028 0008                  		move.w	8(a0),d0
00018B98 0240 FF80                  		andi.w	#$FF80,d0
00018B9C 3238 F700                  		move.w	($FFFFF700).w,d1
00018BA0 0441 0080                  		subi.w	#$80,d1
00018BA4 0241 FF80                  		andi.w	#$FF80,d1
00018BA8 9041                       		sub.w	d1,d0
00018BAA 0C40 0280                  		cmpi.w	#$280,d0
00018BAE 6200 0000                  		bhi.w	Obj78_ChkGone
00018BB2 4EF9 0000 F180             		jmp	DisplaySprite
00018BB8                            ; ===========================================================================
00018BB8                            
00018BB8                            Obj78_ChkGone:
00018BB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018BBC 7000                       		moveq	#0,d0
00018BBE 1028 0023                  		move.b	$23(a0),d0
00018BC2 6700                       		beq.s	loc_16ABC
00018BC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BCA                            
00018BCA                            loc_16ABC:
00018BCA 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018BD0 4E75                       		rts	
00018BD2                            ; ===========================================================================
00018BD2                            
00018BD2                            Obj78_Delete:				; XREF: Obj78_Index
00018BD2 4EF9 0000 F1BC             		jmp	DeleteObject
00018BD8                            ; ===========================================================================
00018BD8 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018BDA 0000                       		dc.w loc_16B02-Obj78_Index2
00018BDC                            ; ===========================================================================
00018BDC                            
00018BDC                            Obj78_Move:				; XREF: Obj78_Index2
00018BDC 5328 002A                  		subq.b	#1,$2A(a0)
00018BE0 6B00                       		bmi.s	Obj78_Move2
00018BE2 4E75                       		rts	
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            Obj78_Move2:
00018BE4 5428 0025                  		addq.b	#2,$25(a0)
00018BE8 117C 0010 002A             		move.b	#$10,$2A(a0)
00018BEE 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018BF4 317C 0040 0014             		move.w	#$40,$14(a0)
00018BFA 0868 0004 002B             		bchg	#4,$2B(a0)
00018C00 6600                       		bne.s	loc_16AFC
00018C02 4268 0010                  		clr.w	$10(a0)
00018C06 4468 0014                  		neg.w	$14(a0)
00018C0A                            
00018C0A                            loc_16AFC:
00018C0A 08E8 0007 002B             		bset	#7,$2B(a0)
00018C10                            
00018C10                            loc_16B02:				; XREF: Obj78_Index2
00018C10 5328 002A                  		subq.b	#1,$2A(a0)
00018C14 6B00                       		bmi.s	loc_16B5E
00018C16 2F28 0008                  		move.l	8(a0),-(sp)
00018C1A 2428 0008                  		move.l	8(a0),d2
00018C1E 3028 0010                  		move.w	$10(a0),d0
00018C22 0828 0000 0022             		btst	#0,$22(a0)
00018C28 6700                       		beq.s	loc_16B1E
00018C2A 4440                       		neg.w	d0
00018C2C                            
00018C2C                            loc_16B1E:
00018C2C 48C0                       		ext.l	d0
00018C2E E180                       		asl.l	#8,d0
00018C30 D480                       		add.l	d0,d2
00018C32 2142 0008                  		move.l	d2,8(a0)
00018C36 4EBA E2F6                  		jsr	ObjHitFloor
00018C3A 241F                       		move.l	(sp)+,d2
00018C3C 0C41 FFF8                  		cmpi.w	#-8,d1
00018C40 6D00                       		blt.s	loc_16B70
00018C42 0C41 000C                  		cmpi.w	#$C,d1
00018C46 6C00                       		bge.s	loc_16B70
00018C48 D368 000C                  		add.w	d1,$C(a0)
00018C4C 4842                       		swap	d2
00018C4E B468 0008                  		cmp.w	8(a0),d2
00018C52 6700                       		beq.s	locret_16B5C
00018C54 7000                       		moveq	#0,d0
00018C56 1028 003C                  		move.b	$3C(a0),d0
00018C5A 5228 003C                  		addq.b	#1,$3C(a0)
00018C5E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C64 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C68                            
00018C68                            locret_16B5C:
00018C68 4E75                       		rts	
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            loc_16B5E:
00018C6A 5528 0025                  		subq.b	#2,$25(a0)
00018C6E 117C 0007 002A             		move.b	#7,$2A(a0)
00018C74 317C 0000 0010             		move.w	#0,$10(a0)
00018C7A 4E75                       		rts	
00018C7C                            ; ===========================================================================
00018C7C                            
00018C7C                            loc_16B70:
00018C7C 2142 0008                  		move.l	d2,8(a0)
00018C80 0868 0000 0022             		bchg	#0,$22(a0)
00018C86 1168 0022 0001             		move.b	$22(a0),1(a0)
00018C8C 7000                       		moveq	#0,d0
00018C8E 1028 003C                  		move.b	$3C(a0),d0
00018C92 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018C98 5228 003C                  		addq.b	#1,$3C(a0)
00018C9C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018CA2 4E75                       		rts	
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018CA4 2268 003C                  		movea.l	$3C(a0),a1
00018CA8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018CAE 6A00                       		bpl.s	Obj78_BodySeg1
00018CB0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018CB6 1028 0026                  		move.b	$26(a0),d0
00018CBA 0240 007F                  		andi.w	#$7F,d0
00018CBE 5828 0026                  		addq.b	#4,$26(a0)
00018CC2 4A31 0004                  		tst.b	4(a1,d0.w)
00018CC6 6A00                       		bpl.s	Obj78_AniBody
00018CC8 5828 0026                  		addq.b	#4,$26(a0)
00018CCC                            
00018CCC                            Obj78_AniBody:
00018CCC 1031 0000                  		move.b	(a1,d0.w),d0
00018CD0 5000                       		addq.b	#8,d0
00018CD2 1140 001A                  		move.b	d0,$1A(a0)
00018CD6                            
00018CD6                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018CD6 2268 003C                  		movea.l	$3C(a0),a1
00018CDA 4A28 0022                  		tst.b	$22(a0)
00018CDE 6B00 0000                  		bmi.w	loc_16C90
00018CE2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018CE8 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018CEE 6700 0000                  		beq.w	loc_16C64
00018CF2 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018CF8 3029 0010                  		move.w	$10(a1),d0
00018CFC D069 0014                  		add.w	$14(a1),d0
00018D00 3140 0010                  		move.w	d0,$10(a0)
00018D04 2428 0008                  		move.l	8(a0),d2
00018D08 2602                       		move.l	d2,d3
00018D0A 3028 0010                  		move.w	$10(a0),d0
00018D0E 0828 0000 0022             		btst	#0,$22(a0)
00018D14 6700                       		beq.s	loc_16C0C
00018D16 4440                       		neg.w	d0
00018D18                            
00018D18                            loc_16C0C:
00018D18 48C0                       		ext.l	d0
00018D1A E180                       		asl.l	#8,d0
00018D1C D480                       		add.l	d0,d2
00018D1E 2142 0008                  		move.l	d2,8(a0)
00018D22 4843                       		swap	d3
00018D24 B668 0008                  		cmp.w	8(a0),d3
00018D28 6700                       		beq.s	loc_16C64
00018D2A 7000                       		moveq	#0,d0
00018D2C 1028 003C                  		move.b	$3C(a0),d0
00018D30 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018D34 0C01 0080                  		cmpi.b	#-$80,d1
00018D38 6600                       		bne.s	loc_16C50
00018D3A 4843                       		swap	d3
00018D3C 2143 0008                  		move.l	d3,8(a0)
00018D40 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018D44 0868 0000 0022             		bchg	#0,$22(a0)
00018D4A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018D50 5228 003C                  		addq.b	#1,$3C(a0)
00018D54 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018D5A 6000                       		bra.s	loc_16C64
00018D5C                            ; ===========================================================================
00018D5C                            
00018D5C                            loc_16C50:
00018D5C 4881                       		ext.w	d1
00018D5E D368 000C                  		add.w	d1,$C(a0)
00018D62 5228 003C                  		addq.b	#1,$3C(a0)
00018D66 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018D6C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018D70                            
00018D70                            loc_16C64:
00018D70 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018D76 6700                       		beq.s	loc_16C90
00018D78 0C11 0027                  		cmpi.b	#$27,0(a1)
00018D7C 6700                       		beq.s	loc_16C7C
00018D7E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018D84 6600                       		bne.s	loc_16C82
00018D86                            
00018D86                            loc_16C7C:
00018D86 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018D8A 117C 000A 0024             		move.b	#$A,$24(a0)
00018D90                            
00018D90                            loc_16C82:
00018D90 4EF9 0000 F180             		jmp	DisplaySprite
00018D96                            
00018D96                            ; ===========================================================================
00018D96 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018D9E                            ; ===========================================================================
00018D9E                            
00018D9E                            loc_16C90:
00018D9E 08E9 0007 0022             		bset	#7,$22(a1)
00018DA4                            
00018DA4                            loc_16C96:
00018DA4 7000                       		moveq	#0,d0
00018DA6 1028 0024                  		move.b	$24(a0),d0
00018DAA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018DAE 0828 0000 0022             		btst	#0,$22(a0)
00018DB4 6700                       		beq.s	loc_16CAA
00018DB6 4440                       		neg.w	d0
00018DB8                            
00018DB8                            loc_16CAA:
00018DB8 3140 0010                  		move.w	d0,$10(a0)
00018DBC 317C FC00 0012             		move.w	#-$400,$12(a0)
00018DC2 117C 000C 0024             		move.b	#$C,$24(a0)
00018DC8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018DCE                            
00018DCE                            loc_16CC0:				; XREF: Obj78_Index
00018DCE 4EB9 0000 F146             		jsr	ObjectFall
00018DD4 4A68 0012                  		tst.w	$12(a0)
00018DD8 6B00                       		bmi.s	loc_16CE0
00018DDA 4EBA E152                  		jsr	ObjHitFloor
00018DDE 4A41                       		tst.w	d1
00018DE0 6A00                       		bpl.s	loc_16CE0
00018DE2 D368 000C                  		add.w	d1,$C(a0)
00018DE6 317C FC00 0012             		move.w	#-$400,$12(a0)
00018DEC                            
00018DEC                            loc_16CE0:
00018DEC 4A28 0001                  		tst.b	1(a0)
00018DF0 6A00 FDC6                  		bpl.w	Obj78_ChkGone
00018DF4 4EF9 0000 F180             		jmp	DisplaySprite
00018DFA                            ; ===========================================================================
00018DFA                            Ani_obj78:
00018DFA                            	include "_anim\obj78.asm"
00018DFA                            ; ---------------------------------------------------------------------------
00018DFA                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018DFA                            ; ---------------------------------------------------------------------------
00018DFA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018E0A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018E1A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018E2A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018E3A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018E4A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018E5A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018E6A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018E7A                            	even
00018E7A                            	even
00018E7A                            
00018E7A                            ; ---------------------------------------------------------------------------
00018E7A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018E7A                            ; ---------------------------------------------------------------------------
00018E7A                            Map_obj78:
00018E7A                            	include "_maps\obj78.asm"
00018E7A                            ; ---------------------------------------------------------------------------
00018E7A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018E7A                            ; ---------------------------------------------------------------------------
00018E7A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018E7E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018E82 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018E86 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018E8A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018E8E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018E92 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018E96 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018E9A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018E9E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018EA2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018EA6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018EAA 01                         byte_16D9E:	dc.b 1
00018EAB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018EB0 01                         byte_16DA4:	dc.b 1
00018EB1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018EB6 01                         byte_16DAA:	dc.b 1
00018EB7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018EBC 01                         byte_16DB0:	dc.b 1
00018EBD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018EC2 01                         byte_16DB6:	dc.b 1
00018EC3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018EC8 01                         byte_16DBC:	dc.b 1
00018EC9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018ECE 01                         byte_16DC2:	dc.b 1
00018ECF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018ED4 01                         byte_16DC8:	dc.b 1
00018ED5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018EDA 01                         byte_16DCE:	dc.b 1
00018EDB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018EE0 01                         byte_16DD4:	dc.b 1
00018EE1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018EE6 01                         byte_16DDA:	dc.b 1
00018EE7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018EEC 01                         byte_16DE0:	dc.b 1
00018EED F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018EF2 01                         byte_16DE6:	dc.b 1
00018EF3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018EF8 01                         byte_16DEC:	dc.b 1
00018EF9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018EFE 01                         byte_16DF2:	dc.b 1
00018EFF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018F04 01                         byte_16DF8:	dc.b 1
00018F05 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018F0A 01                         byte_16DFE:	dc.b 1
00018F0B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018F10 01                         byte_16E04:	dc.b 1
00018F11 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018F16 01                         byte_16E0A:	dc.b 1
00018F17 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018F1C 01                         byte_16E10:	dc.b 1
00018F1D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018F22 01                         byte_16E16:	dc.b 1
00018F23 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018F28 01                         byte_16E1C:	dc.b 1
00018F29 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018F2E 01                         byte_16E22:	dc.b 1
00018F2F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018F34 01                         byte_16E28:	dc.b 1
00018F35 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018F3A                            		even
00018F3A                            		even
00018F3A                            
00018F3A                            ; ===========================================================================
00018F3A                            ; ---------------------------------------------------------------------------
00018F3A                            ; Object 79 - lamppost
00018F3A                            ; ---------------------------------------------------------------------------
00018F3A                            
00018F3A                            Obj79:					; XREF: Obj_Index
00018F3A 7000                       		moveq	#0,d0
00018F3C 1028 0024                  		move.b	$24(a0),d0
00018F40 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018F44 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018F48 4EFA 82F0                  		jmp	MarkObjGone
00018F4C                            ; ===========================================================================
00018F4C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018F4E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018F50 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018F52 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018F54                            ; ===========================================================================
00018F54                            
00018F54                            Obj79_Main:				; XREF: Obj79_Index
00018F54 5428 0024                  		addq.b	#2,$24(a0)
00018F58 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018F60 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018F66 117C 0004 0001             		move.b	#4,1(a0)
00018F6C 117C 0008 0019             		move.b	#8,$19(a0)
00018F72 117C 0005 0018             		move.b	#5,$18(a0)
00018F78 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018F7C 7000                       		moveq	#0,d0
00018F7E 1028 0023                  		move.b	$23(a0),d0
00018F82 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018F88 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018F8E 6600                       		bne.s	Obj79_RedLamp
00018F90 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018F94 0201 007F                  		andi.b	#$7F,d1
00018F98 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018F9C 0202 007F                  		andi.b	#$7F,d2
00018FA0 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018FA2 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018FA4                            
00018FA4                            Obj79_RedLamp:
00018FA4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018FAA 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018FB0 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018FB6 4E75                       		rts	
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018FB8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018FBC 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018FC0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018FC4 6B00 0000                  		bmi.w	locret_16F90
00018FC8 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018FCC 0201 007F                  		andi.b	#$7F,d1
00018FD0 1428 0028                  		move.b	$28(a0),d2
00018FD4 0202 007F                  		andi.b	#$7F,d2
00018FD8 B202                       		cmp.b	d2,d1
00018FDA 6500                       		bcs.s	Obj79_HitLamp
00018FDC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018FE0 7000                       		moveq	#0,d0
00018FE2 1028 0023                  		move.b	$23(a0),d0
00018FE6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018FEC 117C 0004 0024             		move.b	#4,$24(a0)
00018FF2 117C 0003 001A             		move.b	#3,$1A(a0)
00018FF8 6000 0000                  		bra.w	locret_16F90
00018FFC                            ; ===========================================================================
00018FFC                            
00018FFC                            Obj79_HitLamp:
00018FFC 3038 D008                  		move.w	($FFFFD008).w,d0
00019000 9068 0008                  		sub.w	8(a0),d0
00019004 5040                       		addq.w	#8,d0
00019006 0C40 0010                  		cmpi.w	#$10,d0
0001900A 6400 0000                  		bcc.w	locret_16F90
0001900E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019012 9068 000C                  		sub.w	$C(a0),d0
00019016 0640 0040                  		addi.w	#$40,d0
0001901A 0C40 0068                  		cmpi.w	#$68,d0
0001901E 6400                       		bcc.s	locret_16F90
00019020 303C 00A1                  		move.w	#$A1,d0
00019024 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001902A 5428 0024                  		addq.b	#2,$24(a0)
0001902E 4EB9 0000 F614             		jsr	SingleObjLoad
00019034 6600                       		bne.s	loc_16F76
00019036 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001903A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00019040 3368 0008 0030             		move.w	8(a0),$30(a1)
00019046 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001904C 0469 0018 0032             		subi.w	#$18,$32(a1)
00019052 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001905A 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019060 137C 0004 0001             		move.b	#4,1(a1)
00019066 137C 0008 0019             		move.b	#8,$19(a1)
0001906C 137C 0004 0018             		move.b	#4,$18(a1)
00019072 137C 0002 001A             		move.b	#2,$1A(a1)
00019078 337C 0020 0036             		move.w	#$20,$36(a1)
0001907E                            
0001907E                            loc_16F76:
0001907E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00019084 6100 0000                  		bsr.w	Obj79_StoreInfo
00019088 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001908C 7000                       		moveq	#0,d0
0001908E 1028 0023                  		move.b	$23(a0),d0
00019092 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019098                            
00019098                            locret_16F90:
00019098 4E75                       		rts	
0001909A                            ; ===========================================================================
0001909A                            
0001909A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001909A 4E75                       		rts	
0001909C                            ; ===========================================================================
0001909C                            
0001909C                            Obj79_Twirl:				; XREF: Obj79_Index
0001909C 5368 0036                  		subq.w	#1,$36(a0)
000190A0 6A00                       		bpl.s	loc_16FA0
000190A2 117C 0004 0024             		move.b	#4,$24(a0)
000190A8                            
000190A8                            loc_16FA0:
000190A8 1028 0026                  		move.b	$26(a0),d0
000190AC 0428 0010 0026             		subi.b	#$10,$26(a0)
000190B2 0400 0040                  		subi.b	#$40,d0
000190B6 4EB9 0000 2B7A             		jsr	(CalcSine).l
000190BC C3FC 0C00                  		muls.w	#$C00,d1
000190C0 4841                       		swap	d1
000190C2 D268 0030                  		add.w	$30(a0),d1
000190C6 3141 0008                  		move.w	d1,8(a0)
000190CA C1FC 0C00                  		muls.w	#$C00,d0
000190CE 4840                       		swap	d0
000190D0 D068 0032                  		add.w	$32(a0),d0
000190D4 3140 000C                  		move.w	d0,$C(a0)
000190D8 4E75                       		rts	
000190DA                            ; ===========================================================================
000190DA                            ; ---------------------------------------------------------------------------
000190DA                            ; Subroutine to	store information when you hit a lamppost
000190DA                            ; ---------------------------------------------------------------------------
000190DA                            
000190DA                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000190DA 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000190E0 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000190E6 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000190EC 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000190F2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000190F8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000190FE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00019104 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001910A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019110 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00019116 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001911C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019122 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00019128 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001912E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00019134 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001913A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019140 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00019146 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001914C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00019152 4E75                       		rts	
00019154                            
00019154                            ; ---------------------------------------------------------------------------
00019154                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019154                            ; ---------------------------------------------------------------------------
00019154                            
00019154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019154                            
00019154                            
00019154                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00019154 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001915A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00019160 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00019166 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001916C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00019172 4278 FE20                  		clr.w	($FFFFFE20).w
00019176 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001917A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00019180 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00019186 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001918A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00019190 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019196 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001919C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000191A2 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000191A8 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000191AE 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000191B4 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000191BA 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000191C0 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000191C6 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000191CC 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000191D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000191D8 6600                       		bne.s	loc_170E4
000191DA 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000191E0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000191E6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000191EC                            
000191EC                            loc_170E4:
000191EC 4A38 FE30                  		tst.b	($FFFFFE30).w
000191F0 6A00                       		bpl.s	locret_170F6
000191F2 3038 FE32                  		move.w	($FFFFFE32).w,d0
000191F6 0440 00A0                  		subi.w	#$A0,d0
000191FA 31C0 F728                  		move.w	d0,($FFFFF728).w
000191FE                            
000191FE                            locret_170F6:
000191FE 4E75                       		rts	
00019200                            ; End of function Obj79_LoadInfo
00019200                            
00019200                            ; ===========================================================================
00019200                            ; ---------------------------------------------------------------------------
00019200                            ; Sprite mappings - lamppost
00019200                            ; ---------------------------------------------------------------------------
00019200                            Map_obj79:
00019200                            	include "_maps\obj79.asm"
00019200                            ; ---------------------------------------------------------------------------
00019200                            ; Sprite mappings - lamppost
00019200                            ; ---------------------------------------------------------------------------
00019200 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00019204 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00019208 06                         byte_17100:	dc.b 6
00019209 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001920E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019213 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019218 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001921D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019222 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019227 04                         byte_1711F:	dc.b 4
00019228 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001922D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019232 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019237 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001923C 02                         byte_17134:	dc.b 2
0001923D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019242 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019247 06                         byte_1713F:	dc.b 6
00019248 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001924D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019252 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019257 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001925C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00019261 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00019266                            		even
00019266                            		even
00019266                            
00019266                            ; ===========================================================================
00019266                            ; ---------------------------------------------------------------------------
00019266                            ; Object 7D - hidden points at the end of a level
00019266                            ; ---------------------------------------------------------------------------
00019266                            
00019266                            Obj7D:					; XREF: Obj_Index
00019266 7000                       		moveq	#0,d0
00019268 1028 0024                  		move.b	$24(a0),d0
0001926C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00019270 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00019274                            ; ===========================================================================
00019274 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00019276 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00019278                            ; ===========================================================================
00019278                            
00019278                            Obj7D_Main:				; XREF: Obj7D_Index
00019278 7410                       		moveq	#$10,d2
0001927A 3602                       		move.w	d2,d3
0001927C D643                       		add.w	d3,d3
0001927E 43F8 D000                  		lea	($FFFFD000).w,a1
00019282 3029 0008                  		move.w	8(a1),d0
00019286 9068 0008                  		sub.w	8(a0),d0
0001928A D042                       		add.w	d2,d0
0001928C B043                       		cmp.w	d3,d0
0001928E 6400                       		bcc.s	Obj7D_ChkDel
00019290 3229 000C                  		move.w	$C(a1),d1
00019294 9268 000C                  		sub.w	$C(a0),d1
00019298 D242                       		add.w	d2,d1
0001929A B243                       		cmp.w	d3,d1
0001929C 6400                       		bcc.s	Obj7D_ChkDel
0001929E 4A78 FE08                  		tst.w	($FFFFFE08).w
000192A2 6600                       		bne.s	Obj7D_ChkDel
000192A4 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000192A8 6600                       		bne.s	Obj7D_ChkDel
000192AA 5428 0024                  		addq.b	#2,$24(a0)
000192AE 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000192B6 317C 84B6 0002             		move.w	#$84B6,2(a0)
000192BC 0028 0004 0001             		ori.b	#4,1(a0)
000192C2 117C 0000 0018             		move.b	#0,$18(a0)
000192C8 117C 0010 0019             		move.b	#$10,$19(a0)
000192CE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000192D4 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000192DA 303C 00C9                  		move.w	#$C9,d0
000192DE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play bonus sound
000192E4 7000                       		moveq	#0,d0
000192E6 1028 0028                  		move.b	$28(a0),d0
000192EA D040                       		add.w	d0,d0
000192EC 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000192F0 4EB9 0000 0000             		jsr	AddPoints
000192F6                            
000192F6                            Obj7D_ChkDel:
000192F6 3028 0008                  		move.w	8(a0),d0
000192FA 0240 FF80                  		andi.w	#$FF80,d0
000192FE 3238 F700                  		move.w	($FFFFF700).w,d1
00019302 0441 0080                  		subi.w	#$80,d1
00019306 0241 FF80                  		andi.w	#$FF80,d1
0001930A 9041                       		sub.w	d1,d0
0001930C 0C40 0280                  		cmpi.w	#$280,d0
00019310 6200                       		bhi.s	Obj7D_Delete
00019312 4E75                       		rts	
00019314                            ; ===========================================================================
00019314                            
00019314                            Obj7D_Delete:
00019314 4EF9 0000 F1BC             		jmp	DeleteObject
0001931A                            ; ===========================================================================
0001931A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001931C 03E8                       		dc.w 1000
0001931E 0064                       		dc.w 100
00019320 000A                       		dc.w 10
00019322                            ; ===========================================================================
00019322                            
00019322                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019322 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019326 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019328 3028 0008                  		move.w	8(a0),d0
0001932C 0240 FF80                  		andi.w	#-$80,d0
00019330 3238 F700                  		move.w	($FFFFF700).w,d1
00019334 0441 0080                  		subi.w	#$80,d1
00019338 0241 FF80                  		andi.w	#-$80,d1
0001933C 9041                       		sub.w	d1,d0
0001933E 0C40 0280                  		cmpi.w	#$280,d0
00019342 6200                       		bhi.s	Obj7D_Delete2
00019344 4EF9 0000 F180             		jmp	DisplaySprite
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            Obj7D_Delete2:
0001934A 4EF9 0000 F1BC             		jmp	DeleteObject
00019350                            ; ===========================================================================
00019350                            ; ---------------------------------------------------------------------------
00019350                            ; Sprite mappings - hidden points at the end of	a level
00019350                            ; ---------------------------------------------------------------------------
00019350                            Map_obj7D:
00019350                            	include "_maps\obj7D.asm"
00019350                            ; ---------------------------------------------------------------------------
00019350                            ; Sprite mappings - hidden points at the end of	a level
00019350                            ; ---------------------------------------------------------------------------
00019350 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019354 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00019358 00                         byte_17250:	dc.b 0
00019359 01                         byte_17251:	dc.b 1
0001935A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001935F 01                         byte_17257:	dc.b 1
00019360 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019365 01                         byte_1725D:	dc.b 1
00019366 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001936C 00                         		even
0001936C 00                         		even
0001936C                            
0001936C                            ; ===========================================================================
0001936C                            ; ---------------------------------------------------------------------------
0001936C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001936C                            ; ---------------------------------------------------------------------------
0001936C                            
0001936C                            Obj8A:					; XREF: Obj_Index
0001936C 7000                       		moveq	#0,d0
0001936E 1028 0024                  		move.b	$24(a0),d0
00019372 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00019376 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001937A                            ; ===========================================================================
0001937A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001937C 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            Obj8A_Main:				; XREF: Obj8A_Index
0001937E 5428 0024                  		addq.b	#2,$24(a0)
00019382 317C 0120 0008             		move.w	#$120,8(a0)
00019388 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001938E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019396 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001939C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000193A0 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000193A4 117C 0000 0001             		move.b	#0,1(a0)
000193AA 117C 0000 0018             		move.b	#0,$18(a0)
000193B0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000193B6 6600                       		bne.s	Obj8A_Display	; if not, branch
000193B8 317C 00A6 0002             		move.w	#$A6,2(a0)
000193BE 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000193C4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000193C8 6700                       		beq.s	Obj8A_Display	; if not, branch
000193CA 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000193D0 6600                       		bne.s	Obj8A_Display	; if not, branch
000193D2 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
000193D8 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
000193DE 4EF9 0000 F1BC             		jmp	DeleteObject
000193E4                            ; ===========================================================================
000193E4                            
000193E4                            Obj8A_Display:				; XREF: Obj8A_Index
000193E4 4EF9 0000 F180             		jmp	DisplaySprite
000193EA                            ; ===========================================================================
000193EA                            ; ---------------------------------------------------------------------------
000193EA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000193EA                            ; ---------------------------------------------------------------------------
000193EA                            Map_obj8A:
000193EA                            	include "_maps\obj8A.asm"
000193EA                            ; ---------------------------------------------------------------------------
000193EA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000193EA                            ; ---------------------------------------------------------------------------
000193EA 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000193EE 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000193F2 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000193F6 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000193FA 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000193FE 0000                       		dc.w byte_176A9-Map_obj8A
00019400 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019401 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019406 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001940B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019410 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019415 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001941A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001941F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019424 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019429 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001942E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019433 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019438 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001943D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019442 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019447 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019448 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001944D D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00019452 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00019457 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
0001945C D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00019461 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00019466 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001946B D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00019470 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00019475 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001947A 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
0001947F 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00019484 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00019489 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
0001948E 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00019493 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00019498 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00019499 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
0001949E D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000194A3 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000194A8 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000194AD D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000194B2 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000194B7 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000194BC 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000194C1 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000194C6 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000194CB 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000194CC D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000194D1 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000194D6 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000194DB D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000194E0 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000194E5 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000194EA D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000194EF D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000194F4 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000194F9 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000194FE D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019503 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019508 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001950D D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019512 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019517 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001951C 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019521 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019526 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001952B 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019530 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019535 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001953A 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001953F 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019544 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019545 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001954A D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001954F D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00019554 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00019559 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
0001955E D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00019563 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00019568 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
0001956D 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00019572 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00019577 0005 0004 24               		dc.b 0,	5, 0, 4, $24
0001957C 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00019581 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00019586 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001958B 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00019590 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00019595 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001959A 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
0001959F 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000195A4 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000195A9 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000195AA D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000195AF D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000195B4 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000195B9 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000195BE D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000195C3 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000195C8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000195CD D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000195D2 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000195D7 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000195DC D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000195E1 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000195E6 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000195EB 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000195F0 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000195F5 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000195FA 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000195FF 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019604 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019609 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001960E 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019613 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019618 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001961D 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019622 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019627 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001962C 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001962D D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019632 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019637 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001963C D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019641 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019646 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001964B D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019650 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00019655 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001965A D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001965F D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00019664 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00019669 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001966E 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019673 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00019678 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001967D 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00019682 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00019687 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001968C 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00019691 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00019696 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001969B 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000196A0 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000196A1 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000196A6 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000196AB D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000196B0 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000196B5 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000196BA D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000196BF D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000196C4 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000196C9 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000196CE D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000196D3 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000196D8 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000196DD D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000196E2 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000196E7 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000196EC 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000196F1 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000196F6 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000196FB 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019700 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019705 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001970A 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001970F 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019714 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019719 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001971E 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019723 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019728 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001972D 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019732 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019737 2005 0004 28               		dc.b $20, 5, 0,	4, $28
0001973C 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001973D F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019742 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019747 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001974C F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019751 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019756 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001975B F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019760 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019765 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001976A F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001976F F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019774 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019779 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
0001977E F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019783 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019788 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019789 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001978E 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019793 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019798 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001979D 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000197A2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000197A7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000197AC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000197B1 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000197B2 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000197B7 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000197BC E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000197C1 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000197C6 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000197CB E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000197D0 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000197D5 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000197DA E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000197DF 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000197E4 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000197E9 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000197EE 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000197F3 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000197F8 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000197FD 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019802 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019808 00                         		even
00019808 00                         		even
00019808                            
00019808                            ; ===========================================================================
00019808                            ; ---------------------------------------------------------------------------
00019808                            ; Object 3D - Eggman (GHZ)
00019808                            ; ---------------------------------------------------------------------------
00019808                            
00019808                            Obj3D:					; XREF: Obj_Index
00019808 7000                       		moveq	#0,d0
0001980A 1028 0024                  		move.b	$24(a0),d0
0001980E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019812 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019816                            ; ===========================================================================
00019816 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019818 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001981A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001981C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001981E                            
0001981E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019820 0401                       		dc.b 4,	1
00019822 0607                       		dc.b 6,	7
00019824                            ; ===========================================================================
00019824                            
00019824                            Obj3D_Main:				; XREF: Obj3D_Index
00019824 45F9 0001 981E             		lea	(Obj3D_ObjData).l,a2
0001982A 2248                       		movea.l	a0,a1
0001982C 7202                       		moveq	#2,d1
0001982E 6000                       		bra.s	Obj3D_LoadBoss
00019830                            ; ===========================================================================
00019830                            
00019830                            Obj3D_Loop:
00019830 4EB9 0000 F62A             		jsr	SingleObjLoad2
00019836 6600                       		bne.s	loc_17772
00019838                            
00019838                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019838 135A 0024                  		move.b	(a2)+,$24(a1)
0001983C 12BC 003D                  		move.b	#$3D,0(a1)
00019840 3368 0008 0008             		move.w	8(a0),8(a1)
00019846 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001984C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019854 337C 0400 0002             		move.w	#$400,2(a1)
0001985A 137C 0004 0001             		move.b	#4,1(a1)
00019860 137C 0020 0019             		move.b	#$20,$19(a1)
00019866 137C 0003 0018             		move.b	#3,$18(a1)
0001986C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019870 2348 0034                  		move.l	a0,$34(a1)
00019874 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019878                            
00019878                            loc_17772:
00019878 3168 0008 0030             		move.w	8(a0),$30(a0)
0001987E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019884 117C 000F 0020             		move.b	#$F,$20(a0)
0001988A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019890                            
00019890                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019890 7000                       		moveq	#0,d0
00019892 1028 0025                  		move.b	$25(a0),d0
00019896 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001989A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001989E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000198A4 4EB9 0000 C132             		jsr	AnimateSprite
000198AA 1028 0022                  		move.b	$22(a0),d0
000198AE 0200 0003                  		andi.b	#3,d0
000198B2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198B8 8128 0001                  		or.b	d0,1(a0)
000198BC 4EF9 0000 F180             		jmp	DisplaySprite
000198C2                            ; ===========================================================================
000198C2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000198C4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000198C6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000198C8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000198CA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000198CC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000198CE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000198D0                            ; ===========================================================================
000198D0                            
000198D0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000198D0 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000198D6 6100 0000                  		bsr.w	BossMove
000198DA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000198E0 6600                       		bne.s	loc_177E6
000198E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000198E8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000198EC                            
000198EC                            loc_177E6:
000198EC 1028 003F                  		move.b	$3F(a0),d0
000198F0 4EB9 0000 2B7A             		jsr	(CalcSine).l
000198F6 EC40                       		asr.w	#6,d0
000198F8 D068 0038                  		add.w	$38(a0),d0
000198FC 3140 000C                  		move.w	d0,$C(a0)
00019900 3168 0030 0008             		move.w	$30(a0),8(a0)
00019906 5428 003F                  		addq.b	#2,$3F(a0)
0001990A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019910 6400                       		bcc.s	locret_1784A
00019912 4A28 0022                  		tst.b	$22(a0)
00019916 6B00                       		bmi.s	loc_1784C
00019918 4A28 0020                  		tst.b	$20(a0)
0001991C 6600                       		bne.s	locret_1784A
0001991E 4A28 003E                  		tst.b	$3E(a0)
00019922 6600                       		bne.s	Obj3D_ShipFlash
00019924 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001992A 303C 00AC                  		move.w	#$AC,d0
0001992E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019934                            
00019934                            Obj3D_ShipFlash:
00019934 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
00019938 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001993A 4A51                       		tst.w	(a1)
0001993C 6600                       		bne.s	loc_1783C
0001993E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019942                            
00019942                            loc_1783C:
00019942 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019944 5328 003E                  		subq.b	#1,$3E(a0)
00019948 6600                       		bne.s	locret_1784A
0001994A 117C 000F 0020             		move.b	#$F,$20(a0)
00019950                            
00019950                            locret_1784A:
00019950 4E75                       		rts	
00019952                            ; ===========================================================================
00019952                            
00019952                            loc_1784C:				; XREF: loc_177E6
00019952 7064                       		moveq	#100,d0
00019954 6100 0000                  		bsr.w	AddPoints
00019958 117C 0008 0025             		move.b	#8,$25(a0)
0001995E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019964 4E75                       		rts	
00019966                            
00019966                            ; ---------------------------------------------------------------------------
00019966                            ; Defeated boss	subroutine
00019966                            ; ---------------------------------------------------------------------------
00019966                            
00019966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019966                            
00019966                            
00019966                            BossDefeated:
00019966 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001996A 0200 0007                  		andi.b	#7,d0
0001996E 6600                       		bne.s	locret_178A2
00019970 4EB9 0000 F614             		jsr	SingleObjLoad
00019976 6600                       		bne.s	locret_178A2
00019978 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001997C 3368 0008 0008             		move.w	8(a0),8(a1)
00019982 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019988 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001998E 3200                       		move.w	d0,d1
00019990 7200                       		moveq	#0,d1
00019992 1200                       		move.b	d0,d1
00019994 E409                       		lsr.b	#2,d1
00019996 0441 0020                  		subi.w	#$20,d1
0001999A D369 0008                  		add.w	d1,8(a1)
0001999E E048                       		lsr.w	#8,d0
000199A0 E608                       		lsr.b	#3,d0
000199A2 D169 000C                  		add.w	d0,$C(a1)
000199A6                            
000199A6                            locret_178A2:
000199A6 4E75                       		rts	
000199A8                            ; End of function BossDefeated
000199A8                            
000199A8                            ; ---------------------------------------------------------------------------
000199A8                            ; Subroutine to	move a boss
000199A8                            ; ---------------------------------------------------------------------------
000199A8                            
000199A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199A8                            
000199A8                            
000199A8                            BossMove:
000199A8 2428 0030                  		move.l	$30(a0),d2
000199AC 2628 0038                  		move.l	$38(a0),d3
000199B0 3028 0010                  		move.w	$10(a0),d0
000199B4 48C0                       		ext.l	d0
000199B6 E180                       		asl.l	#8,d0
000199B8 D480                       		add.l	d0,d2
000199BA 3028 0012                  		move.w	$12(a0),d0
000199BE 48C0                       		ext.l	d0
000199C0 E180                       		asl.l	#8,d0
000199C2 D680                       		add.l	d0,d3
000199C4 2142 0030                  		move.l	d2,$30(a0)
000199C8 2143 0038                  		move.l	d3,$38(a0)
000199CC 4E75                       		rts	
000199CE                            ; End of function BossMove
000199CE                            
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000199CE 317C FF00 0010             		move.w	#-$100,$10(a0)
000199D4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000199DA 6100 FFCC                  		bsr.w	BossMove
000199DE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000199E4 6600                       		bne.s	loc_17916
000199E6 317C 0000 0010             		move.w	#0,$10(a0)
000199EC 317C 0000 0012             		move.w	#0,$12(a0)
000199F2 5428 0025                  		addq.b	#2,$25(a0)
000199F6 4EB9 0000 F62A             		jsr	SingleObjLoad2
000199FC 6600                       		bne.s	loc_17910
000199FE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019A02 3368 0030 0008             		move.w	$30(a0),8(a1)
00019A08 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019A0E 2348 0034                  		move.l	a0,$34(a1)
00019A12                            
00019A12                            loc_17910:
00019A12 317C 0077 003C             		move.w	#$77,$3C(a0)
00019A18                            
00019A18                            loc_17916:
00019A18 6000 FED2                  		bra.w	loc_177E6
00019A1C                            ; ===========================================================================
00019A1C                            
00019A1C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019A1C 5368 003C                  		subq.w	#1,$3C(a0)
00019A20 6A00                       		bpl.s	Obj3D_Reverse
00019A22 5428 0025                  		addq.b	#2,$25(a0)
00019A26 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019A2C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019A32 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019A38 6600                       		bne.s	Obj3D_Reverse
00019A3A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019A40 317C 0040 0010             		move.w	#$40,$10(a0)
00019A46                            
00019A46                            Obj3D_Reverse:
00019A46 0828 0000 0022             		btst	#0,$22(a0)
00019A4C 6600                       		bne.s	loc_17950
00019A4E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019A52                            
00019A52                            loc_17950:
00019A52 6000 FE98                  		bra.w	loc_177E6
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            loc_17954:				; XREF: Obj3D_ShipIndex
00019A56 5368 003C                  		subq.w	#1,$3C(a0)
00019A5A 6B00                       		bmi.s	loc_17960
00019A5C 6100 FF4A                  		bsr.w	BossMove
00019A60 6000                       		bra.s	loc_17976
00019A62                            ; ===========================================================================
00019A62                            
00019A62                            loc_17960:
00019A62 0868 0000 0022             		bchg	#0,$22(a0)
00019A68 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019A6E 5528 0025                  		subq.b	#2,$25(a0)
00019A72 317C 0000 0010             		move.w	#0,$10(a0)
00019A78                            
00019A78                            loc_17976:
00019A78 6000 FE72                  		bra.w	loc_177E6
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019A7C 5368 003C                  		subq.w	#1,$3C(a0)
00019A80 6B00                       		bmi.s	loc_17984
00019A82 6000 FEE2                  		bra.w	BossDefeated
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            loc_17984:
00019A86 08E8 0000 0022             		bset	#0,$22(a0)
00019A8C 08A8 0007 0022             		bclr	#7,$22(a0)
00019A92 4268 0010                  		clr.w	$10(a0)
00019A96 5428 0025                  		addq.b	#2,$25(a0)
00019A9A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019AA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019AA4 6600                       		bne.s	locret_179AA
00019AA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AAC                            
00019AAC                            locret_179AA:
00019AAC 4E75                       		rts	
00019AAE                            ; ===========================================================================
00019AAE                            
00019AAE                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019AAE 5268 003C                  		addq.w	#1,$3C(a0)
00019AB2 6700                       		beq.s	loc_179BC
00019AB4 6A00                       		bpl.s	loc_179C2
00019AB6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ABC 6000                       		bra.s	loc_179EE
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            loc_179BC:
00019ABE 4268 0012                  		clr.w	$12(a0)
00019AC2 6000                       		bra.s	loc_179EE
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            loc_179C2:
00019AC4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019ACA 6500                       		bcs.s	loc_179DA
00019ACC 6700                       		beq.s	loc_179E0
00019ACE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019AD4 6500                       		bcs.s	loc_179EE
00019AD6 5428 0025                  		addq.b	#2,$25(a0)
00019ADA 6000                       		bra.s	loc_179EE
00019ADC                            ; ===========================================================================
00019ADC                            
00019ADC                            loc_179DA:
00019ADC 5168 0012                  		subq.w	#8,$12(a0)
00019AE0 6000                       		bra.s	loc_179EE
00019AE2                            ; ===========================================================================
00019AE2                            
00019AE2                            loc_179E0:
00019AE2 4268 0012                  		clr.w	$12(a0)
00019AE6                            		
00019AE6 6100 0000                  		bsr.w	BossEnd
00019AEA                            
00019AEA                            loc_179EE:
00019AEA 6100 FEBC                  		bsr.w	BossMove
00019AEE 6000 FDFC                  		bra.w	loc_177E6
00019AF2                            ; ===========================================================================
00019AF2                            
00019AF2                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019AF2 317C 0400 0010             		move.w	#$400,$10(a0)
00019AF8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AFE 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019B04 6700                       		beq.s	loc_17A10
00019B06 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B0A 6000                       		bra.s	loc_17A16
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            loc_17A10:
00019B0C 4A28 0001                  		tst.b	1(a0)
00019B10 6A00                       		bpl.s	Obj3D_ShipDel
00019B12                            
00019B12                            loc_17A16:
00019B12 6100 FE94                  		bsr.w	BossMove
00019B16 6000 FDD4                  		bra.w	loc_177E6
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            Obj3D_ShipDel:
00019B1A 4EF9 0000 F1BC             		jmp	DeleteObject
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019B20 7000                       		moveq	#0,d0
00019B22 7201                       		moveq	#1,d1
00019B24 2268 0034                  		movea.l	$34(a0),a1
00019B28 1029 0025                  		move.b	$25(a1),d0
00019B2C 5900                       		subq.b	#4,d0
00019B2E 6600                       		bne.s	loc_17A3E
00019B30 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019B36 6600                       		bne.s	loc_17A46
00019B38 7204                       		moveq	#4,d1
00019B3A                            
00019B3A                            loc_17A3E:
00019B3A 5D00                       		subq.b	#6,d0
00019B3C 6B00                       		bmi.s	loc_17A46
00019B3E 720A                       		moveq	#$A,d1
00019B40 6000                       		bra.s	loc_17A5A
00019B42                            ; ===========================================================================
00019B42                            
00019B42                            loc_17A46:
00019B42 4A29 0020                  		tst.b	$20(a1)
00019B46 6600                       		bne.s	loc_17A50
00019B48 7205                       		moveq	#5,d1
00019B4A 6000                       		bra.s	loc_17A5A
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_17A50:
00019B4C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B52 6500                       		bcs.s	loc_17A5A
00019B54 7204                       		moveq	#4,d1
00019B56                            
00019B56                            loc_17A5A:
00019B56 1141 001C                  		move.b	d1,$1C(a0)
00019B5A 5500                       		subq.b	#2,d0
00019B5C 6600                       		bne.s	Obj3D_FaceDisp
00019B5E 117C 0006 001C             		move.b	#6,$1C(a0)
00019B64 4A28 0001                  		tst.b	1(a0)
00019B68 6A00                       		bpl.s	Obj3D_FaceDel
00019B6A                            
00019B6A                            Obj3D_FaceDisp:
00019B6A 6000                       		bra.s	Obj3D_Display
00019B6C                            ; ===========================================================================
00019B6C                            
00019B6C                            Obj3D_FaceDel:
00019B6C 4EF9 0000 F1BC             		jmp	DeleteObject
00019B72                            ; ===========================================================================
00019B72                            
00019B72                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019B72 117C 0007 001C             		move.b	#7,$1C(a0)
00019B78 2268 0034                  		movea.l	$34(a0),a1
00019B7C 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019B82 6600                       		bne.s	loc_17A96
00019B84 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B8A 4A28 0001                  		tst.b	1(a0)
00019B8E 6A00                       		bpl.s	Obj3D_FlameDel
00019B90 6000                       		bra.s	Obj3D_FlameDisp
00019B92                            ; ===========================================================================
00019B92                            
00019B92                            loc_17A96:
00019B92 3029 0010                  		move.w	$10(a1),d0
00019B96 6700                       		beq.s	Obj3D_FlameDisp
00019B98 117C 0008 001C             		move.b	#8,$1C(a0)
00019B9E                            
00019B9E                            Obj3D_FlameDisp:
00019B9E 6000                       		bra.s	Obj3D_Display
00019BA0                            ; ===========================================================================
00019BA0                            
00019BA0                            Obj3D_FlameDel:
00019BA0 4EF9 0000 F1BC             		jmp	DeleteObject
00019BA6                            ; ===========================================================================
00019BA6                            
00019BA6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019BA6 2268 0034                  		movea.l	$34(a0),a1
00019BAA 3169 0008 0008             		move.w	8(a1),8(a0)
00019BB0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BB6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BBC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019BC2 4EB9 0000 C132             		jsr	AnimateSprite
00019BC8 1028 0022                  		move.b	$22(a0),d0
00019BCC 0200 0003                  		andi.b	#3,d0
00019BD0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BD6 8128 0001                  		or.b	d0,1(a0)
00019BDA 4EF9 0000 F180             		jmp	DisplaySprite
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            BossEnd:
00019BE0 7000                       		moveq	#0,d0
00019BE2 11C0 FFFF                  		move.b	d0,$FFFFFFFF	; clear Boss flag
00019BE6 4E75                       		rts
00019BE8                            ; ===========================================================================
00019BE8                            ; LEVEL MUSIC CONTROLLER
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            CtrlLevelMusic:
00019BE8 4A38 FFBC                  		tst.b	($FFFFFFBC).w		; Has Sonic drowned?
00019BEC 6600                       		bne.s	@end				; If so, skip all this
00019BEE 1038 FFFE                  		move.b	($FFFFFFFE).w,d0	; Level music
00019BF2 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019BF6 6700                       		beq.s	@chk_spdshoes		; If not, check if he has speed shoes
00019BF8 103C 0087                  		move.b	#$87,d0				; Invincibility music
00019BFC                            		
00019BFC                            @chk_spdshoes:
00019BFC 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does he have speed shoes?
00019C00 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019C02 103C 0095                  		move.b	#$95,d0				; Speed shoes music
00019C06 4A38 FE2D                  		tst.b	($FFFFFE2D).w		; Is Sonic invincible?
00019C0A 6700                       		beq.s	@chk_boss			; If not, check if there is a boss
00019C0C 103C 0096                  		move.b	#$96,d0				; Speed shoes + invincibility music
00019C10                            		
00019C10                            @chk_boss:
00019C10 4A38 FFFF                  		tst.b	($FFFFFFFF).w		; Is there a boss?
00019C14 6700                       		beq.s	@chk_drowning		; If not, check if Sonic is drowning
00019C16 7200                       		moveq	#0,d1				; Clear d1
00019C18 1238 FE10                  		move.b	($FFFFFE10).w,d1	; Set boss number
00019C1C 43F9 0000 50F6             		lea	(MusicList_Bosses).l,a1	; Load Music Playlist for bosses
00019C22 1031 1000                  		move.b	(a1,d1.w),d0		; Set music ID
00019C26                            		
00019C26                            @chk_drowning:
00019C26 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; Check air remaining
00019C2C 6400                       		bcc.s	@chk_value			; If air is above $C, branch
00019C2E 103C 0092                  		move.b	#$92,d0				; Drowning music
00019C32                            		
00019C32                            @chk_value:
00019C32 1238 FFFC                  		move.b	($FFFFFFFC).w,d1	; Get current music playing
00019C36 B200                       		cmp.b	d0,d1				; If the value is the same,
00019C38 6600                       		bne.s	@play				; don't play it again
00019C3A                            		
00019C3A                            @end:
00019C3A 4E75                       		rts							; Return
00019C3C                            		
00019C3C                            @play:
00019C3C 4EF9 0000 12B6             		jmp	(PlayMusic).l			; Play music and return
00019C42                            ; ===========================================================================
00019C42                            ; ---------------------------------------------------------------------------
00019C42                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019C42                            ; ---------------------------------------------------------------------------
00019C42                            
00019C42                            Obj48:					; XREF: Obj_Index
00019C42 7000                       		moveq	#0,d0
00019C44 1028 0024                  		move.b	$24(a0),d0
00019C48 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019C4C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019C50                            ; ===========================================================================
00019C50 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019C52 0000                       		dc.w Obj48_Base-Obj48_Index
00019C54 0000                       		dc.w Obj48_Display2-Obj48_Index
00019C56 0000                       		dc.w loc_17C68-Obj48_Index
00019C58 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019C5A                            ; ===========================================================================
00019C5A                            
00019C5A                            Obj48_Main:				; XREF: Obj48_Index
00019C5A 5428 0024                  		addq.b	#2,$24(a0)
00019C5E 317C 4080 0026             		move.w	#$4080,$26(a0)
00019C64 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019C6A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019C72 317C 046C 0002             		move.w	#$46C,2(a0)
00019C78 45E8 0028                  		lea	$28(a0),a2
00019C7C 14FC 0000                  		move.b	#0,(a2)+
00019C80 7205                       		moveq	#5,d1
00019C82 2248                       		movea.l	a0,a1
00019C84 6000                       		bra.s	loc_17B60
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            Obj48_MakeLinks:
00019C86 4EB9 0000 F62A             		jsr	SingleObjLoad2
00019C8C 6600                       		bne.s	Obj48_MakeBall
00019C8E 3368 0008 0008             		move.w	8(a0),8(a1)
00019C94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C9A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019C9E 137C 0006 0024             		move.b	#6,$24(a1)
00019CA4 237C 0000 9634 0004        		move.l	#Map_obj15,4(a1)
00019CAC 337C 0380 0002             		move.w	#$380,2(a1)
00019CB2 137C 0001 001A             		move.b	#1,$1A(a1)
00019CB8 5228 0028                  		addq.b	#1,$28(a0)
00019CBC                            
00019CBC                            loc_17B60:				; XREF: Obj48_Main
00019CBC 3A09                       		move.w	a1,d5
00019CBE 0445 D000                  		subi.w	#$D000,d5
00019CC2 EC4D                       		lsr.w	#6,d5
00019CC4 0245 007F                  		andi.w	#$7F,d5
00019CC8 14C5                       		move.b	d5,(a2)+
00019CCA 137C 0004 0001             		move.b	#4,1(a1)
00019CD0 137C 0008 0019             		move.b	#8,$19(a1)
00019CD6 137C 0006 0018             		move.b	#6,$18(a1)
00019CDC 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019CE2 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019CE6                            
00019CE6                            Obj48_MakeBall:
00019CE6 137C 0008 0024             		move.b	#8,$24(a1)
00019CEC 237C 0000 9B92 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019CF4 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019CFA 137C 0001 001A             		move.b	#1,$1A(a1)
00019D00 137C 0005 0018             		move.b	#5,$18(a1)
00019D06 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019D0C 4E75                       		rts	
00019D0E                            ; ===========================================================================
00019D0E                            
00019D0E 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019D14                            
00019D14                            ; ===========================================================================
00019D14                            
00019D14                            Obj48_Base:				; XREF: Obj48_Index
00019D14 47F9 0001 9D0E             		lea	(Obj48_PosData).l,a3
00019D1A 45E8 0028                  		lea	$28(a0),a2
00019D1E 7C00                       		moveq	#0,d6
00019D20 1C1A                       		move.b	(a2)+,d6
00019D22                            
00019D22                            loc_17BC6:
00019D22 7800                       		moveq	#0,d4
00019D24 181A                       		move.b	(a2)+,d4
00019D26 ED4C                       		lsl.w	#6,d4
00019D28 0684 00FF D000             		addi.l	#$FFD000,d4
00019D2E 2244                       		movea.l	d4,a1
00019D30 101B                       		move.b	(a3)+,d0
00019D32 B029 003C                  		cmp.b	$3C(a1),d0
00019D36 6700                       		beq.s	loc_17BE0
00019D38 5229 003C                  		addq.b	#1,$3C(a1)
00019D3C                            
00019D3C                            loc_17BE0:
00019D3C 51CE FFE4                  		dbf	d6,loc_17BC6
00019D40                            
00019D40 B029 003C                  		cmp.b	$3C(a1),d0
00019D44 6600                       		bne.s	loc_17BFA
00019D46 2268 0034                  		movea.l	$34(a0),a1
00019D4A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019D50 6600                       		bne.s	loc_17BFA
00019D52 5428 0024                  		addq.b	#2,$24(a0)
00019D56                            
00019D56                            loc_17BFA:
00019D56 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019D5C 6700                       		beq.s	Obj48_Display
00019D5E 5268 0032                  		addq.w	#1,$32(a0)
00019D62                            
00019D62                            Obj48_Display:
00019D62 6100 0000                  		bsr.w	sub_17C2A
00019D66 1028 0026                  		move.b	$26(a0),d0
00019D6A 4EB9 0000 95A6             		jsr	(Obj15_Move2).l
00019D70 4EF9 0000 F180             		jmp	DisplaySprite
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            Obj48_Display2:				; XREF: Obj48_Index
00019D76 6100 0000                  		bsr.w	sub_17C2A
00019D7A 4EB9 0000 9566             		jsr	(Obj48_Move).l
00019D80 4EF9 0000 F180             		jmp	DisplaySprite
00019D86                            
00019D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D86                            
00019D86                            
00019D86                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019D86 2268 0034                  		movea.l	$34(a0),a1
00019D8A 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019D90 6400                       		bcc.s	loc_17C3C
00019D92 0868 0000 001A             		bchg	#0,$1A(a0)
00019D98                            
00019D98                            loc_17C3C:
00019D98 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019D9E 3029 000C                  		move.w	$C(a1),d0
00019DA2 D068 0032                  		add.w	$32(a0),d0
00019DA6 3140 0038                  		move.w	d0,$38(a0)
00019DAA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019DB0 4A29 0022                  		tst.b	$22(a1)
00019DB4 6A00                       		bpl.s	locret_17C66
00019DB6 10BC 003F                  		move.b	#$3F,0(a0)
00019DBA 117C 0000 0024             		move.b	#0,$24(a0)
00019DC0                            
00019DC0                            locret_17C66:
00019DC0 4E75                       		rts	
00019DC2                            ; End of function sub_17C2A
00019DC2                            
00019DC2                            ; ===========================================================================
00019DC2                            
00019DC2                            loc_17C68:				; XREF: Obj48_Index
00019DC2 2268 0034                  		movea.l	$34(a0),a1
00019DC6 4A29 0022                  		tst.b	$22(a1)
00019DCA 6A00                       		bpl.s	Obj48_Display3
00019DCC 10BC 003F                  		move.b	#$3F,0(a0)
00019DD0 117C 0000 0024             		move.b	#0,$24(a0)
00019DD6                            
00019DD6                            Obj48_Display3:
00019DD6 4EF9 0000 F180             		jmp	DisplaySprite
00019DDC                            ; ===========================================================================
00019DDC                            
00019DDC                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019DDC 7000                       		moveq	#0,d0
00019DDE 4A28 001A                  		tst.b	$1A(a0)
00019DE2 6600                       		bne.s	Obj48_Vanish
00019DE4 5200                       		addq.b	#1,d0
00019DE6                            
00019DE6                            Obj48_Vanish:
00019DE6 1140 001A                  		move.b	d0,$1A(a0)
00019DEA 2268 0034                  		movea.l	$34(a0),a1
00019DEE 4A29 0022                  		tst.b	$22(a1)
00019DF2 6A00                       		bpl.s	Obj48_Display4
00019DF4 117C 0000 0020             		move.b	#0,$20(a0)
00019DFA 6100 FB6A                  		bsr.w	BossDefeated
00019DFE 5328 003C                  		subq.b	#1,$3C(a0)
00019E02 6A00                       		bpl.s	Obj48_Display4
00019E04 10BC 003F                  		move.b	#$3F,(a0)
00019E08 117C 0000 0024             		move.b	#0,$24(a0)
00019E0E                            
00019E0E                            Obj48_Display4:
00019E0E 4EF9 0000 F180             		jmp	DisplaySprite
00019E14                            ; ===========================================================================
00019E14                            Ani_Eggman:
00019E14                            	include "_anim\Eggman.asm"
00019E14                            ; ---------------------------------------------------------------------------
00019E14                            ; Animation script - Eggman (bosses)
00019E14                            ; ---------------------------------------------------------------------------
00019E14 0000                       		dc.w byte_17CD4-Ani_Eggman
00019E16 0000                       		dc.w byte_17CD8-Ani_Eggman
00019E18 0000                       		dc.w byte_17CDC-Ani_Eggman
00019E1A 0000                       		dc.w byte_17CE0-Ani_Eggman
00019E1C 0000                       		dc.w byte_17CE4-Ani_Eggman
00019E1E 0000                       		dc.w byte_17CE8-Ani_Eggman
00019E20 0000                       		dc.w byte_17CEC-Ani_Eggman
00019E22 0000                       		dc.w byte_17CF0-Ani_Eggman
00019E24 0000                       		dc.w byte_17CF4-Ani_Eggman
00019E26 0000                       		dc.w byte_17CF8-Ani_Eggman
00019E28 0000                       		dc.w byte_17CFC-Ani_Eggman
00019E2A 0000                       		dc.w byte_17D00-Ani_Eggman
00019E2C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019E30 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019E34 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019E38 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019E3C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019E40 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019E44 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019E48 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019E4C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019E50 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019E54 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019E58 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019E64                            		even
00019E64                            		even
00019E64                            
00019E64                            ; ---------------------------------------------------------------------------
00019E64                            ; Sprite mappings - Eggman (boss levels)
00019E64                            ; ---------------------------------------------------------------------------
00019E64                            Map_Eggman:
00019E64                            	include "_maps\Eggman.asm"
00019E64                            ; ---------------------------------------------------------------------------
00019E64                            ; Sprite mappings - Eggman (boss levels)
00019E64                            ; ---------------------------------------------------------------------------
00019E64 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019E68 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019E6C 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019E70 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019E74 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019E78 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019E7C 0000                       		dc.w byte_17DC8-Map_Eggman
00019E7E 06                         byte_17D26:	dc.b 6
00019E7F EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019E84 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019E89 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019E8E FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019E93 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019E98 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019E9D 02                         byte_17D45:	dc.b 2
00019E9E E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019EA3 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019EA8 02                         byte_17D50:	dc.b 2
00019EA9 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019EAE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019EB3 03                         byte_17D5B:	dc.b 3
00019EB4 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019EB9 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019EBE EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019EC3 03                         byte_17D6B:	dc.b 3
00019EC4 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019EC9 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019ECE EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019ED3 03                         byte_17D7B:	dc.b 3
00019ED4 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019ED9 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019EDE EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019EE3 03                         byte_17D8B:	dc.b 3
00019EE4 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019EE9 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019EEE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019EF3 04                         byte_17D9B:	dc.b 4
00019EF4 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019EF9 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019EFE EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019F03 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019F08 01                         byte_17DB0:	dc.b 1
00019F09 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019F0E 01                         byte_17DB6:	dc.b 1
00019F0F 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019F14 00                         byte_17DBC:	dc.b 0
00019F15 02                         byte_17DBD:	dc.b 2
00019F16 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019F1B 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019F20 02                         byte_17DC8:	dc.b 2
00019F21 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019F26 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019F2C 00                         		even
00019F2C 00                         		even
00019F2C                            
00019F2C                            ; ---------------------------------------------------------------------------
00019F2C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019F2C                            ; ---------------------------------------------------------------------------
00019F2C                            Map_BossItems:
00019F2C                            	include "_maps\Boss items.asm"
00019F2C                            ; ---------------------------------------------------------------------------
00019F2C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019F2C                            ; ---------------------------------------------------------------------------
00019F2C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019F30 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019F34 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019F38 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019F3C 01                         byte_17DE4:	dc.b 1
00019F3D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019F42 02                         byte_17DEA:	dc.b 2
00019F43 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019F48 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019F4D 00                         		dc.b 0
00019F4E 01                         byte_17DF6:	dc.b 1
00019F4F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019F54 01                         byte_17DFC:	dc.b 1
00019F55 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019F5A 01                         byte_17E02:	dc.b 1
00019F5B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019F60 04                         byte_17E08:	dc.b 4
00019F61 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019F66 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019F6B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019F70 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019F75 00                         		dc.b 0
00019F76 02                         byte_17E1E:	dc.b 2
00019F77 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019F7C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019F81 00                         		dc.b 0
00019F82 02                         byte_17E2A:	dc.b 2
00019F83 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019F88 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019F8E 00                         		even
00019F8E 00                         		even
00019F8E                            
00019F8E                            ; ===========================================================================
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E                            ; Object 77 - Eggman (LZ)
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E                            
00019F8E                            Obj77:					; XREF: Obj_Index
00019F8E 7000                       		moveq	#0,d0
00019F90 1028 0024                  		move.b	$24(a0),d0
00019F94 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019F98 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019F9C                            ; ===========================================================================
00019F9C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019F9E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019FA0 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019FA2 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019FA4                            
00019FA4 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019FA6 0401                       		dc.b 4,	1
00019FA8 0607                       		dc.b 6,	7
00019FAA                            ; ===========================================================================
00019FAA                            
00019FAA                            Obj77_Main:				; XREF: Obj77_Index
00019FAA 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019FB0 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019FB6 3168 0008 0030             		move.w	8(a0),$30(a0)
00019FBC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019FC2 117C 000F 0020             		move.b	#$F,$20(a0)
00019FC8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019FCE 117C 0004 0018             		move.b	#4,$18(a0)
00019FD4 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019FD8 2248                       		movea.l	a0,a1
00019FDA 7202                       		moveq	#2,d1
00019FDC 6000                       		bra.s	Obj77_LoadBoss
00019FDE                            ; ===========================================================================
00019FDE                            
00019FDE                            Obj77_Loop:
00019FDE 4EB9 0000 F62A             		jsr	SingleObjLoad2
00019FE4 6600                       		bne.s	Obj77_ShipMain
00019FE6 12BC 0077                  		move.b	#$77,0(a1)
00019FEA 3368 0008 0008             		move.w	8(a0),8(a1)
00019FF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019FF6                            
00019FF6                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019FF6 08A8 0000 0022             		bclr	#0,$22(a0)
00019FFC 4229 0025                  		clr.b	$25(a1)
0001A000 135A 0024                  		move.b	(a2)+,$24(a1)
0001A004 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A008 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001A00E 237C 0001 9E64 0004        		move.l	#Map_Eggman,4(a1)
0001A016 337C 0400 0002             		move.w	#$400,2(a1)
0001A01C 137C 0004 0001             		move.b	#4,1(a1)
0001A022 137C 0020 0019             		move.b	#$20,$19(a1)
0001A028 2348 0034                  		move.l	a0,$34(a1)
0001A02C 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001A030                            
0001A030                            Obj77_ShipMain:
0001A030 43F8 D000                  		lea	($FFFFD000).w,a1
0001A034 7000                       		moveq	#0,d0
0001A036 1028 0025                  		move.b	$25(a0),d0
0001A03A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001A03E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001A042 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001A048 4EB9 0000 C132             		jsr	AnimateSprite
0001A04E 7003                       		moveq	#3,d0
0001A050 C028 0022                  		and.b	$22(a0),d0
0001A054 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A05A 8128 0001                  		or.b	d0,1(a0)
0001A05E 4EF9 0000 F180             		jmp	DisplaySprite
0001A064                            ; ===========================================================================
0001A064 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001A068 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001A06C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001A070 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001A074                            ; ===========================================================================
0001A074                            
0001A074                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001A074 3029 0008                  		move.w	8(a1),d0
0001A078 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001A07C 6500                       		bcs.s	loc_17F38
0001A07E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A084 317C 0060 0010             		move.w	#$60,$10(a0)
0001A08A 5428 0025                  		addq.b	#2,$25(a0)
0001A08E                            
0001A08E                            loc_17F38:
0001A08E 6100 F918                  		bsr.w	BossMove
0001A092 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A098 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A09E                            
0001A09E                            loc_17F48:
0001A09E 4A28 003D                  		tst.b	$3D(a0)
0001A0A2 6600                       		bne.s	loc_17F8E
0001A0A4 4A28 0022                  		tst.b	$22(a0)
0001A0A8 6B00                       		bmi.s	loc_17F92
0001A0AA 4A28 0020                  		tst.b	$20(a0)
0001A0AE 6600                       		bne.s	locret_17F8C
0001A0B0 4A28 003E                  		tst.b	$3E(a0)
0001A0B4 6600                       		bne.s	loc_17F70
0001A0B6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A0BC 303C 00AC                  		move.w	#$AC,d0
0001A0C0 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001A0C6                            
0001A0C6                            loc_17F70:
0001A0C6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A0CA 7000                       		moveq	#0,d0
0001A0CC 4A51                       		tst.w	(a1)
0001A0CE 6600                       		bne.s	loc_17F7E
0001A0D0 303C 0EEE                  		move.w	#$EEE,d0
0001A0D4                            
0001A0D4                            loc_17F7E:
0001A0D4 3280                       		move.w	d0,(a1)
0001A0D6 5328 003E                  		subq.b	#1,$3E(a0)
0001A0DA 6600                       		bne.s	locret_17F8C
0001A0DC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0E2                            
0001A0E2                            locret_17F8C:
0001A0E2 4E75                       		rts	
0001A0E4                            ; ===========================================================================
0001A0E4                            
0001A0E4                            loc_17F8E:				; XREF: loc_17F48
0001A0E4 6000 F880                  		bra.w	BossDefeated
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            loc_17F92:				; XREF: loc_17F48
0001A0E8 7064                       		moveq	#100,d0
0001A0EA 6100 0000                  		bsr.w	AddPoints
0001A0EE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A0F4 4E75                       		rts	
0001A0F6                            ; ===========================================================================
0001A0F6                            
0001A0F6                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A0F6 70FE                       		moveq	#-2,d0
0001A0F8 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A0FE 6500                       		bcs.s	loc_17FB6
0001A100 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A106 4268 0010                  		clr.w	$10(a0)
0001A10A 5240                       		addq.w	#1,d0
0001A10C                            
0001A10C                            loc_17FB6:
0001A10C 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A112 6E00                       		bgt.s	loc_17FCA
0001A114 317C 0500 0038             		move.w	#$500,$38(a0)
0001A11A 4268 0012                  		clr.w	$12(a0)
0001A11E 5240                       		addq.w	#1,d0
0001A120                            
0001A120                            loc_17FCA:
0001A120 6600                       		bne.s	loc_17FDC
0001A122 317C 0140 0010             		move.w	#$140,$10(a0)
0001A128 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A12E 5428 0025                  		addq.b	#2,$25(a0)
0001A132                            
0001A132                            loc_17FDC:
0001A132 6000 FF5A                  		bra.w	loc_17F38
0001A136                            ; ===========================================================================
0001A136                            
0001A136                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A136 70FE                       		moveq	#-2,d0
0001A138 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A13E 6500                       		bcs.s	loc_17FF6
0001A140 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A146 4268 0010                  		clr.w	$10(a0)
0001A14A 5240                       		addq.w	#1,d0
0001A14C                            
0001A14C                            loc_17FF6:
0001A14C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A152 6E00                       		bgt.s	loc_1800A
0001A154 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A15A 4268 0012                  		clr.w	$12(a0)
0001A15E 5240                       		addq.w	#1,d0
0001A160                            
0001A160                            loc_1800A:
0001A160 6600                       		bne.s	loc_1801A
0001A162 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A168 5428 0025                  		addq.b	#2,$25(a0)
0001A16C 4228 003F                  		clr.b	$3F(a0)
0001A170                            
0001A170                            loc_1801A:
0001A170 6000 FF1C                  		bra.w	loc_17F38
0001A174                            ; ===========================================================================
0001A174                            
0001A174                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A174 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A17A 6E00                       		bgt.s	loc_1804E
0001A17C 317C 0100 0038             		move.w	#$100,$38(a0)
0001A182 317C 0140 0010             		move.w	#$140,$10(a0)
0001A188 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A18E 4A28 003D                  		tst.b	$3D(a0)
0001A192 6700                       		beq.s	loc_18046
0001A194 E1E8 0010                  		asl	$10(a0)
0001A198 E1E8 0012                  		asl	$12(a0)
0001A19C                            
0001A19C                            loc_18046:
0001A19C 5428 0025                  		addq.b	#2,$25(a0)
0001A1A0 6000 FEEC                  		bra.w	loc_17F38
0001A1A4                            ; ===========================================================================
0001A1A4                            
0001A1A4                            loc_1804E:
0001A1A4 08E8 0000 0022             		bset	#0,$22(a0)
0001A1AA 5428 003F                  		addq.b	#2,$3F(a0)
0001A1AE 1028 003F                  		move.b	$3F(a0),d0
0001A1B2 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A1B8 4A41                       		tst.w	d1
0001A1BA 6A00                       		bpl.s	loc_1806C
0001A1BC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1C2                            
0001A1C2                            loc_1806C:
0001A1C2 E840                       		asr.w	#4,d0
0001A1C4 4840                       		swap	d0
0001A1C6 4240                       		clr.w	d0
0001A1C8 D0A8 0030                  		add.l	$30(a0),d0
0001A1CC 4840                       		swap	d0
0001A1CE 3140 0008                  		move.w	d0,8(a0)
0001A1D2 3028 0012                  		move.w	$12(a0),d0
0001A1D6 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A1DA 9268 000C                  		sub.w	$C(a0),d1
0001A1DE 6500                       		bcs.s	loc_180A2
0001A1E0 0441 0048                  		subi.w	#$48,d1
0001A1E4 6500                       		bcs.s	loc_180A2
0001A1E6 E240                       		asr.w	#1,d0
0001A1E8 0441 0028                  		subi.w	#$28,d1
0001A1EC 6500                       		bcs.s	loc_180A2
0001A1EE E240                       		asr.w	#1,d0
0001A1F0 0441 0028                  		subi.w	#$28,d1
0001A1F4 6500                       		bcs.s	loc_180A2
0001A1F6 7000                       		moveq	#0,d0
0001A1F8                            
0001A1F8                            loc_180A2:
0001A1F8 48C0                       		ext.l	d0
0001A1FA E180                       		asl.l	#8,d0
0001A1FC 4A28 003D                  		tst.b	$3D(a0)
0001A200 6700                       		beq.s	loc_180AE
0001A202 D080                       		add.l	d0,d0
0001A204                            
0001A204                            loc_180AE:
0001A204 D1A8 0038                  		add.l	d0,$38(a0)
0001A208 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A20E 6000 FE8E                  		bra.w	loc_17F48
0001A212                            ; ===========================================================================
0001A212                            
0001A212                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A212 70FE                       		moveq	#-2,d0
0001A214 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A21A 6500                       		bcs.s	loc_180D2
0001A21C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A222 4268 0010                  		clr.w	$10(a0)
0001A226 5240                       		addq.w	#1,d0
0001A228                            
0001A228                            loc_180D2:
0001A228 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A22E 6E00                       		bgt.s	loc_180E6
0001A230 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A236 4268 0012                  		clr.w	$12(a0)
0001A23A 5240                       		addq.w	#1,d0
0001A23C                            
0001A23C                            loc_180E6:
0001A23C 6600                       		bne.s	loc_180F2
0001A23E 5428 0025                  		addq.b	#2,$25(a0)
0001A242 08A8 0000 0022             		bclr	#0,$22(a0)
0001A248                            
0001A248                            loc_180F2:
0001A248 6000 FE44                  		bra.w	loc_17F38
0001A24C                            ; ===========================================================================
0001A24C                            
0001A24C                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A24C 4A28 003D                  		tst.b	$3D(a0)
0001A250 6600                       		bne.s	loc_18112
0001A252 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A258 6D00                       		blt.s	loc_18126
0001A25A 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A260 6E00                       		bgt.s	loc_18126
0001A262 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A268                            
0001A268                            loc_18112:
0001A268                            		
0001A268 6100 F976                  		bsr.w	BossEnd
0001A26C                            		
0001A26C 08E8 0000 0022             		bset	#0,$22(a0)
0001A272 5428 0025                  		addq.b	#2,$25(a0)
0001A276                            
0001A276                            loc_18126:
0001A276 6000 FE16                  		bra.w	loc_17F38
0001A27A                            ; ===========================================================================
0001A27A                            
0001A27A                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A27A 4A28 003D                  		tst.b	$3D(a0)
0001A27E 6600                       		bne.s	loc_18136
0001A280 5328 003C                  		subq.b	#1,$3C(a0)
0001A284 6600                       		bne.s	loc_1814E
0001A286                            
0001A286                            loc_18136:
0001A286 4228 003C                  		clr.b	$3C(a0)
0001A28A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A290 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A296 4228 003D                  		clr.b	$3D(a0)
0001A29A 5428 0025                  		addq.b	#2,$25(a0)
0001A29E                            
0001A29E                            loc_1814E:
0001A29E 6000 FDEE                  		bra.w	loc_17F38
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            loc_18152:				; XREF: Obj77_ShipIndex
0001A2A2 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A2A8 6400                       		bcc.s	loc_18160
0001A2AA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A2AE 6000                       		bra.s	loc_18166
0001A2B0                            ; ===========================================================================
0001A2B0                            
0001A2B0                            loc_18160:
0001A2B0 4A28 0001                  		tst.b	1(a0)
0001A2B4 6A00                       		bpl.s	Obj77_ShipDel
0001A2B6                            
0001A2B6                            loc_18166:
0001A2B6 6000 FDD6                  		bra.w	loc_17F38
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            Obj77_ShipDel:
0001A2BA 4EF9 0000 F1BC             		jmp	DeleteObject
0001A2C0                            ; ===========================================================================
0001A2C0                            
0001A2C0                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A2C0 2268 0034                  		movea.l	$34(a0),a1
0001A2C4 1011                       		move.b	(a1),d0
0001A2C6 B010                       		cmp.b	(a0),d0
0001A2C8 6600                       		bne.s	Obj77_FaceDel
0001A2CA 7000                       		moveq	#0,d0
0001A2CC 1029 0025                  		move.b	$25(a1),d0
0001A2D0 7201                       		moveq	#1,d1
0001A2D2 4A28 003D                  		tst.b	$3D(a0)
0001A2D6 6700                       		beq.s	loc_1818C
0001A2D8 720A                       		moveq	#$A,d1
0001A2DA 6000                       		bra.s	loc_181A0
0001A2DC                            ; ===========================================================================
0001A2DC                            
0001A2DC                            loc_1818C:
0001A2DC 4A29 0020                  		tst.b	$20(a1)
0001A2E0 6600                       		bne.s	loc_18196
0001A2E2 7205                       		moveq	#5,d1
0001A2E4 6000                       		bra.s	loc_181A0
0001A2E6                            ; ===========================================================================
0001A2E6                            
0001A2E6                            loc_18196:
0001A2E6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A2EC 6500                       		bcs.s	loc_181A0
0001A2EE 7204                       		moveq	#4,d1
0001A2F0                            
0001A2F0                            loc_181A0:
0001A2F0 1141 001C                  		move.b	d1,$1C(a0)
0001A2F4 0C00 000E                  		cmpi.b	#$E,d0
0001A2F8 6600                       		bne.s	loc_181B6
0001A2FA 117C 0006 001C             		move.b	#6,$1C(a0)
0001A300 4A28 0001                  		tst.b	1(a0)
0001A304 6A00                       		bpl.s	Obj77_FaceDel
0001A306                            
0001A306                            loc_181B6:
0001A306 6000                       		bra.s	Obj77_Display
0001A308                            ; ===========================================================================
0001A308                            
0001A308                            Obj77_FaceDel:
0001A308 4EF9 0000 F1BC             		jmp	DeleteObject
0001A30E                            ; ===========================================================================
0001A30E                            
0001A30E                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A30E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A314 2268 0034                  		movea.l	$34(a0),a1
0001A318 1011                       		move.b	(a1),d0
0001A31A B010                       		cmp.b	(a0),d0
0001A31C 6600                       		bne.s	Obj77_FlameDel
0001A31E 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A324 6600                       		bne.s	loc_181F0
0001A326 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A32C 4A28 0001                  		tst.b	1(a0)
0001A330 6A00                       		bpl.s	Obj77_FlameDel
0001A332 6000                       		bra.s	loc_181F0
0001A334                            ; ===========================================================================
0001A334 4A69 0010                  		tst.w	$10(a1)
0001A338 6700                       		beq.s	loc_181F0
0001A33A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A340                            
0001A340                            loc_181F0:
0001A340 6000                       		bra.s	Obj77_Display
0001A342                            ; ===========================================================================
0001A342                            
0001A342                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A342 4EF9 0000 F1BC             		jmp	DeleteObject
0001A348                            ; ===========================================================================
0001A348                            
0001A348                            Obj77_Display:
0001A348 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001A34E 4EB9 0000 C132             		jsr	AnimateSprite
0001A354 2268 0034                  		movea.l	$34(a0),a1
0001A358 3169 0008 0008             		move.w	8(a1),8(a0)
0001A35E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A364 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A36A 7003                       		moveq	#3,d0
0001A36C C028 0022                  		and.b	$22(a0),d0
0001A370 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A376 8128 0001                  		or.b	d0,1(a0)
0001A37A 4EF9 0000 F180             		jmp	DisplaySprite
0001A380                            ; ===========================================================================
0001A380                            ; ---------------------------------------------------------------------------
0001A380                            ; Object 73 - Eggman (MZ)
0001A380                            ; ---------------------------------------------------------------------------
0001A380                            
0001A380                            Obj73:					; XREF: Obj_Index
0001A380 7000                       		moveq	#0,d0
0001A382 1028 0024                  		move.b	$24(a0),d0
0001A386 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A38A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A38E                            ; ===========================================================================
0001A38E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A390 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A392 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A394 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A396 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A398                            
0001A398 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A39B 0401 04                    		dc.b 4,	1, 4
0001A39E 0607 04                    		dc.b 6,	7, 4
0001A3A1 0800 03                    		dc.b 8,	0, 3
0001A3A4                            ; ===========================================================================
0001A3A4                            
0001A3A4                            Obj73_Main:				; XREF: Obj73_Index
0001A3A4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A3AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A3B0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3B6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A3BC 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A3C0 2248                       		movea.l	a0,a1
0001A3C2 7203                       		moveq	#3,d1
0001A3C4 6000                       		bra.s	Obj73_LoadBoss
0001A3C6                            ; ===========================================================================
0001A3C6                            
0001A3C6                            Obj73_Loop:
0001A3C6 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001A3CC 6600                       		bne.s	Obj73_ShipMain
0001A3CE 12BC 0073                  		move.b	#$73,0(a1)
0001A3D2 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3DE                            
0001A3DE                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A3DE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A3E4 4229 0025                  		clr.b	$25(a1)
0001A3E8 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3EC 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3F0 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3F4 237C 0001 9E64 0004        		move.l	#Map_Eggman,4(a1)
0001A3FC 337C 0400 0002             		move.w	#$400,2(a1)
0001A402 137C 0004 0001             		move.b	#4,1(a1)
0001A408 137C 0020 0019             		move.b	#$20,$19(a1)
0001A40E 2348 0034                  		move.l	a0,$34(a1)
0001A412 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A416                            
0001A416                            Obj73_ShipMain:
0001A416 7000                       		moveq	#0,d0
0001A418 1028 0025                  		move.b	$25(a0),d0
0001A41C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A420 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A424 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001A42A 4EB9 0000 C132             		jsr	AnimateSprite
0001A430 7003                       		moveq	#3,d0
0001A432 C028 0022                  		and.b	$22(a0),d0
0001A436 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A43C 8128 0001                  		or.b	d0,1(a0)
0001A440 4EF9 0000 F180             		jmp	DisplaySprite
0001A446                            ; ===========================================================================
0001A446 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A448 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A44A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A44C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A44E 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A450                            ; ===========================================================================
0001A450                            
0001A450                            loc_18302:				; XREF: Obj73_ShipIndex
0001A450 1028 003F                  		move.b	$3F(a0),d0
0001A454 5428 003F                  		addq.b	#2,$3F(a0)
0001A458 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001A45E E440                       		asr.w	#2,d0
0001A460 3140 0012                  		move.w	d0,$12(a0)
0001A464 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A46A 6100 F53C                  		bsr.w	BossMove
0001A46E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A474 6600                       		bne.s	loc_18334
0001A476 5428 0025                  		addq.b	#2,$25(a0)
0001A47A 4228 0028                  		clr.b	$28(a0)
0001A47E 42A8 0010                  		clr.l	$10(a0)
0001A482                            
0001A482                            loc_18334:
0001A482 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A488 1140 0034                  		move.b	d0,$34(a0)
0001A48C                            
0001A48C                            loc_1833E:
0001A48C 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A492 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A498 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A49E 6400                       		bcc.s	locret_18390
0001A4A0 4A28 0022                  		tst.b	$22(a0)
0001A4A4 6B00                       		bmi.s	loc_18392
0001A4A6 4A28 0020                  		tst.b	$20(a0)
0001A4AA 6600                       		bne.s	locret_18390
0001A4AC 4A28 003E                  		tst.b	$3E(a0)
0001A4B0 6600                       		bne.s	loc_18374
0001A4B2 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A4B8 303C 00AC                  		move.w	#$AC,d0
0001A4BC 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A4C2                            
0001A4C2                            loc_18374:
0001A4C2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A4C6 7000                       		moveq	#0,d0
0001A4C8 4A51                       		tst.w	(a1)
0001A4CA 6600                       		bne.s	loc_18382
0001A4CC 303C 0EEE                  		move.w	#$EEE,d0
0001A4D0                            
0001A4D0                            loc_18382:
0001A4D0 3280                       		move.w	d0,(a1)
0001A4D2 5328 003E                  		subq.b	#1,$3E(a0)
0001A4D6 6600                       		bne.s	locret_18390
0001A4D8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A4DE                            
0001A4DE                            locret_18390:
0001A4DE 4E75                       		rts	
0001A4E0                            ; ===========================================================================
0001A4E0                            
0001A4E0                            loc_18392:				; XREF: loc_1833E
0001A4E0 7064                       		moveq	#100,d0
0001A4E2 6100 0000                  		bsr.w	AddPoints
0001A4E6 117C 0004 0025             		move.b	#4,$25(a0)
0001A4EC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A4F2 4268 0010                  		clr.w	$10(a0)
0001A4F6 4E75                       		rts	
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A4F8 7000                       		moveq	#0,d0
0001A4FA 1028 0028                  		move.b	$28(a0),d0
0001A4FE 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A502 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A506 0228 0006 0028             		andi.b	#6,$28(a0)
0001A50C 6000 FF7E                  		bra.w	loc_1833E
0001A510                            ; ===========================================================================
0001A510 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A512 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A514 0000                       		dc.w loc_183CA-off_183C2
0001A516 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A518                            ; ===========================================================================
0001A518                            
0001A518                            loc_183CA:				; XREF: off_183C2
0001A518 4A68 0010                  		tst.w	$10(a0)
0001A51C 6600                       		bne.s	loc_183FE
0001A51E 7040                       		moveq	#$40,d0
0001A520 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A526 6700                       		beq.s	loc_183E6
0001A528 6500                       		bcs.s	loc_183DE
0001A52A 4440                       		neg.w	d0
0001A52C                            
0001A52C                            loc_183DE:
0001A52C 3140 0012                  		move.w	d0,$12(a0)
0001A530 6000 F476                  		bra.w	BossMove
0001A534                            ; ===========================================================================
0001A534                            
0001A534                            loc_183E6:
0001A534 317C 0200 0010             		move.w	#$200,$10(a0)
0001A53A 317C 0100 0012             		move.w	#$100,$12(a0)
0001A540 0828 0000 0022             		btst	#0,$22(a0)
0001A546 6600                       		bne.s	loc_183FE
0001A548 4468 0010                  		neg.w	$10(a0)
0001A54C                            
0001A54C                            loc_183FE:
0001A54C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A552 6400                       		bcc.s	Obj73_MakeLava
0001A554 6100 F452                  		bsr.w	BossMove
0001A558 5968 0012                  		subq.w	#4,$12(a0)
0001A55C                            
0001A55C                            Obj73_MakeLava:
0001A55C 5328 0034                  		subq.b	#1,$34(a0)
0001A560 6400                       		bcc.s	loc_1845C
0001A562 4EB9 0000 F614             		jsr	SingleObjLoad
0001A568 6600                       		bne.s	loc_1844A
0001A56A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A56E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A574 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A57A 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A580 80FC 0050                  		divu.w	#$50,d0
0001A584 4840                       		swap	d0
0001A586 0640 1878                  		addi.w	#$1878,d0
0001A58A 3340 0008                  		move.w	d0,8(a1)
0001A58E EE09                       		lsr.b	#7,d1
0001A590 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A596                            
0001A596                            loc_1844A:
0001A596 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001A59C 0200 001F                  		andi.b	#$1F,d0
0001A5A0 0600 0040                  		addi.b	#$40,d0
0001A5A4 1140 0034                  		move.b	d0,$34(a0)
0001A5A8                            
0001A5A8                            loc_1845C:
0001A5A8 0828 0000 0022             		btst	#0,$22(a0)
0001A5AE 6700                       		beq.s	loc_18474
0001A5B0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A5B6 6D00                       		blt.s	locret_1849C
0001A5B8 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A5BE 6000                       		bra.s	loc_18482
0001A5C0                            ; ===========================================================================
0001A5C0                            
0001A5C0                            loc_18474:
0001A5C0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A5C6 6E00                       		bgt.s	locret_1849C
0001A5C8 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A5CE                            
0001A5CE                            loc_18482:
0001A5CE 4268 0010                  		clr.w	$10(a0)
0001A5D2 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A5D8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A5DE 6400                       		bcc.s	loc_18498
0001A5E0 4468 0012                  		neg.w	$12(a0)
0001A5E4                            
0001A5E4                            loc_18498:
0001A5E4 5428 0028                  		addq.b	#2,$28(a0)
0001A5E8                            
0001A5E8                            locret_1849C:
0001A5E8 4E75                       		rts	
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            Obj73_MakeLava2:			; XREF: off_183C2
0001A5EA 6100 F3BC                  		bsr.w	BossMove
0001A5EE 3028 0038                  		move.w	$38(a0),d0
0001A5F2 0440 022C                  		subi.w	#$22C,d0
0001A5F6 6E00                       		bgt.s	locret_184F4
0001A5F8 303C 022C                  		move.w	#$22C,d0
0001A5FC 4A68 0012                  		tst.w	$12(a0)
0001A600 6700                       		beq.s	loc_184EA
0001A602 4268 0012                  		clr.w	$12(a0)
0001A606 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A60C 0868 0000 0022             		bchg	#0,$22(a0)
0001A612 4EB9 0000 F614             		jsr	SingleObjLoad
0001A618 6600                       		bne.s	loc_184EA
0001A61A 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A620 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A626 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A62C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A630 137C 0001 0028             		move.b	#1,$28(a1)
0001A636                            
0001A636                            loc_184EA:
0001A636 5368 003C                  		subq.w	#1,$3C(a0)
0001A63A 6600                       		bne.s	locret_184F4
0001A63C 5428 0028                  		addq.b	#2,$28(a0)
0001A640                            
0001A640                            locret_184F4:
0001A640 4E75                       		rts	
0001A642                            ; ===========================================================================
0001A642                            
0001A642                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A642 5368 003C                  		subq.w	#1,$3C(a0)
0001A646 6B00                       		bmi.s	loc_18500
0001A648 6000 F31C                  		bra.w	BossDefeated
0001A64C                            ; ===========================================================================
0001A64C                            
0001A64C                            loc_18500:
0001A64C 08E8 0000 0022             		bset	#0,$22(a0)
0001A652 08A8 0007 0022             		bclr	#7,$22(a0)
0001A658 4268 0010                  		clr.w	$10(a0)
0001A65C 5428 0025                  		addq.b	#2,$25(a0)
0001A660 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A666 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A66A 6600                       		bne.s	locret_1852A
0001A66C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A672 4268 0012                  		clr.w	$12(a0)
0001A676                            
0001A676                            locret_1852A:
0001A676 4E75                       		rts	
0001A678                            ; ===========================================================================
0001A678                            
0001A678                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A678 5268 003C                  		addq.w	#1,$3C(a0)
0001A67C 6700                       		beq.s	loc_18544
0001A67E 6A00                       		bpl.s	loc_1854E
0001A680 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A686 6400                       		bcc.s	loc_18544
0001A688 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A68E 6000                       		bra.s	loc_1857A
0001A690                            ; ===========================================================================
0001A690                            
0001A690                            loc_18544:
0001A690 4268 0012                  		clr.w	$12(a0)
0001A694 4268 003C                  		clr.w	$3C(a0)
0001A698 6000                       		bra.s	loc_1857A
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            loc_1854E:
0001A69A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A6A0 6500                       		bcs.s	loc_18566
0001A6A2 6700                       		beq.s	loc_1856C
0001A6A4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A6AA 6500                       		bcs.s	loc_1857A
0001A6AC 5428 0025                  		addq.b	#2,$25(a0)
0001A6B0 6000                       		bra.s	loc_1857A
0001A6B2                            ; ===========================================================================
0001A6B2                            
0001A6B2                            loc_18566:
0001A6B2 5168 0012                  		subq.w	#8,$12(a0)
0001A6B6 6000                       		bra.s	loc_1857A
0001A6B8                            ; ===========================================================================
0001A6B8                            
0001A6B8                            loc_1856C:
0001A6B8 4268 0012                  		clr.w	$12(a0)
0001A6BC 6100 F522                  		bsr.w	BossEnd
0001A6C0                            
0001A6C0                            loc_1857A:
0001A6C0 6100 F2E6                  		bsr.w	BossMove
0001A6C4 6000 FDC6                  		bra.w	loc_1833E
0001A6C8                            ; ===========================================================================
0001A6C8                            
0001A6C8                            loc_18582:				; XREF: Obj73_ShipIndex
0001A6C8 317C 0500 0010             		move.w	#$500,$10(a0)
0001A6CE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A6D4 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A6DA 6400                       		bcc.s	loc_1859C
0001A6DC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A6E0 6000                       		bra.s	loc_185A2
0001A6E2                            ; ===========================================================================
0001A6E2                            
0001A6E2                            loc_1859C:
0001A6E2 4A28 0001                  		tst.b	1(a0)
0001A6E6 6A00                       		bpl.s	Obj73_ShipDel
0001A6E8                            
0001A6E8                            loc_185A2:
0001A6E8 6100 F2BE                  		bsr.w	BossMove
0001A6EC 6000 FD9E                  		bra.w	loc_1833E
0001A6F0                            ; ===========================================================================
0001A6F0                            
0001A6F0                            Obj73_ShipDel:
0001A6F0 4EF9 0000 F1BC             		jmp	DeleteObject
0001A6F6                            ; ===========================================================================
0001A6F6                            
0001A6F6                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A6F6 7000                       		moveq	#0,d0
0001A6F8 7201                       		moveq	#1,d1
0001A6FA 2268 0034                  		movea.l	$34(a0),a1
0001A6FE 1029 0025                  		move.b	$25(a1),d0
0001A702 5540                       		subq.w	#2,d0
0001A704 6600                       		bne.s	loc_185D2
0001A706 0829 0001 0028             		btst	#1,$28(a1)
0001A70C 6700                       		beq.s	loc_185DA
0001A70E 4A69 0012                  		tst.w	$12(a1)
0001A712 6600                       		bne.s	loc_185DA
0001A714 7204                       		moveq	#4,d1
0001A716 6000                       		bra.s	loc_185EE
0001A718                            ; ===========================================================================
0001A718                            
0001A718                            loc_185D2:
0001A718 5500                       		subq.b	#2,d0
0001A71A 6B00                       		bmi.s	loc_185DA
0001A71C 720A                       		moveq	#$A,d1
0001A71E 6000                       		bra.s	loc_185EE
0001A720                            ; ===========================================================================
0001A720                            
0001A720                            loc_185DA:
0001A720 4A29 0020                  		tst.b	$20(a1)
0001A724 6600                       		bne.s	loc_185E4
0001A726 7205                       		moveq	#5,d1
0001A728 6000                       		bra.s	loc_185EE
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            loc_185E4:
0001A72A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A730 6500                       		bcs.s	loc_185EE
0001A732 7204                       		moveq	#4,d1
0001A734                            
0001A734                            loc_185EE:
0001A734 1141 001C                  		move.b	d1,$1C(a0)
0001A738 5900                       		subq.b	#4,d0
0001A73A 6600                       		bne.s	loc_18602
0001A73C 117C 0006 001C             		move.b	#6,$1C(a0)
0001A742 4A28 0001                  		tst.b	1(a0)
0001A746 6A00                       		bpl.s	Obj73_FaceDel
0001A748                            
0001A748                            loc_18602:
0001A748 6000                       		bra.s	Obj73_Display
0001A74A                            ; ===========================================================================
0001A74A                            
0001A74A                            Obj73_FaceDel:
0001A74A 4EF9 0000 F1BC             		jmp	DeleteObject
0001A750                            ; ===========================================================================
0001A750                            
0001A750                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A750 117C 0007 001C             		move.b	#7,$1C(a0)
0001A756 2268 0034                  		movea.l	$34(a0),a1
0001A75A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A760 6D00                       		blt.s	loc_1862A
0001A762 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A768 4A28 0001                  		tst.b	1(a0)
0001A76C 6A00                       		bpl.s	Obj73_FlameDel
0001A76E 6000                       		bra.s	loc_18636
0001A770                            ; ===========================================================================
0001A770                            
0001A770                            loc_1862A:
0001A770 4A69 0010                  		tst.w	$10(a1)
0001A774 6700                       		beq.s	loc_18636
0001A776 117C 0008 001C             		move.b	#8,$1C(a0)
0001A77C                            
0001A77C                            loc_18636:
0001A77C 6000                       		bra.s	Obj73_Display
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A77E 4EF9 0000 F1BC             		jmp	DeleteObject
0001A784                            ; ===========================================================================
0001A784                            
0001A784                            Obj73_Display:
0001A784 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001A78A 4EB9 0000 C132             		jsr	AnimateSprite
0001A790                            
0001A790                            loc_1864A:
0001A790 2268 0034                  		movea.l	$34(a0),a1
0001A794 3169 0008 0008             		move.w	8(a1),8(a0)
0001A79A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A7A0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A7A6 7003                       		moveq	#3,d0
0001A7A8 C028 0022                  		and.b	$22(a0),d0
0001A7AC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A7B2 8128 0001                  		or.b	d0,1(a0)
0001A7B6 4EF9 0000 F180             		jmp	DisplaySprite
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A7BC 2268 0034                  		movea.l	$34(a0),a1
0001A7C0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A7C6 6600                       		bne.s	loc_18688
0001A7C8 4A28 0001                  		tst.b	1(a0)
0001A7CC 6A00                       		bpl.s	Obj73_TubeDel
0001A7CE                            
0001A7CE                            loc_18688:
0001A7CE 217C 0001 9F2C 0004        		move.l	#Map_BossItems,4(a0)
0001A7D6 317C 246C 0002             		move.w	#$246C,2(a0)
0001A7DC 117C 0004 001A             		move.b	#4,$1A(a0)
0001A7E2 60AC                       		bra.s	loc_1864A
0001A7E4                            ; ===========================================================================
0001A7E4                            
0001A7E4                            Obj73_TubeDel:
0001A7E4 4EF9 0000 F1BC             		jmp	DeleteObject
0001A7EA                            ; ===========================================================================
0001A7EA                            ; ---------------------------------------------------------------------------
0001A7EA                            ; Object 74 - lava that	Eggman drops (MZ)
0001A7EA                            ; ---------------------------------------------------------------------------
0001A7EA                            
0001A7EA                            Obj74:					; XREF: Obj_Index
0001A7EA 7000                       		moveq	#0,d0
0001A7EC 1028 0024                  		move.b	$24(a0),d0
0001A7F0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A7F4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A7F8 4EF9 0000 F180             		jmp	DisplaySprite
0001A7FE                            ; ===========================================================================
0001A7FE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A800 0000                       		dc.w Obj74_Action-Obj74_Index
0001A802 0000                       		dc.w loc_18886-Obj74_Index
0001A804 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A806                            ; ===========================================================================
0001A806                            
0001A806                            Obj74_Main:				; XREF: Obj74_Index
0001A806 117C 0008 0016             		move.b	#8,$16(a0)
0001A80C 117C 0008 0017             		move.b	#8,$17(a0)
0001A812 217C 0000 CD84 0004        		move.l	#Map_obj14,4(a0)
0001A81A 317C 0345 0002             		move.w	#$345,2(a0)
0001A820 117C 0004 0001             		move.b	#4,1(a0)
0001A826 117C 0005 0018             		move.b	#5,$18(a0)
0001A82C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A832 117C 0008 0019             		move.b	#8,$19(a0)
0001A838 5428 0024                  		addq.b	#2,$24(a0)
0001A83C 4A28 0028                  		tst.b	$28(a0)
0001A840 6600                       		bne.s	loc_1870A
0001A842 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A848 5428 0024                  		addq.b	#2,$24(a0)
0001A84C 6000 0000                  		bra.w	loc_18886
0001A850                            ; ===========================================================================
0001A850                            
0001A850                            loc_1870A:
0001A850 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A856 303C 00AE                  		move.w	#$AE,d0
0001A85A 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play lava sound
0001A860                            
0001A860                            Obj74_Action:				; XREF: Obj74_Index
0001A860 7000                       		moveq	#0,d0
0001A862 1028 0025                  		move.b	$25(a0),d0
0001A866 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A86A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A86E 4EB9 0000 F166             		jsr	SpeedToPos
0001A874 43F9 0001 005C             		lea	(Ani_obj14).l,a1
0001A87A 4EB9 0000 C132             		jsr	AnimateSprite
0001A880 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A886 6200                       		bhi.s	Obj74_Delete
0001A888 4E75                       		rts	
0001A88A                            ; ===========================================================================
0001A88A                            
0001A88A                            Obj74_Delete:
0001A88A 4EF9 0000 F1BC             		jmp	DeleteObject
0001A890                            ; ===========================================================================
0001A890 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A892 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A894 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A896 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A898                            ; ===========================================================================
0001A898                            
0001A898                            Obj74_Drop:				; XREF: Obj74_Index2
0001A898 08E8 0001 0022             		bset	#1,$22(a0)
0001A89E 5328 0029                  		subq.b	#1,$29(a0)
0001A8A2 6A00                       		bpl.s	locret_18780
0001A8A4 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A8AA 4228 0028                  		clr.b	$28(a0)
0001A8AE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A8B4 08A8 0001 0022             		bclr	#1,$22(a0)
0001A8BA 6100 C672                  		bsr.w	ObjHitFloor
0001A8BE 4A41                       		tst.w	d1
0001A8C0 6A00                       		bpl.s	locret_18780
0001A8C2 5428 0025                  		addq.b	#2,$25(a0)
0001A8C6                            
0001A8C6                            locret_18780:
0001A8C6 4E75                       		rts	
0001A8C8                            ; ===========================================================================
0001A8C8                            
0001A8C8                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A8C8 5568 000C                  		subq.w	#2,$C(a0)
0001A8CC 08E8 0007 0002             		bset	#7,2(a0)
0001A8D2 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A8D8 4268 0012                  		clr.w	$12(a0)
0001A8DC 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A8E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A8E8 117C 0003 0029             		move.b	#3,$29(a0)
0001A8EE 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001A8F4 6600                       		bne.s	loc_187CA
0001A8F6 47D1                       		lea	(a1),a3
0001A8F8 45D0                       		lea	(a0),a2
0001A8FA 7003                       		moveq	#3,d0
0001A8FC                            
0001A8FC                            Obj74_Loop:
0001A8FC 26DA                       		move.l	(a2)+,(a3)+
0001A8FE 26DA                       		move.l	(a2)+,(a3)+
0001A900 26DA                       		move.l	(a2)+,(a3)+
0001A902 26DA                       		move.l	(a2)+,(a3)+
0001A904 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A908                            
0001A908 4469 0010                  		neg.w	$10(a1)
0001A90C 5429 0025                  		addq.b	#2,$25(a1)
0001A910                            
0001A910                            loc_187CA:
0001A910 5428 0025                  		addq.b	#2,$25(a0)
0001A914 4E75                       		rts	
0001A916                            
0001A916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A916                            
0001A916                            
0001A916                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A916 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001A91C 6600                       		bne.s	locret_187EE
0001A91E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A924 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A92A 12BC 0074                  		move.b	#$74,(a1)
0001A92E 337C 0067 0028             		move.w	#$67,$28(a1)
0001A934                            
0001A934                            locret_187EE:
0001A934 4E75                       		rts	
0001A936                            ; End of function Obj74_Duplicate2
0001A936                            
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A936 6100 C5F6                  		bsr.w	ObjHitFloor
0001A93A 4A41                       		tst.w	d1
0001A93C 6A00                       		bpl.s	loc_18826
0001A93E 3028 0008                  		move.w	8(a0),d0
0001A942 0C40 1940                  		cmpi.w	#$1940,d0
0001A946 6E00                       		bgt.s	loc_1882C
0001A948 3228 0030                  		move.w	$30(a0),d1
0001A94C B240                       		cmp.w	d0,d1
0001A94E 6700                       		beq.s	loc_1881E
0001A950 0240 0010                  		andi.w	#$10,d0
0001A954 0241 0010                  		andi.w	#$10,d1
0001A958 B240                       		cmp.w	d0,d1
0001A95A 6700                       		beq.s	loc_1881E
0001A95C 61B8                       		bsr.s	Obj74_Duplicate2
0001A95E 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A964                            
0001A964                            loc_1881E:
0001A964 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A96A 4E75                       		rts	
0001A96C                            ; ===========================================================================
0001A96C                            
0001A96C                            loc_18826:
0001A96C 5428 0025                  		addq.b	#2,$25(a0)
0001A970 4E75                       		rts	
0001A972                            ; ===========================================================================
0001A972                            
0001A972                            loc_1882C:
0001A972 5428 0024                  		addq.b	#2,$24(a0)
0001A976 4E75                       		rts	
0001A978                            ; ===========================================================================
0001A978                            
0001A978                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A978 08A8 0001 0022             		bclr	#1,$22(a0)
0001A97E 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A984 3028 0008                  		move.w	8(a0),d0
0001A988 9068 0032                  		sub.w	$32(a0),d0
0001A98C 6A00                       		bpl.s	loc_1884A
0001A98E 4440                       		neg.w	d0
0001A990                            
0001A990                            loc_1884A:
0001A990 0C40 0012                  		cmpi.w	#$12,d0
0001A994 6600                       		bne.s	loc_18856
0001A996 08A8 0007 0002             		bclr	#7,2(a0)
0001A99C                            
0001A99C                            loc_18856:
0001A99C 6100 C590                  		bsr.w	ObjHitFloor
0001A9A0 4A41                       		tst.w	d1
0001A9A2 6A00                       		bpl.s	locret_1887E
0001A9A4 5328 0029                  		subq.b	#1,$29(a0)
0001A9A8 6700                       		beq.s	Obj74_Delete2
0001A9AA 4268 0012                  		clr.w	$12(a0)
0001A9AE 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A9B4 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A9BA 08E8 0007 0002             		bset	#7,2(a0)
0001A9C0 5528 0025                  		subq.b	#2,$25(a0)
0001A9C4                            
0001A9C4                            locret_1887E:
0001A9C4 4E75                       		rts	
0001A9C6                            ; ===========================================================================
0001A9C6                            
0001A9C6                            Obj74_Delete2:
0001A9C6 4EF9 0000 F1BC             		jmp	DeleteObject
0001A9CC                            ; ===========================================================================
0001A9CC                            
0001A9CC                            loc_18886:				; XREF: Obj74_Index
0001A9CC 08E8 0007 0002             		bset	#7,2(a0)
0001A9D2 5328 0029                  		subq.b	#1,$29(a0)
0001A9D6 6600                       		bne.s	Obj74_Animate
0001A9D8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A9DE 5968 000C                  		subq.w	#4,$C(a0)
0001A9E2 4228 0020                  		clr.b	$20(a0)
0001A9E6                            
0001A9E6                            Obj74_Animate:
0001A9E6 43F9 0001 005C             		lea	(Ani_obj14).l,a1
0001A9EC 4EF9 0000 C132             		jmp	AnimateSprite
0001A9F2                            ; ===========================================================================
0001A9F2                            
0001A9F2                            Obj74_Delete3:				; XREF: Obj74_Index
0001A9F2 4EF9 0000 F1BC             		jmp	DeleteObject
0001A9F8                            ; ===========================================================================
0001A9F8                            
0001A9F8                            Obj7A_Delete:
0001A9F8 4EF9 0000 F1BC             		jmp	DeleteObject
0001A9FE                            ; ===========================================================================
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE                            ; Object 7A - Eggman (SLZ)
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE                            
0001A9FE                            Obj7A:					; XREF: Obj_Index
0001A9FE 7000                       		moveq	#0,d0
0001AA00 1028 0024                  		move.b	$24(a0),d0
0001AA04 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001AA08 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001AA0C                            ; ===========================================================================
0001AA0C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001AA0E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001AA10 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001AA12 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001AA14 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001AA16                            
0001AA16 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001AA19 0401 04                    		dc.b 4,	1, 4
0001AA1C 0607 04                    		dc.b 6,	7, 4
0001AA1F 0800 03                    		dc.b 8,	0, 3
0001AA22                            ; ===========================================================================
0001AA22                            
0001AA22                            Obj7A_Main:				; XREF: Obj7A_Index
0001AA22 317C 2188 0008             		move.w	#$2188,8(a0)
0001AA28 317C 0228 000C             		move.w	#$228,$C(a0)
0001AA2E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA34 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AA3A 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA40 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AA46 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001AA4A 2248                       		movea.l	a0,a1
0001AA4C 7203                       		moveq	#3,d1
0001AA4E 6000                       		bra.s	Obj7A_LoadBoss
0001AA50                            ; ===========================================================================
0001AA50                            
0001AA50                            Obj7A_Loop:
0001AA50 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001AA56 6600                       		bne.s	loc_1895C
0001AA58 12BC 007A                  		move.b	#$7A,0(a1)
0001AA5C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA62 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA68                            
0001AA68                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001AA68 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA6E 4229 0025                  		clr.b	$25(a1)
0001AA72 135A 0024                  		move.b	(a2)+,$24(a1)
0001AA76 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AA7A 135A 0018                  		move.b	(a2)+,$18(a1)
0001AA7E 237C 0001 9E64 0004        		move.l	#Map_Eggman,4(a1)
0001AA86 337C 0400 0002             		move.w	#$400,2(a1)
0001AA8C 137C 0004 0001             		move.b	#4,1(a1)
0001AA92 137C 0020 0019             		move.b	#$20,$19(a1)
0001AA98 2348 0034                  		move.l	a0,$34(a1)
0001AA9C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001AAA0                            
0001AAA0                            loc_1895C:
0001AAA0 43F8 D040                  		lea	($FFFFD040).w,a1
0001AAA4 45E8 002A                  		lea	$2A(a0),a2
0001AAA8 705E                       		moveq	#$5E,d0
0001AAAA 723E                       		moveq	#$3E,d1
0001AAAC                            
0001AAAC                            loc_18968:
0001AAAC B011                       		cmp.b	(a1),d0
0001AAAE 6600                       		bne.s	loc_18974
0001AAB0 4A29 0028                  		tst.b	$28(a1)
0001AAB4 6700                       		beq.s	loc_18974
0001AAB6 34C9                       		move.w	a1,(a2)+
0001AAB8                            
0001AAB8                            loc_18974:
0001AAB8 D2FC 0040                  		adda.w	#$40,a1
0001AABC 51C9 FFEE                  		dbf	d1,loc_18968
0001AAC0                            
0001AAC0                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001AAC0 7000                       		moveq	#0,d0
0001AAC2 1028 0025                  		move.b	$25(a0),d0
0001AAC6 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001AACA 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AACE 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001AAD4 4EB9 0000 C132             		jsr	AnimateSprite
0001AADA 7003                       		moveq	#3,d0
0001AADC C028 0022                  		and.b	$22(a0),d0
0001AAE0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AAE6 8128 0001                  		or.b	d0,1(a0)
0001AAEA 4EF9 0000 F180             		jmp	DisplaySprite
0001AAF0                            ; ===========================================================================
0001AAF0 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AAF2 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AAF4 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AAF6 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AAF8 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AAFA 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AAFC 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB02 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AB08 6400                       		bcc.s	loc_189CA
0001AB0A 5428 0025                  		addq.b	#2,$25(a0)
0001AB0E                            
0001AB0E                            loc_189CA:
0001AB0E 6100 EE98                  		bsr.w	BossMove
0001AB12 1028 003F                  		move.b	$3F(a0),d0
0001AB16 5428 003F                  		addq.b	#2,$3F(a0)
0001AB1A 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001AB20 EC40                       		asr.w	#6,d0
0001AB22 D068 0038                  		add.w	$38(a0),d0
0001AB26 3140 000C                  		move.w	d0,$C(a0)
0001AB2A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB30 6000                       		bra.s	loc_189FE
0001AB32                            ; ===========================================================================
0001AB32                            
0001AB32                            loc_189EE:
0001AB32 6100 EE74                  		bsr.w	BossMove
0001AB36 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB3C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB42                            
0001AB42                            loc_189FE:
0001AB42 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AB48 6400                       		bcc.s	locret_18A44
0001AB4A 4A28 0022                  		tst.b	$22(a0)
0001AB4E 6B00                       		bmi.s	loc_18A46
0001AB50 4A28 0020                  		tst.b	$20(a0)
0001AB54 6600                       		bne.s	locret_18A44
0001AB56 4A28 003E                  		tst.b	$3E(a0)
0001AB5A 6600                       		bne.s	loc_18A28
0001AB5C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AB62 303C 00AC                  		move.w	#$AC,d0
0001AB66 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB6C                            
0001AB6C                            loc_18A28:
0001AB6C 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AB70 7000                       		moveq	#0,d0
0001AB72 4A51                       		tst.w	(a1)
0001AB74 6600                       		bne.s	loc_18A36
0001AB76 303C 0EEE                  		move.w	#$EEE,d0
0001AB7A                            
0001AB7A                            loc_18A36:
0001AB7A 3280                       		move.w	d0,(a1)
0001AB7C 5328 003E                  		subq.b	#1,$3E(a0)
0001AB80 6600                       		bne.s	locret_18A44
0001AB82 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB88                            
0001AB88                            locret_18A44:
0001AB88 4E75                       		rts	
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            loc_18A46:
0001AB8A 7064                       		moveq	#100,d0
0001AB8C 6100 0000                  		bsr.w	AddPoints
0001AB90 117C 0006 0025             		move.b	#6,$25(a0)
0001AB96 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AB9C 4268 0010                  		clr.w	$10(a0)
0001ABA0 4E75                       		rts	
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001ABA2 3028 0030                  		move.w	$30(a0),d0
0001ABA6 317C 0200 0010             		move.w	#$200,$10(a0)
0001ABAC 0828 0000 0022             		btst	#0,$22(a0)
0001ABB2 6600                       		bne.s	loc_18A7C
0001ABB4 4468 0010                  		neg.w	$10(a0)
0001ABB8 0C40 2008                  		cmpi.w	#$2008,d0
0001ABBC 6E00                       		bgt.s	loc_18A88
0001ABBE 6000                       		bra.s	loc_18A82
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            loc_18A7C:
0001ABC0 0C40 2138                  		cmpi.w	#$2138,d0
0001ABC4 6D00                       		blt.s	loc_18A88
0001ABC6                            
0001ABC6                            loc_18A82:
0001ABC6 0868 0000 0022             		bchg	#0,$22(a0)
0001ABCC                            
0001ABCC                            loc_18A88:
0001ABCC 3028 0008                  		move.w	8(a0),d0
0001ABD0 72FF                       		moveq	#-1,d1
0001ABD2 7402                       		moveq	#2,d2
0001ABD4 45E8 002A                  		lea	$2A(a0),a2
0001ABD8 7828                       		moveq	#$28,d4
0001ABDA 4A68 0010                  		tst.w	$10(a0)
0001ABDE 6A00                       		bpl.s	loc_18A9E
0001ABE0 4444                       		neg.w	d4
0001ABE2                            
0001ABE2                            loc_18A9E:
0001ABE2 321A                       		move.w	(a2)+,d1
0001ABE4 2641                       		movea.l	d1,a3
0001ABE6 082B 0003 0022             		btst	#3,$22(a3)
0001ABEC 6600                       		bne.s	loc_18AB4
0001ABEE 362B 0008                  		move.w	8(a3),d3
0001ABF2 D644                       		add.w	d4,d3
0001ABF4 9640                       		sub.w	d0,d3
0001ABF6 6700                       		beq.s	loc_18AC0
0001ABF8                            
0001ABF8                            loc_18AB4:
0001ABF8 51CA FFE8                  		dbf	d2,loc_18A9E
0001ABFC                            
0001ABFC 1142 0028                  		move.b	d2,$28(a0)
0001AC00 6000 FF0C                  		bra.w	loc_189CA
0001AC04                            ; ===========================================================================
0001AC04                            
0001AC04                            loc_18AC0:
0001AC04 1142 0028                  		move.b	d2,$28(a0)
0001AC08 5428 0025                  		addq.b	#2,$25(a0)
0001AC0C 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AC12 6000 FEFA                  		bra.w	loc_189CA
0001AC16                            ; ===========================================================================
0001AC16                            
0001AC16                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AC16 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AC1C 6600                       		bne.s	loc_18B36
0001AC1E 70FF                       		moveq	#-1,d0
0001AC20 1028 0028                  		move.b	$28(a0),d0
0001AC24 4880                       		ext.w	d0
0001AC26 6B00                       		bmi.s	loc_18B40
0001AC28 5540                       		subq.w	#2,d0
0001AC2A 4440                       		neg.w	d0
0001AC2C D040                       		add.w	d0,d0
0001AC2E 43E8 002A                  		lea	$2A(a0),a1
0001AC32 3031 0000                  		move.w	(a1,d0.w),d0
0001AC36 2440                       		movea.l	d0,a2
0001AC38 43F8 D040                  		lea	($FFFFD040).w,a1
0001AC3C 723E                       		moveq	#$3E,d1
0001AC3E                            
0001AC3E                            loc_18AFA:
0001AC3E B0A9 003C                  		cmp.l	$3C(a1),d0
0001AC42 6700                       		beq.s	loc_18B40
0001AC44 D2FC 0040                  		adda.w	#$40,a1
0001AC48 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AC4C                            
0001AC4C 2F08                       		move.l	a0,-(sp)
0001AC4E 41D2                       		lea	(a2),a0
0001AC50 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001AC56 205F                       		movea.l	(sp)+,a0
0001AC58 6600                       		bne.s	loc_18B40
0001AC5A 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AC5E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AC6A 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AC70 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AC76 234A 003C                  		move.l	a2,$3C(a1)
0001AC7A                            
0001AC7A                            loc_18B36:
0001AC7A 5328 003C                  		subq.b	#1,$3C(a0)
0001AC7E 6700                       		beq.s	loc_18B40
0001AC80 6000 FEC0                  		bra.w	loc_189FE
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            loc_18B40:
0001AC84 5528 0025                  		subq.b	#2,$25(a0)
0001AC88 6000 FE84                  		bra.w	loc_189CA
0001AC8C                            ; ===========================================================================
0001AC8C                            
0001AC8C                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AC8C 5328 003C                  		subq.b	#1,$3C(a0)
0001AC90 6B00                       		bmi.s	loc_18B52
0001AC92 6000 ECD2                  		bra.w	BossDefeated
0001AC96                            ; ===========================================================================
0001AC96                            
0001AC96                            loc_18B52:
0001AC96 5428 0025                  		addq.b	#2,$25(a0)
0001AC9A 4268 0012                  		clr.w	$12(a0)
0001AC9E 08E8 0000 0022             		bset	#0,$22(a0)
0001ACA4 08A8 0007 0022             		bclr	#7,$22(a0)
0001ACAA 4268 0010                  		clr.w	$10(a0)
0001ACAE 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001ACB4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001ACB8 6600                       		bne.s	loc_18B7C
0001ACBA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001ACC0                            
0001ACC0                            loc_18B7C:
0001ACC0 6000 FE80                  		bra.w	loc_189FE
0001ACC4                            ; ===========================================================================
0001ACC4                            
0001ACC4                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001ACC4 5228 003C                  		addq.b	#1,$3C(a0)
0001ACC8 6700                       		beq.s	loc_18B90
0001ACCA 6A00                       		bpl.s	loc_18B96
0001ACCC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001ACD2 6000                       		bra.s	loc_18BC2
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            loc_18B90:
0001ACD4 4268 0012                  		clr.w	$12(a0)
0001ACD8 6000                       		bra.s	loc_18BC2
0001ACDA                            ; ===========================================================================
0001ACDA                            
0001ACDA                            loc_18B96:
0001ACDA 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001ACE0 6500                       		bcs.s	loc_18BAE
0001ACE2 6700                       		beq.s	loc_18BB4
0001ACE4 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001ACEA 6500                       		bcs.s	loc_18BC2
0001ACEC 5428 0025                  		addq.b	#2,$25(a0)
0001ACF0 6000                       		bra.s	loc_18BC2
0001ACF2                            ; ===========================================================================
0001ACF2                            
0001ACF2                            loc_18BAE:
0001ACF2 5168 0012                  		subq.w	#8,$12(a0)
0001ACF6 6000                       		bra.s	loc_18BC2
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_18BB4:
0001ACF8 4268 0012                  		clr.w	$12(a0)
0001ACFC 6100 EEE2                  		bsr.w	BossEnd
0001AD00                            
0001AD00                            loc_18BC2:
0001AD00 6000 FE30                  		bra.w	loc_189EE
0001AD04                            ; ===========================================================================
0001AD04                            
0001AD04                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AD04 317C 0400 0010             		move.w	#$400,$10(a0)
0001AD0A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AD10 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AD16 6400                       		bcc.s	loc_18BE0
0001AD18 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AD1C 6000                       		bra.s	loc_18BE8
0001AD1E                            ; ===========================================================================
0001AD1E                            
0001AD1E                            loc_18BE0:
0001AD1E 4A28 0001                  		tst.b	1(a0)
0001AD22 6A00 FCD4                  		bpl.w	Obj7A_Delete
0001AD26                            
0001AD26                            loc_18BE8:
0001AD26 6100 EC80                  		bsr.w	BossMove
0001AD2A 6000 FDE2                  		bra.w	loc_189CA
0001AD2E                            ; ===========================================================================
0001AD2E                            
0001AD2E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AD2E 7000                       		moveq	#0,d0
0001AD30 7201                       		moveq	#1,d1
0001AD32 2268 0034                  		movea.l	$34(a0),a1
0001AD36 1029 0025                  		move.b	$25(a1),d0
0001AD3A 0C00 0006                  		cmpi.b	#6,d0
0001AD3E 6B00                       		bmi.s	loc_18C06
0001AD40 720A                       		moveq	#$A,d1
0001AD42 6000                       		bra.s	loc_18C1A
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_18C06:
0001AD44 4A29 0020                  		tst.b	$20(a1)
0001AD48 6600                       		bne.s	loc_18C10
0001AD4A 7205                       		moveq	#5,d1
0001AD4C 6000                       		bra.s	loc_18C1A
0001AD4E                            ; ===========================================================================
0001AD4E                            
0001AD4E                            loc_18C10:
0001AD4E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AD54 6500                       		bcs.s	loc_18C1A
0001AD56 7204                       		moveq	#4,d1
0001AD58                            
0001AD58                            loc_18C1A:
0001AD58 1141 001C                  		move.b	d1,$1C(a0)
0001AD5C 0C00 000A                  		cmpi.b	#$A,d0
0001AD60 6600                       		bne.s	loc_18C32
0001AD62 117C 0006 001C             		move.b	#6,$1C(a0)
0001AD68 4A28 0001                  		tst.b	1(a0)
0001AD6C 6A00 FC8A                  		bpl.w	Obj7A_Delete
0001AD70                            
0001AD70                            loc_18C32:
0001AD70 6000                       		bra.s	loc_18C6C
0001AD72                            ; ===========================================================================
0001AD72                            
0001AD72                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AD72 117C 0008 001C             		move.b	#8,$1C(a0)
0001AD78 2268 0034                  		movea.l	$34(a0),a1
0001AD7C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AD82 6600                       		bne.s	loc_18C56
0001AD84 4A28 0001                  		tst.b	1(a0)
0001AD88 6A00 FC6E                  		bpl.w	Obj7A_Delete
0001AD8C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD92 6000                       		bra.s	loc_18C6C
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            loc_18C56:
0001AD94 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AD9A 6E00                       		bgt.s	loc_18C6C
0001AD9C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ADA2 6D00                       		blt.s	loc_18C6C
0001ADA4 117C 0007 001C             		move.b	#7,$1C(a0)
0001ADAA                            
0001ADAA                            loc_18C6C:
0001ADAA 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001ADB0 4EB9 0000 C132             		jsr	AnimateSprite
0001ADB6                            
0001ADB6                            loc_18C78:
0001ADB6 2268 0034                  		movea.l	$34(a0),a1
0001ADBA 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADC0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADC6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADCC 7003                       		moveq	#3,d0
0001ADCE C028 0022                  		and.b	$22(a0),d0
0001ADD2 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADD8 8128 0001                  		or.b	d0,1(a0)
0001ADDC 4EF9 0000 F180             		jmp	DisplaySprite
0001ADE2                            ; ===========================================================================
0001ADE2                            
0001ADE2                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001ADE2 2268 0034                  		movea.l	$34(a0),a1
0001ADE6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ADEC 6600                       		bne.s	loc_18CB8
0001ADEE 4A28 0001                  		tst.b	1(a0)
0001ADF2 6A00 FC04                  		bpl.w	Obj7A_Delete
0001ADF6                            
0001ADF6                            loc_18CB8:
0001ADF6 217C 0001 9F2C 0004        		move.l	#Map_BossItems,4(a0)
0001ADFE 317C 246C 0002             		move.w	#$246C,2(a0)
0001AE04 117C 0003 001A             		move.b	#3,$1A(a0)
0001AE0A 60AA                       		bra.s	loc_18C78
0001AE0C                            ; ===========================================================================
0001AE0C                            ; ---------------------------------------------------------------------------
0001AE0C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AE0C                            ; ---------------------------------------------------------------------------
0001AE0C                            
0001AE0C                            Obj7B:					; XREF: Obj_Index
0001AE0C 7000                       		moveq	#0,d0
0001AE0E 1028 0024                  		move.b	$24(a0),d0
0001AE12 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AE16 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AE1A 3028 0030                  		move.w	$30(a0),d0
0001AE1E 0240 FF80                  		andi.w	#$FF80,d0
0001AE22 3238 F700                  		move.w	($FFFFF700).w,d1
0001AE26 0441 0080                  		subi.w	#$80,d1
0001AE2A 0241 FF80                  		andi.w	#$FF80,d1
0001AE2E 9041                       		sub.w	d1,d0
0001AE30 6B00 FBC6                  		bmi.w	Obj7A_Delete
0001AE34 0C40 0280                  		cmpi.w	#$280,d0
0001AE38 6200 FBBE                  		bhi.w	Obj7A_Delete
0001AE3C 4EF9 0000 F180             		jmp	DisplaySprite
0001AE42                            ; ===========================================================================
0001AE42 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AE44 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AE46 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AE48 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AE4A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AE4C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            Obj7B_Main:				; XREF: Obj7B_Index
0001AE4E 217C 0001 3574 0004        		move.l	#Map_obj5Ea,4(a0)
0001AE56 317C 0518 0002             		move.w	#$518,2(a0)
0001AE5C 117C 0001 001A             		move.b	#1,$1A(a0)
0001AE62 0028 0004 0001             		ori.b	#4,1(a0)
0001AE68 117C 0004 0018             		move.b	#4,$18(a0)
0001AE6E 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AE74 117C 000C 0019             		move.b	#$C,$19(a0)
0001AE7A 2268 003C                  		movea.l	$3C(a0),a1
0001AE7E 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AE84 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AE8A 08E8 0000 0022             		bset	#0,$22(a0)
0001AE90 3028 0008                  		move.w	8(a0),d0
0001AE94 B069 0008                  		cmp.w	8(a1),d0
0001AE98 6E00                       		bgt.s	loc_18D68
0001AE9A 08A8 0000 0022             		bclr	#0,$22(a0)
0001AEA0 117C 0002 003A             		move.b	#2,$3A(a0)
0001AEA6                            
0001AEA6                            loc_18D68:
0001AEA6 5428 0024                  		addq.b	#2,$24(a0)
0001AEAA                            
0001AEAA                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AEAA 4EB9 0000 F146             		jsr	ObjectFall
0001AEB0 2268 003C                  		movea.l	$3C(a0),a1
0001AEB4 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEBA 7000                       		moveq	#0,d0
0001AEBC 1029 001A                  		move.b	$1A(a1),d0
0001AEC0 3228 0008                  		move.w	8(a0),d1
0001AEC4 9268 0030                  		sub.w	$30(a0),d1
0001AEC8 6400                       		bcc.s	loc_18D8E
0001AECA 5440                       		addq.w	#2,d0
0001AECC                            
0001AECC                            loc_18D8E:
0001AECC D040                       		add.w	d0,d0
0001AECE 3228 0034                  		move.w	$34(a0),d1
0001AED2 D272 0000                  		add.w	(a2,d0.w),d1
0001AED6 B268 000C                  		cmp.w	$C(a0),d1
0001AEDA 6E00                       		bgt.s	locret_18DC4
0001AEDC 2268 003C                  		movea.l	$3C(a0),a1
0001AEE0 7202                       		moveq	#2,d1
0001AEE2 0828 0000 0022             		btst	#0,$22(a0)
0001AEE8 6700                       		beq.s	loc_18DAE
0001AEEA 7200                       		moveq	#0,d1
0001AEEC                            
0001AEEC                            loc_18DAE:
0001AEEC 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AEF2 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AEF8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AEFE 6000 0000                  		bra.w	loc_18FA2
0001AF02                            ; ===========================================================================
0001AF02                            
0001AF02                            locret_18DC4:
0001AF02 4E75                       		rts	
0001AF04                            ; ===========================================================================
0001AF04                            
0001AF04                            loc_18DC6:				; XREF: Obj7B_Index
0001AF04 2268 003C                  		movea.l	$3C(a0),a1
0001AF08 7000                       		moveq	#0,d0
0001AF0A 1028 003A                  		move.b	$3A(a0),d0
0001AF0E 9029 003A                  		sub.b	$3A(a1),d0
0001AF12 6700                       		beq.s	loc_18E2A
0001AF14 6400                       		bcc.s	loc_18DDA
0001AF16 4400                       		neg.b	d0
0001AF18                            
0001AF18                            loc_18DDA:
0001AF18 323C F7E8                  		move.w	#-$818,d1
0001AF1C 343C FEEC                  		move.w	#-$114,d2
0001AF20 0C00 0001                  		cmpi.b	#1,d0
0001AF24 6700                       		beq.s	loc_18E00
0001AF26 323C F6A0                  		move.w	#-$960,d1
0001AF2A 343C FF0C                  		move.w	#-$F4,d2
0001AF2E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AF34 6D00                       		blt.s	loc_18E00
0001AF36 323C F5E0                  		move.w	#-$A20,d1
0001AF3A 343C FF80                  		move.w	#-$80,d2
0001AF3E                            
0001AF3E                            loc_18E00:
0001AF3E 3141 0012                  		move.w	d1,$12(a0)
0001AF42 3142 0010                  		move.w	d2,$10(a0)
0001AF46 3028 0008                  		move.w	8(a0),d0
0001AF4A 9068 0030                  		sub.w	$30(a0),d0
0001AF4E 6400                       		bcc.s	loc_18E16
0001AF50 4468 0010                  		neg.w	$10(a0)
0001AF54                            
0001AF54                            loc_18E16:
0001AF54 117C 0001 001A             		move.b	#1,$1A(a0)
0001AF5A 317C 0020 0028             		move.w	#$20,$28(a0)
0001AF60 5428 0024                  		addq.b	#2,$24(a0)
0001AF64 6000 0000                  		bra.w	loc_18EAA
0001AF68                            ; ===========================================================================
0001AF68                            
0001AF68                            loc_18E2A:				; XREF: loc_18DC6
0001AF68 45F9 0000 0000             		lea	(word_19018).l,a2
0001AF6E 7000                       		moveq	#0,d0
0001AF70 1029 001A                  		move.b	$1A(a1),d0
0001AF74 343C 0028                  		move.w	#$28,d2
0001AF78 3228 0008                  		move.w	8(a0),d1
0001AF7C 9268 0030                  		sub.w	$30(a0),d1
0001AF80 6400                       		bcc.s	loc_18E48
0001AF82 4442                       		neg.w	d2
0001AF84 5440                       		addq.w	#2,d0
0001AF86                            
0001AF86                            loc_18E48:
0001AF86 D040                       		add.w	d0,d0
0001AF88 3228 0034                  		move.w	$34(a0),d1
0001AF8C D272 0000                  		add.w	(a2,d0.w),d1
0001AF90 3141 000C                  		move.w	d1,$C(a0)
0001AF94 D468 0030                  		add.w	$30(a0),d2
0001AF98 3142 0008                  		move.w	d2,8(a0)
0001AF9C 4268 000E                  		clr.w	$E(a0)
0001AFA0 4268 000A                  		clr.w	$A(a0)
0001AFA4 5368 0028                  		subq.w	#1,$28(a0)
0001AFA8 6600                       		bne.s	loc_18E7A
0001AFAA 317C 0020 0028             		move.w	#$20,$28(a0)
0001AFB0 117C 0008 0024             		move.b	#8,$24(a0)
0001AFB6 4E75                       		rts	
0001AFB8                            ; ===========================================================================
0001AFB8                            
0001AFB8                            loc_18E7A:
0001AFB8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AFBE 6600                       		bne.s	loc_18E88
0001AFC0 117C 0005 001F             		move.b	#5,$1F(a0)
0001AFC6                            
0001AFC6                            loc_18E88:
0001AFC6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AFCC 6600                       		bne.s	loc_18E96
0001AFCE 117C 0002 001F             		move.b	#2,$1F(a0)
0001AFD4                            
0001AFD4                            loc_18E96:
0001AFD4 5328 001E                  		subq.b	#1,$1E(a0)
0001AFD8 6E00                       		bgt.s	locret_18EA8
0001AFDA 0868 0000 001A             		bchg	#0,$1A(a0)
0001AFE0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AFE6                            
0001AFE6                            locret_18EA8:
0001AFE6 4E75                       		rts	
0001AFE8                            ; ===========================================================================
0001AFE8                            
0001AFE8                            loc_18EAA:				; XREF: Obj7B_Index
0001AFE8 43F8 D040                  		lea	($FFFFD040).w,a1
0001AFEC 707A                       		moveq	#$7A,d0
0001AFEE 7240                       		moveq	#$40,d1
0001AFF0 743E                       		moveq	#$3E,d2
0001AFF2                            
0001AFF2                            loc_18EB4:
0001AFF2 B011                       		cmp.b	(a1),d0
0001AFF4 6700                       		beq.s	loc_18EC0
0001AFF6 D2C1                       		adda.w	d1,a1
0001AFF8 51CA FFF8                  		dbf	d2,loc_18EB4
0001AFFC                            
0001AFFC 6000                       		bra.s	loc_18F38
0001AFFE                            ; ===========================================================================
0001AFFE                            
0001AFFE                            loc_18EC0:
0001AFFE 3029 0008                  		move.w	8(a1),d0
0001B002 3229 000C                  		move.w	$C(a1),d1
0001B006 3428 0008                  		move.w	8(a0),d2
0001B00A 3628 000C                  		move.w	$C(a0),d3
0001B00E 45FA 0000                  		lea	byte_19022(pc),a2
0001B012 47FA 0000                  		lea	byte_19026(pc),a3
0001B016 181A                       		move.b	(a2)+,d4
0001B018 4884                       		ext.w	d4
0001B01A D044                       		add.w	d4,d0
0001B01C 181B                       		move.b	(a3)+,d4
0001B01E 4884                       		ext.w	d4
0001B020 D444                       		add.w	d4,d2
0001B022 B440                       		cmp.w	d0,d2
0001B024 6500                       		bcs.s	loc_18F38
0001B026 181A                       		move.b	(a2)+,d4
0001B028 4884                       		ext.w	d4
0001B02A D044                       		add.w	d4,d0
0001B02C 181B                       		move.b	(a3)+,d4
0001B02E 4884                       		ext.w	d4
0001B030 D444                       		add.w	d4,d2
0001B032 B042                       		cmp.w	d2,d0
0001B034 6500                       		bcs.s	loc_18F38
0001B036 181A                       		move.b	(a2)+,d4
0001B038 4884                       		ext.w	d4
0001B03A D244                       		add.w	d4,d1
0001B03C 181B                       		move.b	(a3)+,d4
0001B03E 4884                       		ext.w	d4
0001B040 D644                       		add.w	d4,d3
0001B042 B641                       		cmp.w	d1,d3
0001B044 6500                       		bcs.s	loc_18F38
0001B046 181A                       		move.b	(a2)+,d4
0001B048 4884                       		ext.w	d4
0001B04A D244                       		add.w	d4,d1
0001B04C 181B                       		move.b	(a3)+,d4
0001B04E 4884                       		ext.w	d4
0001B050 D644                       		add.w	d4,d3
0001B052 B243                       		cmp.w	d3,d1
0001B054 6500                       		bcs.s	loc_18F38
0001B056 5428 0024                  		addq.b	#2,$24(a0)
0001B05A 4268 0028                  		clr.w	$28(a0)
0001B05E 4229 0020                  		clr.b	$20(a1)
0001B062 5329 0021                  		subq.b	#1,$21(a1)
0001B066 6600                       		bne.s	loc_18F38
0001B068 08E9 0007 0022             		bset	#7,$22(a1)
0001B06E 4268 0010                  		clr.w	$10(a0)
0001B072 4268 0012                  		clr.w	$12(a0)
0001B076                            
0001B076                            loc_18F38:
0001B076 4A68 0012                  		tst.w	$12(a0)
0001B07A 6A00                       		bpl.s	loc_18F5C
0001B07C 4EB9 0000 F146             		jsr	ObjectFall
0001B082 3028 0034                  		move.w	$34(a0),d0
0001B086 0440 002F                  		subi.w	#$2F,d0
0001B08A B068 000C                  		cmp.w	$C(a0),d0
0001B08E 6E00                       		bgt.s	loc_18F58
0001B090 4EB9 0000 F146             		jsr	ObjectFall
0001B096                            
0001B096                            loc_18F58:
0001B096 6000 FF20                  		bra.w	loc_18E7A
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            loc_18F5C:
0001B09A 4EB9 0000 F146             		jsr	ObjectFall
0001B0A0 2268 003C                  		movea.l	$3C(a0),a1
0001B0A4 45F9 0000 0000             		lea	(word_19018).l,a2
0001B0AA 7000                       		moveq	#0,d0
0001B0AC 1029 001A                  		move.b	$1A(a1),d0
0001B0B0 3228 0008                  		move.w	8(a0),d1
0001B0B4 9268 0030                  		sub.w	$30(a0),d1
0001B0B8 6400                       		bcc.s	loc_18F7E
0001B0BA 5440                       		addq.w	#2,d0
0001B0BC                            
0001B0BC                            loc_18F7E:
0001B0BC D040                       		add.w	d0,d0
0001B0BE 3228 0034                  		move.w	$34(a0),d1
0001B0C2 D272 0000                  		add.w	(a2,d0.w),d1
0001B0C6 B268 000C                  		cmp.w	$C(a0),d1
0001B0CA 6ECA                       		bgt.s	loc_18F58
0001B0CC 2268 003C                  		movea.l	$3C(a0),a1
0001B0D0 7202                       		moveq	#2,d1
0001B0D2 4A68 0010                  		tst.w	$10(a0)
0001B0D6 6B00                       		bmi.s	loc_18F9C
0001B0D8 7200                       		moveq	#0,d1
0001B0DA                            
0001B0DA                            loc_18F9C:
0001B0DA 317C 0000 0028             		move.w	#0,$28(a0)
0001B0E0                            
0001B0E0                            loc_18FA2:
0001B0E0 1341 003A                  		move.b	d1,$3A(a1)
0001B0E4 1141 003A                  		move.b	d1,$3A(a0)
0001B0E8 B229 001A                  		cmp.b	$1A(a1),d1
0001B0EC 6700                       		beq.s	loc_19008
0001B0EE 08A9 0003 0022             		bclr	#3,$22(a1)
0001B0F4 6700                       		beq.s	loc_19008
0001B0F6 4229 0025                  		clr.b	$25(a1)
0001B0FA 137C 0002 0024             		move.b	#2,$24(a1)
0001B100 45F8 D000                  		lea	($FFFFD000).w,a2
0001B104 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B10A 446A 0012                  		neg.w	$12(a2)
0001B10E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B114 6600                       		bne.s	loc_18FDC
0001B116 E0EA 0012                  		asr	$12(a2)
0001B11A                            
0001B11A                            loc_18FDC:
0001B11A 08EA 0001 0022             		bset	#1,$22(a2)
0001B120 08AA 0003 0022             		bclr	#3,$22(a2)
0001B126 422A 003C                  		clr.b	$3C(a2)
0001B12A 2F08                       		move.l	a0,-(sp)
0001B12C 41D2                       		lea	(a2),a0
0001B12E                            	;	jsr	Obj01_ChkRoll
0001B12E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001B134 205F                       		movea.l	(sp)+,a0
0001B136 157C 0002 0024             		move.b	#2,$24(a2)
0001B13C 303C 00CC                  		move.w	#$CC,d0
0001B140 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B146                            
0001B146                            loc_19008:
0001B146 4268 0010                  		clr.w	$10(a0)
0001B14A 4268 0012                  		clr.w	$12(a0)
0001B14E 5428 0024                  		addq.b	#2,$24(a0)
0001B152 6000 FE64                  		bra.w	loc_18E7A
0001B156                            ; ===========================================================================
0001B156 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B160                            		even
0001B160 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B164                            		even
0001B164 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B168                            		even
0001B168                            ; ===========================================================================
0001B168                            
0001B168                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B168 10BC 003F                  		move.b	#$3F,(a0)
0001B16C 4228 0024                  		clr.b	$24(a0)
0001B170 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B176 6700                       		beq.s	Obj7B_MakeFrag
0001B178 4E75                       		rts	
0001B17A                            ; ===========================================================================
0001B17A                            
0001B17A                            Obj7B_MakeFrag:
0001B17A 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B180 7203                       		moveq	#3,d1
0001B182 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B186                            
0001B186                            Obj7B_Loop:
0001B186 4EB9 0000 F614             		jsr	SingleObjLoad
0001B18C 6600                       		bne.s	loc_1909A
0001B18E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B192 137C 000A 0024             		move.b	#$A,$24(a1)
0001B198 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B1A0 137C 0003 0018             		move.b	#3,$18(a1)
0001B1A6 337C 0518 0002             		move.w	#$518,2(a1)
0001B1AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1B8 335A 0010                  		move.w	(a2)+,$10(a1)
0001B1BC 335A 0012                  		move.w	(a2)+,$12(a1)
0001B1C0 137C 0098 0020             		move.b	#$98,$20(a1)
0001B1C6 0029 0004 0001             		ori.b	#4,1(a1)
0001B1CC 08E9 0007 0001             		bset	#7,1(a1)
0001B1D2 137C 000C 0019             		move.b	#$C,$19(a1)
0001B1D8                            
0001B1D8                            loc_1909A:
0001B1D8 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B1DC                            
0001B1DC 4E75                       		rts	
0001B1DE                            ; ===========================================================================
0001B1DE FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B1E2 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B1E6 0100 FCC0                  		dc.w $100, $FCC0
0001B1EA 00A0 FDC0                  		dc.w $A0, $FDC0
0001B1EE                            ; ===========================================================================
0001B1EE                            
0001B1EE                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B1EE 4EB9 0000 F166             		jsr	SpeedToPos
0001B1F4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B1FA 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B200 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B206 7004                       		moveq	#4,d0
0001B208 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B20C E448                       		lsr.w	#2,d0
0001B20E 1140 001A                  		move.b	d0,$1A(a0)
0001B212 4A28 0001                  		tst.b	1(a0)
0001B216 6A00 F7E0                  		bpl.w	Obj7A_Delete
0001B21A 4E75                       		rts	
0001B21C                            ; ===========================================================================
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            Map_obj7B:
0001B21C                            	include "_maps\obj7B.asm"
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C 0000                       		dc.w byte_190E2-Map_obj7B
0001B21E 0000                       		dc.w byte_190E8-Map_obj7B
0001B220 01                         byte_190E2:	dc.b 1
0001B221 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B226 01                         byte_190E8:	dc.b 1
0001B227 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B22C                            		even
0001B22C                            		even
0001B22C                            
0001B22C                            ; ===========================================================================
0001B22C                            ; ---------------------------------------------------------------------------
0001B22C                            ; Object 75 - Eggman (SYZ)
0001B22C                            ; ---------------------------------------------------------------------------
0001B22C                            
0001B22C                            Obj75:					; XREF: Obj_Index
0001B22C 7000                       		moveq	#0,d0
0001B22E 1028 0024                  		move.b	$24(a0),d0
0001B232 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B236 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B23A                            ; ===========================================================================
0001B23A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B23C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B23E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B240 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B242 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B244                            
0001B244 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B247 0401 05                    		dc.b 4,	1, 5
0001B24A 0607 05                    		dc.b 6,	7, 5
0001B24D 0800 05                    		dc.b 8,	0, 5
0001B250                            ; ===========================================================================
0001B250                            
0001B250                            Obj75_Main:				; XREF: Obj75_Index
0001B250 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B256 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B25C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B262 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B268 117C 000F 0020             		move.b	#$F,$20(a0)
0001B26E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B274 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B278 2248                       		movea.l	a0,a1
0001B27A 7203                       		moveq	#3,d1
0001B27C 6000                       		bra.s	Obj75_LoadBoss
0001B27E                            ; ===========================================================================
0001B27E                            
0001B27E                            Obj75_Loop:
0001B27E 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001B284 6600                       		bne.s	Obj75_ShipMain
0001B286 12BC 0075                  		move.b	#$75,(a1)
0001B28A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B290 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B296                            
0001B296                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B296 08A8 0000 0022             		bclr	#0,$22(a0)
0001B29C 4229 0025                  		clr.b	$25(a1)
0001B2A0 135A 0024                  		move.b	(a2)+,$24(a1)
0001B2A4 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B2A8 135A 0018                  		move.b	(a2)+,$18(a1)
0001B2AC 237C 0001 9E64 0004        		move.l	#Map_Eggman,4(a1)
0001B2B4 337C 0400 0002             		move.w	#$400,2(a1)
0001B2BA 137C 0004 0001             		move.b	#4,1(a1)
0001B2C0 137C 0020 0019             		move.b	#$20,$19(a1)
0001B2C6 2348 0034                  		move.l	a0,$34(a1)
0001B2CA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B2CE                            
0001B2CE                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B2CE 7000                       		moveq	#0,d0
0001B2D0 1028 0025                  		move.b	$25(a0),d0
0001B2D4 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B2D8 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B2DC 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001B2E2 4EB9 0000 C132             		jsr	AnimateSprite
0001B2E8 7003                       		moveq	#3,d0
0001B2EA C028 0022                  		and.b	$22(a0),d0
0001B2EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B2F4 8128 0001                  		or.b	d0,1(a0)
0001B2F8 4EF9 0000 F180             		jmp	DisplaySprite
0001B2FE                            ; ===========================================================================
0001B2FE 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B302 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B306 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B30A                            ; ===========================================================================
0001B30A                            
0001B30A                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B30A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B310 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B316 6400                       		bcc.s	loc_191DE
0001B318 5428 0025                  		addq.b	#2,$25(a0)
0001B31C                            
0001B31C                            loc_191DE:
0001B31C 1028 003F                  		move.b	$3F(a0),d0
0001B320 5428 003F                  		addq.b	#2,$3F(a0)
0001B324 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001B32A E440                       		asr.w	#2,d0
0001B32C 3140 0012                  		move.w	d0,$12(a0)
0001B330                            
0001B330                            loc_191F2:
0001B330 6100 E676                  		bsr.w	BossMove
0001B334 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B33A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B340                            
0001B340                            loc_19202:
0001B340 3028 0008                  		move.w	8(a0),d0
0001B344 0440 2C00                  		subi.w	#$2C00,d0
0001B348 EA48                       		lsr.w	#5,d0
0001B34A 1140 0034                  		move.b	d0,$34(a0)
0001B34E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B354 6400                       		bcc.s	locret_19256
0001B356 4A28 0022                  		tst.b	$22(a0)
0001B35A 6B00                       		bmi.s	loc_19258
0001B35C 4A28 0020                  		tst.b	$20(a0)
0001B360 6600                       		bne.s	locret_19256
0001B362 4A28 003E                  		tst.b	$3E(a0)
0001B366 6600                       		bne.s	loc_1923A
0001B368 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B36E 303C 00AC                  		move.w	#$AC,d0
0001B372 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B378                            
0001B378                            loc_1923A:
0001B378 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B37C 7000                       		moveq	#0,d0
0001B37E 4A51                       		tst.w	(a1)
0001B380 6600                       		bne.s	loc_19248
0001B382 303C 0EEE                  		move.w	#$EEE,d0
0001B386                            
0001B386                            loc_19248:
0001B386 3280                       		move.w	d0,(a1)
0001B388 5328 003E                  		subq.b	#1,$3E(a0)
0001B38C 6600                       		bne.s	locret_19256
0001B38E 117C 000F 0020             		move.b	#$F,$20(a0)
0001B394                            
0001B394                            locret_19256:
0001B394 4E75                       		rts	
0001B396                            ; ===========================================================================
0001B396                            
0001B396                            loc_19258:				; XREF: loc_19202
0001B396 7064                       		moveq	#100,d0
0001B398 6100 0000                  		bsr.w	AddPoints
0001B39C 117C 0006 0025             		move.b	#6,$25(a0)
0001B3A2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B3A8 4268 0010                  		clr.w	$10(a0)
0001B3AC 4E75                       		rts	
0001B3AE                            ; ===========================================================================
0001B3AE                            
0001B3AE                            loc_19270:				; XREF: Obj75_ShipIndex
0001B3AE 3028 0030                  		move.w	$30(a0),d0
0001B3B2 317C 0140 0010             		move.w	#$140,$10(a0)
0001B3B8 0828 0000 0022             		btst	#0,$22(a0)
0001B3BE 6600                       		bne.s	loc_1928E
0001B3C0 4468 0010                  		neg.w	$10(a0)
0001B3C4 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B3C8 6E00                       		bgt.s	loc_1929E
0001B3CA 6000                       		bra.s	loc_19294
0001B3CC                            ; ===========================================================================
0001B3CC                            
0001B3CC                            loc_1928E:
0001B3CC 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B3D0 6D00                       		blt.s	loc_1929E
0001B3D2                            
0001B3D2                            loc_19294:
0001B3D2 0868 0000 0022             		bchg	#0,$22(a0)
0001B3D8 4228 003D                  		clr.b	$3D(a0)
0001B3DC                            
0001B3DC                            loc_1929E:
0001B3DC 0440 2C10                  		subi.w	#$2C10,d0
0001B3E0 0240 001F                  		andi.w	#$1F,d0
0001B3E4 0440 001F                  		subi.w	#$1F,d0
0001B3E8 6A00                       		bpl.s	loc_192AE
0001B3EA 4440                       		neg.w	d0
0001B3EC                            
0001B3EC                            loc_192AE:
0001B3EC 5340                       		subq.w	#1,d0
0001B3EE 6E00                       		bgt.s	loc_192E8
0001B3F0 4A28 003D                  		tst.b	$3D(a0)
0001B3F4 6600                       		bne.s	loc_192E8
0001B3F6 3238 D008                  		move.w	($FFFFD008).w,d1
0001B3FA 0441 2C00                  		subi.w	#$2C00,d1
0001B3FE EA41                       		asr.w	#5,d1
0001B400 B228 0034                  		cmp.b	$34(a0),d1
0001B404 6600                       		bne.s	loc_192E8
0001B406 7000                       		moveq	#0,d0
0001B408 1028 0034                  		move.b	$34(a0),d0
0001B40C EB40                       		asl.w	#5,d0
0001B40E 0640 2C10                  		addi.w	#$2C10,d0
0001B412 3140 0030                  		move.w	d0,$30(a0)
0001B416 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B41A 5428 0025                  		addq.b	#2,$25(a0)
0001B41E 4268 0028                  		clr.w	$28(a0)
0001B422 4268 0010                  		clr.w	$10(a0)
0001B426                            
0001B426                            loc_192E8:
0001B426 6000 FEF4                  		bra.w	loc_191DE
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B42A 7000                       		moveq	#0,d0
0001B42C 1028 0028                  		move.b	$28(a0),d0
0001B430 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B434 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B438                            ; ===========================================================================
0001B438 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B43A 0000                       		dc.w loc_19348-off_192FA
0001B43C 0000                       		dc.w loc_1938E-off_192FA
0001B43E 0000                       		dc.w loc_193D0-off_192FA
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_19302:				; XREF: off_192FA
0001B440 317C 0180 0012             		move.w	#$180,$12(a0)
0001B446 3028 0038                  		move.w	$38(a0),d0
0001B44A 0C40 0556                  		cmpi.w	#$556,d0
0001B44E 6500                       		bcs.s	loc_19344
0001B450 317C 0556 0038             		move.w	#$556,$38(a0)
0001B456 4268 003C                  		clr.w	$3C(a0)
0001B45A 70FF                       		moveq	#-1,d0
0001B45C 3028 0036                  		move.w	$36(a0),d0
0001B460 6700                       		beq.s	loc_1933C
0001B462 2240                       		movea.l	d0,a1
0001B464 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B46A 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B470 2348 0034                  		move.l	a0,$34(a1)
0001B474 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B47A                            
0001B47A                            loc_1933C:
0001B47A 4268 0012                  		clr.w	$12(a0)
0001B47E 5428 0028                  		addq.b	#2,$28(a0)
0001B482                            
0001B482                            loc_19344:
0001B482 6000 FEAC                  		bra.w	loc_191F2
0001B486                            ; ===========================================================================
0001B486                            
0001B486                            loc_19348:				; XREF: off_192FA
0001B486 5368 003C                  		subq.w	#1,$3C(a0)
0001B48A 6A00                       		bpl.s	loc_19366
0001B48C 5428 0028                  		addq.b	#2,$28(a0)
0001B490 317C F800 0012             		move.w	#-$800,$12(a0)
0001B496 4A68 0036                  		tst.w	$36(a0)
0001B49A 6600                       		bne.s	loc_19362
0001B49C E0E8 0012                  		asr	$12(a0)
0001B4A0                            
0001B4A0                            loc_19362:
0001B4A0 7000                       		moveq	#0,d0
0001B4A2 6000                       		bra.s	loc_1937C
0001B4A4                            ; ===========================================================================
0001B4A4                            
0001B4A4                            loc_19366:
0001B4A4 7000                       		moveq	#0,d0
0001B4A6 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B4AC 6E00                       		bgt.s	loc_1937C
0001B4AE 7002                       		moveq	#2,d0
0001B4B0 0828 0001 003D             		btst	#1,$3D(a0)
0001B4B6 6700                       		beq.s	loc_1937C
0001B4B8 4440                       		neg.w	d0
0001B4BA                            
0001B4BA                            loc_1937C:
0001B4BA D068 0038                  		add.w	$38(a0),d0
0001B4BE 3140 000C                  		move.w	d0,$C(a0)
0001B4C2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B4C8 6000 FE76                  		bra.w	loc_19202
0001B4CC                            ; ===========================================================================
0001B4CC                            
0001B4CC                            loc_1938E:				; XREF: off_192FA
0001B4CC 303C 04DA                  		move.w	#$4DA,d0
0001B4D0 4A68 0036                  		tst.w	$36(a0)
0001B4D4 6700                       		beq.s	loc_1939C
0001B4D6 0440 0018                  		subi.w	#$18,d0
0001B4DA                            
0001B4DA                            loc_1939C:
0001B4DA B068 0038                  		cmp.w	$38(a0),d0
0001B4DE 6D00                       		blt.s	loc_193BE
0001B4E0 317C 0008 003C             		move.w	#8,$3C(a0)
0001B4E6 4A68 0036                  		tst.w	$36(a0)
0001B4EA 6700                       		beq.s	loc_193B4
0001B4EC 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B4F2                            
0001B4F2                            loc_193B4:
0001B4F2 5428 0028                  		addq.b	#2,$28(a0)
0001B4F6 4268 0012                  		clr.w	$12(a0)
0001B4FA 6000                       		bra.s	loc_193CC
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            loc_193BE:
0001B4FC 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B502 6C00                       		bge.s	loc_193CC
0001B504 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B50A                            
0001B50A                            loc_193CC:
0001B50A 6000 FE24                  		bra.w	loc_191F2
0001B50E                            ; ===========================================================================
0001B50E                            
0001B50E                            loc_193D0:				; XREF: off_192FA
0001B50E 5368 003C                  		subq.w	#1,$3C(a0)
0001B512 6E00                       		bgt.s	loc_19406
0001B514 6B00                       		bmi.s	loc_193EE
0001B516 70FF                       		moveq	#-1,d0
0001B518 3028 0036                  		move.w	$36(a0),d0
0001B51C 6700                       		beq.s	loc_193E8
0001B51E 2240                       		movea.l	d0,a1
0001B520 137C 000A 0029             		move.b	#$A,$29(a1)
0001B526                            
0001B526                            loc_193E8:
0001B526 4268 0036                  		clr.w	$36(a0)
0001B52A 6000                       		bra.s	loc_19406
0001B52C                            ; ===========================================================================
0001B52C                            
0001B52C                            loc_193EE:
0001B52C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B532 6600                       		bne.s	loc_19406
0001B534 4228 0029                  		clr.b	$29(a0)
0001B538 5528 0025                  		subq.b	#2,$25(a0)
0001B53C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B542 6000                       		bra.s	loc_19446
0001B544                            ; ===========================================================================
0001B544                            
0001B544                            loc_19406:
0001B544 7001                       		moveq	#1,d0
0001B546 4A68 0036                  		tst.w	$36(a0)
0001B54A 6700                       		beq.s	loc_19410
0001B54C 7002                       		moveq	#2,d0
0001B54E                            
0001B54E                            loc_19410:
0001B54E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B554 6700                       		beq.s	loc_19424
0001B556 6D00                       		blt.s	loc_1941C
0001B558 4440                       		neg.w	d0
0001B55A                            
0001B55A                            loc_1941C:
0001B55A 4A68 0036                  		tst.w	$36(a0)
0001B55E D168 0038                  		add.w	d0,$38(a0)
0001B562                            
0001B562                            loc_19424:
0001B562 7000                       		moveq	#0,d0
0001B564 4A68 0036                  		tst.w	$36(a0)
0001B568 6700                       		beq.s	loc_19438
0001B56A 7002                       		moveq	#2,d0
0001B56C 0828 0000 003D             		btst	#0,$3D(a0)
0001B572 6700                       		beq.s	loc_19438
0001B574 4440                       		neg.w	d0
0001B576                            
0001B576                            loc_19438:
0001B576 D068 0038                  		add.w	$38(a0),d0
0001B57A 3140 000C                  		move.w	d0,$C(a0)
0001B57E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B584                            
0001B584                            loc_19446:
0001B584 6000 FDBA                  		bra.w	loc_19202
0001B588                            
0001B588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B588                            
0001B588                            
0001B588                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B588 4268 0036                  		clr.w	$36(a0)
0001B58C 43F8 D040                  		lea	($FFFFD040).w,a1
0001B590 703E                       		moveq	#$3E,d0
0001B592 7276                       		moveq	#$76,d1
0001B594 1428 0034                  		move.b	$34(a0),d2
0001B598                            
0001B598                            Obj75_FindLoop:
0001B598 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B59A 6600                       		bne.s	loc_1946A	; if not, branch
0001B59C B429 0028                  		cmp.b	$28(a1),d2
0001B5A0 6600                       		bne.s	loc_1946A
0001B5A2 3149 0036                  		move.w	a1,$36(a0)
0001B5A6 6000                       		bra.s	locret_19472
0001B5A8                            ; ===========================================================================
0001B5A8                            
0001B5A8                            loc_1946A:
0001B5A8 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B5AC 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B5B0                            
0001B5B0                            locret_19472:
0001B5B0 4E75                       		rts	
0001B5B2                            ; End of function Obj75_FindBlocks
0001B5B2                            
0001B5B2                            ; ===========================================================================
0001B5B2                            
0001B5B2                            loc_19474:				; XREF: Obj75_ShipIndex
0001B5B2 5368 003C                  		subq.w	#1,$3C(a0)
0001B5B6 6B00                       		bmi.s	loc_1947E
0001B5B8 6000 E3AC                  		bra.w	BossDefeated
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_1947E:
0001B5BC 5428 0025                  		addq.b	#2,$25(a0)
0001B5C0 4268 0012                  		clr.w	$12(a0)
0001B5C4 08E8 0000 0022             		bset	#0,$22(a0)
0001B5CA 08A8 0007 0022             		bclr	#7,$22(a0)
0001B5D0 4268 0010                  		clr.w	$10(a0)
0001B5D4 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B5DA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B5DE 6600                       		bne.s	loc_194A8
0001B5E0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B5E6                            
0001B5E6                            loc_194A8:
0001B5E6 6000 FD58                  		bra.w	loc_19202
0001B5EA                            ; ===========================================================================
0001B5EA                            
0001B5EA                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B5EA 5268 003C                  		addq.w	#1,$3C(a0)
0001B5EE 6700                       		beq.s	loc_194BC
0001B5F0 6A00                       		bpl.s	loc_194C2
0001B5F2 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B5F8 6000                       		bra.s	loc_194EE
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            loc_194BC:
0001B5FA 4268 0012                  		clr.w	$12(a0)
0001B5FE 6000                       		bra.s	loc_194EE
0001B600                            ; ===========================================================================
0001B600                            
0001B600                            loc_194C2:
0001B600 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B606 6500                       		bcs.s	loc_194DA
0001B608 6700                       		beq.s	loc_194E0
0001B60A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B610 6500                       		bcs.s	loc_194EE
0001B612 5428 0025                  		addq.b	#2,$25(a0)
0001B616 6000                       		bra.s	loc_194EE
0001B618                            ; ===========================================================================
0001B618                            
0001B618                            loc_194DA:
0001B618 5168 0012                  		subq.w	#8,$12(a0)
0001B61C 6000                       		bra.s	loc_194EE
0001B61E                            ; ===========================================================================
0001B61E                            
0001B61E                            loc_194E0:
0001B61E 4268 0012                  		clr.w	$12(a0)
0001B622 6100 E5BC                  		bsr.w	BossEnd
0001B626                            
0001B626                            loc_194EE:
0001B626 6000 FD08                  		bra.w	loc_191F2
0001B62A                            ; ===========================================================================
0001B62A                            
0001B62A                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B62A 317C 0400 0010             		move.w	#$400,$10(a0)
0001B630 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B636 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B63C 6400                       		bcc.s	loc_1950C
0001B63E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B642 6000                       		bra.s	loc_19512
0001B644                            ; ===========================================================================
0001B644                            
0001B644                            loc_1950C:
0001B644 4A28 0001                  		tst.b	1(a0)
0001B648 6A00                       		bpl.s	Obj75_ShipDelete
0001B64A                            
0001B64A                            loc_19512:
0001B64A 6100 E35C                  		bsr.w	BossMove
0001B64E 6000 FCCC                  		bra.w	loc_191DE
0001B652                            ; ===========================================================================
0001B652                            
0001B652                            Obj75_ShipDelete:
0001B652 4EF9 0000 F1BC             		jmp	DeleteObject
0001B658                            ; ===========================================================================
0001B658                            
0001B658                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B658 7201                       		moveq	#1,d1
0001B65A 2268 0034                  		movea.l	$34(a0),a1
0001B65E 7000                       		moveq	#0,d0
0001B660 1029 0025                  		move.b	$25(a1),d0
0001B664 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B668 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B66C 1141 001C                  		move.b	d1,$1C(a0)
0001B670 1010                       		move.b	(a0),d0
0001B672 B011                       		cmp.b	(a1),d0
0001B674 6600                       		bne.s	Obj75_FaceDelete
0001B676 6000                       		bra.s	loc_195BE
0001B678                            ; ===========================================================================
0001B678                            
0001B678                            Obj75_FaceDelete:
0001B678 4EF9 0000 F1BC             		jmp	DeleteObject
0001B67E                            ; ===========================================================================
0001B67E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B682 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B686 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B68A                            ; ===========================================================================
0001B68A                            
0001B68A                            loc_19552:				; XREF: off_19546
0001B68A 720A                       		moveq	#$A,d1
0001B68C 4E75                       		rts	
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            loc_19556:				; XREF: off_19546
0001B68E 7206                       		moveq	#6,d1
0001B690 4E75                       		rts	
0001B692                            ; ===========================================================================
0001B692                            
0001B692                            loc_1955A:				; XREF: off_19546
0001B692 7000                       		moveq	#0,d0
0001B694 1029 0028                  		move.b	$28(a1),d0
0001B698 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B69C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B6A0                            ; ===========================================================================
0001B6A0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B6A4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B6A8                            ; ===========================================================================
0001B6A8                            
0001B6A8                            loc_19570:				; XREF: off_19568
0001B6A8 6000                       		bra.s	loc_19574
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            loc_19572:				; XREF: off_19568
0001B6AA 7206                       		moveq	#6,d1
0001B6AC                            
0001B6AC                            loc_19574:				; XREF: off_19546
0001B6AC 4A29 0020                  		tst.b	$20(a1)
0001B6B0 6600                       		bne.s	loc_1957E
0001B6B2 7205                       		moveq	#5,d1
0001B6B4 4E75                       		rts	
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            loc_1957E:
0001B6B6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B6BC 6500                       		bcs.s	locret_19588
0001B6BE 7204                       		moveq	#4,d1
0001B6C0                            
0001B6C0                            locret_19588:
0001B6C0 4E75                       		rts	
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B6C2 117C 0007 001C             		move.b	#7,$1C(a0)
0001B6C8 2268 0034                  		movea.l	$34(a0),a1
0001B6CC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B6D2 6600                       		bne.s	loc_195AA
0001B6D4 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B6DA 4A28 0001                  		tst.b	1(a0)
0001B6DE 6A00                       		bpl.s	Obj75_FlameDelete
0001B6E0 6000                       		bra.s	loc_195B6
0001B6E2                            ; ===========================================================================
0001B6E2                            
0001B6E2                            loc_195AA:
0001B6E2 4A69 0010                  		tst.w	$10(a1)
0001B6E6 6700                       		beq.s	loc_195B6
0001B6E8 117C 0008 001C             		move.b	#8,$1C(a0)
0001B6EE                            
0001B6EE                            loc_195B6:
0001B6EE 6000                       		bra.s	loc_195BE
0001B6F0                            ; ===========================================================================
0001B6F0                            
0001B6F0                            Obj75_FlameDelete:
0001B6F0 4EF9 0000 F1BC             		jmp	DeleteObject
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            loc_195BE:
0001B6F6 43F9 0001 9E14             		lea	(Ani_Eggman).l,a1
0001B6FC 4EB9 0000 C132             		jsr	AnimateSprite
0001B702 2268 0034                  		movea.l	$34(a0),a1
0001B706 3169 0008 0008             		move.w	8(a1),8(a0)
0001B70C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B712                            
0001B712                            loc_195DA:
0001B712 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B718 7003                       		moveq	#3,d0
0001B71A C028 0022                  		and.b	$22(a0),d0
0001B71E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B724 8128 0001                  		or.b	d0,1(a0)
0001B728 4EF9 0000 F180             		jmp	DisplaySprite
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B72E 217C 0001 9F2C 0004        		move.l	#Map_BossItems,4(a0)
0001B736 317C 246C 0002             		move.w	#$246C,2(a0)
0001B73C 117C 0005 001A             		move.b	#5,$1A(a0)
0001B742 2268 0034                  		movea.l	$34(a0),a1
0001B746 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B74C 6600                       		bne.s	loc_1961C
0001B74E 4A28 0001                  		tst.b	1(a0)
0001B752 6A00                       		bpl.s	Obj75_SpikeDelete
0001B754                            
0001B754                            loc_1961C:
0001B754 3169 0008 0008             		move.w	8(a1),8(a0)
0001B75A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B760 3028 003C                  		move.w	$3C(a0),d0
0001B764 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B76A 6600                       		bne.s	loc_19652
0001B76C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B772 6700                       		beq.s	loc_1964C
0001B774 4A29 0028                  		tst.b	$28(a1)
0001B778 6600                       		bne.s	loc_19658
0001B77A 0C40 0094                  		cmpi.w	#$94,d0
0001B77E 6C00                       		bge.s	loc_19658
0001B780 5E40                       		addq.w	#7,d0
0001B782 6000                       		bra.s	loc_19658
0001B784                            ; ===========================================================================
0001B784                            
0001B784                            loc_1964C:
0001B784 4A69 003C                  		tst.w	$3C(a1)
0001B788 6A00                       		bpl.s	loc_19658
0001B78A                            
0001B78A                            loc_19652:
0001B78A 4A40                       		tst.w	d0
0001B78C 6F00                       		ble.s	loc_19658
0001B78E 5B40                       		subq.w	#5,d0
0001B790                            
0001B790                            loc_19658:
0001B790 3140 003C                  		move.w	d0,$3C(a0)
0001B794 E440                       		asr.w	#2,d0
0001B796 D168 000C                  		add.w	d0,$C(a0)
0001B79A 117C 0008 0019             		move.b	#8,$19(a0)
0001B7A0 117C 000C 0016             		move.b	#$C,$16(a0)
0001B7A6 4228 0020                  		clr.b	$20(a0)
0001B7AA 2268 0034                  		movea.l	$34(a0),a1
0001B7AE 4A29 0020                  		tst.b	$20(a1)
0001B7B2 6700                       		beq.s	loc_19688
0001B7B4 4A29 0029                  		tst.b	$29(a1)
0001B7B8 6600                       		bne.s	loc_19688
0001B7BA 117C 0084 0020             		move.b	#$84,$20(a0)
0001B7C0                            
0001B7C0                            loc_19688:
0001B7C0 6000 FF50                  		bra.w	loc_195DA
0001B7C4                            ; ===========================================================================
0001B7C4                            
0001B7C4                            Obj75_SpikeDelete:
0001B7C4 4EF9 0000 F1BC             		jmp	DeleteObject
0001B7CA                            ; ===========================================================================
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA                            
0001B7CA                            Obj76:					; XREF: Obj_Index
0001B7CA 7000                       		moveq	#0,d0
0001B7CC 1028 0024                  		move.b	$24(a0),d0
0001B7D0 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B7D4 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B7D8                            ; ===========================================================================
0001B7D8 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B7DA 0000                       		dc.w Obj76_Action-Obj76_Index
0001B7DC 0000                       		dc.w loc_19762-Obj76_Index
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            Obj76_Main:				; XREF: Obj76_Index
0001B7DE 7800                       		moveq	#0,d4
0001B7E0 3A3C 2C10                  		move.w	#$2C10,d5
0001B7E4 7C09                       		moveq	#9,d6
0001B7E6 43D0                       		lea	(a0),a1
0001B7E8 6000                       		bra.s	Obj76_MakeBlock
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            Obj76_Loop:
0001B7EA 4EB9 0000 F614             		jsr	SingleObjLoad
0001B7F0 6600                       		bne.s	Obj76_ExitLoop
0001B7F2                            
0001B7F2                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B7F2 12BC 0076                  		move.b	#$76,(a1)
0001B7F6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B7FE 337C 4000 0002             		move.w	#$4000,2(a1)
0001B804 137C 0004 0001             		move.b	#4,1(a1)
0001B80A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B810 137C 0010 0016             		move.b	#$10,$16(a1)
0001B816 137C 0003 0018             		move.b	#3,$18(a1)
0001B81C 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B820 337C 0582 000C             		move.w	#$582,$C(a1)
0001B826 3344 0028                  		move.w	d4,$28(a1)
0001B82A 0644 0101                  		addi.w	#$101,d4
0001B82E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B832 5429 0024                  		addq.b	#2,$24(a1)
0001B836 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B83A                            
0001B83A                            Obj76_ExitLoop:
0001B83A 4E75                       		rts	
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            Obj76_Action:				; XREF: Obj76_Index
0001B83C 1028 0029                  		move.b	$29(a0),d0
0001B840 B028 0028                  		cmp.b	$28(a0),d0
0001B844 6700                       		beq.s	Obj76_Solid
0001B846 4A00                       		tst.b	d0
0001B848 6B00                       		bmi.s	loc_19718
0001B84A                            
0001B84A                            loc_19712:
0001B84A 6100 0000                  		bsr.w	Obj76_Break
0001B84E 6000                       		bra.s	Obj76_Display
0001B850                            ; ===========================================================================
0001B850                            
0001B850                            loc_19718:
0001B850 2268 0034                  		movea.l	$34(a0),a1
0001B854 4A29 0021                  		tst.b	$21(a1)
0001B858 67F0                       		beq.s	loc_19712
0001B85A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B860 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B866 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B86C B2C8                       		cmpa.w	a0,a1
0001B86E 6500                       		bcs.s	Obj76_Display
0001B870 3029 0012                  		move.w	$12(a1),d0
0001B874 48C0                       		ext.l	d0
0001B876 E080                       		asr.l	#8,d0
0001B878 D168 000C                  		add.w	d0,$C(a0)
0001B87C 6000                       		bra.s	Obj76_Display
0001B87E                            ; ===========================================================================
0001B87E                            
0001B87E                            Obj76_Solid:				; XREF: Obj76_Action
0001B87E 323C 001B                  		move.w	#$1B,d1
0001B882 343C 0010                  		move.w	#$10,d2
0001B886 363C 0011                  		move.w	#$11,d3
0001B88A 3828 0008                  		move.w	8(a0),d4
0001B88E 4EB9 0001 1562             		jsr	SolidObject
0001B894                            
0001B894                            Obj76_Display:				; XREF: Obj76_Action
0001B894 4EF9 0000 F180             		jmp	DisplaySprite
0001B89A                            ; ===========================================================================
0001B89A                            
0001B89A                            loc_19762:				; XREF: Obj76_Index
0001B89A 4A28 0001                  		tst.b	1(a0)
0001B89E 6A00                       		bpl.s	Obj76_Delete
0001B8A0 4EB9 0000 F146             		jsr	ObjectFall
0001B8A6 4EF9 0000 F180             		jmp	DisplaySprite
0001B8AC                            ; ===========================================================================
0001B8AC                            
0001B8AC                            Obj76_Delete:
0001B8AC 4EF9 0000 F1BC             		jmp	DeleteObject
0001B8B2                            
0001B8B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8B2                            
0001B8B2                            
0001B8B2                            Obj76_Break:				; XREF: Obj76_Action
0001B8B2 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B8B6 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B8BA 7801                       		moveq	#1,d4
0001B8BC 7203                       		moveq	#3,d1
0001B8BE 7438                       		moveq	#$38,d2
0001B8C0 5428 0024                  		addq.b	#2,$24(a0)
0001B8C4 117C 0008 0019             		move.b	#8,$19(a0)
0001B8CA 117C 0008 0016             		move.b	#8,$16(a0)
0001B8D0 43D0                       		lea	(a0),a1
0001B8D2 6000                       		bra.s	Obj76_MakeFrag
0001B8D4                            ; ===========================================================================
0001B8D4                            
0001B8D4                            Obj76_LoopFrag:
0001B8D4 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001B8DA 6600                       		bne.s	loc_197D4
0001B8DC                            
0001B8DC                            Obj76_MakeFrag:
0001B8DC 45D0                       		lea	(a0),a2
0001B8DE 47D1                       		lea	(a1),a3
0001B8E0 7603                       		moveq	#3,d3
0001B8E2                            
0001B8E2                            loc_197AA:
0001B8E2 26DA                       		move.l	(a2)+,(a3)+
0001B8E4 26DA                       		move.l	(a2)+,(a3)+
0001B8E6 26DA                       		move.l	(a2)+,(a3)+
0001B8E8 26DA                       		move.l	(a2)+,(a3)+
0001B8EA 51CB FFF6                  		dbf	d3,loc_197AA
0001B8EE                            
0001B8EE 335C 0010                  		move.w	(a4)+,$10(a1)
0001B8F2 335C 0012                  		move.w	(a4)+,$12(a1)
0001B8F6 361D                       		move.w	(a5)+,d3
0001B8F8 D769 0008                  		add.w	d3,8(a1)
0001B8FC 361D                       		move.w	(a5)+,d3
0001B8FE D769 000C                  		add.w	d3,$C(a1)
0001B902 1344 001A                  		move.b	d4,$1A(a1)
0001B906 5244                       		addq.w	#1,d4
0001B908 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B90C                            
0001B90C                            loc_197D4:
0001B90C 303C 00CB                  		move.w	#$CB,d0
0001B910 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B916                            ; End of function Obj76_Break
0001B916                            
0001B916                            ; ===========================================================================
0001B916 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B91A 0180 FE00                  		dc.w $180, $FE00
0001B91E FF00 FF00                  		dc.w $FF00, $FF00
0001B922 0100 FF00                  		dc.w $100, $FF00
0001B926 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B92A 0010 0000                  		dc.w $10, 0
0001B92E 0000 0010                  		dc.w 0,	$10
0001B932 0010 0010                  		dc.w $10, $10
0001B936                            ; ---------------------------------------------------------------------------
0001B936                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B936                            ; ---------------------------------------------------------------------------
0001B936                            Map_obj76:
0001B936                            	include "_maps\obj76.asm"
0001B936                            ; ---------------------------------------------------------------------------
0001B936                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B936                            ; ---------------------------------------------------------------------------
0001B936 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B93A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B93E 0000                       		dc.w byte_19826-Map_obj76
0001B940 02                         byte_19808:	dc.b 2
0001B941 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B946 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B94B 00                         		dc.b 0
0001B94C 01                         byte_19814:	dc.b 1
0001B94D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B952 01                         byte_1981A:	dc.b 1
0001B953 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B958 01                         byte_19820:	dc.b 1
0001B959 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B95E 01                         byte_19826:	dc.b 1
0001B95F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B964                            		even
0001B964                            		even
0001B964                            
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B964 4EF9 0000 F1BC             		jmp	DeleteObject
0001B96A                            ; ===========================================================================
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            ; Object 82 - Eggman (SBZ2)
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            
0001B96A                            Obj82:					; XREF: Obj_Index
0001B96A 7000                       		moveq	#0,d0
0001B96C 1028 0024                  		move.b	$24(a0),d0
0001B970 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B974 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B978                            ; ===========================================================================
0001B978 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B97A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B97C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B97E                            
0001B97E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B981 0400 03                    		dc.b 4,	0, 3
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            Obj82_Main:				; XREF: Obj82_Index
0001B984 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B988 317C 2160 0008             		move.w	#$2160,8(a0)
0001B98E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B994 117C 000F 0020             		move.b	#$F,$20(a0)
0001B99A 117C 0010 0021             		move.b	#$10,$21(a0)
0001B9A0 08A8 0000 0022             		bclr	#0,$22(a0)
0001B9A6 4228 0025                  		clr.b	$25(a0)
0001B9AA 115A 0024                  		move.b	(a2)+,$24(a0)
0001B9AE 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B9B2 115A 0018                  		move.b	(a2)+,$18(a0)
0001B9B6 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B9BE 317C 0400 0002             		move.w	#$400,2(a0)
0001B9C4 117C 0004 0001             		move.b	#4,1(a0)
0001B9CA 08E8 0007 0001             		bset	#7,1(a0)
0001B9D0 117C 0020 0019             		move.b	#$20,$19(a0)
0001B9D6 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001B9DC 6600                       		bne.s	Obj82_Eggman
0001B9DE 2348 0034                  		move.l	a0,$34(a1)
0001B9E2 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B9E6 337C 2130 0008             		move.w	#$2130,8(a1)
0001B9EC 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B9F2 4228 0025                  		clr.b	$25(a0)
0001B9F6 135A 0024                  		move.b	(a2)+,$24(a1)
0001B9FA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B9FE 135A 0018                  		move.b	(a2)+,$18(a1)
0001BA02 237C 0000 D8B4 0004        		move.l	#Map_obj32,4(a1)
0001BA0A 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001BA10 137C 0004 0001             		move.b	#4,1(a1)
0001BA16 08E9 0007 0001             		bset	#7,1(a1)
0001BA1C 137C 0010 0019             		move.b	#$10,$19(a1)
0001BA22 137C 0000 001A             		move.b	#0,$1A(a1)
0001BA28                            
0001BA28                            Obj82_Eggman:				; XREF: Obj82_Index
0001BA28 7000                       		moveq	#0,d0
0001BA2A 1028 0025                  		move.b	$25(a0),d0
0001BA2E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001BA32 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001BA36 43FA 0000                  		lea	Ani_obj82(pc),a1
0001BA3A 4EB9 0000 C132             		jsr	AnimateSprite
0001BA40 4EF9 0000 F180             		jmp	DisplaySprite
0001BA46                            ; ===========================================================================
0001BA46 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001BA48 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001BA4A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001BA4C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001BA4E                            ; ===========================================================================
0001BA4E                            
0001BA4E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001BA4E 3028 0008                  		move.w	8(a0),d0
0001BA52 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA56 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001BA5A 6400                       		bcc.s	loc_19934	; if not, branch
0001BA5C 5428 0025                  		addq.b	#2,$25(a0)
0001BA60 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001BA66 117C 0001 001C             		move.b	#1,$1C(a0)
0001BA6C                            
0001BA6C                            loc_19934:				; XREF: Obj82_EggIndex
0001BA6C 4EF9 0000 F166             		jmp	SpeedToPos
0001BA72                            ; ===========================================================================
0001BA72                            
0001BA72                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001BA72 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001BA76 6600                       		bne.s	loc_19954	; if time remains, branch
0001BA78 5428 0025                  		addq.b	#2,$25(a0)
0001BA7C 117C 0002 001C             		move.b	#2,$1C(a0)
0001BA82 5868 000C                  		addq.w	#4,$C(a0)
0001BA86 317C 000F 003C             		move.w	#15,$3C(a0)
0001BA8C                            
0001BA8C                            loc_19954:
0001BA8C 60DE                       		bra.s	loc_19934
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001BA8E 5368 003C                  		subq.w	#1,$3C(a0)
0001BA92 6E00                       		bgt.s	loc_199D0
0001BA94 6600                       		bne.s	loc_1996A
0001BA96 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001BA9C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001BAA2                            
0001BAA2                            loc_1996A:
0001BAA2 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001BAA8 6E00                       		bgt.s	loc_19976
0001BAAA 4268 0010                  		clr.w	$10(a0)
0001BAAE                            
0001BAAE                            loc_19976:
0001BAAE 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BAB4 4A68 0012                  		tst.w	$12(a0)
0001BAB8 6B00                       		bmi.s	Obj82_FindBlocks
0001BABA 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BAC0 6500                       		bcs.s	Obj82_FindBlocks
0001BAC2 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BAC8 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BACE 6500                       		bcs.s	Obj82_FindBlocks
0001BAD0 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BAD6 4268 0012                  		clr.w	$12(a0)
0001BADA                            
0001BADA                            Obj82_FindBlocks:
0001BADA 3028 0010                  		move.w	$10(a0),d0
0001BADE 8068 0012                  		or.w	$12(a0),d0
0001BAE2 6600                       		bne.s	loc_199D0
0001BAE4 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BAE8 703E                       		moveq	#$3E,d0
0001BAEA 7240                       		moveq	#$40,d1
0001BAEC                            
0001BAEC                            Obj82_FindLoop:	
0001BAEC D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BAEE 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BAF2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BAF6                            
0001BAF6 6600                       		bne.s	loc_199D0
0001BAF8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BAFE 5428 0025                  		addq.b	#2,$25(a0)
0001BB02 117C 0001 001C             		move.b	#1,$1C(a0)
0001BB08                            
0001BB08                            loc_199D0:
0001BB08 6000 FF62                  		bra.w	loc_19934
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            Obj82_Switch:				; XREF: Obj82_Index
0001BB0C 7000                       		moveq	#0,d0
0001BB0E 1028 0025                  		move.b	$25(a0),d0
0001BB12 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BB16 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BB1A                            ; ===========================================================================
0001BB1A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BB1C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BB1E                            ; ===========================================================================
0001BB1E                            
0001BB1E                            loc_199E6:				; XREF: Obj82_SwIndex
0001BB1E 2268 0034                  		movea.l	$34(a0),a1
0001BB22 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BB28 6600                       		bne.s	Obj82_SwDisplay
0001BB2A 117C 0001 001A             		move.b	#1,$1A(a0)
0001BB30 5428 0025                  		addq.b	#2,$25(a0)
0001BB34                            
0001BB34                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BB34 4EF9 0000 F180             		jmp	DisplaySprite
0001BB3A                            ; ===========================================================================
0001BB3A                            Ani_obj82:
0001BB3A                            	include "_anim\obj82.asm"
0001BB3A                            ; ---------------------------------------------------------------------------
0001BB3A                            ; Animation script - Eggman (SBZ2)
0001BB3A                            ; ---------------------------------------------------------------------------
0001BB3A 0000                       		dc.w byte_19A10-Ani_obj82
0001BB3C 0000                       		dc.w byte_19A14-Ani_obj82
0001BB3E 0000                       		dc.w byte_19A18-Ani_obj82
0001BB40 0000                       		dc.w byte_19A20-Ani_obj82
0001BB42 0000                       		dc.w byte_19A24-Ani_obj82
0001BB44 0000                       		dc.w byte_19A2A-Ani_obj82
0001BB46 0000                       		dc.w byte_19A30-Ani_obj82
0001BB48 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BB4C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BB50 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BB58 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BB5C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BB62 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BB68 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BB6C                            		even
0001BB6C                            		even
0001BB6C                            
0001BB6C                            ; ---------------------------------------------------------------------------
0001BB6C                            ; Sprite mappings - Eggman (SBZ2)
0001BB6C                            ; ---------------------------------------------------------------------------
0001BB6C                            Map_obj82:
0001BB6C                            	include "_maps\obj82.asm"
0001BB6C                            ; ---------------------------------------------------------------------------
0001BB6C                            ; Sprite mappings - Eggman (SBZ2)
0001BB6C                            ; ---------------------------------------------------------------------------
0001BB6C 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BB70 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BB74 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BB78 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BB7C 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BB80 0000                       		dc.w byte_19B4F-Map_obj82
0001BB82 03                         byte_19A4A:	dc.b 3
0001BB83 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BB88 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB8D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB92 04                         byte_19A5A:	dc.b 4
0001BB93 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BB98 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB9D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BBA2 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BBA7 00                         		dc.b 0
0001BBA8 04                         byte_19A70:	dc.b 4
0001BBA9 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BBAE E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BBB3 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BBB8 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BBBD 00                         		dc.b 0
0001BBBE 04                         byte_19A86:	dc.b 4
0001BBBF F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BBC4 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BBC9 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BBCE EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BBD3 00                         		dc.b 0
0001BBD4 04                         byte_19A9C:	dc.b 4
0001BBD5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BBDA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BBDF 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BBE4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBE9 00                         		dc.b 0
0001BBEA 04                         byte_19AB2:	dc.b 4
0001BBEB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BBF0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BBF5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBFA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BBFF 00                         		dc.b 0
0001BC00 07                         byte_19AC8:	dc.b 7
0001BC01 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BC06 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BC0B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BC10 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BC15 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC1A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BC1F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BC24 05                         byte_19AEC:	dc.b 5
0001BC25 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC2A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BC2F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BC34 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BC39 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC3E 06                         byte_19B06:	dc.b 6
0001BC3F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BC44 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BC49 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BC4E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BC53 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BC58 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BC5D 00                         		dc.b 0
0001BC5E 08                         byte_19B26:	dc.b 8
0001BC5F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BC64 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BC69 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC6E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BC73 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BC78 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BC7D 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BC82 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BC87 03                         byte_19B4F:	dc.b 3
0001BC88 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BC8D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BC92 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BC98 00                         		even
0001BC98 00                         		even
0001BC98                            
0001BC98                            ; ===========================================================================
0001BC98                            ; ---------------------------------------------------------------------------
0001BC98                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BC98                            ; ---------------------------------------------------------------------------
0001BC98                            
0001BC98                            Obj83:					; XREF: Obj_Index
0001BC98 7000                       		moveq	#0,d0
0001BC9A 1028 0024                  		move.b	$24(a0),d0
0001BC9E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BCA2 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BCA6                            ; ===========================================================================
0001BCA6 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BCA8 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BCAA 0000                       		dc.w loc_19C36-Obj83_Index
0001BCAC 0000                       		dc.w loc_19C62-Obj83_Index
0001BCAE 0000                       		dc.w loc_19C72-Obj83_Index
0001BCB0 0000                       		dc.w loc_19C80-Obj83_Index
0001BCB2                            ; ===========================================================================
0001BCB2                            
0001BCB2                            Obj83_Main:				; XREF: Obj83_Index
0001BCB2 317C 2080 0008             		move.w	#$2080,8(a0)
0001BCB8 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BCBE 117C 0080 0019             		move.b	#$80,$19(a0)
0001BCC4 117C 0010 0016             		move.b	#$10,$16(a0)
0001BCCA 117C 0004 0001             		move.b	#4,1(a0)
0001BCD0 08E8 0007 0001             		bset	#7,1(a0)
0001BCD6 7800                       		moveq	#0,d4
0001BCD8 3A3C 2010                  		move.w	#$2010,d5
0001BCDC 7C07                       		moveq	#7,d6
0001BCDE 45E8 0030                  		lea	$30(a0),a2
0001BCE2                            
0001BCE2                            Obj83_MakeBlock:
0001BCE2 4EB9 0000 F614             		jsr	SingleObjLoad
0001BCE8 6600                       		bne.s	Obj83_ExitMake
0001BCEA 34C9                       		move.w	a1,(a2)+
0001BCEC 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BCF0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BCF8 337C 4518 0002             		move.w	#$4518,2(a1)
0001BCFE 137C 0004 0001             		move.b	#4,1(a1)
0001BD04 137C 0010 0019             		move.b	#$10,$19(a1)
0001BD0A 137C 0010 0016             		move.b	#$10,$16(a1)
0001BD10 137C 0003 0018             		move.b	#3,$18(a1)
0001BD16 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BD1A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BD20 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BD24 137C 0008 0024             		move.b	#8,$24(a1)
0001BD2A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BD2E                            
0001BD2E                            Obj83_ExitMake:
0001BD2E 5428 0024                  		addq.b	#2,$24(a0)
0001BD32 4E75                       		rts	
0001BD34                            ; ===========================================================================
0001BD34                            
0001BD34                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BD34 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BD3A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BD3C 4228 001A                  		clr.b	$1A(a0)
0001BD40 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BD44                            
0001BD44                            Obj83_Solid:
0001BD44 7000                       		moveq	#0,d0
0001BD46 1028 001A                  		move.b	$1A(a0),d0
0001BD4A 4400                       		neg.b	d0
0001BD4C 4880                       		ext.w	d0
0001BD4E 5040                       		addq.w	#8,d0
0001BD50 E940                       		asl.w	#4,d0
0001BD52 383C 2100                  		move.w	#$2100,d4
0001BD56 9840                       		sub.w	d0,d4
0001BD58 1140 0019                  		move.b	d0,$19(a0)
0001BD5C 3144 0008                  		move.w	d4,8(a0)
0001BD60 720B                       		moveq	#$B,d1
0001BD62 D240                       		add.w	d0,d1
0001BD64 7410                       		moveq	#$10,d2
0001BD66 7611                       		moveq	#$11,d3
0001BD68 4EF9 0001 1562             		jmp	SolidObject
0001BD6E                            ; ===========================================================================
0001BD6E                            
0001BD6E                            loc_19C36:				; XREF: Obj83_Index
0001BD6E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BD74 6400                       		bcc.s	Obj83_Solid2
0001BD76 70FF                       		moveq	#-1,d0
0001BD78 1028 001A                  		move.b	$1A(a0),d0
0001BD7C 4880                       		ext.w	d0
0001BD7E D040                       		add.w	d0,d0
0001BD80 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BD84 2240                       		movea.l	d0,a1
0001BD86 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BD8C 5228 001A                  		addq.b	#1,$1A(a0)
0001BD90 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BD96 6700                       		beq.s	loc_19C62
0001BD98                            
0001BD98                            Obj83_Solid2:
0001BD98 60AA                       		bra.s	Obj83_Solid
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            loc_19C62:				; XREF: Obj83_Index
0001BD9A 08A8 0003 0022             		bclr	#3,$22(a0)
0001BDA0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BDA6 6000 FBBC                  		bra.w	loc_1982C
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_19C72:				; XREF: Obj83_Index
0001BDAA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BDB0 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BDB2 4EF9 0000 F180             		jmp	DisplaySprite
0001BDB8                            ; ===========================================================================
0001BDB8                            
0001BDB8                            loc_19C80:				; XREF: Obj83_Index
0001BDB8 4A28 0001                  		tst.b	1(a0)
0001BDBC 6A00 FBA6                  		bpl.w	loc_1982C
0001BDC0 4EB9 0000 F146             		jsr	ObjectFall
0001BDC6 4EF9 0000 F180             		jmp	DisplaySprite
0001BDCC                            ; ===========================================================================
0001BDCC                            
0001BDCC                            Obj83_Break:				; XREF: loc_19C72
0001BDCC 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BDD0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BDD4 7801                       		moveq	#1,d4
0001BDD6 7203                       		moveq	#3,d1
0001BDD8 7438                       		moveq	#$38,d2
0001BDDA 5428 0024                  		addq.b	#2,$24(a0)
0001BDDE 117C 0008 0019             		move.b	#8,$19(a0)
0001BDE4 117C 0008 0016             		move.b	#8,$16(a0)
0001BDEA 43D0                       		lea	(a0),a1
0001BDEC 6000                       		bra.s	Obj83_MakeFrag
0001BDEE                            ; ===========================================================================
0001BDEE                            
0001BDEE                            Obj83_LoopFrag:
0001BDEE 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001BDF4 6600                       		bne.s	Obj83_BreakSnd
0001BDF6                            
0001BDF6                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BDF6 45D0                       		lea	(a0),a2
0001BDF8 47D1                       		lea	(a1),a3
0001BDFA 7603                       		moveq	#3,d3
0001BDFC                            
0001BDFC                            loc_19CC4:
0001BDFC 26DA                       		move.l	(a2)+,(a3)+
0001BDFE 26DA                       		move.l	(a2)+,(a3)+
0001BE00 26DA                       		move.l	(a2)+,(a3)+
0001BE02 26DA                       		move.l	(a2)+,(a3)+
0001BE04 51CB FFF6                  		dbf	d3,loc_19CC4
0001BE08                            
0001BE08 335C 0012                  		move.w	(a4)+,$12(a1)
0001BE0C 361D                       		move.w	(a5)+,d3
0001BE0E D769 0008                  		add.w	d3,8(a1)
0001BE12 361D                       		move.w	(a5)+,d3
0001BE14 D769 000C                  		add.w	d3,$C(a1)
0001BE18 1344 001A                  		move.b	d4,$1A(a1)
0001BE1C 5244                       		addq.w	#1,d4
0001BE1E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BE22                            
0001BE22                            Obj83_BreakSnd:
0001BE22 303C 00CB                  		move.w	#$CB,d0
0001BE26 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BE2C 4EF9 0000 F180             		jmp	DisplaySprite
0001BE32                            ; ===========================================================================
0001BE32 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BE36 0120 00C0                  		dc.w $120, $C0
0001BE3A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BE3E 0010 0000                  		dc.w $10, 0
0001BE42 0000 0010                  		dc.w 0,	$10
0001BE46 0010 0010                  		dc.w $10, $10
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A                            Map_obj83:
0001BE4A                            	include "_maps\obj83.asm"
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BE4E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BE52 0000                       		dc.w byte_19D46-Map_obj83
0001BE54 01                         byte_19D1C:	dc.b 1
0001BE55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BE5A 02                         byte_19D22:	dc.b 2
0001BE5B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BE60 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BE65 00                         		dc.b 0
0001BE66 02                         byte_19D2E:	dc.b 2
0001BE67 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BE6C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BE71 00                         		dc.b 0
0001BE72 02                         byte_19D3A:	dc.b 2
0001BE73 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BE78 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BE7D 00                         		dc.b 0
0001BE7E 02                         byte_19D46:	dc.b 2
0001BE7F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BE84 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BE8A 00                         		even
0001BE8A 00                         		even
0001BE8A                            
0001BE8A                            ; ===========================================================================
0001BE8A                            ; ---------------------------------------------------------------------------
0001BE8A                            ; Object 85 - Eggman (FZ)
0001BE8A                            ; ---------------------------------------------------------------------------
0001BE8A                            
0001BE8A                            Obj85_Delete:
0001BE8A 4EF9 0000 F1BC             		jmp	DeleteObject
0001BE90                            ; ===========================================================================
0001BE90                            
0001BE90                            Obj85:					; XREF: Obj_Index
0001BE90 7000                       		moveq	#0,d0
0001BE92 1028 0024                  		move.b	$24(a0),d0
0001BE96 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BE9A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BE9E                            ; ===========================================================================
0001BE9E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BEA0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BEA2 0000                       		dc.w loc_1A38E-Obj85_Index
0001BEA4 0000                       		dc.w loc_1A346-Obj85_Index
0001BEA6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BEA8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BEAA 0000                       		dc.w loc_1A264-Obj85_Index
0001BEAC                            
0001BEAC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BEB2 0001 BB6C                  		dc.l Map_obj82		; mappings pointer
0001BEB6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BEBC 0000 0000                  		dc.l Map_obj84
0001BEC0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BEC6 0000 0000                  		dc.l Map_FZBoss
0001BECA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BED0 0001 BB6C                  		dc.l Map_obj82
0001BED4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BEDA 0001 9E64                  		dc.l Map_Eggman
0001BEDE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BEE4 0001 9E64                  		dc.l Map_Eggman
0001BEE8                            
0001BEE8 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BEED 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BEF2 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BEF7 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BEFC 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BF01 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BF06                            ; ===========================================================================
0001BF06                            
0001BF06                            Obj85_Main:				; XREF: Obj85_Index
0001BF06 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BF0A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BF0E 2248                       		movea.l	a0,a1
0001BF10 7205                       		moveq	#5,d1
0001BF12 6000                       		bra.s	Obj85_LoadBoss
0001BF14                            ; ===========================================================================
0001BF14                            
0001BF14                            Obj85_Loop:
0001BF14 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001BF1A 6600                       		bne.s	loc_19E20
0001BF1C                            
0001BF1C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BF1C 12BC 0085                  		move.b	#$85,(a1)
0001BF20 335A 0008                  		move.w	(a2)+,8(a1)
0001BF24 335A 000C                  		move.w	(a2)+,$C(a1)
0001BF28 335A 0002                  		move.w	(a2)+,2(a1)
0001BF2C 235A 0004                  		move.l	(a2)+,4(a1)
0001BF30 135B 0024                  		move.b	(a3)+,$24(a1)
0001BF34 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BF38 135B 0018                  		move.b	(a3)+,$18(a1)
0001BF3C 135B 0017                  		move.b	(a3)+,$17(a1)
0001BF40 135B 0016                  		move.b	(a3)+,$16(a1)
0001BF44 137C 0004 0001             		move.b	#4,1(a1)
0001BF4A 08E8 0007 0001             		bset	#7,1(a0)
0001BF50 2348 0034                  		move.l	a0,$34(a1)
0001BF54 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BF58                            
0001BF58                            loc_19E20:
0001BF58 45E8 0036                  		lea	$36(a0),a2
0001BF5C 4EB9 0000 F614             		jsr	SingleObjLoad
0001BF62 6600                       		bne.s	loc_19E5A
0001BF64 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BF68 3489                       		move.w	a1,(a2)
0001BF6A 2348 0034                  		move.l	a0,$34(a1)
0001BF6E 45E8 0038                  		lea	$38(a0),a2
0001BF72 7400                       		moveq	#0,d2
0001BF74 7203                       		moveq	#3,d1
0001BF76                            
0001BF76                            loc_19E3E:
0001BF76 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001BF7C 6600                       		bne.s	loc_19E5A
0001BF7E 34C9                       		move.w	a1,(a2)+
0001BF80 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BF84 2348 0034                  		move.l	a0,$34(a1)
0001BF88 1342 0028                  		move.b	d2,$28(a1)
0001BF8C 5442                       		addq.w	#2,d2
0001BF8E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BF92                            
0001BF92                            loc_19E5A:
0001BF92 317C 0000 0034             		move.w	#0,$34(a0)
0001BF98 117C 0001 0021             		move.b	#1,$21(a0)	; set number of	hits to	1
0001BF9E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BFA4                            
0001BFA4                            Obj85_Eggman:				; XREF: Obj85_Index
0001BFA4 7000                       		moveq	#0,d0
0001BFA6 1028 0034                  		move.b	$34(a0),d0
0001BFAA 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BFAE 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BFB2 4EF9 0000 F180             		jmp	DisplaySprite
0001BFB8                            ; ===========================================================================
0001BFB8 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BFBC 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BFC0 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BFC4 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BFC8                            ; ===========================================================================
0001BFC8                            
0001BFC8                            loc_19E90:				; XREF: off_19E80
0001BFC8 4AB8 F680                  		tst.l	($FFFFF680).w
0001BFCC 6600                       		bne.s	loc_19EA2
0001BFCE 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BFD4 6500                       		bcs.s	loc_19EA2
0001BFD6 5428 0034                  		addq.b	#2,$34(a0)
0001BFDA                            
0001BFDA                            loc_19EA2:
0001BFDA 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BFDE 4E75                       		rts	
0001BFE0                            ; ===========================================================================
0001BFE0                            
0001BFE0                            loc_19EA8:				; XREF: off_19E80
0001BFE0 4A68 0030                  		tst.w	$30(a0)
0001BFE4 6A00                       		bpl.s	loc_19F10
0001BFE6 4268 0030                  		clr.w	$30(a0)
0001BFEA 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001BFF0 0240 000C                  		andi.w	#$C,d0
0001BFF4 3200                       		move.w	d0,d1
0001BFF6 5441                       		addq.w	#2,d1
0001BFF8 4A80                       		tst.l	d0
0001BFFA 6A00                       		bpl.s	loc_19EC6
0001BFFC C141                       		exg	d1,d0
0001BFFE                            
0001BFFE                            loc_19EC6:
0001BFFE 43FA 0000                  		lea	word_19FD6(pc),a1
0001C002 3031 0000                  		move.w	(a1,d0.w),d0
0001C006 3231 1000                  		move.w	(a1,d1.w),d1
0001C00A 3140 0030                  		move.w	d0,$30(a0)
0001C00E 74FF                       		moveq	#-1,d2
0001C010 3430 0038                  		move.w	$38(a0,d0.w),d2
0001C014 2242                       		movea.l	d2,a1
0001C016 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C01C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001C022 3430 1038                  		move.w	$38(a0,d1.w),d2
0001C026 2242                       		movea.l	d2,a1
0001C028 137C 0001 0029             		move.b	#1,$29(a1)
0001C02E 337C 0000 0030             		move.w	#0,$30(a1)
0001C034 317C 0001 0032             		move.w	#1,$32(a0)
0001C03A 4228 0035                  		clr.b	$35(a0)
0001C03E 303C 00B7                  		move.w	#$B7,d0
0001C042 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001C048                            
0001C048                            loc_19F10:
0001C048 4A68 0032                  		tst.w	$32(a0)
0001C04C 6B00 0000                  		bmi.w	loc_19FA6
0001C050 08A8 0000 0022             		bclr	#0,$22(a0)
0001C056 3038 D008                  		move.w	($FFFFD008).w,d0
0001C05A 9068 0008                  		sub.w	8(a0),d0
0001C05E 6500                       		bcs.s	loc_19F2E
0001C060 08E8 0000 0022             		bset	#0,$22(a0)
0001C066                            
0001C066                            loc_19F2E:
0001C066 323C 002B                  		move.w	#$2B,d1
0001C06A 343C 0014                  		move.w	#$14,d2
0001C06E 363C 0014                  		move.w	#$14,d3
0001C072 3828 0008                  		move.w	8(a0),d4
0001C076 4EB9 0001 1562             		jsr	SolidObject
0001C07C 4A44                       		tst.w	d4
0001C07E 6E00                       		bgt.s	loc_19F50
0001C080                            
0001C080                            loc_19F48:
0001C080 4A28 0035                  		tst.b	$35(a0)
0001C084 6600                       		bne.s	loc_19F88
0001C086 6000                       		bra.s	loc_19F96
0001C088                            ; ===========================================================================
0001C088                            
0001C088                            loc_19F50:
0001C088 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001C08C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001C092 66EC                       		bne.s	loc_19F48
0001C094 303C 0300                  		move.w	#$300,d0
0001C098 0828 0000 0022             		btst	#0,$22(a0)
0001C09E 6600                       		bne.s	loc_19F6A
0001C0A0 4440                       		neg.w	d0
0001C0A2                            
0001C0A2                            loc_19F6A:
0001C0A2 31C0 D010                  		move.w	d0,($FFFFD010).w
0001C0A6 4A28 0035                  		tst.b	$35(a0)
0001C0AA 6600                       		bne.s	loc_19F88
0001C0AC 5328 0021                  		subq.b	#1,$21(a0)
0001C0B0 117C 0064 0035             		move.b	#$64,$35(a0)
0001C0B6 303C 00AC                  		move.w	#$AC,d0
0001C0BA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C0C0                            
0001C0C0                            loc_19F88:
0001C0C0 5328 0035                  		subq.b	#1,$35(a0)
0001C0C4 6700                       		beq.s	loc_19F96
0001C0C6 117C 0003 001C             		move.b	#3,$1C(a0)
0001C0CC 6000                       		bra.s	loc_19F9C
0001C0CE                            ; ===========================================================================
0001C0CE                            
0001C0CE                            loc_19F96:
0001C0CE 117C 0001 001C             		move.b	#1,$1C(a0)
0001C0D4                            
0001C0D4                            loc_19F9C:
0001C0D4 43FA FA64                  		lea	Ani_obj82(pc),a1
0001C0D8 4EF9 0000 C132             		jmp	AnimateSprite
0001C0DE                            ; ===========================================================================
0001C0DE                            
0001C0DE                            loc_19FA6:
0001C0DE 4A28 0021                  		tst.b	$21(a0)
0001C0E2 6700                       		beq.s	loc_19FBC
0001C0E4 5428 0034                  		addq.b	#2,$34(a0)
0001C0E8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C0EE 4268 0032                  		clr.w	$32(a0)
0001C0F2 4E75                       		rts	
0001C0F4                            ; ===========================================================================
0001C0F4                            
0001C0F4                            loc_19FBC:
0001C0F4 117C 0006 0034             		move.b	#6,$34(a0)
0001C0FA 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C100 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C106 117C 0014 0016             		move.b	#$14,$16(a0)
0001C10C 4E75                       		rts	
0001C10E                            ; ===========================================================================
0001C10E 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C11E                            ; ===========================================================================
0001C11E                            
0001C11E                            loc_19FE6:				; XREF: off_19E80
0001C11E 70FF                       		moveq	#-1,d0
0001C120 3028 0036                  		move.w	$36(a0),d0
0001C124 2240                       		movea.l	d0,a1
0001C126 4A68 0030                  		tst.w	$30(a0)
0001C12A 6A00                       		bpl.s	loc_1A000
0001C12C 4268 0030                  		clr.w	$30(a0)
0001C130 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C136 6100                       		bsr.s	loc_1A020
0001C138                            
0001C138                            loc_1A000:
0001C138 700F                       		moveq	#$F,d0
0001C13A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C13E 6600                       		bne.s	loc_1A00A
0001C140 6100                       		bsr.s	loc_1A020
0001C142                            
0001C142                            loc_1A00A:
0001C142 4A68 0032                  		tst.w	$32(a0)
0001C146 6700                       		beq.s	locret_1A01E
0001C148 5528 0034                  		subq.b	#2,$34(a0)
0001C14C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C152 4268 0032                  		clr.w	$32(a0)
0001C156                            
0001C156                            locret_1A01E:
0001C156 4E75                       		rts	
0001C158                            ; ===========================================================================
0001C158                            
0001C158                            loc_1A020:
0001C158 303C 00B1                  		move.w	#$B1,d0
0001C15C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C162                            ; ===========================================================================
0001C162                            
0001C162                            loc_1A02A:				; XREF: off_19E80
0001C162 117C 0030 0017             		move.b	#$30,$17(a0)
0001C168 08E8 0000 0022             		bset	#0,$22(a0)
0001C16E 4EB9 0000 F166             		jsr	SpeedToPos
0001C174 117C 0006 001A             		move.b	#6,$1A(a0)
0001C17A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C180 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C186 6500                       		bcs.s	loc_1A070
0001C188 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C18E 5428 0034                  		addq.b	#2,$34(a0)
0001C192 117C 0020 0017             		move.b	#$20,$17(a0)
0001C198 317C 0100 0010             		move.w	#$100,$10(a0)
0001C19E 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C1A4 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C1A8                            
0001C1A8                            loc_1A070:
0001C1A8 6000 0000                  		bra.w	loc_1A166
0001C1AC                            ; ===========================================================================
0001C1AC                            
0001C1AC                            loc_1A074:				; XREF: off_19E80
0001C1AC 08E8 0000 0022             		bset	#0,$22(a0)
0001C1B2 117C 0004 001C             		move.b	#4,$1C(a0)
0001C1B8 4EB9 0000 F166             		jsr	SpeedToPos
0001C1BE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C1C4 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C1CA 6500                       		bcs.s	loc_1A09A
0001C1CC 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C1D2                            
0001C1D2                            loc_1A09A:
0001C1D2 317C 0400 0010             		move.w	#$400,$10(a0)
0001C1D8 3028 0008                  		move.w	8(a0),d0
0001C1DC 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C1E0 6A00                       		bpl.s	loc_1A0B4
0001C1E2 317C 0500 0010             		move.w	#$500,$10(a0)
0001C1E8 6000 0000                  		bra.w	loc_1A0F2
0001C1EC                            ; ===========================================================================
0001C1EC                            
0001C1EC                            loc_1A0B4:
0001C1EC 0440 0070                  		subi.w	#$70,d0
0001C1F0 6500                       		bcs.s	loc_1A0F2
0001C1F2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C1F8 5140                       		subq.w	#8,d0
0001C1FA 6500                       		bcs.s	loc_1A0F2
0001C1FC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C202 5140                       		subq.w	#8,d0
0001C204 6500                       		bcs.s	loc_1A0F2
0001C206 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C20C 5140                       		subq.w	#8,d0
0001C20E 6500                       		bcs.s	loc_1A0F2
0001C210 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C216 5140                       		subq.w	#8,d0
0001C218 6500                       		bcs.s	loc_1A0F2
0001C21A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C220 0440 0038                  		subi.w	#$38,d0
0001C224 6500                       		bcs.s	loc_1A0F2
0001C226 4268 0010                  		clr.w	$10(a0)
0001C22A                            
0001C22A                            loc_1A0F2:
0001C22A 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C230 6500                       		bcs.s	loc_1A110
0001C232 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C238 317C 0240 0010             		move.w	#$240,$10(a0)
0001C23E 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C244 5428 0034                  		addq.b	#2,$34(a0)
0001C248                            
0001C248                            loc_1A110:
0001C248 6000                       		bra.s	loc_1A15C
0001C24A                            ; ===========================================================================
0001C24A                            
0001C24A                            loc_1A112:				; XREF: off_19E80
0001C24A 4EB9 0000 F166             		jsr	SpeedToPos
0001C250 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C256 6500                       		bcs.s	loc_1A124
0001C258 4268 0010                  		clr.w	$10(a0)
0001C25C                            
0001C25C                            loc_1A124:
0001C25C 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C262 4A68 0012                  		tst.w	$12(a0)
0001C266 6B00                       		bmi.s	loc_1A142
0001C268 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C26E 6500                       		bcs.s	loc_1A142
0001C270 317C 0592 000C             		move.w	#$592,$C(a0)
0001C276 4268 0012                  		clr.w	$12(a0)
0001C27A                            
0001C27A                            loc_1A142:
0001C27A 3028 0010                  		move.w	$10(a0),d0
0001C27E 8068 0012                  		or.w	$12(a0),d0
0001C282 6600                       		bne.s	loc_1A15C
0001C284 5428 0034                  		addq.b	#2,$34(a0)
0001C288 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C28E 117C 0001 0021             		move.b	#1,$21(a0)
0001C294                            
0001C294                            loc_1A15C:
0001C294 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001C298 4EB9 0000 C132             		jsr	AnimateSprite
0001C29E                            
0001C29E                            loc_1A166:
0001C29E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C2A4 6C00                       		bge.s	loc_1A172
0001C2A6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C2AA                            
0001C2AA                            loc_1A172:
0001C2AA 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C2B0 6C00                       		bge.s	locret_1A190
0001C2B2 323C 001B                  		move.w	#$1B,d1
0001C2B6 343C 0070                  		move.w	#$70,d2
0001C2BA 363C 0071                  		move.w	#$71,d3
0001C2BE 3828 0008                  		move.w	8(a0),d4
0001C2C2 4EF9 0001 1562             		jmp	SolidObject
0001C2C8                            ; ===========================================================================
0001C2C8                            
0001C2C8                            locret_1A190:
0001C2C8 4E75                       		rts	
0001C2CA                            ; ===========================================================================
0001C2CA                            
0001C2CA                            loc_1A192:				; XREF: off_19E80
0001C2CA 217C 0001 9E64 0004        		move.l	#Map_Eggman,4(a0)
0001C2D2 317C 0400 0002             		move.w	#$400,2(a0)
0001C2D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001C2DE 08E8 0000 0022             		bset	#0,$22(a0)
0001C2E4 4EB9 0000 F166             		jsr	SpeedToPos
0001C2EA 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C2F0 6400                       		bcc.s	loc_1A1D0
0001C2F2 317C 0180 0010             		move.w	#$180,$10(a0)
0001C2F8 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C2FE 117C 000F 0020             		move.b	#$F,$20(a0)
0001C304 5428 0034                  		addq.b	#2,$34(a0)
0001C308                            
0001C308                            loc_1A1D0:
0001C308 6000 FF8A                  		bra.w	loc_1A15C
0001C30C                            ; ===========================================================================
0001C30C                            
0001C30C                            loc_1A1D4:				; XREF: off_19E80
0001C30C 08E8 0000 0022             		bset	#0,$22(a0)
0001C312 4EB9 0000 F166             		jsr	SpeedToPos
0001C318 4A68 0030                  		tst.w	$30(a0)
0001C31C 6600                       		bne.s	loc_1A1FC
0001C31E 4A28 0020                  		tst.b	$20(a0)
0001C322 6600                       		bne.s	loc_1A216
0001C324 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C32A 303C 00AC                  		move.w	#$AC,d0
0001C32E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C334                            
0001C334                            loc_1A1FC:
0001C334 5368 0030                  		subq.w	#1,$30(a0)
0001C338 6600                       		bne.s	loc_1A216
0001C33A 4A28 0022                  		tst.b	$22(a0)
0001C33E 6A00                       		bpl.s	loc_1A210
0001C340 317C 0060 0012             		move.w	#$60,$12(a0)
0001C346 6000                       		bra.s	loc_1A216
0001C348                            ; ===========================================================================
0001C348                            
0001C348                            loc_1A210:
0001C348 117C 000F 0020             		move.b	#$F,$20(a0)
0001C34E                            
0001C34E                            loc_1A216:
0001C34E 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C354 6D00                       		blt.s	loc_1A23A
0001C356 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C35C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C362 4278 D014                  		clr.w	($FFFFD014).w
0001C366 4A68 0012                  		tst.w	$12(a0)
0001C36A 6A00                       		bpl.s	loc_1A248
0001C36C 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C372                            
0001C372                            loc_1A23A:
0001C372 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C378 6D00                       		blt.s	loc_1A248
0001C37A 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C380                            
0001C380                            loc_1A248:
0001C380 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C386 6500                       		bcs.s	loc_1A260
0001C388 4A28 0001                  		tst.b	1(a0)
0001C38C 6B00                       		bmi.s	loc_1A260
0001C38E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C394 6000 FAF4                  		bra.w	Obj85_Delete
0001C398                            ; ===========================================================================
0001C398                            
0001C398                            loc_1A260:
0001C398 6000 FEFA                  		bra.w	loc_1A15C
0001C39C                            ; ===========================================================================
0001C39C                            
0001C39C                            loc_1A264:				; XREF: Obj85_Index
0001C39C 2268 0034                  		movea.l	$34(a0),a1
0001C3A0 1011                       		move.b	(a1),d0
0001C3A2 B010                       		cmp.b	(a0),d0
0001C3A4 6600 FAE4                  		bne.w	Obj85_Delete
0001C3A8 117C 0007 001C             		move.b	#7,$1C(a0)
0001C3AE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C3B4 6C00                       		bge.s	loc_1A280
0001C3B6 6000                       		bra.s	loc_1A2A6
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            loc_1A280:
0001C3B8 4A69 0010                  		tst.w	$10(a1)
0001C3BC 6700                       		beq.s	loc_1A28C
0001C3BE 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C3C4                            
0001C3C4                            loc_1A28C:
0001C3C4 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001C3C8 4EB9 0000 C132             		jsr	AnimateSprite
0001C3CE                            
0001C3CE                            loc_1A296:
0001C3CE 2268 0034                  		movea.l	$34(a0),a1
0001C3D2 3169 0008 0008             		move.w	8(a1),8(a0)
0001C3D8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C3DE                            
0001C3DE                            loc_1A2A6:
0001C3DE 2268 0034                  		movea.l	$34(a0),a1
0001C3E2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C3E8 7003                       		moveq	#3,d0
0001C3EA C028 0022                  		and.b	$22(a0),d0
0001C3EE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C3F4 8128 0001                  		or.b	d0,1(a0)
0001C3F8 4EF9 0000 F180             		jmp	DisplaySprite
0001C3FE                            ; ===========================================================================
0001C3FE                            
0001C3FE                            loc_1A2C6:				; XREF: Obj85_Index
0001C3FE 2268 0034                  		movea.l	$34(a0),a1
0001C402 1011                       		move.b	(a1),d0
0001C404 B010                       		cmp.b	(a0),d0
0001C406 6600 FA82                  		bne.w	Obj85_Delete
0001C40A 0CA9 0001 9E64 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C412 6700                       		beq.s	loc_1A2E4
0001C414 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C41A 60C2                       		bra.s	loc_1A2A6
0001C41C                            ; ===========================================================================
0001C41C                            
0001C41C                            loc_1A2E4:
0001C41C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C422 4A29 0021                  		tst.b	$21(a1)
0001C426 6F00                       		ble.s	loc_1A312
0001C428 117C 0006 001C             		move.b	#6,$1C(a0)
0001C42E 217C 0001 9E64 0004        		move.l	#Map_Eggman,4(a0)
0001C436 317C 0400 0002             		move.w	#$400,2(a0)
0001C43C 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001C440 4EB9 0000 C132             		jsr	AnimateSprite
0001C446 6000 FF86                  		bra.w	loc_1A296
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_1A312:
0001C44A 4A28 0001                  		tst.b	1(a0)
0001C44E 6A00 FA3A                  		bpl.w	Obj85_Delete
0001C452 6100 D512                  		bsr.w	BossDefeated
0001C456 117C 0002 0018             		move.b	#2,$18(a0)
0001C45C 117C 0000 001C             		move.b	#0,$1C(a0)
0001C462 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C46A 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C470 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C474 4EB9 0000 C132             		jsr	AnimateSprite
0001C47A 6000 FF52                  		bra.w	loc_1A296
0001C47E                            ; ===========================================================================
0001C47E                            
0001C47E                            loc_1A346:				; XREF: Obj85_Index
0001C47E 08E8 0000 0022             		bset	#0,$22(a0)
0001C484 2268 0034                  		movea.l	$34(a0),a1
0001C488 0CA9 0001 9E64 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C490 6700                       		beq.s	loc_1A35E
0001C492 6000 FF4A                  		bra.w	loc_1A2A6
0001C496                            ; ===========================================================================
0001C496                            
0001C496                            loc_1A35E:
0001C496 3169 0008 0008             		move.w	8(a1),8(a0)
0001C49C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C4A2 4A28 001E                  		tst.b	$1E(a0)
0001C4A6 6600                       		bne.s	loc_1A376
0001C4A8 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C4AE                            
0001C4AE                            loc_1A376:
0001C4AE 5328 001E                  		subq.b	#1,$1E(a0)
0001C4B2 6E00                       		bgt.s	loc_1A38A
0001C4B4 5228 001A                  		addq.b	#1,$1A(a0)
0001C4B8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C4BE 6E00 F9CA                  		bgt.w	Obj85_Delete
0001C4C2                            
0001C4C2                            loc_1A38A:
0001C4C2 6000 FF0A                  		bra.w	loc_1A296
0001C4C6                            ; ===========================================================================
0001C4C6                            
0001C4C6                            loc_1A38E:				; XREF: Obj85_Index
0001C4C6 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C4CC 3038 D008                  		move.w	($FFFFD008).w,d0
0001C4D0 9068 0008                  		sub.w	8(a0),d0
0001C4D4 6500                       		bcs.s	loc_1A3A6
0001C4D6 4A28 0001                  		tst.b	1(a0)
0001C4DA 6A00 F9AE                  		bpl.w	Obj85_Delete
0001C4DE                            
0001C4DE                            loc_1A3A6:
0001C4DE 4EF9 0000 F180             		jmp	DisplaySprite
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            loc_1A3AC:				; XREF: Obj85_Index
0001C4E4 117C 0000 001A             		move.b	#0,$1A(a0)
0001C4EA 08E8 0000 0022             		bset	#0,$22(a0)
0001C4F0 2268 0034                  		movea.l	$34(a0),a1
0001C4F4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C4FA 6600                       		bne.s	loc_1A3D0
0001C4FC 0CA9 0001 9E64 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C504 6700 F984                  		beq.w	Obj85_Delete
0001C508                            
0001C508                            loc_1A3D0:
0001C508 6000 FED4                  		bra.w	loc_1A2A6
0001C50C                            ; ===========================================================================
0001C50C                            Ani_obj85:
0001C50C                            	include "_anim\obj85.asm"
0001C50C                            ; ---------------------------------------------------------------------------
0001C50C                            ; Animation script - Eggman (FZ)
0001C50C                            ; ---------------------------------------------------------------------------
0001C50C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C50E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C512                            		even
0001C512                            		even
0001C512                            
0001C512                            Map_Eggman2:
0001C512                            	include "_maps\Eggman2.asm"
0001C512                            ; ---------------------------------------------------------------------------
0001C512                            ; Sprite mappings - Eggman (FZ)
0001C512                            ; ---------------------------------------------------------------------------
0001C512 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C514 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C516 06                         byte_1A3DE:	dc.b 6
0001C517 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C51C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C521 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C526 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C52B FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C530 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C535 06                         byte_1A3FD:	dc.b 6
0001C536 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C53B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C540 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C545 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C54A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C54F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C554                            		even
0001C554                            		even
0001C554                            
0001C554                            Map_FZBoss:
0001C554                            	include "_maps\FZ boss.asm"
0001C554                            ; ---------------------------------------------------------------------------
0001C554                            ; Sprite mappings - boss (FZ)
0001C554                            ; ---------------------------------------------------------------------------
0001C554 0000                       		dc.w byte_1A422-Map_FZBoss
0001C556 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C558 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C55A 02                         byte_1A422:	dc.b 2
0001C55B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C560 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C565 03                         byte_1A42D:	dc.b 3
0001C566 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C56B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C570 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C575 02                         byte_1A43D:	dc.b 2
0001C576 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C57B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C580                            		even
0001C580                            		even
0001C580                            
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            Obj84_Delete:
0001C580 4EF9 0000 F1BC             		jmp	DeleteObject
0001C586                            ; ===========================================================================
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            
0001C586                            Obj84:					; XREF: Obj_Index
0001C586 7000                       		moveq	#0,d0
0001C588 1028 0024                  		move.b	$24(a0),d0
0001C58C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C590 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C594                            ; ===========================================================================
0001C594 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C596 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C598 0000                       		dc.w loc_1A57E-Obj84_Index
0001C59A                            
0001C59A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C59E 2550 0620                  		dc.w $2550, $620
0001C5A2 2490 04C0                  		dc.w $2490, $4C0
0001C5A6 2510 04C0                  		dc.w $2510, $4C0
0001C5AA                            ; ===========================================================================
0001C5AA                            
0001C5AA                            Obj84_Main:				; XREF: Obj84_Index
0001C5AA 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C5AE 7000                       		moveq	#0,d0
0001C5B0 1028 0028                  		move.b	$28(a0),d0
0001C5B4 D040                       		add.w	d0,d0
0001C5B6 D2C0                       		adda.w	d0,a1
0001C5B8 117C 0004 0001             		move.b	#4,1(a0)
0001C5BE 08E8 0007 0001             		bset	#7,1(a0)
0001C5C4 08E8 0004 0001             		bset	#4,1(a0)
0001C5CA 317C 0300 0002             		move.w	#$300,2(a0)
0001C5D0 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C5D8 3159 0008                  		move.w	(a1)+,8(a0)
0001C5DC 3151 000C                  		move.w	(a1),$C(a0)
0001C5E0 3159 0038                  		move.w	(a1)+,$38(a0)
0001C5E4 117C 0020 0016             		move.b	#$20,$16(a0)
0001C5EA 117C 0060 0017             		move.b	#$60,$17(a0)
0001C5F0 117C 0020 0019             		move.b	#$20,$19(a0)
0001C5F6 117C 0060 0016             		move.b	#$60,$16(a0)
0001C5FC 117C 0003 0018             		move.b	#3,$18(a0)
0001C602 5428 0024                  		addq.b	#2,$24(a0)
0001C606                            
0001C606                            loc_1A4CE:				; XREF: Obj84_Index
0001C606 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C60C 6F00                       		ble.s	loc_1A4DC
0001C60E 08E8 0001 0001             		bset	#1,1(a0)
0001C614                            
0001C614                            loc_1A4DC:
0001C614 42A8 003C                  		clr.l	$3C(a0)
0001C618 4A28 0029                  		tst.b	$29(a0)
0001C61C 6700                       		beq.s	loc_1A4EA
0001C61E 5428 0024                  		addq.b	#2,$24(a0)
0001C622                            
0001C622                            loc_1A4EA:
0001C622 2028 003C                  		move.l	$3C(a0),d0
0001C626 2228 0038                  		move.l	$38(a0),d1
0001C62A D280                       		add.l	d0,d1
0001C62C 4841                       		swap	d1
0001C62E 3141 000C                  		move.w	d1,$C(a0)
0001C632 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C638 6600                       		bne.s	loc_1A524
0001C63A 4A68 0030                  		tst.w	$30(a0)
0001C63E 6A00                       		bpl.s	loc_1A524
0001C640 70F6                       		moveq	#-$A,d0
0001C642 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C648 6F00                       		ble.s	loc_1A514
0001C64A 700E                       		moveq	#$E,d0
0001C64C                            
0001C64C                            loc_1A514:
0001C64C D240                       		add.w	d0,d1
0001C64E 2268 0034                  		movea.l	$34(a0),a1
0001C652 3341 000C                  		move.w	d1,$C(a1)
0001C656 3368 0008 0008             		move.w	8(a0),8(a1)
0001C65C                            
0001C65C                            loc_1A524:
0001C65C 323C 002B                  		move.w	#$2B,d1
0001C660 343C 0060                  		move.w	#$60,d2
0001C664 363C 0061                  		move.w	#$61,d3
0001C668 3828 0008                  		move.w	8(a0),d4
0001C66C 4EB9 0001 1562             		jsr	SolidObject
0001C672 7000                       		moveq	#0,d0
0001C674 3228 003C                  		move.w	$3C(a0),d1
0001C678 6A00                       		bpl.s	loc_1A550
0001C67A 4441                       		neg.w	d1
0001C67C 5141                       		subq.w	#8,d1
0001C67E 6500                       		bcs.s	loc_1A55C
0001C680 5200                       		addq.b	#1,d0
0001C682 E841                       		asr.w	#4,d1
0001C684 D041                       		add.w	d1,d0
0001C686 6000                       		bra.s	loc_1A55C
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            loc_1A550:
0001C688 0441 0027                  		subi.w	#$27,d1
0001C68C 6500                       		bcs.s	loc_1A55C
0001C68E 5200                       		addq.b	#1,d0
0001C690 E841                       		asr.w	#4,d1
0001C692 D041                       		add.w	d1,d0
0001C694                            
0001C694                            loc_1A55C:
0001C694 1140 001A                  		move.b	d0,$1A(a0)
0001C698 3038 D008                  		move.w	($FFFFD008).w,d0
0001C69C 9068 0008                  		sub.w	8(a0),d0
0001C6A0 6B00                       		bmi.s	loc_1A578
0001C6A2 0440 0140                  		subi.w	#$140,d0
0001C6A6 6B00                       		bmi.s	loc_1A578
0001C6A8 4A28 0001                  		tst.b	1(a0)
0001C6AC 6A00 FED2                  		bpl.w	Obj84_Delete
0001C6B0                            
0001C6B0                            loc_1A578:
0001C6B0 4EF9 0000 F180             		jmp	DisplaySprite
0001C6B6                            ; ===========================================================================
0001C6B6                            
0001C6B6                            loc_1A57E:				; XREF: Obj84_Index
0001C6B6 7000                       		moveq	#0,d0
0001C6B8 1028 0028                  		move.b	$28(a0),d0
0001C6BC 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C6C0 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C6C4 6000 FF5C                  		bra.w	loc_1A4EA
0001C6C8                            ; ===========================================================================
0001C6C8 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C6CA 0000                       		dc.w loc_1A598-off_1A590
0001C6CC 0000                       		dc.w loc_1A604-off_1A590
0001C6CE 0000                       		dc.w loc_1A604-off_1A590
0001C6D0                            ; ===========================================================================
0001C6D0                            
0001C6D0                            loc_1A598:				; XREF: off_1A590
0001C6D0 4A28 0029                  		tst.b	$29(a0)
0001C6D4 6600                       		bne.s	loc_1A5D4
0001C6D6 2268 0034                  		movea.l	$34(a0),a1
0001C6DA 4A29 0021                  		tst.b	$21(a1)
0001C6DE 6600                       		bne.s	loc_1A5B4
0001C6E0 6100 D284                  		bsr.w	BossDefeated
0001C6E4 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C6EC                            
0001C6EC                            loc_1A5B4:
0001C6EC 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C6F4 6400                       		bcc.s	locret_1A602
0001C6F6 42A8 003C                  		clr.l	$3C(a0)
0001C6FA 2268 0034                  		movea.l	$34(a0),a1
0001C6FE 5369 0032                  		subq.w	#1,$32(a1)
0001C702 4269 0030                  		clr.w	$30(a1)
0001C706 5528 0024                  		subq.b	#2,$24(a0)
0001C70A 4E75                       		rts	
0001C70C                            ; ===========================================================================
0001C70C                            
0001C70C                            loc_1A5D4:
0001C70C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C712 6C00                       		bge.s	loc_1A5E4
0001C714 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C71C                            
0001C71C                            loc_1A5E4:
0001C71C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C724 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C72A 6E00                       		bgt.s	locret_1A602
0001C72C 4268 003E                  		clr.w	$3E(a0)
0001C730 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C736 4228 0029                  		clr.b	$29(a0)
0001C73A                            
0001C73A                            locret_1A602:
0001C73A 4E75                       		rts	
0001C73C                            ; ===========================================================================
0001C73C                            
0001C73C                            loc_1A604:				; XREF: off_1A590
0001C73C 08E8 0001 0001             		bset	#1,1(a0)
0001C742 4A28 0029                  		tst.b	$29(a0)
0001C746 6600                       		bne.s	loc_1A646
0001C748 2268 0034                  		movea.l	$34(a0),a1
0001C74C 4A29 0021                  		tst.b	$21(a1)
0001C750 6600                       		bne.s	loc_1A626
0001C752 6100 D212                  		bsr.w	BossDefeated
0001C756 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C75E                            
0001C75E                            loc_1A626:
0001C75E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C766 6400                       		bcc.s	locret_1A674
0001C768 42A8 003C                  		clr.l	$3C(a0)
0001C76C 2268 0034                  		movea.l	$34(a0),a1
0001C770 5369 0032                  		subq.w	#1,$32(a1)
0001C774 4269 0030                  		clr.w	$30(a1)
0001C778 5528 0024                  		subq.b	#2,$24(a0)
0001C77C 4E75                       		rts	
0001C77E                            ; ===========================================================================
0001C77E                            
0001C77E                            loc_1A646:
0001C77E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C784 6D00                       		blt.s	loc_1A656
0001C786 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C78E                            
0001C78E                            loc_1A656:
0001C78E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C796 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C79C 6D00                       		blt.s	locret_1A674
0001C79E 4268 003E                  		clr.w	$3E(a0)
0001C7A2 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C7A8 4228 0029                  		clr.b	$29(a0)
0001C7AC                            
0001C7AC                            locret_1A674:
0001C7AC 4E75                       		rts	
0001C7AE                            ; ===========================================================================
0001C7AE                            ; ---------------------------------------------------------------------------
0001C7AE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C7AE                            ; ---------------------------------------------------------------------------
0001C7AE                            Map_obj84:
0001C7AE                            	include "_maps\obj84.asm"
0001C7AE                            ; ---------------------------------------------------------------------------
0001C7AE                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C7AE                            ; ---------------------------------------------------------------------------
0001C7AE 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C7B2 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C7B6 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C7BA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C7BE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C7C2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C7C6 06                         byte_1A68E:	dc.b 6
0001C7C7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7CC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7D1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7D6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7DB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7E0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C7E5 08                         byte_1A6AD:	dc.b 8
0001C7E6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C7EB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C7F0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C7F5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C7FA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C7FF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C804 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C809 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C80E 0A                         byte_1A6D6:	dc.b $A
0001C80F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C814 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C819 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C81E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C823 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C828 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C82D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C832 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C837 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C83C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C841 0C                         byte_1A709:	dc.b $C
0001C842 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C847 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C84C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C851 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C856 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C85B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C860 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C865 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C86A F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C86F F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C874 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C879 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C87E 0D                         byte_1A746:	dc.b $D
0001C87F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C884 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C889 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C88E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C893 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C898 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C89D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C8A2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C8A7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8AC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8B1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C8B6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C8BB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C8C0 0E                         byte_1A788:	dc.b $E
0001C8C1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C8C6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C8CB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C8D0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C8D5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C8DA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C8DF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C8E4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C8E9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8EE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8F3 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C8F8 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C8FD 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C902 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C907 02                         byte_1A7CF:	dc.b 2
0001C908 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C90D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C912                            		even
0001C912                            		even
0001C912                            
0001C912                            ; ===========================================================================
0001C912                            ; ---------------------------------------------------------------------------
0001C912                            ; Object 86 - energy balls (FZ)
0001C912                            ; ---------------------------------------------------------------------------
0001C912                            
0001C912                            Obj86:					; XREF: Obj_Index
0001C912 7000                       		moveq	#0,d0
0001C914 1028 0024                  		move.b	$24(a0),d0
0001C918 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C91C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C920                            ; ===========================================================================
0001C920 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C922 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C924 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C926 0000                       		dc.w loc_1A962-Obj86_Index
0001C928 0000                       		dc.w loc_1A982-Obj86_Index
0001C92A                            ; ===========================================================================
0001C92A                            
0001C92A                            Obj86_Main:				; XREF: Obj86_Index
0001C92A 317C 2588 0008             		move.w	#$2588,8(a0)
0001C930 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C936 317C 0300 0002             		move.w	#$300,2(a0)
0001C93C 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C944 117C 0000 001C             		move.b	#0,$1C(a0)
0001C94A 117C 0003 0018             		move.b	#3,$18(a0)
0001C950 117C 0008 0017             		move.b	#8,$17(a0)
0001C956 117C 0008 0016             		move.b	#8,$16(a0)
0001C95C 117C 0004 0001             		move.b	#4,1(a0)
0001C962 08E8 0007 0001             		bset	#7,1(a0)
0001C968 5428 0024                  		addq.b	#2,$24(a0)
0001C96C                            
0001C96C                            Obj86_Generator:			; XREF: Obj86_Index
0001C96C 2268 0034                  		movea.l	$34(a0),a1
0001C970 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C976 6600                       		bne.s	loc_1A850
0001C978 10BC 003F                  		move.b	#$3F,(a0)
0001C97C 117C 0000 0024             		move.b	#0,$24(a0)
0001C982 4EF9 0000 F180             		jmp	DisplaySprite
0001C988                            ; ===========================================================================
0001C988                            
0001C988                            loc_1A850:
0001C988 117C 0000 001C             		move.b	#0,$1C(a0)
0001C98E 4A28 0029                  		tst.b	$29(a0)
0001C992 6700                       		beq.s	loc_1A86C
0001C994 5428 0024                  		addq.b	#2,$24(a0)
0001C998 117C 0001 001C             		move.b	#1,$1C(a0)
0001C99E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C9A4                            
0001C9A4                            loc_1A86C:
0001C9A4 323C 0013                  		move.w	#$13,d1
0001C9A8 343C 0008                  		move.w	#8,d2
0001C9AC 363C 0011                  		move.w	#$11,d3
0001C9B0 3828 0008                  		move.w	8(a0),d4
0001C9B4 4EB9 0001 1562             		jsr	SolidObject
0001C9BA 3038 D008                  		move.w	($FFFFD008).w,d0
0001C9BE 9068 0008                  		sub.w	8(a0),d0
0001C9C2 6B00                       		bmi.s	loc_1A89A
0001C9C4 0440 0140                  		subi.w	#$140,d0
0001C9C8 6B00                       		bmi.s	loc_1A89A
0001C9CA 4A28 0001                  		tst.b	1(a0)
0001C9CE 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C9D2                            
0001C9D2                            loc_1A89A:
0001C9D2 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C9D6 4EB9 0000 C132             		jsr	AnimateSprite
0001C9DC 4EF9 0000 F180             		jmp	DisplaySprite
0001C9E2                            ; ===========================================================================
0001C9E2                            
0001C9E2                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C9E2 4A28 0029                  		tst.b	$29(a0)
0001C9E6 6700 0000                  		beq.w	loc_1A954
0001C9EA 4228 0029                  		clr.b	$29(a0)
0001C9EE D068 0030                  		add.w	$30(a0),d0
0001C9F2 0240 001E                  		andi.w	#$1E,d0
0001C9F6 D4C0                       		adda.w	d0,a2
0001C9F8 5868 0030                  		addq.w	#4,$30(a0)
0001C9FC 4268 0032                  		clr.w	$32(a0)
0001CA00 7403                       		moveq	#3,d2
0001CA02                            
0001CA02                            Obj86_Loop:
0001CA02 4EB9 0000 F62A             		jsr	SingleObjLoad2
0001CA08 6600 0000                  		bne.w	loc_1A954
0001CA0C 12BC 0086                  		move.b	#$86,(a1)
0001CA10 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA16 337C 053C 000C             		move.w	#$53C,$C(a1)
0001CA1C 137C 0008 0024             		move.b	#8,$24(a1)
0001CA22 337C 2300 0002             		move.w	#$2300,2(a1)
0001CA28 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001CA30 137C 000C 0016             		move.b	#$C,$16(a1)
0001CA36 137C 000C 0017             		move.b	#$C,$17(a1)
0001CA3C 137C 0000 0020             		move.b	#0,$20(a1)
0001CA42 137C 0003 0018             		move.b	#3,$18(a1)
0001CA48 337C 003E 0028             		move.w	#$3E,$28(a1)
0001CA4E 137C 0004 0001             		move.b	#4,1(a1)
0001CA54 08E9 0007 0001             		bset	#7,1(a1)
0001CA5A 2348 0034                  		move.l	a0,$34(a1)
0001CA5E 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CA64 3228 0032                  		move.w	$32(a0),d1
0001CA68 C3FC FFB1                  		muls.w	#-$4F,d1
0001CA6C 0641 2578                  		addi.w	#$2578,d1
0001CA70 0240 001F                  		andi.w	#$1F,d0
0001CA74 0440 0010                  		subi.w	#$10,d0
0001CA78 D041                       		add.w	d1,d0
0001CA7A 3340 0030                  		move.w	d0,$30(a1)
0001CA7E 5268 0032                  		addq.w	#1,$32(a0)
0001CA82 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001CA88 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001CA8C                            
0001CA8C                            loc_1A954:
0001CA8C 4A68 0032                  		tst.w	$32(a0)
0001CA90 6600                       		bne.s	loc_1A95E
0001CA92 5428 0024                  		addq.b	#2,$24(a0)
0001CA96                            
0001CA96                            loc_1A95E:
0001CA96 6000 FF0C                  		bra.w	loc_1A86C
0001CA9A                            ; ===========================================================================
0001CA9A                            
0001CA9A                            loc_1A962:				; XREF: Obj86_Index
0001CA9A 117C 0002 001C             		move.b	#2,$1C(a0)
0001CAA0 4A68 0038                  		tst.w	$38(a0)
0001CAA4 6600                       		bne.s	loc_1A97E
0001CAA6 117C 0002 0024             		move.b	#2,$24(a0)
0001CAAC 2268 0034                  		movea.l	$34(a0),a1
0001CAB0 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CAB6                            
0001CAB6                            loc_1A97E:
0001CAB6 6000 FEEC                  		bra.w	loc_1A86C
0001CABA                            ; ===========================================================================
0001CABA                            
0001CABA                            loc_1A982:				; XREF: Obj86_Index
0001CABA 7000                       		moveq	#0,d0
0001CABC 1028 0025                  		move.b	$25(a0),d0
0001CAC0 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CAC4 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CAC8 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CACC 4EB9 0000 C132             		jsr	AnimateSprite
0001CAD2 4EF9 0000 F180             		jmp	DisplaySprite
0001CAD8                            ; ===========================================================================
0001CAD8 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CADA 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CADC 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            loc_1A9A6:				; XREF: Obj86_Index2
0001CADE 3028 0030                  		move.w	$30(a0),d0
0001CAE2 9068 0008                  		sub.w	8(a0),d0
0001CAE6 E940                       		asl.w	#4,d0
0001CAE8 3140 0010                  		move.w	d0,$10(a0)
0001CAEC 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CAF2 5428 0025                  		addq.b	#2,$25(a0)
0001CAF6 4E75                       		rts	
0001CAF8                            ; ===========================================================================
0001CAF8                            
0001CAF8                            loc_1A9C0:				; XREF: Obj86_Index2
0001CAF8 4A68 0010                  		tst.w	$10(a0)
0001CAFC 6700                       		beq.s	loc_1A9E6
0001CAFE 4EB9 0000 F166             		jsr	SpeedToPos
0001CB04 3028 0008                  		move.w	8(a0),d0
0001CB08 9068 0030                  		sub.w	$30(a0),d0
0001CB0C 6400                       		bcc.s	loc_1A9E6
0001CB0E 4268 0010                  		clr.w	$10(a0)
0001CB12 D168 0008                  		add.w	d0,8(a0)
0001CB16 2268 0034                  		movea.l	$34(a0),a1
0001CB1A 5369 0032                  		subq.w	#1,$32(a1)
0001CB1E                            
0001CB1E                            loc_1A9E6:
0001CB1E 117C 0000 001C             		move.b	#0,$1C(a0)
0001CB24 5368 0028                  		subq.w	#1,$28(a0)
0001CB28 6600                       		bne.s	locret_1AA1C
0001CB2A 5428 0025                  		addq.b	#2,$25(a0)
0001CB2E 117C 0001 001C             		move.b	#1,$1C(a0)
0001CB34 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CB3A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CB40 7000                       		moveq	#0,d0
0001CB42 3038 D008                  		move.w	($FFFFD008).w,d0
0001CB46 9068 0008                  		sub.w	8(a0),d0
0001CB4A 3140 0010                  		move.w	d0,$10(a0)
0001CB4E 317C 0140 0012             		move.w	#$140,$12(a0)
0001CB54                            
0001CB54                            locret_1AA1C:
0001CB54 4E75                       		rts	
0001CB56                            ; ===========================================================================
0001CB56                            
0001CB56                            loc_1AA1E:				; XREF: Obj86_Index2
0001CB56 4EB9 0000 F166             		jsr	SpeedToPos
0001CB5C 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CB62 6400                       		bcc.s	loc_1AA34
0001CB64 5368 0028                  		subq.w	#1,$28(a0)
0001CB68 6700                       		beq.s	loc_1AA34
0001CB6A 4E75                       		rts	
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            loc_1AA34:
0001CB6C 2268 0034                  		movea.l	$34(a0),a1
0001CB70 5369 0038                  		subq.w	#1,$38(a1)
0001CB74 6000 FA0A                  		bra.w	Obj84_Delete
0001CB78                            ; ===========================================================================
0001CB78                            Ani_obj86:
0001CB78                            	include "_anim\obj86.asm"
0001CB78                            ; ---------------------------------------------------------------------------
0001CB78                            ; Animation script - energy ball launcher (FZ)
0001CB78                            ; ---------------------------------------------------------------------------
0001CB78 0000                       		dc.w byte_1AA46-Ani_obj86
0001CB7A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CB7C 0000                       		dc.w byte_1AA50-Ani_obj86
0001CB7E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CB82 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CB88 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CB8E                            		even
0001CB8E                            		even
0001CB8E                            
0001CB8E                            ; ---------------------------------------------------------------------------
0001CB8E                            ; Sprite mappings - energy ball	launcher (FZ)
0001CB8E                            ; ---------------------------------------------------------------------------
0001CB8E                            Map_obj86:
0001CB8E                            	include "_maps\obj86.asm"
0001CB8E                            ; ---------------------------------------------------------------------------
0001CB8E                            ; Sprite mappings - energy ball	launcher (FZ)
0001CB8E                            ; ---------------------------------------------------------------------------
0001CB8E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CB92 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CB96 01                         byte_1AA5E:	dc.b 1
0001CB97 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CB9C 01                         byte_1AA64:	dc.b 1
0001CB9D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CBA2 01                         byte_1AA6A:	dc.b 1
0001CBA3 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CBA8 01                         byte_1AA70:	dc.b 1
0001CBA9 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CBAE                            		even
0001CBAE                            		even
0001CBAE                            
0001CBAE                            Ani_obj86a:
0001CBAE                            	include "_anim\obj86a.asm"
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE                            ; Animation script - energy balls (FZ)
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CBB0 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CBB2 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CBC1 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CBD0 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CBD4 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CBDE                            		even
0001CBDE                            		even
0001CBDE                            
0001CBDE                            ; ---------------------------------------------------------------------------
0001CBDE                            ; Sprite mappings - energy balls (FZ)
0001CBDE                            ; ---------------------------------------------------------------------------
0001CBDE                            Map_obj86a:
0001CBDE                            	include "_maps\obj86a.asm"
0001CBDE                            ; ---------------------------------------------------------------------------
0001CBDE                            ; Sprite mappings - energy balls (FZ)
0001CBDE                            ; ---------------------------------------------------------------------------
0001CBDE 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CBE2 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CBE6 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CBEA 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CBEE 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CBF2 0000                       		dc.w byte_1AB20-Map_obj86a
0001CBF4 02                         byte_1AABC:	dc.b 2
0001CBF5 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CBFA 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CBFF 02                         byte_1AAC7:	dc.b 2
0001CC00 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CC05 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CC0A 02                         byte_1AAD2:	dc.b 2
0001CC0B F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CC10 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CC15 02                         byte_1AADD:	dc.b 2
0001CC16 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CC1B 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CC20 02                         byte_1AAE8:	dc.b 2
0001CC21 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CC26 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CC2B 02                         byte_1AAF3:	dc.b 2
0001CC2C F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CC31 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CC36 01                         byte_1AAFE:	dc.b 1
0001CC37 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CC3C 01                         byte_1AB04:	dc.b 1
0001CC3D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CC42 02                         byte_1AB0A:	dc.b 2
0001CC43 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CC48 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CC4D 02                         byte_1AB15:	dc.b 2
0001CC4E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CC53 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CC58 00                         byte_1AB20:	dc.b 0
0001CC5A 00                         		even
0001CC5A 00                         		even
0001CC5A                            
0001CC5A                            ; ===========================================================================
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A                            ; Object 3E - prison capsule
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A                            
0001CC5A                            Obj3E:					; XREF: Obj_Index
0001CC5A 7000                       		moveq	#0,d0
0001CC5C 1028 0024                  		move.b	$24(a0),d0
0001CC60 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CC64 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CC68 3028 0008                  		move.w	8(a0),d0
0001CC6C 0240 FF80                  		andi.w	#$FF80,d0
0001CC70 3238 F700                  		move.w	($FFFFF700).w,d1
0001CC74 0441 0080                  		subi.w	#$80,d1
0001CC78 0241 FF80                  		andi.w	#$FF80,d1
0001CC7C 9041                       		sub.w	d1,d0
0001CC7E 0C40 0280                  		cmpi.w	#$280,d0
0001CC82 6200                       		bhi.s	Obj3E_Delete
0001CC84 4EF9 0000 F180             		jmp	DisplaySprite
0001CC8A                            ; ===========================================================================
0001CC8A                            
0001CC8A                            Obj3E_Delete:
0001CC8A 4EF9 0000 F1BC             		jmp	DeleteObject
0001CC90                            ; ===========================================================================
0001CC90 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CC92 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CC94 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CC96 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC98 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC9A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CC9C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CC9E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CCA0                            
0001CCA0 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CCA4 040C 0501                  		dc.b 4,	$C, 5, 1
0001CCA8 0610 0403                  		dc.b 6,	$10, 4,	3
0001CCAC 0810 0305                  		dc.b 8,	$10, 3,	5
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            Obj3E_Main:				; XREF: Obj3E_Index
0001CCB0 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CCB8 317C 049D 0002             		move.w	#$49D,2(a0)
0001CCBE 117C 0004 0001             		move.b	#4,1(a0)
0001CCC4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CCCA 7000                       		moveq	#0,d0
0001CCCC 1028 0028                  		move.b	$28(a0),d0
0001CCD0 E548                       		lsl.w	#2,d0
0001CCD2 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CCD6 1159 0024                  		move.b	(a1)+,$24(a0)
0001CCDA 1159 0019                  		move.b	(a1)+,$19(a0)
0001CCDE 1159 0018                  		move.b	(a1)+,$18(a0)
0001CCE2 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CCE6 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CCEA 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CCEC 117C 0006 0020             		move.b	#6,$20(a0)
0001CCF2 117C 0008 0021             		move.b	#8,$21(a0)
0001CCF8                            
0001CCF8                            Obj3E_Not02:
0001CCF8 4E75                       		rts	
0001CCFA                            ; ===========================================================================
0001CCFA                            
0001CCFA                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CCFA 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CD00 6700                       		beq.s	Obj3E_ChkOpened
0001CD02 323C 002B                  		move.w	#$2B,d1
0001CD06 343C 0018                  		move.w	#$18,d2
0001CD0A 363C 0018                  		move.w	#$18,d3
0001CD0E 3828 0008                  		move.w	8(a0),d4
0001CD12 4EF9 0001 1562             		jmp	SolidObject
0001CD18                            ; ===========================================================================
0001CD18                            
0001CD18                            Obj3E_ChkOpened:
0001CD18 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CD1C 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CD1E 4228 0025                  		clr.b	$25(a0)
0001CD22 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CD28 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CD2E                            
0001CD2E                            Obj3E_DoOpen:
0001CD2E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CD34 4E75                       		rts	
0001CD36                            ; ===========================================================================
0001CD36                            
0001CD36                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CD36 323C 0017                  		move.w	#$17,d1
0001CD3A 343C 0008                  		move.w	#8,d2
0001CD3E 363C 0008                  		move.w	#8,d3
0001CD42 3828 0008                  		move.w	8(a0),d4
0001CD46 4EB9 0001 1562             		jsr	SolidObject
0001CD4C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CD52 4EB9 0000 C132             		jsr	AnimateSprite
0001CD58 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CD5E 4A28 0025                  		tst.b	$25(a0)
0001CD62 6700                       		beq.s	locret_1AC60
0001CD64 5068 000C                  		addq.w	#8,$C(a0)
0001CD68 117C 000A 0024             		move.b	#$A,$24(a0)
0001CD6E 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CD74 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CD78 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CD7C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CD82 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CD88 4228 0025                  		clr.b	$25(a0)
0001CD8C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CD92 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CD98                            
0001CD98                            locret_1AC60:
0001CD98 4E75                       		rts	
0001CD9A                            ; ===========================================================================
0001CD9A                            
0001CD9A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CD9A 7007                       		moveq	#7,d0
0001CD9C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CDA0 6600                       		bne.s	loc_1ACA0
0001CDA2 4EB9 0000 F614             		jsr	SingleObjLoad
0001CDA8 6600                       		bne.s	loc_1ACA0
0001CDAA 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CDAE 3368 0008 0008             		move.w	8(a0),8(a1)
0001CDB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CDBA 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CDC0 7200                       		moveq	#0,d1
0001CDC2 1200                       		move.b	d0,d1
0001CDC4 E409                       		lsr.b	#2,d1
0001CDC6 0441 0020                  		subi.w	#$20,d1
0001CDCA D369 0008                  		add.w	d1,8(a1)
0001CDCE E048                       		lsr.w	#8,d0
0001CDD0 E608                       		lsr.b	#3,d0
0001CDD2 D169 000C                  		add.w	d0,$C(a1)
0001CDD6                            
0001CDD6                            loc_1ACA0:
0001CDD6 5368 001E                  		subq.w	#1,$1E(a0)
0001CDDA 6700                       		beq.s	Obj3E_MakeAnimal
0001CDDC 4E75                       		rts	
0001CDDE                            ; ===========================================================================
0001CDDE                            
0001CDDE                            Obj3E_MakeAnimal:
0001CDDE 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CDE4 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CDEA 117C 0006 001A             		move.b	#6,$1A(a0)
0001CDF0 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CDF6 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CDFC 7C07                       		moveq	#7,d6
0001CDFE 3A3C 009A                  		move.w	#$9A,d5
0001CE02 78E4                       		moveq	#-$1C,d4
0001CE04                            
0001CE04                            Obj3E_Loop:
0001CE04 4EB9 0000 F614             		jsr	SingleObjLoad
0001CE0A 6600                       		bne.s	locret_1ACF8
0001CE0C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CE10 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE1C D969 0008                  		add.w	d4,8(a1)
0001CE20 5E44                       		addq.w	#7,d4
0001CE22 3345 0036                  		move.w	d5,$36(a1)
0001CE26 5145                       		subq.w	#8,d5
0001CE28 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CE2C                            
0001CE2C                            locret_1ACF8:
0001CE2C 4E75                       		rts	
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CE2E 7007                       		moveq	#7,d0
0001CE30 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CE34 6600                       		bne.s	loc_1AD38
0001CE36 4EB9 0000 F614             		jsr	SingleObjLoad
0001CE3C 6600                       		bne.s	loc_1AD38
0001CE3E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CE42 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE4E 4EB9 0000 2B54             		jsr	(RandomNumber).l
0001CE54 0240 001F                  		andi.w	#$1F,d0
0001CE58 5D40                       		subq.w	#6,d0
0001CE5A 4A41                       		tst.w	d1
0001CE5C 6A00                       		bpl.s	loc_1AD2E
0001CE5E 4440                       		neg.w	d0
0001CE60                            
0001CE60                            loc_1AD2E:
0001CE60 D169 0008                  		add.w	d0,8(a1)
0001CE64 337C 000C 0036             		move.w	#$C,$36(a1)
0001CE6A                            
0001CE6A                            loc_1AD38:
0001CE6A 5368 001E                  		subq.w	#1,$1E(a0)
0001CE6E 6600                       		bne.s	locret_1AD48
0001CE70 5428 0024                  		addq.b	#2,$24(a0)
0001CE74 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CE7A                            
0001CE7A                            locret_1AD48:
0001CE7A 4E75                       		rts	
0001CE7C                            ; ===========================================================================
0001CE7C                            
0001CE7C                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CE7C 703E                       		moveq	#$3E,d0
0001CE7E 7228                       		moveq	#$28,d1
0001CE80 7440                       		moveq	#$40,d2
0001CE82 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CE86                            
0001CE86                            Obj3E_FindObj28:
0001CE86 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CE88 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CE8A D2C2                       		adda.w	d2,a1		; next object RAM
0001CE8C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CE90                            
0001CE90 4EB9 0001 081E             		jsr	GotThroughAct
0001CE96 4EF9 0000 F1BC             		jmp	DeleteObject
0001CE9C                            ; ===========================================================================
0001CE9C                            
0001CE9C                            Obj3E_Obj28Found:
0001CE9C 4E75                       		rts	
0001CE9E                            ; ===========================================================================
0001CE9E                            Ani_obj3E:
0001CE9E                            	include "_anim\obj3E.asm"
0001CE9E                            ; ---------------------------------------------------------------------------
0001CE9E                            ; Animation script - prison capsule
0001CE9E                            ; ---------------------------------------------------------------------------
0001CE9E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CEA0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CEA2 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CEA6                            		even
0001CEA6                            		even
0001CEA6                            
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6                            ; Sprite mappings - prison capsule
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6                            Map_obj3E:
0001CEA6                            	include "_maps\obj3E.asm"
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6                            ; Sprite mappings - prison capsule
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CEAA 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CEAE 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CEB2 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CEB4 07                         byte_1AD82:	dc.b 7
0001CEB5 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CEBA E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CEBF E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CEC4 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CEC9 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CECE 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CED3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CED8 01                         byte_1ADA6:	dc.b 1
0001CED9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CEDE 06                         byte_1ADAC:	dc.b 6
0001CEDF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CEE4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CEE9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CEEE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CEF3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CEF8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CEFD 01                         byte_1ADCB:	dc.b 1
0001CEFE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CF03 02                         byte_1ADD1:	dc.b 2
0001CF04 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CF09 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CF0E 01                         byte_1ADDC:	dc.b 1
0001CF0F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CF14 00                         byte_1ADE2:	dc.b 0
0001CF16 00                         		even
0001CF16 00                         		even
0001CF16                            
0001CF16                            ; ---------------------------------------------------------------------------
0001CF16                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CF16                            ; ---------------------------------------------------------------------------
0001CF16                            
0001CF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF16                            
0001CF16                            
0001CF16                            TouchResponse:				; XREF: Obj01
0001CF16 4E71                       		nop	
0001CF18 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CF1C 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CF20 5142                       		subq.w	#8,d2
0001CF22 7A00                       		moveq	#0,d5
0001CF24 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CF28 5705                       		subq.b	#3,d5
0001CF2A 9645                       		sub.w	d5,d3
0001CF2C 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CF32 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CF34 0643 000C                  		addi.w	#$C,d3
0001CF38 7A0A                       		moveq	#$A,d5
0001CF3A                            
0001CF3A                            Touch_NoDuck:
0001CF3A 383C 0010                  		move.w	#$10,d4
0001CF3E DA45                       		add.w	d5,d5
0001CF40 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CF44 3C3C 005F                  		move.w	#$5F,d6
0001CF48                            
0001CF48                            Touch_Loop:
0001CF48 4A29 0001                  		tst.b	1(a1)
0001CF4C 6A00                       		bpl.s	Touch_NextObj
0001CF4E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CF52 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CF54                            
0001CF54                            Touch_NextObj:
0001CF54 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CF58 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CF5C                            
0001CF5C 7000                       		moveq	#0,d0
0001CF5E 4E75                       		rts	
0001CF60                            ; ===========================================================================
0001CF60 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CF62 0C14                       		dc.b   $C, $14
0001CF64 140C                       		dc.b  $14,  $C
0001CF66 0410                       		dc.b	4, $10
0001CF68 0C12                       		dc.b   $C, $12
0001CF6A 1010                       		dc.b  $10, $10
0001CF6C 0606                       		dc.b	6,   6
0001CF6E 180C                       		dc.b  $18,  $C
0001CF70 0C10                       		dc.b   $C, $10
0001CF72 100C                       		dc.b  $10,  $C
0001CF74 0808                       		dc.b	8,   8
0001CF76 1410                       		dc.b  $14, $10
0001CF78 1408                       		dc.b  $14,   8
0001CF7A 0E0E                       		dc.b   $E,  $E
0001CF7C 1818                       		dc.b  $18, $18
0001CF7E 2810                       		dc.b  $28, $10
0001CF80 1018                       		dc.b  $10, $18
0001CF82 0810                       		dc.b	8, $10
0001CF84 2070                       		dc.b  $20, $70
0001CF86 4020                       		dc.b  $40, $20
0001CF88 8020                       		dc.b  $80, $20
0001CF8A 2020                       		dc.b  $20, $20
0001CF8C 0808                       		dc.b	8,   8
0001CF8E 0404                       		dc.b	4,   4
0001CF90 2008                       		dc.b  $20,   8
0001CF92 0C0C                       		dc.b   $C,  $C
0001CF94 0804                       		dc.b	8,   4
0001CF96 1804                       		dc.b  $18,   4
0001CF98 2804                       		dc.b  $28,   4
0001CF9A 0408                       		dc.b	4,   8
0001CF9C 0418                       		dc.b	4, $18
0001CF9E 0428                       		dc.b	4, $28
0001CFA0 0420                       		dc.b	4, $20
0001CFA2 1818                       		dc.b  $18, $18
0001CFA4 0C18                       		dc.b   $C, $18
0001CFA6 4808                       		dc.b  $48,   8
0001CFA8                            ; ===========================================================================
0001CFA8                            
0001CFA8                            Touch_Height:				; XREF: TouchResponse
0001CFA8 0240 003F                  		andi.w	#$3F,d0
0001CFAC D040                       		add.w	d0,d0
0001CFAE 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CFB2 7200                       		moveq	#0,d1
0001CFB4 121A                       		move.b	(a2)+,d1
0001CFB6 4A28 003A                  		tst.b	biting(a0)
0001CFBA 6700                       		beq.s	@not_biting
0001CFBC 5801                       		addq.b	#4,d1
0001CFBE                            		
0001CFBE                            @not_biting:
0001CFBE 3029 0008                  		move.w	8(a1),d0
0001CFC2 9041                       		sub.w	d1,d0
0001CFC4 9042                       		sub.w	d2,d0
0001CFC6 6400                       		bcc.s	loc_1AE98
0001CFC8 D241                       		add.w	d1,d1
0001CFCA D041                       		add.w	d1,d0
0001CFCC 6500                       		bcs.s	Touch_Width
0001CFCE 6000 FF84                  		bra.w	Touch_NextObj
0001CFD2                            ; ===========================================================================
0001CFD2                            
0001CFD2                            loc_1AE98:
0001CFD2 B044                       		cmp.w	d4,d0
0001CFD4 6200 FF7E                  		bhi.w	Touch_NextObj
0001CFD8                            
0001CFD8                            Touch_Width:
0001CFD8 7200                       		moveq	#0,d1
0001CFDA 121A                       		move.b	(a2)+,d1
0001CFDC 3029 000C                  		move.w	$C(a1),d0
0001CFE0 9041                       		sub.w	d1,d0
0001CFE2 9043                       		sub.w	d3,d0
0001CFE4 6400                       		bcc.s	loc_1AEB6
0001CFE6 D241                       		add.w	d1,d1
0001CFE8 D240                       		add.w	d0,d1
0001CFEA 6500                       		bcs.s	Touch_ChkValue
0001CFEC 6000 FF66                  		bra.w	Touch_NextObj
0001CFF0                            ; ===========================================================================
0001CFF0                            
0001CFF0                            loc_1AEB6:
0001CFF0 B045                       		cmp.w	d5,d0
0001CFF2 6200 FF60                  		bhi.w	Touch_NextObj
0001CFF6                            
0001CFF6                            Touch_ChkValue:
0001CFF6 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CFFA 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CFFE 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001D002 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001D006 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001D00A 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001D00C 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001D010                            
0001D010                            ; touch	response is $40-$7F
0001D010                            
0001D010 1029 0020                  		move.b	$20(a1),d0
0001D014 0200 003F                  		andi.b	#$3F,d0
0001D018 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001D01C 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001D01E 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001D024 6400 0000                  		bcc.w	locret_1AEF2
0001D028 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001D02C                            
0001D02C                            locret_1AEF2:
0001D02C 4E75                       		rts	
0001D02E                            ; ===========================================================================
0001D02E                            
0001D02E                            Touch_Monitor:
0001D02E 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001D032 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001D034 3028 000C                  		move.w	$C(a0),d0
0001D038 0440 0010                  		subi.w	#$10,d0
0001D03C B069 000C                  		cmp.w	$C(a1),d0
0001D040 6500                       		bcs.s	locret_1AF2E
0001D042 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D046 337C FE80 0012             		move.w	#-$180,$12(a1)
0001D04C 4A29 0025                  		tst.b	$25(a1)
0001D050 6600                       		bne.s	locret_1AF2E
0001D052 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001D056 4E75                       		rts
0001D058                            ; ===========================================================================
0001D058                            
0001D058                            loc_1AF1E:
0001D058 4A28 003A                  		tst.b	biting(a0)
0001D05C 6700 0000                  		beq.w	locret_1AF2E
0001D060 3029 0008                  		move.w	8(a1),d0
0001D064 3228 0008                  		move.w	8(a0),d1
0001D068 0828 0000 0022             		btst	#0,$22(a0)
0001D06E 6600                       		bne.s	@left
0001D070 B240                       		cmp.w	d0,d1
0001D072 6F00                       		ble.s	@do
0001D074 4E75                       		rts
0001D076                            		
0001D076                            	@left:
0001D076 B240                       		cmp.w	d0,d1
0001D078 6C00                       		bge.s	@do
0001D07A 4E75                       		rts
0001D07C                            		
0001D07C                            	@do:
0001D07C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001D080                            
0001D080                            locret_1AF2E:
0001D080 4E75                       		rts	
0001D082                            ; ===========================================================================
0001D082                            
0001D082                            Touch_Enemy:				; XREF: Touch_ChkValue
0001D082 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D086 6600                       		bne.s	loc_1AF40	; if yes, branch
0001D088 4A28 003A                  		tst.b	biting(a0)
0001D08C 6700 0000                  		beq.w	Touch_ChkHurt
0001D090 3029 0008                  		move.w	8(a1),d0
0001D094 3228 0008                  		move.w	8(a0),d1
0001D098 0828 0000 0022             		btst	#0,$22(a0)
0001D09E 6600                       		bne.s	@left
0001D0A0 B240                       		cmp.w	d0,d1
0001D0A2 6F00                       		ble.s	loc_1AF40
0001D0A4 6000 0000                  		bra.w	Touch_ChkHurt
0001D0A8                            		
0001D0A8                            	@left:
0001D0A8 B240                       		cmp.w	d0,d1
0001D0AA 6C00                       		bge.s	loc_1AF40
0001D0AC 6000 0000                  		bra.w	Touch_ChkHurt
0001D0B0                            
0001D0B0                            loc_1AF40:
0001D0B0 4A29 0021                  		tst.b	$21(a1)
0001D0B4 6700                       		beq.s	Touch_KillEnemy
0001D0B6 137C 0000 0020             		move.b	#0,$20(a1)
0001D0BC 5329 0021                  		subq.b	#1,$21(a1)
0001D0C0 6600                       		bne.s	locret_1AF68
0001D0C2 08E9 0007 0022             		bset	#7,$22(a1)
0001D0C8                            
0001D0C8                            locret_1AF68:
0001D0C8 4E75                       		rts	
0001D0CA                            ; ===========================================================================
0001D0CA                            
0001D0CA                            Touch_KillEnemy:
0001D0CA 08E9 0007 0022             		bset	#7,$22(a1)
0001D0D0 7000                       		moveq	#0,d0
0001D0D2 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D0D6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D0DA 0C40 0006                  		cmpi.w	#6,d0
0001D0DE 6500                       		bcs.s	loc_1AF82
0001D0E0 7006                       		moveq	#6,d0
0001D0E2                            
0001D0E2                            loc_1AF82:
0001D0E2 3340 003E                  		move.w	d0,$3E(a1)
0001D0E6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D0EA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D0F0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D0F2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D0F6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D0FC                            
0001D0FC                            loc_1AF9C:
0001D0FC 6100 0000                  		bsr.w	AddPoints
0001D100 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D104 137C 0000 0024             		move.b	#0,$24(a1)
0001D10A 4E75                       		rts	
0001D10C                            ; ===========================================================================
0001D10C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D114                            ; ===========================================================================
0001D114                            
0001D114                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D114 08E9 0007 0022             		bset	#7,$22(a1)
0001D11A                            
0001D11A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D11A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D11E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D120                            
0001D120                            loc_1AFE6:				; XREF: Touch_Hurt
0001D120 70FF                       		moveq	#-1,d0
0001D122 4E75                       		rts	
0001D124                            ; ===========================================================================
0001D124                            
0001D124                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D124 4E71                       		nop	
0001D126 4A68 0030                  		tst.w	$30(a0)
0001D12A 66F4                       		bne.s	loc_1AFE6
0001D12C 2449                       		movea.l	a1,a2
0001D12E                            
0001D12E                            ; End of function TouchResponse
0001D12E                            ; continue straight to HurtSonic
0001D12E                            
0001D12E                            ; ---------------------------------------------------------------------------
0001D12E                            ; Hurting Sonic	subroutine
0001D12E                            ; ---------------------------------------------------------------------------
0001D12E                            
0001D12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D12E                            
0001D12E                            
0001D12E                            HurtSonic:
0001D12E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D132 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D134 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D138 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D13C 4EB9 0000 F614             		jsr	SingleObjLoad
0001D142 6600                       		bne.s	Hurt_Shield
0001D144 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D148 3368 0008 0008             		move.w	8(a0),8(a1)
0001D14E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D154                            
0001D154                            Hurt_Shield:
0001D154 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D15A 117C 0004 0024             		move.b	#4,$24(a0)
0001D160 6100 8588                  		bsr.w	Sonic_ResetOnFloor
0001D164 08E8 0001 0022             		bset	#1,$22(a0)
0001D16A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D170 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D176 0828 0006 0022             		btst	#6,$22(a0)
0001D17C 6700                       		beq.s	Hurt_Reverse
0001D17E 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D184 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D18A                            
0001D18A                            Hurt_Reverse:
0001D18A 3028 0008                  		move.w	8(a0),d0
0001D18E B06A 0008                  		cmp.w	8(a2),d0
0001D192 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D194 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D198                            
0001D198                            Hurt_ChkSpikes:
0001D198 317C 0000 0014             		move.w	#0,$14(a0)
0001D19E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D1A4 317C 0078 0030             		move.w	#$78,$30(a0)
0001D1AA 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D1AE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D1B2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1B4 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D1B8 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1BA 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D1BE                            
0001D1BE                            Hurt_Sound:
0001D1BE 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D1C4 70FF                       		moveq	#-1,d0
0001D1C6 4E75                       		rts	
0001D1C8                            ; ===========================================================================
0001D1C8                            
0001D1C8                            Hurt_NoRings:
0001D1C8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D1CC 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D1D0                            ; End of function HurtSonic
0001D1D0                            
0001D1D0                            ; ---------------------------------------------------------------------------
0001D1D0                            ; Subroutine to	kill Sonic
0001D1D0                            ; ---------------------------------------------------------------------------
0001D1D0                            
0001D1D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1D0                            
0001D1D0                            
0001D1D0                            KillSonic:
0001D1D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D1D4 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001D1D6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D1DC 117C 0006 0024             		move.b	#6,$24(a0)
0001D1E2 6100 8506                  		bsr.w	Sonic_ResetOnFloor
0001D1E6 08E8 0001 0022             		bset	#1,$22(a0)
0001D1EC 317C F900 0012             		move.w	#-$700,$12(a0)
0001D1F2 317C 0000 0010             		move.w	#0,$10(a0)
0001D1F8 317C 0000 0014             		move.w	#0,$14(a0)
0001D1FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D204 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D20A 08E8 0007 0002             		bset	#7,2(a0)
0001D210 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D214 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D218 6600                       		bne.s	Kill_Sound
0001D21A 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D21E                            
0001D21E                            Kill_Sound:
0001D21E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l
0001D224                            
0001D224                            Kill_NoDeath:
0001D224 70FF                       		moveq	#-1,d0
0001D226 4E75                       		rts	
0001D228                            ; End of function KillSonic
0001D228                            
0001D228                            
0001D228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D228                            
0001D228                            
0001D228                            Touch_Special:				; XREF: Touch_ChkValue
0001D228 1229 0020                  		move.b	$20(a1),d1
0001D22C 0201 003F                  		andi.b	#$3F,d1
0001D230 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D234 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D236 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D23A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D23C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D240 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D242 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D246 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D248 4E75                       		rts	
0001D24A                            ; ===========================================================================
0001D24A                            
0001D24A                            Touch_CatKiller:			; XREF: Touch_Special
0001D24A 6000 FEC8                  		bra.w	loc_1AFDA
0001D24E                            ; ===========================================================================
0001D24E                            
0001D24E                            Touch_Yadrin:				; XREF: Touch_Special
0001D24E 9A40                       		sub.w	d0,d5
0001D250 0C45 0008                  		cmpi.w	#8,d5
0001D254 6400                       		bcc.s	loc_1B144
0001D256 3029 0008                  		move.w	8(a1),d0
0001D25A 5940                       		subq.w	#4,d0
0001D25C 0829 0000 0022             		btst	#0,$22(a1)
0001D262 6700                       		beq.s	loc_1B130
0001D264 0440 0010                  		subi.w	#$10,d0
0001D268                            
0001D268                            loc_1B130:
0001D268 9042                       		sub.w	d2,d0
0001D26A 6400                       		bcc.s	loc_1B13C
0001D26C 0640 0018                  		addi.w	#$18,d0
0001D270 6500                       		bcs.s	loc_1B140
0001D272 6000                       		bra.s	loc_1B144
0001D274                            ; ===========================================================================
0001D274                            
0001D274                            loc_1B13C:
0001D274 B044                       		cmp.w	d4,d0
0001D276 6200                       		bhi.s	loc_1B144
0001D278                            
0001D278                            loc_1B140:
0001D278 6000 FEA0                  		bra.w	Touch_ChkHurt
0001D27C                            ; ===========================================================================
0001D27C                            
0001D27C                            loc_1B144:
0001D27C 6000 FE04                  		bra.w	Touch_Enemy
0001D280                            ; ===========================================================================
0001D280                            
0001D280                            Touch_D7orE1:				; XREF: Touch_Special
0001D280 5229 0021                  		addq.b	#1,$21(a1)
0001D284 4E75                       		rts	
0001D286                            ; End of function Touch_Special
0001D286                            
0001D286                            ; ---------------------------------------------------------------------------
0001D286                            ; Subroutine to	show the special stage layout
0001D286                            ; ---------------------------------------------------------------------------
0001D286                            
0001D286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D286                            
0001D286                            
0001D286                            SS_ShowLayout:				; XREF: SpecialStage
0001D286 6100 0000                  		bsr.w	SS_AniWallsRings
0001D28A 6100 0000                  		bsr.w	SS_AniItems
0001D28E 3F05                       		move.w	d5,-(sp)
0001D290 43F8 8000                  		lea	($FFFF8000).w,a1
0001D294 1038 F780                  		move.b	($FFFFF780).w,d0
0001D298 0200 00FC                  		andi.b	#$FC,d0
0001D29C 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001D2A2 3800                       		move.w	d0,d4
0001D2A4 3A01                       		move.w	d1,d5
0001D2A6 C9FC 0018                  		muls.w	#$18,d4
0001D2AA CBFC 0018                  		muls.w	#$18,d5
0001D2AE 7400                       		moveq	#0,d2
0001D2B0 3438 F700                  		move.w	($FFFFF700).w,d2
0001D2B4 84FC 0018                  		divu.w	#$18,d2
0001D2B8 4842                       		swap	d2
0001D2BA 4442                       		neg.w	d2
0001D2BC 0642 FF4C                  		addi.w	#-$B4,d2
0001D2C0 7600                       		moveq	#0,d3
0001D2C2 3638 F704                  		move.w	($FFFFF704).w,d3
0001D2C6 86FC 0018                  		divu.w	#$18,d3
0001D2CA 4843                       		swap	d3
0001D2CC 4443                       		neg.w	d3
0001D2CE 0643 FF4C                  		addi.w	#-$B4,d3
0001D2D2 3E3C 000F                  		move.w	#$F,d7
0001D2D6                            
0001D2D6                            loc_1B19E:
0001D2D6 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D2DA 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D2DE 4440                       		neg.w	d0
0001D2E0 C3C2                       		muls.w	d2,d1
0001D2E2 C1C3                       		muls.w	d3,d0
0001D2E4 2C00                       		move.l	d0,d6
0001D2E6 DC81                       		add.l	d1,d6
0001D2E8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D2EC C1C2                       		muls.w	d2,d0
0001D2EE C3C3                       		muls.w	d3,d1
0001D2F0 D280                       		add.l	d0,d1
0001D2F2 2406                       		move.l	d6,d2
0001D2F4 3C3C 000F                  		move.w	#$F,d6
0001D2F8                            
0001D2F8                            loc_1B1C0:
0001D2F8 2002                       		move.l	d2,d0
0001D2FA E080                       		asr.l	#8,d0
0001D2FC 32C0                       		move.w	d0,(a1)+
0001D2FE 2001                       		move.l	d1,d0
0001D300 E080                       		asr.l	#8,d0
0001D302 32C0                       		move.w	d0,(a1)+
0001D304 D485                       		add.l	d5,d2
0001D306 D284                       		add.l	d4,d1
0001D308 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D30C                            
0001D30C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D310 0643 0018                  		addi.w	#$18,d3
0001D314 51CF FFC0                  		dbf	d7,loc_1B19E
0001D318                            
0001D318 3A1F                       		move.w	(sp)+,d5
0001D31A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D320 7000                       		moveq	#0,d0
0001D322 3038 F704                  		move.w	($FFFFF704).w,d0
0001D326 80FC 0018                  		divu.w	#$18,d0
0001D32A C0FC 0080                  		mulu.w	#$80,d0
0001D32E D1C0                       		adda.l	d0,a0
0001D330 7000                       		moveq	#0,d0
0001D332 3038 F700                  		move.w	($FFFFF700).w,d0
0001D336 80FC 0018                  		divu.w	#$18,d0
0001D33A D0C0                       		adda.w	d0,a0
0001D33C 49F8 8000                  		lea	($FFFF8000).w,a4
0001D340 3E3C 000F                  		move.w	#$F,d7
0001D344                            
0001D344                            loc_1B20C:
0001D344 3C3C 000F                  		move.w	#$F,d6
0001D348                            
0001D348                            loc_1B210:
0001D348 7000                       		moveq	#0,d0
0001D34A 1018                       		move.b	(a0)+,d0
0001D34C 6700                       		beq.s	loc_1B268
0001D34E 0C00 004E                  		cmpi.b	#$4E,d0
0001D352 6200                       		bhi.s	loc_1B268
0001D354 3614                       		move.w	(a4),d3
0001D356 0643 0120                  		addi.w	#$120,d3
0001D35A 0C43 0070                  		cmpi.w	#$70,d3
0001D35E 6500                       		bcs.s	loc_1B268
0001D360 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D364 6400                       		bcc.s	loc_1B268
0001D366 342C 0002                  		move.w	2(a4),d2
0001D36A 0642 00F0                  		addi.w	#$F0,d2
0001D36E 0C42 0070                  		cmpi.w	#$70,d2
0001D372 6500                       		bcs.s	loc_1B268
0001D374 0C42 0170                  		cmpi.w	#$170,d2
0001D378 6400                       		bcc.s	loc_1B268
0001D37A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D380 E748                       		lsl.w	#3,d0
0001D382 4BF5 0000                  		lea	(a5,d0.w),a5
0001D386 225D                       		movea.l	(a5)+,a1
0001D388 321D                       		move.w	(a5)+,d1
0001D38A D241                       		add.w	d1,d1
0001D38C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D390 365D                       		movea.w	(a5)+,a3
0001D392 7200                       		moveq	#0,d1
0001D394 1219                       		move.b	(a1)+,d1
0001D396 5301                       		subq.b	#1,d1
0001D398 6B00                       		bmi.s	loc_1B268
0001D39A 4EB9 0000 F2DE             		jsr	sub_D762
0001D3A0                            
0001D3A0                            loc_1B268:
0001D3A0 584C                       		addq.w	#4,a4
0001D3A2 51CE FFA4                  		dbf	d6,loc_1B210
0001D3A6                            
0001D3A6 41E8 0070                  		lea	$70(a0),a0
0001D3AA 51CF FF98                  		dbf	d7,loc_1B20C
0001D3AE                            
0001D3AE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D3B2 0C05 0050                  		cmpi.b	#$50,d5
0001D3B6 6700                       		beq.s	loc_1B288
0001D3B8 24BC 0000 0000             		move.l	#0,(a2)
0001D3BE 4E75                       		rts	
0001D3C0                            ; ===========================================================================
0001D3C0                            
0001D3C0                            loc_1B288:
0001D3C0 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D3C6 4E75                       		rts	
0001D3C8                            ; End of function SS_ShowLayout
0001D3C8                            
0001D3C8                            ; ---------------------------------------------------------------------------
0001D3C8                            ; Subroutine to	animate	walls and rings	in the special stage
0001D3C8                            ; ---------------------------------------------------------------------------
0001D3C8                            
0001D3C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3C8                            
0001D3C8                            
0001D3C8                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D3C8 43F9 00FF 400C             		lea	($FF400C).l,a1
0001D3CE 7000                       		moveq	#0,d0
0001D3D0 1038 F780                  		move.b	($FFFFF780).w,d0
0001D3D4 E408                       		lsr.b	#2,d0
0001D3D6 0240 000F                  		andi.w	#$F,d0
0001D3DA 7223                       		moveq	#$23,d1
0001D3DC                            
0001D3DC                            loc_1B2A4:
0001D3DC 3280                       		move.w	d0,(a1)
0001D3DE 5049                       		addq.w	#8,a1
0001D3E0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001D3E4                            
0001D3E4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D3EA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D3EE 6A00                       		bpl.s	loc_1B2C8
0001D3F0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D3F6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D3FA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D400                            
0001D400                            loc_1B2C8:
0001D400 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D406 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D40A 6A00                       		bpl.s	loc_1B2E4
0001D40C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D412 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D416 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D41C                            
0001D41C                            loc_1B2E4:
0001D41C 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D420 1340 0138                  		move.b	d0,$138(a1)
0001D424 1340 0160                  		move.b	d0,$160(a1)
0001D428 1340 0148                  		move.b	d0,$148(a1)
0001D42C 1340 0150                  		move.b	d0,$150(a1)
0001D430 1340 01D8                  		move.b	d0,$1D8(a1)
0001D434 1340 01E0                  		move.b	d0,$1E0(a1)
0001D438 1340 01E8                  		move.b	d0,$1E8(a1)
0001D43C 1340 01F0                  		move.b	d0,$1F0(a1)
0001D440 1340 01F8                  		move.b	d0,$1F8(a1)
0001D444 1340 0200                  		move.b	d0,$200(a1)
0001D448 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D44C 6A00                       		bpl.s	loc_1B326
0001D44E 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D454 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D458 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D45E                            
0001D45E                            loc_1B326:
0001D45E 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D462 1340 0168                  		move.b	d0,$168(a1)
0001D466 1340 0170                  		move.b	d0,$170(a1)
0001D46A 1340 0178                  		move.b	d0,$178(a1)
0001D46E 1340 0180                  		move.b	d0,$180(a1)
0001D472 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D476 6A00                       		bpl.s	loc_1B350
0001D478 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D47E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D482 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D488                            
0001D488                            loc_1B350:
0001D488 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D48E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D494 7000                       		moveq	#0,d0
0001D496 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D49A D040                       		add.w	d0,d0
0001D49C 41F0 0000                  		lea	(a0,d0.w),a0
0001D4A0 3290                       		move.w	(a0),(a1)
0001D4A2 3368 0002 0008             		move.w	2(a0),8(a1)
0001D4A8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D4AE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D4B4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D4BA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D4C0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D4C6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D4CC D0FC 0020                  		adda.w	#$20,a0
0001D4D0 D2FC 0048                  		adda.w	#$48,a1
0001D4D4 3290                       		move.w	(a0),(a1)
0001D4D6 3368 0002 0008             		move.w	2(a0),8(a1)
0001D4DC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D4E2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D4E8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D4EE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D4F4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D4FA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D500 D0FC 0020                  		adda.w	#$20,a0
0001D504 D2FC 0048                  		adda.w	#$48,a1
0001D508 3290                       		move.w	(a0),(a1)
0001D50A 3368 0002 0008             		move.w	2(a0),8(a1)
0001D510 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D516 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D51C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D522 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D528 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D52E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D534 D0FC 0020                  		adda.w	#$20,a0
0001D538 D2FC 0048                  		adda.w	#$48,a1
0001D53C 3290                       		move.w	(a0),(a1)
0001D53E 3368 0002 0008             		move.w	2(a0),8(a1)
0001D544 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D54A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D550 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D556 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D55C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D562 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D568 D0FC 0020                  		adda.w	#$20,a0
0001D56C D2FC 0048                  		adda.w	#$48,a1
0001D570 4E75                       		rts	
0001D572                            ; End of function SS_AniWallsRings
0001D572                            
0001D572                            ; ===========================================================================
0001D572 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D582 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D592 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D5A2 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D5B2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D5C2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D5D2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D5E2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D5F2                            ; ---------------------------------------------------------------------------
0001D5F2                            ; Subroutine to	remove items when you collect them in the special stage
0001D5F2                            ; ---------------------------------------------------------------------------
0001D5F2                            
0001D5F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5F2                            
0001D5F2                            
0001D5F2                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D5F2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D5F8 303C 001F                  		move.w	#$1F,d0
0001D5FC                            
0001D5FC                            loc_1B4C4:
0001D5FC 4A12                       		tst.b	(a2)
0001D5FE 6700                       		beq.s	locret_1B4CE
0001D600 504A                       		addq.w	#8,a2
0001D602 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D606                            
0001D606                            locret_1B4CE:
0001D606 4E75                       		rts	
0001D608                            ; End of function SS_RemoveCollectedItem
0001D608                            
0001D608                            ; ---------------------------------------------------------------------------
0001D608                            ; Subroutine to	animate	special	stage items when you touch them
0001D608                            ; ---------------------------------------------------------------------------
0001D608                            
0001D608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D608                            
0001D608                            
0001D608                            SS_AniItems:				; XREF: SS_ShowLayout
0001D608 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D60E 3E3C 001F                  		move.w	#$1F,d7
0001D612                            
0001D612                            loc_1B4DA:
0001D612 7000                       		moveq	#0,d0
0001D614 1010                       		move.b	(a0),d0
0001D616 6700                       		beq.s	loc_1B4E8
0001D618 E548                       		lsl.w	#2,d0
0001D61A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D61E 4E91                       		jsr	(a1)
0001D620                            
0001D620                            loc_1B4E8:
0001D620 5048                       		addq.w	#8,a0
0001D622                            
0001D622                            loc_1B4EA:
0001D622 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D626                            
0001D626 4E75                       		rts	
0001D628                            ; End of function SS_AniItems
0001D628                            
0001D628                            ; ===========================================================================
0001D628 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D62C 0000 0000                  		dc.l SS_AniBumper
0001D630 0000 0000                  		dc.l SS_Ani1Up
0001D634 0000 0000                  		dc.l SS_AniReverse
0001D638 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D63C 0000 0000                  		dc.l SS_AniGlassBlock
0001D640                            ; ===========================================================================
0001D640                            
0001D640                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D640 5328 0002                  		subq.b	#1,2(a0)
0001D644 6A00                       		bpl.s	locret_1B530
0001D646 117C 0005 0002             		move.b	#5,2(a0)
0001D64C 7000                       		moveq	#0,d0
0001D64E 1028 0003                  		move.b	3(a0),d0
0001D652 5228 0003                  		addq.b	#1,3(a0)
0001D656 2268 0004                  		movea.l	4(a0),a1
0001D65A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D65E 1280                       		move.b	d0,(a1)
0001D660 6600                       		bne.s	locret_1B530
0001D662 4290                       		clr.l	(a0)
0001D664 42A8 0004                  		clr.l	4(a0)
0001D668                            
0001D668                            locret_1B530:
0001D668 4E75                       		rts	
0001D66A                            ; ===========================================================================
0001D66A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D670                            ; ===========================================================================
0001D670                            
0001D670                            SS_AniBumper:				; XREF: SS_AniIndex
0001D670 5328 0002                  		subq.b	#1,2(a0)
0001D674 6A00                       		bpl.s	locret_1B566
0001D676 117C 0007 0002             		move.b	#7,2(a0)
0001D67C 7000                       		moveq	#0,d0
0001D67E 1028 0003                  		move.b	3(a0),d0
0001D682 5228 0003                  		addq.b	#1,3(a0)
0001D686 2268 0004                  		movea.l	4(a0),a1
0001D68A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D68E 6600                       		bne.s	loc_1B564
0001D690 4290                       		clr.l	(a0)
0001D692 42A8 0004                  		clr.l	4(a0)
0001D696 12BC 0025                  		move.b	#$25,(a1)
0001D69A 4E75                       		rts	
0001D69C                            ; ===========================================================================
0001D69C                            
0001D69C                            loc_1B564:
0001D69C 1280                       		move.b	d0,(a1)
0001D69E                            
0001D69E                            locret_1B566:
0001D69E 4E75                       		rts	
0001D6A0                            ; ===========================================================================
0001D6A0 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D6A6                            ; ===========================================================================
0001D6A6                            
0001D6A6                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D6A6 5328 0002                  		subq.b	#1,2(a0)
0001D6AA 6A00                       		bpl.s	locret_1B596
0001D6AC 117C 0005 0002             		move.b	#5,2(a0)
0001D6B2 7000                       		moveq	#0,d0
0001D6B4 1028 0003                  		move.b	3(a0),d0
0001D6B8 5228 0003                  		addq.b	#1,3(a0)
0001D6BC 2268 0004                  		movea.l	4(a0),a1
0001D6C0 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D6C4 1280                       		move.b	d0,(a1)
0001D6C6 6600                       		bne.s	locret_1B596
0001D6C8 4290                       		clr.l	(a0)
0001D6CA 42A8 0004                  		clr.l	4(a0)
0001D6CE                            
0001D6CE                            locret_1B596:
0001D6CE 4E75                       		rts	
0001D6D0                            ; ===========================================================================
0001D6D0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D6D6                            ; ===========================================================================
0001D6D6                            
0001D6D6                            SS_AniReverse:				; XREF: SS_AniIndex
0001D6D6 5328 0002                  		subq.b	#1,2(a0)
0001D6DA 6A00                       		bpl.s	locret_1B5CC
0001D6DC 117C 0007 0002             		move.b	#7,2(a0)
0001D6E2 7000                       		moveq	#0,d0
0001D6E4 1028 0003                  		move.b	3(a0),d0
0001D6E8 5228 0003                  		addq.b	#1,3(a0)
0001D6EC 2268 0004                  		movea.l	4(a0),a1
0001D6F0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D6F4 6600                       		bne.s	loc_1B5CA
0001D6F6 4290                       		clr.l	(a0)
0001D6F8 42A8 0004                  		clr.l	4(a0)
0001D6FC 12BC 002B                  		move.b	#$2B,(a1)
0001D700 4E75                       		rts	
0001D702                            ; ===========================================================================
0001D702                            
0001D702                            loc_1B5CA:
0001D702 1280                       		move.b	d0,(a1)
0001D704                            
0001D704                            locret_1B5CC:
0001D704 4E75                       		rts	
0001D706                            ; ===========================================================================
0001D706 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D70C                            ; ===========================================================================
0001D70C                            
0001D70C                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D70C 5328 0002                  		subq.b	#1,2(a0)
0001D710 6A00                       		bpl.s	locret_1B60C
0001D712 117C 0005 0002             		move.b	#5,2(a0)
0001D718 7000                       		moveq	#0,d0
0001D71A 1028 0003                  		move.b	3(a0),d0
0001D71E 5228 0003                  		addq.b	#1,3(a0)
0001D722 2268 0004                  		movea.l	4(a0),a1
0001D726 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D72A 1280                       		move.b	d0,(a1)
0001D72C 6600                       		bne.s	locret_1B60C
0001D72E 4290                       		clr.l	(a0)
0001D730 42A8 0004                  		clr.l	4(a0)
0001D734 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D73A 303C 00A8                  		move.w	#$A8,d0
0001D73E 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D744                            
0001D744                            locret_1B60C:
0001D744 4E75                       		rts	
0001D746                            ; ===========================================================================
0001D746 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D74C                            ; ===========================================================================
0001D74C                            
0001D74C                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D74C 5328 0002                  		subq.b	#1,2(a0)
0001D750 6A00                       		bpl.s	locret_1B640
0001D752 117C 0001 0002             		move.b	#1,2(a0)
0001D758 7000                       		moveq	#0,d0
0001D75A 1028 0003                  		move.b	3(a0),d0
0001D75E 5228 0003                  		addq.b	#1,3(a0)
0001D762 2268 0004                  		movea.l	4(a0),a1
0001D766 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D76A 1280                       		move.b	d0,(a1)
0001D76C 6600                       		bne.s	locret_1B640
0001D76E 12A8 0004                  		move.b	4(a0),(a1)
0001D772 4290                       		clr.l	(a0)
0001D774 42A8 0004                  		clr.l	4(a0)
0001D778                            
0001D778                            locret_1B640:
0001D778 4E75                       		rts	
0001D77A                            ; ===========================================================================
0001D77A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            ; Special stage	layout pointers
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            SS_LayoutIndex:
0001D784                            	include "_inc\Special stage layout pointers.asm"
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            ; Special stage	layout pointers
0001D784                            ; ---------------------------------------------------------------------------
0001D784 0000 0000                  	dc.l SS_1
0001D788 0000 0000                  	dc.l SS_2
0001D78C 0000 0000                  	dc.l SS_3
0001D790 0000 0000                  	dc.l SS_4
0001D794 0000 0000                  	dc.l SS_5
0001D798 0000 0000                  	dc.l SS_6
0001D79C                            	even
0001D79C                            	even
0001D79C                            
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            ; Special stage	start locations
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D7B4                            		even
0001D7B4                            
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4                            ; Subroutine to	load special stage layout
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4                            
0001D7B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7B4                            
0001D7B4                            
0001D7B4                            SS_Load:				; XREF: SpecialStage
0001D7B4 7000                       		moveq	#0,d0
0001D7B6 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D7BA 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D7BE 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D7C4 6500                       		bcs.s	SS_ChkEmldNum
0001D7C6 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D7CC                            
0001D7CC                            SS_ChkEmldNum:
0001D7CC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D7D2 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D7D4 7200                       		moveq	#0,d1
0001D7D6 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D7DA 5301                       		subq.b	#1,d1
0001D7DC 6500                       		bcs.s	SS_LoadData
0001D7DE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D7E2                            
0001D7E2                            SS_ChkEmldLoop:	
0001D7E2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D7E6 6600                       		bne.s	SS_ChkEmldRepeat
0001D7E8 60CA                       		bra.s	SS_Load
0001D7EA                            ; ===========================================================================
0001D7EA                            
0001D7EA                            SS_ChkEmldRepeat:
0001D7EA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D7EE                            
0001D7EE                            SS_LoadData:
0001D7EE E548                       		lsl.w	#2,d0
0001D7F0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D7F4 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D7F8 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D7FC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D800 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D806 303C 0000                  		move.w	#0,d0
0001D80A 4EB9 0000 1724             		jsr	(EniDec).l
0001D810 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D816 303C 0FFF                  		move.w	#$FFF,d0
0001D81A                            
0001D81A                            SS_ClrRAM3:
0001D81A 4299                       		clr.l	(a1)+
0001D81C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D820                            
0001D820 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D826 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D82C 723F                       		moveq	#$3F,d1
0001D82E                            
0001D82E                            loc_1B6F6:
0001D82E 743F                       		moveq	#$3F,d2
0001D830                            
0001D830                            loc_1B6F8:
0001D830 12D8                       		move.b	(a0)+,(a1)+
0001D832 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D836                            
0001D836 43E9 0040                  		lea	$40(a1),a1
0001D83A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D83E                            
0001D83E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D844 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D84A 724D                       		moveq	#$4D,d1
0001D84C                            
0001D84C                            loc_1B714:
0001D84C 22D8                       		move.l	(a0)+,(a1)+
0001D84E 32FC 0000                  		move.w	#0,(a1)+
0001D852 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D858 32D8                       		move.w	(a0)+,(a1)+
0001D85A 51C9 FFF0                  		dbf	d1,loc_1B714
0001D85E                            
0001D85E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D864 323C 003F                  		move.w	#$3F,d1
0001D868                            
0001D868                            loc_1B730:
0001D868                            
0001D868 4299                       		clr.l	(a1)+
0001D86A 51C9 FFFC                  		dbf	d1,loc_1B730
0001D86E                            
0001D86E 4E75                       		rts	
0001D870                            ; End of function SS_Load
0001D870                            
0001D870                            ; ===========================================================================
0001D870                            ; ---------------------------------------------------------------------------
0001D870                            ; Special stage	mappings and VRAM pointers
0001D870                            ; ---------------------------------------------------------------------------
0001D870                            SS_MapIndex:
0001D870                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D870                            ; ---------------------------------------------------------------------------
0001D870                            ; Special stage	mappings and VRAM pointers
0001D870                            ; ---------------------------------------------------------------------------
0001D870 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D874 0142                       	dc.w $142		; VRAM setting
0001D876 0000 0000                  	dc.l Map_SSWalls
0001D87A 0142                       	dc.w $142
0001D87C 0000 0000                  	dc.l Map_SSWalls
0001D880 0142                       	dc.w $142
0001D882 0000 0000                  	dc.l Map_SSWalls
0001D886 0142                       	dc.w $142
0001D888 0000 0000                  	dc.l Map_SSWalls
0001D88C 0142                       	dc.w $142
0001D88E 0000 0000                  	dc.l Map_SSWalls
0001D892 0142                       	dc.w $142
0001D894 0000 0000                  	dc.l Map_SSWalls
0001D898 0142                       	dc.w $142
0001D89A 0000 0000                  	dc.l Map_SSWalls
0001D89E 0142                       	dc.w $142
0001D8A0 0000 0000                  	dc.l Map_SSWalls
0001D8A4 0142                       	dc.w $142
0001D8A6 0000 0000                  	dc.l Map_SSWalls
0001D8AA 2142                       	dc.w $2142
0001D8AC 0000 0000                  	dc.l Map_SSWalls
0001D8B0 2142                       	dc.w $2142
0001D8B2 0000 0000                  	dc.l Map_SSWalls
0001D8B6 2142                       	dc.w $2142
0001D8B8 0000 0000                  	dc.l Map_SSWalls
0001D8BC 2142                       	dc.w $2142
0001D8BE 0000 0000                  	dc.l Map_SSWalls
0001D8C2 2142                       	dc.w $2142
0001D8C4 0000 0000                  	dc.l Map_SSWalls
0001D8C8 2142                       	dc.w $2142
0001D8CA 0000 0000                  	dc.l Map_SSWalls
0001D8CE 2142                       	dc.w $2142
0001D8D0 0000 0000                  	dc.l Map_SSWalls
0001D8D4 2142                       	dc.w $2142
0001D8D6 0000 0000                  	dc.l Map_SSWalls
0001D8DA 2142                       	dc.w $2142
0001D8DC 0000 0000                  	dc.l Map_SSWalls
0001D8E0 4142                       	dc.w $4142
0001D8E2 0000 0000                  	dc.l Map_SSWalls
0001D8E6 4142                       	dc.w $4142
0001D8E8 0000 0000                  	dc.l Map_SSWalls
0001D8EC 4142                       	dc.w $4142
0001D8EE 0000 0000                  	dc.l Map_SSWalls
0001D8F2 4142                       	dc.w $4142
0001D8F4 0000 0000                  	dc.l Map_SSWalls
0001D8F8 4142                       	dc.w $4142
0001D8FA 0000 0000                  	dc.l Map_SSWalls
0001D8FE 4142                       	dc.w $4142
0001D900 0000 0000                  	dc.l Map_SSWalls
0001D904 4142                       	dc.w $4142
0001D906 0000 0000                  	dc.l Map_SSWalls
0001D90A 4142                       	dc.w $4142
0001D90C 0000 0000                  	dc.l Map_SSWalls
0001D910 4142                       	dc.w $4142
0001D912 0000 0000                  	dc.l Map_SSWalls
0001D916 6142                       	dc.w $6142
0001D918 0000 0000                  	dc.l Map_SSWalls
0001D91C 6142                       	dc.w $6142
0001D91E 0000 0000                  	dc.l Map_SSWalls
0001D922 6142                       	dc.w $6142
0001D924 0000 0000                  	dc.l Map_SSWalls
0001D928 6142                       	dc.w $6142
0001D92A 0000 0000                  	dc.l Map_SSWalls
0001D92E 6142                       	dc.w $6142
0001D930 0000 0000                  	dc.l Map_SSWalls
0001D934 6142                       	dc.w $6142
0001D936 0000 0000                  	dc.l Map_SSWalls
0001D93A 6142                       	dc.w $6142
0001D93C 0000 0000                  	dc.l Map_SSWalls
0001D940 6142                       	dc.w $6142
0001D942 0000 0000                  	dc.l Map_SSWalls
0001D946 6142                       	dc.w $6142
0001D948 0001 0696                  	dc.l Map_obj47
0001D94C 023B                       	dc.w $23B
0001D94E 0000 0000                  	dc.l Map_SS_R
0001D952 0570                       	dc.w $570
0001D954 0000 0000                  	dc.l Map_SS_R
0001D958 0251                       	dc.w $251
0001D95A 0000 0000                  	dc.l Map_SS_R
0001D95E 0370                       	dc.w $370
0001D960 0000 0000                  	dc.l Map_SS_Up
0001D964 0263                       	dc.w $263
0001D966 0000 0000                  	dc.l Map_SS_Down
0001D96A 0263                       	dc.w $263
0001D96C 0000 0000                  	dc.l Map_SS_R
0001D970 22F0                       	dc.w $22F0
0001D972 0000 0000                  	dc.l Map_SS_Glass
0001D976 0470                       	dc.w $470
0001D978 0000 0000                  	dc.l Map_SS_Glass
0001D97C 05F0                       	dc.w $5F0
0001D97E 0000 0000                  	dc.l Map_SS_Glass
0001D982 65F0                       	dc.w $65F0
0001D984 0000 0000                  	dc.l Map_SS_Glass
0001D988 25F0                       	dc.w $25F0
0001D98A 0000 0000                  	dc.l Map_SS_Glass
0001D98E 45F0                       	dc.w $45F0
0001D990 0000 0000                  	dc.l Map_SS_R
0001D994 02F0                       	dc.w $2F0
0001D996 0101 0696                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D99A 023B                       	dc.w $23B
0001D99C 0201 0696                  	dc.l Map_obj47+$2000000
0001D9A0 023B                       	dc.w $23B
0001D9A2 0000 0000                  	dc.l Map_SS_R
0001D9A6 0797                       	dc.w $797
0001D9A8 0000 0000                  	dc.l Map_SS_R
0001D9AC 07A0                       	dc.w $7A0
0001D9AE 0000 0000                  	dc.l Map_SS_R
0001D9B2 07A9                       	dc.w $7A9
0001D9B4 0000 0000                  	dc.l Map_SS_R
0001D9B8 0797                       	dc.w $797
0001D9BA 0000 0000                  	dc.l Map_SS_R
0001D9BE 07A0                       	dc.w $7A0
0001D9C0 0000 0000                  	dc.l Map_SS_R
0001D9C4 07A9                       	dc.w $7A9
0001D9C6 0000 B9A8                  	dc.l Map_obj25
0001D9CA 27B2                       	dc.w $27B2
0001D9CC 0000 0000                  	dc.l Map_SS_Chaos3
0001D9D0 0770                       	dc.w $770
0001D9D2 0000 0000                  	dc.l Map_SS_Chaos3
0001D9D6 2770                       	dc.w $2770
0001D9D8 0000 0000                  	dc.l Map_SS_Chaos3
0001D9DC 4770                       	dc.w $4770
0001D9DE 0000 0000                  	dc.l Map_SS_Chaos3
0001D9E2 6770                       	dc.w $6770
0001D9E4 0000 0000                  	dc.l Map_SS_Chaos1
0001D9E8 0770                       	dc.w $770
0001D9EA 0000 0000                  	dc.l Map_SS_Chaos2
0001D9EE 0770                       	dc.w $770
0001D9F0 0000 0000                  	dc.l Map_SS_R
0001D9F4 04F0                       	dc.w $4F0
0001D9F6 0400 B9A8                  	dc.l Map_obj25+$4000000
0001D9FA 27B2                       	dc.w $27B2
0001D9FC 0500 B9A8                  	dc.l Map_obj25+$5000000
0001DA00 27B2                       	dc.w $27B2
0001DA02 0600 B9A8                  	dc.l Map_obj25+$6000000
0001DA06 27B2                       	dc.w $27B2
0001DA08 0700 B9A8                  	dc.l Map_obj25+$7000000
0001DA0C 27B2                       	dc.w $27B2
0001DA0E 0000 0000                  	dc.l Map_SS_Glass
0001DA12 23F0                       	dc.w $23F0
0001DA14 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DA18 23F0                       	dc.w $23F0
0001DA1A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DA1E 23F0                       	dc.w $23F0
0001DA20 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DA24 23F0                       	dc.w $23F0
0001DA26 0000 0000                  	dc.l Map_SS_R+$2000000
0001DA2A 04F0                       	dc.w $4F0
0001DA2C 0000 0000                  	dc.l Map_SS_Glass
0001DA30 05F0                       	dc.w $5F0
0001DA32 0000 0000                  	dc.l Map_SS_Glass
0001DA36 65F0                       	dc.w $65F0
0001DA38 0000 0000                  	dc.l Map_SS_Glass
0001DA3C 25F0                       	dc.w $25F0
0001DA3E 0000 0000                  	dc.l Map_SS_Glass
0001DA42 45F0                       	dc.w $45F0
0001DA42 45F0                       	dc.w $45F0
0001DA44                            
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            ; Sprite mappings - special stage "R" block
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            Map_SS_R:
0001DA44                            	include "_maps\SSRblock.asm"
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            ; Sprite mappings - special stage "R" block
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DA48 0000                       		dc.w byte_1B91E-Map_SS_R
0001DA4A 01                         byte_1B912:	dc.b 1
0001DA4B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA50 01                         byte_1B918:	dc.b 1
0001DA51 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DA56 00                         byte_1B91E:	dc.b 0
0001DA58 00                         		even
0001DA58 00                         		even
0001DA58                            
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58                            Map_SS_Glass:
0001DA58                            	include "_maps\SSglassblock.asm"
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DA5C 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DA60 01                         byte_1B928:	dc.b 1
0001DA61 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA66 01                         byte_1B92E:	dc.b 1
0001DA67 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DA6C 01                         byte_1B934:	dc.b 1
0001DA6D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DA72 01                         byte_1B93A:	dc.b 1
0001DA73 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DA78                            		even
0001DA78                            		even
0001DA78                            
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78                            ; Sprite mappings - special stage "UP" block
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78                            Map_SS_Up:
0001DA78                            	include "_maps\SSUPblock.asm"
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78                            ; Sprite mappings - special stage "UP" block
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78 0000                       		dc.w byte_1B944-Map_SS_Up
0001DA7A 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DA7C 01                         byte_1B944:	dc.b 1
0001DA7D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DA82 01                         byte_1B94A:	dc.b 1
0001DA83 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DA88                            		even
0001DA88                            		even
0001DA88                            
0001DA88                            ; ---------------------------------------------------------------------------
0001DA88                            ; Sprite mappings - special stage "DOWN" block
0001DA88                            ; ---------------------------------------------------------------------------
0001DA88                            Map_SS_Down:
0001DA88                            	include "_maps\SSDOWNblock.asm"
0001DA88                            ; ---------------------------------------------------------------------------
0001DA88                            ; Sprite mappings - special stage "DOWN" block
0001DA88                            ; ---------------------------------------------------------------------------
0001DA88 0000                       		dc.w byte_1B954-Map_SS_Down
0001DA8A 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DA8C 01                         byte_1B954:	dc.b 1
0001DA8D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DA92 01                         byte_1B95A:	dc.b 1
0001DA93 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DA98                            		even
0001DA98                            		even
0001DA98                            
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98                            ; Sprite mappings - special stage chaos	emeralds
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DA9A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DA9C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DA9E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DAA0 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DAA2 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DAA4 01                         byte_1B96C:	dc.b 1
0001DAA5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DAAA 01                         byte_1B972:	dc.b 1
0001DAAB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DAB0 01                         byte_1B978:	dc.b 1
0001DAB1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DAB6 01                         byte_1B97E:	dc.b 1
0001DAB7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DABC                            		even
0001DABC                            ; ===========================================================================
0001DABC                            ; ---------------------------------------------------------------------------
0001DABC                            ; Object 09 - Sonic (special stage)
0001DABC                            ; ---------------------------------------------------------------------------
0001DABC                            
0001DABC                            Obj09:					; XREF: Obj_Index
0001DABC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DAC0 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DAC2 6100 0000                  		bsr.w	SS_FixCamera
0001DAC6 6000 0000                  		bra.w	DebugMode
0001DACA                            ; ===========================================================================
0001DACA                            
0001DACA                            Obj09_Normal:
0001DACA 7000                       		moveq	#0,d0
0001DACC 1028 0024                  		move.b	$24(a0),d0
0001DAD0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DAD4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DAD8                            ; ===========================================================================
0001DAD8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DADA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DADC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DADE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DAE0                            ; ===========================================================================
0001DAE0                            
0001DAE0                            Obj09_Main:				; XREF: Obj09_Index
0001DAE0 5428 0024                  		addq.b	#2,$24(a0)
0001DAE4 117C 000E 0016             		move.b	#$E,$16(a0)
0001DAEA 117C 0007 0017             		move.b	#7,$17(a0)
0001DAF0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DAF8 317C 0780 0002             		move.w	#$780,2(a0)
0001DAFE 117C 0004 0001             		move.b	#4,1(a0)
0001DB04 117C 0000 0018             		move.b	#0,$18(a0)
0001DB0A 117C 0018 001C             		move.b	#$18,$1C(a0)
0001DB10 08E8 0002 0022             		bset	#2,$22(a0)
0001DB16 08E8 0001 0022             		bset	#1,$22(a0)
0001DB1C                            
0001DB1C                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DB1C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DB20 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DB22 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DB28 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DB2A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DB30                            
0001DB30                            Obj09_NoDebug:
0001DB30 117C 0000 0030             		move.b	#0,$30(a0)
0001DB36 7000                       		moveq	#0,d0
0001DB38 1028 0022                  		move.b	$22(a0),d0
0001DB3C 0240 0002                  		andi.w	#2,d0
0001DB40 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DB44 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DB48 4EB9 0001 5AC2             		jsr	LoadSonicDynPLC
0001DB4E 4EF9 0000 F180             		jmp	DisplaySprite
0001DB54                            ; ===========================================================================
0001DB54 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DB56 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DB58                            ; ===========================================================================
0001DB58                            
0001DB58                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DB58 6100 0000                  		bsr.w	Obj09_Jump
0001DB5C 6100 0000                  		bsr.w	Obj09_Move
0001DB60 6100 0000                  		bsr.w	Obj09_Fall
0001DB64 6000                       		bra.s	Obj09_Display
0001DB66                            ; ===========================================================================
0001DB66                            
0001DB66                            Obj09_InAir:				; XREF: Obj09_Modes
0001DB66 6100 0000                  		bsr.w	nullsub_2
0001DB6A 6100 0000                  		bsr.w	Obj09_Move
0001DB6E 6100 0000                  		bsr.w	Obj09_Fall
0001DB72                            
0001DB72                            Obj09_Display:				; XREF: Obj09_OnWall
0001DB72 6100 0000                  		bsr.w	Obj09_ChkItems
0001DB76 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DB7A 4EB9 0000 F166             		jsr	SpeedToPos
0001DB80 6100 0000                  		bsr.w	SS_FixCamera
0001DB84 3038 F780                  		move.w	($FFFFF780).w,d0
0001DB88 D078 F782                  		add.w	($FFFFF782).w,d0
0001DB8C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DB90 4EB9 0001 5870             		jsr	Sonic_Animate
0001DB96 4E75                       		rts	
0001DB98                            
0001DB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB98                            
0001DB98                            
0001DB98                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DB98 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DB9E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DBA0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DBA4                            
0001DBA4                            Obj09_ChkRight:
0001DBA4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DBAA 6700                       		beq.s	loc_1BA78	; if not, branch
0001DBAC 6100 0000                  		bsr.w	Obj09_MoveRight
0001DBB0                            
0001DBB0                            loc_1BA78:
0001DBB0 1038 F602                  		move.b	($FFFFF602).w,d0
0001DBB4 0200 000C                  		andi.b	#$C,d0
0001DBB8 6600                       		bne.s	loc_1BAA8
0001DBBA 3028 0014                  		move.w	$14(a0),d0
0001DBBE 6700                       		beq.s	loc_1BAA8
0001DBC0 6B00                       		bmi.s	loc_1BA9A
0001DBC2 0440 000C                  		subi.w	#$C,d0
0001DBC6 6400                       		bcc.s	loc_1BA94
0001DBC8 303C 0000                  		move.w	#0,d0
0001DBCC                            
0001DBCC                            loc_1BA94:
0001DBCC 3140 0014                  		move.w	d0,$14(a0)
0001DBD0 6000                       		bra.s	loc_1BAA8
0001DBD2                            ; ===========================================================================
0001DBD2                            
0001DBD2                            loc_1BA9A:
0001DBD2 0640 000C                  		addi.w	#$C,d0
0001DBD6 6400                       		bcc.s	loc_1BAA4
0001DBD8 303C 0000                  		move.w	#0,d0
0001DBDC                            
0001DBDC                            loc_1BAA4:
0001DBDC 3140 0014                  		move.w	d0,$14(a0)
0001DBE0                            
0001DBE0                            loc_1BAA8:
0001DBE0 1038 F780                  		move.b	($FFFFF780).w,d0
0001DBE4 0600 0020                  		addi.b	#$20,d0
0001DBE8 0200 00C0                  		andi.b	#$C0,d0
0001DBEC 4400                       		neg.b	d0
0001DBEE 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DBF4 C3E8 0014                  		muls.w	$14(a0),d1
0001DBF8 D3A8 0008                  		add.l	d1,8(a0)
0001DBFC C1E8 0014                  		muls.w	$14(a0),d0
0001DC00 D1A8 000C                  		add.l	d0,$C(a0)
0001DC04 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DC08 2428 000C                  		move.l	$C(a0),d2
0001DC0C 2628 0008                  		move.l	8(a0),d3
0001DC10 6100 0000                  		bsr.w	sub_1BCE8
0001DC14 6700                       		beq.s	loc_1BAF2
0001DC16 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DC1A 93A8 0008                  		sub.l	d1,8(a0)
0001DC1E 91A8 000C                  		sub.l	d0,$C(a0)
0001DC22 317C 0000 0014             		move.w	#0,$14(a0)
0001DC28 4E75                       		rts	
0001DC2A                            ; ===========================================================================
0001DC2A                            
0001DC2A                            loc_1BAF2:
0001DC2A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DC2E 4E75                       		rts	
0001DC30                            ; End of function Obj09_Move
0001DC30                            
0001DC30                            
0001DC30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC30                            
0001DC30                            
0001DC30                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DC30 08E8 0000 0022             		bset	#0,$22(a0)
0001DC36 3028 0014                  		move.w	$14(a0),d0
0001DC3A 6700                       		beq.s	loc_1BB06
0001DC3C 6A00                       		bpl.s	loc_1BB1A
0001DC3E                            
0001DC3E                            loc_1BB06:
0001DC3E 0440 000C                  		subi.w	#$C,d0
0001DC42 0C40 F800                  		cmpi.w	#-$800,d0
0001DC46 6E00                       		bgt.s	loc_1BB14
0001DC48 303C F800                  		move.w	#-$800,d0
0001DC4C                            
0001DC4C                            loc_1BB14:
0001DC4C 3140 0014                  		move.w	d0,$14(a0)
0001DC50 4E75                       		rts	
0001DC52                            ; ===========================================================================
0001DC52                            
0001DC52                            loc_1BB1A:
0001DC52 0440 0040                  		subi.w	#$40,d0
0001DC56 6400                       		bcc.s	loc_1BB22
0001DC58 4E71                       		nop	
0001DC5A                            
0001DC5A                            loc_1BB22:
0001DC5A 3140 0014                  		move.w	d0,$14(a0)
0001DC5E 4E75                       		rts	
0001DC60                            ; End of function Obj09_MoveLeft
0001DC60                            
0001DC60                            
0001DC60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC60                            
0001DC60                            
0001DC60                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DC60 08A8 0000 0022             		bclr	#0,$22(a0)
0001DC66 3028 0014                  		move.w	$14(a0),d0
0001DC6A 6B00                       		bmi.s	loc_1BB48
0001DC6C 0640 000C                  		addi.w	#$C,d0
0001DC70 0C40 0800                  		cmpi.w	#$800,d0
0001DC74 6D00                       		blt.s	loc_1BB42
0001DC76 303C 0800                  		move.w	#$800,d0
0001DC7A                            
0001DC7A                            loc_1BB42:
0001DC7A 3140 0014                  		move.w	d0,$14(a0)
0001DC7E 6000                       		bra.s	locret_1BB54
0001DC80                            ; ===========================================================================
0001DC80                            
0001DC80                            loc_1BB48:
0001DC80 0640 0040                  		addi.w	#$40,d0
0001DC84 6400                       		bcc.s	loc_1BB50
0001DC86 4E71                       		nop	
0001DC88                            
0001DC88                            loc_1BB50:
0001DC88 3140 0014                  		move.w	d0,$14(a0)
0001DC8C                            
0001DC8C                            locret_1BB54:
0001DC8C 4E75                       		rts	
0001DC8E                            ; End of function Obj09_MoveRight
0001DC8E                            
0001DC8E                            
0001DC8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC8E                            
0001DC8E                            
0001DC8E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DC8E 1038 F603                  		move.b	($FFFFF603).w,d0
0001DC92 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DC96 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DC98 1038 F780                  		move.b	($FFFFF780).w,d0
0001DC9C 0200 00FC                  		andi.b	#$FC,d0
0001DCA0 4400                       		neg.b	d0
0001DCA2 0400 0040                  		subi.b	#$40,d0
0001DCA6 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DCAC C3FC 0680                  		muls.w	#$680,d1
0001DCB0 E081                       		asr.l	#8,d1
0001DCB2 3141 0010                  		move.w	d1,$10(a0)
0001DCB6 C1FC 0680                  		muls.w	#$680,d0
0001DCBA E080                       		asr.l	#8,d0
0001DCBC 3140 0012                  		move.w	d0,$12(a0)
0001DCC0 08E8 0001 0022             		bset	#1,$22(a0)
0001DCC6 303C 00A0                  		move.w	#$A0,d0
0001DCCA 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DCD0                            
0001DCD0                            Obj09_NoJump:
0001DCD0 4E75                       		rts	
0001DCD2                            ; End of function Obj09_Jump
0001DCD2                            
0001DCD2                            
0001DCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCD2                            
0001DCD2                            
0001DCD2                            nullsub_2:				; XREF: Obj09_InAir
0001DCD2 4E75                       		rts	
0001DCD4                            ; End of function nullsub_2
0001DCD4                            
0001DCD4                            ; ===========================================================================
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4                            ; unused subroutine to limit Sonic's upward vertical speed
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4 323C FC00                  		move.w	#-$400,d1
0001DCD8 B268 0012                  		cmp.w	$12(a0),d1
0001DCDC 6F00                       		ble.s	locret_1BBB4
0001DCDE 1038 F602                  		move.b	($FFFFF602).w,d0
0001DCE2 0200 0070                  		andi.b	#$70,d0
0001DCE6 6600                       		bne.s	locret_1BBB4
0001DCE8 3141 0012                  		move.w	d1,$12(a0)
0001DCEC                            
0001DCEC                            locret_1BBB4:
0001DCEC 4E75                       		rts	
0001DCEE                            ; ---------------------------------------------------------------------------
0001DCEE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DCEE                            ; ---------------------------------------------------------------------------
0001DCEE                            
0001DCEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCEE                            
0001DCEE                            
0001DCEE                            SS_FixCamera:				; XREF: Obj09
0001DCEE 3428 000C                  		move.w	$C(a0),d2
0001DCF2 3628 0008                  		move.w	8(a0),d3
0001DCF6 3038 F700                  		move.w	($FFFFF700).w,d0
0001DCFA 0443 00A0                  		subi.w	#$A0,d3
0001DCFE 6500                       		bcs.s	loc_1BBCE
0001DD00 9043                       		sub.w	d3,d0
0001DD02 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DD06                            
0001DD06                            loc_1BBCE:
0001DD06 3038 F704                  		move.w	($FFFFF704).w,d0
0001DD0A 0442 0070                  		subi.w	#$70,d2
0001DD0E 6500                       		bcs.s	locret_1BBDE
0001DD10 9042                       		sub.w	d2,d0
0001DD12 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DD16                            
0001DD16                            locret_1BBDE:
0001DD16 4E75                       		rts	
0001DD18                            ; End of function SS_FixCamera
0001DD18                            
0001DD18                            ; ===========================================================================
0001DD18                            
0001DD18                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DD18 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DD1E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DD24 6600                       		bne.s	loc_1BBF4
0001DD26 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DD2C                            
0001DD2C                            loc_1BBF4:
0001DD2C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DD32 6D00                       		blt.s	loc_1BC12
0001DD34 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DD3A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DD40 5428 0024                  		addq.b	#2,$24(a0)
0001DD44 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DD4A                            
0001DD4A                            loc_1BC12:
0001DD4A 3038 F780                  		move.w	($FFFFF780).w,d0
0001DD4E D078 F782                  		add.w	($FFFFF782).w,d0
0001DD52 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DD56 4EB9 0001 5870             		jsr	Sonic_Animate
0001DD5C 4EB9 0001 5AC2             		jsr	LoadSonicDynPLC
0001DD62 6100 FF8A                  		bsr.w	SS_FixCamera
0001DD66 4EF9 0000 F180             		jmp	DisplaySprite
0001DD6C                            ; ===========================================================================
0001DD6C                            
0001DD6C                            Obj09_Exit2:				; XREF: Obj09_Index
0001DD6C 5368 0038                  		subq.w	#1,$38(a0)
0001DD70 6600                       		bne.s	loc_1BC40
0001DD72 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DD78                            
0001DD78                            loc_1BC40:
0001DD78 4EB9 0001 5870             		jsr	Sonic_Animate
0001DD7E 4EB9 0001 5AC2             		jsr	LoadSonicDynPLC
0001DD84 6100 FF68                  		bsr.w	SS_FixCamera
0001DD88 4EF9 0000 F180             		jmp	DisplaySprite
0001DD8E                            
0001DD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD8E                            
0001DD8E                            
0001DD8E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DD8E 2428 000C                  		move.l	$C(a0),d2
0001DD92 2628 0008                  		move.l	8(a0),d3
0001DD96 1038 F780                  		move.b	($FFFFF780).w,d0
0001DD9A 0200 00FC                  		andi.b	#$FC,d0
0001DD9E 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001DDA4 3828 0010                  		move.w	$10(a0),d4
0001DDA8 48C4                       		ext.l	d4
0001DDAA E184                       		asl.l	#8,d4
0001DDAC C1FC 002A                  		muls.w	#$2A,d0
0001DDB0 D084                       		add.l	d4,d0
0001DDB2 3828 0012                  		move.w	$12(a0),d4
0001DDB6 48C4                       		ext.l	d4
0001DDB8 E184                       		asl.l	#8,d4
0001DDBA C3FC 002A                  		muls.w	#$2A,d1
0001DDBE D284                       		add.l	d4,d1
0001DDC0 D680                       		add.l	d0,d3
0001DDC2 6100 0000                  		bsr.w	sub_1BCE8
0001DDC6 6700                       		beq.s	loc_1BCB0
0001DDC8 9680                       		sub.l	d0,d3
0001DDCA 7000                       		moveq	#0,d0
0001DDCC 3140 0010                  		move.w	d0,$10(a0)
0001DDD0 08A8 0001 0022             		bclr	#1,$22(a0)
0001DDD6 D481                       		add.l	d1,d2
0001DDD8 6100 0000                  		bsr.w	sub_1BCE8
0001DDDC 6700                       		beq.s	loc_1BCC6
0001DDDE 9481                       		sub.l	d1,d2
0001DDE0 7200                       		moveq	#0,d1
0001DDE2 3141 0012                  		move.w	d1,$12(a0)
0001DDE6 4E75                       		rts	
0001DDE8                            ; ===========================================================================
0001DDE8                            
0001DDE8                            loc_1BCB0:
0001DDE8 D481                       		add.l	d1,d2
0001DDEA 6100 0000                  		bsr.w	sub_1BCE8
0001DDEE 6700                       		beq.s	loc_1BCD4
0001DDF0 9481                       		sub.l	d1,d2
0001DDF2 7200                       		moveq	#0,d1
0001DDF4 3141 0012                  		move.w	d1,$12(a0)
0001DDF8 08A8 0001 0022             		bclr	#1,$22(a0)
0001DDFE                            
0001DDFE                            loc_1BCC6:
0001DDFE E080                       		asr.l	#8,d0
0001DE00 E081                       		asr.l	#8,d1
0001DE02 3140 0010                  		move.w	d0,$10(a0)
0001DE06 3141 0012                  		move.w	d1,$12(a0)
0001DE0A 4E75                       		rts	
0001DE0C                            ; ===========================================================================
0001DE0C                            
0001DE0C                            loc_1BCD4:
0001DE0C E080                       		asr.l	#8,d0
0001DE0E E081                       		asr.l	#8,d1
0001DE10 3140 0010                  		move.w	d0,$10(a0)
0001DE14 3141 0012                  		move.w	d1,$12(a0)
0001DE18 08E8 0001 0022             		bset	#1,$22(a0)
0001DE1E 4E75                       		rts	
0001DE20                            ; End of function Obj09_Fall
0001DE20                            
0001DE20                            
0001DE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE20                            
0001DE20                            
0001DE20                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DE20 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DE26 7800                       		moveq	#0,d4
0001DE28 4842                       		swap	d2
0001DE2A 3802                       		move.w	d2,d4
0001DE2C 4842                       		swap	d2
0001DE2E 0644 0044                  		addi.w	#$44,d4
0001DE32 88FC 0018                  		divu.w	#$18,d4
0001DE36 C8FC 0080                  		mulu.w	#$80,d4
0001DE3A D3C4                       		adda.l	d4,a1
0001DE3C 7800                       		moveq	#0,d4
0001DE3E 4843                       		swap	d3
0001DE40 3803                       		move.w	d3,d4
0001DE42 4843                       		swap	d3
0001DE44 0644 0014                  		addi.w	#$14,d4
0001DE48 88FC 0018                  		divu.w	#$18,d4
0001DE4C D2C4                       		adda.w	d4,a1
0001DE4E 7A00                       		moveq	#0,d5
0001DE50 1819                       		move.b	(a1)+,d4
0001DE52 6100                       		bsr.s	sub_1BD30
0001DE54 1819                       		move.b	(a1)+,d4
0001DE56 6100                       		bsr.s	sub_1BD30
0001DE58 D2FC 007E                  		adda.w	#$7E,a1
0001DE5C 1819                       		move.b	(a1)+,d4
0001DE5E 6100                       		bsr.s	sub_1BD30
0001DE60 1819                       		move.b	(a1)+,d4
0001DE62 6100                       		bsr.s	sub_1BD30
0001DE64 4A05                       		tst.b	d5
0001DE66 4E75                       		rts	
0001DE68                            ; End of function sub_1BCE8
0001DE68                            
0001DE68                            
0001DE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE68                            
0001DE68                            
0001DE68                            sub_1BD30:				; XREF: sub_1BCE8
0001DE68 6700                       		beq.s	locret_1BD44
0001DE6A 0C04 0028                  		cmpi.b	#$28,d4
0001DE6E 6700                       		beq.s	locret_1BD44
0001DE70 0C04 003A                  		cmpi.b	#$3A,d4
0001DE74 6500                       		bcs.s	loc_1BD46
0001DE76 0C04 004B                  		cmpi.b	#$4B,d4
0001DE7A 6400                       		bcc.s	loc_1BD46
0001DE7C                            
0001DE7C                            locret_1BD44:
0001DE7C 4E75                       		rts	
0001DE7E                            ; ===========================================================================
0001DE7E                            
0001DE7E                            loc_1BD46:
0001DE7E 1144 0030                  		move.b	d4,$30(a0)
0001DE82 2149 0032                  		move.l	a1,$32(a0)
0001DE86 7AFF                       		moveq	#-1,d5
0001DE88 4E75                       		rts	
0001DE8A                            ; End of function sub_1BD30
0001DE8A                            
0001DE8A                            
0001DE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE8A                            
0001DE8A                            
0001DE8A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DE8A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DE90 7800                       		moveq	#0,d4
0001DE92 3828 000C                  		move.w	$C(a0),d4
0001DE96 0644 0050                  		addi.w	#$50,d4
0001DE9A 88FC 0018                  		divu.w	#$18,d4
0001DE9E C8FC 0080                  		mulu.w	#$80,d4
0001DEA2 D3C4                       		adda.l	d4,a1
0001DEA4 7800                       		moveq	#0,d4
0001DEA6 3828 0008                  		move.w	8(a0),d4
0001DEAA 0644 0020                  		addi.w	#$20,d4
0001DEAE 88FC 0018                  		divu.w	#$18,d4
0001DEB2 D2C4                       		adda.w	d4,a1
0001DEB4 1811                       		move.b	(a1),d4
0001DEB6 6600                       		bne.s	Obj09_ChkCont
0001DEB8 4A28 003A                  		tst.b	$3A(a0)
0001DEBC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DEC0 7800                       		moveq	#0,d4
0001DEC2 4E75                       		rts	
0001DEC4                            ; ===========================================================================
0001DEC4                            
0001DEC4                            Obj09_ChkCont:
0001DEC4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DEC8 6600                       		bne.s	Obj09_Chk1Up
0001DECA 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DECE 6600                       		bne.s	Obj09_GetCont
0001DED0 14BC 0001                  		move.b	#1,(a2)
0001DED4 2549 0004                  		move.l	a1,4(a2)
0001DED8                            
0001DED8                            Obj09_GetCont:
0001DED8 4EB9 0000 B644             		jsr	CollectRing
0001DEDE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DEE4 6500                       		bcs.s	Obj09_NoCont
0001DEE6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DEEC 6600                       		bne.s	Obj09_NoCont
0001DEEE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DEF2 303C 00BF                  		move.w	#$BF,d0
0001DEF6 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra continue sound
0001DEFC                            
0001DEFC                            Obj09_NoCont:
0001DEFC 7800                       		moveq	#0,d4
0001DEFE 4E75                       		rts	
0001DF00                            ; ===========================================================================
0001DF00                            
0001DF00                            Obj09_Chk1Up:
0001DF00 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DF04 6600                       		bne.s	Obj09_ChkEmer
0001DF06 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001DF0A 6600                       		bne.s	Obj09_Get1Up
0001DF0C 14BC 0003                  		move.b	#3,(a2)
0001DF10 2549 0004                  		move.l	a1,4(a2)
0001DF14                            
0001DF14                            Obj09_Get1Up:
0001DF14 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DF18 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DF1C 303C 0088                  		move.w	#$88,d0
0001DF20 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra life music
0001DF26 7800                       		moveq	#0,d4
0001DF28 4E75                       		rts	
0001DF2A                            ; ===========================================================================
0001DF2A                            
0001DF2A                            Obj09_ChkEmer:
0001DF2A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DF2E 6500                       		bcs.s	Obj09_ChkGhost
0001DF30 0C04 0040                  		cmpi.b	#$40,d4
0001DF34 6200                       		bhi.s	Obj09_ChkGhost
0001DF36 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001DF3A 6600                       		bne.s	Obj09_GetEmer
0001DF3C 14BC 0005                  		move.b	#5,(a2)
0001DF40 2549 0004                  		move.l	a1,4(a2)
0001DF44                            
0001DF44                            Obj09_GetEmer:
0001DF44 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DF4A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DF4C 0404 003B                  		subi.b	#$3B,d4
0001DF50 7000                       		moveq	#0,d0
0001DF52 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DF56 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DF5A 1584 0000                  		move.b	d4,(a2,d0.w)
0001DF5E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DF62                            
0001DF62                            Obj09_NoEmer:
0001DF62 303C 0093                  		move.w	#$93,d0
0001DF66 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play emerald music
0001DF6C 7800                       		moveq	#0,d4
0001DF6E 4E75                       		rts	
0001DF70                            ; ===========================================================================
0001DF70                            
0001DF70                            Obj09_ChkGhost:
0001DF70 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DF74 6600                       		bne.s	Obj09_ChkGhostTag
0001DF76 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DF7C                            
0001DF7C                            Obj09_ChkGhostTag:
0001DF7C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DF80 6600                       		bne.s	Obj09_NoGhost
0001DF82 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DF88 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DF8A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DF90                            
0001DF90                            Obj09_NoGhost:
0001DF90 78FF                       		moveq	#-1,d4
0001DF92 4E75                       		rts	
0001DF94                            ; ===========================================================================
0001DF94                            
0001DF94                            Obj09_MakeGhostSolid:
0001DF94 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DF9A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DF9C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DFA2 723F                       		moveq	#$3F,d1
0001DFA4                            
0001DFA4                            Obj09_GhostLoop2:
0001DFA4 743F                       		moveq	#$3F,d2
0001DFA6                            
0001DFA6                            Obj09_GhostLoop:
0001DFA6 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DFAA 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DFAC 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DFB0                            
0001DFB0                            Obj09_NoReplace:
0001DFB0 5249                       		addq.w	#1,a1
0001DFB2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DFB6 43E9 0040                  		lea	$40(a1),a1
0001DFBA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DFBE                            
0001DFBE                            Obj09_GhostNotSolid:
0001DFBE 4228 003A                  		clr.b	$3A(a0)
0001DFC2 7800                       		moveq	#0,d4
0001DFC4 4E75                       		rts	
0001DFC6                            ; End of function Obj09_ChkItems
0001DFC6                            
0001DFC6                            
0001DFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFC6                            
0001DFC6                            
0001DFC6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DFC6 1028 0030                  		move.b	$30(a0),d0
0001DFCA 6600                       		bne.s	Obj09_ChkBumper
0001DFCC 5328 0036                  		subq.b	#1,$36(a0)
0001DFD0 6A00                       		bpl.s	loc_1BEA0
0001DFD2 117C 0000 0036             		move.b	#0,$36(a0)
0001DFD8                            
0001DFD8                            loc_1BEA0:
0001DFD8 5328 0037                  		subq.b	#1,$37(a0)
0001DFDC 6A00                       		bpl.s	locret_1BEAC
0001DFDE 117C 0000 0037             		move.b	#0,$37(a0)
0001DFE4                            
0001DFE4                            locret_1BEAC:
0001DFE4 4E75                       		rts	
0001DFE6                            ; ===========================================================================
0001DFE6                            
0001DFE6                            Obj09_ChkBumper:
0001DFE6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DFEA 6600                       		bne.s	Obj09_GOAL
0001DFEC 2228 0032                  		move.l	$32(a0),d1
0001DFF0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DFF6 3401                       		move.w	d1,d2
0001DFF8 0241 007F                  		andi.w	#$7F,d1
0001DFFC C2FC 0018                  		mulu.w	#$18,d1
0001E000 0441 0014                  		subi.w	#$14,d1
0001E004 EE4A                       		lsr.w	#7,d2
0001E006 0242 007F                  		andi.w	#$7F,d2
0001E00A C4FC 0018                  		mulu.w	#$18,d2
0001E00E 0442 0044                  		subi.w	#$44,d2
0001E012 9268 0008                  		sub.w	8(a0),d1
0001E016 9468 000C                  		sub.w	$C(a0),d2
0001E01A 4EB9 0000 2E48             		jsr	(CalcAngle).l
0001E020 4EB9 0000 2B7A             		jsr	(CalcSine).l
0001E026 C3FC F900                  		muls.w	#-$700,d1
0001E02A E081                       		asr.l	#8,d1
0001E02C 3141 0010                  		move.w	d1,$10(a0)
0001E030 C1FC F900                  		muls.w	#-$700,d0
0001E034 E080                       		asr.l	#8,d0
0001E036 3140 0012                  		move.w	d0,$12(a0)
0001E03A 08E8 0001 0022             		bset	#1,$22(a0)
0001E040 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001E044 6600                       		bne.s	Obj09_BumpSnd
0001E046 14BC 0002                  		move.b	#2,(a2)
0001E04A 2028 0032                  		move.l	$32(a0),d0
0001E04E 5380                       		subq.l	#1,d0
0001E050 2540 0004                  		move.l	d0,4(a2)
0001E054                            
0001E054                            Obj09_BumpSnd:
0001E054 303C 00B4                  		move.w	#$B4,d0
0001E058 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E05E                            ; ===========================================================================
0001E05E                            
0001E05E                            Obj09_GOAL:
0001E05E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E062 6600                       		bne.s	Obj09_UPblock
0001E064 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E068 303C 00A8                  		move.w	#$A8,d0		; change item
0001E06C 4EB9 0000 12CE             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E072 4E75                       		rts	
0001E074                            ; ===========================================================================
0001E074                            
0001E074                            Obj09_UPblock:
0001E074 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E078 6600                       		bne.s	Obj09_DOWNblock
0001E07A 4A28 0036                  		tst.b	$36(a0)
0001E07E 6600 0000                  		bne.w	Obj09_NoGlass
0001E082 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E088 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E08E 6700                       		beq.s	Obj09_UPsnd
0001E090 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E094 2268 0032                  		movea.l	$32(a0),a1
0001E098 5389                       		subq.l	#1,a1
0001E09A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E09E                            
0001E09E                            Obj09_UPsnd:
0001E09E 303C 00A9                  		move.w	#$A9,d0
0001E0A2 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E0A8                            ; ===========================================================================
0001E0A8                            
0001E0A8                            Obj09_DOWNblock:
0001E0A8 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E0AC 6600                       		bne.s	Obj09_Rblock
0001E0AE 4A28 0036                  		tst.b	$36(a0)
0001E0B2 6600 0000                  		bne.w	Obj09_NoGlass
0001E0B6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E0BC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E0C2 6600                       		bne.s	Obj09_DOWNsnd
0001E0C4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E0C8 2268 0032                  		movea.l	$32(a0),a1
0001E0CC 5389                       		subq.l	#1,a1
0001E0CE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E0D2                            
0001E0D2                            Obj09_DOWNsnd:
0001E0D2 303C 00A9                  		move.w	#$A9,d0
0001E0D6 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E0DC                            ; ===========================================================================
0001E0DC                            
0001E0DC                            Obj09_Rblock:
0001E0DC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E0E0 6600                       		bne.s	Obj09_ChkGlass
0001E0E2 4A28 0037                  		tst.b	$37(a0)
0001E0E6 6600 0000                  		bne.w	Obj09_NoGlass
0001E0EA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E0F0 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001E0F4 6600                       		bne.s	Obj09_RevStage
0001E0F6 14BC 0004                  		move.b	#4,(a2)
0001E0FA 2028 0032                  		move.l	$32(a0),d0
0001E0FE 5380                       		subq.l	#1,d0
0001E100 2540 0004                  		move.l	d0,4(a2)
0001E104                            
0001E104                            Obj09_RevStage:
0001E104 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E108 303C 00A9                  		move.w	#$A9,d0
0001E10C 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play sound
0001E112                            ; ===========================================================================
0001E112                            
0001E112                            Obj09_ChkGlass:
0001E112 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E116 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E118 0C00 002E                  		cmpi.b	#$2E,d0
0001E11C 6700                       		beq.s	Obj09_Glass
0001E11E 0C00 002F                  		cmpi.b	#$2F,d0
0001E122 6700                       		beq.s	Obj09_Glass
0001E124 0C00 0030                  		cmpi.b	#$30,d0
0001E128 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001E12A                            
0001E12A                            Obj09_Glass:
0001E12A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001E12E 6600                       		bne.s	Obj09_GlassSnd
0001E130 14BC 0006                  		move.b	#6,(a2)
0001E134 2268 0032                  		movea.l	$32(a0),a1
0001E138 5389                       		subq.l	#1,a1
0001E13A 2549 0004                  		move.l	a1,4(a2)
0001E13E 1011                       		move.b	(a1),d0
0001E140 5200                       		addq.b	#1,d0		; change glass type when touched
0001E142 0C00 0030                  		cmpi.b	#$30,d0
0001E146 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E148 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E14A                            
0001E14A                            Obj09_GlassUpdate:
0001E14A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E14E                            
0001E14E                            Obj09_GlassSnd:
0001E14E 303C 00BA                  		move.w	#$BA,d0
0001E152 4EF9 0000 12CE             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E158                            ; ===========================================================================
0001E158                            
0001E158                            Obj09_NoGlass:
0001E158 4E75                       		rts	
0001E15A                            ; End of function Obj09_ChkItems2
0001E15A                            
0001E15A                            ; ===========================================================================
0001E15A                            ; ---------------------------------------------------------------------------
0001E15A                            ; Object 10 - blank
0001E15A                            ; ---------------------------------------------------------------------------
0001E15A                            
0001E15A                            Obj10:					; XREF: Obj_Index
0001E15A 4E75                       		rts	
0001E15C                            
0001E15C                            ; ===========================================================================
0001E15C                            ; ---------------------------------------------------------------------------
0001E15C                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001E15C                            ; ---------------------------------------------------------------------------
0001E15C                            
0001E15C                            Obj03:
0001E15C 7000                       		moveq	#0,d0
0001E15E 1028 0024                  		move.b	$24(a0),d0
0001E162 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001E166 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001E16A 3028 0008                  		move.w	8(a0),d0
0001E16E 0240 FF80                  		andi.w	#$FF80,d0
0001E172 3238 F700                  		move.w	($FFFFF700).w,d1
0001E176 0441 0080                  		subi.w	#$80,d1
0001E17A 0241 FF80                  		andi.w	#$FF80,d1
0001E17E 9041                       		sub.w	d1,d0
0001E180 0C40 0280                  		cmpi.w	#$280,d0
0001E184 6200                       		bhi.s	Obj03_MarkChkGone
0001E186 4E75                       		rts
0001E188                            
0001E188                            Obj03_MarkChkGone:
0001E188 4EF9 0001 125C             		jmp	Mark_ChkGone
0001E18E                            ; ===========================================================================
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001E190 0000                       		dc.w Obj03_MainX-Obj03_Index
0001E192 0000                       		dc.w Obj03_MainY-Obj03_Index
0001E194                            ; ---------------------------------------------------------------------------
0001E194                            ; ===========================================================================
0001E194                            ; ---------------------------------------------------------------------------
0001E194                            ; Initiation
0001E194                            ; ---------------------------------------------------------------------------
0001E194                            
0001E194                            Obj03_Init:
0001E194 5428 0024                  		addq.b	#2,$24(a0)
0001E198 217C 0000 0000 0004        		move.l	#$00000000,$04(a0)
0001E1A0 317C 26BC 0002             		move.w	#$26BC,$02(a0)
0001E1A6 0028 0004 0001             		ori.b	#4,$01(a0)
0001E1AC 117C 0010 0019             		move.b	#$10,$19(a0)
0001E1B2 117C 0005 0018             		move.b	#5,$18(a0)
0001E1B8 1028 0028                  		move.b	$28(a0),d0
0001E1BC 0800 0002                  		btst	#2,d0
0001E1C0 6700                       		beq.s	Obj03_Init_CheckX
0001E1C2                            
0001E1C2                            ;Obj03_Init_CheckY:
0001E1C2 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001E1C6 0240 0007                  		andi.w	#7,d0
0001E1CA 1140 001A                  		move.b	d0,$1A(a0)
0001E1CE 0240 0003                  		andi.w	#3,d0
0001E1D2 D040                       		add.w	d0,d0
0001E1D4 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E1DA 3228 000C                  		move.w	$0C(a0),d1
0001E1DE 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E1E2 B269 000C                  		cmp.w	$0C(a1),d1
0001E1E6 6400                       		bcc.s	Obj03_Init_Next
0001E1E8 117C 0001 0034             		move.b	#1,$34(a0)
0001E1EE                            Obj03_Init_Next:
0001E1EE                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E1EE                            	;	cmp.w	$0C(a1),d1
0001E1EE                            	;	bcc.s	+
0001E1EE                            	;	move.b	#1,$35(a0)
0001E1EE                            ;+
0001E1EE 6000 0000                  		bra.w	Obj03_MainY
0001E1F2                            ; ===========================================================================
0001E1F2                            word_1FD68:
0001E1F2 0020                       	dc.w  $020
0001E1F4 0040                       	dc.w  $040	; 1
0001E1F6 0080                       	dc.w  $080	; 2
0001E1F8 0100                       	dc.w  $100	; 3
0001E1FA                            ; ===========================================================================
0001E1FA                            ; loc_1FD70:
0001E1FA                            Obj03_Init_CheckX:
0001E1FA 0240 0003                  		andi.w	#3,d0
0001E1FE 1140 001A                  		move.b	d0,$1A(a0)
0001E202 D040                       		add.w	d0,d0
0001E204 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001E20A 3228 0008                  		move.w	$08(a0),d1
0001E20E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E212 B269 0008                  		cmp.w	$08(a1),d1
0001E216 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001E218 117C 0001 0034             		move.b	#1,$34(a0)
0001E21E                            Obj03_Init_CheckX_Next:
0001E21E                            	;	lea	(Sidekick).w,a1 ; a1=character
0001E21E                            	;	cmp.w	$08(a1),d1
0001E21E                            	;	bcc.s	+
0001E21E                            	;	move.b	#1,$35(a0)
0001E21E                            ;+
0001E21E                            
0001E21E                            Obj03_MainX:
0001E21E 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E222 6600 0000                  		bne.w	return_1FEAC
0001E226 3228 0008                  		move.w	$08(a0),d1
0001E22A 45E8 0034                  		lea	$34(a0),a2
0001E22E 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E232                            ;		bsr.s	+
0001E232                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E232                            
0001E232                            ;+
0001E232 4A1A                       		tst.b	(a2)+
0001E234 6600                       		bne.s	Obj03_MainX_Alt
0001E236 B269 0008                  		cmp.w	$08(a1),d1
0001E23A 6200 0000                  		bhi.w	return_1FEAC
0001E23E 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E244 3428 000C                  		move.w	$0C(a0),d2
0001E248 3602                       		move.w	d2,d3
0001E24A 3828 0032                  		move.w	$32(a0),d4
0001E24E 9444                       		sub.w	d4,d2
0001E250 D644                       		add.w	d4,d3
0001E252 3829 000C                  		move.w	$0C(a1),d4
0001E256 B842                       		cmp.w	d2,d4
0001E258 6D00 0000                  		blt.w	return_1FEAC
0001E25C B843                       		cmp.w	d3,d4
0001E25E 6C00 0000                  		bge.w	return_1FEAC
0001E262 1028 0028                  		move.b	$28(a0),d0
0001E266 6A00                       		bpl.s	Obj03_ICX_B1
0001E268 0829 0001 002B             		btst	#1,$2B(a1)
0001E26E 6600 0000                  		bne.w	return_1FEAC
0001E272                            
0001E272                            Obj03_ICX_B1:
0001E272 0828 0000 0001             		btst	#0,$01(a0)
0001E278 6600                       		bne.s	Obj03_ICX_B2
0001E27A 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E280                            	;	move.b	#$C,$3E(a1)
0001E280                            	;	move.b	#$D,$3F(a1)
0001E280 0800 0003                  		btst	#3,d0
0001E284 6700                       		beq.s	Obj03_ICX_B2
0001E286 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E28C                            	;	move.b	#$E,$3E(a1)
0001E28C                            	;	move.b	#$F,$3F(a1)
0001E28C                            
0001E28C                            Obj03_ICX_B2:
0001E28C 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E292 0800 0005                  		btst	#5,d0
0001E296 6700                       		beq.s	return_1FEAC
0001E298 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E29E 6000                       		bra.s	return_1FEAC
0001E2A0                            ; ===========================================================================
0001E2A0                            
0001E2A0                            Obj03_MainX_Alt:
0001E2A0 B269 0008                  		cmp.w	$08(a1),d1
0001E2A4 6300 0000                  		bls.w	return_1FEAC
0001E2A8 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E2AE 3428 000C                  		move.w	$0C(a0),d2
0001E2B2 3602                       		move.w	d2,d3
0001E2B4 3828 0032                  		move.w	$32(a0),d4
0001E2B8 9444                       		sub.w	d4,d2
0001E2BA D644                       		add.w	d4,d3
0001E2BC 3829 000C                  		move.w	$0C(a1),d4
0001E2C0 B842                       		cmp.w	d2,d4
0001E2C2 6D00 0000                  		blt.w	return_1FEAC
0001E2C6 B843                       		cmp.w	d3,d4
0001E2C8 6C00 0000                  		bge.w	return_1FEAC
0001E2CC 1028 0028                  		move.b	$28(a0),d0
0001E2D0 6A00                       		bpl.s	Obj03_MXA_B1
0001E2D2 0829 0001 002B             		btst	#1,$2B(a1)
0001E2D8 6600 0000                  		bne.w	return_1FEAC
0001E2DC                            
0001E2DC                            Obj03_MXA_B1:
0001E2DC 0828 0000 0001             		btst	#0,$01(a0)
0001E2E2 6600                       		bne.s	Obj03_MXA_B2
0001E2E4 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E2EA                            	;	move.b	#$C,$3E(a1)
0001E2EA                            	;	move.b	#$D,$3F(a1)
0001E2EA 0800 0004                  		btst	#4,d0
0001E2EE 6700                       		beq.s	Obj03_MXA_B2
0001E2F0 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E2F6                            	;	move.b	#$E,$3E(a1)
0001E2F6                            	;	move.b	#$F,$3F(a1)
0001E2F6                            
0001E2F6                            Obj03_MXA_B2:
0001E2F6 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E2FC 0800 0006                  		btst	#6,d0
0001E300 6700                       		beq.s	return_1FEAC
0001E302 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E308                            
0001E308                            return_1FEAC:
0001E308 4E75                       		rts
0001E30A                            
0001E30A                            ; ===========================================================================
0001E30A                            
0001E30A                            Obj03_MainY:
0001E30A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001E30E 6600 0000                  		bne.w	return_1FFB6
0001E312 3228 000C                  		move.w	$0C(a0),d1
0001E316 45E8 0034                  		lea	$34(a0),a2
0001E31A 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001E31E                            ;		bsr.s	+
0001E31E                            ;		lea	(Sidekick).w,a1 ; a1=character
0001E31E                            
0001E31E                            ;+
0001E31E 4A1A                       		tst.b	(a2)+
0001E320 6600                       		bne.s	Obj03_MainY_Alt
0001E322 B269 000C                  		cmp.w	$0C(a1),d1
0001E326 6200 0000                  		bhi.w	return_1FFB6
0001E32A 157C 0001 FFFF             		move.b	#1,-1(a2)
0001E330 3428 0008                  		move.w	$08(a0),d2
0001E334 3602                       		move.w	d2,d3
0001E336 3828 0032                  		move.w	$32(a0),d4
0001E33A 9444                       		sub.w	d4,d2
0001E33C D644                       		add.w	d4,d3
0001E33E 3829 0008                  		move.w	$08(a1),d4
0001E342 B842                       		cmp.w	d2,d4
0001E344 6D00 0000                  		blt.w	return_1FFB6
0001E348 B843                       		cmp.w	d3,d4
0001E34A 6C00 0000                  		bge.w	return_1FFB6
0001E34E 1028 0028                  		move.b	$28(a0),d0
0001E352 6A00                       		bpl.s	Obj03_MY_B1
0001E354 0829 0001 002B             		btst	#1,$2B(a1)
0001E35A 6600 0000                  		bne.w	return_1FFB6
0001E35E                            
0001E35E                            Obj03_MY_B1:
0001E35E 0828 0000 0001             		btst	#0,$01(a0)
0001E364 6600                       		bne.s	Obj03_MY_B2
0001E366 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E36C                            	;	move.b	#$C,$3E(a1)
0001E36C                            	;	move.b	#$D,$3F(a1)
0001E36C 0800 0003                  		btst	#3,d0
0001E370 6700                       		beq.s	Obj03_MY_B2
0001E372 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E378                            	;	move.b	#$E,$3E(a1)
0001E378                            	;	move.b	#$F,$3F(a1)
0001E378                            
0001E378                            Obj03_MY_B2:
0001E378 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E37E 0800 0005                  		btst	#5,d0
0001E382 6700                       		beq.s	return_1FFB6
0001E384 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E38A 6000                       		bra.s	return_1FFB6
0001E38C                            
0001E38C                            ; ===========================================================================
0001E38C                            
0001E38C                            Obj03_MainY_Alt:
0001E38C B269 000C                  		cmp.w	$0C(a1),d1
0001E390 6300 0000                  		bls.w	return_1FFB6
0001E394 157C 0000 FFFF             		move.b	#0,-1(a2)
0001E39A 3428 0008                  		move.w	$08(a0),d2
0001E39E 3602                       		move.w	d2,d3
0001E3A0 3828 0032                  		move.w	$32(a0),d4
0001E3A4 9444                       		sub.w	d4,d2
0001E3A6 D644                       		add.w	d4,d3
0001E3A8 3829 0008                  		move.w	$08(a1),d4
0001E3AC B842                       		cmp.w	d2,d4
0001E3AE 6D00 0000                  		blt.w	return_1FFB6
0001E3B2 B843                       		cmp.w	d3,d4
0001E3B4 6C00 0000                  		bge.w	return_1FFB6
0001E3B8 1028 0028                  		move.b	$28(a0),d0
0001E3BC 6A00                       		bpl.s	Obj03_MYA_B1
0001E3BE 0829 0001 002B             		btst	#1,$2B(a1)
0001E3C4 6600 0000                  		bne.w	return_1FFB6
0001E3C8                            
0001E3C8                            Obj03_MYA_B1
0001E3C8 0828 0000 0001             		btst	#0,$01(a0)
0001E3CE 6600                       		bne.s	Obj03_MYA_B2
0001E3D0 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001E3D6                            	;	move.b	#$C,$3E(a1)
0001E3D6                            	;	move.b	#$D,$3F(a1)
0001E3D6 0800 0004                  		btst	#4,d0
0001E3DA 6700                       		beq.s	Obj03_MYA_B2
0001E3DC 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001E3E2                            	;	move.b	#$E,$3E(a1)
0001E3E2                            	;	move.b	#$F,$3F(a1)
0001E3E2                            
0001E3E2                            Obj03_MYA_B2:
0001E3E2 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001E3E8 0800 0006                  		btst	#6,d0
0001E3EC 6700                       		beq.s	return_1FFB6
0001E3EE 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001E3F4                            
0001E3F4                            return_1FFB6:
0001E3F4 4E75                       		rts
0001E3F6                            
0001E3F6                            ; ===========================================================================
0001E3F6                            ; ---------------------------------------------------------------------------
0001E3F6                            ; Subroutine to	animate	level graphics
0001E3F6                            ; ---------------------------------------------------------------------------
0001E3F6                            
0001E3F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3F6                            
0001E3F6                            
0001E3F6                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E3F6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E3FA 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E3FC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E402 6100 0000                  		bsr.w	AniArt_GiantRing
0001E406 7000                       		moveq	#0,d0
0001E408 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E40C D040                       		add.w	d0,d0
0001E40E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E412 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E416                            ; ===========================================================================
0001E416                            
0001E416                            AniArt_Pause:
0001E416 4E75                       		rts	
0001E418                            ; End of function AniArt_Load
0001E418                            
0001E418                            ; ===========================================================================
0001E418 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E41C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E420 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E424 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E426                            ; ===========================================================================
0001E426                            ; ---------------------------------------------------------------------------
0001E426                            ; Animated pattern routine - Green Hill
0001E426                            ; ---------------------------------------------------------------------------
0001E426                            
0001E426                            AniArt_GHZ:				; XREF: AniArt_Index
0001E426 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E42A 6A00                       		bpl.s	loc_1C08A
0001E42C 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E432 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E438 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E43C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E440 0240 0001                  		andi.w	#1,d0
0001E444 6700                       		beq.s	loc_1C078
0001E446 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E44A                            
0001E44A                            loc_1C078:
0001E44A 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E454 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E458 6000 0000                  		bra.w	LoadTiles
0001E45C                            ; ===========================================================================
0001E45C                            
0001E45C                            loc_1C08A:
0001E45C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E460 6A00                       		bpl.s	loc_1C0C0
0001E462 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E468 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E46E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E472 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E476 0240 0001                  		andi.w	#1,d0
0001E47A 6700                       		beq.s	loc_1C0AE
0001E47C 43E9 0200                  		lea	$200(a1),a1
0001E480                            
0001E480                            loc_1C0AE:
0001E480 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E48A 323C 000F                  		move.w	#$F,d1
0001E48E 6000 0000                  		bra.w	LoadTiles
0001E492                            ; ===========================================================================
0001E492                            
0001E492                            loc_1C0C0:
0001E492 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E496 6A00                       		bpl.s	locret_1C10C
0001E498 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E49E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E4A2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E4A6 0240 0003                  		andi.w	#3,d0
0001E4AA 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E4AE 0800 0000                  		btst	#0,d0
0001E4B2 6600                       		bne.s	loc_1C0E8
0001E4B4 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E4BA                            
0001E4BA                            loc_1C0E8:
0001E4BA EF48                       		lsl.w	#7,d0
0001E4BC 3200                       		move.w	d0,d1
0001E4BE D040                       		add.w	d0,d0
0001E4C0 D041                       		add.w	d1,d0
0001E4C2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E4CC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E4D2 43F1 0000                  		lea	(a1,d0.w),a1
0001E4D6 323C 000B                  		move.w	#$B,d1
0001E4DA 6100 0000                  		bsr.w	LoadTiles
0001E4DE                            
0001E4DE                            locret_1C10C:
0001E4DE 4E75                       		rts	
0001E4E0                            ; ===========================================================================
0001E4E0 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E4E4                            ; ===========================================================================
0001E4E4                            ; ---------------------------------------------------------------------------
0001E4E4                            ; Animated pattern routine - Marble
0001E4E4                            ; ---------------------------------------------------------------------------
0001E4E4                            
0001E4E4                            AniArt_MZ:				; XREF: AniArt_Index
0001E4E4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E4E8 6A00                       		bpl.s	loc_1C150
0001E4EA 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E4F0 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E4F6 7000                       		moveq	#0,d0
0001E4F8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E4FC 5200                       		addq.b	#1,d0
0001E4FE 0C00 0003                  		cmpi.b	#3,d0
0001E502 6600                       		bne.s	loc_1C134
0001E504 7000                       		moveq	#0,d0
0001E506                            
0001E506                            loc_1C134:
0001E506 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E50A C0FC 0100                  		mulu.w	#$100,d0
0001E50E D2C0                       		adda.w	d0,a1
0001E510 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E51A 323C 0007                  		move.w	#7,d1
0001E51E 6100 0000                  		bsr.w	LoadTiles
0001E522                            
0001E522                            loc_1C150:
0001E522 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E526 6A00                       		bpl.s	loc_1C1AE
0001E528 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E52E 7000                       		moveq	#0,d0
0001E530 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E534 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E53A EE58                       		ror.w	#7,d0
0001E53C D8C0                       		adda.w	d0,a4
0001E53E 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E548 7600                       		moveq	#0,d3
0001E54A 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E54E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E552 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E556 343C 0003                  		move.w	#3,d2
0001E55A                            
0001E55A                            loc_1C188:
0001E55A 3003                       		move.w	d3,d0
0001E55C D040                       		add.w	d0,d0
0001E55E 0240 001E                  		andi.w	#$1E,d0
0001E562 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E568 3033 0000                  		move.w	(a3,d0.w),d0
0001E56C 47F3 0000                  		lea	(a3,d0.w),a3
0001E570 224C                       		movea.l	a4,a1
0001E572 323C 001F                  		move.w	#$1F,d1
0001E576 4E93                       		jsr	(a3)
0001E578 5843                       		addq.w	#4,d3
0001E57A 51CA FFDE                  		dbf	d2,loc_1C188
0001E57E 4E75                       		rts	
0001E580                            ; ===========================================================================
0001E580                            
0001E580                            loc_1C1AE:
0001E580 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E584 6A00 0000                  		bpl.w	locret_1C1EA
0001E588 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E58E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E594 7000                       		moveq	#0,d0
0001E596 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E59A 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E59E 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E5A4 C0FC 00C0                  		mulu.w	#$C0,d0
0001E5A8 D2C0                       		adda.w	d0,a1
0001E5AA 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E5B4 323C 0005                  		move.w	#5,d1
0001E5B8 6000 0000                  		bra.w	LoadTiles
0001E5BC                            ; ===========================================================================
0001E5BC                            
0001E5BC                            locret_1C1EA:
0001E5BC 4E75                       		rts	
0001E5BE                            ; ===========================================================================
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE                            ; Animated pattern routine - Scrap Brain
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE                            
0001E5BE                            AniArt_SBZ:				; XREF: AniArt_Index
0001E5BE 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E5C2 6700                       		beq.s	loc_1C1F8
0001E5C4 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E5C8 6000                       		bra.s	loc_1C250
0001E5CA                            ; ===========================================================================
0001E5CA                            
0001E5CA                            loc_1C1F8:
0001E5CA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E5CE 6A00                       		bpl.s	loc_1C250
0001E5D0 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E5D6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E5DC 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E5E6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E5EA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E5EE 0240 0007                  		andi.w	#7,d0
0001E5F2 6700                       		beq.s	loc_1C234
0001E5F4 5340                       		subq.w	#1,d0
0001E5F6 C0FC 0180                  		mulu.w	#$180,d0
0001E5FA 43F1 0000                  		lea	(a1,d0.w),a1
0001E5FE 323C 000B                  		move.w	#$B,d1
0001E602 6000 0000                  		bra.w	LoadTiles
0001E606                            ; ===========================================================================
0001E606                            
0001E606                            loc_1C234:
0001E606 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E60C                            
0001E60C                            loc_1C23A:
0001E60C 323C 0005                  		move.w	#5,d1
0001E610 6100 0000                  		bsr.w	LoadTiles
0001E614 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E61A 323C 0005                  		move.w	#5,d1
0001E61E 6000 0000                  		bra.w	LoadTiles
0001E622                            ; ===========================================================================
0001E622                            
0001E622                            loc_1C250:
0001E622 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E626 6700                       		beq.s	loc_1C25C
0001E628 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E62C 6000                       		bra.s	locret_1C2A0
0001E62E                            ; ===========================================================================
0001E62E                            
0001E62E                            loc_1C25C:
0001E62E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E632 6A00                       		bpl.s	locret_1C2A0
0001E634 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E63A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E640 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E64A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E64E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E652 0240 0007                  		andi.w	#7,d0
0001E656 6700                       		beq.s	loc_1C298
0001E658 5340                       		subq.w	#1,d0
0001E65A C0FC 0180                  		mulu.w	#$180,d0
0001E65E 43F1 0000                  		lea	(a1,d0.w),a1
0001E662 323C 000B                  		move.w	#$B,d1
0001E666 6000 0000                  		bra.w	LoadTiles
0001E66A                            ; ===========================================================================
0001E66A                            
0001E66A                            loc_1C298:
0001E66A 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E670 609A                       		bra.s	loc_1C23A
0001E672                            ; ===========================================================================
0001E672                            
0001E672                            locret_1C2A0:
0001E672 4E75                       		rts	
0001E674                            ; ===========================================================================
0001E674                            ; ---------------------------------------------------------------------------
0001E674                            ; Animated pattern routine - ending sequence
0001E674                            ; ---------------------------------------------------------------------------
0001E674                            
0001E674                            AniArt_Ending:				; XREF: AniArt_Index
0001E674 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E678 6A00                       		bpl.s	loc_1C2F4
0001E67A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E680 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E686 45F8 9400                  		lea	($FFFF9400).w,a2
0001E68A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E68E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E692 0240 0001                  		andi.w	#1,d0
0001E696 6700                       		beq.s	loc_1C2CE
0001E698 43E9 0200                  		lea	$200(a1),a1
0001E69C 45EA 0200                  		lea	$200(a2),a2
0001E6A0                            
0001E6A0                            loc_1C2CE:
0001E6A0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E6AA 323C 000F                  		move.w	#$F,d1
0001E6AE 6100 0000                  		bsr.w	LoadTiles
0001E6B2 224A                       		movea.l	a2,a1
0001E6B4 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E6BE 323C 000F                  		move.w	#$F,d1
0001E6C2 6000 0000                  		bra.w	LoadTiles
0001E6C6                            ; ===========================================================================
0001E6C6                            
0001E6C6                            loc_1C2F4:
0001E6C6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E6CA 6A00                       		bpl.s	loc_1C33C
0001E6CC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E6D2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E6D6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E6DA 0240 0007                  		andi.w	#7,d0
0001E6DE 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E6E2 EF48                       		lsl.w	#7,d0
0001E6E4 3200                       		move.w	d0,d1
0001E6E6 D040                       		add.w	d0,d0
0001E6E8 D041                       		add.w	d1,d0
0001E6EA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E6F4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E6FA 43F1 0000                  		lea	(a1,d0.w),a1
0001E6FE 323C 000B                  		move.w	#$B,d1
0001E702 6000 0000                  		bra.w	LoadTiles
0001E706                            ; ===========================================================================
0001E706 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E70E                            ; ===========================================================================
0001E70E                            
0001E70E                            loc_1C33C:
0001E70E 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E712 6A00                       		bpl.s	loc_1C37A
0001E714 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E71A 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E71E 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E722 0240 0003                  		andi.w	#3,d0
0001E726 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E72A E148                       		lsl.w	#8,d0
0001E72C D040                       		add.w	d0,d0
0001E72E 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E738 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E73C 43F1 0000                  		lea	(a1,d0.w),a1
0001E740 323C 000F                  		move.w	#$F,d1
0001E744 6000 0000                  		bra.w	LoadTiles
0001E748                            ; ===========================================================================
0001E748 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E74C                            ; ===========================================================================
0001E74C                            
0001E74C                            loc_1C37A:
0001E74C 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E750 6A00                       		bpl.s	locret_1C3B4
0001E752 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E758 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E75C 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E760 0240 0003                  		andi.w	#3,d0
0001E764 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E768 E148                       		lsl.w	#8,d0
0001E76A D040                       		add.w	d0,d0
0001E76C 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E776 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E77A 43F1 0000                  		lea	(a1,d0.w),a1
0001E77E 323C 000F                  		move.w	#$F,d1
0001E782 6000 0000                  		bra.w	LoadTiles
0001E786                            ; ===========================================================================
0001E786                            
0001E786                            locret_1C3B4:
0001E786 4E75                       		rts	
0001E788                            ; ===========================================================================
0001E788                            
0001E788                            AniArt_none:				; XREF: AniArt_Index
0001E788 4E75                       		rts	
0001E78A                            
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            
0001E78A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E78A                            
0001E78A                            
0001E78A                            LoadTiles:
0001E78A 2C99                       		move.l	(a1)+,(a6)
0001E78C 2C99                       		move.l	(a1)+,(a6)
0001E78E 2C99                       		move.l	(a1)+,(a6)
0001E790 2C99                       		move.l	(a1)+,(a6)
0001E792 2C99                       		move.l	(a1)+,(a6)
0001E794 2C99                       		move.l	(a1)+,(a6)
0001E796 2C99                       		move.l	(a1)+,(a6)
0001E798 2C99                       		move.l	(a1)+,(a6)
0001E79A 51C9 FFEE                  		dbf	d1,LoadTiles
0001E79E 4E75                       		rts	
0001E7A0                            ; End of function LoadTiles
0001E7A0                            
0001E7A0                            ; ===========================================================================
0001E7A0                            ; ---------------------------------------------------------------------------
0001E7A0                            ; Animated pattern routine - more Marble Zone
0001E7A0                            ; ---------------------------------------------------------------------------
0001E7A0 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E7A4 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E7A8 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E7AC 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E7B0 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E7B4 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E7B8 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E7BC 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E7C0                            ; ===========================================================================
0001E7C0                            
0001E7C0                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E7C0 2C91                       		move.l	(a1),(a6)
0001E7C2 43E9 0010                  		lea	$10(a1),a1
0001E7C6 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E7CA 4E75                       		rts	
0001E7CC                            ; ===========================================================================
0001E7CC                            
0001E7CC                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E7CC 2029 0002                  		move.l	2(a1),d0
0001E7D0 1029 0001                  		move.b	1(a1),d0
0001E7D4 E098                       		ror.l	#8,d0
0001E7D6 2C80                       		move.l	d0,(a6)
0001E7D8 43E9 0010                  		lea	$10(a1),a1
0001E7DC 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E7E0 4E75                       		rts	
0001E7E2                            ; ===========================================================================
0001E7E2                            
0001E7E2                            loc_1C410:				; XREF: AniArt_MZextra
0001E7E2 2CA9 0002                  		move.l	2(a1),(a6)
0001E7E6 43E9 0010                  		lea	$10(a1),a1
0001E7EA 51C9 FFF6                  		dbf	d1,loc_1C410
0001E7EE 4E75                       		rts	
0001E7F0                            ; ===========================================================================
0001E7F0                            
0001E7F0                            loc_1C41E:				; XREF: AniArt_MZextra
0001E7F0 2029 0004                  		move.l	4(a1),d0
0001E7F4 1029 0003                  		move.b	3(a1),d0
0001E7F8 E098                       		ror.l	#8,d0
0001E7FA 2C80                       		move.l	d0,(a6)
0001E7FC 43E9 0010                  		lea	$10(a1),a1
0001E800 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E804 4E75                       		rts	
0001E806                            ; ===========================================================================
0001E806                            
0001E806                            loc_1C434:				; XREF: AniArt_MZextra
0001E806 2CA9 0004                  		move.l	4(a1),(a6)
0001E80A 43E9 0010                  		lea	$10(a1),a1
0001E80E 51C9 FFF6                  		dbf	d1,loc_1C434
0001E812 4E75                       		rts	
0001E814                            ; ===========================================================================
0001E814                            
0001E814                            loc_1C442:				; XREF: AniArt_MZextra
0001E814 2029 0006                  		move.l	6(a1),d0
0001E818 1029 0005                  		move.b	5(a1),d0
0001E81C E098                       		ror.l	#8,d0
0001E81E 2C80                       		move.l	d0,(a6)
0001E820 43E9 0010                  		lea	$10(a1),a1
0001E824 51C9 FFEE                  		dbf	d1,loc_1C442
0001E828 4E75                       		rts	
0001E82A                            ; ===========================================================================
0001E82A                            
0001E82A                            loc_1C458:				; XREF: AniArt_MZextra
0001E82A 2CA9 0006                  		move.l	6(a1),(a6)
0001E82E 43E9 0010                  		lea	$10(a1),a1
0001E832 51C9 FFF6                  		dbf	d1,loc_1C458
0001E836 4E75                       		rts	
0001E838                            ; ===========================================================================
0001E838                            
0001E838                            loc_1C466:				; XREF: AniArt_MZextra
0001E838 2029 0008                  		move.l	8(a1),d0
0001E83C 1029 0007                  		move.b	7(a1),d0
0001E840 E098                       		ror.l	#8,d0
0001E842 2C80                       		move.l	d0,(a6)
0001E844 43E9 0010                  		lea	$10(a1),a1
0001E848 51C9 FFEE                  		dbf	d1,loc_1C466
0001E84C 4E75                       		rts	
0001E84E                            ; ===========================================================================
0001E84E                            
0001E84E                            loc_1C47C:				; XREF: AniArt_MZextra
0001E84E 2CA9 0008                  		move.l	8(a1),(a6)
0001E852 43E9 0010                  		lea	$10(a1),a1
0001E856 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E85A 4E75                       		rts	
0001E85C                            ; ===========================================================================
0001E85C                            
0001E85C                            loc_1C48A:				; XREF: AniArt_MZextra
0001E85C 2029 000A                  		move.l	$A(a1),d0
0001E860 1029 0009                  		move.b	9(a1),d0
0001E864 E098                       		ror.l	#8,d0
0001E866 2C80                       		move.l	d0,(a6)
0001E868 43E9 0010                  		lea	$10(a1),a1
0001E86C 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E870 4E75                       		rts	
0001E872                            ; ===========================================================================
0001E872                            
0001E872                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E872 2CA9 000A                  		move.l	$A(a1),(a6)
0001E876 43E9 0010                  		lea	$10(a1),a1
0001E87A 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E87E 4E75                       		rts	
0001E880                            ; ===========================================================================
0001E880                            
0001E880                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E880 2029 000C                  		move.l	$C(a1),d0
0001E884 1029 000B                  		move.b	$B(a1),d0
0001E888 E098                       		ror.l	#8,d0
0001E88A 2C80                       		move.l	d0,(a6)
0001E88C 43E9 0010                  		lea	$10(a1),a1
0001E890 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E894 4E75                       		rts	
0001E896                            ; ===========================================================================
0001E896                            
0001E896                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E896 2CA9 000C                  		move.l	$C(a1),(a6)
0001E89A 43E9 0010                  		lea	$10(a1),a1
0001E89E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E8A2 4E75                       		rts	
0001E8A4                            ; ===========================================================================
0001E8A4                            
0001E8A4                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E8A4 2029 000C                  		move.l	$C(a1),d0
0001E8A8 E198                       		rol.l	#8,d0
0001E8AA 1011                       		move.b	0(a1),d0
0001E8AC 2C80                       		move.l	d0,(a6)
0001E8AE 43E9 0010                  		lea	$10(a1),a1
0001E8B2 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E8B6 4E75                       		rts	
0001E8B8                            ; ===========================================================================
0001E8B8                            
0001E8B8                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E8B8 3CA9 000E                  		move.w	$E(a1),(a6)
0001E8BC 3C91                       		move.w	0(a1),(a6)
0001E8BE 43E9 0010                  		lea	$10(a1),a1
0001E8C2 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E8C6 4E75                       		rts	
0001E8C8                            ; ===========================================================================
0001E8C8                            
0001E8C8                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E8C8 2011                       		move.l	0(a1),d0
0001E8CA 1029 000F                  		move.b	$F(a1),d0
0001E8CE E098                       		ror.l	#8,d0
0001E8D0 2C80                       		move.l	d0,(a6)
0001E8D2 43E9 0010                  		lea	$10(a1),a1
0001E8D6 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E8DA 4E75                       		rts	
0001E8DC                            
0001E8DC                            ; ---------------------------------------------------------------------------
0001E8DC                            ; Animated pattern routine - giant ring
0001E8DC                            ; ---------------------------------------------------------------------------
0001E8DC                            
0001E8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8DC                            
0001E8DC                            
0001E8DC                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E8DC 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E8E0 6600                       		bne.s	loc_1C518
0001E8E2 4E75                       		rts	
0001E8E4                            ; ===========================================================================
0001E8E4                            
0001E8E4                            loc_1C518:
0001E8E4 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E8EA 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E8F0 7000                       		moveq	#0,d0
0001E8F2 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E8F6 43F1 0000                  		lea	(a1,d0.w),a1
0001E8FA 0640 8000                  		addi.w	#$8000,d0
0001E8FE E588                       		lsl.l	#2,d0
0001E900 E448                       		lsr.w	#2,d0
0001E902 0040 4000                  		ori.w	#$4000,d0
0001E906 4840                       		swap	d0
0001E908 2D40 0004                  		move.l	d0,4(a6)
0001E90C 323C 000D                  		move.w	#$D,d1
0001E910 6000 FE78                  		bra.w	LoadTiles
0001E914                            ; End of function AniArt_GiantRing
0001E914                            
0001E914                            ; ===========================================================================
0001E914                            ; ---------------------------------------------------------------------------
0001E914                            ; Object 21 - SCORE, TIME, RINGS
0001E914                            ; ---------------------------------------------------------------------------
0001E914                            
0001E914                            Obj21:					; XREF: Obj_Index
0001E914 7000                       		moveq	#0,d0
0001E916 1028 0024                  		move.b	$24(a0),d0
0001E91A 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001E91E 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001E922                            ; ===========================================================================
0001E922 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001E924 0000                       		dc.w Obj21_Flash-Obj21_Index
0001E926                            ; ===========================================================================
0001E926                            
0001E926                            Obj21_Main:				; XREF: Obj21_Main
0001E926 5428 0024                  		addq.b	#2,$24(a0)
0001E92A 317C 0090 0008             		move.w	#$90,8(a0)
0001E930 317C 0108 000A             		move.w	#$108,$A(a0)
0001E936 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001E93E 317C 86CA 0002             		move.w	#$86CA,2(a0)
0001E944 117C 0000 0001             		move.b	#0,1(a0)
0001E94A 117C 0000 0018             		move.b	#0,$18(a0)
0001E950                            
0001E950                            Obj21_Flash:				; XREF: Obj21_Main
0001E950 7000                       		moveq	#0,d0
0001E952 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001E958 6600                       		bne.s	Obj21_Display
0001E95A 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001E95E 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001E960 5240                       		addq.w	#1,d0		; make ring counter flash red
0001E962                            
0001E962                            Obj21_Flash2:
0001E962 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001E968 6600                       		bne.s	Obj21_Display	; if not, branch
0001E96A 5440                       		addq.w	#2,d0		; make time counter flash red
0001E96C                            
0001E96C                            Obj21_Display:
0001E96C 1140 001A                  		move.b	d0,$1A(a0)
0001E970 4EF9 0000 F180             		jmp	DisplaySprite
0001E976                            ; ===========================================================================
0001E976                            ; ---------------------------------------------------------------------------
0001E976                            ; Sprite mappings - SCORE, TIME, RINGS
0001E976                            ; ---------------------------------------------------------------------------
0001E976                            Map_obj21:
0001E976                            	include "_maps\obj21.asm"
0001E976                            ; --------------------------------------------------------------------------------
0001E976                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E976                            ; --------------------------------------------------------------------------------
0001E976                            
0001E976                            SME_u7N7y:	
0001E976 0000 0000                  		dc.w SME_u7N7y_8-SME_u7N7y, SME_u7N7y_36-SME_u7N7y	
0001E97A 0000 0000                  		dc.w SME_u7N7y_64-SME_u7N7y, SME_u7N7y_92-SME_u7N7y	
0001E97E 0A                         SME_u7N7y_8:	dc.b $A
0001E97F 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E984 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E989 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E98E 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E993 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E998 A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001E99D A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E9A2 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E9A7 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E9AC 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E9B1 0A                         SME_u7N7y_36:	dc.b $A
0001E9B2 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E9B7 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E9BC 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E9C1 900D 0010 00               		dc.b $90, $D, 0, $10, 0	
0001E9C6 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E9CB A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001E9D0 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001E9D5 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001E9DA 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001E9DF 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001E9E4 0A                         SME_u7N7y_64:	dc.b $A
0001E9E5 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001E9EA 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001E9EF 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001E9F4 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001E9F9 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001E9FE A00D 0008 00               		dc.b $A0, $D, 0, 8, 0	
0001EA03 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001EA08 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001EA0D 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001EA12 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001EA17 0A                         SME_u7N7y_92:	dc.b $A
0001EA18 800D 0000 00               		dc.b $80, $D, 0, 0, 0	
0001EA1D 800D 0018 20               		dc.b $80, $D, 0, $18, $20	
0001EA22 800D 0020 40               		dc.b $80, $D, 0, $20, $40	
0001EA27 900D 2010 00               		dc.b $90, $D, $20, $10, 0	
0001EA2C 900D 0028 28               		dc.b $90, $D, 0, $28, $28	
0001EA31 A00D 2008 00               		dc.b $A0, $D, $20, 8, 0	
0001EA36 A009 0030 30               		dc.b $A0, 9, 0, $30, $30	
0001EA3B 4005 FE9B 00               		dc.b $40, 5, $FE, $9B, 0
0001EA40 400D 010A 10               		dc.b $40, $D, 1, $A, $10
0001EA45 4800 0113 30               		dc.b $48, 0, 1, $A+9, $30
0001EA4A                            		even
0001EA4A                            		even
0001EA4A                            
0001EA4A                            ; ---------------------------------------------------------------------------
0001EA4A                            ; Add points subroutine
0001EA4A                            ; ---------------------------------------------------------------------------
0001EA4A                            
0001EA4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA4A                            
0001EA4A                            
0001EA4A                            AddPoints:
0001EA4A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001EA50 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001EA54 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001EA58 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001EA5A 223C 000F 423F             		move.l	#999999,d1
0001EA60 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001EA62 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001EA66 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001EA68 2481                       		move.l	d1,(a2)
0001EA6A                            
0001EA6A                            loc_1C6AC:
0001EA6A 2013                       		move.l	(a3),d0
0001EA6C B092                       		cmp.l	(a2),d0
0001EA6E 6500 0000                  		bcs.w	locret_1C6B6
0001EA72 2480                       		move.l	d0,(a2)
0001EA74                            
0001EA74                            locret_1C6B6:
0001EA74 4E75                       		rts	
0001EA76                            ; End of function AddPoints
0001EA76                            
0001EA76                            ; ---------------------------------------------------------------------------
0001EA76                            ; Subroutine to	update the HUD
0001EA76                            ; ---------------------------------------------------------------------------
0001EA76                            
0001EA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA76                            
0001EA76                            
0001EA76                            HudUpdate:
0001EA76 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001EA7A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001EA7E 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001EA82 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001EA84 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001EA88 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001EA8E 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001EA92 6100 0000                  		bsr.w	Hud_Score
0001EA96                            
0001EA96                            Hud_ChkRings:
0001EA96 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA9A 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001EA9C 6A00                       		bpl.s	loc_1C6E4
0001EA9E 6100 0000                  		bsr.w	Hud_LoadZero
0001EAA2                            
0001EAA2                            loc_1C6E4:
0001EAA2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EAA6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EAAC 7200                       		moveq	#0,d1
0001EAAE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EAB2 6100 0000                  		bsr.w	Hud_Rings
0001EAB6                            
0001EAB6                            Hud_ChkTime:
0001EAB6 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EABA 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EABC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EAC0 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EAC2 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EAC6 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EACC 6700                       		beq.s	TimeOver	; if yes, branch
0001EACE 5221                       		addq.b	#1,-(a1)
0001EAD0 0C11 003C                  		cmpi.b	#60,(a1)
0001EAD4 6500                       		bcs.s	Hud_ChkLives
0001EAD6 12BC 0000                  		move.b	#0,(a1)
0001EADA 5221                       		addq.b	#1,-(a1)
0001EADC 0C11 003C                  		cmpi.b	#60,(a1)
0001EAE0 6500                       		bcs.s	loc_1C734
0001EAE2 12BC 0000                  		move.b	#0,(a1)
0001EAE6 5221                       		addq.b	#1,-(a1)
0001EAE8 0C11 0009                  		cmpi.b	#9,(a1)
0001EAEC 6500                       		bcs.s	loc_1C734
0001EAEE 12BC 0009                  		move.b	#9,(a1)
0001EAF2                            
0001EAF2                            loc_1C734:
0001EAF2 203C 5E40 0003             		move.l	#$5E400003,d0
0001EAF8 7200                       		moveq	#0,d1
0001EAFA 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EAFE 6100 0000                  		bsr.w	Hud_Mins
0001EB02 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EB08 7200                       		moveq	#0,d1
0001EB0A 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EB0E 6100 0000                  		bsr.w	Hud_Secs
0001EB12                            
0001EB12                            Hud_ChkLives:
0001EB12 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EB16 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EB18 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EB1C 6100 0000                  		bsr.w	Hud_Lives
0001EB20                            
0001EB20                            Hud_ChkBonus:
0001EB20 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EB24 6700                       		beq.s	Hud_End		; if not, branch
0001EB26 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EB2A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EB34 7200                       		moveq	#0,d1
0001EB36 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EB3A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB3E 7200                       		moveq	#0,d1
0001EB40 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EB44 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB48                            
0001EB48                            Hud_End:
0001EB48 4E75                       		rts	
0001EB4A                            ; ===========================================================================
0001EB4A                            
0001EB4A                            TimeOver:				; XREF: Hud_ChkTime
0001EB4A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EB4E 41F8 D000                  		lea	($FFFFD000).w,a0
0001EB52 2448                       		movea.l	a0,a2
0001EB54 6100 E67A                  		bsr.w	KillSonic
0001EB58 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EB5E 4E75                       		rts	
0001EB60                            ; ===========================================================================
0001EB60                            
0001EB60                            HudDebug:				; XREF: HudUpdate
0001EB60 6100 0000                  		bsr.w	HudDb_XY
0001EB64 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EB68 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EB6A 6A00                       		bpl.s	HudDb_Rings
0001EB6C 6100 0000                  		bsr.w	Hud_LoadZero
0001EB70                            
0001EB70                            HudDb_Rings:
0001EB70 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EB74 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EB7A 7200                       		moveq	#0,d1
0001EB7C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EB80 6100 0000                  		bsr.w	Hud_Rings
0001EB84                            
0001EB84                            HudDb_ObjCount:
0001EB84 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EB8A 7200                       		moveq	#0,d1
0001EB8C 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EB90 6100 0000                  		bsr.w	Hud_Secs
0001EB94 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EB98 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EB9A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EB9E 6100 0000                  		bsr.w	Hud_Lives
0001EBA2                            
0001EBA2                            HudDb_ChkBonus:
0001EBA2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EBA6 6700                       		beq.s	HudDb_End	; if not, branch
0001EBA8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EBAC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EBB6 7200                       		moveq	#0,d1
0001EBB8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EBBC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EBC0 7200                       		moveq	#0,d1
0001EBC2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EBC6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EBCA                            
0001EBCA                            HudDb_End:
0001EBCA 4E75                       		rts	
0001EBCC                            ; End of function HudUpdate
0001EBCC                            
0001EBCC                            ; ---------------------------------------------------------------------------
0001EBCC                            ; Subroutine to	load "0" on the	HUD
0001EBCC                            ; ---------------------------------------------------------------------------
0001EBCC                            
0001EBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBCC                            
0001EBCC                            
0001EBCC                            Hud_LoadZero:				; XREF: HudUpdate
0001EBCC 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EBD6 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EBDA 343C 0002                  		move.w	#2,d2
0001EBDE 6000                       		bra.s	loc_1C83E
0001EBE0                            ; End of function Hud_LoadZero
0001EBE0                            
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0                            
0001EBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBE0                            
0001EBE0                            
0001EBE0                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EBE0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EBE6 6100 0000                  		bsr.w	Hud_Lives
0001EBEA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EBF4 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EBF8 343C 000E                  		move.w	#$E,d2
0001EBFC                            
0001EBFC                            loc_1C83E:				; XREF: Hud_LoadZero
0001EBFC 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC00                            
0001EC00                            loc_1C842:
0001EC00 323C 000F                  		move.w	#$F,d1
0001EC04 101A                       		move.b	(a2)+,d0
0001EC06 6B00                       		bmi.s	loc_1C85E
0001EC08 4880                       		ext.w	d0
0001EC0A EB48                       		lsl.w	#5,d0
0001EC0C 47F1 0000                  		lea	(a1,d0.w),a3
0001EC10                            
0001EC10                            loc_1C852:
0001EC10 2C9B                       		move.l	(a3)+,(a6)
0001EC12 51C9 FFFC                  		dbf	d1,loc_1C852
0001EC16                            
0001EC16                            loc_1C858:
0001EC16 51CA FFE8                  		dbf	d2,loc_1C842
0001EC1A                            
0001EC1A 4E75                       		rts	
0001EC1C                            ; ===========================================================================
0001EC1C                            
0001EC1C                            loc_1C85E:
0001EC1C 2CBC 0000 0000             		move.l	#0,(a6)
0001EC22 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EC26                            
0001EC26 60EE                       		bra.s	loc_1C858
0001EC28                            ; End of function Hud_Base
0001EC28                            
0001EC28                            ; ===========================================================================
0001EC28 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EC34 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            ; Subroutine to	load debug mode	numbers	patterns
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            
0001EC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC38                            
0001EC38                            
0001EC38                            HudDb_XY:				; XREF: HudDebug
0001EC38 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EC42 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EC46 4841                       		swap	d1
0001EC48 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EC4C 6100                       		bsr.s	HudDb_XY2
0001EC4E 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EC52 4841                       		swap	d1
0001EC54 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EC58                            ; End of function HudDb_XY
0001EC58                            
0001EC58                            
0001EC58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC58                            
0001EC58                            
0001EC58                            HudDb_XY2:
0001EC58 7C07                       		moveq	#7,d6
0001EC5A 43F9 0000 058E             		lea	(Art_Text).l,a1
0001EC60                            
0001EC60                            HudDb_XYLoop:
0001EC60 E959                       		rol.w	#4,d1
0001EC62 3401                       		move.w	d1,d2
0001EC64 0242 000F                  		andi.w	#$F,d2
0001EC68 0C42 000A                  		cmpi.w	#$A,d2
0001EC6C 6500                       		bcs.s	loc_1C8B2
0001EC6E 5E42                       		addq.w	#7,d2
0001EC70                            
0001EC70                            loc_1C8B2:
0001EC70 EB4A                       		lsl.w	#5,d2
0001EC72 47F1 2000                  		lea	(a1,d2.w),a3
0001EC76 2C9B                       		move.l	(a3)+,(a6)
0001EC78 2C9B                       		move.l	(a3)+,(a6)
0001EC7A 2C9B                       		move.l	(a3)+,(a6)
0001EC7C 2C9B                       		move.l	(a3)+,(a6)
0001EC7E 2C9B                       		move.l	(a3)+,(a6)
0001EC80 2C9B                       		move.l	(a3)+,(a6)
0001EC82 2C9B                       		move.l	(a3)+,(a6)
0001EC84 2C9B                       		move.l	(a3)+,(a6)
0001EC86 4841                       		swap	d1
0001EC88 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EC8C                            
0001EC8C 4E75                       		rts	
0001EC8E                            ; End of function HudDb_XY2
0001EC8E                            
0001EC8E                            ; ---------------------------------------------------------------------------
0001EC8E                            ; Subroutine to	load rings numbers patterns
0001EC8E                            ; ---------------------------------------------------------------------------
0001EC8E                            
0001EC8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC8E                            
0001EC8E                            
0001EC8E                            Hud_Rings:				; XREF: HudUpdate
0001EC8E 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EC94 7C02                       		moveq	#2,d6
0001EC96 6000                       		bra.s	Hud_LoadArt
0001EC98                            ; End of function Hud_Rings
0001EC98                            
0001EC98                            ; ---------------------------------------------------------------------------
0001EC98                            ; Subroutine to	load score numbers patterns
0001EC98                            ; ---------------------------------------------------------------------------
0001EC98                            
0001EC98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC98                            
0001EC98                            
0001EC98                            Hud_Score:				; XREF: HudUpdate
0001EC98 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EC9E 7C05                       		moveq	#5,d6
0001ECA0                            
0001ECA0                            Hud_LoadArt:
0001ECA0 7800                       		moveq	#0,d4
0001ECA2 43FA 0000                  		lea	Art_Hud(pc),a1
0001ECA6                            
0001ECA6                            Hud_ScoreLoop:
0001ECA6 7400                       		moveq	#0,d2
0001ECA8 261A                       		move.l	(a2)+,d3
0001ECAA                            
0001ECAA                            loc_1C8EC:
0001ECAA 9283                       		sub.l	d3,d1
0001ECAC 6500                       		bcs.s	loc_1C8F4
0001ECAE 5242                       		addq.w	#1,d2
0001ECB0 60F8                       		bra.s	loc_1C8EC
0001ECB2                            ; ===========================================================================
0001ECB2                            
0001ECB2                            loc_1C8F4:
0001ECB2 D283                       		add.l	d3,d1
0001ECB4 4A42                       		tst.w	d2
0001ECB6 6700                       		beq.s	loc_1C8FE
0001ECB8 383C 0001                  		move.w	#1,d4
0001ECBC                            
0001ECBC                            loc_1C8FE:
0001ECBC 4A44                       		tst.w	d4
0001ECBE 6700                       		beq.s	loc_1C92C
0001ECC0 ED4A                       		lsl.w	#6,d2
0001ECC2 2D40 0004                  		move.l	d0,4(a6)
0001ECC6 47F1 2000                  		lea	(a1,d2.w),a3
0001ECCA 2C9B                       		move.l	(a3)+,(a6)
0001ECCC 2C9B                       		move.l	(a3)+,(a6)
0001ECCE 2C9B                       		move.l	(a3)+,(a6)
0001ECD0 2C9B                       		move.l	(a3)+,(a6)
0001ECD2 2C9B                       		move.l	(a3)+,(a6)
0001ECD4 2C9B                       		move.l	(a3)+,(a6)
0001ECD6 2C9B                       		move.l	(a3)+,(a6)
0001ECD8 2C9B                       		move.l	(a3)+,(a6)
0001ECDA 2C9B                       		move.l	(a3)+,(a6)
0001ECDC 2C9B                       		move.l	(a3)+,(a6)
0001ECDE 2C9B                       		move.l	(a3)+,(a6)
0001ECE0 2C9B                       		move.l	(a3)+,(a6)
0001ECE2 2C9B                       		move.l	(a3)+,(a6)
0001ECE4 2C9B                       		move.l	(a3)+,(a6)
0001ECE6 2C9B                       		move.l	(a3)+,(a6)
0001ECE8 2C9B                       		move.l	(a3)+,(a6)
0001ECEA                            
0001ECEA                            loc_1C92C:
0001ECEA 0680 0040 0000             		addi.l	#$400000,d0
0001ECF0 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001ECF4                            
0001ECF4 4E75                       		rts	
0001ECF6                            ; End of function Hud_Score
0001ECF6                            
0001ECF6                            ; ---------------------------------------------------------------------------
0001ECF6                            ; Subroutine to	load countdown numbers on the continue screen
0001ECF6                            ; ---------------------------------------------------------------------------
0001ECF6                            
0001ECF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECF6                            
0001ECF6                            
0001ECF6                            ContScrCounter:				; XREF: ContinueScreen
0001ECF6 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001ED00 4DF9 00C0 0000             		lea	($C00000).l,a6
0001ED06 45F9 0000 0000             		lea	(Hud_10).l,a2
0001ED0C 7C01                       		moveq	#1,d6
0001ED0E 7800                       		moveq	#0,d4
0001ED10 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001ED14                            
0001ED14                            ContScr_Loop:
0001ED14 7400                       		moveq	#0,d2
0001ED16 261A                       		move.l	(a2)+,d3
0001ED18                            
0001ED18                            loc_1C95A:
0001ED18 9283                       		sub.l	d3,d1
0001ED1A 6500                       		bcs.s	loc_1C962
0001ED1C 5242                       		addq.w	#1,d2
0001ED1E 60F8                       		bra.s	loc_1C95A
0001ED20                            ; ===========================================================================
0001ED20                            
0001ED20                            loc_1C962:
0001ED20 D283                       		add.l	d3,d1
0001ED22 ED4A                       		lsl.w	#6,d2
0001ED24 47F1 2000                  		lea	(a1,d2.w),a3
0001ED28 2C9B                       		move.l	(a3)+,(a6)
0001ED2A 2C9B                       		move.l	(a3)+,(a6)
0001ED2C 2C9B                       		move.l	(a3)+,(a6)
0001ED2E 2C9B                       		move.l	(a3)+,(a6)
0001ED30 2C9B                       		move.l	(a3)+,(a6)
0001ED32 2C9B                       		move.l	(a3)+,(a6)
0001ED34 2C9B                       		move.l	(a3)+,(a6)
0001ED36 2C9B                       		move.l	(a3)+,(a6)
0001ED38 2C9B                       		move.l	(a3)+,(a6)
0001ED3A 2C9B                       		move.l	(a3)+,(a6)
0001ED3C 2C9B                       		move.l	(a3)+,(a6)
0001ED3E 2C9B                       		move.l	(a3)+,(a6)
0001ED40 2C9B                       		move.l	(a3)+,(a6)
0001ED42 2C9B                       		move.l	(a3)+,(a6)
0001ED44 2C9B                       		move.l	(a3)+,(a6)
0001ED46 2C9B                       		move.l	(a3)+,(a6)
0001ED48 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001ED4C                            
0001ED4C 4E75                       		rts	
0001ED4E                            ; End of function ContScrCounter
0001ED4E                            
0001ED4E                            ; ===========================================================================
0001ED4E                            ; ---------------------------------------------------------------------------
0001ED4E                            ; HUD counter sizes
0001ED4E                            ; ---------------------------------------------------------------------------
0001ED4E 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001ED52 0000 2710                  Hud_10000:	dc.l 10000
0001ED56 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001ED5A 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001ED5E 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001ED62 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001ED66                            
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66                            ; Subroutine to	load time numbers patterns
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66                            
0001ED66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED66                            
0001ED66                            
0001ED66                            Hud_Mins:				; XREF: Hud_ChkTime
0001ED66 45F9 0001 ED62             		lea	(Hud_1).l,a2
0001ED6C 7C00                       		moveq	#0,d6
0001ED6E 6000                       		bra.s	loc_1C9BA
0001ED70                            ; End of function Hud_Mins
0001ED70                            
0001ED70                            
0001ED70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED70                            
0001ED70                            
0001ED70                            Hud_Secs:				; XREF: Hud_ChkTime
0001ED70 45F9 0001 ED5E             		lea	(Hud_10).l,a2
0001ED76 7C01                       		moveq	#1,d6
0001ED78                            
0001ED78                            loc_1C9BA:
0001ED78 7800                       		moveq	#0,d4
0001ED7A 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED7E                            
0001ED7E                            Hud_TimeLoop:
0001ED7E 7400                       		moveq	#0,d2
0001ED80 261A                       		move.l	(a2)+,d3
0001ED82                            
0001ED82                            loc_1C9C4:
0001ED82 9283                       		sub.l	d3,d1
0001ED84 6500                       		bcs.s	loc_1C9CC
0001ED86 5242                       		addq.w	#1,d2
0001ED88 60F8                       		bra.s	loc_1C9C4
0001ED8A                            ; ===========================================================================
0001ED8A                            
0001ED8A                            loc_1C9CC:
0001ED8A D283                       		add.l	d3,d1
0001ED8C 4A42                       		tst.w	d2
0001ED8E 6700                       		beq.s	loc_1C9D6
0001ED90 383C 0001                  		move.w	#1,d4
0001ED94                            
0001ED94                            loc_1C9D6:
0001ED94 ED4A                       		lsl.w	#6,d2
0001ED96 2D40 0004                  		move.l	d0,4(a6)
0001ED9A 47F1 2000                  		lea	(a1,d2.w),a3
0001ED9E 2C9B                       		move.l	(a3)+,(a6)
0001EDA0 2C9B                       		move.l	(a3)+,(a6)
0001EDA2 2C9B                       		move.l	(a3)+,(a6)
0001EDA4 2C9B                       		move.l	(a3)+,(a6)
0001EDA6 2C9B                       		move.l	(a3)+,(a6)
0001EDA8 2C9B                       		move.l	(a3)+,(a6)
0001EDAA 2C9B                       		move.l	(a3)+,(a6)
0001EDAC 2C9B                       		move.l	(a3)+,(a6)
0001EDAE 2C9B                       		move.l	(a3)+,(a6)
0001EDB0 2C9B                       		move.l	(a3)+,(a6)
0001EDB2 2C9B                       		move.l	(a3)+,(a6)
0001EDB4 2C9B                       		move.l	(a3)+,(a6)
0001EDB6 2C9B                       		move.l	(a3)+,(a6)
0001EDB8 2C9B                       		move.l	(a3)+,(a6)
0001EDBA 2C9B                       		move.l	(a3)+,(a6)
0001EDBC 2C9B                       		move.l	(a3)+,(a6)
0001EDBE 0680 0040 0000             		addi.l	#$400000,d0
0001EDC4 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EDC8                            
0001EDC8 4E75                       		rts	
0001EDCA                            ; End of function Hud_Secs
0001EDCA                            
0001EDCA                            ; ---------------------------------------------------------------------------
0001EDCA                            ; Subroutine to	load time/ring bonus numbers patterns
0001EDCA                            ; ---------------------------------------------------------------------------
0001EDCA                            
0001EDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDCA                            
0001EDCA                            
0001EDCA                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EDCA 45F9 0001 ED56             		lea	(Hud_1000).l,a2
0001EDD0 7C03                       		moveq	#3,d6
0001EDD2 7800                       		moveq	#0,d4
0001EDD4 43FA 0000                  		lea	Art_Hud(pc),a1
0001EDD8                            
0001EDD8                            Hud_BonusLoop:
0001EDD8 7400                       		moveq	#0,d2
0001EDDA 261A                       		move.l	(a2)+,d3
0001EDDC                            
0001EDDC                            loc_1CA1E:
0001EDDC 9283                       		sub.l	d3,d1
0001EDDE 6500                       		bcs.s	loc_1CA26
0001EDE0 5242                       		addq.w	#1,d2
0001EDE2 60F8                       		bra.s	loc_1CA1E
0001EDE4                            ; ===========================================================================
0001EDE4                            
0001EDE4                            loc_1CA26:
0001EDE4 D283                       		add.l	d3,d1
0001EDE6 4A42                       		tst.w	d2
0001EDE8 6700                       		beq.s	loc_1CA30
0001EDEA 383C 0001                  		move.w	#1,d4
0001EDEE                            
0001EDEE                            loc_1CA30:
0001EDEE 4A44                       		tst.w	d4
0001EDF0 6700                       		beq.s	Hud_ClrBonus
0001EDF2 ED4A                       		lsl.w	#6,d2
0001EDF4 47F1 2000                  		lea	(a1,d2.w),a3
0001EDF8 2C9B                       		move.l	(a3)+,(a6)
0001EDFA 2C9B                       		move.l	(a3)+,(a6)
0001EDFC 2C9B                       		move.l	(a3)+,(a6)
0001EDFE 2C9B                       		move.l	(a3)+,(a6)
0001EE00 2C9B                       		move.l	(a3)+,(a6)
0001EE02 2C9B                       		move.l	(a3)+,(a6)
0001EE04 2C9B                       		move.l	(a3)+,(a6)
0001EE06 2C9B                       		move.l	(a3)+,(a6)
0001EE08 2C9B                       		move.l	(a3)+,(a6)
0001EE0A 2C9B                       		move.l	(a3)+,(a6)
0001EE0C 2C9B                       		move.l	(a3)+,(a6)
0001EE0E 2C9B                       		move.l	(a3)+,(a6)
0001EE10 2C9B                       		move.l	(a3)+,(a6)
0001EE12 2C9B                       		move.l	(a3)+,(a6)
0001EE14 2C9B                       		move.l	(a3)+,(a6)
0001EE16 2C9B                       		move.l	(a3)+,(a6)
0001EE18                            
0001EE18                            loc_1CA5A:
0001EE18 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EE1C                            
0001EE1C 4E75                       		rts	
0001EE1E                            ; ===========================================================================
0001EE1E                            
0001EE1E                            Hud_ClrBonus:
0001EE1E 7A0F                       		moveq	#$F,d5
0001EE20                            
0001EE20                            Hud_ClrBonusLoop:
0001EE20 2CBC 0000 0000             		move.l	#0,(a6)
0001EE26 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EE2A                            
0001EE2A 60EC                       		bra.s	loc_1CA5A
0001EE2C                            ; End of function Hud_TimeRingBonus
0001EE2C                            
0001EE2C                            ; ---------------------------------------------------------------------------
0001EE2C                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EE2C                            ; ---------------------------------------------------------------------------
0001EE2C                            
0001EE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE2C                            
0001EE2C                            
0001EE2C                            Hud_Lives:				; XREF: Hud_ChkLives
0001EE2C 203C 7B20 0003             		move.l	#$7B200003,d0	; set VRAM address
0001EE32 7200                       		moveq	#0,d1
0001EE34 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EE38 45F9 0001 ED5E             		lea	(Hud_10).l,a2
0001EE3E 7C01                       		moveq	#1,d6
0001EE40 7800                       		moveq	#0,d4
0001EE42 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EE46 2D40 0004                  		move.l	d0,4(a6)
0001EE4A                            
0001EE4A                            Hud_LivesLoop:
0001EE4A 7400                       		moveq	#0,d2
0001EE4C 261A                       		move.l	(a2)+,d3
0001EE4E                            
0001EE4E                            loc_1CA90:
0001EE4E 9283                       		sub.l	d3,d1
0001EE50 6500                       		bcs.s	loc_1CA98
0001EE52 5242                       		addq.w	#1,d2
0001EE54 60F8                       		bra.s	loc_1CA90
0001EE56                            ; ===========================================================================
0001EE56                            
0001EE56                            loc_1CA98:
0001EE56 D283                       		add.l	d3,d1
0001EE58 4A42                       		tst.w	d2
0001EE5A 6700                       		beq.s	loc_1CAA2
0001EE5C 383C 0001                  		move.w	#1,d4
0001EE60                            
0001EE60                            loc_1CAA2:
0001EE60 4A44                       		tst.w	d4
0001EE62 6700                       		beq.s	@chk
0001EE64 4A46                       		tst.w	d6
0001EE66 6700                       		beq.s	loc_1CAA6
0001EE68 0C42 0001                  		cmpi.w	#1,d2
0001EE6C 6700                       		beq.s	Hud_Lives_Draw10
0001EE6E 6000                       		bra.s	loc_1CAA6
0001EE70                            
0001EE70                            @chk:
0001EE70 4A46                       		tst.w	d6
0001EE72 6700                       		beq.s	Hud_Lives_DrawDigit
0001EE74 6000                       		bra.s	Hud_Lives_End
0001EE76                            
0001EE76                            loc_1CAA6:
0001EE76 4A46                       		tst.w	d6
0001EE78 6600                       		bne.s	Hud_Lives_DrawDigit
0001EE7A 7200                       		moveq	#0,d1
0001EE7C 1238 FE12                  		move.b	($FFFFFE12).w,d1
0001EE80 82FC 000A                  		divu.w	#10,d1
0001EE84 4841                       		swap	d1
0001EE86 4A41                       		tst.w	d1
0001EE88 6700                       		beq.s	Hud_Lives_DrawBlank
0001EE8A                            
0001EE8A                            Hud_Lives_DrawDigit:
0001EE8A EB4A                       		lsl.w	#5,d2
0001EE8C 47F1 2000                  		lea	(a1,d2.w),a3
0001EE90 2C9B                       		move.l	(a3)+,(a6)
0001EE92 2C9B                       		move.l	(a3)+,(a6)
0001EE94 2C9B                       		move.l	(a3)+,(a6)
0001EE96 2C9B                       		move.l	(a3)+,(a6)
0001EE98 2C9B                       		move.l	(a3)+,(a6)
0001EE9A 2C9B                       		move.l	(a3)+,(a6)
0001EE9C 2C9B                       		move.l	(a3)+,(a6)
0001EE9E 2C9B                       		move.l	(a3)+,(a6)
0001EEA0 0680 0040 0000             		addi.l	#$400000,d0
0001EEA6 2D40 0004                  		move.l	d0,4(a6)
0001EEAA                            		
0001EEAA                            Hud_Lives_Draw10:
0001EEAA 4A46                       		tst.w	d6
0001EEAC 6700                       		beq.s	Hud_Lives_End
0001EEAE 343C 0140                  		move.w	#10*$20,d2
0001EEB2 47F1 2000                  		lea	(a1,d2.w),a3
0001EEB6 2C9B                       		move.l	(a3)+,(a6)
0001EEB8 2C9B                       		move.l	(a3)+,(a6)
0001EEBA 2C9B                       		move.l	(a3)+,(a6)
0001EEBC 2C9B                       		move.l	(a3)+,(a6)
0001EEBE 2C9B                       		move.l	(a3)+,(a6)
0001EEC0 2C9B                       		move.l	(a3)+,(a6)
0001EEC2 2C9B                       		move.l	(a3)+,(a6)
0001EEC4 2C9B                       		move.l	(a3)+,(a6)
0001EEC6 0680 0040 0000             		addi.l	#$400000,d0
0001EECC 2D40 0004                  		move.l	d0,4(a6)
0001EED0                            		
0001EED0                            Hud_Lives_End:
0001EED0 51CE FF78                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EED4 4E75                       		rts	
0001EED6                            ; ===========================================================================
0001EED6                            
0001EED6                            Hud_Lives_DrawBlank:
0001EED6 7A07                       		moveq	#7,d5
0001EED8                            
0001EED8                            Hud_Lives_DrawBlankLoop:
0001EED8 2CBC 0000 0000             		move.l	#0,(a6)
0001EEDE 51CD FFF8                  		dbf	d5,Hud_Lives_DrawBlankLoop
0001EEE2 0680 0040 0000             		addi.l	#$400000,d0
0001EEE8 2D40 0004                  		move.l	d0,4(a6)
0001EEEC 60E2                       		bra.s	Hud_Lives_End
0001EEEE                            ; End of function Hud_Lives
0001EEEE                            
0001EEEE                            ; ===========================================================================
0001EEEE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F1EE                            		even
0001F1EE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F34E                            		even
0001F34E                            ; ===========================================================================
0001F34E                            ; ---------------------------------------------------------------------------
0001F34E                            ; When debug mode is currently in use
0001F34E                            ; ---------------------------------------------------------------------------
0001F34E                            
0001F34E                            DebugMode:				; XREF: Obj01; Obj09
0001F34E 7000                       		moveq	#0,d0
0001F350 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F354 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F358 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F35C                            ; ===========================================================================
0001F35C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F35E 0000                       		dc.w Debug_Skip-Debug_Index
0001F360                            ; ===========================================================================
0001F360                            
0001F360                            Debug_Main:				; XREF: Debug_Index
0001F360 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F364 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F36A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F370 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F376 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F37C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F382 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F388 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F38E 117C 0000 001A             		move.b	#0,$1A(a0)
0001F394 117C 0000 001C             		move.b	#0,$1C(a0)
0001F39A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F3A0 6600                       		bne.s	Debug_Zone	; if not, branch
0001F3A2 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F3A8 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F3AE 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F3B0 6000                       		bra.s	Debug_UseList
0001F3B2                            ; ===========================================================================
0001F3B2                            
0001F3B2                            Debug_Zone:
0001F3B2 7000                       		moveq	#0,d0
0001F3B4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F3B8                            
0001F3B8                            Debug_UseList:
0001F3B8 45F9 0000 0000             		lea	(DebugList).l,a2
0001F3BE D040                       		add.w	d0,d0
0001F3C0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F3C4 3C1A                       		move.w	(a2)+,d6
0001F3C6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F3CA 6200                       		bhi.s	loc_1CF9E
0001F3CC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F3D2                            
0001F3D2                            loc_1CF9E:
0001F3D2 6100 0000                  		bsr.w	Debug_ShowItem
0001F3D6 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F3DC 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F3E2                            
0001F3E2                            Debug_Skip:				; XREF: Debug_Index
0001F3E2 7006                       		moveq	#6,d0
0001F3E4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F3EA 6700                       		beq.s	loc_1CFBE
0001F3EC 7000                       		moveq	#0,d0
0001F3EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F3F2                            
0001F3F2                            loc_1CFBE:
0001F3F2 45F9 0000 0000             		lea	(DebugList).l,a2
0001F3F8 D040                       		add.w	d0,d0
0001F3FA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F3FE 3C1A                       		move.w	(a2)+,d6
0001F400 6100 0000                  		bsr.w	Debug_Control
0001F404 4EF9 0000 F180             		jmp	DisplaySprite
0001F40A                            
0001F40A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F40A                            
0001F40A                            
0001F40A                            Debug_Control:
0001F40A 7800                       		moveq	#0,d4
0001F40C 323C 0001                  		move.w	#1,d1
0001F410 1838 F605                  		move.b	($FFFFF605).w,d4
0001F414 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F418 6600                       		bne.s	loc_1D018	; if yes, branch
0001F41A 1038 F604                  		move.b	($FFFFF604).w,d0
0001F41E 0240 000F                  		andi.w	#$F,d0
0001F422 6600                       		bne.s	loc_1D000
0001F424 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F42A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F430 6000 0000                  		bra.w	Debug_BackItem
0001F434                            ; ===========================================================================
0001F434                            
0001F434                            loc_1D000:
0001F434 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F438 6600                       		bne.s	loc_1D01C
0001F43A 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F440 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F444 6600                       		bne.s	loc_1D018
0001F446 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F44C                            
0001F44C                            loc_1D018:
0001F44C 1838 F604                  		move.b	($FFFFF604).w,d4
0001F450                            
0001F450                            loc_1D01C:
0001F450 7200                       		moveq	#0,d1
0001F452 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F456 5241                       		addq.w	#1,d1
0001F458 4841                       		swap	d1
0001F45A E881                       		asr.l	#4,d1
0001F45C 2428 000C                  		move.l	$C(a0),d2
0001F460 2628 0008                  		move.l	8(a0),d3
0001F464 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F468 6700                       		beq.s	loc_1D03C	; if not, branch
0001F46A 9481                       		sub.l	d1,d2
0001F46C 6400                       		bcc.s	loc_1D03C
0001F46E 7400                       		moveq	#0,d2
0001F470                            
0001F470                            loc_1D03C:
0001F470 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F474 6700                       		beq.s	loc_1D052	; if not, branch
0001F476 D481                       		add.l	d1,d2
0001F478 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F47E 6500                       		bcs.s	loc_1D052
0001F480 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F486                            
0001F486                            loc_1D052:
0001F486 0804 0002                  		btst	#2,d4
0001F48A 6700                       		beq.s	loc_1D05E
0001F48C 9681                       		sub.l	d1,d3
0001F48E 6400                       		bcc.s	loc_1D05E
0001F490 7600                       		moveq	#0,d3
0001F492                            
0001F492                            loc_1D05E:
0001F492 0804 0003                  		btst	#3,d4
0001F496 6700                       		beq.s	loc_1D066
0001F498 D681                       		add.l	d1,d3
0001F49A                            
0001F49A                            loc_1D066:
0001F49A 2142 000C                  		move.l	d2,$C(a0)
0001F49E 2143 0008                  		move.l	d3,8(a0)
0001F4A2                            
0001F4A2                            Debug_BackItem:
0001F4A2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F4A8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F4AA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F4B0 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F4B2 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F4B6 6400                       		bcc.s	Debug_NoLoop
0001F4B8 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F4BC 6000                       		bra.s	Debug_NoLoop
0001F4BE                            ; ===========================================================================
0001F4BE                            
0001F4BE                            Debug_NextItem:
0001F4BE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F4C4 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F4C6 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F4CA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F4CE 6200                       		bhi.s	Debug_NoLoop
0001F4D0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F4D6                            
0001F4D6                            Debug_NoLoop:
0001F4D6 6000 0000                  		bra.w	Debug_ShowItem
0001F4DA                            ; ===========================================================================
0001F4DA                            
0001F4DA                            Debug_MakeItem:
0001F4DA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F4E0 6700                       		beq.s	Debug_Exit	; if not, branch
0001F4E2 4EB9 0000 F614             		jsr	SingleObjLoad
0001F4E8 6600                       		bne.s	Debug_Exit
0001F4EA 3368 0008 0008             		move.w	8(a0),8(a1)
0001F4F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F4F6 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F4FA 1368 0001 0001             		move.b	1(a0),1(a1)
0001F500 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F506 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F50C 7000                       		moveq	#0,d0
0001F50E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F512 E748                       		lsl.w	#3,d0
0001F514 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F51A 4E75                       		rts	
0001F51C                            ; ===========================================================================
0001F51C                            
0001F51C                            Debug_Exit:
0001F51C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F522 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F524 7000                       		moveq	#0,d0
0001F526 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F52A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F532 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F538 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F53C 3140 000A                  		move.w	d0,$A(a0)
0001F540 3140 000E                  		move.w	d0,$E(a0)
0001F544 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F54A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F550 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F556 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F558 4278 F780                  		clr.w	($FFFFF780).w
0001F55C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F562 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F56A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F570 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F576 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F57C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F582                            
0001F582                            Debug_DoNothing:
0001F582 4E75                       		rts	
0001F584                            ; End of function Debug_Control
0001F584                            
0001F584                            
0001F584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F584                            
0001F584                            
0001F584                            Debug_ShowItem:				; XREF: Debug_Main
0001F584 7000                       		moveq	#0,d0
0001F586 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F58A E748                       		lsl.w	#3,d0
0001F58C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F592 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F598 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F59E 4E75                       		rts	
0001F5A0                            ; End of function Debug_ShowItem
0001F5A0                            
0001F5A0                            ; ===========================================================================
0001F5A0                            ; ---------------------------------------------------------------------------
0001F5A0                            ; Debug	list pointers
0001F5A0                            ; ---------------------------------------------------------------------------
0001F5A0                            DebugList:
0001F5A0                            	include "_inc\Debug list pointers.asm"
0001F5A0                            ; ---------------------------------------------------------------------------
0001F5A0                            ; Debug	list pointers
0001F5A0                            ; ---------------------------------------------------------------------------
0001F5A0 0000                       	dc.w Debug_GHZ-DebugList
0001F5A2 0000                       	dc.w Debug_LZ-DebugList
0001F5A4 0000                       	dc.w Debug_MZ-DebugList
0001F5A6 0000                       	dc.w Debug_SLZ-DebugList
0001F5A8 0000                       	dc.w Debug_SYZ-DebugList
0001F5AA 0000                       	dc.w Debug_SBZ-DebugList
0001F5AC 0000                       	dc.w Debug_Ending-DebugList
0001F5AC 0000                       	dc.w Debug_Ending-DebugList
0001F5AE                            
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE                            ; Debug	list - Green Hill
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE                            Debug_GHZ:
0001F5AE                            	include "_inc\Debug list - GHZ.asm"
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE                            ; Debug	list - Green Hill
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE 0010                       	dc.w $10			; number of items in list
0001F5B0 2500 B9A8                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F5B4 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001F5B8 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F5BC 0000 0680                  	dc.b 0,	0, 6, $80
0001F5C0 1F00 B126                  	dc.l Map_obj1F+$1F000000
0001F5C4 0000 0400                  	dc.b 0,	0, 4, 0
0001F5C8 2200 B406                  	dc.l Map_obj22+$22000000
0001F5CC 0000 0444                  	dc.b 0,	0, 4, $44
0001F5D0 2B00 C5E4                  	dc.l Map_obj2B+$2B000000
0001F5D4 0000 047B                  	dc.b 0,	0, 4, $7B
0001F5D8 3600 EB80                  	dc.l Map_obj36+$36000000
0001F5DC 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5E0 1800 9B24                  	dc.l Map_obj18+$18000000
0001F5E4 0000 4000                  	dc.b 0,	0, $40,	0
0001F5E8 3B00 ECA6                  	dc.l Map_obj3B+$3B000000
0001F5EC 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F5F0 4001 132C                  	dc.l Map_obj40+$40000000
0001F5F4 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F5F8 4100 F8B6                  	dc.l Map_obj41+$41000000
0001F5FC 0000 0523                  	dc.b 0,	0, 5, $23
0001F600 4200 FADC                  	dc.l Map_obj42+$42000000
0001F604 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F608 4400 FDEA                  	dc.l Map_obj44+$44000000
0001F60C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F610 1900 9B92                  	dc.l Map_obj48+$19000000
0001F614 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F618 7901 9200                  	dc.l Map_obj79+$79000000
0001F61C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F620 4B00 B9E8                  	dc.l Map_obj4B+$4B000000
0001F624 0000 2400                  	dc.b 0,	0, $24,	0
0001F628 7D01 9350                  	dc.l Map_obj7D+$7D000000
0001F62C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F630                            	even
0001F630                            	even
0001F630                            
0001F630                            ; ---------------------------------------------------------------------------
0001F630                            ; Debug	list - Labyrinth
0001F630                            ; ---------------------------------------------------------------------------
0001F630                            Debug_LZ:
0001F630                            	include "_inc\Debug list - LZ.asm"
0001F630                            ; ---------------------------------------------------------------------------
0001F630                            ; Debug	list - Labyrinth
0001F630                            ; ---------------------------------------------------------------------------
0001F630 0019                       	dc.w $19
0001F632 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F636 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F63A 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F63E 0000 0680                  	dc.b 0,	0, 6, $80
0001F642 4100 F8B6                  	dc.l Map_obj41+$41000000
0001F646 0000 0523                  	dc.b 0,	0, 5, $23
0001F64A 2C00 C68A                  	dc.l Map_obj2C+$2C000000
0001F64E 0800 2486                  	dc.b 8,	0, $24,	$86
0001F652 2D00 C876                  	dc.l Map_obj2D+$2D000000
0001F656 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F65A 1601 3B1C                  	dc.l Map_obj16+$16000000
0001F65E 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F662 1601 3B1C                  	dc.l Map_obj16+$16000000
0001F666 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F66A 3300 DCF4                  	dc.l Map_obj33+$33000000
0001F66E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F672 3200 D8B4                  	dc.l Map_obj32+$32000000
0001F676 0000 0513                  	dc.b 0,	0, 5, $13
0001F67A 3600 EB80                  	dc.l Map_obj36+$36000000
0001F67E 0000 051B                  	dc.b 0,	0, 5, $1B
0001F682 5201 1C3E                  	dc.l Map_obj52a+$52000000
0001F686 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F68A 6101 3D44                  	dc.l Map_obj61+$61000000
0001F68E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F692 6101 3D44                  	dc.l Map_obj61+$61000000
0001F696 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F69A 6101 3D44                  	dc.l Map_obj61+$61000000
0001F69E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F6A2 6201 3E98                  	dc.l Map_obj62+$62000000
0001F6A6 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F6AA 6101 3D44                  	dc.l Map_obj61+$61000000
0001F6AE 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F6B2 6101 3D44                  	dc.l Map_obj61+$61000000
0001F6B6 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F6BA 6301 41FA                  	dc.l Map_obj63+$63000000
0001F6BE 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F6C2 6001 3A66                  	dc.l Map_obj60+$60000000
0001F6C6 0000 0467                  	dc.b 0,	0, 4, $67
0001F6CA 6401 4540                  	dc.l Map_obj64+$64000000
0001F6CE 8413 8348                  	dc.b $84, $13, $83, $48
0001F6D2 6501 46C8                  	dc.l Map_obj65+$65000000
0001F6D6 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F6DA 6501 46C8                  	dc.l Map_obj65+$65000000
0001F6DE 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F6E2 0B01 2EB6                  	dc.l Map_obj0B+$B000000
0001F6E6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F6EA 0C01 2F86                  	dc.l Map_obj0C+$C000000
0001F6EE 0200 4328                  	dc.b 2,	0, $43,	$28
0001F6F2 7901 9200                  	dc.l Map_obj79+$79000000
0001F6F6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F6FA                            	even
0001F6FA                            	even
0001F6FA                            
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA                            ; Debug	list - Marble
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA                            Debug_MZ:
0001F6FA                            	include "_inc\Debug list - MZ.asm"
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA                            ; Debug	list - Marble
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA 0012                       	dc.w $12
0001F6FC 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F700 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F704 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F708 0000 0680                  	dc.b 0,	0, 6, $80
0001F70C 2200 B406                  	dc.l Map_obj22+$22000000
0001F710 0000 0444                  	dc.b 0,	0, 4, $44
0001F714 3600 EB80                  	dc.l Map_obj36+$36000000
0001F718 0000 051B                  	dc.b 0,	0, 5, $1B
0001F71C 4100 F8B6                  	dc.l Map_obj41+$41000000
0001F720 0000 0523                  	dc.b 0,	0, 5, $23
0001F724 1300 CD84                  	dc.l Map_obj14+$13000000
0001F728 0000 0345                  	dc.b 0,	0, 3, $45
0001F72C 4601 049C                  	dc.l Map_obj46+$46000000
0001F730 0000 4000                  	dc.b 0,	0, $40,	0
0001F734 4C01 0DD8                  	dc.l Map_obj4C+$4C000000
0001F738 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F73C 4E01 10BC                  	dc.l Map_obj4E+$4E000000
0001F740 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F744 3300 DCF4                  	dc.l Map_obj33+$33000000
0001F748 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F74C 5001 14BA                  	dc.l Map_obj50+$50000000
0001F750 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F754 5101 1972                  	dc.l Map_obj51+$51000000
0001F758 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F75C 5201 1BE8                  	dc.l Map_obj52+$52000000
0001F760 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F764 5300 A12A                  	dc.l Map_obj53+$53000000
0001F768 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F76C 5401 0D9E                  	dc.l Map_obj54+$54000000
0001F770 0000 8680                  	dc.b 0,	0, $86,	$80
0001F774 5501 1DDC                  	dc.l Map_obj55+$55000000
0001F778 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F77C 7801 8E7A                  	dc.l Map_obj78+$78000000
0001F780 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F784 7901 9200                  	dc.l Map_obj79+$79000000
0001F788 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F78C                            	even
0001F78C                            	even
0001F78C                            
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C                            ; Debug	list - Star Light
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C                            Debug_SLZ:
0001F78C                            	include "_inc\Debug list - SLZ.asm"
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C                            ; Debug	list - Star Light
0001F78C                            ; ---------------------------------------------------------------------------
0001F78C 000F                       	dc.w $F
0001F78E 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F792 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F796 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F79A 0000 0680                  	dc.b 0,	0, 6, $80
0001F79E 5901 28DE                  	dc.l Map_obj59+$59000000
0001F7A2 0000 4000                  	dc.b 0,	0, $40,	0
0001F7A6 5300 A12A                  	dc.l Map_obj53+$53000000
0001F7AA 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F7AE 1800 9B82                  	dc.l Map_obj18b+$18000000
0001F7B2 0000 4000                  	dc.b 0,	0, $40,	0
0001F7B6 5A01 2A18                  	dc.l Map_obj5A+$5A000000
0001F7BA 0000 4000                  	dc.b 0,	0, $40,	0
0001F7BE 5B01 2BD0                  	dc.l Map_obj5B+$5B000000
0001F7C2 0000 4000                  	dc.b 0,	0, $40,	0
0001F7C6 5D01 31A0                  	dc.l Map_obj5D+$5D000000
0001F7CA 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F7CE 5E01 3532                  	dc.l Map_obj5E+$5E000000
0001F7D2 0000 0374                  	dc.b 0,	0, 3, $74
0001F7D6 4100 F8B6                  	dc.l Map_obj41+$41000000
0001F7DA 0000 0523                  	dc.b 0,	0, 5, $23
0001F7DE 1300 CD84                  	dc.l Map_obj14+$13000000
0001F7E2 0000 0480                  	dc.b 0,	0, 4, $80
0001F7E6 1C00 A23A                  	dc.l Map_obj1C+$1C000000
0001F7EA 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F7EE 5F01 37B0                  	dc.l Map_obj5F+$5F000000
0001F7F2 0000 0400                  	dc.b 0,	0, 4, 0
0001F7F6 6001 3A66                  	dc.l Map_obj60+$60000000
0001F7FA 0000 2429                  	dc.b 0,	0, $24,	$29
0001F7FE 7901 9200                  	dc.l Map_obj79+$79000000
0001F802 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F806                            	even
0001F806                            	even
0001F806                            
0001F806                            ; ---------------------------------------------------------------------------
0001F806                            ; Debug	list - Spring Yard
0001F806                            ; ---------------------------------------------------------------------------
0001F806                            Debug_SYZ:
0001F806                            	include "_inc\Debug list - SYZ.asm"
0001F806                            ; ---------------------------------------------------------------------------
0001F806                            ; Debug	list - Spring Yard
0001F806                            ; ---------------------------------------------------------------------------
0001F806 000F                       	dc.w $F
0001F808 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F80C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F810 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F814 0000 0680                  	dc.b 0,	0, 6, $80
0001F818 3600 EB80                  	dc.l Map_obj36+$36000000
0001F81C 0000 051B                  	dc.b 0,	0, 5, $1B
0001F820 4100 F8B6                  	dc.l Map_obj41+$41000000
0001F824 0000 0523                  	dc.b 0,	0, 5, $23
0001F828 4300 FD3C                  	dc.l Map_obj43+$43000000
0001F82C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F830 1201 051A                  	dc.l Map_obj12+$12000000
0001F834 0000 0000                  	dc.b 0,	0, 0, 0
0001F838 4701 0696                  	dc.l Map_obj47+$47000000
0001F83C 0000 0380                  	dc.b 0,	0, 3, $80
0001F840 1F00 B126                  	dc.l Map_obj1F+$1F000000
0001F844 0000 0400                  	dc.b 0,	0, 4, 0
0001F848 2200 B406                  	dc.l Map_obj22+$22000000
0001F84C 0000 0444                  	dc.b 0,	0, 4, $44
0001F850 5001 14BA                  	dc.l Map_obj50+$50000000
0001F854 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F858 1800 9B70                  	dc.l Map_obj18a+$18000000
0001F85C 0000 4000                  	dc.b 0,	0, $40,	0
0001F860 5601 229E                  	dc.l Map_obj56+$56000000
0001F864 0000 4000                  	dc.b 0,	0, $40,	0
0001F868 3200 D8B4                  	dc.l Map_obj32+$32000000
0001F86C 0000 0513                  	dc.b 0,	0, 5, $13
0001F870 7801 8E7A                  	dc.l Map_obj78+$78000000
0001F874 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F878 7901 9200                  	dc.l Map_obj79+$79000000
0001F87C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F880                            	even
0001F880                            	even
0001F880                            
0001F880                            ; ---------------------------------------------------------------------------
0001F880                            ; Debug	list - Scrap Brain
0001F880                            ; ---------------------------------------------------------------------------
0001F880                            Debug_SBZ:
0001F880                            	include "_inc\Debug list - SBZ.asm"
0001F880                            ; ---------------------------------------------------------------------------
0001F880                            ; Debug	list - Scrap Brain
0001F880                            ; ---------------------------------------------------------------------------
0001F880 001D                       	dc.w $1D
0001F882 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F886 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F88A 2600 BFA4                  	dc.l Map_obj26+$26000000
0001F88E 0000 0680                  	dc.b 0,	0, 6, $80
0001F892 5F01 37B0                  	dc.l Map_obj5F+$5F000000
0001F896 0000 0400                  	dc.b 0,	0, 4, 0
0001F89A 6001 3A66                  	dc.l Map_obj60+$60000000
0001F89E 0000 0429                  	dc.b 0,	0, 4, $29
0001F8A2 7801 8E7A                  	dc.l Map_obj78+$78000000
0001F8A6 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F8AA 1501 263A                  	dc.l Map_obj15b+$15000000
0001F8AE 0702 4391                  	dc.b 7,	2, $43,	$91
0001F8B2 6701 779A                  	dc.l Map_obj67+$67000000
0001F8B6 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F8BA 5201 1BE8                  	dc.l Map_obj52+$52000000
0001F8BE 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F8C2 3200 D8B4                  	dc.l Map_obj32+$32000000
0001F8C6 0000 0513                  	dc.b 0,	0, 5, $13
0001F8CA 6901 79F4                  	dc.l Map_obj69+$69000000
0001F8CE 0300 4492                  	dc.b 3,	0, $44,	$92
0001F8D2 6901 7A4E                  	dc.l Map_obj69a+$69000000
0001F8D6 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F8DA 6A01 7CAC                  	dc.l Map_obj6A+$6A000000
0001F8DE 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F8E2 5300 A12A                  	dc.l Map_obj53+$53000000
0001F8E6 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F8EA 5201 1BE8                  	dc.l Map_obj52+$52000000
0001F8EE 3903 4460                  	dc.b $39, 3, $44, $60
0001F8F2 6B01 807C                  	dc.l Map_obj6B+$6B000000
0001F8F6 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F8FA 2A00 A3D0                  	dc.l Map_obj2A+$2A000000
0001F8FE 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F902 6B01 807C                  	dc.l Map_obj6B+$6B000000
0001F906 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F90A 6A01 7CAC                  	dc.l Map_obj6A+$6A000000
0001F90E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F912 6B01 807C                  	dc.l Map_obj6B+$6B000000
0001F916 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F91A 6A01 7CAC                  	dc.l Map_obj6A+$6A000000
0001F91E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F922 6B01 807C                  	dc.l Map_obj6B+$6B000000
0001F926 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F92A 6C01 823E                  	dc.l Map_obj6C+$6C000000
0001F92E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F932 6D01 018C                  	dc.l Map_obj6D+$6D000000
0001F936 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F93A 6D01 018C                  	dc.l Map_obj6D+$6D000000
0001F93E 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F942 6E01 82F4                  	dc.l Map_obj6E+$6E000000
0001F946 0400 047E                  	dc.b 4,	0, 4, $7E
0001F94A 7001 873A                  	dc.l Map_obj70+$70000000
0001F94E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F952 7101 3046                  	dc.l Map_obj71+$71000000
0001F956 1100 8680                  	dc.b $11, 0, $86, $80
0001F95A 1E00 A83E                  	dc.l Map_obj1E+$1E000000
0001F95E 0400 2302                  	dc.b 4,	0, $23,	2
0001F962 7901 9200                  	dc.l Map_obj79+$79000000
0001F966 0100 07A0                  	dc.b 1,	0, 7, $A0
0001F96A                            	even
0001F96A                            	even
0001F96A                            
0001F96A                            ; ---------------------------------------------------------------------------
0001F96A                            ; Debug	list - ending sequence / special stage
0001F96A                            ; ---------------------------------------------------------------------------
0001F96A                            Debug_Ending:
0001F96A                            	include "_inc\Debug list - Ending and SS.asm"
0001F96A                            ; ---------------------------------------------------------------------------
0001F96A                            ; Debug	list - ending sequence / special stage
0001F96A                            ; ---------------------------------------------------------------------------
0001F96A 000D                       	dc.w $D
0001F96C 2500 B9A8                  	dc.l Map_obj25+$25000000
0001F970 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001F974 4701 0696                  	dc.l Map_obj47+$47000000
0001F978 0000 0380                  	dc.b 0,	0, 3, $80
0001F97C 2800 AE58                  	dc.l Map_obj28a+$28000000
0001F980 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F984 2800 AE58                  	dc.l Map_obj28a+$28000000
0001F988 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F98C 2800 AE58                  	dc.l Map_obj28a+$28000000
0001F990 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F994 2800 AE40                  	dc.l Map_obj28+$28000000
0001F998 0D00 0553                  	dc.b $D, 0, 5, $53
0001F99C 2800 AE40                  	dc.l Map_obj28+$28000000
0001F9A0 0E00 0553                  	dc.b $E, 0, 5, $53
0001F9A4 2800 AE40                  	dc.l Map_obj28+$28000000
0001F9A8 0F00 0573                  	dc.b $F, 0, 5, $73
0001F9AC 2800 AE40                  	dc.l Map_obj28+$28000000
0001F9B0 1000 0573                  	dc.b $10, 0, 5,	$73
0001F9B4 2800 AE58                  	dc.l Map_obj28a+$28000000
0001F9B8 1100 0585                  	dc.b $11, 0, 5,	$85
0001F9BC 2800 AE70                  	dc.l Map_obj28b+$28000000
0001F9C0 1200 0593                  	dc.b $12, 0, 5,	$93
0001F9C4 2800 AE58                  	dc.l Map_obj28a+$28000000
0001F9C8 1300 0565                  	dc.b $13, 0, 5,	$65
0001F9CC 2800 AE70                  	dc.l Map_obj28b+$28000000
0001F9D0 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F9D4                            	even
0001F9D4                            	even
0001F9D4                            
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4                            ; Main level load blocks
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4                            MainLoadBlocks:
0001F9D4                            	include "_inc\Main level load blocks.asm"
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4                            ; Main level load blocks
0001F9D4                            ;
0001F9D4                            ; ===FORMAT===
0001F9D4                            ; level	patterns + (1st	PLC num	* 10^6)
0001F9D4                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F9D4                            ; 256x256 mappings
0001F9D4                            ; blank, music (unused), pal index (unused), pal index
0001F9D4                            ; ---------------------------------------------------------------------------
0001F9D4 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F9D8 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F9DC 0000 0000                  	dc.l Blk256_GHZ
0001F9E0 0081 0404                  	dc.b 0,	$81, 4,	4
0001F9E4 0000 0000                  	dc.l Nem_LZ+$6000000
0001F9E8 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F9EC 0000 0000                  	dc.l Blk256_LZ
0001F9F0 0082 0505                  	dc.b 0,	$82, 5,	5
0001F9F4 0000 0000                  	dc.l Nem_MZ+$8000000
0001F9F8 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F9FC 0000 0000                  	dc.l Blk256_MZ
0001FA00 0083 0606                  	dc.b 0,	$83, 6,	6
0001FA04 0000 0000                  	dc.l Nem_SLZ+$A000000
0001FA08 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001FA0C 0000 0000                  	dc.l Blk256_SLZ
0001FA10 0084 0707                  	dc.b 0,	$84, 7,	7
0001FA14 0000 0000                  	dc.l Nem_SYZ+$C000000
0001FA18 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001FA1C 0000 0000                  	dc.l Blk256_SYZ
0001FA20 0085 0808                  	dc.b 0,	$85, 8,	8
0001FA24 0000 0000                  	dc.l Nem_SBZ+$E000000
0001FA28 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001FA2C 0000 0000                  	dc.l Blk256_SBZ
0001FA30 0086 0909                  	dc.b 0,	$86, 9,	9
0001FA34 0000 0000                  	dc.l Nem_GHZ	; main load block for ending
0001FA38 0000 0000                  	dc.l Blk16_GHZ
0001FA3C 0000 0000                  	dc.l Blk256_GHZ
0001FA40 0086 1313                  	dc.b 0,	$86, $13, $13
0001FA44                            	even
0001FA44                            	even
0001FA44                            
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44                            ; Pattern load cues
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44                            ArtLoadCues:
0001FA44                            	include "_inc\Pattern load cues.asm"
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44                            ; Pattern load cues - index
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001FA48 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001FA4C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001FA50 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001FA54 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001FA58 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001FA5C 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001FA60 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001FA64 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001FA68 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001FA6C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001FA70 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001FA74 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001FA78 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001FA7C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001FA80 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001FA84                            ; ---------------------------------------------------------------------------
0001FA84                            ; Pattern load cues - standard block 1
0001FA84                            ; ---------------------------------------------------------------------------
0001FA84 0005                       PLC_Main:	dc.w 5
0001FA86 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001FA8A D800                       		dc.w $D800
0001FA8C 0000 0000                  		dc.l Nem_Hud		; HUD
0001FA90 D940                       		dc.w $D940
0001FA92 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001FA96 FA80                       		dc.w $FA80
0001FA98 0000 0000                  		dc.l Nem_LivesPic	; lives	counter pic
0001FA9C ACA0                       		dc.w $ACA0
0001FA9E 0000 0000                  		dc.l Nem_Ring		; rings
0001FAA2 F640                       		dc.w $F640
0001FAA4 0000 0000                  		dc.l Nem_Points		; points from enemy
0001FAA8 F2E0                       		dc.w $F2E0
0001FAAA                            ; ---------------------------------------------------------------------------
0001FAAA                            ; Pattern load cues - standard block 2
0001FAAA                            ; ---------------------------------------------------------------------------
0001FAAA 0000                       PLC_Main2:	dc.w 0
0001FAAC 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FAB0 D000                       		dc.w $D000
0001FAB2                            ; ---------------------------------------------------------------------------
0001FAB2                            ; Pattern load cues - explosion
0001FAB2                            ; ---------------------------------------------------------------------------
0001FAB2 0000                       PLC_Explode:	dc.w 0
0001FAB4 0000 0000                  		dc.l Nem_Explode	; explosion
0001FAB8 B400                       		dc.w $B400
0001FABA                            ; ---------------------------------------------------------------------------
0001FABA                            ; Pattern load cues - game/time	over
0001FABA                            ; ---------------------------------------------------------------------------
0001FABA 0000                       PLC_GameOver:	dc.w 0
0001FABC 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FAC0 ABC0                       		dc.w $ABC0
0001FAC2                            ; ---------------------------------------------------------------------------
0001FAC2                            ; Pattern load cues - Green Hill
0001FAC2                            ; ---------------------------------------------------------------------------
0001FAC2 000A                       PLC_GHZ:	dc.w $A
0001FAC4 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
0001FAC8 0000                       		dc.w 0
0001FACA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FACE 6B00                       		dc.w $6B00
0001FAD0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FAD4 7A00                       		dc.w $7A00
0001FAD6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FADA 8000                       		dc.w $8000
0001FADC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FAE0 8880                       		dc.w $8880
0001FAE2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FAE6 8F60                       		dc.w $8F60
0001FAE8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FAEC 9360                       		dc.w $9360
0001FAEE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FAF2 9E00                       		dc.w $9E00
0001FAF4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAF8 A360                       		dc.w $A360
0001FAFA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAFE A460                       		dc.w $A460
0001FB00 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB04 A660                       		dc.w $A660
0001FB06 0005                       PLC_GHZ2:	dc.w 5
0001FB08 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FB0C 7000                       		dc.w $7000
0001FB0E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FB12 71C0                       		dc.w $71C0
0001FB14 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FB18 7300                       		dc.w $7300
0001FB1A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FB1E 7540                       		dc.w $7540
0001FB20 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FB24 A1E0                       		dc.w $A1E0
0001FB26 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FB2A 6980                       		dc.w $6980
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C                            ; Pattern load cues - Labyrinth
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C 000B                       PLC_LZ:		dc.w $B
0001FB2E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001FB32 0000                       		dc.w 0
0001FB34 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FB38 3C00                       		dc.w $3C00
0001FB3A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FB3E 3E00                       		dc.w $3E00
0001FB40 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FB44 4B20                       		dc.w $4B20
0001FB46 0000 0000                  		dc.l Nem_Water		; water	surface
0001FB4A 6000                       		dc.w $6000
0001FB4C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FB50 6200                       		dc.w $6200
0001FB52 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FB56 6500                       		dc.w $6500
0001FB58 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FB5C 6900                       		dc.w $6900
0001FB5E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FB62 7780                       		dc.w $7780
0001FB64 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FB68 7880                       		dc.w $7880
0001FB6A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FB6E 7980                       		dc.w $7980
0001FB70 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FB74 94C0                       		dc.w $94C0
0001FB76 000C                       PLC_LZ2:	dc.w $C
0001FB78 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FB7C 7BC0                       		dc.w $7BC0
0001FB7E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FB82 7CC0                       		dc.w $7CC0
0001FB84 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FB88 7EC0                       		dc.w $7EC0
0001FB8A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FB8E 5D20                       		dc.w $5D20
0001FB90 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FB94 8800                       		dc.w $8800
0001FB96 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FB9A 89E0                       		dc.w $89E0
0001FB9C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FBA0 8CE0                       		dc.w $8CE0
0001FBA2 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FBA6 90C0                       		dc.w $90C0
0001FBA8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FBAC A1E0                       		dc.w $A1E0
0001FBAE 0000 0000                  		dc.l Nem_Cork		; cork block
0001FBB2 A000                       		dc.w $A000
0001FBB4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FBB8 A360                       		dc.w $A360
0001FBBA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBBE A460                       		dc.w $A460
0001FBC0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBC4 A660                       		dc.w $A660
0001FBC6                            ; ---------------------------------------------------------------------------
0001FBC6                            ; Pattern load cues - Marble
0001FBC6                            ; ---------------------------------------------------------------------------
0001FBC6 0009                       PLC_MZ:		dc.w 9
0001FBC8 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001FBCC 0000                       		dc.w 0
0001FBCE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FBD2 6000                       		dc.w $6000
0001FBD4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FBD8 68A0                       		dc.w $68A0
0001FBDA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FBDE 7000                       		dc.w $7000
0001FBE0 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FBE4 71C0                       		dc.w $71C0
0001FBE6 0000 0000                  		dc.l Nem_Lava		; lava
0001FBEA 7500                       		dc.w $7500
0001FBEC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FBF0 8880                       		dc.w $8880
0001FBF2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FBF6 8F60                       		dc.w $8F60
0001FBF8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FBFC 9700                       		dc.w $9700
0001FBFE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FC02 9FE0                       		dc.w $9FE0
0001FC04 0004                       PLC_MZ2:	dc.w 4
0001FC06 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FC0A A260                       		dc.w $A260
0001FC0C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC10 A360                       		dc.w $A360
0001FC12 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC16 A460                       		dc.w $A460
0001FC18 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC1C A660                       		dc.w $A660
0001FC1E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FC22 5700                       		dc.w $5700
0001FC24                            ; ---------------------------------------------------------------------------
0001FC24                            ; Pattern load cues - Star Light
0001FC24                            ; ---------------------------------------------------------------------------
0001FC24 0008                       PLC_SLZ:	dc.w 8
0001FC26 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001FC2A 0000                       		dc.w 0
0001FC2C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FC30 8000                       		dc.w $8000
0001FC32 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC36 8520                       		dc.w $8520
0001FC38 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FC3C 9000                       		dc.w $9000
0001FC3E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FC42 9C00                       		dc.w $9C00
0001FC44 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FC48 A260                       		dc.w $A260
0001FC4A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC4E A360                       		dc.w $A360
0001FC50 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC54 A460                       		dc.w $A460
0001FC56 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC5A A660                       		dc.w $A660
0001FC5C 0005                       PLC_SLZ2:	dc.w 5
0001FC5E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FC62 6E80                       		dc.w $6E80
0001FC64 0000 0000                  		dc.l Nem_Fan		; fan
0001FC68 7400                       		dc.w $7400
0001FC6A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FC6E 7980                       		dc.w $7980
0001FC70 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FC74 7B80                       		dc.w $7B80
0001FC76 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FC7A 9B00                       		dc.w $9B00
0001FC7C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FC80 9E00                       		dc.w $9E00
0001FC82                            ; ---------------------------------------------------------------------------
0001FC82                            ; Pattern load cues - Spring Yard
0001FC82                            ; ---------------------------------------------------------------------------
0001FC82 0004                       PLC_SYZ:	dc.w 4
0001FC84 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001FC88 0000                       		dc.w 0
0001FC8A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FC8E 8000                       		dc.w $8000
0001FC90 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FC94 8880                       		dc.w $8880
0001FC96 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FC9A 8F60                       		dc.w $8F60
0001FC9C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FCA0 9700                       		dc.w $9700
0001FCA2 0007                       PLC_SYZ2:	dc.w 7
0001FCA4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FCA8 7000                       		dc.w $7000
0001FCAA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FCAE 72C0                       		dc.w $72C0
0001FCB0 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FCB4 7740                       		dc.w $7740
0001FCB6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FCBA 9FE0                       		dc.w $9FE0
0001FCBC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FCC0 A1E0                       		dc.w $A1E0
0001FCC2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCC6 A360                       		dc.w $A360
0001FCC8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCCC A460                       		dc.w $A460
0001FCCE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCD2 A660                       		dc.w $A660
0001FCD4                            ; ---------------------------------------------------------------------------
0001FCD4                            ; Pattern load cues - Scrap Brain
0001FCD4                            ; ---------------------------------------------------------------------------
0001FCD4 000B                       PLC_SBZ:	dc.w $B
0001FCD6 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001FCDA 0000                       		dc.w 0
0001FCDC 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FCE0 5800                       		dc.w $5800
0001FCE2 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FCE6 5D00                       		dc.w $5D00
0001FCE8 0000 0000                  		dc.l Nem_Girder		; girder
0001FCEC 5E00                       		dc.w $5E00
0001FCEE 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FCF2 6040                       		dc.w $6040
0001FCF4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FCF8 6880                       		dc.w $6880
0001FCFA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FCFE 6900                       		dc.w $6900
0001FD00 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FD04 7220                       		dc.w $7220
0001FD06 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FD0A 76A0                       		dc.w $76A0
0001FD0C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FD10 7B20                       		dc.w $7B20
0001FD12 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FD16 7EA0                       		dc.w $7EA0
0001FD18 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FD1C 9860                       		dc.w $9860
0001FD1E 000C                       PLC_SBZ2:	dc.w $C
0001FD20 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FD24 5600                       		dc.w $5600
0001FD26 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FD2A 8000                       		dc.w $8000
0001FD2C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FD30 8520                       		dc.w $8520
0001FD32 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FD36 8C00                       		dc.w $8C00
0001FD38 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FD3C 8DE0                       		dc.w $8DE0
0001FD3E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FD42 8FC0                       		dc.w $8FC0
0001FD44 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FD48 9240                       		dc.w $9240
0001FD4A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FD4E 7F20                       		dc.w $7F20
0001FD50 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FD54 9BE0                       		dc.w $9BE0
0001FD56 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FD5A A1E0                       		dc.w $A1E0
0001FD5C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FD60 A360                       		dc.w $A360
0001FD62 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FD66 A460                       		dc.w $A460
0001FD68 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FD6C A660                       		dc.w $A660
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E                            ; Pattern load cues - title card
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E 0000                       PLC_TitleCard:	dc.w 0
0001FD70 0000 0000                  		dc.l Nem_TitleCard
0001FD74 B000                       		dc.w $B000
0001FD76                            ; ---------------------------------------------------------------------------
0001FD76                            ; Pattern load cues - act 3 boss
0001FD76                            ; ---------------------------------------------------------------------------
0001FD76 0005                       PLC_Boss:	dc.w 5
0001FD78 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FD7C 8000                       		dc.w $8000
0001FD7E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FD82 8D80                       		dc.w $8D80
0001FD84 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FD88 93A0                       		dc.w $93A0
0001FD8A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FD8E A300                       		dc.w $A300
0001FD90 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FD94 A300                       		dc.w $A300
0001FD96 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FD9A A540                       		dc.w $A540
0001FD9C                            ; ---------------------------------------------------------------------------
0001FD9C                            ; Pattern load cues - act 1/2 signpost
0001FD9C                            ; ---------------------------------------------------------------------------
0001FD9C 0002                       PLC_Signpost:	dc.w 2
0001FD9E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FDA2 D000                       		dc.w $680*$20
0001FDA4 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FDA8 96C0                       		dc.w $96C0
0001FDAA 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FDAE 8C40                       		dc.w $8C40
0001FDB0                            ; ---------------------------------------------------------------------------
0001FDB0                            ; Pattern load cues - beta special stage warp effect
0001FDB0                            ; ---------------------------------------------------------------------------
0001FDB0 0000                       PLC_Warp:	dc.w 0
0001FDB2 0000 0000                  		dc.l Nem_Warp
0001FDB6 A820                       		dc.w $A820
0001FDB8                            ; ---------------------------------------------------------------------------
0001FDB8                            ; Pattern load cues - special stage
0001FDB8                            ; ---------------------------------------------------------------------------
0001FDB8 0010                       PLC_SpeStage:	dc.w $10
0001FDBA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FDBE 0000                       		dc.w 0
0001FDC0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FDC4 0A20                       		dc.w $A20
0001FDC6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001FDCA 2840                       		dc.w $2840
0001FDCC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FDD0 4760                       		dc.w $4760
0001FDD2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FDD6 4A20                       		dc.w $4A20
0001FDD8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FDDC 4C60                       		dc.w $4C60
0001FDDE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FDE2 5E00                       		dc.w $5E00
0001FDE4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FDE8 6E00                       		dc.w $6E00
0001FDEA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FDEE 7E00                       		dc.w $7E00
0001FDF0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FDF4 8E00                       		dc.w $8E00
0001FDF6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FDFA 9E00                       		dc.w $9E00
0001FDFC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001FE00 AE00                       		dc.w $AE00
0001FE02 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FE06 BE00                       		dc.w $BE00
0001FE08 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FE0C EE00                       		dc.w $EE00
0001FE0E 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001FE12 F2E0                       		dc.w $F2E0
0001FE14 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001FE18 F400                       		dc.w $F400
0001FE1A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001FE1E F520                       		dc.w $F520
0001FE20 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001FE24 F2E0                       		dc.w $F2E0
0001FE26 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001FE2A F400                       		dc.w $F400
0001FE2C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001FE30 F520                       		dc.w $F520
0001FE32                            ; ---------------------------------------------------------------------------
0001FE32                            ; Pattern load cues - GHZ animals
0001FE32                            ; ---------------------------------------------------------------------------
0001FE32 0001                       PLC_GHZAnimals:	dc.w 1
0001FE34 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE38 B000                       		dc.w $B000
0001FE3A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE3E B240                       		dc.w $B240
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40                            ; Pattern load cues - LZ animals
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40 0001                       PLC_LZAnimals:	dc.w 1
0001FE42 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FE46 B000                       		dc.w $B000
0001FE48 0000 0000                  		dc.l Nem_Seal		; seal
0001FE4C B240                       		dc.w $B240
0001FE4E                            ; ---------------------------------------------------------------------------
0001FE4E                            ; Pattern load cues - MZ animals
0001FE4E                            ; ---------------------------------------------------------------------------
0001FE4E 0001                       PLC_MZAnimals:	dc.w 1
0001FE50 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FE54 B000                       		dc.w $B000
0001FE56 0000 0000                  		dc.l Nem_Seal		; seal
0001FE5A B240                       		dc.w $B240
0001FE5C                            ; ---------------------------------------------------------------------------
0001FE5C                            ; Pattern load cues - SLZ animals
0001FE5C                            ; ---------------------------------------------------------------------------
0001FE5C 0001                       PLC_SLZAnimals:	dc.w 1
0001FE5E 0000 0000                  		dc.l Nem_Pig		; pig
0001FE62 B000                       		dc.w $B000
0001FE64 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE68 B240                       		dc.w $B240
0001FE6A                            ; ---------------------------------------------------------------------------
0001FE6A                            ; Pattern load cues - SYZ animals
0001FE6A                            ; ---------------------------------------------------------------------------
0001FE6A 0001                       PLC_SYZAnimals:	dc.w 1
0001FE6C 0000 0000                  		dc.l Nem_Pig		; pig
0001FE70 B000                       		dc.w $B000
0001FE72 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE76 B240                       		dc.w $B240
0001FE78                            ; ---------------------------------------------------------------------------
0001FE78                            ; Pattern load cues - SBZ animals
0001FE78                            ; ---------------------------------------------------------------------------
0001FE78 0001                       PLC_SBZAnimals:	dc.w 1
0001FE7A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE7E B000                       		dc.w $B000
0001FE80 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FE84 B240                       		dc.w $B240
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            ; Pattern load cues - special stage results screen
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86 0001                       PLC_SpeStResult:dc.w 1
0001FE88 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FE8C A820                       		dc.w $A820
0001FE8E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FE92 AA20                       		dc.w $AA20
0001FE94                            ; ---------------------------------------------------------------------------
0001FE94                            ; Pattern load cues - ending sequence
0001FE94                            ; ---------------------------------------------------------------------------
0001FE94 000E                       PLC_Ending:	dc.w $E
0001FE96 0000 0000                  		dc.l Nem_TIT_1st	; Title main patterns
0001FE9A 0000                       		dc.w 0
0001FE9C 0000 0000                  		dc.l Nem_TIT_2nd	; Title secondary patterns
0001FEA0 39A0                       		dc.w $39A0
0001FEA2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FEA6 6B00                       		dc.w $6B00
0001FEA8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FEAC 7400                       		dc.w $7400
0001FEAE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FEB2 78A0                       		dc.w $78A0
0001FEB4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FEB8 7C20                       		dc.w $7C20
0001FEBA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FEBE A480                       		dc.w $A480
0001FEC0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FEC4 AA60                       		dc.w $AA60
0001FEC6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FECA ACA0                       		dc.w $ACA0
0001FECC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FED0 AE60                       		dc.w $AE60
0001FED2 0000 0000                  		dc.l Nem_Seal		; seal
0001FED6 B0A0                       		dc.w $B0A0
0001FED8 0000 0000                  		dc.l Nem_Pig		; pig
0001FEDC B260                       		dc.w $B260
0001FEDE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FEE2 B4A0                       		dc.w $B4A0
0001FEE4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FEE8 B660                       		dc.w $B660
0001FEEA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FEEE B8A0                       		dc.w $B8A0
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0 0002                       PLC_TryAgain:	dc.w 2
0001FEF2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FEF6 78A0                       		dc.w $78A0
0001FEF8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FEFC 7C20                       		dc.w $7C20
0001FEFE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FF02 B400                       		dc.w $B400
0001FF04                            ; ---------------------------------------------------------------------------
0001FF04                            ; Pattern load cues - Eggman on SBZ 2
0001FF04                            ; ---------------------------------------------------------------------------
0001FF04 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FF06 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FF0A A300                       		dc.w $A300
0001FF0C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FF10 8000                       		dc.w $8000
0001FF12 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FF16 9400                       		dc.w $9400
0001FF18                            ; ---------------------------------------------------------------------------
0001FF18                            ; Pattern load cues - final boss
0001FF18                            ; ---------------------------------------------------------------------------
0001FF18 0004                       PLC_FZBoss:	dc.w 4
0001FF1A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FF1E 7400                       		dc.w $7400
0001FF20 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FF24 6000                       		dc.w $6000
0001FF26 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FF2A 8000                       		dc.w $8000
0001FF2C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FF30 8E00                       		dc.w $8E00
0001FF32 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FF36 A540                       		dc.w $A540
0001FF38                            		even
0001FF38                            		even
0001FF38                            	even
0001FF38                            
0001FF38                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002039A                            		even
0002039A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020492                            		even
00020492                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000205A6                            		even
000205A6                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000215B2                            		even
000215B2                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022F80                            		even
00022F80                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022FB4                            		even
00022FB4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023072                            		even
00023072                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002351A                            		even
0002351A                            ; ---------------------------------------------------------------------------
0002351A                            ; Sprite mappings - Sonic
0002351A                            ; ---------------------------------------------------------------------------
0002351A                            Map_Sonic:
0002351A                            	include "_maps\Sonic.asm"
0002351A                            ; --------------------------------------------------------------------------------
0002351A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002351A                            ; --------------------------------------------------------------------------------
0002351A                            
0002351A                            SME_1h0_3:	
0002351A 0000 0000                  		dc.w SME_1h0_3_B4-SME_1h0_3, SME_1h0_3_B5-SME_1h0_3	
0002351E 0000 0000                  		dc.w SME_1h0_3_CA-SME_1h0_3, SME_1h0_3_EE-SME_1h0_3	
00023522 0000 0000                  		dc.w SME_1h0_3_FE-SME_1h0_3, SME_1h0_3_10E-SME_1h0_3	
00023526 0000 0000                  		dc.w SME_1h0_3_11E-SME_1h0_3, SME_1h0_3_133-SME_1h0_3	
0002352A 0000 0000                  		dc.w SME_1h0_3_13E-SME_1h0_3, SME_1h0_3_149-SME_1h0_3	
0002352E 0000 0000                  		dc.w SME_1h0_3_15E-SME_1h0_3, SME_1h0_3_169-SME_1h0_3	
00023532 0000 0000                  		dc.w SME_1h0_3_179-SME_1h0_3, SME_1h0_3_193-SME_1h0_3	
00023536 0000 0000                  		dc.w SME_1h0_3_1B2-SME_1h0_3, SME_1h0_3_1C7-SME_1h0_3	
0002353A 0000 0000                  		dc.w SME_1h0_3_1E1-SME_1h0_3, SME_1h0_3_1F6-SME_1h0_3	
0002353E 0000 0000                  		dc.w SME_1h0_3_210-SME_1h0_3, SME_1h0_3_225-SME_1h0_3	
00023542 0000 0000                  		dc.w SME_1h0_3_230-SME_1h0_3, SME_1h0_3_23B-SME_1h0_3	
00023546 0000 0000                  		dc.w SME_1h0_3_250-SME_1h0_3, SME_1h0_3_25B-SME_1h0_3	
0002354A 0000 0000                  		dc.w SME_1h0_3_26B-SME_1h0_3, SME_1h0_3_28A-SME_1h0_3	
0002354E 0000 0000                  		dc.w SME_1h0_3_2A9-SME_1h0_3, SME_1h0_3_2BE-SME_1h0_3	
00023552 0000 0000                  		dc.w SME_1h0_3_2D8-SME_1h0_3, SME_1h0_3_2ED-SME_1h0_3	
00023556 0000 0000                  		dc.w SME_1h0_3_307-SME_1h0_3, SME_1h0_3_312-SME_1h0_3	
0002355A 0000 0000                  		dc.w SME_1h0_3_31D-SME_1h0_3, SME_1h0_3_328-SME_1h0_3	
0002355E 0000 0000                  		dc.w SME_1h0_3_333-SME_1h0_3, SME_1h0_3_348-SME_1h0_3	
00023562 0000 0000                  		dc.w SME_1h0_3_35D-SME_1h0_3, SME_1h0_3_37C-SME_1h0_3	
00023566 0000 0000                  		dc.w SME_1h0_3_39B-SME_1h0_3, SME_1h0_3_3A6-SME_1h0_3	
0002356A 0000 0000                  		dc.w SME_1h0_3_3B1-SME_1h0_3, SME_1h0_3_3BC-SME_1h0_3	
0002356E 0000 0000                  		dc.w SME_1h0_3_3C7-SME_1h0_3, SME_1h0_3_3DC-SME_1h0_3	
00023572 0000 0000                  		dc.w SME_1h0_3_3EC-SME_1h0_3, SME_1h0_3_401-SME_1h0_3	
00023576 0000 0000                  		dc.w SME_1h0_3_411-SME_1h0_3, SME_1h0_3_41C-SME_1h0_3	
0002357A 0000 0000                  		dc.w SME_1h0_3_431-SME_1h0_3, SME_1h0_3_441-SME_1h0_3	
0002357E 0000 0000                  		dc.w SME_1h0_3_44C-SME_1h0_3, SME_1h0_3_461-SME_1h0_3	
00023582 0000 0000                  		dc.w SME_1h0_3_476-SME_1h0_3, SME_1h0_3_486-SME_1h0_3	
00023586 0000 0000                  		dc.w SME_1h0_3_496-SME_1h0_3, SME_1h0_3_4A6-SME_1h0_3	
0002358A 0000 0000                  		dc.w SME_1h0_3_4B1-SME_1h0_3, SME_1h0_3_4C1-SME_1h0_3	
0002358E 0000 0000                  		dc.w SME_1h0_3_4D1-SME_1h0_3, SME_1h0_3_4E6-SME_1h0_3	
00023592 0000 0000                  		dc.w SME_1h0_3_4FB-SME_1h0_3, SME_1h0_3_506-SME_1h0_3	
00023596 0000 0000                  		dc.w SME_1h0_3_516-SME_1h0_3, SME_1h0_3_521-SME_1h0_3	
0002359A 0000 0000                  		dc.w SME_1h0_3_531-SME_1h0_3, SME_1h0_3_54B-SME_1h0_3	
0002359E 0000 0000                  		dc.w SME_1h0_3_565-SME_1h0_3, SME_1h0_3_575-SME_1h0_3	
000235A2 0000 0000                  		dc.w SME_1h0_3_585-SME_1h0_3, SME_1h0_3_595-SME_1h0_3	
000235A6 0000 0000                  		dc.w SME_1h0_3_5A0-SME_1h0_3, SME_1h0_3_5B0-SME_1h0_3	
000235AA 0000 0000                  		dc.w SME_1h0_3_5C5-SME_1h0_3, SME_1h0_3_5EE-SME_1h0_3	
000235AE 0000 0000                  		dc.w SME_1h0_3_5F4-SME_1h0_3, SME_1h0_3_609-SME_1h0_3	
000235B2 0000 0000                  		dc.w SME_1h0_3_61E-SME_1h0_3, SME_1h0_3_633-SME_1h0_3	
000235B6 0000 0000                  		dc.w SME_1h0_3_648-SME_1h0_3, SME_1h0_3_658-SME_1h0_3	
000235BA 0000 0000                  		dc.w SME_1h0_3_668-SME_1h0_3, SME_1h0_3_678-SME_1h0_3	
000235BE 0000 0000                  		dc.w SME_1h0_3_688-SME_1h0_3, SME_1h0_3_69D-SME_1h0_3	
000235C2 0000 0000                  		dc.w SME_1h0_3_6B2-SME_1h0_3, SME_1h0_3_6C7-SME_1h0_3	
000235C6 0000 0000                  		dc.w SME_1h0_3_6DC-SME_1h0_3, SME_1h0_3_6EC-SME_1h0_3	
000235CA 0000 0000                  		dc.w SME_1h0_3_6FC-SME_1h0_3, SME_1h0_3_70C-SME_1h0_3	
000235CE 00                         SME_1h0_3_B4:	dc.b 0	
000235CF 04                         SME_1h0_3_B5:	dc.b 4	
000235D0 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000235D5 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000235DA 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000235DF F409 0009 F0               		dc.b $F4, 9, 0, 9, $F0	
000235E4 07                         SME_1h0_3_CA:	dc.b 7	
000235E5 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000235EA EC09 0003 F0               		dc.b $EC, 9, 0, 3, $F0	
000235EF 0400 0009 00               		dc.b 4, 0, 0, 9, 0	
000235F4 FC00 000A 00               		dc.b $FC, 0, 0, $A, 0	
000235F9 FC01 000B F0               		dc.b $FC, 1, 0, $B, $F0	
000235FE 0400 000D F8               		dc.b 4, 0, 0, $D, $F8	
00023603 FC00 000E F8               		dc.b $FC, 0, 0, $E, $F8	
00023608 03                         SME_1h0_3_EE:	dc.b 3	
00023609 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002360E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023613 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023618 03                         SME_1h0_3_FE:	dc.b 3	
00023619 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002361E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00023623 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023628 03                         SME_1h0_3_10E:	dc.b 3	
00023629 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
0002362E 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00023633 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00023638 04                         SME_1h0_3_11E:	dc.b 4	
00023639 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
0002363E FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
00023643 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
00023648 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
0002364D 02                         SME_1h0_3_133:	dc.b 2	
0002364E EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023653 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
00023658 02                         SME_1h0_3_13E:	dc.b 2	
00023659 ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
0002365E FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
00023663 04                         SME_1h0_3_149:	dc.b 4	
00023664 EB09 0000 F3               		dc.b $EB, 9, 0, 0, $F3	
00023669 FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
0002366E FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
00023673 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
00023678 02                         SME_1h0_3_15E:	dc.b 2	
00023679 EC09 0000 F2               		dc.b $EC, 9, 0, 0, $F2	
0002367E FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
00023683 03                         SME_1h0_3_169:	dc.b 3	
00023684 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
00023689 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
0002368E 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
00023693 05                         SME_1h0_3_179:	dc.b 5	
00023694 EB06 0000 03               		dc.b $EB, 6, 0, 0, 3	
00023699 FB08 0006 EB               		dc.b $FB, 8, 0, 6, $EB	
0002369E 0309 0009 F3               		dc.b 3, 9, 0, 9, $F3	
000236A3 1300 000F FB               		dc.b $13, 0, 0, $F, $FB	
000236A8 EB09 0010 EB               		dc.b $EB, 9, 0, $10, $EB	
000236AD 06                         SME_1h0_3_193:	dc.b 6	
000236AE EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000236B3 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
000236B8 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
000236BD 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
000236C2 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
000236C7 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
000236CC 04                         SME_1h0_3_1B2:	dc.b 4	
000236CD ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000236D2 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000236D7 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
000236DC 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
000236E1 05                         SME_1h0_3_1C7:	dc.b 5	
000236E2 EB05 0000 03               		dc.b $EB, 5, 0, 0, 3	
000236E7 FB0D 0004 F3               		dc.b $FB, $D, 0, 4, $F3	
000236EC 0B08 000C F3               		dc.b $B, 8, 0, $C, $F3	
000236F1 1304 000F FB               		dc.b $13, 4, 0, $F, $FB	
000236F6 EB09 0011 EB               		dc.b $EB, 9, 0, $11, $EB	
000236FB 04                         SME_1h0_3_1E1:	dc.b 4	
000236FC EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00023701 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00023706 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002370B 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
00023710 05                         SME_1h0_3_1F6:	dc.b 5	
00023711 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00023716 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002371B FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
00023720 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
00023725 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
0002372A 04                         SME_1h0_3_210:	dc.b 4	
0002372B F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
00023730 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023735 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
0002373A 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
0002373F 02                         SME_1h0_3_225:	dc.b 2	
00023740 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
00023745 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002374A 02                         SME_1h0_3_230:	dc.b 2	
0002374B F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
00023750 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
00023755 04                         SME_1h0_3_23B:	dc.b 4	
00023756 F506 0000 EB               		dc.b $F5, 6, 0, 0, $EB	
0002375B EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
00023760 FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
00023765 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
0002376A 02                         SME_1h0_3_250:	dc.b 2	
0002376B F506 0000 EC               		dc.b $F5, 6, 0, 0, $EC	
00023770 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
00023775 03                         SME_1h0_3_25B:	dc.b 3	
00023776 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
0002377B EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00023780 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00023785 06                         SME_1h0_3_26B:	dc.b 6	
00023786 ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
0002378B F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
00023790 F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
00023795 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
0002379A FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
0002379F FD06 000F EB               		dc.b $FD, 6, 0, $F, $EB	
000237A4 06                         SME_1h0_3_28A:	dc.b 6	
000237A5 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000237AA E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
000237AF EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
000237B4 F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
000237B9 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
000237BE 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
000237C3 04                         SME_1h0_3_2A9:	dc.b 4	
000237C4 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
000237C9 F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
000237CE EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
000237D3 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000237D8 05                         SME_1h0_3_2BE:	dc.b 5	
000237D9 ED08 0000 F3               		dc.b $ED, 8, 0, 0, $F3	
000237DE F504 0003 EB               		dc.b $F5, 4, 0, 3, $EB	
000237E3 F50D 0005 FB               		dc.b $F5, $D, 0, 5, $FB	
000237E8 0508 000D FB               		dc.b 5, 8, 0, $D, $FB	
000237ED FD06 0010 EB               		dc.b $FD, 6, 0, $10, $EB	
000237F2 04                         SME_1h0_3_2D8:	dc.b 4	
000237F3 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000237F8 F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
000237FD EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
00023802 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
00023807 05                         SME_1h0_3_2ED:	dc.b 5	
00023808 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002380D EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
00023812 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
00023817 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002381C 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
00023821 02                         SME_1h0_3_307:	dc.b 2	
00023822 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023827 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002382C 02                         SME_1h0_3_312:	dc.b 2	
0002382D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023832 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00023837 02                         SME_1h0_3_31D:	dc.b 2	
00023838 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002383D FE0E 0006 ED               		dc.b $FE, $E, 0, 6, $ED	
00023842 02                         SME_1h0_3_328:	dc.b 2	
00023843 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00023848 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002384D 04                         SME_1h0_3_333:	dc.b 4	
0002384E EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023853 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00023858 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002385D FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023862 04                         SME_1h0_3_348:	dc.b 4	
00023863 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00023868 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002386D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00023872 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00023877 06                         SME_1h0_3_35D:	dc.b 6	
00023878 EE01 0000 06               		dc.b $EE, 1, 0, 0, 6	
0002387D FE0E 0002 F6               		dc.b $FE, $E, 0, 2, $F6	
00023882 EE01 000E FE               		dc.b $EE, 1, 0, $E, $FE	
00023887 FE00 0010 EE               		dc.b $FE, 0, 0, $10, $EE	
0002388C EE01 0011 F6               		dc.b $EE, 1, 0, $11, $F6	
00023891 EE01 0013 EE               		dc.b $EE, 1, 0, $13, $EE	
00023896 06                         SME_1h0_3_37C:	dc.b 6	
00023897 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002389C F604 000C F6               		dc.b $F6, 4, 0, $C, $F6	
000238A1 EE04 000E F6               		dc.b $EE, 4, 0, $E, $F6	
000238A6 EE01 0010 EE               		dc.b $EE, 1, 0, $10, $EE	
000238AB EE01 0012 06               		dc.b $EE, 1, 0, $12, 6	
000238B0 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000238B5 02                         SME_1h0_3_39B:	dc.b 2	
000238B6 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238BB F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238C0 02                         SME_1h0_3_3A6:	dc.b 2	
000238C1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238C6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238CB 02                         SME_1h0_3_3B1:	dc.b 2	
000238CC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238D1 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238D6 02                         SME_1h0_3_3BC:	dc.b 2	
000238D7 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000238DC F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000238E1 04                         SME_1h0_3_3C7:	dc.b 4	
000238E2 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
000238E7 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000238EC EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000238F1 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000238F6 03                         SME_1h0_3_3DC:	dc.b 3	
000238F7 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000238FC EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00023901 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00023906 04                         SME_1h0_3_3EC:	dc.b 4	
00023907 F204 0000 EE               		dc.b $F2, 4, 0, 0, $EE	
0002390C EA0B 0002 FE               		dc.b $EA, $B, 0, 2, $FE	
00023911 0A00 000E FE               		dc.b $A, 0, 0, $E, $FE	
00023916 FA06 000F EE               		dc.b $FA, 6, 0, $F, $EE	
0002391B 03                         SME_1h0_3_401:	dc.b 3	
0002391C EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00023921 0A00 000C FE               		dc.b $A, 0, 0, $C, $FE	
00023926 F207 000D EE               		dc.b $F2, 7, 0, $D, $EE	
0002392B 02                         SME_1h0_3_411:	dc.b 2	
0002392C 100C 0000 F4               		dc.b $10, $C, 0, 0, $F4	
00023931 F00B 0004 F4               		dc.b $F0, $B, 0, 4, $F4	
00023936 04                         SME_1h0_3_41C:	dc.b 4	
00023937 0F0C 0000 F3               		dc.b $F, $C, 0, 0, $F3	
0002393C EF07 0004 F3               		dc.b $EF, 7, 0, 4, $F3	
00023941 EF03 000C 03               		dc.b $EF, 3, 0, $C, 3	
00023946 EF02 0010 0B               		dc.b $EF, 2, 0, $10, $B	
0002394B 03                         SME_1h0_3_431:	dc.b 3	
0002394C 0D0C 0000 F3               		dc.b $D, $C, 0, 0, $F3	
00023951 ED0B 0004 F3               		dc.b $ED, $B, 0, 4, $F3	
00023956 ED02 0010 0B               		dc.b $ED, 2, 0, $10, $B	
0002395B 02                         SME_1h0_3_441:	dc.b 2	
0002395C ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00023961 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00023966 04                         SME_1h0_3_44C:	dc.b 4	
00023967 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002396C FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00023971 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00023976 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
0002397B 04                         SME_1h0_3_461:	dc.b 4	
0002397C F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023981 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00023986 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
0002398B 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023990 03                         SME_1h0_3_476:	dc.b 3	
00023991 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00023996 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002399B F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
000239A0 03                         SME_1h0_3_486:	dc.b 3	
000239A1 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
000239A6 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
000239AB 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
000239B0 03                         SME_1h0_3_496:	dc.b 3	
000239B1 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000239B6 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000239BB 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000239C0 02                         SME_1h0_3_4A6:	dc.b 2	
000239C1 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
000239C6 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
000239CB 03                         SME_1h0_3_4B1:	dc.b 3	
000239CC F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
000239D1 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
000239D6 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
000239DB 03                         SME_1h0_3_4C1:	dc.b 3	
000239DC E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
000239E1 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
000239E6 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
000239EB 04                         SME_1h0_3_4D1:	dc.b 4	
000239EC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000239F1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000239F6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000239FB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023A00 04                         SME_1h0_3_4E6:	dc.b 4	
00023A01 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00023A06 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00023A0B F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00023A10 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00023A15 02                         SME_1h0_3_4FB:	dc.b 2	
00023A16 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00023A1B 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023A20 03                         SME_1h0_3_506:	dc.b 3	
00023A21 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023A26 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00023A2B 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023A30 02                         SME_1h0_3_516:	dc.b 2	
00023A31 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00023A36 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00023A3B 03                         SME_1h0_3_521:	dc.b 3	
00023A3C EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00023A41 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00023A46 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00023A4B 05                         SME_1h0_3_531:	dc.b 5	
00023A4C E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023A51 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023A56 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00023A5B 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023A60 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023A65 05                         SME_1h0_3_54B:	dc.b 5	
00023A66 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00023A6B E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00023A70 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00023A75 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00023A7A 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00023A7F 03                         SME_1h0_3_565:	dc.b 3	
00023A80 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
00023A85 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
00023A8A 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
00023A8F 03                         SME_1h0_3_575:	dc.b 3	
00023A90 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00023A95 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00023A9A 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00023A9F 03                         SME_1h0_3_585:	dc.b 3	
00023AA0 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00023AA5 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00023AAA 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
00023AAF 02                         SME_1h0_3_595:	dc.b 2	
00023AB0 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023AB5 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00023ABA 03                         SME_1h0_3_5A0:	dc.b 3	
00023ABB EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00023AC0 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00023AC5 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00023ACA 04                         SME_1h0_3_5B0:	dc.b 4	
00023ACB F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00023AD0 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00023AD5 F800 0012 0C               		dc.b $F8, 0, 0, $12, $C	
00023ADA 0801 0013 0C               		dc.b 8, 1, 0, $13, $C	
00023ADF 08                         SME_1h0_3_5C5:	dc.b 8	
00023AE0 1100 0000 F4               		dc.b $11, 0, 0, 0, $F4	
00023AE5 0908 0001 F4               		dc.b 9, 8, 0, 1, $F4	
00023AEA F901 0004 0C               		dc.b $F9, 1, 0, 4, $C	
00023AEF F101 0006 EC               		dc.b $F1, 1, 0, 6, $EC	
00023AF4 F102 0008 F4               		dc.b $F1, 2, 0, 8, $F4	
00023AF9 E903 000B FC               		dc.b $E9, 3, 0, $B, $FC	
00023AFE F102 000F 04               		dc.b $F1, 2, 0, $F, 4	
00023B03 E900 0012 04               		dc.b $E9, 0, 0, $12, 4	
00023B08 01                         SME_1h0_3_5EE:	dc.b 1	
00023B09 EA0B 0000 F3               		dc.b $EA, $B, 0, 0, $F3	
00023B0E 04                         SME_1h0_3_5F4:	dc.b 4	
00023B0F F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023B14 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00023B19 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00023B1E 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023B23 04                         SME_1h0_3_609:	dc.b 4	
00023B24 F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023B29 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00023B2E 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00023B33 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023B38 04                         SME_1h0_3_61E:	dc.b 4	
00023B39 F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023B3E FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00023B43 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00023B48 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023B4D 04                         SME_1h0_3_633:	dc.b 4	
00023B4E F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00023B53 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00023B58 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00023B5D 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00023B62 03                         SME_1h0_3_648:	dc.b 3	
00023B63 F40B 0000 EC               		dc.b $F4, $B, 0, 0, $EC	
00023B68 FC00 000C 04               		dc.b $FC, 0, 0, $C, 4	
00023B6D 0400 000D 04               		dc.b 4, 0, 0, $D, 4	
00023B72 03                         SME_1h0_3_658:	dc.b 3	
00023B73 F40B 0000 EC               		dc.b $F4, $B, 0, 0, $EC	
00023B78 FC00 000C 04               		dc.b $FC, 0, 0, $C, 4	
00023B7D 0400 000D 04               		dc.b 4, 0, 0, $D, 4	
00023B82 03                         SME_1h0_3_668:	dc.b 3	
00023B83 F40B 0000 EC               		dc.b $F4, $B, 0, 0, $EC	
00023B88 FC00 000C 04               		dc.b $FC, 0, 0, $C, 4	
00023B8D 0400 000D 04               		dc.b 4, 0, 0, $D, 4	
00023B92 03                         SME_1h0_3_678:	dc.b 3	
00023B93 F40B 0000 EC               		dc.b $F4, $B, 0, 0, $EC	
00023B98 FC00 000C 04               		dc.b $FC, 0, 0, $C, 4	
00023B9D 0400 000D 04               		dc.b 4, 0, 0, $D, 4	
00023BA2 04                         SME_1h0_3_688:	dc.b 4	
00023BA3 FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
00023BA8 F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
00023BAD FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023BB2 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
00023BB7 04                         SME_1h0_3_69D:	dc.b 4	
00023BB8 FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
00023BBD F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
00023BC2 FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023BC7 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
00023BCC 04                         SME_1h0_3_6B2:	dc.b 4	
00023BCD FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
00023BD2 F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
00023BD7 FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023BDC 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
00023BE1 04                         SME_1h0_3_6C7:	dc.b 4	
00023BE2 FC01 1800 EC               		dc.b $FC, 1, $18, 0, $EC	
00023BE7 F407 1802 F4               		dc.b $F4, 7, $18, 2, $F4	
00023BEC FC02 180A 04               		dc.b $FC, 2, $18, $A, 4	
00023BF1 1400 180D FC               		dc.b $14, 0, $18, $D, $FC	
00023BF6 03                         SME_1h0_3_6DC:	dc.b 3	
00023BF7 FC0E 0000 F4               		dc.b $FC, $E, 0, 0, $F4	
00023BFC F400 000C FC               		dc.b $F4, 0, 0, $C, $FC	
00023C01 F400 000D 04               		dc.b $F4, 0, 0, $D, 4	
00023C06 03                         SME_1h0_3_6EC:	dc.b 3	
00023C07 FC0E 0000 F4               		dc.b $FC, $E, 0, 0, $F4	
00023C0C F400 000C FC               		dc.b $F4, 0, 0, $C, $FC	
00023C11 F400 000D 04               		dc.b $F4, 0, 0, $D, 4	
00023C16 03                         SME_1h0_3_6FC:	dc.b 3	
00023C17 FC0E 0000 F4               		dc.b $FC, $E, 0, 0, $F4	
00023C1C F400 000C FC               		dc.b $F4, 0, 0, $C, $FC	
00023C21 F400 000D 04               		dc.b $F4, 0, 0, $D, 4	
00023C26 03                         SME_1h0_3_70C:	dc.b 3	
00023C27 FC0E 0000 F4               		dc.b $FC, $E, 0, 0, $F4	
00023C2C F400 000C FC               		dc.b $F4, 0, 0, $C, $FC	
00023C31 F400 000D 04               		dc.b $F4, 0, 0, $D, 4	
00023C36                            		even
00023C36                            		even
00023C36                            
00023C36                            ; ---------------------------------------------------------------------------
00023C36                            ; Uncompressed graphics	loading	array for Sonic
00023C36                            ; ---------------------------------------------------------------------------
00023C36                            SonicDynPLC:
00023C36                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023C36                            ; --------------------------------------------------------------------------------
00023C36                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023C36                            
00023C36                            SME_jAiWr:	
00023C36 0000 0000                  		dc.w SME_jAiWr_B4-SME_jAiWr, SME_jAiWr_B5-SME_jAiWr	
00023C3A 0000 0000                  		dc.w SME_jAiWr_BE-SME_jAiWr, SME_jAiWr_CD-SME_jAiWr	
00023C3E 0000 0000                  		dc.w SME_jAiWr_D4-SME_jAiWr, SME_jAiWr_DB-SME_jAiWr	
00023C42 0000 0000                  		dc.w SME_jAiWr_E2-SME_jAiWr, SME_jAiWr_EB-SME_jAiWr	
00023C46 0000 0000                  		dc.w SME_jAiWr_F0-SME_jAiWr, SME_jAiWr_F5-SME_jAiWr	
00023C4A 0000 0000                  		dc.w SME_jAiWr_FE-SME_jAiWr, SME_jAiWr_103-SME_jAiWr	
00023C4E 0000 0000                  		dc.w SME_jAiWr_10A-SME_jAiWr, SME_jAiWr_115-SME_jAiWr	
00023C52 0000 0000                  		dc.w SME_jAiWr_122-SME_jAiWr, SME_jAiWr_12B-SME_jAiWr	
00023C56 0000 0000                  		dc.w SME_jAiWr_136-SME_jAiWr, SME_jAiWr_13F-SME_jAiWr	
00023C5A 0000 0000                  		dc.w SME_jAiWr_14A-SME_jAiWr, SME_jAiWr_153-SME_jAiWr	
00023C5E 0000 0000                  		dc.w SME_jAiWr_158-SME_jAiWr, SME_jAiWr_15D-SME_jAiWr	
00023C62 0000 0000                  		dc.w SME_jAiWr_166-SME_jAiWr, SME_jAiWr_16B-SME_jAiWr	
00023C66 0000 0000                  		dc.w SME_jAiWr_172-SME_jAiWr, SME_jAiWr_17F-SME_jAiWr	
00023C6A 0000 0000                  		dc.w SME_jAiWr_18C-SME_jAiWr, SME_jAiWr_195-SME_jAiWr	
00023C6E 0000 0000                  		dc.w SME_jAiWr_1A0-SME_jAiWr, SME_jAiWr_1A9-SME_jAiWr	
00023C72 0000 0000                  		dc.w SME_jAiWr_1B4-SME_jAiWr, SME_jAiWr_1B9-SME_jAiWr	
00023C76 0000 0000                  		dc.w SME_jAiWr_1BE-SME_jAiWr, SME_jAiWr_1C3-SME_jAiWr	
00023C7A 0000 0000                  		dc.w SME_jAiWr_1C8-SME_jAiWr, SME_jAiWr_1D1-SME_jAiWr	
00023C7E 0000 0000                  		dc.w SME_jAiWr_1DA-SME_jAiWr, SME_jAiWr_1E7-SME_jAiWr	
00023C82 0000 0000                  		dc.w SME_jAiWr_1F4-SME_jAiWr, SME_jAiWr_1F9-SME_jAiWr	
00023C86 0000 0000                  		dc.w SME_jAiWr_1FE-SME_jAiWr, SME_jAiWr_203-SME_jAiWr	
00023C8A 0000 0000                  		dc.w SME_jAiWr_208-SME_jAiWr, SME_jAiWr_211-SME_jAiWr	
00023C8E 0000 0000                  		dc.w SME_jAiWr_218-SME_jAiWr, SME_jAiWr_221-SME_jAiWr	
00023C92 0000 0000                  		dc.w SME_jAiWr_228-SME_jAiWr, SME_jAiWr_22D-SME_jAiWr	
00023C96 0000 0000                  		dc.w SME_jAiWr_236-SME_jAiWr, SME_jAiWr_23D-SME_jAiWr	
00023C9A 0000 0000                  		dc.w SME_jAiWr_242-SME_jAiWr, SME_jAiWr_24B-SME_jAiWr	
00023C9E 0000 0000                  		dc.w SME_jAiWr_254-SME_jAiWr, SME_jAiWr_25B-SME_jAiWr	
00023CA2 0000 0000                  		dc.w SME_jAiWr_262-SME_jAiWr, SME_jAiWr_269-SME_jAiWr	
00023CA6 0000 0000                  		dc.w SME_jAiWr_26C-SME_jAiWr, SME_jAiWr_273-SME_jAiWr	
00023CAA 0000 0000                  		dc.w SME_jAiWr_27A-SME_jAiWr, SME_jAiWr_283-SME_jAiWr	
00023CAE 0000 0000                  		dc.w SME_jAiWr_28C-SME_jAiWr, SME_jAiWr_291-SME_jAiWr	
00023CB2 0000 0000                  		dc.w SME_jAiWr_298-SME_jAiWr, SME_jAiWr_29D-SME_jAiWr	
00023CB6 0000 0000                  		dc.w SME_jAiWr_2A4-SME_jAiWr, SME_jAiWr_2AF-SME_jAiWr	
00023CBA 0000 0000                  		dc.w SME_jAiWr_2BA-SME_jAiWr, SME_jAiWr_2C1-SME_jAiWr	
00023CBE 0000 0000                  		dc.w SME_jAiWr_2C8-SME_jAiWr, SME_jAiWr_2CF-SME_jAiWr	
00023CC2 0000 0000                  		dc.w SME_jAiWr_2D4-SME_jAiWr, SME_jAiWr_2DB-SME_jAiWr	
00023CC6 0000 0000                  		dc.w SME_jAiWr_2E4-SME_jAiWr, SME_jAiWr_2F5-SME_jAiWr	
00023CCA 0000 0000                  		dc.w SME_jAiWr_2F8-SME_jAiWr, SME_jAiWr_301-SME_jAiWr	
00023CCE 0000 0000                  		dc.w SME_jAiWr_30A-SME_jAiWr, SME_jAiWr_313-SME_jAiWr	
00023CD2 0000 0000                  		dc.w SME_jAiWr_31C-SME_jAiWr, SME_jAiWr_323-SME_jAiWr	
00023CD6 0000 0000                  		dc.w SME_jAiWr_32A-SME_jAiWr, SME_jAiWr_331-SME_jAiWr	
00023CDA 0000 0000                  		dc.w SME_jAiWr_338-SME_jAiWr, SME_jAiWr_341-SME_jAiWr	
00023CDE 0000 0000                  		dc.w SME_jAiWr_34A-SME_jAiWr, SME_jAiWr_353-SME_jAiWr	
00023CE2 0000 0000                  		dc.w SME_jAiWr_35C-SME_jAiWr, SME_jAiWr_363-SME_jAiWr	
00023CE6 0000 0000                  		dc.w SME_jAiWr_36A-SME_jAiWr, SME_jAiWr_371-SME_jAiWr	
00023CEA 00                         SME_jAiWr_B4:	dc.b 0	
00023CEB 0420 0020 0920 0C50 03     SME_jAiWr_B5:	dc.b 4, $20, 0, $20, 9, $20, $C, $50, 3	
00023CF4 0720 1B50 0F00 1A03 9110+  SME_jAiWr_BE:	dc.b 7, $20, $1B, $50, $F, 0, $1A, 3, $91, $10, $15, 0, $18, 4, $81	
00023D03 0350 1E50 1520 1B          SME_jAiWr_CD:	dc.b 3, $50, $1E, $50, $15, $20, $1B	
00023D0A 0350 1E50 1520 24          SME_jAiWr_D4:	dc.b 3, $50, $1E, $50, $15, $20, $24	
00023D11 0380 2720 0920 0C          SME_jAiWr_DB:	dc.b 3, $80, $27, $20, 9, $20, $C	
00023D18 0470 3050 3850 3E10 44     SME_jAiWr_E2:	dc.b 4, $70, $30, $50, $38, $50, $3E, $10, $44	
00023D21 0270 30B0 46               SME_jAiWr_EB:	dc.b 2, $70, $30, $B0, $46	
00023D26 0250 5280 58               SME_jAiWr_F0:	dc.b 2, $50, $52, $80, $58	
00023D2B 0450 5250 6150 6710 6D     SME_jAiWr_F5:	dc.b 4, $50, $52, $50, $61, $50, $67, $10, $6D	
00023D34 0250 52B0 6F               SME_jAiWr_FE:	dc.b 2, $50, $52, $B0, $6F	
00023D39 0370 3030 7B50 7F          SME_jAiWr_103:	dc.b 3, $70, $30, $30, $7B, $50, $7F	
00023D40 0550 8B20 9150 9400 9A53+  SME_jAiWr_10A:	dc.b 5, $50, $8B, $20, $91, $50, $94, 0, $9A, $53, $1A	
00023D4B 0650 8510 9B30 9D50 A130+  SME_jAiWr_115:	dc.b 6, $50, $85, $10, $9B, $30, $9D, $50, $A1, $30, $A7, 0, $AB	
00023D58 0450 AC10 B270 B420 BC     SME_jAiWr_122:	dc.b 4, $50, $AC, $10, $B2, $70, $B4, $20, $BC	
00023D61 0530 C570 C920 D110 D453+  SME_jAiWr_12B:	dc.b 5, $30, $C5, $70, $C9, $20, $D1, $10, $D4, $53, $20	
00023D6C 0450 BF10 D670 D820 E0     SME_jAiWr_136:	dc.b 4, $50, $BF, $10, $D6, $70, $D8, $20, $E0	
00023D75 0550 8510 9B00 9170 E320+  SME_jAiWr_13F:	dc.b 5, $50, $85, $10, $9B, 0, $91, $70, $E3, $20, $EB	
00023D80 0470 EE50 F610 FC50 FE     SME_jAiWr_14A:	dc.b 4, $70, $EE, $50, $F6, $10, $FC, $50, $FE	
00023D89 0270 EEB1 04               SME_jAiWr_153:	dc.b 2, $70, $EE, $B1, 4	
00023D8E 0251 1081 16               SME_jAiWr_158:	dc.b 2, $51, $10, $81, $16	
00023D93 0451 1051 1F11 2551 27     SME_jAiWr_15D:	dc.b 4, $51, $10, $51, $1F, $11, $25, $51, $27	
00023D9C 0251 10B1 2D               SME_jAiWr_166:	dc.b 2, $51, $10, $B1, $2D	
00023DA1 0370 EE01 0481 39          SME_jAiWr_16B:	dc.b 3, $70, $EE, 1, 4, $81, $39	
00023DA8 0611 4811 4A81 4C01 5501+  SME_jAiWr_172:	dc.b 6, $11, $48, $11, $4A, $81, $4C, 1, $55, 1, $56, $53, $92	
00023DB5 0651 4221 5711 5A11 5C81+  SME_jAiWr_17F:	dc.b 6, $51, $42, $21, $57, $11, $5A, $11, $5C, $81, $5E, 1, $55	
00023DC2 0451 6711 6D81 6F11 78     SME_jAiWr_18C:	dc.b 4, $51, $67, $11, $6D, $81, $6F, $11, $78	
00023DCB 0521 8011 8371 8521 8D53+  SME_jAiWr_195:	dc.b 5, $21, $80, $11, $83, $71, $85, $21, $8D, $53, $9D	
00023DD6 0451 7A11 9081 9211 9B     SME_jAiWr_1A0:	dc.b 4, $51, $7A, $11, $90, $81, $92, $11, $9B	
00023DDF 0551 4281 9D11 5C11 A603+  SME_jAiWr_1A9:	dc.b 5, $51, $42, $81, $9D, $11, $5C, $11, $A6, 3, $A5	
00023DEA 0251 A8B1 AE               SME_jAiWr_1B4:	dc.b 2, $51, $A8, $B1, $AE	
00023DEF 0250 52B1 BA               SME_jAiWr_1B9:	dc.b 2, $50, $52, $B1, $BA	
00023DF4 0251 A8B1 C6               SME_jAiWr_1BE:	dc.b 2, $51, $A8, $B1, $C6	
00023DF9 0250 52B1 D2               SME_jAiWr_1C3:	dc.b 2, $50, $52, $B1, $D2	
00023DFE 0451 DE11 E4B1 E601 F2     SME_jAiWr_1C8:	dc.b 4, $51, $DE, $11, $E4, $B1, $E6, 1, $F2	
00023E07 0451 F311 F9B1 FB03 26     SME_jAiWr_1D1:	dc.b 4, $51, $F3, $11, $F9, $B1, $FB, 3, $26	
00023E10 0612 07B2 0913 9803 9A13+  SME_jAiWr_1DA:	dc.b 6, $12, 7, $B2, 9, $13, $98, 3, $9A, $13, $9B, $13, $CD	
00023E1D 06B2 1513 2713 A313 C913+  SME_jAiWr_1E7:	dc.b 6, $B2, $15, $13, $27, $13, $A3, $13, $C9, $13, $CB, 3, $CF	
00023E2A 0252 21B2 27               SME_jAiWr_1F4:	dc.b 2, $52, $21, $B2, $27	
00023E2F 0251 10B2 33               SME_jAiWr_1F9:	dc.b 2, $51, $10, $B2, $33	
00023E34 0252 21B2 3F               SME_jAiWr_1FE:	dc.b 2, $52, $21, $B2, $3F	
00023E39 0251 10B2 4B               SME_jAiWr_203:	dc.b 2, $51, $10, $B2, $4B	
00023E3E 0452 5712 5DB2 5F02 6B     SME_jAiWr_208:	dc.b 4, $52, $57, $12, $5D, $B2, $5F, 2, $6B	
00023E47 0372 6CB2 7403 DF          SME_jAiWr_211:	dc.b 3, $72, $6C, $B2, $74, 3, $DF	
00023E4E 0412 80B2 8202 6B53 D9     SME_jAiWr_218:	dc.b 4, $12, $80, $B2, $82, 2, $6B, $53, $D9	
00023E57 03B2 8E03 D073 D1          SME_jAiWr_221:	dc.b 3, $B2, $8E, 3, $D0, $73, $D1	
00023E5E 0234 57B4 4B               SME_jAiWr_228:	dc.b 2, $34, $57, $B4, $4B	
00023E63 0434 6A74 5B34 6324 67     SME_jAiWr_22D:	dc.b 4, $34, $6A, $74, $5B, $34, $63, $24, $67	
00023E6C 0334 7DB4 6E24 7A          SME_jAiWr_236:	dc.b 3, $34, $7D, $B4, $6E, $24, $7A	
00023E73 0252 9AB2 A0               SME_jAiWr_23D:	dc.b 2, $52, $9A, $B2, $A0	
00023E78 0452 AC72 B212 BA02 BC     SME_jAiWr_242:	dc.b 4, $52, $AC, $72, $B2, $12, $BA, 2, $BC	
00023E81 0412 BD72 BF22 C702 CA     SME_jAiWr_24B:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023E8A 0322 CB22 CEF2 D1          SME_jAiWr_254:	dc.b 3, $22, $CB, $22, $CE, $F2, $D1	
00023E91 03B2 E172 ED00 6F          SME_jAiWr_25B:	dc.b 3, $B2, $E1, $72, $ED, 0, $6F	
00023E98 0372 F532 FD23 01          SME_jAiWr_262:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023E9F 0183 04                    SME_jAiWr_269:	dc.b 1, $83, 4	
00023EA2 0373 0D03 1533 16          SME_jAiWr_26C:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023EA9 03B3 2913 3503 37          SME_jAiWr_273:	dc.b 3, $B3, $29, $13, $35, 3, $37	
00023EB0 04B3 3833 4403 4803 49     SME_jAiWr_27A:	dc.b 4, $B3, $38, $33, $44, 3, $48, 3, $49	
00023EB9 04B3 4A33 5603 5A03 5B     SME_jAiWr_283:	dc.b 4, $B3, $4A, $33, $56, 3, $5A, 3, $5B	
00023EC2 0283 5C73 65               SME_jAiWr_28C:	dc.b 2, $83, $5C, $73, $65	
00023EC7 0383 6D23 7613 79          SME_jAiWr_291:	dc.b 3, $83, $6D, $23, $76, $13, $79	
00023ECE 0283 7B73 84               SME_jAiWr_298:	dc.b 2, $83, $7B, $73, $84	
00023ED3 0383 6D23 8C13 8F          SME_jAiWr_29D:	dc.b 3, $83, $6D, $23, $8C, $13, $8F	
00023EDA 0573 A613 AE53 B033 B603+  SME_jAiWr_2A4:	dc.b 5, $73, $A6, $13, $AE, $53, $B0, $33, $B6, 3, $BA	
00023EE5 0573 BB13 AE53 C333 B603+  SME_jAiWr_2AF:	dc.b 5, $73, $BB, $13, $AE, $53, $C3, $33, $B6, 3, $BA	
00023EF0 0372 F532 FD23 01          SME_jAiWr_2BA:	dc.b 3, $72, $F5, $32, $FD, $23, 1	
00023EF7 0373 0D03 1533 16          SME_jAiWr_2C1:	dc.b 3, $73, $D, 3, $15, $33, $16	
00023EFE 03B3 E013 EC33 EE          SME_jAiWr_2C8:	dc.b 3, $B3, $E0, $13, $EC, $33, $EE	
00023F05 02F4 0424 14               SME_jAiWr_2CF:	dc.b 2, $F4, 4, $24, $14	
00023F0A 0353 F2B3 F810 6B          SME_jAiWr_2D4:	dc.b 3, $53, $F2, $B3, $F8, $10, $6B	
00023F11 04F4 1714 2704 2914 2A     SME_jAiWr_2DB:	dc.b 4, $F4, $17, $14, $27, 4, $29, $14, $2A	
00023F1A 0804 3E24 3914 3C14 2C24+  SME_jAiWr_2E4:	dc.b 8, 4, $3E, $24, $39, $14, $3C, $14, $2C, $24, $2E, $34, $31, $24, $36, 4, $35	
00023F2B 01B4 3F                    SME_jAiWr_2F5:	dc.b 1, $B4, $3F	
00023F2E 0412 BD72 BF22 C702 CA     SME_jAiWr_2F8:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023F37 0412 BD72 BF22 C702 CA     SME_jAiWr_301:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023F40 0412 BD72 BF22 C702 CA     SME_jAiWr_30A:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023F49 0412 BD72 BF22 C702 CA     SME_jAiWr_313:	dc.b 4, $12, $BD, $72, $BF, $22, $C7, 2, $CA	
00023F52 03B4 A604 B304 B4          SME_jAiWr_31C:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023F59 03B4 A604 B304 B4          SME_jAiWr_323:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023F60 03B4 A604 B304 B4          SME_jAiWr_32A:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023F67 03B4 A604 B304 B4          SME_jAiWr_331:	dc.b 3, $B4, $A6, 4, $B3, 4, $B4	
00023F6E 0414 9074 9224 9A04 9D     SME_jAiWr_338:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023F77 0414 9074 9224 9A04 9D     SME_jAiWr_341:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023F80 0414 9074 9224 9A04 9D     SME_jAiWr_34A:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023F89 0414 9074 9224 9A04 9D     SME_jAiWr_353:	dc.b 4, $14, $90, $74, $92, $24, $9A, 4, $9D	
00023F92 03B4 C204 CE04 CF          SME_jAiWr_35C:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023F99 03B4 C204 CE04 CF          SME_jAiWr_363:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023FA0 03B4 C204 CE04 CF          SME_jAiWr_36A:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023FA7 03B4 C204 CE04 CF          SME_jAiWr_371:	dc.b 3, $B4, $C2, 4, $CE, 4, $CF	
00023FAE                            		even
00023FAE                            		even
00023FAE                            
00023FAE                            ; ---------------------------------------------------------------------------
00023FAE                            ; Uncompressed graphics	- Sonic
00023FAE                            ; ---------------------------------------------------------------------------
00023FAE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002D9AE                            		even
0002D9AE                            ; ---------------------------------------------------------------------------
0002D9AE                            ; Compressed graphics - various
0002D9AE                            ; ---------------------------------------------------------------------------
0002D9AE                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002DAB2                            		even
0002DAB2                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002DAEC                            		even
0002DAEC                            Art_Shield:	incbin	artunc\shield.bin	; shield
0002DE4C                            		even
0002DE4C                            Art_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002E2CC                            		even
0002E2CC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002E3D6                            		even
0002E3D6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002E428                            		even
0002E428                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E670                            		even
0002E670                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E7F6                            		even
0002E7F6                            ; ---------------------------------------------------------------------------
0002E7F6                            ; Sprite mappings - walls of the special stage
0002E7F6                            ; ---------------------------------------------------------------------------
0002E7F6                            Map_SSWalls:
0002E7F6                            	include "_maps\SSwalls.asm"
0002E7F6                            ; ---------------------------------------------------------------------------
0002E7F6                            ; Sprite mappings - walls of the special stage
0002E7F6                            ; ---------------------------------------------------------------------------
0002E7F6 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E7FA 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E7FE 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E802 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E806 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E80A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E80E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E812 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E816 01                         byte_2C584:	dc.b 1
0002E817 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E81C 01                         byte_2C58A:	dc.b 1
0002E81D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E822 01                         byte_2C590:	dc.b 1
0002E823 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E828 01                         byte_2C596:	dc.b 1
0002E829 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E82E 01                         byte_2C59C:	dc.b 1
0002E82F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E834 01                         byte_2C5A2:	dc.b 1
0002E835 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E83A 01                         byte_2C5A8:	dc.b 1
0002E83B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E840 01                         byte_2C5AE:	dc.b 1
0002E841 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E846 01                         byte_2C5B4:	dc.b 1
0002E847 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E84C 01                         byte_2C5BA:	dc.b 1
0002E84D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E852 01                         byte_2C5C0:	dc.b 1
0002E853 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E858 01                         byte_2C5C6:	dc.b 1
0002E859 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E85E 01                         byte_2C5CC:	dc.b 1
0002E85F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E864 01                         byte_2C5D2:	dc.b 1
0002E865 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E86A 01                         byte_2C5D8:	dc.b 1
0002E86B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E870 01                         byte_2C5DE:	dc.b 1
0002E871 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E876                            		even
0002E876                            		even
0002E876                            ; ---------------------------------------------------------------------------
0002E876                            ; Compressed graphics - special stage
0002E876                            ; ---------------------------------------------------------------------------
0002E876                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002F1AE                            		even
0002F1AE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002F2E2                            		even
0002F2E2                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002FF72                            		even
0002FF72                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00030272                            		even
00030272                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00030766                            		even
00030766                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00030854                            		even
00030854                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00030924                            		even
00030924                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00030A1A                            		even
00030A1A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00030A78                            		even
00030A78                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00030B0A                            		even
00030B0A                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00030BCC                            		even
00030BCC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00030C9A                            		even
00030C9A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030D66                            		even
00030D66                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00030E2E                            		even
00030E2E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030EF8                            		even
00030EF8                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030FC8                            		even
00030FC8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000311BC                            		even
000311BC                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00031324                            		even
00031324                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000313D4                            		even
000313D4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000314AE                            		even
000314AE                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00031532                            		even
00031532                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000316B0                            		even
000316B0                            ; ---------------------------------------------------------------------------
000316B0                            ; Compressed graphics - GHZ stuff
000316B0                            ; ---------------------------------------------------------------------------
000316B0                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000316FA                            		even
000316FA                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00031814                            		even
00031814                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00031900                            		even
00031900                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00031948                            		even
00031948                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00031AE6                            		even
00031AE6                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00031B62                            		even
00031B62                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031D76                            		even
00031D76                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00031EA2                            		even
00031EA2                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031FD0                            		even
00031FD0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003206E                            		even
0003206E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000320CE                            		even
000320CE                            ; ---------------------------------------------------------------------------
000320CE                            ; Compressed graphics - LZ stuff
000320CE                            ; ---------------------------------------------------------------------------
000320CE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000321F2                            		even
000321F2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000329E6                            		even
000329E6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00032B66                            		even
00032B66                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00032CD0                            		even
00032CD0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00033326                            		even
00033326                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000333DC                            		even
000333DC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003347E                            		even
0003347E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000335DA                            		even
000335DA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003363E                            		even
0003363E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00033790                            		even
00033790                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00033C72                            		even
00033C72                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00033DE2                            		even
00033DE2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003409A                            		even
0003409A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000341D2                            		even
000341D2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000342FC                            		even
000342FC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003440C                            		even
0003440C                            ; ---------------------------------------------------------------------------
0003440C                            ; Compressed graphics - MZ stuff
0003440C                            ; ---------------------------------------------------------------------------
0003440C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003469A                            		even
0003469A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034758                            		even
00034758                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00034810                            		even
00034810                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00034864                            		even
00034864                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00034B42                            		even
00034B42                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035458                            		even
00035458                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000355BC                            		even
000355BC                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00035644                            		even
00035644                            ; ---------------------------------------------------------------------------
00035644                            ; Compressed graphics - SLZ stuff
00035644                            ; ---------------------------------------------------------------------------
00035644                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00035880                            		even
00035880                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000359C6                            		even
000359C6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00035C0A                            		even
00035C0A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00035C6C                            		even
00035C6C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00035D4E                            		even
00035D4E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035F30                            		even
00035F30                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003603C                            		even
0003603C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000360E0                            		even
000360E0                            ; ---------------------------------------------------------------------------
000360E0                            ; Compressed graphics - SYZ stuff
000360E0                            ; ---------------------------------------------------------------------------
000360E0                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003624A                            		even
0003624A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000362AC                            		even
000362AC                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003638E                            		even
0003638E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003661C                            		even
0003661C                            ; ---------------------------------------------------------------------------
0003661C                            ; Compressed graphics - SBZ stuff
0003661C                            ; ---------------------------------------------------------------------------
0003661C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00036670                            		even
00036670                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003690C                            		even
0003690C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00036B10                            		even
00036B10                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00036CAE                            		even
00036CAE                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036FDE                            		even
00036FDE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000371BC                            		even
000371BC                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00037214                            		even
00037214                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00037394                            		even
00037394                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00037492                            		even
00037492                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003761E                            		even
0003761E                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003766E                            		even
0003766E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000376C6                            		even
000376C6                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000377C2                            		even
000377C2                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000378D8                            		even
000378D8                            ; ---------------------------------------------------------------------------
000378D8                            ; Compressed graphics - enemies
000378D8                            ; ---------------------------------------------------------------------------
000378D8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037C98                            		even
00037C98                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038186                            		even
00038186                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003852C                            		even
0003852C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00038714                            		even
00038714                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00038DFE                            		even
00038DFE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039066                            		even
00039066                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000392F0                            		even
000392F0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00039814                            		even
00039814                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00039A9E                            		even
00039A9E                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003A0BC                            		even
0003A0BC                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003A4A4                            		even
0003A4A4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A7A0                            		even
0003A7A0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A9E8                            		even
0003A9E8                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003AC80                            		even
0003AC80                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003AE5E                            		even
0003AE5E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003AFEC                            		even
0003AFEC                            ; ---------------------------------------------------------------------------
0003AFEC                            ; Compressed graphics - various
0003AFEC                            ; ---------------------------------------------------------------------------
0003AFEC                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003B508                            		even
0003B508                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003B658                            		even
0003B658                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B6DA                            		even
0003B6DA                            Nem_LivesPic:	incbin	artnem\lifeiconpic.bin	; life counter icon picture
0003B74A                            		even
0003B74A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B856 00                         		even
0003B856                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003BCB0                            		even
0003BCB0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003C316                            		even
0003C316                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003C3C6                            		even
0003C3C6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003C558                            		even
0003C558                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003C65A                            		even
0003C65A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C736                            		even
0003C736                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003CBB2                            		even
0003CBB2                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003CC72                            		even
0003CC72                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003CDE6                            		even
0003CDE6                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003D0E8                            		even
0003D0E8                            ; ---------------------------------------------------------------------------
0003D0E8                            ; Compressed graphics - continue screen
0003D0E8                            ; ---------------------------------------------------------------------------
0003D0E8                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003D398                            		even
0003D398                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003D5D2                            		even
0003D5D2                            ; ---------------------------------------------------------------------------
0003D5D2                            ; Compressed graphics - animals
0003D5D2                            ; ---------------------------------------------------------------------------
0003D5D2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D72A                            		even
0003D72A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D886                            		even
0003D886                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003DA02                            		even
0003DA02                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003DB1E                            		even
0003DB1E                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003DC54                            		even
0003DC54                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003DD8E                            		even
0003DD8E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003DEEA                            		even
0003DEEA                            ; ---------------------------------------------------------------------------
0003DEEA                            ; Compressed graphics - primary patterns and block mappings
0003DEEA                            ; ---------------------------------------------------------------------------
0003DEEA                            
0003DEEA                            Nem_TIT_1st:	incbin	artnem\8x8tit1.bin	; Title primary patterns
0003F54A                            		even
0003F54A                            Nem_TIT_2nd:	incbin	artnem\8x8tit2.bin	; Title secondary patterns
000408F2                            		even
000408F2                            Blk16_TS:	incbin	map16\ts.bin
00041210                            		even
00041210                            Blk256_TS:	incbin	map256\ts.bin
00043308                            		even
00043308                            Blk16_GHZ:	incbin	map16\ghz.bin
00043C40                            		even
00043C40                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
000465BE                            		even
000465BE                            Blk256_GHZ:	incbin	map256\ghz.bin
00048622                            		even
00048622                            Blk16_LZ:	incbin	map16\lz.bin
00048922 00                         		even
00048922                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004A3A8                            		even
0004A3A8                            Blk256_LZ:	incbin	map256\lz.bin
0004C830                            		even
0004C830                            Blk16_MZ:	incbin	map16\mz.bin
0004CFA6 00                         		even
0004CFA6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004F6FA                            		even
0004F6FA                            Blk256_MZ:	incbin	map256\mz.bin
00050E32                            		even
00050E32                            Blk16_SLZ:	incbin	map16\slz.bin
000515C4 00                         		even
000515C4                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00054FB4 00                         		even
00054FB4                            Blk256_SLZ:	incbin	map256\slz.bin
00056F30                            		even
00056F30                            Blk16_SYZ:	incbin	map16\syz.bin
000577DE 00                         		even
000577DE                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005ADC4                            		even
0005ADC4                            Blk256_SYZ:	incbin	map256\syz.bin
0005D0AE                            		even
0005D0AE                            Blk16_SBZ:	incbin	map16\sbz.bin
0005DE5C                            		even
0005DE5C                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006052A                            		even
0006052A                            Blk256_SBZ:	incbin	map256\sbz.bin
000630AE 00                         		even
000630AE                            ; ---------------------------------------------------------------------------
000630AE                            ; Compressed graphics - bosses and ending sequence
000630AE                            ; ---------------------------------------------------------------------------
000630AE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00063912                            		even
00063912                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00063BFC                            		even
00063BFC                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00064480                            		even
00064480                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00064CAC                            		even
00064CAC                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00065414                            		even
00065414                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00065994                            		even
00065994                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00065AB4                            		even
00065AB4                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00065CB2                            		even
00065CB2                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00066E90                            		even
00066E90                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000677D4                            		even
000677D4                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00067BAA                            		even
00067BAA                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006813A                            		even
0006813A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000683C2                            		even
000683C2                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000689C0                            		even
000689C0                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00068C48                            		even
00068C48                            ; ---------------------------------------------------------------------------
00068C48                            ; Collision data
00068C48                            ; ---------------------------------------------------------------------------
00068C48                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00068D48                            		even
00068D48                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00069D48                            		even
00069D48                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006AD48                            		even
0006AD48                            Col_GHZ_1:	incbin	collide\ghz1.bin	; GHZ index 1
0006AF02 00                         		even
0006AF02                            Col_GHZ_2:	incbin	collide\ghz2.bin	; GHZ index 2
0006B0BA                            		even
0006B0BA                            Col_LZ_1:	incbin	collide\lz1.bin		; LZ index 1
0006B17E                            		even
0006B17E                            Col_LZ_2:	incbin	collide\lz2.bin		; LZ index 2
0006B242                            		even
0006B242                            Col_MZ_1:	incbin	collide\mz1.bin		; MZ index 1
0006B3D2                            		even
0006B3D2                            Col_MZ_2:	incbin	collide\mz2.bin		; MZ index 2
0006B562                            		even
0006B562                            Col_SLZ_1:	incbin	collide\slz1.bin	; SLZ index 1
0006B700                            		even
0006B700                            Col_SLZ_2:	incbin	collide\slz2.bin	; SLZ index 2
0006B89E                            		even
0006B89E                            Col_SYZ_1:	incbin	collide\syz1.bin	; SYZ index 1
0006BA92                            		even
0006BA92                            Col_SYZ_2:	incbin	collide\syz2.bin	; SYZ index 2
0006BC86                            		even
0006BC86                            Col_SBZ_1:	incbin	collide\sbz1.bin	; SBZ index 1
0006BEDE                            		even
0006BEDE                            Col_SBZ_2:	incbin	collide\sbz2.bin	; SBZ index 2
0006C136                            		even
0006C136                            ; ---------------------------------------------------------------------------
0006C136                            ; Special layouts
0006C136                            ; ---------------------------------------------------------------------------
0006C136                            SS_1:		incbin	sslayout\1.bin
0006C3B0                            		even
0006C3B0                            SS_2:		incbin	sslayout\2.bin
0006C7C2                            		even
0006C7C2                            SS_3:		incbin	sslayout\3.bin
0006CB1E                            		even
0006CB1E                            SS_4:		incbin	sslayout\4.bin
0006CFF8                            		even
0006CFF8                            SS_5:		incbin	sslayout\5.bin
0006D4CA                            		even
0006D4CA                            SS_6:		incbin	sslayout\6.bin
0006D7DA                            		even
0006D7DA                            ; ---------------------------------------------------------------------------
0006D7DA                            ; Animated uncompressed graphics
0006D7DA                            ; ---------------------------------------------------------------------------
0006D7DA                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006D9DA                            		even
0006D9DA                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006DDDA                            		even
0006DDDA                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006E25A                            		even
0006E25A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006E55A                            		even
0006E55A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006EB5A                            		even
0006EB5A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006EE5A                            		even
0006EE5A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006F8DA                            		even
0006F8DA                            
0006F8DA                            ; ---------------------------------------------------------------------------
0006F8DA                            ; Level	layout index
0006F8DA                            ; ---------------------------------------------------------------------------
0006F8DA 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
0006F8E6 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
0006F8F2 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
0006F8FE 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
0006F90A 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
0006F916 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
0006F922 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
0006F92E 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
0006F93A 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
0006F946 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
0006F952 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
0006F95E 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
0006F96A 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
0006F976 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
0006F982 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
0006F98E 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
0006F99A 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
0006F9A6 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
0006F9B2 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
0006F9BE 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
0006F9CA 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
0006F9D6 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
0006F9E2 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
0006F9EE 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
0006F9FA 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006FA06 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
0006FA12 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006FA1E 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
0006FA2A                            
0006FA2A                            Level_GHZ1:	incbin	levels\ghz1.bin
00070A2A                            		even
00070A2A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00070A2E                            Level_GHZ2:	incbin	levels\ghz2.bin
00071A2E                            		even
00071A2E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00071A32                            Level_GHZ3:	incbin	levels\ghz3.bin
00072A32                            		even
00072A32                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072A54                            		even
00072A54 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072A58 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072A5C                            
00072A5C                            Level_LZ1:	incbin	levels\lz1.bin
00073A5C                            		even
00073A5C                            Level_LZbg:	incbin	levels\lzbg.bin
00073B5E                            		even
00073B5E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00073B62                            Level_LZ2:	incbin	levels\lz2.bin
00074B62                            		even
00074B62 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00074B66                            Level_LZ3:	incbin	levels\lz3.bin
00075B66                            		even
00075B66                            Level_LZ3_WALL:	incbin	levels\lz3_wall.bin	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
00076B66                            		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
00076B66 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076B6A                            Level_SBZ3:	incbin	levels\sbz3.bin
00077B6A                            		even
00077B6A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00077B6E                            
00077B6E                            Level_MZ1:	incbin	levels\mz1.bin
00078B6E                            		even
00078B6E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00078BE8                            		even
00078BE8                            Level_MZ2:	incbin	levels\mz2.bin
00079BE8                            		even
00079BE8                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00079C7A                            		even
00079C7A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00079C7E                            Level_MZ3:	incbin	levels\mz3.bin
0007AC7E                            		even
0007AC7E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007AD22                            		even
0007AD22 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007AD26 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007AD2A                            
0007AD2A                            Level_SLZ1:	incbin	levels\slz1.bin
0007BD2A                            		even
0007BD2A                            Level_SLZbg:	incbin	levels\slzbg.bin
0007BDA4                            		even
0007BDA4                            Level_SLZ2:	incbin	levels\slz2.bin
0007CDA4                            		even
0007CDA4                            Level_SLZ3:	incbin	levels\slz3.bin
0007DDA4                            		even
0007DDA4 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007DDA8                            
0007DDA8                            Level_SYZ1:	incbin	levels\syz1.bin
0007EDA8                            		even
0007EDA8                            Level_SYZbg:	incbin	levels\syzbg.bin
0007EDE2                            		even
0007EDE2 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007EDE6                            Level_SYZ2:	incbin	levels\syz2.bin
0007FDE6                            		even
0007FDE6 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007FDEA                            Level_SYZ3:	incbin	levels\syz3.bin
00080DEA                            		even
00080DEA 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00080DEE 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00080DF2                            
00080DF2                            Level_SBZ1:	incbin	levels\sbz1.bin
00081DF2                            		even
00081DF2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00081E30                            		even
00081E30                            Level_SBZ2:	incbin	levels\sbz2.bin
00082E30                            		even
00082E30                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00082F9A                            		even
00082F9A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00082F9E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00082FA2                            Level_End:	incbin	levels\ending.bin
00083FA2                            		even
00083FA2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00083FA6                            
00083FA6                            ; ---------------------------------------------------------------------------
00083FA6                            ; Animated uncompressed giant ring graphics
00083FA6                            ; ---------------------------------------------------------------------------
00083FA6                            Art_BigRing:	incbin	artunc\bigring.bin
00084BE6                            		even
00084BE6                            ; ---------------------------------------------------------------------------
00084BE6                            ; Sprite locations index
00084BE6                            ; ---------------------------------------------------------------------------
00084BE6 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BEA 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BEE 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BF2 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BF6 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BFA 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084BFE 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C02 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C06 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C0A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C0E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C12 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C16 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C1A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C1E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C22 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C26 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C2A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C2E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C32 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C36 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C3A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C3E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C42 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C46 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C4A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C4E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C52 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00084C56 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00084C5A 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00084C5E 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00084C62 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00084C66 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00084C6A 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00084C6E 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00084C72 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00084C76 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00084C7C                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00084CE2                            		even
00084CE2                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000852B2                            		even
000852B2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0008597E                            		even
0008597E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00085DEC                            		even
00085DEC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0008612E                            		even
0008612E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00086710                            		even
00086710                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00086BA8                            		even
00086BA8                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00086BDA                            		even
00086BDA                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00086C0C                            		even
00086C0C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00086C3E                            		even
00086C3E                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00086C70                            		even
00086C70                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00086CBA                            		even
00086CBA                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00086CF8                            		even
00086CF8                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00087064                            		even
00087064                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0008750E                            		even
0008750E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00087A84                            		even
00087A84                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00087FDC                            		even
00087FDC                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00088498                            		even
00088498                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00088AC2                            		even
00088AC2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00088F4E                            		even
00088F4E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000894B8                            		even
000894B8                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00089ABE                            		even
00089ABE                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0008A1FC                            		even
0008A1FC                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0008A8DA                            		even
0008A8DA                            ObjPos_FZ:	incbin	objpos\fz.bin
0008A8EC                            		even
0008A8EC                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0008A91E                            		even
0008A91E                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0008A950                            		even
0008A950                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0008A982                            		even
0008A982                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0008A9B4                            		even
0008A9B4                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0008A9E6                            		even
0008A9E6                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0008AA1E                            		even
0008AA1E                            ObjPos_End:	incbin	objpos\ending.bin
0008AB7A                            		even
0008AB7A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008AB80                            ; ---------------------------------------------------------------------------
0008AB80 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0008AB84 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0008AB88 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0008AB8C 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0008AB90 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0008AB94 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0008AB98                            ; ---------------------------------------------------------------------------
0008AB98                            ; PSG instruments used in music
0008AB98                            ; ---------------------------------------------------------------------------
0008AB98 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008ABA4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008ABB0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0008ABBC                            PSG1:		incbin	sound\psg1.bin
0008ABD3                            PSG2:		incbin	sound\psg2.bin
0008ABDA                            PSG3:		incbin	sound\psg3.bin
0008ABEB                            PSG4:		incbin	sound\psg4.bin
0008ABF6                            PSG6:		incbin	sound\psg6.bin
0008AC05                            PSG5:		incbin	sound\psg5.bin
0008AC2F                            PSG7:		incbin	sound\psg7.bin
0008AC4B                            PSG8:		incbin	sound\psg8.bin
0008AC73                            PSG9:		incbin	sound\psg9.bin
0008AC84                            
0008AC84 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0008AC8C                            ; ---------------------------------------------------------------------------
0008AC8C                            ; Music	Pointers
0008AC8C                            ; ---------------------------------------------------------------------------
0008AC8C 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0008AC94 0000 0000 0000 0000        		dc.l Music83, Music84
0008AC9C 0000 0000 0000 0000        		dc.l Music85, Music86
0008ACA4 0000 0000 0000 0000        		dc.l Music87, Music88
0008ACAC 0000 0000 0000 0000        		dc.l Music89, Music8A
0008ACB4 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008ACBC 0000 0000 0000 0000        		dc.l Music8D, Music8E
0008ACC4 0000 0000 0000 0000        		dc.l Music8F, Music90
0008ACCC 0000 0000 0000 0000        		dc.l Music91, Music92
0008ACD4 0000 0000 0000 0000        		dc.l Music93, Music94
0008ACDC 0000 0000 0000 0000        		dc.l Music95, Music96
0008ACE4 0000 0000                  		dc.l Music97
0008ACE8                            ; ---------------------------------------------------------------------------
0008ACE8                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0008ACE8                            ; ---------------------------------------------------------------------------
0008ACE8 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0008ACF8 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0008AD08 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0008AD18 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0008AD28 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0008AD38 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0008AD48 9090 9090 90               		dc.b $90, $90, $90, $90, $90
0008AD4E 00                         		even
0008AD4E                            
0008AD4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AD4E                            
0008AD4E                            
0008AD4E                            sub_71B4C:				; XREF: V_Int; H_Int
0008AD4E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0008AD56 4E71                       		nop	
0008AD58 4E71                       		nop	
0008AD5A 4E71                       		nop	
0008AD5C                            
0008AD5C                            loc_71B5A:
0008AD5C 4DF9 00FF F000             		lea	($FFF000).l,a6
0008AD62 422E 000E                  		clr.b	$E(a6)
0008AD66 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0008AD6A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0008AD6E 532E 0001                  		subq.b	#1,1(a6)
0008AD72 6600                       		bne.s	loc_71B9E
0008AD74 4EBA 0000                  		jsr	sub_7260C(pc)
0008AD78                            
0008AD78                            loc_71B9E:
0008AD78 102E 0004                  		move.b	4(a6),d0
0008AD7C 6700                       		beq.s	loc_71BA8
0008AD7E 4EBA 0000                  		jsr	sub_72504(pc)
0008AD82                            
0008AD82                            loc_71BA8:
0008AD82 4A2E 0024                  		tst.b	$24(a6)
0008AD86 6700                       		beq.s	loc_71BB2
0008AD88 4EBA 0000                  		jsr	sub_7267C(pc)
0008AD8C                            
0008AD8C                            loc_71BB2:
0008AD8C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008AD90 6700                       		beq.s	loc_71BBC	; if not, branch
0008AD92 4EBA 0000                  		jsr	Sound_Play(pc)
0008AD96                            
0008AD96                            loc_71BBC:
0008AD96 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008AD9C 6700                       		beq.s	loc_71BC8
0008AD9E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0008ADA2                            
0008ADA2                            loc_71BC8:
0008ADA2 4BEE 0040                  		lea	$40(a6),a5
0008ADA6 4A15                       		tst.b	(a5)
0008ADA8 6A00                       		bpl.s	loc_71BD4
0008ADAA 4EBA 0000                  		jsr	sub_71C4E(pc)
0008ADAE                            
0008ADAE                            loc_71BD4:
0008ADAE 422E 0008                  		clr.b	8(a6)
0008ADB2 7E05                       		moveq	#5,d7
0008ADB4                            
0008ADB4                            loc_71BDA:
0008ADB4 DAFC 0030                  		adda.w	#$30,a5
0008ADB8 4A15                       		tst.b	(a5)
0008ADBA 6A00                       		bpl.s	loc_71BE6
0008ADBC 4EBA 0000                  		jsr	sub_71CCA(pc)
0008ADC0                            
0008ADC0                            loc_71BE6:
0008ADC0 51CF FFF2                  		dbf	d7,loc_71BDA
0008ADC4                            
0008ADC4 7E02                       		moveq	#2,d7
0008ADC6                            
0008ADC6                            loc_71BEC:
0008ADC6 DAFC 0030                  		adda.w	#$30,a5
0008ADCA 4A15                       		tst.b	(a5)
0008ADCC 6A00                       		bpl.s	loc_71BF8
0008ADCE 4EBA 0000                  		jsr	sub_72850(pc)
0008ADD2                            
0008ADD2                            loc_71BF8:
0008ADD2 51CF FFF2                  		dbf	d7,loc_71BEC
0008ADD6                            
0008ADD6 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008ADDC 7E02                       		moveq	#2,d7
0008ADDE                            
0008ADDE                            loc_71C04:
0008ADDE DAFC 0030                  		adda.w	#$30,a5
0008ADE2 4A15                       		tst.b	(a5)
0008ADE4 6A00                       		bpl.s	loc_71C10
0008ADE6 4EBA 0000                  		jsr	sub_71CCA(pc)
0008ADEA                            
0008ADEA                            loc_71C10:
0008ADEA 51CF FFF2                  		dbf	d7,loc_71C04
0008ADEE                            
0008ADEE 7E02                       		moveq	#2,d7
0008ADF0                            
0008ADF0                            loc_71C16:
0008ADF0 DAFC 0030                  		adda.w	#$30,a5
0008ADF4 4A15                       		tst.b	(a5)
0008ADF6 6A00                       		bpl.s	loc_71C22
0008ADF8 4EBA 0000                  		jsr	sub_72850(pc)
0008ADFC                            
0008ADFC                            loc_71C22:
0008ADFC 51CF FFF2                  		dbf	d7,loc_71C16
0008AE00 1D7C 0040 000E             		move.b	#$40,$E(a6)
0008AE06 DAFC 0030                  		adda.w	#$30,a5
0008AE0A 4A15                       		tst.b	(a5)
0008AE0C 6A00                       		bpl.s	loc_71C38
0008AE0E 4EBA 0000                  		jsr	sub_71CCA(pc)
0008AE12                            
0008AE12                            loc_71C38:
0008AE12 DAFC 0030                  		adda.w	#$30,a5
0008AE16 4A15                       		tst.b	(a5)
0008AE18 6A00                       		bpl.s	loc_71C44
0008AE1A 4EBA 0000                  		jsr	sub_72850(pc)
0008AE1E                            
0008AE1E                            loc_71C44:
0008AE1E 1439 00A0 4000             		move.b	($A04000).l,d2
0008AE24 0802 0007                  		btst	#7,d2
0008AE28 66F4                       		bne.s	loc_71C44
0008AE2A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
0008AE32 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0008AE3A 4E75                       		rts	
0008AE3C                            ; End of function sub_71B4C
0008AE3C                            
0008AE3C                            
0008AE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AE3C                            
0008AE3C                            
0008AE3C                            sub_71C4E:				; XREF: sub_71B4C
0008AE3C 532D 000E                  		subq.b	#1,$E(a5)
0008AE40 6600                       		bne.s	locret_71CAA
0008AE42 1D7C 0080 0008             		move.b	#$80,8(a6)
0008AE48 286D 0004                  		movea.l	4(a5),a4
0008AE4C                            
0008AE4C                            loc_71C5E:
0008AE4C 7A00                       		moveq	#0,d5
0008AE4E 1A1C                       		move.b	(a4)+,d5
0008AE50 0C05 00E0                  		cmpi.b	#-$20,d5
0008AE54 6500                       		bcs.s	loc_71C6E
0008AE56 4EBA 0000                  		jsr	sub_72A5A(pc)
0008AE5A 60F0                       		bra.s	loc_71C5E
0008AE5C                            ; ===========================================================================
0008AE5C                            
0008AE5C                            loc_71C6E:
0008AE5C 4A05                       		tst.b	d5
0008AE5E 6A00                       		bpl.s	loc_71C84
0008AE60 1B45 0010                  		move.b	d5,$10(a5)
0008AE64 1A1C                       		move.b	(a4)+,d5
0008AE66 6A00                       		bpl.s	loc_71C84
0008AE68 534C                       		subq.w	#1,a4
0008AE6A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008AE70 6000                       		bra.s	loc_71C88
0008AE72                            ; ===========================================================================
0008AE72                            
0008AE72                            loc_71C84:
0008AE72 4EBA 0000                  		jsr	sub_71D40(pc)
0008AE76                            
0008AE76                            loc_71C88:
0008AE76 2B4C 0004                  		move.l	a4,4(a5)
0008AE7A 0815 0002                  		btst	#2,(a5)
0008AE7E 6600                       		bne.s	locret_71CAA
0008AE80 7000                       		moveq	#0,d0
0008AE82 102D 0010                  		move.b	$10(a5),d0
0008AE86 0C00 0080                  		cmpi.b	#$80,d0
0008AE8A 6700                       		beq.s	locret_71CAA
0008AE8C 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0008AE92                            
0008AE92                            locret_71CAA:
0008AE92 4E75                       		rts	
0008AE94                            ; ===========================================================================
0008AE94                            
0008AE94                            loc_71CAC:
0008AE94 0400 0088                  		subi.b	#$88,d0
0008AE98 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0008AE9C 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0008AEA2 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008AEAA 4E75                       		rts	
0008AEAC                            ; End of function sub_71C4E
0008AEAC                            
0008AEAC                            ; ===========================================================================
0008AEAC 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0008AEB2                            
0008AEB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AEB2                            
0008AEB2                            
0008AEB2                            sub_71CCA:				; XREF: sub_71B4C
0008AEB2 532D 000E                  		subq.b	#1,$E(a5)
0008AEB6 6600                       		bne.s	loc_71CE0
0008AEB8 0895 0004                  		bclr	#4,(a5)
0008AEBC 4EBA 0000                  		jsr	sub_71CEC(pc)
0008AEC0 4EBA 0000                  		jsr	sub_71E18(pc)
0008AEC4 6000 0000                  		bra.w	loc_726E2
0008AEC8                            ; ===========================================================================
0008AEC8                            
0008AEC8                            loc_71CE0:
0008AEC8 4EBA 0000                  		jsr	sub_71D9E(pc)
0008AECC 4EBA 0000                  		jsr	sub_71DC6(pc)
0008AED0 6000 0000                  		bra.w	loc_71E24
0008AED4                            ; End of function sub_71CCA
0008AED4                            
0008AED4                            
0008AED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AED4                            
0008AED4                            
0008AED4                            sub_71CEC:				; XREF: sub_71CCA
0008AED4 286D 0004                  		movea.l	4(a5),a4
0008AED8 0895 0001                  		bclr	#1,(a5)
0008AEDC                            
0008AEDC                            loc_71CF4:
0008AEDC 7A00                       		moveq	#0,d5
0008AEDE 1A1C                       		move.b	(a4)+,d5
0008AEE0 0C05 00E0                  		cmpi.b	#-$20,d5
0008AEE4 6500                       		bcs.s	loc_71D04
0008AEE6 4EBA 0000                  		jsr	sub_72A5A(pc)
0008AEEA 60F0                       		bra.s	loc_71CF4
0008AEEC                            ; ===========================================================================
0008AEEC                            
0008AEEC                            loc_71D04:
0008AEEC 4EBA 0000                  		jsr	sub_726FE(pc)
0008AEF0 4A05                       		tst.b	d5
0008AEF2 6A00                       		bpl.s	loc_71D1A
0008AEF4 4EBA 0000                  		jsr	sub_71D22(pc)
0008AEF8 1A1C                       		move.b	(a4)+,d5
0008AEFA 6A00                       		bpl.s	loc_71D1A
0008AEFC 534C                       		subq.w	#1,a4
0008AEFE 6000 0000                  		bra.w	sub_71D60
0008AF02                            ; ===========================================================================
0008AF02                            
0008AF02                            loc_71D1A:
0008AF02 4EBA 0000                  		jsr	sub_71D40(pc)
0008AF06 6000 0000                  		bra.w	sub_71D60
0008AF0A                            ; End of function sub_71CEC
0008AF0A                            
0008AF0A                            
0008AF0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF0A                            
0008AF0A                            
0008AF0A                            sub_71D22:				; XREF: sub_71CEC
0008AF0A 0405 0080                  		subi.b	#$80,d5
0008AF0E 6700                       		beq.s	loc_71D58
0008AF10 DA2D 0008                  		add.b	8(a5),d5
0008AF14 0245 007F                  		andi.w	#$7F,d5
0008AF18 E34D                       		lsl.w	#1,d5
0008AF1A 41FA 0000                  		lea	word_72790(pc),a0
0008AF1E 3C30 5000                  		move.w	(a0,d5.w),d6
0008AF22 3B46 0010                  		move.w	d6,$10(a5)
0008AF26 4E75                       		rts	
0008AF28                            ; End of function sub_71D22
0008AF28                            
0008AF28                            
0008AF28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF28                            
0008AF28                            
0008AF28                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008AF28 1005                       		move.b	d5,d0
0008AF2A 122D 0002                  		move.b	2(a5),d1
0008AF2E                            
0008AF2E                            loc_71D46:
0008AF2E 5301                       		subq.b	#1,d1
0008AF30 6700                       		beq.s	loc_71D4E
0008AF32 D005                       		add.b	d5,d0
0008AF34 60F8                       		bra.s	loc_71D46
0008AF36                            ; ===========================================================================
0008AF36                            
0008AF36                            loc_71D4E:
0008AF36 1B40 000F                  		move.b	d0,$F(a5)
0008AF3A 1B40 000E                  		move.b	d0,$E(a5)
0008AF3E 4E75                       		rts	
0008AF40                            ; End of function sub_71D40
0008AF40                            
0008AF40                            ; ===========================================================================
0008AF40                            
0008AF40                            loc_71D58:				; XREF: sub_71D22
0008AF40 08D5 0001                  		bset	#1,(a5)
0008AF44 426D 0010                  		clr.w	$10(a5)
0008AF48                            
0008AF48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF48                            
0008AF48                            
0008AF48                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008AF48 2B4C 0004                  		move.l	a4,4(a5)
0008AF4C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008AF52 0815 0004                  		btst	#4,(a5)
0008AF56 6600                       		bne.s	locret_71D9C
0008AF58 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008AF5E 422D 000C                  		clr.b	$C(a5)
0008AF62 0815 0003                  		btst	#3,(a5)
0008AF66 6700                       		beq.s	locret_71D9C
0008AF68 206D 0014                  		movea.l	$14(a5),a0
0008AF6C 1B58 0018                  		move.b	(a0)+,$18(a5)
0008AF70 1B58 0019                  		move.b	(a0)+,$19(a5)
0008AF74 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008AF78 1018                       		move.b	(a0)+,d0
0008AF7A E208                       		lsr.b	#1,d0
0008AF7C 1B40 001B                  		move.b	d0,$1B(a5)
0008AF80 426D 001C                  		clr.w	$1C(a5)
0008AF84                            
0008AF84                            locret_71D9C:
0008AF84 4E75                       		rts	
0008AF86                            ; End of function sub_71D60
0008AF86                            
0008AF86                            
0008AF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AF86                            
0008AF86                            
0008AF86                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008AF86 4A2D 0012                  		tst.b	$12(a5)
0008AF8A 6700                       		beq.s	locret_71DC4
0008AF8C 532D 0012                  		subq.b	#1,$12(a5)
0008AF90 6600                       		bne.s	locret_71DC4
0008AF92 08D5 0001                  		bset	#1,(a5)
0008AF96 4A2D 0001                  		tst.b	1(a5)
0008AF9A 6B00 0000                  		bmi.w	loc_71DBE
0008AF9E 4EBA 0000                  		jsr	sub_726FE(pc)
0008AFA2 584F                       		addq.w	#4,sp
0008AFA4 4E75                       		rts	
0008AFA6                            ; ===========================================================================
0008AFA6                            
0008AFA6                            loc_71DBE:
0008AFA6 4EBA 0000                  		jsr	sub_729A0(pc)
0008AFAA 584F                       		addq.w	#4,sp
0008AFAC                            
0008AFAC                            locret_71DC4:
0008AFAC 4E75                       		rts	
0008AFAE                            ; End of function sub_71D9E
0008AFAE                            
0008AFAE                            
0008AFAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008AFAE                            
0008AFAE                            
0008AFAE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008AFAE 584F                       		addq.w	#4,sp
0008AFB0 0815 0003                  		btst	#3,(a5)
0008AFB4 6700                       		beq.s	locret_71E16
0008AFB6 4A2D 0018                  		tst.b	$18(a5)
0008AFBA 6700                       		beq.s	loc_71DDA
0008AFBC 532D 0018                  		subq.b	#1,$18(a5)
0008AFC0 4E75                       		rts	
0008AFC2                            ; ===========================================================================
0008AFC2                            
0008AFC2                            loc_71DDA:
0008AFC2 532D 0019                  		subq.b	#1,$19(a5)
0008AFC6 6700                       		beq.s	loc_71DE2
0008AFC8 4E75                       		rts	
0008AFCA                            ; ===========================================================================
0008AFCA                            
0008AFCA                            loc_71DE2:
0008AFCA 206D 0014                  		movea.l	$14(a5),a0
0008AFCE 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008AFD4 4A2D 001B                  		tst.b	$1B(a5)
0008AFD8 6600                       		bne.s	loc_71DFE
0008AFDA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008AFE0 442D 001A                  		neg.b	$1A(a5)
0008AFE4 4E75                       		rts	
0008AFE6                            ; ===========================================================================
0008AFE6                            
0008AFE6                            loc_71DFE:
0008AFE6 532D 001B                  		subq.b	#1,$1B(a5)
0008AFEA 1C2D 001A                  		move.b	$1A(a5),d6
0008AFEE 4886                       		ext.w	d6
0008AFF0 DC6D 001C                  		add.w	$1C(a5),d6
0008AFF4 3B46 001C                  		move.w	d6,$1C(a5)
0008AFF8 DC6D 0010                  		add.w	$10(a5),d6
0008AFFC 594F                       		subq.w	#4,sp
0008AFFE                            
0008AFFE                            locret_71E16:
0008AFFE 4E75                       		rts	
0008B000                            ; End of function sub_71DC6
0008B000                            
0008B000                            
0008B000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B000                            
0008B000                            
0008B000                            sub_71E18:				; XREF: sub_71CCA
0008B000 0815 0001                  		btst	#1,(a5)
0008B004 6600                       		bne.s	locret_71E48
0008B006 3C2D 0010                  		move.w	$10(a5),d6
0008B00A 6700                       		beq.s	loc_71E4A
0008B00C                            
0008B00C                            loc_71E24:				; XREF: sub_71CCA
0008B00C 102D 001E                  		move.b	$1E(a5),d0
0008B010 4880                       		ext.w	d0
0008B012 DC40                       		add.w	d0,d6
0008B014 0815 0002                  		btst	#2,(a5)
0008B018 6600                       		bne.s	locret_71E48
0008B01A 3206                       		move.w	d6,d1
0008B01C E049                       		lsr.w	#8,d1
0008B01E 103C 00A4                  		move.b	#-$5C,d0
0008B022 4EBA 0000                  		jsr	sub_72722(pc)
0008B026 1206                       		move.b	d6,d1
0008B028 103C 00A0                  		move.b	#-$60,d0
0008B02C 4EBA 0000                  		jsr	sub_72722(pc)
0008B030                            
0008B030                            locret_71E48:
0008B030 4E75                       		rts	
0008B032                            ; ===========================================================================
0008B032                            
0008B032                            loc_71E4A:
0008B032 08D5 0001                  		bset	#1,(a5)
0008B036 4E75                       		rts	
0008B038                            ; End of function sub_71E18
0008B038                            
0008B038                            ; ===========================================================================
0008B038                            
0008B038                            loc_71E50:				; XREF: sub_71B4C
0008B038 6B00                       		bmi.s	loc_71E94
0008B03A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0008B040 6700 0000                  		beq.w	loc_71EFE
0008B044 1D7C 0002 0003             		move.b	#2,3(a6)
0008B04A 7602                       		moveq	#2,d3
0008B04C 103C 00B4                  		move.b	#-$4C,d0
0008B050 7200                       		moveq	#0,d1
0008B052                            
0008B052                            loc_71E6A:
0008B052 4EBA 0000                  		jsr	sub_7272E(pc)
0008B056 4EBA 0000                  		jsr	sub_72764(pc)
0008B05A 5200                       		addq.b	#1,d0
0008B05C 51CB FFF4                  		dbf	d3,loc_71E6A
0008B060                            
0008B060 7602                       		moveq	#2,d3
0008B062 7028                       		moveq	#$28,d0
0008B064                            
0008B064                            loc_71E7C:
0008B064 1203                       		move.b	d3,d1
0008B066 4EBA 0000                  		jsr	sub_7272E(pc)
0008B06A 5801                       		addq.b	#4,d1
0008B06C 4EBA 0000                  		jsr	sub_7272E(pc)
0008B070 51CB FFF2                  		dbf	d3,loc_71E7C
0008B074                            
0008B074 4EBA 0000                  		jsr	sub_729B6(pc)
0008B078 13FC 007F 00A0 1FFF        		move.b	#$7F,($A01FFF).l; pause DAC
0008B080 6000 FD9C                  		bra.w	loc_71C44
0008B084                            ; ===========================================================================
0008B084                            
0008B084                            loc_71E94:				; XREF: loc_71E50
0008B084 422E 0003                  		clr.b	3(a6)
0008B088 7630                       		moveq	#$30,d3
0008B08A 4BEE 0040                  		lea	$40(a6),a5
0008B08E 7806                       		moveq	#6,d4
0008B090                            
0008B090                            loc_71EA0:
0008B090 0815 0007                  		btst	#7,(a5)
0008B094 6700                       		beq.s	loc_71EB8
0008B096 0815 0002                  		btst	#2,(a5)
0008B09A 6600                       		bne.s	loc_71EB8
0008B09C 103C 00B4                  		move.b	#-$4C,d0
0008B0A0 122D 000A                  		move.b	$A(a5),d1
0008B0A4 4EBA 0000                  		jsr	sub_72722(pc)
0008B0A8                            
0008B0A8                            loc_71EB8:
0008B0A8 DAC3                       		adda.w	d3,a5
0008B0AA 51CC FFE4                  		dbf	d4,loc_71EA0
0008B0AE                            
0008B0AE 4BEE 0220                  		lea	$220(a6),a5
0008B0B2 7802                       		moveq	#2,d4
0008B0B4                            
0008B0B4                            loc_71EC4:
0008B0B4 0815 0007                  		btst	#7,(a5)
0008B0B8 6700                       		beq.s	loc_71EDC
0008B0BA 0815 0002                  		btst	#2,(a5)
0008B0BE 6600                       		bne.s	loc_71EDC
0008B0C0 103C 00B4                  		move.b	#-$4C,d0
0008B0C4 122D 000A                  		move.b	$A(a5),d1
0008B0C8 4EBA 0000                  		jsr	sub_72722(pc)
0008B0CC                            
0008B0CC                            loc_71EDC:
0008B0CC DAC3                       		adda.w	d3,a5
0008B0CE 51CC FFE4                  		dbf	d4,loc_71EC4
0008B0D2                            
0008B0D2 4BEE 0340                  		lea	$340(a6),a5
0008B0D6 0815 0007                  		btst	#7,(a5)
0008B0DA 6700                       		beq.s	@UnpauseDAC
0008B0DC 0815 0002                  		btst	#2,(a5)
0008B0E0 6600                       		bne.s	@UnpauseDAC
0008B0E2 103C 00B4                  		move.b	#-$4C,d0
0008B0E6 122D 000A                  		move.b	$A(a5),d1
0008B0EA 4EBA 0000                  		jsr	sub_72722(pc)
0008B0EE                            
0008B0EE                            @UnpauseDAC:
0008B0EE 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
0008B0F6                            
0008B0F6                            loc_71EFE:
0008B0F6 6000 FD26                  		bra.w	loc_71C44
0008B0FA                            
0008B0FA                            ; ---------------------------------------------------------------------------
0008B0FA                            ; Subroutine to	play a sound or	music track
0008B0FA                            ; ---------------------------------------------------------------------------
0008B0FA                            
0008B0FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B0FA                            
0008B0FA                            
0008B0FA                            Sound_Play:				; XREF: sub_71B4C
0008B0FA 2079 0008 AB80             		movea.l	(Go_SoundTypes).l,a0
0008B100 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008B104 1616                       		move.b	0(a6),d3
0008B106 7802                       		moveq	#2,d4
0008B108                            
0008B108                            loc_71F12:
0008B108 1011                       		move.b	(a1),d0		; move track number to d0
0008B10A 1200                       		move.b	d0,d1
0008B10C 4219                       		clr.b	(a1)+
0008B10E 0400 0081                  		subi.b	#$81,d0
0008B112 6500                       		bcs.s	loc_71F3E
0008B114 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008B11A 6700                       		beq.s	loc_71F2C
0008B11C 1D41 000A                  		move.b	d1,$A(a6)
0008B120 6000                       		bra.s	loc_71F3E
0008B122                            ; ===========================================================================
0008B122                            
0008B122                            loc_71F2C:
0008B122 0240 007F                  		andi.w	#$7F,d0
0008B126 1430 0000                  		move.b	(a0,d0.w),d2
0008B12A B403                       		cmp.b	d3,d2
0008B12C 6500                       		bcs.s	loc_71F3E
0008B12E 1602                       		move.b	d2,d3
0008B130 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008B134                            
0008B134                            loc_71F3E:
0008B134 51CC FFD2                  		dbf	d4,loc_71F12
0008B138                            
0008B138 4A03                       		tst.b	d3
0008B13A 6B00                       		bmi.s	locret_71F4A
0008B13C 1C83                       		move.b	d3,0(a6)
0008B13E                            
0008B13E                            locret_71F4A:
0008B13E 4E75                       		rts	
0008B140                            ; End of function Sound_Play
0008B140                            
0008B140                            
0008B140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B140                            
0008B140                            
0008B140                            Sound_ChkValue:				; XREF: sub_71B4C
0008B140 7E00                       		moveq	#0,d7
0008B142 1E2E 0009                  		move.b	9(a6),d7
0008B146 6700 0000                  		beq.w	Sound_E4
0008B14A 6A00                       		bpl.s	locret_71F8C
0008B14C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008B152 0C07 009F                  		cmpi.b	#$9F,d7
0008B156 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008B15A 0C07 00A0                  		cmpi.b	#$A0,d7
0008B15E 6500 0000                  		bcs.w	locret_71F8C
0008B162 0C07 00CF                  		cmpi.b	#$CF,d7
0008B166 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008B16A 0C07 00D0                  		cmpi.b	#$D0,d7
0008B16E 6500 0000                  		bcs.w	locret_71F8C
0008B172 0C07 00D1                  		cmpi.b	#$D1,d7
0008B176 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
0008B17A 0C07 00DF                  		cmpi.b	#$DF,d7
0008B17E 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
0008B182 0C07 00E4                  		cmpi.b	#$E4,d7
0008B186 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008B188                            
0008B188                            locret_71F8C:
0008B188 4E75                       		rts	
0008B18A                            ; ===========================================================================
0008B18A                            
0008B18A                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008B18A 0407 00E0                  		subi.b	#$E0,d7
0008B18E E54F                       		lsl.w	#2,d7
0008B190 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008B194                            ; ===========================================================================
0008B194                            
0008B194                            Sound_ExIndex:
0008B194 6000 0000                  		bra.w	Sound_E0
0008B198                            ; ===========================================================================
0008B198 6000 0000                  		bra.w	Sound_E1
0008B19C                            ; ===========================================================================
0008B19C 6000 0000                  		bra.w	Sound_E2
0008B1A0                            ; ===========================================================================
0008B1A0 6000 0000                  		bra.w	Sound_E3
0008B1A4                            ; ===========================================================================
0008B1A4 6000 0000                  		bra.w	Sound_E4
0008B1A8                            ; ===========================================================================
0008B1A8                            ; ---------------------------------------------------------------------------
0008B1A8                            ; Play "Say-gaa" PCM sound
0008B1A8                            ; ---------------------------------------------------------------------------
0008B1A8                            
0008B1A8                            Sound_E1:				  
0008B1A8 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008B1AE 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0008B1B4 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0008B1BC                            PlayPCM_Loop:	  
0008B1BC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0008B1C2 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0008B1C6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0008B1CA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0008B1CC 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0008B1CE 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0008B1D2 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008B1D8 4EB8 10F0                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0008B1DC 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0008B1E2 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008B1E4 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008B1E6                            return_PlayPCM: 
0008B1E6 584F                       		addq.w	#4,sp 
0008B1E8 4E75                       		rts
0008B1EA                            
0008B1EA                            ; ===========================================================================
0008B1EA                            ; ---------------------------------------------------------------------------
0008B1EA                            ; Play music track $81-$9F
0008B1EA                            ; ---------------------------------------------------------------------------
0008B1EA                            
0008B1EA                            Sound_81to9F:				; XREF: Sound_ChkValue
0008B1EA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0008B1EE 6600                       		bne.s	loc_72024	; if not, branch
0008B1F0 4A2E 0027                  		tst.b	$27(a6)
0008B1F4 6600 0000                  		bne.w	loc_721B6
0008B1F8 4BEE 0040                  		lea	$40(a6),a5
0008B1FC 7009                       		moveq	#9,d0
0008B1FE                            
0008B1FE                            loc_71FE6:
0008B1FE 0895 0002                  		bclr	#2,(a5)
0008B202 DAFC 0030                  		adda.w	#$30,a5
0008B206 51C8 FFF6                  		dbf	d0,loc_71FE6
0008B20A                            
0008B20A 4BEE 0220                  		lea	$220(a6),a5
0008B20E 7005                       		moveq	#5,d0
0008B210                            
0008B210                            loc_71FF8:
0008B210 0895 0007                  		bclr	#7,(a5)
0008B214 DAFC 0030                  		adda.w	#$30,a5
0008B218 51C8 FFF6                  		dbf	d0,loc_71FF8
0008B21C 4216                       		clr.b	0(a6)
0008B21E 204E                       		movea.l	a6,a0
0008B220 43EE 03A0                  		lea	$3A0(a6),a1
0008B224 303C 0087                  		move.w	#$87,d0
0008B228                            
0008B228                            loc_72012:
0008B228 22D8                       		move.l	(a0)+,(a1)+
0008B22A 51C8 FFFC                  		dbf	d0,loc_72012
0008B22E                            
0008B22E 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008B234 4216                       		clr.b	0(a6)
0008B236 6000                       		bra.s	loc_7202C
0008B238                            ; ===========================================================================
0008B238                            
0008B238                            loc_72024:
0008B238 422E 0027                  		clr.b	$27(a6)
0008B23C 422E 0026                  		clr.b	$26(a6)
0008B240                            
0008B240                            loc_7202C:
0008B240 4EBA 0000                  		jsr	sub_725CA(pc)
0008B244 2879 0008 AB90             		movea.l	(off_719A0).l,a4
0008B24A 0407 0081                  		subi.b	#$81,d7
0008B24E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0008B254 2879 0008 AB88             		movea.l	(Go_MusicIndex).l,a4
0008B25A E54F                       		lsl.w	#2,d7
0008B25C 2874 7000                  		movea.l	(a4,d7.w),a4
0008B260 7000                       		moveq	#0,d0
0008B262 3014                       		move.w	(a4),d0
0008B264 D08C                       		add.l	a4,d0
0008B266 2D40 0018                  		move.l	d0,$18(a6)
0008B26A 102C 0005                  		move.b	5(a4),d0
0008B26E 1D40 0028                  		move.b	d0,$28(a6)
0008B272 4A2E 002A                  		tst.b	$2A(a6)
0008B276 6700                       		beq.s	loc_72068
0008B278 102E 0029                  		move.b	$29(a6),d0
0008B27C                            
0008B27C                            loc_72068:
0008B27C 1D40 0002                  		move.b	d0,2(a6)
0008B280 1D40 0001                  		move.b	d0,1(a6)
0008B284 7200                       		moveq	#0,d1
0008B286 264C                       		movea.l	a4,a3
0008B288 5C4C                       		addq.w	#6,a4
0008B28A 7E00                       		moveq	#0,d7
0008B28C 1E2B 0002                  		move.b	2(a3),d7
0008B290 6700 0000                  		beq.w	loc_72114
0008B294 5307                       		subq.b	#1,d7
0008B296 123C 00C0                  		move.b	#-$40,d1
0008B29A 182B 0004                  		move.b	4(a3),d4
0008B29E 7C30                       		moveq	#$30,d6
0008B2A0 1A3C 0001                  		move.b	#1,d5
0008B2A4 43EE 0040                  		lea	$40(a6),a1
0008B2A8 45FA 0000                  		lea	byte_721BA(pc),a2
0008B2AC                            
0008B2AC                            loc_72098:
0008B2AC 08D1 0007                  		bset	#7,(a1)
0008B2B0 135A 0001                  		move.b	(a2)+,1(a1)
0008B2B4 1344 0002                  		move.b	d4,2(a1)
0008B2B8 1346 000D                  		move.b	d6,$D(a1)
0008B2BC 1341 000A                  		move.b	d1,$A(a1)
0008B2C0 1345 000E                  		move.b	d5,$E(a1)
0008B2C4 7000                       		moveq	#0,d0
0008B2C6 301C                       		move.w	(a4)+,d0
0008B2C8 D08B                       		add.l	a3,d0
0008B2CA 2340 0004                  		move.l	d0,4(a1)
0008B2CE 335C 0008                  		move.w	(a4)+,8(a1)
0008B2D2 D2C6                       		adda.w	d6,a1
0008B2D4 51CF FFD6                  		dbf	d7,loc_72098
0008B2D8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008B2DE 6600                       		bne.s	loc_720D8
0008B2E0 702B                       		moveq	#$2B,d0
0008B2E2 7200                       		moveq	#0,d1
0008B2E4 4EBA 0000                  		jsr	sub_7272E(pc)
0008B2E8 6000 0000                  		bra.w	loc_72114
0008B2EC                            ; ===========================================================================
0008B2EC                            
0008B2EC                            loc_720D8:
0008B2EC 7028                       		moveq	#$28,d0
0008B2EE 7206                       		moveq	#6,d1
0008B2F0 4EBA 0000                  		jsr	sub_7272E(pc)
0008B2F4 103C 0042                  		move.b	#$42,d0
0008B2F8 727F                       		moveq	#$7F,d1
0008B2FA 4EBA 0000                  		jsr	sub_72764(pc)
0008B2FE 103C 004A                  		move.b	#$4A,d0
0008B302 727F                       		moveq	#$7F,d1
0008B304 4EBA 0000                  		jsr	sub_72764(pc)
0008B308 103C 0046                  		move.b	#$46,d0
0008B30C 727F                       		moveq	#$7F,d1
0008B30E 4EBA 0000                  		jsr	sub_72764(pc)
0008B312 103C 004E                  		move.b	#$4E,d0
0008B316 727F                       		moveq	#$7F,d1
0008B318 4EBA 0000                  		jsr	sub_72764(pc)
0008B31C 103C 00B6                  		move.b	#-$4A,d0
0008B320 123C 00C0                  		move.b	#-$40,d1
0008B324 4EBA 0000                  		jsr	sub_72764(pc)
0008B328                            
0008B328                            loc_72114:
0008B328 7E00                       		moveq	#0,d7
0008B32A 1E2B 0003                  		move.b	3(a3),d7
0008B32E 6700                       		beq.s	loc_72154
0008B330 5307                       		subq.b	#1,d7
0008B332 43EE 0190                  		lea	$190(a6),a1
0008B336 45FA 0000                  		lea	byte_721C2(pc),a2
0008B33A                            
0008B33A                            loc_72126:
0008B33A 08D1 0007                  		bset	#7,(a1)
0008B33E 135A 0001                  		move.b	(a2)+,1(a1)
0008B342 1344 0002                  		move.b	d4,2(a1)
0008B346 1346 000D                  		move.b	d6,$D(a1)
0008B34A 1345 000E                  		move.b	d5,$E(a1)
0008B34E 7000                       		moveq	#0,d0
0008B350 301C                       		move.w	(a4)+,d0
0008B352 D08B                       		add.l	a3,d0
0008B354 2340 0004                  		move.l	d0,4(a1)
0008B358 335C 0008                  		move.w	(a4)+,8(a1)
0008B35C 101C                       		move.b	(a4)+,d0
0008B35E 135C 000B                  		move.b	(a4)+,$B(a1)
0008B362 D2C6                       		adda.w	d6,a1
0008B364 51CF FFD4                  		dbf	d7,loc_72126
0008B368                            
0008B368                            loc_72154:
0008B368 43EE 0220                  		lea	$220(a6),a1
0008B36C 7E05                       		moveq	#5,d7
0008B36E                            
0008B36E                            loc_7215A:
0008B36E 4A11                       		tst.b	(a1)
0008B370 6A00 0000                  		bpl.w	loc_7217C
0008B374 7000                       		moveq	#0,d0
0008B376 1029 0001                  		move.b	1(a1),d0
0008B37A 6B00                       		bmi.s	loc_7216E
0008B37C 5500                       		subq.b	#2,d0
0008B37E E508                       		lsl.b	#2,d0
0008B380 6000                       		bra.s	loc_72170
0008B382                            ; ===========================================================================
0008B382                            
0008B382                            loc_7216E:
0008B382 E608                       		lsr.b	#3,d0
0008B384                            
0008B384                            loc_72170:
0008B384 41FA 0000                  		lea	dword_722CC(pc),a0
0008B388 2070 0000                  		movea.l	(a0,d0.w),a0
0008B38C 08D0 0002                  		bset	#2,(a0)
0008B390                            
0008B390                            loc_7217C:
0008B390 D2C6                       		adda.w	d6,a1
0008B392 51CF FFDA                  		dbf	d7,loc_7215A
0008B396                            
0008B396 4A6E 0340                  		tst.w	$340(a6)
0008B39A 6A00                       		bpl.s	loc_7218E
0008B39C 08EE 0002 0100             		bset	#2,$100(a6)
0008B3A2                            
0008B3A2                            loc_7218E:
0008B3A2 4A6E 0370                  		tst.w	$370(a6)
0008B3A6 6A00                       		bpl.s	loc_7219A
0008B3A8 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008B3AE                            
0008B3AE                            loc_7219A:
0008B3AE 4BEE 0070                  		lea	$70(a6),a5
0008B3B2 7805                       		moveq	#5,d4
0008B3B4                            
0008B3B4                            loc_721A0:
0008B3B4 4EBA 0000                  		jsr	sub_726FE(pc)
0008B3B8 DAC6                       		adda.w	d6,a5
0008B3BA 51CC FFF8                  		dbf	d4,loc_721A0
0008B3BE 7802                       		moveq	#2,d4
0008B3C0                            
0008B3C0                            loc_721AC:
0008B3C0 4EBA 0000                  		jsr	sub_729A0(pc)
0008B3C4 DAC6                       		adda.w	d6,a5
0008B3C6 51CC FFF8                  		dbf	d4,loc_721AC
0008B3CA                            
0008B3CA                            loc_721B6:
0008B3CA 584F                       		addq.w	#4,sp
0008B3CC 4E75                       		rts	
0008B3CE                            ; ===========================================================================
0008B3CE 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0008B3D6                            		even
0008B3D6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008B3DA                            		even
0008B3DA                            ; ===========================================================================
0008B3DA                            ; ---------------------------------------------------------------------------
0008B3DA                            ; Play normal sound effect
0008B3DA                            ; ---------------------------------------------------------------------------
0008B3DA                            
0008B3DA                            Sound_D1toDF:
0008B3DA 4A2E 0027                  		tst.b	$27(a6)
0008B3DE 6600 0000                  		bne.w	loc_722C6
0008B3E2 4A2E 0004                  		tst.b	4(a6)
0008B3E6 6600 0000                  		bne.w	loc_722C6
0008B3EA 4A2E 0024                  		tst.b	$24(a6)
0008B3EE 6600 0000                  		bne.w	loc_722C6
0008B3F2 2079 0008 AB8C             		movea.l	(Go_SoundIndex).l,a0
0008B3F8 0407 00A1                  		sub.b	#$A1,d7
0008B3FC 6000 0000                  		bra	SoundEffects_Common
0008B400                            
0008B400                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008B400 4A2E 0027                  		tst.b	$27(a6)
0008B404 6600 0000                  		bne.w	loc_722C6
0008B408 4A2E 0004                  		tst.b	4(a6)
0008B40C 6600 0000                  		bne.w	loc_722C6
0008B410 4A2E 0024                  		tst.b	$24(a6)
0008B414 6600 0000                  		bne.w	loc_722C6
0008B418 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008B41C 6600                       		bne.s	Sound_notB5	; if not, branch
0008B41E 4A2E 002B                  		tst.b	$2B(a6)
0008B422 6600                       		bne.s	loc_721EE
0008B424 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008B428                            
0008B428                            loc_721EE:
0008B428 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008B42E                            
0008B42E                            Sound_notB5:
0008B42E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0008B432 6600                       		bne.s	Sound_notA7	; if not, branch
0008B434 4A2E 002C                  		tst.b	$2C(a6)
0008B438 6600 0000                  		bne.w	locret_722C4
0008B43C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0008B442                            
0008B442                            Sound_notA7:
0008B442 2079 0008 AB8C             		movea.l	(Go_SoundIndex).l,a0
0008B448 0407 00A0                  		subi.b	#$A0,d7
0008B44C                            
0008B44C                            SoundEffects_Common:
0008B44C E54F                       		lsl.w	#2,d7
0008B44E 2670 7000                  		movea.l	(a0,d7.w),a3
0008B452 224B                       		movea.l	a3,a1
0008B454 7200                       		moveq	#0,d1
0008B456 3219                       		move.w	(a1)+,d1
0008B458 D28B                       		add.l	a3,d1
0008B45A 1A19                       		move.b	(a1)+,d5
0008B45C 1E19                       		move.b	(a1)+,d7
0008B45E 5307                       		subq.b	#1,d7
0008B460 7C30                       		moveq	#$30,d6
0008B462                            
0008B462                            loc_72228:
0008B462 7600                       		moveq	#0,d3
0008B464 1629 0001                  		move.b	1(a1),d3
0008B468 1803                       		move.b	d3,d4
0008B46A 6B00                       		bmi.s	loc_72244
0008B46C 5543                       		subq.w	#2,d3
0008B46E E54B                       		lsl.w	#2,d3
0008B470 4BFA 0000                  		lea	dword_722CC(pc),a5
0008B474 2A75 3000                  		movea.l	(a5,d3.w),a5
0008B478 08D5 0002                  		bset	#2,(a5)
0008B47C 6000                       		bra.s	loc_7226E
0008B47E                            ; ===========================================================================
0008B47E                            
0008B47E                            loc_72244:
0008B47E E64B                       		lsr.w	#3,d3
0008B480 4BFA 0000                  		lea	dword_722CC(pc),a5
0008B484 2A75 3000                  		movea.l	(a5,d3.w),a5
0008B488 08D5 0002                  		bset	#2,(a5)
0008B48C 0C04 00C0                  		cmpi.b	#$C0,d4
0008B490 6600                       		bne.s	loc_7226E
0008B492 1004                       		move.b	d4,d0
0008B494 0000 001F                  		ori.b	#$1F,d0
0008B498 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B49E 0840 0005                  		bchg	#5,d0
0008B4A2 13C0 00C0 0011             		move.b	d0,($C00011).l
0008B4A8                            
0008B4A8                            loc_7226E:
0008B4A8 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0008B4AC 244D                       		movea.l	a5,a2
0008B4AE 700B                       		moveq	#$B,d0
0008B4B0                            
0008B4B0                            loc_72276:
0008B4B0 429A                       		clr.l	(a2)+
0008B4B2 51C8 FFFC                  		dbf	d0,loc_72276
0008B4B6                            
0008B4B6 3A99                       		move.w	(a1)+,(a5)
0008B4B8 1B45 0002                  		move.b	d5,2(a5)
0008B4BC 7000                       		moveq	#0,d0
0008B4BE 3019                       		move.w	(a1)+,d0
0008B4C0 D08B                       		add.l	a3,d0
0008B4C2 2B40 0004                  		move.l	d0,4(a5)
0008B4C6 3B59 0008                  		move.w	(a1)+,8(a5)
0008B4CA 1B7C 0001 000E             		move.b	#1,$E(a5)
0008B4D0 1B46 000D                  		move.b	d6,$D(a5)
0008B4D4 4A04                       		tst.b	d4
0008B4D6 6B00                       		bmi.s	loc_722A8
0008B4D8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008B4DE 2B41 0020                  		move.l	d1,$20(a5)
0008B4E2                            
0008B4E2                            loc_722A8:
0008B4E2 51CF FF7E                  		dbf	d7,loc_72228
0008B4E6                            
0008B4E6 4A2E 0250                  		tst.b	$250(a6)
0008B4EA 6A00                       		bpl.s	loc_722B8
0008B4EC 08EE 0002 0340             		bset	#2,$340(a6)
0008B4F2                            
0008B4F2                            loc_722B8:
0008B4F2 4A2E 0310                  		tst.b	$310(a6)
0008B4F6 6A00                       		bpl.s	locret_722C4
0008B4F8 08EE 0002 0370             		bset	#2,$370(a6)
0008B4FE                            
0008B4FE                            locret_722C4:
0008B4FE 4E75                       		rts	
0008B500                            ; ===========================================================================
0008B500                            
0008B500                            loc_722C6:
0008B500 4216                       		clr.b	0(a6)
0008B502 4E75                       		rts	
0008B504                            ; ===========================================================================
0008B504 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008B508 0000 0000                  		dc.l 0
0008B50C 00FF F100                  		dc.l $FFF100
0008B510 00FF F130                  		dc.l $FFF130
0008B514 00FF F190                  		dc.l $FFF190
0008B518 00FF F1C0                  		dc.l $FFF1C0
0008B51C 00FF F1F0                  		dc.l $FFF1F0
0008B520 00FF F1F0                  		dc.l $FFF1F0
0008B524 00FF F220                  dword_722EC:	dc.l $FFF220
0008B528 0000 0000                  		dc.l 0
0008B52C 00FF F250                  		dc.l $FFF250
0008B530 00FF F280                  		dc.l $FFF280
0008B534 00FF F2B0                  		dc.l $FFF2B0
0008B538 00FF F2E0                  		dc.l $FFF2E0
0008B53C 00FF F310                  		dc.l $FFF310
0008B540 00FF F310                  		dc.l $FFF310
0008B544                            ; ===========================================================================
0008B544                            ; ---------------------------------------------------------------------------
0008B544                            ; Play GHZ waterfall sound
0008B544                            ; ---------------------------------------------------------------------------
0008B544                            
0008B544                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008B544 4A2E 0027                  		tst.b	$27(a6)
0008B548 6600 0000                  		bne.w	locret_723C6
0008B54C 4A2E 0004                  		tst.b	4(a6)
0008B550 6600 0000                  		bne.w	locret_723C6
0008B554 4A2E 0024                  		tst.b	$24(a6)
0008B558 6600 0000                  		bne.w	locret_723C6
0008B55C 2079 0008 AB84             		movea.l	(Go_SoundD0).l,a0
0008B562 0407 00D0                  		subi.b	#$D0,d7
0008B566 E54F                       		lsl.w	#2,d7
0008B568 2670 7000                  		movea.l	(a0,d7.w),a3
0008B56C 224B                       		movea.l	a3,a1
0008B56E 7000                       		moveq	#0,d0
0008B570 3019                       		move.w	(a1)+,d0
0008B572 D08B                       		add.l	a3,d0
0008B574 2D40 0020                  		move.l	d0,$20(a6)
0008B578 1A19                       		move.b	(a1)+,d5
0008B57A 1E19                       		move.b	(a1)+,d7
0008B57C 5307                       		subq.b	#1,d7
0008B57E 7C30                       		moveq	#$30,d6
0008B580                            
0008B580                            loc_72348:
0008B580 1829 0001                  		move.b	1(a1),d4
0008B584 6B00                       		bmi.s	loc_7235A
0008B586 08EE 0002 0100             		bset	#2,$100(a6)
0008B58C 4BEE 0340                  		lea	$340(a6),a5
0008B590 6000                       		bra.s	loc_72364
0008B592                            ; ===========================================================================
0008B592                            
0008B592                            loc_7235A:
0008B592 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008B598 4BEE 0370                  		lea	$370(a6),a5
0008B59C                            
0008B59C                            loc_72364:
0008B59C 244D                       		movea.l	a5,a2
0008B59E 700B                       		moveq	#$B,d0
0008B5A0                            
0008B5A0                            loc_72368:
0008B5A0 429A                       		clr.l	(a2)+
0008B5A2 51C8 FFFC                  		dbf	d0,loc_72368
0008B5A6                            
0008B5A6 3A99                       		move.w	(a1)+,(a5)
0008B5A8 1B45 0002                  		move.b	d5,2(a5)
0008B5AC 7000                       		moveq	#0,d0
0008B5AE 3019                       		move.w	(a1)+,d0
0008B5B0 D08B                       		add.l	a3,d0
0008B5B2 2B40 0004                  		move.l	d0,4(a5)
0008B5B6 3B59 0008                  		move.w	(a1)+,8(a5)
0008B5BA 1B7C 0001 000E             		move.b	#1,$E(a5)
0008B5C0 1B46 000D                  		move.b	d6,$D(a5)
0008B5C4 4A04                       		tst.b	d4
0008B5C6 6B00                       		bmi.s	loc_72396
0008B5C8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008B5CE                            
0008B5CE                            loc_72396:
0008B5CE 51CF FFB0                  		dbf	d7,loc_72348
0008B5D2                            
0008B5D2 4A2E 0250                  		tst.b	$250(a6)
0008B5D6 6A00                       		bpl.s	loc_723A6
0008B5D8 08EE 0002 0340             		bset	#2,$340(a6)
0008B5DE                            
0008B5DE                            loc_723A6:
0008B5DE 4A2E 0310                  		tst.b	$310(a6)
0008B5E2 6A00                       		bpl.s	locret_723C6
0008B5E4 08EE 0002 0370             		bset	#2,$370(a6)
0008B5EA 0004 001F                  		ori.b	#$1F,d4
0008B5EE 13C4 00C0 0011             		move.b	d4,($C00011).l
0008B5F4 0844 0005                  		bchg	#5,d4
0008B5F8 13C4 00C0 0011             		move.b	d4,($C00011).l
0008B5FE                            
0008B5FE                            locret_723C6:
0008B5FE 4E75                       		rts	
0008B600                            ; End of function Sound_ChkValue
0008B600                            
0008B600                            ; ===========================================================================
0008B600 00FF F100                  		dc.l $FFF100
0008B604 00FF F1F0                  		dc.l $FFF1F0
0008B608 00FF F250                  		dc.l $FFF250
0008B60C 00FF F310                  		dc.l $FFF310
0008B610 00FF F340                  		dc.l $FFF340
0008B614 00FF F370                  		dc.l $FFF370
0008B618                            
0008B618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B618                            
0008B618                            
0008B618                            Snd_FadeOut1:				; XREF: Sound_E0
0008B618 4216                       		clr.b	0(a6)
0008B61A 4BEE 0220                  		lea	$220(a6),a5
0008B61E 7E05                       		moveq	#5,d7
0008B620                            
0008B620                            loc_723EA:
0008B620 4A15                       		tst.b	(a5)
0008B622 6A00 0000                  		bpl.w	loc_72472
0008B626 0895 0007                  		bclr	#7,(a5)
0008B62A 7600                       		moveq	#0,d3
0008B62C 162D 0001                  		move.b	1(a5),d3
0008B630 6B00                       		bmi.s	loc_7243C
0008B632 4EBA 0000                  		jsr	sub_726FE(pc)
0008B636 0C03 0004                  		cmpi.b	#4,d3
0008B63A 6600                       		bne.s	loc_72416
0008B63C 4A2E 0340                  		tst.b	$340(a6)
0008B640 6A00                       		bpl.s	loc_72416
0008B642 4BEE 0340                  		lea	$340(a6),a5
0008B646 226E 0020                  		movea.l	$20(a6),a1
0008B64A 6000                       		bra.s	loc_72428
0008B64C                            ; ===========================================================================
0008B64C                            
0008B64C                            loc_72416:
0008B64C 5503                       		subq.b	#2,d3
0008B64E E50B                       		lsl.b	#2,d3
0008B650 41FA FEB2                  		lea	dword_722CC(pc),a0
0008B654 264D                       		movea.l	a5,a3
0008B656 2A70 3000                  		movea.l	(a0,d3.w),a5
0008B65A 226E 0018                  		movea.l	$18(a6),a1
0008B65E                            
0008B65E                            loc_72428:
0008B65E 0895 0002                  		bclr	#2,(a5)
0008B662 08D5 0001                  		bset	#1,(a5)
0008B666 102D 000B                  		move.b	$B(a5),d0
0008B66A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B66E 2A4B                       		movea.l	a3,a5
0008B670 6000                       		bra.s	loc_72472
0008B672                            ; ===========================================================================
0008B672                            
0008B672                            loc_7243C:
0008B672 4EBA 0000                  		jsr	sub_729A0(pc)
0008B676 41EE 0370                  		lea	$370(a6),a0
0008B67A 0C03 00E0                  		cmpi.b	#$E0,d3
0008B67E 6700                       		beq.s	loc_7245A
0008B680 0C03 00C0                  		cmpi.b	#$C0,d3
0008B684 6700                       		beq.s	loc_7245A
0008B686 E60B                       		lsr.b	#3,d3
0008B688 41FA FE7A                  		lea	dword_722CC(pc),a0
0008B68C 2070 3000                  		movea.l	(a0,d3.w),a0
0008B690                            
0008B690                            loc_7245A:
0008B690 0890 0002                  		bclr	#2,(a0)
0008B694 08D0 0001                  		bset	#1,(a0)
0008B698 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008B69E 6600                       		bne.s	loc_72472
0008B6A0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008B6A8                            
0008B6A8                            loc_72472:
0008B6A8 DAFC 0030                  		adda.w	#$30,a5
0008B6AC 51CF FF72                  		dbf	d7,loc_723EA
0008B6B0                            
0008B6B0 4E75                       		rts	
0008B6B2                            ; End of function Snd_FadeOut1
0008B6B2                            
0008B6B2                            
0008B6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B6B2                            
0008B6B2                            
0008B6B2                            Snd_FadeOut2:				; XREF: Sound_E0
0008B6B2 4BEE 0340                  		lea	$340(a6),a5
0008B6B6 4A15                       		tst.b	(a5)
0008B6B8 6A00                       		bpl.s	loc_724AE
0008B6BA 0895 0007                  		bclr	#7,(a5)
0008B6BE 0815 0002                  		btst	#2,(a5)
0008B6C2 6600                       		bne.s	loc_724AE
0008B6C4 4EBA 0000                  		jsr	loc_7270A(pc)
0008B6C8 4BEE 0100                  		lea	$100(a6),a5
0008B6CC 0895 0002                  		bclr	#2,(a5)
0008B6D0 08D5 0001                  		bset	#1,(a5)
0008B6D4 4A15                       		tst.b	(a5)
0008B6D6 6A00                       		bpl.s	loc_724AE
0008B6D8 226E 0018                  		movea.l	$18(a6),a1
0008B6DC 102D 000B                  		move.b	$B(a5),d0
0008B6E0 4EBA 0000                  		jsr	sub_72C4E(pc)
0008B6E4                            
0008B6E4                            loc_724AE:
0008B6E4 4BEE 0370                  		lea	$370(a6),a5
0008B6E8 4A15                       		tst.b	(a5)
0008B6EA 6A00                       		bpl.s	locret_724E4
0008B6EC 0895 0007                  		bclr	#7,(a5)
0008B6F0 0815 0002                  		btst	#2,(a5)
0008B6F4 6600                       		bne.s	locret_724E4
0008B6F6 4EBA 0000                  		jsr	loc_729A6(pc)
0008B6FA 4BEE 01F0                  		lea	$1F0(a6),a5
0008B6FE 0895 0002                  		bclr	#2,(a5)
0008B702 08D5 0001                  		bset	#1,(a5)
0008B706 4A15                       		tst.b	(a5)
0008B708 6A00                       		bpl.s	locret_724E4
0008B70A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008B710 6600                       		bne.s	locret_724E4
0008B712 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0008B71A                            
0008B71A                            locret_724E4:
0008B71A 4E75                       		rts	
0008B71C                            ; End of function Snd_FadeOut2
0008B71C                            
0008B71C                            ; ===========================================================================
0008B71C                            ; ---------------------------------------------------------------------------
0008B71C                            ; Fade out music
0008B71C                            ; ---------------------------------------------------------------------------
0008B71C                            
0008B71C                            Sound_E0:				; XREF: Sound_ExIndex
0008B71C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008B720 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008B724 1D7C 0003 0006             		move.b	#3,6(a6)
0008B72A 1D7C 0028 0004             		move.b	#$28,4(a6)
0008B730 422E 0040                  		clr.b	$40(a6)
0008B734 422E 002A                  		clr.b	$2A(a6)
0008B738 4E75                       		rts	
0008B73A                            
0008B73A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B73A                            
0008B73A                            
0008B73A                            sub_72504:				; XREF: sub_71B4C
0008B73A 102E 0006                  		move.b	6(a6),d0
0008B73E 6700                       		beq.s	loc_72510
0008B740 532E 0006                  		subq.b	#1,6(a6)
0008B744 4E75                       		rts	
0008B746                            ; ===========================================================================
0008B746                            
0008B746                            loc_72510:
0008B746 532E 0004                  		subq.b	#1,4(a6)
0008B74A 6700 0000                  		beq.w	Sound_E4
0008B74E 1D7C 0003 0006             		move.b	#3,6(a6)
0008B754 4BEE 0070                  		lea	$70(a6),a5
0008B758 7E05                       		moveq	#5,d7
0008B75A                            
0008B75A                            loc_72524:
0008B75A 4A15                       		tst.b	(a5)
0008B75C 6A00                       		bpl.s	loc_72538
0008B75E 522D 0009                  		addq.b	#1,9(a5)
0008B762 6A00                       		bpl.s	loc_72534
0008B764 0895 0007                  		bclr	#7,(a5)
0008B768 6000                       		bra.s	loc_72538
0008B76A                            ; ===========================================================================
0008B76A                            
0008B76A                            loc_72534:
0008B76A 4EBA 0000                  		jsr	sub_72CB4(pc)
0008B76E                            
0008B76E                            loc_72538:
0008B76E DAFC 0030                  		adda.w	#$30,a5
0008B772 51CF FFE6                  		dbf	d7,loc_72524
0008B776                            
0008B776 7E02                       		moveq	#2,d7
0008B778                            
0008B778                            loc_72542:
0008B778 4A15                       		tst.b	(a5)
0008B77A 6A00                       		bpl.s	loc_72560
0008B77C 522D 0009                  		addq.b	#1,9(a5)
0008B780 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0008B786 6500                       		bcs.s	loc_72558
0008B788 0895 0007                  		bclr	#7,(a5)
0008B78C 6000                       		bra.s	loc_72560
0008B78E                            ; ===========================================================================
0008B78E                            
0008B78E                            loc_72558:
0008B78E 1C2D 0009                  		move.b	9(a5),d6
0008B792 4EBA 0000                  		jsr	sub_7296A(pc)
0008B796                            
0008B796                            loc_72560:
0008B796 DAFC 0030                  		adda.w	#$30,a5
0008B79A 51CF FFDC                  		dbf	d7,loc_72542
0008B79E                            
0008B79E 4E75                       		rts	
0008B7A0                            ; End of function sub_72504
0008B7A0                            
0008B7A0                            
0008B7A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B7A0                            
0008B7A0                            
0008B7A0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0008B7A0 7602                       		moveq	#2,d3
0008B7A2 7028                       		moveq	#$28,d0
0008B7A4                            
0008B7A4                            loc_7256E:
0008B7A4 1203                       		move.b	d3,d1
0008B7A6 4EBA 0000                  		jsr	sub_7272E(pc)
0008B7AA 5801                       		addq.b	#4,d1
0008B7AC 4EBA 0000                  		jsr	sub_7272E(pc)
0008B7B0 51CB FFF2                  		dbf	d3,loc_7256E
0008B7B4                            
0008B7B4 7040                       		moveq	#$40,d0
0008B7B6 727F                       		moveq	#$7F,d1
0008B7B8 7802                       		moveq	#2,d4
0008B7BA                            
0008B7BA                            loc_72584:
0008B7BA 7603                       		moveq	#3,d3
0008B7BC                            
0008B7BC                            loc_72586:
0008B7BC 4EBA 0000                  		jsr	sub_7272E(pc)
0008B7C0 4EBA 0000                  		jsr	sub_72764(pc)
0008B7C4 5840                       		addq.w	#4,d0
0008B7C6 51CB FFF4                  		dbf	d3,loc_72586
0008B7CA                            
0008B7CA 0400 000F                  		subi.b	#$F,d0
0008B7CE 51CC FFEA                  		dbf	d4,loc_72584
0008B7D2                            
0008B7D2 4E75                       		rts	
0008B7D4                            ; End of function sub_7256A
0008B7D4                            
0008B7D4                            ; ===========================================================================
0008B7D4                            ; ---------------------------------------------------------------------------
0008B7D4                            ; Stop music
0008B7D4                            ; ---------------------------------------------------------------------------
0008B7D4                            
0008B7D4                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008B7D4 702B                       		moveq	#$2B,d0
0008B7D6 123C 0080                  		move.b	#$80,d1
0008B7DA 4EBA 0000                  		jsr	sub_7272E(pc)
0008B7DE 7027                       		moveq	#$27,d0
0008B7E0 7200                       		moveq	#0,d1
0008B7E2 4EBA 0000                  		jsr	sub_7272E(pc)
0008B7E6 204E                       		movea.l	a6,a0
0008B7E8 303C 00E3                  		move.w	#$E3,d0
0008B7EC                            
0008B7EC                            loc_725B6:
0008B7EC 4298                       		clr.l	(a0)+
0008B7EE 51C8 FFFC                  		dbf	d0,loc_725B6
0008B7F2                            
0008B7F2 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008B7F8 4EBA FFA6                  		jsr	sub_7256A(pc)
0008B7FC 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
0008B804 6000 0000                  		bra.w	sub_729B6
0008B808                            
0008B808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B808                            
0008B808                            
0008B808                            sub_725CA:				; XREF: Sound_ChkValue
0008B808 204E                       		movea.l	a6,a0
0008B80A 1216                       		move.b	0(a6),d1
0008B80C 142E 0027                  		move.b	$27(a6),d2
0008B810 162E 002A                  		move.b	$2A(a6),d3
0008B814 182E 0026                  		move.b	$26(a6),d4
0008B818 3A2E 000A                  		move.w	$A(a6),d5
0008B81C 303C 0087                  		move.w	#$87,d0
0008B820                            
0008B820                            loc_725E4:
0008B820 4298                       		clr.l	(a0)+
0008B822 51C8 FFFC                  		dbf	d0,loc_725E4
0008B826                            
0008B826 1C81                       		move.b	d1,0(a6)
0008B828 1D42 0027                  		move.b	d2,$27(a6)
0008B82C 1D43 002A                  		move.b	d3,$2A(a6)
0008B830 1D44 0026                  		move.b	d4,$26(a6)
0008B834 3D45 000A                  		move.w	d5,$A(a6)
0008B838 1D7C 0080 0009             		move.b	#$80,9(a6)
0008B83E 4EBA FF60                  		jsr	sub_7256A(pc)
0008B842 6000 0000                  		bra.w	sub_729B6
0008B846                            ; End of function sub_725CA
0008B846                            
0008B846                            
0008B846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B846                            
0008B846                            
0008B846                            sub_7260C:				; XREF: sub_71B4C
0008B846 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008B84C 41EE 004E                  		lea	$4E(a6),a0
0008B850 7030                       		moveq	#$30,d0
0008B852 7209                       		moveq	#9,d1
0008B854                            
0008B854                            loc_7261A:
0008B854 5210                       		addq.b	#1,(a0)
0008B856 D0C0                       		adda.w	d0,a0
0008B858 51C9 FFFA                  		dbf	d1,loc_7261A
0008B85C                            
0008B85C 4E75                       		rts	
0008B85E                            ; End of function sub_7260C
0008B85E                            
0008B85E                            ; ===========================================================================
0008B85E                            ; ---------------------------------------------------------------------------
0008B85E                            ; Speed	up music
0008B85E                            ; ---------------------------------------------------------------------------
0008B85E                            
0008B85E                            Sound_E2:				; XREF: Sound_ExIndex
0008B85E 4A2E 0027                  		tst.b	$27(a6)
0008B862 6600                       		bne.s	loc_7263E
0008B864 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0008B86A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0008B870 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0008B876 4E75                       		rts	
0008B878                            ; ===========================================================================
0008B878                            
0008B878                            loc_7263E:
0008B878 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0008B87E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0008B884 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0008B88A 4E75                       		rts	
0008B88C                            ; ===========================================================================
0008B88C                            ; ---------------------------------------------------------------------------
0008B88C                            ; Change music back to normal speed
0008B88C                            ; ---------------------------------------------------------------------------
0008B88C                            
0008B88C                            Sound_E3:				; XREF: Sound_ExIndex
0008B88C 4A2E 0027                  		tst.b	$27(a6)
0008B890 6600                       		bne.s	loc_7266A
0008B892 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0008B898 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0008B89E 422E 002A                  		clr.b	$2A(a6)
0008B8A2 4E75                       		rts	
0008B8A4                            ; ===========================================================================
0008B8A4                            
0008B8A4                            loc_7266A:
0008B8A4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0008B8AA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0008B8B0 422E 03CA                  		clr.b	$3CA(a6)
0008B8B4 4E75                       		rts	
0008B8B6                            
0008B8B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B8B6                            
0008B8B6                            
0008B8B6                            sub_7267C:				; XREF: sub_71B4C
0008B8B6 4A2E 0025                  		tst.b	$25(a6)
0008B8BA 6700                       		beq.s	loc_72688
0008B8BC 532E 0025                  		subq.b	#1,$25(a6)
0008B8C0 4E75                       		rts	
0008B8C2                            ; ===========================================================================
0008B8C2                            
0008B8C2                            loc_72688:
0008B8C2 4A2E 0026                  		tst.b	$26(a6)
0008B8C6 6700                       		beq.s	loc_726D6
0008B8C8 532E 0026                  		subq.b	#1,$26(a6)
0008B8CC 1D7C 0002 0025             		move.b	#2,$25(a6)
0008B8D2 4BEE 0070                  		lea	$70(a6),a5
0008B8D6 7E05                       		moveq	#5,d7
0008B8D8                            
0008B8D8                            loc_7269E:
0008B8D8 4A15                       		tst.b	(a5)
0008B8DA 6A00                       		bpl.s	loc_726AA
0008B8DC 532D 0009                  		subq.b	#1,9(a5)
0008B8E0 4EBA 0000                  		jsr	sub_72CB4(pc)
0008B8E4                            
0008B8E4                            loc_726AA:
0008B8E4 DAFC 0030                  		adda.w	#$30,a5
0008B8E8 51CF FFEE                  		dbf	d7,loc_7269E
0008B8EC 7E02                       		moveq	#2,d7
0008B8EE                            
0008B8EE                            loc_726B4:
0008B8EE 4A15                       		tst.b	(a5)
0008B8F0 6A00                       		bpl.s	loc_726CC
0008B8F2 532D 0009                  		subq.b	#1,9(a5)
0008B8F6 1C2D 0009                  		move.b	9(a5),d6
0008B8FA 0C06 0010                  		cmpi.b	#$10,d6
0008B8FE 6500                       		bcs.s	loc_726C8
0008B900 7C0F                       		moveq	#$F,d6
0008B902                            
0008B902                            loc_726C8:
0008B902 4EBA 0000                  		jsr	sub_7296A(pc)
0008B906                            
0008B906                            loc_726CC:
0008B906 DAFC 0030                  		adda.w	#$30,a5
0008B90A 51CF FFE2                  		dbf	d7,loc_726B4
0008B90E 4E75                       		rts	
0008B910                            ; ===========================================================================
0008B910                            
0008B910                            loc_726D6:
0008B910 08AE 0002 0040             		bclr	#2,$40(a6)
0008B916 422E 0024                  		clr.b	$24(a6)
0008B91A                            
0008B91A 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
0008B91E 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
0008B920                            
0008B920 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
0008B922 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
0008B926 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
0008B92A                            
0008B92A                            Resume_NoDAC:
0008B92A 4E75                       		rts
0008B92C                            
0008B92C                            ; ===========================================================================
0008B92C                            
0008B92C                            loc_726E2:				; XREF: sub_71CCA
0008B92C 0815 0001                  		btst	#1,(a5)
0008B930 6600                       		bne.s	locret_726FC
0008B932 0815 0002                  		btst	#2,(a5)
0008B936 6600                       		bne.s	locret_726FC
0008B938 7028                       		moveq	#$28,d0
0008B93A 122D 0001                  		move.b	1(a5),d1
0008B93E 0001 00F0                  		ori.b	#-$10,d1
0008B942 6000 0000                  		bra.w	sub_7272E
0008B946                            ; ===========================================================================
0008B946                            
0008B946                            locret_726FC:
0008B946 4E75                       		rts	
0008B948                            
0008B948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B948                            
0008B948                            
0008B948                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0008B948 0815 0004                  		btst	#4,(a5)
0008B94C 6600                       		bne.s	locret_72714
0008B94E 0815 0002                  		btst	#2,(a5)
0008B952 6600                       		bne.s	locret_72714
0008B954                            
0008B954                            loc_7270A:				; XREF: Snd_FadeOut2
0008B954 7028                       		moveq	#$28,d0
0008B956 122D 0001                  		move.b	1(a5),d1
0008B95A 6000 0000                  		bra.w	sub_7272E
0008B95E                            ; ===========================================================================
0008B95E                            
0008B95E                            locret_72714:
0008B95E 4E75                       		rts	
0008B960                            ; End of function sub_726FE
0008B960                            
0008B960                            ; ===========================================================================
0008B960                            
0008B960                            loc_72716:				; XREF: sub_72A5A
0008B960 0815 0002                  		btst	#2,(a5)
0008B964 6600                       		bne.s	locret_72720
0008B966 6000 0000                  		bra.w	sub_72722
0008B96A                            ; ===========================================================================
0008B96A                            
0008B96A                            locret_72720:
0008B96A 4E75                       		rts	
0008B96C                            
0008B96C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B96C                            
0008B96C                            
0008B96C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0008B96C 082D 0002 0001             		btst	#2,1(a5)
0008B972 6600                       		bne.s	loc_7275A
0008B974 D02D 0001                  		add.b	1(a5),d0
0008B978                            ; End of function sub_72722
0008B978                            
0008B978                            
0008B978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B978                            
0008B978                            
0008B978                            sub_7272E:				; XREF: loc_71E6A
0008B978 1439 00A0 4000             		move.b	($A04000).l,d2
0008B97E 0802 0007                  		btst	#7,d2
0008B982 66F4                       		bne.s	sub_7272E
0008B984 13C0 00A0 4000             		move.b	d0,($A04000).l
0008B98A 4E71                       		nop	
0008B98C 4E71                       		nop	
0008B98E 4E71                       		nop	
0008B990                            
0008B990                            loc_72746:
0008B990 1439 00A0 4000             		move.b	($A04000).l,d2
0008B996 0802 0007                  		btst	#7,d2
0008B99A 66F4                       		bne.s	loc_72746
0008B99C                            
0008B99C 13C1 00A0 4001             		move.b	d1,($A04001).l
0008B9A2 4E75                       		rts	
0008B9A4                            ; End of function sub_7272E
0008B9A4                            
0008B9A4                            ; ===========================================================================
0008B9A4                            
0008B9A4                            loc_7275A:				; XREF: sub_72722
0008B9A4 142D 0001                  		move.b	1(a5),d2
0008B9A8 0882 0002                  		bclr	#2,d2
0008B9AC D002                       		add.b	d2,d0
0008B9AE                            
0008B9AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008B9AE                            
0008B9AE                            
0008B9AE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0008B9AE 1439 00A0 4000             		move.b	($A04000).l,d2
0008B9B4 0802 0007                  		btst	#7,d2
0008B9B8 66F4                       		bne.s	sub_72764
0008B9BA 13C0 00A0 4002             		move.b	d0,($A04002).l
0008B9C0 4E71                       		nop	
0008B9C2 4E71                       		nop	
0008B9C4 4E71                       		nop	
0008B9C6                            
0008B9C6                            loc_7277C:
0008B9C6 1439 00A0 4000             		move.b	($A04000).l,d2
0008B9CC 0802 0007                  		btst	#7,d2
0008B9D0 66F4                       		bne.s	loc_7277C
0008B9D2                            
0008B9D2 13C1 00A0 4003             		move.b	d1,($A04003).l
0008B9D8 4E75                       		rts	
0008B9DA                            ; End of function sub_72764
0008B9DA                            
0008B9DA                            ; ===========================================================================
0008B9DA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008B9EC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008B9FE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008BA0E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008BA1E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008BA2E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008BA3E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008BA4E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008BA5E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0008BA6E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0008BA7E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0008BA8E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0008BA9A                            
0008BA9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BA9A                            
0008BA9A                            
0008BA9A                            sub_72850:				; XREF: sub_71B4C
0008BA9A 532D 000E                  		subq.b	#1,$E(a5)
0008BA9E 6600                       		bne.s	loc_72866
0008BAA0 0895 0004                  		bclr	#4,(a5)
0008BAA4 4EBA 0000                  		jsr	sub_72878(pc)
0008BAA8 4EBA 0000                  		jsr	sub_728DC(pc)
0008BAAC 6000 0000                  		bra.w	loc_7292E
0008BAB0                            ; ===========================================================================
0008BAB0                            
0008BAB0                            loc_72866:
0008BAB0 4EBA F4D4                  		jsr	sub_71D9E(pc)
0008BAB4 4EBA 0000                  		jsr	sub_72926(pc)
0008BAB8 4EBA F4F4                  		jsr	sub_71DC6(pc)
0008BABC 4EBA 0000                  		jsr	sub_728E2(pc)
0008BAC0 4E75                       		rts	
0008BAC2                            ; End of function sub_72850
0008BAC2                            
0008BAC2                            
0008BAC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BAC2                            
0008BAC2                            
0008BAC2                            sub_72878:				; XREF: sub_72850
0008BAC2 0895 0001                  		bclr	#1,(a5)
0008BAC6 286D 0004                  		movea.l	4(a5),a4
0008BACA                            
0008BACA                            loc_72880:
0008BACA 7A00                       		moveq	#0,d5
0008BACC 1A1C                       		move.b	(a4)+,d5
0008BACE 0C05 00E0                  		cmpi.b	#$E0,d5
0008BAD2 6500                       		bcs.s	loc_72890
0008BAD4 4EBA 0000                  		jsr	sub_72A5A(pc)
0008BAD8 60F0                       		bra.s	loc_72880
0008BADA                            ; ===========================================================================
0008BADA                            
0008BADA                            loc_72890:
0008BADA 4A05                       		tst.b	d5
0008BADC 6A00                       		bpl.s	loc_728A4
0008BADE 4EBA 0000                  		jsr	sub_728AC(pc)
0008BAE2 1A1C                       		move.b	(a4)+,d5
0008BAE4 4A05                       		tst.b	d5
0008BAE6 6A00                       		bpl.s	loc_728A4
0008BAE8 534C                       		subq.w	#1,a4
0008BAEA 6000 F45C                  		bra.w	sub_71D60
0008BAEE                            ; ===========================================================================
0008BAEE                            
0008BAEE                            loc_728A4:
0008BAEE 4EBA F438                  		jsr	sub_71D40(pc)
0008BAF2 6000 F454                  		bra.w	sub_71D60
0008BAF6                            ; End of function sub_72878
0008BAF6                            
0008BAF6                            
0008BAF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BAF6                            
0008BAF6                            
0008BAF6                            sub_728AC:				; XREF: sub_72878
0008BAF6 0405 0081                  		subi.b	#$81,d5
0008BAFA 6500                       		bcs.s	loc_728CA
0008BAFC DA2D 0008                  		add.b	8(a5),d5
0008BB00 0245 007F                  		andi.w	#$7F,d5
0008BB04 E34D                       		lsl.w	#1,d5
0008BB06 41FA 0000                  		lea	word_729CE(pc),a0
0008BB0A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008BB10 6000 F436                  		bra.w	sub_71D60
0008BB14                            ; ===========================================================================
0008BB14                            
0008BB14                            loc_728CA:
0008BB14 08D5 0001                  		bset	#1,(a5)
0008BB18 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008BB1E 4EBA F428                  		jsr	sub_71D60(pc)
0008BB22 6000 0000                  		bra.w	sub_729A0
0008BB26                            ; End of function sub_728AC
0008BB26                            
0008BB26                            
0008BB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BB26                            
0008BB26                            
0008BB26                            sub_728DC:				; XREF: sub_72850
0008BB26 3C2D 0010                  		move.w	$10(a5),d6
0008BB2A 6B00                       		bmi.s	loc_72920
0008BB2C                            ; End of function sub_728DC
0008BB2C                            
0008BB2C                            
0008BB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BB2C                            
0008BB2C                            
0008BB2C                            sub_728E2:				; XREF: sub_72850
0008BB2C 102D 001E                  		move.b	$1E(a5),d0
0008BB30 4880                       		ext.w	d0
0008BB32 DC40                       		add.w	d0,d6
0008BB34 0815 0002                  		btst	#2,(a5)
0008BB38 6600                       		bne.s	locret_7291E
0008BB3A 0815 0001                  		btst	#1,(a5)
0008BB3E 6600                       		bne.s	locret_7291E
0008BB40 102D 0001                  		move.b	1(a5),d0
0008BB44 0C00 00E0                  		cmpi.b	#$E0,d0
0008BB48 6600                       		bne.s	loc_72904
0008BB4A 103C 00C0                  		move.b	#$C0,d0
0008BB4E                            
0008BB4E                            loc_72904:
0008BB4E 3206                       		move.w	d6,d1
0008BB50 0201 000F                  		andi.b	#$F,d1
0008BB54 8001                       		or.b	d1,d0
0008BB56 E84E                       		lsr.w	#4,d6
0008BB58 0206 003F                  		andi.b	#$3F,d6
0008BB5C 13C0 00C0 0011             		move.b	d0,($C00011).l
0008BB62 13C6 00C0 0011             		move.b	d6,($C00011).l
0008BB68                            
0008BB68                            locret_7291E:
0008BB68 4E75                       		rts	
0008BB6A                            ; End of function sub_728E2
0008BB6A                            
0008BB6A                            ; ===========================================================================
0008BB6A                            
0008BB6A                            loc_72920:				; XREF: sub_728DC
0008BB6A 08D5 0001                  		bset	#1,(a5)
0008BB6E 4E75                       		rts	
0008BB70                            
0008BB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BB70                            
0008BB70                            
0008BB70                            sub_72926:				; XREF: sub_72850
0008BB70 4A2D 000B                  		tst.b	$B(a5)
0008BB74 6700 0000                  		beq.w	locret_7298A
0008BB78                            
0008BB78                            loc_7292E:				; XREF: sub_72850
0008BB78 1C2D 0009                  		move.b	9(a5),d6
0008BB7C 7000                       		moveq	#0,d0
0008BB7E 102D 000B                  		move.b	$B(a5),d0
0008BB82 6700                       		beq.s	sub_7296A
0008BB84 2079 0008 AB94             		movea.l	(Go_PSGIndex).l,a0
0008BB8A 5340                       		subq.w	#1,d0
0008BB8C E548                       		lsl.w	#2,d0
0008BB8E 2070 0000                  		movea.l	(a0,d0.w),a0
0008BB92 102D 000C                  		move.b	$C(a5),d0
0008BB96 1030 0000                  		move.b	(a0,d0.w),d0
0008BB9A 522D 000C                  		addq.b	#1,$C(a5)
0008BB9E 0800 0007                  		btst	#7,d0
0008BBA2 6700                       		beq.s	loc_72960
0008BBA4 0C00 0080                  		cmpi.b	#$80,d0
0008BBA8 6700                       		beq.s	loc_7299A
0008BBAA                            
0008BBAA                            loc_72960:
0008BBAA DC40                       		add.w	d0,d6
0008BBAC 0C06 0010                  		cmpi.b	#$10,d6
0008BBB0 6500                       		bcs.s	sub_7296A
0008BBB2 7C0F                       		moveq	#$F,d6
0008BBB4                            ; End of function sub_72926
0008BBB4                            
0008BBB4                            
0008BBB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BBB4                            
0008BBB4                            
0008BBB4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0008BBB4 0815 0001                  		btst	#1,(a5)
0008BBB8 6600                       		bne.s	locret_7298A
0008BBBA 0815 0002                  		btst	#2,(a5)
0008BBBE 6600                       		bne.s	locret_7298A
0008BBC0 0815 0004                  		btst	#4,(a5)
0008BBC4 6600                       		bne.s	loc_7298C
0008BBC6                            
0008BBC6                            loc_7297C:
0008BBC6 8C2D 0001                  		or.b	1(a5),d6
0008BBCA 0606 0010                  		addi.b	#$10,d6
0008BBCE 13C6 00C0 0011             		move.b	d6,($C00011).l
0008BBD4                            
0008BBD4                            locret_7298A:
0008BBD4 4E75                       		rts	
0008BBD6                            ; ===========================================================================
0008BBD6                            
0008BBD6                            loc_7298C:
0008BBD6 4A2D 0013                  		tst.b	$13(a5)
0008BBDA 67EA                       		beq.s	loc_7297C
0008BBDC 4A2D 0012                  		tst.b	$12(a5)
0008BBE0 66E4                       		bne.s	loc_7297C
0008BBE2 4E75                       		rts	
0008BBE4                            ; End of function sub_7296A
0008BBE4                            
0008BBE4                            ; ===========================================================================
0008BBE4                            
0008BBE4                            loc_7299A:				; XREF: sub_72926
0008BBE4 532D 000C                  		subq.b	#1,$C(a5)
0008BBE8 4E75                       		rts	
0008BBEA                            
0008BBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BBEA                            
0008BBEA                            
0008BBEA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0008BBEA 0815 0002                  		btst	#2,(a5)
0008BBEE 6600                       		bne.s	locret_729B4
0008BBF0                            
0008BBF0                            loc_729A6:				; XREF: Snd_FadeOut2
0008BBF0 102D 0001                  		move.b	1(a5),d0
0008BBF4 0000 001F                  		ori.b	#$1F,d0
0008BBF8 13C0 00C0 0011             		move.b	d0,($C00011).l
0008BBFE                            
0008BBFE                            locret_729B4:
0008BBFE 4E75                       		rts	
0008BC00                            ; End of function sub_729A0
0008BC00                            
0008BC00                            
0008BC00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BC00                            
0008BC00                            
0008BC00                            sub_729B6:				; XREF: loc_71E7C
0008BC00 41F9 00C0 0011             		lea	($C00011).l,a0
0008BC06 10BC 009F                  		move.b	#$9F,(a0)
0008BC0A 10BC 00BF                  		move.b	#$BF,(a0)
0008BC0E 10BC 00DF                  		move.b	#$DF,(a0)
0008BC12 10BC 00FF                  		move.b	#$FF,(a0)
0008BC16 4E75                       		rts	
0008BC18                            ; End of function sub_729B6
0008BC18                            
0008BC18                            ; ===========================================================================
0008BC18 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0008BC2A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008BC3C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008BC50 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0008BC64 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0008BC78 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008BC8C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008BCA0 0011 0000                  		dc.w $11, 0
0008BCA4                            
0008BCA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BCA4                            
0008BCA4                            
0008BCA4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008BCA4 0445 00E0                  		subi.w	#$E0,d5
0008BCA8 E54D                       		lsl.w	#2,d5
0008BCAA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008BCAE                            ; End of function sub_72A5A
0008BCAE                            
0008BCAE                            ; ===========================================================================
0008BCAE                            
0008BCAE                            loc_72A64:
0008BCAE 6000 0000                  		bra.w	loc_72ACC
0008BCB2                            ; ===========================================================================
0008BCB2 6000 0000                  		bra.w	loc_72AEC
0008BCB6                            ; ===========================================================================
0008BCB6 6000 0000                  		bra.w	loc_72AF2
0008BCBA                            ; ===========================================================================
0008BCBA 6000 0000                  		bra.w	loc_72AF8
0008BCBE                            ; ===========================================================================
0008BCBE 6000 0000                  		bra.w	loc_72B14
0008BCC2                            ; ===========================================================================
0008BCC2 6000 0000                  		bra.w	loc_72B9E
0008BCC6                            ; ===========================================================================
0008BCC6 6000 0000                  		bra.w	loc_72BA4
0008BCCA                            ; ===========================================================================
0008BCCA 6000 0000                  		bra.w	loc_72BAE
0008BCCE                            ; ===========================================================================
0008BCCE 6000 0000                  		bra.w	loc_72BB4
0008BCD2                            ; ===========================================================================
0008BCD2 6000 0000                  		bra.w	loc_72BBE
0008BCD6                            ; ===========================================================================
0008BCD6 6000 0000                  		bra.w	loc_72BC6
0008BCDA                            ; ===========================================================================
0008BCDA 6000 0000                  		bra.w	loc_72BD0
0008BCDE                            ; ===========================================================================
0008BCDE 6000 0000                  		bra.w	loc_72BE6
0008BCE2                            ; ===========================================================================
0008BCE2 6000 0000                  		bra.w	loc_72BEE
0008BCE6                            ; ===========================================================================
0008BCE6 6000 0000                  		bra.w	loc_72BF4
0008BCEA                            ; ===========================================================================
0008BCEA 6000 0000                  		bra.w	loc_72C26
0008BCEE                            ; ===========================================================================
0008BCEE 6000 0000                  		bra.w	loc_72D30
0008BCF2                            ; ===========================================================================
0008BCF2 6000 0000                  		bra.w	loc_72D52
0008BCF6                            ; ===========================================================================
0008BCF6 6000 0000                  		bra.w	loc_72D58
0008BCFA                            ; ===========================================================================
0008BCFA 6000 0000                  		bra.w	loc_72E06
0008BCFE                            ; ===========================================================================
0008BCFE 6000 0000                  		bra.w	loc_72E20
0008BD02                            ; ===========================================================================
0008BD02 6000 0000                  		bra.w	loc_72E26
0008BD06                            ; ===========================================================================
0008BD06 6000 0000                  		bra.w	loc_72E2C
0008BD0A                            ; ===========================================================================
0008BD0A 6000 0000                  		bra.w	loc_72E38
0008BD0E                            ; ===========================================================================
0008BD0E 6000 0000                  		bra.w	loc_72E52
0008BD12                            ; ===========================================================================
0008BD12 6000 0000                  		bra.w	loc_72E64
0008BD16                            ; ===========================================================================
0008BD16                            
0008BD16                            loc_72ACC:				; XREF: loc_72A64
0008BD16 121C                       		move.b	(a4)+,d1
0008BD18 4A2D 0001                  		tst.b	1(a5)
0008BD1C 6B00                       		bmi.s	locret_72AEA
0008BD1E 102D 000A                  		move.b	$A(a5),d0
0008BD22 0200 0037                  		andi.b	#$37,d0
0008BD26 8200                       		or.b	d0,d1
0008BD28 1B41 000A                  		move.b	d1,$A(a5)
0008BD2C 103C 00B4                  		move.b	#$B4,d0
0008BD30 6000 FC2E                  		bra.w	loc_72716
0008BD34                            ; ===========================================================================
0008BD34                            
0008BD34                            locret_72AEA:
0008BD34 4E75                       		rts	
0008BD36                            ; ===========================================================================
0008BD36                            
0008BD36                            loc_72AEC:				; XREF: loc_72A64
0008BD36 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008BD3A 4E75                       		rts	
0008BD3C                            ; ===========================================================================
0008BD3C                            
0008BD3C                            loc_72AF2:				; XREF: loc_72A64
0008BD3C 1D5C 0007                  		move.b	(a4)+,7(a6)
0008BD40 4E75                       		rts	
0008BD42                            ; ===========================================================================
0008BD42                            
0008BD42                            loc_72AF8:				; XREF: loc_72A64
0008BD42 7000                       		moveq	#0,d0
0008BD44 102D 000D                  		move.b	$D(a5),d0
0008BD48 2875 0000                  		movea.l	(a5,d0.w),a4
0008BD4C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0008BD54 544C                       		addq.w	#2,a4
0008BD56 5800                       		addq.b	#4,d0
0008BD58 1B40 000D                  		move.b	d0,$D(a5)
0008BD5C 4E75                       		rts	
0008BD5E                            ; ===========================================================================
0008BD5E                            
0008BD5E                            loc_72B14:				; XREF: loc_72A64
0008BD5E 204E                       		movea.l	a6,a0
0008BD60 43EE 03A0                  		lea	$3A0(a6),a1
0008BD64 303C 0087                  		move.w	#$87,d0
0008BD68                            
0008BD68                            loc_72B1E:
0008BD68 20D9                       		move.l	(a1)+,(a0)+
0008BD6A 51C8 FFFC                  		dbf	d0,loc_72B1E
0008BD6E                            
0008BD6E 08EE 0002 0040             		bset	#2,$40(a6)
0008BD74 264D                       		movea.l	a5,a3
0008BD76 1C3C 0028                  		move.b	#$28,d6
0008BD7A 9C2E 0026                  		sub.b	$26(a6),d6
0008BD7E 7E05                       		moveq	#5,d7
0008BD80 4BEE 0070                  		lea	$70(a6),a5
0008BD84                            
0008BD84                            loc_72B3A:
0008BD84 0815 0007                  		btst	#7,(a5)
0008BD88 6700                       		beq.s	loc_72B5C
0008BD8A 08D5 0001                  		bset	#1,(a5)
0008BD8E DD2D 0009                  		add.b	d6,9(a5)
0008BD92 0815 0002                  		btst	#2,(a5)
0008BD96 6600                       		bne.s	loc_72B5C
0008BD98 7000                       		moveq	#0,d0
0008BD9A 102D 000B                  		move.b	$B(a5),d0
0008BD9E 226E 0018                  		movea.l	$18(a6),a1
0008BDA2 4EBA 0000                  		jsr	sub_72C4E(pc)
0008BDA6                            
0008BDA6                            loc_72B5C:
0008BDA6 DAFC 0030                  		adda.w	#$30,a5
0008BDAA 51CF FFD8                  		dbf	d7,loc_72B3A
0008BDAE                            
0008BDAE 7E02                       		moveq	#2,d7
0008BDB0                            
0008BDB0                            loc_72B66:
0008BDB0 0815 0007                  		btst	#7,(a5)
0008BDB4 6700                       		beq.s	loc_72B78
0008BDB6 08D5 0001                  		bset	#1,(a5)
0008BDBA 4EBA FE2E                  		jsr	sub_729A0(pc)
0008BDBE DD2D 0009                  		add.b	d6,9(a5)
0008BDC2                            
0008BDC2                            loc_72B78:
0008BDC2 DAFC 0030                  		adda.w	#$30,a5
0008BDC6 51CF FFE8                  		dbf	d7,loc_72B66
0008BDCA 2A4B                       		movea.l	a3,a5
0008BDCC 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
0008BDD0 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
0008BDD2                            
0008BDD2 702B                       		moveq	#$2B,d0			; DAC enable/disable register
0008BDD4 7200                       		moveq	#0,d1			; Disable DAC
0008BDD6 4EBA FBA0                  		jsr	sub_7272E(pc)
0008BDDA                            
0008BDDA                            Restore_NoFM6
0008BDDA 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008BDE0 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008BDE6 422E 0027                  		clr.b	$27(a6)
0008BDEA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0008BDF2 504F                       		addq.w	#8,sp
0008BDF4 4E75                       		rts	
0008BDF6                            ; ===========================================================================
0008BDF6                            
0008BDF6                            loc_72B9E:				; XREF: loc_72A64
0008BDF6 1B5C 0002                  		move.b	(a4)+,2(a5)
0008BDFA 4E75                       		rts	
0008BDFC                            ; ===========================================================================
0008BDFC                            
0008BDFC                            loc_72BA4:				; XREF: loc_72A64
0008BDFC 101C                       		move.b	(a4)+,d0
0008BDFE D12D 0009                  		add.b	d0,9(a5)
0008BE02 6000 0000                  		bra.w	sub_72CB4
0008BE06                            ; ===========================================================================
0008BE06                            
0008BE06                            loc_72BAE:				; XREF: loc_72A64
0008BE06 08D5 0004                  		bset	#4,(a5)
0008BE0A 4E75                       		rts	
0008BE0C                            ; ===========================================================================
0008BE0C                            
0008BE0C                            loc_72BB4:				; XREF: loc_72A64
0008BE0C 1B54 0012                  		move.b	(a4),$12(a5)
0008BE10 1B5C 0013                  		move.b	(a4)+,$13(a5)
0008BE14 4E75                       		rts	
0008BE16                            ; ===========================================================================
0008BE16                            
0008BE16                            loc_72BBE:				; XREF: loc_72A64
0008BE16 101C                       		move.b	(a4)+,d0
0008BE18 D12D 0008                  		add.b	d0,8(a5)
0008BE1C 4E75                       		rts	
0008BE1E                            ; ===========================================================================
0008BE1E                            
0008BE1E                            loc_72BC6:				; XREF: loc_72A64
0008BE1E 1D54 0002                  		move.b	(a4),2(a6)
0008BE22 1D5C 0001                  		move.b	(a4)+,1(a6)
0008BE26 4E75                       		rts	
0008BE28                            ; ===========================================================================
0008BE28                            
0008BE28                            loc_72BD0:				; XREF: loc_72A64
0008BE28 41EE 0040                  		lea	$40(a6),a0
0008BE2C 101C                       		move.b	(a4)+,d0
0008BE2E 7230                       		moveq	#$30,d1
0008BE30 7409                       		moveq	#9,d2
0008BE32                            
0008BE32                            loc_72BDA:
0008BE32 1140 0002                  		move.b	d0,2(a0)
0008BE36 D0C1                       		adda.w	d1,a0
0008BE38 51CA FFF8                  		dbf	d2,loc_72BDA
0008BE3C                            
0008BE3C 4E75                       		rts	
0008BE3E                            ; ===========================================================================
0008BE3E                            
0008BE3E                            loc_72BE6:				; XREF: loc_72A64
0008BE3E 101C                       		move.b	(a4)+,d0
0008BE40 D12D 0009                  		add.b	d0,9(a5)
0008BE44 4E75                       		rts	
0008BE46                            ; ===========================================================================
0008BE46                            
0008BE46                            loc_72BEE:				; XREF: loc_72A64
0008BE46 422E 002C                  		clr.b	$2C(a6)
0008BE4A 4E75                       		rts	
0008BE4C                            ; ===========================================================================
0008BE4C                            
0008BE4C                            loc_72BF4:				; XREF: loc_72A64
0008BE4C 0895 0007                  		bclr	#7,(a5)
0008BE50 0895 0004                  		bclr	#4,(a5)
0008BE54 4EBA FAF2                  		jsr	sub_726FE(pc)
0008BE58 4A2E 0250                  		tst.b	$250(a6)
0008BE5C 6B00                       		bmi.s	loc_72C22
0008BE5E 264D                       		movea.l	a5,a3
0008BE60 4BEE 0100                  		lea	$100(a6),a5
0008BE64 226E 0018                  		movea.l	$18(a6),a1
0008BE68 0895 0002                  		bclr	#2,(a5)
0008BE6C 08D5 0001                  		bset	#1,(a5)
0008BE70 102D 000B                  		move.b	$B(a5),d0
0008BE74 4EBA 0000                  		jsr	sub_72C4E(pc)
0008BE78 2A4B                       		movea.l	a3,a5
0008BE7A                            
0008BE7A                            loc_72C22:
0008BE7A 504F                       		addq.w	#8,sp
0008BE7C 4E75                       		rts	
0008BE7E                            ; ===========================================================================
0008BE7E                            
0008BE7E                            loc_72C26:				; XREF: loc_72A64
0008BE7E 7000                       		moveq	#0,d0
0008BE80 101C                       		move.b	(a4)+,d0
0008BE82 1B40 000B                  		move.b	d0,$B(a5)
0008BE86 0815 0002                  		btst	#2,(a5)
0008BE8A 6600 0000                  		bne.w	locret_72CAA
0008BE8E 226E 0018                  		movea.l	$18(a6),a1
0008BE92 4A2E 000E                  		tst.b	$E(a6)
0008BE96 6700                       		beq.s	sub_72C4E
0008BE98 226D 0020                  		movea.l	$20(a5),a1
0008BE9C 4A2E 000E                  		tst.b	$E(a6)
0008BEA0 6B00                       		bmi.s	sub_72C4E
0008BEA2 226E 0020                  		movea.l	$20(a6),a1
0008BEA6                            
0008BEA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BEA6                            
0008BEA6                            
0008BEA6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008BEA6 5340                       		subq.w	#1,d0
0008BEA8 6B00                       		bmi.s	loc_72C5C
0008BEAA 323C 0019                  		move.w	#$19,d1
0008BEAE                            
0008BEAE                            loc_72C56:
0008BEAE D2C1                       		adda.w	d1,a1
0008BEB0 51C8 FFFC                  		dbf	d0,loc_72C56
0008BEB4                            
0008BEB4                            loc_72C5C:
0008BEB4 1219                       		move.b	(a1)+,d1
0008BEB6 1B41 001F                  		move.b	d1,$1F(a5)
0008BEBA 1801                       		move.b	d1,d4
0008BEBC 103C 00B0                  		move.b	#$B0,d0
0008BEC0 4EBA FAAA                  		jsr	sub_72722(pc)
0008BEC4 45FA 0000                  		lea	byte_72D18(pc),a2
0008BEC8 7613                       		moveq	#$13,d3
0008BECA                            
0008BECA                            loc_72C72:
0008BECA 101A                       		move.b	(a2)+,d0
0008BECC 1219                       		move.b	(a1)+,d1
0008BECE 4EBA FA9C                  		jsr	sub_72722(pc)
0008BED2 51CB FFF6                  		dbf	d3,loc_72C72
0008BED6 7A03                       		moveq	#3,d5
0008BED8 0244 0007                  		andi.w	#7,d4
0008BEDC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008BEE0 162D 0009                  		move.b	9(a5),d3
0008BEE4                            
0008BEE4                            loc_72C8C:
0008BEE4 101A                       		move.b	(a2)+,d0
0008BEE6 1219                       		move.b	(a1)+,d1
0008BEE8 E20C                       		lsr.b	#1,d4
0008BEEA 6400                       		bcc.s	loc_72C96
0008BEEC D203                       		add.b	d3,d1
0008BEEE                            
0008BEEE                            loc_72C96:
0008BEEE 4EBA FA7C                  		jsr	sub_72722(pc)
0008BEF2 51CD FFF0                  		dbf	d5,loc_72C8C
0008BEF6 103C 00B4                  		move.b	#$B4,d0
0008BEFA 122D 000A                  		move.b	$A(a5),d1
0008BEFE 4EBA FA6C                  		jsr	sub_72722(pc)
0008BF02                            
0008BF02                            locret_72CAA:
0008BF02 4E75                       		rts	
0008BF04                            ; End of function sub_72C4E
0008BF04                            
0008BF04                            ; ===========================================================================
0008BF04 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008BF0C                            
0008BF0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008BF0C                            
0008BF0C                            
0008BF0C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008BF0C 0815 0002                  		btst	#2,(a5)
0008BF10 6600                       		bne.s	locret_72D16
0008BF12 7000                       		moveq	#0,d0
0008BF14 102D 000B                  		move.b	$B(a5),d0
0008BF18 226E 0018                  		movea.l	$18(a6),a1
0008BF1C 4A2E 000E                  		tst.b	$E(a6)
0008BF20 6700                       		beq.s	loc_72CD8
0008BF22 226E 0020                  		movea.l	$20(a6),a1
0008BF26 4A2E 000E                  		tst.b	$E(a6)
0008BF2A 6B00                       		bmi.s	loc_72CD8
0008BF2C 226E 0020                  		movea.l	$20(a6),a1
0008BF30                            
0008BF30                            loc_72CD8:
0008BF30 5340                       		subq.w	#1,d0
0008BF32 6B00                       		bmi.s	loc_72CE6
0008BF34 323C 0019                  		move.w	#$19,d1
0008BF38                            
0008BF38                            loc_72CE0:
0008BF38 D2C1                       		adda.w	d1,a1
0008BF3A 51C8 FFFC                  		dbf	d0,loc_72CE0
0008BF3E                            
0008BF3E                            loc_72CE6:
0008BF3E D2FC 0015                  		adda.w	#$15,a1
0008BF42 45FA 0000                  		lea	byte_72D2C(pc),a2
0008BF46 102D 001F                  		move.b	$1F(a5),d0
0008BF4A 0240 0007                  		andi.w	#7,d0
0008BF4E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008BF52 162D 0009                  		move.b	9(a5),d3
0008BF56 6B00                       		bmi.s	locret_72D16
0008BF58 7A03                       		moveq	#3,d5
0008BF5A                            
0008BF5A                            loc_72D02:
0008BF5A 101A                       		move.b	(a2)+,d0
0008BF5C 1219                       		move.b	(a1)+,d1
0008BF5E E20C                       		lsr.b	#1,d4
0008BF60 6400                       		bcc.s	loc_72D12
0008BF62 D203                       		add.b	d3,d1
0008BF64 6500                       		bcs.s	loc_72D12
0008BF66 4EBA FA04                  		jsr	sub_72722(pc)
0008BF6A                            
0008BF6A                            loc_72D12:
0008BF6A 51CD FFEE                  		dbf	d5,loc_72D02
0008BF6E                            
0008BF6E                            locret_72D16:
0008BF6E 4E75                       		rts	
0008BF70                            ; End of function sub_72CB4
0008BF70                            
0008BF70                            ; ===========================================================================
0008BF70 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008BF7A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008BF84 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008BF88                            ; ===========================================================================
0008BF88                            
0008BF88                            loc_72D30:				; XREF: loc_72A64
0008BF88 08D5 0003                  		bset	#3,(a5)
0008BF8C 2B4C 0014                  		move.l	a4,$14(a5)
0008BF90 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008BF94 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008BF98 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008BF9C 101C                       		move.b	(a4)+,d0
0008BF9E E208                       		lsr.b	#1,d0
0008BFA0 1B40 001B                  		move.b	d0,$1B(a5)
0008BFA4 426D 001C                  		clr.w	$1C(a5)
0008BFA8 4E75                       		rts	
0008BFAA                            ; ===========================================================================
0008BFAA                            
0008BFAA                            loc_72D52:				; XREF: loc_72A64
0008BFAA 08D5 0003                  		bset	#3,(a5)
0008BFAE 4E75                       		rts	
0008BFB0                            ; ===========================================================================
0008BFB0                            
0008BFB0                            loc_72D58:				; XREF: loc_72A64
0008BFB0 0895 0007                  		bclr	#7,(a5)
0008BFB4 0895 0004                  		bclr	#4,(a5)
0008BFB8 4A2D 0001                  		tst.b	1(a5)
0008BFBC 6B00                       		bmi.s	loc_72D74
0008BFBE 4A2E 0008                  		tst.b	8(a6)
0008BFC2 6B00 0000                  		bmi.w	loc_72E02
0008BFC6 4EBA F980                  		jsr	sub_726FE(pc)
0008BFCA 6000                       		bra.s	loc_72D78
0008BFCC                            ; ===========================================================================
0008BFCC                            
0008BFCC                            loc_72D74:
0008BFCC 4EBA FC1C                  		jsr	sub_729A0(pc)
0008BFD0                            
0008BFD0                            loc_72D78:
0008BFD0 4A2E 000E                  		tst.b	$E(a6)
0008BFD4 6A00 0000                  		bpl.w	loc_72E02
0008BFD8 4216                       		clr.b	0(a6)
0008BFDA 7000                       		moveq	#0,d0
0008BFDC 102D 0001                  		move.b	1(a5),d0
0008BFE0 6B00                       		bmi.s	loc_72DCC
0008BFE2 41FA F520                  		lea	dword_722CC(pc),a0
0008BFE6 264D                       		movea.l	a5,a3
0008BFE8 0C00 0004                  		cmpi.b	#4,d0
0008BFEC 6600                       		bne.s	loc_72DA8
0008BFEE 4A2E 0340                  		tst.b	$340(a6)
0008BFF2 6A00                       		bpl.s	loc_72DA8
0008BFF4 4BEE 0340                  		lea	$340(a6),a5
0008BFF8 226E 0020                  		movea.l	$20(a6),a1
0008BFFC 6000                       		bra.s	loc_72DB8
0008BFFE                            ; ===========================================================================
0008BFFE                            
0008BFFE                            loc_72DA8:
0008BFFE 5500                       		subq.b	#2,d0
0008C000 E508                       		lsl.b	#2,d0
0008C002 2A70 0000                  		movea.l	(a0,d0.w),a5
0008C006 4A15                       		tst.b	(a5)
0008C008 6A00                       		bpl.s	loc_72DC8
0008C00A 226E 0018                  		movea.l	$18(a6),a1
0008C00E                            
0008C00E                            loc_72DB8:
0008C00E 0895 0002                  		bclr	#2,(a5)
0008C012 08D5 0001                  		bset	#1,(a5)
0008C016 102D 000B                  		move.b	$B(a5),d0
0008C01A 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008C01E                            
0008C01E                            loc_72DC8:
0008C01E 2A4B                       		movea.l	a3,a5
0008C020 6000                       		bra.s	loc_72E02
0008C022                            ; ===========================================================================
0008C022                            
0008C022                            loc_72DCC:
0008C022 41EE 0370                  		lea	$370(a6),a0
0008C026 4A10                       		tst.b	(a0)
0008C028 6A00                       		bpl.s	loc_72DE0
0008C02A 0C00 00E0                  		cmpi.b	#$E0,d0
0008C02E 6700                       		beq.s	loc_72DEA
0008C030 0C00 00C0                  		cmpi.b	#$C0,d0
0008C034 6700                       		beq.s	loc_72DEA
0008C036                            
0008C036                            loc_72DE0:
0008C036 41FA F4CC                  		lea	dword_722CC(pc),a0
0008C03A E608                       		lsr.b	#3,d0
0008C03C 2070 0000                  		movea.l	(a0,d0.w),a0
0008C040                            
0008C040                            loc_72DEA:
0008C040 0890 0002                  		bclr	#2,(a0)
0008C044 08D0 0001                  		bset	#1,(a0)
0008C048 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008C04E 6600                       		bne.s	loc_72E02
0008C050 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008C058                            
0008C058                            loc_72E02:
0008C058 504F                       		addq.w	#8,sp
0008C05A 4E75                       		rts	
0008C05C                            ; ===========================================================================
0008C05C                            
0008C05C                            loc_72E06:				; XREF: loc_72A64
0008C05C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0008C062 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0008C066 0815 0002                  		btst	#2,(a5)
0008C06A 6600                       		bne.s	locret_72E1E
0008C06C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0008C074                            
0008C074                            locret_72E1E:
0008C074 4E75                       		rts	
0008C076                            ; ===========================================================================
0008C076                            
0008C076                            loc_72E20:				; XREF: loc_72A64
0008C076 0895 0003                  		bclr	#3,(a5)
0008C07A 4E75                       		rts	
0008C07C                            ; ===========================================================================
0008C07C                            
0008C07C                            loc_72E26:				; XREF: loc_72A64
0008C07C 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008C080 4E75                       		rts	
0008C082                            ; ===========================================================================
0008C082                            
0008C082                            loc_72E2C:				; XREF: loc_72A64
0008C082 101C                       		move.b	(a4)+,d0
0008C084 E148                       		lsl.w	#8,d0
0008C086 101C                       		move.b	(a4)+,d0
0008C088 D8C0                       		adda.w	d0,a4
0008C08A 534C                       		subq.w	#1,a4
0008C08C 4E75                       		rts	
0008C08E                            ; ===========================================================================
0008C08E                            
0008C08E                            loc_72E38:				; XREF: loc_72A64
0008C08E 7000                       		moveq	#0,d0
0008C090 101C                       		move.b	(a4)+,d0
0008C092 121C                       		move.b	(a4)+,d1
0008C094 4A35 0024                  		tst.b	$24(a5,d0.w)
0008C098 6600                       		bne.s	loc_72E48
0008C09A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008C09E                            
0008C09E                            loc_72E48:
0008C09E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008C0A2 66DE                       		bne.s	loc_72E2C
0008C0A4 544C                       		addq.w	#2,a4
0008C0A6 4E75                       		rts	
0008C0A8                            ; ===========================================================================
0008C0A8                            
0008C0A8                            loc_72E52:				; XREF: loc_72A64
0008C0A8 7000                       		moveq	#0,d0
0008C0AA 102D 000D                  		move.b	$D(a5),d0
0008C0AE 5900                       		subq.b	#4,d0
0008C0B0 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008C0B4 1B40 000D                  		move.b	d0,$D(a5)
0008C0B8 60C8                       		bra.s	loc_72E2C
0008C0BA                            ; ===========================================================================
0008C0BA                            
0008C0BA                            loc_72E64:				; XREF: loc_72A64
0008C0BA 103C 0088                  		move.b	#$88,d0
0008C0BE 123C 000F                  		move.b	#$F,d1
0008C0C2 4EBA F8B4                  		jsr	sub_7272E(pc)
0008C0C6 103C 008C                  		move.b	#$8C,d0
0008C0CA 123C 000F                  		move.b	#$F,d1
0008C0CE 6000 F8A8                  		bra.w	sub_7272E
0008C0D2                            ; ===========================================================================
0008C0D2                            Kos_Z80:	include    'MegaPCM.asm'
0008C0D2                            
0008C0D2                            ; ===============================================================
0008C0D2                            ; Mega PCM Driver Include File
0008C0D2                            ; (c) 2012, Vladikcomper
0008C0D2                            ; ===============================================================
0008C0D2                            
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            ; Variables used in DAC table
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            
0008C0D2                            ; flags
0008C0D2 =000000C0                  panLR	= $C0
0008C0D2 =00000080                  panL	= $80
0008C0D2 =00000040                  panR	= $40
0008C0D2 =00000000                  pcm	= 0
0008C0D2 =00000004                  dpcm	= 4
0008C0D2 =00000002                  loop	= 2
0008C0D2 =00000001                  pri	= 1
0008C0D2                            
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            ; Macros
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            
0008C0D2                            z80word macro Value
0008C0D2                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
0008C0D2                            	endm
0008C0D2                            
0008C0D2                            DAC_Entry macro Pitch,Offset,Flags
0008C0D2                            	dc.b	\Flags			; 00h	- Flags
0008C0D2                            	dc.b	\Pitch			; 01h	- Pitch
0008C0D2                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
0008C0D2                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
0008C0D2                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
0008C0D2                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
0008C0D2                            	endm
0008C0D2                            	
0008C0D2                            IncludeDAC macro Name,Extension
0008C0D2                            \Name:
0008C0D2                            	if strcmp('\extension','wav')
0008C0D2                            		incbin	'dac/\Name\.\Extension\',$3A
0008C0D2                            	else
0008C0D2                            		incbin	'dac/\Name\.\Extension\'
0008C0D2                            	endc
0008C0D2                            \Name\_End:
0008C0D2                            	endm
0008C0D2                            
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            ; Driver's code
0008C0D2                            ; ---------------------------------------------------------------
0008C0D2                            
0008C0D2                            MegaPCM:
0008C0D2                            	incbin	'MegaPCM.z80'
0008C2E2                            
0008C2E2                            ; ---------------------------------------------------------------
0008C2E2                            ; DAC Samples Table
0008C2E2                            ; ---------------------------------------------------------------
0008C2E2                            
0008C2E2 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
0008C2EA 0408 0000 0000 0000        	DAC_Entry	$08, Snare, dpcm		; $82	- Snare
0008C2F2 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
0008C2FA 0408 0000 0000 0000        	DAC_Entry	$08, bah, dpcm			; $84	- Timpani
0008C302 0408 0000 0000 0000        	DAC_Entry	$08, grunt, dpcm		; $85	- <Free>
0008C30A 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
0008C312 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
0008C31A 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
0008C322 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
0008C32A 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
0008C332 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
0008C33A                            
0008C33A                            MegaPCM_End:
0008C33A                            
0008C33A                            ; ---------------------------------------------------------------
0008C33A                            ; DAC Samples Files
0008C33A                            ; ---------------------------------------------------------------
0008C33A                            
00095D18                            	even
00095D18                            
00095D18                            
00095D18                            
00095D18                            Music81:	incbin	"sound\Mind In The Gutter I.bin"
000970C6                            		even
000970C6                            Music82:	incbin	"sound\I Died On Jeopardy.bin"
00097C64                            		even
00097C64                            Music83:	incbin	"sound\Tutorial With Attitude.bin"
000991E8                            		even
000991E8                            Music84:	incbin	sound\music84.bin
00099656                            		even
00099656                            Music85:	incbin	sound\music85.bin
00099AA2                            		even
00099AA2                            Music86:	incbin	sound\music86.bin
00099FF2                            		even
00099FF2                            Music87:	incbin	sound\Jeopardyinv.bin
0009A4CC                            		even
0009A4CC                            Music88:	incbin	sound\music88.bin
0009A5BA                            		even
0009A5BA                            Music89:	incbin	sound\music89.bin
0009A8E6                            		even
0009A8E6                            Music8A:	incbin	sound\Jeopardy.bin
0009ADEE 00                         		even
0009ADEE                            Music8B:	incbin	sound\music8B.bin
0009B088                            		even
0009B088                            Music8C:	incbin	sound\music8C.bin
0009BC3A 00                         		even
0009BC3A                            Music8D:	incbin	sound\music8D.bin
0009BE56                            		even
0009BE56                            Music8E:	incbin	sound\music8E.bin
0009BFAC                            		even
0009BFAC                            Music8F:	incbin	sound\music8F.bin
0009C4B6 00                         		even
0009C4B6                            Music90:	incbin	sound\music90.bin
0009C614                            		even
0009C614                            Music91:	incbin	sound\music91.bin
0009D8E2                            		even
0009D8E2                            Music92:	incbin	sound\music92.bin
0009DA0C                            		even
0009DA0C                            Music93:	incbin	sound\music93.bin
0009DADA                            		even
0009DADA                            Music95:	incbin	sound\SpeedShoes.bin
0009DCC0                            		even
0009DCC0                            Music96:	incbin	sound\SpeedShoesInv.bin
0009DEA6                            		even
0009DEA6                            Music97:	incbin	"sound\Mind In The Gutter II.bin"
0009EDD0                            		even
0009EDD0                            		
0009EDD0                            ; ---------------------------------------------------------------------------
0009EDD0                            ; Sound	effect pointers
0009EDD0                            ; ---------------------------------------------------------------------------
0009EDD0                            SoundIndex:	
0009EDD0 0000 0000 0000 0000 0000+  		dc.l SoundA0, SoundA1, SoundA2
0009EDDC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009EDE8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009EDF4 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009EE00 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009EE0C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009EE18 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009EE24 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009EE30 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009EE3C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009EE48 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009EE54 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009EE60 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009EE6C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009EE78 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009EE84 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009EE90 0000 0000                  SoundD0Index:	dc.l SoundD0
0009EE94                            SoundA0:	incbin	sound\soundA0.bin
0009EEAA                            		even
0009EEAA                            SoundA1:	incbin	sound\soundA1.bin
0009EED4                            		even
0009EED4                            SoundA2:	incbin	sound\soundA2.bin
0009EEF4                            		even
0009EEF4                            SoundA3:	incbin	sound\soundA3.bin
0009EF26                            		even
0009EF26                            SoundA4:	incbin	sound\soundA4.bin
0009EF5C                            		even
0009EF5C                            SoundA5:	incbin	sound\soundA5.bin
0009EF88                            		even
0009EF88                            SoundA6:	incbin	sound\soundA6.bin
0009EFB8                            		even
0009EFB8                            SoundA7:	incbin	sound\soundA7.bin
0009EFE8                            		even
0009EFE8                            SoundA8:	incbin	sound\soundA8.bin
0009F01C                            		even
0009F01C                            SoundA9:	incbin	sound\soundA9.bin
0009F02E                            		even
0009F02E                            SoundAA:	incbin	sound\soundAA.bin
0009F070                            		even
0009F070                            SoundAB:	incbin	sound\soundAB.bin
0009F090                            		even
0009F090                            SoundAC:	incbin	sound\soundAC.bin
0009F0C4                            		even
0009F0C4                            SoundAD:	incbin	sound\soundAD.bin
0009F0FA                            		even
0009F0FA                            SoundAE:	incbin	sound\soundAE.bin
0009F144                            		even
0009F144                            SoundAF:	incbin	sound\soundAF.bin
0009F172                            		even
0009F172                            SoundB0:	incbin	sound\soundB0.bin
0009F1A4                            		even
0009F1A4                            SoundB1:	incbin	sound\soundB1.bin
0009F1D0                            		even
0009F1D0                            SoundB2:	incbin	sound\soundB2.bin
0009F220                            		even
0009F220                            SoundB3:	incbin	sound\soundB3.bin
0009F26A                            		even
0009F26A                            SoundB4:	incbin	sound\soundB4.bin
0009F2C6                            		even
0009F2C6                            SoundB5:	incbin	sound\soundB5.bin
0009F2F4                            		even
0009F2F4                            SoundB6:	incbin	sound\soundB6.bin
0009F312                            		even
0009F312                            SoundB7:	incbin	sound\soundB7.bin
0009F34E                            		even
0009F34E                            SoundB8:	incbin	sound\soundB8.bin
0009F36C                            		even
0009F36C                            SoundB9:	incbin	sound\soundB9.bin
0009F3D0                            		even
0009F3D0                            SoundBA:	incbin	sound\soundBA.bin
0009F3F8                            		even
0009F3F8                            SoundBB:	incbin	sound\soundBB.bin
0009F424                            		even
0009F424                            SoundBC:	incbin	sound\soundBC.bin
0009F466                            		even
0009F466                            SoundBD:	incbin	sound\soundBD.bin
0009F4BA                            		even
0009F4BA                            SoundBE:	incbin	sound\soundBE.bin
0009F4F4                            		even
0009F4F4                            SoundBF:	incbin	sound\soundBF.bin
0009F566                            		even
0009F566                            SoundC0:	incbin	sound\soundC0.bin
0009F594                            		even
0009F594                            SoundC1:	incbin	sound\soundC1.bin
0009F5CE                            		even
0009F5CE                            SoundC2:	incbin	sound\soundC2.bin
0009F5F8                            		even
0009F5F8                            SoundC3:	incbin	sound\soundC3.bin
0009F672                            		even
0009F672                            SoundC4:	incbin	sound\soundC4.bin
0009F69A                            		even
0009F69A                            SoundC5:	incbin	sound\soundC5.bin
0009F702                            		even
0009F702                            SoundC6:	incbin	sound\soundC6.bin
0009F744                            		even
0009F744                            SoundC7:	incbin	sound\soundC7.bin
0009F772                            		even
0009F772                            SoundC8:	incbin	sound\soundC8.bin
0009F784                            		even
0009F784                            SoundC9:	incbin	sound\soundC9.bin
0009F7B2                            		even
0009F7B2                            SoundCA:	incbin	sound\soundCA.bin
0009F7E0                            		even
0009F7E0                            SoundCB:	incbin	sound\soundCB.bin
0009F82C                            		even
0009F82C                            SoundCC:	incbin	sound\soundCC.bin
0009F866                            		even
0009F866                            SoundCD:	incbin	sound\soundCD.bin
0009F874                            		even
0009F874                            SoundCE:	incbin	sound\soundCE.bin
0009F8A2                            		even
0009F8A2                            SoundCF:	incbin	sound\soundCF.bin
0009F8DA                            		even
0009F8DA                            SoundD0:	incbin	sound\soundD0.bin
0009F914                            		even
0009F914                            SoundD1:	incbin	sound\soundD1.bin
0009F950                            		even
0009F950                            SoundD2:	incbin	sound\Gen_Jump.bin
0009F966                            		even
0009F966                            SoundD3:	incbin	sound\PeeloutCharge.bin
0009F9A0 00                         		even
0009F9A0                            SoundD4:	incbin	sound\PeeloutStop.bin
0009F9AC                            		even
0009F9AC                            SoundD5:	incbin	sound\S3K_Shoot.bin
0009F9DA 00                         		even
0009F9DA                            SoundD6:	incbin	sound\Peelout_Release.bin
0009FA72                            		even
0009FA72                            SegaPCM:	incbin	sound\segapcm.bin
000A63EA                            SegaPCM_End	even
000A63EA                            ; ===========================================================================
000A63EA                            Art_Dust	incbin	artunc\spindust.bin
000A7D2A                            ; ===========================================================================
000A7D2A                            
000A7D2A                            LoadDPLC:
000A7D2A 7000                       		moveq	#0,d0
000A7D2C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000A7D30 D040                       		add.w	d0,d0
000A7D32 D4F2 0000                  		adda.w	(a2,d0.w),a2
000A7D36 7A00                       		moveq	#0,d5
000A7D38 1A1A                       		move.b	(a2)+,d5
000A7D3A 5345                       		subq.w	#1,d5
000A7D3C 6B00                       		bmi.s	DPLC_End
000A7D3E                            
000A7D3E                            DPLC_ReadEntry:
000A7D3E 7200                       		moveq	#0,d1
000A7D40 121A                       		move.b	(a2)+,d1
000A7D42 E149                       		lsl.w	#8,d1
000A7D44 121A                       		move.b	(a2)+,d1
000A7D46 3601                       		move.w	d1,d3
000A7D48 E04B                       		lsr.w	#8,d3
000A7D4A 0243 00F0                  		andi.w	#$F0,d3
000A7D4E 0643 0010                  		addi.w	#$10,d3
000A7D52 0241 0FFF                  		andi.w	#$FFF,d1
000A7D56 EB89                       		lsl.l	#5,d1
000A7D58 D286                       		add.l	d6,d1
000A7D5A 3404                       		move.w	d4,d2
000A7D5C D843                       		add.w	d3,d4
000A7D5E D843                       		add.w	d3,d4
000A7D60 4EB9 0000 13BC             		jsr	(QueueDMATransfer).l
000A7D66 51CD FFD6                  		dbf	d5,DPLC_ReadEntry	; repeat for number of entries
000A7D6A                            
000A7D6A                            DPLC_End:
000A7D6A 4E75                       		rts	
000A7D6C                            ; End of function LoadSonicDynPLC
000A7D6C                            
000A7D6C                            ; ===========================================================================
000A7D6C                            Music94:		incbin	"sound\owarisoft logo.bin"
000A7EAA                            		even
000A7EAA                            ;	include "#Owarisoft/main.asm"
000A7EAA                            ;	inform 0,""
000A7EAA                            
000A7EAA                            EndOfRom:
